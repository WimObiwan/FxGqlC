//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g 2012-08-27 17:10:11

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591


// `XXX' does not need a CLSCompliant attribute because the assembly is not marked as CLS-compliant (CS3021)
#pragma warning disable 3021
// The private field `XXX' is assigned but its value is never used (CS0414)
#pragma warning disable 414


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;

namespace  FxGqlLib 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class gqlLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int T__162=162;
	public const int T__163=163;
	public const int T__164=164;
	public const int T__165=165;
	public const int T__166=166;
	public const int T__167=167;
	public const int T__168=168;
	public const int T__169=169;
	public const int T__170=170;
	public const int T__171=171;
	public const int T__172=172;
	public const int T__173=173;
	public const int T__174=174;
	public const int T__175=175;
	public const int T__176=176;
	public const int T__177=177;
	public const int T__178=178;
	public const int T__179=179;
	public const int T__180=180;
	public const int T__181=181;
	public const int T__182=182;
	public const int T__183=183;
	public const int T__184=184;
	public const int T__185=185;
	public const int T__186=186;
	public const int A=4;
	public const int ALL=5;
	public const int AND=6;
	public const int ANY=7;
	public const int AS=8;
	public const int ASC=9;
	public const int B=10;
	public const int BETWEEN=11;
	public const int BY=12;
	public const int C=13;
	public const int CASE=14;
	public const int CAST=15;
	public const int COMMENT_BLOCK=16;
	public const int COMMENT_LINE=17;
	public const int CONVERT=18;
	public const int COUNT=19;
	public const int CREATE=20;
	public const int D=21;
	public const int DATEADD=22;
	public const int DATEDIFF=23;
	public const int DATEPART=24;
	public const int DECLARE=25;
	public const int DESC=26;
	public const int DIGIT=27;
	public const int DISTINCT=28;
	public const int DROP=29;
	public const int E=30;
	public const int ELSE=31;
	public const int END=32;
	public const int EXISTS=33;
	public const int F=34;
	public const int FROM=35;
	public const int G=36;
	public const int GROUP=37;
	public const int H=38;
	public const int HAVING=39;
	public const int I=40;
	public const int IN=41;
	public const int INTO=42;
	public const int J=43;
	public const int K=44;
	public const int L=45;
	public const int LIKE=46;
	public const int M=47;
	public const int MATCH=48;
	public const int N=49;
	public const int NOT=50;
	public const int NUMBER=51;
	public const int O=52;
	public const int OR=53;
	public const int ORDER=54;
	public const int ORIG=55;
	public const int P=56;
	public const int Q=57;
	public const int R=58;
	public const int S=59;
	public const int SELECT=60;
	public const int SET=61;
	public const int SIMPLE_FILE=62;
	public const int SOME=63;
	public const int STRING=64;
	public const int SYSTEMVAR=65;
	public const int T=66;
	public const int TABLE=67;
	public const int THEN=68;
	public const int TOKEN=69;
	public const int TOP=70;
	public const int T_ALL=71;
	public const int T_ALLCOLUMNS=72;
	public const int T_AND=73;
	public const int T_ANY=74;
	public const int T_BETWEEN=75;
	public const int T_BITWISE_AND=76;
	public const int T_BITWISE_NOT=77;
	public const int T_BITWISE_OR=78;
	public const int T_BITWISE_XOR=79;
	public const int T_CASE=80;
	public const int T_CASE_ELSE=81;
	public const int T_CASE_WHEN=82;
	public const int T_COLUMN=83;
	public const int T_COLUMNLIST=84;
	public const int T_CONVERT=85;
	public const int T_COUNT=86;
	public const int T_CREATE_VIEW=87;
	public const int T_DATEPART=88;
	public const int T_DECLARATION=89;
	public const int T_DECLARE=90;
	public const int T_DISTINCT=91;
	public const int T_DISTINCTCOUNT=92;
	public const int T_DIVIDE=93;
	public const int T_DROP_TABLE=94;
	public const int T_DROP_VIEW=95;
	public const int T_EQUAL=96;
	public const int T_EXISTS=97;
	public const int T_EXPRESSIONLIST=98;
	public const int T_FILE=99;
	public const int T_FILEOPTION=100;
	public const int T_FILESUBQUERY=101;
	public const int T_FROM=102;
	public const int T_FUNCTIONCALL=103;
	public const int T_GREATER=104;
	public const int T_GROUPBY=105;
	public const int T_GROUPBY_ORIG=106;
	public const int T_HAVING=107;
	public const int T_IN=108;
	public const int T_INTEGER=109;
	public const int T_INTO=110;
	public const int T_LESS=111;
	public const int T_LIKE=112;
	public const int T_MATCH=113;
	public const int T_MINUS=114;
	public const int T_MODULO=115;
	public const int T_NOT=116;
	public const int T_NOTBETWEEN=117;
	public const int T_NOTEQUAL=118;
	public const int T_NOTGREATER=119;
	public const int T_NOTIN=120;
	public const int T_NOTLESS=121;
	public const int T_NOTLIKE=122;
	public const int T_NOTMATCH=123;
	public const int T_OP_BINARY=124;
	public const int T_OP_UNARY=125;
	public const int T_OR=126;
	public const int T_ORDERBY=127;
	public const int T_ORDERBY_ASC=128;
	public const int T_ORDERBY_COLUMN=129;
	public const int T_ORDERBY_DESC=130;
	public const int T_ORDERBY_ORIG=131;
	public const int T_PLUS=132;
	public const int T_PRODUCT=133;
	public const int T_ROOT=134;
	public const int T_SELECT=135;
	public const int T_SELECT_SIMPLE=136;
	public const int T_SELECT_UNION=137;
	public const int T_SET_VARIABLE=138;
	public const int T_STRING=139;
	public const int T_SUBQUERY=140;
	public const int T_SYSTEMVAR=141;
	public const int T_TABLE_ALIAS=142;
	public const int T_TOP=143;
	public const int T_USE=144;
	public const int T_VARIABLE=145;
	public const int T_VIEW=146;
	public const int T_VIEW_NAME=147;
	public const int T_WHERE=148;
	public const int U=149;
	public const int UNION=150;
	public const int USE=151;
	public const int V=152;
	public const int VARIABLE=153;
	public const int VIEW=154;
	public const int W=155;
	public const int WHEN=156;
	public const int WHERE=157;
	public const int WS=158;
	public const int X=159;
	public const int Y=160;
	public const int Z=161;
	 const int HIDDEN = Hidden; 

    // delegates
    // delegators

	public gqlLexer()
	{
		OnCreated();
	}

	public gqlLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public gqlLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g"; } }

	private static readonly bool[] decisionCanBacktrack = new bool[0];

	[Conditional("ANTLR_TRACE")]
	protected virtual void OnCreated() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__162() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__162() {}

    // $ANTLR start "T__162"
    [GrammarRule("T__162")]
    private void mT__162()
    {
    	EnterRule_T__162();
    	EnterRule("T__162", 1);
    	TraceIn("T__162", 1);
    		try
    		{
    		int _type = T__162;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:16:8: ( '!<' )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:16:10: '!<'
    		{
    		DebugLocation(16, 10);
    		Match("!<"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__162", 1);
    		LeaveRule("T__162", 1);
    		LeaveRule_T__162();
        }
    }
    // $ANTLR end "T__162"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__163() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__163() {}

    // $ANTLR start "T__163"
    [GrammarRule("T__163")]
    private void mT__163()
    {
    	EnterRule_T__163();
    	EnterRule("T__163", 2);
    	TraceIn("T__163", 2);
    		try
    		{
    		int _type = T__163;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:17:8: ( '!=' )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:17:10: '!='
    		{
    		DebugLocation(17, 10);
    		Match("!="); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__163", 2);
    		LeaveRule("T__163", 2);
    		LeaveRule_T__163();
        }
    }
    // $ANTLR end "T__163"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__164() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__164() {}

    // $ANTLR start "T__164"
    [GrammarRule("T__164")]
    private void mT__164()
    {
    	EnterRule_T__164();
    	EnterRule("T__164", 3);
    	TraceIn("T__164", 3);
    		try
    		{
    		int _type = T__164;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:18:8: ( '!>' )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:18:10: '!>'
    		{
    		DebugLocation(18, 10);
    		Match("!>"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__164", 3);
    		LeaveRule("T__164", 3);
    		LeaveRule_T__164();
        }
    }
    // $ANTLR end "T__164"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__165() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__165() {}

    // $ANTLR start "T__165"
    [GrammarRule("T__165")]
    private void mT__165()
    {
    	EnterRule_T__165();
    	EnterRule("T__165", 4);
    	TraceIn("T__165", 4);
    		try
    		{
    		int _type = T__165;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:19:8: ( '%' )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:19:10: '%'
    		{
    		DebugLocation(19, 10);
    		Match('%'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__165", 4);
    		LeaveRule("T__165", 4);
    		LeaveRule_T__165();
        }
    }
    // $ANTLR end "T__165"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__166() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__166() {}

    // $ANTLR start "T__166"
    [GrammarRule("T__166")]
    private void mT__166()
    {
    	EnterRule_T__166();
    	EnterRule("T__166", 5);
    	TraceIn("T__166", 5);
    		try
    		{
    		int _type = T__166;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:20:8: ( '&' )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:20:10: '&'
    		{
    		DebugLocation(20, 10);
    		Match('&'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__166", 5);
    		LeaveRule("T__166", 5);
    		LeaveRule_T__166();
        }
    }
    // $ANTLR end "T__166"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__167() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__167() {}

    // $ANTLR start "T__167"
    [GrammarRule("T__167")]
    private void mT__167()
    {
    	EnterRule_T__167();
    	EnterRule("T__167", 6);
    	TraceIn("T__167", 6);
    		try
    		{
    		int _type = T__167;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:21:8: ( '(' )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:21:10: '('
    		{
    		DebugLocation(21, 10);
    		Match('('); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__167", 6);
    		LeaveRule("T__167", 6);
    		LeaveRule_T__167();
        }
    }
    // $ANTLR end "T__167"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__168() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__168() {}

    // $ANTLR start "T__168"
    [GrammarRule("T__168")]
    private void mT__168()
    {
    	EnterRule_T__168();
    	EnterRule("T__168", 7);
    	TraceIn("T__168", 7);
    		try
    		{
    		int _type = T__168;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:22:8: ( ')' )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:22:10: ')'
    		{
    		DebugLocation(22, 10);
    		Match(')'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__168", 7);
    		LeaveRule("T__168", 7);
    		LeaveRule_T__168();
        }
    }
    // $ANTLR end "T__168"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__169() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__169() {}

    // $ANTLR start "T__169"
    [GrammarRule("T__169")]
    private void mT__169()
    {
    	EnterRule_T__169();
    	EnterRule("T__169", 8);
    	TraceIn("T__169", 8);
    		try
    		{
    		int _type = T__169;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:23:8: ( '*' )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:23:10: '*'
    		{
    		DebugLocation(23, 10);
    		Match('*'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__169", 8);
    		LeaveRule("T__169", 8);
    		LeaveRule_T__169();
        }
    }
    // $ANTLR end "T__169"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__170() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__170() {}

    // $ANTLR start "T__170"
    [GrammarRule("T__170")]
    private void mT__170()
    {
    	EnterRule_T__170();
    	EnterRule("T__170", 9);
    	TraceIn("T__170", 9);
    		try
    		{
    		int _type = T__170;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:24:8: ( '+' )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:24:10: '+'
    		{
    		DebugLocation(24, 10);
    		Match('+'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__170", 9);
    		LeaveRule("T__170", 9);
    		LeaveRule_T__170();
        }
    }
    // $ANTLR end "T__170"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__171() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__171() {}

    // $ANTLR start "T__171"
    [GrammarRule("T__171")]
    private void mT__171()
    {
    	EnterRule_T__171();
    	EnterRule("T__171", 10);
    	TraceIn("T__171", 10);
    		try
    		{
    		int _type = T__171;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:25:8: ( ',' )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:25:10: ','
    		{
    		DebugLocation(25, 10);
    		Match(','); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__171", 10);
    		LeaveRule("T__171", 10);
    		LeaveRule_T__171();
        }
    }
    // $ANTLR end "T__171"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__172() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__172() {}

    // $ANTLR start "T__172"
    [GrammarRule("T__172")]
    private void mT__172()
    {
    	EnterRule_T__172();
    	EnterRule("T__172", 11);
    	TraceIn("T__172", 11);
    		try
    		{
    		int _type = T__172;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:26:8: ( '-' )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:26:10: '-'
    		{
    		DebugLocation(26, 10);
    		Match('-'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__172", 11);
    		LeaveRule("T__172", 11);
    		LeaveRule_T__172();
        }
    }
    // $ANTLR end "T__172"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__173() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__173() {}

    // $ANTLR start "T__173"
    [GrammarRule("T__173")]
    private void mT__173()
    {
    	EnterRule_T__173();
    	EnterRule("T__173", 12);
    	TraceIn("T__173", 12);
    		try
    		{
    		int _type = T__173;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:27:8: ( '.' )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:27:10: '.'
    		{
    		DebugLocation(27, 10);
    		Match('.'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__173", 12);
    		LeaveRule("T__173", 12);
    		LeaveRule_T__173();
        }
    }
    // $ANTLR end "T__173"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__174() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__174() {}

    // $ANTLR start "T__174"
    [GrammarRule("T__174")]
    private void mT__174()
    {
    	EnterRule_T__174();
    	EnterRule("T__174", 13);
    	TraceIn("T__174", 13);
    		try
    		{
    		int _type = T__174;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:28:8: ( '/' )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:28:10: '/'
    		{
    		DebugLocation(28, 10);
    		Match('/'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__174", 13);
    		LeaveRule("T__174", 13);
    		LeaveRule_T__174();
        }
    }
    // $ANTLR end "T__174"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__175() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__175() {}

    // $ANTLR start "T__175"
    [GrammarRule("T__175")]
    private void mT__175()
    {
    	EnterRule_T__175();
    	EnterRule("T__175", 14);
    	TraceIn("T__175", 14);
    		try
    		{
    		int _type = T__175;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:29:8: ( ';' )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:29:10: ';'
    		{
    		DebugLocation(29, 10);
    		Match(';'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__175", 14);
    		LeaveRule("T__175", 14);
    		LeaveRule_T__175();
        }
    }
    // $ANTLR end "T__175"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__176() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__176() {}

    // $ANTLR start "T__176"
    [GrammarRule("T__176")]
    private void mT__176()
    {
    	EnterRule_T__176();
    	EnterRule("T__176", 15);
    	TraceIn("T__176", 15);
    		try
    		{
    		int _type = T__176;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:30:8: ( '<' )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:30:10: '<'
    		{
    		DebugLocation(30, 10);
    		Match('<'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__176", 15);
    		LeaveRule("T__176", 15);
    		LeaveRule_T__176();
        }
    }
    // $ANTLR end "T__176"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__177() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__177() {}

    // $ANTLR start "T__177"
    [GrammarRule("T__177")]
    private void mT__177()
    {
    	EnterRule_T__177();
    	EnterRule("T__177", 16);
    	TraceIn("T__177", 16);
    		try
    		{
    		int _type = T__177;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:31:8: ( '<=' )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:31:10: '<='
    		{
    		DebugLocation(31, 10);
    		Match("<="); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__177", 16);
    		LeaveRule("T__177", 16);
    		LeaveRule_T__177();
        }
    }
    // $ANTLR end "T__177"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__178() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__178() {}

    // $ANTLR start "T__178"
    [GrammarRule("T__178")]
    private void mT__178()
    {
    	EnterRule_T__178();
    	EnterRule("T__178", 17);
    	TraceIn("T__178", 17);
    		try
    		{
    		int _type = T__178;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:32:8: ( '<>' )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:32:10: '<>'
    		{
    		DebugLocation(32, 10);
    		Match("<>"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__178", 17);
    		LeaveRule("T__178", 17);
    		LeaveRule_T__178();
        }
    }
    // $ANTLR end "T__178"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__179() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__179() {}

    // $ANTLR start "T__179"
    [GrammarRule("T__179")]
    private void mT__179()
    {
    	EnterRule_T__179();
    	EnterRule("T__179", 18);
    	TraceIn("T__179", 18);
    		try
    		{
    		int _type = T__179;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:33:8: ( '=' )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:33:10: '='
    		{
    		DebugLocation(33, 10);
    		Match('='); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__179", 18);
    		LeaveRule("T__179", 18);
    		LeaveRule_T__179();
        }
    }
    // $ANTLR end "T__179"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__180() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__180() {}

    // $ANTLR start "T__180"
    [GrammarRule("T__180")]
    private void mT__180()
    {
    	EnterRule_T__180();
    	EnterRule("T__180", 19);
    	TraceIn("T__180", 19);
    		try
    		{
    		int _type = T__180;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:34:8: ( '>' )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:34:10: '>'
    		{
    		DebugLocation(34, 10);
    		Match('>'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__180", 19);
    		LeaveRule("T__180", 19);
    		LeaveRule_T__180();
        }
    }
    // $ANTLR end "T__180"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__181() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__181() {}

    // $ANTLR start "T__181"
    [GrammarRule("T__181")]
    private void mT__181()
    {
    	EnterRule_T__181();
    	EnterRule("T__181", 20);
    	TraceIn("T__181", 20);
    		try
    		{
    		int _type = T__181;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:35:8: ( '>=' )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:35:10: '>='
    		{
    		DebugLocation(35, 10);
    		Match(">="); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__181", 20);
    		LeaveRule("T__181", 20);
    		LeaveRule_T__181();
        }
    }
    // $ANTLR end "T__181"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__182() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__182() {}

    // $ANTLR start "T__182"
    [GrammarRule("T__182")]
    private void mT__182()
    {
    	EnterRule_T__182();
    	EnterRule("T__182", 21);
    	TraceIn("T__182", 21);
    		try
    		{
    		int _type = T__182;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:36:8: ( '[' )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:36:10: '['
    		{
    		DebugLocation(36, 10);
    		Match('['); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__182", 21);
    		LeaveRule("T__182", 21);
    		LeaveRule_T__182();
        }
    }
    // $ANTLR end "T__182"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__183() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__183() {}

    // $ANTLR start "T__183"
    [GrammarRule("T__183")]
    private void mT__183()
    {
    	EnterRule_T__183();
    	EnterRule("T__183", 22);
    	TraceIn("T__183", 22);
    		try
    		{
    		int _type = T__183;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:37:8: ( ']' )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:37:10: ']'
    		{
    		DebugLocation(37, 10);
    		Match(']'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__183", 22);
    		LeaveRule("T__183", 22);
    		LeaveRule_T__183();
        }
    }
    // $ANTLR end "T__183"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__184() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__184() {}

    // $ANTLR start "T__184"
    [GrammarRule("T__184")]
    private void mT__184()
    {
    	EnterRule_T__184();
    	EnterRule("T__184", 23);
    	TraceIn("T__184", 23);
    		try
    		{
    		int _type = T__184;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:38:8: ( '^' )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:38:10: '^'
    		{
    		DebugLocation(38, 10);
    		Match('^'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__184", 23);
    		LeaveRule("T__184", 23);
    		LeaveRule_T__184();
        }
    }
    // $ANTLR end "T__184"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__185() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__185() {}

    // $ANTLR start "T__185"
    [GrammarRule("T__185")]
    private void mT__185()
    {
    	EnterRule_T__185();
    	EnterRule("T__185", 24);
    	TraceIn("T__185", 24);
    		try
    		{
    		int _type = T__185;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:39:8: ( '|' )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:39:10: '|'
    		{
    		DebugLocation(39, 10);
    		Match('|'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__185", 24);
    		LeaveRule("T__185", 24);
    		LeaveRule_T__185();
        }
    }
    // $ANTLR end "T__185"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__186() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__186() {}

    // $ANTLR start "T__186"
    [GrammarRule("T__186")]
    private void mT__186()
    {
    	EnterRule_T__186();
    	EnterRule("T__186", 25);
    	TraceIn("T__186", 25);
    		try
    		{
    		int _type = T__186;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:40:8: ( '~' )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:40:10: '~'
    		{
    		DebugLocation(40, 10);
    		Match('~'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__186", 25);
    		LeaveRule("T__186", 25);
    		LeaveRule_T__186();
        }
    }
    // $ANTLR end "T__186"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_COMMENT_LINE() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_COMMENT_LINE() {}

    // $ANTLR start "COMMENT_LINE"
    [GrammarRule("COMMENT_LINE")]
    private void mCOMMENT_LINE()
    {
    	EnterRule_COMMENT_LINE();
    	EnterRule("COMMENT_LINE", 26);
    	TraceIn("COMMENT_LINE", 26);
    		try
    		{
    		int _type = COMMENT_LINE;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:478:2: ( '--' ( . )* ( ( '\\r' '\\n' ) | '\\r' | '\\n' ) )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:478:4: '--' ( . )* ( ( '\\r' '\\n' ) | '\\r' | '\\n' )
    		{
    		DebugLocation(478, 4);
    		Match("--"); 

    		DebugLocation(478, 9);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:478:9: ( . )*
    		try { DebugEnterSubRule(1);
    		while (true)
    		{
    			int alt1=2;
    			try { DebugEnterDecision(1, decisionCanBacktrack[1]);
    			int LA1_0 = input.LA(1);

    			if ((LA1_0=='\r'))
    			{
    				alt1 = 2;
    			}
    			else if ((LA1_0=='\n'))
    			{
    				alt1 = 2;
    			}
    			else if (((LA1_0>='\u0000' && LA1_0<='\t')||(LA1_0>='\u000B' && LA1_0<='\f')||(LA1_0>='\u000E' && LA1_0<='\uFFFF')))
    			{
    				alt1 = 1;
    			}


    			} finally { DebugExitDecision(1); }
    			switch ( alt1 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:478:9: .
    				{
    				DebugLocation(478, 9);
    				MatchAny(); 

    				}
    				break;

    			default:
    				goto loop1;
    			}
    		}

    		loop1:
    			;

    		} finally { DebugExitSubRule(1); }

    		DebugLocation(478, 12);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:478:12: ( ( '\\r' '\\n' ) | '\\r' | '\\n' )
    		int alt2=3;
    		try { DebugEnterSubRule(2);
    		try { DebugEnterDecision(2, decisionCanBacktrack[2]);
    		int LA2_0 = input.LA(1);

    		if ((LA2_0=='\r'))
    		{
    			int LA2_1 = input.LA(2);

    			if ((LA2_1=='\n'))
    			{
    				alt2 = 1;
    			}
    			else
    			{
    				alt2 = 2;
    			}
    		}
    		else if ((LA2_0=='\n'))
    		{
    			alt2 = 3;
    		}
    		else
    		{
    			NoViableAltException nvae = new NoViableAltException("", 2, 0, input);
    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(2); }
    		switch (alt2)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:478:13: ( '\\r' '\\n' )
    			{
    			DebugLocation(478, 13);
    			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:478:13: ( '\\r' '\\n' )
    			DebugEnterAlt(1);
    			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:478:14: '\\r' '\\n'
    			{
    			DebugLocation(478, 14);
    			Match('\r'); 
    			DebugLocation(478, 19);
    			Match('\n'); 

    			}


    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:478:27: '\\r'
    			{
    			DebugLocation(478, 27);
    			Match('\r'); 

    			}
    			break;
    		case 3:
    			DebugEnterAlt(3);
    			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:478:34: '\\n'
    			{
    			DebugLocation(478, 34);
    			Match('\n'); 

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(2); }

    		DebugLocation(478, 40);
    		 Skip(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("COMMENT_LINE", 26);
    		LeaveRule("COMMENT_LINE", 26);
    		LeaveRule_COMMENT_LINE();
        }
    }
    // $ANTLR end "COMMENT_LINE"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_COMMENT_BLOCK() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_COMMENT_BLOCK() {}

    // $ANTLR start "COMMENT_BLOCK"
    [GrammarRule("COMMENT_BLOCK")]
    private void mCOMMENT_BLOCK()
    {
    	EnterRule_COMMENT_BLOCK();
    	EnterRule("COMMENT_BLOCK", 27);
    	TraceIn("COMMENT_BLOCK", 27);
    		try
    		{
    		int _type = COMMENT_BLOCK;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:487:2: ( '/*' ( . )* '*/' WS )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:487:4: '/*' ( . )* '*/' WS
    		{
    		DebugLocation(487, 4);
    		Match("/*"); 

    		DebugLocation(487, 9);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:487:9: ( . )*
    		try { DebugEnterSubRule(3);
    		while (true)
    		{
    			int alt3=2;
    			try { DebugEnterDecision(3, decisionCanBacktrack[3]);
    			int LA3_0 = input.LA(1);

    			if ((LA3_0=='*'))
    			{
    				int LA3_1 = input.LA(2);

    				if ((LA3_1=='/'))
    				{
    					int LA3_3 = input.LA(3);

    					if (((LA3_3>='\t' && LA3_3<='\n')||(LA3_3>='\f' && LA3_3<='\r')||LA3_3==' '))
    					{
    						alt3 = 2;
    					}
    					else if (((LA3_3>='\u0000' && LA3_3<='\b')||LA3_3=='\u000B'||(LA3_3>='\u000E' && LA3_3<='\u001F')||(LA3_3>='!' && LA3_3<='\uFFFF')))
    					{
    						alt3 = 1;
    					}


    				}
    				else if (((LA3_1>='\u0000' && LA3_1<='.')||(LA3_1>='0' && LA3_1<='\uFFFF')))
    				{
    					alt3 = 1;
    				}


    			}
    			else if (((LA3_0>='\u0000' && LA3_0<=')')||(LA3_0>='+' && LA3_0<='\uFFFF')))
    			{
    				alt3 = 1;
    			}


    			} finally { DebugExitDecision(3); }
    			switch ( alt3 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:487:9: .
    				{
    				DebugLocation(487, 9);
    				MatchAny(); 

    				}
    				break;

    			default:
    				goto loop3;
    			}
    		}

    		loop3:
    			;

    		} finally { DebugExitSubRule(3); }

    		DebugLocation(487, 12);
    		Match("*/"); 

    		DebugLocation(487, 17);
    		mWS(); 
    		DebugLocation(487, 20);
    		 Skip(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("COMMENT_BLOCK", 27);
    		LeaveRule("COMMENT_BLOCK", 27);
    		LeaveRule_COMMENT_BLOCK();
        }
    }
    // $ANTLR end "COMMENT_BLOCK"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_STRING() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_STRING() {}

    // $ANTLR start "STRING"
    [GrammarRule("STRING")]
    private void mSTRING()
    {
    	EnterRule_STRING();
    	EnterRule("STRING", 28);
    	TraceIn("STRING", 28);
    		try
    		{
    		int _type = STRING;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:491:2: ( '\\'' ( (~ ( '\\'' ) | '\\'' '\\'' )* ) '\\'' )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:491:4: '\\'' ( (~ ( '\\'' ) | '\\'' '\\'' )* ) '\\''
    		{
    		DebugLocation(491, 4);
    		Match('\''); 
    		DebugLocation(491, 9);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:491:9: ( (~ ( '\\'' ) | '\\'' '\\'' )* )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:491:11: (~ ( '\\'' ) | '\\'' '\\'' )*
    		{
    		DebugLocation(491, 11);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:491:11: (~ ( '\\'' ) | '\\'' '\\'' )*
    		try { DebugEnterSubRule(4);
    		while (true)
    		{
    			int alt4=3;
    			try { DebugEnterDecision(4, decisionCanBacktrack[4]);
    			int LA4_0 = input.LA(1);

    			if ((LA4_0=='\''))
    			{
    				int LA4_1 = input.LA(2);

    				if ((LA4_1=='\''))
    				{
    					alt4 = 2;
    				}


    			}
    			else if (((LA4_0>='\u0000' && LA4_0<='&')||(LA4_0>='(' && LA4_0<='\uFFFF')))
    			{
    				alt4 = 1;
    			}


    			} finally { DebugExitDecision(4); }
    			switch ( alt4 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:491:12: ~ ( '\\'' )
    				{
    				DebugLocation(491, 12);
    				input.Consume();


    				}
    				break;
    			case 2:
    				DebugEnterAlt(2);
    				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:491:20: '\\'' '\\''
    				{
    				DebugLocation(491, 20);
    				Match('\''); 
    				DebugLocation(491, 24);
    				Match('\''); 

    				}
    				break;

    			default:
    				goto loop4;
    			}
    		}

    		loop4:
    			;

    		} finally { DebugExitSubRule(4); }


    		}

    		DebugLocation(491, 33);
    		Match('\''); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("STRING", 28);
    		LeaveRule("STRING", 28);
    		LeaveRule_STRING();
        }
    }
    // $ANTLR end "STRING"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_SIMPLE_FILE() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_SIMPLE_FILE() {}

    // $ANTLR start "SIMPLE_FILE"
    [GrammarRule("SIMPLE_FILE")]
    private void mSIMPLE_FILE()
    {
    	EnterRule_SIMPLE_FILE();
    	EnterRule("SIMPLE_FILE", 29);
    	TraceIn("SIMPLE_FILE", 29);
    		try
    		{
    		int _type = SIMPLE_FILE;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:495:2: ( '[' (~ ( '@' | '\\'' | '(' | ')' | '[' | ']' ) )* ']' )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:495:4: '[' (~ ( '@' | '\\'' | '(' | ')' | '[' | ']' ) )* ']'
    		{
    		DebugLocation(495, 4);
    		Match('['); 
    		DebugLocation(495, 8);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:495:8: (~ ( '@' | '\\'' | '(' | ')' | '[' | ']' ) )*
    		try { DebugEnterSubRule(5);
    		while (true)
    		{
    			int alt5=2;
    			try { DebugEnterDecision(5, decisionCanBacktrack[5]);
    			int LA5_0 = input.LA(1);

    			if (((LA5_0>='\u0000' && LA5_0<='&')||(LA5_0>='*' && LA5_0<='?')||(LA5_0>='A' && LA5_0<='Z')||LA5_0=='\\'||(LA5_0>='^' && LA5_0<='\uFFFF')))
    			{
    				alt5 = 1;
    			}


    			} finally { DebugExitDecision(5); }
    			switch ( alt5 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:
    				{
    				DebugLocation(495, 8);
    				input.Consume();


    				}
    				break;

    			default:
    				goto loop5;
    			}
    		}

    		loop5:
    			;

    		} finally { DebugExitSubRule(5); }

    		DebugLocation(495, 37);
    		Match(']'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("SIMPLE_FILE", 29);
    		LeaveRule("SIMPLE_FILE", 29);
    		LeaveRule_SIMPLE_FILE();
        }
    }
    // $ANTLR end "SIMPLE_FILE"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_SELECT() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_SELECT() {}

    // $ANTLR start "SELECT"
    [GrammarRule("SELECT")]
    private void mSELECT()
    {
    	EnterRule_SELECT();
    	EnterRule("SELECT", 30);
    	TraceIn("SELECT", 30);
    		try
    		{
    		int _type = SELECT;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:499:9: ( S E L E C T )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:499:11: S E L E C T
    		{
    		DebugLocation(499, 11);
    		mS(); 
    		DebugLocation(499, 13);
    		mE(); 
    		DebugLocation(499, 15);
    		mL(); 
    		DebugLocation(499, 17);
    		mE(); 
    		DebugLocation(499, 19);
    		mC(); 
    		DebugLocation(499, 21);
    		mT(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("SELECT", 30);
    		LeaveRule("SELECT", 30);
    		LeaveRule_SELECT();
        }
    }
    // $ANTLR end "SELECT"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_ALL() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_ALL() {}

    // $ANTLR start "ALL"
    [GrammarRule("ALL")]
    private void mALL()
    {
    	EnterRule_ALL();
    	EnterRule("ALL", 31);
    	TraceIn("ALL", 31);
    		try
    		{
    		int _type = ALL;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:500:5: ( A L L )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:500:7: A L L
    		{
    		DebugLocation(500, 7);
    		mA(); 
    		DebugLocation(500, 9);
    		mL(); 
    		DebugLocation(500, 11);
    		mL(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("ALL", 31);
    		LeaveRule("ALL", 31);
    		LeaveRule_ALL();
        }
    }
    // $ANTLR end "ALL"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_DISTINCT() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_DISTINCT() {}

    // $ANTLR start "DISTINCT"
    [GrammarRule("DISTINCT")]
    private void mDISTINCT()
    {
    	EnterRule_DISTINCT();
    	EnterRule("DISTINCT", 32);
    	TraceIn("DISTINCT", 32);
    		try
    		{
    		int _type = DISTINCT;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:502:2: ( D I S T I N C T )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:502:4: D I S T I N C T
    		{
    		DebugLocation(502, 4);
    		mD(); 
    		DebugLocation(502, 6);
    		mI(); 
    		DebugLocation(502, 8);
    		mS(); 
    		DebugLocation(502, 10);
    		mT(); 
    		DebugLocation(502, 12);
    		mI(); 
    		DebugLocation(502, 14);
    		mN(); 
    		DebugLocation(502, 16);
    		mC(); 
    		DebugLocation(502, 18);
    		mT(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("DISTINCT", 32);
    		LeaveRule("DISTINCT", 32);
    		LeaveRule_DISTINCT();
        }
    }
    // $ANTLR end "DISTINCT"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_TOP() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_TOP() {}

    // $ANTLR start "TOP"
    [GrammarRule("TOP")]
    private void mTOP()
    {
    	EnterRule_TOP();
    	EnterRule("TOP", 33);
    	TraceIn("TOP", 33);
    		try
    		{
    		int _type = TOP;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:503:5: ( T O P )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:503:7: T O P
    		{
    		DebugLocation(503, 7);
    		mT(); 
    		DebugLocation(503, 9);
    		mO(); 
    		DebugLocation(503, 11);
    		mP(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("TOP", 33);
    		LeaveRule("TOP", 33);
    		LeaveRule_TOP();
        }
    }
    // $ANTLR end "TOP"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_INTO() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_INTO() {}

    // $ANTLR start "INTO"
    [GrammarRule("INTO")]
    private void mINTO()
    {
    	EnterRule_INTO();
    	EnterRule("INTO", 34);
    	TraceIn("INTO", 34);
    		try
    		{
    		int _type = INTO;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:504:6: ( I N T O )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:504:8: I N T O
    		{
    		DebugLocation(504, 8);
    		mI(); 
    		DebugLocation(504, 10);
    		mN(); 
    		DebugLocation(504, 12);
    		mT(); 
    		DebugLocation(504, 14);
    		mO(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("INTO", 34);
    		LeaveRule("INTO", 34);
    		LeaveRule_INTO();
        }
    }
    // $ANTLR end "INTO"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_FROM() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_FROM() {}

    // $ANTLR start "FROM"
    [GrammarRule("FROM")]
    private void mFROM()
    {
    	EnterRule_FROM();
    	EnterRule("FROM", 35);
    	TraceIn("FROM", 35);
    		try
    		{
    		int _type = FROM;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:505:7: ( F R O M )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:505:9: F R O M
    		{
    		DebugLocation(505, 9);
    		mF(); 
    		DebugLocation(505, 11);
    		mR(); 
    		DebugLocation(505, 13);
    		mO(); 
    		DebugLocation(505, 15);
    		mM(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("FROM", 35);
    		LeaveRule("FROM", 35);
    		LeaveRule_FROM();
        }
    }
    // $ANTLR end "FROM"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_WHERE() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_WHERE() {}

    // $ANTLR start "WHERE"
    [GrammarRule("WHERE")]
    private void mWHERE()
    {
    	EnterRule_WHERE();
    	EnterRule("WHERE", 36);
    	TraceIn("WHERE", 36);
    		try
    		{
    		int _type = WHERE;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:506:8: ( W H E R E )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:506:10: W H E R E
    		{
    		DebugLocation(506, 10);
    		mW(); 
    		DebugLocation(506, 12);
    		mH(); 
    		DebugLocation(506, 14);
    		mE(); 
    		DebugLocation(506, 16);
    		mR(); 
    		DebugLocation(506, 18);
    		mE(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("WHERE", 36);
    		LeaveRule("WHERE", 36);
    		LeaveRule_WHERE();
        }
    }
    // $ANTLR end "WHERE"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_NOT() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_NOT() {}

    // $ANTLR start "NOT"
    [GrammarRule("NOT")]
    private void mNOT()
    {
    	EnterRule_NOT();
    	EnterRule("NOT", 37);
    	TraceIn("NOT", 37);
    		try
    		{
    		int _type = NOT;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:508:6: ( N O T )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:508:8: N O T
    		{
    		DebugLocation(508, 8);
    		mN(); 
    		DebugLocation(508, 10);
    		mO(); 
    		DebugLocation(508, 12);
    		mT(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("NOT", 37);
    		LeaveRule("NOT", 37);
    		LeaveRule_NOT();
        }
    }
    // $ANTLR end "NOT"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_AND() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_AND() {}

    // $ANTLR start "AND"
    [GrammarRule("AND")]
    private void mAND()
    {
    	EnterRule_AND();
    	EnterRule("AND", 38);
    	TraceIn("AND", 38);
    		try
    		{
    		int _type = AND;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:509:6: ( A N D )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:509:8: A N D
    		{
    		DebugLocation(509, 8);
    		mA(); 
    		DebugLocation(509, 10);
    		mN(); 
    		DebugLocation(509, 12);
    		mD(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("AND", 38);
    		LeaveRule("AND", 38);
    		LeaveRule_AND();
        }
    }
    // $ANTLR end "AND"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_OR() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_OR() {}

    // $ANTLR start "OR"
    [GrammarRule("OR")]
    private void mOR()
    {
    	EnterRule_OR();
    	EnterRule("OR", 39);
    	TraceIn("OR", 39);
    		try
    		{
    		int _type = OR;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:510:5: ( O R )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:510:7: O R
    		{
    		DebugLocation(510, 7);
    		mO(); 
    		DebugLocation(510, 9);
    		mR(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("OR", 39);
    		LeaveRule("OR", 39);
    		LeaveRule_OR();
        }
    }
    // $ANTLR end "OR"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_LIKE() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_LIKE() {}

    // $ANTLR start "LIKE"
    [GrammarRule("LIKE")]
    private void mLIKE()
    {
    	EnterRule_LIKE();
    	EnterRule("LIKE", 40);
    	TraceIn("LIKE", 40);
    		try
    		{
    		int _type = LIKE;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:511:6: ( L I K E )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:511:8: L I K E
    		{
    		DebugLocation(511, 8);
    		mL(); 
    		DebugLocation(511, 10);
    		mI(); 
    		DebugLocation(511, 12);
    		mK(); 
    		DebugLocation(511, 14);
    		mE(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("LIKE", 40);
    		LeaveRule("LIKE", 40);
    		LeaveRule_LIKE();
        }
    }
    // $ANTLR end "LIKE"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_MATCH() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_MATCH() {}

    // $ANTLR start "MATCH"
    [GrammarRule("MATCH")]
    private void mMATCH()
    {
    	EnterRule_MATCH();
    	EnterRule("MATCH", 41);
    	TraceIn("MATCH", 41);
    		try
    		{
    		int _type = MATCH;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:512:7: ( M A T C H )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:512:9: M A T C H
    		{
    		DebugLocation(512, 9);
    		mM(); 
    		DebugLocation(512, 11);
    		mA(); 
    		DebugLocation(512, 13);
    		mT(); 
    		DebugLocation(512, 15);
    		mC(); 
    		DebugLocation(512, 17);
    		mH(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("MATCH", 41);
    		LeaveRule("MATCH", 41);
    		LeaveRule_MATCH();
        }
    }
    // $ANTLR end "MATCH"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_GROUP() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_GROUP() {}

    // $ANTLR start "GROUP"
    [GrammarRule("GROUP")]
    private void mGROUP()
    {
    	EnterRule_GROUP();
    	EnterRule("GROUP", 42);
    	TraceIn("GROUP", 42);
    		try
    		{
    		int _type = GROUP;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:513:7: ( G R O U P )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:513:9: G R O U P
    		{
    		DebugLocation(513, 9);
    		mG(); 
    		DebugLocation(513, 11);
    		mR(); 
    		DebugLocation(513, 13);
    		mO(); 
    		DebugLocation(513, 15);
    		mU(); 
    		DebugLocation(513, 17);
    		mP(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("GROUP", 42);
    		LeaveRule("GROUP", 42);
    		LeaveRule_GROUP();
        }
    }
    // $ANTLR end "GROUP"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_ORDER() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_ORDER() {}

    // $ANTLR start "ORDER"
    [GrammarRule("ORDER")]
    private void mORDER()
    {
    	EnterRule_ORDER();
    	EnterRule("ORDER", 43);
    	TraceIn("ORDER", 43);
    		try
    		{
    		int _type = ORDER;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:514:7: ( O R D E R )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:514:9: O R D E R
    		{
    		DebugLocation(514, 9);
    		mO(); 
    		DebugLocation(514, 11);
    		mR(); 
    		DebugLocation(514, 13);
    		mD(); 
    		DebugLocation(514, 15);
    		mE(); 
    		DebugLocation(514, 17);
    		mR(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("ORDER", 43);
    		LeaveRule("ORDER", 43);
    		LeaveRule_ORDER();
        }
    }
    // $ANTLR end "ORDER"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_BY() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_BY() {}

    // $ANTLR start "BY"
    [GrammarRule("BY")]
    private void mBY()
    {
    	EnterRule_BY();
    	EnterRule("BY", 44);
    	TraceIn("BY", 44);
    		try
    		{
    		int _type = BY;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:515:4: ( B Y )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:515:6: B Y
    		{
    		DebugLocation(515, 6);
    		mB(); 
    		DebugLocation(515, 8);
    		mY(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("BY", 44);
    		LeaveRule("BY", 44);
    		LeaveRule_BY();
        }
    }
    // $ANTLR end "BY"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_ASC() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_ASC() {}

    // $ANTLR start "ASC"
    [GrammarRule("ASC")]
    private void mASC()
    {
    	EnterRule_ASC();
    	EnterRule("ASC", 45);
    	TraceIn("ASC", 45);
    		try
    		{
    		int _type = ASC;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:516:5: ( A S C )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:516:7: A S C
    		{
    		DebugLocation(516, 7);
    		mA(); 
    		DebugLocation(516, 9);
    		mS(); 
    		DebugLocation(516, 11);
    		mC(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("ASC", 45);
    		LeaveRule("ASC", 45);
    		LeaveRule_ASC();
        }
    }
    // $ANTLR end "ASC"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_DESC() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_DESC() {}

    // $ANTLR start "DESC"
    [GrammarRule("DESC")]
    private void mDESC()
    {
    	EnterRule_DESC();
    	EnterRule("DESC", 46);
    	TraceIn("DESC", 46);
    		try
    		{
    		int _type = DESC;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:517:6: ( D E S C )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:517:8: D E S C
    		{
    		DebugLocation(517, 8);
    		mD(); 
    		DebugLocation(517, 10);
    		mE(); 
    		DebugLocation(517, 12);
    		mS(); 
    		DebugLocation(517, 14);
    		mC(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("DESC", 46);
    		LeaveRule("DESC", 46);
    		LeaveRule_DESC();
        }
    }
    // $ANTLR end "DESC"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_ORIG() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_ORIG() {}

    // $ANTLR start "ORIG"
    [GrammarRule("ORIG")]
    private void mORIG()
    {
    	EnterRule_ORIG();
    	EnterRule("ORIG", 47);
    	TraceIn("ORIG", 47);
    		try
    		{
    		int _type = ORIG;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:518:6: ( O R I G )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:518:8: O R I G
    		{
    		DebugLocation(518, 8);
    		mO(); 
    		DebugLocation(518, 10);
    		mR(); 
    		DebugLocation(518, 12);
    		mI(); 
    		DebugLocation(518, 14);
    		mG(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("ORIG", 47);
    		LeaveRule("ORIG", 47);
    		LeaveRule_ORIG();
        }
    }
    // $ANTLR end "ORIG"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_CONVERT() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_CONVERT() {}

    // $ANTLR start "CONVERT"
    [GrammarRule("CONVERT")]
    private void mCONVERT()
    {
    	EnterRule_CONVERT();
    	EnterRule("CONVERT", 48);
    	TraceIn("CONVERT", 48);
    		try
    		{
    		int _type = CONVERT;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:519:9: ( C O N V E R T )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:519:11: C O N V E R T
    		{
    		DebugLocation(519, 11);
    		mC(); 
    		DebugLocation(519, 13);
    		mO(); 
    		DebugLocation(519, 15);
    		mN(); 
    		DebugLocation(519, 17);
    		mV(); 
    		DebugLocation(519, 19);
    		mE(); 
    		DebugLocation(519, 21);
    		mR(); 
    		DebugLocation(519, 23);
    		mT(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("CONVERT", 48);
    		LeaveRule("CONVERT", 48);
    		LeaveRule_CONVERT();
        }
    }
    // $ANTLR end "CONVERT"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_CAST() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_CAST() {}

    // $ANTLR start "CAST"
    [GrammarRule("CAST")]
    private void mCAST()
    {
    	EnterRule_CAST();
    	EnterRule("CAST", 49);
    	TraceIn("CAST", 49);
    		try
    		{
    		int _type = CAST;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:520:7: ( C A S T )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:520:9: C A S T
    		{
    		DebugLocation(520, 9);
    		mC(); 
    		DebugLocation(520, 11);
    		mA(); 
    		DebugLocation(520, 13);
    		mS(); 
    		DebugLocation(520, 15);
    		mT(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("CAST", 49);
    		LeaveRule("CAST", 49);
    		LeaveRule_CAST();
        }
    }
    // $ANTLR end "CAST"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_AS() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_AS() {}

    // $ANTLR start "AS"
    [GrammarRule("AS")]
    private void mAS()
    {
    	EnterRule_AS();
    	EnterRule("AS", 50);
    	TraceIn("AS", 50);
    		try
    		{
    		int _type = AS;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:521:9: ( A S )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:521:11: A S
    		{
    		DebugLocation(521, 11);
    		mA(); 
    		DebugLocation(521, 13);
    		mS(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("AS", 50);
    		LeaveRule("AS", 50);
    		LeaveRule_AS();
        }
    }
    // $ANTLR end "AS"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_BETWEEN() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_BETWEEN() {}

    // $ANTLR start "BETWEEN"
    [GrammarRule("BETWEEN")]
    private void mBETWEEN()
    {
    	EnterRule_BETWEEN();
    	EnterRule("BETWEEN", 51);
    	TraceIn("BETWEEN", 51);
    		try
    		{
    		int _type = BETWEEN;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:522:9: ( B E T W E E N )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:522:11: B E T W E E N
    		{
    		DebugLocation(522, 11);
    		mB(); 
    		DebugLocation(522, 13);
    		mE(); 
    		DebugLocation(522, 15);
    		mT(); 
    		DebugLocation(522, 17);
    		mW(); 
    		DebugLocation(522, 19);
    		mE(); 
    		DebugLocation(522, 21);
    		mE(); 
    		DebugLocation(522, 23);
    		mN(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("BETWEEN", 51);
    		LeaveRule("BETWEEN", 51);
    		LeaveRule_BETWEEN();
        }
    }
    // $ANTLR end "BETWEEN"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_IN() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_IN() {}

    // $ANTLR start "IN"
    [GrammarRule("IN")]
    private void mIN()
    {
    	EnterRule_IN();
    	EnterRule("IN", 52);
    	TraceIn("IN", 52);
    		try
    		{
    		int _type = IN;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:523:4: ( I N )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:523:6: I N
    		{
    		DebugLocation(523, 6);
    		mI(); 
    		DebugLocation(523, 8);
    		mN(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("IN", 52);
    		LeaveRule("IN", 52);
    		LeaveRule_IN();
        }
    }
    // $ANTLR end "IN"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_ANY() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_ANY() {}

    // $ANTLR start "ANY"
    [GrammarRule("ANY")]
    private void mANY()
    {
    	EnterRule_ANY();
    	EnterRule("ANY", 53);
    	TraceIn("ANY", 53);
    		try
    		{
    		int _type = ANY;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:524:5: ( A N Y )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:524:7: A N Y
    		{
    		DebugLocation(524, 7);
    		mA(); 
    		DebugLocation(524, 9);
    		mN(); 
    		DebugLocation(524, 11);
    		mY(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("ANY", 53);
    		LeaveRule("ANY", 53);
    		LeaveRule_ANY();
        }
    }
    // $ANTLR end "ANY"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_SOME() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_SOME() {}

    // $ANTLR start "SOME"
    [GrammarRule("SOME")]
    private void mSOME()
    {
    	EnterRule_SOME();
    	EnterRule("SOME", 54);
    	TraceIn("SOME", 54);
    		try
    		{
    		int _type = SOME;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:525:6: ( S O M E )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:525:8: S O M E
    		{
    		DebugLocation(525, 8);
    		mS(); 
    		DebugLocation(525, 10);
    		mO(); 
    		DebugLocation(525, 12);
    		mM(); 
    		DebugLocation(525, 14);
    		mE(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("SOME", 54);
    		LeaveRule("SOME", 54);
    		LeaveRule_SOME();
        }
    }
    // $ANTLR end "SOME"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_EXISTS() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_EXISTS() {}

    // $ANTLR start "EXISTS"
    [GrammarRule("EXISTS")]
    private void mEXISTS()
    {
    	EnterRule_EXISTS();
    	EnterRule("EXISTS", 55);
    	TraceIn("EXISTS", 55);
    		try
    		{
    		int _type = EXISTS;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:526:9: ( E X I S T S )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:526:11: E X I S T S
    		{
    		DebugLocation(526, 11);
    		mE(); 
    		DebugLocation(526, 13);
    		mX(); 
    		DebugLocation(526, 15);
    		mI(); 
    		DebugLocation(526, 17);
    		mS(); 
    		DebugLocation(526, 19);
    		mT(); 
    		DebugLocation(526, 21);
    		mS(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("EXISTS", 55);
    		LeaveRule("EXISTS", 55);
    		LeaveRule_EXISTS();
        }
    }
    // $ANTLR end "EXISTS"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_CASE() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_CASE() {}

    // $ANTLR start "CASE"
    [GrammarRule("CASE")]
    private void mCASE()
    {
    	EnterRule_CASE();
    	EnterRule("CASE", 56);
    	TraceIn("CASE", 56);
    		try
    		{
    		int _type = CASE;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:527:7: ( C A S E )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:527:9: C A S E
    		{
    		DebugLocation(527, 9);
    		mC(); 
    		DebugLocation(527, 11);
    		mA(); 
    		DebugLocation(527, 13);
    		mS(); 
    		DebugLocation(527, 15);
    		mE(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("CASE", 56);
    		LeaveRule("CASE", 56);
    		LeaveRule_CASE();
        }
    }
    // $ANTLR end "CASE"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_WHEN() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_WHEN() {}

    // $ANTLR start "WHEN"
    [GrammarRule("WHEN")]
    private void mWHEN()
    {
    	EnterRule_WHEN();
    	EnterRule("WHEN", 57);
    	TraceIn("WHEN", 57);
    		try
    		{
    		int _type = WHEN;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:528:6: ( W H E N )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:528:8: W H E N
    		{
    		DebugLocation(528, 8);
    		mW(); 
    		DebugLocation(528, 10);
    		mH(); 
    		DebugLocation(528, 12);
    		mE(); 
    		DebugLocation(528, 14);
    		mN(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("WHEN", 57);
    		LeaveRule("WHEN", 57);
    		LeaveRule_WHEN();
        }
    }
    // $ANTLR end "WHEN"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_THEN() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_THEN() {}

    // $ANTLR start "THEN"
    [GrammarRule("THEN")]
    private void mTHEN()
    {
    	EnterRule_THEN();
    	EnterRule("THEN", 58);
    	TraceIn("THEN", 58);
    		try
    		{
    		int _type = THEN;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:529:6: ( T H E N )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:529:8: T H E N
    		{
    		DebugLocation(529, 8);
    		mT(); 
    		DebugLocation(529, 10);
    		mH(); 
    		DebugLocation(529, 12);
    		mE(); 
    		DebugLocation(529, 14);
    		mN(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("THEN", 58);
    		LeaveRule("THEN", 58);
    		LeaveRule_THEN();
        }
    }
    // $ANTLR end "THEN"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_ELSE() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_ELSE() {}

    // $ANTLR start "ELSE"
    [GrammarRule("ELSE")]
    private void mELSE()
    {
    	EnterRule_ELSE();
    	EnterRule("ELSE", 59);
    	TraceIn("ELSE", 59);
    		try
    		{
    		int _type = ELSE;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:530:6: ( E L S E )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:530:8: E L S E
    		{
    		DebugLocation(530, 8);
    		mE(); 
    		DebugLocation(530, 10);
    		mL(); 
    		DebugLocation(530, 12);
    		mS(); 
    		DebugLocation(530, 14);
    		mE(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("ELSE", 59);
    		LeaveRule("ELSE", 59);
    		LeaveRule_ELSE();
        }
    }
    // $ANTLR end "ELSE"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_END() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_END() {}

    // $ANTLR start "END"
    [GrammarRule("END")]
    private void mEND()
    {
    	EnterRule_END();
    	EnterRule("END", 60);
    	TraceIn("END", 60);
    		try
    		{
    		int _type = END;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:531:5: ( E N D )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:531:7: E N D
    		{
    		DebugLocation(531, 7);
    		mE(); 
    		DebugLocation(531, 9);
    		mN(); 
    		DebugLocation(531, 11);
    		mD(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("END", 60);
    		LeaveRule("END", 60);
    		LeaveRule_END();
        }
    }
    // $ANTLR end "END"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_USE() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_USE() {}

    // $ANTLR start "USE"
    [GrammarRule("USE")]
    private void mUSE()
    {
    	EnterRule_USE();
    	EnterRule("USE", 61);
    	TraceIn("USE", 61);
    		try
    		{
    		int _type = USE;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:532:9: ( U S E )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:532:11: U S E
    		{
    		DebugLocation(532, 11);
    		mU(); 
    		DebugLocation(532, 13);
    		mS(); 
    		DebugLocation(532, 15);
    		mE(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("USE", 61);
    		LeaveRule("USE", 61);
    		LeaveRule_USE();
        }
    }
    // $ANTLR end "USE"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_DECLARE() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_DECLARE() {}

    // $ANTLR start "DECLARE"
    [GrammarRule("DECLARE")]
    private void mDECLARE()
    {
    	EnterRule_DECLARE();
    	EnterRule("DECLARE", 62);
    	TraceIn("DECLARE", 62);
    		try
    		{
    		int _type = DECLARE;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:533:9: ( D E C L A R E )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:533:11: D E C L A R E
    		{
    		DebugLocation(533, 11);
    		mD(); 
    		DebugLocation(533, 13);
    		mE(); 
    		DebugLocation(533, 15);
    		mC(); 
    		DebugLocation(533, 17);
    		mL(); 
    		DebugLocation(533, 19);
    		mA(); 
    		DebugLocation(533, 21);
    		mR(); 
    		DebugLocation(533, 23);
    		mE(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("DECLARE", 62);
    		LeaveRule("DECLARE", 62);
    		LeaveRule_DECLARE();
        }
    }
    // $ANTLR end "DECLARE"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_SET() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_SET() {}

    // $ANTLR start "SET"
    [GrammarRule("SET")]
    private void mSET()
    {
    	EnterRule_SET();
    	EnterRule("SET", 63);
    	TraceIn("SET", 63);
    		try
    		{
    		int _type = SET;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:534:9: ( S E T )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:534:11: S E T
    		{
    		DebugLocation(534, 11);
    		mS(); 
    		DebugLocation(534, 13);
    		mE(); 
    		DebugLocation(534, 15);
    		mT(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("SET", 63);
    		LeaveRule("SET", 63);
    		LeaveRule_SET();
        }
    }
    // $ANTLR end "SET"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_CREATE() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_CREATE() {}

    // $ANTLR start "CREATE"
    [GrammarRule("CREATE")]
    private void mCREATE()
    {
    	EnterRule_CREATE();
    	EnterRule("CREATE", 64);
    	TraceIn("CREATE", 64);
    		try
    		{
    		int _type = CREATE;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:535:8: ( C R E A T E )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:535:10: C R E A T E
    		{
    		DebugLocation(535, 10);
    		mC(); 
    		DebugLocation(535, 12);
    		mR(); 
    		DebugLocation(535, 14);
    		mE(); 
    		DebugLocation(535, 16);
    		mA(); 
    		DebugLocation(535, 18);
    		mT(); 
    		DebugLocation(535, 20);
    		mE(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("CREATE", 64);
    		LeaveRule("CREATE", 64);
    		LeaveRule_CREATE();
        }
    }
    // $ANTLR end "CREATE"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_VIEW() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_VIEW() {}

    // $ANTLR start "VIEW"
    [GrammarRule("VIEW")]
    private void mVIEW()
    {
    	EnterRule_VIEW();
    	EnterRule("VIEW", 65);
    	TraceIn("VIEW", 65);
    		try
    		{
    		int _type = VIEW;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:536:6: ( V I E W )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:536:8: V I E W
    		{
    		DebugLocation(536, 8);
    		mV(); 
    		DebugLocation(536, 10);
    		mI(); 
    		DebugLocation(536, 12);
    		mE(); 
    		DebugLocation(536, 14);
    		mW(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("VIEW", 65);
    		LeaveRule("VIEW", 65);
    		LeaveRule_VIEW();
        }
    }
    // $ANTLR end "VIEW"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_TABLE() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_TABLE() {}

    // $ANTLR start "TABLE"
    [GrammarRule("TABLE")]
    private void mTABLE()
    {
    	EnterRule_TABLE();
    	EnterRule("TABLE", 66);
    	TraceIn("TABLE", 66);
    		try
    		{
    		int _type = TABLE;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:537:7: ( T A B L E )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:537:9: T A B L E
    		{
    		DebugLocation(537, 9);
    		mT(); 
    		DebugLocation(537, 11);
    		mA(); 
    		DebugLocation(537, 13);
    		mB(); 
    		DebugLocation(537, 15);
    		mL(); 
    		DebugLocation(537, 17);
    		mE(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("TABLE", 66);
    		LeaveRule("TABLE", 66);
    		LeaveRule_TABLE();
        }
    }
    // $ANTLR end "TABLE"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_DROP() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_DROP() {}

    // $ANTLR start "DROP"
    [GrammarRule("DROP")]
    private void mDROP()
    {
    	EnterRule_DROP();
    	EnterRule("DROP", 67);
    	TraceIn("DROP", 67);
    		try
    		{
    		int _type = DROP;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:538:6: ( D R O P )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:538:8: D R O P
    		{
    		DebugLocation(538, 8);
    		mD(); 
    		DebugLocation(538, 10);
    		mR(); 
    		DebugLocation(538, 12);
    		mO(); 
    		DebugLocation(538, 14);
    		mP(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("DROP", 67);
    		LeaveRule("DROP", 67);
    		LeaveRule_DROP();
        }
    }
    // $ANTLR end "DROP"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_HAVING() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_HAVING() {}

    // $ANTLR start "HAVING"
    [GrammarRule("HAVING")]
    private void mHAVING()
    {
    	EnterRule_HAVING();
    	EnterRule("HAVING", 68);
    	TraceIn("HAVING", 68);
    		try
    		{
    		int _type = HAVING;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:539:8: ( H A V I N G )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:539:10: H A V I N G
    		{
    		DebugLocation(539, 10);
    		mH(); 
    		DebugLocation(539, 12);
    		mA(); 
    		DebugLocation(539, 14);
    		mV(); 
    		DebugLocation(539, 16);
    		mI(); 
    		DebugLocation(539, 18);
    		mN(); 
    		DebugLocation(539, 20);
    		mG(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("HAVING", 68);
    		LeaveRule("HAVING", 68);
    		LeaveRule_HAVING();
        }
    }
    // $ANTLR end "HAVING"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_COUNT() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_COUNT() {}

    // $ANTLR start "COUNT"
    [GrammarRule("COUNT")]
    private void mCOUNT()
    {
    	EnterRule_COUNT();
    	EnterRule("COUNT", 69);
    	TraceIn("COUNT", 69);
    		try
    		{
    		int _type = COUNT;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:540:8: ( C O U N T )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:540:10: C O U N T
    		{
    		DebugLocation(540, 10);
    		mC(); 
    		DebugLocation(540, 12);
    		mO(); 
    		DebugLocation(540, 14);
    		mU(); 
    		DebugLocation(540, 16);
    		mN(); 
    		DebugLocation(540, 18);
    		mT(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("COUNT", 69);
    		LeaveRule("COUNT", 69);
    		LeaveRule_COUNT();
        }
    }
    // $ANTLR end "COUNT"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_DATEADD() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_DATEADD() {}

    // $ANTLR start "DATEADD"
    [GrammarRule("DATEADD")]
    private void mDATEADD()
    {
    	EnterRule_DATEADD();
    	EnterRule("DATEADD", 70);
    	TraceIn("DATEADD", 70);
    		try
    		{
    		int _type = DATEADD;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:541:9: ( D A T E A D D )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:541:11: D A T E A D D
    		{
    		DebugLocation(541, 11);
    		mD(); 
    		DebugLocation(541, 13);
    		mA(); 
    		DebugLocation(541, 15);
    		mT(); 
    		DebugLocation(541, 17);
    		mE(); 
    		DebugLocation(541, 19);
    		mA(); 
    		DebugLocation(541, 21);
    		mD(); 
    		DebugLocation(541, 23);
    		mD(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("DATEADD", 70);
    		LeaveRule("DATEADD", 70);
    		LeaveRule_DATEADD();
        }
    }
    // $ANTLR end "DATEADD"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_DATEDIFF() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_DATEDIFF() {}

    // $ANTLR start "DATEDIFF"
    [GrammarRule("DATEDIFF")]
    private void mDATEDIFF()
    {
    	EnterRule_DATEDIFF();
    	EnterRule("DATEDIFF", 71);
    	TraceIn("DATEDIFF", 71);
    		try
    		{
    		int _type = DATEDIFF;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:542:9: ( D A T E D I F F )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:542:11: D A T E D I F F
    		{
    		DebugLocation(542, 11);
    		mD(); 
    		DebugLocation(542, 13);
    		mA(); 
    		DebugLocation(542, 15);
    		mT(); 
    		DebugLocation(542, 17);
    		mE(); 
    		DebugLocation(542, 19);
    		mD(); 
    		DebugLocation(542, 21);
    		mI(); 
    		DebugLocation(542, 23);
    		mF(); 
    		DebugLocation(542, 25);
    		mF(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("DATEDIFF", 71);
    		LeaveRule("DATEDIFF", 71);
    		LeaveRule_DATEDIFF();
        }
    }
    // $ANTLR end "DATEDIFF"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_DATEPART() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_DATEPART() {}

    // $ANTLR start "DATEPART"
    [GrammarRule("DATEPART")]
    private void mDATEPART()
    {
    	EnterRule_DATEPART();
    	EnterRule("DATEPART", 72);
    	TraceIn("DATEPART", 72);
    		try
    		{
    		int _type = DATEPART;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:543:9: ( D A T E P A R T )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:543:11: D A T E P A R T
    		{
    		DebugLocation(543, 11);
    		mD(); 
    		DebugLocation(543, 13);
    		mA(); 
    		DebugLocation(543, 15);
    		mT(); 
    		DebugLocation(543, 17);
    		mE(); 
    		DebugLocation(543, 19);
    		mP(); 
    		DebugLocation(543, 21);
    		mA(); 
    		DebugLocation(543, 23);
    		mR(); 
    		DebugLocation(543, 25);
    		mT(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("DATEPART", 72);
    		LeaveRule("DATEPART", 72);
    		LeaveRule_DATEPART();
        }
    }
    // $ANTLR end "DATEPART"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_UNION() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_UNION() {}

    // $ANTLR start "UNION"
    [GrammarRule("UNION")]
    private void mUNION()
    {
    	EnterRule_UNION();
    	EnterRule("UNION", 73);
    	TraceIn("UNION", 73);
    		try
    		{
    		int _type = UNION;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:544:8: ( U N I O N )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:544:10: U N I O N
    		{
    		DebugLocation(544, 10);
    		mU(); 
    		DebugLocation(544, 12);
    		mN(); 
    		DebugLocation(544, 14);
    		mI(); 
    		DebugLocation(544, 16);
    		mO(); 
    		DebugLocation(544, 18);
    		mN(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("UNION", 73);
    		LeaveRule("UNION", 73);
    		LeaveRule_UNION();
        }
    }
    // $ANTLR end "UNION"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_TOKEN() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_TOKEN() {}

    // $ANTLR start "TOKEN"
    [GrammarRule("TOKEN")]
    private void mTOKEN()
    {
    	EnterRule_TOKEN();
    	EnterRule("TOKEN", 74);
    	TraceIn("TOKEN", 74);
    		try
    		{
    		int _type = TOKEN;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:547:2: ( ( 'A' .. 'Z' | 'a' .. 'z' | '_' ) ( 'A' .. 'Z' | 'a' .. 'z' | '_' | '0' .. '9' )* )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:547:4: ( 'A' .. 'Z' | 'a' .. 'z' | '_' ) ( 'A' .. 'Z' | 'a' .. 'z' | '_' | '0' .. '9' )*
    		{
    		DebugLocation(547, 4);
    		if ((input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z'))
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}

    		DebugLocation(547, 32);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:547:32: ( 'A' .. 'Z' | 'a' .. 'z' | '_' | '0' .. '9' )*
    		try { DebugEnterSubRule(6);
    		while (true)
    		{
    			int alt6=2;
    			try { DebugEnterDecision(6, decisionCanBacktrack[6]);
    			int LA6_0 = input.LA(1);

    			if (((LA6_0>='0' && LA6_0<='9')||(LA6_0>='A' && LA6_0<='Z')||LA6_0=='_'||(LA6_0>='a' && LA6_0<='z')))
    			{
    				alt6 = 1;
    			}


    			} finally { DebugExitDecision(6); }
    			switch ( alt6 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:
    				{
    				DebugLocation(547, 32);
    				input.Consume();


    				}
    				break;

    			default:
    				goto loop6;
    			}
    		}

    		loop6:
    			;

    		} finally { DebugExitSubRule(6); }


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("TOKEN", 74);
    		LeaveRule("TOKEN", 74);
    		LeaveRule_TOKEN();
        }
    }
    // $ANTLR end "TOKEN"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_SYSTEMVAR() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_SYSTEMVAR() {}

    // $ANTLR start "SYSTEMVAR"
    [GrammarRule("SYSTEMVAR")]
    private void mSYSTEMVAR()
    {
    	EnterRule_SYSTEMVAR();
    	EnterRule("SYSTEMVAR", 75);
    	TraceIn("SYSTEMVAR", 75);
    		try
    		{
    		int _type = SYSTEMVAR;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:551:2: ( '$' TOKEN )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:551:4: '$' TOKEN
    		{
    		DebugLocation(551, 4);
    		Match('$'); 
    		DebugLocation(551, 8);
    		mTOKEN(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("SYSTEMVAR", 75);
    		LeaveRule("SYSTEMVAR", 75);
    		LeaveRule_SYSTEMVAR();
        }
    }
    // $ANTLR end "SYSTEMVAR"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_VARIABLE() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_VARIABLE() {}

    // $ANTLR start "VARIABLE"
    [GrammarRule("VARIABLE")]
    private void mVARIABLE()
    {
    	EnterRule_VARIABLE();
    	EnterRule("VARIABLE", 76);
    	TraceIn("VARIABLE", 76);
    		try
    		{
    		int _type = VARIABLE;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:555:2: ( '@' TOKEN )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:555:4: '@' TOKEN
    		{
    		DebugLocation(555, 4);
    		Match('@'); 
    		DebugLocation(555, 8);
    		mTOKEN(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("VARIABLE", 76);
    		LeaveRule("VARIABLE", 76);
    		LeaveRule_VARIABLE();
        }
    }
    // $ANTLR end "VARIABLE"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_NUMBER() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_NUMBER() {}

    // $ANTLR start "NUMBER"
    [GrammarRule("NUMBER")]
    private void mNUMBER()
    {
    	EnterRule_NUMBER();
    	EnterRule("NUMBER", 77);
    	TraceIn("NUMBER", 77);
    		try
    		{
    		int _type = NUMBER;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:559:2: ( ( DIGIT )+ )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:559:4: ( DIGIT )+
    		{
    		DebugLocation(559, 4);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:559:4: ( DIGIT )+
    		int cnt7=0;
    		try { DebugEnterSubRule(7);
    		while (true)
    		{
    			int alt7=2;
    			try { DebugEnterDecision(7, decisionCanBacktrack[7]);
    			int LA7_0 = input.LA(1);

    			if (((LA7_0>='0' && LA7_0<='9')))
    			{
    				alt7 = 1;
    			}


    			} finally { DebugExitDecision(7); }
    			switch (alt7)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:
    				{
    				DebugLocation(559, 4);
    				input.Consume();


    				}
    				break;

    			default:
    				if (cnt7 >= 1)
    					goto loop7;

    				EarlyExitException eee7 = new EarlyExitException( 7, input );
    				DebugRecognitionException(eee7);
    				throw eee7;
    			}
    			cnt7++;
    		}
    		loop7:
    			;

    		} finally { DebugExitSubRule(7); }


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("NUMBER", 77);
    		LeaveRule("NUMBER", 77);
    		LeaveRule_NUMBER();
        }
    }
    // $ANTLR end "NUMBER"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_WS() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_WS() {}

    // $ANTLR start "WS"
    [GrammarRule("WS")]
    private void mWS()
    {
    	EnterRule_WS();
    	EnterRule("WS", 78);
    	TraceIn("WS", 78);
    		try
    		{
    		int _type = WS;
    		int _channel = DefaultTokenChannel;
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:563:2: ( ( ' ' | '\\t' | '\\n' | '\\r' | '\\u000C' )+ )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:563:4: ( ' ' | '\\t' | '\\n' | '\\r' | '\\u000C' )+
    		{
    		DebugLocation(563, 4);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:563:4: ( ' ' | '\\t' | '\\n' | '\\r' | '\\u000C' )+
    		int cnt8=0;
    		try { DebugEnterSubRule(8);
    		while (true)
    		{
    			int alt8=2;
    			try { DebugEnterDecision(8, decisionCanBacktrack[8]);
    			int LA8_0 = input.LA(1);

    			if (((LA8_0>='\t' && LA8_0<='\n')||(LA8_0>='\f' && LA8_0<='\r')||LA8_0==' '))
    			{
    				alt8 = 1;
    			}


    			} finally { DebugExitDecision(8); }
    			switch (alt8)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:
    				{
    				DebugLocation(563, 4);
    				input.Consume();


    				}
    				break;

    			default:
    				if (cnt8 >= 1)
    					goto loop8;

    				EarlyExitException eee8 = new EarlyExitException( 8, input );
    				DebugRecognitionException(eee8);
    				throw eee8;
    			}
    			cnt8++;
    		}
    		loop8:
    			;

    		} finally { DebugExitSubRule(8); }


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("WS", 78);
    		LeaveRule("WS", 78);
    		LeaveRule_WS();
        }
    }
    // $ANTLR end "WS"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_DIGIT() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_DIGIT() {}

    // $ANTLR start "DIGIT"
    [GrammarRule("DIGIT")]
    private void mDIGIT()
    {
    	EnterRule_DIGIT();
    	EnterRule("DIGIT", 79);
    	TraceIn("DIGIT", 79);
    		try
    		{
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:568:16: ( '0' .. '9' )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:
    		{
    		DebugLocation(568, 16);
    		if ((input.LA(1)>='0' && input.LA(1)<='9'))
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    	}
    	finally
    	{
    		TraceOut("DIGIT", 79);
    		LeaveRule("DIGIT", 79);
    		LeaveRule_DIGIT();
        }
    }
    // $ANTLR end "DIGIT"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_A() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_A() {}

    // $ANTLR start "A"
    [GrammarRule("A")]
    private void mA()
    {
    	EnterRule_A();
    	EnterRule("A", 80);
    	TraceIn("A", 80);
    		try
    		{
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:570:11: ( ( 'a' | 'A' ) )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:
    		{
    		DebugLocation(570, 11);
    		if (input.LA(1)=='A'||input.LA(1)=='a')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    	}
    	finally
    	{
    		TraceOut("A", 80);
    		LeaveRule("A", 80);
    		LeaveRule_A();
        }
    }
    // $ANTLR end "A"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_B() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_B() {}

    // $ANTLR start "B"
    [GrammarRule("B")]
    private void mB()
    {
    	EnterRule_B();
    	EnterRule("B", 81);
    	TraceIn("B", 81);
    		try
    		{
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:571:11: ( ( 'b' | 'B' ) )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:
    		{
    		DebugLocation(571, 11);
    		if (input.LA(1)=='B'||input.LA(1)=='b')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    	}
    	finally
    	{
    		TraceOut("B", 81);
    		LeaveRule("B", 81);
    		LeaveRule_B();
        }
    }
    // $ANTLR end "B"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_C() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_C() {}

    // $ANTLR start "C"
    [GrammarRule("C")]
    private void mC()
    {
    	EnterRule_C();
    	EnterRule("C", 82);
    	TraceIn("C", 82);
    		try
    		{
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:572:11: ( ( 'c' | 'C' ) )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:
    		{
    		DebugLocation(572, 11);
    		if (input.LA(1)=='C'||input.LA(1)=='c')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    	}
    	finally
    	{
    		TraceOut("C", 82);
    		LeaveRule("C", 82);
    		LeaveRule_C();
        }
    }
    // $ANTLR end "C"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_D() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_D() {}

    // $ANTLR start "D"
    [GrammarRule("D")]
    private void mD()
    {
    	EnterRule_D();
    	EnterRule("D", 83);
    	TraceIn("D", 83);
    		try
    		{
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:573:11: ( ( 'd' | 'D' ) )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:
    		{
    		DebugLocation(573, 11);
    		if (input.LA(1)=='D'||input.LA(1)=='d')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    	}
    	finally
    	{
    		TraceOut("D", 83);
    		LeaveRule("D", 83);
    		LeaveRule_D();
        }
    }
    // $ANTLR end "D"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_E() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_E() {}

    // $ANTLR start "E"
    [GrammarRule("E")]
    private void mE()
    {
    	EnterRule_E();
    	EnterRule("E", 84);
    	TraceIn("E", 84);
    		try
    		{
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:574:11: ( ( 'e' | 'E' ) )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:
    		{
    		DebugLocation(574, 11);
    		if (input.LA(1)=='E'||input.LA(1)=='e')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    	}
    	finally
    	{
    		TraceOut("E", 84);
    		LeaveRule("E", 84);
    		LeaveRule_E();
        }
    }
    // $ANTLR end "E"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_F() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_F() {}

    // $ANTLR start "F"
    [GrammarRule("F")]
    private void mF()
    {
    	EnterRule_F();
    	EnterRule("F", 85);
    	TraceIn("F", 85);
    		try
    		{
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:575:11: ( ( 'f' | 'F' ) )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:
    		{
    		DebugLocation(575, 11);
    		if (input.LA(1)=='F'||input.LA(1)=='f')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    	}
    	finally
    	{
    		TraceOut("F", 85);
    		LeaveRule("F", 85);
    		LeaveRule_F();
        }
    }
    // $ANTLR end "F"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_G() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_G() {}

    // $ANTLR start "G"
    [GrammarRule("G")]
    private void mG()
    {
    	EnterRule_G();
    	EnterRule("G", 86);
    	TraceIn("G", 86);
    		try
    		{
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:576:11: ( ( 'g' | 'G' ) )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:
    		{
    		DebugLocation(576, 11);
    		if (input.LA(1)=='G'||input.LA(1)=='g')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    	}
    	finally
    	{
    		TraceOut("G", 86);
    		LeaveRule("G", 86);
    		LeaveRule_G();
        }
    }
    // $ANTLR end "G"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_H() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_H() {}

    // $ANTLR start "H"
    [GrammarRule("H")]
    private void mH()
    {
    	EnterRule_H();
    	EnterRule("H", 87);
    	TraceIn("H", 87);
    		try
    		{
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:577:11: ( ( 'h' | 'H' ) )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:
    		{
    		DebugLocation(577, 11);
    		if (input.LA(1)=='H'||input.LA(1)=='h')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    	}
    	finally
    	{
    		TraceOut("H", 87);
    		LeaveRule("H", 87);
    		LeaveRule_H();
        }
    }
    // $ANTLR end "H"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_I() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_I() {}

    // $ANTLR start "I"
    [GrammarRule("I")]
    private void mI()
    {
    	EnterRule_I();
    	EnterRule("I", 88);
    	TraceIn("I", 88);
    		try
    		{
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:578:11: ( ( 'i' | 'I' ) )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:
    		{
    		DebugLocation(578, 11);
    		if (input.LA(1)=='I'||input.LA(1)=='i')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    	}
    	finally
    	{
    		TraceOut("I", 88);
    		LeaveRule("I", 88);
    		LeaveRule_I();
        }
    }
    // $ANTLR end "I"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_J() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_J() {}

    // $ANTLR start "J"
    [GrammarRule("J")]
    private void mJ()
    {
    	EnterRule_J();
    	EnterRule("J", 89);
    	TraceIn("J", 89);
    		try
    		{
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:579:11: ( ( 'j' | 'J' ) )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:
    		{
    		DebugLocation(579, 11);
    		if (input.LA(1)=='J'||input.LA(1)=='j')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    	}
    	finally
    	{
    		TraceOut("J", 89);
    		LeaveRule("J", 89);
    		LeaveRule_J();
        }
    }
    // $ANTLR end "J"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_K() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_K() {}

    // $ANTLR start "K"
    [GrammarRule("K")]
    private void mK()
    {
    	EnterRule_K();
    	EnterRule("K", 90);
    	TraceIn("K", 90);
    		try
    		{
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:580:11: ( ( 'k' | 'K' ) )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:
    		{
    		DebugLocation(580, 11);
    		if (input.LA(1)=='K'||input.LA(1)=='k')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    	}
    	finally
    	{
    		TraceOut("K", 90);
    		LeaveRule("K", 90);
    		LeaveRule_K();
        }
    }
    // $ANTLR end "K"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_L() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_L() {}

    // $ANTLR start "L"
    [GrammarRule("L")]
    private void mL()
    {
    	EnterRule_L();
    	EnterRule("L", 91);
    	TraceIn("L", 91);
    		try
    		{
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:581:11: ( ( 'l' | 'L' ) )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:
    		{
    		DebugLocation(581, 11);
    		if (input.LA(1)=='L'||input.LA(1)=='l')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    	}
    	finally
    	{
    		TraceOut("L", 91);
    		LeaveRule("L", 91);
    		LeaveRule_L();
        }
    }
    // $ANTLR end "L"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_M() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_M() {}

    // $ANTLR start "M"
    [GrammarRule("M")]
    private void mM()
    {
    	EnterRule_M();
    	EnterRule("M", 92);
    	TraceIn("M", 92);
    		try
    		{
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:582:11: ( ( 'm' | 'M' ) )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:
    		{
    		DebugLocation(582, 11);
    		if (input.LA(1)=='M'||input.LA(1)=='m')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    	}
    	finally
    	{
    		TraceOut("M", 92);
    		LeaveRule("M", 92);
    		LeaveRule_M();
        }
    }
    // $ANTLR end "M"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_N() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_N() {}

    // $ANTLR start "N"
    [GrammarRule("N")]
    private void mN()
    {
    	EnterRule_N();
    	EnterRule("N", 93);
    	TraceIn("N", 93);
    		try
    		{
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:583:11: ( ( 'n' | 'N' ) )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:
    		{
    		DebugLocation(583, 11);
    		if (input.LA(1)=='N'||input.LA(1)=='n')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    	}
    	finally
    	{
    		TraceOut("N", 93);
    		LeaveRule("N", 93);
    		LeaveRule_N();
        }
    }
    // $ANTLR end "N"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_O() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_O() {}

    // $ANTLR start "O"
    [GrammarRule("O")]
    private void mO()
    {
    	EnterRule_O();
    	EnterRule("O", 94);
    	TraceIn("O", 94);
    		try
    		{
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:584:11: ( ( 'o' | 'O' ) )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:
    		{
    		DebugLocation(584, 11);
    		if (input.LA(1)=='O'||input.LA(1)=='o')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    	}
    	finally
    	{
    		TraceOut("O", 94);
    		LeaveRule("O", 94);
    		LeaveRule_O();
        }
    }
    // $ANTLR end "O"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_P() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_P() {}

    // $ANTLR start "P"
    [GrammarRule("P")]
    private void mP()
    {
    	EnterRule_P();
    	EnterRule("P", 95);
    	TraceIn("P", 95);
    		try
    		{
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:585:11: ( ( 'p' | 'P' ) )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:
    		{
    		DebugLocation(585, 11);
    		if (input.LA(1)=='P'||input.LA(1)=='p')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    	}
    	finally
    	{
    		TraceOut("P", 95);
    		LeaveRule("P", 95);
    		LeaveRule_P();
        }
    }
    // $ANTLR end "P"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_Q() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_Q() {}

    // $ANTLR start "Q"
    [GrammarRule("Q")]
    private void mQ()
    {
    	EnterRule_Q();
    	EnterRule("Q", 96);
    	TraceIn("Q", 96);
    		try
    		{
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:586:11: ( ( 'q' | 'Q' ) )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:
    		{
    		DebugLocation(586, 11);
    		if (input.LA(1)=='Q'||input.LA(1)=='q')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    	}
    	finally
    	{
    		TraceOut("Q", 96);
    		LeaveRule("Q", 96);
    		LeaveRule_Q();
        }
    }
    // $ANTLR end "Q"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_R() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_R() {}

    // $ANTLR start "R"
    [GrammarRule("R")]
    private void mR()
    {
    	EnterRule_R();
    	EnterRule("R", 97);
    	TraceIn("R", 97);
    		try
    		{
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:587:11: ( ( 'r' | 'R' ) )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:
    		{
    		DebugLocation(587, 11);
    		if (input.LA(1)=='R'||input.LA(1)=='r')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    	}
    	finally
    	{
    		TraceOut("R", 97);
    		LeaveRule("R", 97);
    		LeaveRule_R();
        }
    }
    // $ANTLR end "R"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_S() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_S() {}

    // $ANTLR start "S"
    [GrammarRule("S")]
    private void mS()
    {
    	EnterRule_S();
    	EnterRule("S", 98);
    	TraceIn("S", 98);
    		try
    		{
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:588:11: ( ( 's' | 'S' ) )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:
    		{
    		DebugLocation(588, 11);
    		if (input.LA(1)=='S'||input.LA(1)=='s')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    	}
    	finally
    	{
    		TraceOut("S", 98);
    		LeaveRule("S", 98);
    		LeaveRule_S();
        }
    }
    // $ANTLR end "S"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T() {}

    // $ANTLR start "T"
    [GrammarRule("T")]
    private void mT()
    {
    	EnterRule_T();
    	EnterRule("T", 99);
    	TraceIn("T", 99);
    		try
    		{
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:589:11: ( ( 't' | 'T' ) )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:
    		{
    		DebugLocation(589, 11);
    		if (input.LA(1)=='T'||input.LA(1)=='t')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    	}
    	finally
    	{
    		TraceOut("T", 99);
    		LeaveRule("T", 99);
    		LeaveRule_T();
        }
    }
    // $ANTLR end "T"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_U() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_U() {}

    // $ANTLR start "U"
    [GrammarRule("U")]
    private void mU()
    {
    	EnterRule_U();
    	EnterRule("U", 100);
    	TraceIn("U", 100);
    		try
    		{
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:590:11: ( ( 'u' | 'U' ) )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:
    		{
    		DebugLocation(590, 11);
    		if (input.LA(1)=='U'||input.LA(1)=='u')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    	}
    	finally
    	{
    		TraceOut("U", 100);
    		LeaveRule("U", 100);
    		LeaveRule_U();
        }
    }
    // $ANTLR end "U"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_V() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_V() {}

    // $ANTLR start "V"
    [GrammarRule("V")]
    private void mV()
    {
    	EnterRule_V();
    	EnterRule("V", 101);
    	TraceIn("V", 101);
    		try
    		{
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:591:11: ( ( 'v' | 'V' ) )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:
    		{
    		DebugLocation(591, 11);
    		if (input.LA(1)=='V'||input.LA(1)=='v')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    	}
    	finally
    	{
    		TraceOut("V", 101);
    		LeaveRule("V", 101);
    		LeaveRule_V();
        }
    }
    // $ANTLR end "V"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_W() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_W() {}

    // $ANTLR start "W"
    [GrammarRule("W")]
    private void mW()
    {
    	EnterRule_W();
    	EnterRule("W", 102);
    	TraceIn("W", 102);
    		try
    		{
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:592:11: ( ( 'w' | 'W' ) )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:
    		{
    		DebugLocation(592, 11);
    		if (input.LA(1)=='W'||input.LA(1)=='w')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    	}
    	finally
    	{
    		TraceOut("W", 102);
    		LeaveRule("W", 102);
    		LeaveRule_W();
        }
    }
    // $ANTLR end "W"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_X() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_X() {}

    // $ANTLR start "X"
    [GrammarRule("X")]
    private void mX()
    {
    	EnterRule_X();
    	EnterRule("X", 103);
    	TraceIn("X", 103);
    		try
    		{
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:593:11: ( ( 'x' | 'X' ) )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:
    		{
    		DebugLocation(593, 11);
    		if (input.LA(1)=='X'||input.LA(1)=='x')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    	}
    	finally
    	{
    		TraceOut("X", 103);
    		LeaveRule("X", 103);
    		LeaveRule_X();
        }
    }
    // $ANTLR end "X"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_Y() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_Y() {}

    // $ANTLR start "Y"
    [GrammarRule("Y")]
    private void mY()
    {
    	EnterRule_Y();
    	EnterRule("Y", 104);
    	TraceIn("Y", 104);
    		try
    		{
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:594:11: ( ( 'y' | 'Y' ) )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:
    		{
    		DebugLocation(594, 11);
    		if (input.LA(1)=='Y'||input.LA(1)=='y')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    	}
    	finally
    	{
    		TraceOut("Y", 104);
    		LeaveRule("Y", 104);
    		LeaveRule_Y();
        }
    }
    // $ANTLR end "Y"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_Z() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_Z() {}

    // $ANTLR start "Z"
    [GrammarRule("Z")]
    private void mZ()
    {
    	EnterRule_Z();
    	EnterRule("Z", 105);
    	TraceIn("Z", 105);
    		try
    		{
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:595:11: ( ( 'z' | 'Z' ) )
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:
    		{
    		DebugLocation(595, 11);
    		if (input.LA(1)=='Z'||input.LA(1)=='z')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    	}
    	finally
    	{
    		TraceOut("Z", 105);
    		LeaveRule("Z", 105);
    		LeaveRule_Z();
        }
    }
    // $ANTLR end "Z"

    public override void mTokens()
    {
    	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:8: ( T__162 | T__163 | T__164 | T__165 | T__166 | T__167 | T__168 | T__169 | T__170 | T__171 | T__172 | T__173 | T__174 | T__175 | T__176 | T__177 | T__178 | T__179 | T__180 | T__181 | T__182 | T__183 | T__184 | T__185 | T__186 | COMMENT_LINE | COMMENT_BLOCK | STRING | SIMPLE_FILE | SELECT | ALL | DISTINCT | TOP | INTO | FROM | WHERE | NOT | AND | OR | LIKE | MATCH | GROUP | ORDER | BY | ASC | DESC | ORIG | CONVERT | CAST | AS | BETWEEN | IN | ANY | SOME | EXISTS | CASE | WHEN | THEN | ELSE | END | USE | DECLARE | SET | CREATE | VIEW | TABLE | DROP | HAVING | COUNT | DATEADD | DATEDIFF | DATEPART | UNION | TOKEN | SYSTEMVAR | VARIABLE | NUMBER | WS )
    	int alt9=78;
    	try { DebugEnterDecision(9, decisionCanBacktrack[9]);
    	try
    	{
    		alt9 = dfa9.Predict(input);
    	}
    	catch (NoViableAltException nvae)
    	{
    		DebugRecognitionException(nvae);
    		throw;
    	}
    	} finally { DebugExitDecision(9); }
    	switch (alt9)
    	{
    	case 1:
    		DebugEnterAlt(1);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:10: T__162
    		{
    		DebugLocation(1, 10);
    		mT__162(); 

    		}
    		break;
    	case 2:
    		DebugEnterAlt(2);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:17: T__163
    		{
    		DebugLocation(1, 17);
    		mT__163(); 

    		}
    		break;
    	case 3:
    		DebugEnterAlt(3);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:24: T__164
    		{
    		DebugLocation(1, 24);
    		mT__164(); 

    		}
    		break;
    	case 4:
    		DebugEnterAlt(4);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:31: T__165
    		{
    		DebugLocation(1, 31);
    		mT__165(); 

    		}
    		break;
    	case 5:
    		DebugEnterAlt(5);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:38: T__166
    		{
    		DebugLocation(1, 38);
    		mT__166(); 

    		}
    		break;
    	case 6:
    		DebugEnterAlt(6);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:45: T__167
    		{
    		DebugLocation(1, 45);
    		mT__167(); 

    		}
    		break;
    	case 7:
    		DebugEnterAlt(7);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:52: T__168
    		{
    		DebugLocation(1, 52);
    		mT__168(); 

    		}
    		break;
    	case 8:
    		DebugEnterAlt(8);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:59: T__169
    		{
    		DebugLocation(1, 59);
    		mT__169(); 

    		}
    		break;
    	case 9:
    		DebugEnterAlt(9);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:66: T__170
    		{
    		DebugLocation(1, 66);
    		mT__170(); 

    		}
    		break;
    	case 10:
    		DebugEnterAlt(10);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:73: T__171
    		{
    		DebugLocation(1, 73);
    		mT__171(); 

    		}
    		break;
    	case 11:
    		DebugEnterAlt(11);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:80: T__172
    		{
    		DebugLocation(1, 80);
    		mT__172(); 

    		}
    		break;
    	case 12:
    		DebugEnterAlt(12);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:87: T__173
    		{
    		DebugLocation(1, 87);
    		mT__173(); 

    		}
    		break;
    	case 13:
    		DebugEnterAlt(13);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:94: T__174
    		{
    		DebugLocation(1, 94);
    		mT__174(); 

    		}
    		break;
    	case 14:
    		DebugEnterAlt(14);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:101: T__175
    		{
    		DebugLocation(1, 101);
    		mT__175(); 

    		}
    		break;
    	case 15:
    		DebugEnterAlt(15);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:108: T__176
    		{
    		DebugLocation(1, 108);
    		mT__176(); 

    		}
    		break;
    	case 16:
    		DebugEnterAlt(16);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:115: T__177
    		{
    		DebugLocation(1, 115);
    		mT__177(); 

    		}
    		break;
    	case 17:
    		DebugEnterAlt(17);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:122: T__178
    		{
    		DebugLocation(1, 122);
    		mT__178(); 

    		}
    		break;
    	case 18:
    		DebugEnterAlt(18);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:129: T__179
    		{
    		DebugLocation(1, 129);
    		mT__179(); 

    		}
    		break;
    	case 19:
    		DebugEnterAlt(19);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:136: T__180
    		{
    		DebugLocation(1, 136);
    		mT__180(); 

    		}
    		break;
    	case 20:
    		DebugEnterAlt(20);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:143: T__181
    		{
    		DebugLocation(1, 143);
    		mT__181(); 

    		}
    		break;
    	case 21:
    		DebugEnterAlt(21);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:150: T__182
    		{
    		DebugLocation(1, 150);
    		mT__182(); 

    		}
    		break;
    	case 22:
    		DebugEnterAlt(22);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:157: T__183
    		{
    		DebugLocation(1, 157);
    		mT__183(); 

    		}
    		break;
    	case 23:
    		DebugEnterAlt(23);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:164: T__184
    		{
    		DebugLocation(1, 164);
    		mT__184(); 

    		}
    		break;
    	case 24:
    		DebugEnterAlt(24);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:171: T__185
    		{
    		DebugLocation(1, 171);
    		mT__185(); 

    		}
    		break;
    	case 25:
    		DebugEnterAlt(25);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:178: T__186
    		{
    		DebugLocation(1, 178);
    		mT__186(); 

    		}
    		break;
    	case 26:
    		DebugEnterAlt(26);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:185: COMMENT_LINE
    		{
    		DebugLocation(1, 185);
    		mCOMMENT_LINE(); 

    		}
    		break;
    	case 27:
    		DebugEnterAlt(27);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:198: COMMENT_BLOCK
    		{
    		DebugLocation(1, 198);
    		mCOMMENT_BLOCK(); 

    		}
    		break;
    	case 28:
    		DebugEnterAlt(28);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:212: STRING
    		{
    		DebugLocation(1, 212);
    		mSTRING(); 

    		}
    		break;
    	case 29:
    		DebugEnterAlt(29);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:219: SIMPLE_FILE
    		{
    		DebugLocation(1, 219);
    		mSIMPLE_FILE(); 

    		}
    		break;
    	case 30:
    		DebugEnterAlt(30);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:231: SELECT
    		{
    		DebugLocation(1, 231);
    		mSELECT(); 

    		}
    		break;
    	case 31:
    		DebugEnterAlt(31);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:238: ALL
    		{
    		DebugLocation(1, 238);
    		mALL(); 

    		}
    		break;
    	case 32:
    		DebugEnterAlt(32);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:242: DISTINCT
    		{
    		DebugLocation(1, 242);
    		mDISTINCT(); 

    		}
    		break;
    	case 33:
    		DebugEnterAlt(33);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:251: TOP
    		{
    		DebugLocation(1, 251);
    		mTOP(); 

    		}
    		break;
    	case 34:
    		DebugEnterAlt(34);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:255: INTO
    		{
    		DebugLocation(1, 255);
    		mINTO(); 

    		}
    		break;
    	case 35:
    		DebugEnterAlt(35);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:260: FROM
    		{
    		DebugLocation(1, 260);
    		mFROM(); 

    		}
    		break;
    	case 36:
    		DebugEnterAlt(36);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:265: WHERE
    		{
    		DebugLocation(1, 265);
    		mWHERE(); 

    		}
    		break;
    	case 37:
    		DebugEnterAlt(37);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:271: NOT
    		{
    		DebugLocation(1, 271);
    		mNOT(); 

    		}
    		break;
    	case 38:
    		DebugEnterAlt(38);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:275: AND
    		{
    		DebugLocation(1, 275);
    		mAND(); 

    		}
    		break;
    	case 39:
    		DebugEnterAlt(39);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:279: OR
    		{
    		DebugLocation(1, 279);
    		mOR(); 

    		}
    		break;
    	case 40:
    		DebugEnterAlt(40);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:282: LIKE
    		{
    		DebugLocation(1, 282);
    		mLIKE(); 

    		}
    		break;
    	case 41:
    		DebugEnterAlt(41);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:287: MATCH
    		{
    		DebugLocation(1, 287);
    		mMATCH(); 

    		}
    		break;
    	case 42:
    		DebugEnterAlt(42);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:293: GROUP
    		{
    		DebugLocation(1, 293);
    		mGROUP(); 

    		}
    		break;
    	case 43:
    		DebugEnterAlt(43);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:299: ORDER
    		{
    		DebugLocation(1, 299);
    		mORDER(); 

    		}
    		break;
    	case 44:
    		DebugEnterAlt(44);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:305: BY
    		{
    		DebugLocation(1, 305);
    		mBY(); 

    		}
    		break;
    	case 45:
    		DebugEnterAlt(45);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:308: ASC
    		{
    		DebugLocation(1, 308);
    		mASC(); 

    		}
    		break;
    	case 46:
    		DebugEnterAlt(46);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:312: DESC
    		{
    		DebugLocation(1, 312);
    		mDESC(); 

    		}
    		break;
    	case 47:
    		DebugEnterAlt(47);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:317: ORIG
    		{
    		DebugLocation(1, 317);
    		mORIG(); 

    		}
    		break;
    	case 48:
    		DebugEnterAlt(48);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:322: CONVERT
    		{
    		DebugLocation(1, 322);
    		mCONVERT(); 

    		}
    		break;
    	case 49:
    		DebugEnterAlt(49);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:330: CAST
    		{
    		DebugLocation(1, 330);
    		mCAST(); 

    		}
    		break;
    	case 50:
    		DebugEnterAlt(50);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:335: AS
    		{
    		DebugLocation(1, 335);
    		mAS(); 

    		}
    		break;
    	case 51:
    		DebugEnterAlt(51);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:338: BETWEEN
    		{
    		DebugLocation(1, 338);
    		mBETWEEN(); 

    		}
    		break;
    	case 52:
    		DebugEnterAlt(52);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:346: IN
    		{
    		DebugLocation(1, 346);
    		mIN(); 

    		}
    		break;
    	case 53:
    		DebugEnterAlt(53);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:349: ANY
    		{
    		DebugLocation(1, 349);
    		mANY(); 

    		}
    		break;
    	case 54:
    		DebugEnterAlt(54);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:353: SOME
    		{
    		DebugLocation(1, 353);
    		mSOME(); 

    		}
    		break;
    	case 55:
    		DebugEnterAlt(55);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:358: EXISTS
    		{
    		DebugLocation(1, 358);
    		mEXISTS(); 

    		}
    		break;
    	case 56:
    		DebugEnterAlt(56);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:365: CASE
    		{
    		DebugLocation(1, 365);
    		mCASE(); 

    		}
    		break;
    	case 57:
    		DebugEnterAlt(57);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:370: WHEN
    		{
    		DebugLocation(1, 370);
    		mWHEN(); 

    		}
    		break;
    	case 58:
    		DebugEnterAlt(58);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:375: THEN
    		{
    		DebugLocation(1, 375);
    		mTHEN(); 

    		}
    		break;
    	case 59:
    		DebugEnterAlt(59);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:380: ELSE
    		{
    		DebugLocation(1, 380);
    		mELSE(); 

    		}
    		break;
    	case 60:
    		DebugEnterAlt(60);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:385: END
    		{
    		DebugLocation(1, 385);
    		mEND(); 

    		}
    		break;
    	case 61:
    		DebugEnterAlt(61);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:389: USE
    		{
    		DebugLocation(1, 389);
    		mUSE(); 

    		}
    		break;
    	case 62:
    		DebugEnterAlt(62);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:393: DECLARE
    		{
    		DebugLocation(1, 393);
    		mDECLARE(); 

    		}
    		break;
    	case 63:
    		DebugEnterAlt(63);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:401: SET
    		{
    		DebugLocation(1, 401);
    		mSET(); 

    		}
    		break;
    	case 64:
    		DebugEnterAlt(64);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:405: CREATE
    		{
    		DebugLocation(1, 405);
    		mCREATE(); 

    		}
    		break;
    	case 65:
    		DebugEnterAlt(65);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:412: VIEW
    		{
    		DebugLocation(1, 412);
    		mVIEW(); 

    		}
    		break;
    	case 66:
    		DebugEnterAlt(66);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:417: TABLE
    		{
    		DebugLocation(1, 417);
    		mTABLE(); 

    		}
    		break;
    	case 67:
    		DebugEnterAlt(67);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:423: DROP
    		{
    		DebugLocation(1, 423);
    		mDROP(); 

    		}
    		break;
    	case 68:
    		DebugEnterAlt(68);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:428: HAVING
    		{
    		DebugLocation(1, 428);
    		mHAVING(); 

    		}
    		break;
    	case 69:
    		DebugEnterAlt(69);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:435: COUNT
    		{
    		DebugLocation(1, 435);
    		mCOUNT(); 

    		}
    		break;
    	case 70:
    		DebugEnterAlt(70);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:441: DATEADD
    		{
    		DebugLocation(1, 441);
    		mDATEADD(); 

    		}
    		break;
    	case 71:
    		DebugEnterAlt(71);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:449: DATEDIFF
    		{
    		DebugLocation(1, 449);
    		mDATEDIFF(); 

    		}
    		break;
    	case 72:
    		DebugEnterAlt(72);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:458: DATEPART
    		{
    		DebugLocation(1, 458);
    		mDATEPART(); 

    		}
    		break;
    	case 73:
    		DebugEnterAlt(73);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:467: UNION
    		{
    		DebugLocation(1, 467);
    		mUNION(); 

    		}
    		break;
    	case 74:
    		DebugEnterAlt(74);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:473: TOKEN
    		{
    		DebugLocation(1, 473);
    		mTOKEN(); 

    		}
    		break;
    	case 75:
    		DebugEnterAlt(75);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:479: SYSTEMVAR
    		{
    		DebugLocation(1, 479);
    		mSYSTEMVAR(); 

    		}
    		break;
    	case 76:
    		DebugEnterAlt(76);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:489: VARIABLE
    		{
    		DebugLocation(1, 489);
    		mVARIABLE(); 

    		}
    		break;
    	case 77:
    		DebugEnterAlt(77);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:498: NUMBER
    		{
    		DebugLocation(1, 498);
    		mNUMBER(); 

    		}
    		break;
    	case 78:
    		DebugEnterAlt(78);
    		// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:1:505: WS
    		{
    		DebugLocation(1, 505);
    		mWS(); 

    		}
    		break;

    	}

    }


	#region DFA
	DFA9 dfa9;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa9 = new DFA9(this, SpecialStateTransition9);
	}

	private class DFA9 : DFA
	{
		private const string DFA9_eotS =
			"\x9\xFFFF\x1\x31\x1\xFFFF\x1\x33\x1\xFFFF\x1\x36\x1\xFFFF\x1\x38\x1\x39"+
			"\x5\xFFFF\x12\x28\x13\xFFFF\x4\x28\x1\x61\x7\x28\x1\x6B\x3\x28\x1\x70"+
			"\x3\x28\x1\x76\xC\x28\x1\x84\x1\x28\x1\x86\x1\x87\x1\x88\x1\xFFFF\x1"+
			"\x89\x5\x28\x1\x8F\x2\x28\x1\xFFFF\x3\x28\x1\x96\x1\xFFFF\x5\x28\x1\xFFFF"+
			"\x7\x28\x1\xA4\x1\xA5\x4\x28\x1\xFFFF\x1\xAA\x4\xFFFF\x1\x28\x1\xAC\x1"+
			"\x28\x1\xAE\x1\x28\x1\xFFFF\x1\xB2\x1\x28\x1\xB4\x1\xB5\x1\x28\x1\xB7"+
			"\x1\xFFFF\x1\x28\x1\xB9\x1\xBA\x5\x28\x1\xC0\x1\xC1\x2\x28\x1\xC4\x2"+
			"\xFFFF\x1\x28\x1\xC6\x2\x28\x1\xFFFF\x1\x28\x1\xFFFF\x1\x28\x1\xFFFF"+
			"\x3\x28\x1\xFFFF\x1\xCE\x2\xFFFF\x1\xCF\x1\xFFFF\x1\xD0\x2\xFFFF\x1\xD1"+
			"\x1\xD2\x2\x28\x1\xD5\x2\xFFFF\x2\x28\x1\xFFFF\x1\xD8\x1\xFFFF\x1\x28"+
			"\x1\xDA\x5\x28\x5\xFFFF\x2\x28\x1\xFFFF\x1\xE2\x1\xE3\x1\xFFFF\x1\xE4"+
			"\x1\xFFFF\x1\x28\x1\xE6\x1\xE7\x2\x28\x1\xEA\x1\xEB\x3\xFFFF\x1\xEC\x2"+
			"\xFFFF\x1\xED\x1\xEE\x5\xFFFF";
		private const string DFA9_eofS =
			"\xEF\xFFFF";
		private const string DFA9_minS =
			"\x1\x9\x1\x3C\x7\xFFFF\x1\x2D\x1\xFFFF\x1\x2A\x1\xFFFF\x1\x3D\x1\xFFFF"+
			"\x1\x3D\x1\x0\x5\xFFFF\x1\x45\x1\x4C\x2\x41\x1\x4E\x1\x52\x1\x48\x1\x4F"+
			"\x1\x52\x1\x49\x1\x41\x1\x52\x1\x45\x1\x41\x1\x4C\x1\x4E\x1\x49\x1\x41"+
			"\x13\xFFFF\x1\x4C\x1\x4D\x1\x4C\x1\x44\x1\x30\x1\x53\x1\x43\x1\x4F\x1"+
			"\x54\x1\x50\x1\x45\x1\x42\x1\x30\x1\x4F\x1\x45\x1\x54\x1\x30\x1\x4B\x1"+
			"\x54\x1\x4F\x1\x30\x1\x54\x1\x4E\x1\x53\x1\x45\x1\x49\x1\x53\x1\x44\x1"+
			"\x45\x1\x49\x1\x45\x1\x56\x1\x45\x1\x30\x1\x45\x3\x30\x1\xFFFF\x1\x30"+
			"\x1\x54\x1\x43\x1\x4C\x1\x50\x1\x45\x1\x30\x1\x4E\x1\x4C\x1\xFFFF\x1"+
			"\x4F\x1\x4D\x1\x4E\x1\x30\x1\xFFFF\x1\x45\x1\x47\x1\x45\x1\x43\x1\x55"+
			"\x1\xFFFF\x1\x57\x1\x56\x1\x4E\x1\x45\x1\x41\x1\x53\x1\x45\x2\x30\x1"+
			"\x4F\x1\x57\x1\x49\x1\x43\x1\xFFFF\x1\x30\x4\xFFFF\x1\x49\x1\x30\x1\x41"+
			"\x1\x30\x1\x41\x1\xFFFF\x1\x30\x1\x45\x2\x30\x1\x45\x1\x30\x1\xFFFF\x1"+
			"\x52\x2\x30\x1\x48\x1\x50\x2\x45\x1\x54\x2\x30\x2\x54\x1\x30\x2\xFFFF"+
			"\x1\x4E\x1\x30\x1\x4E\x1\x54\x1\xFFFF\x1\x4E\x1\xFFFF\x1\x52\x1\xFFFF"+
			"\x1\x44\x1\x49\x1\x41\x1\xFFFF\x1\x30\x2\xFFFF\x1\x30\x1\xFFFF\x1\x30"+
			"\x2\xFFFF\x2\x30\x1\x45\x1\x52\x1\x30\x2\xFFFF\x1\x45\x1\x53\x1\xFFFF"+
			"\x1\x30\x1\xFFFF\x1\x47\x1\x30\x1\x43\x1\x45\x1\x44\x1\x46\x1\x52\x5"+
			"\xFFFF\x1\x4E\x1\x54\x1\xFFFF\x2\x30\x1\xFFFF\x1\x30\x1\xFFFF\x1\x54"+
			"\x2\x30\x1\x46\x1\x54\x2\x30\x3\xFFFF\x1\x30\x2\xFFFF\x2\x30\x5\xFFFF";
		private const string DFA9_maxS =
			"\x1\x7E\x1\x3E\x7\xFFFF\x1\x2D\x1\xFFFF\x1\x2A\x1\xFFFF\x1\x3E\x1\xFFFF"+
			"\x1\x3D\x1\xFFFF\x5\xFFFF\x1\x6F\x1\x73\x1\x72\x1\x6F\x1\x6E\x1\x72\x1"+
			"\x68\x1\x6F\x1\x72\x1\x69\x1\x61\x1\x72\x1\x79\x1\x72\x1\x78\x1\x73\x1"+
			"\x69\x1\x61\x13\xFFFF\x1\x74\x1\x6D\x1\x6C\x1\x79\x1\x7A\x2\x73\x1\x6F"+
			"\x1\x74\x1\x70\x1\x65\x1\x62\x1\x7A\x1\x6F\x1\x65\x1\x74\x1\x7A\x1\x6B"+
			"\x1\x74\x1\x6F\x1\x7A\x1\x74\x1\x75\x1\x73\x1\x65\x1\x69\x1\x73\x1\x64"+
			"\x1\x65\x1\x69\x1\x65\x1\x76\x1\x65\x1\x7A\x1\x65\x3\x7A\x1\xFFFF\x1"+
			"\x7A\x1\x74\x1\x63\x1\x6C\x1\x70\x1\x65\x1\x7A\x1\x6E\x1\x6C\x1\xFFFF"+
			"\x1\x6F\x1\x6D\x1\x72\x1\x7A\x1\xFFFF\x1\x65\x1\x67\x1\x65\x1\x63\x1"+
			"\x75\x1\xFFFF\x1\x77\x1\x76\x1\x6E\x1\x74\x1\x61\x1\x73\x1\x65\x2\x7A"+
			"\x1\x6F\x1\x77\x1\x69\x1\x63\x1\xFFFF\x1\x7A\x4\xFFFF\x1\x69\x1\x7A\x1"+
			"\x61\x1\x7A\x1\x70\x1\xFFFF\x1\x7A\x1\x65\x2\x7A\x1\x65\x1\x7A\x1\xFFFF"+
			"\x1\x72\x2\x7A\x1\x68\x1\x70\x2\x65\x1\x74\x2\x7A\x2\x74\x1\x7A\x2\xFFFF"+
			"\x1\x6E\x1\x7A\x1\x6E\x1\x74\x1\xFFFF\x1\x6E\x1\xFFFF\x1\x72\x1\xFFFF"+
			"\x1\x64\x1\x69\x1\x61\x1\xFFFF\x1\x7A\x2\xFFFF\x1\x7A\x1\xFFFF\x1\x7A"+
			"\x2\xFFFF\x2\x7A\x1\x65\x1\x72\x1\x7A\x2\xFFFF\x1\x65\x1\x73\x1\xFFFF"+
			"\x1\x7A\x1\xFFFF\x1\x67\x1\x7A\x1\x63\x1\x65\x1\x64\x1\x66\x1\x72\x5"+
			"\xFFFF\x1\x6E\x1\x74\x1\xFFFF\x2\x7A\x1\xFFFF\x1\x7A\x1\xFFFF\x1\x74"+
			"\x2\x7A\x1\x66\x1\x74\x2\x7A\x3\xFFFF\x1\x7A\x2\xFFFF\x2\x7A\x5\xFFFF";
		private const string DFA9_acceptS =
			"\x2\xFFFF\x1\x4\x1\x5\x1\x6\x1\x7\x1\x8\x1\x9\x1\xA\x1\xFFFF\x1\xC\x1"+
			"\xFFFF\x1\xE\x1\xFFFF\x1\x12\x2\xFFFF\x1\x16\x1\x17\x1\x18\x1\x19\x1"+
			"\x1C\x12\xFFFF\x1\x4A\x1\x4B\x1\x4C\x1\x4D\x1\x4E\x1\x1\x1\x2\x1\x3\x1"+
			"\x1A\x1\xB\x1\x1B\x1\xD\x1\x10\x1\x11\x1\xF\x1\x14\x1\x13\x1\x15\x1\x1D"+
			"\x26\xFFFF\x1\x32\x9\xFFFF\x1\x34\x4\xFFFF\x1\x27\x5\xFFFF\x1\x2C\xD"+
			"\xFFFF\x1\x3F\x1\xFFFF\x1\x1F\x1\x26\x1\x35\x1\x2D\x5\xFFFF\x1\x21\x6"+
			"\xFFFF\x1\x25\xD\xFFFF\x1\x3C\x1\x3D\x4\xFFFF\x1\x36\x1\xFFFF\x1\x2E"+
			"\x1\xFFFF\x1\x43\x3\xFFFF\x1\x3A\x1\xFFFF\x1\x22\x1\x23\x1\xFFFF\x1\x39"+
			"\x1\xFFFF\x1\x2F\x1\x28\x5\xFFFF\x1\x31\x1\x38\x2\xFFFF\x1\x3B\x1\xFFFF"+
			"\x1\x41\x7\xFFFF\x1\x42\x1\x24\x1\x2B\x1\x29\x1\x2A\x2\xFFFF\x1\x45\x2"+
			"\xFFFF\x1\x49\x1\xFFFF\x1\x1E\x7\xFFFF\x1\x40\x1\x37\x1\x44\x1\xFFFF"+
			"\x1\x3E\x1\x46\x2\xFFFF\x1\x33\x1\x30\x1\x20\x1\x47\x1\x48";
		private const string DFA9_specialS =
			"\x10\xFFFF\x1\x0\xDE\xFFFF}>";
		private static readonly string[] DFA9_transitionS =
			{
				"\x2\x2C\x1\xFFFF\x2\x2C\x12\xFFFF\x1\x2C\x1\x1\x2\xFFFF\x1\x29\x1\x2"+
				"\x1\x3\x1\x15\x1\x4\x1\x5\x1\x6\x1\x7\x1\x8\x1\x9\x1\xA\x1\xB\xA\x2B"+
				"\x1\xFFFF\x1\xC\x1\xD\x1\xE\x1\xF\x1\xFFFF\x1\x2A\x1\x17\x1\x22\x1\x23"+
				"\x1\x18\x1\x24\x1\x1B\x1\x21\x1\x27\x1\x1A\x2\x28\x1\x1F\x1\x20\x1\x1D"+
				"\x1\x1E\x3\x28\x1\x16\x1\x19\x1\x25\x1\x26\x1\x1C\x3\x28\x1\x10\x1\xFFFF"+
				"\x1\x11\x1\x12\x1\x28\x1\xFFFF\x1\x17\x1\x22\x1\x23\x1\x18\x1\x24\x1"+
				"\x1B\x1\x21\x1\x27\x1\x1A\x2\x28\x1\x1F\x1\x20\x1\x1D\x1\x1E\x3\x28"+
				"\x1\x16\x1\x19\x1\x25\x1\x26\x1\x1C\x3\x28\x1\xFFFF\x1\x13\x1\xFFFF"+
				"\x1\x14",
				"\x1\x2D\x1\x2E\x1\x2F",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x30",
				"",
				"\x1\x32",
				"",
				"\x1\x34\x1\x35",
				"",
				"\x1\x37",
				"\x27\x3A\x3\xFFFF\x16\x3A\x1\xFFFF\x1A\x3A\x1\xFFFF\xFFA4\x3A",
				"",
				"",
				"",
				"",
				"",
				"\x1\x3B\x9\xFFFF\x1\x3C\x15\xFFFF\x1\x3B\x9\xFFFF\x1\x3C",
				"\x1\x3D\x1\xFFFF\x1\x3E\x4\xFFFF\x1\x3F\x18\xFFFF\x1\x3D\x1\xFFFF\x1"+
				"\x3E\x4\xFFFF\x1\x3F",
				"\x1\x43\x3\xFFFF\x1\x41\x3\xFFFF\x1\x40\x8\xFFFF\x1\x42\xE\xFFFF\x1"+
				"\x43\x3\xFFFF\x1\x41\x3\xFFFF\x1\x40\x8\xFFFF\x1\x42",
				"\x1\x46\x6\xFFFF\x1\x45\x6\xFFFF\x1\x44\x11\xFFFF\x1\x46\x6\xFFFF\x1"+
				"\x45\x6\xFFFF\x1\x44",
				"\x1\x47\x1F\xFFFF\x1\x47",
				"\x1\x48\x1F\xFFFF\x1\x48",
				"\x1\x49\x1F\xFFFF\x1\x49",
				"\x1\x4A\x1F\xFFFF\x1\x4A",
				"\x1\x4B\x1F\xFFFF\x1\x4B",
				"\x1\x4C\x1F\xFFFF\x1\x4C",
				"\x1\x4D\x1F\xFFFF\x1\x4D",
				"\x1\x4E\x1F\xFFFF\x1\x4E",
				"\x1\x50\x13\xFFFF\x1\x4F\xB\xFFFF\x1\x50\x13\xFFFF\x1\x4F",
				"\x1\x52\xD\xFFFF\x1\x51\x2\xFFFF\x1\x53\xE\xFFFF\x1\x52\xD\xFFFF\x1"+
				"\x51\x2\xFFFF\x1\x53",
				"\x1\x55\x1\xFFFF\x1\x56\x9\xFFFF\x1\x54\x13\xFFFF\x1\x55\x1\xFFFF\x1"+
				"\x56\x9\xFFFF\x1\x54",
				"\x1\x58\x4\xFFFF\x1\x57\x1A\xFFFF\x1\x58\x4\xFFFF\x1\x57",
				"\x1\x59\x1F\xFFFF\x1\x59",
				"\x1\x5A\x1F\xFFFF\x1\x5A",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x5B\x7\xFFFF\x1\x5C\x17\xFFFF\x1\x5B\x7\xFFFF\x1\x5C",
				"\x1\x5D\x1F\xFFFF\x1\x5D",
				"\x1\x5E\x1F\xFFFF\x1\x5E",
				"\x1\x5F\x14\xFFFF\x1\x60\xA\xFFFF\x1\x5F\x14\xFFFF\x1\x60",
				"\xA\x28\x7\xFFFF\x2\x28\x1\x62\x17\x28\x4\xFFFF\x1\x28\x1\xFFFF\x2"+
				"\x28\x1\x62\x17\x28",
				"\x1\x63\x1F\xFFFF\x1\x63",
				"\x1\x65\xF\xFFFF\x1\x64\xF\xFFFF\x1\x65\xF\xFFFF\x1\x64",
				"\x1\x66\x1F\xFFFF\x1\x66",
				"\x1\x67\x1F\xFFFF\x1\x67",
				"\x1\x68\x1F\xFFFF\x1\x68",
				"\x1\x69\x1F\xFFFF\x1\x69",
				"\x1\x6A\x1F\xFFFF\x1\x6A",
				"\xA\x28\x7\xFFFF\x13\x28\x1\x6C\x6\x28\x4\xFFFF\x1\x28\x1\xFFFF\x13"+
				"\x28\x1\x6C\x6\x28",
				"\x1\x6D\x1F\xFFFF\x1\x6D",
				"\x1\x6E\x1F\xFFFF\x1\x6E",
				"\x1\x6F\x1F\xFFFF\x1\x6F",
				"\xA\x28\x7\xFFFF\x3\x28\x1\x71\x4\x28\x1\x72\x11\x28\x4\xFFFF\x1\x28"+
				"\x1\xFFFF\x3\x28\x1\x71\x4\x28\x1\x72\x11\x28",
				"\x1\x73\x1F\xFFFF\x1\x73",
				"\x1\x74\x1F\xFFFF\x1\x74",
				"\x1\x75\x1F\xFFFF\x1\x75",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"\x1\x77\x1F\xFFFF\x1\x77",
				"\x1\x78\x6\xFFFF\x1\x79\x18\xFFFF\x1\x78\x6\xFFFF\x1\x79",
				"\x1\x7A\x1F\xFFFF\x1\x7A",
				"\x1\x7B\x1F\xFFFF\x1\x7B",
				"\x1\x7C\x1F\xFFFF\x1\x7C",
				"\x1\x7D\x1F\xFFFF\x1\x7D",
				"\x1\x7E\x1F\xFFFF\x1\x7E",
				"\x1\x7F\x1F\xFFFF\x1\x7F",
				"\x1\x80\x1F\xFFFF\x1\x80",
				"\x1\x81\x1F\xFFFF\x1\x81",
				"\x1\x82\x1F\xFFFF\x1\x82",
				"\x1\x83\x1F\xFFFF\x1\x83",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"\x1\x85\x1F\xFFFF\x1\x85",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"\x1\x8A\x1F\xFFFF\x1\x8A",
				"\x1\x8B\x1F\xFFFF\x1\x8B",
				"\x1\x8C\x1F\xFFFF\x1\x8C",
				"\x1\x8D\x1F\xFFFF\x1\x8D",
				"\x1\x8E\x1F\xFFFF\x1\x8E",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"\x1\x90\x1F\xFFFF\x1\x90",
				"\x1\x91\x1F\xFFFF\x1\x91",
				"",
				"\x1\x92\x1F\xFFFF\x1\x92",
				"\x1\x93\x1F\xFFFF\x1\x93",
				"\x1\x95\x3\xFFFF\x1\x94\x1B\xFFFF\x1\x95\x3\xFFFF\x1\x94",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"",
				"\x1\x97\x1F\xFFFF\x1\x97",
				"\x1\x98\x1F\xFFFF\x1\x98",
				"\x1\x99\x1F\xFFFF\x1\x99",
				"\x1\x9A\x1F\xFFFF\x1\x9A",
				"\x1\x9B\x1F\xFFFF\x1\x9B",
				"",
				"\x1\x9C\x1F\xFFFF\x1\x9C",
				"\x1\x9D\x1F\xFFFF\x1\x9D",
				"\x1\x9E\x1F\xFFFF\x1\x9E",
				"\x1\xA0\xE\xFFFF\x1\x9F\x10\xFFFF\x1\xA0\xE\xFFFF\x1\x9F",
				"\x1\xA1\x1F\xFFFF\x1\xA1",
				"\x1\xA2\x1F\xFFFF\x1\xA2",
				"\x1\xA3\x1F\xFFFF\x1\xA3",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"\x1\xA6\x1F\xFFFF\x1\xA6",
				"\x1\xA7\x1F\xFFFF\x1\xA7",
				"\x1\xA8\x1F\xFFFF\x1\xA8",
				"\x1\xA9\x1F\xFFFF\x1\xA9",
				"",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"",
				"",
				"",
				"",
				"\x1\xAB\x1F\xFFFF\x1\xAB",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"\x1\xAD\x1F\xFFFF\x1\xAD",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"\x1\xAF\x2\xFFFF\x1\xB0\xB\xFFFF\x1\xB1\x10\xFFFF\x1\xAF\x2\xFFFF\x1"+
				"\xB0\xB\xFFFF\x1\xB1",
				"",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"\x1\xB3\x1F\xFFFF\x1\xB3",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"\x1\xB6\x1F\xFFFF\x1\xB6",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"",
				"\x1\xB8\x1F\xFFFF\x1\xB8",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"\x1\xBB\x1F\xFFFF\x1\xBB",
				"\x1\xBC\x1F\xFFFF\x1\xBC",
				"\x1\xBD\x1F\xFFFF\x1\xBD",
				"\x1\xBE\x1F\xFFFF\x1\xBE",
				"\x1\xBF\x1F\xFFFF\x1\xBF",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"\x1\xC2\x1F\xFFFF\x1\xC2",
				"\x1\xC3\x1F\xFFFF\x1\xC3",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"",
				"",
				"\x1\xC5\x1F\xFFFF\x1\xC5",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"\x1\xC7\x1F\xFFFF\x1\xC7",
				"\x1\xC8\x1F\xFFFF\x1\xC8",
				"",
				"\x1\xC9\x1F\xFFFF\x1\xC9",
				"",
				"\x1\xCA\x1F\xFFFF\x1\xCA",
				"",
				"\x1\xCB\x1F\xFFFF\x1\xCB",
				"\x1\xCC\x1F\xFFFF\x1\xCC",
				"\x1\xCD\x1F\xFFFF\x1\xCD",
				"",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"",
				"",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"",
				"",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"\x1\xD3\x1F\xFFFF\x1\xD3",
				"\x1\xD4\x1F\xFFFF\x1\xD4",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"",
				"",
				"\x1\xD6\x1F\xFFFF\x1\xD6",
				"\x1\xD7\x1F\xFFFF\x1\xD7",
				"",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"",
				"\x1\xD9\x1F\xFFFF\x1\xD9",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"\x1\xDB\x1F\xFFFF\x1\xDB",
				"\x1\xDC\x1F\xFFFF\x1\xDC",
				"\x1\xDD\x1F\xFFFF\x1\xDD",
				"\x1\xDE\x1F\xFFFF\x1\xDE",
				"\x1\xDF\x1F\xFFFF\x1\xDF",
				"",
				"",
				"",
				"",
				"",
				"\x1\xE0\x1F\xFFFF\x1\xE0",
				"\x1\xE1\x1F\xFFFF\x1\xE1",
				"",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"",
				"\x1\xE5\x1F\xFFFF\x1\xE5",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"\x1\xE8\x1F\xFFFF\x1\xE8",
				"\x1\xE9\x1F\xFFFF\x1\xE9",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"",
				"",
				"",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"",
				"",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"\xA\x28\x7\xFFFF\x1A\x28\x4\xFFFF\x1\x28\x1\xFFFF\x1A\x28",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA9_eot = DFA.UnpackEncodedString(DFA9_eotS);
		private static readonly short[] DFA9_eof = DFA.UnpackEncodedString(DFA9_eofS);
		private static readonly char[] DFA9_min = DFA.UnpackEncodedStringToUnsignedChars(DFA9_minS);
		private static readonly char[] DFA9_max = DFA.UnpackEncodedStringToUnsignedChars(DFA9_maxS);
		private static readonly short[] DFA9_accept = DFA.UnpackEncodedString(DFA9_acceptS);
		private static readonly short[] DFA9_special = DFA.UnpackEncodedString(DFA9_specialS);
		private static readonly short[][] DFA9_transition;

		static DFA9()
		{
			int numStates = DFA9_transitionS.Length;
			DFA9_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA9_transition[i] = DFA.UnpackEncodedString(DFA9_transitionS[i]);
			}
		}

		public DFA9( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 9;
			this.eot = DFA9_eot;
			this.eof = DFA9_eof;
			this.min = DFA9_min;
			this.max = DFA9_max;
			this.accept = DFA9_accept;
			this.special = DFA9_special;
			this.transition = DFA9_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( T__162 | T__163 | T__164 | T__165 | T__166 | T__167 | T__168 | T__169 | T__170 | T__171 | T__172 | T__173 | T__174 | T__175 | T__176 | T__177 | T__178 | T__179 | T__180 | T__181 | T__182 | T__183 | T__184 | T__185 | T__186 | COMMENT_LINE | COMMENT_BLOCK | STRING | SIMPLE_FILE | SELECT | ALL | DISTINCT | TOP | INTO | FROM | WHERE | NOT | AND | OR | LIKE | MATCH | GROUP | ORDER | BY | ASC | DESC | ORIG | CONVERT | CAST | AS | BETWEEN | IN | ANY | SOME | EXISTS | CASE | WHEN | THEN | ELSE | END | USE | DECLARE | SET | CREATE | VIEW | TABLE | DROP | HAVING | COUNT | DATEADD | DATEDIFF | DATEPART | UNION | TOKEN | SYSTEMVAR | VARIABLE | NUMBER | WS );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition9(DFA dfa, int s, IIntStream _input)
	{
		IIntStream input = _input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA9_16 = input.LA(1);

				s = -1;
				if (((LA9_16>='\u0000' && LA9_16<='&')||(LA9_16>='*' && LA9_16<='?')||(LA9_16>='A' && LA9_16<='Z')||(LA9_16>='\\' && LA9_16<='\uFFFF'))) {s = 58;}

				else s = 57;

				if (s >= 0) return s;
				break;
		}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 9, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
 
	#endregion

}

} // namespace  FxGqlLib 
