//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g 2012-03-26 22:05:46

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591


// `XXX' does not need a CLSCompliant attribute because the assembly is not marked as CLS-compliant (CS3021)
#pragma warning disable 3021
// The private field `XXX' is assigned but its value is never used (CS0414)
#pragma warning disable 414


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;

namespace  FxGqlLib 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class gqlLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int T__117=117;
	public const int T__118=118;
	public const int T__119=119;
	public const int T__120=120;
	public const int T__121=121;
	public const int T__122=122;
	public const int T__123=123;
	public const int T__124=124;
	public const int T__125=125;
	public const int T__126=126;
	public const int T__127=127;
	public const int T__128=128;
	public const int T__129=129;
	public const int T__130=130;
	public const int T__131=131;
	public const int T__132=132;
	public const int T__133=133;
	public const int T__134=134;
	public const int T__135=135;
	public const int T__136=136;
	public const int T__137=137;
	public const int T__138=138;
	public const int T__139=139;
	public const int T__140=140;
	public const int A=4;
	public const int ALL=5;
	public const int AND=6;
	public const int ANY=7;
	public const int AS=8;
	public const int ASC=9;
	public const int B=10;
	public const int BETWEEN=11;
	public const int BY=12;
	public const int C=13;
	public const int CAST=14;
	public const int COMMENT_LINE=15;
	public const int CONVERT=16;
	public const int D=17;
	public const int DESC=18;
	public const int DIGIT=19;
	public const int DISTINCT=20;
	public const int E=21;
	public const int EXISTS=22;
	public const int F=23;
	public const int FROM=24;
	public const int G=25;
	public const int GROUP=26;
	public const int H=27;
	public const int I=28;
	public const int IN=29;
	public const int INTO=30;
	public const int J=31;
	public const int K=32;
	public const int L=33;
	public const int LIKE=34;
	public const int M=35;
	public const int MATCH=36;
	public const int N=37;
	public const int NOT=38;
	public const int NUMBER=39;
	public const int O=40;
	public const int OR=41;
	public const int ORDER=42;
	public const int P=43;
	public const int Q=44;
	public const int R=45;
	public const int S=46;
	public const int SELECT=47;
	public const int SIMPLE_FILE=48;
	public const int SOME=49;
	public const int STRING=50;
	public const int SYSTEMVAR=51;
	public const int T=52;
	public const int TOKEN=53;
	public const int TOP=54;
	public const int T_ALL=55;
	public const int T_AND=56;
	public const int T_ANY=57;
	public const int T_BETWEEN=58;
	public const int T_BITWISE_AND=59;
	public const int T_BITWISE_NOT=60;
	public const int T_BITWISE_OR=61;
	public const int T_BITWISE_XOR=62;
	public const int T_COLUMN=63;
	public const int T_COLUMNLIST=64;
	public const int T_CONVERT=65;
	public const int T_DISTINCT=66;
	public const int T_DIVIDE=67;
	public const int T_EQUAL=68;
	public const int T_EXISTS=69;
	public const int T_EXPRESSIONLIST=70;
	public const int T_FILE=71;
	public const int T_FILEOPTION=72;
	public const int T_FROM=73;
	public const int T_FUNCTIONCALL=74;
	public const int T_GREATER=75;
	public const int T_GROUPBY=76;
	public const int T_IN=77;
	public const int T_INTEGER=78;
	public const int T_INTO=79;
	public const int T_LESS=80;
	public const int T_LIKE=81;
	public const int T_MATCH=82;
	public const int T_MINUS=83;
	public const int T_MODULO=84;
	public const int T_NOT=85;
	public const int T_NOTBETWEEN=86;
	public const int T_NOTEQUAL=87;
	public const int T_NOTGREATER=88;
	public const int T_NOTIN=89;
	public const int T_NOTLESS=90;
	public const int T_NOTLIKE=91;
	public const int T_NOTMATCH=92;
	public const int T_OP_BINARY=93;
	public const int T_OP_UNARY=94;
	public const int T_OR=95;
	public const int T_ORDERBY=96;
	public const int T_ORDERBY_ASC=97;
	public const int T_ORDERBY_COLUMN=98;
	public const int T_ORDERBY_DESC=99;
	public const int T_PLUS=100;
	public const int T_PRODUCT=101;
	public const int T_ROOT=102;
	public const int T_SELECT=103;
	public const int T_STRING=104;
	public const int T_SUBQUERY=105;
	public const int T_SYSTEMVAR=106;
	public const int T_TOP=107;
	public const int T_WHERE=108;
	public const int U=109;
	public const int V=110;
	public const int W=111;
	public const int WHERE=112;
	public const int WS=113;
	public const int X=114;
	public const int Y=115;
	public const int Z=116;
	 const int HIDDEN = Hidden; 

    // delegates
    // delegators

	public gqlLexer()
	{
		OnCreated();
	}

	public gqlLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public gqlLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "/home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g"; } }

	private static readonly bool[] decisionCanBacktrack = new bool[0];

	[Conditional("ANTLR_TRACE")]
	protected virtual void OnCreated() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__117() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__117() {}

    // $ANTLR start "T__117"
    [GrammarRule("T__117")]
    private void mT__117()
    {
    	EnterRule_T__117();
    	EnterRule("T__117", 1);
    	TraceIn("T__117", 1);
    		try
    		{
    		int _type = T__117;
    		int _channel = DefaultTokenChannel;
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:16:8: ( '!<' )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:16:10: '!<'
    		{
    		DebugLocation(16, 10);
    		Match("!<"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__117", 1);
    		LeaveRule("T__117", 1);
    		LeaveRule_T__117();
        }
    }
    // $ANTLR end "T__117"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__118() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__118() {}

    // $ANTLR start "T__118"
    [GrammarRule("T__118")]
    private void mT__118()
    {
    	EnterRule_T__118();
    	EnterRule("T__118", 2);
    	TraceIn("T__118", 2);
    		try
    		{
    		int _type = T__118;
    		int _channel = DefaultTokenChannel;
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:17:8: ( '!=' )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:17:10: '!='
    		{
    		DebugLocation(17, 10);
    		Match("!="); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__118", 2);
    		LeaveRule("T__118", 2);
    		LeaveRule_T__118();
        }
    }
    // $ANTLR end "T__118"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__119() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__119() {}

    // $ANTLR start "T__119"
    [GrammarRule("T__119")]
    private void mT__119()
    {
    	EnterRule_T__119();
    	EnterRule("T__119", 3);
    	TraceIn("T__119", 3);
    		try
    		{
    		int _type = T__119;
    		int _channel = DefaultTokenChannel;
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:18:8: ( '!>' )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:18:10: '!>'
    		{
    		DebugLocation(18, 10);
    		Match("!>"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__119", 3);
    		LeaveRule("T__119", 3);
    		LeaveRule_T__119();
        }
    }
    // $ANTLR end "T__119"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__120() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__120() {}

    // $ANTLR start "T__120"
    [GrammarRule("T__120")]
    private void mT__120()
    {
    	EnterRule_T__120();
    	EnterRule("T__120", 4);
    	TraceIn("T__120", 4);
    		try
    		{
    		int _type = T__120;
    		int _channel = DefaultTokenChannel;
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:19:8: ( '%' )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:19:10: '%'
    		{
    		DebugLocation(19, 10);
    		Match('%'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__120", 4);
    		LeaveRule("T__120", 4);
    		LeaveRule_T__120();
        }
    }
    // $ANTLR end "T__120"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__121() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__121() {}

    // $ANTLR start "T__121"
    [GrammarRule("T__121")]
    private void mT__121()
    {
    	EnterRule_T__121();
    	EnterRule("T__121", 5);
    	TraceIn("T__121", 5);
    		try
    		{
    		int _type = T__121;
    		int _channel = DefaultTokenChannel;
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:20:8: ( '&' )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:20:10: '&'
    		{
    		DebugLocation(20, 10);
    		Match('&'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__121", 5);
    		LeaveRule("T__121", 5);
    		LeaveRule_T__121();
        }
    }
    // $ANTLR end "T__121"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__122() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__122() {}

    // $ANTLR start "T__122"
    [GrammarRule("T__122")]
    private void mT__122()
    {
    	EnterRule_T__122();
    	EnterRule("T__122", 6);
    	TraceIn("T__122", 6);
    		try
    		{
    		int _type = T__122;
    		int _channel = DefaultTokenChannel;
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:21:8: ( '(' )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:21:10: '('
    		{
    		DebugLocation(21, 10);
    		Match('('); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__122", 6);
    		LeaveRule("T__122", 6);
    		LeaveRule_T__122();
        }
    }
    // $ANTLR end "T__122"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__123() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__123() {}

    // $ANTLR start "T__123"
    [GrammarRule("T__123")]
    private void mT__123()
    {
    	EnterRule_T__123();
    	EnterRule("T__123", 7);
    	TraceIn("T__123", 7);
    		try
    		{
    		int _type = T__123;
    		int _channel = DefaultTokenChannel;
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:22:8: ( ')' )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:22:10: ')'
    		{
    		DebugLocation(22, 10);
    		Match(')'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__123", 7);
    		LeaveRule("T__123", 7);
    		LeaveRule_T__123();
        }
    }
    // $ANTLR end "T__123"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__124() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__124() {}

    // $ANTLR start "T__124"
    [GrammarRule("T__124")]
    private void mT__124()
    {
    	EnterRule_T__124();
    	EnterRule("T__124", 8);
    	TraceIn("T__124", 8);
    		try
    		{
    		int _type = T__124;
    		int _channel = DefaultTokenChannel;
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:23:8: ( '*' )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:23:10: '*'
    		{
    		DebugLocation(23, 10);
    		Match('*'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__124", 8);
    		LeaveRule("T__124", 8);
    		LeaveRule_T__124();
        }
    }
    // $ANTLR end "T__124"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__125() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__125() {}

    // $ANTLR start "T__125"
    [GrammarRule("T__125")]
    private void mT__125()
    {
    	EnterRule_T__125();
    	EnterRule("T__125", 9);
    	TraceIn("T__125", 9);
    		try
    		{
    		int _type = T__125;
    		int _channel = DefaultTokenChannel;
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:24:8: ( '+' )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:24:10: '+'
    		{
    		DebugLocation(24, 10);
    		Match('+'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__125", 9);
    		LeaveRule("T__125", 9);
    		LeaveRule_T__125();
        }
    }
    // $ANTLR end "T__125"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__126() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__126() {}

    // $ANTLR start "T__126"
    [GrammarRule("T__126")]
    private void mT__126()
    {
    	EnterRule_T__126();
    	EnterRule("T__126", 10);
    	TraceIn("T__126", 10);
    		try
    		{
    		int _type = T__126;
    		int _channel = DefaultTokenChannel;
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:25:8: ( ',' )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:25:10: ','
    		{
    		DebugLocation(25, 10);
    		Match(','); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__126", 10);
    		LeaveRule("T__126", 10);
    		LeaveRule_T__126();
        }
    }
    // $ANTLR end "T__126"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__127() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__127() {}

    // $ANTLR start "T__127"
    [GrammarRule("T__127")]
    private void mT__127()
    {
    	EnterRule_T__127();
    	EnterRule("T__127", 11);
    	TraceIn("T__127", 11);
    		try
    		{
    		int _type = T__127;
    		int _channel = DefaultTokenChannel;
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:26:8: ( '-' )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:26:10: '-'
    		{
    		DebugLocation(26, 10);
    		Match('-'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__127", 11);
    		LeaveRule("T__127", 11);
    		LeaveRule_T__127();
        }
    }
    // $ANTLR end "T__127"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__128() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__128() {}

    // $ANTLR start "T__128"
    [GrammarRule("T__128")]
    private void mT__128()
    {
    	EnterRule_T__128();
    	EnterRule("T__128", 12);
    	TraceIn("T__128", 12);
    		try
    		{
    		int _type = T__128;
    		int _channel = DefaultTokenChannel;
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:27:8: ( '/' )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:27:10: '/'
    		{
    		DebugLocation(27, 10);
    		Match('/'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__128", 12);
    		LeaveRule("T__128", 12);
    		LeaveRule_T__128();
        }
    }
    // $ANTLR end "T__128"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__129() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__129() {}

    // $ANTLR start "T__129"
    [GrammarRule("T__129")]
    private void mT__129()
    {
    	EnterRule_T__129();
    	EnterRule("T__129", 13);
    	TraceIn("T__129", 13);
    		try
    		{
    		int _type = T__129;
    		int _channel = DefaultTokenChannel;
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:28:8: ( ';' )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:28:10: ';'
    		{
    		DebugLocation(28, 10);
    		Match(';'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__129", 13);
    		LeaveRule("T__129", 13);
    		LeaveRule_T__129();
        }
    }
    // $ANTLR end "T__129"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__130() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__130() {}

    // $ANTLR start "T__130"
    [GrammarRule("T__130")]
    private void mT__130()
    {
    	EnterRule_T__130();
    	EnterRule("T__130", 14);
    	TraceIn("T__130", 14);
    		try
    		{
    		int _type = T__130;
    		int _channel = DefaultTokenChannel;
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:29:8: ( '<' )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:29:10: '<'
    		{
    		DebugLocation(29, 10);
    		Match('<'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__130", 14);
    		LeaveRule("T__130", 14);
    		LeaveRule_T__130();
        }
    }
    // $ANTLR end "T__130"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__131() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__131() {}

    // $ANTLR start "T__131"
    [GrammarRule("T__131")]
    private void mT__131()
    {
    	EnterRule_T__131();
    	EnterRule("T__131", 15);
    	TraceIn("T__131", 15);
    		try
    		{
    		int _type = T__131;
    		int _channel = DefaultTokenChannel;
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:30:8: ( '<=' )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:30:10: '<='
    		{
    		DebugLocation(30, 10);
    		Match("<="); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__131", 15);
    		LeaveRule("T__131", 15);
    		LeaveRule_T__131();
        }
    }
    // $ANTLR end "T__131"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__132() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__132() {}

    // $ANTLR start "T__132"
    [GrammarRule("T__132")]
    private void mT__132()
    {
    	EnterRule_T__132();
    	EnterRule("T__132", 16);
    	TraceIn("T__132", 16);
    		try
    		{
    		int _type = T__132;
    		int _channel = DefaultTokenChannel;
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:31:8: ( '<>' )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:31:10: '<>'
    		{
    		DebugLocation(31, 10);
    		Match("<>"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__132", 16);
    		LeaveRule("T__132", 16);
    		LeaveRule_T__132();
        }
    }
    // $ANTLR end "T__132"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__133() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__133() {}

    // $ANTLR start "T__133"
    [GrammarRule("T__133")]
    private void mT__133()
    {
    	EnterRule_T__133();
    	EnterRule("T__133", 17);
    	TraceIn("T__133", 17);
    		try
    		{
    		int _type = T__133;
    		int _channel = DefaultTokenChannel;
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:32:8: ( '=' )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:32:10: '='
    		{
    		DebugLocation(32, 10);
    		Match('='); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__133", 17);
    		LeaveRule("T__133", 17);
    		LeaveRule_T__133();
        }
    }
    // $ANTLR end "T__133"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__134() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__134() {}

    // $ANTLR start "T__134"
    [GrammarRule("T__134")]
    private void mT__134()
    {
    	EnterRule_T__134();
    	EnterRule("T__134", 18);
    	TraceIn("T__134", 18);
    		try
    		{
    		int _type = T__134;
    		int _channel = DefaultTokenChannel;
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:33:8: ( '>' )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:33:10: '>'
    		{
    		DebugLocation(33, 10);
    		Match('>'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__134", 18);
    		LeaveRule("T__134", 18);
    		LeaveRule_T__134();
        }
    }
    // $ANTLR end "T__134"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__135() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__135() {}

    // $ANTLR start "T__135"
    [GrammarRule("T__135")]
    private void mT__135()
    {
    	EnterRule_T__135();
    	EnterRule("T__135", 19);
    	TraceIn("T__135", 19);
    		try
    		{
    		int _type = T__135;
    		int _channel = DefaultTokenChannel;
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:34:8: ( '>=' )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:34:10: '>='
    		{
    		DebugLocation(34, 10);
    		Match(">="); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__135", 19);
    		LeaveRule("T__135", 19);
    		LeaveRule_T__135();
        }
    }
    // $ANTLR end "T__135"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__136() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__136() {}

    // $ANTLR start "T__136"
    [GrammarRule("T__136")]
    private void mT__136()
    {
    	EnterRule_T__136();
    	EnterRule("T__136", 20);
    	TraceIn("T__136", 20);
    		try
    		{
    		int _type = T__136;
    		int _channel = DefaultTokenChannel;
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:35:8: ( '[' )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:35:10: '['
    		{
    		DebugLocation(35, 10);
    		Match('['); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__136", 20);
    		LeaveRule("T__136", 20);
    		LeaveRule_T__136();
        }
    }
    // $ANTLR end "T__136"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__137() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__137() {}

    // $ANTLR start "T__137"
    [GrammarRule("T__137")]
    private void mT__137()
    {
    	EnterRule_T__137();
    	EnterRule("T__137", 21);
    	TraceIn("T__137", 21);
    		try
    		{
    		int _type = T__137;
    		int _channel = DefaultTokenChannel;
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:36:8: ( ']' )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:36:10: ']'
    		{
    		DebugLocation(36, 10);
    		Match(']'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__137", 21);
    		LeaveRule("T__137", 21);
    		LeaveRule_T__137();
        }
    }
    // $ANTLR end "T__137"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__138() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__138() {}

    // $ANTLR start "T__138"
    [GrammarRule("T__138")]
    private void mT__138()
    {
    	EnterRule_T__138();
    	EnterRule("T__138", 22);
    	TraceIn("T__138", 22);
    		try
    		{
    		int _type = T__138;
    		int _channel = DefaultTokenChannel;
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:37:8: ( '^' )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:37:10: '^'
    		{
    		DebugLocation(37, 10);
    		Match('^'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__138", 22);
    		LeaveRule("T__138", 22);
    		LeaveRule_T__138();
        }
    }
    // $ANTLR end "T__138"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__139() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__139() {}

    // $ANTLR start "T__139"
    [GrammarRule("T__139")]
    private void mT__139()
    {
    	EnterRule_T__139();
    	EnterRule("T__139", 23);
    	TraceIn("T__139", 23);
    		try
    		{
    		int _type = T__139;
    		int _channel = DefaultTokenChannel;
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:38:8: ( '|' )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:38:10: '|'
    		{
    		DebugLocation(38, 10);
    		Match('|'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__139", 23);
    		LeaveRule("T__139", 23);
    		LeaveRule_T__139();
        }
    }
    // $ANTLR end "T__139"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__140() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__140() {}

    // $ANTLR start "T__140"
    [GrammarRule("T__140")]
    private void mT__140()
    {
    	EnterRule_T__140();
    	EnterRule("T__140", 24);
    	TraceIn("T__140", 24);
    		try
    		{
    		int _type = T__140;
    		int _channel = DefaultTokenChannel;
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:39:8: ( '~' )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:39:10: '~'
    		{
    		DebugLocation(39, 10);
    		Match('~'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__140", 24);
    		LeaveRule("T__140", 24);
    		LeaveRule_T__140();
        }
    }
    // $ANTLR end "T__140"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_STRING() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_STRING() {}

    // $ANTLR start "STRING"
    [GrammarRule("STRING")]
    private void mSTRING()
    {
    	EnterRule_STRING();
    	EnterRule("STRING", 25);
    	TraceIn("STRING", 25);
    		try
    		{
    		int _type = STRING;
    		int _channel = DefaultTokenChannel;
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:306:2: ( '\\'' ( (~ ( '\\'' ) | '\\'' '\\'' )* ) '\\'' )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:306:4: '\\'' ( (~ ( '\\'' ) | '\\'' '\\'' )* ) '\\''
    		{
    		DebugLocation(306, 4);
    		Match('\''); 
    		DebugLocation(306, 9);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:306:9: ( (~ ( '\\'' ) | '\\'' '\\'' )* )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:306:11: (~ ( '\\'' ) | '\\'' '\\'' )*
    		{
    		DebugLocation(306, 11);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:306:11: (~ ( '\\'' ) | '\\'' '\\'' )*
    		try { DebugEnterSubRule(1);
    		while (true)
    		{
    			int alt1=3;
    			try { DebugEnterDecision(1, decisionCanBacktrack[1]);
    			int LA1_0 = input.LA(1);

    			if ((LA1_0=='\''))
    			{
    				int LA1_1 = input.LA(2);

    				if ((LA1_1=='\''))
    				{
    					alt1 = 2;
    				}


    			}
    			else if (((LA1_0>='\u0000' && LA1_0<='&')||(LA1_0>='(' && LA1_0<='\uFFFF')))
    			{
    				alt1 = 1;
    			}


    			} finally { DebugExitDecision(1); }
    			switch ( alt1 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:306:12: ~ ( '\\'' )
    				{
    				DebugLocation(306, 12);
    				input.Consume();


    				}
    				break;
    			case 2:
    				DebugEnterAlt(2);
    				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:306:20: '\\'' '\\''
    				{
    				DebugLocation(306, 20);
    				Match('\''); 
    				DebugLocation(306, 24);
    				Match('\''); 

    				}
    				break;

    			default:
    				goto loop1;
    			}
    		}

    		loop1:
    			;

    		} finally { DebugExitSubRule(1); }


    		}

    		DebugLocation(306, 33);
    		Match('\''); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("STRING", 25);
    		LeaveRule("STRING", 25);
    		LeaveRule_STRING();
        }
    }
    // $ANTLR end "STRING"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_SIMPLE_FILE() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_SIMPLE_FILE() {}

    // $ANTLR start "SIMPLE_FILE"
    [GrammarRule("SIMPLE_FILE")]
    private void mSIMPLE_FILE()
    {
    	EnterRule_SIMPLE_FILE();
    	EnterRule("SIMPLE_FILE", 26);
    	TraceIn("SIMPLE_FILE", 26);
    		try
    		{
    		int _type = SIMPLE_FILE;
    		int _channel = DefaultTokenChannel;
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:310:2: ( '[' (~ ( '\\'' | ']' ) )* ']' )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:310:4: '[' (~ ( '\\'' | ']' ) )* ']'
    		{
    		DebugLocation(310, 4);
    		Match('['); 
    		DebugLocation(310, 8);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:310:8: (~ ( '\\'' | ']' ) )*
    		try { DebugEnterSubRule(2);
    		while (true)
    		{
    			int alt2=2;
    			try { DebugEnterDecision(2, decisionCanBacktrack[2]);
    			int LA2_0 = input.LA(1);

    			if (((LA2_0>='\u0000' && LA2_0<='&')||(LA2_0>='(' && LA2_0<='\\')||(LA2_0>='^' && LA2_0<='\uFFFF')))
    			{
    				alt2 = 1;
    			}


    			} finally { DebugExitDecision(2); }
    			switch ( alt2 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:
    				{
    				DebugLocation(310, 8);
    				input.Consume();


    				}
    				break;

    			default:
    				goto loop2;
    			}
    		}

    		loop2:
    			;

    		} finally { DebugExitSubRule(2); }

    		DebugLocation(310, 21);
    		Match(']'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("SIMPLE_FILE", 26);
    		LeaveRule("SIMPLE_FILE", 26);
    		LeaveRule_SIMPLE_FILE();
        }
    }
    // $ANTLR end "SIMPLE_FILE"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_SELECT() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_SELECT() {}

    // $ANTLR start "SELECT"
    [GrammarRule("SELECT")]
    private void mSELECT()
    {
    	EnterRule_SELECT();
    	EnterRule("SELECT", 27);
    	TraceIn("SELECT", 27);
    		try
    		{
    		int _type = SELECT;
    		int _channel = DefaultTokenChannel;
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:314:9: ( S E L E C T )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:314:11: S E L E C T
    		{
    		DebugLocation(314, 11);
    		mS(); 
    		DebugLocation(314, 13);
    		mE(); 
    		DebugLocation(314, 15);
    		mL(); 
    		DebugLocation(314, 17);
    		mE(); 
    		DebugLocation(314, 19);
    		mC(); 
    		DebugLocation(314, 21);
    		mT(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("SELECT", 27);
    		LeaveRule("SELECT", 27);
    		LeaveRule_SELECT();
        }
    }
    // $ANTLR end "SELECT"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_ALL() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_ALL() {}

    // $ANTLR start "ALL"
    [GrammarRule("ALL")]
    private void mALL()
    {
    	EnterRule_ALL();
    	EnterRule("ALL", 28);
    	TraceIn("ALL", 28);
    		try
    		{
    		int _type = ALL;
    		int _channel = DefaultTokenChannel;
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:315:5: ( A L L )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:315:7: A L L
    		{
    		DebugLocation(315, 7);
    		mA(); 
    		DebugLocation(315, 9);
    		mL(); 
    		DebugLocation(315, 11);
    		mL(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("ALL", 28);
    		LeaveRule("ALL", 28);
    		LeaveRule_ALL();
        }
    }
    // $ANTLR end "ALL"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_DISTINCT() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_DISTINCT() {}

    // $ANTLR start "DISTINCT"
    [GrammarRule("DISTINCT")]
    private void mDISTINCT()
    {
    	EnterRule_DISTINCT();
    	EnterRule("DISTINCT", 29);
    	TraceIn("DISTINCT", 29);
    		try
    		{
    		int _type = DISTINCT;
    		int _channel = DefaultTokenChannel;
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:317:2: ( D I S T I N C T )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:317:4: D I S T I N C T
    		{
    		DebugLocation(317, 4);
    		mD(); 
    		DebugLocation(317, 6);
    		mI(); 
    		DebugLocation(317, 8);
    		mS(); 
    		DebugLocation(317, 10);
    		mT(); 
    		DebugLocation(317, 12);
    		mI(); 
    		DebugLocation(317, 14);
    		mN(); 
    		DebugLocation(317, 16);
    		mC(); 
    		DebugLocation(317, 18);
    		mT(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("DISTINCT", 29);
    		LeaveRule("DISTINCT", 29);
    		LeaveRule_DISTINCT();
        }
    }
    // $ANTLR end "DISTINCT"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_TOP() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_TOP() {}

    // $ANTLR start "TOP"
    [GrammarRule("TOP")]
    private void mTOP()
    {
    	EnterRule_TOP();
    	EnterRule("TOP", 30);
    	TraceIn("TOP", 30);
    		try
    		{
    		int _type = TOP;
    		int _channel = DefaultTokenChannel;
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:318:5: ( T O P )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:318:7: T O P
    		{
    		DebugLocation(318, 7);
    		mT(); 
    		DebugLocation(318, 9);
    		mO(); 
    		DebugLocation(318, 11);
    		mP(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("TOP", 30);
    		LeaveRule("TOP", 30);
    		LeaveRule_TOP();
        }
    }
    // $ANTLR end "TOP"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_INTO() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_INTO() {}

    // $ANTLR start "INTO"
    [GrammarRule("INTO")]
    private void mINTO()
    {
    	EnterRule_INTO();
    	EnterRule("INTO", 31);
    	TraceIn("INTO", 31);
    		try
    		{
    		int _type = INTO;
    		int _channel = DefaultTokenChannel;
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:319:6: ( I N T O )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:319:8: I N T O
    		{
    		DebugLocation(319, 8);
    		mI(); 
    		DebugLocation(319, 10);
    		mN(); 
    		DebugLocation(319, 12);
    		mT(); 
    		DebugLocation(319, 14);
    		mO(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("INTO", 31);
    		LeaveRule("INTO", 31);
    		LeaveRule_INTO();
        }
    }
    // $ANTLR end "INTO"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_FROM() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_FROM() {}

    // $ANTLR start "FROM"
    [GrammarRule("FROM")]
    private void mFROM()
    {
    	EnterRule_FROM();
    	EnterRule("FROM", 32);
    	TraceIn("FROM", 32);
    		try
    		{
    		int _type = FROM;
    		int _channel = DefaultTokenChannel;
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:320:7: ( F R O M )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:320:9: F R O M
    		{
    		DebugLocation(320, 9);
    		mF(); 
    		DebugLocation(320, 11);
    		mR(); 
    		DebugLocation(320, 13);
    		mO(); 
    		DebugLocation(320, 15);
    		mM(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("FROM", 32);
    		LeaveRule("FROM", 32);
    		LeaveRule_FROM();
        }
    }
    // $ANTLR end "FROM"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_WHERE() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_WHERE() {}

    // $ANTLR start "WHERE"
    [GrammarRule("WHERE")]
    private void mWHERE()
    {
    	EnterRule_WHERE();
    	EnterRule("WHERE", 33);
    	TraceIn("WHERE", 33);
    		try
    		{
    		int _type = WHERE;
    		int _channel = DefaultTokenChannel;
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:321:8: ( W H E R E )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:321:10: W H E R E
    		{
    		DebugLocation(321, 10);
    		mW(); 
    		DebugLocation(321, 12);
    		mH(); 
    		DebugLocation(321, 14);
    		mE(); 
    		DebugLocation(321, 16);
    		mR(); 
    		DebugLocation(321, 18);
    		mE(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("WHERE", 33);
    		LeaveRule("WHERE", 33);
    		LeaveRule_WHERE();
        }
    }
    // $ANTLR end "WHERE"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_NOT() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_NOT() {}

    // $ANTLR start "NOT"
    [GrammarRule("NOT")]
    private void mNOT()
    {
    	EnterRule_NOT();
    	EnterRule("NOT", 34);
    	TraceIn("NOT", 34);
    		try
    		{
    		int _type = NOT;
    		int _channel = DefaultTokenChannel;
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:323:6: ( N O T )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:323:8: N O T
    		{
    		DebugLocation(323, 8);
    		mN(); 
    		DebugLocation(323, 10);
    		mO(); 
    		DebugLocation(323, 12);
    		mT(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("NOT", 34);
    		LeaveRule("NOT", 34);
    		LeaveRule_NOT();
        }
    }
    // $ANTLR end "NOT"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_AND() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_AND() {}

    // $ANTLR start "AND"
    [GrammarRule("AND")]
    private void mAND()
    {
    	EnterRule_AND();
    	EnterRule("AND", 35);
    	TraceIn("AND", 35);
    		try
    		{
    		int _type = AND;
    		int _channel = DefaultTokenChannel;
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:324:6: ( A N D )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:324:8: A N D
    		{
    		DebugLocation(324, 8);
    		mA(); 
    		DebugLocation(324, 10);
    		mN(); 
    		DebugLocation(324, 12);
    		mD(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("AND", 35);
    		LeaveRule("AND", 35);
    		LeaveRule_AND();
        }
    }
    // $ANTLR end "AND"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_OR() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_OR() {}

    // $ANTLR start "OR"
    [GrammarRule("OR")]
    private void mOR()
    {
    	EnterRule_OR();
    	EnterRule("OR", 36);
    	TraceIn("OR", 36);
    		try
    		{
    		int _type = OR;
    		int _channel = DefaultTokenChannel;
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:325:5: ( O R )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:325:7: O R
    		{
    		DebugLocation(325, 7);
    		mO(); 
    		DebugLocation(325, 9);
    		mR(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("OR", 36);
    		LeaveRule("OR", 36);
    		LeaveRule_OR();
        }
    }
    // $ANTLR end "OR"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_LIKE() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_LIKE() {}

    // $ANTLR start "LIKE"
    [GrammarRule("LIKE")]
    private void mLIKE()
    {
    	EnterRule_LIKE();
    	EnterRule("LIKE", 37);
    	TraceIn("LIKE", 37);
    		try
    		{
    		int _type = LIKE;
    		int _channel = DefaultTokenChannel;
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:326:6: ( L I K E )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:326:8: L I K E
    		{
    		DebugLocation(326, 8);
    		mL(); 
    		DebugLocation(326, 10);
    		mI(); 
    		DebugLocation(326, 12);
    		mK(); 
    		DebugLocation(326, 14);
    		mE(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("LIKE", 37);
    		LeaveRule("LIKE", 37);
    		LeaveRule_LIKE();
        }
    }
    // $ANTLR end "LIKE"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_MATCH() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_MATCH() {}

    // $ANTLR start "MATCH"
    [GrammarRule("MATCH")]
    private void mMATCH()
    {
    	EnterRule_MATCH();
    	EnterRule("MATCH", 38);
    	TraceIn("MATCH", 38);
    		try
    		{
    		int _type = MATCH;
    		int _channel = DefaultTokenChannel;
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:327:7: ( M A T C H )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:327:9: M A T C H
    		{
    		DebugLocation(327, 9);
    		mM(); 
    		DebugLocation(327, 11);
    		mA(); 
    		DebugLocation(327, 13);
    		mT(); 
    		DebugLocation(327, 15);
    		mC(); 
    		DebugLocation(327, 17);
    		mH(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("MATCH", 38);
    		LeaveRule("MATCH", 38);
    		LeaveRule_MATCH();
        }
    }
    // $ANTLR end "MATCH"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_GROUP() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_GROUP() {}

    // $ANTLR start "GROUP"
    [GrammarRule("GROUP")]
    private void mGROUP()
    {
    	EnterRule_GROUP();
    	EnterRule("GROUP", 39);
    	TraceIn("GROUP", 39);
    		try
    		{
    		int _type = GROUP;
    		int _channel = DefaultTokenChannel;
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:328:7: ( G R O U P )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:328:9: G R O U P
    		{
    		DebugLocation(328, 9);
    		mG(); 
    		DebugLocation(328, 11);
    		mR(); 
    		DebugLocation(328, 13);
    		mO(); 
    		DebugLocation(328, 15);
    		mU(); 
    		DebugLocation(328, 17);
    		mP(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("GROUP", 39);
    		LeaveRule("GROUP", 39);
    		LeaveRule_GROUP();
        }
    }
    // $ANTLR end "GROUP"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_ORDER() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_ORDER() {}

    // $ANTLR start "ORDER"
    [GrammarRule("ORDER")]
    private void mORDER()
    {
    	EnterRule_ORDER();
    	EnterRule("ORDER", 40);
    	TraceIn("ORDER", 40);
    		try
    		{
    		int _type = ORDER;
    		int _channel = DefaultTokenChannel;
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:329:7: ( O R D E R )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:329:9: O R D E R
    		{
    		DebugLocation(329, 9);
    		mO(); 
    		DebugLocation(329, 11);
    		mR(); 
    		DebugLocation(329, 13);
    		mD(); 
    		DebugLocation(329, 15);
    		mE(); 
    		DebugLocation(329, 17);
    		mR(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("ORDER", 40);
    		LeaveRule("ORDER", 40);
    		LeaveRule_ORDER();
        }
    }
    // $ANTLR end "ORDER"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_BY() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_BY() {}

    // $ANTLR start "BY"
    [GrammarRule("BY")]
    private void mBY()
    {
    	EnterRule_BY();
    	EnterRule("BY", 41);
    	TraceIn("BY", 41);
    		try
    		{
    		int _type = BY;
    		int _channel = DefaultTokenChannel;
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:330:4: ( B Y )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:330:6: B Y
    		{
    		DebugLocation(330, 6);
    		mB(); 
    		DebugLocation(330, 8);
    		mY(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("BY", 41);
    		LeaveRule("BY", 41);
    		LeaveRule_BY();
        }
    }
    // $ANTLR end "BY"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_ASC() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_ASC() {}

    // $ANTLR start "ASC"
    [GrammarRule("ASC")]
    private void mASC()
    {
    	EnterRule_ASC();
    	EnterRule("ASC", 42);
    	TraceIn("ASC", 42);
    		try
    		{
    		int _type = ASC;
    		int _channel = DefaultTokenChannel;
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:331:5: ( A S C )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:331:7: A S C
    		{
    		DebugLocation(331, 7);
    		mA(); 
    		DebugLocation(331, 9);
    		mS(); 
    		DebugLocation(331, 11);
    		mC(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("ASC", 42);
    		LeaveRule("ASC", 42);
    		LeaveRule_ASC();
        }
    }
    // $ANTLR end "ASC"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_DESC() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_DESC() {}

    // $ANTLR start "DESC"
    [GrammarRule("DESC")]
    private void mDESC()
    {
    	EnterRule_DESC();
    	EnterRule("DESC", 43);
    	TraceIn("DESC", 43);
    		try
    		{
    		int _type = DESC;
    		int _channel = DefaultTokenChannel;
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:332:6: ( D E S C )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:332:8: D E S C
    		{
    		DebugLocation(332, 8);
    		mD(); 
    		DebugLocation(332, 10);
    		mE(); 
    		DebugLocation(332, 12);
    		mS(); 
    		DebugLocation(332, 14);
    		mC(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("DESC", 43);
    		LeaveRule("DESC", 43);
    		LeaveRule_DESC();
        }
    }
    // $ANTLR end "DESC"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_CONVERT() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_CONVERT() {}

    // $ANTLR start "CONVERT"
    [GrammarRule("CONVERT")]
    private void mCONVERT()
    {
    	EnterRule_CONVERT();
    	EnterRule("CONVERT", 44);
    	TraceIn("CONVERT", 44);
    		try
    		{
    		int _type = CONVERT;
    		int _channel = DefaultTokenChannel;
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:333:9: ( C O N V E R T )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:333:11: C O N V E R T
    		{
    		DebugLocation(333, 11);
    		mC(); 
    		DebugLocation(333, 13);
    		mO(); 
    		DebugLocation(333, 15);
    		mN(); 
    		DebugLocation(333, 17);
    		mV(); 
    		DebugLocation(333, 19);
    		mE(); 
    		DebugLocation(333, 21);
    		mR(); 
    		DebugLocation(333, 23);
    		mT(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("CONVERT", 44);
    		LeaveRule("CONVERT", 44);
    		LeaveRule_CONVERT();
        }
    }
    // $ANTLR end "CONVERT"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_CAST() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_CAST() {}

    // $ANTLR start "CAST"
    [GrammarRule("CAST")]
    private void mCAST()
    {
    	EnterRule_CAST();
    	EnterRule("CAST", 45);
    	TraceIn("CAST", 45);
    		try
    		{
    		int _type = CAST;
    		int _channel = DefaultTokenChannel;
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:334:7: ( C A S T )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:334:9: C A S T
    		{
    		DebugLocation(334, 9);
    		mC(); 
    		DebugLocation(334, 11);
    		mA(); 
    		DebugLocation(334, 13);
    		mS(); 
    		DebugLocation(334, 15);
    		mT(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("CAST", 45);
    		LeaveRule("CAST", 45);
    		LeaveRule_CAST();
        }
    }
    // $ANTLR end "CAST"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_AS() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_AS() {}

    // $ANTLR start "AS"
    [GrammarRule("AS")]
    private void mAS()
    {
    	EnterRule_AS();
    	EnterRule("AS", 46);
    	TraceIn("AS", 46);
    		try
    		{
    		int _type = AS;
    		int _channel = DefaultTokenChannel;
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:335:9: ( A S )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:335:11: A S
    		{
    		DebugLocation(335, 11);
    		mA(); 
    		DebugLocation(335, 13);
    		mS(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("AS", 46);
    		LeaveRule("AS", 46);
    		LeaveRule_AS();
        }
    }
    // $ANTLR end "AS"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_BETWEEN() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_BETWEEN() {}

    // $ANTLR start "BETWEEN"
    [GrammarRule("BETWEEN")]
    private void mBETWEEN()
    {
    	EnterRule_BETWEEN();
    	EnterRule("BETWEEN", 47);
    	TraceIn("BETWEEN", 47);
    		try
    		{
    		int _type = BETWEEN;
    		int _channel = DefaultTokenChannel;
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:336:9: ( B E T W E E N )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:336:11: B E T W E E N
    		{
    		DebugLocation(336, 11);
    		mB(); 
    		DebugLocation(336, 13);
    		mE(); 
    		DebugLocation(336, 15);
    		mT(); 
    		DebugLocation(336, 17);
    		mW(); 
    		DebugLocation(336, 19);
    		mE(); 
    		DebugLocation(336, 21);
    		mE(); 
    		DebugLocation(336, 23);
    		mN(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("BETWEEN", 47);
    		LeaveRule("BETWEEN", 47);
    		LeaveRule_BETWEEN();
        }
    }
    // $ANTLR end "BETWEEN"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_IN() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_IN() {}

    // $ANTLR start "IN"
    [GrammarRule("IN")]
    private void mIN()
    {
    	EnterRule_IN();
    	EnterRule("IN", 48);
    	TraceIn("IN", 48);
    		try
    		{
    		int _type = IN;
    		int _channel = DefaultTokenChannel;
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:337:4: ( I N )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:337:6: I N
    		{
    		DebugLocation(337, 6);
    		mI(); 
    		DebugLocation(337, 8);
    		mN(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("IN", 48);
    		LeaveRule("IN", 48);
    		LeaveRule_IN();
        }
    }
    // $ANTLR end "IN"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_ANY() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_ANY() {}

    // $ANTLR start "ANY"
    [GrammarRule("ANY")]
    private void mANY()
    {
    	EnterRule_ANY();
    	EnterRule("ANY", 49);
    	TraceIn("ANY", 49);
    		try
    		{
    		int _type = ANY;
    		int _channel = DefaultTokenChannel;
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:338:5: ( A N Y )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:338:7: A N Y
    		{
    		DebugLocation(338, 7);
    		mA(); 
    		DebugLocation(338, 9);
    		mN(); 
    		DebugLocation(338, 11);
    		mY(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("ANY", 49);
    		LeaveRule("ANY", 49);
    		LeaveRule_ANY();
        }
    }
    // $ANTLR end "ANY"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_SOME() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_SOME() {}

    // $ANTLR start "SOME"
    [GrammarRule("SOME")]
    private void mSOME()
    {
    	EnterRule_SOME();
    	EnterRule("SOME", 50);
    	TraceIn("SOME", 50);
    		try
    		{
    		int _type = SOME;
    		int _channel = DefaultTokenChannel;
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:339:6: ( S O M E )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:339:8: S O M E
    		{
    		DebugLocation(339, 8);
    		mS(); 
    		DebugLocation(339, 10);
    		mO(); 
    		DebugLocation(339, 12);
    		mM(); 
    		DebugLocation(339, 14);
    		mE(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("SOME", 50);
    		LeaveRule("SOME", 50);
    		LeaveRule_SOME();
        }
    }
    // $ANTLR end "SOME"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_EXISTS() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_EXISTS() {}

    // $ANTLR start "EXISTS"
    [GrammarRule("EXISTS")]
    private void mEXISTS()
    {
    	EnterRule_EXISTS();
    	EnterRule("EXISTS", 51);
    	TraceIn("EXISTS", 51);
    		try
    		{
    		int _type = EXISTS;
    		int _channel = DefaultTokenChannel;
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:340:9: ( E X I S T S )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:340:11: E X I S T S
    		{
    		DebugLocation(340, 11);
    		mE(); 
    		DebugLocation(340, 13);
    		mX(); 
    		DebugLocation(340, 15);
    		mI(); 
    		DebugLocation(340, 17);
    		mS(); 
    		DebugLocation(340, 19);
    		mT(); 
    		DebugLocation(340, 21);
    		mS(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("EXISTS", 51);
    		LeaveRule("EXISTS", 51);
    		LeaveRule_EXISTS();
        }
    }
    // $ANTLR end "EXISTS"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_TOKEN() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_TOKEN() {}

    // $ANTLR start "TOKEN"
    [GrammarRule("TOKEN")]
    private void mTOKEN()
    {
    	EnterRule_TOKEN();
    	EnterRule("TOKEN", 52);
    	TraceIn("TOKEN", 52);
    		try
    		{
    		int _type = TOKEN;
    		int _channel = DefaultTokenChannel;
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:343:2: ( ( 'A' .. 'Z' | 'a' .. 'z' | '_' ) ( 'A' .. 'Z' | 'a' .. 'z' | '_' | '0' .. '9' )* )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:343:4: ( 'A' .. 'Z' | 'a' .. 'z' | '_' ) ( 'A' .. 'Z' | 'a' .. 'z' | '_' | '0' .. '9' )*
    		{
    		DebugLocation(343, 4);
    		if ((input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z'))
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}

    		DebugLocation(343, 32);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:343:32: ( 'A' .. 'Z' | 'a' .. 'z' | '_' | '0' .. '9' )*
    		try { DebugEnterSubRule(3);
    		while (true)
    		{
    			int alt3=2;
    			try { DebugEnterDecision(3, decisionCanBacktrack[3]);
    			int LA3_0 = input.LA(1);

    			if (((LA3_0>='0' && LA3_0<='9')||(LA3_0>='A' && LA3_0<='Z')||LA3_0=='_'||(LA3_0>='a' && LA3_0<='z')))
    			{
    				alt3 = 1;
    			}


    			} finally { DebugExitDecision(3); }
    			switch ( alt3 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:
    				{
    				DebugLocation(343, 32);
    				input.Consume();


    				}
    				break;

    			default:
    				goto loop3;
    			}
    		}

    		loop3:
    			;

    		} finally { DebugExitSubRule(3); }


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("TOKEN", 52);
    		LeaveRule("TOKEN", 52);
    		LeaveRule_TOKEN();
        }
    }
    // $ANTLR end "TOKEN"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_SYSTEMVAR() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_SYSTEMVAR() {}

    // $ANTLR start "SYSTEMVAR"
    [GrammarRule("SYSTEMVAR")]
    private void mSYSTEMVAR()
    {
    	EnterRule_SYSTEMVAR();
    	EnterRule("SYSTEMVAR", 53);
    	TraceIn("SYSTEMVAR", 53);
    		try
    		{
    		int _type = SYSTEMVAR;
    		int _channel = DefaultTokenChannel;
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:347:2: ( '$' TOKEN )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:347:4: '$' TOKEN
    		{
    		DebugLocation(347, 4);
    		Match('$'); 
    		DebugLocation(347, 8);
    		mTOKEN(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("SYSTEMVAR", 53);
    		LeaveRule("SYSTEMVAR", 53);
    		LeaveRule_SYSTEMVAR();
        }
    }
    // $ANTLR end "SYSTEMVAR"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_NUMBER() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_NUMBER() {}

    // $ANTLR start "NUMBER"
    [GrammarRule("NUMBER")]
    private void mNUMBER()
    {
    	EnterRule_NUMBER();
    	EnterRule("NUMBER", 54);
    	TraceIn("NUMBER", 54);
    		try
    		{
    		int _type = NUMBER;
    		int _channel = DefaultTokenChannel;
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:351:2: ( ( DIGIT )+ )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:351:4: ( DIGIT )+
    		{
    		DebugLocation(351, 4);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:351:4: ( DIGIT )+
    		int cnt4=0;
    		try { DebugEnterSubRule(4);
    		while (true)
    		{
    			int alt4=2;
    			try { DebugEnterDecision(4, decisionCanBacktrack[4]);
    			int LA4_0 = input.LA(1);

    			if (((LA4_0>='0' && LA4_0<='9')))
    			{
    				alt4 = 1;
    			}


    			} finally { DebugExitDecision(4); }
    			switch (alt4)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:
    				{
    				DebugLocation(351, 4);
    				input.Consume();


    				}
    				break;

    			default:
    				if (cnt4 >= 1)
    					goto loop4;

    				EarlyExitException eee4 = new EarlyExitException( 4, input );
    				DebugRecognitionException(eee4);
    				throw eee4;
    			}
    			cnt4++;
    		}
    		loop4:
    			;

    		} finally { DebugExitSubRule(4); }


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("NUMBER", 54);
    		LeaveRule("NUMBER", 54);
    		LeaveRule_NUMBER();
        }
    }
    // $ANTLR end "NUMBER"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_COMMENT_LINE() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_COMMENT_LINE() {}

    // $ANTLR start "COMMENT_LINE"
    [GrammarRule("COMMENT_LINE")]
    private void mCOMMENT_LINE()
    {
    	EnterRule_COMMENT_LINE();
    	EnterRule("COMMENT_LINE", 55);
    	TraceIn("COMMENT_LINE", 55);
    		try
    		{
    		int _type = COMMENT_LINE;
    		int _channel = DefaultTokenChannel;
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:356:2: ( '--' ( . )* ( ( '\\r' '\\n' ) | '\\r' | '\\n' ) )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:356:4: '--' ( . )* ( ( '\\r' '\\n' ) | '\\r' | '\\n' )
    		{
    		DebugLocation(356, 4);
    		Match("--"); 

    		DebugLocation(356, 9);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:356:9: ( . )*
    		try { DebugEnterSubRule(5);
    		while (true)
    		{
    			int alt5=2;
    			try { DebugEnterDecision(5, decisionCanBacktrack[5]);
    			int LA5_0 = input.LA(1);

    			if ((LA5_0=='\r'))
    			{
    				alt5 = 2;
    			}
    			else if ((LA5_0=='\n'))
    			{
    				alt5 = 2;
    			}
    			else if (((LA5_0>='\u0000' && LA5_0<='\t')||(LA5_0>='\u000B' && LA5_0<='\f')||(LA5_0>='\u000E' && LA5_0<='\uFFFF')))
    			{
    				alt5 = 1;
    			}


    			} finally { DebugExitDecision(5); }
    			switch ( alt5 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:356:9: .
    				{
    				DebugLocation(356, 9);
    				MatchAny(); 

    				}
    				break;

    			default:
    				goto loop5;
    			}
    		}

    		loop5:
    			;

    		} finally { DebugExitSubRule(5); }

    		DebugLocation(356, 12);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:356:12: ( ( '\\r' '\\n' ) | '\\r' | '\\n' )
    		int alt6=3;
    		try { DebugEnterSubRule(6);
    		try { DebugEnterDecision(6, decisionCanBacktrack[6]);
    		int LA6_0 = input.LA(1);

    		if ((LA6_0=='\r'))
    		{
    			int LA6_1 = input.LA(2);

    			if ((LA6_1=='\n'))
    			{
    				alt6 = 1;
    			}
    			else
    			{
    				alt6 = 2;
    			}
    		}
    		else if ((LA6_0=='\n'))
    		{
    			alt6 = 3;
    		}
    		else
    		{
    			NoViableAltException nvae = new NoViableAltException("", 6, 0, input);
    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(6); }
    		switch (alt6)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:356:13: ( '\\r' '\\n' )
    			{
    			DebugLocation(356, 13);
    			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:356:13: ( '\\r' '\\n' )
    			DebugEnterAlt(1);
    			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:356:14: '\\r' '\\n'
    			{
    			DebugLocation(356, 14);
    			Match('\r'); 
    			DebugLocation(356, 19);
    			Match('\n'); 

    			}


    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:356:27: '\\r'
    			{
    			DebugLocation(356, 27);
    			Match('\r'); 

    			}
    			break;
    		case 3:
    			DebugEnterAlt(3);
    			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:356:34: '\\n'
    			{
    			DebugLocation(356, 34);
    			Match('\n'); 

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(6); }

    		DebugLocation(356, 40);
    		 Skip(); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("COMMENT_LINE", 55);
    		LeaveRule("COMMENT_LINE", 55);
    		LeaveRule_COMMENT_LINE();
        }
    }
    // $ANTLR end "COMMENT_LINE"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_WS() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_WS() {}

    // $ANTLR start "WS"
    [GrammarRule("WS")]
    private void mWS()
    {
    	EnterRule_WS();
    	EnterRule("WS", 56);
    	TraceIn("WS", 56);
    		try
    		{
    		int _type = WS;
    		int _channel = DefaultTokenChannel;
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:365:2: ( ( ' ' | '\\t' | '\\n' | '\\r' | '\\u000C' )+ )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:365:4: ( ' ' | '\\t' | '\\n' | '\\r' | '\\u000C' )+
    		{
    		DebugLocation(365, 4);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:365:4: ( ' ' | '\\t' | '\\n' | '\\r' | '\\u000C' )+
    		int cnt7=0;
    		try { DebugEnterSubRule(7);
    		while (true)
    		{
    			int alt7=2;
    			try { DebugEnterDecision(7, decisionCanBacktrack[7]);
    			int LA7_0 = input.LA(1);

    			if (((LA7_0>='\t' && LA7_0<='\n')||(LA7_0>='\f' && LA7_0<='\r')||LA7_0==' '))
    			{
    				alt7 = 1;
    			}


    			} finally { DebugExitDecision(7); }
    			switch (alt7)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:
    				{
    				DebugLocation(365, 4);
    				input.Consume();


    				}
    				break;

    			default:
    				if (cnt7 >= 1)
    					goto loop7;

    				EarlyExitException eee7 = new EarlyExitException( 7, input );
    				DebugRecognitionException(eee7);
    				throw eee7;
    			}
    			cnt7++;
    		}
    		loop7:
    			;

    		} finally { DebugExitSubRule(7); }


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("WS", 56);
    		LeaveRule("WS", 56);
    		LeaveRule_WS();
        }
    }
    // $ANTLR end "WS"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_DIGIT() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_DIGIT() {}

    // $ANTLR start "DIGIT"
    [GrammarRule("DIGIT")]
    private void mDIGIT()
    {
    	EnterRule_DIGIT();
    	EnterRule("DIGIT", 57);
    	TraceIn("DIGIT", 57);
    		try
    		{
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:370:16: ( '0' .. '9' )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:
    		{
    		DebugLocation(370, 16);
    		if ((input.LA(1)>='0' && input.LA(1)<='9'))
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    	}
    	finally
    	{
    		TraceOut("DIGIT", 57);
    		LeaveRule("DIGIT", 57);
    		LeaveRule_DIGIT();
        }
    }
    // $ANTLR end "DIGIT"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_A() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_A() {}

    // $ANTLR start "A"
    [GrammarRule("A")]
    private void mA()
    {
    	EnterRule_A();
    	EnterRule("A", 58);
    	TraceIn("A", 58);
    		try
    		{
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:372:11: ( ( 'a' | 'A' ) )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:
    		{
    		DebugLocation(372, 11);
    		if (input.LA(1)=='A'||input.LA(1)=='a')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    	}
    	finally
    	{
    		TraceOut("A", 58);
    		LeaveRule("A", 58);
    		LeaveRule_A();
        }
    }
    // $ANTLR end "A"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_B() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_B() {}

    // $ANTLR start "B"
    [GrammarRule("B")]
    private void mB()
    {
    	EnterRule_B();
    	EnterRule("B", 59);
    	TraceIn("B", 59);
    		try
    		{
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:373:11: ( ( 'b' | 'B' ) )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:
    		{
    		DebugLocation(373, 11);
    		if (input.LA(1)=='B'||input.LA(1)=='b')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    	}
    	finally
    	{
    		TraceOut("B", 59);
    		LeaveRule("B", 59);
    		LeaveRule_B();
        }
    }
    // $ANTLR end "B"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_C() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_C() {}

    // $ANTLR start "C"
    [GrammarRule("C")]
    private void mC()
    {
    	EnterRule_C();
    	EnterRule("C", 60);
    	TraceIn("C", 60);
    		try
    		{
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:374:11: ( ( 'c' | 'C' ) )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:
    		{
    		DebugLocation(374, 11);
    		if (input.LA(1)=='C'||input.LA(1)=='c')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    	}
    	finally
    	{
    		TraceOut("C", 60);
    		LeaveRule("C", 60);
    		LeaveRule_C();
        }
    }
    // $ANTLR end "C"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_D() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_D() {}

    // $ANTLR start "D"
    [GrammarRule("D")]
    private void mD()
    {
    	EnterRule_D();
    	EnterRule("D", 61);
    	TraceIn("D", 61);
    		try
    		{
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:375:11: ( ( 'd' | 'D' ) )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:
    		{
    		DebugLocation(375, 11);
    		if (input.LA(1)=='D'||input.LA(1)=='d')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    	}
    	finally
    	{
    		TraceOut("D", 61);
    		LeaveRule("D", 61);
    		LeaveRule_D();
        }
    }
    // $ANTLR end "D"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_E() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_E() {}

    // $ANTLR start "E"
    [GrammarRule("E")]
    private void mE()
    {
    	EnterRule_E();
    	EnterRule("E", 62);
    	TraceIn("E", 62);
    		try
    		{
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:376:11: ( ( 'e' | 'E' ) )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:
    		{
    		DebugLocation(376, 11);
    		if (input.LA(1)=='E'||input.LA(1)=='e')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    	}
    	finally
    	{
    		TraceOut("E", 62);
    		LeaveRule("E", 62);
    		LeaveRule_E();
        }
    }
    // $ANTLR end "E"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_F() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_F() {}

    // $ANTLR start "F"
    [GrammarRule("F")]
    private void mF()
    {
    	EnterRule_F();
    	EnterRule("F", 63);
    	TraceIn("F", 63);
    		try
    		{
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:377:11: ( ( 'f' | 'F' ) )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:
    		{
    		DebugLocation(377, 11);
    		if (input.LA(1)=='F'||input.LA(1)=='f')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    	}
    	finally
    	{
    		TraceOut("F", 63);
    		LeaveRule("F", 63);
    		LeaveRule_F();
        }
    }
    // $ANTLR end "F"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_G() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_G() {}

    // $ANTLR start "G"
    [GrammarRule("G")]
    private void mG()
    {
    	EnterRule_G();
    	EnterRule("G", 64);
    	TraceIn("G", 64);
    		try
    		{
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:378:11: ( ( 'g' | 'G' ) )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:
    		{
    		DebugLocation(378, 11);
    		if (input.LA(1)=='G'||input.LA(1)=='g')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    	}
    	finally
    	{
    		TraceOut("G", 64);
    		LeaveRule("G", 64);
    		LeaveRule_G();
        }
    }
    // $ANTLR end "G"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_H() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_H() {}

    // $ANTLR start "H"
    [GrammarRule("H")]
    private void mH()
    {
    	EnterRule_H();
    	EnterRule("H", 65);
    	TraceIn("H", 65);
    		try
    		{
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:379:11: ( ( 'h' | 'H' ) )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:
    		{
    		DebugLocation(379, 11);
    		if (input.LA(1)=='H'||input.LA(1)=='h')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    	}
    	finally
    	{
    		TraceOut("H", 65);
    		LeaveRule("H", 65);
    		LeaveRule_H();
        }
    }
    // $ANTLR end "H"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_I() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_I() {}

    // $ANTLR start "I"
    [GrammarRule("I")]
    private void mI()
    {
    	EnterRule_I();
    	EnterRule("I", 66);
    	TraceIn("I", 66);
    		try
    		{
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:380:11: ( ( 'i' | 'I' ) )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:
    		{
    		DebugLocation(380, 11);
    		if (input.LA(1)=='I'||input.LA(1)=='i')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    	}
    	finally
    	{
    		TraceOut("I", 66);
    		LeaveRule("I", 66);
    		LeaveRule_I();
        }
    }
    // $ANTLR end "I"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_J() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_J() {}

    // $ANTLR start "J"
    [GrammarRule("J")]
    private void mJ()
    {
    	EnterRule_J();
    	EnterRule("J", 67);
    	TraceIn("J", 67);
    		try
    		{
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:381:11: ( ( 'j' | 'J' ) )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:
    		{
    		DebugLocation(381, 11);
    		if (input.LA(1)=='J'||input.LA(1)=='j')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    	}
    	finally
    	{
    		TraceOut("J", 67);
    		LeaveRule("J", 67);
    		LeaveRule_J();
        }
    }
    // $ANTLR end "J"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_K() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_K() {}

    // $ANTLR start "K"
    [GrammarRule("K")]
    private void mK()
    {
    	EnterRule_K();
    	EnterRule("K", 68);
    	TraceIn("K", 68);
    		try
    		{
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:382:11: ( ( 'k' | 'K' ) )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:
    		{
    		DebugLocation(382, 11);
    		if (input.LA(1)=='K'||input.LA(1)=='k')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    	}
    	finally
    	{
    		TraceOut("K", 68);
    		LeaveRule("K", 68);
    		LeaveRule_K();
        }
    }
    // $ANTLR end "K"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_L() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_L() {}

    // $ANTLR start "L"
    [GrammarRule("L")]
    private void mL()
    {
    	EnterRule_L();
    	EnterRule("L", 69);
    	TraceIn("L", 69);
    		try
    		{
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:383:11: ( ( 'l' | 'L' ) )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:
    		{
    		DebugLocation(383, 11);
    		if (input.LA(1)=='L'||input.LA(1)=='l')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    	}
    	finally
    	{
    		TraceOut("L", 69);
    		LeaveRule("L", 69);
    		LeaveRule_L();
        }
    }
    // $ANTLR end "L"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_M() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_M() {}

    // $ANTLR start "M"
    [GrammarRule("M")]
    private void mM()
    {
    	EnterRule_M();
    	EnterRule("M", 70);
    	TraceIn("M", 70);
    		try
    		{
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:384:11: ( ( 'm' | 'M' ) )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:
    		{
    		DebugLocation(384, 11);
    		if (input.LA(1)=='M'||input.LA(1)=='m')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    	}
    	finally
    	{
    		TraceOut("M", 70);
    		LeaveRule("M", 70);
    		LeaveRule_M();
        }
    }
    // $ANTLR end "M"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_N() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_N() {}

    // $ANTLR start "N"
    [GrammarRule("N")]
    private void mN()
    {
    	EnterRule_N();
    	EnterRule("N", 71);
    	TraceIn("N", 71);
    		try
    		{
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:385:11: ( ( 'n' | 'N' ) )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:
    		{
    		DebugLocation(385, 11);
    		if (input.LA(1)=='N'||input.LA(1)=='n')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    	}
    	finally
    	{
    		TraceOut("N", 71);
    		LeaveRule("N", 71);
    		LeaveRule_N();
        }
    }
    // $ANTLR end "N"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_O() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_O() {}

    // $ANTLR start "O"
    [GrammarRule("O")]
    private void mO()
    {
    	EnterRule_O();
    	EnterRule("O", 72);
    	TraceIn("O", 72);
    		try
    		{
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:386:11: ( ( 'o' | 'O' ) )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:
    		{
    		DebugLocation(386, 11);
    		if (input.LA(1)=='O'||input.LA(1)=='o')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    	}
    	finally
    	{
    		TraceOut("O", 72);
    		LeaveRule("O", 72);
    		LeaveRule_O();
        }
    }
    // $ANTLR end "O"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_P() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_P() {}

    // $ANTLR start "P"
    [GrammarRule("P")]
    private void mP()
    {
    	EnterRule_P();
    	EnterRule("P", 73);
    	TraceIn("P", 73);
    		try
    		{
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:387:11: ( ( 'p' | 'P' ) )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:
    		{
    		DebugLocation(387, 11);
    		if (input.LA(1)=='P'||input.LA(1)=='p')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    	}
    	finally
    	{
    		TraceOut("P", 73);
    		LeaveRule("P", 73);
    		LeaveRule_P();
        }
    }
    // $ANTLR end "P"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_Q() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_Q() {}

    // $ANTLR start "Q"
    [GrammarRule("Q")]
    private void mQ()
    {
    	EnterRule_Q();
    	EnterRule("Q", 74);
    	TraceIn("Q", 74);
    		try
    		{
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:388:11: ( ( 'q' | 'Q' ) )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:
    		{
    		DebugLocation(388, 11);
    		if (input.LA(1)=='Q'||input.LA(1)=='q')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    	}
    	finally
    	{
    		TraceOut("Q", 74);
    		LeaveRule("Q", 74);
    		LeaveRule_Q();
        }
    }
    // $ANTLR end "Q"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_R() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_R() {}

    // $ANTLR start "R"
    [GrammarRule("R")]
    private void mR()
    {
    	EnterRule_R();
    	EnterRule("R", 75);
    	TraceIn("R", 75);
    		try
    		{
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:389:11: ( ( 'r' | 'R' ) )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:
    		{
    		DebugLocation(389, 11);
    		if (input.LA(1)=='R'||input.LA(1)=='r')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    	}
    	finally
    	{
    		TraceOut("R", 75);
    		LeaveRule("R", 75);
    		LeaveRule_R();
        }
    }
    // $ANTLR end "R"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_S() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_S() {}

    // $ANTLR start "S"
    [GrammarRule("S")]
    private void mS()
    {
    	EnterRule_S();
    	EnterRule("S", 76);
    	TraceIn("S", 76);
    		try
    		{
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:390:11: ( ( 's' | 'S' ) )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:
    		{
    		DebugLocation(390, 11);
    		if (input.LA(1)=='S'||input.LA(1)=='s')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    	}
    	finally
    	{
    		TraceOut("S", 76);
    		LeaveRule("S", 76);
    		LeaveRule_S();
        }
    }
    // $ANTLR end "S"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T() {}

    // $ANTLR start "T"
    [GrammarRule("T")]
    private void mT()
    {
    	EnterRule_T();
    	EnterRule("T", 77);
    	TraceIn("T", 77);
    		try
    		{
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:391:11: ( ( 't' | 'T' ) )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:
    		{
    		DebugLocation(391, 11);
    		if (input.LA(1)=='T'||input.LA(1)=='t')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    	}
    	finally
    	{
    		TraceOut("T", 77);
    		LeaveRule("T", 77);
    		LeaveRule_T();
        }
    }
    // $ANTLR end "T"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_U() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_U() {}

    // $ANTLR start "U"
    [GrammarRule("U")]
    private void mU()
    {
    	EnterRule_U();
    	EnterRule("U", 78);
    	TraceIn("U", 78);
    		try
    		{
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:392:11: ( ( 'u' | 'U' ) )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:
    		{
    		DebugLocation(392, 11);
    		if (input.LA(1)=='U'||input.LA(1)=='u')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    	}
    	finally
    	{
    		TraceOut("U", 78);
    		LeaveRule("U", 78);
    		LeaveRule_U();
        }
    }
    // $ANTLR end "U"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_V() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_V() {}

    // $ANTLR start "V"
    [GrammarRule("V")]
    private void mV()
    {
    	EnterRule_V();
    	EnterRule("V", 79);
    	TraceIn("V", 79);
    		try
    		{
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:393:11: ( ( 'v' | 'V' ) )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:
    		{
    		DebugLocation(393, 11);
    		if (input.LA(1)=='V'||input.LA(1)=='v')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    	}
    	finally
    	{
    		TraceOut("V", 79);
    		LeaveRule("V", 79);
    		LeaveRule_V();
        }
    }
    // $ANTLR end "V"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_W() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_W() {}

    // $ANTLR start "W"
    [GrammarRule("W")]
    private void mW()
    {
    	EnterRule_W();
    	EnterRule("W", 80);
    	TraceIn("W", 80);
    		try
    		{
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:394:11: ( ( 'w' | 'W' ) )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:
    		{
    		DebugLocation(394, 11);
    		if (input.LA(1)=='W'||input.LA(1)=='w')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    	}
    	finally
    	{
    		TraceOut("W", 80);
    		LeaveRule("W", 80);
    		LeaveRule_W();
        }
    }
    // $ANTLR end "W"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_X() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_X() {}

    // $ANTLR start "X"
    [GrammarRule("X")]
    private void mX()
    {
    	EnterRule_X();
    	EnterRule("X", 81);
    	TraceIn("X", 81);
    		try
    		{
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:395:11: ( ( 'x' | 'X' ) )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:
    		{
    		DebugLocation(395, 11);
    		if (input.LA(1)=='X'||input.LA(1)=='x')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    	}
    	finally
    	{
    		TraceOut("X", 81);
    		LeaveRule("X", 81);
    		LeaveRule_X();
        }
    }
    // $ANTLR end "X"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_Y() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_Y() {}

    // $ANTLR start "Y"
    [GrammarRule("Y")]
    private void mY()
    {
    	EnterRule_Y();
    	EnterRule("Y", 82);
    	TraceIn("Y", 82);
    		try
    		{
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:396:11: ( ( 'y' | 'Y' ) )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:
    		{
    		DebugLocation(396, 11);
    		if (input.LA(1)=='Y'||input.LA(1)=='y')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    	}
    	finally
    	{
    		TraceOut("Y", 82);
    		LeaveRule("Y", 82);
    		LeaveRule_Y();
        }
    }
    // $ANTLR end "Y"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_Z() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_Z() {}

    // $ANTLR start "Z"
    [GrammarRule("Z")]
    private void mZ()
    {
    	EnterRule_Z();
    	EnterRule("Z", 83);
    	TraceIn("Z", 83);
    		try
    		{
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:397:11: ( ( 'z' | 'Z' ) )
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:
    		{
    		DebugLocation(397, 11);
    		if (input.LA(1)=='Z'||input.LA(1)=='z')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    	}
    	finally
    	{
    		TraceOut("Z", 83);
    		LeaveRule("Z", 83);
    		LeaveRule_Z();
        }
    }
    // $ANTLR end "Z"

    public override void mTokens()
    {
    	// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:1:8: ( T__117 | T__118 | T__119 | T__120 | T__121 | T__122 | T__123 | T__124 | T__125 | T__126 | T__127 | T__128 | T__129 | T__130 | T__131 | T__132 | T__133 | T__134 | T__135 | T__136 | T__137 | T__138 | T__139 | T__140 | STRING | SIMPLE_FILE | SELECT | ALL | DISTINCT | TOP | INTO | FROM | WHERE | NOT | AND | OR | LIKE | MATCH | GROUP | ORDER | BY | ASC | DESC | CONVERT | CAST | AS | BETWEEN | IN | ANY | SOME | EXISTS | TOKEN | SYSTEMVAR | NUMBER | COMMENT_LINE | WS )
    	int alt8=56;
    	try { DebugEnterDecision(8, decisionCanBacktrack[8]);
    	try
    	{
    		alt8 = dfa8.Predict(input);
    	}
    	catch (NoViableAltException nvae)
    	{
    		DebugRecognitionException(nvae);
    		throw;
    	}
    	} finally { DebugExitDecision(8); }
    	switch (alt8)
    	{
    	case 1:
    		DebugEnterAlt(1);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:1:10: T__117
    		{
    		DebugLocation(1, 10);
    		mT__117(); 

    		}
    		break;
    	case 2:
    		DebugEnterAlt(2);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:1:17: T__118
    		{
    		DebugLocation(1, 17);
    		mT__118(); 

    		}
    		break;
    	case 3:
    		DebugEnterAlt(3);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:1:24: T__119
    		{
    		DebugLocation(1, 24);
    		mT__119(); 

    		}
    		break;
    	case 4:
    		DebugEnterAlt(4);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:1:31: T__120
    		{
    		DebugLocation(1, 31);
    		mT__120(); 

    		}
    		break;
    	case 5:
    		DebugEnterAlt(5);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:1:38: T__121
    		{
    		DebugLocation(1, 38);
    		mT__121(); 

    		}
    		break;
    	case 6:
    		DebugEnterAlt(6);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:1:45: T__122
    		{
    		DebugLocation(1, 45);
    		mT__122(); 

    		}
    		break;
    	case 7:
    		DebugEnterAlt(7);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:1:52: T__123
    		{
    		DebugLocation(1, 52);
    		mT__123(); 

    		}
    		break;
    	case 8:
    		DebugEnterAlt(8);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:1:59: T__124
    		{
    		DebugLocation(1, 59);
    		mT__124(); 

    		}
    		break;
    	case 9:
    		DebugEnterAlt(9);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:1:66: T__125
    		{
    		DebugLocation(1, 66);
    		mT__125(); 

    		}
    		break;
    	case 10:
    		DebugEnterAlt(10);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:1:73: T__126
    		{
    		DebugLocation(1, 73);
    		mT__126(); 

    		}
    		break;
    	case 11:
    		DebugEnterAlt(11);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:1:80: T__127
    		{
    		DebugLocation(1, 80);
    		mT__127(); 

    		}
    		break;
    	case 12:
    		DebugEnterAlt(12);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:1:87: T__128
    		{
    		DebugLocation(1, 87);
    		mT__128(); 

    		}
    		break;
    	case 13:
    		DebugEnterAlt(13);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:1:94: T__129
    		{
    		DebugLocation(1, 94);
    		mT__129(); 

    		}
    		break;
    	case 14:
    		DebugEnterAlt(14);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:1:101: T__130
    		{
    		DebugLocation(1, 101);
    		mT__130(); 

    		}
    		break;
    	case 15:
    		DebugEnterAlt(15);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:1:108: T__131
    		{
    		DebugLocation(1, 108);
    		mT__131(); 

    		}
    		break;
    	case 16:
    		DebugEnterAlt(16);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:1:115: T__132
    		{
    		DebugLocation(1, 115);
    		mT__132(); 

    		}
    		break;
    	case 17:
    		DebugEnterAlt(17);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:1:122: T__133
    		{
    		DebugLocation(1, 122);
    		mT__133(); 

    		}
    		break;
    	case 18:
    		DebugEnterAlt(18);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:1:129: T__134
    		{
    		DebugLocation(1, 129);
    		mT__134(); 

    		}
    		break;
    	case 19:
    		DebugEnterAlt(19);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:1:136: T__135
    		{
    		DebugLocation(1, 136);
    		mT__135(); 

    		}
    		break;
    	case 20:
    		DebugEnterAlt(20);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:1:143: T__136
    		{
    		DebugLocation(1, 143);
    		mT__136(); 

    		}
    		break;
    	case 21:
    		DebugEnterAlt(21);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:1:150: T__137
    		{
    		DebugLocation(1, 150);
    		mT__137(); 

    		}
    		break;
    	case 22:
    		DebugEnterAlt(22);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:1:157: T__138
    		{
    		DebugLocation(1, 157);
    		mT__138(); 

    		}
    		break;
    	case 23:
    		DebugEnterAlt(23);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:1:164: T__139
    		{
    		DebugLocation(1, 164);
    		mT__139(); 

    		}
    		break;
    	case 24:
    		DebugEnterAlt(24);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:1:171: T__140
    		{
    		DebugLocation(1, 171);
    		mT__140(); 

    		}
    		break;
    	case 25:
    		DebugEnterAlt(25);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:1:178: STRING
    		{
    		DebugLocation(1, 178);
    		mSTRING(); 

    		}
    		break;
    	case 26:
    		DebugEnterAlt(26);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:1:185: SIMPLE_FILE
    		{
    		DebugLocation(1, 185);
    		mSIMPLE_FILE(); 

    		}
    		break;
    	case 27:
    		DebugEnterAlt(27);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:1:197: SELECT
    		{
    		DebugLocation(1, 197);
    		mSELECT(); 

    		}
    		break;
    	case 28:
    		DebugEnterAlt(28);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:1:204: ALL
    		{
    		DebugLocation(1, 204);
    		mALL(); 

    		}
    		break;
    	case 29:
    		DebugEnterAlt(29);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:1:208: DISTINCT
    		{
    		DebugLocation(1, 208);
    		mDISTINCT(); 

    		}
    		break;
    	case 30:
    		DebugEnterAlt(30);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:1:217: TOP
    		{
    		DebugLocation(1, 217);
    		mTOP(); 

    		}
    		break;
    	case 31:
    		DebugEnterAlt(31);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:1:221: INTO
    		{
    		DebugLocation(1, 221);
    		mINTO(); 

    		}
    		break;
    	case 32:
    		DebugEnterAlt(32);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:1:226: FROM
    		{
    		DebugLocation(1, 226);
    		mFROM(); 

    		}
    		break;
    	case 33:
    		DebugEnterAlt(33);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:1:231: WHERE
    		{
    		DebugLocation(1, 231);
    		mWHERE(); 

    		}
    		break;
    	case 34:
    		DebugEnterAlt(34);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:1:237: NOT
    		{
    		DebugLocation(1, 237);
    		mNOT(); 

    		}
    		break;
    	case 35:
    		DebugEnterAlt(35);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:1:241: AND
    		{
    		DebugLocation(1, 241);
    		mAND(); 

    		}
    		break;
    	case 36:
    		DebugEnterAlt(36);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:1:245: OR
    		{
    		DebugLocation(1, 245);
    		mOR(); 

    		}
    		break;
    	case 37:
    		DebugEnterAlt(37);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:1:248: LIKE
    		{
    		DebugLocation(1, 248);
    		mLIKE(); 

    		}
    		break;
    	case 38:
    		DebugEnterAlt(38);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:1:253: MATCH
    		{
    		DebugLocation(1, 253);
    		mMATCH(); 

    		}
    		break;
    	case 39:
    		DebugEnterAlt(39);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:1:259: GROUP
    		{
    		DebugLocation(1, 259);
    		mGROUP(); 

    		}
    		break;
    	case 40:
    		DebugEnterAlt(40);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:1:265: ORDER
    		{
    		DebugLocation(1, 265);
    		mORDER(); 

    		}
    		break;
    	case 41:
    		DebugEnterAlt(41);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:1:271: BY
    		{
    		DebugLocation(1, 271);
    		mBY(); 

    		}
    		break;
    	case 42:
    		DebugEnterAlt(42);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:1:274: ASC
    		{
    		DebugLocation(1, 274);
    		mASC(); 

    		}
    		break;
    	case 43:
    		DebugEnterAlt(43);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:1:278: DESC
    		{
    		DebugLocation(1, 278);
    		mDESC(); 

    		}
    		break;
    	case 44:
    		DebugEnterAlt(44);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:1:283: CONVERT
    		{
    		DebugLocation(1, 283);
    		mCONVERT(); 

    		}
    		break;
    	case 45:
    		DebugEnterAlt(45);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:1:291: CAST
    		{
    		DebugLocation(1, 291);
    		mCAST(); 

    		}
    		break;
    	case 46:
    		DebugEnterAlt(46);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:1:296: AS
    		{
    		DebugLocation(1, 296);
    		mAS(); 

    		}
    		break;
    	case 47:
    		DebugEnterAlt(47);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:1:299: BETWEEN
    		{
    		DebugLocation(1, 299);
    		mBETWEEN(); 

    		}
    		break;
    	case 48:
    		DebugEnterAlt(48);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:1:307: IN
    		{
    		DebugLocation(1, 307);
    		mIN(); 

    		}
    		break;
    	case 49:
    		DebugEnterAlt(49);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:1:310: ANY
    		{
    		DebugLocation(1, 310);
    		mANY(); 

    		}
    		break;
    	case 50:
    		DebugEnterAlt(50);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:1:314: SOME
    		{
    		DebugLocation(1, 314);
    		mSOME(); 

    		}
    		break;
    	case 51:
    		DebugEnterAlt(51);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:1:319: EXISTS
    		{
    		DebugLocation(1, 319);
    		mEXISTS(); 

    		}
    		break;
    	case 52:
    		DebugEnterAlt(52);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:1:326: TOKEN
    		{
    		DebugLocation(1, 326);
    		mTOKEN(); 

    		}
    		break;
    	case 53:
    		DebugEnterAlt(53);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:1:332: SYSTEMVAR
    		{
    		DebugLocation(1, 332);
    		mSYSTEMVAR(); 

    		}
    		break;
    	case 54:
    		DebugEnterAlt(54);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:1:342: NUMBER
    		{
    		DebugLocation(1, 342);
    		mNUMBER(); 

    		}
    		break;
    	case 55:
    		DebugEnterAlt(55);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:1:349: COMMENT_LINE
    		{
    		DebugLocation(1, 349);
    		mCOMMENT_LINE(); 

    		}
    		break;
    	case 56:
    		DebugEnterAlt(56);
    		// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:1:362: WS
    		{
    		DebugLocation(1, 362);
    		mWS(); 

    		}
    		break;

    	}

    }


	#region DFA
	DFA8 dfa8;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa8 = new DFA8(this, SpecialStateTransition8);
	}

	private class DFA8 : DFA
	{
		private const string DFA8_eotS =
			"\x9\xFFFF\x1\x2C\x2\xFFFF\x1\x2F\x1\xFFFF\x1\x31\x1\x32\x5\xFFFF\xF\x24"+
			"\x10\xFFFF\x4\x24\x1\x4E\x3\x24\x1\x53\x3\x24\x1\x58\x3\x24\x1\x5D\x6"+
			"\x24\x1\x64\x1\x65\x1\x66\x1\xFFFF\x1\x67\x2\x24\x1\x6A\x1\xFFFF\x3\x24"+
			"\x1\x6E\x1\xFFFF\x4\x24\x1\xFFFF\x5\x24\x1\x78\x4\xFFFF\x1\x24\x1\x7A"+
			"\x1\xFFFF\x1\x7B\x1\x7C\x1\x24\x1\xFFFF\x1\x24\x1\x7F\x4\x24\x1\x84\x2"+
			"\x24\x1\xFFFF\x1\x24\x3\xFFFF\x1\x88\x1\x89\x1\xFFFF\x1\x8A\x1\x8B\x2"+
			"\x24\x1\xFFFF\x1\x24\x1\x8F\x1\x24\x4\xFFFF\x2\x24\x1\x93\x1\xFFFF\x1"+
			"\x24\x1\x95\x1\x96\x1\xFFFF\x1\x97\x3\xFFFF";
		private const string DFA8_eofS =
			"\x98\xFFFF";
		private const string DFA8_minS =
			"\x1\x9\x1\x3C\x7\xFFFF\x1\x2D\x2\xFFFF\x1\x3D\x1\xFFFF\x1\x3D\x1\x0\x5"+
			"\xFFFF\x1\x45\x1\x4C\x1\x45\x1\x4F\x1\x4E\x1\x52\x1\x48\x1\x4F\x1\x52"+
			"\x1\x49\x1\x41\x1\x52\x1\x45\x1\x41\x1\x58\x10\xFFFF\x1\x4C\x1\x4D\x1"+
			"\x4C\x1\x44\x1\x30\x2\x53\x1\x50\x1\x30\x1\x4F\x1\x45\x1\x54\x1\x30\x1"+
			"\x4B\x1\x54\x1\x4F\x1\x30\x1\x54\x1\x4E\x1\x53\x1\x49\x2\x45\x3\x30\x1"+
			"\xFFFF\x1\x30\x1\x54\x1\x43\x1\x30\x1\xFFFF\x1\x4F\x1\x4D\x1\x52\x1\x30"+
			"\x1\xFFFF\x2\x45\x1\x43\x1\x55\x1\xFFFF\x1\x57\x1\x56\x1\x54\x1\x53\x1"+
			"\x43\x1\x30\x4\xFFFF\x1\x49\x1\x30\x1\xFFFF\x2\x30\x1\x45\x1\xFFFF\x1"+
			"\x52\x1\x30\x1\x48\x1\x50\x2\x45\x1\x30\x2\x54\x1\xFFFF\x1\x4E\x3\xFFFF"+
			"\x2\x30\x1\xFFFF\x2\x30\x1\x45\x1\x52\x1\xFFFF\x1\x53\x1\x30\x1\x43\x4"+
			"\xFFFF\x1\x4E\x1\x54\x1\x30\x1\xFFFF\x1\x54\x2\x30\x1\xFFFF\x1\x30\x3"+
			"\xFFFF";
		private const string DFA8_maxS =
			"\x1\x7E\x1\x3E\x7\xFFFF\x1\x2D\x2\xFFFF\x1\x3E\x1\xFFFF\x1\x3D\x1\xFFFF"+
			"\x5\xFFFF\x1\x6F\x1\x73\x1\x69\x1\x6F\x1\x6E\x1\x72\x1\x68\x1\x6F\x1"+
			"\x72\x1\x69\x1\x61\x1\x72\x1\x79\x1\x6F\x1\x78\x10\xFFFF\x1\x6C\x1\x6D"+
			"\x1\x6C\x1\x79\x1\x7A\x2\x73\x1\x70\x1\x7A\x1\x6F\x1\x65\x1\x74\x1\x7A"+
			"\x1\x6B\x1\x74\x1\x6F\x1\x7A\x1\x74\x1\x6E\x1\x73\x1\x69\x2\x65\x3\x7A"+
			"\x1\xFFFF\x1\x7A\x1\x74\x1\x63\x1\x7A\x1\xFFFF\x1\x6F\x1\x6D\x1\x72\x1"+
			"\x7A\x1\xFFFF\x2\x65\x1\x63\x1\x75\x1\xFFFF\x1\x77\x1\x76\x1\x74\x1\x73"+
			"\x1\x63\x1\x7A\x4\xFFFF\x1\x69\x1\x7A\x1\xFFFF\x2\x7A\x1\x65\x1\xFFFF"+
			"\x1\x72\x1\x7A\x1\x68\x1\x70\x2\x65\x1\x7A\x2\x74\x1\xFFFF\x1\x6E\x3"+
			"\xFFFF\x2\x7A\x1\xFFFF\x2\x7A\x1\x65\x1\x72\x1\xFFFF\x1\x73\x1\x7A\x1"+
			"\x63\x4\xFFFF\x1\x6E\x1\x74\x1\x7A\x1\xFFFF\x1\x74\x2\x7A\x1\xFFFF\x1"+
			"\x7A\x3\xFFFF";
		private const string DFA8_acceptS =
			"\x2\xFFFF\x1\x4\x1\x5\x1\x6\x1\x7\x1\x8\x1\x9\x1\xA\x1\xFFFF\x1\xC\x1"+
			"\xD\x1\xFFFF\x1\x11\x2\xFFFF\x1\x15\x1\x16\x1\x17\x1\x18\x1\x19\xF\xFFFF"+
			"\x1\x34\x1\x35\x1\x36\x1\x38\x1\x1\x1\x2\x1\x3\x1\x37\x1\xB\x1\xF\x1"+
			"\x10\x1\xE\x1\x13\x1\x12\x1\x14\x1\x1A\x1A\xFFFF\x1\x2E\x4\xFFFF\x1\x30"+
			"\x4\xFFFF\x1\x24\x4\xFFFF\x1\x29\x6\xFFFF\x1\x1C\x1\x23\x1\x31\x1\x2A"+
			"\x2\xFFFF\x1\x1E\x3\xFFFF\x1\x22\x9\xFFFF\x1\x32\x1\xFFFF\x1\x2B\x1\x1F"+
			"\x1\x20\x2\xFFFF\x1\x25\x4\xFFFF\x1\x2D\x3\xFFFF\x1\x21\x1\x28\x1\x26"+
			"\x1\x27\x3\xFFFF\x1\x1B\x3\xFFFF\x1\x33\x1\xFFFF\x1\x2F\x1\x2C\x1\x1D";
		private const string DFA8_specialS =
			"\xF\xFFFF\x1\x0\x88\xFFFF}>";
		private static readonly string[] DFA8_transitionS =
			{
				"\x2\x27\x1\xFFFF\x2\x27\x12\xFFFF\x1\x27\x1\x1\x2\xFFFF\x1\x25\x1\x2"+
				"\x1\x3\x1\x14\x1\x4\x1\x5\x1\x6\x1\x7\x1\x8\x1\x9\x1\xFFFF\x1\xA\xA"+
				"\x26\x1\xFFFF\x1\xB\x1\xC\x1\xD\x1\xE\x2\xFFFF\x1\x16\x1\x21\x1\x22"+
				"\x1\x17\x1\x23\x1\x1A\x1\x20\x1\x24\x1\x19\x2\x24\x1\x1E\x1\x1F\x1\x1C"+
				"\x1\x1D\x3\x24\x1\x15\x1\x18\x2\x24\x1\x1B\x3\x24\x1\xF\x1\xFFFF\x1"+
				"\x10\x1\x11\x1\x24\x1\xFFFF\x1\x16\x1\x21\x1\x22\x1\x17\x1\x23\x1\x1A"+
				"\x1\x20\x1\x24\x1\x19\x2\x24\x1\x1E\x1\x1F\x1\x1C\x1\x1D\x3\x24\x1\x15"+
				"\x1\x18\x2\x24\x1\x1B\x3\x24\x1\xFFFF\x1\x12\x1\xFFFF\x1\x13",
				"\x1\x28\x1\x29\x1\x2A",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x2B",
				"",
				"",
				"\x1\x2D\x1\x2E",
				"",
				"\x1\x30",
				"\x27\x33\x1\xFFFF\xFFD8\x33",
				"",
				"",
				"",
				"",
				"",
				"\x1\x34\x9\xFFFF\x1\x35\x15\xFFFF\x1\x34\x9\xFFFF\x1\x35",
				"\x1\x36\x1\xFFFF\x1\x37\x4\xFFFF\x1\x38\x18\xFFFF\x1\x36\x1\xFFFF\x1"+
				"\x37\x4\xFFFF\x1\x38",
				"\x1\x3A\x3\xFFFF\x1\x39\x1B\xFFFF\x1\x3A\x3\xFFFF\x1\x39",
				"\x1\x3B\x1F\xFFFF\x1\x3B",
				"\x1\x3C\x1F\xFFFF\x1\x3C",
				"\x1\x3D\x1F\xFFFF\x1\x3D",
				"\x1\x3E\x1F\xFFFF\x1\x3E",
				"\x1\x3F\x1F\xFFFF\x1\x3F",
				"\x1\x40\x1F\xFFFF\x1\x40",
				"\x1\x41\x1F\xFFFF\x1\x41",
				"\x1\x42\x1F\xFFFF\x1\x42",
				"\x1\x43\x1F\xFFFF\x1\x43",
				"\x1\x45\x13\xFFFF\x1\x44\xB\xFFFF\x1\x45\x13\xFFFF\x1\x44",
				"\x1\x47\xD\xFFFF\x1\x46\x11\xFFFF\x1\x47\xD\xFFFF\x1\x46",
				"\x1\x48\x1F\xFFFF\x1\x48",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x49\x1F\xFFFF\x1\x49",
				"\x1\x4A\x1F\xFFFF\x1\x4A",
				"\x1\x4B\x1F\xFFFF\x1\x4B",
				"\x1\x4C\x14\xFFFF\x1\x4D\xA\xFFFF\x1\x4C\x14\xFFFF\x1\x4D",
				"\xA\x24\x7\xFFFF\x2\x24\x1\x4F\x17\x24\x4\xFFFF\x1\x24\x1\xFFFF\x2"+
				"\x24\x1\x4F\x17\x24",
				"\x1\x50\x1F\xFFFF\x1\x50",
				"\x1\x51\x1F\xFFFF\x1\x51",
				"\x1\x52\x1F\xFFFF\x1\x52",
				"\xA\x24\x7\xFFFF\x13\x24\x1\x54\x6\x24\x4\xFFFF\x1\x24\x1\xFFFF\x13"+
				"\x24\x1\x54\x6\x24",
				"\x1\x55\x1F\xFFFF\x1\x55",
				"\x1\x56\x1F\xFFFF\x1\x56",
				"\x1\x57\x1F\xFFFF\x1\x57",
				"\xA\x24\x7\xFFFF\x3\x24\x1\x59\x16\x24\x4\xFFFF\x1\x24\x1\xFFFF\x3"+
				"\x24\x1\x59\x16\x24",
				"\x1\x5A\x1F\xFFFF\x1\x5A",
				"\x1\x5B\x1F\xFFFF\x1\x5B",
				"\x1\x5C\x1F\xFFFF\x1\x5C",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\x1\x5E\x1F\xFFFF\x1\x5E",
				"\x1\x5F\x1F\xFFFF\x1\x5F",
				"\x1\x60\x1F\xFFFF\x1\x60",
				"\x1\x61\x1F\xFFFF\x1\x61",
				"\x1\x62\x1F\xFFFF\x1\x62",
				"\x1\x63\x1F\xFFFF\x1\x63",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\x1\x68\x1F\xFFFF\x1\x68",
				"\x1\x69\x1F\xFFFF\x1\x69",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"",
				"\x1\x6B\x1F\xFFFF\x1\x6B",
				"\x1\x6C\x1F\xFFFF\x1\x6C",
				"\x1\x6D\x1F\xFFFF\x1\x6D",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"",
				"\x1\x6F\x1F\xFFFF\x1\x6F",
				"\x1\x70\x1F\xFFFF\x1\x70",
				"\x1\x71\x1F\xFFFF\x1\x71",
				"\x1\x72\x1F\xFFFF\x1\x72",
				"",
				"\x1\x73\x1F\xFFFF\x1\x73",
				"\x1\x74\x1F\xFFFF\x1\x74",
				"\x1\x75\x1F\xFFFF\x1\x75",
				"\x1\x76\x1F\xFFFF\x1\x76",
				"\x1\x77\x1F\xFFFF\x1\x77",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"",
				"",
				"",
				"",
				"\x1\x79\x1F\xFFFF\x1\x79",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\x1\x7D\x1F\xFFFF\x1\x7D",
				"",
				"\x1\x7E\x1F\xFFFF\x1\x7E",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\x1\x80\x1F\xFFFF\x1\x80",
				"\x1\x81\x1F\xFFFF\x1\x81",
				"\x1\x82\x1F\xFFFF\x1\x82",
				"\x1\x83\x1F\xFFFF\x1\x83",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\x1\x85\x1F\xFFFF\x1\x85",
				"\x1\x86\x1F\xFFFF\x1\x86",
				"",
				"\x1\x87\x1F\xFFFF\x1\x87",
				"",
				"",
				"",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\x1\x8C\x1F\xFFFF\x1\x8C",
				"\x1\x8D\x1F\xFFFF\x1\x8D",
				"",
				"\x1\x8E\x1F\xFFFF\x1\x8E",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\x1\x90\x1F\xFFFF\x1\x90",
				"",
				"",
				"",
				"",
				"\x1\x91\x1F\xFFFF\x1\x91",
				"\x1\x92\x1F\xFFFF\x1\x92",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"",
				"\x1\x94\x1F\xFFFF\x1\x94",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"",
				"",
				""
			};

		private static readonly short[] DFA8_eot = DFA.UnpackEncodedString(DFA8_eotS);
		private static readonly short[] DFA8_eof = DFA.UnpackEncodedString(DFA8_eofS);
		private static readonly char[] DFA8_min = DFA.UnpackEncodedStringToUnsignedChars(DFA8_minS);
		private static readonly char[] DFA8_max = DFA.UnpackEncodedStringToUnsignedChars(DFA8_maxS);
		private static readonly short[] DFA8_accept = DFA.UnpackEncodedString(DFA8_acceptS);
		private static readonly short[] DFA8_special = DFA.UnpackEncodedString(DFA8_specialS);
		private static readonly short[][] DFA8_transition;

		static DFA8()
		{
			int numStates = DFA8_transitionS.Length;
			DFA8_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA8_transition[i] = DFA.UnpackEncodedString(DFA8_transitionS[i]);
			}
		}

		public DFA8( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 8;
			this.eot = DFA8_eot;
			this.eof = DFA8_eof;
			this.min = DFA8_min;
			this.max = DFA8_max;
			this.accept = DFA8_accept;
			this.special = DFA8_special;
			this.transition = DFA8_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( T__117 | T__118 | T__119 | T__120 | T__121 | T__122 | T__123 | T__124 | T__125 | T__126 | T__127 | T__128 | T__129 | T__130 | T__131 | T__132 | T__133 | T__134 | T__135 | T__136 | T__137 | T__138 | T__139 | T__140 | STRING | SIMPLE_FILE | SELECT | ALL | DISTINCT | TOP | INTO | FROM | WHERE | NOT | AND | OR | LIKE | MATCH | GROUP | ORDER | BY | ASC | DESC | CONVERT | CAST | AS | BETWEEN | IN | ANY | SOME | EXISTS | TOKEN | SYSTEMVAR | NUMBER | COMMENT_LINE | WS );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition8(DFA dfa, int s, IIntStream _input)
	{
		IIntStream input = _input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA8_15 = input.LA(1);

				s = -1;
				if (((LA8_15>='\u0000' && LA8_15<='&')||(LA8_15>='(' && LA8_15<='\uFFFF'))) {s = 51;}

				else s = 50;

				if (s >= 0) return s;
				break;
		}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 8, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
 
	#endregion

}

} // namespace  FxGqlLib 
