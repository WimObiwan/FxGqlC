//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g 2013-03-13 17:22:57

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591


// `XXX' does not need a CLSCompliant attribute because the assembly is not marked as CLS-compliant (CS3021)
#pragma warning disable 3021
// The private field `XXX' is assigned but its value is never used (CS0414)
#pragma warning disable 414


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  FxGqlLib 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class gqlParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "A", "ALL", "AND", "ANY", "AS", "ASC", "B", "BETWEEN", "BOTTOM", "BY", "C", "CASE", "CAST", "COMMENT_BLOCK", "COMMENT_LINE", "CONVERT", "COUNT", "CREATE", "D", "DATEADD", "DATEDIFF", "DATEPART", "DECLARE", "DESC", "DIGIT", "DISTINCT", "DROP", "E", "ELSE", "END", "EXISTS", "F", "FROM", "G", "GROUP", "H", "HAVING", "I", "IN", "INTO", "J", "K", "L", "LIKE", "M", "MATCH", "N", "NOT", "NUMBER", "O", "OR", "ORDER", "ORIG", "P", "Q", "R", "S", "SELECT", "SET", "SIMPLE_FILE", "SOME", "STRING", "SYSTEMVAR", "T", "TABLE", "THEN", "TOKEN", "TOP", "T_ALL", "T_ALLCOLUMNS", "T_AND", "T_ANY", "T_BETWEEN", "T_BITWISE_AND", "T_BITWISE_NOT", "T_BITWISE_OR", "T_BITWISE_XOR", "T_BOTTOM", "T_CASE", "T_CASE_ELSE", "T_CASE_WHEN", "T_COLUMN", "T_COLUMNLIST", "T_CONVERT", "T_COUNT", "T_CREATE_VIEW", "T_DATEPART", "T_DECLARATION", "T_DECLARE", "T_DISTINCT", "T_DISTINCTCOUNT", "T_DIVIDE", "T_DROP_TABLE", "T_DROP_VIEW", "T_EQUAL", "T_EXISTS", "T_EXPRESSIONLIST", "T_FILE", "T_FILEOPTION", "T_FILESUBQUERY", "T_FROM", "T_FUNCTIONCALL", "T_GREATER", "T_GROUPBY", "T_GROUPBY_ORIG", "T_HAVING", "T_IN", "T_INTO", "T_LESS", "T_LIKE", "T_MATCH", "T_MINUS", "T_MODULO", "T_NOT", "T_NOTBETWEEN", "T_NOTEQUAL", "T_NOTGREATER", "T_NOTIN", "T_NOTLESS", "T_NOTLIKE", "T_NOTMATCH", "T_NUMBER", "T_OP_BINARY", "T_OP_UNARY", "T_OR", "T_ORDERBY", "T_ORDERBY_ASC", "T_ORDERBY_COLUMN", "T_ORDERBY_DESC", "T_ORDERBY_ORIG", "T_PLUS", "T_PRODUCT", "T_ROOT", "T_SELECT", "T_SELECT_SIMPLE", "T_SELECT_UNION", "T_SET_COMMAND", "T_SET_VARIABLE", "T_STRING", "T_SUBQUERY", "T_SYSTEMVAR", "T_TABLE_ALIAS", "T_TOP", "T_USE", "T_VARIABLE", "T_VIEW", "T_VIEW_NAME", "T_WHERE", "U", "UNION", "USE", "V", "VARIABLE", "VIEW", "W", "WHEN", "WHERE", "WS", "X", "Y", "Z", "'!<'", "'!='", "'!>'", "'%'", "'&'", "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", "';'", "'<'", "'<='", "'<>'", "'='", "'>'", "'>='", "'['", "']'", "'^'", "'|'", "'~'"
	};
	public const int EOF=-1;
	public const int T__165=165;
	public const int T__166=166;
	public const int T__167=167;
	public const int T__168=168;
	public const int T__169=169;
	public const int T__170=170;
	public const int T__171=171;
	public const int T__172=172;
	public const int T__173=173;
	public const int T__174=174;
	public const int T__175=175;
	public const int T__176=176;
	public const int T__177=177;
	public const int T__178=178;
	public const int T__179=179;
	public const int T__180=180;
	public const int T__181=181;
	public const int T__182=182;
	public const int T__183=183;
	public const int T__184=184;
	public const int T__185=185;
	public const int T__186=186;
	public const int T__187=187;
	public const int T__188=188;
	public const int T__189=189;
	public const int A=4;
	public const int ALL=5;
	public const int AND=6;
	public const int ANY=7;
	public const int AS=8;
	public const int ASC=9;
	public const int B=10;
	public const int BETWEEN=11;
	public const int BOTTOM=12;
	public const int BY=13;
	public const int C=14;
	public const int CASE=15;
	public const int CAST=16;
	public const int COMMENT_BLOCK=17;
	public const int COMMENT_LINE=18;
	public const int CONVERT=19;
	public const int COUNT=20;
	public const int CREATE=21;
	public const int D=22;
	public const int DATEADD=23;
	public const int DATEDIFF=24;
	public const int DATEPART=25;
	public const int DECLARE=26;
	public const int DESC=27;
	public const int DIGIT=28;
	public const int DISTINCT=29;
	public const int DROP=30;
	public const int E=31;
	public const int ELSE=32;
	public const int END=33;
	public const int EXISTS=34;
	public const int F=35;
	public const int FROM=36;
	public const int G=37;
	public const int GROUP=38;
	public const int H=39;
	public const int HAVING=40;
	public const int I=41;
	public const int IN=42;
	public const int INTO=43;
	public const int J=44;
	public const int K=45;
	public const int L=46;
	public const int LIKE=47;
	public const int M=48;
	public const int MATCH=49;
	public const int N=50;
	public const int NOT=51;
	public const int NUMBER=52;
	public const int O=53;
	public const int OR=54;
	public const int ORDER=55;
	public const int ORIG=56;
	public const int P=57;
	public const int Q=58;
	public const int R=59;
	public const int S=60;
	public const int SELECT=61;
	public const int SET=62;
	public const int SIMPLE_FILE=63;
	public const int SOME=64;
	public const int STRING=65;
	public const int SYSTEMVAR=66;
	public const int T=67;
	public const int TABLE=68;
	public const int THEN=69;
	public const int TOKEN=70;
	public const int TOP=71;
	public const int T_ALL=72;
	public const int T_ALLCOLUMNS=73;
	public const int T_AND=74;
	public const int T_ANY=75;
	public const int T_BETWEEN=76;
	public const int T_BITWISE_AND=77;
	public const int T_BITWISE_NOT=78;
	public const int T_BITWISE_OR=79;
	public const int T_BITWISE_XOR=80;
	public const int T_BOTTOM=81;
	public const int T_CASE=82;
	public const int T_CASE_ELSE=83;
	public const int T_CASE_WHEN=84;
	public const int T_COLUMN=85;
	public const int T_COLUMNLIST=86;
	public const int T_CONVERT=87;
	public const int T_COUNT=88;
	public const int T_CREATE_VIEW=89;
	public const int T_DATEPART=90;
	public const int T_DECLARATION=91;
	public const int T_DECLARE=92;
	public const int T_DISTINCT=93;
	public const int T_DISTINCTCOUNT=94;
	public const int T_DIVIDE=95;
	public const int T_DROP_TABLE=96;
	public const int T_DROP_VIEW=97;
	public const int T_EQUAL=98;
	public const int T_EXISTS=99;
	public const int T_EXPRESSIONLIST=100;
	public const int T_FILE=101;
	public const int T_FILEOPTION=102;
	public const int T_FILESUBQUERY=103;
	public const int T_FROM=104;
	public const int T_FUNCTIONCALL=105;
	public const int T_GREATER=106;
	public const int T_GROUPBY=107;
	public const int T_GROUPBY_ORIG=108;
	public const int T_HAVING=109;
	public const int T_IN=110;
	public const int T_INTO=111;
	public const int T_LESS=112;
	public const int T_LIKE=113;
	public const int T_MATCH=114;
	public const int T_MINUS=115;
	public const int T_MODULO=116;
	public const int T_NOT=117;
	public const int T_NOTBETWEEN=118;
	public const int T_NOTEQUAL=119;
	public const int T_NOTGREATER=120;
	public const int T_NOTIN=121;
	public const int T_NOTLESS=122;
	public const int T_NOTLIKE=123;
	public const int T_NOTMATCH=124;
	public const int T_NUMBER=125;
	public const int T_OP_BINARY=126;
	public const int T_OP_UNARY=127;
	public const int T_OR=128;
	public const int T_ORDERBY=129;
	public const int T_ORDERBY_ASC=130;
	public const int T_ORDERBY_COLUMN=131;
	public const int T_ORDERBY_DESC=132;
	public const int T_ORDERBY_ORIG=133;
	public const int T_PLUS=134;
	public const int T_PRODUCT=135;
	public const int T_ROOT=136;
	public const int T_SELECT=137;
	public const int T_SELECT_SIMPLE=138;
	public const int T_SELECT_UNION=139;
	public const int T_SET_COMMAND=140;
	public const int T_SET_VARIABLE=141;
	public const int T_STRING=142;
	public const int T_SUBQUERY=143;
	public const int T_SYSTEMVAR=144;
	public const int T_TABLE_ALIAS=145;
	public const int T_TOP=146;
	public const int T_USE=147;
	public const int T_VARIABLE=148;
	public const int T_VIEW=149;
	public const int T_VIEW_NAME=150;
	public const int T_WHERE=151;
	public const int U=152;
	public const int UNION=153;
	public const int USE=154;
	public const int V=155;
	public const int VARIABLE=156;
	public const int VIEW=157;
	public const int W=158;
	public const int WHEN=159;
	public const int WHERE=160;
	public const int WS=161;
	public const int X=162;
	public const int Y=163;
	public const int Z=164;

	#if ANTLR_DEBUG
		private static readonly bool[] decisionCanBacktrack =
			new bool[]
			{
				false, // invalid decision
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, true, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, true, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false
			};
	#else
		private static readonly bool[] decisionCanBacktrack = new bool[0];
	#endif
	public gqlParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public gqlParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}
	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return gqlParser.tokenNames; } }
	public override string GrammarFileName { get { return "C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g"; } }


	[Conditional("ANTLR_TRACE")]
	protected virtual void OnCreated() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

	#region Rules

	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_parse() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_parse() {}

	// $ANTLR start "parse"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:112:1: parse : ( WS )? ( commands ( WS )? )? EOF -> ^( T_ROOT ( commands )? ) ;
	[GrammarRule("parse")]
	private AstParserRuleReturnScope<object, IToken> parse()
	{
		EnterRule_parse();
		EnterRule("parse", 1);
		TraceIn("parse", 1);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS1 = default(IToken);
	    IToken WS3 = default(IToken);
	    IToken EOF4 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> commands2 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS1_tree = default(object);
	    object WS3_tree = default(object);
	    object EOF4_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
	    RewriteRuleSubtreeStream stream_commands=new RewriteRuleSubtreeStream(adaptor,"rule commands");
		try { DebugEnterRule(GrammarFileName, "parse");
		DebugLocation(112, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:113:2: ( ( WS )? ( commands ( WS )? )? EOF -> ^( T_ROOT ( commands )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:113:4: ( WS )? ( commands ( WS )? )? EOF
			{
			DebugLocation(113, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:113:4: ( WS )?
			int alt1=2;
			try { DebugEnterSubRule(1);
			try { DebugEnterDecision(1, decisionCanBacktrack[1]);
			int LA1_0 = input.LA(1);

			if ((LA1_0==WS))
			{
				alt1 = 1;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:113:4: WS
				{
				DebugLocation(113, 4);
				WS1=(IToken)Match(input,WS,Follow._WS_in_parse402); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS1);


				}
				break;

			}
			} finally { DebugExitSubRule(1); }

			DebugLocation(113, 8);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:113:8: ( commands ( WS )? )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, decisionCanBacktrack[3]);
			int LA3_0 = input.LA(1);

			if ((LA3_0==CREATE||LA3_0==DECLARE||LA3_0==DROP||(LA3_0>=SELECT && LA3_0<=SET)||LA3_0==USE||LA3_0==170))
			{
				alt3 = 1;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:113:9: commands ( WS )?
				{
				DebugLocation(113, 9);
				PushFollow(Follow._commands_in_parse406);
				commands2=commands();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_commands.Add(commands2.Tree);
				DebugLocation(113, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:113:18: ( WS )?
				int alt2=2;
				try { DebugEnterSubRule(2);
				try { DebugEnterDecision(2, decisionCanBacktrack[2]);
				int LA2_0 = input.LA(1);

				if ((LA2_0==WS))
				{
					alt2 = 1;
				}
				} finally { DebugExitDecision(2); }
				switch (alt2)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:113:18: WS
					{
					DebugLocation(113, 18);
					WS3=(IToken)Match(input,WS,Follow._WS_in_parse408); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS3);


					}
					break;

				}
				} finally { DebugExitSubRule(2); }


				}
				break;

			}
			} finally { DebugExitSubRule(3); }

			DebugLocation(113, 24);
			EOF4=(IToken)Match(input,EOF,Follow._EOF_in_parse413); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EOF.Add(EOF4);



			{
			// AST REWRITE
			// elements: commands
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 114:2: -> ^( T_ROOT ( commands )? )
			{
				DebugLocation(114, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:114:5: ^( T_ROOT ( commands )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(114, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_ROOT, "T_ROOT"), root_1);

				DebugLocation(114, 14);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:114:14: ( commands )?
				if (stream_commands.HasNext)
				{
					DebugLocation(114, 14);
					adaptor.AddChild(root_1, stream_commands.NextTree());

				}
				stream_commands.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parse", 1);
			LeaveRule("parse", 1);
			LeaveRule_parse();
	    }
	 	DebugLocation(115, 1);
		} finally { DebugExitRule(GrammarFileName, "parse"); }
		return retval;

	}
	// $ANTLR end "parse"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_commands() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_commands() {}

	// $ANTLR start "commands"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:117:1: commands : command ( ( WS )? ';' ( WS )? command )* ( ( WS )? ';' )? -> ( command )+ ;
	[GrammarRule("commands")]
	private AstParserRuleReturnScope<object, IToken> commands()
	{
		EnterRule_commands();
		EnterRule("commands", 2);
		TraceIn("commands", 2);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS6 = default(IToken);
	    IToken char_literal7 = default(IToken);
	    IToken WS8 = default(IToken);
	    IToken WS10 = default(IToken);
	    IToken char_literal11 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> command5 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> command9 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS6_tree = default(object);
	    object char_literal7_tree = default(object);
	    object WS8_tree = default(object);
	    object WS10_tree = default(object);
	    object char_literal11_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_178=new RewriteRuleITokenStream(adaptor,"token 178");
	    RewriteRuleSubtreeStream stream_command=new RewriteRuleSubtreeStream(adaptor,"rule command");
		try { DebugEnterRule(GrammarFileName, "commands");
		DebugLocation(117, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:118:2: ( command ( ( WS )? ';' ( WS )? command )* ( ( WS )? ';' )? -> ( command )+ )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:118:4: command ( ( WS )? ';' ( WS )? command )* ( ( WS )? ';' )?
			{
			DebugLocation(118, 4);
			PushFollow(Follow._command_in_commands436);
			command5=command();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_command.Add(command5.Tree);
			DebugLocation(118, 12);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:118:12: ( ( WS )? ';' ( WS )? command )*
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, decisionCanBacktrack[6]);
				int LA6_0 = input.LA(1);

				if ((LA6_0==WS))
				{
					int LA6_1 = input.LA(2);

					if ((LA6_1==178))
					{
						int LA6_2 = input.LA(3);

						if ((LA6_2==WS))
						{
							int LA6_4 = input.LA(4);

							if ((LA6_4==CREATE||LA6_4==DECLARE||LA6_4==DROP||(LA6_4>=SELECT && LA6_4<=SET)||LA6_4==USE||LA6_4==170))
							{
								alt6 = 1;
							}


						}
						else if ((LA6_2==CREATE||LA6_2==DECLARE||LA6_2==DROP||(LA6_2>=SELECT && LA6_2<=SET)||LA6_2==USE||LA6_2==170))
						{
							alt6 = 1;
						}


					}


				}
				else if ((LA6_0==178))
				{
					int LA6_2 = input.LA(2);

					if ((LA6_2==WS))
					{
						int LA6_4 = input.LA(3);

						if ((LA6_4==CREATE||LA6_4==DECLARE||LA6_4==DROP||(LA6_4>=SELECT && LA6_4<=SET)||LA6_4==USE||LA6_4==170))
						{
							alt6 = 1;
						}


					}
					else if ((LA6_2==CREATE||LA6_2==DECLARE||LA6_2==DROP||(LA6_2>=SELECT && LA6_2<=SET)||LA6_2==USE||LA6_2==170))
					{
						alt6 = 1;
					}


				}


				} finally { DebugExitDecision(6); }
				switch ( alt6 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:118:13: ( WS )? ';' ( WS )? command
					{
					DebugLocation(118, 13);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:118:13: ( WS )?
					int alt4=2;
					try { DebugEnterSubRule(4);
					try { DebugEnterDecision(4, decisionCanBacktrack[4]);
					int LA4_0 = input.LA(1);

					if ((LA4_0==WS))
					{
						alt4 = 1;
					}
					} finally { DebugExitDecision(4); }
					switch (alt4)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:118:13: WS
						{
						DebugLocation(118, 13);
						WS6=(IToken)Match(input,WS,Follow._WS_in_commands439); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS6);


						}
						break;

					}
					} finally { DebugExitSubRule(4); }

					DebugLocation(118, 17);
					char_literal7=(IToken)Match(input,178,Follow._178_in_commands442); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_178.Add(char_literal7);

					DebugLocation(118, 21);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:118:21: ( WS )?
					int alt5=2;
					try { DebugEnterSubRule(5);
					try { DebugEnterDecision(5, decisionCanBacktrack[5]);
					int LA5_0 = input.LA(1);

					if ((LA5_0==WS))
					{
						alt5 = 1;
					}
					} finally { DebugExitDecision(5); }
					switch (alt5)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:118:21: WS
						{
						DebugLocation(118, 21);
						WS8=(IToken)Match(input,WS,Follow._WS_in_commands444); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS8);


						}
						break;

					}
					} finally { DebugExitSubRule(5); }

					DebugLocation(118, 25);
					PushFollow(Follow._command_in_commands447);
					command9=command();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_command.Add(command9.Tree);

					}
					break;

				default:
					goto loop6;
				}
			}

			loop6:
				;

			} finally { DebugExitSubRule(6); }

			DebugLocation(118, 35);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:118:35: ( ( WS )? ';' )?
			int alt8=2;
			try { DebugEnterSubRule(8);
			try { DebugEnterDecision(8, decisionCanBacktrack[8]);
			int LA8_0 = input.LA(1);

			if ((LA8_0==WS))
			{
				int LA8_1 = input.LA(2);

				if ((LA8_1==178))
				{
					alt8 = 1;
				}
			}
			else if ((LA8_0==178))
			{
				alt8 = 1;
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:118:36: ( WS )? ';'
				{
				DebugLocation(118, 36);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:118:36: ( WS )?
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, decisionCanBacktrack[7]);
				int LA7_0 = input.LA(1);

				if ((LA7_0==WS))
				{
					alt7 = 1;
				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:118:36: WS
					{
					DebugLocation(118, 36);
					WS10=(IToken)Match(input,WS,Follow._WS_in_commands452); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS10);


					}
					break;

				}
				} finally { DebugExitSubRule(7); }

				DebugLocation(118, 40);
				char_literal11=(IToken)Match(input,178,Follow._178_in_commands455); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_178.Add(char_literal11);


				}
				break;

			}
			} finally { DebugExitSubRule(8); }



			{
			// AST REWRITE
			// elements: command
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 119:2: -> ( command )+
			{
				DebugLocation(119, 5);
				if (!(stream_command.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_command.HasNext )
				{
					DebugLocation(119, 5);
					adaptor.AddChild(root_0, stream_command.NextTree());

				}
				stream_command.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("commands", 2);
			LeaveRule("commands", 2);
			LeaveRule_commands();
	    }
	 	DebugLocation(120, 1);
		} finally { DebugExitRule(GrammarFileName, "commands"); }
		return retval;

	}
	// $ANTLR end "commands"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_command() {}

	// $ANTLR start "command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:122:1: command : ( select_command | use_command | declare_command | set_command | create_view_command | drop_view_command | drop_table_command );
	[GrammarRule("command")]
	private AstParserRuleReturnScope<object, IToken> command()
	{
		EnterRule_command();
		EnterRule("command", 3);
		TraceIn("command", 3);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> select_command12 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> use_command13 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> declare_command14 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> set_command15 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> create_view_command16 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> drop_view_command17 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> drop_table_command18 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "command");
		DebugLocation(122, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:123:2: ( select_command | use_command | declare_command | set_command | create_view_command | drop_view_command | drop_table_command )
			int alt9=7;
			try { DebugEnterDecision(9, decisionCanBacktrack[9]);
			switch (input.LA(1))
			{
			case SELECT:
			case 170:
				{
				alt9 = 1;
				}
				break;
			case USE:
				{
				alt9 = 2;
				}
				break;
			case DECLARE:
				{
				alt9 = 3;
				}
				break;
			case SET:
				{
				alt9 = 4;
				}
				break;
			case CREATE:
				{
				alt9 = 5;
				}
				break;
			case DROP:
				{
				int LA9_6 = input.LA(2);

				if ((LA9_6==WS))
				{
					int LA9_7 = input.LA(3);

					if ((LA9_7==VIEW))
					{
						alt9 = 6;
					}
					else if ((LA9_7==TABLE))
					{
						alt9 = 7;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 9, 7, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 6, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:123:4: select_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(123, 4);
				PushFollow(Follow._select_command_in_command475);
				select_command12=select_command();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, select_command12.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:124:4: use_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(124, 4);
				PushFollow(Follow._use_command_in_command480);
				use_command13=use_command();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, use_command13.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:125:4: declare_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(125, 4);
				PushFollow(Follow._declare_command_in_command485);
				declare_command14=declare_command();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, declare_command14.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:126:4: set_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(126, 4);
				PushFollow(Follow._set_command_in_command490);
				set_command15=set_command();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, set_command15.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:127:4: create_view_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(127, 4);
				PushFollow(Follow._create_view_command_in_command495);
				create_view_command16=create_view_command();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, create_view_command16.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:128:4: drop_view_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(128, 4);
				PushFollow(Follow._drop_view_command_in_command500);
				drop_view_command17=drop_view_command();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, drop_view_command17.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:129:4: drop_table_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(129, 4);
				PushFollow(Follow._drop_table_command_in_command505);
				drop_table_command18=drop_table_command();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, drop_table_command18.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("command", 3);
			LeaveRule("command", 3);
			LeaveRule_command();
	    }
	 	DebugLocation(130, 1);
		} finally { DebugExitRule(GrammarFileName, "command"); }
		return retval;

	}
	// $ANTLR end "command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_select_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_select_command() {}

	// $ANTLR start "select_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:135:1: select_command : select_command_union ( WS orderby_clause )? -> ^( T_SELECT select_command_union ( orderby_clause )? ) ;
	[GrammarRule("select_command")]
	private AstParserRuleReturnScope<object, IToken> select_command()
	{
		EnterRule_select_command();
		EnterRule("select_command", 4);
		TraceIn("select_command", 4);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS20 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> select_command_union19 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> orderby_clause21 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS20_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_select_command_union=new RewriteRuleSubtreeStream(adaptor,"rule select_command_union");
	    RewriteRuleSubtreeStream stream_orderby_clause=new RewriteRuleSubtreeStream(adaptor,"rule orderby_clause");
		try { DebugEnterRule(GrammarFileName, "select_command");
		DebugLocation(135, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:136:2: ( select_command_union ( WS orderby_clause )? -> ^( T_SELECT select_command_union ( orderby_clause )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:136:4: select_command_union ( WS orderby_clause )?
			{
			DebugLocation(136, 4);
			PushFollow(Follow._select_command_union_in_select_command519);
			select_command_union19=select_command_union();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_select_command_union.Add(select_command_union19.Tree);
			DebugLocation(136, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:136:25: ( WS orderby_clause )?
			int alt10=2;
			try { DebugEnterSubRule(10);
			try { DebugEnterDecision(10, decisionCanBacktrack[10]);
			int LA10_0 = input.LA(1);

			if ((LA10_0==WS))
			{
				int LA10_1 = input.LA(2);

				if ((LA10_1==ORDER))
				{
					alt10 = 1;
				}
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:136:26: WS orderby_clause
				{
				DebugLocation(136, 26);
				WS20=(IToken)Match(input,WS,Follow._WS_in_select_command522); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS20);

				DebugLocation(136, 29);
				PushFollow(Follow._orderby_clause_in_select_command524);
				orderby_clause21=orderby_clause();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_orderby_clause.Add(orderby_clause21.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(10); }



			{
			// AST REWRITE
			// elements: orderby_clause, select_command_union
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 137:3: -> ^( T_SELECT select_command_union ( orderby_clause )? )
			{
				DebugLocation(137, 6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:137:6: ^( T_SELECT select_command_union ( orderby_clause )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(137, 8);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SELECT, "T_SELECT"), root_1);

				DebugLocation(137, 17);
				adaptor.AddChild(root_1, stream_select_command_union.NextTree());
				DebugLocation(137, 38);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:137:38: ( orderby_clause )?
				if (stream_orderby_clause.HasNext)
				{
					DebugLocation(137, 38);
					adaptor.AddChild(root_1, stream_orderby_clause.NextTree());

				}
				stream_orderby_clause.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("select_command", 4);
			LeaveRule("select_command", 4);
			LeaveRule_select_command();
	    }
	 	DebugLocation(138, 1);
		} finally { DebugExitRule(GrammarFileName, "select_command"); }
		return retval;

	}
	// $ANTLR end "select_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_select_command_union() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_select_command_union() {}

	// $ANTLR start "select_command_union"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:143:1: select_command_union : (a= select_command_simple -> $a) ( WS UNION WS b= select_command_simple -> ^( T_SELECT_UNION $select_command_union $b) )* ;
	[GrammarRule("select_command_union")]
	private AstParserRuleReturnScope<object, IToken> select_command_union()
	{
		EnterRule_select_command_union();
		EnterRule("select_command_union", 5);
		TraceIn("select_command_union", 5);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS22 = default(IToken);
	    IToken UNION23 = default(IToken);
	    IToken WS24 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);

	    object WS22_tree = default(object);
	    object UNION23_tree = default(object);
	    object WS24_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_UNION=new RewriteRuleITokenStream(adaptor,"token UNION");
	    RewriteRuleSubtreeStream stream_select_command_simple=new RewriteRuleSubtreeStream(adaptor,"rule select_command_simple");
		try { DebugEnterRule(GrammarFileName, "select_command_union");
		DebugLocation(143, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:144:2: ( (a= select_command_simple -> $a) ( WS UNION WS b= select_command_simple -> ^( T_SELECT_UNION $select_command_union $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:144:4: (a= select_command_simple -> $a) ( WS UNION WS b= select_command_simple -> ^( T_SELECT_UNION $select_command_union $b) )*
			{
			DebugLocation(144, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:144:4: (a= select_command_simple -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:144:5: a= select_command_simple
			{
			DebugLocation(144, 6);
			PushFollow(Follow._select_command_simple_in_select_command_union556);
			a=select_command_simple();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_select_command_simple.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 144:28: -> $a
			{
				DebugLocation(144, 31);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(144, 34);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:144:34: ( WS UNION WS b= select_command_simple -> ^( T_SELECT_UNION $select_command_union $b) )*
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, decisionCanBacktrack[11]);
				int LA11_0 = input.LA(1);

				if ((LA11_0==WS))
				{
					int LA11_1 = input.LA(2);

					if ((LA11_1==UNION))
					{
						alt11 = 1;
					}


				}


				} finally { DebugExitDecision(11); }
				switch ( alt11 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:144:35: WS UNION WS b= select_command_simple
					{
					DebugLocation(144, 35);
					WS22=(IToken)Match(input,WS,Follow._WS_in_select_command_union563); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS22);

					DebugLocation(144, 38);
					UNION23=(IToken)Match(input,UNION,Follow._UNION_in_select_command_union565); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_UNION.Add(UNION23);

					DebugLocation(144, 44);
					WS24=(IToken)Match(input,WS,Follow._WS_in_select_command_union567); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS24);

					DebugLocation(144, 48);
					PushFollow(Follow._select_command_simple_in_select_command_union571);
					b=select_command_simple();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_select_command_simple.Add(b.Tree);


					{
					// AST REWRITE
					// elements: select_command_union, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 144:71: -> ^( T_SELECT_UNION $select_command_union $b)
					{
						DebugLocation(144, 74);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:144:74: ^( T_SELECT_UNION $select_command_union $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(144, 76);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SELECT_UNION, "T_SELECT_UNION"), root_1);

						DebugLocation(144, 92);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(144, 114);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop11;
				}
			}

			loop11:
				;

			} finally { DebugExitSubRule(11); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("select_command_union", 5);
			LeaveRule("select_command_union", 5);
			LeaveRule_select_command_union();
	    }
	 	DebugLocation(145, 1);
		} finally { DebugExitRule(GrammarFileName, "select_command_union"); }
		return retval;

	}
	// $ANTLR end "select_command_union"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_select_command_simple() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_select_command_simple() {}

	// $ANTLR start "select_command_simple"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:147:1: select_command_simple : ( ( '(' )=> subquery | SELECT ( WS distinct_clause )? ( WS top_clause )? ( WS bottom_clause )? WS column_list ( WS into_clause )? ( WS from_clause )? ( WS where_clause )? ( WS groupby_clause )? ( WS having_clause )? -> ^( T_SELECT_SIMPLE ( distinct_clause )? ( top_clause )? ( bottom_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( having_clause )? ) );
	[GrammarRule("select_command_simple")]
	private AstParserRuleReturnScope<object, IToken> select_command_simple()
	{
		EnterRule_select_command_simple();
		EnterRule("select_command_simple", 6);
		TraceIn("select_command_simple", 6);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken SELECT26 = default(IToken);
	    IToken WS27 = default(IToken);
	    IToken WS29 = default(IToken);
	    IToken WS31 = default(IToken);
	    IToken WS33 = default(IToken);
	    IToken WS35 = default(IToken);
	    IToken WS37 = default(IToken);
	    IToken WS39 = default(IToken);
	    IToken WS41 = default(IToken);
	    IToken WS43 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> subquery25 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> distinct_clause28 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> top_clause30 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> bottom_clause32 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> column_list34 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> into_clause36 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> from_clause38 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> where_clause40 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> groupby_clause42 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> having_clause44 = default(AstParserRuleReturnScope<object, IToken>);

	    object SELECT26_tree = default(object);
	    object WS27_tree = default(object);
	    object WS29_tree = default(object);
	    object WS31_tree = default(object);
	    object WS33_tree = default(object);
	    object WS35_tree = default(object);
	    object WS37_tree = default(object);
	    object WS39_tree = default(object);
	    object WS41_tree = default(object);
	    object WS43_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_SELECT=new RewriteRuleITokenStream(adaptor,"token SELECT");
	    RewriteRuleSubtreeStream stream_groupby_clause=new RewriteRuleSubtreeStream(adaptor,"rule groupby_clause");
	    RewriteRuleSubtreeStream stream_distinct_clause=new RewriteRuleSubtreeStream(adaptor,"rule distinct_clause");
	    RewriteRuleSubtreeStream stream_from_clause=new RewriteRuleSubtreeStream(adaptor,"rule from_clause");
	    RewriteRuleSubtreeStream stream_having_clause=new RewriteRuleSubtreeStream(adaptor,"rule having_clause");
	    RewriteRuleSubtreeStream stream_column_list=new RewriteRuleSubtreeStream(adaptor,"rule column_list");
	    RewriteRuleSubtreeStream stream_where_clause=new RewriteRuleSubtreeStream(adaptor,"rule where_clause");
	    RewriteRuleSubtreeStream stream_into_clause=new RewriteRuleSubtreeStream(adaptor,"rule into_clause");
	    RewriteRuleSubtreeStream stream_bottom_clause=new RewriteRuleSubtreeStream(adaptor,"rule bottom_clause");
	    RewriteRuleSubtreeStream stream_top_clause=new RewriteRuleSubtreeStream(adaptor,"rule top_clause");
		try { DebugEnterRule(GrammarFileName, "select_command_simple");
		DebugLocation(147, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:148:2: ( ( '(' )=> subquery | SELECT ( WS distinct_clause )? ( WS top_clause )? ( WS bottom_clause )? WS column_list ( WS into_clause )? ( WS from_clause )? ( WS where_clause )? ( WS groupby_clause )? ( WS having_clause )? -> ^( T_SELECT_SIMPLE ( distinct_clause )? ( top_clause )? ( bottom_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( having_clause )? ) )
			int alt20=2;
			try { DebugEnterDecision(20, decisionCanBacktrack[20]);
			int LA20_0 = input.LA(1);

			if ((LA20_0==170) && (EvaluatePredicate(synpred1_gql_fragment)))
			{
				alt20 = 1;
			}
			else if ((LA20_0==SELECT))
			{
				alt20 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 20, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:148:4: ( '(' )=> subquery
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(148, 13);
				PushFollow(Follow._subquery_in_select_command_simple603);
				subquery25=subquery();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, subquery25.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:149:4: SELECT ( WS distinct_clause )? ( WS top_clause )? ( WS bottom_clause )? WS column_list ( WS into_clause )? ( WS from_clause )? ( WS where_clause )? ( WS groupby_clause )? ( WS having_clause )?
				{
				DebugLocation(149, 4);
				SELECT26=(IToken)Match(input,SELECT,Follow._SELECT_in_select_command_simple608); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SELECT.Add(SELECT26);

				DebugLocation(149, 11);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:149:11: ( WS distinct_clause )?
				int alt12=2;
				try { DebugEnterSubRule(12);
				try { DebugEnterDecision(12, decisionCanBacktrack[12]);
				int LA12_0 = input.LA(1);

				if ((LA12_0==WS))
				{
					int LA12_1 = input.LA(2);

					if ((LA12_1==ALL||LA12_1==DISTINCT))
					{
						alt12 = 1;
					}
				}
				} finally { DebugExitDecision(12); }
				switch (alt12)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:149:12: WS distinct_clause
					{
					DebugLocation(149, 12);
					WS27=(IToken)Match(input,WS,Follow._WS_in_select_command_simple611); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS27);

					DebugLocation(149, 15);
					PushFollow(Follow._distinct_clause_in_select_command_simple613);
					distinct_clause28=distinct_clause();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_distinct_clause.Add(distinct_clause28.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(12); }

				DebugLocation(149, 33);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:149:33: ( WS top_clause )?
				int alt13=2;
				try { DebugEnterSubRule(13);
				try { DebugEnterDecision(13, decisionCanBacktrack[13]);
				int LA13_0 = input.LA(1);

				if ((LA13_0==WS))
				{
					int LA13_1 = input.LA(2);

					if ((LA13_1==TOP))
					{
						alt13 = 1;
					}
				}
				} finally { DebugExitDecision(13); }
				switch (alt13)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:149:34: WS top_clause
					{
					DebugLocation(149, 34);
					WS29=(IToken)Match(input,WS,Follow._WS_in_select_command_simple618); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS29);

					DebugLocation(149, 37);
					PushFollow(Follow._top_clause_in_select_command_simple620);
					top_clause30=top_clause();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_top_clause.Add(top_clause30.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(13); }

				DebugLocation(149, 50);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:149:50: ( WS bottom_clause )?
				int alt14=2;
				try { DebugEnterSubRule(14);
				try { DebugEnterDecision(14, decisionCanBacktrack[14]);
				int LA14_0 = input.LA(1);

				if ((LA14_0==WS))
				{
					int LA14_1 = input.LA(2);

					if ((LA14_1==BOTTOM))
					{
						alt14 = 1;
					}
				}
				} finally { DebugExitDecision(14); }
				switch (alt14)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:149:51: WS bottom_clause
					{
					DebugLocation(149, 51);
					WS31=(IToken)Match(input,WS,Follow._WS_in_select_command_simple625); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS31);

					DebugLocation(149, 54);
					PushFollow(Follow._bottom_clause_in_select_command_simple627);
					bottom_clause32=bottom_clause();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bottom_clause.Add(bottom_clause32.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(14); }

				DebugLocation(149, 70);
				WS33=(IToken)Match(input,WS,Follow._WS_in_select_command_simple631); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS33);

				DebugLocation(149, 73);
				PushFollow(Follow._column_list_in_select_command_simple633);
				column_list34=column_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_column_list.Add(column_list34.Tree);
				DebugLocation(149, 85);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:149:85: ( WS into_clause )?
				int alt15=2;
				try { DebugEnterSubRule(15);
				try { DebugEnterDecision(15, decisionCanBacktrack[15]);
				int LA15_0 = input.LA(1);

				if ((LA15_0==WS))
				{
					int LA15_1 = input.LA(2);

					if ((LA15_1==INTO))
					{
						alt15 = 1;
					}
				}
				} finally { DebugExitDecision(15); }
				switch (alt15)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:149:86: WS into_clause
					{
					DebugLocation(149, 86);
					WS35=(IToken)Match(input,WS,Follow._WS_in_select_command_simple636); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS35);

					DebugLocation(149, 89);
					PushFollow(Follow._into_clause_in_select_command_simple638);
					into_clause36=into_clause();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_into_clause.Add(into_clause36.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(15); }

				DebugLocation(149, 103);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:149:103: ( WS from_clause )?
				int alt16=2;
				try { DebugEnterSubRule(16);
				try { DebugEnterDecision(16, decisionCanBacktrack[16]);
				int LA16_0 = input.LA(1);

				if ((LA16_0==WS))
				{
					int LA16_1 = input.LA(2);

					if ((LA16_1==FROM))
					{
						alt16 = 1;
					}
				}
				} finally { DebugExitDecision(16); }
				switch (alt16)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:149:104: WS from_clause
					{
					DebugLocation(149, 104);
					WS37=(IToken)Match(input,WS,Follow._WS_in_select_command_simple643); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS37);

					DebugLocation(149, 107);
					PushFollow(Follow._from_clause_in_select_command_simple645);
					from_clause38=from_clause();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_from_clause.Add(from_clause38.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(16); }

				DebugLocation(149, 121);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:149:121: ( WS where_clause )?
				int alt17=2;
				try { DebugEnterSubRule(17);
				try { DebugEnterDecision(17, decisionCanBacktrack[17]);
				int LA17_0 = input.LA(1);

				if ((LA17_0==WS))
				{
					int LA17_1 = input.LA(2);

					if ((LA17_1==WHERE))
					{
						alt17 = 1;
					}
				}
				} finally { DebugExitDecision(17); }
				switch (alt17)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:149:122: WS where_clause
					{
					DebugLocation(149, 122);
					WS39=(IToken)Match(input,WS,Follow._WS_in_select_command_simple650); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS39);

					DebugLocation(149, 125);
					PushFollow(Follow._where_clause_in_select_command_simple652);
					where_clause40=where_clause();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_where_clause.Add(where_clause40.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(17); }

				DebugLocation(149, 140);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:149:140: ( WS groupby_clause )?
				int alt18=2;
				try { DebugEnterSubRule(18);
				try { DebugEnterDecision(18, decisionCanBacktrack[18]);
				int LA18_0 = input.LA(1);

				if ((LA18_0==WS))
				{
					int LA18_1 = input.LA(2);

					if ((LA18_1==GROUP))
					{
						alt18 = 1;
					}
				}
				} finally { DebugExitDecision(18); }
				switch (alt18)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:149:141: WS groupby_clause
					{
					DebugLocation(149, 141);
					WS41=(IToken)Match(input,WS,Follow._WS_in_select_command_simple657); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS41);

					DebugLocation(149, 144);
					PushFollow(Follow._groupby_clause_in_select_command_simple659);
					groupby_clause42=groupby_clause();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_groupby_clause.Add(groupby_clause42.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(18); }

				DebugLocation(149, 161);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:149:161: ( WS having_clause )?
				int alt19=2;
				try { DebugEnterSubRule(19);
				try { DebugEnterDecision(19, decisionCanBacktrack[19]);
				int LA19_0 = input.LA(1);

				if ((LA19_0==WS))
				{
					int LA19_1 = input.LA(2);

					if ((LA19_1==HAVING))
					{
						alt19 = 1;
					}
				}
				} finally { DebugExitDecision(19); }
				switch (alt19)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:149:162: WS having_clause
					{
					DebugLocation(149, 162);
					WS43=(IToken)Match(input,WS,Follow._WS_in_select_command_simple664); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS43);

					DebugLocation(149, 165);
					PushFollow(Follow._having_clause_in_select_command_simple666);
					having_clause44=having_clause();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_having_clause.Add(having_clause44.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(19); }



				{
				// AST REWRITE
				// elements: groupby_clause, top_clause, having_clause, bottom_clause, from_clause, into_clause, distinct_clause, column_list, where_clause
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 150:3: -> ^( T_SELECT_SIMPLE ( distinct_clause )? ( top_clause )? ( bottom_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( having_clause )? )
				{
					DebugLocation(150, 6);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:150:6: ^( T_SELECT_SIMPLE ( distinct_clause )? ( top_clause )? ( bottom_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( having_clause )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(150, 8);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SELECT_SIMPLE, "T_SELECT_SIMPLE"), root_1);

					DebugLocation(150, 24);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:150:24: ( distinct_clause )?
					if (stream_distinct_clause.HasNext)
					{
						DebugLocation(150, 24);
						adaptor.AddChild(root_1, stream_distinct_clause.NextTree());

					}
					stream_distinct_clause.Reset();
					DebugLocation(150, 41);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:150:41: ( top_clause )?
					if (stream_top_clause.HasNext)
					{
						DebugLocation(150, 41);
						adaptor.AddChild(root_1, stream_top_clause.NextTree());

					}
					stream_top_clause.Reset();
					DebugLocation(150, 53);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:150:53: ( bottom_clause )?
					if (stream_bottom_clause.HasNext)
					{
						DebugLocation(150, 53);
						adaptor.AddChild(root_1, stream_bottom_clause.NextTree());

					}
					stream_bottom_clause.Reset();
					DebugLocation(150, 68);
					adaptor.AddChild(root_1, stream_column_list.NextTree());
					DebugLocation(150, 80);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:150:80: ( into_clause )?
					if (stream_into_clause.HasNext)
					{
						DebugLocation(150, 80);
						adaptor.AddChild(root_1, stream_into_clause.NextTree());

					}
					stream_into_clause.Reset();
					DebugLocation(150, 93);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:150:93: ( from_clause )?
					if (stream_from_clause.HasNext)
					{
						DebugLocation(150, 93);
						adaptor.AddChild(root_1, stream_from_clause.NextTree());

					}
					stream_from_clause.Reset();
					DebugLocation(150, 106);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:150:106: ( where_clause )?
					if (stream_where_clause.HasNext)
					{
						DebugLocation(150, 106);
						adaptor.AddChild(root_1, stream_where_clause.NextTree());

					}
					stream_where_clause.Reset();
					DebugLocation(150, 120);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:150:120: ( groupby_clause )?
					if (stream_groupby_clause.HasNext)
					{
						DebugLocation(150, 120);
						adaptor.AddChild(root_1, stream_groupby_clause.NextTree());

					}
					stream_groupby_clause.Reset();
					DebugLocation(150, 136);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:150:136: ( having_clause )?
					if (stream_having_clause.HasNext)
					{
						DebugLocation(150, 136);
						adaptor.AddChild(root_1, stream_having_clause.NextTree());

					}
					stream_having_clause.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("select_command_simple", 6);
			LeaveRule("select_command_simple", 6);
			LeaveRule_select_command_simple();
	    }
	 	DebugLocation(151, 1);
		} finally { DebugExitRule(GrammarFileName, "select_command_simple"); }
		return retval;

	}
	// $ANTLR end "select_command_simple"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_distinct_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_distinct_clause() {}

	// $ANTLR start "distinct_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:153:1: distinct_clause : ( DISTINCT -> T_DISTINCT | ALL -> T_ALL );
	[GrammarRule("distinct_clause")]
	private AstParserRuleReturnScope<object, IToken> distinct_clause()
	{
		EnterRule_distinct_clause();
		EnterRule("distinct_clause", 7);
		TraceIn("distinct_clause", 7);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken DISTINCT45 = default(IToken);
	    IToken ALL46 = default(IToken);

	    object DISTINCT45_tree = default(object);
	    object ALL46_tree = default(object);
	    RewriteRuleITokenStream stream_DISTINCT=new RewriteRuleITokenStream(adaptor,"token DISTINCT");
	    RewriteRuleITokenStream stream_ALL=new RewriteRuleITokenStream(adaptor,"token ALL");

		try { DebugEnterRule(GrammarFileName, "distinct_clause");
		DebugLocation(153, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:154:2: ( DISTINCT -> T_DISTINCT | ALL -> T_ALL )
			int alt21=2;
			try { DebugEnterDecision(21, decisionCanBacktrack[21]);
			int LA21_0 = input.LA(1);

			if ((LA21_0==DISTINCT))
			{
				alt21 = 1;
			}
			else if ((LA21_0==ALL))
			{
				alt21 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 21, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:154:4: DISTINCT
				{
				DebugLocation(154, 4);
				DISTINCT45=(IToken)Match(input,DISTINCT,Follow._DISTINCT_in_distinct_clause714); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DISTINCT.Add(DISTINCT45);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 154:13: -> T_DISTINCT
				{
					DebugLocation(154, 16);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_DISTINCT, "T_DISTINCT"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:155:4: ALL
				{
				DebugLocation(155, 4);
				ALL46=(IToken)Match(input,ALL,Follow._ALL_in_distinct_clause723); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ALL.Add(ALL46);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 155:8: -> T_ALL
				{
					DebugLocation(155, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_ALL, "T_ALL"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("distinct_clause", 7);
			LeaveRule("distinct_clause", 7);
			LeaveRule_distinct_clause();
	    }
	 	DebugLocation(156, 1);
		} finally { DebugExitRule(GrammarFileName, "distinct_clause"); }
		return retval;

	}
	// $ANTLR end "distinct_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_top_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_top_clause() {}

	// $ANTLR start "top_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:158:1: top_clause : TOP WS expression_atom -> ^( T_TOP expression_atom ) ;
	[GrammarRule("top_clause")]
	private AstParserRuleReturnScope<object, IToken> top_clause()
	{
		EnterRule_top_clause();
		EnterRule("top_clause", 8);
		TraceIn("top_clause", 8);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOP47 = default(IToken);
	    IToken WS48 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression_atom49 = default(AstParserRuleReturnScope<object, IToken>);

	    object TOP47_tree = default(object);
	    object WS48_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_TOP=new RewriteRuleITokenStream(adaptor,"token TOP");
	    RewriteRuleSubtreeStream stream_expression_atom=new RewriteRuleSubtreeStream(adaptor,"rule expression_atom");
		try { DebugEnterRule(GrammarFileName, "top_clause");
		DebugLocation(158, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:159:2: ( TOP WS expression_atom -> ^( T_TOP expression_atom ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:159:4: TOP WS expression_atom
			{
			DebugLocation(159, 4);
			TOP47=(IToken)Match(input,TOP,Follow._TOP_in_top_clause739); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_TOP.Add(TOP47);

			DebugLocation(159, 8);
			WS48=(IToken)Match(input,WS,Follow._WS_in_top_clause741); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS48);

			DebugLocation(159, 11);
			PushFollow(Follow._expression_atom_in_top_clause743);
			expression_atom49=expression_atom();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression_atom.Add(expression_atom49.Tree);


			{
			// AST REWRITE
			// elements: expression_atom
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 159:27: -> ^( T_TOP expression_atom )
			{
				DebugLocation(159, 30);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:159:30: ^( T_TOP expression_atom )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(159, 32);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_TOP, "T_TOP"), root_1);

				DebugLocation(159, 38);
				adaptor.AddChild(root_1, stream_expression_atom.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("top_clause", 8);
			LeaveRule("top_clause", 8);
			LeaveRule_top_clause();
	    }
	 	DebugLocation(160, 1);
		} finally { DebugExitRule(GrammarFileName, "top_clause"); }
		return retval;

	}
	// $ANTLR end "top_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_bottom_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_bottom_clause() {}

	// $ANTLR start "bottom_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:162:1: bottom_clause : BOTTOM WS expression_atom -> ^( T_BOTTOM expression_atom ) ;
	[GrammarRule("bottom_clause")]
	private AstParserRuleReturnScope<object, IToken> bottom_clause()
	{
		EnterRule_bottom_clause();
		EnterRule("bottom_clause", 9);
		TraceIn("bottom_clause", 9);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken BOTTOM50 = default(IToken);
	    IToken WS51 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression_atom52 = default(AstParserRuleReturnScope<object, IToken>);

	    object BOTTOM50_tree = default(object);
	    object WS51_tree = default(object);
	    RewriteRuleITokenStream stream_BOTTOM=new RewriteRuleITokenStream(adaptor,"token BOTTOM");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression_atom=new RewriteRuleSubtreeStream(adaptor,"rule expression_atom");
		try { DebugEnterRule(GrammarFileName, "bottom_clause");
		DebugLocation(162, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:163:2: ( BOTTOM WS expression_atom -> ^( T_BOTTOM expression_atom ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:163:4: BOTTOM WS expression_atom
			{
			DebugLocation(163, 4);
			BOTTOM50=(IToken)Match(input,BOTTOM,Follow._BOTTOM_in_bottom_clause764); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_BOTTOM.Add(BOTTOM50);

			DebugLocation(163, 11);
			WS51=(IToken)Match(input,WS,Follow._WS_in_bottom_clause766); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS51);

			DebugLocation(163, 14);
			PushFollow(Follow._expression_atom_in_bottom_clause768);
			expression_atom52=expression_atom();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression_atom.Add(expression_atom52.Tree);


			{
			// AST REWRITE
			// elements: expression_atom
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 163:30: -> ^( T_BOTTOM expression_atom )
			{
				DebugLocation(163, 33);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:163:33: ^( T_BOTTOM expression_atom )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(163, 35);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_BOTTOM, "T_BOTTOM"), root_1);

				DebugLocation(163, 44);
				adaptor.AddChild(root_1, stream_expression_atom.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bottom_clause", 9);
			LeaveRule("bottom_clause", 9);
			LeaveRule_bottom_clause();
	    }
	 	DebugLocation(164, 1);
		} finally { DebugExitRule(GrammarFileName, "bottom_clause"); }
		return retval;

	}
	// $ANTLR end "bottom_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_column_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_column_list() {}

	// $ANTLR start "column_list"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:166:1: column_list : column ( ( WS )? ',' ( WS )? column )* -> ^( T_COLUMNLIST ( column )* ) ;
	[GrammarRule("column_list")]
	private AstParserRuleReturnScope<object, IToken> column_list()
	{
		EnterRule_column_list();
		EnterRule("column_list", 10);
		TraceIn("column_list", 10);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS54 = default(IToken);
	    IToken char_literal55 = default(IToken);
	    IToken WS56 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> column53 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> column57 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS54_tree = default(object);
	    object char_literal55_tree = default(object);
	    object WS56_tree = default(object);
	    RewriteRuleITokenStream stream_174=new RewriteRuleITokenStream(adaptor,"token 174");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_column=new RewriteRuleSubtreeStream(adaptor,"rule column");
		try { DebugEnterRule(GrammarFileName, "column_list");
		DebugLocation(166, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:167:2: ( column ( ( WS )? ',' ( WS )? column )* -> ^( T_COLUMNLIST ( column )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:167:4: column ( ( WS )? ',' ( WS )? column )*
			{
			DebugLocation(167, 4);
			PushFollow(Follow._column_in_column_list789);
			column53=column();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_column.Add(column53.Tree);
			DebugLocation(167, 11);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:167:11: ( ( WS )? ',' ( WS )? column )*
			try { DebugEnterSubRule(24);
			while (true)
			{
				int alt24=2;
				try { DebugEnterDecision(24, decisionCanBacktrack[24]);
				int LA24_0 = input.LA(1);

				if ((LA24_0==WS))
				{
					int LA24_1 = input.LA(2);

					if ((LA24_1==174))
					{
						alt24 = 1;
					}


				}
				else if ((LA24_0==174))
				{
					alt24 = 1;
				}


				} finally { DebugExitDecision(24); }
				switch ( alt24 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:167:12: ( WS )? ',' ( WS )? column
					{
					DebugLocation(167, 12);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:167:12: ( WS )?
					int alt22=2;
					try { DebugEnterSubRule(22);
					try { DebugEnterDecision(22, decisionCanBacktrack[22]);
					int LA22_0 = input.LA(1);

					if ((LA22_0==WS))
					{
						alt22 = 1;
					}
					} finally { DebugExitDecision(22); }
					switch (alt22)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:167:12: WS
						{
						DebugLocation(167, 12);
						WS54=(IToken)Match(input,WS,Follow._WS_in_column_list792); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS54);


						}
						break;

					}
					} finally { DebugExitSubRule(22); }

					DebugLocation(167, 16);
					char_literal55=(IToken)Match(input,174,Follow._174_in_column_list795); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_174.Add(char_literal55);

					DebugLocation(167, 20);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:167:20: ( WS )?
					int alt23=2;
					try { DebugEnterSubRule(23);
					try { DebugEnterDecision(23, decisionCanBacktrack[23]);
					int LA23_0 = input.LA(1);

					if ((LA23_0==WS))
					{
						alt23 = 1;
					}
					} finally { DebugExitDecision(23); }
					switch (alt23)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:167:20: WS
						{
						DebugLocation(167, 20);
						WS56=(IToken)Match(input,WS,Follow._WS_in_column_list797); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS56);


						}
						break;

					}
					} finally { DebugExitSubRule(23); }

					DebugLocation(167, 24);
					PushFollow(Follow._column_in_column_list800);
					column57=column();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_column.Add(column57.Tree);

					}
					break;

				default:
					goto loop24;
				}
			}

			loop24:
				;

			} finally { DebugExitSubRule(24); }



			{
			// AST REWRITE
			// elements: column
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 168:2: -> ^( T_COLUMNLIST ( column )* )
			{
				DebugLocation(168, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:168:5: ^( T_COLUMNLIST ( column )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(168, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_COLUMNLIST, "T_COLUMNLIST"), root_1);

				DebugLocation(168, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:168:20: ( column )*
				while ( stream_column.HasNext )
				{
					DebugLocation(168, 20);
					adaptor.AddChild(root_1, stream_column.NextTree());

				}
				stream_column.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("column_list", 10);
			LeaveRule("column_list", 10);
			LeaveRule_column_list();
	    }
	 	DebugLocation(169, 1);
		} finally { DebugExitRule(GrammarFileName, "column_list"); }
		return retval;

	}
	// $ANTLR end "column_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_column() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_column() {}

	// $ANTLR start "column"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:171:1: column : ( all_columns | expression ( WS SIMPLE_FILE )? -> ^( T_COLUMN expression ( SIMPLE_FILE )? ) );
	[GrammarRule("column")]
	private AstParserRuleReturnScope<object, IToken> column()
	{
		EnterRule_column();
		EnterRule("column", 11);
		TraceIn("column", 11);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS60 = default(IToken);
	    IToken SIMPLE_FILE61 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> all_columns58 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression59 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS60_tree = default(object);
	    object SIMPLE_FILE61_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_SIMPLE_FILE=new RewriteRuleITokenStream(adaptor,"token SIMPLE_FILE");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "column");
		DebugLocation(171, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:172:2: ( all_columns | expression ( WS SIMPLE_FILE )? -> ^( T_COLUMN expression ( SIMPLE_FILE )? ) )
			int alt26=2;
			try { DebugEnterDecision(26, decisionCanBacktrack[26]);
			switch (input.LA(1))
			{
			case SIMPLE_FILE:
				{
				switch (input.LA(2))
				{
				case WS:
					{
					int LA26_4 = input.LA(3);

					if ((LA26_4==EOF||LA26_4==AND||LA26_4==BETWEEN||LA26_4==FROM||LA26_4==GROUP||LA26_4==HAVING||(LA26_4>=IN && LA26_4<=INTO)||LA26_4==LIKE||LA26_4==MATCH||LA26_4==NOT||(LA26_4>=OR && LA26_4<=ORDER)||LA26_4==SIMPLE_FILE||LA26_4==UNION||LA26_4==WHERE||(LA26_4>=165 && LA26_4<=169)||(LA26_4>=171 && LA26_4<=175)||(LA26_4>=177 && LA26_4<=184)||(LA26_4>=187 && LA26_4<=188)))
					{
						alt26 = 2;
					}
					else if ((LA26_4==176))
					{
						switch (input.LA(4))
						{
						case WS:
							{
							int LA26_6 = input.LA(5);

							if ((LA26_6==172))
							{
								alt26 = 1;
							}
							else if ((LA26_6==SIMPLE_FILE))
							{
								alt26 = 2;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 26, 6, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case 172:
							{
							alt26 = 1;
							}
							break;
						case SIMPLE_FILE:
							{
							alt26 = 2;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 26, 5, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 26, 4, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 176:
					{
					switch (input.LA(3))
					{
					case WS:
						{
						int LA26_6 = input.LA(4);

						if ((LA26_6==172))
						{
							alt26 = 1;
						}
						else if ((LA26_6==SIMPLE_FILE))
						{
							alt26 = 2;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 26, 6, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case 172:
						{
						alt26 = 1;
						}
						break;
					case SIMPLE_FILE:
						{
						alt26 = 2;
						}
						break;
					default:
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 26, 5, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					}
					break;
				case EOF:
				case LIKE:
				case MATCH:
				case NOT:
				case 165:
				case 166:
				case 167:
				case 168:
				case 169:
				case 171:
				case 172:
				case 173:
				case 174:
				case 175:
				case 177:
				case 178:
				case 179:
				case 180:
				case 181:
				case 182:
				case 183:
				case 184:
				case 187:
				case 188:
					{
					alt26 = 2;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 26, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				}
				break;
			case 172:
				{
				alt26 = 1;
				}
				break;
			case CASE:
			case CAST:
			case CONVERT:
			case COUNT:
			case DATEADD:
			case DATEDIFF:
			case DATEPART:
			case EXISTS:
			case NOT:
			case NUMBER:
			case STRING:
			case SYSTEMVAR:
			case TOKEN:
			case VARIABLE:
			case 170:
			case 173:
			case 175:
			case 189:
				{
				alt26 = 2;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 26, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:172:4: all_columns
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(172, 4);
				PushFollow(Follow._all_columns_in_column824);
				all_columns58=all_columns();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, all_columns58.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:173:4: expression ( WS SIMPLE_FILE )?
				{
				DebugLocation(173, 4);
				PushFollow(Follow._expression_in_column829);
				expression59=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression59.Tree);
				DebugLocation(173, 15);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:173:15: ( WS SIMPLE_FILE )?
				int alt25=2;
				try { DebugEnterSubRule(25);
				try { DebugEnterDecision(25, decisionCanBacktrack[25]);
				int LA25_0 = input.LA(1);

				if ((LA25_0==WS))
				{
					int LA25_1 = input.LA(2);

					if ((LA25_1==SIMPLE_FILE))
					{
						alt25 = 1;
					}
				}
				} finally { DebugExitDecision(25); }
				switch (alt25)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:173:16: WS SIMPLE_FILE
					{
					DebugLocation(173, 16);
					WS60=(IToken)Match(input,WS,Follow._WS_in_column832); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS60);

					DebugLocation(173, 19);
					SIMPLE_FILE61=(IToken)Match(input,SIMPLE_FILE,Follow._SIMPLE_FILE_in_column834); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SIMPLE_FILE.Add(SIMPLE_FILE61);


					}
					break;

				}
				} finally { DebugExitSubRule(25); }



				{
				// AST REWRITE
				// elements: SIMPLE_FILE, expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 173:33: -> ^( T_COLUMN expression ( SIMPLE_FILE )? )
				{
					DebugLocation(173, 36);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:173:36: ^( T_COLUMN expression ( SIMPLE_FILE )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(173, 38);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_COLUMN, "T_COLUMN"), root_1);

					DebugLocation(173, 47);
					adaptor.AddChild(root_1, stream_expression.NextTree());
					DebugLocation(173, 58);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:173:58: ( SIMPLE_FILE )?
					if (stream_SIMPLE_FILE.HasNext)
					{
						DebugLocation(173, 58);
						adaptor.AddChild(root_1, stream_SIMPLE_FILE.NextNode());

					}
					stream_SIMPLE_FILE.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("column", 11);
			LeaveRule("column", 11);
			LeaveRule_column();
	    }
	 	DebugLocation(174, 1);
		} finally { DebugExitRule(GrammarFileName, "column"); }
		return retval;

	}
	// $ANTLR end "column"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_all_columns() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_all_columns() {}

	// $ANTLR start "all_columns"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:176:1: all_columns : ( table_alias ( WS )? '.' ( WS )? )? '*' -> ^( T_ALLCOLUMNS ( table_alias )? ) ;
	[GrammarRule("all_columns")]
	private AstParserRuleReturnScope<object, IToken> all_columns()
	{
		EnterRule_all_columns();
		EnterRule("all_columns", 12);
		TraceIn("all_columns", 12);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS63 = default(IToken);
	    IToken char_literal64 = default(IToken);
	    IToken WS65 = default(IToken);
	    IToken char_literal66 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> table_alias62 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS63_tree = default(object);
	    object char_literal64_tree = default(object);
	    object WS65_tree = default(object);
	    object char_literal66_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_172=new RewriteRuleITokenStream(adaptor,"token 172");
	    RewriteRuleITokenStream stream_176=new RewriteRuleITokenStream(adaptor,"token 176");
	    RewriteRuleSubtreeStream stream_table_alias=new RewriteRuleSubtreeStream(adaptor,"rule table_alias");
		try { DebugEnterRule(GrammarFileName, "all_columns");
		DebugLocation(176, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:177:2: ( ( table_alias ( WS )? '.' ( WS )? )? '*' -> ^( T_ALLCOLUMNS ( table_alias )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:177:4: ( table_alias ( WS )? '.' ( WS )? )? '*'
			{
			DebugLocation(177, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:177:4: ( table_alias ( WS )? '.' ( WS )? )?
			int alt29=2;
			try { DebugEnterSubRule(29);
			try { DebugEnterDecision(29, decisionCanBacktrack[29]);
			int LA29_0 = input.LA(1);

			if ((LA29_0==SIMPLE_FILE))
			{
				alt29 = 1;
			}
			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:177:5: table_alias ( WS )? '.' ( WS )?
				{
				DebugLocation(177, 5);
				PushFollow(Follow._table_alias_in_all_columns859);
				table_alias62=table_alias();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_table_alias.Add(table_alias62.Tree);
				DebugLocation(177, 17);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:177:17: ( WS )?
				int alt27=2;
				try { DebugEnterSubRule(27);
				try { DebugEnterDecision(27, decisionCanBacktrack[27]);
				int LA27_0 = input.LA(1);

				if ((LA27_0==WS))
				{
					alt27 = 1;
				}
				} finally { DebugExitDecision(27); }
				switch (alt27)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:177:17: WS
					{
					DebugLocation(177, 17);
					WS63=(IToken)Match(input,WS,Follow._WS_in_all_columns861); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS63);


					}
					break;

				}
				} finally { DebugExitSubRule(27); }

				DebugLocation(177, 21);
				char_literal64=(IToken)Match(input,176,Follow._176_in_all_columns864); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_176.Add(char_literal64);

				DebugLocation(177, 25);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:177:25: ( WS )?
				int alt28=2;
				try { DebugEnterSubRule(28);
				try { DebugEnterDecision(28, decisionCanBacktrack[28]);
				int LA28_0 = input.LA(1);

				if ((LA28_0==WS))
				{
					alt28 = 1;
				}
				} finally { DebugExitDecision(28); }
				switch (alt28)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:177:25: WS
					{
					DebugLocation(177, 25);
					WS65=(IToken)Match(input,WS,Follow._WS_in_all_columns866); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS65);


					}
					break;

				}
				} finally { DebugExitSubRule(28); }


				}
				break;

			}
			} finally { DebugExitSubRule(29); }

			DebugLocation(177, 31);
			char_literal66=(IToken)Match(input,172,Follow._172_in_all_columns871); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_172.Add(char_literal66);



			{
			// AST REWRITE
			// elements: table_alias
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 177:35: -> ^( T_ALLCOLUMNS ( table_alias )? )
			{
				DebugLocation(177, 38);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:177:38: ^( T_ALLCOLUMNS ( table_alias )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(177, 40);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_ALLCOLUMNS, "T_ALLCOLUMNS"), root_1);

				DebugLocation(177, 53);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:177:53: ( table_alias )?
				if (stream_table_alias.HasNext)
				{
					DebugLocation(177, 53);
					adaptor.AddChild(root_1, stream_table_alias.NextTree());

				}
				stream_table_alias.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("all_columns", 12);
			LeaveRule("all_columns", 12);
			LeaveRule_all_columns();
	    }
	 	DebugLocation(178, 1);
		} finally { DebugExitRule(GrammarFileName, "all_columns"); }
		return retval;

	}
	// $ANTLR end "all_columns"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_into_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_into_clause() {}

	// $ANTLR start "into_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:180:1: into_clause : INTO WS file -> ^( T_INTO file ) ;
	[GrammarRule("into_clause")]
	private AstParserRuleReturnScope<object, IToken> into_clause()
	{
		EnterRule_into_clause();
		EnterRule("into_clause", 13);
		TraceIn("into_clause", 13);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken INTO67 = default(IToken);
	    IToken WS68 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file69 = default(AstParserRuleReturnScope<object, IToken>);

	    object INTO67_tree = default(object);
	    object WS68_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_INTO=new RewriteRuleITokenStream(adaptor,"token INTO");
	    RewriteRuleSubtreeStream stream_file=new RewriteRuleSubtreeStream(adaptor,"rule file");
		try { DebugEnterRule(GrammarFileName, "into_clause");
		DebugLocation(180, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:181:2: ( INTO WS file -> ^( T_INTO file ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:181:4: INTO WS file
			{
			DebugLocation(181, 4);
			INTO67=(IToken)Match(input,INTO,Follow._INTO_in_into_clause891); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INTO.Add(INTO67);

			DebugLocation(181, 9);
			WS68=(IToken)Match(input,WS,Follow._WS_in_into_clause893); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS68);

			DebugLocation(181, 12);
			PushFollow(Follow._file_in_into_clause895);
			file69=file();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_file.Add(file69.Tree);


			{
			// AST REWRITE
			// elements: file
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 181:17: -> ^( T_INTO file )
			{
				DebugLocation(181, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:181:20: ^( T_INTO file )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(181, 22);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_INTO, "T_INTO"), root_1);

				DebugLocation(181, 29);
				adaptor.AddChild(root_1, stream_file.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("into_clause", 13);
			LeaveRule("into_clause", 13);
			LeaveRule_into_clause();
	    }
	 	DebugLocation(182, 1);
		} finally { DebugExitRule(GrammarFileName, "into_clause"); }
		return retval;

	}
	// $ANTLR end "into_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_from_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_from_clause() {}

	// $ANTLR start "from_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:184:1: from_clause : FROM WS from_clause_item ( ( WS )? ',' ( WS )? from_clause_item )* ( WS table_alias )? -> ^( T_FROM ( table_alias )? ( from_clause_item )* ) ;
	[GrammarRule("from_clause")]
	private AstParserRuleReturnScope<object, IToken> from_clause()
	{
		EnterRule_from_clause();
		EnterRule("from_clause", 14);
		TraceIn("from_clause", 14);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken FROM70 = default(IToken);
	    IToken WS71 = default(IToken);
	    IToken WS73 = default(IToken);
	    IToken char_literal74 = default(IToken);
	    IToken WS75 = default(IToken);
	    IToken WS77 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> from_clause_item72 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> from_clause_item76 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> table_alias78 = default(AstParserRuleReturnScope<object, IToken>);

	    object FROM70_tree = default(object);
	    object WS71_tree = default(object);
	    object WS73_tree = default(object);
	    object char_literal74_tree = default(object);
	    object WS75_tree = default(object);
	    object WS77_tree = default(object);
	    RewriteRuleITokenStream stream_174=new RewriteRuleITokenStream(adaptor,"token 174");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_FROM=new RewriteRuleITokenStream(adaptor,"token FROM");
	    RewriteRuleSubtreeStream stream_from_clause_item=new RewriteRuleSubtreeStream(adaptor,"rule from_clause_item");
	    RewriteRuleSubtreeStream stream_table_alias=new RewriteRuleSubtreeStream(adaptor,"rule table_alias");
		try { DebugEnterRule(GrammarFileName, "from_clause");
		DebugLocation(184, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:185:2: ( FROM WS from_clause_item ( ( WS )? ',' ( WS )? from_clause_item )* ( WS table_alias )? -> ^( T_FROM ( table_alias )? ( from_clause_item )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:185:4: FROM WS from_clause_item ( ( WS )? ',' ( WS )? from_clause_item )* ( WS table_alias )?
			{
			DebugLocation(185, 4);
			FROM70=(IToken)Match(input,FROM,Follow._FROM_in_from_clause915); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_FROM.Add(FROM70);

			DebugLocation(185, 9);
			WS71=(IToken)Match(input,WS,Follow._WS_in_from_clause917); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS71);

			DebugLocation(185, 12);
			PushFollow(Follow._from_clause_item_in_from_clause919);
			from_clause_item72=from_clause_item();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_from_clause_item.Add(from_clause_item72.Tree);
			DebugLocation(185, 29);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:185:29: ( ( WS )? ',' ( WS )? from_clause_item )*
			try { DebugEnterSubRule(32);
			while (true)
			{
				int alt32=2;
				try { DebugEnterDecision(32, decisionCanBacktrack[32]);
				int LA32_0 = input.LA(1);

				if ((LA32_0==WS))
				{
					int LA32_1 = input.LA(2);

					if ((LA32_1==174))
					{
						alt32 = 1;
					}


				}
				else if ((LA32_0==174))
				{
					alt32 = 1;
				}


				} finally { DebugExitDecision(32); }
				switch ( alt32 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:185:30: ( WS )? ',' ( WS )? from_clause_item
					{
					DebugLocation(185, 30);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:185:30: ( WS )?
					int alt30=2;
					try { DebugEnterSubRule(30);
					try { DebugEnterDecision(30, decisionCanBacktrack[30]);
					int LA30_0 = input.LA(1);

					if ((LA30_0==WS))
					{
						alt30 = 1;
					}
					} finally { DebugExitDecision(30); }
					switch (alt30)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:185:30: WS
						{
						DebugLocation(185, 30);
						WS73=(IToken)Match(input,WS,Follow._WS_in_from_clause922); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS73);


						}
						break;

					}
					} finally { DebugExitSubRule(30); }

					DebugLocation(185, 34);
					char_literal74=(IToken)Match(input,174,Follow._174_in_from_clause925); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_174.Add(char_literal74);

					DebugLocation(185, 38);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:185:38: ( WS )?
					int alt31=2;
					try { DebugEnterSubRule(31);
					try { DebugEnterDecision(31, decisionCanBacktrack[31]);
					int LA31_0 = input.LA(1);

					if ((LA31_0==WS))
					{
						alt31 = 1;
					}
					} finally { DebugExitDecision(31); }
					switch (alt31)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:185:38: WS
						{
						DebugLocation(185, 38);
						WS75=(IToken)Match(input,WS,Follow._WS_in_from_clause927); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS75);


						}
						break;

					}
					} finally { DebugExitSubRule(31); }

					DebugLocation(185, 42);
					PushFollow(Follow._from_clause_item_in_from_clause930);
					from_clause_item76=from_clause_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_from_clause_item.Add(from_clause_item76.Tree);

					}
					break;

				default:
					goto loop32;
				}
			}

			loop32:
				;

			} finally { DebugExitSubRule(32); }

			DebugLocation(185, 61);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:185:61: ( WS table_alias )?
			int alt33=2;
			try { DebugEnterSubRule(33);
			try { DebugEnterDecision(33, decisionCanBacktrack[33]);
			int LA33_0 = input.LA(1);

			if ((LA33_0==WS))
			{
				int LA33_1 = input.LA(2);

				if ((LA33_1==SIMPLE_FILE))
				{
					alt33 = 1;
				}
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:185:62: WS table_alias
				{
				DebugLocation(185, 62);
				WS77=(IToken)Match(input,WS,Follow._WS_in_from_clause935); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS77);

				DebugLocation(185, 65);
				PushFollow(Follow._table_alias_in_from_clause937);
				table_alias78=table_alias();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_table_alias.Add(table_alias78.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(33); }



			{
			// AST REWRITE
			// elements: table_alias, from_clause_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 185:79: -> ^( T_FROM ( table_alias )? ( from_clause_item )* )
			{
				DebugLocation(185, 82);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:185:82: ^( T_FROM ( table_alias )? ( from_clause_item )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(185, 84);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FROM, "T_FROM"), root_1);

				DebugLocation(185, 91);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:185:91: ( table_alias )?
				if (stream_table_alias.HasNext)
				{
					DebugLocation(185, 91);
					adaptor.AddChild(root_1, stream_table_alias.NextTree());

				}
				stream_table_alias.Reset();
				DebugLocation(185, 104);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:185:104: ( from_clause_item )*
				while ( stream_from_clause_item.HasNext )
				{
					DebugLocation(185, 104);
					adaptor.AddChild(root_1, stream_from_clause_item.NextTree());

				}
				stream_from_clause_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("from_clause", 14);
			LeaveRule("from_clause", 14);
			LeaveRule_from_clause();
	    }
	 	DebugLocation(187, 1);
		} finally { DebugExitRule(GrammarFileName, "from_clause"); }
		return retval;

	}
	// $ANTLR end "from_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_from_clause_item() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_from_clause_item() {}

	// $ANTLR start "from_clause_item"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:189:1: from_clause_item : ( STRING -> ^( T_FILE STRING ) | file | subquery | view_name ( ( WS )? '(' ( expression_list )? ')' )? -> ^( T_VIEW view_name ( expression_list )? ) );
	[GrammarRule("from_clause_item")]
	private AstParserRuleReturnScope<object, IToken> from_clause_item()
	{
		EnterRule_from_clause_item();
		EnterRule("from_clause_item", 15);
		TraceIn("from_clause_item", 15);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken STRING79 = default(IToken);
	    IToken WS83 = default(IToken);
	    IToken char_literal84 = default(IToken);
	    IToken char_literal86 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file80 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> subquery81 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> view_name82 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list85 = default(AstParserRuleReturnScope<object, IToken>);

	    object STRING79_tree = default(object);
	    object WS83_tree = default(object);
	    object char_literal84_tree = default(object);
	    object char_literal86_tree = default(object);
	    RewriteRuleITokenStream stream_170=new RewriteRuleITokenStream(adaptor,"token 170");
	    RewriteRuleITokenStream stream_171=new RewriteRuleITokenStream(adaptor,"token 171");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
	    RewriteRuleSubtreeStream stream_view_name=new RewriteRuleSubtreeStream(adaptor,"rule view_name");
	    RewriteRuleSubtreeStream stream_expression_list=new RewriteRuleSubtreeStream(adaptor,"rule expression_list");
		try { DebugEnterRule(GrammarFileName, "from_clause_item");
		DebugLocation(189, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:190:2: ( STRING -> ^( T_FILE STRING ) | file | subquery | view_name ( ( WS )? '(' ( expression_list )? ')' )? -> ^( T_VIEW view_name ( expression_list )? ) )
			int alt37=4;
			try { DebugEnterDecision(37, decisionCanBacktrack[37]);
			switch (input.LA(1))
			{
			case STRING:
				{
				alt37 = 1;
				}
				break;
			case SIMPLE_FILE:
			case 185:
				{
				alt37 = 2;
				}
				break;
			case 170:
				{
				alt37 = 3;
				}
				break;
			case TOKEN:
				{
				alt37 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 37, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:190:4: STRING
				{
				DebugLocation(190, 4);
				STRING79=(IToken)Match(input,STRING,Follow._STRING_in_from_clause_item964); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_STRING.Add(STRING79);



				{
				// AST REWRITE
				// elements: STRING
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 190:11: -> ^( T_FILE STRING )
				{
					DebugLocation(190, 14);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:190:14: ^( T_FILE STRING )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(190, 16);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILE, "T_FILE"), root_1);

					DebugLocation(190, 23);
					adaptor.AddChild(root_1, stream_STRING.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:191:4: file
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(191, 4);
				PushFollow(Follow._file_in_from_clause_item977);
				file80=file();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, file80.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:192:4: subquery
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(192, 4);
				PushFollow(Follow._subquery_in_from_clause_item982);
				subquery81=subquery();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, subquery81.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:193:4: view_name ( ( WS )? '(' ( expression_list )? ')' )?
				{
				DebugLocation(193, 4);
				PushFollow(Follow._view_name_in_from_clause_item987);
				view_name82=view_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_view_name.Add(view_name82.Tree);
				DebugLocation(193, 14);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:193:14: ( ( WS )? '(' ( expression_list )? ')' )?
				int alt36=2;
				try { DebugEnterSubRule(36);
				try { DebugEnterDecision(36, decisionCanBacktrack[36]);
				int LA36_0 = input.LA(1);

				if ((LA36_0==WS))
				{
					int LA36_1 = input.LA(2);

					if ((LA36_1==170))
					{
						alt36 = 1;
					}
				}
				else if ((LA36_0==170))
				{
					alt36 = 1;
				}
				} finally { DebugExitDecision(36); }
				switch (alt36)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:193:15: ( WS )? '(' ( expression_list )? ')'
					{
					DebugLocation(193, 15);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:193:15: ( WS )?
					int alt34=2;
					try { DebugEnterSubRule(34);
					try { DebugEnterDecision(34, decisionCanBacktrack[34]);
					int LA34_0 = input.LA(1);

					if ((LA34_0==WS))
					{
						alt34 = 1;
					}
					} finally { DebugExitDecision(34); }
					switch (alt34)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:193:15: WS
						{
						DebugLocation(193, 15);
						WS83=(IToken)Match(input,WS,Follow._WS_in_from_clause_item990); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS83);


						}
						break;

					}
					} finally { DebugExitSubRule(34); }

					DebugLocation(193, 19);
					char_literal84=(IToken)Match(input,170,Follow._170_in_from_clause_item993); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_170.Add(char_literal84);

					DebugLocation(193, 23);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:193:23: ( expression_list )?
					int alt35=2;
					try { DebugEnterSubRule(35);
					try { DebugEnterDecision(35, decisionCanBacktrack[35]);
					int LA35_0 = input.LA(1);

					if (((LA35_0>=CASE && LA35_0<=CAST)||(LA35_0>=CONVERT && LA35_0<=COUNT)||(LA35_0>=DATEADD && LA35_0<=DATEPART)||LA35_0==EXISTS||(LA35_0>=NOT && LA35_0<=NUMBER)||LA35_0==SIMPLE_FILE||(LA35_0>=STRING && LA35_0<=SYSTEMVAR)||LA35_0==TOKEN||LA35_0==VARIABLE||LA35_0==170||LA35_0==173||LA35_0==175||LA35_0==189))
					{
						alt35 = 1;
					}
					} finally { DebugExitDecision(35); }
					switch (alt35)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:193:23: expression_list
						{
						DebugLocation(193, 23);
						PushFollow(Follow._expression_list_in_from_clause_item995);
						expression_list85=expression_list();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expression_list.Add(expression_list85.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(35); }

					DebugLocation(193, 40);
					char_literal86=(IToken)Match(input,171,Follow._171_in_from_clause_item998); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_171.Add(char_literal86);


					}
					break;

				}
				} finally { DebugExitSubRule(36); }



				{
				// AST REWRITE
				// elements: expression_list, view_name
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 193:46: -> ^( T_VIEW view_name ( expression_list )? )
				{
					DebugLocation(193, 49);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:193:49: ^( T_VIEW view_name ( expression_list )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(193, 51);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_VIEW, "T_VIEW"), root_1);

					DebugLocation(193, 58);
					adaptor.AddChild(root_1, stream_view_name.NextTree());
					DebugLocation(193, 68);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:193:68: ( expression_list )?
					if (stream_expression_list.HasNext)
					{
						DebugLocation(193, 68);
						adaptor.AddChild(root_1, stream_expression_list.NextTree());

					}
					stream_expression_list.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("from_clause_item", 15);
			LeaveRule("from_clause_item", 15);
			LeaveRule_from_clause_item();
	    }
	 	DebugLocation(194, 1);
		} finally { DebugExitRule(GrammarFileName, "from_clause_item"); }
		return retval;

	}
	// $ANTLR end "from_clause_item"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_subquery() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_subquery() {}

	// $ANTLR start "subquery"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:196:1: subquery : '(' ( WS )? select_command ( WS )? ')' -> ^( T_SUBQUERY select_command ) ;
	[GrammarRule("subquery")]
	private AstParserRuleReturnScope<object, IToken> subquery()
	{
		EnterRule_subquery();
		EnterRule("subquery", 16);
		TraceIn("subquery", 16);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal87 = default(IToken);
	    IToken WS88 = default(IToken);
	    IToken WS90 = default(IToken);
	    IToken char_literal91 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> select_command89 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal87_tree = default(object);
	    object WS88_tree = default(object);
	    object WS90_tree = default(object);
	    object char_literal91_tree = default(object);
	    RewriteRuleITokenStream stream_170=new RewriteRuleITokenStream(adaptor,"token 170");
	    RewriteRuleITokenStream stream_171=new RewriteRuleITokenStream(adaptor,"token 171");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_select_command=new RewriteRuleSubtreeStream(adaptor,"rule select_command");
		try { DebugEnterRule(GrammarFileName, "subquery");
		DebugLocation(196, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:197:2: ( '(' ( WS )? select_command ( WS )? ')' -> ^( T_SUBQUERY select_command ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:197:4: '(' ( WS )? select_command ( WS )? ')'
			{
			DebugLocation(197, 4);
			char_literal87=(IToken)Match(input,170,Follow._170_in_subquery1023); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_170.Add(char_literal87);

			DebugLocation(197, 8);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:197:8: ( WS )?
			int alt38=2;
			try { DebugEnterSubRule(38);
			try { DebugEnterDecision(38, decisionCanBacktrack[38]);
			int LA38_0 = input.LA(1);

			if ((LA38_0==WS))
			{
				alt38 = 1;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:197:8: WS
				{
				DebugLocation(197, 8);
				WS88=(IToken)Match(input,WS,Follow._WS_in_subquery1025); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS88);


				}
				break;

			}
			} finally { DebugExitSubRule(38); }

			DebugLocation(197, 12);
			PushFollow(Follow._select_command_in_subquery1028);
			select_command89=select_command();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_select_command.Add(select_command89.Tree);
			DebugLocation(197, 27);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:197:27: ( WS )?
			int alt39=2;
			try { DebugEnterSubRule(39);
			try { DebugEnterDecision(39, decisionCanBacktrack[39]);
			int LA39_0 = input.LA(1);

			if ((LA39_0==WS))
			{
				alt39 = 1;
			}
			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:197:27: WS
				{
				DebugLocation(197, 27);
				WS90=(IToken)Match(input,WS,Follow._WS_in_subquery1030); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS90);


				}
				break;

			}
			} finally { DebugExitSubRule(39); }

			DebugLocation(197, 31);
			char_literal91=(IToken)Match(input,171,Follow._171_in_subquery1033); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_171.Add(char_literal91);



			{
			// AST REWRITE
			// elements: select_command
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 197:35: -> ^( T_SUBQUERY select_command )
			{
				DebugLocation(197, 38);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:197:38: ^( T_SUBQUERY select_command )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(197, 40);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SUBQUERY, "T_SUBQUERY"), root_1);

				DebugLocation(197, 51);
				adaptor.AddChild(root_1, stream_select_command.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("subquery", 16);
			LeaveRule("subquery", 16);
			LeaveRule_subquery();
	    }
	 	DebugLocation(198, 1);
		} finally { DebugExitRule(GrammarFileName, "subquery"); }
		return retval;

	}
	// $ANTLR end "subquery"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file() {}

	// $ANTLR start "file"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:200:1: file : ( '[' ( WS )? file_spec ( WS file_option )* ( WS )? ']' -> ^( T_FILE file_spec ( file_option )* ) | '[' ( WS )? subquery ( WS )? ']' -> ^( T_FILESUBQUERY subquery ) | SIMPLE_FILE -> ^( T_FILE SIMPLE_FILE ) );
	[GrammarRule("file")]
	private AstParserRuleReturnScope<object, IToken> file()
	{
		EnterRule_file();
		EnterRule("file", 17);
		TraceIn("file", 17);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal92 = default(IToken);
	    IToken WS93 = default(IToken);
	    IToken WS95 = default(IToken);
	    IToken WS97 = default(IToken);
	    IToken char_literal98 = default(IToken);
	    IToken char_literal99 = default(IToken);
	    IToken WS100 = default(IToken);
	    IToken WS102 = default(IToken);
	    IToken char_literal103 = default(IToken);
	    IToken SIMPLE_FILE104 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file_spec94 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> file_option96 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> subquery101 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal92_tree = default(object);
	    object WS93_tree = default(object);
	    object WS95_tree = default(object);
	    object WS97_tree = default(object);
	    object char_literal98_tree = default(object);
	    object char_literal99_tree = default(object);
	    object WS100_tree = default(object);
	    object WS102_tree = default(object);
	    object char_literal103_tree = default(object);
	    object SIMPLE_FILE104_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_SIMPLE_FILE=new RewriteRuleITokenStream(adaptor,"token SIMPLE_FILE");
	    RewriteRuleITokenStream stream_185=new RewriteRuleITokenStream(adaptor,"token 185");
	    RewriteRuleITokenStream stream_186=new RewriteRuleITokenStream(adaptor,"token 186");
	    RewriteRuleSubtreeStream stream_file_option=new RewriteRuleSubtreeStream(adaptor,"rule file_option");
	    RewriteRuleSubtreeStream stream_file_spec=new RewriteRuleSubtreeStream(adaptor,"rule file_spec");
	    RewriteRuleSubtreeStream stream_subquery=new RewriteRuleSubtreeStream(adaptor,"rule subquery");
		try { DebugEnterRule(GrammarFileName, "file");
		DebugLocation(200, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:201:2: ( '[' ( WS )? file_spec ( WS file_option )* ( WS )? ']' -> ^( T_FILE file_spec ( file_option )* ) | '[' ( WS )? subquery ( WS )? ']' -> ^( T_FILESUBQUERY subquery ) | SIMPLE_FILE -> ^( T_FILE SIMPLE_FILE ) )
			int alt45=3;
			try { DebugEnterDecision(45, decisionCanBacktrack[45]);
			int LA45_0 = input.LA(1);

			if ((LA45_0==185))
			{
				switch (input.LA(2))
				{
				case WS:
					{
					int LA45_3 = input.LA(3);

					if ((LA45_3==STRING||LA45_3==VARIABLE))
					{
						alt45 = 1;
					}
					else if ((LA45_3==170))
					{
						alt45 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 45, 3, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case STRING:
				case VARIABLE:
					{
					alt45 = 1;
					}
					break;
				case 170:
					{
					alt45 = 2;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 45, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else if ((LA45_0==SIMPLE_FILE))
			{
				alt45 = 3;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 45, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(45); }
			switch (alt45)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:201:4: '[' ( WS )? file_spec ( WS file_option )* ( WS )? ']'
				{
				DebugLocation(201, 4);
				char_literal92=(IToken)Match(input,185,Follow._185_in_file1052); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_185.Add(char_literal92);

				DebugLocation(201, 8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:201:8: ( WS )?
				int alt40=2;
				try { DebugEnterSubRule(40);
				try { DebugEnterDecision(40, decisionCanBacktrack[40]);
				int LA40_0 = input.LA(1);

				if ((LA40_0==WS))
				{
					alt40 = 1;
				}
				} finally { DebugExitDecision(40); }
				switch (alt40)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:201:8: WS
					{
					DebugLocation(201, 8);
					WS93=(IToken)Match(input,WS,Follow._WS_in_file1054); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS93);


					}
					break;

				}
				} finally { DebugExitSubRule(40); }

				DebugLocation(201, 12);
				PushFollow(Follow._file_spec_in_file1057);
				file_spec94=file_spec();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_file_spec.Add(file_spec94.Tree);
				DebugLocation(201, 22);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:201:22: ( WS file_option )*
				try { DebugEnterSubRule(41);
				while (true)
				{
					int alt41=2;
					try { DebugEnterDecision(41, decisionCanBacktrack[41]);
					int LA41_0 = input.LA(1);

					if ((LA41_0==WS))
					{
						int LA41_1 = input.LA(2);

						if ((LA41_1==175))
						{
							alt41 = 1;
						}


					}


					} finally { DebugExitDecision(41); }
					switch ( alt41 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:201:23: WS file_option
						{
						DebugLocation(201, 23);
						WS95=(IToken)Match(input,WS,Follow._WS_in_file1060); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS95);

						DebugLocation(201, 26);
						PushFollow(Follow._file_option_in_file1062);
						file_option96=file_option();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_file_option.Add(file_option96.Tree);

						}
						break;

					default:
						goto loop41;
					}
				}

				loop41:
					;

				} finally { DebugExitSubRule(41); }

				DebugLocation(201, 40);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:201:40: ( WS )?
				int alt42=2;
				try { DebugEnterSubRule(42);
				try { DebugEnterDecision(42, decisionCanBacktrack[42]);
				int LA42_0 = input.LA(1);

				if ((LA42_0==WS))
				{
					alt42 = 1;
				}
				} finally { DebugExitDecision(42); }
				switch (alt42)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:201:40: WS
					{
					DebugLocation(201, 40);
					WS97=(IToken)Match(input,WS,Follow._WS_in_file1066); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS97);


					}
					break;

				}
				} finally { DebugExitSubRule(42); }

				DebugLocation(201, 44);
				char_literal98=(IToken)Match(input,186,Follow._186_in_file1069); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_186.Add(char_literal98);



				{
				// AST REWRITE
				// elements: file_option, file_spec
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 201:48: -> ^( T_FILE file_spec ( file_option )* )
				{
					DebugLocation(201, 51);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:201:51: ^( T_FILE file_spec ( file_option )* )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(201, 53);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILE, "T_FILE"), root_1);

					DebugLocation(201, 60);
					adaptor.AddChild(root_1, stream_file_spec.NextTree());
					DebugLocation(201, 70);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:201:70: ( file_option )*
					while ( stream_file_option.HasNext )
					{
						DebugLocation(201, 70);
						adaptor.AddChild(root_1, stream_file_option.NextTree());

					}
					stream_file_option.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:202:4: '[' ( WS )? subquery ( WS )? ']'
				{
				DebugLocation(202, 4);
				char_literal99=(IToken)Match(input,185,Follow._185_in_file1086); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_185.Add(char_literal99);

				DebugLocation(202, 8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:202:8: ( WS )?
				int alt43=2;
				try { DebugEnterSubRule(43);
				try { DebugEnterDecision(43, decisionCanBacktrack[43]);
				int LA43_0 = input.LA(1);

				if ((LA43_0==WS))
				{
					alt43 = 1;
				}
				} finally { DebugExitDecision(43); }
				switch (alt43)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:202:8: WS
					{
					DebugLocation(202, 8);
					WS100=(IToken)Match(input,WS,Follow._WS_in_file1088); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS100);


					}
					break;

				}
				} finally { DebugExitSubRule(43); }

				DebugLocation(202, 12);
				PushFollow(Follow._subquery_in_file1091);
				subquery101=subquery();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_subquery.Add(subquery101.Tree);
				DebugLocation(202, 21);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:202:21: ( WS )?
				int alt44=2;
				try { DebugEnterSubRule(44);
				try { DebugEnterDecision(44, decisionCanBacktrack[44]);
				int LA44_0 = input.LA(1);

				if ((LA44_0==WS))
				{
					alt44 = 1;
				}
				} finally { DebugExitDecision(44); }
				switch (alt44)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:202:21: WS
					{
					DebugLocation(202, 21);
					WS102=(IToken)Match(input,WS,Follow._WS_in_file1093); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS102);


					}
					break;

				}
				} finally { DebugExitSubRule(44); }

				DebugLocation(202, 25);
				char_literal103=(IToken)Match(input,186,Follow._186_in_file1096); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_186.Add(char_literal103);



				{
				// AST REWRITE
				// elements: subquery
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 202:29: -> ^( T_FILESUBQUERY subquery )
				{
					DebugLocation(202, 32);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:202:32: ^( T_FILESUBQUERY subquery )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(202, 34);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILESUBQUERY, "T_FILESUBQUERY"), root_1);

					DebugLocation(202, 49);
					adaptor.AddChild(root_1, stream_subquery.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:203:4: SIMPLE_FILE
				{
				DebugLocation(203, 4);
				SIMPLE_FILE104=(IToken)Match(input,SIMPLE_FILE,Follow._SIMPLE_FILE_in_file1109); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SIMPLE_FILE.Add(SIMPLE_FILE104);



				{
				// AST REWRITE
				// elements: SIMPLE_FILE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 203:16: -> ^( T_FILE SIMPLE_FILE )
				{
					DebugLocation(203, 19);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:203:19: ^( T_FILE SIMPLE_FILE )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(203, 21);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILE, "T_FILE"), root_1);

					DebugLocation(203, 28);
					adaptor.AddChild(root_1, stream_SIMPLE_FILE.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file", 17);
			LeaveRule("file", 17);
			LeaveRule_file();
	    }
	 	DebugLocation(204, 1);
		} finally { DebugExitRule(GrammarFileName, "file"); }
		return retval;

	}
	// $ANTLR end "file"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_spec() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_spec() {}

	// $ANTLR start "file_spec"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:206:1: file_spec : ( string | variable );
	[GrammarRule("file_spec")]
	private AstParserRuleReturnScope<object, IToken> file_spec()
	{
		EnterRule_file_spec();
		EnterRule("file_spec", 18);
		TraceIn("file_spec", 18);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> string105 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> variable106 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "file_spec");
		DebugLocation(206, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:207:2: ( string | variable )
			int alt46=2;
			try { DebugEnterDecision(46, decisionCanBacktrack[46]);
			int LA46_0 = input.LA(1);

			if ((LA46_0==STRING))
			{
				alt46 = 1;
			}
			else if ((LA46_0==VARIABLE))
			{
				alt46 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 46, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(46); }
			switch (alt46)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:207:4: string
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(207, 4);
				PushFollow(Follow._string_in_file_spec1128);
				string105=@string();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, string105.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:208:4: variable
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(208, 4);
				PushFollow(Follow._variable_in_file_spec1133);
				variable106=variable();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variable106.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_spec", 18);
			LeaveRule("file_spec", 18);
			LeaveRule_file_spec();
	    }
	 	DebugLocation(209, 1);
		} finally { DebugExitRule(GrammarFileName, "file_spec"); }
		return retval;

	}
	// $ANTLR end "file_spec"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_option() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_option() {}

	// $ANTLR start "file_option"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:211:1: file_option : '-' file_option_name ( ( WS )? '=' ( WS )? file_option_value )? -> ^( T_FILEOPTION file_option_name ( file_option_value )? ) ;
	[GrammarRule("file_option")]
	private AstParserRuleReturnScope<object, IToken> file_option()
	{
		EnterRule_file_option();
		EnterRule("file_option", 19);
		TraceIn("file_option", 19);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal107 = default(IToken);
	    IToken WS109 = default(IToken);
	    IToken char_literal110 = default(IToken);
	    IToken WS111 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file_option_name108 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> file_option_value112 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal107_tree = default(object);
	    object WS109_tree = default(object);
	    object char_literal110_tree = default(object);
	    object WS111_tree = default(object);
	    RewriteRuleITokenStream stream_182=new RewriteRuleITokenStream(adaptor,"token 182");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_175=new RewriteRuleITokenStream(adaptor,"token 175");
	    RewriteRuleSubtreeStream stream_file_option_name=new RewriteRuleSubtreeStream(adaptor,"rule file_option_name");
	    RewriteRuleSubtreeStream stream_file_option_value=new RewriteRuleSubtreeStream(adaptor,"rule file_option_value");
		try { DebugEnterRule(GrammarFileName, "file_option");
		DebugLocation(211, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:212:2: ( '-' file_option_name ( ( WS )? '=' ( WS )? file_option_value )? -> ^( T_FILEOPTION file_option_name ( file_option_value )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:212:4: '-' file_option_name ( ( WS )? '=' ( WS )? file_option_value )?
			{
			DebugLocation(212, 4);
			char_literal107=(IToken)Match(input,175,Follow._175_in_file_option1145); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_175.Add(char_literal107);

			DebugLocation(212, 8);
			PushFollow(Follow._file_option_name_in_file_option1147);
			file_option_name108=file_option_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_file_option_name.Add(file_option_name108.Tree);
			DebugLocation(212, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:212:25: ( ( WS )? '=' ( WS )? file_option_value )?
			int alt49=2;
			try { DebugEnterSubRule(49);
			try { DebugEnterDecision(49, decisionCanBacktrack[49]);
			int LA49_0 = input.LA(1);

			if ((LA49_0==WS))
			{
				int LA49_1 = input.LA(2);

				if ((LA49_1==182))
				{
					alt49 = 1;
				}
			}
			else if ((LA49_0==182))
			{
				alt49 = 1;
			}
			} finally { DebugExitDecision(49); }
			switch (alt49)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:212:27: ( WS )? '=' ( WS )? file_option_value
				{
				DebugLocation(212, 27);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:212:27: ( WS )?
				int alt47=2;
				try { DebugEnterSubRule(47);
				try { DebugEnterDecision(47, decisionCanBacktrack[47]);
				int LA47_0 = input.LA(1);

				if ((LA47_0==WS))
				{
					alt47 = 1;
				}
				} finally { DebugExitDecision(47); }
				switch (alt47)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:212:27: WS
					{
					DebugLocation(212, 27);
					WS109=(IToken)Match(input,WS,Follow._WS_in_file_option1151); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS109);


					}
					break;

				}
				} finally { DebugExitSubRule(47); }

				DebugLocation(212, 31);
				char_literal110=(IToken)Match(input,182,Follow._182_in_file_option1154); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_182.Add(char_literal110);

				DebugLocation(212, 35);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:212:35: ( WS )?
				int alt48=2;
				try { DebugEnterSubRule(48);
				try { DebugEnterDecision(48, decisionCanBacktrack[48]);
				int LA48_0 = input.LA(1);

				if ((LA48_0==WS))
				{
					alt48 = 1;
				}
				} finally { DebugExitDecision(48); }
				switch (alt48)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:212:35: WS
					{
					DebugLocation(212, 35);
					WS111=(IToken)Match(input,WS,Follow._WS_in_file_option1156); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS111);


					}
					break;

				}
				} finally { DebugExitSubRule(48); }

				DebugLocation(212, 39);
				PushFollow(Follow._file_option_value_in_file_option1159);
				file_option_value112=file_option_value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_file_option_value.Add(file_option_value112.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(49); }



			{
			// AST REWRITE
			// elements: file_option_value, file_option_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 212:59: -> ^( T_FILEOPTION file_option_name ( file_option_value )? )
			{
				DebugLocation(212, 62);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:212:62: ^( T_FILEOPTION file_option_name ( file_option_value )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(212, 64);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILEOPTION, "T_FILEOPTION"), root_1);

				DebugLocation(212, 77);
				adaptor.AddChild(root_1, stream_file_option_name.NextTree());
				DebugLocation(212, 94);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:212:94: ( file_option_value )?
				if (stream_file_option_value.HasNext)
				{
					DebugLocation(212, 94);
					adaptor.AddChild(root_1, stream_file_option_value.NextTree());

				}
				stream_file_option_value.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_option", 19);
			LeaveRule("file_option", 19);
			LeaveRule_file_option();
	    }
	 	DebugLocation(213, 1);
		} finally { DebugExitRule(GrammarFileName, "file_option"); }
		return retval;

	}
	// $ANTLR end "file_option"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_option_name() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_option_name() {}

	// $ANTLR start "file_option_name"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:215:1: file_option_name : TOKEN ;
	[GrammarRule("file_option_name")]
	private AstParserRuleReturnScope<object, IToken> file_option_name()
	{
		EnterRule_file_option_name();
		EnterRule("file_option_name", 20);
		TraceIn("file_option_name", 20);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN113 = default(IToken);

	    object TOKEN113_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "file_option_name");
		DebugLocation(215, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:216:2: ( TOKEN )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:216:4: TOKEN
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(216, 4);
			TOKEN113=(IToken)Match(input,TOKEN,Follow._TOKEN_in_file_option_name1183); if (state.failed) return retval;
			if (state.backtracking == 0) {
			TOKEN113_tree = (object)adaptor.Create(TOKEN113);
			adaptor.AddChild(root_0, TOKEN113_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_option_name", 20);
			LeaveRule("file_option_name", 20);
			LeaveRule_file_option_name();
	    }
	 	DebugLocation(217, 1);
		} finally { DebugExitRule(GrammarFileName, "file_option_name"); }
		return retval;

	}
	// $ANTLR end "file_option_name"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_option_value() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_option_value() {}

	// $ANTLR start "file_option_value"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:219:1: file_option_value : ( TOKEN | STRING | NUMBER | variable );
	[GrammarRule("file_option_value")]
	private AstParserRuleReturnScope<object, IToken> file_option_value()
	{
		EnterRule_file_option_value();
		EnterRule("file_option_value", 21);
		TraceIn("file_option_value", 21);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN114 = default(IToken);
	    IToken STRING115 = default(IToken);
	    IToken NUMBER116 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> variable117 = default(AstParserRuleReturnScope<object, IToken>);

	    object TOKEN114_tree = default(object);
	    object STRING115_tree = default(object);
	    object NUMBER116_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "file_option_value");
		DebugLocation(219, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:220:2: ( TOKEN | STRING | NUMBER | variable )
			int alt50=4;
			try { DebugEnterDecision(50, decisionCanBacktrack[50]);
			switch (input.LA(1))
			{
			case TOKEN:
				{
				alt50 = 1;
				}
				break;
			case STRING:
				{
				alt50 = 2;
				}
				break;
			case NUMBER:
				{
				alt50 = 3;
				}
				break;
			case VARIABLE:
				{
				alt50 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 50, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(50); }
			switch (alt50)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:220:4: TOKEN
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(220, 4);
				TOKEN114=(IToken)Match(input,TOKEN,Follow._TOKEN_in_file_option_value1195); if (state.failed) return retval;
				if (state.backtracking == 0) {
				TOKEN114_tree = (object)adaptor.Create(TOKEN114);
				adaptor.AddChild(root_0, TOKEN114_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:220:12: STRING
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(220, 12);
				STRING115=(IToken)Match(input,STRING,Follow._STRING_in_file_option_value1199); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRING115_tree = (object)adaptor.Create(STRING115);
				adaptor.AddChild(root_0, STRING115_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:220:21: NUMBER
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(220, 21);
				NUMBER116=(IToken)Match(input,NUMBER,Follow._NUMBER_in_file_option_value1203); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NUMBER116_tree = (object)adaptor.Create(NUMBER116);
				adaptor.AddChild(root_0, NUMBER116_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:220:30: variable
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(220, 30);
				PushFollow(Follow._variable_in_file_option_value1207);
				variable117=variable();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variable117.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_option_value", 21);
			LeaveRule("file_option_value", 21);
			LeaveRule_file_option_value();
	    }
	 	DebugLocation(221, 1);
		} finally { DebugExitRule(GrammarFileName, "file_option_value"); }
		return retval;

	}
	// $ANTLR end "file_option_value"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_where_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_where_clause() {}

	// $ANTLR start "where_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:223:1: where_clause : WHERE WS expression -> ^( T_WHERE expression ) ;
	[GrammarRule("where_clause")]
	private AstParserRuleReturnScope<object, IToken> where_clause()
	{
		EnterRule_where_clause();
		EnterRule("where_clause", 22);
		TraceIn("where_clause", 22);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WHERE118 = default(IToken);
	    IToken WS119 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression120 = default(AstParserRuleReturnScope<object, IToken>);

	    object WHERE118_tree = default(object);
	    object WS119_tree = default(object);
	    RewriteRuleITokenStream stream_WHERE=new RewriteRuleITokenStream(adaptor,"token WHERE");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "where_clause");
		DebugLocation(223, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:224:2: ( WHERE WS expression -> ^( T_WHERE expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:224:4: WHERE WS expression
			{
			DebugLocation(224, 4);
			WHERE118=(IToken)Match(input,WHERE,Follow._WHERE_in_where_clause1219); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WHERE.Add(WHERE118);

			DebugLocation(224, 10);
			WS119=(IToken)Match(input,WS,Follow._WS_in_where_clause1221); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS119);

			DebugLocation(224, 13);
			PushFollow(Follow._expression_in_where_clause1223);
			expression120=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression.Add(expression120.Tree);


			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 225:2: -> ^( T_WHERE expression )
			{
				DebugLocation(225, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:225:5: ^( T_WHERE expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(225, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_WHERE, "T_WHERE"), root_1);

				DebugLocation(225, 15);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("where_clause", 22);
			LeaveRule("where_clause", 22);
			LeaveRule_where_clause();
	    }
	 	DebugLocation(226, 1);
		} finally { DebugExitRule(GrammarFileName, "where_clause"); }
		return retval;

	}
	// $ANTLR end "where_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_groupby_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_groupby_clause() {}

	// $ANTLR start "groupby_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:227:1: groupby_clause : GROUP WS BY WS orderby_column_list -> ^( T_GROUPBY orderby_column_list ) ;
	[GrammarRule("groupby_clause")]
	private AstParserRuleReturnScope<object, IToken> groupby_clause()
	{
		EnterRule_groupby_clause();
		EnterRule("groupby_clause", 23);
		TraceIn("groupby_clause", 23);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken GROUP121 = default(IToken);
	    IToken WS122 = default(IToken);
	    IToken BY123 = default(IToken);
	    IToken WS124 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> orderby_column_list125 = default(AstParserRuleReturnScope<object, IToken>);

	    object GROUP121_tree = default(object);
	    object WS122_tree = default(object);
	    object BY123_tree = default(object);
	    object WS124_tree = default(object);
	    RewriteRuleITokenStream stream_GROUP=new RewriteRuleITokenStream(adaptor,"token GROUP");
	    RewriteRuleITokenStream stream_BY=new RewriteRuleITokenStream(adaptor,"token BY");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_orderby_column_list=new RewriteRuleSubtreeStream(adaptor,"rule orderby_column_list");
		try { DebugEnterRule(GrammarFileName, "groupby_clause");
		DebugLocation(227, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:228:2: ( GROUP WS BY WS orderby_column_list -> ^( T_GROUPBY orderby_column_list ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:228:4: GROUP WS BY WS orderby_column_list
			{
			DebugLocation(228, 4);
			GROUP121=(IToken)Match(input,GROUP,Follow._GROUP_in_groupby_clause1242); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_GROUP.Add(GROUP121);

			DebugLocation(228, 10);
			WS122=(IToken)Match(input,WS,Follow._WS_in_groupby_clause1244); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS122);

			DebugLocation(228, 13);
			BY123=(IToken)Match(input,BY,Follow._BY_in_groupby_clause1246); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_BY.Add(BY123);

			DebugLocation(228, 16);
			WS124=(IToken)Match(input,WS,Follow._WS_in_groupby_clause1248); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS124);

			DebugLocation(228, 19);
			PushFollow(Follow._orderby_column_list_in_groupby_clause1250);
			orderby_column_list125=orderby_column_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_orderby_column_list.Add(orderby_column_list125.Tree);


			{
			// AST REWRITE
			// elements: orderby_column_list
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 229:2: -> ^( T_GROUPBY orderby_column_list )
			{
				DebugLocation(229, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:229:5: ^( T_GROUPBY orderby_column_list )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(229, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_GROUPBY, "T_GROUPBY"), root_1);

				DebugLocation(229, 17);
				adaptor.AddChild(root_1, stream_orderby_column_list.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("groupby_clause", 23);
			LeaveRule("groupby_clause", 23);
			LeaveRule_groupby_clause();
	    }
	 	DebugLocation(230, 1);
		} finally { DebugExitRule(GrammarFileName, "groupby_clause"); }
		return retval;

	}
	// $ANTLR end "groupby_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_having_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_having_clause() {}

	// $ANTLR start "having_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:232:1: having_clause : HAVING WS expression -> ^( T_HAVING expression ) ;
	[GrammarRule("having_clause")]
	private AstParserRuleReturnScope<object, IToken> having_clause()
	{
		EnterRule_having_clause();
		EnterRule("having_clause", 24);
		TraceIn("having_clause", 24);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken HAVING126 = default(IToken);
	    IToken WS127 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression128 = default(AstParserRuleReturnScope<object, IToken>);

	    object HAVING126_tree = default(object);
	    object WS127_tree = default(object);
	    RewriteRuleITokenStream stream_HAVING=new RewriteRuleITokenStream(adaptor,"token HAVING");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "having_clause");
		DebugLocation(232, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:233:2: ( HAVING WS expression -> ^( T_HAVING expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:233:4: HAVING WS expression
			{
			DebugLocation(233, 4);
			HAVING126=(IToken)Match(input,HAVING,Follow._HAVING_in_having_clause1271); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_HAVING.Add(HAVING126);

			DebugLocation(233, 11);
			WS127=(IToken)Match(input,WS,Follow._WS_in_having_clause1273); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS127);

			DebugLocation(233, 14);
			PushFollow(Follow._expression_in_having_clause1275);
			expression128=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression.Add(expression128.Tree);


			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 234:2: -> ^( T_HAVING expression )
			{
				DebugLocation(234, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:234:5: ^( T_HAVING expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(234, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_HAVING, "T_HAVING"), root_1);

				DebugLocation(234, 16);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("having_clause", 24);
			LeaveRule("having_clause", 24);
			LeaveRule_having_clause();
	    }
	 	DebugLocation(235, 1);
		} finally { DebugExitRule(GrammarFileName, "having_clause"); }
		return retval;

	}
	// $ANTLR end "having_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_clause() {}

	// $ANTLR start "orderby_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:237:1: orderby_clause : ORDER WS BY WS orderby_column_list -> ^( T_ORDERBY orderby_column_list ) ;
	[GrammarRule("orderby_clause")]
	private AstParserRuleReturnScope<object, IToken> orderby_clause()
	{
		EnterRule_orderby_clause();
		EnterRule("orderby_clause", 25);
		TraceIn("orderby_clause", 25);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken ORDER129 = default(IToken);
	    IToken WS130 = default(IToken);
	    IToken BY131 = default(IToken);
	    IToken WS132 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> orderby_column_list133 = default(AstParserRuleReturnScope<object, IToken>);

	    object ORDER129_tree = default(object);
	    object WS130_tree = default(object);
	    object BY131_tree = default(object);
	    object WS132_tree = default(object);
	    RewriteRuleITokenStream stream_BY=new RewriteRuleITokenStream(adaptor,"token BY");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_ORDER=new RewriteRuleITokenStream(adaptor,"token ORDER");
	    RewriteRuleSubtreeStream stream_orderby_column_list=new RewriteRuleSubtreeStream(adaptor,"rule orderby_column_list");
		try { DebugEnterRule(GrammarFileName, "orderby_clause");
		DebugLocation(237, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:238:2: ( ORDER WS BY WS orderby_column_list -> ^( T_ORDERBY orderby_column_list ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:238:4: ORDER WS BY WS orderby_column_list
			{
			DebugLocation(238, 4);
			ORDER129=(IToken)Match(input,ORDER,Follow._ORDER_in_orderby_clause1296); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ORDER.Add(ORDER129);

			DebugLocation(238, 10);
			WS130=(IToken)Match(input,WS,Follow._WS_in_orderby_clause1298); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS130);

			DebugLocation(238, 13);
			BY131=(IToken)Match(input,BY,Follow._BY_in_orderby_clause1300); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_BY.Add(BY131);

			DebugLocation(238, 16);
			WS132=(IToken)Match(input,WS,Follow._WS_in_orderby_clause1302); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS132);

			DebugLocation(238, 19);
			PushFollow(Follow._orderby_column_list_in_orderby_clause1304);
			orderby_column_list133=orderby_column_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_orderby_column_list.Add(orderby_column_list133.Tree);


			{
			// AST REWRITE
			// elements: orderby_column_list
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 239:2: -> ^( T_ORDERBY orderby_column_list )
			{
				DebugLocation(239, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:239:5: ^( T_ORDERBY orderby_column_list )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(239, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_ORDERBY, "T_ORDERBY"), root_1);

				DebugLocation(239, 17);
				adaptor.AddChild(root_1, stream_orderby_column_list.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_clause", 25);
			LeaveRule("orderby_clause", 25);
			LeaveRule_orderby_clause();
	    }
	 	DebugLocation(240, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_clause"); }
		return retval;

	}
	// $ANTLR end "orderby_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_column_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_column_list() {}

	// $ANTLR start "orderby_column_list"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:242:1: orderby_column_list : orderby_column ( ( WS )? ',' ( WS )? orderby_column )* -> ( orderby_column )* ;
	[GrammarRule("orderby_column_list")]
	private AstParserRuleReturnScope<object, IToken> orderby_column_list()
	{
		EnterRule_orderby_column_list();
		EnterRule("orderby_column_list", 26);
		TraceIn("orderby_column_list", 26);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS135 = default(IToken);
	    IToken char_literal136 = default(IToken);
	    IToken WS137 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> orderby_column134 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> orderby_column138 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS135_tree = default(object);
	    object char_literal136_tree = default(object);
	    object WS137_tree = default(object);
	    RewriteRuleITokenStream stream_174=new RewriteRuleITokenStream(adaptor,"token 174");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_orderby_column=new RewriteRuleSubtreeStream(adaptor,"rule orderby_column");
		try { DebugEnterRule(GrammarFileName, "orderby_column_list");
		DebugLocation(242, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:243:2: ( orderby_column ( ( WS )? ',' ( WS )? orderby_column )* -> ( orderby_column )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:243:4: orderby_column ( ( WS )? ',' ( WS )? orderby_column )*
			{
			DebugLocation(243, 4);
			PushFollow(Follow._orderby_column_in_orderby_column_list1325);
			orderby_column134=orderby_column();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_orderby_column.Add(orderby_column134.Tree);
			DebugLocation(243, 19);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:243:19: ( ( WS )? ',' ( WS )? orderby_column )*
			try { DebugEnterSubRule(53);
			while (true)
			{
				int alt53=2;
				try { DebugEnterDecision(53, decisionCanBacktrack[53]);
				int LA53_0 = input.LA(1);

				if ((LA53_0==WS))
				{
					int LA53_1 = input.LA(2);

					if ((LA53_1==174))
					{
						alt53 = 1;
					}


				}
				else if ((LA53_0==174))
				{
					alt53 = 1;
				}


				} finally { DebugExitDecision(53); }
				switch ( alt53 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:243:20: ( WS )? ',' ( WS )? orderby_column
					{
					DebugLocation(243, 20);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:243:20: ( WS )?
					int alt51=2;
					try { DebugEnterSubRule(51);
					try { DebugEnterDecision(51, decisionCanBacktrack[51]);
					int LA51_0 = input.LA(1);

					if ((LA51_0==WS))
					{
						alt51 = 1;
					}
					} finally { DebugExitDecision(51); }
					switch (alt51)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:243:20: WS
						{
						DebugLocation(243, 20);
						WS135=(IToken)Match(input,WS,Follow._WS_in_orderby_column_list1328); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS135);


						}
						break;

					}
					} finally { DebugExitSubRule(51); }

					DebugLocation(243, 24);
					char_literal136=(IToken)Match(input,174,Follow._174_in_orderby_column_list1331); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_174.Add(char_literal136);

					DebugLocation(243, 28);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:243:28: ( WS )?
					int alt52=2;
					try { DebugEnterSubRule(52);
					try { DebugEnterDecision(52, decisionCanBacktrack[52]);
					int LA52_0 = input.LA(1);

					if ((LA52_0==WS))
					{
						alt52 = 1;
					}
					} finally { DebugExitDecision(52); }
					switch (alt52)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:243:28: WS
						{
						DebugLocation(243, 28);
						WS137=(IToken)Match(input,WS,Follow._WS_in_orderby_column_list1333); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS137);


						}
						break;

					}
					} finally { DebugExitSubRule(52); }

					DebugLocation(243, 32);
					PushFollow(Follow._orderby_column_in_orderby_column_list1336);
					orderby_column138=orderby_column();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_orderby_column.Add(orderby_column138.Tree);

					}
					break;

				default:
					goto loop53;
				}
			}

			loop53:
				;

			} finally { DebugExitSubRule(53); }



			{
			// AST REWRITE
			// elements: orderby_column
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 244:2: -> ( orderby_column )*
			{
				DebugLocation(244, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:244:5: ( orderby_column )*
				while ( stream_orderby_column.HasNext )
				{
					DebugLocation(244, 5);
					adaptor.AddChild(root_0, stream_orderby_column.NextTree());

				}
				stream_orderby_column.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_column_list", 26);
			LeaveRule("orderby_column_list", 26);
			LeaveRule_orderby_column_list();
	    }
	 	DebugLocation(245, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_column_list"); }
		return retval;

	}
	// $ANTLR end "orderby_column_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_column() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_column() {}

	// $ANTLR start "orderby_column"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:247:1: orderby_column : expression ( WS orderby_direction )? -> ^( T_ORDERBY_COLUMN expression ( orderby_direction )? ) ;
	[GrammarRule("orderby_column")]
	private AstParserRuleReturnScope<object, IToken> orderby_column()
	{
		EnterRule_orderby_column();
		EnterRule("orderby_column", 27);
		TraceIn("orderby_column", 27);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS140 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression139 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> orderby_direction141 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS140_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_orderby_direction=new RewriteRuleSubtreeStream(adaptor,"rule orderby_direction");
		try { DebugEnterRule(GrammarFileName, "orderby_column");
		DebugLocation(247, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:248:2: ( expression ( WS orderby_direction )? -> ^( T_ORDERBY_COLUMN expression ( orderby_direction )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:248:4: expression ( WS orderby_direction )?
			{
			DebugLocation(248, 4);
			PushFollow(Follow._expression_in_orderby_column1356);
			expression139=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression.Add(expression139.Tree);
			DebugLocation(248, 15);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:248:15: ( WS orderby_direction )?
			int alt54=2;
			try { DebugEnterSubRule(54);
			try { DebugEnterDecision(54, decisionCanBacktrack[54]);
			int LA54_0 = input.LA(1);

			if ((LA54_0==WS))
			{
				int LA54_1 = input.LA(2);

				if ((LA54_1==ASC||LA54_1==DESC||LA54_1==ORIG))
				{
					alt54 = 1;
				}
			}
			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:248:16: WS orderby_direction
				{
				DebugLocation(248, 16);
				WS140=(IToken)Match(input,WS,Follow._WS_in_orderby_column1359); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS140);

				DebugLocation(248, 19);
				PushFollow(Follow._orderby_direction_in_orderby_column1361);
				orderby_direction141=orderby_direction();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_orderby_direction.Add(orderby_direction141.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(54); }



			{
			// AST REWRITE
			// elements: orderby_direction, expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 248:39: -> ^( T_ORDERBY_COLUMN expression ( orderby_direction )? )
			{
				DebugLocation(248, 42);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:248:42: ^( T_ORDERBY_COLUMN expression ( orderby_direction )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(248, 44);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_ORDERBY_COLUMN, "T_ORDERBY_COLUMN"), root_1);

				DebugLocation(248, 61);
				adaptor.AddChild(root_1, stream_expression.NextTree());
				DebugLocation(248, 72);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:248:72: ( orderby_direction )?
				if (stream_orderby_direction.HasNext)
				{
					DebugLocation(248, 72);
					adaptor.AddChild(root_1, stream_orderby_direction.NextTree());

				}
				stream_orderby_direction.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_column", 27);
			LeaveRule("orderby_column", 27);
			LeaveRule_orderby_column();
	    }
	 	DebugLocation(249, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_column"); }
		return retval;

	}
	// $ANTLR end "orderby_column"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_direction() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_direction() {}

	// $ANTLR start "orderby_direction"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:251:1: orderby_direction : ( ASC -> T_ORDERBY_ASC | DESC -> T_ORDERBY_DESC | ORIG -> T_ORDERBY_ORIG );
	[GrammarRule("orderby_direction")]
	private AstParserRuleReturnScope<object, IToken> orderby_direction()
	{
		EnterRule_orderby_direction();
		EnterRule("orderby_direction", 28);
		TraceIn("orderby_direction", 28);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken ASC142 = default(IToken);
	    IToken DESC143 = default(IToken);
	    IToken ORIG144 = default(IToken);

	    object ASC142_tree = default(object);
	    object DESC143_tree = default(object);
	    object ORIG144_tree = default(object);
	    RewriteRuleITokenStream stream_DESC=new RewriteRuleITokenStream(adaptor,"token DESC");
	    RewriteRuleITokenStream stream_ASC=new RewriteRuleITokenStream(adaptor,"token ASC");
	    RewriteRuleITokenStream stream_ORIG=new RewriteRuleITokenStream(adaptor,"token ORIG");

		try { DebugEnterRule(GrammarFileName, "orderby_direction");
		DebugLocation(251, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:252:2: ( ASC -> T_ORDERBY_ASC | DESC -> T_ORDERBY_DESC | ORIG -> T_ORDERBY_ORIG )
			int alt55=3;
			try { DebugEnterDecision(55, decisionCanBacktrack[55]);
			switch (input.LA(1))
			{
			case ASC:
				{
				alt55 = 1;
				}
				break;
			case DESC:
				{
				alt55 = 2;
				}
				break;
			case ORIG:
				{
				alt55 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 55, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(55); }
			switch (alt55)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:252:4: ASC
				{
				DebugLocation(252, 4);
				ASC142=(IToken)Match(input,ASC,Follow._ASC_in_orderby_direction1386); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ASC.Add(ASC142);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 252:8: -> T_ORDERBY_ASC
				{
					DebugLocation(252, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_ORDERBY_ASC, "T_ORDERBY_ASC"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:253:4: DESC
				{
				DebugLocation(253, 4);
				DESC143=(IToken)Match(input,DESC,Follow._DESC_in_orderby_direction1395); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DESC.Add(DESC143);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 253:9: -> T_ORDERBY_DESC
				{
					DebugLocation(253, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_ORDERBY_DESC, "T_ORDERBY_DESC"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:254:4: ORIG
				{
				DebugLocation(254, 4);
				ORIG144=(IToken)Match(input,ORIG,Follow._ORIG_in_orderby_direction1404); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ORIG.Add(ORIG144);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 254:9: -> T_ORDERBY_ORIG
				{
					DebugLocation(254, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_ORDERBY_ORIG, "T_ORDERBY_ORIG"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_direction", 28);
			LeaveRule("orderby_direction", 28);
			LeaveRule_orderby_direction();
	    }
	 	DebugLocation(255, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_direction"); }
		return retval;

	}
	// $ANTLR end "orderby_direction"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_use_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_use_command() {}

	// $ANTLR start "use_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:260:1: use_command : USE WS file -> ^( T_USE file ) ;
	[GrammarRule("use_command")]
	private AstParserRuleReturnScope<object, IToken> use_command()
	{
		EnterRule_use_command();
		EnterRule("use_command", 29);
		TraceIn("use_command", 29);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken USE145 = default(IToken);
	    IToken WS146 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file147 = default(AstParserRuleReturnScope<object, IToken>);

	    object USE145_tree = default(object);
	    object WS146_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_USE=new RewriteRuleITokenStream(adaptor,"token USE");
	    RewriteRuleSubtreeStream stream_file=new RewriteRuleSubtreeStream(adaptor,"rule file");
		try { DebugEnterRule(GrammarFileName, "use_command");
		DebugLocation(260, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:261:2: ( USE WS file -> ^( T_USE file ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:261:4: USE WS file
			{
			DebugLocation(261, 4);
			USE145=(IToken)Match(input,USE,Follow._USE_in_use_command1422); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_USE.Add(USE145);

			DebugLocation(261, 8);
			WS146=(IToken)Match(input,WS,Follow._WS_in_use_command1424); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS146);

			DebugLocation(261, 11);
			PushFollow(Follow._file_in_use_command1426);
			file147=file();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_file.Add(file147.Tree);


			{
			// AST REWRITE
			// elements: file
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 261:16: -> ^( T_USE file )
			{
				DebugLocation(261, 19);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:261:19: ^( T_USE file )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(261, 21);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_USE, "T_USE"), root_1);

				DebugLocation(261, 27);
				adaptor.AddChild(root_1, stream_file.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("use_command", 29);
			LeaveRule("use_command", 29);
			LeaveRule_use_command();
	    }
	 	DebugLocation(262, 1);
		} finally { DebugExitRule(GrammarFileName, "use_command"); }
		return retval;

	}
	// $ANTLR end "use_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_declare_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_declare_command() {}

	// $ANTLR start "declare_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:267:1: declare_command : DECLARE WS declaration_list -> declaration_list ;
	[GrammarRule("declare_command")]
	private AstParserRuleReturnScope<object, IToken> declare_command()
	{
		EnterRule_declare_command();
		EnterRule("declare_command", 30);
		TraceIn("declare_command", 30);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken DECLARE148 = default(IToken);
	    IToken WS149 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> declaration_list150 = default(AstParserRuleReturnScope<object, IToken>);

	    object DECLARE148_tree = default(object);
	    object WS149_tree = default(object);
	    RewriteRuleITokenStream stream_DECLARE=new RewriteRuleITokenStream(adaptor,"token DECLARE");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_declaration_list=new RewriteRuleSubtreeStream(adaptor,"rule declaration_list");
		try { DebugEnterRule(GrammarFileName, "declare_command");
		DebugLocation(267, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:268:2: ( DECLARE WS declaration_list -> declaration_list )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:268:4: DECLARE WS declaration_list
			{
			DebugLocation(268, 4);
			DECLARE148=(IToken)Match(input,DECLARE,Follow._DECLARE_in_declare_command1448); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DECLARE.Add(DECLARE148);

			DebugLocation(268, 12);
			WS149=(IToken)Match(input,WS,Follow._WS_in_declare_command1450); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS149);

			DebugLocation(268, 15);
			PushFollow(Follow._declaration_list_in_declare_command1452);
			declaration_list150=declaration_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_declaration_list.Add(declaration_list150.Tree);


			{
			// AST REWRITE
			// elements: declaration_list
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 268:32: -> declaration_list
			{
				DebugLocation(268, 35);
				adaptor.AddChild(root_0, stream_declaration_list.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declare_command", 30);
			LeaveRule("declare_command", 30);
			LeaveRule_declare_command();
	    }
	 	DebugLocation(269, 1);
		} finally { DebugExitRule(GrammarFileName, "declare_command"); }
		return retval;

	}
	// $ANTLR end "declare_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_declaration_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_declaration_list() {}

	// $ANTLR start "declaration_list"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:271:1: declaration_list : declaration ( ( WS )? ',' ( WS )? declaration )* -> ^( T_DECLARE ( declaration )+ ) ;
	[GrammarRule("declaration_list")]
	private AstParserRuleReturnScope<object, IToken> declaration_list()
	{
		EnterRule_declaration_list();
		EnterRule("declaration_list", 31);
		TraceIn("declaration_list", 31);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS152 = default(IToken);
	    IToken char_literal153 = default(IToken);
	    IToken WS154 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> declaration151 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> declaration155 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS152_tree = default(object);
	    object char_literal153_tree = default(object);
	    object WS154_tree = default(object);
	    RewriteRuleITokenStream stream_174=new RewriteRuleITokenStream(adaptor,"token 174");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_declaration=new RewriteRuleSubtreeStream(adaptor,"rule declaration");
		try { DebugEnterRule(GrammarFileName, "declaration_list");
		DebugLocation(271, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:272:2: ( declaration ( ( WS )? ',' ( WS )? declaration )* -> ^( T_DECLARE ( declaration )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:272:4: declaration ( ( WS )? ',' ( WS )? declaration )*
			{
			DebugLocation(272, 4);
			PushFollow(Follow._declaration_in_declaration_list1469);
			declaration151=declaration();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_declaration.Add(declaration151.Tree);
			DebugLocation(272, 16);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:272:16: ( ( WS )? ',' ( WS )? declaration )*
			try { DebugEnterSubRule(58);
			while (true)
			{
				int alt58=2;
				try { DebugEnterDecision(58, decisionCanBacktrack[58]);
				int LA58_0 = input.LA(1);

				if ((LA58_0==WS))
				{
					int LA58_1 = input.LA(2);

					if ((LA58_1==174))
					{
						alt58 = 1;
					}


				}
				else if ((LA58_0==174))
				{
					alt58 = 1;
				}


				} finally { DebugExitDecision(58); }
				switch ( alt58 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:272:17: ( WS )? ',' ( WS )? declaration
					{
					DebugLocation(272, 17);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:272:17: ( WS )?
					int alt56=2;
					try { DebugEnterSubRule(56);
					try { DebugEnterDecision(56, decisionCanBacktrack[56]);
					int LA56_0 = input.LA(1);

					if ((LA56_0==WS))
					{
						alt56 = 1;
					}
					} finally { DebugExitDecision(56); }
					switch (alt56)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:272:17: WS
						{
						DebugLocation(272, 17);
						WS152=(IToken)Match(input,WS,Follow._WS_in_declaration_list1472); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS152);


						}
						break;

					}
					} finally { DebugExitSubRule(56); }

					DebugLocation(272, 21);
					char_literal153=(IToken)Match(input,174,Follow._174_in_declaration_list1475); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_174.Add(char_literal153);

					DebugLocation(272, 25);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:272:25: ( WS )?
					int alt57=2;
					try { DebugEnterSubRule(57);
					try { DebugEnterDecision(57, decisionCanBacktrack[57]);
					int LA57_0 = input.LA(1);

					if ((LA57_0==WS))
					{
						alt57 = 1;
					}
					} finally { DebugExitDecision(57); }
					switch (alt57)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:272:25: WS
						{
						DebugLocation(272, 25);
						WS154=(IToken)Match(input,WS,Follow._WS_in_declaration_list1477); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS154);


						}
						break;

					}
					} finally { DebugExitSubRule(57); }

					DebugLocation(272, 29);
					PushFollow(Follow._declaration_in_declaration_list1480);
					declaration155=declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_declaration.Add(declaration155.Tree);

					}
					break;

				default:
					goto loop58;
				}
			}

			loop58:
				;

			} finally { DebugExitSubRule(58); }



			{
			// AST REWRITE
			// elements: declaration
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 273:2: -> ^( T_DECLARE ( declaration )+ )
			{
				DebugLocation(273, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:273:5: ^( T_DECLARE ( declaration )+ )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(273, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_DECLARE, "T_DECLARE"), root_1);

				DebugLocation(273, 17);
				if (!(stream_declaration.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_declaration.HasNext )
				{
					DebugLocation(273, 17);
					adaptor.AddChild(root_1, stream_declaration.NextTree());

				}
				stream_declaration.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declaration_list", 31);
			LeaveRule("declaration_list", 31);
			LeaveRule_declaration_list();
	    }
	 	DebugLocation(274, 1);
		} finally { DebugExitRule(GrammarFileName, "declaration_list"); }
		return retval;

	}
	// $ANTLR end "declaration_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_declaration() {}

	// $ANTLR start "declaration"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:276:1: declaration : variable WS ( AS WS )? datatype -> ^( T_DECLARATION variable datatype ) ;
	[GrammarRule("declaration")]
	private AstParserRuleReturnScope<object, IToken> declaration()
	{
		EnterRule_declaration();
		EnterRule("declaration", 32);
		TraceIn("declaration", 32);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS157 = default(IToken);
	    IToken AS158 = default(IToken);
	    IToken WS159 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> variable156 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> datatype160 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS157_tree = default(object);
	    object AS158_tree = default(object);
	    object WS159_tree = default(object);
	    RewriteRuleITokenStream stream_AS=new RewriteRuleITokenStream(adaptor,"token AS");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_datatype=new RewriteRuleSubtreeStream(adaptor,"rule datatype");
	    RewriteRuleSubtreeStream stream_variable=new RewriteRuleSubtreeStream(adaptor,"rule variable");
		try { DebugEnterRule(GrammarFileName, "declaration");
		DebugLocation(276, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:277:2: ( variable WS ( AS WS )? datatype -> ^( T_DECLARATION variable datatype ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:277:4: variable WS ( AS WS )? datatype
			{
			DebugLocation(277, 4);
			PushFollow(Follow._variable_in_declaration1504);
			variable156=variable();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_variable.Add(variable156.Tree);
			DebugLocation(277, 13);
			WS157=(IToken)Match(input,WS,Follow._WS_in_declaration1506); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS157);

			DebugLocation(277, 16);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:277:16: ( AS WS )?
			int alt59=2;
			try { DebugEnterSubRule(59);
			try { DebugEnterDecision(59, decisionCanBacktrack[59]);
			int LA59_0 = input.LA(1);

			if ((LA59_0==AS))
			{
				alt59 = 1;
			}
			} finally { DebugExitDecision(59); }
			switch (alt59)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:277:17: AS WS
				{
				DebugLocation(277, 17);
				AS158=(IToken)Match(input,AS,Follow._AS_in_declaration1509); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_AS.Add(AS158);

				DebugLocation(277, 20);
				WS159=(IToken)Match(input,WS,Follow._WS_in_declaration1511); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS159);


				}
				break;

			}
			} finally { DebugExitSubRule(59); }

			DebugLocation(277, 25);
			PushFollow(Follow._datatype_in_declaration1515);
			datatype160=datatype();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_datatype.Add(datatype160.Tree);


			{
			// AST REWRITE
			// elements: datatype, variable
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 278:2: -> ^( T_DECLARATION variable datatype )
			{
				DebugLocation(278, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:278:5: ^( T_DECLARATION variable datatype )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(278, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_DECLARATION, "T_DECLARATION"), root_1);

				DebugLocation(278, 21);
				adaptor.AddChild(root_1, stream_variable.NextTree());
				DebugLocation(278, 30);
				adaptor.AddChild(root_1, stream_datatype.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declaration", 32);
			LeaveRule("declaration", 32);
			LeaveRule_declaration();
	    }
	 	DebugLocation(279, 1);
		} finally { DebugExitRule(GrammarFileName, "declaration"); }
		return retval;

	}
	// $ANTLR end "declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_create_view_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_create_view_command() {}

	// $ANTLR start "create_view_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:284:1: create_view_command : CREATE WS VIEW WS view_name ( ( WS )? '(' declaration_list ')' )? WS AS WS select_command -> ^( T_CREATE_VIEW view_name ( declaration_list )? select_command ) ;
	[GrammarRule("create_view_command")]
	private AstParserRuleReturnScope<object, IToken> create_view_command()
	{
		EnterRule_create_view_command();
		EnterRule("create_view_command", 33);
		TraceIn("create_view_command", 33);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken CREATE161 = default(IToken);
	    IToken WS162 = default(IToken);
	    IToken VIEW163 = default(IToken);
	    IToken WS164 = default(IToken);
	    IToken WS166 = default(IToken);
	    IToken char_literal167 = default(IToken);
	    IToken char_literal169 = default(IToken);
	    IToken WS170 = default(IToken);
	    IToken AS171 = default(IToken);
	    IToken WS172 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> view_name165 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> declaration_list168 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> select_command173 = default(AstParserRuleReturnScope<object, IToken>);

	    object CREATE161_tree = default(object);
	    object WS162_tree = default(object);
	    object VIEW163_tree = default(object);
	    object WS164_tree = default(object);
	    object WS166_tree = default(object);
	    object char_literal167_tree = default(object);
	    object char_literal169_tree = default(object);
	    object WS170_tree = default(object);
	    object AS171_tree = default(object);
	    object WS172_tree = default(object);
	    RewriteRuleITokenStream stream_170=new RewriteRuleITokenStream(adaptor,"token 170");
	    RewriteRuleITokenStream stream_171=new RewriteRuleITokenStream(adaptor,"token 171");
	    RewriteRuleITokenStream stream_AS=new RewriteRuleITokenStream(adaptor,"token AS");
	    RewriteRuleITokenStream stream_CREATE=new RewriteRuleITokenStream(adaptor,"token CREATE");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_VIEW=new RewriteRuleITokenStream(adaptor,"token VIEW");
	    RewriteRuleSubtreeStream stream_view_name=new RewriteRuleSubtreeStream(adaptor,"rule view_name");
	    RewriteRuleSubtreeStream stream_select_command=new RewriteRuleSubtreeStream(adaptor,"rule select_command");
	    RewriteRuleSubtreeStream stream_declaration_list=new RewriteRuleSubtreeStream(adaptor,"rule declaration_list");
		try { DebugEnterRule(GrammarFileName, "create_view_command");
		DebugLocation(284, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:285:2: ( CREATE WS VIEW WS view_name ( ( WS )? '(' declaration_list ')' )? WS AS WS select_command -> ^( T_CREATE_VIEW view_name ( declaration_list )? select_command ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:285:4: CREATE WS VIEW WS view_name ( ( WS )? '(' declaration_list ')' )? WS AS WS select_command
			{
			DebugLocation(285, 4);
			CREATE161=(IToken)Match(input,CREATE,Follow._CREATE_in_create_view_command1540); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CREATE.Add(CREATE161);

			DebugLocation(285, 11);
			WS162=(IToken)Match(input,WS,Follow._WS_in_create_view_command1542); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS162);

			DebugLocation(285, 14);
			VIEW163=(IToken)Match(input,VIEW,Follow._VIEW_in_create_view_command1544); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_VIEW.Add(VIEW163);

			DebugLocation(285, 19);
			WS164=(IToken)Match(input,WS,Follow._WS_in_create_view_command1546); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS164);

			DebugLocation(285, 22);
			PushFollow(Follow._view_name_in_create_view_command1548);
			view_name165=view_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_view_name.Add(view_name165.Tree);
			DebugLocation(285, 32);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:285:32: ( ( WS )? '(' declaration_list ')' )?
			int alt61=2;
			try { DebugEnterSubRule(61);
			try { DebugEnterDecision(61, decisionCanBacktrack[61]);
			int LA61_0 = input.LA(1);

			if ((LA61_0==WS))
			{
				int LA61_1 = input.LA(2);

				if ((LA61_1==170))
				{
					alt61 = 1;
				}
			}
			else if ((LA61_0==170))
			{
				alt61 = 1;
			}
			} finally { DebugExitDecision(61); }
			switch (alt61)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:285:33: ( WS )? '(' declaration_list ')'
				{
				DebugLocation(285, 33);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:285:33: ( WS )?
				int alt60=2;
				try { DebugEnterSubRule(60);
				try { DebugEnterDecision(60, decisionCanBacktrack[60]);
				int LA60_0 = input.LA(1);

				if ((LA60_0==WS))
				{
					alt60 = 1;
				}
				} finally { DebugExitDecision(60); }
				switch (alt60)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:285:33: WS
					{
					DebugLocation(285, 33);
					WS166=(IToken)Match(input,WS,Follow._WS_in_create_view_command1551); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS166);


					}
					break;

				}
				} finally { DebugExitSubRule(60); }

				DebugLocation(285, 37);
				char_literal167=(IToken)Match(input,170,Follow._170_in_create_view_command1554); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_170.Add(char_literal167);

				DebugLocation(285, 41);
				PushFollow(Follow._declaration_list_in_create_view_command1556);
				declaration_list168=declaration_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_declaration_list.Add(declaration_list168.Tree);
				DebugLocation(285, 58);
				char_literal169=(IToken)Match(input,171,Follow._171_in_create_view_command1558); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_171.Add(char_literal169);


				}
				break;

			}
			} finally { DebugExitSubRule(61); }

			DebugLocation(285, 64);
			WS170=(IToken)Match(input,WS,Follow._WS_in_create_view_command1562); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS170);

			DebugLocation(285, 67);
			AS171=(IToken)Match(input,AS,Follow._AS_in_create_view_command1564); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_AS.Add(AS171);

			DebugLocation(285, 70);
			WS172=(IToken)Match(input,WS,Follow._WS_in_create_view_command1566); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS172);

			DebugLocation(285, 73);
			PushFollow(Follow._select_command_in_create_view_command1568);
			select_command173=select_command();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_select_command.Add(select_command173.Tree);


			{
			// AST REWRITE
			// elements: declaration_list, view_name, select_command
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 286:2: -> ^( T_CREATE_VIEW view_name ( declaration_list )? select_command )
			{
				DebugLocation(286, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:286:5: ^( T_CREATE_VIEW view_name ( declaration_list )? select_command )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(286, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CREATE_VIEW, "T_CREATE_VIEW"), root_1);

				DebugLocation(286, 21);
				adaptor.AddChild(root_1, stream_view_name.NextTree());
				DebugLocation(286, 31);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:286:31: ( declaration_list )?
				if (stream_declaration_list.HasNext)
				{
					DebugLocation(286, 31);
					adaptor.AddChild(root_1, stream_declaration_list.NextTree());

				}
				stream_declaration_list.Reset();
				DebugLocation(286, 49);
				adaptor.AddChild(root_1, stream_select_command.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("create_view_command", 33);
			LeaveRule("create_view_command", 33);
			LeaveRule_create_view_command();
	    }
	 	DebugLocation(287, 1);
		} finally { DebugExitRule(GrammarFileName, "create_view_command"); }
		return retval;

	}
	// $ANTLR end "create_view_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_drop_view_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_drop_view_command() {}

	// $ANTLR start "drop_view_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:289:1: drop_view_command : DROP WS VIEW WS view_name -> ^( T_DROP_VIEW view_name ) ;
	[GrammarRule("drop_view_command")]
	private AstParserRuleReturnScope<object, IToken> drop_view_command()
	{
		EnterRule_drop_view_command();
		EnterRule("drop_view_command", 34);
		TraceIn("drop_view_command", 34);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken DROP174 = default(IToken);
	    IToken WS175 = default(IToken);
	    IToken VIEW176 = default(IToken);
	    IToken WS177 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> view_name178 = default(AstParserRuleReturnScope<object, IToken>);

	    object DROP174_tree = default(object);
	    object WS175_tree = default(object);
	    object VIEW176_tree = default(object);
	    object WS177_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_VIEW=new RewriteRuleITokenStream(adaptor,"token VIEW");
	    RewriteRuleITokenStream stream_DROP=new RewriteRuleITokenStream(adaptor,"token DROP");
	    RewriteRuleSubtreeStream stream_view_name=new RewriteRuleSubtreeStream(adaptor,"rule view_name");
		try { DebugEnterRule(GrammarFileName, "drop_view_command");
		DebugLocation(289, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:290:2: ( DROP WS VIEW WS view_name -> ^( T_DROP_VIEW view_name ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:290:4: DROP WS VIEW WS view_name
			{
			DebugLocation(290, 4);
			DROP174=(IToken)Match(input,DROP,Follow._DROP_in_drop_view_command1594); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DROP.Add(DROP174);

			DebugLocation(290, 9);
			WS175=(IToken)Match(input,WS,Follow._WS_in_drop_view_command1596); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS175);

			DebugLocation(290, 12);
			VIEW176=(IToken)Match(input,VIEW,Follow._VIEW_in_drop_view_command1598); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_VIEW.Add(VIEW176);

			DebugLocation(290, 17);
			WS177=(IToken)Match(input,WS,Follow._WS_in_drop_view_command1600); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS177);

			DebugLocation(290, 20);
			PushFollow(Follow._view_name_in_drop_view_command1602);
			view_name178=view_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_view_name.Add(view_name178.Tree);


			{
			// AST REWRITE
			// elements: view_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 291:2: -> ^( T_DROP_VIEW view_name )
			{
				DebugLocation(291, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:291:5: ^( T_DROP_VIEW view_name )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(291, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_DROP_VIEW, "T_DROP_VIEW"), root_1);

				DebugLocation(291, 19);
				adaptor.AddChild(root_1, stream_view_name.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("drop_view_command", 34);
			LeaveRule("drop_view_command", 34);
			LeaveRule_drop_view_command();
	    }
	 	DebugLocation(292, 1);
		} finally { DebugExitRule(GrammarFileName, "drop_view_command"); }
		return retval;

	}
	// $ANTLR end "drop_view_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_view_name() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_view_name() {}

	// $ANTLR start "view_name"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:294:1: view_name : TOKEN -> ^( T_VIEW_NAME TOKEN ) ;
	[GrammarRule("view_name")]
	private AstParserRuleReturnScope<object, IToken> view_name()
	{
		EnterRule_view_name();
		EnterRule("view_name", 35);
		TraceIn("view_name", 35);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN179 = default(IToken);

	    object TOKEN179_tree = default(object);
	    RewriteRuleITokenStream stream_TOKEN=new RewriteRuleITokenStream(adaptor,"token TOKEN");

		try { DebugEnterRule(GrammarFileName, "view_name");
		DebugLocation(294, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:295:2: ( TOKEN -> ^( T_VIEW_NAME TOKEN ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:295:4: TOKEN
			{
			DebugLocation(295, 4);
			TOKEN179=(IToken)Match(input,TOKEN,Follow._TOKEN_in_view_name1622); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_TOKEN.Add(TOKEN179);



			{
			// AST REWRITE
			// elements: TOKEN
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 295:10: -> ^( T_VIEW_NAME TOKEN )
			{
				DebugLocation(295, 13);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:295:13: ^( T_VIEW_NAME TOKEN )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(295, 15);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_VIEW_NAME, "T_VIEW_NAME"), root_1);

				DebugLocation(295, 27);
				adaptor.AddChild(root_1, stream_TOKEN.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("view_name", 35);
			LeaveRule("view_name", 35);
			LeaveRule_view_name();
	    }
	 	DebugLocation(296, 1);
		} finally { DebugExitRule(GrammarFileName, "view_name"); }
		return retval;

	}
	// $ANTLR end "view_name"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_drop_table_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_drop_table_command() {}

	// $ANTLR start "drop_table_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:300:1: drop_table_command : DROP WS TABLE WS file -> ^( T_DROP_TABLE file ) ;
	[GrammarRule("drop_table_command")]
	private AstParserRuleReturnScope<object, IToken> drop_table_command()
	{
		EnterRule_drop_table_command();
		EnterRule("drop_table_command", 36);
		TraceIn("drop_table_command", 36);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken DROP180 = default(IToken);
	    IToken WS181 = default(IToken);
	    IToken TABLE182 = default(IToken);
	    IToken WS183 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file184 = default(AstParserRuleReturnScope<object, IToken>);

	    object DROP180_tree = default(object);
	    object WS181_tree = default(object);
	    object TABLE182_tree = default(object);
	    object WS183_tree = default(object);
	    RewriteRuleITokenStream stream_TABLE=new RewriteRuleITokenStream(adaptor,"token TABLE");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_DROP=new RewriteRuleITokenStream(adaptor,"token DROP");
	    RewriteRuleSubtreeStream stream_file=new RewriteRuleSubtreeStream(adaptor,"rule file");
		try { DebugEnterRule(GrammarFileName, "drop_table_command");
		DebugLocation(300, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:301:2: ( DROP WS TABLE WS file -> ^( T_DROP_TABLE file ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:301:4: DROP WS TABLE WS file
			{
			DebugLocation(301, 4);
			DROP180=(IToken)Match(input,DROP,Follow._DROP_in_drop_table_command1644); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DROP.Add(DROP180);

			DebugLocation(301, 9);
			WS181=(IToken)Match(input,WS,Follow._WS_in_drop_table_command1646); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS181);

			DebugLocation(301, 12);
			TABLE182=(IToken)Match(input,TABLE,Follow._TABLE_in_drop_table_command1648); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_TABLE.Add(TABLE182);

			DebugLocation(301, 18);
			WS183=(IToken)Match(input,WS,Follow._WS_in_drop_table_command1650); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS183);

			DebugLocation(301, 21);
			PushFollow(Follow._file_in_drop_table_command1652);
			file184=file();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_file.Add(file184.Tree);


			{
			// AST REWRITE
			// elements: file
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 302:2: -> ^( T_DROP_TABLE file )
			{
				DebugLocation(302, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:302:5: ^( T_DROP_TABLE file )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(302, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_DROP_TABLE, "T_DROP_TABLE"), root_1);

				DebugLocation(302, 20);
				adaptor.AddChild(root_1, stream_file.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("drop_table_command", 36);
			LeaveRule("drop_table_command", 36);
			LeaveRule_drop_table_command();
	    }
	 	DebugLocation(303, 1);
		} finally { DebugExitRule(GrammarFileName, "drop_table_command"); }
		return retval;

	}
	// $ANTLR end "drop_table_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_set_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_set_command() {}

	// $ANTLR start "set_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:309:1: set_command : ( SET WS variable ( WS )? '=' ( WS )? expression -> ^( T_SET_VARIABLE variable expression ) | SET WS TOKEN WS expression -> ^( T_SET_COMMAND TOKEN expression ) );
	[GrammarRule("set_command")]
	private AstParserRuleReturnScope<object, IToken> set_command()
	{
		EnterRule_set_command();
		EnterRule("set_command", 37);
		TraceIn("set_command", 37);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken SET185 = default(IToken);
	    IToken WS186 = default(IToken);
	    IToken WS188 = default(IToken);
	    IToken char_literal189 = default(IToken);
	    IToken WS190 = default(IToken);
	    IToken SET192 = default(IToken);
	    IToken WS193 = default(IToken);
	    IToken TOKEN194 = default(IToken);
	    IToken WS195 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> variable187 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression191 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression196 = default(AstParserRuleReturnScope<object, IToken>);

	    object SET185_tree = default(object);
	    object WS186_tree = default(object);
	    object WS188_tree = default(object);
	    object char_literal189_tree = default(object);
	    object WS190_tree = default(object);
	    object SET192_tree = default(object);
	    object WS193_tree = default(object);
	    object TOKEN194_tree = default(object);
	    object WS195_tree = default(object);
	    RewriteRuleITokenStream stream_182=new RewriteRuleITokenStream(adaptor,"token 182");
	    RewriteRuleITokenStream stream_SET=new RewriteRuleITokenStream(adaptor,"token SET");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_TOKEN=new RewriteRuleITokenStream(adaptor,"token TOKEN");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_variable=new RewriteRuleSubtreeStream(adaptor,"rule variable");
		try { DebugEnterRule(GrammarFileName, "set_command");
		DebugLocation(309, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:310:2: ( SET WS variable ( WS )? '=' ( WS )? expression -> ^( T_SET_VARIABLE variable expression ) | SET WS TOKEN WS expression -> ^( T_SET_COMMAND TOKEN expression ) )
			int alt64=2;
			try { DebugEnterDecision(64, decisionCanBacktrack[64]);
			int LA64_0 = input.LA(1);

			if ((LA64_0==SET))
			{
				int LA64_1 = input.LA(2);

				if ((LA64_1==WS))
				{
					int LA64_2 = input.LA(3);

					if ((LA64_2==TOKEN))
					{
						alt64 = 2;
					}
					else if ((LA64_2==VARIABLE))
					{
						alt64 = 1;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 64, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 64, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 64, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(64); }
			switch (alt64)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:310:4: SET WS variable ( WS )? '=' ( WS )? expression
				{
				DebugLocation(310, 4);
				SET185=(IToken)Match(input,SET,Follow._SET_in_set_command1676); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SET.Add(SET185);

				DebugLocation(310, 8);
				WS186=(IToken)Match(input,WS,Follow._WS_in_set_command1678); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS186);

				DebugLocation(310, 11);
				PushFollow(Follow._variable_in_set_command1680);
				variable187=variable();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_variable.Add(variable187.Tree);
				DebugLocation(310, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:310:20: ( WS )?
				int alt62=2;
				try { DebugEnterSubRule(62);
				try { DebugEnterDecision(62, decisionCanBacktrack[62]);
				int LA62_0 = input.LA(1);

				if ((LA62_0==WS))
				{
					alt62 = 1;
				}
				} finally { DebugExitDecision(62); }
				switch (alt62)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:310:20: WS
					{
					DebugLocation(310, 20);
					WS188=(IToken)Match(input,WS,Follow._WS_in_set_command1682); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS188);


					}
					break;

				}
				} finally { DebugExitSubRule(62); }

				DebugLocation(310, 24);
				char_literal189=(IToken)Match(input,182,Follow._182_in_set_command1685); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_182.Add(char_literal189);

				DebugLocation(310, 28);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:310:28: ( WS )?
				int alt63=2;
				try { DebugEnterSubRule(63);
				try { DebugEnterDecision(63, decisionCanBacktrack[63]);
				int LA63_0 = input.LA(1);

				if ((LA63_0==WS))
				{
					alt63 = 1;
				}
				} finally { DebugExitDecision(63); }
				switch (alt63)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:310:28: WS
					{
					DebugLocation(310, 28);
					WS190=(IToken)Match(input,WS,Follow._WS_in_set_command1687); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS190);


					}
					break;

				}
				} finally { DebugExitSubRule(63); }

				DebugLocation(310, 32);
				PushFollow(Follow._expression_in_set_command1690);
				expression191=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression191.Tree);


				{
				// AST REWRITE
				// elements: expression, variable
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 310:43: -> ^( T_SET_VARIABLE variable expression )
				{
					DebugLocation(310, 46);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:310:46: ^( T_SET_VARIABLE variable expression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(310, 48);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SET_VARIABLE, "T_SET_VARIABLE"), root_1);

					DebugLocation(310, 63);
					adaptor.AddChild(root_1, stream_variable.NextTree());
					DebugLocation(310, 72);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:311:4: SET WS TOKEN WS expression
				{
				DebugLocation(311, 4);
				SET192=(IToken)Match(input,SET,Follow._SET_in_set_command1705); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SET.Add(SET192);

				DebugLocation(311, 8);
				WS193=(IToken)Match(input,WS,Follow._WS_in_set_command1707); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS193);

				DebugLocation(311, 11);
				TOKEN194=(IToken)Match(input,TOKEN,Follow._TOKEN_in_set_command1709); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TOKEN.Add(TOKEN194);

				DebugLocation(311, 17);
				WS195=(IToken)Match(input,WS,Follow._WS_in_set_command1711); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS195);

				DebugLocation(311, 20);
				PushFollow(Follow._expression_in_set_command1713);
				expression196=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression196.Tree);


				{
				// AST REWRITE
				// elements: expression, TOKEN
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 311:31: -> ^( T_SET_COMMAND TOKEN expression )
				{
					DebugLocation(311, 34);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:311:34: ^( T_SET_COMMAND TOKEN expression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(311, 36);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SET_COMMAND, "T_SET_COMMAND"), root_1);

					DebugLocation(311, 50);
					adaptor.AddChild(root_1, stream_TOKEN.NextNode());
					DebugLocation(311, 56);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("set_command", 37);
			LeaveRule("set_command", 37);
			LeaveRule_set_command();
	    }
	 	DebugLocation(312, 1);
		} finally { DebugExitRule(GrammarFileName, "set_command"); }
		return retval;

	}
	// $ANTLR end "set_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_list() {}

	// $ANTLR start "expression_list"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:317:1: expression_list : expression ( ( WS )? ',' ( WS )? expression )* -> ^( T_EXPRESSIONLIST ( expression )+ ) ;
	[GrammarRule("expression_list")]
	private AstParserRuleReturnScope<object, IToken> expression_list()
	{
		EnterRule_expression_list();
		EnterRule("expression_list", 38);
		TraceIn("expression_list", 38);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS198 = default(IToken);
	    IToken char_literal199 = default(IToken);
	    IToken WS200 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression197 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression201 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS198_tree = default(object);
	    object char_literal199_tree = default(object);
	    object WS200_tree = default(object);
	    RewriteRuleITokenStream stream_174=new RewriteRuleITokenStream(adaptor,"token 174");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "expression_list");
		DebugLocation(317, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:318:2: ( expression ( ( WS )? ',' ( WS )? expression )* -> ^( T_EXPRESSIONLIST ( expression )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:318:4: expression ( ( WS )? ',' ( WS )? expression )*
			{
			DebugLocation(318, 4);
			PushFollow(Follow._expression_in_expression_list1737);
			expression197=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression.Add(expression197.Tree);
			DebugLocation(318, 15);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:318:15: ( ( WS )? ',' ( WS )? expression )*
			try { DebugEnterSubRule(67);
			while (true)
			{
				int alt67=2;
				try { DebugEnterDecision(67, decisionCanBacktrack[67]);
				int LA67_0 = input.LA(1);

				if ((LA67_0==WS))
				{
					int LA67_2 = input.LA(2);

					if ((LA67_2==174))
					{
						alt67 = 1;
					}


				}
				else if ((LA67_0==174))
				{
					alt67 = 1;
				}


				} finally { DebugExitDecision(67); }
				switch ( alt67 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:318:16: ( WS )? ',' ( WS )? expression
					{
					DebugLocation(318, 16);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:318:16: ( WS )?
					int alt65=2;
					try { DebugEnterSubRule(65);
					try { DebugEnterDecision(65, decisionCanBacktrack[65]);
					int LA65_0 = input.LA(1);

					if ((LA65_0==WS))
					{
						alt65 = 1;
					}
					} finally { DebugExitDecision(65); }
					switch (alt65)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:318:16: WS
						{
						DebugLocation(318, 16);
						WS198=(IToken)Match(input,WS,Follow._WS_in_expression_list1740); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS198);


						}
						break;

					}
					} finally { DebugExitSubRule(65); }

					DebugLocation(318, 20);
					char_literal199=(IToken)Match(input,174,Follow._174_in_expression_list1743); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_174.Add(char_literal199);

					DebugLocation(318, 24);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:318:24: ( WS )?
					int alt66=2;
					try { DebugEnterSubRule(66);
					try { DebugEnterDecision(66, decisionCanBacktrack[66]);
					int LA66_0 = input.LA(1);

					if ((LA66_0==WS))
					{
						alt66 = 1;
					}
					} finally { DebugExitDecision(66); }
					switch (alt66)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:318:24: WS
						{
						DebugLocation(318, 24);
						WS200=(IToken)Match(input,WS,Follow._WS_in_expression_list1745); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS200);


						}
						break;

					}
					} finally { DebugExitSubRule(66); }

					DebugLocation(318, 28);
					PushFollow(Follow._expression_in_expression_list1748);
					expression201=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expression.Add(expression201.Tree);

					}
					break;

				default:
					goto loop67;
				}
			}

			loop67:
				;

			} finally { DebugExitSubRule(67); }



			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 318:41: -> ^( T_EXPRESSIONLIST ( expression )+ )
			{
				DebugLocation(318, 44);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:318:44: ^( T_EXPRESSIONLIST ( expression )+ )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(318, 46);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_EXPRESSIONLIST, "T_EXPRESSIONLIST"), root_1);

				DebugLocation(318, 63);
				if (!(stream_expression.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_expression.HasNext )
				{
					DebugLocation(318, 63);
					adaptor.AddChild(root_1, stream_expression.NextTree());

				}
				stream_expression.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_list", 38);
			LeaveRule("expression_list", 38);
			LeaveRule_expression_list();
	    }
	 	DebugLocation(319, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_list"); }
		return retval;

	}
	// $ANTLR end "expression_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_list_or_select_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_list_or_select_command() {}

	// $ANTLR start "expression_list_or_select_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:321:1: expression_list_or_select_command : ( ( SELECT )=> select_command | expression_list );
	[GrammarRule("expression_list_or_select_command")]
	private AstParserRuleReturnScope<object, IToken> expression_list_or_select_command()
	{
		EnterRule_expression_list_or_select_command();
		EnterRule("expression_list_or_select_command", 39);
		TraceIn("expression_list_or_select_command", 39);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> select_command202 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list203 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "expression_list_or_select_command");
		DebugLocation(321, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:322:2: ( ( SELECT )=> select_command | expression_list )
			int alt68=2;
			try { DebugEnterDecision(68, decisionCanBacktrack[68]);
			int LA68_0 = input.LA(1);

			if ((LA68_0==170))
			{
				int LA68_1 = input.LA(2);

				if ((EvaluatePredicate(synpred2_gql_fragment)))
				{
					alt68 = 1;
				}
				else if ((true))
				{
					alt68 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 68, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA68_0==SELECT) && (EvaluatePredicate(synpred2_gql_fragment)))
			{
				alt68 = 1;
			}
			else if (((LA68_0>=CASE && LA68_0<=CAST)||(LA68_0>=CONVERT && LA68_0<=COUNT)||(LA68_0>=DATEADD && LA68_0<=DATEPART)||LA68_0==EXISTS||(LA68_0>=NOT && LA68_0<=NUMBER)||LA68_0==SIMPLE_FILE||(LA68_0>=STRING && LA68_0<=SYSTEMVAR)||LA68_0==TOKEN||LA68_0==VARIABLE||LA68_0==173||LA68_0==175||LA68_0==189))
			{
				alt68 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 68, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(68); }
			switch (alt68)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:322:4: ( SELECT )=> select_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(322, 16);
				PushFollow(Follow._select_command_in_expression_list_or_select_command1777);
				select_command202=select_command();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, select_command202.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:323:4: expression_list
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(323, 4);
				PushFollow(Follow._expression_list_in_expression_list_or_select_command1782);
				expression_list203=expression_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression_list203.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_list_or_select_command", 39);
			LeaveRule("expression_list_or_select_command", 39);
			LeaveRule_expression_list_or_select_command();
	    }
	 	DebugLocation(324, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_list_or_select_command"); }
		return retval;

	}
	// $ANTLR end "expression_list_or_select_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression() {}

	// $ANTLR start "expression"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:326:1: expression : expression_7 ;
	[GrammarRule("expression")]
	private AstParserRuleReturnScope<object, IToken> expression()
	{
		EnterRule_expression();
		EnterRule("expression", 40);
		TraceIn("expression", 40);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> expression_7204 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(326, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:327:2: ( expression_7 )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:327:4: expression_7
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(327, 4);
			PushFollow(Follow._expression_7_in_expression1795);
			expression_7204=expression_7();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression_7204.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression", 40);
			LeaveRule("expression", 40);
			LeaveRule_expression();
	    }
	 	DebugLocation(328, 1);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return retval;

	}
	// $ANTLR end "expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_7() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_7() {}

	// $ANTLR start "expression_7"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:330:1: expression_7 : (a= expression_6 -> $a) ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )* ;
	[GrammarRule("expression_7")]
	private AstParserRuleReturnScope<object, IToken> expression_7()
	{
		EnterRule_expression_7();
		EnterRule("expression_7", 41);
		TraceIn("expression_7", 41);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS205 = default(IToken);
	    IToken WS207 = default(IToken);
	    IToken IN208 = default(IToken);
	    IToken WS209 = default(IToken);
	    IToken char_literal210 = default(IToken);
	    IToken WS211 = default(IToken);
	    IToken WS213 = default(IToken);
	    IToken char_literal214 = default(IToken);
	    IToken NOT215 = default(IToken);
	    IToken WS216 = default(IToken);
	    IToken IN217 = default(IToken);
	    IToken WS218 = default(IToken);
	    IToken char_literal219 = default(IToken);
	    IToken WS220 = default(IToken);
	    IToken WS222 = default(IToken);
	    IToken char_literal223 = default(IToken);
	    IToken WS225 = default(IToken);
	    IToken SOME226 = default(IToken);
	    IToken ANY227 = default(IToken);
	    IToken WS228 = default(IToken);
	    IToken char_literal229 = default(IToken);
	    IToken char_literal231 = default(IToken);
	    IToken WS233 = default(IToken);
	    IToken ALL234 = default(IToken);
	    IToken WS235 = default(IToken);
	    IToken char_literal236 = default(IToken);
	    IToken char_literal238 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_7206 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command212 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command221 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_4224 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command230 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_4232 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command237 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS205_tree = default(object);
	    object WS207_tree = default(object);
	    object IN208_tree = default(object);
	    object WS209_tree = default(object);
	    object char_literal210_tree = default(object);
	    object WS211_tree = default(object);
	    object WS213_tree = default(object);
	    object char_literal214_tree = default(object);
	    object NOT215_tree = default(object);
	    object WS216_tree = default(object);
	    object IN217_tree = default(object);
	    object WS218_tree = default(object);
	    object char_literal219_tree = default(object);
	    object WS220_tree = default(object);
	    object WS222_tree = default(object);
	    object char_literal223_tree = default(object);
	    object WS225_tree = default(object);
	    object SOME226_tree = default(object);
	    object ANY227_tree = default(object);
	    object WS228_tree = default(object);
	    object char_literal229_tree = default(object);
	    object char_literal231_tree = default(object);
	    object WS233_tree = default(object);
	    object ALL234_tree = default(object);
	    object WS235_tree = default(object);
	    object char_literal236_tree = default(object);
	    object char_literal238_tree = default(object);
	    RewriteRuleITokenStream stream_170=new RewriteRuleITokenStream(adaptor,"token 170");
	    RewriteRuleITokenStream stream_171=new RewriteRuleITokenStream(adaptor,"token 171");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_ANY=new RewriteRuleITokenStream(adaptor,"token ANY");
	    RewriteRuleITokenStream stream_IN=new RewriteRuleITokenStream(adaptor,"token IN");
	    RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");
	    RewriteRuleITokenStream stream_SOME=new RewriteRuleITokenStream(adaptor,"token SOME");
	    RewriteRuleITokenStream stream_ALL=new RewriteRuleITokenStream(adaptor,"token ALL");
	    RewriteRuleSubtreeStream stream_op_7=new RewriteRuleSubtreeStream(adaptor,"rule op_7");
	    RewriteRuleSubtreeStream stream_expression_6=new RewriteRuleSubtreeStream(adaptor,"rule expression_6");
	    RewriteRuleSubtreeStream stream_expression_list_or_select_command=new RewriteRuleSubtreeStream(adaptor,"rule expression_list_or_select_command");
	    RewriteRuleSubtreeStream stream_op_4=new RewriteRuleSubtreeStream(adaptor,"rule op_4");
		try { DebugEnterRule(GrammarFileName, "expression_7");
		DebugLocation(330, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:331:2: ( (a= expression_6 -> $a) ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:331:4: (a= expression_6 -> $a) ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )*
			{
			DebugLocation(331, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:331:4: (a= expression_6 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:331:5: a= expression_6
			{
			DebugLocation(331, 6);
			PushFollow(Follow._expression_6_in_expression_71811);
			a=expression_6();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression_6.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 331:19: -> $a
			{
				DebugLocation(331, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(331, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:331:25: ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )*
			try { DebugEnterSubRule(81);
			while (true)
			{
				int alt81=2;
				try { DebugEnterDecision(81, decisionCanBacktrack[81]);
				int LA81_0 = input.LA(1);

				if ((LA81_0==WS))
				{
					int LA81_1 = input.LA(2);

					if ((LA81_1==BETWEEN||LA81_1==IN||LA81_1==LIKE||LA81_1==MATCH||LA81_1==NOT||LA81_1==OR||(LA81_1>=165 && LA81_1<=167)||(LA81_1>=179 && LA81_1<=184)))
					{
						alt81 = 1;
					}


				}


				} finally { DebugExitDecision(81); }
				switch ( alt81 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:331:26: WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) )
					{
					DebugLocation(331, 26);
					WS205=(IToken)Match(input,WS,Follow._WS_in_expression_71818); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS205);

					DebugLocation(331, 29);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:331:29: ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) )
					int alt80=5;
					try { DebugEnterSubRule(80);
					try { DebugEnterDecision(80, decisionCanBacktrack[80]);
					switch (input.LA(1))
					{
					case BETWEEN:
					case OR:
						{
						alt80 = 1;
						}
						break;
					case NOT:
						{
						int LA80_2 = input.LA(2);

						if ((LA80_2==WS))
						{
							switch (input.LA(3))
							{
							case BETWEEN:
								{
								alt80 = 1;
								}
								break;
							case IN:
								{
								alt80 = 3;
								}
								break;
							case LIKE:
								{
								switch (input.LA(4))
								{
								case WS:
									{
									int LA80_16 = input.LA(5);

									if ((LA80_16==ANY||LA80_16==SOME))
									{
										alt80 = 4;
									}
									else if ((LA80_16==ALL))
									{
										alt80 = 5;
									}
									else
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 80, 16, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
									}
									break;
								case ANY:
								case SOME:
									{
									alt80 = 4;
									}
									break;
								case ALL:
									{
									alt80 = 5;
									}
									break;
								default:
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 80, 20, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

								}
								break;
							case MATCH:
								{
								switch (input.LA(4))
								{
								case WS:
									{
									int LA80_16 = input.LA(5);

									if ((LA80_16==ANY||LA80_16==SOME))
									{
										alt80 = 4;
									}
									else if ((LA80_16==ALL))
									{
										alt80 = 5;
									}
									else
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 80, 16, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
									}
									break;
								case ANY:
								case SOME:
									{
									alt80 = 4;
									}
									break;
								case ALL:
									{
									alt80 = 5;
									}
									break;
								default:
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 80, 21, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

								}
								break;
							default:
								{
									if (state.backtracking>0) {state.failed=true; return retval;}
									NoViableAltException nvae = new NoViableAltException("", 80, 15, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}

						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 80, 2, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case IN:
						{
						alt80 = 2;
						}
						break;
					case 182:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA80_16 = input.LA(3);

							if ((LA80_16==ANY||LA80_16==SOME))
							{
								alt80 = 4;
							}
							else if ((LA80_16==ALL))
							{
								alt80 = 5;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 80, 16, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt80 = 4;
							}
							break;
						case ALL:
							{
							alt80 = 5;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 80, 4, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 184:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA80_16 = input.LA(3);

							if ((LA80_16==ANY||LA80_16==SOME))
							{
								alt80 = 4;
							}
							else if ((LA80_16==ALL))
							{
								alt80 = 5;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 80, 16, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt80 = 4;
							}
							break;
						case ALL:
							{
							alt80 = 5;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 80, 5, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 180:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA80_16 = input.LA(3);

							if ((LA80_16==ANY||LA80_16==SOME))
							{
								alt80 = 4;
							}
							else if ((LA80_16==ALL))
							{
								alt80 = 5;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 80, 16, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt80 = 4;
							}
							break;
						case ALL:
							{
							alt80 = 5;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 80, 6, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 181:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA80_16 = input.LA(3);

							if ((LA80_16==ANY||LA80_16==SOME))
							{
								alt80 = 4;
							}
							else if ((LA80_16==ALL))
							{
								alt80 = 5;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 80, 16, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt80 = 4;
							}
							break;
						case ALL:
							{
							alt80 = 5;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 80, 7, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 166:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA80_16 = input.LA(3);

							if ((LA80_16==ANY||LA80_16==SOME))
							{
								alt80 = 4;
							}
							else if ((LA80_16==ALL))
							{
								alt80 = 5;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 80, 16, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt80 = 4;
							}
							break;
						case ALL:
							{
							alt80 = 5;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 80, 8, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 167:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA80_16 = input.LA(3);

							if ((LA80_16==ANY||LA80_16==SOME))
							{
								alt80 = 4;
							}
							else if ((LA80_16==ALL))
							{
								alt80 = 5;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 80, 16, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt80 = 4;
							}
							break;
						case ALL:
							{
							alt80 = 5;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 80, 9, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 165:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA80_16 = input.LA(3);

							if ((LA80_16==ANY||LA80_16==SOME))
							{
								alt80 = 4;
							}
							else if ((LA80_16==ALL))
							{
								alt80 = 5;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 80, 16, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt80 = 4;
							}
							break;
						case ALL:
							{
							alt80 = 5;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 80, 10, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 183:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA80_16 = input.LA(3);

							if ((LA80_16==ANY||LA80_16==SOME))
							{
								alt80 = 4;
							}
							else if ((LA80_16==ALL))
							{
								alt80 = 5;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 80, 16, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt80 = 4;
							}
							break;
						case ALL:
							{
							alt80 = 5;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 80, 11, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 179:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA80_16 = input.LA(3);

							if ((LA80_16==ANY||LA80_16==SOME))
							{
								alt80 = 4;
							}
							else if ((LA80_16==ALL))
							{
								alt80 = 5;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 80, 16, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt80 = 4;
							}
							break;
						case ALL:
							{
							alt80 = 5;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 80, 12, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case LIKE:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA80_16 = input.LA(3);

							if ((LA80_16==ANY||LA80_16==SOME))
							{
								alt80 = 4;
							}
							else if ((LA80_16==ALL))
							{
								alt80 = 5;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 80, 16, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt80 = 4;
							}
							break;
						case ALL:
							{
							alt80 = 5;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 80, 13, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case MATCH:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA80_16 = input.LA(3);

							if ((LA80_16==ANY||LA80_16==SOME))
							{
								alt80 = 4;
							}
							else if ((LA80_16==ALL))
							{
								alt80 = 5;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 80, 16, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt80 = 4;
							}
							break;
						case ALL:
							{
							alt80 = 5;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 80, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					default:
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 80, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(80); }
					switch (alt80)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:332:2: op_7 WS b= expression_6
						{
						DebugLocation(332, 2);
						PushFollow(Follow._op_7_in_expression_71823);
						op_7206=op_7();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_op_7.Add(op_7206.Tree);
						DebugLocation(332, 7);
						WS207=(IToken)Match(input,WS,Follow._WS_in_expression_71825); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS207);

						DebugLocation(332, 11);
						PushFollow(Follow._expression_6_in_expression_71829);
						b=expression_6();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expression_6.Add(b.Tree);


						{
						// AST REWRITE
						// elements: op_7, expression_7, b
						// token labels: 
						// rule labels: retval, b
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 332:25: -> ^( T_OP_BINARY op_7 $expression_7 $b)
						{
							DebugLocation(332, 28);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:332:28: ^( T_OP_BINARY op_7 $expression_7 $b)
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(332, 30);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(332, 42);
							adaptor.AddChild(root_1, stream_op_7.NextTree());
							DebugLocation(332, 48);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(332, 62);
							adaptor.AddChild(root_1, stream_b.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:333:4: IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')'
						{
						DebugLocation(333, 4);
						IN208=(IToken)Match(input,IN,Follow._IN_in_expression_71848); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_IN.Add(IN208);

						DebugLocation(333, 7);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:333:7: ( WS )?
						int alt69=2;
						try { DebugEnterSubRule(69);
						try { DebugEnterDecision(69, decisionCanBacktrack[69]);
						int LA69_0 = input.LA(1);

						if ((LA69_0==WS))
						{
							alt69 = 1;
						}
						} finally { DebugExitDecision(69); }
						switch (alt69)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:333:7: WS
							{
							DebugLocation(333, 7);
							WS209=(IToken)Match(input,WS,Follow._WS_in_expression_71850); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS209);


							}
							break;

						}
						} finally { DebugExitSubRule(69); }

						DebugLocation(333, 11);
						char_literal210=(IToken)Match(input,170,Follow._170_in_expression_71853); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_170.Add(char_literal210);

						DebugLocation(333, 15);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:333:15: ( WS )?
						int alt70=2;
						try { DebugEnterSubRule(70);
						try { DebugEnterDecision(70, decisionCanBacktrack[70]);
						int LA70_0 = input.LA(1);

						if ((LA70_0==WS))
						{
							alt70 = 1;
						}
						} finally { DebugExitDecision(70); }
						switch (alt70)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:333:15: WS
							{
							DebugLocation(333, 15);
							WS211=(IToken)Match(input,WS,Follow._WS_in_expression_71855); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS211);


							}
							break;

						}
						} finally { DebugExitSubRule(70); }

						DebugLocation(333, 19);
						PushFollow(Follow._expression_list_or_select_command_in_expression_71858);
						expression_list_or_select_command212=expression_list_or_select_command();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expression_list_or_select_command.Add(expression_list_or_select_command212.Tree);
						DebugLocation(333, 53);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:333:53: ( WS )?
						int alt71=2;
						try { DebugEnterSubRule(71);
						try { DebugEnterDecision(71, decisionCanBacktrack[71]);
						int LA71_0 = input.LA(1);

						if ((LA71_0==WS))
						{
							alt71 = 1;
						}
						} finally { DebugExitDecision(71); }
						switch (alt71)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:333:53: WS
							{
							DebugLocation(333, 53);
							WS213=(IToken)Match(input,WS,Follow._WS_in_expression_71860); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS213);


							}
							break;

						}
						} finally { DebugExitSubRule(71); }

						DebugLocation(333, 57);
						char_literal214=(IToken)Match(input,171,Follow._171_in_expression_71863); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_171.Add(char_literal214);



						{
						// AST REWRITE
						// elements: expression_list_or_select_command, expression_7
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 333:61: -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command )
						{
							DebugLocation(333, 64);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:333:64: ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(333, 66);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(333, 78);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_IN, "T_IN"));
							DebugLocation(333, 84);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(333, 97);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:334:4: NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')'
						{
						DebugLocation(334, 4);
						NOT215=(IToken)Match(input,NOT,Follow._NOT_in_expression_71881); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NOT.Add(NOT215);

						DebugLocation(334, 8);
						WS216=(IToken)Match(input,WS,Follow._WS_in_expression_71883); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS216);

						DebugLocation(334, 11);
						IN217=(IToken)Match(input,IN,Follow._IN_in_expression_71885); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_IN.Add(IN217);

						DebugLocation(334, 14);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:334:14: ( WS )?
						int alt72=2;
						try { DebugEnterSubRule(72);
						try { DebugEnterDecision(72, decisionCanBacktrack[72]);
						int LA72_0 = input.LA(1);

						if ((LA72_0==WS))
						{
							alt72 = 1;
						}
						} finally { DebugExitDecision(72); }
						switch (alt72)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:334:14: WS
							{
							DebugLocation(334, 14);
							WS218=(IToken)Match(input,WS,Follow._WS_in_expression_71887); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS218);


							}
							break;

						}
						} finally { DebugExitSubRule(72); }

						DebugLocation(334, 18);
						char_literal219=(IToken)Match(input,170,Follow._170_in_expression_71890); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_170.Add(char_literal219);

						DebugLocation(334, 22);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:334:22: ( WS )?
						int alt73=2;
						try { DebugEnterSubRule(73);
						try { DebugEnterDecision(73, decisionCanBacktrack[73]);
						int LA73_0 = input.LA(1);

						if ((LA73_0==WS))
						{
							alt73 = 1;
						}
						} finally { DebugExitDecision(73); }
						switch (alt73)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:334:22: WS
							{
							DebugLocation(334, 22);
							WS220=(IToken)Match(input,WS,Follow._WS_in_expression_71892); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS220);


							}
							break;

						}
						} finally { DebugExitSubRule(73); }

						DebugLocation(334, 26);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:334:26: ( expression_list_or_select_command )
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:334:27: expression_list_or_select_command
						{
						DebugLocation(334, 27);
						PushFollow(Follow._expression_list_or_select_command_in_expression_71896);
						expression_list_or_select_command221=expression_list_or_select_command();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expression_list_or_select_command.Add(expression_list_or_select_command221.Tree);

						}

						DebugLocation(334, 62);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:334:62: ( WS )?
						int alt74=2;
						try { DebugEnterSubRule(74);
						try { DebugEnterDecision(74, decisionCanBacktrack[74]);
						int LA74_0 = input.LA(1);

						if ((LA74_0==WS))
						{
							alt74 = 1;
						}
						} finally { DebugExitDecision(74); }
						switch (alt74)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:334:62: WS
							{
							DebugLocation(334, 62);
							WS222=(IToken)Match(input,WS,Follow._WS_in_expression_71899); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS222);


							}
							break;

						}
						} finally { DebugExitSubRule(74); }

						DebugLocation(334, 66);
						char_literal223=(IToken)Match(input,171,Follow._171_in_expression_71902); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_171.Add(char_literal223);



						{
						// AST REWRITE
						// elements: expression_7, expression_list_or_select_command
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 334:70: -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command )
						{
							DebugLocation(334, 73);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:334:73: ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(334, 75);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(334, 87);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_NOTIN, "T_NOTIN"));
							DebugLocation(334, 96);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(334, 109);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 4:
						DebugEnterAlt(4);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:335:4: op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')'
						{
						DebugLocation(335, 4);
						PushFollow(Follow._op_4_in_expression_71920);
						op_4224=op_4();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_op_4.Add(op_4224.Tree);
						DebugLocation(335, 9);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:335:9: ( WS )?
						int alt75=2;
						try { DebugEnterSubRule(75);
						try { DebugEnterDecision(75, decisionCanBacktrack[75]);
						int LA75_0 = input.LA(1);

						if ((LA75_0==WS))
						{
							alt75 = 1;
						}
						} finally { DebugExitDecision(75); }
						switch (alt75)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:335:9: WS
							{
							DebugLocation(335, 9);
							WS225=(IToken)Match(input,WS,Follow._WS_in_expression_71922); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS225);


							}
							break;

						}
						} finally { DebugExitSubRule(75); }

						DebugLocation(335, 13);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:335:13: ( SOME | ANY )
						int alt76=2;
						try { DebugEnterSubRule(76);
						try { DebugEnterDecision(76, decisionCanBacktrack[76]);
						int LA76_0 = input.LA(1);

						if ((LA76_0==SOME))
						{
							alt76 = 1;
						}
						else if ((LA76_0==ANY))
						{
							alt76 = 2;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 76, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						} finally { DebugExitDecision(76); }
						switch (alt76)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:335:14: SOME
							{
							DebugLocation(335, 14);
							SOME226=(IToken)Match(input,SOME,Follow._SOME_in_expression_71926); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_SOME.Add(SOME226);


							}
							break;
						case 2:
							DebugEnterAlt(2);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:335:21: ANY
							{
							DebugLocation(335, 21);
							ANY227=(IToken)Match(input,ANY,Follow._ANY_in_expression_71930); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_ANY.Add(ANY227);


							}
							break;

						}
						} finally { DebugExitSubRule(76); }

						DebugLocation(335, 26);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:335:26: ( WS )?
						int alt77=2;
						try { DebugEnterSubRule(77);
						try { DebugEnterDecision(77, decisionCanBacktrack[77]);
						int LA77_0 = input.LA(1);

						if ((LA77_0==WS))
						{
							alt77 = 1;
						}
						} finally { DebugExitDecision(77); }
						switch (alt77)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:335:26: WS
							{
							DebugLocation(335, 26);
							WS228=(IToken)Match(input,WS,Follow._WS_in_expression_71933); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS228);


							}
							break;

						}
						} finally { DebugExitSubRule(77); }

						DebugLocation(335, 30);
						char_literal229=(IToken)Match(input,170,Follow._170_in_expression_71936); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_170.Add(char_literal229);

						DebugLocation(335, 34);
						PushFollow(Follow._expression_list_or_select_command_in_expression_71938);
						expression_list_or_select_command230=expression_list_or_select_command();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expression_list_or_select_command.Add(expression_list_or_select_command230.Tree);
						DebugLocation(335, 68);
						char_literal231=(IToken)Match(input,171,Follow._171_in_expression_71940); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_171.Add(char_literal231);



						{
						// AST REWRITE
						// elements: op_4, expression_list_or_select_command, expression_7
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 335:72: -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command )
						{
							DebugLocation(335, 75);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:335:75: ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(335, 77);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(335, 89);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_ANY, "T_ANY"));
							DebugLocation(335, 95);
							adaptor.AddChild(root_1, stream_op_4.NextTree());
							DebugLocation(335, 101);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(335, 114);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 5:
						DebugEnterAlt(5);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:336:4: op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')'
						{
						DebugLocation(336, 4);
						PushFollow(Follow._op_4_in_expression_71960);
						op_4232=op_4();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_op_4.Add(op_4232.Tree);
						DebugLocation(336, 9);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:336:9: ( WS )?
						int alt78=2;
						try { DebugEnterSubRule(78);
						try { DebugEnterDecision(78, decisionCanBacktrack[78]);
						int LA78_0 = input.LA(1);

						if ((LA78_0==WS))
						{
							alt78 = 1;
						}
						} finally { DebugExitDecision(78); }
						switch (alt78)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:336:9: WS
							{
							DebugLocation(336, 9);
							WS233=(IToken)Match(input,WS,Follow._WS_in_expression_71962); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS233);


							}
							break;

						}
						} finally { DebugExitSubRule(78); }

						DebugLocation(336, 13);
						ALL234=(IToken)Match(input,ALL,Follow._ALL_in_expression_71965); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_ALL.Add(ALL234);

						DebugLocation(336, 17);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:336:17: ( WS )?
						int alt79=2;
						try { DebugEnterSubRule(79);
						try { DebugEnterDecision(79, decisionCanBacktrack[79]);
						int LA79_0 = input.LA(1);

						if ((LA79_0==WS))
						{
							alt79 = 1;
						}
						} finally { DebugExitDecision(79); }
						switch (alt79)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:336:17: WS
							{
							DebugLocation(336, 17);
							WS235=(IToken)Match(input,WS,Follow._WS_in_expression_71967); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS235);


							}
							break;

						}
						} finally { DebugExitSubRule(79); }

						DebugLocation(336, 21);
						char_literal236=(IToken)Match(input,170,Follow._170_in_expression_71970); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_170.Add(char_literal236);

						DebugLocation(336, 25);
						PushFollow(Follow._expression_list_or_select_command_in_expression_71972);
						expression_list_or_select_command237=expression_list_or_select_command();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expression_list_or_select_command.Add(expression_list_or_select_command237.Tree);
						DebugLocation(336, 59);
						char_literal238=(IToken)Match(input,171,Follow._171_in_expression_71974); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_171.Add(char_literal238);



						{
						// AST REWRITE
						// elements: expression_list_or_select_command, op_4, expression_7
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 336:63: -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command )
						{
							DebugLocation(336, 66);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:336:66: ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(336, 68);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(336, 80);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_ALL, "T_ALL"));
							DebugLocation(336, 86);
							adaptor.AddChild(root_1, stream_op_4.NextTree());
							DebugLocation(336, 92);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(336, 105);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;

					}
					} finally { DebugExitSubRule(80); }


					}
					break;

				default:
					goto loop81;
				}
			}

			loop81:
				;

			} finally { DebugExitSubRule(81); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_7", 41);
			LeaveRule("expression_7", 41);
			LeaveRule_expression_7();
	    }
	 	DebugLocation(338, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_7"); }
		return retval;

	}
	// $ANTLR end "expression_7"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_7() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_7() {}

	// $ANTLR start "op_7"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:340:1: op_7 : ( OR -> T_OR | BETWEEN -> T_BETWEEN | NOT WS BETWEEN -> T_NOTBETWEEN );
	[GrammarRule("op_7")]
	private AstParserRuleReturnScope<object, IToken> op_7()
	{
		EnterRule_op_7();
		EnterRule("op_7", 42);
		TraceIn("op_7", 42);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken OR239 = default(IToken);
	    IToken BETWEEN240 = default(IToken);
	    IToken NOT241 = default(IToken);
	    IToken WS242 = default(IToken);
	    IToken BETWEEN243 = default(IToken);

	    object OR239_tree = default(object);
	    object BETWEEN240_tree = default(object);
	    object NOT241_tree = default(object);
	    object WS242_tree = default(object);
	    object BETWEEN243_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");
	    RewriteRuleITokenStream stream_BETWEEN=new RewriteRuleITokenStream(adaptor,"token BETWEEN");
	    RewriteRuleITokenStream stream_OR=new RewriteRuleITokenStream(adaptor,"token OR");

		try { DebugEnterRule(GrammarFileName, "op_7");
		DebugLocation(340, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:340:6: ( OR -> T_OR | BETWEEN -> T_BETWEEN | NOT WS BETWEEN -> T_NOTBETWEEN )
			int alt82=3;
			try { DebugEnterDecision(82, decisionCanBacktrack[82]);
			switch (input.LA(1))
			{
			case OR:
				{
				alt82 = 1;
				}
				break;
			case BETWEEN:
				{
				alt82 = 2;
				}
				break;
			case NOT:
				{
				alt82 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 82, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(82); }
			switch (alt82)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:340:8: OR
				{
				DebugLocation(340, 8);
				OR239=(IToken)Match(input,OR,Follow._OR_in_op_72004); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_OR.Add(OR239);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 340:11: -> T_OR
				{
					DebugLocation(340, 14);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_OR, "T_OR"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:341:4: BETWEEN
				{
				DebugLocation(341, 4);
				BETWEEN240=(IToken)Match(input,BETWEEN,Follow._BETWEEN_in_op_72013); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_BETWEEN.Add(BETWEEN240);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 341:12: -> T_BETWEEN
				{
					DebugLocation(341, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BETWEEN, "T_BETWEEN"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:342:4: NOT WS BETWEEN
				{
				DebugLocation(342, 4);
				NOT241=(IToken)Match(input,NOT,Follow._NOT_in_op_72022); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_NOT.Add(NOT241);

				DebugLocation(342, 8);
				WS242=(IToken)Match(input,WS,Follow._WS_in_op_72024); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS242);

				DebugLocation(342, 11);
				BETWEEN243=(IToken)Match(input,BETWEEN,Follow._BETWEEN_in_op_72026); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_BETWEEN.Add(BETWEEN243);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 342:19: -> T_NOTBETWEEN
				{
					DebugLocation(342, 22);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTBETWEEN, "T_NOTBETWEEN"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_7", 42);
			LeaveRule("op_7", 42);
			LeaveRule_op_7();
	    }
	 	DebugLocation(343, 1);
		} finally { DebugExitRule(GrammarFileName, "op_7"); }
		return retval;

	}
	// $ANTLR end "op_7"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_6() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_6() {}

	// $ANTLR start "expression_6"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:345:1: expression_6 : (a= expression_5 -> $a) ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )* ;
	[GrammarRule("expression_6")]
	private AstParserRuleReturnScope<object, IToken> expression_6()
	{
		EnterRule_expression_6();
		EnterRule("expression_6", 43);
		TraceIn("expression_6", 43);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS244 = default(IToken);
	    IToken WS246 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_6245 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS244_tree = default(object);
	    object WS246_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_op_6=new RewriteRuleSubtreeStream(adaptor,"rule op_6");
	    RewriteRuleSubtreeStream stream_expression_5=new RewriteRuleSubtreeStream(adaptor,"rule expression_5");
		try { DebugEnterRule(GrammarFileName, "expression_6");
		DebugLocation(345, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:346:2: ( (a= expression_5 -> $a) ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:346:4: (a= expression_5 -> $a) ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )*
			{
			DebugLocation(346, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:346:4: (a= expression_5 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:346:5: a= expression_5
			{
			DebugLocation(346, 6);
			PushFollow(Follow._expression_5_in_expression_62045);
			a=expression_5();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression_5.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 346:19: -> $a
			{
				DebugLocation(346, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(346, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:346:25: ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )*
			try { DebugEnterSubRule(83);
			while (true)
			{
				int alt83=2;
				try { DebugEnterDecision(83, decisionCanBacktrack[83]);
				int LA83_0 = input.LA(1);

				if ((LA83_0==WS))
				{
					int LA83_1 = input.LA(2);

					if ((LA83_1==AND))
					{
						alt83 = 1;
					}


				}


				} finally { DebugExitDecision(83); }
				switch ( alt83 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:346:26: WS op_6 WS b= expression_5
					{
					DebugLocation(346, 26);
					WS244=(IToken)Match(input,WS,Follow._WS_in_expression_62052); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS244);

					DebugLocation(346, 29);
					PushFollow(Follow._op_6_in_expression_62054);
					op_6245=op_6();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_op_6.Add(op_6245.Tree);
					DebugLocation(346, 34);
					WS246=(IToken)Match(input,WS,Follow._WS_in_expression_62056); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS246);

					DebugLocation(346, 38);
					PushFollow(Follow._expression_5_in_expression_62060);
					b=expression_5();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expression_5.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, op_6, expression_6
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 346:52: -> ^( T_OP_BINARY op_6 $expression_6 $b)
					{
						DebugLocation(346, 55);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:346:55: ^( T_OP_BINARY op_6 $expression_6 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(346, 57);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(346, 69);
						adaptor.AddChild(root_1, stream_op_6.NextTree());
						DebugLocation(346, 75);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(346, 89);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop83;
				}
			}

			loop83:
				;

			} finally { DebugExitSubRule(83); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_6", 43);
			LeaveRule("expression_6", 43);
			LeaveRule_expression_6();
	    }
	 	DebugLocation(347, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_6"); }
		return retval;

	}
	// $ANTLR end "expression_6"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_6() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_6() {}

	// $ANTLR start "op_6"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:349:1: op_6 : AND -> T_AND ;
	[GrammarRule("op_6")]
	private AstParserRuleReturnScope<object, IToken> op_6()
	{
		EnterRule_op_6();
		EnterRule("op_6", 44);
		TraceIn("op_6", 44);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken AND247 = default(IToken);

	    object AND247_tree = default(object);
	    RewriteRuleITokenStream stream_AND=new RewriteRuleITokenStream(adaptor,"token AND");

		try { DebugEnterRule(GrammarFileName, "op_6");
		DebugLocation(349, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:349:6: ( AND -> T_AND )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:349:8: AND
			{
			DebugLocation(349, 8);
			AND247=(IToken)Match(input,AND,Follow._AND_in_op_62088); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_AND.Add(AND247);



			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 349:12: -> T_AND
			{
				DebugLocation(349, 15);
				adaptor.AddChild(root_0, (object)adaptor.Create(T_AND, "T_AND"));

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_6", 44);
			LeaveRule("op_6", 44);
			LeaveRule_op_6();
	    }
	 	DebugLocation(350, 1);
		} finally { DebugExitRule(GrammarFileName, "op_6"); }
		return retval;

	}
	// $ANTLR end "op_6"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_5() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_5() {}

	// $ANTLR start "expression_5"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:352:1: expression_5 : ( op_5 WS expression_5 -> ^( T_OP_UNARY op_5 expression_5 ) | expression_4 );
	[GrammarRule("expression_5")]
	private AstParserRuleReturnScope<object, IToken> expression_5()
	{
		EnterRule_expression_5();
		EnterRule("expression_5", 45);
		TraceIn("expression_5", 45);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS249 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> op_5248 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_5250 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_4251 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS249_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression_5=new RewriteRuleSubtreeStream(adaptor,"rule expression_5");
	    RewriteRuleSubtreeStream stream_op_5=new RewriteRuleSubtreeStream(adaptor,"rule op_5");
		try { DebugEnterRule(GrammarFileName, "expression_5");
		DebugLocation(352, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:353:2: ( op_5 WS expression_5 -> ^( T_OP_UNARY op_5 expression_5 ) | expression_4 )
			int alt84=2;
			try { DebugEnterDecision(84, decisionCanBacktrack[84]);
			int LA84_0 = input.LA(1);

			if ((LA84_0==NOT))
			{
				alt84 = 1;
			}
			else if (((LA84_0>=CASE && LA84_0<=CAST)||(LA84_0>=CONVERT && LA84_0<=COUNT)||(LA84_0>=DATEADD && LA84_0<=DATEPART)||LA84_0==EXISTS||LA84_0==NUMBER||LA84_0==SIMPLE_FILE||(LA84_0>=STRING && LA84_0<=SYSTEMVAR)||LA84_0==TOKEN||LA84_0==VARIABLE||LA84_0==170||LA84_0==173||LA84_0==175||LA84_0==189))
			{
				alt84 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 84, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(84); }
			switch (alt84)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:353:4: op_5 WS expression_5
				{
				DebugLocation(353, 4);
				PushFollow(Follow._op_5_in_expression_52106);
				op_5248=op_5();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_op_5.Add(op_5248.Tree);
				DebugLocation(353, 9);
				WS249=(IToken)Match(input,WS,Follow._WS_in_expression_52108); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS249);

				DebugLocation(353, 12);
				PushFollow(Follow._expression_5_in_expression_52110);
				expression_5250=expression_5();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression_5.Add(expression_5250.Tree);


				{
				// AST REWRITE
				// elements: op_5, expression_5
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 353:25: -> ^( T_OP_UNARY op_5 expression_5 )
				{
					DebugLocation(353, 28);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:353:28: ^( T_OP_UNARY op_5 expression_5 )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(353, 30);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_UNARY, "T_OP_UNARY"), root_1);

					DebugLocation(353, 41);
					adaptor.AddChild(root_1, stream_op_5.NextTree());
					DebugLocation(353, 46);
					adaptor.AddChild(root_1, stream_expression_5.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:354:4: expression_4
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(354, 4);
				PushFollow(Follow._expression_4_in_expression_52125);
				expression_4251=expression_4();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression_4251.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_5", 45);
			LeaveRule("expression_5", 45);
			LeaveRule_expression_5();
	    }
	 	DebugLocation(355, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_5"); }
		return retval;

	}
	// $ANTLR end "expression_5"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_5() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_5() {}

	// $ANTLR start "op_5"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:357:1: op_5 : NOT -> T_NOT ;
	[GrammarRule("op_5")]
	private AstParserRuleReturnScope<object, IToken> op_5()
	{
		EnterRule_op_5();
		EnterRule("op_5", 46);
		TraceIn("op_5", 46);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken NOT252 = default(IToken);

	    object NOT252_tree = default(object);
	    RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");

		try { DebugEnterRule(GrammarFileName, "op_5");
		DebugLocation(357, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:357:7: ( NOT -> T_NOT )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:357:9: NOT
			{
			DebugLocation(357, 9);
			NOT252=(IToken)Match(input,NOT,Follow._NOT_in_op_52136); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_NOT.Add(NOT252);



			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 357:13: -> T_NOT
			{
				DebugLocation(357, 16);
				adaptor.AddChild(root_0, (object)adaptor.Create(T_NOT, "T_NOT"));

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_5", 46);
			LeaveRule("op_5", 46);
			LeaveRule_op_5();
	    }
	 	DebugLocation(358, 1);
		} finally { DebugExitRule(GrammarFileName, "op_5"); }
		return retval;

	}
	// $ANTLR end "op_5"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_4() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_4() {}

	// $ANTLR start "expression_4"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:360:1: expression_4 : (a= expression_3 -> $a) ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )* ;
	[GrammarRule("expression_4")]
	private AstParserRuleReturnScope<object, IToken> expression_4()
	{
		EnterRule_expression_4();
		EnterRule("expression_4", 47);
		TraceIn("expression_4", 47);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS253 = default(IToken);
	    IToken WS255 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_4254 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS253_tree = default(object);
	    object WS255_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression_3=new RewriteRuleSubtreeStream(adaptor,"rule expression_3");
	    RewriteRuleSubtreeStream stream_op_4=new RewriteRuleSubtreeStream(adaptor,"rule op_4");
		try { DebugEnterRule(GrammarFileName, "expression_4");
		DebugLocation(360, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:361:2: ( (a= expression_3 -> $a) ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:361:4: (a= expression_3 -> $a) ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )*
			{
			DebugLocation(361, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:361:4: (a= expression_3 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:361:5: a= expression_3
			{
			DebugLocation(361, 6);
			PushFollow(Follow._expression_3_in_expression_42155);
			a=expression_3();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression_3.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 361:19: -> $a
			{
				DebugLocation(361, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(361, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:361:25: ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )*
			try { DebugEnterSubRule(87);
			while (true)
			{
				int alt87=2;
				try { DebugEnterDecision(87, decisionCanBacktrack[87]);
				int LA87_0 = input.LA(1);

				if ((LA87_0==WS))
				{
					switch (input.LA(2))
					{
					case NOT:
						{
						int LA87_4 = input.LA(3);

						if ((LA87_4==WS))
						{
							int LA87_16 = input.LA(4);

							if ((LA87_16==LIKE))
							{
								int LA87_18 = input.LA(5);

								if ((LA87_18==WS))
								{
									int LA87_17 = input.LA(6);

									if (((LA87_17>=CASE && LA87_17<=CAST)||(LA87_17>=CONVERT && LA87_17<=COUNT)||(LA87_17>=DATEADD && LA87_17<=DATEPART)||LA87_17==EXISTS||LA87_17==NUMBER||LA87_17==SIMPLE_FILE||(LA87_17>=STRING && LA87_17<=SYSTEMVAR)||LA87_17==TOKEN||LA87_17==VARIABLE||LA87_17==170||LA87_17==173||LA87_17==175||LA87_17==189))
									{
										alt87 = 1;
									}


								}
								else if (((LA87_18>=CASE && LA87_18<=CAST)||(LA87_18>=CONVERT && LA87_18<=COUNT)||(LA87_18>=DATEADD && LA87_18<=DATEPART)||LA87_18==EXISTS||LA87_18==NUMBER||LA87_18==SIMPLE_FILE||(LA87_18>=STRING && LA87_18<=SYSTEMVAR)||LA87_18==TOKEN||LA87_18==VARIABLE||LA87_18==170||LA87_18==173||LA87_18==175||LA87_18==189))
								{
									alt87 = 1;
								}


							}
							else if ((LA87_16==MATCH))
							{
								int LA87_19 = input.LA(5);

								if ((LA87_19==WS))
								{
									int LA87_17 = input.LA(6);

									if (((LA87_17>=CASE && LA87_17<=CAST)||(LA87_17>=CONVERT && LA87_17<=COUNT)||(LA87_17>=DATEADD && LA87_17<=DATEPART)||LA87_17==EXISTS||LA87_17==NUMBER||LA87_17==SIMPLE_FILE||(LA87_17>=STRING && LA87_17<=SYSTEMVAR)||LA87_17==TOKEN||LA87_17==VARIABLE||LA87_17==170||LA87_17==173||LA87_17==175||LA87_17==189))
									{
										alt87 = 1;
									}


								}
								else if (((LA87_19>=CASE && LA87_19<=CAST)||(LA87_19>=CONVERT && LA87_19<=COUNT)||(LA87_19>=DATEADD && LA87_19<=DATEPART)||LA87_19==EXISTS||LA87_19==NUMBER||LA87_19==SIMPLE_FILE||(LA87_19>=STRING && LA87_19<=SYSTEMVAR)||LA87_19==TOKEN||LA87_19==VARIABLE||LA87_19==170||LA87_19==173||LA87_19==175||LA87_19==189))
								{
									alt87 = 1;
								}


							}


						}


						}
						break;
					case 182:
						{
						int LA87_5 = input.LA(3);

						if ((LA87_5==WS))
						{
							int LA87_17 = input.LA(4);

							if (((LA87_17>=CASE && LA87_17<=CAST)||(LA87_17>=CONVERT && LA87_17<=COUNT)||(LA87_17>=DATEADD && LA87_17<=DATEPART)||LA87_17==EXISTS||LA87_17==NUMBER||LA87_17==SIMPLE_FILE||(LA87_17>=STRING && LA87_17<=SYSTEMVAR)||LA87_17==TOKEN||LA87_17==VARIABLE||LA87_17==170||LA87_17==173||LA87_17==175||LA87_17==189))
							{
								alt87 = 1;
							}


						}
						else if (((LA87_5>=CASE && LA87_5<=CAST)||(LA87_5>=CONVERT && LA87_5<=COUNT)||(LA87_5>=DATEADD && LA87_5<=DATEPART)||LA87_5==EXISTS||LA87_5==NUMBER||LA87_5==SIMPLE_FILE||(LA87_5>=STRING && LA87_5<=SYSTEMVAR)||LA87_5==TOKEN||LA87_5==VARIABLE||LA87_5==170||LA87_5==173||LA87_5==175||LA87_5==189))
						{
							alt87 = 1;
						}


						}
						break;
					case 184:
						{
						int LA87_6 = input.LA(3);

						if ((LA87_6==WS))
						{
							int LA87_17 = input.LA(4);

							if (((LA87_17>=CASE && LA87_17<=CAST)||(LA87_17>=CONVERT && LA87_17<=COUNT)||(LA87_17>=DATEADD && LA87_17<=DATEPART)||LA87_17==EXISTS||LA87_17==NUMBER||LA87_17==SIMPLE_FILE||(LA87_17>=STRING && LA87_17<=SYSTEMVAR)||LA87_17==TOKEN||LA87_17==VARIABLE||LA87_17==170||LA87_17==173||LA87_17==175||LA87_17==189))
							{
								alt87 = 1;
							}


						}
						else if (((LA87_6>=CASE && LA87_6<=CAST)||(LA87_6>=CONVERT && LA87_6<=COUNT)||(LA87_6>=DATEADD && LA87_6<=DATEPART)||LA87_6==EXISTS||LA87_6==NUMBER||LA87_6==SIMPLE_FILE||(LA87_6>=STRING && LA87_6<=SYSTEMVAR)||LA87_6==TOKEN||LA87_6==VARIABLE||LA87_6==170||LA87_6==173||LA87_6==175||LA87_6==189))
						{
							alt87 = 1;
						}


						}
						break;
					case 180:
						{
						int LA87_7 = input.LA(3);

						if ((LA87_7==WS))
						{
							int LA87_17 = input.LA(4);

							if (((LA87_17>=CASE && LA87_17<=CAST)||(LA87_17>=CONVERT && LA87_17<=COUNT)||(LA87_17>=DATEADD && LA87_17<=DATEPART)||LA87_17==EXISTS||LA87_17==NUMBER||LA87_17==SIMPLE_FILE||(LA87_17>=STRING && LA87_17<=SYSTEMVAR)||LA87_17==TOKEN||LA87_17==VARIABLE||LA87_17==170||LA87_17==173||LA87_17==175||LA87_17==189))
							{
								alt87 = 1;
							}


						}
						else if (((LA87_7>=CASE && LA87_7<=CAST)||(LA87_7>=CONVERT && LA87_7<=COUNT)||(LA87_7>=DATEADD && LA87_7<=DATEPART)||LA87_7==EXISTS||LA87_7==NUMBER||LA87_7==SIMPLE_FILE||(LA87_7>=STRING && LA87_7<=SYSTEMVAR)||LA87_7==TOKEN||LA87_7==VARIABLE||LA87_7==170||LA87_7==173||LA87_7==175||LA87_7==189))
						{
							alt87 = 1;
						}


						}
						break;
					case 181:
						{
						int LA87_8 = input.LA(3);

						if ((LA87_8==WS))
						{
							int LA87_17 = input.LA(4);

							if (((LA87_17>=CASE && LA87_17<=CAST)||(LA87_17>=CONVERT && LA87_17<=COUNT)||(LA87_17>=DATEADD && LA87_17<=DATEPART)||LA87_17==EXISTS||LA87_17==NUMBER||LA87_17==SIMPLE_FILE||(LA87_17>=STRING && LA87_17<=SYSTEMVAR)||LA87_17==TOKEN||LA87_17==VARIABLE||LA87_17==170||LA87_17==173||LA87_17==175||LA87_17==189))
							{
								alt87 = 1;
							}


						}
						else if (((LA87_8>=CASE && LA87_8<=CAST)||(LA87_8>=CONVERT && LA87_8<=COUNT)||(LA87_8>=DATEADD && LA87_8<=DATEPART)||LA87_8==EXISTS||LA87_8==NUMBER||LA87_8==SIMPLE_FILE||(LA87_8>=STRING && LA87_8<=SYSTEMVAR)||LA87_8==TOKEN||LA87_8==VARIABLE||LA87_8==170||LA87_8==173||LA87_8==175||LA87_8==189))
						{
							alt87 = 1;
						}


						}
						break;
					case 166:
						{
						int LA87_9 = input.LA(3);

						if ((LA87_9==WS))
						{
							int LA87_17 = input.LA(4);

							if (((LA87_17>=CASE && LA87_17<=CAST)||(LA87_17>=CONVERT && LA87_17<=COUNT)||(LA87_17>=DATEADD && LA87_17<=DATEPART)||LA87_17==EXISTS||LA87_17==NUMBER||LA87_17==SIMPLE_FILE||(LA87_17>=STRING && LA87_17<=SYSTEMVAR)||LA87_17==TOKEN||LA87_17==VARIABLE||LA87_17==170||LA87_17==173||LA87_17==175||LA87_17==189))
							{
								alt87 = 1;
							}


						}
						else if (((LA87_9>=CASE && LA87_9<=CAST)||(LA87_9>=CONVERT && LA87_9<=COUNT)||(LA87_9>=DATEADD && LA87_9<=DATEPART)||LA87_9==EXISTS||LA87_9==NUMBER||LA87_9==SIMPLE_FILE||(LA87_9>=STRING && LA87_9<=SYSTEMVAR)||LA87_9==TOKEN||LA87_9==VARIABLE||LA87_9==170||LA87_9==173||LA87_9==175||LA87_9==189))
						{
							alt87 = 1;
						}


						}
						break;
					case 167:
						{
						int LA87_10 = input.LA(3);

						if ((LA87_10==WS))
						{
							int LA87_17 = input.LA(4);

							if (((LA87_17>=CASE && LA87_17<=CAST)||(LA87_17>=CONVERT && LA87_17<=COUNT)||(LA87_17>=DATEADD && LA87_17<=DATEPART)||LA87_17==EXISTS||LA87_17==NUMBER||LA87_17==SIMPLE_FILE||(LA87_17>=STRING && LA87_17<=SYSTEMVAR)||LA87_17==TOKEN||LA87_17==VARIABLE||LA87_17==170||LA87_17==173||LA87_17==175||LA87_17==189))
							{
								alt87 = 1;
							}


						}
						else if (((LA87_10>=CASE && LA87_10<=CAST)||(LA87_10>=CONVERT && LA87_10<=COUNT)||(LA87_10>=DATEADD && LA87_10<=DATEPART)||LA87_10==EXISTS||LA87_10==NUMBER||LA87_10==SIMPLE_FILE||(LA87_10>=STRING && LA87_10<=SYSTEMVAR)||LA87_10==TOKEN||LA87_10==VARIABLE||LA87_10==170||LA87_10==173||LA87_10==175||LA87_10==189))
						{
							alt87 = 1;
						}


						}
						break;
					case 165:
						{
						int LA87_11 = input.LA(3);

						if ((LA87_11==WS))
						{
							int LA87_17 = input.LA(4);

							if (((LA87_17>=CASE && LA87_17<=CAST)||(LA87_17>=CONVERT && LA87_17<=COUNT)||(LA87_17>=DATEADD && LA87_17<=DATEPART)||LA87_17==EXISTS||LA87_17==NUMBER||LA87_17==SIMPLE_FILE||(LA87_17>=STRING && LA87_17<=SYSTEMVAR)||LA87_17==TOKEN||LA87_17==VARIABLE||LA87_17==170||LA87_17==173||LA87_17==175||LA87_17==189))
							{
								alt87 = 1;
							}


						}
						else if (((LA87_11>=CASE && LA87_11<=CAST)||(LA87_11>=CONVERT && LA87_11<=COUNT)||(LA87_11>=DATEADD && LA87_11<=DATEPART)||LA87_11==EXISTS||LA87_11==NUMBER||LA87_11==SIMPLE_FILE||(LA87_11>=STRING && LA87_11<=SYSTEMVAR)||LA87_11==TOKEN||LA87_11==VARIABLE||LA87_11==170||LA87_11==173||LA87_11==175||LA87_11==189))
						{
							alt87 = 1;
						}


						}
						break;
					case 183:
						{
						int LA87_12 = input.LA(3);

						if ((LA87_12==WS))
						{
							int LA87_17 = input.LA(4);

							if (((LA87_17>=CASE && LA87_17<=CAST)||(LA87_17>=CONVERT && LA87_17<=COUNT)||(LA87_17>=DATEADD && LA87_17<=DATEPART)||LA87_17==EXISTS||LA87_17==NUMBER||LA87_17==SIMPLE_FILE||(LA87_17>=STRING && LA87_17<=SYSTEMVAR)||LA87_17==TOKEN||LA87_17==VARIABLE||LA87_17==170||LA87_17==173||LA87_17==175||LA87_17==189))
							{
								alt87 = 1;
							}


						}
						else if (((LA87_12>=CASE && LA87_12<=CAST)||(LA87_12>=CONVERT && LA87_12<=COUNT)||(LA87_12>=DATEADD && LA87_12<=DATEPART)||LA87_12==EXISTS||LA87_12==NUMBER||LA87_12==SIMPLE_FILE||(LA87_12>=STRING && LA87_12<=SYSTEMVAR)||LA87_12==TOKEN||LA87_12==VARIABLE||LA87_12==170||LA87_12==173||LA87_12==175||LA87_12==189))
						{
							alt87 = 1;
						}


						}
						break;
					case 179:
						{
						int LA87_13 = input.LA(3);

						if ((LA87_13==WS))
						{
							int LA87_17 = input.LA(4);

							if (((LA87_17>=CASE && LA87_17<=CAST)||(LA87_17>=CONVERT && LA87_17<=COUNT)||(LA87_17>=DATEADD && LA87_17<=DATEPART)||LA87_17==EXISTS||LA87_17==NUMBER||LA87_17==SIMPLE_FILE||(LA87_17>=STRING && LA87_17<=SYSTEMVAR)||LA87_17==TOKEN||LA87_17==VARIABLE||LA87_17==170||LA87_17==173||LA87_17==175||LA87_17==189))
							{
								alt87 = 1;
							}


						}
						else if (((LA87_13>=CASE && LA87_13<=CAST)||(LA87_13>=CONVERT && LA87_13<=COUNT)||(LA87_13>=DATEADD && LA87_13<=DATEPART)||LA87_13==EXISTS||LA87_13==NUMBER||LA87_13==SIMPLE_FILE||(LA87_13>=STRING && LA87_13<=SYSTEMVAR)||LA87_13==TOKEN||LA87_13==VARIABLE||LA87_13==170||LA87_13==173||LA87_13==175||LA87_13==189))
						{
							alt87 = 1;
						}


						}
						break;
					case LIKE:
						{
						int LA87_14 = input.LA(3);

						if ((LA87_14==WS))
						{
							int LA87_17 = input.LA(4);

							if (((LA87_17>=CASE && LA87_17<=CAST)||(LA87_17>=CONVERT && LA87_17<=COUNT)||(LA87_17>=DATEADD && LA87_17<=DATEPART)||LA87_17==EXISTS||LA87_17==NUMBER||LA87_17==SIMPLE_FILE||(LA87_17>=STRING && LA87_17<=SYSTEMVAR)||LA87_17==TOKEN||LA87_17==VARIABLE||LA87_17==170||LA87_17==173||LA87_17==175||LA87_17==189))
							{
								alt87 = 1;
							}


						}
						else if (((LA87_14>=CASE && LA87_14<=CAST)||(LA87_14>=CONVERT && LA87_14<=COUNT)||(LA87_14>=DATEADD && LA87_14<=DATEPART)||LA87_14==EXISTS||LA87_14==NUMBER||LA87_14==SIMPLE_FILE||(LA87_14>=STRING && LA87_14<=SYSTEMVAR)||LA87_14==TOKEN||LA87_14==VARIABLE||LA87_14==170||LA87_14==173||LA87_14==175||LA87_14==189))
						{
							alt87 = 1;
						}


						}
						break;
					case MATCH:
						{
						int LA87_15 = input.LA(3);

						if ((LA87_15==WS))
						{
							int LA87_17 = input.LA(4);

							if (((LA87_17>=CASE && LA87_17<=CAST)||(LA87_17>=CONVERT && LA87_17<=COUNT)||(LA87_17>=DATEADD && LA87_17<=DATEPART)||LA87_17==EXISTS||LA87_17==NUMBER||LA87_17==SIMPLE_FILE||(LA87_17>=STRING && LA87_17<=SYSTEMVAR)||LA87_17==TOKEN||LA87_17==VARIABLE||LA87_17==170||LA87_17==173||LA87_17==175||LA87_17==189))
							{
								alt87 = 1;
							}


						}
						else if (((LA87_15>=CASE && LA87_15<=CAST)||(LA87_15>=CONVERT && LA87_15<=COUNT)||(LA87_15>=DATEADD && LA87_15<=DATEPART)||LA87_15==EXISTS||LA87_15==NUMBER||LA87_15==SIMPLE_FILE||(LA87_15>=STRING && LA87_15<=SYSTEMVAR)||LA87_15==TOKEN||LA87_15==VARIABLE||LA87_15==170||LA87_15==173||LA87_15==175||LA87_15==189))
						{
							alt87 = 1;
						}


						}
						break;
					}

				}
				else if ((LA87_0==LIKE||LA87_0==MATCH||LA87_0==NOT||(LA87_0>=165 && LA87_0<=167)||(LA87_0>=179 && LA87_0<=184)))
				{
					alt87 = 1;
				}


				} finally { DebugExitDecision(87); }
				switch ( alt87 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:361:26: ( WS )? op_4 ( WS )? b= expression_3
					{
					DebugLocation(361, 26);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:361:26: ( WS )?
					int alt85=2;
					try { DebugEnterSubRule(85);
					try { DebugEnterDecision(85, decisionCanBacktrack[85]);
					int LA85_0 = input.LA(1);

					if ((LA85_0==WS))
					{
						alt85 = 1;
					}
					} finally { DebugExitDecision(85); }
					switch (alt85)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:361:26: WS
						{
						DebugLocation(361, 26);
						WS253=(IToken)Match(input,WS,Follow._WS_in_expression_42162); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS253);


						}
						break;

					}
					} finally { DebugExitSubRule(85); }

					DebugLocation(361, 30);
					PushFollow(Follow._op_4_in_expression_42165);
					op_4254=op_4();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_op_4.Add(op_4254.Tree);
					DebugLocation(361, 35);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:361:35: ( WS )?
					int alt86=2;
					try { DebugEnterSubRule(86);
					try { DebugEnterDecision(86, decisionCanBacktrack[86]);
					int LA86_0 = input.LA(1);

					if ((LA86_0==WS))
					{
						alt86 = 1;
					}
					} finally { DebugExitDecision(86); }
					switch (alt86)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:361:35: WS
						{
						DebugLocation(361, 35);
						WS255=(IToken)Match(input,WS,Follow._WS_in_expression_42167); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS255);


						}
						break;

					}
					} finally { DebugExitSubRule(86); }

					DebugLocation(361, 40);
					PushFollow(Follow._expression_3_in_expression_42172);
					b=expression_3();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expression_3.Add(b.Tree);


					{
					// AST REWRITE
					// elements: op_4, expression_4, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 361:54: -> ^( T_OP_BINARY op_4 $expression_4 $b)
					{
						DebugLocation(361, 57);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:361:57: ^( T_OP_BINARY op_4 $expression_4 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(361, 59);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(361, 71);
						adaptor.AddChild(root_1, stream_op_4.NextTree());
						DebugLocation(361, 77);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(361, 91);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop87;
				}
			}

			loop87:
				;

			} finally { DebugExitSubRule(87); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_4", 47);
			LeaveRule("expression_4", 47);
			LeaveRule_expression_4();
	    }
	 	DebugLocation(362, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_4"); }
		return retval;

	}
	// $ANTLR end "expression_4"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_4() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_4() {}

	// $ANTLR start "op_4"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:364:1: op_4 : ( '=' -> T_EQUAL | '>=' -> T_NOTLESS | '<=' -> T_NOTGREATER | '<>' -> T_NOTEQUAL | '!=' -> T_NOTEQUAL | '!>' -> T_NOTGREATER | '!<' -> T_NOTLESS | '>' -> T_GREATER | '<' -> T_LESS | LIKE -> T_LIKE | NOT WS LIKE -> T_NOTLIKE | MATCH -> T_MATCH | NOT WS MATCH -> T_NOTMATCH );
	[GrammarRule("op_4")]
	private AstParserRuleReturnScope<object, IToken> op_4()
	{
		EnterRule_op_4();
		EnterRule("op_4", 48);
		TraceIn("op_4", 48);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal256 = default(IToken);
	    IToken string_literal257 = default(IToken);
	    IToken string_literal258 = default(IToken);
	    IToken string_literal259 = default(IToken);
	    IToken string_literal260 = default(IToken);
	    IToken string_literal261 = default(IToken);
	    IToken string_literal262 = default(IToken);
	    IToken char_literal263 = default(IToken);
	    IToken char_literal264 = default(IToken);
	    IToken LIKE265 = default(IToken);
	    IToken NOT266 = default(IToken);
	    IToken WS267 = default(IToken);
	    IToken LIKE268 = default(IToken);
	    IToken MATCH269 = default(IToken);
	    IToken NOT270 = default(IToken);
	    IToken WS271 = default(IToken);
	    IToken MATCH272 = default(IToken);

	    object char_literal256_tree = default(object);
	    object string_literal257_tree = default(object);
	    object string_literal258_tree = default(object);
	    object string_literal259_tree = default(object);
	    object string_literal260_tree = default(object);
	    object string_literal261_tree = default(object);
	    object string_literal262_tree = default(object);
	    object char_literal263_tree = default(object);
	    object char_literal264_tree = default(object);
	    object LIKE265_tree = default(object);
	    object NOT266_tree = default(object);
	    object WS267_tree = default(object);
	    object LIKE268_tree = default(object);
	    object MATCH269_tree = default(object);
	    object NOT270_tree = default(object);
	    object WS271_tree = default(object);
	    object MATCH272_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_179=new RewriteRuleITokenStream(adaptor,"token 179");
	    RewriteRuleITokenStream stream_166=new RewriteRuleITokenStream(adaptor,"token 166");
	    RewriteRuleITokenStream stream_165=new RewriteRuleITokenStream(adaptor,"token 165");
	    RewriteRuleITokenStream stream_167=new RewriteRuleITokenStream(adaptor,"token 167");
	    RewriteRuleITokenStream stream_180=new RewriteRuleITokenStream(adaptor,"token 180");
	    RewriteRuleITokenStream stream_181=new RewriteRuleITokenStream(adaptor,"token 181");
	    RewriteRuleITokenStream stream_MATCH=new RewriteRuleITokenStream(adaptor,"token MATCH");
	    RewriteRuleITokenStream stream_182=new RewriteRuleITokenStream(adaptor,"token 182");
	    RewriteRuleITokenStream stream_183=new RewriteRuleITokenStream(adaptor,"token 183");
	    RewriteRuleITokenStream stream_184=new RewriteRuleITokenStream(adaptor,"token 184");
	    RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");
	    RewriteRuleITokenStream stream_LIKE=new RewriteRuleITokenStream(adaptor,"token LIKE");

		try { DebugEnterRule(GrammarFileName, "op_4");
		DebugLocation(364, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:364:6: ( '=' -> T_EQUAL | '>=' -> T_NOTLESS | '<=' -> T_NOTGREATER | '<>' -> T_NOTEQUAL | '!=' -> T_NOTEQUAL | '!>' -> T_NOTGREATER | '!<' -> T_NOTLESS | '>' -> T_GREATER | '<' -> T_LESS | LIKE -> T_LIKE | NOT WS LIKE -> T_NOTLIKE | MATCH -> T_MATCH | NOT WS MATCH -> T_NOTMATCH )
			int alt88=13;
			try { DebugEnterDecision(88, decisionCanBacktrack[88]);
			switch (input.LA(1))
			{
			case 182:
				{
				alt88 = 1;
				}
				break;
			case 184:
				{
				alt88 = 2;
				}
				break;
			case 180:
				{
				alt88 = 3;
				}
				break;
			case 181:
				{
				alt88 = 4;
				}
				break;
			case 166:
				{
				alt88 = 5;
				}
				break;
			case 167:
				{
				alt88 = 6;
				}
				break;
			case 165:
				{
				alt88 = 7;
				}
				break;
			case 183:
				{
				alt88 = 8;
				}
				break;
			case 179:
				{
				alt88 = 9;
				}
				break;
			case LIKE:
				{
				alt88 = 10;
				}
				break;
			case NOT:
				{
				int LA88_11 = input.LA(2);

				if ((LA88_11==WS))
				{
					int LA88_13 = input.LA(3);

					if ((LA88_13==LIKE))
					{
						alt88 = 11;
					}
					else if ((LA88_13==MATCH))
					{
						alt88 = 13;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 88, 13, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 11, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case MATCH:
				{
				alt88 = 12;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(88); }
			switch (alt88)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:364:8: '='
				{
				DebugLocation(364, 8);
				char_literal256=(IToken)Match(input,182,Follow._182_in_op_42198); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_182.Add(char_literal256);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 364:12: -> T_EQUAL
				{
					DebugLocation(364, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_EQUAL, "T_EQUAL"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:365:4: '>='
				{
				DebugLocation(365, 4);
				string_literal257=(IToken)Match(input,184,Follow._184_in_op_42207); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_184.Add(string_literal257);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 365:9: -> T_NOTLESS
				{
					DebugLocation(365, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTLESS, "T_NOTLESS"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:366:4: '<='
				{
				DebugLocation(366, 4);
				string_literal258=(IToken)Match(input,180,Follow._180_in_op_42217); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_180.Add(string_literal258);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 366:9: -> T_NOTGREATER
				{
					DebugLocation(366, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTGREATER, "T_NOTGREATER"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:367:4: '<>'
				{
				DebugLocation(367, 4);
				string_literal259=(IToken)Match(input,181,Follow._181_in_op_42227); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_181.Add(string_literal259);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 367:9: -> T_NOTEQUAL
				{
					DebugLocation(367, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTEQUAL, "T_NOTEQUAL"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:368:4: '!='
				{
				DebugLocation(368, 4);
				string_literal260=(IToken)Match(input,166,Follow._166_in_op_42236); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_166.Add(string_literal260);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 368:9: -> T_NOTEQUAL
				{
					DebugLocation(368, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTEQUAL, "T_NOTEQUAL"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:369:4: '!>'
				{
				DebugLocation(369, 4);
				string_literal261=(IToken)Match(input,167,Follow._167_in_op_42245); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_167.Add(string_literal261);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 369:9: -> T_NOTGREATER
				{
					DebugLocation(369, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTGREATER, "T_NOTGREATER"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:370:4: '!<'
				{
				DebugLocation(370, 4);
				string_literal262=(IToken)Match(input,165,Follow._165_in_op_42254); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_165.Add(string_literal262);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 370:9: -> T_NOTLESS
				{
					DebugLocation(370, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTLESS, "T_NOTLESS"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:371:4: '>'
				{
				DebugLocation(371, 4);
				char_literal263=(IToken)Match(input,183,Follow._183_in_op_42263); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_183.Add(char_literal263);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 371:8: -> T_GREATER
				{
					DebugLocation(371, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_GREATER, "T_GREATER"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:372:4: '<'
				{
				DebugLocation(372, 4);
				char_literal264=(IToken)Match(input,179,Follow._179_in_op_42273); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_179.Add(char_literal264);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 372:8: -> T_LESS
				{
					DebugLocation(372, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_LESS, "T_LESS"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:373:4: LIKE
				{
				DebugLocation(373, 4);
				LIKE265=(IToken)Match(input,LIKE,Follow._LIKE_in_op_42282); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LIKE.Add(LIKE265);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 373:9: -> T_LIKE
				{
					DebugLocation(373, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_LIKE, "T_LIKE"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:374:4: NOT WS LIKE
				{
				DebugLocation(374, 4);
				NOT266=(IToken)Match(input,NOT,Follow._NOT_in_op_42291); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_NOT.Add(NOT266);

				DebugLocation(374, 8);
				WS267=(IToken)Match(input,WS,Follow._WS_in_op_42293); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS267);

				DebugLocation(374, 11);
				LIKE268=(IToken)Match(input,LIKE,Follow._LIKE_in_op_42295); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LIKE.Add(LIKE268);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 374:16: -> T_NOTLIKE
				{
					DebugLocation(374, 19);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTLIKE, "T_NOTLIKE"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:375:4: MATCH
				{
				DebugLocation(375, 4);
				MATCH269=(IToken)Match(input,MATCH,Follow._MATCH_in_op_42304); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_MATCH.Add(MATCH269);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 375:10: -> T_MATCH
				{
					DebugLocation(375, 13);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MATCH, "T_MATCH"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:376:4: NOT WS MATCH
				{
				DebugLocation(376, 4);
				NOT270=(IToken)Match(input,NOT,Follow._NOT_in_op_42313); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_NOT.Add(NOT270);

				DebugLocation(376, 8);
				WS271=(IToken)Match(input,WS,Follow._WS_in_op_42315); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS271);

				DebugLocation(376, 11);
				MATCH272=(IToken)Match(input,MATCH,Follow._MATCH_in_op_42317); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_MATCH.Add(MATCH272);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 376:17: -> T_NOTMATCH
				{
					DebugLocation(376, 20);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTMATCH, "T_NOTMATCH"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_4", 48);
			LeaveRule("op_4", 48);
			LeaveRule_op_4();
	    }
	 	DebugLocation(377, 1);
		} finally { DebugExitRule(GrammarFileName, "op_4"); }
		return retval;

	}
	// $ANTLR end "op_4"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_3() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_3() {}

	// $ANTLR start "expression_3"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:379:1: expression_3 : (a= expression_2 -> $a) ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )* ;
	[GrammarRule("expression_3")]
	private AstParserRuleReturnScope<object, IToken> expression_3()
	{
		EnterRule_expression_3();
		EnterRule("expression_3", 49);
		TraceIn("expression_3", 49);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS273 = default(IToken);
	    IToken WS275 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_3274 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS273_tree = default(object);
	    object WS275_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_op_3=new RewriteRuleSubtreeStream(adaptor,"rule op_3");
	    RewriteRuleSubtreeStream stream_expression_2=new RewriteRuleSubtreeStream(adaptor,"rule expression_2");
		try { DebugEnterRule(GrammarFileName, "expression_3");
		DebugLocation(379, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:380:2: ( (a= expression_2 -> $a) ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:380:4: (a= expression_2 -> $a) ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )*
			{
			DebugLocation(380, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:380:4: (a= expression_2 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:380:5: a= expression_2
			{
			DebugLocation(380, 6);
			PushFollow(Follow._expression_2_in_expression_32336);
			a=expression_2();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression_2.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 380:19: -> $a
			{
				DebugLocation(380, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(380, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:380:25: ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )*
			try { DebugEnterSubRule(91);
			while (true)
			{
				int alt91=2;
				try { DebugEnterDecision(91, decisionCanBacktrack[91]);
				int LA91_0 = input.LA(1);

				if ((LA91_0==WS))
				{
					int LA91_1 = input.LA(2);

					if ((LA91_1==169||LA91_1==173||LA91_1==175||(LA91_1>=187 && LA91_1<=188)))
					{
						alt91 = 1;
					}


				}
				else if ((LA91_0==169||LA91_0==173||LA91_0==175||(LA91_0>=187 && LA91_0<=188)))
				{
					alt91 = 1;
				}


				} finally { DebugExitDecision(91); }
				switch ( alt91 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:380:26: ( WS )? op_3 ( WS )? b= expression_2
					{
					DebugLocation(380, 26);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:380:26: ( WS )?
					int alt89=2;
					try { DebugEnterSubRule(89);
					try { DebugEnterDecision(89, decisionCanBacktrack[89]);
					int LA89_0 = input.LA(1);

					if ((LA89_0==WS))
					{
						alt89 = 1;
					}
					} finally { DebugExitDecision(89); }
					switch (alt89)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:380:26: WS
						{
						DebugLocation(380, 26);
						WS273=(IToken)Match(input,WS,Follow._WS_in_expression_32343); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS273);


						}
						break;

					}
					} finally { DebugExitSubRule(89); }

					DebugLocation(380, 30);
					PushFollow(Follow._op_3_in_expression_32346);
					op_3274=op_3();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_op_3.Add(op_3274.Tree);
					DebugLocation(380, 35);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:380:35: ( WS )?
					int alt90=2;
					try { DebugEnterSubRule(90);
					try { DebugEnterDecision(90, decisionCanBacktrack[90]);
					int LA90_0 = input.LA(1);

					if ((LA90_0==WS))
					{
						alt90 = 1;
					}
					} finally { DebugExitDecision(90); }
					switch (alt90)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:380:35: WS
						{
						DebugLocation(380, 35);
						WS275=(IToken)Match(input,WS,Follow._WS_in_expression_32348); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS275);


						}
						break;

					}
					} finally { DebugExitSubRule(90); }

					DebugLocation(380, 40);
					PushFollow(Follow._expression_2_in_expression_32353);
					b=expression_2();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expression_2.Add(b.Tree);


					{
					// AST REWRITE
					// elements: op_3, expression_3, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 380:54: -> ^( T_OP_BINARY op_3 $expression_3 $b)
					{
						DebugLocation(380, 57);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:380:57: ^( T_OP_BINARY op_3 $expression_3 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(380, 59);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(380, 71);
						adaptor.AddChild(root_1, stream_op_3.NextTree());
						DebugLocation(380, 77);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(380, 91);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop91;
				}
			}

			loop91:
				;

			} finally { DebugExitSubRule(91); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_3", 49);
			LeaveRule("expression_3", 49);
			LeaveRule_expression_3();
	    }
	 	DebugLocation(381, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_3"); }
		return retval;

	}
	// $ANTLR end "expression_3"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_3() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_3() {}

	// $ANTLR start "op_3"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:383:1: op_3 : ( '+' -> T_PLUS | '-' -> T_MINUS | '&' -> T_BITWISE_AND | '|' -> T_BITWISE_OR | '^' -> T_BITWISE_XOR );
	[GrammarRule("op_3")]
	private AstParserRuleReturnScope<object, IToken> op_3()
	{
		EnterRule_op_3();
		EnterRule("op_3", 50);
		TraceIn("op_3", 50);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal276 = default(IToken);
	    IToken char_literal277 = default(IToken);
	    IToken char_literal278 = default(IToken);
	    IToken char_literal279 = default(IToken);
	    IToken char_literal280 = default(IToken);

	    object char_literal276_tree = default(object);
	    object char_literal277_tree = default(object);
	    object char_literal278_tree = default(object);
	    object char_literal279_tree = default(object);
	    object char_literal280_tree = default(object);
	    RewriteRuleITokenStream stream_175=new RewriteRuleITokenStream(adaptor,"token 175");
	    RewriteRuleITokenStream stream_173=new RewriteRuleITokenStream(adaptor,"token 173");
	    RewriteRuleITokenStream stream_188=new RewriteRuleITokenStream(adaptor,"token 188");
	    RewriteRuleITokenStream stream_187=new RewriteRuleITokenStream(adaptor,"token 187");
	    RewriteRuleITokenStream stream_169=new RewriteRuleITokenStream(adaptor,"token 169");

		try { DebugEnterRule(GrammarFileName, "op_3");
		DebugLocation(383, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:383:6: ( '+' -> T_PLUS | '-' -> T_MINUS | '&' -> T_BITWISE_AND | '|' -> T_BITWISE_OR | '^' -> T_BITWISE_XOR )
			int alt92=5;
			try { DebugEnterDecision(92, decisionCanBacktrack[92]);
			switch (input.LA(1))
			{
			case 173:
				{
				alt92 = 1;
				}
				break;
			case 175:
				{
				alt92 = 2;
				}
				break;
			case 169:
				{
				alt92 = 3;
				}
				break;
			case 188:
				{
				alt92 = 4;
				}
				break;
			case 187:
				{
				alt92 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 92, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(92); }
			switch (alt92)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:383:8: '+'
				{
				DebugLocation(383, 8);
				char_literal276=(IToken)Match(input,173,Follow._173_in_op_32379); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_173.Add(char_literal276);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 383:12: -> T_PLUS
				{
					DebugLocation(383, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_PLUS, "T_PLUS"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:384:4: '-'
				{
				DebugLocation(384, 4);
				char_literal277=(IToken)Match(input,175,Follow._175_in_op_32388); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_175.Add(char_literal277);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 384:8: -> T_MINUS
				{
					DebugLocation(384, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MINUS, "T_MINUS"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:385:4: '&'
				{
				DebugLocation(385, 4);
				char_literal278=(IToken)Match(input,169,Follow._169_in_op_32397); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_169.Add(char_literal278);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 385:8: -> T_BITWISE_AND
				{
					DebugLocation(385, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_AND, "T_BITWISE_AND"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:386:4: '|'
				{
				DebugLocation(386, 4);
				char_literal279=(IToken)Match(input,188,Follow._188_in_op_32406); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_188.Add(char_literal279);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 386:8: -> T_BITWISE_OR
				{
					DebugLocation(386, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_OR, "T_BITWISE_OR"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:387:4: '^'
				{
				DebugLocation(387, 4);
				char_literal280=(IToken)Match(input,187,Follow._187_in_op_32415); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_187.Add(char_literal280);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 387:8: -> T_BITWISE_XOR
				{
					DebugLocation(387, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_XOR, "T_BITWISE_XOR"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_3", 50);
			LeaveRule("op_3", 50);
			LeaveRule_op_3();
	    }
	 	DebugLocation(388, 1);
		} finally { DebugExitRule(GrammarFileName, "op_3"); }
		return retval;

	}
	// $ANTLR end "op_3"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_2() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_2() {}

	// $ANTLR start "expression_2"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:390:1: expression_2 : (a= expression_1 -> $a) ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )* ;
	[GrammarRule("expression_2")]
	private AstParserRuleReturnScope<object, IToken> expression_2()
	{
		EnterRule_expression_2();
		EnterRule("expression_2", 51);
		TraceIn("expression_2", 51);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS281 = default(IToken);
	    IToken WS283 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_2282 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS281_tree = default(object);
	    object WS283_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_op_2=new RewriteRuleSubtreeStream(adaptor,"rule op_2");
	    RewriteRuleSubtreeStream stream_expression_1=new RewriteRuleSubtreeStream(adaptor,"rule expression_1");
		try { DebugEnterRule(GrammarFileName, "expression_2");
		DebugLocation(390, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:391:2: ( (a= expression_1 -> $a) ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:391:4: (a= expression_1 -> $a) ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )*
			{
			DebugLocation(391, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:391:4: (a= expression_1 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:391:5: a= expression_1
			{
			DebugLocation(391, 6);
			PushFollow(Follow._expression_1_in_expression_22435);
			a=expression_1();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression_1.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 391:19: -> $a
			{
				DebugLocation(391, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(391, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:391:25: ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )*
			try { DebugEnterSubRule(95);
			while (true)
			{
				int alt95=2;
				try { DebugEnterDecision(95, decisionCanBacktrack[95]);
				int LA95_0 = input.LA(1);

				if ((LA95_0==WS))
				{
					int LA95_1 = input.LA(2);

					if ((LA95_1==168||LA95_1==172||LA95_1==177))
					{
						alt95 = 1;
					}


				}
				else if ((LA95_0==168||LA95_0==172||LA95_0==177))
				{
					alt95 = 1;
				}


				} finally { DebugExitDecision(95); }
				switch ( alt95 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:391:26: ( WS )? op_2 ( WS )? b= expression_1
					{
					DebugLocation(391, 26);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:391:26: ( WS )?
					int alt93=2;
					try { DebugEnterSubRule(93);
					try { DebugEnterDecision(93, decisionCanBacktrack[93]);
					int LA93_0 = input.LA(1);

					if ((LA93_0==WS))
					{
						alt93 = 1;
					}
					} finally { DebugExitDecision(93); }
					switch (alt93)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:391:26: WS
						{
						DebugLocation(391, 26);
						WS281=(IToken)Match(input,WS,Follow._WS_in_expression_22442); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS281);


						}
						break;

					}
					} finally { DebugExitSubRule(93); }

					DebugLocation(391, 30);
					PushFollow(Follow._op_2_in_expression_22445);
					op_2282=op_2();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_op_2.Add(op_2282.Tree);
					DebugLocation(391, 35);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:391:35: ( WS )?
					int alt94=2;
					try { DebugEnterSubRule(94);
					try { DebugEnterDecision(94, decisionCanBacktrack[94]);
					int LA94_0 = input.LA(1);

					if ((LA94_0==WS))
					{
						alt94 = 1;
					}
					} finally { DebugExitDecision(94); }
					switch (alt94)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:391:35: WS
						{
						DebugLocation(391, 35);
						WS283=(IToken)Match(input,WS,Follow._WS_in_expression_22447); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS283);


						}
						break;

					}
					} finally { DebugExitSubRule(94); }

					DebugLocation(391, 40);
					PushFollow(Follow._expression_1_in_expression_22452);
					b=expression_1();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expression_1.Add(b.Tree);


					{
					// AST REWRITE
					// elements: expression_2, op_2, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 391:54: -> ^( T_OP_BINARY op_2 $expression_2 $b)
					{
						DebugLocation(391, 57);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:391:57: ^( T_OP_BINARY op_2 $expression_2 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(391, 59);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(391, 71);
						adaptor.AddChild(root_1, stream_op_2.NextTree());
						DebugLocation(391, 77);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(391, 91);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop95;
				}
			}

			loop95:
				;

			} finally { DebugExitSubRule(95); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_2", 51);
			LeaveRule("expression_2", 51);
			LeaveRule_expression_2();
	    }
	 	DebugLocation(392, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_2"); }
		return retval;

	}
	// $ANTLR end "expression_2"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_2() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_2() {}

	// $ANTLR start "op_2"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:394:1: op_2 : ( '*' -> T_PRODUCT | '/' -> T_DIVIDE | '%' -> T_MODULO );
	[GrammarRule("op_2")]
	private AstParserRuleReturnScope<object, IToken> op_2()
	{
		EnterRule_op_2();
		EnterRule("op_2", 52);
		TraceIn("op_2", 52);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal284 = default(IToken);
	    IToken char_literal285 = default(IToken);
	    IToken char_literal286 = default(IToken);

	    object char_literal284_tree = default(object);
	    object char_literal285_tree = default(object);
	    object char_literal286_tree = default(object);
	    RewriteRuleITokenStream stream_172=new RewriteRuleITokenStream(adaptor,"token 172");
	    RewriteRuleITokenStream stream_177=new RewriteRuleITokenStream(adaptor,"token 177");
	    RewriteRuleITokenStream stream_168=new RewriteRuleITokenStream(adaptor,"token 168");

		try { DebugEnterRule(GrammarFileName, "op_2");
		DebugLocation(394, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:394:6: ( '*' -> T_PRODUCT | '/' -> T_DIVIDE | '%' -> T_MODULO )
			int alt96=3;
			try { DebugEnterDecision(96, decisionCanBacktrack[96]);
			switch (input.LA(1))
			{
			case 172:
				{
				alt96 = 1;
				}
				break;
			case 177:
				{
				alt96 = 2;
				}
				break;
			case 168:
				{
				alt96 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 96, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(96); }
			switch (alt96)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:394:8: '*'
				{
				DebugLocation(394, 8);
				char_literal284=(IToken)Match(input,172,Follow._172_in_op_22478); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_172.Add(char_literal284);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 394:12: -> T_PRODUCT
				{
					DebugLocation(394, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_PRODUCT, "T_PRODUCT"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:395:4: '/'
				{
				DebugLocation(395, 4);
				char_literal285=(IToken)Match(input,177,Follow._177_in_op_22487); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_177.Add(char_literal285);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 395:8: -> T_DIVIDE
				{
					DebugLocation(395, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_DIVIDE, "T_DIVIDE"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:396:4: '%'
				{
				DebugLocation(396, 4);
				char_literal286=(IToken)Match(input,168,Follow._168_in_op_22496); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_168.Add(char_literal286);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 396:8: -> T_MODULO
				{
					DebugLocation(396, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MODULO, "T_MODULO"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_2", 52);
			LeaveRule("op_2", 52);
			LeaveRule_op_2();
	    }
	 	DebugLocation(397, 1);
		} finally { DebugExitRule(GrammarFileName, "op_2"); }
		return retval;

	}
	// $ANTLR end "op_2"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_1() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_1() {}

	// $ANTLR start "expression_1"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:399:1: expression_1 : ( op_1 ( WS )? expression_1 -> ^( T_OP_UNARY op_1 expression_1 ) | expression_atom );
	[GrammarRule("expression_1")]
	private AstParserRuleReturnScope<object, IToken> expression_1()
	{
		EnterRule_expression_1();
		EnterRule("expression_1", 53);
		TraceIn("expression_1", 53);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS288 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> op_1287 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_1289 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_atom290 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS288_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression_1=new RewriteRuleSubtreeStream(adaptor,"rule expression_1");
	    RewriteRuleSubtreeStream stream_op_1=new RewriteRuleSubtreeStream(adaptor,"rule op_1");
		try { DebugEnterRule(GrammarFileName, "expression_1");
		DebugLocation(399, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:400:2: ( op_1 ( WS )? expression_1 -> ^( T_OP_UNARY op_1 expression_1 ) | expression_atom )
			int alt98=2;
			try { DebugEnterDecision(98, decisionCanBacktrack[98]);
			int LA98_0 = input.LA(1);

			if ((LA98_0==173||LA98_0==175||LA98_0==189))
			{
				alt98 = 1;
			}
			else if (((LA98_0>=CASE && LA98_0<=CAST)||(LA98_0>=CONVERT && LA98_0<=COUNT)||(LA98_0>=DATEADD && LA98_0<=DATEPART)||LA98_0==EXISTS||LA98_0==NUMBER||LA98_0==SIMPLE_FILE||(LA98_0>=STRING && LA98_0<=SYSTEMVAR)||LA98_0==TOKEN||LA98_0==VARIABLE||LA98_0==170))
			{
				alt98 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 98, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(98); }
			switch (alt98)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:400:4: op_1 ( WS )? expression_1
				{
				DebugLocation(400, 4);
				PushFollow(Follow._op_1_in_expression_12512);
				op_1287=op_1();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_op_1.Add(op_1287.Tree);
				DebugLocation(400, 9);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:400:9: ( WS )?
				int alt97=2;
				try { DebugEnterSubRule(97);
				try { DebugEnterDecision(97, decisionCanBacktrack[97]);
				int LA97_0 = input.LA(1);

				if ((LA97_0==WS))
				{
					alt97 = 1;
				}
				} finally { DebugExitDecision(97); }
				switch (alt97)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:400:9: WS
					{
					DebugLocation(400, 9);
					WS288=(IToken)Match(input,WS,Follow._WS_in_expression_12514); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS288);


					}
					break;

				}
				} finally { DebugExitSubRule(97); }

				DebugLocation(400, 13);
				PushFollow(Follow._expression_1_in_expression_12517);
				expression_1289=expression_1();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression_1.Add(expression_1289.Tree);


				{
				// AST REWRITE
				// elements: expression_1, op_1
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 400:26: -> ^( T_OP_UNARY op_1 expression_1 )
				{
					DebugLocation(400, 29);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:400:29: ^( T_OP_UNARY op_1 expression_1 )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(400, 31);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_UNARY, "T_OP_UNARY"), root_1);

					DebugLocation(400, 42);
					adaptor.AddChild(root_1, stream_op_1.NextTree());
					DebugLocation(400, 47);
					adaptor.AddChild(root_1, stream_expression_1.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:401:4: expression_atom
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(401, 4);
				PushFollow(Follow._expression_atom_in_expression_12532);
				expression_atom290=expression_atom();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression_atom290.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_1", 53);
			LeaveRule("expression_1", 53);
			LeaveRule_expression_1();
	    }
	 	DebugLocation(402, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_1"); }
		return retval;

	}
	// $ANTLR end "expression_1"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_1() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_1() {}

	// $ANTLR start "op_1"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:404:1: op_1 : ( '~' -> T_BITWISE_NOT | '+' -> T_PLUS | '-' -> T_MINUS );
	[GrammarRule("op_1")]
	private AstParserRuleReturnScope<object, IToken> op_1()
	{
		EnterRule_op_1();
		EnterRule("op_1", 54);
		TraceIn("op_1", 54);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal291 = default(IToken);
	    IToken char_literal292 = default(IToken);
	    IToken char_literal293 = default(IToken);

	    object char_literal291_tree = default(object);
	    object char_literal292_tree = default(object);
	    object char_literal293_tree = default(object);
	    RewriteRuleITokenStream stream_175=new RewriteRuleITokenStream(adaptor,"token 175");
	    RewriteRuleITokenStream stream_173=new RewriteRuleITokenStream(adaptor,"token 173");
	    RewriteRuleITokenStream stream_189=new RewriteRuleITokenStream(adaptor,"token 189");

		try { DebugEnterRule(GrammarFileName, "op_1");
		DebugLocation(404, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:404:6: ( '~' -> T_BITWISE_NOT | '+' -> T_PLUS | '-' -> T_MINUS )
			int alt99=3;
			try { DebugEnterDecision(99, decisionCanBacktrack[99]);
			switch (input.LA(1))
			{
			case 189:
				{
				alt99 = 1;
				}
				break;
			case 173:
				{
				alt99 = 2;
				}
				break;
			case 175:
				{
				alt99 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 99, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(99); }
			switch (alt99)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:404:8: '~'
				{
				DebugLocation(404, 8);
				char_literal291=(IToken)Match(input,189,Follow._189_in_op_12542); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_189.Add(char_literal291);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 404:12: -> T_BITWISE_NOT
				{
					DebugLocation(404, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_NOT, "T_BITWISE_NOT"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:405:5: '+'
				{
				DebugLocation(405, 5);
				char_literal292=(IToken)Match(input,173,Follow._173_in_op_12552); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_173.Add(char_literal292);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 405:9: -> T_PLUS
				{
					DebugLocation(405, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_PLUS, "T_PLUS"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:406:4: '-'
				{
				DebugLocation(406, 4);
				char_literal293=(IToken)Match(input,175,Follow._175_in_op_12561); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_175.Add(char_literal293);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 406:8: -> T_MINUS
				{
					DebugLocation(406, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MINUS, "T_MINUS"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_1", 54);
			LeaveRule("op_1", 54);
			LeaveRule_op_1();
	    }
	 	DebugLocation(407, 1);
		} finally { DebugExitRule(GrammarFileName, "op_1"); }
		return retval;

	}
	// $ANTLR end "op_1"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_atom() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_atom() {}

	// $ANTLR start "expression_atom"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:409:1: expression_atom : ( number -> ^( T_NUMBER number ) | string | SYSTEMVAR -> ^( T_SYSTEMVAR SYSTEMVAR ) | variable | ( subquery )=> subquery | '(' expression ')' -> expression | functioncall_or_column | specialfunctioncall | case | EXISTS ( WS )? '(' ( WS )? select_command ( WS )? ')' -> ^( T_EXISTS select_command ) );
	[GrammarRule("expression_atom")]
	private AstParserRuleReturnScope<object, IToken> expression_atom()
	{
		EnterRule_expression_atom();
		EnterRule("expression_atom", 55);
		TraceIn("expression_atom", 55);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken SYSTEMVAR296 = default(IToken);
	    IToken char_literal299 = default(IToken);
	    IToken char_literal301 = default(IToken);
	    IToken EXISTS305 = default(IToken);
	    IToken WS306 = default(IToken);
	    IToken char_literal307 = default(IToken);
	    IToken WS308 = default(IToken);
	    IToken WS310 = default(IToken);
	    IToken char_literal311 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> number294 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> string295 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> variable297 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> subquery298 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression300 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> functioncall_or_column302 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> specialfunctioncall303 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> case304 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> select_command309 = default(AstParserRuleReturnScope<object, IToken>);

	    object SYSTEMVAR296_tree = default(object);
	    object char_literal299_tree = default(object);
	    object char_literal301_tree = default(object);
	    object EXISTS305_tree = default(object);
	    object WS306_tree = default(object);
	    object char_literal307_tree = default(object);
	    object WS308_tree = default(object);
	    object WS310_tree = default(object);
	    object char_literal311_tree = default(object);
	    RewriteRuleITokenStream stream_170=new RewriteRuleITokenStream(adaptor,"token 170");
	    RewriteRuleITokenStream stream_171=new RewriteRuleITokenStream(adaptor,"token 171");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_EXISTS=new RewriteRuleITokenStream(adaptor,"token EXISTS");
	    RewriteRuleITokenStream stream_SYSTEMVAR=new RewriteRuleITokenStream(adaptor,"token SYSTEMVAR");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_select_command=new RewriteRuleSubtreeStream(adaptor,"rule select_command");
	    RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
		try { DebugEnterRule(GrammarFileName, "expression_atom");
		DebugLocation(409, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:410:2: ( number -> ^( T_NUMBER number ) | string | SYSTEMVAR -> ^( T_SYSTEMVAR SYSTEMVAR ) | variable | ( subquery )=> subquery | '(' expression ')' -> expression | functioncall_or_column | specialfunctioncall | case | EXISTS ( WS )? '(' ( WS )? select_command ( WS )? ')' -> ^( T_EXISTS select_command ) )
			int alt103=10;
			try { DebugEnterDecision(103, decisionCanBacktrack[103]);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt103 = 1;
				}
				break;
			case STRING:
				{
				alt103 = 2;
				}
				break;
			case SYSTEMVAR:
				{
				alt103 = 3;
				}
				break;
			case VARIABLE:
				{
				alt103 = 4;
				}
				break;
			case 170:
				{
				int LA103_5 = input.LA(2);

				if ((EvaluatePredicate(synpred3_gql_fragment)))
				{
					alt103 = 5;
				}
				else if ((true))
				{
					alt103 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 103, 5, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case COUNT:
			case SIMPLE_FILE:
			case TOKEN:
				{
				alt103 = 7;
				}
				break;
			case CAST:
			case CONVERT:
			case DATEADD:
			case DATEDIFF:
			case DATEPART:
				{
				alt103 = 8;
				}
				break;
			case CASE:
				{
				alt103 = 9;
				}
				break;
			case EXISTS:
				{
				alt103 = 10;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 103, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(103); }
			switch (alt103)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:410:4: number
				{
				DebugLocation(410, 4);
				PushFollow(Follow._number_in_expression_atom2576);
				number294=number();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_number.Add(number294.Tree);


				{
				// AST REWRITE
				// elements: number
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 410:11: -> ^( T_NUMBER number )
				{
					DebugLocation(410, 14);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:410:14: ^( T_NUMBER number )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(410, 16);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_NUMBER, "T_NUMBER"), root_1);

					DebugLocation(410, 25);
					adaptor.AddChild(root_1, stream_number.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:411:4: string
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(411, 4);
				PushFollow(Follow._string_in_expression_atom2589);
				string295=@string();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, string295.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:412:4: SYSTEMVAR
				{
				DebugLocation(412, 4);
				SYSTEMVAR296=(IToken)Match(input,SYSTEMVAR,Follow._SYSTEMVAR_in_expression_atom2594); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SYSTEMVAR.Add(SYSTEMVAR296);



				{
				// AST REWRITE
				// elements: SYSTEMVAR
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 412:14: -> ^( T_SYSTEMVAR SYSTEMVAR )
				{
					DebugLocation(412, 17);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:412:17: ^( T_SYSTEMVAR SYSTEMVAR )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(412, 19);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SYSTEMVAR, "T_SYSTEMVAR"), root_1);

					DebugLocation(412, 31);
					adaptor.AddChild(root_1, stream_SYSTEMVAR.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:413:4: variable
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(413, 4);
				PushFollow(Follow._variable_in_expression_atom2607);
				variable297=variable();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variable297.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:414:4: ( subquery )=> subquery
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(414, 18);
				PushFollow(Follow._subquery_in_expression_atom2618);
				subquery298=subquery();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, subquery298.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:415:4: '(' expression ')'
				{
				DebugLocation(415, 4);
				char_literal299=(IToken)Match(input,170,Follow._170_in_expression_atom2623); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_170.Add(char_literal299);

				DebugLocation(415, 8);
				PushFollow(Follow._expression_in_expression_atom2625);
				expression300=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression300.Tree);
				DebugLocation(415, 19);
				char_literal301=(IToken)Match(input,171,Follow._171_in_expression_atom2627); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_171.Add(char_literal301);



				{
				// AST REWRITE
				// elements: expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 415:23: -> expression
				{
					DebugLocation(415, 26);
					adaptor.AddChild(root_0, stream_expression.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:416:4: functioncall_or_column
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(416, 4);
				PushFollow(Follow._functioncall_or_column_in_expression_atom2636);
				functioncall_or_column302=functioncall_or_column();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, functioncall_or_column302.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:417:4: specialfunctioncall
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(417, 4);
				PushFollow(Follow._specialfunctioncall_in_expression_atom2641);
				specialfunctioncall303=specialfunctioncall();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, specialfunctioncall303.Tree);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:418:4: case
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(418, 4);
				PushFollow(Follow._case_in_expression_atom2646);
				case304=@case();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, case304.Tree);

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:419:4: EXISTS ( WS )? '(' ( WS )? select_command ( WS )? ')'
				{
				DebugLocation(419, 4);
				EXISTS305=(IToken)Match(input,EXISTS,Follow._EXISTS_in_expression_atom2651); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_EXISTS.Add(EXISTS305);

				DebugLocation(419, 11);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:419:11: ( WS )?
				int alt100=2;
				try { DebugEnterSubRule(100);
				try { DebugEnterDecision(100, decisionCanBacktrack[100]);
				int LA100_0 = input.LA(1);

				if ((LA100_0==WS))
				{
					alt100 = 1;
				}
				} finally { DebugExitDecision(100); }
				switch (alt100)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:419:11: WS
					{
					DebugLocation(419, 11);
					WS306=(IToken)Match(input,WS,Follow._WS_in_expression_atom2653); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS306);


					}
					break;

				}
				} finally { DebugExitSubRule(100); }

				DebugLocation(419, 15);
				char_literal307=(IToken)Match(input,170,Follow._170_in_expression_atom2656); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_170.Add(char_literal307);

				DebugLocation(419, 19);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:419:19: ( WS )?
				int alt101=2;
				try { DebugEnterSubRule(101);
				try { DebugEnterDecision(101, decisionCanBacktrack[101]);
				int LA101_0 = input.LA(1);

				if ((LA101_0==WS))
				{
					alt101 = 1;
				}
				} finally { DebugExitDecision(101); }
				switch (alt101)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:419:19: WS
					{
					DebugLocation(419, 19);
					WS308=(IToken)Match(input,WS,Follow._WS_in_expression_atom2658); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS308);


					}
					break;

				}
				} finally { DebugExitSubRule(101); }

				DebugLocation(419, 23);
				PushFollow(Follow._select_command_in_expression_atom2661);
				select_command309=select_command();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_select_command.Add(select_command309.Tree);
				DebugLocation(419, 38);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:419:38: ( WS )?
				int alt102=2;
				try { DebugEnterSubRule(102);
				try { DebugEnterDecision(102, decisionCanBacktrack[102]);
				int LA102_0 = input.LA(1);

				if ((LA102_0==WS))
				{
					alt102 = 1;
				}
				} finally { DebugExitDecision(102); }
				switch (alt102)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:419:38: WS
					{
					DebugLocation(419, 38);
					WS310=(IToken)Match(input,WS,Follow._WS_in_expression_atom2663); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS310);


					}
					break;

				}
				} finally { DebugExitSubRule(102); }

				DebugLocation(419, 42);
				char_literal311=(IToken)Match(input,171,Follow._171_in_expression_atom2666); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_171.Add(char_literal311);



				{
				// AST REWRITE
				// elements: select_command
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 419:46: -> ^( T_EXISTS select_command )
				{
					DebugLocation(419, 49);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:419:49: ^( T_EXISTS select_command )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(419, 51);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_EXISTS, "T_EXISTS"), root_1);

					DebugLocation(419, 60);
					adaptor.AddChild(root_1, stream_select_command.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_atom", 55);
			LeaveRule("expression_atom", 55);
			LeaveRule_expression_atom();
	    }
	 	DebugLocation(420, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_atom"); }
		return retval;

	}
	// $ANTLR end "expression_atom"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_functioncall_or_column() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_functioncall_or_column() {}

	// $ANTLR start "functioncall_or_column"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:423:1: functioncall_or_column : ( TOKEN ( WS )? '(' ( WS )? ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )? ')' -> ^( T_FUNCTIONCALL TOKEN ( expression )* ) | COUNT ( WS )? '(' ( WS )? expression ( WS )? ')' -> ^( T_FUNCTIONCALL T_COUNT expression ) | COUNT ( WS )? '(' ( WS )? DISTINCT WS expression ( WS )? ')' -> ^( T_FUNCTIONCALL T_DISTINCTCOUNT expression ) | COUNT ( WS )? '(' ( WS )? all_columns ( WS )? ')' -> ^( T_FUNCTIONCALL T_COUNT all_columns ) | COUNT ( WS )? '(' ( WS )? DISTINCT WS all_columns ( WS )? ')' -> ^( T_FUNCTIONCALL T_DISTINCTCOUNT all_columns ) | ( table_alias ( WS )? '.' ( WS )? )? column_name -> ^( T_COLUMN column_name ( table_alias )? ) );
	[GrammarRule("functioncall_or_column")]
	private AstParserRuleReturnScope<object, IToken> functioncall_or_column()
	{
		EnterRule_functioncall_or_column();
		EnterRule("functioncall_or_column", 56);
		TraceIn("functioncall_or_column", 56);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN312 = default(IToken);
	    IToken WS313 = default(IToken);
	    IToken char_literal314 = default(IToken);
	    IToken WS315 = default(IToken);
	    IToken WS317 = default(IToken);
	    IToken char_literal318 = default(IToken);
	    IToken WS319 = default(IToken);
	    IToken WS321 = default(IToken);
	    IToken char_literal322 = default(IToken);
	    IToken COUNT323 = default(IToken);
	    IToken WS324 = default(IToken);
	    IToken char_literal325 = default(IToken);
	    IToken WS326 = default(IToken);
	    IToken WS328 = default(IToken);
	    IToken char_literal329 = default(IToken);
	    IToken COUNT330 = default(IToken);
	    IToken WS331 = default(IToken);
	    IToken char_literal332 = default(IToken);
	    IToken WS333 = default(IToken);
	    IToken DISTINCT334 = default(IToken);
	    IToken WS335 = default(IToken);
	    IToken WS337 = default(IToken);
	    IToken char_literal338 = default(IToken);
	    IToken COUNT339 = default(IToken);
	    IToken WS340 = default(IToken);
	    IToken char_literal341 = default(IToken);
	    IToken WS342 = default(IToken);
	    IToken WS344 = default(IToken);
	    IToken char_literal345 = default(IToken);
	    IToken COUNT346 = default(IToken);
	    IToken WS347 = default(IToken);
	    IToken char_literal348 = default(IToken);
	    IToken WS349 = default(IToken);
	    IToken DISTINCT350 = default(IToken);
	    IToken WS351 = default(IToken);
	    IToken WS353 = default(IToken);
	    IToken char_literal354 = default(IToken);
	    IToken WS356 = default(IToken);
	    IToken char_literal357 = default(IToken);
	    IToken WS358 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression316 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression320 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression327 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression336 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> all_columns343 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> all_columns352 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> table_alias355 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> column_name359 = default(AstParserRuleReturnScope<object, IToken>);

	    object TOKEN312_tree = default(object);
	    object WS313_tree = default(object);
	    object char_literal314_tree = default(object);
	    object WS315_tree = default(object);
	    object WS317_tree = default(object);
	    object char_literal318_tree = default(object);
	    object WS319_tree = default(object);
	    object WS321_tree = default(object);
	    object char_literal322_tree = default(object);
	    object COUNT323_tree = default(object);
	    object WS324_tree = default(object);
	    object char_literal325_tree = default(object);
	    object WS326_tree = default(object);
	    object WS328_tree = default(object);
	    object char_literal329_tree = default(object);
	    object COUNT330_tree = default(object);
	    object WS331_tree = default(object);
	    object char_literal332_tree = default(object);
	    object WS333_tree = default(object);
	    object DISTINCT334_tree = default(object);
	    object WS335_tree = default(object);
	    object WS337_tree = default(object);
	    object char_literal338_tree = default(object);
	    object COUNT339_tree = default(object);
	    object WS340_tree = default(object);
	    object char_literal341_tree = default(object);
	    object WS342_tree = default(object);
	    object WS344_tree = default(object);
	    object char_literal345_tree = default(object);
	    object COUNT346_tree = default(object);
	    object WS347_tree = default(object);
	    object char_literal348_tree = default(object);
	    object WS349_tree = default(object);
	    object DISTINCT350_tree = default(object);
	    object WS351_tree = default(object);
	    object WS353_tree = default(object);
	    object char_literal354_tree = default(object);
	    object WS356_tree = default(object);
	    object char_literal357_tree = default(object);
	    object WS358_tree = default(object);
	    RewriteRuleITokenStream stream_170=new RewriteRuleITokenStream(adaptor,"token 170");
	    RewriteRuleITokenStream stream_171=new RewriteRuleITokenStream(adaptor,"token 171");
	    RewriteRuleITokenStream stream_COUNT=new RewriteRuleITokenStream(adaptor,"token COUNT");
	    RewriteRuleITokenStream stream_174=new RewriteRuleITokenStream(adaptor,"token 174");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_DISTINCT=new RewriteRuleITokenStream(adaptor,"token DISTINCT");
	    RewriteRuleITokenStream stream_176=new RewriteRuleITokenStream(adaptor,"token 176");
	    RewriteRuleITokenStream stream_TOKEN=new RewriteRuleITokenStream(adaptor,"token TOKEN");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_table_alias=new RewriteRuleSubtreeStream(adaptor,"rule table_alias");
	    RewriteRuleSubtreeStream stream_all_columns=new RewriteRuleSubtreeStream(adaptor,"rule all_columns");
	    RewriteRuleSubtreeStream stream_column_name=new RewriteRuleSubtreeStream(adaptor,"rule column_name");
		try { DebugEnterRule(GrammarFileName, "functioncall_or_column");
		DebugLocation(423, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:424:2: ( TOKEN ( WS )? '(' ( WS )? ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )? ')' -> ^( T_FUNCTIONCALL TOKEN ( expression )* ) | COUNT ( WS )? '(' ( WS )? expression ( WS )? ')' -> ^( T_FUNCTIONCALL T_COUNT expression ) | COUNT ( WS )? '(' ( WS )? DISTINCT WS expression ( WS )? ')' -> ^( T_FUNCTIONCALL T_DISTINCTCOUNT expression ) | COUNT ( WS )? '(' ( WS )? all_columns ( WS )? ')' -> ^( T_FUNCTIONCALL T_COUNT all_columns ) | COUNT ( WS )? '(' ( WS )? DISTINCT WS all_columns ( WS )? ')' -> ^( T_FUNCTIONCALL T_DISTINCTCOUNT all_columns ) | ( table_alias ( WS )? '.' ( WS )? )? column_name -> ^( T_COLUMN column_name ( table_alias )? ) )
			int alt126=6;
			try { DebugEnterDecision(126, decisionCanBacktrack[126]);
			switch (input.LA(1))
			{
			case TOKEN:
				{
				alt126 = 1;
				}
				break;
			case COUNT:
				{
				int LA126_2 = input.LA(2);

				if ((LA126_2==WS))
				{
					int LA126_4 = input.LA(3);

					if ((LA126_4==170))
					{
						switch (input.LA(4))
						{
						case WS:
							{
							switch (input.LA(5))
							{
							case CASE:
							case CAST:
							case CONVERT:
							case COUNT:
							case DATEADD:
							case DATEDIFF:
							case DATEPART:
							case EXISTS:
							case NOT:
							case NUMBER:
							case STRING:
							case SYSTEMVAR:
							case TOKEN:
							case VARIABLE:
							case 170:
							case 173:
							case 175:
							case 189:
								{
								alt126 = 2;
								}
								break;
							case SIMPLE_FILE:
								{
								switch (input.LA(6))
								{
								case WS:
									{
									int LA126_11 = input.LA(7);

									if ((LA126_11==176))
									{
										switch (input.LA(8))
										{
										case WS:
											{
											int LA126_14 = input.LA(9);

											if ((LA126_14==SIMPLE_FILE))
											{
												alt126 = 2;
											}
											else if ((LA126_14==172))
											{
												alt126 = 4;
											}
											else
											{
												if (state.backtracking>0) {state.failed=true; return retval;}
												NoViableAltException nvae = new NoViableAltException("", 126, 14, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
											}
											break;
										case SIMPLE_FILE:
											{
											alt126 = 2;
											}
											break;
										case 172:
											{
											alt126 = 4;
											}
											break;
										default:
											{
												if (state.backtracking>0) {state.failed=true; return retval;}
												NoViableAltException nvae = new NoViableAltException("", 126, 12, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
										}

									}
									else if ((LA126_11==AND||LA126_11==BETWEEN||LA126_11==IN||LA126_11==LIKE||LA126_11==MATCH||LA126_11==NOT||LA126_11==OR||(LA126_11>=165 && LA126_11<=169)||(LA126_11>=171 && LA126_11<=173)||LA126_11==175||LA126_11==177||(LA126_11>=179 && LA126_11<=184)||(LA126_11>=187 && LA126_11<=188)))
									{
										alt126 = 2;
									}
									else
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 126, 11, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
									}
									break;
								case 176:
									{
									switch (input.LA(7))
									{
									case WS:
										{
										int LA126_14 = input.LA(8);

										if ((LA126_14==SIMPLE_FILE))
										{
											alt126 = 2;
										}
										else if ((LA126_14==172))
										{
											alt126 = 4;
										}
										else
										{
											if (state.backtracking>0) {state.failed=true; return retval;}
											NoViableAltException nvae = new NoViableAltException("", 126, 14, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
										}
										break;
									case SIMPLE_FILE:
										{
										alt126 = 2;
										}
										break;
									case 172:
										{
										alt126 = 4;
										}
										break;
									default:
										{
											if (state.backtracking>0) {state.failed=true; return retval;}
											NoViableAltException nvae = new NoViableAltException("", 126, 12, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}

									}
									break;
								case LIKE:
								case MATCH:
								case NOT:
								case 165:
								case 166:
								case 167:
								case 168:
								case 169:
								case 171:
								case 172:
								case 173:
								case 175:
								case 177:
								case 179:
								case 180:
								case 181:
								case 182:
								case 183:
								case 184:
								case 187:
								case 188:
									{
									alt126 = 2;
									}
									break;
								default:
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 126, 8, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

								}
								break;
							case DISTINCT:
								{
								int LA126_9 = input.LA(6);

								if ((LA126_9==WS))
								{
									switch (input.LA(7))
									{
									case CASE:
									case CAST:
									case CONVERT:
									case COUNT:
									case DATEADD:
									case DATEDIFF:
									case DATEPART:
									case EXISTS:
									case NOT:
									case NUMBER:
									case STRING:
									case SYSTEMVAR:
									case TOKEN:
									case VARIABLE:
									case 170:
									case 173:
									case 175:
									case 189:
										{
										alt126 = 3;
										}
										break;
									case SIMPLE_FILE:
										{
										switch (input.LA(8))
										{
										case WS:
											{
											int LA126_18 = input.LA(9);

											if ((LA126_18==176))
											{
												switch (input.LA(10))
												{
												case WS:
													{
													int LA126_20 = input.LA(11);

													if ((LA126_20==SIMPLE_FILE))
													{
														alt126 = 3;
													}
													else if ((LA126_20==172))
													{
														alt126 = 5;
													}
													else
													{
														if (state.backtracking>0) {state.failed=true; return retval;}
														NoViableAltException nvae = new NoViableAltException("", 126, 20, input);
														DebugRecognitionException(nvae);
														throw nvae;
													}
													}
													break;
												case SIMPLE_FILE:
													{
													alt126 = 3;
													}
													break;
												case 172:
													{
													alt126 = 5;
													}
													break;
												default:
													{
														if (state.backtracking>0) {state.failed=true; return retval;}
														NoViableAltException nvae = new NoViableAltException("", 126, 19, input);
														DebugRecognitionException(nvae);
														throw nvae;
													}
												}

											}
											else if ((LA126_18==AND||LA126_18==BETWEEN||LA126_18==IN||LA126_18==LIKE||LA126_18==MATCH||LA126_18==NOT||LA126_18==OR||(LA126_18>=165 && LA126_18<=169)||(LA126_18>=171 && LA126_18<=173)||LA126_18==175||LA126_18==177||(LA126_18>=179 && LA126_18<=184)||(LA126_18>=187 && LA126_18<=188)))
											{
												alt126 = 3;
											}
											else
											{
												if (state.backtracking>0) {state.failed=true; return retval;}
												NoViableAltException nvae = new NoViableAltException("", 126, 18, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
											}
											break;
										case 176:
											{
											switch (input.LA(9))
											{
											case WS:
												{
												int LA126_20 = input.LA(10);

												if ((LA126_20==SIMPLE_FILE))
												{
													alt126 = 3;
												}
												else if ((LA126_20==172))
												{
													alt126 = 5;
												}
												else
												{
													if (state.backtracking>0) {state.failed=true; return retval;}
													NoViableAltException nvae = new NoViableAltException("", 126, 20, input);
													DebugRecognitionException(nvae);
													throw nvae;
												}
												}
												break;
											case SIMPLE_FILE:
												{
												alt126 = 3;
												}
												break;
											case 172:
												{
												alt126 = 5;
												}
												break;
											default:
												{
													if (state.backtracking>0) {state.failed=true; return retval;}
													NoViableAltException nvae = new NoViableAltException("", 126, 19, input);
													DebugRecognitionException(nvae);
													throw nvae;
												}
											}

											}
											break;
										case LIKE:
										case MATCH:
										case NOT:
										case 165:
										case 166:
										case 167:
										case 168:
										case 169:
										case 171:
										case 172:
										case 173:
										case 175:
										case 177:
										case 179:
										case 180:
										case 181:
										case 182:
										case 183:
										case 184:
										case 187:
										case 188:
											{
											alt126 = 3;
											}
											break;
										default:
											{
												if (state.backtracking>0) {state.failed=true; return retval;}
												NoViableAltException nvae = new NoViableAltException("", 126, 16, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
										}

										}
										break;
									case 172:
										{
										alt126 = 5;
										}
										break;
									default:
										{
											if (state.backtracking>0) {state.failed=true; return retval;}
											NoViableAltException nvae = new NoViableAltException("", 126, 13, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}

								}
								else
								{
									if (state.backtracking>0) {state.failed=true; return retval;}
									NoViableAltException nvae = new NoViableAltException("", 126, 9, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
								}
								break;
							case 172:
								{
								alt126 = 4;
								}
								break;
							default:
								{
									if (state.backtracking>0) {state.failed=true; return retval;}
									NoViableAltException nvae = new NoViableAltException("", 126, 6, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}

							}
							break;
						case CASE:
						case CAST:
						case CONVERT:
						case COUNT:
						case DATEADD:
						case DATEDIFF:
						case DATEPART:
						case EXISTS:
						case NOT:
						case NUMBER:
						case STRING:
						case SYSTEMVAR:
						case TOKEN:
						case VARIABLE:
						case 170:
						case 173:
						case 175:
						case 189:
							{
							alt126 = 2;
							}
							break;
						case SIMPLE_FILE:
							{
							switch (input.LA(5))
							{
							case WS:
								{
								int LA126_11 = input.LA(6);

								if ((LA126_11==176))
								{
									switch (input.LA(7))
									{
									case WS:
										{
										int LA126_14 = input.LA(8);

										if ((LA126_14==SIMPLE_FILE))
										{
											alt126 = 2;
										}
										else if ((LA126_14==172))
										{
											alt126 = 4;
										}
										else
										{
											if (state.backtracking>0) {state.failed=true; return retval;}
											NoViableAltException nvae = new NoViableAltException("", 126, 14, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
										}
										break;
									case SIMPLE_FILE:
										{
										alt126 = 2;
										}
										break;
									case 172:
										{
										alt126 = 4;
										}
										break;
									default:
										{
											if (state.backtracking>0) {state.failed=true; return retval;}
											NoViableAltException nvae = new NoViableAltException("", 126, 12, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}

								}
								else if ((LA126_11==AND||LA126_11==BETWEEN||LA126_11==IN||LA126_11==LIKE||LA126_11==MATCH||LA126_11==NOT||LA126_11==OR||(LA126_11>=165 && LA126_11<=169)||(LA126_11>=171 && LA126_11<=173)||LA126_11==175||LA126_11==177||(LA126_11>=179 && LA126_11<=184)||(LA126_11>=187 && LA126_11<=188)))
								{
									alt126 = 2;
								}
								else
								{
									if (state.backtracking>0) {state.failed=true; return retval;}
									NoViableAltException nvae = new NoViableAltException("", 126, 11, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
								}
								break;
							case 176:
								{
								switch (input.LA(6))
								{
								case WS:
									{
									int LA126_14 = input.LA(7);

									if ((LA126_14==SIMPLE_FILE))
									{
										alt126 = 2;
									}
									else if ((LA126_14==172))
									{
										alt126 = 4;
									}
									else
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 126, 14, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
									}
									break;
								case SIMPLE_FILE:
									{
									alt126 = 2;
									}
									break;
								case 172:
									{
									alt126 = 4;
									}
									break;
								default:
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 126, 12, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

								}
								break;
							case LIKE:
							case MATCH:
							case NOT:
							case 165:
							case 166:
							case 167:
							case 168:
							case 169:
							case 171:
							case 172:
							case 173:
							case 175:
							case 177:
							case 179:
							case 180:
							case 181:
							case 182:
							case 183:
							case 184:
							case 187:
							case 188:
								{
								alt126 = 2;
								}
								break;
							default:
								{
									if (state.backtracking>0) {state.failed=true; return retval;}
									NoViableAltException nvae = new NoViableAltException("", 126, 8, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}

							}
							break;
						case DISTINCT:
							{
							int LA126_9 = input.LA(5);

							if ((LA126_9==WS))
							{
								switch (input.LA(6))
								{
								case CASE:
								case CAST:
								case CONVERT:
								case COUNT:
								case DATEADD:
								case DATEDIFF:
								case DATEPART:
								case EXISTS:
								case NOT:
								case NUMBER:
								case STRING:
								case SYSTEMVAR:
								case TOKEN:
								case VARIABLE:
								case 170:
								case 173:
								case 175:
								case 189:
									{
									alt126 = 3;
									}
									break;
								case SIMPLE_FILE:
									{
									switch (input.LA(7))
									{
									case WS:
										{
										int LA126_18 = input.LA(8);

										if ((LA126_18==176))
										{
											switch (input.LA(9))
											{
											case WS:
												{
												int LA126_20 = input.LA(10);

												if ((LA126_20==SIMPLE_FILE))
												{
													alt126 = 3;
												}
												else if ((LA126_20==172))
												{
													alt126 = 5;
												}
												else
												{
													if (state.backtracking>0) {state.failed=true; return retval;}
													NoViableAltException nvae = new NoViableAltException("", 126, 20, input);
													DebugRecognitionException(nvae);
													throw nvae;
												}
												}
												break;
											case SIMPLE_FILE:
												{
												alt126 = 3;
												}
												break;
											case 172:
												{
												alt126 = 5;
												}
												break;
											default:
												{
													if (state.backtracking>0) {state.failed=true; return retval;}
													NoViableAltException nvae = new NoViableAltException("", 126, 19, input);
													DebugRecognitionException(nvae);
													throw nvae;
												}
											}

										}
										else if ((LA126_18==AND||LA126_18==BETWEEN||LA126_18==IN||LA126_18==LIKE||LA126_18==MATCH||LA126_18==NOT||LA126_18==OR||(LA126_18>=165 && LA126_18<=169)||(LA126_18>=171 && LA126_18<=173)||LA126_18==175||LA126_18==177||(LA126_18>=179 && LA126_18<=184)||(LA126_18>=187 && LA126_18<=188)))
										{
											alt126 = 3;
										}
										else
										{
											if (state.backtracking>0) {state.failed=true; return retval;}
											NoViableAltException nvae = new NoViableAltException("", 126, 18, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
										}
										break;
									case 176:
										{
										switch (input.LA(8))
										{
										case WS:
											{
											int LA126_20 = input.LA(9);

											if ((LA126_20==SIMPLE_FILE))
											{
												alt126 = 3;
											}
											else if ((LA126_20==172))
											{
												alt126 = 5;
											}
											else
											{
												if (state.backtracking>0) {state.failed=true; return retval;}
												NoViableAltException nvae = new NoViableAltException("", 126, 20, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
											}
											break;
										case SIMPLE_FILE:
											{
											alt126 = 3;
											}
											break;
										case 172:
											{
											alt126 = 5;
											}
											break;
										default:
											{
												if (state.backtracking>0) {state.failed=true; return retval;}
												NoViableAltException nvae = new NoViableAltException("", 126, 19, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
										}

										}
										break;
									case LIKE:
									case MATCH:
									case NOT:
									case 165:
									case 166:
									case 167:
									case 168:
									case 169:
									case 171:
									case 172:
									case 173:
									case 175:
									case 177:
									case 179:
									case 180:
									case 181:
									case 182:
									case 183:
									case 184:
									case 187:
									case 188:
										{
										alt126 = 3;
										}
										break;
									default:
										{
											if (state.backtracking>0) {state.failed=true; return retval;}
											NoViableAltException nvae = new NoViableAltException("", 126, 16, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}

									}
									break;
								case 172:
									{
									alt126 = 5;
									}
									break;
								default:
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 126, 13, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 126, 9, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case 172:
							{
							alt126 = 4;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 126, 5, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 126, 4, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA126_2==170))
				{
					switch (input.LA(3))
					{
					case WS:
						{
						switch (input.LA(4))
						{
						case CASE:
						case CAST:
						case CONVERT:
						case COUNT:
						case DATEADD:
						case DATEDIFF:
						case DATEPART:
						case EXISTS:
						case NOT:
						case NUMBER:
						case STRING:
						case SYSTEMVAR:
						case TOKEN:
						case VARIABLE:
						case 170:
						case 173:
						case 175:
						case 189:
							{
							alt126 = 2;
							}
							break;
						case SIMPLE_FILE:
							{
							switch (input.LA(5))
							{
							case WS:
								{
								int LA126_11 = input.LA(6);

								if ((LA126_11==176))
								{
									switch (input.LA(7))
									{
									case WS:
										{
										int LA126_14 = input.LA(8);

										if ((LA126_14==SIMPLE_FILE))
										{
											alt126 = 2;
										}
										else if ((LA126_14==172))
										{
											alt126 = 4;
										}
										else
										{
											if (state.backtracking>0) {state.failed=true; return retval;}
											NoViableAltException nvae = new NoViableAltException("", 126, 14, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
										}
										break;
									case SIMPLE_FILE:
										{
										alt126 = 2;
										}
										break;
									case 172:
										{
										alt126 = 4;
										}
										break;
									default:
										{
											if (state.backtracking>0) {state.failed=true; return retval;}
											NoViableAltException nvae = new NoViableAltException("", 126, 12, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}

								}
								else if ((LA126_11==AND||LA126_11==BETWEEN||LA126_11==IN||LA126_11==LIKE||LA126_11==MATCH||LA126_11==NOT||LA126_11==OR||(LA126_11>=165 && LA126_11<=169)||(LA126_11>=171 && LA126_11<=173)||LA126_11==175||LA126_11==177||(LA126_11>=179 && LA126_11<=184)||(LA126_11>=187 && LA126_11<=188)))
								{
									alt126 = 2;
								}
								else
								{
									if (state.backtracking>0) {state.failed=true; return retval;}
									NoViableAltException nvae = new NoViableAltException("", 126, 11, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
								}
								break;
							case 176:
								{
								switch (input.LA(6))
								{
								case WS:
									{
									int LA126_14 = input.LA(7);

									if ((LA126_14==SIMPLE_FILE))
									{
										alt126 = 2;
									}
									else if ((LA126_14==172))
									{
										alt126 = 4;
									}
									else
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 126, 14, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
									}
									break;
								case SIMPLE_FILE:
									{
									alt126 = 2;
									}
									break;
								case 172:
									{
									alt126 = 4;
									}
									break;
								default:
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 126, 12, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

								}
								break;
							case LIKE:
							case MATCH:
							case NOT:
							case 165:
							case 166:
							case 167:
							case 168:
							case 169:
							case 171:
							case 172:
							case 173:
							case 175:
							case 177:
							case 179:
							case 180:
							case 181:
							case 182:
							case 183:
							case 184:
							case 187:
							case 188:
								{
								alt126 = 2;
								}
								break;
							default:
								{
									if (state.backtracking>0) {state.failed=true; return retval;}
									NoViableAltException nvae = new NoViableAltException("", 126, 8, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}

							}
							break;
						case DISTINCT:
							{
							int LA126_9 = input.LA(5);

							if ((LA126_9==WS))
							{
								switch (input.LA(6))
								{
								case CASE:
								case CAST:
								case CONVERT:
								case COUNT:
								case DATEADD:
								case DATEDIFF:
								case DATEPART:
								case EXISTS:
								case NOT:
								case NUMBER:
								case STRING:
								case SYSTEMVAR:
								case TOKEN:
								case VARIABLE:
								case 170:
								case 173:
								case 175:
								case 189:
									{
									alt126 = 3;
									}
									break;
								case SIMPLE_FILE:
									{
									switch (input.LA(7))
									{
									case WS:
										{
										int LA126_18 = input.LA(8);

										if ((LA126_18==176))
										{
											switch (input.LA(9))
											{
											case WS:
												{
												int LA126_20 = input.LA(10);

												if ((LA126_20==SIMPLE_FILE))
												{
													alt126 = 3;
												}
												else if ((LA126_20==172))
												{
													alt126 = 5;
												}
												else
												{
													if (state.backtracking>0) {state.failed=true; return retval;}
													NoViableAltException nvae = new NoViableAltException("", 126, 20, input);
													DebugRecognitionException(nvae);
													throw nvae;
												}
												}
												break;
											case SIMPLE_FILE:
												{
												alt126 = 3;
												}
												break;
											case 172:
												{
												alt126 = 5;
												}
												break;
											default:
												{
													if (state.backtracking>0) {state.failed=true; return retval;}
													NoViableAltException nvae = new NoViableAltException("", 126, 19, input);
													DebugRecognitionException(nvae);
													throw nvae;
												}
											}

										}
										else if ((LA126_18==AND||LA126_18==BETWEEN||LA126_18==IN||LA126_18==LIKE||LA126_18==MATCH||LA126_18==NOT||LA126_18==OR||(LA126_18>=165 && LA126_18<=169)||(LA126_18>=171 && LA126_18<=173)||LA126_18==175||LA126_18==177||(LA126_18>=179 && LA126_18<=184)||(LA126_18>=187 && LA126_18<=188)))
										{
											alt126 = 3;
										}
										else
										{
											if (state.backtracking>0) {state.failed=true; return retval;}
											NoViableAltException nvae = new NoViableAltException("", 126, 18, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
										}
										break;
									case 176:
										{
										switch (input.LA(8))
										{
										case WS:
											{
											int LA126_20 = input.LA(9);

											if ((LA126_20==SIMPLE_FILE))
											{
												alt126 = 3;
											}
											else if ((LA126_20==172))
											{
												alt126 = 5;
											}
											else
											{
												if (state.backtracking>0) {state.failed=true; return retval;}
												NoViableAltException nvae = new NoViableAltException("", 126, 20, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
											}
											break;
										case SIMPLE_FILE:
											{
											alt126 = 3;
											}
											break;
										case 172:
											{
											alt126 = 5;
											}
											break;
										default:
											{
												if (state.backtracking>0) {state.failed=true; return retval;}
												NoViableAltException nvae = new NoViableAltException("", 126, 19, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
										}

										}
										break;
									case LIKE:
									case MATCH:
									case NOT:
									case 165:
									case 166:
									case 167:
									case 168:
									case 169:
									case 171:
									case 172:
									case 173:
									case 175:
									case 177:
									case 179:
									case 180:
									case 181:
									case 182:
									case 183:
									case 184:
									case 187:
									case 188:
										{
										alt126 = 3;
										}
										break;
									default:
										{
											if (state.backtracking>0) {state.failed=true; return retval;}
											NoViableAltException nvae = new NoViableAltException("", 126, 16, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}

									}
									break;
								case 172:
									{
									alt126 = 5;
									}
									break;
								default:
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 126, 13, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 126, 9, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case 172:
							{
							alt126 = 4;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 126, 6, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case CASE:
					case CAST:
					case CONVERT:
					case COUNT:
					case DATEADD:
					case DATEDIFF:
					case DATEPART:
					case EXISTS:
					case NOT:
					case NUMBER:
					case STRING:
					case SYSTEMVAR:
					case TOKEN:
					case VARIABLE:
					case 170:
					case 173:
					case 175:
					case 189:
						{
						alt126 = 2;
						}
						break;
					case SIMPLE_FILE:
						{
						switch (input.LA(4))
						{
						case WS:
							{
							int LA126_11 = input.LA(5);

							if ((LA126_11==176))
							{
								switch (input.LA(6))
								{
								case WS:
									{
									int LA126_14 = input.LA(7);

									if ((LA126_14==SIMPLE_FILE))
									{
										alt126 = 2;
									}
									else if ((LA126_14==172))
									{
										alt126 = 4;
									}
									else
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 126, 14, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
									}
									break;
								case SIMPLE_FILE:
									{
									alt126 = 2;
									}
									break;
								case 172:
									{
									alt126 = 4;
									}
									break;
								default:
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 126, 12, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

							}
							else if ((LA126_11==AND||LA126_11==BETWEEN||LA126_11==IN||LA126_11==LIKE||LA126_11==MATCH||LA126_11==NOT||LA126_11==OR||(LA126_11>=165 && LA126_11<=169)||(LA126_11>=171 && LA126_11<=173)||LA126_11==175||LA126_11==177||(LA126_11>=179 && LA126_11<=184)||(LA126_11>=187 && LA126_11<=188)))
							{
								alt126 = 2;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 126, 11, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case 176:
							{
							switch (input.LA(5))
							{
							case WS:
								{
								int LA126_14 = input.LA(6);

								if ((LA126_14==SIMPLE_FILE))
								{
									alt126 = 2;
								}
								else if ((LA126_14==172))
								{
									alt126 = 4;
								}
								else
								{
									if (state.backtracking>0) {state.failed=true; return retval;}
									NoViableAltException nvae = new NoViableAltException("", 126, 14, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
								}
								break;
							case SIMPLE_FILE:
								{
								alt126 = 2;
								}
								break;
							case 172:
								{
								alt126 = 4;
								}
								break;
							default:
								{
									if (state.backtracking>0) {state.failed=true; return retval;}
									NoViableAltException nvae = new NoViableAltException("", 126, 12, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}

							}
							break;
						case LIKE:
						case MATCH:
						case NOT:
						case 165:
						case 166:
						case 167:
						case 168:
						case 169:
						case 171:
						case 172:
						case 173:
						case 175:
						case 177:
						case 179:
						case 180:
						case 181:
						case 182:
						case 183:
						case 184:
						case 187:
						case 188:
							{
							alt126 = 2;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 126, 8, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case DISTINCT:
						{
						int LA126_9 = input.LA(4);

						if ((LA126_9==WS))
						{
							switch (input.LA(5))
							{
							case CASE:
							case CAST:
							case CONVERT:
							case COUNT:
							case DATEADD:
							case DATEDIFF:
							case DATEPART:
							case EXISTS:
							case NOT:
							case NUMBER:
							case STRING:
							case SYSTEMVAR:
							case TOKEN:
							case VARIABLE:
							case 170:
							case 173:
							case 175:
							case 189:
								{
								alt126 = 3;
								}
								break;
							case SIMPLE_FILE:
								{
								switch (input.LA(6))
								{
								case WS:
									{
									int LA126_18 = input.LA(7);

									if ((LA126_18==176))
									{
										switch (input.LA(8))
										{
										case WS:
											{
											int LA126_20 = input.LA(9);

											if ((LA126_20==SIMPLE_FILE))
											{
												alt126 = 3;
											}
											else if ((LA126_20==172))
											{
												alt126 = 5;
											}
											else
											{
												if (state.backtracking>0) {state.failed=true; return retval;}
												NoViableAltException nvae = new NoViableAltException("", 126, 20, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
											}
											break;
										case SIMPLE_FILE:
											{
											alt126 = 3;
											}
											break;
										case 172:
											{
											alt126 = 5;
											}
											break;
										default:
											{
												if (state.backtracking>0) {state.failed=true; return retval;}
												NoViableAltException nvae = new NoViableAltException("", 126, 19, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
										}

									}
									else if ((LA126_18==AND||LA126_18==BETWEEN||LA126_18==IN||LA126_18==LIKE||LA126_18==MATCH||LA126_18==NOT||LA126_18==OR||(LA126_18>=165 && LA126_18<=169)||(LA126_18>=171 && LA126_18<=173)||LA126_18==175||LA126_18==177||(LA126_18>=179 && LA126_18<=184)||(LA126_18>=187 && LA126_18<=188)))
									{
										alt126 = 3;
									}
									else
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 126, 18, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
									}
									break;
								case 176:
									{
									switch (input.LA(7))
									{
									case WS:
										{
										int LA126_20 = input.LA(8);

										if ((LA126_20==SIMPLE_FILE))
										{
											alt126 = 3;
										}
										else if ((LA126_20==172))
										{
											alt126 = 5;
										}
										else
										{
											if (state.backtracking>0) {state.failed=true; return retval;}
											NoViableAltException nvae = new NoViableAltException("", 126, 20, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
										}
										break;
									case SIMPLE_FILE:
										{
										alt126 = 3;
										}
										break;
									case 172:
										{
										alt126 = 5;
										}
										break;
									default:
										{
											if (state.backtracking>0) {state.failed=true; return retval;}
											NoViableAltException nvae = new NoViableAltException("", 126, 19, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}

									}
									break;
								case LIKE:
								case MATCH:
								case NOT:
								case 165:
								case 166:
								case 167:
								case 168:
								case 169:
								case 171:
								case 172:
								case 173:
								case 175:
								case 177:
								case 179:
								case 180:
								case 181:
								case 182:
								case 183:
								case 184:
								case 187:
								case 188:
									{
									alt126 = 3;
									}
									break;
								default:
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 126, 16, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

								}
								break;
							case 172:
								{
								alt126 = 5;
								}
								break;
							default:
								{
									if (state.backtracking>0) {state.failed=true; return retval;}
									NoViableAltException nvae = new NoViableAltException("", 126, 13, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}

						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 126, 9, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case 172:
						{
						alt126 = 4;
						}
						break;
					default:
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 126, 5, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 126, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SIMPLE_FILE:
				{
				alt126 = 6;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 126, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(126); }
			switch (alt126)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:424:4: TOKEN ( WS )? '(' ( WS )? ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )? ')'
				{
				DebugLocation(424, 4);
				TOKEN312=(IToken)Match(input,TOKEN,Follow._TOKEN_in_functioncall_or_column2686); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TOKEN.Add(TOKEN312);

				DebugLocation(424, 10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:424:10: ( WS )?
				int alt104=2;
				try { DebugEnterSubRule(104);
				try { DebugEnterDecision(104, decisionCanBacktrack[104]);
				int LA104_0 = input.LA(1);

				if ((LA104_0==WS))
				{
					alt104 = 1;
				}
				} finally { DebugExitDecision(104); }
				switch (alt104)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:424:10: WS
					{
					DebugLocation(424, 10);
					WS313=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2688); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS313);


					}
					break;

				}
				} finally { DebugExitSubRule(104); }

				DebugLocation(424, 14);
				char_literal314=(IToken)Match(input,170,Follow._170_in_functioncall_or_column2691); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_170.Add(char_literal314);

				DebugLocation(424, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:424:18: ( WS )?
				int alt105=2;
				try { DebugEnterSubRule(105);
				try { DebugEnterDecision(105, decisionCanBacktrack[105]);
				int LA105_0 = input.LA(1);

				if ((LA105_0==WS))
				{
					alt105 = 1;
				}
				} finally { DebugExitDecision(105); }
				switch (alt105)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:424:18: WS
					{
					DebugLocation(424, 18);
					WS315=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2693); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS315);


					}
					break;

				}
				} finally { DebugExitSubRule(105); }

				DebugLocation(424, 22);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:424:22: ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )?
				int alt110=2;
				try { DebugEnterSubRule(110);
				try { DebugEnterDecision(110, decisionCanBacktrack[110]);
				int LA110_0 = input.LA(1);

				if (((LA110_0>=CASE && LA110_0<=CAST)||(LA110_0>=CONVERT && LA110_0<=COUNT)||(LA110_0>=DATEADD && LA110_0<=DATEPART)||LA110_0==EXISTS||(LA110_0>=NOT && LA110_0<=NUMBER)||LA110_0==SIMPLE_FILE||(LA110_0>=STRING && LA110_0<=SYSTEMVAR)||LA110_0==TOKEN||LA110_0==VARIABLE||LA110_0==170||LA110_0==173||LA110_0==175||LA110_0==189))
				{
					alt110 = 1;
				}
				} finally { DebugExitDecision(110); }
				switch (alt110)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:424:23: expression ( WS )? ( ',' ( WS )? expression ( WS )? )*
					{
					DebugLocation(424, 23);
					PushFollow(Follow._expression_in_functioncall_or_column2697);
					expression316=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expression.Add(expression316.Tree);
					DebugLocation(424, 34);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:424:34: ( WS )?
					int alt106=2;
					try { DebugEnterSubRule(106);
					try { DebugEnterDecision(106, decisionCanBacktrack[106]);
					int LA106_0 = input.LA(1);

					if ((LA106_0==WS))
					{
						alt106 = 1;
					}
					} finally { DebugExitDecision(106); }
					switch (alt106)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:424:34: WS
						{
						DebugLocation(424, 34);
						WS317=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2699); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS317);


						}
						break;

					}
					} finally { DebugExitSubRule(106); }

					DebugLocation(424, 38);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:424:38: ( ',' ( WS )? expression ( WS )? )*
					try { DebugEnterSubRule(109);
					while (true)
					{
						int alt109=2;
						try { DebugEnterDecision(109, decisionCanBacktrack[109]);
						int LA109_0 = input.LA(1);

						if ((LA109_0==174))
						{
							alt109 = 1;
						}


						} finally { DebugExitDecision(109); }
						switch ( alt109 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:424:39: ',' ( WS )? expression ( WS )?
							{
							DebugLocation(424, 39);
							char_literal318=(IToken)Match(input,174,Follow._174_in_functioncall_or_column2703); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_174.Add(char_literal318);

							DebugLocation(424, 43);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:424:43: ( WS )?
							int alt107=2;
							try { DebugEnterSubRule(107);
							try { DebugEnterDecision(107, decisionCanBacktrack[107]);
							int LA107_0 = input.LA(1);

							if ((LA107_0==WS))
							{
								alt107 = 1;
							}
							} finally { DebugExitDecision(107); }
							switch (alt107)
							{
							case 1:
								DebugEnterAlt(1);
								// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:424:43: WS
								{
								DebugLocation(424, 43);
								WS319=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2705); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_WS.Add(WS319);


								}
								break;

							}
							} finally { DebugExitSubRule(107); }

							DebugLocation(424, 47);
							PushFollow(Follow._expression_in_functioncall_or_column2708);
							expression320=expression();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_expression.Add(expression320.Tree);
							DebugLocation(424, 58);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:424:58: ( WS )?
							int alt108=2;
							try { DebugEnterSubRule(108);
							try { DebugEnterDecision(108, decisionCanBacktrack[108]);
							int LA108_0 = input.LA(1);

							if ((LA108_0==WS))
							{
								alt108 = 1;
							}
							} finally { DebugExitDecision(108); }
							switch (alt108)
							{
							case 1:
								DebugEnterAlt(1);
								// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:424:58: WS
								{
								DebugLocation(424, 58);
								WS321=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2710); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_WS.Add(WS321);


								}
								break;

							}
							} finally { DebugExitSubRule(108); }


							}
							break;

						default:
							goto loop109;
						}
					}

					loop109:
						;

					} finally { DebugExitSubRule(109); }


					}
					break;

				}
				} finally { DebugExitSubRule(110); }

				DebugLocation(424, 66);
				char_literal322=(IToken)Match(input,171,Follow._171_in_functioncall_or_column2717); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_171.Add(char_literal322);



				{
				// AST REWRITE
				// elements: expression, TOKEN
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 424:70: -> ^( T_FUNCTIONCALL TOKEN ( expression )* )
				{
					DebugLocation(424, 73);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:424:73: ^( T_FUNCTIONCALL TOKEN ( expression )* )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(424, 75);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(424, 90);
					adaptor.AddChild(root_1, stream_TOKEN.NextNode());
					DebugLocation(424, 96);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:424:96: ( expression )*
					while ( stream_expression.HasNext )
					{
						DebugLocation(424, 96);
						adaptor.AddChild(root_1, stream_expression.NextTree());

					}
					stream_expression.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:425:4: COUNT ( WS )? '(' ( WS )? expression ( WS )? ')'
				{
				DebugLocation(425, 4);
				COUNT323=(IToken)Match(input,COUNT,Follow._COUNT_in_functioncall_or_column2733); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COUNT.Add(COUNT323);

				DebugLocation(425, 10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:425:10: ( WS )?
				int alt111=2;
				try { DebugEnterSubRule(111);
				try { DebugEnterDecision(111, decisionCanBacktrack[111]);
				int LA111_0 = input.LA(1);

				if ((LA111_0==WS))
				{
					alt111 = 1;
				}
				} finally { DebugExitDecision(111); }
				switch (alt111)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:425:10: WS
					{
					DebugLocation(425, 10);
					WS324=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2735); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS324);


					}
					break;

				}
				} finally { DebugExitSubRule(111); }

				DebugLocation(425, 14);
				char_literal325=(IToken)Match(input,170,Follow._170_in_functioncall_or_column2738); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_170.Add(char_literal325);

				DebugLocation(425, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:425:18: ( WS )?
				int alt112=2;
				try { DebugEnterSubRule(112);
				try { DebugEnterDecision(112, decisionCanBacktrack[112]);
				int LA112_0 = input.LA(1);

				if ((LA112_0==WS))
				{
					alt112 = 1;
				}
				} finally { DebugExitDecision(112); }
				switch (alt112)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:425:18: WS
					{
					DebugLocation(425, 18);
					WS326=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2740); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS326);


					}
					break;

				}
				} finally { DebugExitSubRule(112); }

				DebugLocation(425, 22);
				PushFollow(Follow._expression_in_functioncall_or_column2743);
				expression327=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression327.Tree);
				DebugLocation(425, 33);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:425:33: ( WS )?
				int alt113=2;
				try { DebugEnterSubRule(113);
				try { DebugEnterDecision(113, decisionCanBacktrack[113]);
				int LA113_0 = input.LA(1);

				if ((LA113_0==WS))
				{
					alt113 = 1;
				}
				} finally { DebugExitDecision(113); }
				switch (alt113)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:425:33: WS
					{
					DebugLocation(425, 33);
					WS328=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2745); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS328);


					}
					break;

				}
				} finally { DebugExitSubRule(113); }

				DebugLocation(425, 37);
				char_literal329=(IToken)Match(input,171,Follow._171_in_functioncall_or_column2748); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_171.Add(char_literal329);



				{
				// AST REWRITE
				// elements: expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 425:41: -> ^( T_FUNCTIONCALL T_COUNT expression )
				{
					DebugLocation(425, 44);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:425:44: ^( T_FUNCTIONCALL T_COUNT expression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(425, 46);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(425, 61);
					adaptor.AddChild(root_1, (object)adaptor.Create(T_COUNT, "T_COUNT"));
					DebugLocation(425, 69);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:426:4: COUNT ( WS )? '(' ( WS )? DISTINCT WS expression ( WS )? ')'
				{
				DebugLocation(426, 4);
				COUNT330=(IToken)Match(input,COUNT,Follow._COUNT_in_functioncall_or_column2763); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COUNT.Add(COUNT330);

				DebugLocation(426, 10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:426:10: ( WS )?
				int alt114=2;
				try { DebugEnterSubRule(114);
				try { DebugEnterDecision(114, decisionCanBacktrack[114]);
				int LA114_0 = input.LA(1);

				if ((LA114_0==WS))
				{
					alt114 = 1;
				}
				} finally { DebugExitDecision(114); }
				switch (alt114)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:426:10: WS
					{
					DebugLocation(426, 10);
					WS331=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2765); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS331);


					}
					break;

				}
				} finally { DebugExitSubRule(114); }

				DebugLocation(426, 14);
				char_literal332=(IToken)Match(input,170,Follow._170_in_functioncall_or_column2768); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_170.Add(char_literal332);

				DebugLocation(426, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:426:18: ( WS )?
				int alt115=2;
				try { DebugEnterSubRule(115);
				try { DebugEnterDecision(115, decisionCanBacktrack[115]);
				int LA115_0 = input.LA(1);

				if ((LA115_0==WS))
				{
					alt115 = 1;
				}
				} finally { DebugExitDecision(115); }
				switch (alt115)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:426:18: WS
					{
					DebugLocation(426, 18);
					WS333=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2770); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS333);


					}
					break;

				}
				} finally { DebugExitSubRule(115); }

				DebugLocation(426, 22);
				DISTINCT334=(IToken)Match(input,DISTINCT,Follow._DISTINCT_in_functioncall_or_column2773); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DISTINCT.Add(DISTINCT334);

				DebugLocation(426, 31);
				WS335=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2775); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS335);

				DebugLocation(426, 34);
				PushFollow(Follow._expression_in_functioncall_or_column2777);
				expression336=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression336.Tree);
				DebugLocation(426, 45);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:426:45: ( WS )?
				int alt116=2;
				try { DebugEnterSubRule(116);
				try { DebugEnterDecision(116, decisionCanBacktrack[116]);
				int LA116_0 = input.LA(1);

				if ((LA116_0==WS))
				{
					alt116 = 1;
				}
				} finally { DebugExitDecision(116); }
				switch (alt116)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:426:45: WS
					{
					DebugLocation(426, 45);
					WS337=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2779); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS337);


					}
					break;

				}
				} finally { DebugExitSubRule(116); }

				DebugLocation(426, 49);
				char_literal338=(IToken)Match(input,171,Follow._171_in_functioncall_or_column2782); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_171.Add(char_literal338);



				{
				// AST REWRITE
				// elements: expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 426:53: -> ^( T_FUNCTIONCALL T_DISTINCTCOUNT expression )
				{
					DebugLocation(426, 56);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:426:56: ^( T_FUNCTIONCALL T_DISTINCTCOUNT expression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(426, 58);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(426, 73);
					adaptor.AddChild(root_1, (object)adaptor.Create(T_DISTINCTCOUNT, "T_DISTINCTCOUNT"));
					DebugLocation(426, 89);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:427:4: COUNT ( WS )? '(' ( WS )? all_columns ( WS )? ')'
				{
				DebugLocation(427, 4);
				COUNT339=(IToken)Match(input,COUNT,Follow._COUNT_in_functioncall_or_column2797); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COUNT.Add(COUNT339);

				DebugLocation(427, 10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:427:10: ( WS )?
				int alt117=2;
				try { DebugEnterSubRule(117);
				try { DebugEnterDecision(117, decisionCanBacktrack[117]);
				int LA117_0 = input.LA(1);

				if ((LA117_0==WS))
				{
					alt117 = 1;
				}
				} finally { DebugExitDecision(117); }
				switch (alt117)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:427:10: WS
					{
					DebugLocation(427, 10);
					WS340=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2799); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS340);


					}
					break;

				}
				} finally { DebugExitSubRule(117); }

				DebugLocation(427, 14);
				char_literal341=(IToken)Match(input,170,Follow._170_in_functioncall_or_column2802); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_170.Add(char_literal341);

				DebugLocation(427, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:427:18: ( WS )?
				int alt118=2;
				try { DebugEnterSubRule(118);
				try { DebugEnterDecision(118, decisionCanBacktrack[118]);
				int LA118_0 = input.LA(1);

				if ((LA118_0==WS))
				{
					alt118 = 1;
				}
				} finally { DebugExitDecision(118); }
				switch (alt118)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:427:18: WS
					{
					DebugLocation(427, 18);
					WS342=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2804); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS342);


					}
					break;

				}
				} finally { DebugExitSubRule(118); }

				DebugLocation(427, 22);
				PushFollow(Follow._all_columns_in_functioncall_or_column2807);
				all_columns343=all_columns();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_all_columns.Add(all_columns343.Tree);
				DebugLocation(427, 34);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:427:34: ( WS )?
				int alt119=2;
				try { DebugEnterSubRule(119);
				try { DebugEnterDecision(119, decisionCanBacktrack[119]);
				int LA119_0 = input.LA(1);

				if ((LA119_0==WS))
				{
					alt119 = 1;
				}
				} finally { DebugExitDecision(119); }
				switch (alt119)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:427:34: WS
					{
					DebugLocation(427, 34);
					WS344=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2809); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS344);


					}
					break;

				}
				} finally { DebugExitSubRule(119); }

				DebugLocation(427, 38);
				char_literal345=(IToken)Match(input,171,Follow._171_in_functioncall_or_column2812); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_171.Add(char_literal345);



				{
				// AST REWRITE
				// elements: all_columns
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 427:42: -> ^( T_FUNCTIONCALL T_COUNT all_columns )
				{
					DebugLocation(427, 45);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:427:45: ^( T_FUNCTIONCALL T_COUNT all_columns )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(427, 47);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(427, 62);
					adaptor.AddChild(root_1, (object)adaptor.Create(T_COUNT, "T_COUNT"));
					DebugLocation(427, 70);
					adaptor.AddChild(root_1, stream_all_columns.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:428:4: COUNT ( WS )? '(' ( WS )? DISTINCT WS all_columns ( WS )? ')'
				{
				DebugLocation(428, 4);
				COUNT346=(IToken)Match(input,COUNT,Follow._COUNT_in_functioncall_or_column2827); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COUNT.Add(COUNT346);

				DebugLocation(428, 10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:428:10: ( WS )?
				int alt120=2;
				try { DebugEnterSubRule(120);
				try { DebugEnterDecision(120, decisionCanBacktrack[120]);
				int LA120_0 = input.LA(1);

				if ((LA120_0==WS))
				{
					alt120 = 1;
				}
				} finally { DebugExitDecision(120); }
				switch (alt120)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:428:10: WS
					{
					DebugLocation(428, 10);
					WS347=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2829); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS347);


					}
					break;

				}
				} finally { DebugExitSubRule(120); }

				DebugLocation(428, 14);
				char_literal348=(IToken)Match(input,170,Follow._170_in_functioncall_or_column2832); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_170.Add(char_literal348);

				DebugLocation(428, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:428:18: ( WS )?
				int alt121=2;
				try { DebugEnterSubRule(121);
				try { DebugEnterDecision(121, decisionCanBacktrack[121]);
				int LA121_0 = input.LA(1);

				if ((LA121_0==WS))
				{
					alt121 = 1;
				}
				} finally { DebugExitDecision(121); }
				switch (alt121)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:428:18: WS
					{
					DebugLocation(428, 18);
					WS349=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2834); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS349);


					}
					break;

				}
				} finally { DebugExitSubRule(121); }

				DebugLocation(428, 22);
				DISTINCT350=(IToken)Match(input,DISTINCT,Follow._DISTINCT_in_functioncall_or_column2837); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DISTINCT.Add(DISTINCT350);

				DebugLocation(428, 31);
				WS351=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2839); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS351);

				DebugLocation(428, 34);
				PushFollow(Follow._all_columns_in_functioncall_or_column2841);
				all_columns352=all_columns();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_all_columns.Add(all_columns352.Tree);
				DebugLocation(428, 46);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:428:46: ( WS )?
				int alt122=2;
				try { DebugEnterSubRule(122);
				try { DebugEnterDecision(122, decisionCanBacktrack[122]);
				int LA122_0 = input.LA(1);

				if ((LA122_0==WS))
				{
					alt122 = 1;
				}
				} finally { DebugExitDecision(122); }
				switch (alt122)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:428:46: WS
					{
					DebugLocation(428, 46);
					WS353=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2843); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS353);


					}
					break;

				}
				} finally { DebugExitSubRule(122); }

				DebugLocation(428, 50);
				char_literal354=(IToken)Match(input,171,Follow._171_in_functioncall_or_column2846); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_171.Add(char_literal354);



				{
				// AST REWRITE
				// elements: all_columns
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 428:54: -> ^( T_FUNCTIONCALL T_DISTINCTCOUNT all_columns )
				{
					DebugLocation(428, 57);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:428:57: ^( T_FUNCTIONCALL T_DISTINCTCOUNT all_columns )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(428, 59);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(428, 74);
					adaptor.AddChild(root_1, (object)adaptor.Create(T_DISTINCTCOUNT, "T_DISTINCTCOUNT"));
					DebugLocation(428, 90);
					adaptor.AddChild(root_1, stream_all_columns.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:430:4: ( table_alias ( WS )? '.' ( WS )? )? column_name
				{
				DebugLocation(430, 4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:430:4: ( table_alias ( WS )? '.' ( WS )? )?
				int alt125=2;
				try { DebugEnterSubRule(125);
				try { DebugEnterDecision(125, decisionCanBacktrack[125]);
				int LA125_0 = input.LA(1);

				if ((LA125_0==SIMPLE_FILE))
				{
					int LA125_1 = input.LA(2);

					if ((LA125_1==WS))
					{
						int LA125_2 = input.LA(3);

						if ((LA125_2==176))
						{
							alt125 = 1;
						}
					}
					else if ((LA125_1==176))
					{
						alt125 = 1;
					}
				}
				} finally { DebugExitDecision(125); }
				switch (alt125)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:430:5: table_alias ( WS )? '.' ( WS )?
					{
					DebugLocation(430, 5);
					PushFollow(Follow._table_alias_in_functioncall_or_column2864);
					table_alias355=table_alias();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_table_alias.Add(table_alias355.Tree);
					DebugLocation(430, 17);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:430:17: ( WS )?
					int alt123=2;
					try { DebugEnterSubRule(123);
					try { DebugEnterDecision(123, decisionCanBacktrack[123]);
					int LA123_0 = input.LA(1);

					if ((LA123_0==WS))
					{
						alt123 = 1;
					}
					} finally { DebugExitDecision(123); }
					switch (alt123)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:430:17: WS
						{
						DebugLocation(430, 17);
						WS356=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2866); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS356);


						}
						break;

					}
					} finally { DebugExitSubRule(123); }

					DebugLocation(430, 21);
					char_literal357=(IToken)Match(input,176,Follow._176_in_functioncall_or_column2869); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_176.Add(char_literal357);

					DebugLocation(430, 25);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:430:25: ( WS )?
					int alt124=2;
					try { DebugEnterSubRule(124);
					try { DebugEnterDecision(124, decisionCanBacktrack[124]);
					int LA124_0 = input.LA(1);

					if ((LA124_0==WS))
					{
						alt124 = 1;
					}
					} finally { DebugExitDecision(124); }
					switch (alt124)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:430:25: WS
						{
						DebugLocation(430, 25);
						WS358=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2871); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS358);


						}
						break;

					}
					} finally { DebugExitSubRule(124); }


					}
					break;

				}
				} finally { DebugExitSubRule(125); }

				DebugLocation(430, 31);
				PushFollow(Follow._column_name_in_functioncall_or_column2876);
				column_name359=column_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_column_name.Add(column_name359.Tree);


				{
				// AST REWRITE
				// elements: column_name, table_alias
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 430:43: -> ^( T_COLUMN column_name ( table_alias )? )
				{
					DebugLocation(430, 46);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:430:46: ^( T_COLUMN column_name ( table_alias )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(430, 48);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_COLUMN, "T_COLUMN"), root_1);

					DebugLocation(430, 57);
					adaptor.AddChild(root_1, stream_column_name.NextTree());
					DebugLocation(430, 69);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:430:69: ( table_alias )?
					if (stream_table_alias.HasNext)
					{
						DebugLocation(430, 69);
						adaptor.AddChild(root_1, stream_table_alias.NextTree());

					}
					stream_table_alias.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("functioncall_or_column", 56);
			LeaveRule("functioncall_or_column", 56);
			LeaveRule_functioncall_or_column();
	    }
	 	DebugLocation(431, 1);
		} finally { DebugExitRule(GrammarFileName, "functioncall_or_column"); }
		return retval;

	}
	// $ANTLR end "functioncall_or_column"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_column_name() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_column_name() {}

	// $ANTLR start "column_name"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:433:1: column_name : SIMPLE_FILE ;
	[GrammarRule("column_name")]
	private AstParserRuleReturnScope<object, IToken> column_name()
	{
		EnterRule_column_name();
		EnterRule("column_name", 57);
		TraceIn("column_name", 57);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken SIMPLE_FILE360 = default(IToken);

	    object SIMPLE_FILE360_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "column_name");
		DebugLocation(433, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:434:2: ( SIMPLE_FILE )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:434:4: SIMPLE_FILE
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(434, 4);
			SIMPLE_FILE360=(IToken)Match(input,SIMPLE_FILE,Follow._SIMPLE_FILE_in_column_name2899); if (state.failed) return retval;
			if (state.backtracking == 0) {
			SIMPLE_FILE360_tree = (object)adaptor.Create(SIMPLE_FILE360);
			adaptor.AddChild(root_0, SIMPLE_FILE360_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("column_name", 57);
			LeaveRule("column_name", 57);
			LeaveRule_column_name();
	    }
	 	DebugLocation(435, 1);
		} finally { DebugExitRule(GrammarFileName, "column_name"); }
		return retval;

	}
	// $ANTLR end "column_name"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_table_alias() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_table_alias() {}

	// $ANTLR start "table_alias"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:437:1: table_alias : SIMPLE_FILE -> ^( T_TABLE_ALIAS SIMPLE_FILE ) ;
	[GrammarRule("table_alias")]
	private AstParserRuleReturnScope<object, IToken> table_alias()
	{
		EnterRule_table_alias();
		EnterRule("table_alias", 58);
		TraceIn("table_alias", 58);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken SIMPLE_FILE361 = default(IToken);

	    object SIMPLE_FILE361_tree = default(object);
	    RewriteRuleITokenStream stream_SIMPLE_FILE=new RewriteRuleITokenStream(adaptor,"token SIMPLE_FILE");

		try { DebugEnterRule(GrammarFileName, "table_alias");
		DebugLocation(437, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:438:2: ( SIMPLE_FILE -> ^( T_TABLE_ALIAS SIMPLE_FILE ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:438:4: SIMPLE_FILE
			{
			DebugLocation(438, 4);
			SIMPLE_FILE361=(IToken)Match(input,SIMPLE_FILE,Follow._SIMPLE_FILE_in_table_alias2910); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_SIMPLE_FILE.Add(SIMPLE_FILE361);



			{
			// AST REWRITE
			// elements: SIMPLE_FILE
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 438:16: -> ^( T_TABLE_ALIAS SIMPLE_FILE )
			{
				DebugLocation(438, 19);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:438:19: ^( T_TABLE_ALIAS SIMPLE_FILE )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(438, 21);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_TABLE_ALIAS, "T_TABLE_ALIAS"), root_1);

				DebugLocation(438, 35);
				adaptor.AddChild(root_1, stream_SIMPLE_FILE.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("table_alias", 58);
			LeaveRule("table_alias", 58);
			LeaveRule_table_alias();
	    }
	 	DebugLocation(439, 1);
		} finally { DebugExitRule(GrammarFileName, "table_alias"); }
		return retval;

	}
	// $ANTLR end "table_alias"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_specialfunctioncall() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_specialfunctioncall() {}

	// $ANTLR start "specialfunctioncall"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:441:1: specialfunctioncall : ( CONVERT ( WS )? '(' ( WS )? TOKEN ( WS )? ',' ( WS )? expression ( WS )? ( ',' ( WS )? STRING ( WS )? )? ')' -> ^( T_CONVERT TOKEN expression ( STRING )? ) | CAST ( WS )? '(' ( WS )? expression WS AS WS datatype ( WS )? ')' -> ^( T_CONVERT TOKEN expression ) | DATEADD ( WS )? '(' ( WS )? datepart ( WS )? ',' ( WS )? expression ( WS )? ',' ( WS )? expression ( WS )? ')' -> ^( T_FUNCTIONCALL DATEADD datepart ( expression )+ ) | DATEDIFF ( WS )? '(' ( WS )? datepart ( WS )? ',' ( WS )? expression ( WS )? ',' ( WS )? expression ( WS )? ')' -> ^( T_FUNCTIONCALL DATEDIFF datepart ( expression )+ ) | DATEPART ( WS )? '(' ( WS )? datepart ( WS )? ',' ( WS )? expression ( WS )? ')' -> ^( T_FUNCTIONCALL DATEPART datepart expression ) );
	[GrammarRule("specialfunctioncall")]
	private AstParserRuleReturnScope<object, IToken> specialfunctioncall()
	{
		EnterRule_specialfunctioncall();
		EnterRule("specialfunctioncall", 59);
		TraceIn("specialfunctioncall", 59);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken CONVERT362 = default(IToken);
	    IToken WS363 = default(IToken);
	    IToken char_literal364 = default(IToken);
	    IToken WS365 = default(IToken);
	    IToken TOKEN366 = default(IToken);
	    IToken WS367 = default(IToken);
	    IToken char_literal368 = default(IToken);
	    IToken WS369 = default(IToken);
	    IToken WS371 = default(IToken);
	    IToken char_literal372 = default(IToken);
	    IToken WS373 = default(IToken);
	    IToken STRING374 = default(IToken);
	    IToken WS375 = default(IToken);
	    IToken char_literal376 = default(IToken);
	    IToken CAST377 = default(IToken);
	    IToken WS378 = default(IToken);
	    IToken char_literal379 = default(IToken);
	    IToken WS380 = default(IToken);
	    IToken WS382 = default(IToken);
	    IToken AS383 = default(IToken);
	    IToken WS384 = default(IToken);
	    IToken WS386 = default(IToken);
	    IToken char_literal387 = default(IToken);
	    IToken DATEADD388 = default(IToken);
	    IToken WS389 = default(IToken);
	    IToken char_literal390 = default(IToken);
	    IToken WS391 = default(IToken);
	    IToken WS393 = default(IToken);
	    IToken char_literal394 = default(IToken);
	    IToken WS395 = default(IToken);
	    IToken WS397 = default(IToken);
	    IToken char_literal398 = default(IToken);
	    IToken WS399 = default(IToken);
	    IToken WS401 = default(IToken);
	    IToken char_literal402 = default(IToken);
	    IToken DATEDIFF403 = default(IToken);
	    IToken WS404 = default(IToken);
	    IToken char_literal405 = default(IToken);
	    IToken WS406 = default(IToken);
	    IToken WS408 = default(IToken);
	    IToken char_literal409 = default(IToken);
	    IToken WS410 = default(IToken);
	    IToken WS412 = default(IToken);
	    IToken char_literal413 = default(IToken);
	    IToken WS414 = default(IToken);
	    IToken WS416 = default(IToken);
	    IToken char_literal417 = default(IToken);
	    IToken DATEPART418 = default(IToken);
	    IToken WS419 = default(IToken);
	    IToken char_literal420 = default(IToken);
	    IToken WS421 = default(IToken);
	    IToken WS423 = default(IToken);
	    IToken char_literal424 = default(IToken);
	    IToken WS425 = default(IToken);
	    IToken WS427 = default(IToken);
	    IToken char_literal428 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression370 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression381 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> datatype385 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> datepart392 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression396 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression400 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> datepart407 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression411 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression415 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> datepart422 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression426 = default(AstParserRuleReturnScope<object, IToken>);

	    object CONVERT362_tree = default(object);
	    object WS363_tree = default(object);
	    object char_literal364_tree = default(object);
	    object WS365_tree = default(object);
	    object TOKEN366_tree = default(object);
	    object WS367_tree = default(object);
	    object char_literal368_tree = default(object);
	    object WS369_tree = default(object);
	    object WS371_tree = default(object);
	    object char_literal372_tree = default(object);
	    object WS373_tree = default(object);
	    object STRING374_tree = default(object);
	    object WS375_tree = default(object);
	    object char_literal376_tree = default(object);
	    object CAST377_tree = default(object);
	    object WS378_tree = default(object);
	    object char_literal379_tree = default(object);
	    object WS380_tree = default(object);
	    object WS382_tree = default(object);
	    object AS383_tree = default(object);
	    object WS384_tree = default(object);
	    object WS386_tree = default(object);
	    object char_literal387_tree = default(object);
	    object DATEADD388_tree = default(object);
	    object WS389_tree = default(object);
	    object char_literal390_tree = default(object);
	    object WS391_tree = default(object);
	    object WS393_tree = default(object);
	    object char_literal394_tree = default(object);
	    object WS395_tree = default(object);
	    object WS397_tree = default(object);
	    object char_literal398_tree = default(object);
	    object WS399_tree = default(object);
	    object WS401_tree = default(object);
	    object char_literal402_tree = default(object);
	    object DATEDIFF403_tree = default(object);
	    object WS404_tree = default(object);
	    object char_literal405_tree = default(object);
	    object WS406_tree = default(object);
	    object WS408_tree = default(object);
	    object char_literal409_tree = default(object);
	    object WS410_tree = default(object);
	    object WS412_tree = default(object);
	    object char_literal413_tree = default(object);
	    object WS414_tree = default(object);
	    object WS416_tree = default(object);
	    object char_literal417_tree = default(object);
	    object DATEPART418_tree = default(object);
	    object WS419_tree = default(object);
	    object char_literal420_tree = default(object);
	    object WS421_tree = default(object);
	    object WS423_tree = default(object);
	    object char_literal424_tree = default(object);
	    object WS425_tree = default(object);
	    object WS427_tree = default(object);
	    object char_literal428_tree = default(object);
	    RewriteRuleITokenStream stream_CAST=new RewriteRuleITokenStream(adaptor,"token CAST");
	    RewriteRuleITokenStream stream_170=new RewriteRuleITokenStream(adaptor,"token 170");
	    RewriteRuleITokenStream stream_AS=new RewriteRuleITokenStream(adaptor,"token AS");
	    RewriteRuleITokenStream stream_171=new RewriteRuleITokenStream(adaptor,"token 171");
	    RewriteRuleITokenStream stream_174=new RewriteRuleITokenStream(adaptor,"token 174");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_DATEPART=new RewriteRuleITokenStream(adaptor,"token DATEPART");
	    RewriteRuleITokenStream stream_DATEADD=new RewriteRuleITokenStream(adaptor,"token DATEADD");
	    RewriteRuleITokenStream stream_CONVERT=new RewriteRuleITokenStream(adaptor,"token CONVERT");
	    RewriteRuleITokenStream stream_DATEDIFF=new RewriteRuleITokenStream(adaptor,"token DATEDIFF");
	    RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
	    RewriteRuleITokenStream stream_TOKEN=new RewriteRuleITokenStream(adaptor,"token TOKEN");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_datatype=new RewriteRuleSubtreeStream(adaptor,"rule datatype");
	    RewriteRuleSubtreeStream stream_datepart=new RewriteRuleSubtreeStream(adaptor,"rule datepart");
		try { DebugEnterRule(GrammarFileName, "specialfunctioncall");
		DebugLocation(441, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:442:2: ( CONVERT ( WS )? '(' ( WS )? TOKEN ( WS )? ',' ( WS )? expression ( WS )? ( ',' ( WS )? STRING ( WS )? )? ')' -> ^( T_CONVERT TOKEN expression ( STRING )? ) | CAST ( WS )? '(' ( WS )? expression WS AS WS datatype ( WS )? ')' -> ^( T_CONVERT TOKEN expression ) | DATEADD ( WS )? '(' ( WS )? datepart ( WS )? ',' ( WS )? expression ( WS )? ',' ( WS )? expression ( WS )? ')' -> ^( T_FUNCTIONCALL DATEADD datepart ( expression )+ ) | DATEDIFF ( WS )? '(' ( WS )? datepart ( WS )? ',' ( WS )? expression ( WS )? ',' ( WS )? expression ( WS )? ')' -> ^( T_FUNCTIONCALL DATEDIFF datepart ( expression )+ ) | DATEPART ( WS )? '(' ( WS )? datepart ( WS )? ',' ( WS )? expression ( WS )? ')' -> ^( T_FUNCTIONCALL DATEPART datepart expression ) )
			int alt157=5;
			try { DebugEnterDecision(157, decisionCanBacktrack[157]);
			switch (input.LA(1))
			{
			case CONVERT:
				{
				alt157 = 1;
				}
				break;
			case CAST:
				{
				alt157 = 2;
				}
				break;
			case DATEADD:
				{
				alt157 = 3;
				}
				break;
			case DATEDIFF:
				{
				alt157 = 4;
				}
				break;
			case DATEPART:
				{
				alt157 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 157, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(157); }
			switch (alt157)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:442:4: CONVERT ( WS )? '(' ( WS )? TOKEN ( WS )? ',' ( WS )? expression ( WS )? ( ',' ( WS )? STRING ( WS )? )? ')'
				{
				DebugLocation(442, 4);
				CONVERT362=(IToken)Match(input,CONVERT,Follow._CONVERT_in_specialfunctioncall2930); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CONVERT.Add(CONVERT362);

				DebugLocation(442, 12);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:442:12: ( WS )?
				int alt127=2;
				try { DebugEnterSubRule(127);
				try { DebugEnterDecision(127, decisionCanBacktrack[127]);
				int LA127_0 = input.LA(1);

				if ((LA127_0==WS))
				{
					alt127 = 1;
				}
				} finally { DebugExitDecision(127); }
				switch (alt127)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:442:12: WS
					{
					DebugLocation(442, 12);
					WS363=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2932); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS363);


					}
					break;

				}
				} finally { DebugExitSubRule(127); }

				DebugLocation(442, 16);
				char_literal364=(IToken)Match(input,170,Follow._170_in_specialfunctioncall2935); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_170.Add(char_literal364);

				DebugLocation(442, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:442:20: ( WS )?
				int alt128=2;
				try { DebugEnterSubRule(128);
				try { DebugEnterDecision(128, decisionCanBacktrack[128]);
				int LA128_0 = input.LA(1);

				if ((LA128_0==WS))
				{
					alt128 = 1;
				}
				} finally { DebugExitDecision(128); }
				switch (alt128)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:442:20: WS
					{
					DebugLocation(442, 20);
					WS365=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2937); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS365);


					}
					break;

				}
				} finally { DebugExitSubRule(128); }

				DebugLocation(442, 24);
				TOKEN366=(IToken)Match(input,TOKEN,Follow._TOKEN_in_specialfunctioncall2940); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TOKEN.Add(TOKEN366);

				DebugLocation(442, 30);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:442:30: ( WS )?
				int alt129=2;
				try { DebugEnterSubRule(129);
				try { DebugEnterDecision(129, decisionCanBacktrack[129]);
				int LA129_0 = input.LA(1);

				if ((LA129_0==WS))
				{
					alt129 = 1;
				}
				} finally { DebugExitDecision(129); }
				switch (alt129)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:442:30: WS
					{
					DebugLocation(442, 30);
					WS367=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2942); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS367);


					}
					break;

				}
				} finally { DebugExitSubRule(129); }

				DebugLocation(442, 34);
				char_literal368=(IToken)Match(input,174,Follow._174_in_specialfunctioncall2945); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_174.Add(char_literal368);

				DebugLocation(442, 38);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:442:38: ( WS )?
				int alt130=2;
				try { DebugEnterSubRule(130);
				try { DebugEnterDecision(130, decisionCanBacktrack[130]);
				int LA130_0 = input.LA(1);

				if ((LA130_0==WS))
				{
					alt130 = 1;
				}
				} finally { DebugExitDecision(130); }
				switch (alt130)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:442:38: WS
					{
					DebugLocation(442, 38);
					WS369=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2947); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS369);


					}
					break;

				}
				} finally { DebugExitSubRule(130); }

				DebugLocation(442, 42);
				PushFollow(Follow._expression_in_specialfunctioncall2950);
				expression370=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression370.Tree);
				DebugLocation(442, 53);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:442:53: ( WS )?
				int alt131=2;
				try { DebugEnterSubRule(131);
				try { DebugEnterDecision(131, decisionCanBacktrack[131]);
				int LA131_0 = input.LA(1);

				if ((LA131_0==WS))
				{
					alt131 = 1;
				}
				} finally { DebugExitDecision(131); }
				switch (alt131)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:442:53: WS
					{
					DebugLocation(442, 53);
					WS371=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2952); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS371);


					}
					break;

				}
				} finally { DebugExitSubRule(131); }

				DebugLocation(442, 57);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:442:57: ( ',' ( WS )? STRING ( WS )? )?
				int alt134=2;
				try { DebugEnterSubRule(134);
				try { DebugEnterDecision(134, decisionCanBacktrack[134]);
				int LA134_0 = input.LA(1);

				if ((LA134_0==174))
				{
					alt134 = 1;
				}
				} finally { DebugExitDecision(134); }
				switch (alt134)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:442:58: ',' ( WS )? STRING ( WS )?
					{
					DebugLocation(442, 58);
					char_literal372=(IToken)Match(input,174,Follow._174_in_specialfunctioncall2956); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_174.Add(char_literal372);

					DebugLocation(442, 62);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:442:62: ( WS )?
					int alt132=2;
					try { DebugEnterSubRule(132);
					try { DebugEnterDecision(132, decisionCanBacktrack[132]);
					int LA132_0 = input.LA(1);

					if ((LA132_0==WS))
					{
						alt132 = 1;
					}
					} finally { DebugExitDecision(132); }
					switch (alt132)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:442:62: WS
						{
						DebugLocation(442, 62);
						WS373=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2958); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS373);


						}
						break;

					}
					} finally { DebugExitSubRule(132); }

					DebugLocation(442, 66);
					STRING374=(IToken)Match(input,STRING,Follow._STRING_in_specialfunctioncall2961); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_STRING.Add(STRING374);

					DebugLocation(442, 73);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:442:73: ( WS )?
					int alt133=2;
					try { DebugEnterSubRule(133);
					try { DebugEnterDecision(133, decisionCanBacktrack[133]);
					int LA133_0 = input.LA(1);

					if ((LA133_0==WS))
					{
						alt133 = 1;
					}
					} finally { DebugExitDecision(133); }
					switch (alt133)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:442:73: WS
						{
						DebugLocation(442, 73);
						WS375=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2963); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS375);


						}
						break;

					}
					} finally { DebugExitSubRule(133); }


					}
					break;

				}
				} finally { DebugExitSubRule(134); }

				DebugLocation(442, 79);
				char_literal376=(IToken)Match(input,171,Follow._171_in_specialfunctioncall2968); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_171.Add(char_literal376);



				{
				// AST REWRITE
				// elements: STRING, expression, TOKEN
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 442:83: -> ^( T_CONVERT TOKEN expression ( STRING )? )
				{
					DebugLocation(442, 86);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:442:86: ^( T_CONVERT TOKEN expression ( STRING )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(442, 88);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CONVERT, "T_CONVERT"), root_1);

					DebugLocation(442, 98);
					adaptor.AddChild(root_1, stream_TOKEN.NextNode());
					DebugLocation(442, 104);
					adaptor.AddChild(root_1, stream_expression.NextTree());
					DebugLocation(442, 115);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:442:115: ( STRING )?
					if (stream_STRING.HasNext)
					{
						DebugLocation(442, 115);
						adaptor.AddChild(root_1, stream_STRING.NextNode());

					}
					stream_STRING.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:443:4: CAST ( WS )? '(' ( WS )? expression WS AS WS datatype ( WS )? ')'
				{
				DebugLocation(443, 4);
				CAST377=(IToken)Match(input,CAST,Follow._CAST_in_specialfunctioncall2986); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CAST.Add(CAST377);

				DebugLocation(443, 9);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:443:9: ( WS )?
				int alt135=2;
				try { DebugEnterSubRule(135);
				try { DebugEnterDecision(135, decisionCanBacktrack[135]);
				int LA135_0 = input.LA(1);

				if ((LA135_0==WS))
				{
					alt135 = 1;
				}
				} finally { DebugExitDecision(135); }
				switch (alt135)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:443:9: WS
					{
					DebugLocation(443, 9);
					WS378=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2988); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS378);


					}
					break;

				}
				} finally { DebugExitSubRule(135); }

				DebugLocation(443, 13);
				char_literal379=(IToken)Match(input,170,Follow._170_in_specialfunctioncall2991); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_170.Add(char_literal379);

				DebugLocation(443, 17);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:443:17: ( WS )?
				int alt136=2;
				try { DebugEnterSubRule(136);
				try { DebugEnterDecision(136, decisionCanBacktrack[136]);
				int LA136_0 = input.LA(1);

				if ((LA136_0==WS))
				{
					alt136 = 1;
				}
				} finally { DebugExitDecision(136); }
				switch (alt136)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:443:17: WS
					{
					DebugLocation(443, 17);
					WS380=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2993); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS380);


					}
					break;

				}
				} finally { DebugExitSubRule(136); }

				DebugLocation(443, 21);
				PushFollow(Follow._expression_in_specialfunctioncall2996);
				expression381=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression381.Tree);
				DebugLocation(443, 32);
				WS382=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2998); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS382);

				DebugLocation(443, 35);
				AS383=(IToken)Match(input,AS,Follow._AS_in_specialfunctioncall3000); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_AS.Add(AS383);

				DebugLocation(443, 38);
				WS384=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3002); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS384);

				DebugLocation(443, 41);
				PushFollow(Follow._datatype_in_specialfunctioncall3004);
				datatype385=datatype();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_datatype.Add(datatype385.Tree);
				DebugLocation(443, 50);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:443:50: ( WS )?
				int alt137=2;
				try { DebugEnterSubRule(137);
				try { DebugEnterDecision(137, decisionCanBacktrack[137]);
				int LA137_0 = input.LA(1);

				if ((LA137_0==WS))
				{
					alt137 = 1;
				}
				} finally { DebugExitDecision(137); }
				switch (alt137)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:443:50: WS
					{
					DebugLocation(443, 50);
					WS386=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3006); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS386);


					}
					break;

				}
				} finally { DebugExitSubRule(137); }

				DebugLocation(443, 54);
				char_literal387=(IToken)Match(input,171,Follow._171_in_specialfunctioncall3009); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_171.Add(char_literal387);



				{
				// AST REWRITE
				// elements: expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 443:58: -> ^( T_CONVERT TOKEN expression )
				{
					DebugLocation(443, 61);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:443:61: ^( T_CONVERT TOKEN expression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(443, 63);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CONVERT, "T_CONVERT"), root_1);

					DebugLocation(443, 73);
					adaptor.AddChild(root_1, (object)adaptor.Create(TOKEN, "TOKEN"));
					DebugLocation(443, 79);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:444:4: DATEADD ( WS )? '(' ( WS )? datepart ( WS )? ',' ( WS )? expression ( WS )? ',' ( WS )? expression ( WS )? ')'
				{
				DebugLocation(444, 4);
				DATEADD388=(IToken)Match(input,DATEADD,Follow._DATEADD_in_specialfunctioncall3024); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DATEADD.Add(DATEADD388);

				DebugLocation(444, 12);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:444:12: ( WS )?
				int alt138=2;
				try { DebugEnterSubRule(138);
				try { DebugEnterDecision(138, decisionCanBacktrack[138]);
				int LA138_0 = input.LA(1);

				if ((LA138_0==WS))
				{
					alt138 = 1;
				}
				} finally { DebugExitDecision(138); }
				switch (alt138)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:444:12: WS
					{
					DebugLocation(444, 12);
					WS389=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3026); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS389);


					}
					break;

				}
				} finally { DebugExitSubRule(138); }

				DebugLocation(444, 16);
				char_literal390=(IToken)Match(input,170,Follow._170_in_specialfunctioncall3029); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_170.Add(char_literal390);

				DebugLocation(444, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:444:20: ( WS )?
				int alt139=2;
				try { DebugEnterSubRule(139);
				try { DebugEnterDecision(139, decisionCanBacktrack[139]);
				int LA139_0 = input.LA(1);

				if ((LA139_0==WS))
				{
					alt139 = 1;
				}
				} finally { DebugExitDecision(139); }
				switch (alt139)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:444:20: WS
					{
					DebugLocation(444, 20);
					WS391=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3031); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS391);


					}
					break;

				}
				} finally { DebugExitSubRule(139); }

				DebugLocation(444, 24);
				PushFollow(Follow._datepart_in_specialfunctioncall3034);
				datepart392=datepart();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_datepart.Add(datepart392.Tree);
				DebugLocation(444, 33);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:444:33: ( WS )?
				int alt140=2;
				try { DebugEnterSubRule(140);
				try { DebugEnterDecision(140, decisionCanBacktrack[140]);
				int LA140_0 = input.LA(1);

				if ((LA140_0==WS))
				{
					alt140 = 1;
				}
				} finally { DebugExitDecision(140); }
				switch (alt140)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:444:33: WS
					{
					DebugLocation(444, 33);
					WS393=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3036); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS393);


					}
					break;

				}
				} finally { DebugExitSubRule(140); }

				DebugLocation(444, 37);
				char_literal394=(IToken)Match(input,174,Follow._174_in_specialfunctioncall3039); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_174.Add(char_literal394);

				DebugLocation(444, 41);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:444:41: ( WS )?
				int alt141=2;
				try { DebugEnterSubRule(141);
				try { DebugEnterDecision(141, decisionCanBacktrack[141]);
				int LA141_0 = input.LA(1);

				if ((LA141_0==WS))
				{
					alt141 = 1;
				}
				} finally { DebugExitDecision(141); }
				switch (alt141)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:444:41: WS
					{
					DebugLocation(444, 41);
					WS395=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3041); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS395);


					}
					break;

				}
				} finally { DebugExitSubRule(141); }

				DebugLocation(444, 45);
				PushFollow(Follow._expression_in_specialfunctioncall3044);
				expression396=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression396.Tree);
				DebugLocation(444, 56);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:444:56: ( WS )?
				int alt142=2;
				try { DebugEnterSubRule(142);
				try { DebugEnterDecision(142, decisionCanBacktrack[142]);
				int LA142_0 = input.LA(1);

				if ((LA142_0==WS))
				{
					alt142 = 1;
				}
				} finally { DebugExitDecision(142); }
				switch (alt142)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:444:56: WS
					{
					DebugLocation(444, 56);
					WS397=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3046); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS397);


					}
					break;

				}
				} finally { DebugExitSubRule(142); }

				DebugLocation(444, 60);
				char_literal398=(IToken)Match(input,174,Follow._174_in_specialfunctioncall3049); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_174.Add(char_literal398);

				DebugLocation(444, 64);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:444:64: ( WS )?
				int alt143=2;
				try { DebugEnterSubRule(143);
				try { DebugEnterDecision(143, decisionCanBacktrack[143]);
				int LA143_0 = input.LA(1);

				if ((LA143_0==WS))
				{
					alt143 = 1;
				}
				} finally { DebugExitDecision(143); }
				switch (alt143)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:444:64: WS
					{
					DebugLocation(444, 64);
					WS399=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3051); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS399);


					}
					break;

				}
				} finally { DebugExitSubRule(143); }

				DebugLocation(444, 68);
				PushFollow(Follow._expression_in_specialfunctioncall3054);
				expression400=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression400.Tree);
				DebugLocation(444, 79);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:444:79: ( WS )?
				int alt144=2;
				try { DebugEnterSubRule(144);
				try { DebugEnterDecision(144, decisionCanBacktrack[144]);
				int LA144_0 = input.LA(1);

				if ((LA144_0==WS))
				{
					alt144 = 1;
				}
				} finally { DebugExitDecision(144); }
				switch (alt144)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:444:79: WS
					{
					DebugLocation(444, 79);
					WS401=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3056); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS401);


					}
					break;

				}
				} finally { DebugExitSubRule(144); }

				DebugLocation(444, 83);
				char_literal402=(IToken)Match(input,171,Follow._171_in_specialfunctioncall3059); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_171.Add(char_literal402);



				{
				// AST REWRITE
				// elements: expression, datepart, DATEADD
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 444:87: -> ^( T_FUNCTIONCALL DATEADD datepart ( expression )+ )
				{
					DebugLocation(444, 90);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:444:90: ^( T_FUNCTIONCALL DATEADD datepart ( expression )+ )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(444, 92);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(444, 107);
					adaptor.AddChild(root_1, stream_DATEADD.NextNode());
					DebugLocation(444, 115);
					adaptor.AddChild(root_1, stream_datepart.NextTree());
					DebugLocation(444, 124);
					if (!(stream_expression.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expression.HasNext )
					{
						DebugLocation(444, 124);
						adaptor.AddChild(root_1, stream_expression.NextTree());

					}
					stream_expression.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:445:4: DATEDIFF ( WS )? '(' ( WS )? datepart ( WS )? ',' ( WS )? expression ( WS )? ',' ( WS )? expression ( WS )? ')'
				{
				DebugLocation(445, 4);
				DATEDIFF403=(IToken)Match(input,DATEDIFF,Follow._DATEDIFF_in_specialfunctioncall3077); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DATEDIFF.Add(DATEDIFF403);

				DebugLocation(445, 13);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:445:13: ( WS )?
				int alt145=2;
				try { DebugEnterSubRule(145);
				try { DebugEnterDecision(145, decisionCanBacktrack[145]);
				int LA145_0 = input.LA(1);

				if ((LA145_0==WS))
				{
					alt145 = 1;
				}
				} finally { DebugExitDecision(145); }
				switch (alt145)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:445:13: WS
					{
					DebugLocation(445, 13);
					WS404=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3079); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS404);


					}
					break;

				}
				} finally { DebugExitSubRule(145); }

				DebugLocation(445, 17);
				char_literal405=(IToken)Match(input,170,Follow._170_in_specialfunctioncall3082); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_170.Add(char_literal405);

				DebugLocation(445, 21);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:445:21: ( WS )?
				int alt146=2;
				try { DebugEnterSubRule(146);
				try { DebugEnterDecision(146, decisionCanBacktrack[146]);
				int LA146_0 = input.LA(1);

				if ((LA146_0==WS))
				{
					alt146 = 1;
				}
				} finally { DebugExitDecision(146); }
				switch (alt146)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:445:21: WS
					{
					DebugLocation(445, 21);
					WS406=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3084); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS406);


					}
					break;

				}
				} finally { DebugExitSubRule(146); }

				DebugLocation(445, 25);
				PushFollow(Follow._datepart_in_specialfunctioncall3087);
				datepart407=datepart();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_datepart.Add(datepart407.Tree);
				DebugLocation(445, 34);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:445:34: ( WS )?
				int alt147=2;
				try { DebugEnterSubRule(147);
				try { DebugEnterDecision(147, decisionCanBacktrack[147]);
				int LA147_0 = input.LA(1);

				if ((LA147_0==WS))
				{
					alt147 = 1;
				}
				} finally { DebugExitDecision(147); }
				switch (alt147)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:445:34: WS
					{
					DebugLocation(445, 34);
					WS408=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3089); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS408);


					}
					break;

				}
				} finally { DebugExitSubRule(147); }

				DebugLocation(445, 38);
				char_literal409=(IToken)Match(input,174,Follow._174_in_specialfunctioncall3092); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_174.Add(char_literal409);

				DebugLocation(445, 42);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:445:42: ( WS )?
				int alt148=2;
				try { DebugEnterSubRule(148);
				try { DebugEnterDecision(148, decisionCanBacktrack[148]);
				int LA148_0 = input.LA(1);

				if ((LA148_0==WS))
				{
					alt148 = 1;
				}
				} finally { DebugExitDecision(148); }
				switch (alt148)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:445:42: WS
					{
					DebugLocation(445, 42);
					WS410=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3094); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS410);


					}
					break;

				}
				} finally { DebugExitSubRule(148); }

				DebugLocation(445, 46);
				PushFollow(Follow._expression_in_specialfunctioncall3097);
				expression411=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression411.Tree);
				DebugLocation(445, 57);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:445:57: ( WS )?
				int alt149=2;
				try { DebugEnterSubRule(149);
				try { DebugEnterDecision(149, decisionCanBacktrack[149]);
				int LA149_0 = input.LA(1);

				if ((LA149_0==WS))
				{
					alt149 = 1;
				}
				} finally { DebugExitDecision(149); }
				switch (alt149)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:445:57: WS
					{
					DebugLocation(445, 57);
					WS412=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3099); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS412);


					}
					break;

				}
				} finally { DebugExitSubRule(149); }

				DebugLocation(445, 61);
				char_literal413=(IToken)Match(input,174,Follow._174_in_specialfunctioncall3102); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_174.Add(char_literal413);

				DebugLocation(445, 65);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:445:65: ( WS )?
				int alt150=2;
				try { DebugEnterSubRule(150);
				try { DebugEnterDecision(150, decisionCanBacktrack[150]);
				int LA150_0 = input.LA(1);

				if ((LA150_0==WS))
				{
					alt150 = 1;
				}
				} finally { DebugExitDecision(150); }
				switch (alt150)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:445:65: WS
					{
					DebugLocation(445, 65);
					WS414=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3104); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS414);


					}
					break;

				}
				} finally { DebugExitSubRule(150); }

				DebugLocation(445, 69);
				PushFollow(Follow._expression_in_specialfunctioncall3107);
				expression415=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression415.Tree);
				DebugLocation(445, 80);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:445:80: ( WS )?
				int alt151=2;
				try { DebugEnterSubRule(151);
				try { DebugEnterDecision(151, decisionCanBacktrack[151]);
				int LA151_0 = input.LA(1);

				if ((LA151_0==WS))
				{
					alt151 = 1;
				}
				} finally { DebugExitDecision(151); }
				switch (alt151)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:445:80: WS
					{
					DebugLocation(445, 80);
					WS416=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3109); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS416);


					}
					break;

				}
				} finally { DebugExitSubRule(151); }

				DebugLocation(445, 84);
				char_literal417=(IToken)Match(input,171,Follow._171_in_specialfunctioncall3112); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_171.Add(char_literal417);



				{
				// AST REWRITE
				// elements: DATEDIFF, expression, datepart
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 445:88: -> ^( T_FUNCTIONCALL DATEDIFF datepart ( expression )+ )
				{
					DebugLocation(445, 91);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:445:91: ^( T_FUNCTIONCALL DATEDIFF datepart ( expression )+ )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(445, 93);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(445, 108);
					adaptor.AddChild(root_1, stream_DATEDIFF.NextNode());
					DebugLocation(445, 117);
					adaptor.AddChild(root_1, stream_datepart.NextTree());
					DebugLocation(445, 126);
					if (!(stream_expression.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expression.HasNext )
					{
						DebugLocation(445, 126);
						adaptor.AddChild(root_1, stream_expression.NextTree());

					}
					stream_expression.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:446:4: DATEPART ( WS )? '(' ( WS )? datepart ( WS )? ',' ( WS )? expression ( WS )? ')'
				{
				DebugLocation(446, 4);
				DATEPART418=(IToken)Match(input,DATEPART,Follow._DATEPART_in_specialfunctioncall3130); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DATEPART.Add(DATEPART418);

				DebugLocation(446, 13);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:446:13: ( WS )?
				int alt152=2;
				try { DebugEnterSubRule(152);
				try { DebugEnterDecision(152, decisionCanBacktrack[152]);
				int LA152_0 = input.LA(1);

				if ((LA152_0==WS))
				{
					alt152 = 1;
				}
				} finally { DebugExitDecision(152); }
				switch (alt152)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:446:13: WS
					{
					DebugLocation(446, 13);
					WS419=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3132); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS419);


					}
					break;

				}
				} finally { DebugExitSubRule(152); }

				DebugLocation(446, 17);
				char_literal420=(IToken)Match(input,170,Follow._170_in_specialfunctioncall3135); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_170.Add(char_literal420);

				DebugLocation(446, 21);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:446:21: ( WS )?
				int alt153=2;
				try { DebugEnterSubRule(153);
				try { DebugEnterDecision(153, decisionCanBacktrack[153]);
				int LA153_0 = input.LA(1);

				if ((LA153_0==WS))
				{
					alt153 = 1;
				}
				} finally { DebugExitDecision(153); }
				switch (alt153)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:446:21: WS
					{
					DebugLocation(446, 21);
					WS421=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3137); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS421);


					}
					break;

				}
				} finally { DebugExitSubRule(153); }

				DebugLocation(446, 25);
				PushFollow(Follow._datepart_in_specialfunctioncall3140);
				datepart422=datepart();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_datepart.Add(datepart422.Tree);
				DebugLocation(446, 34);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:446:34: ( WS )?
				int alt154=2;
				try { DebugEnterSubRule(154);
				try { DebugEnterDecision(154, decisionCanBacktrack[154]);
				int LA154_0 = input.LA(1);

				if ((LA154_0==WS))
				{
					alt154 = 1;
				}
				} finally { DebugExitDecision(154); }
				switch (alt154)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:446:34: WS
					{
					DebugLocation(446, 34);
					WS423=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3142); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS423);


					}
					break;

				}
				} finally { DebugExitSubRule(154); }

				DebugLocation(446, 38);
				char_literal424=(IToken)Match(input,174,Follow._174_in_specialfunctioncall3145); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_174.Add(char_literal424);

				DebugLocation(446, 42);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:446:42: ( WS )?
				int alt155=2;
				try { DebugEnterSubRule(155);
				try { DebugEnterDecision(155, decisionCanBacktrack[155]);
				int LA155_0 = input.LA(1);

				if ((LA155_0==WS))
				{
					alt155 = 1;
				}
				} finally { DebugExitDecision(155); }
				switch (alt155)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:446:42: WS
					{
					DebugLocation(446, 42);
					WS425=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3147); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS425);


					}
					break;

				}
				} finally { DebugExitSubRule(155); }

				DebugLocation(446, 46);
				PushFollow(Follow._expression_in_specialfunctioncall3150);
				expression426=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression426.Tree);
				DebugLocation(446, 57);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:446:57: ( WS )?
				int alt156=2;
				try { DebugEnterSubRule(156);
				try { DebugEnterDecision(156, decisionCanBacktrack[156]);
				int LA156_0 = input.LA(1);

				if ((LA156_0==WS))
				{
					alt156 = 1;
				}
				} finally { DebugExitDecision(156); }
				switch (alt156)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:446:57: WS
					{
					DebugLocation(446, 57);
					WS427=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3152); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS427);


					}
					break;

				}
				} finally { DebugExitSubRule(156); }

				DebugLocation(446, 61);
				char_literal428=(IToken)Match(input,171,Follow._171_in_specialfunctioncall3155); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_171.Add(char_literal428);



				{
				// AST REWRITE
				// elements: datepart, expression, DATEPART
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 446:65: -> ^( T_FUNCTIONCALL DATEPART datepart expression )
				{
					DebugLocation(446, 68);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:446:68: ^( T_FUNCTIONCALL DATEPART datepart expression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(446, 70);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(446, 85);
					adaptor.AddChild(root_1, stream_DATEPART.NextNode());
					DebugLocation(446, 94);
					adaptor.AddChild(root_1, stream_datepart.NextTree());
					DebugLocation(446, 103);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("specialfunctioncall", 59);
			LeaveRule("specialfunctioncall", 59);
			LeaveRule_specialfunctioncall();
	    }
	 	DebugLocation(447, 1);
		} finally { DebugExitRule(GrammarFileName, "specialfunctioncall"); }
		return retval;

	}
	// $ANTLR end "specialfunctioncall"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_datepart() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_datepart() {}

	// $ANTLR start "datepart"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:449:1: datepart : TOKEN -> ^( T_DATEPART TOKEN ) ;
	[GrammarRule("datepart")]
	private AstParserRuleReturnScope<object, IToken> datepart()
	{
		EnterRule_datepart();
		EnterRule("datepart", 60);
		TraceIn("datepart", 60);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN429 = default(IToken);

	    object TOKEN429_tree = default(object);
	    RewriteRuleITokenStream stream_TOKEN=new RewriteRuleITokenStream(adaptor,"token TOKEN");

		try { DebugEnterRule(GrammarFileName, "datepart");
		DebugLocation(449, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:450:2: ( TOKEN -> ^( T_DATEPART TOKEN ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:450:4: TOKEN
			{
			DebugLocation(450, 4);
			TOKEN429=(IToken)Match(input,TOKEN,Follow._TOKEN_in_datepart3179); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_TOKEN.Add(TOKEN429);



			{
			// AST REWRITE
			// elements: TOKEN
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 450:10: -> ^( T_DATEPART TOKEN )
			{
				DebugLocation(450, 13);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:450:13: ^( T_DATEPART TOKEN )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(450, 15);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_DATEPART, "T_DATEPART"), root_1);

				DebugLocation(450, 26);
				adaptor.AddChild(root_1, stream_TOKEN.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("datepart", 60);
			LeaveRule("datepart", 60);
			LeaveRule_datepart();
	    }
	 	DebugLocation(451, 1);
		} finally { DebugExitRule(GrammarFileName, "datepart"); }
		return retval;

	}
	// $ANTLR end "datepart"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_number() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_number() {}

	// $ANTLR start "number"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:453:1: number : NUMBER ;
	[GrammarRule("number")]
	private AstParserRuleReturnScope<object, IToken> number()
	{
		EnterRule_number();
		EnterRule("number", 61);
		TraceIn("number", 61);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken NUMBER430 = default(IToken);

	    object NUMBER430_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "number");
		DebugLocation(453, 16);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:453:9: ( NUMBER )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:453:11: NUMBER
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(453, 11);
			NUMBER430=(IToken)Match(input,NUMBER,Follow._NUMBER_in_number3199); if (state.failed) return retval;
			if (state.backtracking == 0) {
			NUMBER430_tree = (object)adaptor.Create(NUMBER430);
			adaptor.AddChild(root_0, NUMBER430_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("number", 61);
			LeaveRule("number", 61);
			LeaveRule_number();
	    }
	 	DebugLocation(453, 16);
		} finally { DebugExitRule(GrammarFileName, "number"); }
		return retval;

	}
	// $ANTLR end "number"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_string() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_string() {}

	// $ANTLR start "string"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:455:1: string : STRING -> ^( T_STRING STRING ) ;
	[GrammarRule("string")]
	private AstParserRuleReturnScope<object, IToken> @string()
	{
		EnterRule_string();
		EnterRule("string", 62);
		TraceIn("string", 62);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken STRING431 = default(IToken);

	    object STRING431_tree = default(object);
	    RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");

		try { DebugEnterRule(GrammarFileName, "string");
		DebugLocation(455, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:455:8: ( STRING -> ^( T_STRING STRING ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:455:10: STRING
			{
			DebugLocation(455, 10);
			STRING431=(IToken)Match(input,STRING,Follow._STRING_in_string3207); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_STRING.Add(STRING431);



			{
			// AST REWRITE
			// elements: STRING
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 455:17: -> ^( T_STRING STRING )
			{
				DebugLocation(455, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:455:20: ^( T_STRING STRING )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(455, 22);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_STRING, "T_STRING"), root_1);

				DebugLocation(455, 31);
				adaptor.AddChild(root_1, stream_STRING.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("string", 62);
			LeaveRule("string", 62);
			LeaveRule_string();
	    }
	 	DebugLocation(456, 1);
		} finally { DebugExitRule(GrammarFileName, "string"); }
		return retval;

	}
	// $ANTLR end "string"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_datatype() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_datatype() {}

	// $ANTLR start "datatype"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:458:1: datatype : TOKEN ;
	[GrammarRule("datatype")]
	private AstParserRuleReturnScope<object, IToken> datatype()
	{
		EnterRule_datatype();
		EnterRule("datatype", 63);
		TraceIn("datatype", 63);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN432 = default(IToken);

	    object TOKEN432_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "datatype");
		DebugLocation(458, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:459:2: ( TOKEN )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:459:4: TOKEN
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(459, 4);
			TOKEN432=(IToken)Match(input,TOKEN,Follow._TOKEN_in_datatype3227); if (state.failed) return retval;
			if (state.backtracking == 0) {
			TOKEN432_tree = (object)adaptor.Create(TOKEN432);
			adaptor.AddChild(root_0, TOKEN432_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("datatype", 63);
			LeaveRule("datatype", 63);
			LeaveRule_datatype();
	    }
	 	DebugLocation(460, 1);
		} finally { DebugExitRule(GrammarFileName, "datatype"); }
		return retval;

	}
	// $ANTLR end "datatype"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_variable() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_variable() {}

	// $ANTLR start "variable"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:462:1: variable : VARIABLE -> ^( T_VARIABLE VARIABLE ) ;
	[GrammarRule("variable")]
	private AstParserRuleReturnScope<object, IToken> variable()
	{
		EnterRule_variable();
		EnterRule("variable", 64);
		TraceIn("variable", 64);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken VARIABLE433 = default(IToken);

	    object VARIABLE433_tree = default(object);
	    RewriteRuleITokenStream stream_VARIABLE=new RewriteRuleITokenStream(adaptor,"token VARIABLE");

		try { DebugEnterRule(GrammarFileName, "variable");
		DebugLocation(462, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:463:2: ( VARIABLE -> ^( T_VARIABLE VARIABLE ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:463:4: VARIABLE
			{
			DebugLocation(463, 4);
			VARIABLE433=(IToken)Match(input,VARIABLE,Follow._VARIABLE_in_variable3239); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_VARIABLE.Add(VARIABLE433);



			{
			// AST REWRITE
			// elements: VARIABLE
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 463:13: -> ^( T_VARIABLE VARIABLE )
			{
				DebugLocation(463, 16);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:463:16: ^( T_VARIABLE VARIABLE )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(463, 18);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_VARIABLE, "T_VARIABLE"), root_1);

				DebugLocation(463, 29);
				adaptor.AddChild(root_1, stream_VARIABLE.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variable", 64);
			LeaveRule("variable", 64);
			LeaveRule_variable();
	    }
	 	DebugLocation(464, 1);
		} finally { DebugExitRule(GrammarFileName, "variable"); }
		return retval;

	}
	// $ANTLR end "variable"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_case() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_case() {}

	// $ANTLR start "case"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:466:1: case : CASE WS ( expression WS )? ( case_when WS )* ( case_else WS )? END -> ^( T_CASE ( expression )? ( case_when )* ( case_else )? ) ;
	[GrammarRule("case")]
	private AstParserRuleReturnScope<object, IToken> @case()
	{
		EnterRule_case();
		EnterRule("case", 65);
		TraceIn("case", 65);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken CASE434 = default(IToken);
	    IToken WS435 = default(IToken);
	    IToken WS437 = default(IToken);
	    IToken WS439 = default(IToken);
	    IToken WS441 = default(IToken);
	    IToken END442 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression436 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> case_when438 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> case_else440 = default(AstParserRuleReturnScope<object, IToken>);

	    object CASE434_tree = default(object);
	    object WS435_tree = default(object);
	    object WS437_tree = default(object);
	    object WS439_tree = default(object);
	    object WS441_tree = default(object);
	    object END442_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_END=new RewriteRuleITokenStream(adaptor,"token END");
	    RewriteRuleITokenStream stream_CASE=new RewriteRuleITokenStream(adaptor,"token CASE");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_case_when=new RewriteRuleSubtreeStream(adaptor,"rule case_when");
	    RewriteRuleSubtreeStream stream_case_else=new RewriteRuleSubtreeStream(adaptor,"rule case_else");
		try { DebugEnterRule(GrammarFileName, "case");
		DebugLocation(466, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:467:2: ( CASE WS ( expression WS )? ( case_when WS )* ( case_else WS )? END -> ^( T_CASE ( expression )? ( case_when )* ( case_else )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:467:4: CASE WS ( expression WS )? ( case_when WS )* ( case_else WS )? END
			{
			DebugLocation(467, 4);
			CASE434=(IToken)Match(input,CASE,Follow._CASE_in_case3259); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CASE.Add(CASE434);

			DebugLocation(467, 9);
			WS435=(IToken)Match(input,WS,Follow._WS_in_case3261); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS435);

			DebugLocation(467, 12);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:467:12: ( expression WS )?
			int alt158=2;
			try { DebugEnterSubRule(158);
			try { DebugEnterDecision(158, decisionCanBacktrack[158]);
			int LA158_0 = input.LA(1);

			if (((LA158_0>=CASE && LA158_0<=CAST)||(LA158_0>=CONVERT && LA158_0<=COUNT)||(LA158_0>=DATEADD && LA158_0<=DATEPART)||LA158_0==EXISTS||(LA158_0>=NOT && LA158_0<=NUMBER)||LA158_0==SIMPLE_FILE||(LA158_0>=STRING && LA158_0<=SYSTEMVAR)||LA158_0==TOKEN||LA158_0==VARIABLE||LA158_0==170||LA158_0==173||LA158_0==175||LA158_0==189))
			{
				alt158 = 1;
			}
			} finally { DebugExitDecision(158); }
			switch (alt158)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:467:13: expression WS
				{
				DebugLocation(467, 13);
				PushFollow(Follow._expression_in_case3264);
				expression436=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression436.Tree);
				DebugLocation(467, 24);
				WS437=(IToken)Match(input,WS,Follow._WS_in_case3266); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS437);


				}
				break;

			}
			} finally { DebugExitSubRule(158); }

			DebugLocation(467, 29);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:467:29: ( case_when WS )*
			try { DebugEnterSubRule(159);
			while (true)
			{
				int alt159=2;
				try { DebugEnterDecision(159, decisionCanBacktrack[159]);
				int LA159_0 = input.LA(1);

				if ((LA159_0==WHEN))
				{
					alt159 = 1;
				}


				} finally { DebugExitDecision(159); }
				switch ( alt159 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:467:30: case_when WS
					{
					DebugLocation(467, 30);
					PushFollow(Follow._case_when_in_case3271);
					case_when438=case_when();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_case_when.Add(case_when438.Tree);
					DebugLocation(467, 40);
					WS439=(IToken)Match(input,WS,Follow._WS_in_case3273); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS439);


					}
					break;

				default:
					goto loop159;
				}
			}

			loop159:
				;

			} finally { DebugExitSubRule(159); }

			DebugLocation(467, 45);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:467:45: ( case_else WS )?
			int alt160=2;
			try { DebugEnterSubRule(160);
			try { DebugEnterDecision(160, decisionCanBacktrack[160]);
			int LA160_0 = input.LA(1);

			if ((LA160_0==ELSE))
			{
				alt160 = 1;
			}
			} finally { DebugExitDecision(160); }
			switch (alt160)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:467:46: case_else WS
				{
				DebugLocation(467, 46);
				PushFollow(Follow._case_else_in_case3278);
				case_else440=case_else();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_case_else.Add(case_else440.Tree);
				DebugLocation(467, 56);
				WS441=(IToken)Match(input,WS,Follow._WS_in_case3280); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS441);


				}
				break;

			}
			} finally { DebugExitSubRule(160); }

			DebugLocation(467, 61);
			END442=(IToken)Match(input,END,Follow._END_in_case3284); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_END.Add(END442);



			{
			// AST REWRITE
			// elements: case_when, case_else, expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 468:2: -> ^( T_CASE ( expression )? ( case_when )* ( case_else )? )
			{
				DebugLocation(468, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:468:5: ^( T_CASE ( expression )? ( case_when )* ( case_else )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(468, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CASE, "T_CASE"), root_1);

				DebugLocation(468, 14);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:468:14: ( expression )?
				if (stream_expression.HasNext)
				{
					DebugLocation(468, 14);
					adaptor.AddChild(root_1, stream_expression.NextTree());

				}
				stream_expression.Reset();
				DebugLocation(468, 26);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:468:26: ( case_when )*
				while ( stream_case_when.HasNext )
				{
					DebugLocation(468, 26);
					adaptor.AddChild(root_1, stream_case_when.NextTree());

				}
				stream_case_when.Reset();
				DebugLocation(468, 37);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:468:37: ( case_else )?
				if (stream_case_else.HasNext)
				{
					DebugLocation(468, 37);
					adaptor.AddChild(root_1, stream_case_else.NextTree());

				}
				stream_case_else.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("case", 65);
			LeaveRule("case", 65);
			LeaveRule_case();
	    }
	 	DebugLocation(469, 1);
		} finally { DebugExitRule(GrammarFileName, "case"); }
		return retval;

	}
	// $ANTLR end "case"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_case_when() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_case_when() {}

	// $ANTLR start "case_when"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:471:1: case_when : WHEN WS a= expression WS THEN WS b= expression -> ^( T_CASE_WHEN $a $b) ;
	[GrammarRule("case_when")]
	private AstParserRuleReturnScope<object, IToken> case_when()
	{
		EnterRule_case_when();
		EnterRule("case_when", 66);
		TraceIn("case_when", 66);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WHEN443 = default(IToken);
	    IToken WS444 = default(IToken);
	    IToken WS445 = default(IToken);
	    IToken THEN446 = default(IToken);
	    IToken WS447 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);

	    object WHEN443_tree = default(object);
	    object WS444_tree = default(object);
	    object WS445_tree = default(object);
	    object THEN446_tree = default(object);
	    object WS447_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_THEN=new RewriteRuleITokenStream(adaptor,"token THEN");
	    RewriteRuleITokenStream stream_WHEN=new RewriteRuleITokenStream(adaptor,"token WHEN");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "case_when");
		DebugLocation(471, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:472:2: ( WHEN WS a= expression WS THEN WS b= expression -> ^( T_CASE_WHEN $a $b) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:472:4: WHEN WS a= expression WS THEN WS b= expression
			{
			DebugLocation(472, 4);
			WHEN443=(IToken)Match(input,WHEN,Follow._WHEN_in_case_when3312); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WHEN.Add(WHEN443);

			DebugLocation(472, 9);
			WS444=(IToken)Match(input,WS,Follow._WS_in_case_when3314); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS444);

			DebugLocation(472, 13);
			PushFollow(Follow._expression_in_case_when3318);
			a=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression.Add(a.Tree);
			DebugLocation(472, 25);
			WS445=(IToken)Match(input,WS,Follow._WS_in_case_when3320); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS445);

			DebugLocation(472, 28);
			THEN446=(IToken)Match(input,THEN,Follow._THEN_in_case_when3322); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_THEN.Add(THEN446);

			DebugLocation(472, 33);
			WS447=(IToken)Match(input,WS,Follow._WS_in_case_when3324); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS447);

			DebugLocation(472, 37);
			PushFollow(Follow._expression_in_case_when3328);
			b=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression.Add(b.Tree);


			{
			// AST REWRITE
			// elements: a, b
			// token labels: 
			// rule labels: retval, b, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 473:2: -> ^( T_CASE_WHEN $a $b)
			{
				DebugLocation(473, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:473:5: ^( T_CASE_WHEN $a $b)
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(473, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CASE_WHEN, "T_CASE_WHEN"), root_1);

				DebugLocation(473, 20);
				adaptor.AddChild(root_1, stream_a.NextTree());
				DebugLocation(473, 23);
				adaptor.AddChild(root_1, stream_b.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("case_when", 66);
			LeaveRule("case_when", 66);
			LeaveRule_case_when();
	    }
	 	DebugLocation(474, 1);
		} finally { DebugExitRule(GrammarFileName, "case_when"); }
		return retval;

	}
	// $ANTLR end "case_when"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_case_else() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_case_else() {}

	// $ANTLR start "case_else"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:476:1: case_else : ELSE WS expression -> ^( T_CASE_ELSE expression ) ;
	[GrammarRule("case_else")]
	private AstParserRuleReturnScope<object, IToken> case_else()
	{
		EnterRule_case_else();
		EnterRule("case_else", 67);
		TraceIn("case_else", 67);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken ELSE448 = default(IToken);
	    IToken WS449 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression450 = default(AstParserRuleReturnScope<object, IToken>);

	    object ELSE448_tree = default(object);
	    object WS449_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_ELSE=new RewriteRuleITokenStream(adaptor,"token ELSE");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "case_else");
		DebugLocation(476, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:477:2: ( ELSE WS expression -> ^( T_CASE_ELSE expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:477:4: ELSE WS expression
			{
			DebugLocation(477, 4);
			ELSE448=(IToken)Match(input,ELSE,Follow._ELSE_in_case_else3353); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ELSE.Add(ELSE448);

			DebugLocation(477, 9);
			WS449=(IToken)Match(input,WS,Follow._WS_in_case_else3355); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS449);

			DebugLocation(477, 12);
			PushFollow(Follow._expression_in_case_else3357);
			expression450=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression.Add(expression450.Tree);


			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 478:2: -> ^( T_CASE_ELSE expression )
			{
				DebugLocation(478, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:478:5: ^( T_CASE_ELSE expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(478, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CASE_ELSE, "T_CASE_ELSE"), root_1);

				DebugLocation(478, 19);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("case_else", 67);
			LeaveRule("case_else", 67);
			LeaveRule_case_else();
	    }
	 	DebugLocation(479, 1);
		} finally { DebugExitRule(GrammarFileName, "case_else"); }
		return retval;

	}
	// $ANTLR end "case_else"
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred1_gql_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred1_gql_fragment() {}

	// $ANTLR start synpred1_gql
	public void synpred1_gql_fragment()
	{
		EnterRule_synpred1_gql_fragment();
		EnterRule("synpred1_gql_fragment", 68);
		TraceIn("synpred1_gql_fragment", 68);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:148:4: ( '(' )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:148:5: '('
			{
			DebugLocation(148, 5);
			Match(input,170,Follow._170_in_synpred1_gql598); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred1_gql_fragment", 68);
			LeaveRule("synpred1_gql_fragment", 68);
			LeaveRule_synpred1_gql_fragment();
		}
	}
	// $ANTLR end synpred1_gql
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred2_gql_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred2_gql_fragment() {}

	// $ANTLR start synpred2_gql
	public void synpred2_gql_fragment()
	{
		EnterRule_synpred2_gql_fragment();
		EnterRule("synpred2_gql_fragment", 69);
		TraceIn("synpred2_gql_fragment", 69);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:322:4: ( SELECT )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:322:5: SELECT
			{
			DebugLocation(322, 5);
			Match(input,SELECT,Follow._SELECT_in_synpred2_gql1772); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred2_gql_fragment", 69);
			LeaveRule("synpred2_gql_fragment", 69);
			LeaveRule_synpred2_gql_fragment();
		}
	}
	// $ANTLR end synpred2_gql
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred3_gql_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred3_gql_fragment() {}

	// $ANTLR start synpred3_gql
	public void synpred3_gql_fragment()
	{
		EnterRule_synpred3_gql_fragment();
		EnterRule("synpred3_gql_fragment", 70);
		TraceIn("synpred3_gql_fragment", 70);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:414:4: ( subquery )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:414:5: subquery
			{
			DebugLocation(414, 5);
			PushFollow(Follow._subquery_in_synpred3_gql2613);
			subquery();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred3_gql_fragment", 70);
			LeaveRule("synpred3_gql_fragment", 70);
			LeaveRule_synpred3_gql_fragment();
		}
	}
	// $ANTLR end synpred3_gql
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _WS_in_parse402 = new BitSet(new ulong[]{0x6000000044200000UL,0x0UL,0x40004000000UL});
		public static readonly BitSet _commands_in_parse406 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000UL});
		public static readonly BitSet _WS_in_parse408 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_parse413 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _command_in_commands436 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4000200000000UL});
		public static readonly BitSet _WS_in_commands439 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000000000UL});
		public static readonly BitSet _178_in_commands442 = new BitSet(new ulong[]{0x6000000044200000UL,0x0UL,0x40204000000UL});
		public static readonly BitSet _WS_in_commands444 = new BitSet(new ulong[]{0x6000000044200000UL,0x0UL,0x40004000000UL});
		public static readonly BitSet _command_in_commands447 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4000200000000UL});
		public static readonly BitSet _WS_in_commands452 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000000000UL});
		public static readonly BitSet _178_in_commands455 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _select_command_in_command475 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _use_command_in_command480 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declare_command_in_command485 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_command_in_command490 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _create_view_command_in_command495 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _drop_view_command_in_command500 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _drop_table_command_in_command505 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _select_command_union_in_select_command519 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200000000UL});
		public static readonly BitSet _WS_in_select_command522 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _orderby_clause_in_select_command524 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _select_command_simple_in_select_command_union556 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200000000UL});
		public static readonly BitSet _WS_in_select_command_union563 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000UL});
		public static readonly BitSet _UNION_in_select_command_union565 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000UL});
		public static readonly BitSet _WS_in_select_command_union567 = new BitSet(new ulong[]{0x2000000000000000UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _select_command_simple_in_select_command_union571 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200000000UL});
		public static readonly BitSet _subquery_in_select_command_simple603 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SELECT_in_select_command_simple608 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000UL});
		public static readonly BitSet _WS_in_select_command_simple611 = new BitSet(new ulong[]{0x20000020UL});
		public static readonly BitSet _distinct_clause_in_select_command_simple613 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000UL});
		public static readonly BitSet _WS_in_select_command_simple618 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _top_clause_in_select_command_simple620 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000UL});
		public static readonly BitSet _WS_in_select_command_simple625 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _bottom_clause_in_select_command_simple627 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000UL});
		public static readonly BitSet _WS_in_select_command_simple631 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x2000B40010000000UL});
		public static readonly BitSet _column_list_in_select_command_simple633 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200000000UL});
		public static readonly BitSet _WS_in_select_command_simple636 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _into_clause_in_select_command_simple638 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200000000UL});
		public static readonly BitSet _WS_in_select_command_simple643 = new BitSet(new ulong[]{0x1000000000UL});
		public static readonly BitSet _from_clause_in_select_command_simple645 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200000000UL});
		public static readonly BitSet _WS_in_select_command_simple650 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000UL});
		public static readonly BitSet _where_clause_in_select_command_simple652 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200000000UL});
		public static readonly BitSet _WS_in_select_command_simple657 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _groupby_clause_in_select_command_simple659 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200000000UL});
		public static readonly BitSet _WS_in_select_command_simple664 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _having_clause_in_select_command_simple666 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DISTINCT_in_distinct_clause714 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ALL_in_distinct_clause723 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOP_in_top_clause739 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000UL});
		public static readonly BitSet _WS_in_top_clause741 = new BitSet(new ulong[]{0x8010000403998000UL,0x46UL,0x40010000000UL});
		public static readonly BitSet _expression_atom_in_top_clause743 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BOTTOM_in_bottom_clause764 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000UL});
		public static readonly BitSet _WS_in_bottom_clause766 = new BitSet(new ulong[]{0x8010000403998000UL,0x46UL,0x40010000000UL});
		public static readonly BitSet _expression_atom_in_bottom_clause768 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _column_in_column_list789 = new BitSet(new ulong[]{0x2UL,0x0UL,0x400200000000UL});
		public static readonly BitSet _WS_in_column_list792 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000000000UL});
		public static readonly BitSet _174_in_column_list795 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x2000B40210000000UL});
		public static readonly BitSet _WS_in_column_list797 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x2000B40010000000UL});
		public static readonly BitSet _column_in_column_list800 = new BitSet(new ulong[]{0x2UL,0x0UL,0x400200000000UL});
		public static readonly BitSet _all_columns_in_column824 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_column829 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200000000UL});
		public static readonly BitSet _WS_in_column832 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _SIMPLE_FILE_in_column834 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _table_alias_in_all_columns859 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000200000000UL});
		public static readonly BitSet _WS_in_all_columns861 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000000UL});
		public static readonly BitSet _176_in_all_columns864 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100200000000UL});
		public static readonly BitSet _WS_in_all_columns866 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000UL});
		public static readonly BitSet _172_in_all_columns871 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INTO_in_into_clause891 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000UL});
		public static readonly BitSet _WS_in_into_clause893 = new BitSet(new ulong[]{0x8000000000000000UL,0x0UL,0x200000000000000UL});
		public static readonly BitSet _file_in_into_clause895 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FROM_in_from_clause915 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000UL});
		public static readonly BitSet _WS_in_from_clause917 = new BitSet(new ulong[]{0x8000000000000000UL,0x42UL,0x200040000000000UL});
		public static readonly BitSet _from_clause_item_in_from_clause919 = new BitSet(new ulong[]{0x2UL,0x0UL,0x400200000000UL});
		public static readonly BitSet _WS_in_from_clause922 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000000000UL});
		public static readonly BitSet _174_in_from_clause925 = new BitSet(new ulong[]{0x8000000000000000UL,0x42UL,0x200040200000000UL});
		public static readonly BitSet _WS_in_from_clause927 = new BitSet(new ulong[]{0x8000000000000000UL,0x42UL,0x200040000000000UL});
		public static readonly BitSet _from_clause_item_in_from_clause930 = new BitSet(new ulong[]{0x2UL,0x0UL,0x400200000000UL});
		public static readonly BitSet _WS_in_from_clause935 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _table_alias_in_from_clause937 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_from_clause_item964 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _file_in_from_clause_item977 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _subquery_in_from_clause_item982 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _view_name_in_from_clause_item987 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40200000000UL});
		public static readonly BitSet _WS_in_from_clause_item990 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _170_in_from_clause_item993 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x2000AC0010000000UL});
		public static readonly BitSet _expression_list_in_from_clause_item995 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000000UL});
		public static readonly BitSet _171_in_from_clause_item998 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _170_in_subquery1023 = new BitSet(new ulong[]{0x2000000000000000UL,0x0UL,0x40200000000UL});
		public static readonly BitSet _WS_in_subquery1025 = new BitSet(new ulong[]{0x2000000000000000UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _select_command_in_subquery1028 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80200000000UL});
		public static readonly BitSet _WS_in_subquery1030 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000000UL});
		public static readonly BitSet _171_in_subquery1033 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _185_in_file1052 = new BitSet(new ulong[]{0x0UL,0x2UL,0x210000000UL});
		public static readonly BitSet _WS_in_file1054 = new BitSet(new ulong[]{0x0UL,0x2UL,0x10000000UL});
		public static readonly BitSet _file_spec_in_file1057 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000200000000UL});
		public static readonly BitSet _WS_in_file1060 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000000UL});
		public static readonly BitSet _file_option_in_file1062 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000200000000UL});
		public static readonly BitSet _WS_in_file1066 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000000000000UL});
		public static readonly BitSet _186_in_file1069 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _185_in_file1086 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40200000000UL});
		public static readonly BitSet _WS_in_file1088 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _subquery_in_file1091 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000200000000UL});
		public static readonly BitSet _WS_in_file1093 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000000000000UL});
		public static readonly BitSet _186_in_file1096 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SIMPLE_FILE_in_file1109 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _string_in_file_spec1128 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_in_file_spec1133 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _175_in_file_option1145 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _file_option_name_in_file_option1147 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40000200000000UL});
		public static readonly BitSet _WS_in_file_option1151 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000000000UL});
		public static readonly BitSet _182_in_file_option1154 = new BitSet(new ulong[]{0x10000000000000UL,0x42UL,0x210000000UL});
		public static readonly BitSet _WS_in_file_option1156 = new BitSet(new ulong[]{0x10000000000000UL,0x42UL,0x10000000UL});
		public static readonly BitSet _file_option_value_in_file_option1159 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_file_option_name1183 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_file_option_value1195 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_file_option_value1199 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_file_option_value1203 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_in_file_option_value1207 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHERE_in_where_clause1219 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000UL});
		public static readonly BitSet _WS_in_where_clause1221 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x2000A40010000000UL});
		public static readonly BitSet _expression_in_where_clause1223 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GROUP_in_groupby_clause1242 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000UL});
		public static readonly BitSet _WS_in_groupby_clause1244 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _BY_in_groupby_clause1246 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000UL});
		public static readonly BitSet _WS_in_groupby_clause1248 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x2000A40010000000UL});
		public static readonly BitSet _orderby_column_list_in_groupby_clause1250 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _HAVING_in_having_clause1271 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000UL});
		public static readonly BitSet _WS_in_having_clause1273 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x2000A40010000000UL});
		public static readonly BitSet _expression_in_having_clause1275 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ORDER_in_orderby_clause1296 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000UL});
		public static readonly BitSet _WS_in_orderby_clause1298 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _BY_in_orderby_clause1300 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000UL});
		public static readonly BitSet _WS_in_orderby_clause1302 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x2000A40010000000UL});
		public static readonly BitSet _orderby_column_list_in_orderby_clause1304 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _orderby_column_in_orderby_column_list1325 = new BitSet(new ulong[]{0x2UL,0x0UL,0x400200000000UL});
		public static readonly BitSet _WS_in_orderby_column_list1328 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000000000UL});
		public static readonly BitSet _174_in_orderby_column_list1331 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x2000A40210000000UL});
		public static readonly BitSet _WS_in_orderby_column_list1333 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x2000A40010000000UL});
		public static readonly BitSet _orderby_column_in_orderby_column_list1336 = new BitSet(new ulong[]{0x2UL,0x0UL,0x400200000000UL});
		public static readonly BitSet _expression_in_orderby_column1356 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200000000UL});
		public static readonly BitSet _WS_in_orderby_column1359 = new BitSet(new ulong[]{0x100000008000200UL});
		public static readonly BitSet _orderby_direction_in_orderby_column1361 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASC_in_orderby_direction1386 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DESC_in_orderby_direction1395 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ORIG_in_orderby_direction1404 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _USE_in_use_command1422 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000UL});
		public static readonly BitSet _WS_in_use_command1424 = new BitSet(new ulong[]{0x8000000000000000UL,0x0UL,0x200000000000000UL});
		public static readonly BitSet _file_in_use_command1426 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DECLARE_in_declare_command1448 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000UL});
		public static readonly BitSet _WS_in_declare_command1450 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000UL});
		public static readonly BitSet _declaration_list_in_declare_command1452 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_in_declaration_list1469 = new BitSet(new ulong[]{0x2UL,0x0UL,0x400200000000UL});
		public static readonly BitSet _WS_in_declaration_list1472 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000000000UL});
		public static readonly BitSet _174_in_declaration_list1475 = new BitSet(new ulong[]{0x0UL,0x0UL,0x210000000UL});
		public static readonly BitSet _WS_in_declaration_list1477 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000UL});
		public static readonly BitSet _declaration_in_declaration_list1480 = new BitSet(new ulong[]{0x2UL,0x0UL,0x400200000000UL});
		public static readonly BitSet _variable_in_declaration1504 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000UL});
		public static readonly BitSet _WS_in_declaration1506 = new BitSet(new ulong[]{0x100UL,0x40UL});
		public static readonly BitSet _AS_in_declaration1509 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000UL});
		public static readonly BitSet _WS_in_declaration1511 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _datatype_in_declaration1515 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CREATE_in_create_view_command1540 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000UL});
		public static readonly BitSet _WS_in_create_view_command1542 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20000000UL});
		public static readonly BitSet _VIEW_in_create_view_command1544 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000UL});
		public static readonly BitSet _WS_in_create_view_command1546 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _view_name_in_create_view_command1548 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40200000000UL});
		public static readonly BitSet _WS_in_create_view_command1551 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _170_in_create_view_command1554 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000UL});
		public static readonly BitSet _declaration_list_in_create_view_command1556 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000000UL});
		public static readonly BitSet _171_in_create_view_command1558 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000UL});
		public static readonly BitSet _WS_in_create_view_command1562 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _AS_in_create_view_command1564 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000UL});
		public static readonly BitSet _WS_in_create_view_command1566 = new BitSet(new ulong[]{0x2000000000000000UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _select_command_in_create_view_command1568 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DROP_in_drop_view_command1594 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000UL});
		public static readonly BitSet _WS_in_drop_view_command1596 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20000000UL});
		public static readonly BitSet _VIEW_in_drop_view_command1598 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000UL});
		public static readonly BitSet _WS_in_drop_view_command1600 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _view_name_in_drop_view_command1602 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_view_name1622 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DROP_in_drop_table_command1644 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000UL});
		public static readonly BitSet _WS_in_drop_table_command1646 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _TABLE_in_drop_table_command1648 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000UL});
		public static readonly BitSet _WS_in_drop_table_command1650 = new BitSet(new ulong[]{0x8000000000000000UL,0x0UL,0x200000000000000UL});
		public static readonly BitSet _file_in_drop_table_command1652 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SET_in_set_command1676 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000UL});
		public static readonly BitSet _WS_in_set_command1678 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000UL});
		public static readonly BitSet _variable_in_set_command1680 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000200000000UL});
		public static readonly BitSet _WS_in_set_command1682 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000000000UL});
		public static readonly BitSet _182_in_set_command1685 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x2000A40210000000UL});
		public static readonly BitSet _WS_in_set_command1687 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x2000A40010000000UL});
		public static readonly BitSet _expression_in_set_command1690 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SET_in_set_command1705 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000UL});
		public static readonly BitSet _WS_in_set_command1707 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _TOKEN_in_set_command1709 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000UL});
		public static readonly BitSet _WS_in_set_command1711 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x2000A40010000000UL});
		public static readonly BitSet _expression_in_set_command1713 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_expression_list1737 = new BitSet(new ulong[]{0x2UL,0x0UL,0x400200000000UL});
		public static readonly BitSet _WS_in_expression_list1740 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000000000UL});
		public static readonly BitSet _174_in_expression_list1743 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x2000A40210000000UL});
		public static readonly BitSet _WS_in_expression_list1745 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x2000A40010000000UL});
		public static readonly BitSet _expression_in_expression_list1748 = new BitSet(new ulong[]{0x2UL,0x0UL,0x400200000000UL});
		public static readonly BitSet _select_command_in_expression_list_or_select_command1777 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_list_in_expression_list_or_select_command1782 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_7_in_expression1795 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_6_in_expression_71811 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200000000UL});
		public static readonly BitSet _WS_in_expression_71818 = new BitSet(new ulong[]{0x4A840000000800UL,0x0UL,0x1F800E000000000UL});
		public static readonly BitSet _op_7_in_expression_71823 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000UL});
		public static readonly BitSet _WS_in_expression_71825 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x2000A40010000000UL});
		public static readonly BitSet _expression_6_in_expression_71829 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200000000UL});
		public static readonly BitSet _IN_in_expression_71848 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40200000000UL});
		public static readonly BitSet _WS_in_expression_71850 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _170_in_expression_71853 = new BitSet(new ulong[]{0xA018000403998000UL,0x46UL,0x2000A40210000000UL});
		public static readonly BitSet _WS_in_expression_71855 = new BitSet(new ulong[]{0xA018000403998000UL,0x46UL,0x2000A40010000000UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_71858 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80200000000UL});
		public static readonly BitSet _WS_in_expression_71860 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000000UL});
		public static readonly BitSet _171_in_expression_71863 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200000000UL});
		public static readonly BitSet _NOT_in_expression_71881 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000UL});
		public static readonly BitSet _WS_in_expression_71883 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _IN_in_expression_71885 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40200000000UL});
		public static readonly BitSet _WS_in_expression_71887 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _170_in_expression_71890 = new BitSet(new ulong[]{0xA018000403998000UL,0x46UL,0x2000A40210000000UL});
		public static readonly BitSet _WS_in_expression_71892 = new BitSet(new ulong[]{0xA018000403998000UL,0x46UL,0x2000A40010000000UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_71896 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80200000000UL});
		public static readonly BitSet _WS_in_expression_71899 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000000UL});
		public static readonly BitSet _171_in_expression_71902 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200000000UL});
		public static readonly BitSet _op_4_in_expression_71920 = new BitSet(new ulong[]{0x80UL,0x1UL,0x200000000UL});
		public static readonly BitSet _WS_in_expression_71922 = new BitSet(new ulong[]{0x80UL,0x1UL});
		public static readonly BitSet _SOME_in_expression_71926 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40200000000UL});
		public static readonly BitSet _ANY_in_expression_71930 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40200000000UL});
		public static readonly BitSet _WS_in_expression_71933 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _170_in_expression_71936 = new BitSet(new ulong[]{0xA018000403998000UL,0x46UL,0x2000A40010000000UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_71938 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000000UL});
		public static readonly BitSet _171_in_expression_71940 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200000000UL});
		public static readonly BitSet _op_4_in_expression_71960 = new BitSet(new ulong[]{0x20UL,0x0UL,0x200000000UL});
		public static readonly BitSet _WS_in_expression_71962 = new BitSet(new ulong[]{0x20UL});
		public static readonly BitSet _ALL_in_expression_71965 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40200000000UL});
		public static readonly BitSet _WS_in_expression_71967 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _170_in_expression_71970 = new BitSet(new ulong[]{0xA018000403998000UL,0x46UL,0x2000A40010000000UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_71972 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000000UL});
		public static readonly BitSet _171_in_expression_71974 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200000000UL});
		public static readonly BitSet _OR_in_op_72004 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BETWEEN_in_op_72013 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_72022 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000UL});
		public static readonly BitSet _WS_in_op_72024 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _BETWEEN_in_op_72026 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_5_in_expression_62045 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200000000UL});
		public static readonly BitSet _WS_in_expression_62052 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _op_6_in_expression_62054 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000UL});
		public static readonly BitSet _WS_in_expression_62056 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x2000A40010000000UL});
		public static readonly BitSet _expression_5_in_expression_62060 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200000000UL});
		public static readonly BitSet _AND_in_op_62088 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _op_5_in_expression_52106 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000UL});
		public static readonly BitSet _WS_in_expression_52108 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x2000A40010000000UL});
		public static readonly BitSet _expression_5_in_expression_52110 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_4_in_expression_52125 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_52136 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_3_in_expression_42155 = new BitSet(new ulong[]{0xA800000000002UL,0x0UL,0x1F800E200000000UL});
		public static readonly BitSet _WS_in_expression_42162 = new BitSet(new ulong[]{0xA800000000000UL,0x0UL,0x1F800E000000000UL});
		public static readonly BitSet _op_4_in_expression_42165 = new BitSet(new ulong[]{0x8010000403998000UL,0x46UL,0x2000A40210000000UL});
		public static readonly BitSet _WS_in_expression_42167 = new BitSet(new ulong[]{0x8010000403998000UL,0x46UL,0x2000A40010000000UL});
		public static readonly BitSet _expression_3_in_expression_42172 = new BitSet(new ulong[]{0xA800000000002UL,0x0UL,0x1F800E200000000UL});
		public static readonly BitSet _182_in_op_42198 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _184_in_op_42207 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _180_in_op_42217 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _181_in_op_42227 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _166_in_op_42236 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _167_in_op_42245 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _165_in_op_42254 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _183_in_op_42263 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _179_in_op_42273 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LIKE_in_op_42282 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_42291 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000UL});
		public static readonly BitSet _WS_in_op_42293 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _LIKE_in_op_42295 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MATCH_in_op_42304 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_42313 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000UL});
		public static readonly BitSet _WS_in_op_42315 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _MATCH_in_op_42317 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_2_in_expression_32336 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1800A20200000000UL});
		public static readonly BitSet _WS_in_expression_32343 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1800A20000000000UL});
		public static readonly BitSet _op_3_in_expression_32346 = new BitSet(new ulong[]{0x8010000403998000UL,0x46UL,0x2000A40210000000UL});
		public static readonly BitSet _WS_in_expression_32348 = new BitSet(new ulong[]{0x8010000403998000UL,0x46UL,0x2000A40010000000UL});
		public static readonly BitSet _expression_2_in_expression_32353 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1800A20200000000UL});
		public static readonly BitSet _173_in_op_32379 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _175_in_op_32388 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _169_in_op_32397 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _188_in_op_32406 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _187_in_op_32415 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_1_in_expression_22435 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2110200000000UL});
		public static readonly BitSet _WS_in_expression_22442 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2110000000000UL});
		public static readonly BitSet _op_2_in_expression_22445 = new BitSet(new ulong[]{0x8010000403998000UL,0x46UL,0x2000A40210000000UL});
		public static readonly BitSet _WS_in_expression_22447 = new BitSet(new ulong[]{0x8010000403998000UL,0x46UL,0x2000A40010000000UL});
		public static readonly BitSet _expression_1_in_expression_22452 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2110200000000UL});
		public static readonly BitSet _172_in_op_22478 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _177_in_op_22487 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _168_in_op_22496 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _op_1_in_expression_12512 = new BitSet(new ulong[]{0x8010000403998000UL,0x46UL,0x2000A40210000000UL});
		public static readonly BitSet _WS_in_expression_12514 = new BitSet(new ulong[]{0x8010000403998000UL,0x46UL,0x2000A40010000000UL});
		public static readonly BitSet _expression_1_in_expression_12517 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_atom_in_expression_12532 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _189_in_op_12542 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _173_in_op_12552 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _175_in_op_12561 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _number_in_expression_atom2576 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _string_in_expression_atom2589 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SYSTEMVAR_in_expression_atom2594 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_in_expression_atom2607 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _subquery_in_expression_atom2618 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _170_in_expression_atom2623 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x2000A40010000000UL});
		public static readonly BitSet _expression_in_expression_atom2625 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000000UL});
		public static readonly BitSet _171_in_expression_atom2627 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functioncall_or_column_in_expression_atom2636 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _specialfunctioncall_in_expression_atom2641 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _case_in_expression_atom2646 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXISTS_in_expression_atom2651 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40200000000UL});
		public static readonly BitSet _WS_in_expression_atom2653 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _170_in_expression_atom2656 = new BitSet(new ulong[]{0x2000000000000000UL,0x0UL,0x40200000000UL});
		public static readonly BitSet _WS_in_expression_atom2658 = new BitSet(new ulong[]{0x2000000000000000UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _select_command_in_expression_atom2661 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80200000000UL});
		public static readonly BitSet _WS_in_expression_atom2663 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000000UL});
		public static readonly BitSet _171_in_expression_atom2666 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_functioncall_or_column2686 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40200000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2688 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _170_in_functioncall_or_column2691 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x2000AC0210000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2693 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x2000AC0010000000UL});
		public static readonly BitSet _expression_in_functioncall_or_column2697 = new BitSet(new ulong[]{0x0UL,0x0UL,0x480200000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2699 = new BitSet(new ulong[]{0x0UL,0x0UL,0x480000000000UL});
		public static readonly BitSet _174_in_functioncall_or_column2703 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x2000A40210000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2705 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x2000A40010000000UL});
		public static readonly BitSet _expression_in_functioncall_or_column2708 = new BitSet(new ulong[]{0x0UL,0x0UL,0x480200000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2710 = new BitSet(new ulong[]{0x0UL,0x0UL,0x480000000000UL});
		public static readonly BitSet _171_in_functioncall_or_column2717 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COUNT_in_functioncall_or_column2733 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40200000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2735 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _170_in_functioncall_or_column2738 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x2000A40210000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2740 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x2000A40010000000UL});
		public static readonly BitSet _expression_in_functioncall_or_column2743 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80200000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2745 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000000UL});
		public static readonly BitSet _171_in_functioncall_or_column2748 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COUNT_in_functioncall_or_column2763 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40200000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2765 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _170_in_functioncall_or_column2768 = new BitSet(new ulong[]{0x20000000UL,0x0UL,0x200000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2770 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _DISTINCT_in_functioncall_or_column2773 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2775 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x2000A40010000000UL});
		public static readonly BitSet _expression_in_functioncall_or_column2777 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80200000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2779 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000000UL});
		public static readonly BitSet _171_in_functioncall_or_column2782 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COUNT_in_functioncall_or_column2797 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40200000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2799 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _170_in_functioncall_or_column2802 = new BitSet(new ulong[]{0x8000000000000000UL,0x0UL,0x100200000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2804 = new BitSet(new ulong[]{0x8000000000000000UL,0x0UL,0x100000000000UL});
		public static readonly BitSet _all_columns_in_functioncall_or_column2807 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80200000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2809 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000000UL});
		public static readonly BitSet _171_in_functioncall_or_column2812 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COUNT_in_functioncall_or_column2827 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40200000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2829 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _170_in_functioncall_or_column2832 = new BitSet(new ulong[]{0x20000000UL,0x0UL,0x200000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2834 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _DISTINCT_in_functioncall_or_column2837 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2839 = new BitSet(new ulong[]{0x8000000000000000UL,0x0UL,0x100000000000UL});
		public static readonly BitSet _all_columns_in_functioncall_or_column2841 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80200000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2843 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000000UL});
		public static readonly BitSet _171_in_functioncall_or_column2846 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _table_alias_in_functioncall_or_column2864 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000200000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2866 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000000UL});
		public static readonly BitSet _176_in_functioncall_or_column2869 = new BitSet(new ulong[]{0x8000000000000000UL,0x0UL,0x200000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2871 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _column_name_in_functioncall_or_column2876 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SIMPLE_FILE_in_column_name2899 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SIMPLE_FILE_in_table_alias2910 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CONVERT_in_specialfunctioncall2930 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40200000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2932 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _170_in_specialfunctioncall2935 = new BitSet(new ulong[]{0x0UL,0x40UL,0x200000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2937 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _TOKEN_in_specialfunctioncall2940 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400200000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2942 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000000000UL});
		public static readonly BitSet _174_in_specialfunctioncall2945 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x2000A40210000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2947 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x2000A40010000000UL});
		public static readonly BitSet _expression_in_specialfunctioncall2950 = new BitSet(new ulong[]{0x0UL,0x0UL,0x480200000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2952 = new BitSet(new ulong[]{0x0UL,0x0UL,0x480000000000UL});
		public static readonly BitSet _174_in_specialfunctioncall2956 = new BitSet(new ulong[]{0x0UL,0x2UL,0x200000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2958 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _STRING_in_specialfunctioncall2961 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80200000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2963 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000000UL});
		public static readonly BitSet _171_in_specialfunctioncall2968 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CAST_in_specialfunctioncall2986 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40200000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2988 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _170_in_specialfunctioncall2991 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x2000A40210000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2993 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x2000A40010000000UL});
		public static readonly BitSet _expression_in_specialfunctioncall2996 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2998 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _AS_in_specialfunctioncall3000 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3002 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _datatype_in_specialfunctioncall3004 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80200000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3006 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000000UL});
		public static readonly BitSet _171_in_specialfunctioncall3009 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DATEADD_in_specialfunctioncall3024 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40200000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3026 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _170_in_specialfunctioncall3029 = new BitSet(new ulong[]{0x0UL,0x40UL,0x200000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3031 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _datepart_in_specialfunctioncall3034 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400200000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3036 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000000000UL});
		public static readonly BitSet _174_in_specialfunctioncall3039 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x2000A40210000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3041 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x2000A40010000000UL});
		public static readonly BitSet _expression_in_specialfunctioncall3044 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400200000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3046 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000000000UL});
		public static readonly BitSet _174_in_specialfunctioncall3049 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x2000A40210000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3051 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x2000A40010000000UL});
		public static readonly BitSet _expression_in_specialfunctioncall3054 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80200000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3056 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000000UL});
		public static readonly BitSet _171_in_specialfunctioncall3059 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DATEDIFF_in_specialfunctioncall3077 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40200000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3079 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _170_in_specialfunctioncall3082 = new BitSet(new ulong[]{0x0UL,0x40UL,0x200000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3084 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _datepart_in_specialfunctioncall3087 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400200000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3089 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000000000UL});
		public static readonly BitSet _174_in_specialfunctioncall3092 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x2000A40210000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3094 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x2000A40010000000UL});
		public static readonly BitSet _expression_in_specialfunctioncall3097 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400200000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3099 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000000000UL});
		public static readonly BitSet _174_in_specialfunctioncall3102 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x2000A40210000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3104 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x2000A40010000000UL});
		public static readonly BitSet _expression_in_specialfunctioncall3107 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80200000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3109 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000000UL});
		public static readonly BitSet _171_in_specialfunctioncall3112 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DATEPART_in_specialfunctioncall3130 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40200000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3132 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _170_in_specialfunctioncall3135 = new BitSet(new ulong[]{0x0UL,0x40UL,0x200000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3137 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _datepart_in_specialfunctioncall3140 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400200000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3142 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000000000UL});
		public static readonly BitSet _174_in_specialfunctioncall3145 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x2000A40210000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3147 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x2000A40010000000UL});
		public static readonly BitSet _expression_in_specialfunctioncall3150 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80200000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3152 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000000UL});
		public static readonly BitSet _171_in_specialfunctioncall3155 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_datepart3179 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_number3199 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_string3207 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_datatype3227 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VARIABLE_in_variable3239 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CASE_in_case3259 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000UL});
		public static readonly BitSet _WS_in_case3261 = new BitSet(new ulong[]{0x8018000703998000UL,0x46UL,0x2000A40090000000UL});
		public static readonly BitSet _expression_in_case3264 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000UL});
		public static readonly BitSet _WS_in_case3266 = new BitSet(new ulong[]{0x300000000UL,0x0UL,0x80000000UL});
		public static readonly BitSet _case_when_in_case3271 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000UL});
		public static readonly BitSet _WS_in_case3273 = new BitSet(new ulong[]{0x300000000UL,0x0UL,0x80000000UL});
		public static readonly BitSet _case_else_in_case3278 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000UL});
		public static readonly BitSet _WS_in_case3280 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _END_in_case3284 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHEN_in_case_when3312 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000UL});
		public static readonly BitSet _WS_in_case_when3314 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x2000A40010000000UL});
		public static readonly BitSet _expression_in_case_when3318 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000UL});
		public static readonly BitSet _WS_in_case_when3320 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _THEN_in_case_when3322 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000UL});
		public static readonly BitSet _WS_in_case_when3324 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x2000A40010000000UL});
		public static readonly BitSet _expression_in_case_when3328 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ELSE_in_case_else3353 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000UL});
		public static readonly BitSet _WS_in_case_else3355 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x2000A40010000000UL});
		public static readonly BitSet _expression_in_case_else3357 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _170_in_synpred1_gql598 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SELECT_in_synpred2_gql1772 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _subquery_in_synpred3_gql2613 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  FxGqlLib 
