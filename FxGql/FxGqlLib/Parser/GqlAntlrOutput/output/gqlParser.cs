//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g 2012-07-03 16:53:49

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591


// `XXX' does not need a CLSCompliant attribute because the assembly is not marked as CLS-compliant (CS3021)
#pragma warning disable 3021
// The private field `XXX' is assigned but its value is never used (CS0414)
#pragma warning disable 414


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  FxGqlLib 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class gqlParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "A", "ALL", "AND", "ANY", "AS", "ASC", "B", "BETWEEN", "BY", "C", "CASE", "CAST", "COMMENT_BLOCK", "COMMENT_LINE", "CONVERT", "CREATE", "D", "DECLARE", "DESC", "DIGIT", "DISTINCT", "E", "ELSE", "END", "EXISTS", "F", "FROM", "G", "GROUP", "H", "I", "IN", "INTO", "J", "K", "L", "LIKE", "M", "MATCH", "N", "NOT", "NUMBER", "O", "OR", "ORDER", "ORIG", "P", "Q", "R", "S", "SELECT", "SET", "SIMPLE_FILE", "SOME", "STRING", "SYSTEMVAR", "T", "THEN", "TOKEN", "TOP", "T_ALL", "T_AND", "T_ANY", "T_BETWEEN", "T_BITWISE_AND", "T_BITWISE_NOT", "T_BITWISE_OR", "T_BITWISE_XOR", "T_CASE", "T_CASE_ELSE", "T_CASE_WHEN", "T_COLUMN", "T_COLUMNLIST", "T_CONVERT", "T_CREATE_VIEW", "T_DECLARATION", "T_DECLARE", "T_DISTINCT", "T_DIVIDE", "T_EQUAL", "T_EXISTS", "T_EXPRESSIONLIST", "T_FILE", "T_FILEOPTION", "T_FROM", "T_FUNCTIONCALL", "T_GREATER", "T_GROUPBY", "T_GROUPBY_ORIG", "T_IN", "T_INTEGER", "T_INTO", "T_LESS", "T_LIKE", "T_MATCH", "T_MINUS", "T_MODULO", "T_NOT", "T_NOTBETWEEN", "T_NOTEQUAL", "T_NOTGREATER", "T_NOTIN", "T_NOTLESS", "T_NOTLIKE", "T_NOTMATCH", "T_OP_BINARY", "T_OP_UNARY", "T_OR", "T_ORDERBY", "T_ORDERBY_ASC", "T_ORDERBY_COLUMN", "T_ORDERBY_DESC", "T_ORDERBY_ORIG", "T_PLUS", "T_PRODUCT", "T_ROOT", "T_SELECT", "T_SET_VARIABLE", "T_STRING", "T_SUBQUERY", "T_SYSTEMVAR", "T_TOP", "T_USE", "T_VARIABLE", "T_VIEW_NAME", "T_WHERE", "U", "USE", "V", "VARIABLE", "VIEW", "W", "WHEN", "WHERE", "WS", "X", "Y", "Z", "'!<'", "'!='", "'!>'", "'%'", "'&'", "'('", "')'", "'*'", "'+'", "','", "'-'", "'/'", "';'", "'<'", "'<='", "'<>'", "'='", "'>'", "'>='", "'['", "']'", "'^'", "'|'", "'~'"
	};
	public const int EOF=-1;
	public const int T__142=142;
	public const int T__143=143;
	public const int T__144=144;
	public const int T__145=145;
	public const int T__146=146;
	public const int T__147=147;
	public const int T__148=148;
	public const int T__149=149;
	public const int T__150=150;
	public const int T__151=151;
	public const int T__152=152;
	public const int T__153=153;
	public const int T__154=154;
	public const int T__155=155;
	public const int T__156=156;
	public const int T__157=157;
	public const int T__158=158;
	public const int T__159=159;
	public const int T__160=160;
	public const int T__161=161;
	public const int T__162=162;
	public const int T__163=163;
	public const int T__164=164;
	public const int T__165=165;
	public const int A=4;
	public const int ALL=5;
	public const int AND=6;
	public const int ANY=7;
	public const int AS=8;
	public const int ASC=9;
	public const int B=10;
	public const int BETWEEN=11;
	public const int BY=12;
	public const int C=13;
	public const int CASE=14;
	public const int CAST=15;
	public const int COMMENT_BLOCK=16;
	public const int COMMENT_LINE=17;
	public const int CONVERT=18;
	public const int CREATE=19;
	public const int D=20;
	public const int DECLARE=21;
	public const int DESC=22;
	public const int DIGIT=23;
	public const int DISTINCT=24;
	public const int E=25;
	public const int ELSE=26;
	public const int END=27;
	public const int EXISTS=28;
	public const int F=29;
	public const int FROM=30;
	public const int G=31;
	public const int GROUP=32;
	public const int H=33;
	public const int I=34;
	public const int IN=35;
	public const int INTO=36;
	public const int J=37;
	public const int K=38;
	public const int L=39;
	public const int LIKE=40;
	public const int M=41;
	public const int MATCH=42;
	public const int N=43;
	public const int NOT=44;
	public const int NUMBER=45;
	public const int O=46;
	public const int OR=47;
	public const int ORDER=48;
	public const int ORIG=49;
	public const int P=50;
	public const int Q=51;
	public const int R=52;
	public const int S=53;
	public const int SELECT=54;
	public const int SET=55;
	public const int SIMPLE_FILE=56;
	public const int SOME=57;
	public const int STRING=58;
	public const int SYSTEMVAR=59;
	public const int T=60;
	public const int THEN=61;
	public const int TOKEN=62;
	public const int TOP=63;
	public const int T_ALL=64;
	public const int T_AND=65;
	public const int T_ANY=66;
	public const int T_BETWEEN=67;
	public const int T_BITWISE_AND=68;
	public const int T_BITWISE_NOT=69;
	public const int T_BITWISE_OR=70;
	public const int T_BITWISE_XOR=71;
	public const int T_CASE=72;
	public const int T_CASE_ELSE=73;
	public const int T_CASE_WHEN=74;
	public const int T_COLUMN=75;
	public const int T_COLUMNLIST=76;
	public const int T_CONVERT=77;
	public const int T_CREATE_VIEW=78;
	public const int T_DECLARATION=79;
	public const int T_DECLARE=80;
	public const int T_DISTINCT=81;
	public const int T_DIVIDE=82;
	public const int T_EQUAL=83;
	public const int T_EXISTS=84;
	public const int T_EXPRESSIONLIST=85;
	public const int T_FILE=86;
	public const int T_FILEOPTION=87;
	public const int T_FROM=88;
	public const int T_FUNCTIONCALL=89;
	public const int T_GREATER=90;
	public const int T_GROUPBY=91;
	public const int T_GROUPBY_ORIG=92;
	public const int T_IN=93;
	public const int T_INTEGER=94;
	public const int T_INTO=95;
	public const int T_LESS=96;
	public const int T_LIKE=97;
	public const int T_MATCH=98;
	public const int T_MINUS=99;
	public const int T_MODULO=100;
	public const int T_NOT=101;
	public const int T_NOTBETWEEN=102;
	public const int T_NOTEQUAL=103;
	public const int T_NOTGREATER=104;
	public const int T_NOTIN=105;
	public const int T_NOTLESS=106;
	public const int T_NOTLIKE=107;
	public const int T_NOTMATCH=108;
	public const int T_OP_BINARY=109;
	public const int T_OP_UNARY=110;
	public const int T_OR=111;
	public const int T_ORDERBY=112;
	public const int T_ORDERBY_ASC=113;
	public const int T_ORDERBY_COLUMN=114;
	public const int T_ORDERBY_DESC=115;
	public const int T_ORDERBY_ORIG=116;
	public const int T_PLUS=117;
	public const int T_PRODUCT=118;
	public const int T_ROOT=119;
	public const int T_SELECT=120;
	public const int T_SET_VARIABLE=121;
	public const int T_STRING=122;
	public const int T_SUBQUERY=123;
	public const int T_SYSTEMVAR=124;
	public const int T_TOP=125;
	public const int T_USE=126;
	public const int T_VARIABLE=127;
	public const int T_VIEW_NAME=128;
	public const int T_WHERE=129;
	public const int U=130;
	public const int USE=131;
	public const int V=132;
	public const int VARIABLE=133;
	public const int VIEW=134;
	public const int W=135;
	public const int WHEN=136;
	public const int WHERE=137;
	public const int WS=138;
	public const int X=139;
	public const int Y=140;
	public const int Z=141;

	#if ANTLR_DEBUG
		private static readonly bool[] decisionCanBacktrack =
			new bool[]
			{
				false, // invalid decision
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false
			};
	#else
		private static readonly bool[] decisionCanBacktrack = new bool[0];
	#endif
	public gqlParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public gqlParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}
	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return gqlParser.tokenNames; } }
	public override string GrammarFileName { get { return "C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g"; } }


	[Conditional("ANTLR_TRACE")]
	protected virtual void OnCreated() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

	#region Rules

	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_parse() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_parse() {}

	// $ANTLR start "parse"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:97:1: parse : ( WS )? ( commands ( WS )? )? EOF -> ^( T_ROOT ( commands )? ) ;
	[GrammarRule("parse")]
	private AstParserRuleReturnScope<object, IToken> parse()
	{
		EnterRule_parse();
		EnterRule("parse", 1);
		TraceIn("parse", 1);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS1 = default(IToken);
	    IToken WS3 = default(IToken);
	    IToken EOF4 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> commands2 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS1_tree = default(object);
	    object WS3_tree = default(object);
	    object EOF4_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
	    RewriteRuleSubtreeStream stream_commands=new RewriteRuleSubtreeStream(adaptor,"rule commands");
		try { DebugEnterRule(GrammarFileName, "parse");
		DebugLocation(97, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:98:2: ( ( WS )? ( commands ( WS )? )? EOF -> ^( T_ROOT ( commands )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:98:4: ( WS )? ( commands ( WS )? )? EOF
			{
			DebugLocation(98, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:98:4: ( WS )?
			int alt1=2;
			try { DebugEnterSubRule(1);
			try { DebugEnterDecision(1, decisionCanBacktrack[1]);
			int LA1_0 = input.LA(1);

			if ((LA1_0==WS))
			{
				alt1 = 1;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:98:4: WS
				{
				DebugLocation(98, 4);
				WS1=(IToken)Match(input,WS,Follow._WS_in_parse344);  
				stream_WS.Add(WS1);


				}
				break;

			}
			} finally { DebugExitSubRule(1); }

			DebugLocation(98, 8);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:98:8: ( commands ( WS )? )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, decisionCanBacktrack[3]);
			int LA3_0 = input.LA(1);

			if ((LA3_0==CREATE||LA3_0==DECLARE||(LA3_0>=SELECT && LA3_0<=SET)||LA3_0==USE))
			{
				alt3 = 1;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:98:9: commands ( WS )?
				{
				DebugLocation(98, 9);
				PushFollow(Follow._commands_in_parse348);
				commands2=commands();
				PopFollow();

				stream_commands.Add(commands2.Tree);
				DebugLocation(98, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:98:18: ( WS )?
				int alt2=2;
				try { DebugEnterSubRule(2);
				try { DebugEnterDecision(2, decisionCanBacktrack[2]);
				int LA2_0 = input.LA(1);

				if ((LA2_0==WS))
				{
					alt2 = 1;
				}
				} finally { DebugExitDecision(2); }
				switch (alt2)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:98:18: WS
					{
					DebugLocation(98, 18);
					WS3=(IToken)Match(input,WS,Follow._WS_in_parse350);  
					stream_WS.Add(WS3);


					}
					break;

				}
				} finally { DebugExitSubRule(2); }


				}
				break;

			}
			} finally { DebugExitSubRule(3); }

			DebugLocation(98, 24);
			EOF4=(IToken)Match(input,EOF,Follow._EOF_in_parse355);  
			stream_EOF.Add(EOF4);



			{
			// AST REWRITE
			// elements: commands
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 99:2: -> ^( T_ROOT ( commands )? )
			{
				DebugLocation(99, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:99:5: ^( T_ROOT ( commands )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(99, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_ROOT, "T_ROOT"), root_1);

				DebugLocation(99, 14);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:99:14: ( commands )?
				if (stream_commands.HasNext)
				{
					DebugLocation(99, 14);
					adaptor.AddChild(root_1, stream_commands.NextTree());

				}
				stream_commands.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parse", 1);
			LeaveRule("parse", 1);
			LeaveRule_parse();
	    }
	 	DebugLocation(100, 1);
		} finally { DebugExitRule(GrammarFileName, "parse"); }
		return retval;

	}
	// $ANTLR end "parse"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_commands() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_commands() {}

	// $ANTLR start "commands"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:102:1: commands : command ( ( WS )? ( ';' ( WS )? )? command )* ( ( WS )? ';' )? -> ( command )+ ;
	[GrammarRule("commands")]
	private AstParserRuleReturnScope<object, IToken> commands()
	{
		EnterRule_commands();
		EnterRule("commands", 2);
		TraceIn("commands", 2);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS6 = default(IToken);
	    IToken char_literal7 = default(IToken);
	    IToken WS8 = default(IToken);
	    IToken WS10 = default(IToken);
	    IToken char_literal11 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> command5 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> command9 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS6_tree = default(object);
	    object char_literal7_tree = default(object);
	    object WS8_tree = default(object);
	    object WS10_tree = default(object);
	    object char_literal11_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_154=new RewriteRuleITokenStream(adaptor,"token 154");
	    RewriteRuleSubtreeStream stream_command=new RewriteRuleSubtreeStream(adaptor,"rule command");
		try { DebugEnterRule(GrammarFileName, "commands");
		DebugLocation(102, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:103:2: ( command ( ( WS )? ( ';' ( WS )? )? command )* ( ( WS )? ';' )? -> ( command )+ )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:103:4: command ( ( WS )? ( ';' ( WS )? )? command )* ( ( WS )? ';' )?
			{
			DebugLocation(103, 4);
			PushFollow(Follow._command_in_commands378);
			command5=command();
			PopFollow();

			stream_command.Add(command5.Tree);
			DebugLocation(103, 12);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:103:12: ( ( WS )? ( ';' ( WS )? )? command )*
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, decisionCanBacktrack[7]);
				switch (input.LA(1))
				{
				case WS:
					{
					int LA7_1 = input.LA(2);

					if ((LA7_1==154))
					{
						int LA7_2 = input.LA(3);

						if ((LA7_2==WS))
						{
							int LA7_5 = input.LA(4);

							if ((LA7_5==CREATE||LA7_5==DECLARE||(LA7_5>=SELECT && LA7_5<=SET)||LA7_5==USE))
							{
								alt7 = 1;
							}


						}
						else if ((LA7_2==CREATE||LA7_2==DECLARE||(LA7_2>=SELECT && LA7_2<=SET)||LA7_2==USE))
						{
							alt7 = 1;
						}


					}
					else if ((LA7_1==CREATE||LA7_1==DECLARE||(LA7_1>=SELECT && LA7_1<=SET)||LA7_1==USE))
					{
						alt7 = 1;
					}


					}
					break;
				case 154:
					{
					int LA7_2 = input.LA(2);

					if ((LA7_2==WS))
					{
						int LA7_5 = input.LA(3);

						if ((LA7_5==CREATE||LA7_5==DECLARE||(LA7_5>=SELECT && LA7_5<=SET)||LA7_5==USE))
						{
							alt7 = 1;
						}


					}
					else if ((LA7_2==CREATE||LA7_2==DECLARE||(LA7_2>=SELECT && LA7_2<=SET)||LA7_2==USE))
					{
						alt7 = 1;
					}


					}
					break;
				case CREATE:
				case DECLARE:
				case SELECT:
				case SET:
				case USE:
					{
					alt7 = 1;
					}
					break;
				}

				} finally { DebugExitDecision(7); }
				switch ( alt7 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:103:13: ( WS )? ( ';' ( WS )? )? command
					{
					DebugLocation(103, 13);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:103:13: ( WS )?
					int alt4=2;
					try { DebugEnterSubRule(4);
					try { DebugEnterDecision(4, decisionCanBacktrack[4]);
					int LA4_0 = input.LA(1);

					if ((LA4_0==WS))
					{
						alt4 = 1;
					}
					} finally { DebugExitDecision(4); }
					switch (alt4)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:103:13: WS
						{
						DebugLocation(103, 13);
						WS6=(IToken)Match(input,WS,Follow._WS_in_commands381);  
						stream_WS.Add(WS6);


						}
						break;

					}
					} finally { DebugExitSubRule(4); }

					DebugLocation(103, 17);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:103:17: ( ';' ( WS )? )?
					int alt6=2;
					try { DebugEnterSubRule(6);
					try { DebugEnterDecision(6, decisionCanBacktrack[6]);
					int LA6_0 = input.LA(1);

					if ((LA6_0==154))
					{
						alt6 = 1;
					}
					} finally { DebugExitDecision(6); }
					switch (alt6)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:103:18: ';' ( WS )?
						{
						DebugLocation(103, 18);
						char_literal7=(IToken)Match(input,154,Follow._154_in_commands385);  
						stream_154.Add(char_literal7);

						DebugLocation(103, 22);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:103:22: ( WS )?
						int alt5=2;
						try { DebugEnterSubRule(5);
						try { DebugEnterDecision(5, decisionCanBacktrack[5]);
						int LA5_0 = input.LA(1);

						if ((LA5_0==WS))
						{
							alt5 = 1;
						}
						} finally { DebugExitDecision(5); }
						switch (alt5)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:103:22: WS
							{
							DebugLocation(103, 22);
							WS8=(IToken)Match(input,WS,Follow._WS_in_commands387);  
							stream_WS.Add(WS8);


							}
							break;

						}
						} finally { DebugExitSubRule(5); }


						}
						break;

					}
					} finally { DebugExitSubRule(6); }

					DebugLocation(103, 28);
					PushFollow(Follow._command_in_commands392);
					command9=command();
					PopFollow();

					stream_command.Add(command9.Tree);

					}
					break;

				default:
					goto loop7;
				}
			}

			loop7:
				;

			} finally { DebugExitSubRule(7); }

			DebugLocation(103, 38);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:103:38: ( ( WS )? ';' )?
			int alt9=2;
			try { DebugEnterSubRule(9);
			try { DebugEnterDecision(9, decisionCanBacktrack[9]);
			int LA9_0 = input.LA(1);

			if ((LA9_0==WS))
			{
				int LA9_1 = input.LA(2);

				if ((LA9_1==154))
				{
					alt9 = 1;
				}
			}
			else if ((LA9_0==154))
			{
				alt9 = 1;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:103:39: ( WS )? ';'
				{
				DebugLocation(103, 39);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:103:39: ( WS )?
				int alt8=2;
				try { DebugEnterSubRule(8);
				try { DebugEnterDecision(8, decisionCanBacktrack[8]);
				int LA8_0 = input.LA(1);

				if ((LA8_0==WS))
				{
					alt8 = 1;
				}
				} finally { DebugExitDecision(8); }
				switch (alt8)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:103:39: WS
					{
					DebugLocation(103, 39);
					WS10=(IToken)Match(input,WS,Follow._WS_in_commands397);  
					stream_WS.Add(WS10);


					}
					break;

				}
				} finally { DebugExitSubRule(8); }

				DebugLocation(103, 43);
				char_literal11=(IToken)Match(input,154,Follow._154_in_commands400);  
				stream_154.Add(char_literal11);


				}
				break;

			}
			} finally { DebugExitSubRule(9); }



			{
			// AST REWRITE
			// elements: command
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 104:2: -> ( command )+
			{
				DebugLocation(104, 5);
				if (!(stream_command.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_command.HasNext )
				{
					DebugLocation(104, 5);
					adaptor.AddChild(root_0, stream_command.NextTree());

				}
				stream_command.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("commands", 2);
			LeaveRule("commands", 2);
			LeaveRule_commands();
	    }
	 	DebugLocation(105, 1);
		} finally { DebugExitRule(GrammarFileName, "commands"); }
		return retval;

	}
	// $ANTLR end "commands"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_command() {}

	// $ANTLR start "command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:107:1: command : ( select_command | use_command | declare_command | set_command | create_view_command );
	[GrammarRule("command")]
	private AstParserRuleReturnScope<object, IToken> command()
	{
		EnterRule_command();
		EnterRule("command", 3);
		TraceIn("command", 3);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> select_command12 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> use_command13 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> declare_command14 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> set_command15 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> create_view_command16 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "command");
		DebugLocation(107, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:108:2: ( select_command | use_command | declare_command | set_command | create_view_command )
			int alt10=5;
			try { DebugEnterDecision(10, decisionCanBacktrack[10]);
			switch (input.LA(1))
			{
			case SELECT:
				{
				alt10 = 1;
				}
				break;
			case USE:
				{
				alt10 = 2;
				}
				break;
			case DECLARE:
				{
				alt10 = 3;
				}
				break;
			case SET:
				{
				alt10 = 4;
				}
				break;
			case CREATE:
				{
				alt10 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 10, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:108:4: select_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(108, 4);
				PushFollow(Follow._select_command_in_command420);
				select_command12=select_command();
				PopFollow();

				adaptor.AddChild(root_0, select_command12.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:109:4: use_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(109, 4);
				PushFollow(Follow._use_command_in_command425);
				use_command13=use_command();
				PopFollow();

				adaptor.AddChild(root_0, use_command13.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:110:4: declare_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(110, 4);
				PushFollow(Follow._declare_command_in_command430);
				declare_command14=declare_command();
				PopFollow();

				adaptor.AddChild(root_0, declare_command14.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:111:4: set_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(111, 4);
				PushFollow(Follow._set_command_in_command435);
				set_command15=set_command();
				PopFollow();

				adaptor.AddChild(root_0, set_command15.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:112:4: create_view_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(112, 4);
				PushFollow(Follow._create_view_command_in_command440);
				create_view_command16=create_view_command();
				PopFollow();

				adaptor.AddChild(root_0, create_view_command16.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("command", 3);
			LeaveRule("command", 3);
			LeaveRule_command();
	    }
	 	DebugLocation(113, 1);
		} finally { DebugExitRule(GrammarFileName, "command"); }
		return retval;

	}
	// $ANTLR end "command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_select_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_select_command() {}

	// $ANTLR start "select_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:118:1: select_command : SELECT ( WS distinct_clause )? ( WS top_clause )? WS column_list ( WS into_clause )? ( WS from_clause )? ( WS where_clause )? ( WS groupby_clause )? ( WS orderby_clause )? -> ^( T_SELECT ( distinct_clause )? ( top_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( orderby_clause )? ) ;
	[GrammarRule("select_command")]
	private AstParserRuleReturnScope<object, IToken> select_command()
	{
		EnterRule_select_command();
		EnterRule("select_command", 4);
		TraceIn("select_command", 4);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken SELECT17 = default(IToken);
	    IToken WS18 = default(IToken);
	    IToken WS20 = default(IToken);
	    IToken WS22 = default(IToken);
	    IToken WS24 = default(IToken);
	    IToken WS26 = default(IToken);
	    IToken WS28 = default(IToken);
	    IToken WS30 = default(IToken);
	    IToken WS32 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> distinct_clause19 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> top_clause21 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> column_list23 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> into_clause25 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> from_clause27 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> where_clause29 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> groupby_clause31 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> orderby_clause33 = default(AstParserRuleReturnScope<object, IToken>);

	    object SELECT17_tree = default(object);
	    object WS18_tree = default(object);
	    object WS20_tree = default(object);
	    object WS22_tree = default(object);
	    object WS24_tree = default(object);
	    object WS26_tree = default(object);
	    object WS28_tree = default(object);
	    object WS30_tree = default(object);
	    object WS32_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_SELECT=new RewriteRuleITokenStream(adaptor,"token SELECT");
	    RewriteRuleSubtreeStream stream_groupby_clause=new RewriteRuleSubtreeStream(adaptor,"rule groupby_clause");
	    RewriteRuleSubtreeStream stream_distinct_clause=new RewriteRuleSubtreeStream(adaptor,"rule distinct_clause");
	    RewriteRuleSubtreeStream stream_from_clause=new RewriteRuleSubtreeStream(adaptor,"rule from_clause");
	    RewriteRuleSubtreeStream stream_column_list=new RewriteRuleSubtreeStream(adaptor,"rule column_list");
	    RewriteRuleSubtreeStream stream_where_clause=new RewriteRuleSubtreeStream(adaptor,"rule where_clause");
	    RewriteRuleSubtreeStream stream_into_clause=new RewriteRuleSubtreeStream(adaptor,"rule into_clause");
	    RewriteRuleSubtreeStream stream_top_clause=new RewriteRuleSubtreeStream(adaptor,"rule top_clause");
	    RewriteRuleSubtreeStream stream_orderby_clause=new RewriteRuleSubtreeStream(adaptor,"rule orderby_clause");
		try { DebugEnterRule(GrammarFileName, "select_command");
		DebugLocation(118, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:119:2: ( SELECT ( WS distinct_clause )? ( WS top_clause )? WS column_list ( WS into_clause )? ( WS from_clause )? ( WS where_clause )? ( WS groupby_clause )? ( WS orderby_clause )? -> ^( T_SELECT ( distinct_clause )? ( top_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( orderby_clause )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:119:4: SELECT ( WS distinct_clause )? ( WS top_clause )? WS column_list ( WS into_clause )? ( WS from_clause )? ( WS where_clause )? ( WS groupby_clause )? ( WS orderby_clause )?
			{
			DebugLocation(119, 4);
			SELECT17=(IToken)Match(input,SELECT,Follow._SELECT_in_select_command454);  
			stream_SELECT.Add(SELECT17);

			DebugLocation(119, 11);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:119:11: ( WS distinct_clause )?
			int alt11=2;
			try { DebugEnterSubRule(11);
			try { DebugEnterDecision(11, decisionCanBacktrack[11]);
			int LA11_0 = input.LA(1);

			if ((LA11_0==WS))
			{
				int LA11_1 = input.LA(2);

				if ((LA11_1==ALL||LA11_1==DISTINCT))
				{
					alt11 = 1;
				}
			}
			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:119:12: WS distinct_clause
				{
				DebugLocation(119, 12);
				WS18=(IToken)Match(input,WS,Follow._WS_in_select_command457);  
				stream_WS.Add(WS18);

				DebugLocation(119, 15);
				PushFollow(Follow._distinct_clause_in_select_command459);
				distinct_clause19=distinct_clause();
				PopFollow();

				stream_distinct_clause.Add(distinct_clause19.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(11); }

			DebugLocation(119, 33);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:119:33: ( WS top_clause )?
			int alt12=2;
			try { DebugEnterSubRule(12);
			try { DebugEnterDecision(12, decisionCanBacktrack[12]);
			int LA12_0 = input.LA(1);

			if ((LA12_0==WS))
			{
				int LA12_1 = input.LA(2);

				if ((LA12_1==TOP))
				{
					alt12 = 1;
				}
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:119:34: WS top_clause
				{
				DebugLocation(119, 34);
				WS20=(IToken)Match(input,WS,Follow._WS_in_select_command464);  
				stream_WS.Add(WS20);

				DebugLocation(119, 37);
				PushFollow(Follow._top_clause_in_select_command466);
				top_clause21=top_clause();
				PopFollow();

				stream_top_clause.Add(top_clause21.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(12); }

			DebugLocation(119, 50);
			WS22=(IToken)Match(input,WS,Follow._WS_in_select_command470);  
			stream_WS.Add(WS22);

			DebugLocation(119, 53);
			PushFollow(Follow._column_list_in_select_command472);
			column_list23=column_list();
			PopFollow();

			stream_column_list.Add(column_list23.Tree);
			DebugLocation(119, 65);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:119:65: ( WS into_clause )?
			int alt13=2;
			try { DebugEnterSubRule(13);
			try { DebugEnterDecision(13, decisionCanBacktrack[13]);
			int LA13_0 = input.LA(1);

			if ((LA13_0==WS))
			{
				int LA13_1 = input.LA(2);

				if ((LA13_1==INTO))
				{
					alt13 = 1;
				}
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:119:66: WS into_clause
				{
				DebugLocation(119, 66);
				WS24=(IToken)Match(input,WS,Follow._WS_in_select_command475);  
				stream_WS.Add(WS24);

				DebugLocation(119, 69);
				PushFollow(Follow._into_clause_in_select_command477);
				into_clause25=into_clause();
				PopFollow();

				stream_into_clause.Add(into_clause25.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(13); }

			DebugLocation(119, 83);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:119:83: ( WS from_clause )?
			int alt14=2;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, decisionCanBacktrack[14]);
			int LA14_0 = input.LA(1);

			if ((LA14_0==WS))
			{
				int LA14_1 = input.LA(2);

				if ((LA14_1==FROM))
				{
					alt14 = 1;
				}
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:119:84: WS from_clause
				{
				DebugLocation(119, 84);
				WS26=(IToken)Match(input,WS,Follow._WS_in_select_command482);  
				stream_WS.Add(WS26);

				DebugLocation(119, 87);
				PushFollow(Follow._from_clause_in_select_command484);
				from_clause27=from_clause();
				PopFollow();

				stream_from_clause.Add(from_clause27.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(14); }

			DebugLocation(119, 101);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:119:101: ( WS where_clause )?
			int alt15=2;
			try { DebugEnterSubRule(15);
			try { DebugEnterDecision(15, decisionCanBacktrack[15]);
			int LA15_0 = input.LA(1);

			if ((LA15_0==WS))
			{
				int LA15_1 = input.LA(2);

				if ((LA15_1==WHERE))
				{
					alt15 = 1;
				}
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:119:102: WS where_clause
				{
				DebugLocation(119, 102);
				WS28=(IToken)Match(input,WS,Follow._WS_in_select_command489);  
				stream_WS.Add(WS28);

				DebugLocation(119, 105);
				PushFollow(Follow._where_clause_in_select_command491);
				where_clause29=where_clause();
				PopFollow();

				stream_where_clause.Add(where_clause29.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(15); }

			DebugLocation(119, 120);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:119:120: ( WS groupby_clause )?
			int alt16=2;
			try { DebugEnterSubRule(16);
			try { DebugEnterDecision(16, decisionCanBacktrack[16]);
			int LA16_0 = input.LA(1);

			if ((LA16_0==WS))
			{
				int LA16_1 = input.LA(2);

				if ((LA16_1==GROUP))
				{
					alt16 = 1;
				}
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:119:121: WS groupby_clause
				{
				DebugLocation(119, 121);
				WS30=(IToken)Match(input,WS,Follow._WS_in_select_command496);  
				stream_WS.Add(WS30);

				DebugLocation(119, 124);
				PushFollow(Follow._groupby_clause_in_select_command498);
				groupby_clause31=groupby_clause();
				PopFollow();

				stream_groupby_clause.Add(groupby_clause31.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(16); }

			DebugLocation(119, 141);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:119:141: ( WS orderby_clause )?
			int alt17=2;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, decisionCanBacktrack[17]);
			int LA17_0 = input.LA(1);

			if ((LA17_0==WS))
			{
				int LA17_1 = input.LA(2);

				if ((LA17_1==ORDER))
				{
					alt17 = 1;
				}
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:119:142: WS orderby_clause
				{
				DebugLocation(119, 142);
				WS32=(IToken)Match(input,WS,Follow._WS_in_select_command503);  
				stream_WS.Add(WS32);

				DebugLocation(119, 145);
				PushFollow(Follow._orderby_clause_in_select_command505);
				orderby_clause33=orderby_clause();
				PopFollow();

				stream_orderby_clause.Add(orderby_clause33.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(17); }



			{
			// AST REWRITE
			// elements: groupby_clause, from_clause, into_clause, column_list, top_clause, orderby_clause, where_clause, distinct_clause
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 120:3: -> ^( T_SELECT ( distinct_clause )? ( top_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( orderby_clause )? )
			{
				DebugLocation(120, 6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:120:6: ^( T_SELECT ( distinct_clause )? ( top_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( orderby_clause )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(120, 8);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SELECT, "T_SELECT"), root_1);

				DebugLocation(120, 17);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:120:17: ( distinct_clause )?
				if (stream_distinct_clause.HasNext)
				{
					DebugLocation(120, 17);
					adaptor.AddChild(root_1, stream_distinct_clause.NextTree());

				}
				stream_distinct_clause.Reset();
				DebugLocation(120, 34);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:120:34: ( top_clause )?
				if (stream_top_clause.HasNext)
				{
					DebugLocation(120, 34);
					adaptor.AddChild(root_1, stream_top_clause.NextTree());

				}
				stream_top_clause.Reset();
				DebugLocation(120, 46);
				adaptor.AddChild(root_1, stream_column_list.NextTree());
				DebugLocation(120, 58);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:120:58: ( into_clause )?
				if (stream_into_clause.HasNext)
				{
					DebugLocation(120, 58);
					adaptor.AddChild(root_1, stream_into_clause.NextTree());

				}
				stream_into_clause.Reset();
				DebugLocation(120, 71);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:120:71: ( from_clause )?
				if (stream_from_clause.HasNext)
				{
					DebugLocation(120, 71);
					adaptor.AddChild(root_1, stream_from_clause.NextTree());

				}
				stream_from_clause.Reset();
				DebugLocation(120, 84);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:120:84: ( where_clause )?
				if (stream_where_clause.HasNext)
				{
					DebugLocation(120, 84);
					adaptor.AddChild(root_1, stream_where_clause.NextTree());

				}
				stream_where_clause.Reset();
				DebugLocation(120, 98);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:120:98: ( groupby_clause )?
				if (stream_groupby_clause.HasNext)
				{
					DebugLocation(120, 98);
					adaptor.AddChild(root_1, stream_groupby_clause.NextTree());

				}
				stream_groupby_clause.Reset();
				DebugLocation(120, 114);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:120:114: ( orderby_clause )?
				if (stream_orderby_clause.HasNext)
				{
					DebugLocation(120, 114);
					adaptor.AddChild(root_1, stream_orderby_clause.NextTree());

				}
				stream_orderby_clause.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("select_command", 4);
			LeaveRule("select_command", 4);
			LeaveRule_select_command();
	    }
	 	DebugLocation(121, 1);
		} finally { DebugExitRule(GrammarFileName, "select_command"); }
		return retval;

	}
	// $ANTLR end "select_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_distinct_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_distinct_clause() {}

	// $ANTLR start "distinct_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:123:1: distinct_clause : ( DISTINCT -> T_DISTINCT | ALL -> T_ALL );
	[GrammarRule("distinct_clause")]
	private AstParserRuleReturnScope<object, IToken> distinct_clause()
	{
		EnterRule_distinct_clause();
		EnterRule("distinct_clause", 5);
		TraceIn("distinct_clause", 5);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken DISTINCT34 = default(IToken);
	    IToken ALL35 = default(IToken);

	    object DISTINCT34_tree = default(object);
	    object ALL35_tree = default(object);
	    RewriteRuleITokenStream stream_DISTINCT=new RewriteRuleITokenStream(adaptor,"token DISTINCT");
	    RewriteRuleITokenStream stream_ALL=new RewriteRuleITokenStream(adaptor,"token ALL");

		try { DebugEnterRule(GrammarFileName, "distinct_clause");
		DebugLocation(123, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:124:2: ( DISTINCT -> T_DISTINCT | ALL -> T_ALL )
			int alt18=2;
			try { DebugEnterDecision(18, decisionCanBacktrack[18]);
			int LA18_0 = input.LA(1);

			if ((LA18_0==DISTINCT))
			{
				alt18 = 1;
			}
			else if ((LA18_0==ALL))
			{
				alt18 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 18, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:124:4: DISTINCT
				{
				DebugLocation(124, 4);
				DISTINCT34=(IToken)Match(input,DISTINCT,Follow._DISTINCT_in_distinct_clause550);  
				stream_DISTINCT.Add(DISTINCT34);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 124:13: -> T_DISTINCT
				{
					DebugLocation(124, 16);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_DISTINCT, "T_DISTINCT"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:125:4: ALL
				{
				DebugLocation(125, 4);
				ALL35=(IToken)Match(input,ALL,Follow._ALL_in_distinct_clause559);  
				stream_ALL.Add(ALL35);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 125:8: -> T_ALL
				{
					DebugLocation(125, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_ALL, "T_ALL"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("distinct_clause", 5);
			LeaveRule("distinct_clause", 5);
			LeaveRule_distinct_clause();
	    }
	 	DebugLocation(126, 1);
		} finally { DebugExitRule(GrammarFileName, "distinct_clause"); }
		return retval;

	}
	// $ANTLR end "distinct_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_top_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_top_clause() {}

	// $ANTLR start "top_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:128:1: top_clause : TOP WS expression -> ^( T_TOP expression ) ;
	[GrammarRule("top_clause")]
	private AstParserRuleReturnScope<object, IToken> top_clause()
	{
		EnterRule_top_clause();
		EnterRule("top_clause", 6);
		TraceIn("top_clause", 6);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOP36 = default(IToken);
	    IToken WS37 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression38 = default(AstParserRuleReturnScope<object, IToken>);

	    object TOP36_tree = default(object);
	    object WS37_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_TOP=new RewriteRuleITokenStream(adaptor,"token TOP");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "top_clause");
		DebugLocation(128, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:129:2: ( TOP WS expression -> ^( T_TOP expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:129:4: TOP WS expression
			{
			DebugLocation(129, 4);
			TOP36=(IToken)Match(input,TOP,Follow._TOP_in_top_clause575);  
			stream_TOP.Add(TOP36);

			DebugLocation(129, 8);
			WS37=(IToken)Match(input,WS,Follow._WS_in_top_clause577);  
			stream_WS.Add(WS37);

			DebugLocation(129, 11);
			PushFollow(Follow._expression_in_top_clause579);
			expression38=expression();
			PopFollow();

			stream_expression.Add(expression38.Tree);


			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 130:2: -> ^( T_TOP expression )
			{
				DebugLocation(130, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:130:5: ^( T_TOP expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(130, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_TOP, "T_TOP"), root_1);

				DebugLocation(130, 13);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("top_clause", 6);
			LeaveRule("top_clause", 6);
			LeaveRule_top_clause();
	    }
	 	DebugLocation(131, 1);
		} finally { DebugExitRule(GrammarFileName, "top_clause"); }
		return retval;

	}
	// $ANTLR end "top_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_column_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_column_list() {}

	// $ANTLR start "column_list"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:133:1: column_list : column ( ( WS )? ',' ( WS )? column )* -> ^( T_COLUMNLIST ( column )* ) ;
	[GrammarRule("column_list")]
	private AstParserRuleReturnScope<object, IToken> column_list()
	{
		EnterRule_column_list();
		EnterRule("column_list", 7);
		TraceIn("column_list", 7);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS40 = default(IToken);
	    IToken char_literal41 = default(IToken);
	    IToken WS42 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> column39 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> column43 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS40_tree = default(object);
	    object char_literal41_tree = default(object);
	    object WS42_tree = default(object);
	    RewriteRuleITokenStream stream_151=new RewriteRuleITokenStream(adaptor,"token 151");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_column=new RewriteRuleSubtreeStream(adaptor,"rule column");
		try { DebugEnterRule(GrammarFileName, "column_list");
		DebugLocation(133, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:134:2: ( column ( ( WS )? ',' ( WS )? column )* -> ^( T_COLUMNLIST ( column )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:134:4: column ( ( WS )? ',' ( WS )? column )*
			{
			DebugLocation(134, 4);
			PushFollow(Follow._column_in_column_list601);
			column39=column();
			PopFollow();

			stream_column.Add(column39.Tree);
			DebugLocation(134, 11);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:134:11: ( ( WS )? ',' ( WS )? column )*
			try { DebugEnterSubRule(21);
			while (true)
			{
				int alt21=2;
				try { DebugEnterDecision(21, decisionCanBacktrack[21]);
				int LA21_0 = input.LA(1);

				if ((LA21_0==WS))
				{
					int LA21_1 = input.LA(2);

					if ((LA21_1==151))
					{
						alt21 = 1;
					}


				}
				else if ((LA21_0==151))
				{
					alt21 = 1;
				}


				} finally { DebugExitDecision(21); }
				switch ( alt21 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:134:12: ( WS )? ',' ( WS )? column
					{
					DebugLocation(134, 12);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:134:12: ( WS )?
					int alt19=2;
					try { DebugEnterSubRule(19);
					try { DebugEnterDecision(19, decisionCanBacktrack[19]);
					int LA19_0 = input.LA(1);

					if ((LA19_0==WS))
					{
						alt19 = 1;
					}
					} finally { DebugExitDecision(19); }
					switch (alt19)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:134:12: WS
						{
						DebugLocation(134, 12);
						WS40=(IToken)Match(input,WS,Follow._WS_in_column_list604);  
						stream_WS.Add(WS40);


						}
						break;

					}
					} finally { DebugExitSubRule(19); }

					DebugLocation(134, 16);
					char_literal41=(IToken)Match(input,151,Follow._151_in_column_list607);  
					stream_151.Add(char_literal41);

					DebugLocation(134, 20);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:134:20: ( WS )?
					int alt20=2;
					try { DebugEnterSubRule(20);
					try { DebugEnterDecision(20, decisionCanBacktrack[20]);
					int LA20_0 = input.LA(1);

					if ((LA20_0==WS))
					{
						alt20 = 1;
					}
					} finally { DebugExitDecision(20); }
					switch (alt20)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:134:20: WS
						{
						DebugLocation(134, 20);
						WS42=(IToken)Match(input,WS,Follow._WS_in_column_list609);  
						stream_WS.Add(WS42);


						}
						break;

					}
					} finally { DebugExitSubRule(20); }

					DebugLocation(134, 24);
					PushFollow(Follow._column_in_column_list612);
					column43=column();
					PopFollow();

					stream_column.Add(column43.Tree);

					}
					break;

				default:
					goto loop21;
				}
			}

			loop21:
				;

			} finally { DebugExitSubRule(21); }



			{
			// AST REWRITE
			// elements: column
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 135:2: -> ^( T_COLUMNLIST ( column )* )
			{
				DebugLocation(135, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:135:5: ^( T_COLUMNLIST ( column )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(135, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_COLUMNLIST, "T_COLUMNLIST"), root_1);

				DebugLocation(135, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:135:20: ( column )*
				while ( stream_column.HasNext )
				{
					DebugLocation(135, 20);
					adaptor.AddChild(root_1, stream_column.NextTree());

				}
				stream_column.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("column_list", 7);
			LeaveRule("column_list", 7);
			LeaveRule_column_list();
	    }
	 	DebugLocation(136, 1);
		} finally { DebugExitRule(GrammarFileName, "column_list"); }
		return retval;

	}
	// $ANTLR end "column_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_column() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_column() {}

	// $ANTLR start "column"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:138:1: column : ( '*' -> ^( T_COLUMN '*' ) | expression ( WS SIMPLE_FILE )? -> ^( T_COLUMN expression ( SIMPLE_FILE )? ) );
	[GrammarRule("column")]
	private AstParserRuleReturnScope<object, IToken> column()
	{
		EnterRule_column();
		EnterRule("column", 8);
		TraceIn("column", 8);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal44 = default(IToken);
	    IToken WS46 = default(IToken);
	    IToken SIMPLE_FILE47 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression45 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal44_tree = default(object);
	    object WS46_tree = default(object);
	    object SIMPLE_FILE47_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_SIMPLE_FILE=new RewriteRuleITokenStream(adaptor,"token SIMPLE_FILE");
	    RewriteRuleITokenStream stream_149=new RewriteRuleITokenStream(adaptor,"token 149");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "column");
		DebugLocation(138, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:139:2: ( '*' -> ^( T_COLUMN '*' ) | expression ( WS SIMPLE_FILE )? -> ^( T_COLUMN expression ( SIMPLE_FILE )? ) )
			int alt23=2;
			try { DebugEnterDecision(23, decisionCanBacktrack[23]);
			int LA23_0 = input.LA(1);

			if ((LA23_0==149))
			{
				alt23 = 1;
			}
			else if (((LA23_0>=CASE && LA23_0<=CAST)||LA23_0==CONVERT||LA23_0==EXISTS||(LA23_0>=NOT && LA23_0<=NUMBER)||LA23_0==SIMPLE_FILE||(LA23_0>=STRING && LA23_0<=SYSTEMVAR)||LA23_0==TOKEN||LA23_0==VARIABLE||LA23_0==147))
			{
				alt23 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 23, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:139:4: '*'
				{
				DebugLocation(139, 4);
				char_literal44=(IToken)Match(input,149,Follow._149_in_column636);  
				stream_149.Add(char_literal44);



				{
				// AST REWRITE
				// elements: 149
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 139:8: -> ^( T_COLUMN '*' )
				{
					DebugLocation(139, 11);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:139:11: ^( T_COLUMN '*' )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(139, 13);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_COLUMN, "T_COLUMN"), root_1);

					DebugLocation(139, 22);
					adaptor.AddChild(root_1, stream_149.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:140:4: expression ( WS SIMPLE_FILE )?
				{
				DebugLocation(140, 4);
				PushFollow(Follow._expression_in_column650);
				expression45=expression();
				PopFollow();

				stream_expression.Add(expression45.Tree);
				DebugLocation(140, 15);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:140:15: ( WS SIMPLE_FILE )?
				int alt22=2;
				try { DebugEnterSubRule(22);
				try { DebugEnterDecision(22, decisionCanBacktrack[22]);
				int LA22_0 = input.LA(1);

				if ((LA22_0==WS))
				{
					int LA22_1 = input.LA(2);

					if ((LA22_1==SIMPLE_FILE))
					{
						alt22 = 1;
					}
				}
				} finally { DebugExitDecision(22); }
				switch (alt22)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:140:16: WS SIMPLE_FILE
					{
					DebugLocation(140, 16);
					WS46=(IToken)Match(input,WS,Follow._WS_in_column653);  
					stream_WS.Add(WS46);

					DebugLocation(140, 19);
					SIMPLE_FILE47=(IToken)Match(input,SIMPLE_FILE,Follow._SIMPLE_FILE_in_column655);  
					stream_SIMPLE_FILE.Add(SIMPLE_FILE47);


					}
					break;

				}
				} finally { DebugExitSubRule(22); }



				{
				// AST REWRITE
				// elements: SIMPLE_FILE, expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 140:33: -> ^( T_COLUMN expression ( SIMPLE_FILE )? )
				{
					DebugLocation(140, 36);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:140:36: ^( T_COLUMN expression ( SIMPLE_FILE )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(140, 38);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_COLUMN, "T_COLUMN"), root_1);

					DebugLocation(140, 47);
					adaptor.AddChild(root_1, stream_expression.NextTree());
					DebugLocation(140, 58);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:140:58: ( SIMPLE_FILE )?
					if (stream_SIMPLE_FILE.HasNext)
					{
						DebugLocation(140, 58);
						adaptor.AddChild(root_1, stream_SIMPLE_FILE.NextNode());

					}
					stream_SIMPLE_FILE.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("column", 8);
			LeaveRule("column", 8);
			LeaveRule_column();
	    }
	 	DebugLocation(141, 1);
		} finally { DebugExitRule(GrammarFileName, "column"); }
		return retval;

	}
	// $ANTLR end "column"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_into_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_into_clause() {}

	// $ANTLR start "into_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:142:1: into_clause : INTO WS file -> ^( T_INTO file ) ;
	[GrammarRule("into_clause")]
	private AstParserRuleReturnScope<object, IToken> into_clause()
	{
		EnterRule_into_clause();
		EnterRule("into_clause", 9);
		TraceIn("into_clause", 9);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken INTO48 = default(IToken);
	    IToken WS49 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file50 = default(AstParserRuleReturnScope<object, IToken>);

	    object INTO48_tree = default(object);
	    object WS49_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_INTO=new RewriteRuleITokenStream(adaptor,"token INTO");
	    RewriteRuleSubtreeStream stream_file=new RewriteRuleSubtreeStream(adaptor,"rule file");
		try { DebugEnterRule(GrammarFileName, "into_clause");
		DebugLocation(142, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:143:2: ( INTO WS file -> ^( T_INTO file ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:143:4: INTO WS file
			{
			DebugLocation(143, 4);
			INTO48=(IToken)Match(input,INTO,Follow._INTO_in_into_clause678);  
			stream_INTO.Add(INTO48);

			DebugLocation(143, 9);
			WS49=(IToken)Match(input,WS,Follow._WS_in_into_clause680);  
			stream_WS.Add(WS49);

			DebugLocation(143, 12);
			PushFollow(Follow._file_in_into_clause682);
			file50=file();
			PopFollow();

			stream_file.Add(file50.Tree);


			{
			// AST REWRITE
			// elements: file
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 143:17: -> ^( T_INTO file )
			{
				DebugLocation(143, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:143:20: ^( T_INTO file )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(143, 22);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_INTO, "T_INTO"), root_1);

				DebugLocation(143, 29);
				adaptor.AddChild(root_1, stream_file.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("into_clause", 9);
			LeaveRule("into_clause", 9);
			LeaveRule_into_clause();
	    }
	 	DebugLocation(144, 1);
		} finally { DebugExitRule(GrammarFileName, "into_clause"); }
		return retval;

	}
	// $ANTLR end "into_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_from_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_from_clause() {}

	// $ANTLR start "from_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:146:1: from_clause : FROM WS from_clause_item ( ( WS )? ',' ( WS )? from_clause_item )* -> ^( T_FROM ( from_clause_item )* ) ;
	[GrammarRule("from_clause")]
	private AstParserRuleReturnScope<object, IToken> from_clause()
	{
		EnterRule_from_clause();
		EnterRule("from_clause", 10);
		TraceIn("from_clause", 10);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken FROM51 = default(IToken);
	    IToken WS52 = default(IToken);
	    IToken WS54 = default(IToken);
	    IToken char_literal55 = default(IToken);
	    IToken WS56 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> from_clause_item53 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> from_clause_item57 = default(AstParserRuleReturnScope<object, IToken>);

	    object FROM51_tree = default(object);
	    object WS52_tree = default(object);
	    object WS54_tree = default(object);
	    object char_literal55_tree = default(object);
	    object WS56_tree = default(object);
	    RewriteRuleITokenStream stream_151=new RewriteRuleITokenStream(adaptor,"token 151");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_FROM=new RewriteRuleITokenStream(adaptor,"token FROM");
	    RewriteRuleSubtreeStream stream_from_clause_item=new RewriteRuleSubtreeStream(adaptor,"rule from_clause_item");
		try { DebugEnterRule(GrammarFileName, "from_clause");
		DebugLocation(146, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:147:2: ( FROM WS from_clause_item ( ( WS )? ',' ( WS )? from_clause_item )* -> ^( T_FROM ( from_clause_item )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:147:4: FROM WS from_clause_item ( ( WS )? ',' ( WS )? from_clause_item )*
			{
			DebugLocation(147, 4);
			FROM51=(IToken)Match(input,FROM,Follow._FROM_in_from_clause702);  
			stream_FROM.Add(FROM51);

			DebugLocation(147, 9);
			WS52=(IToken)Match(input,WS,Follow._WS_in_from_clause704);  
			stream_WS.Add(WS52);

			DebugLocation(147, 12);
			PushFollow(Follow._from_clause_item_in_from_clause706);
			from_clause_item53=from_clause_item();
			PopFollow();

			stream_from_clause_item.Add(from_clause_item53.Tree);
			DebugLocation(147, 29);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:147:29: ( ( WS )? ',' ( WS )? from_clause_item )*
			try { DebugEnterSubRule(26);
			while (true)
			{
				int alt26=2;
				try { DebugEnterDecision(26, decisionCanBacktrack[26]);
				int LA26_0 = input.LA(1);

				if ((LA26_0==WS))
				{
					int LA26_1 = input.LA(2);

					if ((LA26_1==151))
					{
						alt26 = 1;
					}


				}
				else if ((LA26_0==151))
				{
					alt26 = 1;
				}


				} finally { DebugExitDecision(26); }
				switch ( alt26 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:147:30: ( WS )? ',' ( WS )? from_clause_item
					{
					DebugLocation(147, 30);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:147:30: ( WS )?
					int alt24=2;
					try { DebugEnterSubRule(24);
					try { DebugEnterDecision(24, decisionCanBacktrack[24]);
					int LA24_0 = input.LA(1);

					if ((LA24_0==WS))
					{
						alt24 = 1;
					}
					} finally { DebugExitDecision(24); }
					switch (alt24)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:147:30: WS
						{
						DebugLocation(147, 30);
						WS54=(IToken)Match(input,WS,Follow._WS_in_from_clause709);  
						stream_WS.Add(WS54);


						}
						break;

					}
					} finally { DebugExitSubRule(24); }

					DebugLocation(147, 34);
					char_literal55=(IToken)Match(input,151,Follow._151_in_from_clause712);  
					stream_151.Add(char_literal55);

					DebugLocation(147, 38);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:147:38: ( WS )?
					int alt25=2;
					try { DebugEnterSubRule(25);
					try { DebugEnterDecision(25, decisionCanBacktrack[25]);
					int LA25_0 = input.LA(1);

					if ((LA25_0==WS))
					{
						alt25 = 1;
					}
					} finally { DebugExitDecision(25); }
					switch (alt25)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:147:38: WS
						{
						DebugLocation(147, 38);
						WS56=(IToken)Match(input,WS,Follow._WS_in_from_clause714);  
						stream_WS.Add(WS56);


						}
						break;

					}
					} finally { DebugExitSubRule(25); }

					DebugLocation(147, 42);
					PushFollow(Follow._from_clause_item_in_from_clause717);
					from_clause_item57=from_clause_item();
					PopFollow();

					stream_from_clause_item.Add(from_clause_item57.Tree);

					}
					break;

				default:
					goto loop26;
				}
			}

			loop26:
				;

			} finally { DebugExitSubRule(26); }



			{
			// AST REWRITE
			// elements: from_clause_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 147:61: -> ^( T_FROM ( from_clause_item )* )
			{
				DebugLocation(147, 64);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:147:64: ^( T_FROM ( from_clause_item )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(147, 66);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FROM, "T_FROM"), root_1);

				DebugLocation(147, 73);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:147:73: ( from_clause_item )*
				while ( stream_from_clause_item.HasNext )
				{
					DebugLocation(147, 73);
					adaptor.AddChild(root_1, stream_from_clause_item.NextTree());

				}
				stream_from_clause_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("from_clause", 10);
			LeaveRule("from_clause", 10);
			LeaveRule_from_clause();
	    }
	 	DebugLocation(148, 1);
		} finally { DebugExitRule(GrammarFileName, "from_clause"); }
		return retval;

	}
	// $ANTLR end "from_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_from_clause_item() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_from_clause_item() {}

	// $ANTLR start "from_clause_item"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:150:1: from_clause_item : ( STRING -> ^( T_FILE STRING ) | file | subquery | view_name );
	[GrammarRule("from_clause_item")]
	private AstParserRuleReturnScope<object, IToken> from_clause_item()
	{
		EnterRule_from_clause_item();
		EnterRule("from_clause_item", 11);
		TraceIn("from_clause_item", 11);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken STRING58 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file59 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> subquery60 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> view_name61 = default(AstParserRuleReturnScope<object, IToken>);

	    object STRING58_tree = default(object);
	    RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");

		try { DebugEnterRule(GrammarFileName, "from_clause_item");
		DebugLocation(150, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:151:2: ( STRING -> ^( T_FILE STRING ) | file | subquery | view_name )
			int alt27=4;
			try { DebugEnterDecision(27, decisionCanBacktrack[27]);
			switch (input.LA(1))
			{
			case STRING:
				{
				alt27 = 1;
				}
				break;
			case SIMPLE_FILE:
			case 161:
				{
				alt27 = 2;
				}
				break;
			case 147:
				{
				alt27 = 3;
				}
				break;
			case TOKEN:
				{
				alt27 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 27, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:151:4: STRING
				{
				DebugLocation(151, 4);
				STRING58=(IToken)Match(input,STRING,Follow._STRING_in_from_clause_item740);  
				stream_STRING.Add(STRING58);



				{
				// AST REWRITE
				// elements: STRING
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 151:11: -> ^( T_FILE STRING )
				{
					DebugLocation(151, 14);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:151:14: ^( T_FILE STRING )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(151, 16);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILE, "T_FILE"), root_1);

					DebugLocation(151, 23);
					adaptor.AddChild(root_1, stream_STRING.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:152:4: file
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(152, 4);
				PushFollow(Follow._file_in_from_clause_item753);
				file59=file();
				PopFollow();

				adaptor.AddChild(root_0, file59.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:153:4: subquery
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(153, 4);
				PushFollow(Follow._subquery_in_from_clause_item758);
				subquery60=subquery();
				PopFollow();

				adaptor.AddChild(root_0, subquery60.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:154:4: view_name
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(154, 4);
				PushFollow(Follow._view_name_in_from_clause_item763);
				view_name61=view_name();
				PopFollow();

				adaptor.AddChild(root_0, view_name61.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("from_clause_item", 11);
			LeaveRule("from_clause_item", 11);
			LeaveRule_from_clause_item();
	    }
	 	DebugLocation(155, 1);
		} finally { DebugExitRule(GrammarFileName, "from_clause_item"); }
		return retval;

	}
	// $ANTLR end "from_clause_item"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_subquery() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_subquery() {}

	// $ANTLR start "subquery"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:157:1: subquery : '(' ( WS )? select_command ( WS )? ')' -> ^( T_SUBQUERY select_command ) ;
	[GrammarRule("subquery")]
	private AstParserRuleReturnScope<object, IToken> subquery()
	{
		EnterRule_subquery();
		EnterRule("subquery", 12);
		TraceIn("subquery", 12);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal62 = default(IToken);
	    IToken WS63 = default(IToken);
	    IToken WS65 = default(IToken);
	    IToken char_literal66 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> select_command64 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal62_tree = default(object);
	    object WS63_tree = default(object);
	    object WS65_tree = default(object);
	    object char_literal66_tree = default(object);
	    RewriteRuleITokenStream stream_147=new RewriteRuleITokenStream(adaptor,"token 147");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_148=new RewriteRuleITokenStream(adaptor,"token 148");
	    RewriteRuleSubtreeStream stream_select_command=new RewriteRuleSubtreeStream(adaptor,"rule select_command");
		try { DebugEnterRule(GrammarFileName, "subquery");
		DebugLocation(157, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:158:2: ( '(' ( WS )? select_command ( WS )? ')' -> ^( T_SUBQUERY select_command ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:158:4: '(' ( WS )? select_command ( WS )? ')'
			{
			DebugLocation(158, 4);
			char_literal62=(IToken)Match(input,147,Follow._147_in_subquery775);  
			stream_147.Add(char_literal62);

			DebugLocation(158, 8);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:158:8: ( WS )?
			int alt28=2;
			try { DebugEnterSubRule(28);
			try { DebugEnterDecision(28, decisionCanBacktrack[28]);
			int LA28_0 = input.LA(1);

			if ((LA28_0==WS))
			{
				alt28 = 1;
			}
			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:158:8: WS
				{
				DebugLocation(158, 8);
				WS63=(IToken)Match(input,WS,Follow._WS_in_subquery777);  
				stream_WS.Add(WS63);


				}
				break;

			}
			} finally { DebugExitSubRule(28); }

			DebugLocation(158, 12);
			PushFollow(Follow._select_command_in_subquery780);
			select_command64=select_command();
			PopFollow();

			stream_select_command.Add(select_command64.Tree);
			DebugLocation(158, 27);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:158:27: ( WS )?
			int alt29=2;
			try { DebugEnterSubRule(29);
			try { DebugEnterDecision(29, decisionCanBacktrack[29]);
			int LA29_0 = input.LA(1);

			if ((LA29_0==WS))
			{
				alt29 = 1;
			}
			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:158:27: WS
				{
				DebugLocation(158, 27);
				WS65=(IToken)Match(input,WS,Follow._WS_in_subquery782);  
				stream_WS.Add(WS65);


				}
				break;

			}
			} finally { DebugExitSubRule(29); }

			DebugLocation(158, 31);
			char_literal66=(IToken)Match(input,148,Follow._148_in_subquery785);  
			stream_148.Add(char_literal66);



			{
			// AST REWRITE
			// elements: select_command
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 158:35: -> ^( T_SUBQUERY select_command )
			{
				DebugLocation(158, 38);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:158:38: ^( T_SUBQUERY select_command )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(158, 40);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SUBQUERY, "T_SUBQUERY"), root_1);

				DebugLocation(158, 51);
				adaptor.AddChild(root_1, stream_select_command.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("subquery", 12);
			LeaveRule("subquery", 12);
			LeaveRule_subquery();
	    }
	 	DebugLocation(159, 1);
		} finally { DebugExitRule(GrammarFileName, "subquery"); }
		return retval;

	}
	// $ANTLR end "subquery"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file() {}

	// $ANTLR start "file"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:161:1: file : ( '[' ( WS )? file_spec ( WS file_option )* ( WS )? ']' -> ^( T_FILE file_spec ( file_option )* ) | SIMPLE_FILE -> ^( T_FILE SIMPLE_FILE ) );
	[GrammarRule("file")]
	private AstParserRuleReturnScope<object, IToken> file()
	{
		EnterRule_file();
		EnterRule("file", 13);
		TraceIn("file", 13);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal67 = default(IToken);
	    IToken WS68 = default(IToken);
	    IToken WS70 = default(IToken);
	    IToken WS72 = default(IToken);
	    IToken char_literal73 = default(IToken);
	    IToken SIMPLE_FILE74 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file_spec69 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> file_option71 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal67_tree = default(object);
	    object WS68_tree = default(object);
	    object WS70_tree = default(object);
	    object WS72_tree = default(object);
	    object char_literal73_tree = default(object);
	    object SIMPLE_FILE74_tree = default(object);
	    RewriteRuleITokenStream stream_161=new RewriteRuleITokenStream(adaptor,"token 161");
	    RewriteRuleITokenStream stream_162=new RewriteRuleITokenStream(adaptor,"token 162");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_SIMPLE_FILE=new RewriteRuleITokenStream(adaptor,"token SIMPLE_FILE");
	    RewriteRuleSubtreeStream stream_file_option=new RewriteRuleSubtreeStream(adaptor,"rule file_option");
	    RewriteRuleSubtreeStream stream_file_spec=new RewriteRuleSubtreeStream(adaptor,"rule file_spec");
		try { DebugEnterRule(GrammarFileName, "file");
		DebugLocation(161, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:162:2: ( '[' ( WS )? file_spec ( WS file_option )* ( WS )? ']' -> ^( T_FILE file_spec ( file_option )* ) | SIMPLE_FILE -> ^( T_FILE SIMPLE_FILE ) )
			int alt33=2;
			try { DebugEnterDecision(33, decisionCanBacktrack[33]);
			int LA33_0 = input.LA(1);

			if ((LA33_0==161))
			{
				alt33 = 1;
			}
			else if ((LA33_0==SIMPLE_FILE))
			{
				alt33 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 33, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:162:4: '[' ( WS )? file_spec ( WS file_option )* ( WS )? ']'
				{
				DebugLocation(162, 4);
				char_literal67=(IToken)Match(input,161,Follow._161_in_file804);  
				stream_161.Add(char_literal67);

				DebugLocation(162, 8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:162:8: ( WS )?
				int alt30=2;
				try { DebugEnterSubRule(30);
				try { DebugEnterDecision(30, decisionCanBacktrack[30]);
				int LA30_0 = input.LA(1);

				if ((LA30_0==WS))
				{
					alt30 = 1;
				}
				} finally { DebugExitDecision(30); }
				switch (alt30)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:162:8: WS
					{
					DebugLocation(162, 8);
					WS68=(IToken)Match(input,WS,Follow._WS_in_file806);  
					stream_WS.Add(WS68);


					}
					break;

				}
				} finally { DebugExitSubRule(30); }

				DebugLocation(162, 12);
				PushFollow(Follow._file_spec_in_file809);
				file_spec69=file_spec();
				PopFollow();

				stream_file_spec.Add(file_spec69.Tree);
				DebugLocation(162, 22);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:162:22: ( WS file_option )*
				try { DebugEnterSubRule(31);
				while (true)
				{
					int alt31=2;
					try { DebugEnterDecision(31, decisionCanBacktrack[31]);
					int LA31_0 = input.LA(1);

					if ((LA31_0==WS))
					{
						int LA31_1 = input.LA(2);

						if ((LA31_1==152))
						{
							alt31 = 1;
						}


					}


					} finally { DebugExitDecision(31); }
					switch ( alt31 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:162:23: WS file_option
						{
						DebugLocation(162, 23);
						WS70=(IToken)Match(input,WS,Follow._WS_in_file812);  
						stream_WS.Add(WS70);

						DebugLocation(162, 26);
						PushFollow(Follow._file_option_in_file814);
						file_option71=file_option();
						PopFollow();

						stream_file_option.Add(file_option71.Tree);

						}
						break;

					default:
						goto loop31;
					}
				}

				loop31:
					;

				} finally { DebugExitSubRule(31); }

				DebugLocation(162, 40);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:162:40: ( WS )?
				int alt32=2;
				try { DebugEnterSubRule(32);
				try { DebugEnterDecision(32, decisionCanBacktrack[32]);
				int LA32_0 = input.LA(1);

				if ((LA32_0==WS))
				{
					alt32 = 1;
				}
				} finally { DebugExitDecision(32); }
				switch (alt32)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:162:40: WS
					{
					DebugLocation(162, 40);
					WS72=(IToken)Match(input,WS,Follow._WS_in_file818);  
					stream_WS.Add(WS72);


					}
					break;

				}
				} finally { DebugExitSubRule(32); }

				DebugLocation(162, 44);
				char_literal73=(IToken)Match(input,162,Follow._162_in_file821);  
				stream_162.Add(char_literal73);



				{
				// AST REWRITE
				// elements: file_spec, file_option
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 162:48: -> ^( T_FILE file_spec ( file_option )* )
				{
					DebugLocation(162, 51);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:162:51: ^( T_FILE file_spec ( file_option )* )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(162, 53);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILE, "T_FILE"), root_1);

					DebugLocation(162, 60);
					adaptor.AddChild(root_1, stream_file_spec.NextTree());
					DebugLocation(162, 70);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:162:70: ( file_option )*
					while ( stream_file_option.HasNext )
					{
						DebugLocation(162, 70);
						adaptor.AddChild(root_1, stream_file_option.NextTree());

					}
					stream_file_option.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:163:4: SIMPLE_FILE
				{
				DebugLocation(163, 4);
				SIMPLE_FILE74=(IToken)Match(input,SIMPLE_FILE,Follow._SIMPLE_FILE_in_file838);  
				stream_SIMPLE_FILE.Add(SIMPLE_FILE74);



				{
				// AST REWRITE
				// elements: SIMPLE_FILE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 163:16: -> ^( T_FILE SIMPLE_FILE )
				{
					DebugLocation(163, 19);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:163:19: ^( T_FILE SIMPLE_FILE )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(163, 21);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILE, "T_FILE"), root_1);

					DebugLocation(163, 28);
					adaptor.AddChild(root_1, stream_SIMPLE_FILE.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file", 13);
			LeaveRule("file", 13);
			LeaveRule_file();
	    }
	 	DebugLocation(164, 1);
		} finally { DebugExitRule(GrammarFileName, "file"); }
		return retval;

	}
	// $ANTLR end "file"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_spec() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_spec() {}

	// $ANTLR start "file_spec"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:166:1: file_spec : ( string | variable );
	[GrammarRule("file_spec")]
	private AstParserRuleReturnScope<object, IToken> file_spec()
	{
		EnterRule_file_spec();
		EnterRule("file_spec", 14);
		TraceIn("file_spec", 14);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> string75 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> variable76 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "file_spec");
		DebugLocation(166, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:167:2: ( string | variable )
			int alt34=2;
			try { DebugEnterDecision(34, decisionCanBacktrack[34]);
			int LA34_0 = input.LA(1);

			if ((LA34_0==STRING))
			{
				alt34 = 1;
			}
			else if ((LA34_0==VARIABLE))
			{
				alt34 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 34, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(34); }
			switch (alt34)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:167:4: string
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(167, 4);
				PushFollow(Follow._string_in_file_spec857);
				string75=@string();
				PopFollow();

				adaptor.AddChild(root_0, string75.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:168:4: variable
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(168, 4);
				PushFollow(Follow._variable_in_file_spec862);
				variable76=variable();
				PopFollow();

				adaptor.AddChild(root_0, variable76.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_spec", 14);
			LeaveRule("file_spec", 14);
			LeaveRule_file_spec();
	    }
	 	DebugLocation(169, 1);
		} finally { DebugExitRule(GrammarFileName, "file_spec"); }
		return retval;

	}
	// $ANTLR end "file_spec"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_option() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_option() {}

	// $ANTLR start "file_option"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:171:1: file_option : '-' file_option_name ( ( WS )? '=' ( WS )? file_option_value )? -> ^( T_FILEOPTION file_option_name ( file_option_value )? ) ;
	[GrammarRule("file_option")]
	private AstParserRuleReturnScope<object, IToken> file_option()
	{
		EnterRule_file_option();
		EnterRule("file_option", 15);
		TraceIn("file_option", 15);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal77 = default(IToken);
	    IToken WS79 = default(IToken);
	    IToken char_literal80 = default(IToken);
	    IToken WS81 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file_option_name78 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> file_option_value82 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal77_tree = default(object);
	    object WS79_tree = default(object);
	    object char_literal80_tree = default(object);
	    object WS81_tree = default(object);
	    RewriteRuleITokenStream stream_152=new RewriteRuleITokenStream(adaptor,"token 152");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_158=new RewriteRuleITokenStream(adaptor,"token 158");
	    RewriteRuleSubtreeStream stream_file_option_name=new RewriteRuleSubtreeStream(adaptor,"rule file_option_name");
	    RewriteRuleSubtreeStream stream_file_option_value=new RewriteRuleSubtreeStream(adaptor,"rule file_option_value");
		try { DebugEnterRule(GrammarFileName, "file_option");
		DebugLocation(171, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:172:2: ( '-' file_option_name ( ( WS )? '=' ( WS )? file_option_value )? -> ^( T_FILEOPTION file_option_name ( file_option_value )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:172:4: '-' file_option_name ( ( WS )? '=' ( WS )? file_option_value )?
			{
			DebugLocation(172, 4);
			char_literal77=(IToken)Match(input,152,Follow._152_in_file_option874);  
			stream_152.Add(char_literal77);

			DebugLocation(172, 8);
			PushFollow(Follow._file_option_name_in_file_option876);
			file_option_name78=file_option_name();
			PopFollow();

			stream_file_option_name.Add(file_option_name78.Tree);
			DebugLocation(172, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:172:25: ( ( WS )? '=' ( WS )? file_option_value )?
			int alt37=2;
			try { DebugEnterSubRule(37);
			try { DebugEnterDecision(37, decisionCanBacktrack[37]);
			int LA37_0 = input.LA(1);

			if ((LA37_0==WS))
			{
				int LA37_1 = input.LA(2);

				if ((LA37_1==158))
				{
					alt37 = 1;
				}
			}
			else if ((LA37_0==158))
			{
				alt37 = 1;
			}
			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:172:27: ( WS )? '=' ( WS )? file_option_value
				{
				DebugLocation(172, 27);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:172:27: ( WS )?
				int alt35=2;
				try { DebugEnterSubRule(35);
				try { DebugEnterDecision(35, decisionCanBacktrack[35]);
				int LA35_0 = input.LA(1);

				if ((LA35_0==WS))
				{
					alt35 = 1;
				}
				} finally { DebugExitDecision(35); }
				switch (alt35)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:172:27: WS
					{
					DebugLocation(172, 27);
					WS79=(IToken)Match(input,WS,Follow._WS_in_file_option880);  
					stream_WS.Add(WS79);


					}
					break;

				}
				} finally { DebugExitSubRule(35); }

				DebugLocation(172, 31);
				char_literal80=(IToken)Match(input,158,Follow._158_in_file_option883);  
				stream_158.Add(char_literal80);

				DebugLocation(172, 35);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:172:35: ( WS )?
				int alt36=2;
				try { DebugEnterSubRule(36);
				try { DebugEnterDecision(36, decisionCanBacktrack[36]);
				int LA36_0 = input.LA(1);

				if ((LA36_0==WS))
				{
					alt36 = 1;
				}
				} finally { DebugExitDecision(36); }
				switch (alt36)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:172:35: WS
					{
					DebugLocation(172, 35);
					WS81=(IToken)Match(input,WS,Follow._WS_in_file_option885);  
					stream_WS.Add(WS81);


					}
					break;

				}
				} finally { DebugExitSubRule(36); }

				DebugLocation(172, 39);
				PushFollow(Follow._file_option_value_in_file_option888);
				file_option_value82=file_option_value();
				PopFollow();

				stream_file_option_value.Add(file_option_value82.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(37); }



			{
			// AST REWRITE
			// elements: file_option_name, file_option_value
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 172:59: -> ^( T_FILEOPTION file_option_name ( file_option_value )? )
			{
				DebugLocation(172, 62);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:172:62: ^( T_FILEOPTION file_option_name ( file_option_value )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(172, 64);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILEOPTION, "T_FILEOPTION"), root_1);

				DebugLocation(172, 77);
				adaptor.AddChild(root_1, stream_file_option_name.NextTree());
				DebugLocation(172, 94);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:172:94: ( file_option_value )?
				if (stream_file_option_value.HasNext)
				{
					DebugLocation(172, 94);
					adaptor.AddChild(root_1, stream_file_option_value.NextTree());

				}
				stream_file_option_value.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_option", 15);
			LeaveRule("file_option", 15);
			LeaveRule_file_option();
	    }
	 	DebugLocation(173, 1);
		} finally { DebugExitRule(GrammarFileName, "file_option"); }
		return retval;

	}
	// $ANTLR end "file_option"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_option_name() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_option_name() {}

	// $ANTLR start "file_option_name"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:175:1: file_option_name : TOKEN ;
	[GrammarRule("file_option_name")]
	private AstParserRuleReturnScope<object, IToken> file_option_name()
	{
		EnterRule_file_option_name();
		EnterRule("file_option_name", 16);
		TraceIn("file_option_name", 16);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN83 = default(IToken);

	    object TOKEN83_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "file_option_name");
		DebugLocation(175, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:176:2: ( TOKEN )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:176:4: TOKEN
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(176, 4);
			TOKEN83=(IToken)Match(input,TOKEN,Follow._TOKEN_in_file_option_name912); 
			TOKEN83_tree = (object)adaptor.Create(TOKEN83);
			adaptor.AddChild(root_0, TOKEN83_tree);


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_option_name", 16);
			LeaveRule("file_option_name", 16);
			LeaveRule_file_option_name();
	    }
	 	DebugLocation(177, 1);
		} finally { DebugExitRule(GrammarFileName, "file_option_name"); }
		return retval;

	}
	// $ANTLR end "file_option_name"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_option_value() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_option_value() {}

	// $ANTLR start "file_option_value"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:179:1: file_option_value : ( TOKEN | STRING | NUMBER | variable );
	[GrammarRule("file_option_value")]
	private AstParserRuleReturnScope<object, IToken> file_option_value()
	{
		EnterRule_file_option_value();
		EnterRule("file_option_value", 17);
		TraceIn("file_option_value", 17);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN84 = default(IToken);
	    IToken STRING85 = default(IToken);
	    IToken NUMBER86 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> variable87 = default(AstParserRuleReturnScope<object, IToken>);

	    object TOKEN84_tree = default(object);
	    object STRING85_tree = default(object);
	    object NUMBER86_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "file_option_value");
		DebugLocation(179, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:180:2: ( TOKEN | STRING | NUMBER | variable )
			int alt38=4;
			try { DebugEnterDecision(38, decisionCanBacktrack[38]);
			switch (input.LA(1))
			{
			case TOKEN:
				{
				alt38 = 1;
				}
				break;
			case STRING:
				{
				alt38 = 2;
				}
				break;
			case NUMBER:
				{
				alt38 = 3;
				}
				break;
			case VARIABLE:
				{
				alt38 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 38, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:180:4: TOKEN
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(180, 4);
				TOKEN84=(IToken)Match(input,TOKEN,Follow._TOKEN_in_file_option_value924); 
				TOKEN84_tree = (object)adaptor.Create(TOKEN84);
				adaptor.AddChild(root_0, TOKEN84_tree);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:180:12: STRING
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(180, 12);
				STRING85=(IToken)Match(input,STRING,Follow._STRING_in_file_option_value928); 
				STRING85_tree = (object)adaptor.Create(STRING85);
				adaptor.AddChild(root_0, STRING85_tree);


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:180:21: NUMBER
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(180, 21);
				NUMBER86=(IToken)Match(input,NUMBER,Follow._NUMBER_in_file_option_value932); 
				NUMBER86_tree = (object)adaptor.Create(NUMBER86);
				adaptor.AddChild(root_0, NUMBER86_tree);


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:180:30: variable
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(180, 30);
				PushFollow(Follow._variable_in_file_option_value936);
				variable87=variable();
				PopFollow();

				adaptor.AddChild(root_0, variable87.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_option_value", 17);
			LeaveRule("file_option_value", 17);
			LeaveRule_file_option_value();
	    }
	 	DebugLocation(181, 1);
		} finally { DebugExitRule(GrammarFileName, "file_option_value"); }
		return retval;

	}
	// $ANTLR end "file_option_value"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_where_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_where_clause() {}

	// $ANTLR start "where_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:183:1: where_clause : WHERE WS expression -> ^( T_WHERE expression ) ;
	[GrammarRule("where_clause")]
	private AstParserRuleReturnScope<object, IToken> where_clause()
	{
		EnterRule_where_clause();
		EnterRule("where_clause", 18);
		TraceIn("where_clause", 18);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WHERE88 = default(IToken);
	    IToken WS89 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression90 = default(AstParserRuleReturnScope<object, IToken>);

	    object WHERE88_tree = default(object);
	    object WS89_tree = default(object);
	    RewriteRuleITokenStream stream_WHERE=new RewriteRuleITokenStream(adaptor,"token WHERE");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "where_clause");
		DebugLocation(183, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:184:2: ( WHERE WS expression -> ^( T_WHERE expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:184:4: WHERE WS expression
			{
			DebugLocation(184, 4);
			WHERE88=(IToken)Match(input,WHERE,Follow._WHERE_in_where_clause948);  
			stream_WHERE.Add(WHERE88);

			DebugLocation(184, 10);
			WS89=(IToken)Match(input,WS,Follow._WS_in_where_clause950);  
			stream_WS.Add(WS89);

			DebugLocation(184, 13);
			PushFollow(Follow._expression_in_where_clause952);
			expression90=expression();
			PopFollow();

			stream_expression.Add(expression90.Tree);


			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 185:2: -> ^( T_WHERE expression )
			{
				DebugLocation(185, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:185:5: ^( T_WHERE expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(185, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_WHERE, "T_WHERE"), root_1);

				DebugLocation(185, 15);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("where_clause", 18);
			LeaveRule("where_clause", 18);
			LeaveRule_where_clause();
	    }
	 	DebugLocation(186, 1);
		} finally { DebugExitRule(GrammarFileName, "where_clause"); }
		return retval;

	}
	// $ANTLR end "where_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_groupby_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_groupby_clause() {}

	// $ANTLR start "groupby_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:187:1: groupby_clause : GROUP WS BY WS orderby_column_list -> ^( T_GROUPBY orderby_column_list ) ;
	[GrammarRule("groupby_clause")]
	private AstParserRuleReturnScope<object, IToken> groupby_clause()
	{
		EnterRule_groupby_clause();
		EnterRule("groupby_clause", 19);
		TraceIn("groupby_clause", 19);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken GROUP91 = default(IToken);
	    IToken WS92 = default(IToken);
	    IToken BY93 = default(IToken);
	    IToken WS94 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> orderby_column_list95 = default(AstParserRuleReturnScope<object, IToken>);

	    object GROUP91_tree = default(object);
	    object WS92_tree = default(object);
	    object BY93_tree = default(object);
	    object WS94_tree = default(object);
	    RewriteRuleITokenStream stream_GROUP=new RewriteRuleITokenStream(adaptor,"token GROUP");
	    RewriteRuleITokenStream stream_BY=new RewriteRuleITokenStream(adaptor,"token BY");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_orderby_column_list=new RewriteRuleSubtreeStream(adaptor,"rule orderby_column_list");
		try { DebugEnterRule(GrammarFileName, "groupby_clause");
		DebugLocation(187, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:188:2: ( GROUP WS BY WS orderby_column_list -> ^( T_GROUPBY orderby_column_list ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:188:4: GROUP WS BY WS orderby_column_list
			{
			DebugLocation(188, 4);
			GROUP91=(IToken)Match(input,GROUP,Follow._GROUP_in_groupby_clause971);  
			stream_GROUP.Add(GROUP91);

			DebugLocation(188, 10);
			WS92=(IToken)Match(input,WS,Follow._WS_in_groupby_clause973);  
			stream_WS.Add(WS92);

			DebugLocation(188, 13);
			BY93=(IToken)Match(input,BY,Follow._BY_in_groupby_clause975);  
			stream_BY.Add(BY93);

			DebugLocation(188, 16);
			WS94=(IToken)Match(input,WS,Follow._WS_in_groupby_clause977);  
			stream_WS.Add(WS94);

			DebugLocation(188, 19);
			PushFollow(Follow._orderby_column_list_in_groupby_clause979);
			orderby_column_list95=orderby_column_list();
			PopFollow();

			stream_orderby_column_list.Add(orderby_column_list95.Tree);


			{
			// AST REWRITE
			// elements: orderby_column_list
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 189:2: -> ^( T_GROUPBY orderby_column_list )
			{
				DebugLocation(189, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:189:5: ^( T_GROUPBY orderby_column_list )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(189, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_GROUPBY, "T_GROUPBY"), root_1);

				DebugLocation(189, 17);
				adaptor.AddChild(root_1, stream_orderby_column_list.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("groupby_clause", 19);
			LeaveRule("groupby_clause", 19);
			LeaveRule_groupby_clause();
	    }
	 	DebugLocation(190, 1);
		} finally { DebugExitRule(GrammarFileName, "groupby_clause"); }
		return retval;

	}
	// $ANTLR end "groupby_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_clause() {}

	// $ANTLR start "orderby_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:192:1: orderby_clause : ORDER WS BY WS orderby_column_list -> ^( T_ORDERBY orderby_column_list ) ;
	[GrammarRule("orderby_clause")]
	private AstParserRuleReturnScope<object, IToken> orderby_clause()
	{
		EnterRule_orderby_clause();
		EnterRule("orderby_clause", 20);
		TraceIn("orderby_clause", 20);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken ORDER96 = default(IToken);
	    IToken WS97 = default(IToken);
	    IToken BY98 = default(IToken);
	    IToken WS99 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> orderby_column_list100 = default(AstParserRuleReturnScope<object, IToken>);

	    object ORDER96_tree = default(object);
	    object WS97_tree = default(object);
	    object BY98_tree = default(object);
	    object WS99_tree = default(object);
	    RewriteRuleITokenStream stream_BY=new RewriteRuleITokenStream(adaptor,"token BY");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_ORDER=new RewriteRuleITokenStream(adaptor,"token ORDER");
	    RewriteRuleSubtreeStream stream_orderby_column_list=new RewriteRuleSubtreeStream(adaptor,"rule orderby_column_list");
		try { DebugEnterRule(GrammarFileName, "orderby_clause");
		DebugLocation(192, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:193:2: ( ORDER WS BY WS orderby_column_list -> ^( T_ORDERBY orderby_column_list ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:193:4: ORDER WS BY WS orderby_column_list
			{
			DebugLocation(193, 4);
			ORDER96=(IToken)Match(input,ORDER,Follow._ORDER_in_orderby_clause1000);  
			stream_ORDER.Add(ORDER96);

			DebugLocation(193, 10);
			WS97=(IToken)Match(input,WS,Follow._WS_in_orderby_clause1002);  
			stream_WS.Add(WS97);

			DebugLocation(193, 13);
			BY98=(IToken)Match(input,BY,Follow._BY_in_orderby_clause1004);  
			stream_BY.Add(BY98);

			DebugLocation(193, 16);
			WS99=(IToken)Match(input,WS,Follow._WS_in_orderby_clause1006);  
			stream_WS.Add(WS99);

			DebugLocation(193, 19);
			PushFollow(Follow._orderby_column_list_in_orderby_clause1008);
			orderby_column_list100=orderby_column_list();
			PopFollow();

			stream_orderby_column_list.Add(orderby_column_list100.Tree);


			{
			// AST REWRITE
			// elements: orderby_column_list
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 194:2: -> ^( T_ORDERBY orderby_column_list )
			{
				DebugLocation(194, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:194:5: ^( T_ORDERBY orderby_column_list )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(194, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_ORDERBY, "T_ORDERBY"), root_1);

				DebugLocation(194, 17);
				adaptor.AddChild(root_1, stream_orderby_column_list.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_clause", 20);
			LeaveRule("orderby_clause", 20);
			LeaveRule_orderby_clause();
	    }
	 	DebugLocation(195, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_clause"); }
		return retval;

	}
	// $ANTLR end "orderby_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_column_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_column_list() {}

	// $ANTLR start "orderby_column_list"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:197:1: orderby_column_list : orderby_column ( ( WS )? ',' ( WS )? orderby_column )* -> ( orderby_column )* ;
	[GrammarRule("orderby_column_list")]
	private AstParserRuleReturnScope<object, IToken> orderby_column_list()
	{
		EnterRule_orderby_column_list();
		EnterRule("orderby_column_list", 21);
		TraceIn("orderby_column_list", 21);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS102 = default(IToken);
	    IToken char_literal103 = default(IToken);
	    IToken WS104 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> orderby_column101 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> orderby_column105 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS102_tree = default(object);
	    object char_literal103_tree = default(object);
	    object WS104_tree = default(object);
	    RewriteRuleITokenStream stream_151=new RewriteRuleITokenStream(adaptor,"token 151");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_orderby_column=new RewriteRuleSubtreeStream(adaptor,"rule orderby_column");
		try { DebugEnterRule(GrammarFileName, "orderby_column_list");
		DebugLocation(197, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:198:2: ( orderby_column ( ( WS )? ',' ( WS )? orderby_column )* -> ( orderby_column )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:198:4: orderby_column ( ( WS )? ',' ( WS )? orderby_column )*
			{
			DebugLocation(198, 4);
			PushFollow(Follow._orderby_column_in_orderby_column_list1029);
			orderby_column101=orderby_column();
			PopFollow();

			stream_orderby_column.Add(orderby_column101.Tree);
			DebugLocation(198, 19);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:198:19: ( ( WS )? ',' ( WS )? orderby_column )*
			try { DebugEnterSubRule(41);
			while (true)
			{
				int alt41=2;
				try { DebugEnterDecision(41, decisionCanBacktrack[41]);
				int LA41_0 = input.LA(1);

				if ((LA41_0==WS))
				{
					int LA41_1 = input.LA(2);

					if ((LA41_1==151))
					{
						alt41 = 1;
					}


				}
				else if ((LA41_0==151))
				{
					alt41 = 1;
				}


				} finally { DebugExitDecision(41); }
				switch ( alt41 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:198:20: ( WS )? ',' ( WS )? orderby_column
					{
					DebugLocation(198, 20);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:198:20: ( WS )?
					int alt39=2;
					try { DebugEnterSubRule(39);
					try { DebugEnterDecision(39, decisionCanBacktrack[39]);
					int LA39_0 = input.LA(1);

					if ((LA39_0==WS))
					{
						alt39 = 1;
					}
					} finally { DebugExitDecision(39); }
					switch (alt39)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:198:20: WS
						{
						DebugLocation(198, 20);
						WS102=(IToken)Match(input,WS,Follow._WS_in_orderby_column_list1032);  
						stream_WS.Add(WS102);


						}
						break;

					}
					} finally { DebugExitSubRule(39); }

					DebugLocation(198, 24);
					char_literal103=(IToken)Match(input,151,Follow._151_in_orderby_column_list1035);  
					stream_151.Add(char_literal103);

					DebugLocation(198, 28);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:198:28: ( WS )?
					int alt40=2;
					try { DebugEnterSubRule(40);
					try { DebugEnterDecision(40, decisionCanBacktrack[40]);
					int LA40_0 = input.LA(1);

					if ((LA40_0==WS))
					{
						alt40 = 1;
					}
					} finally { DebugExitDecision(40); }
					switch (alt40)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:198:28: WS
						{
						DebugLocation(198, 28);
						WS104=(IToken)Match(input,WS,Follow._WS_in_orderby_column_list1037);  
						stream_WS.Add(WS104);


						}
						break;

					}
					} finally { DebugExitSubRule(40); }

					DebugLocation(198, 32);
					PushFollow(Follow._orderby_column_in_orderby_column_list1040);
					orderby_column105=orderby_column();
					PopFollow();

					stream_orderby_column.Add(orderby_column105.Tree);

					}
					break;

				default:
					goto loop41;
				}
			}

			loop41:
				;

			} finally { DebugExitSubRule(41); }



			{
			// AST REWRITE
			// elements: orderby_column
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 199:2: -> ( orderby_column )*
			{
				DebugLocation(199, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:199:5: ( orderby_column )*
				while ( stream_orderby_column.HasNext )
				{
					DebugLocation(199, 5);
					adaptor.AddChild(root_0, stream_orderby_column.NextTree());

				}
				stream_orderby_column.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_column_list", 21);
			LeaveRule("orderby_column_list", 21);
			LeaveRule_orderby_column_list();
	    }
	 	DebugLocation(200, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_column_list"); }
		return retval;

	}
	// $ANTLR end "orderby_column_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_column() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_column() {}

	// $ANTLR start "orderby_column"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:202:1: orderby_column : expression ( WS orderby_direction )? -> ^( T_ORDERBY_COLUMN expression ( orderby_direction )? ) ;
	[GrammarRule("orderby_column")]
	private AstParserRuleReturnScope<object, IToken> orderby_column()
	{
		EnterRule_orderby_column();
		EnterRule("orderby_column", 22);
		TraceIn("orderby_column", 22);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS107 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression106 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> orderby_direction108 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS107_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_orderby_direction=new RewriteRuleSubtreeStream(adaptor,"rule orderby_direction");
		try { DebugEnterRule(GrammarFileName, "orderby_column");
		DebugLocation(202, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:203:2: ( expression ( WS orderby_direction )? -> ^( T_ORDERBY_COLUMN expression ( orderby_direction )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:203:4: expression ( WS orderby_direction )?
			{
			DebugLocation(203, 4);
			PushFollow(Follow._expression_in_orderby_column1060);
			expression106=expression();
			PopFollow();

			stream_expression.Add(expression106.Tree);
			DebugLocation(203, 15);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:203:15: ( WS orderby_direction )?
			int alt42=2;
			try { DebugEnterSubRule(42);
			try { DebugEnterDecision(42, decisionCanBacktrack[42]);
			int LA42_0 = input.LA(1);

			if ((LA42_0==WS))
			{
				int LA42_1 = input.LA(2);

				if ((LA42_1==ASC||LA42_1==DESC||LA42_1==ORIG))
				{
					alt42 = 1;
				}
			}
			} finally { DebugExitDecision(42); }
			switch (alt42)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:203:16: WS orderby_direction
				{
				DebugLocation(203, 16);
				WS107=(IToken)Match(input,WS,Follow._WS_in_orderby_column1063);  
				stream_WS.Add(WS107);

				DebugLocation(203, 19);
				PushFollow(Follow._orderby_direction_in_orderby_column1065);
				orderby_direction108=orderby_direction();
				PopFollow();

				stream_orderby_direction.Add(orderby_direction108.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(42); }



			{
			// AST REWRITE
			// elements: orderby_direction, expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 203:39: -> ^( T_ORDERBY_COLUMN expression ( orderby_direction )? )
			{
				DebugLocation(203, 42);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:203:42: ^( T_ORDERBY_COLUMN expression ( orderby_direction )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(203, 44);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_ORDERBY_COLUMN, "T_ORDERBY_COLUMN"), root_1);

				DebugLocation(203, 61);
				adaptor.AddChild(root_1, stream_expression.NextTree());
				DebugLocation(203, 72);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:203:72: ( orderby_direction )?
				if (stream_orderby_direction.HasNext)
				{
					DebugLocation(203, 72);
					adaptor.AddChild(root_1, stream_orderby_direction.NextTree());

				}
				stream_orderby_direction.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_column", 22);
			LeaveRule("orderby_column", 22);
			LeaveRule_orderby_column();
	    }
	 	DebugLocation(204, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_column"); }
		return retval;

	}
	// $ANTLR end "orderby_column"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_direction() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_direction() {}

	// $ANTLR start "orderby_direction"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:206:1: orderby_direction : ( ASC -> T_ORDERBY_ASC | DESC -> T_ORDERBY_DESC | ORIG -> T_ORDERBY_ORIG );
	[GrammarRule("orderby_direction")]
	private AstParserRuleReturnScope<object, IToken> orderby_direction()
	{
		EnterRule_orderby_direction();
		EnterRule("orderby_direction", 23);
		TraceIn("orderby_direction", 23);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken ASC109 = default(IToken);
	    IToken DESC110 = default(IToken);
	    IToken ORIG111 = default(IToken);

	    object ASC109_tree = default(object);
	    object DESC110_tree = default(object);
	    object ORIG111_tree = default(object);
	    RewriteRuleITokenStream stream_DESC=new RewriteRuleITokenStream(adaptor,"token DESC");
	    RewriteRuleITokenStream stream_ASC=new RewriteRuleITokenStream(adaptor,"token ASC");
	    RewriteRuleITokenStream stream_ORIG=new RewriteRuleITokenStream(adaptor,"token ORIG");

		try { DebugEnterRule(GrammarFileName, "orderby_direction");
		DebugLocation(206, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:207:2: ( ASC -> T_ORDERBY_ASC | DESC -> T_ORDERBY_DESC | ORIG -> T_ORDERBY_ORIG )
			int alt43=3;
			try { DebugEnterDecision(43, decisionCanBacktrack[43]);
			switch (input.LA(1))
			{
			case ASC:
				{
				alt43 = 1;
				}
				break;
			case DESC:
				{
				alt43 = 2;
				}
				break;
			case ORIG:
				{
				alt43 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 43, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(43); }
			switch (alt43)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:207:4: ASC
				{
				DebugLocation(207, 4);
				ASC109=(IToken)Match(input,ASC,Follow._ASC_in_orderby_direction1090);  
				stream_ASC.Add(ASC109);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 207:8: -> T_ORDERBY_ASC
				{
					DebugLocation(207, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_ORDERBY_ASC, "T_ORDERBY_ASC"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:208:4: DESC
				{
				DebugLocation(208, 4);
				DESC110=(IToken)Match(input,DESC,Follow._DESC_in_orderby_direction1099);  
				stream_DESC.Add(DESC110);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 208:9: -> T_ORDERBY_DESC
				{
					DebugLocation(208, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_ORDERBY_DESC, "T_ORDERBY_DESC"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:209:4: ORIG
				{
				DebugLocation(209, 4);
				ORIG111=(IToken)Match(input,ORIG,Follow._ORIG_in_orderby_direction1108);  
				stream_ORIG.Add(ORIG111);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 209:9: -> T_ORDERBY_ORIG
				{
					DebugLocation(209, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_ORDERBY_ORIG, "T_ORDERBY_ORIG"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_direction", 23);
			LeaveRule("orderby_direction", 23);
			LeaveRule_orderby_direction();
	    }
	 	DebugLocation(210, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_direction"); }
		return retval;

	}
	// $ANTLR end "orderby_direction"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_use_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_use_command() {}

	// $ANTLR start "use_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:215:1: use_command : USE WS file -> ^( T_USE file ) ;
	[GrammarRule("use_command")]
	private AstParserRuleReturnScope<object, IToken> use_command()
	{
		EnterRule_use_command();
		EnterRule("use_command", 24);
		TraceIn("use_command", 24);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken USE112 = default(IToken);
	    IToken WS113 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file114 = default(AstParserRuleReturnScope<object, IToken>);

	    object USE112_tree = default(object);
	    object WS113_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_USE=new RewriteRuleITokenStream(adaptor,"token USE");
	    RewriteRuleSubtreeStream stream_file=new RewriteRuleSubtreeStream(adaptor,"rule file");
		try { DebugEnterRule(GrammarFileName, "use_command");
		DebugLocation(215, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:216:2: ( USE WS file -> ^( T_USE file ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:216:4: USE WS file
			{
			DebugLocation(216, 4);
			USE112=(IToken)Match(input,USE,Follow._USE_in_use_command1126);  
			stream_USE.Add(USE112);

			DebugLocation(216, 8);
			WS113=(IToken)Match(input,WS,Follow._WS_in_use_command1128);  
			stream_WS.Add(WS113);

			DebugLocation(216, 11);
			PushFollow(Follow._file_in_use_command1130);
			file114=file();
			PopFollow();

			stream_file.Add(file114.Tree);


			{
			// AST REWRITE
			// elements: file
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 216:16: -> ^( T_USE file )
			{
				DebugLocation(216, 19);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:216:19: ^( T_USE file )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(216, 21);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_USE, "T_USE"), root_1);

				DebugLocation(216, 27);
				adaptor.AddChild(root_1, stream_file.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("use_command", 24);
			LeaveRule("use_command", 24);
			LeaveRule_use_command();
	    }
	 	DebugLocation(217, 1);
		} finally { DebugExitRule(GrammarFileName, "use_command"); }
		return retval;

	}
	// $ANTLR end "use_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_declare_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_declare_command() {}

	// $ANTLR start "declare_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:222:1: declare_command : DECLARE WS declaration_list -> declaration_list ;
	[GrammarRule("declare_command")]
	private AstParserRuleReturnScope<object, IToken> declare_command()
	{
		EnterRule_declare_command();
		EnterRule("declare_command", 25);
		TraceIn("declare_command", 25);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken DECLARE115 = default(IToken);
	    IToken WS116 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> declaration_list117 = default(AstParserRuleReturnScope<object, IToken>);

	    object DECLARE115_tree = default(object);
	    object WS116_tree = default(object);
	    RewriteRuleITokenStream stream_DECLARE=new RewriteRuleITokenStream(adaptor,"token DECLARE");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_declaration_list=new RewriteRuleSubtreeStream(adaptor,"rule declaration_list");
		try { DebugEnterRule(GrammarFileName, "declare_command");
		DebugLocation(222, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:223:2: ( DECLARE WS declaration_list -> declaration_list )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:223:4: DECLARE WS declaration_list
			{
			DebugLocation(223, 4);
			DECLARE115=(IToken)Match(input,DECLARE,Follow._DECLARE_in_declare_command1152);  
			stream_DECLARE.Add(DECLARE115);

			DebugLocation(223, 12);
			WS116=(IToken)Match(input,WS,Follow._WS_in_declare_command1154);  
			stream_WS.Add(WS116);

			DebugLocation(223, 15);
			PushFollow(Follow._declaration_list_in_declare_command1156);
			declaration_list117=declaration_list();
			PopFollow();

			stream_declaration_list.Add(declaration_list117.Tree);


			{
			// AST REWRITE
			// elements: declaration_list
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 223:32: -> declaration_list
			{
				DebugLocation(223, 35);
				adaptor.AddChild(root_0, stream_declaration_list.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declare_command", 25);
			LeaveRule("declare_command", 25);
			LeaveRule_declare_command();
	    }
	 	DebugLocation(224, 1);
		} finally { DebugExitRule(GrammarFileName, "declare_command"); }
		return retval;

	}
	// $ANTLR end "declare_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_declaration_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_declaration_list() {}

	// $ANTLR start "declaration_list"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:226:1: declaration_list : declaration ( ( WS )? ',' ( WS )? declaration )* -> ^( T_DECLARE ( declaration )+ ) ;
	[GrammarRule("declaration_list")]
	private AstParserRuleReturnScope<object, IToken> declaration_list()
	{
		EnterRule_declaration_list();
		EnterRule("declaration_list", 26);
		TraceIn("declaration_list", 26);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS119 = default(IToken);
	    IToken char_literal120 = default(IToken);
	    IToken WS121 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> declaration118 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> declaration122 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS119_tree = default(object);
	    object char_literal120_tree = default(object);
	    object WS121_tree = default(object);
	    RewriteRuleITokenStream stream_151=new RewriteRuleITokenStream(adaptor,"token 151");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_declaration=new RewriteRuleSubtreeStream(adaptor,"rule declaration");
		try { DebugEnterRule(GrammarFileName, "declaration_list");
		DebugLocation(226, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:227:2: ( declaration ( ( WS )? ',' ( WS )? declaration )* -> ^( T_DECLARE ( declaration )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:227:4: declaration ( ( WS )? ',' ( WS )? declaration )*
			{
			DebugLocation(227, 4);
			PushFollow(Follow._declaration_in_declaration_list1173);
			declaration118=declaration();
			PopFollow();

			stream_declaration.Add(declaration118.Tree);
			DebugLocation(227, 16);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:227:16: ( ( WS )? ',' ( WS )? declaration )*
			try { DebugEnterSubRule(46);
			while (true)
			{
				int alt46=2;
				try { DebugEnterDecision(46, decisionCanBacktrack[46]);
				int LA46_0 = input.LA(1);

				if ((LA46_0==WS))
				{
					int LA46_1 = input.LA(2);

					if ((LA46_1==151))
					{
						alt46 = 1;
					}


				}
				else if ((LA46_0==151))
				{
					alt46 = 1;
				}


				} finally { DebugExitDecision(46); }
				switch ( alt46 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:227:17: ( WS )? ',' ( WS )? declaration
					{
					DebugLocation(227, 17);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:227:17: ( WS )?
					int alt44=2;
					try { DebugEnterSubRule(44);
					try { DebugEnterDecision(44, decisionCanBacktrack[44]);
					int LA44_0 = input.LA(1);

					if ((LA44_0==WS))
					{
						alt44 = 1;
					}
					} finally { DebugExitDecision(44); }
					switch (alt44)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:227:17: WS
						{
						DebugLocation(227, 17);
						WS119=(IToken)Match(input,WS,Follow._WS_in_declaration_list1176);  
						stream_WS.Add(WS119);


						}
						break;

					}
					} finally { DebugExitSubRule(44); }

					DebugLocation(227, 21);
					char_literal120=(IToken)Match(input,151,Follow._151_in_declaration_list1179);  
					stream_151.Add(char_literal120);

					DebugLocation(227, 25);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:227:25: ( WS )?
					int alt45=2;
					try { DebugEnterSubRule(45);
					try { DebugEnterDecision(45, decisionCanBacktrack[45]);
					int LA45_0 = input.LA(1);

					if ((LA45_0==WS))
					{
						alt45 = 1;
					}
					} finally { DebugExitDecision(45); }
					switch (alt45)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:227:25: WS
						{
						DebugLocation(227, 25);
						WS121=(IToken)Match(input,WS,Follow._WS_in_declaration_list1181);  
						stream_WS.Add(WS121);


						}
						break;

					}
					} finally { DebugExitSubRule(45); }

					DebugLocation(227, 29);
					PushFollow(Follow._declaration_in_declaration_list1184);
					declaration122=declaration();
					PopFollow();

					stream_declaration.Add(declaration122.Tree);

					}
					break;

				default:
					goto loop46;
				}
			}

			loop46:
				;

			} finally { DebugExitSubRule(46); }



			{
			// AST REWRITE
			// elements: declaration
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 228:2: -> ^( T_DECLARE ( declaration )+ )
			{
				DebugLocation(228, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:228:5: ^( T_DECLARE ( declaration )+ )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(228, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_DECLARE, "T_DECLARE"), root_1);

				DebugLocation(228, 17);
				if (!(stream_declaration.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_declaration.HasNext )
				{
					DebugLocation(228, 17);
					adaptor.AddChild(root_1, stream_declaration.NextTree());

				}
				stream_declaration.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declaration_list", 26);
			LeaveRule("declaration_list", 26);
			LeaveRule_declaration_list();
	    }
	 	DebugLocation(229, 1);
		} finally { DebugExitRule(GrammarFileName, "declaration_list"); }
		return retval;

	}
	// $ANTLR end "declaration_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_declaration() {}

	// $ANTLR start "declaration"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:231:1: declaration : variable WS ( AS WS )? datatype -> ^( T_DECLARATION variable datatype ) ;
	[GrammarRule("declaration")]
	private AstParserRuleReturnScope<object, IToken> declaration()
	{
		EnterRule_declaration();
		EnterRule("declaration", 27);
		TraceIn("declaration", 27);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS124 = default(IToken);
	    IToken AS125 = default(IToken);
	    IToken WS126 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> variable123 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> datatype127 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS124_tree = default(object);
	    object AS125_tree = default(object);
	    object WS126_tree = default(object);
	    RewriteRuleITokenStream stream_AS=new RewriteRuleITokenStream(adaptor,"token AS");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_datatype=new RewriteRuleSubtreeStream(adaptor,"rule datatype");
	    RewriteRuleSubtreeStream stream_variable=new RewriteRuleSubtreeStream(adaptor,"rule variable");
		try { DebugEnterRule(GrammarFileName, "declaration");
		DebugLocation(231, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:232:2: ( variable WS ( AS WS )? datatype -> ^( T_DECLARATION variable datatype ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:232:4: variable WS ( AS WS )? datatype
			{
			DebugLocation(232, 4);
			PushFollow(Follow._variable_in_declaration1208);
			variable123=variable();
			PopFollow();

			stream_variable.Add(variable123.Tree);
			DebugLocation(232, 13);
			WS124=(IToken)Match(input,WS,Follow._WS_in_declaration1210);  
			stream_WS.Add(WS124);

			DebugLocation(232, 16);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:232:16: ( AS WS )?
			int alt47=2;
			try { DebugEnterSubRule(47);
			try { DebugEnterDecision(47, decisionCanBacktrack[47]);
			int LA47_0 = input.LA(1);

			if ((LA47_0==AS))
			{
				alt47 = 1;
			}
			} finally { DebugExitDecision(47); }
			switch (alt47)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:232:17: AS WS
				{
				DebugLocation(232, 17);
				AS125=(IToken)Match(input,AS,Follow._AS_in_declaration1213);  
				stream_AS.Add(AS125);

				DebugLocation(232, 20);
				WS126=(IToken)Match(input,WS,Follow._WS_in_declaration1215);  
				stream_WS.Add(WS126);


				}
				break;

			}
			} finally { DebugExitSubRule(47); }

			DebugLocation(232, 25);
			PushFollow(Follow._datatype_in_declaration1219);
			datatype127=datatype();
			PopFollow();

			stream_datatype.Add(datatype127.Tree);


			{
			// AST REWRITE
			// elements: variable, datatype
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 233:2: -> ^( T_DECLARATION variable datatype )
			{
				DebugLocation(233, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:233:5: ^( T_DECLARATION variable datatype )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(233, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_DECLARATION, "T_DECLARATION"), root_1);

				DebugLocation(233, 21);
				adaptor.AddChild(root_1, stream_variable.NextTree());
				DebugLocation(233, 30);
				adaptor.AddChild(root_1, stream_datatype.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declaration", 27);
			LeaveRule("declaration", 27);
			LeaveRule_declaration();
	    }
	 	DebugLocation(234, 1);
		} finally { DebugExitRule(GrammarFileName, "declaration"); }
		return retval;

	}
	// $ANTLR end "declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_create_view_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_create_view_command() {}

	// $ANTLR start "create_view_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:239:1: create_view_command : CREATE WS VIEW WS view_name ( ( WS )? '(' declaration_list ')' )? WS AS WS select_command -> ^( T_CREATE_VIEW view_name ( declaration_list )? select_command ) ;
	[GrammarRule("create_view_command")]
	private AstParserRuleReturnScope<object, IToken> create_view_command()
	{
		EnterRule_create_view_command();
		EnterRule("create_view_command", 28);
		TraceIn("create_view_command", 28);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken CREATE128 = default(IToken);
	    IToken WS129 = default(IToken);
	    IToken VIEW130 = default(IToken);
	    IToken WS131 = default(IToken);
	    IToken WS133 = default(IToken);
	    IToken char_literal134 = default(IToken);
	    IToken char_literal136 = default(IToken);
	    IToken WS137 = default(IToken);
	    IToken AS138 = default(IToken);
	    IToken WS139 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> view_name132 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> declaration_list135 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> select_command140 = default(AstParserRuleReturnScope<object, IToken>);

	    object CREATE128_tree = default(object);
	    object WS129_tree = default(object);
	    object VIEW130_tree = default(object);
	    object WS131_tree = default(object);
	    object WS133_tree = default(object);
	    object char_literal134_tree = default(object);
	    object char_literal136_tree = default(object);
	    object WS137_tree = default(object);
	    object AS138_tree = default(object);
	    object WS139_tree = default(object);
	    RewriteRuleITokenStream stream_AS=new RewriteRuleITokenStream(adaptor,"token AS");
	    RewriteRuleITokenStream stream_CREATE=new RewriteRuleITokenStream(adaptor,"token CREATE");
	    RewriteRuleITokenStream stream_147=new RewriteRuleITokenStream(adaptor,"token 147");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_148=new RewriteRuleITokenStream(adaptor,"token 148");
	    RewriteRuleITokenStream stream_VIEW=new RewriteRuleITokenStream(adaptor,"token VIEW");
	    RewriteRuleSubtreeStream stream_view_name=new RewriteRuleSubtreeStream(adaptor,"rule view_name");
	    RewriteRuleSubtreeStream stream_select_command=new RewriteRuleSubtreeStream(adaptor,"rule select_command");
	    RewriteRuleSubtreeStream stream_declaration_list=new RewriteRuleSubtreeStream(adaptor,"rule declaration_list");
		try { DebugEnterRule(GrammarFileName, "create_view_command");
		DebugLocation(239, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:240:2: ( CREATE WS VIEW WS view_name ( ( WS )? '(' declaration_list ')' )? WS AS WS select_command -> ^( T_CREATE_VIEW view_name ( declaration_list )? select_command ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:240:4: CREATE WS VIEW WS view_name ( ( WS )? '(' declaration_list ')' )? WS AS WS select_command
			{
			DebugLocation(240, 4);
			CREATE128=(IToken)Match(input,CREATE,Follow._CREATE_in_create_view_command1244);  
			stream_CREATE.Add(CREATE128);

			DebugLocation(240, 11);
			WS129=(IToken)Match(input,WS,Follow._WS_in_create_view_command1246);  
			stream_WS.Add(WS129);

			DebugLocation(240, 14);
			VIEW130=(IToken)Match(input,VIEW,Follow._VIEW_in_create_view_command1248);  
			stream_VIEW.Add(VIEW130);

			DebugLocation(240, 19);
			WS131=(IToken)Match(input,WS,Follow._WS_in_create_view_command1250);  
			stream_WS.Add(WS131);

			DebugLocation(240, 22);
			PushFollow(Follow._view_name_in_create_view_command1252);
			view_name132=view_name();
			PopFollow();

			stream_view_name.Add(view_name132.Tree);
			DebugLocation(240, 32);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:240:32: ( ( WS )? '(' declaration_list ')' )?
			int alt49=2;
			try { DebugEnterSubRule(49);
			try { DebugEnterDecision(49, decisionCanBacktrack[49]);
			int LA49_0 = input.LA(1);

			if ((LA49_0==WS))
			{
				int LA49_1 = input.LA(2);

				if ((LA49_1==147))
				{
					alt49 = 1;
				}
			}
			else if ((LA49_0==147))
			{
				alt49 = 1;
			}
			} finally { DebugExitDecision(49); }
			switch (alt49)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:240:33: ( WS )? '(' declaration_list ')'
				{
				DebugLocation(240, 33);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:240:33: ( WS )?
				int alt48=2;
				try { DebugEnterSubRule(48);
				try { DebugEnterDecision(48, decisionCanBacktrack[48]);
				int LA48_0 = input.LA(1);

				if ((LA48_0==WS))
				{
					alt48 = 1;
				}
				} finally { DebugExitDecision(48); }
				switch (alt48)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:240:33: WS
					{
					DebugLocation(240, 33);
					WS133=(IToken)Match(input,WS,Follow._WS_in_create_view_command1255);  
					stream_WS.Add(WS133);


					}
					break;

				}
				} finally { DebugExitSubRule(48); }

				DebugLocation(240, 37);
				char_literal134=(IToken)Match(input,147,Follow._147_in_create_view_command1258);  
				stream_147.Add(char_literal134);

				DebugLocation(240, 41);
				PushFollow(Follow._declaration_list_in_create_view_command1260);
				declaration_list135=declaration_list();
				PopFollow();

				stream_declaration_list.Add(declaration_list135.Tree);
				DebugLocation(240, 58);
				char_literal136=(IToken)Match(input,148,Follow._148_in_create_view_command1262);  
				stream_148.Add(char_literal136);


				}
				break;

			}
			} finally { DebugExitSubRule(49); }

			DebugLocation(240, 64);
			WS137=(IToken)Match(input,WS,Follow._WS_in_create_view_command1266);  
			stream_WS.Add(WS137);

			DebugLocation(240, 67);
			AS138=(IToken)Match(input,AS,Follow._AS_in_create_view_command1268);  
			stream_AS.Add(AS138);

			DebugLocation(240, 70);
			WS139=(IToken)Match(input,WS,Follow._WS_in_create_view_command1270);  
			stream_WS.Add(WS139);

			DebugLocation(240, 73);
			PushFollow(Follow._select_command_in_create_view_command1272);
			select_command140=select_command();
			PopFollow();

			stream_select_command.Add(select_command140.Tree);


			{
			// AST REWRITE
			// elements: select_command, declaration_list, view_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 241:2: -> ^( T_CREATE_VIEW view_name ( declaration_list )? select_command )
			{
				DebugLocation(241, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:241:5: ^( T_CREATE_VIEW view_name ( declaration_list )? select_command )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(241, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CREATE_VIEW, "T_CREATE_VIEW"), root_1);

				DebugLocation(241, 21);
				adaptor.AddChild(root_1, stream_view_name.NextTree());
				DebugLocation(241, 31);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:241:31: ( declaration_list )?
				if (stream_declaration_list.HasNext)
				{
					DebugLocation(241, 31);
					adaptor.AddChild(root_1, stream_declaration_list.NextTree());

				}
				stream_declaration_list.Reset();
				DebugLocation(241, 49);
				adaptor.AddChild(root_1, stream_select_command.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("create_view_command", 28);
			LeaveRule("create_view_command", 28);
			LeaveRule_create_view_command();
	    }
	 	DebugLocation(242, 1);
		} finally { DebugExitRule(GrammarFileName, "create_view_command"); }
		return retval;

	}
	// $ANTLR end "create_view_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_view_name() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_view_name() {}

	// $ANTLR start "view_name"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:244:1: view_name : TOKEN -> ^( T_VIEW_NAME TOKEN ) ;
	[GrammarRule("view_name")]
	private AstParserRuleReturnScope<object, IToken> view_name()
	{
		EnterRule_view_name();
		EnterRule("view_name", 29);
		TraceIn("view_name", 29);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN141 = default(IToken);

	    object TOKEN141_tree = default(object);
	    RewriteRuleITokenStream stream_TOKEN=new RewriteRuleITokenStream(adaptor,"token TOKEN");

		try { DebugEnterRule(GrammarFileName, "view_name");
		DebugLocation(244, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:245:2: ( TOKEN -> ^( T_VIEW_NAME TOKEN ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:245:4: TOKEN
			{
			DebugLocation(245, 4);
			TOKEN141=(IToken)Match(input,TOKEN,Follow._TOKEN_in_view_name1298);  
			stream_TOKEN.Add(TOKEN141);



			{
			// AST REWRITE
			// elements: TOKEN
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 245:10: -> ^( T_VIEW_NAME TOKEN )
			{
				DebugLocation(245, 13);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:245:13: ^( T_VIEW_NAME TOKEN )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(245, 15);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_VIEW_NAME, "T_VIEW_NAME"), root_1);

				DebugLocation(245, 27);
				adaptor.AddChild(root_1, stream_TOKEN.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("view_name", 29);
			LeaveRule("view_name", 29);
			LeaveRule_view_name();
	    }
	 	DebugLocation(246, 1);
		} finally { DebugExitRule(GrammarFileName, "view_name"); }
		return retval;

	}
	// $ANTLR end "view_name"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_set_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_set_command() {}

	// $ANTLR start "set_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:252:1: set_command : SET WS variable ( WS )? '=' ( WS )? expression -> ^( T_SET_VARIABLE variable expression ) ;
	[GrammarRule("set_command")]
	private AstParserRuleReturnScope<object, IToken> set_command()
	{
		EnterRule_set_command();
		EnterRule("set_command", 30);
		TraceIn("set_command", 30);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken SET142 = default(IToken);
	    IToken WS143 = default(IToken);
	    IToken WS145 = default(IToken);
	    IToken char_literal146 = default(IToken);
	    IToken WS147 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> variable144 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression148 = default(AstParserRuleReturnScope<object, IToken>);

	    object SET142_tree = default(object);
	    object WS143_tree = default(object);
	    object WS145_tree = default(object);
	    object char_literal146_tree = default(object);
	    object WS147_tree = default(object);
	    RewriteRuleITokenStream stream_SET=new RewriteRuleITokenStream(adaptor,"token SET");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_158=new RewriteRuleITokenStream(adaptor,"token 158");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_variable=new RewriteRuleSubtreeStream(adaptor,"rule variable");
		try { DebugEnterRule(GrammarFileName, "set_command");
		DebugLocation(252, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:253:2: ( SET WS variable ( WS )? '=' ( WS )? expression -> ^( T_SET_VARIABLE variable expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:253:4: SET WS variable ( WS )? '=' ( WS )? expression
			{
			DebugLocation(253, 4);
			SET142=(IToken)Match(input,SET,Follow._SET_in_set_command1322);  
			stream_SET.Add(SET142);

			DebugLocation(253, 8);
			WS143=(IToken)Match(input,WS,Follow._WS_in_set_command1324);  
			stream_WS.Add(WS143);

			DebugLocation(253, 11);
			PushFollow(Follow._variable_in_set_command1326);
			variable144=variable();
			PopFollow();

			stream_variable.Add(variable144.Tree);
			DebugLocation(253, 20);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:253:20: ( WS )?
			int alt50=2;
			try { DebugEnterSubRule(50);
			try { DebugEnterDecision(50, decisionCanBacktrack[50]);
			int LA50_0 = input.LA(1);

			if ((LA50_0==WS))
			{
				alt50 = 1;
			}
			} finally { DebugExitDecision(50); }
			switch (alt50)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:253:20: WS
				{
				DebugLocation(253, 20);
				WS145=(IToken)Match(input,WS,Follow._WS_in_set_command1328);  
				stream_WS.Add(WS145);


				}
				break;

			}
			} finally { DebugExitSubRule(50); }

			DebugLocation(253, 24);
			char_literal146=(IToken)Match(input,158,Follow._158_in_set_command1331);  
			stream_158.Add(char_literal146);

			DebugLocation(253, 28);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:253:28: ( WS )?
			int alt51=2;
			try { DebugEnterSubRule(51);
			try { DebugEnterDecision(51, decisionCanBacktrack[51]);
			int LA51_0 = input.LA(1);

			if ((LA51_0==WS))
			{
				alt51 = 1;
			}
			} finally { DebugExitDecision(51); }
			switch (alt51)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:253:28: WS
				{
				DebugLocation(253, 28);
				WS147=(IToken)Match(input,WS,Follow._WS_in_set_command1333);  
				stream_WS.Add(WS147);


				}
				break;

			}
			} finally { DebugExitSubRule(51); }

			DebugLocation(253, 32);
			PushFollow(Follow._expression_in_set_command1336);
			expression148=expression();
			PopFollow();

			stream_expression.Add(expression148.Tree);


			{
			// AST REWRITE
			// elements: expression, variable
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 254:2: -> ^( T_SET_VARIABLE variable expression )
			{
				DebugLocation(254, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:254:5: ^( T_SET_VARIABLE variable expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(254, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SET_VARIABLE, "T_SET_VARIABLE"), root_1);

				DebugLocation(254, 22);
				adaptor.AddChild(root_1, stream_variable.NextTree());
				DebugLocation(254, 31);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("set_command", 30);
			LeaveRule("set_command", 30);
			LeaveRule_set_command();
	    }
	 	DebugLocation(255, 1);
		} finally { DebugExitRule(GrammarFileName, "set_command"); }
		return retval;

	}
	// $ANTLR end "set_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_list() {}

	// $ANTLR start "expression_list"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:260:1: expression_list : expression ( ( WS )? ',' ( WS )? expression )* -> ^( T_EXPRESSIONLIST ( expression )+ ) ;
	[GrammarRule("expression_list")]
	private AstParserRuleReturnScope<object, IToken> expression_list()
	{
		EnterRule_expression_list();
		EnterRule("expression_list", 31);
		TraceIn("expression_list", 31);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS150 = default(IToken);
	    IToken char_literal151 = default(IToken);
	    IToken WS152 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression149 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression153 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS150_tree = default(object);
	    object char_literal151_tree = default(object);
	    object WS152_tree = default(object);
	    RewriteRuleITokenStream stream_151=new RewriteRuleITokenStream(adaptor,"token 151");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "expression_list");
		DebugLocation(260, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:261:2: ( expression ( ( WS )? ',' ( WS )? expression )* -> ^( T_EXPRESSIONLIST ( expression )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:261:4: expression ( ( WS )? ',' ( WS )? expression )*
			{
			DebugLocation(261, 4);
			PushFollow(Follow._expression_in_expression_list1361);
			expression149=expression();
			PopFollow();

			stream_expression.Add(expression149.Tree);
			DebugLocation(261, 15);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:261:15: ( ( WS )? ',' ( WS )? expression )*
			try { DebugEnterSubRule(54);
			while (true)
			{
				int alt54=2;
				try { DebugEnterDecision(54, decisionCanBacktrack[54]);
				int LA54_0 = input.LA(1);

				if ((LA54_0==WS))
				{
					int LA54_1 = input.LA(2);

					if ((LA54_1==151))
					{
						alt54 = 1;
					}


				}
				else if ((LA54_0==151))
				{
					alt54 = 1;
				}


				} finally { DebugExitDecision(54); }
				switch ( alt54 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:261:16: ( WS )? ',' ( WS )? expression
					{
					DebugLocation(261, 16);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:261:16: ( WS )?
					int alt52=2;
					try { DebugEnterSubRule(52);
					try { DebugEnterDecision(52, decisionCanBacktrack[52]);
					int LA52_0 = input.LA(1);

					if ((LA52_0==WS))
					{
						alt52 = 1;
					}
					} finally { DebugExitDecision(52); }
					switch (alt52)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:261:16: WS
						{
						DebugLocation(261, 16);
						WS150=(IToken)Match(input,WS,Follow._WS_in_expression_list1364);  
						stream_WS.Add(WS150);


						}
						break;

					}
					} finally { DebugExitSubRule(52); }

					DebugLocation(261, 20);
					char_literal151=(IToken)Match(input,151,Follow._151_in_expression_list1367);  
					stream_151.Add(char_literal151);

					DebugLocation(261, 24);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:261:24: ( WS )?
					int alt53=2;
					try { DebugEnterSubRule(53);
					try { DebugEnterDecision(53, decisionCanBacktrack[53]);
					int LA53_0 = input.LA(1);

					if ((LA53_0==WS))
					{
						alt53 = 1;
					}
					} finally { DebugExitDecision(53); }
					switch (alt53)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:261:24: WS
						{
						DebugLocation(261, 24);
						WS152=(IToken)Match(input,WS,Follow._WS_in_expression_list1369);  
						stream_WS.Add(WS152);


						}
						break;

					}
					} finally { DebugExitSubRule(53); }

					DebugLocation(261, 28);
					PushFollow(Follow._expression_in_expression_list1372);
					expression153=expression();
					PopFollow();

					stream_expression.Add(expression153.Tree);

					}
					break;

				default:
					goto loop54;
				}
			}

			loop54:
				;

			} finally { DebugExitSubRule(54); }



			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 261:41: -> ^( T_EXPRESSIONLIST ( expression )+ )
			{
				DebugLocation(261, 44);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:261:44: ^( T_EXPRESSIONLIST ( expression )+ )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(261, 46);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_EXPRESSIONLIST, "T_EXPRESSIONLIST"), root_1);

				DebugLocation(261, 63);
				if (!(stream_expression.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_expression.HasNext )
				{
					DebugLocation(261, 63);
					adaptor.AddChild(root_1, stream_expression.NextTree());

				}
				stream_expression.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_list", 31);
			LeaveRule("expression_list", 31);
			LeaveRule_expression_list();
	    }
	 	DebugLocation(262, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_list"); }
		return retval;

	}
	// $ANTLR end "expression_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_list_or_select_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_list_or_select_command() {}

	// $ANTLR start "expression_list_or_select_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:264:1: expression_list_or_select_command : ( expression_list | select_command );
	[GrammarRule("expression_list_or_select_command")]
	private AstParserRuleReturnScope<object, IToken> expression_list_or_select_command()
	{
		EnterRule_expression_list_or_select_command();
		EnterRule("expression_list_or_select_command", 32);
		TraceIn("expression_list_or_select_command", 32);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> expression_list154 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> select_command155 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "expression_list_or_select_command");
		DebugLocation(264, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:265:2: ( expression_list | select_command )
			int alt55=2;
			try { DebugEnterDecision(55, decisionCanBacktrack[55]);
			int LA55_0 = input.LA(1);

			if (((LA55_0>=CASE && LA55_0<=CAST)||LA55_0==CONVERT||LA55_0==EXISTS||(LA55_0>=NOT && LA55_0<=NUMBER)||LA55_0==SIMPLE_FILE||(LA55_0>=STRING && LA55_0<=SYSTEMVAR)||LA55_0==TOKEN||LA55_0==VARIABLE||LA55_0==147))
			{
				alt55 = 1;
			}
			else if ((LA55_0==SELECT))
			{
				alt55 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 55, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(55); }
			switch (alt55)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:265:4: expression_list
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(265, 4);
				PushFollow(Follow._expression_list_in_expression_list_or_select_command1395);
				expression_list154=expression_list();
				PopFollow();

				adaptor.AddChild(root_0, expression_list154.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:265:22: select_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(265, 22);
				PushFollow(Follow._select_command_in_expression_list_or_select_command1399);
				select_command155=select_command();
				PopFollow();

				adaptor.AddChild(root_0, select_command155.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_list_or_select_command", 32);
			LeaveRule("expression_list_or_select_command", 32);
			LeaveRule_expression_list_or_select_command();
	    }
	 	DebugLocation(266, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_list_or_select_command"); }
		return retval;

	}
	// $ANTLR end "expression_list_or_select_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression() {}

	// $ANTLR start "expression"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:268:1: expression : expression_7 ;
	[GrammarRule("expression")]
	private AstParserRuleReturnScope<object, IToken> expression()
	{
		EnterRule_expression();
		EnterRule("expression", 33);
		TraceIn("expression", 33);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> expression_7156 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(268, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:269:2: ( expression_7 )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:269:4: expression_7
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(269, 4);
			PushFollow(Follow._expression_7_in_expression1411);
			expression_7156=expression_7();
			PopFollow();

			adaptor.AddChild(root_0, expression_7156.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression", 33);
			LeaveRule("expression", 33);
			LeaveRule_expression();
	    }
	 	DebugLocation(270, 1);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return retval;

	}
	// $ANTLR end "expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_7() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_7() {}

	// $ANTLR start "expression_7"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:272:1: expression_7 : (a= expression_6 -> $a) ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )* ;
	[GrammarRule("expression_7")]
	private AstParserRuleReturnScope<object, IToken> expression_7()
	{
		EnterRule_expression_7();
		EnterRule("expression_7", 34);
		TraceIn("expression_7", 34);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS157 = default(IToken);
	    IToken WS159 = default(IToken);
	    IToken IN160 = default(IToken);
	    IToken WS161 = default(IToken);
	    IToken char_literal162 = default(IToken);
	    IToken WS163 = default(IToken);
	    IToken WS165 = default(IToken);
	    IToken char_literal166 = default(IToken);
	    IToken NOT167 = default(IToken);
	    IToken WS168 = default(IToken);
	    IToken IN169 = default(IToken);
	    IToken WS170 = default(IToken);
	    IToken char_literal171 = default(IToken);
	    IToken WS172 = default(IToken);
	    IToken WS174 = default(IToken);
	    IToken char_literal175 = default(IToken);
	    IToken WS177 = default(IToken);
	    IToken SOME178 = default(IToken);
	    IToken ANY179 = default(IToken);
	    IToken WS180 = default(IToken);
	    IToken char_literal181 = default(IToken);
	    IToken char_literal183 = default(IToken);
	    IToken WS185 = default(IToken);
	    IToken ALL186 = default(IToken);
	    IToken WS187 = default(IToken);
	    IToken char_literal188 = default(IToken);
	    IToken char_literal190 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_7158 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command164 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command173 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_4176 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command182 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_4184 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command189 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS157_tree = default(object);
	    object WS159_tree = default(object);
	    object IN160_tree = default(object);
	    object WS161_tree = default(object);
	    object char_literal162_tree = default(object);
	    object WS163_tree = default(object);
	    object WS165_tree = default(object);
	    object char_literal166_tree = default(object);
	    object NOT167_tree = default(object);
	    object WS168_tree = default(object);
	    object IN169_tree = default(object);
	    object WS170_tree = default(object);
	    object char_literal171_tree = default(object);
	    object WS172_tree = default(object);
	    object WS174_tree = default(object);
	    object char_literal175_tree = default(object);
	    object WS177_tree = default(object);
	    object SOME178_tree = default(object);
	    object ANY179_tree = default(object);
	    object WS180_tree = default(object);
	    object char_literal181_tree = default(object);
	    object char_literal183_tree = default(object);
	    object WS185_tree = default(object);
	    object ALL186_tree = default(object);
	    object WS187_tree = default(object);
	    object char_literal188_tree = default(object);
	    object char_literal190_tree = default(object);
	    RewriteRuleITokenStream stream_147=new RewriteRuleITokenStream(adaptor,"token 147");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_ANY=new RewriteRuleITokenStream(adaptor,"token ANY");
	    RewriteRuleITokenStream stream_148=new RewriteRuleITokenStream(adaptor,"token 148");
	    RewriteRuleITokenStream stream_IN=new RewriteRuleITokenStream(adaptor,"token IN");
	    RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");
	    RewriteRuleITokenStream stream_SOME=new RewriteRuleITokenStream(adaptor,"token SOME");
	    RewriteRuleITokenStream stream_ALL=new RewriteRuleITokenStream(adaptor,"token ALL");
	    RewriteRuleSubtreeStream stream_op_7=new RewriteRuleSubtreeStream(adaptor,"rule op_7");
	    RewriteRuleSubtreeStream stream_expression_6=new RewriteRuleSubtreeStream(adaptor,"rule expression_6");
	    RewriteRuleSubtreeStream stream_expression_list_or_select_command=new RewriteRuleSubtreeStream(adaptor,"rule expression_list_or_select_command");
	    RewriteRuleSubtreeStream stream_op_4=new RewriteRuleSubtreeStream(adaptor,"rule op_4");
		try { DebugEnterRule(GrammarFileName, "expression_7");
		DebugLocation(272, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:273:2: ( (a= expression_6 -> $a) ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:273:4: (a= expression_6 -> $a) ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )*
			{
			DebugLocation(273, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:273:4: (a= expression_6 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:273:5: a= expression_6
			{
			DebugLocation(273, 6);
			PushFollow(Follow._expression_6_in_expression_71427);
			a=expression_6();
			PopFollow();

			stream_expression_6.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 273:19: -> $a
			{
				DebugLocation(273, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(273, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:273:25: ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )*
			try { DebugEnterSubRule(68);
			while (true)
			{
				int alt68=2;
				try { DebugEnterDecision(68, decisionCanBacktrack[68]);
				int LA68_0 = input.LA(1);

				if ((LA68_0==WS))
				{
					int LA68_1 = input.LA(2);

					if ((LA68_1==NOT))
					{
						int LA68_3 = input.LA(3);

						if ((LA68_3==WS))
						{
							int LA68_5 = input.LA(4);

							if ((LA68_5==BETWEEN||LA68_5==IN||LA68_5==LIKE||LA68_5==MATCH))
							{
								alt68 = 1;
							}


						}


					}
					else if ((LA68_1==BETWEEN||LA68_1==IN||LA68_1==LIKE||LA68_1==MATCH||LA68_1==OR||(LA68_1>=142 && LA68_1<=144)||(LA68_1>=155 && LA68_1<=160)))
					{
						alt68 = 1;
					}


				}


				} finally { DebugExitDecision(68); }
				switch ( alt68 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:273:26: WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) )
					{
					DebugLocation(273, 26);
					WS157=(IToken)Match(input,WS,Follow._WS_in_expression_71434);  
					stream_WS.Add(WS157);

					DebugLocation(273, 29);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:273:29: ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) )
					int alt67=5;
					try { DebugEnterSubRule(67);
					try { DebugEnterDecision(67, decisionCanBacktrack[67]);
					switch (input.LA(1))
					{
					case BETWEEN:
					case LIKE:
					case MATCH:
					case OR:
						{
						alt67 = 1;
						}
						break;
					case NOT:
						{
						int LA67_2 = input.LA(2);

						if ((LA67_2==WS))
						{
							int LA67_13 = input.LA(3);

							if ((LA67_13==BETWEEN||LA67_13==LIKE||LA67_13==MATCH))
							{
								alt67 = 1;
							}
							else if ((LA67_13==IN))
							{
								alt67 = 3;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 67, 13, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 67, 2, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case IN:
						{
						alt67 = 2;
						}
						break;
					case 158:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA67_14 = input.LA(3);

							if ((LA67_14==ANY||LA67_14==SOME))
							{
								alt67 = 4;
							}
							else if ((LA67_14==ALL))
							{
								alt67 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 67, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt67 = 4;
							}
							break;
						case ALL:
							{
							alt67 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 67, 4, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 160:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA67_14 = input.LA(3);

							if ((LA67_14==ANY||LA67_14==SOME))
							{
								alt67 = 4;
							}
							else if ((LA67_14==ALL))
							{
								alt67 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 67, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt67 = 4;
							}
							break;
						case ALL:
							{
							alt67 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 67, 5, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 156:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA67_14 = input.LA(3);

							if ((LA67_14==ANY||LA67_14==SOME))
							{
								alt67 = 4;
							}
							else if ((LA67_14==ALL))
							{
								alt67 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 67, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt67 = 4;
							}
							break;
						case ALL:
							{
							alt67 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 67, 6, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 157:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA67_14 = input.LA(3);

							if ((LA67_14==ANY||LA67_14==SOME))
							{
								alt67 = 4;
							}
							else if ((LA67_14==ALL))
							{
								alt67 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 67, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt67 = 4;
							}
							break;
						case ALL:
							{
							alt67 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 67, 7, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 143:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA67_14 = input.LA(3);

							if ((LA67_14==ANY||LA67_14==SOME))
							{
								alt67 = 4;
							}
							else if ((LA67_14==ALL))
							{
								alt67 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 67, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt67 = 4;
							}
							break;
						case ALL:
							{
							alt67 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 67, 8, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 144:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA67_14 = input.LA(3);

							if ((LA67_14==ANY||LA67_14==SOME))
							{
								alt67 = 4;
							}
							else if ((LA67_14==ALL))
							{
								alt67 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 67, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt67 = 4;
							}
							break;
						case ALL:
							{
							alt67 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 67, 9, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 142:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA67_14 = input.LA(3);

							if ((LA67_14==ANY||LA67_14==SOME))
							{
								alt67 = 4;
							}
							else if ((LA67_14==ALL))
							{
								alt67 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 67, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt67 = 4;
							}
							break;
						case ALL:
							{
							alt67 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 67, 10, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 159:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA67_14 = input.LA(3);

							if ((LA67_14==ANY||LA67_14==SOME))
							{
								alt67 = 4;
							}
							else if ((LA67_14==ALL))
							{
								alt67 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 67, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt67 = 4;
							}
							break;
						case ALL:
							{
							alt67 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 67, 11, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 155:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA67_14 = input.LA(3);

							if ((LA67_14==ANY||LA67_14==SOME))
							{
								alt67 = 4;
							}
							else if ((LA67_14==ALL))
							{
								alt67 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 67, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt67 = 4;
							}
							break;
						case ALL:
							{
							alt67 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 67, 12, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 67, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(67); }
					switch (alt67)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:274:2: op_7 WS b= expression_6
						{
						DebugLocation(274, 2);
						PushFollow(Follow._op_7_in_expression_71439);
						op_7158=op_7();
						PopFollow();

						stream_op_7.Add(op_7158.Tree);
						DebugLocation(274, 7);
						WS159=(IToken)Match(input,WS,Follow._WS_in_expression_71441);  
						stream_WS.Add(WS159);

						DebugLocation(274, 11);
						PushFollow(Follow._expression_6_in_expression_71445);
						b=expression_6();
						PopFollow();

						stream_expression_6.Add(b.Tree);


						{
						// AST REWRITE
						// elements: b, op_7, expression_7
						// token labels: 
						// rule labels: retval, b
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 274:25: -> ^( T_OP_BINARY op_7 $expression_7 $b)
						{
							DebugLocation(274, 28);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:274:28: ^( T_OP_BINARY op_7 $expression_7 $b)
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(274, 30);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(274, 42);
							adaptor.AddChild(root_1, stream_op_7.NextTree());
							DebugLocation(274, 48);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(274, 62);
							adaptor.AddChild(root_1, stream_b.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:275:4: IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')'
						{
						DebugLocation(275, 4);
						IN160=(IToken)Match(input,IN,Follow._IN_in_expression_71464);  
						stream_IN.Add(IN160);

						DebugLocation(275, 7);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:275:7: ( WS )?
						int alt56=2;
						try { DebugEnterSubRule(56);
						try { DebugEnterDecision(56, decisionCanBacktrack[56]);
						int LA56_0 = input.LA(1);

						if ((LA56_0==WS))
						{
							alt56 = 1;
						}
						} finally { DebugExitDecision(56); }
						switch (alt56)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:275:7: WS
							{
							DebugLocation(275, 7);
							WS161=(IToken)Match(input,WS,Follow._WS_in_expression_71466);  
							stream_WS.Add(WS161);


							}
							break;

						}
						} finally { DebugExitSubRule(56); }

						DebugLocation(275, 11);
						char_literal162=(IToken)Match(input,147,Follow._147_in_expression_71469);  
						stream_147.Add(char_literal162);

						DebugLocation(275, 15);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:275:15: ( WS )?
						int alt57=2;
						try { DebugEnterSubRule(57);
						try { DebugEnterDecision(57, decisionCanBacktrack[57]);
						int LA57_0 = input.LA(1);

						if ((LA57_0==WS))
						{
							alt57 = 1;
						}
						} finally { DebugExitDecision(57); }
						switch (alt57)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:275:15: WS
							{
							DebugLocation(275, 15);
							WS163=(IToken)Match(input,WS,Follow._WS_in_expression_71471);  
							stream_WS.Add(WS163);


							}
							break;

						}
						} finally { DebugExitSubRule(57); }

						DebugLocation(275, 19);
						PushFollow(Follow._expression_list_or_select_command_in_expression_71474);
						expression_list_or_select_command164=expression_list_or_select_command();
						PopFollow();

						stream_expression_list_or_select_command.Add(expression_list_or_select_command164.Tree);
						DebugLocation(275, 53);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:275:53: ( WS )?
						int alt58=2;
						try { DebugEnterSubRule(58);
						try { DebugEnterDecision(58, decisionCanBacktrack[58]);
						int LA58_0 = input.LA(1);

						if ((LA58_0==WS))
						{
							alt58 = 1;
						}
						} finally { DebugExitDecision(58); }
						switch (alt58)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:275:53: WS
							{
							DebugLocation(275, 53);
							WS165=(IToken)Match(input,WS,Follow._WS_in_expression_71476);  
							stream_WS.Add(WS165);


							}
							break;

						}
						} finally { DebugExitSubRule(58); }

						DebugLocation(275, 57);
						char_literal166=(IToken)Match(input,148,Follow._148_in_expression_71479);  
						stream_148.Add(char_literal166);



						{
						// AST REWRITE
						// elements: expression_list_or_select_command, expression_7
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 275:61: -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command )
						{
							DebugLocation(275, 64);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:275:64: ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(275, 66);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(275, 78);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_IN, "T_IN"));
							DebugLocation(275, 84);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(275, 97);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:276:4: NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')'
						{
						DebugLocation(276, 4);
						NOT167=(IToken)Match(input,NOT,Follow._NOT_in_expression_71497);  
						stream_NOT.Add(NOT167);

						DebugLocation(276, 8);
						WS168=(IToken)Match(input,WS,Follow._WS_in_expression_71499);  
						stream_WS.Add(WS168);

						DebugLocation(276, 11);
						IN169=(IToken)Match(input,IN,Follow._IN_in_expression_71501);  
						stream_IN.Add(IN169);

						DebugLocation(276, 14);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:276:14: ( WS )?
						int alt59=2;
						try { DebugEnterSubRule(59);
						try { DebugEnterDecision(59, decisionCanBacktrack[59]);
						int LA59_0 = input.LA(1);

						if ((LA59_0==WS))
						{
							alt59 = 1;
						}
						} finally { DebugExitDecision(59); }
						switch (alt59)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:276:14: WS
							{
							DebugLocation(276, 14);
							WS170=(IToken)Match(input,WS,Follow._WS_in_expression_71503);  
							stream_WS.Add(WS170);


							}
							break;

						}
						} finally { DebugExitSubRule(59); }

						DebugLocation(276, 18);
						char_literal171=(IToken)Match(input,147,Follow._147_in_expression_71506);  
						stream_147.Add(char_literal171);

						DebugLocation(276, 22);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:276:22: ( WS )?
						int alt60=2;
						try { DebugEnterSubRule(60);
						try { DebugEnterDecision(60, decisionCanBacktrack[60]);
						int LA60_0 = input.LA(1);

						if ((LA60_0==WS))
						{
							alt60 = 1;
						}
						} finally { DebugExitDecision(60); }
						switch (alt60)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:276:22: WS
							{
							DebugLocation(276, 22);
							WS172=(IToken)Match(input,WS,Follow._WS_in_expression_71508);  
							stream_WS.Add(WS172);


							}
							break;

						}
						} finally { DebugExitSubRule(60); }

						DebugLocation(276, 26);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:276:26: ( expression_list_or_select_command )
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:276:27: expression_list_or_select_command
						{
						DebugLocation(276, 27);
						PushFollow(Follow._expression_list_or_select_command_in_expression_71512);
						expression_list_or_select_command173=expression_list_or_select_command();
						PopFollow();

						stream_expression_list_or_select_command.Add(expression_list_or_select_command173.Tree);

						}

						DebugLocation(276, 62);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:276:62: ( WS )?
						int alt61=2;
						try { DebugEnterSubRule(61);
						try { DebugEnterDecision(61, decisionCanBacktrack[61]);
						int LA61_0 = input.LA(1);

						if ((LA61_0==WS))
						{
							alt61 = 1;
						}
						} finally { DebugExitDecision(61); }
						switch (alt61)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:276:62: WS
							{
							DebugLocation(276, 62);
							WS174=(IToken)Match(input,WS,Follow._WS_in_expression_71515);  
							stream_WS.Add(WS174);


							}
							break;

						}
						} finally { DebugExitSubRule(61); }

						DebugLocation(276, 66);
						char_literal175=(IToken)Match(input,148,Follow._148_in_expression_71518);  
						stream_148.Add(char_literal175);



						{
						// AST REWRITE
						// elements: expression_7, expression_list_or_select_command
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 276:70: -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command )
						{
							DebugLocation(276, 73);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:276:73: ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(276, 75);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(276, 87);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_NOTIN, "T_NOTIN"));
							DebugLocation(276, 96);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(276, 109);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 4:
						DebugEnterAlt(4);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:277:4: op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')'
						{
						DebugLocation(277, 4);
						PushFollow(Follow._op_4_in_expression_71536);
						op_4176=op_4();
						PopFollow();

						stream_op_4.Add(op_4176.Tree);
						DebugLocation(277, 9);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:277:9: ( WS )?
						int alt62=2;
						try { DebugEnterSubRule(62);
						try { DebugEnterDecision(62, decisionCanBacktrack[62]);
						int LA62_0 = input.LA(1);

						if ((LA62_0==WS))
						{
							alt62 = 1;
						}
						} finally { DebugExitDecision(62); }
						switch (alt62)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:277:9: WS
							{
							DebugLocation(277, 9);
							WS177=(IToken)Match(input,WS,Follow._WS_in_expression_71538);  
							stream_WS.Add(WS177);


							}
							break;

						}
						} finally { DebugExitSubRule(62); }

						DebugLocation(277, 13);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:277:13: ( SOME | ANY )
						int alt63=2;
						try { DebugEnterSubRule(63);
						try { DebugEnterDecision(63, decisionCanBacktrack[63]);
						int LA63_0 = input.LA(1);

						if ((LA63_0==SOME))
						{
							alt63 = 1;
						}
						else if ((LA63_0==ANY))
						{
							alt63 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 63, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						} finally { DebugExitDecision(63); }
						switch (alt63)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:277:14: SOME
							{
							DebugLocation(277, 14);
							SOME178=(IToken)Match(input,SOME,Follow._SOME_in_expression_71542);  
							stream_SOME.Add(SOME178);


							}
							break;
						case 2:
							DebugEnterAlt(2);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:277:21: ANY
							{
							DebugLocation(277, 21);
							ANY179=(IToken)Match(input,ANY,Follow._ANY_in_expression_71546);  
							stream_ANY.Add(ANY179);


							}
							break;

						}
						} finally { DebugExitSubRule(63); }

						DebugLocation(277, 26);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:277:26: ( WS )?
						int alt64=2;
						try { DebugEnterSubRule(64);
						try { DebugEnterDecision(64, decisionCanBacktrack[64]);
						int LA64_0 = input.LA(1);

						if ((LA64_0==WS))
						{
							alt64 = 1;
						}
						} finally { DebugExitDecision(64); }
						switch (alt64)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:277:26: WS
							{
							DebugLocation(277, 26);
							WS180=(IToken)Match(input,WS,Follow._WS_in_expression_71549);  
							stream_WS.Add(WS180);


							}
							break;

						}
						} finally { DebugExitSubRule(64); }

						DebugLocation(277, 30);
						char_literal181=(IToken)Match(input,147,Follow._147_in_expression_71552);  
						stream_147.Add(char_literal181);

						DebugLocation(277, 34);
						PushFollow(Follow._expression_list_or_select_command_in_expression_71554);
						expression_list_or_select_command182=expression_list_or_select_command();
						PopFollow();

						stream_expression_list_or_select_command.Add(expression_list_or_select_command182.Tree);
						DebugLocation(277, 68);
						char_literal183=(IToken)Match(input,148,Follow._148_in_expression_71556);  
						stream_148.Add(char_literal183);



						{
						// AST REWRITE
						// elements: expression_7, op_4, expression_list_or_select_command
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 277:72: -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command )
						{
							DebugLocation(277, 75);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:277:75: ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(277, 77);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(277, 89);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_ANY, "T_ANY"));
							DebugLocation(277, 95);
							adaptor.AddChild(root_1, stream_op_4.NextTree());
							DebugLocation(277, 101);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(277, 114);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 5:
						DebugEnterAlt(5);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:278:4: op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')'
						{
						DebugLocation(278, 4);
						PushFollow(Follow._op_4_in_expression_71576);
						op_4184=op_4();
						PopFollow();

						stream_op_4.Add(op_4184.Tree);
						DebugLocation(278, 9);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:278:9: ( WS )?
						int alt65=2;
						try { DebugEnterSubRule(65);
						try { DebugEnterDecision(65, decisionCanBacktrack[65]);
						int LA65_0 = input.LA(1);

						if ((LA65_0==WS))
						{
							alt65 = 1;
						}
						} finally { DebugExitDecision(65); }
						switch (alt65)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:278:9: WS
							{
							DebugLocation(278, 9);
							WS185=(IToken)Match(input,WS,Follow._WS_in_expression_71578);  
							stream_WS.Add(WS185);


							}
							break;

						}
						} finally { DebugExitSubRule(65); }

						DebugLocation(278, 13);
						ALL186=(IToken)Match(input,ALL,Follow._ALL_in_expression_71581);  
						stream_ALL.Add(ALL186);

						DebugLocation(278, 17);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:278:17: ( WS )?
						int alt66=2;
						try { DebugEnterSubRule(66);
						try { DebugEnterDecision(66, decisionCanBacktrack[66]);
						int LA66_0 = input.LA(1);

						if ((LA66_0==WS))
						{
							alt66 = 1;
						}
						} finally { DebugExitDecision(66); }
						switch (alt66)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:278:17: WS
							{
							DebugLocation(278, 17);
							WS187=(IToken)Match(input,WS,Follow._WS_in_expression_71583);  
							stream_WS.Add(WS187);


							}
							break;

						}
						} finally { DebugExitSubRule(66); }

						DebugLocation(278, 21);
						char_literal188=(IToken)Match(input,147,Follow._147_in_expression_71586);  
						stream_147.Add(char_literal188);

						DebugLocation(278, 25);
						PushFollow(Follow._expression_list_or_select_command_in_expression_71588);
						expression_list_or_select_command189=expression_list_or_select_command();
						PopFollow();

						stream_expression_list_or_select_command.Add(expression_list_or_select_command189.Tree);
						DebugLocation(278, 59);
						char_literal190=(IToken)Match(input,148,Follow._148_in_expression_71590);  
						stream_148.Add(char_literal190);



						{
						// AST REWRITE
						// elements: expression_list_or_select_command, expression_7, op_4
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 278:63: -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command )
						{
							DebugLocation(278, 66);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:278:66: ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(278, 68);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(278, 80);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_ALL, "T_ALL"));
							DebugLocation(278, 86);
							adaptor.AddChild(root_1, stream_op_4.NextTree());
							DebugLocation(278, 92);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(278, 105);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					}
					} finally { DebugExitSubRule(67); }


					}
					break;

				default:
					goto loop68;
				}
			}

			loop68:
				;

			} finally { DebugExitSubRule(68); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_7", 34);
			LeaveRule("expression_7", 34);
			LeaveRule_expression_7();
	    }
	 	DebugLocation(280, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_7"); }
		return retval;

	}
	// $ANTLR end "expression_7"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_7() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_7() {}

	// $ANTLR start "op_7"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:282:1: op_7 : ( OR -> T_OR | LIKE -> T_LIKE | NOT WS LIKE -> T_NOTLIKE | MATCH -> T_MATCH | NOT WS MATCH -> T_NOTMATCH | BETWEEN -> T_BETWEEN | NOT WS BETWEEN -> T_NOTBETWEEN );
	[GrammarRule("op_7")]
	private AstParserRuleReturnScope<object, IToken> op_7()
	{
		EnterRule_op_7();
		EnterRule("op_7", 35);
		TraceIn("op_7", 35);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken OR191 = default(IToken);
	    IToken LIKE192 = default(IToken);
	    IToken NOT193 = default(IToken);
	    IToken WS194 = default(IToken);
	    IToken LIKE195 = default(IToken);
	    IToken MATCH196 = default(IToken);
	    IToken NOT197 = default(IToken);
	    IToken WS198 = default(IToken);
	    IToken MATCH199 = default(IToken);
	    IToken BETWEEN200 = default(IToken);
	    IToken NOT201 = default(IToken);
	    IToken WS202 = default(IToken);
	    IToken BETWEEN203 = default(IToken);

	    object OR191_tree = default(object);
	    object LIKE192_tree = default(object);
	    object NOT193_tree = default(object);
	    object WS194_tree = default(object);
	    object LIKE195_tree = default(object);
	    object MATCH196_tree = default(object);
	    object NOT197_tree = default(object);
	    object WS198_tree = default(object);
	    object MATCH199_tree = default(object);
	    object BETWEEN200_tree = default(object);
	    object NOT201_tree = default(object);
	    object WS202_tree = default(object);
	    object BETWEEN203_tree = default(object);
	    RewriteRuleITokenStream stream_MATCH=new RewriteRuleITokenStream(adaptor,"token MATCH");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");
	    RewriteRuleITokenStream stream_BETWEEN=new RewriteRuleITokenStream(adaptor,"token BETWEEN");
	    RewriteRuleITokenStream stream_LIKE=new RewriteRuleITokenStream(adaptor,"token LIKE");
	    RewriteRuleITokenStream stream_OR=new RewriteRuleITokenStream(adaptor,"token OR");

		try { DebugEnterRule(GrammarFileName, "op_7");
		DebugLocation(282, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:282:6: ( OR -> T_OR | LIKE -> T_LIKE | NOT WS LIKE -> T_NOTLIKE | MATCH -> T_MATCH | NOT WS MATCH -> T_NOTMATCH | BETWEEN -> T_BETWEEN | NOT WS BETWEEN -> T_NOTBETWEEN )
			int alt69=7;
			try { DebugEnterDecision(69, decisionCanBacktrack[69]);
			switch (input.LA(1))
			{
			case OR:
				{
				alt69 = 1;
				}
				break;
			case LIKE:
				{
				alt69 = 2;
				}
				break;
			case NOT:
				{
				int LA69_3 = input.LA(2);

				if ((LA69_3==WS))
				{
					switch (input.LA(3))
					{
					case LIKE:
						{
						alt69 = 3;
						}
						break;
					case MATCH:
						{
						alt69 = 5;
						}
						break;
					case BETWEEN:
						{
						alt69 = 7;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 69, 6, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 69, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case MATCH:
				{
				alt69 = 4;
				}
				break;
			case BETWEEN:
				{
				alt69 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 69, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(69); }
			switch (alt69)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:282:8: OR
				{
				DebugLocation(282, 8);
				OR191=(IToken)Match(input,OR,Follow._OR_in_op_71620);  
				stream_OR.Add(OR191);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 282:11: -> T_OR
				{
					DebugLocation(282, 14);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_OR, "T_OR"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:283:4: LIKE
				{
				DebugLocation(283, 4);
				LIKE192=(IToken)Match(input,LIKE,Follow._LIKE_in_op_71629);  
				stream_LIKE.Add(LIKE192);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 283:9: -> T_LIKE
				{
					DebugLocation(283, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_LIKE, "T_LIKE"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:284:4: NOT WS LIKE
				{
				DebugLocation(284, 4);
				NOT193=(IToken)Match(input,NOT,Follow._NOT_in_op_71638);  
				stream_NOT.Add(NOT193);

				DebugLocation(284, 8);
				WS194=(IToken)Match(input,WS,Follow._WS_in_op_71640);  
				stream_WS.Add(WS194);

				DebugLocation(284, 11);
				LIKE195=(IToken)Match(input,LIKE,Follow._LIKE_in_op_71642);  
				stream_LIKE.Add(LIKE195);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 284:16: -> T_NOTLIKE
				{
					DebugLocation(284, 19);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTLIKE, "T_NOTLIKE"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:285:4: MATCH
				{
				DebugLocation(285, 4);
				MATCH196=(IToken)Match(input,MATCH,Follow._MATCH_in_op_71651);  
				stream_MATCH.Add(MATCH196);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 285:10: -> T_MATCH
				{
					DebugLocation(285, 13);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MATCH, "T_MATCH"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:286:4: NOT WS MATCH
				{
				DebugLocation(286, 4);
				NOT197=(IToken)Match(input,NOT,Follow._NOT_in_op_71660);  
				stream_NOT.Add(NOT197);

				DebugLocation(286, 8);
				WS198=(IToken)Match(input,WS,Follow._WS_in_op_71662);  
				stream_WS.Add(WS198);

				DebugLocation(286, 11);
				MATCH199=(IToken)Match(input,MATCH,Follow._MATCH_in_op_71664);  
				stream_MATCH.Add(MATCH199);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 286:17: -> T_NOTMATCH
				{
					DebugLocation(286, 20);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTMATCH, "T_NOTMATCH"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:287:4: BETWEEN
				{
				DebugLocation(287, 4);
				BETWEEN200=(IToken)Match(input,BETWEEN,Follow._BETWEEN_in_op_71673);  
				stream_BETWEEN.Add(BETWEEN200);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 287:12: -> T_BETWEEN
				{
					DebugLocation(287, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BETWEEN, "T_BETWEEN"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:288:4: NOT WS BETWEEN
				{
				DebugLocation(288, 4);
				NOT201=(IToken)Match(input,NOT,Follow._NOT_in_op_71682);  
				stream_NOT.Add(NOT201);

				DebugLocation(288, 8);
				WS202=(IToken)Match(input,WS,Follow._WS_in_op_71684);  
				stream_WS.Add(WS202);

				DebugLocation(288, 11);
				BETWEEN203=(IToken)Match(input,BETWEEN,Follow._BETWEEN_in_op_71686);  
				stream_BETWEEN.Add(BETWEEN203);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 288:19: -> T_NOTBETWEEN
				{
					DebugLocation(288, 22);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTBETWEEN, "T_NOTBETWEEN"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_7", 35);
			LeaveRule("op_7", 35);
			LeaveRule_op_7();
	    }
	 	DebugLocation(289, 1);
		} finally { DebugExitRule(GrammarFileName, "op_7"); }
		return retval;

	}
	// $ANTLR end "op_7"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_6() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_6() {}

	// $ANTLR start "expression_6"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:291:1: expression_6 : (a= expression_5 -> $a) ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )* ;
	[GrammarRule("expression_6")]
	private AstParserRuleReturnScope<object, IToken> expression_6()
	{
		EnterRule_expression_6();
		EnterRule("expression_6", 36);
		TraceIn("expression_6", 36);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS204 = default(IToken);
	    IToken WS206 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_6205 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS204_tree = default(object);
	    object WS206_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_op_6=new RewriteRuleSubtreeStream(adaptor,"rule op_6");
	    RewriteRuleSubtreeStream stream_expression_5=new RewriteRuleSubtreeStream(adaptor,"rule expression_5");
		try { DebugEnterRule(GrammarFileName, "expression_6");
		DebugLocation(291, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:292:2: ( (a= expression_5 -> $a) ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:292:4: (a= expression_5 -> $a) ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )*
			{
			DebugLocation(292, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:292:4: (a= expression_5 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:292:5: a= expression_5
			{
			DebugLocation(292, 6);
			PushFollow(Follow._expression_5_in_expression_61705);
			a=expression_5();
			PopFollow();

			stream_expression_5.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 292:19: -> $a
			{
				DebugLocation(292, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(292, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:292:25: ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )*
			try { DebugEnterSubRule(70);
			while (true)
			{
				int alt70=2;
				try { DebugEnterDecision(70, decisionCanBacktrack[70]);
				int LA70_0 = input.LA(1);

				if ((LA70_0==WS))
				{
					int LA70_1 = input.LA(2);

					if ((LA70_1==AND))
					{
						alt70 = 1;
					}


				}


				} finally { DebugExitDecision(70); }
				switch ( alt70 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:292:26: WS op_6 WS b= expression_5
					{
					DebugLocation(292, 26);
					WS204=(IToken)Match(input,WS,Follow._WS_in_expression_61712);  
					stream_WS.Add(WS204);

					DebugLocation(292, 29);
					PushFollow(Follow._op_6_in_expression_61714);
					op_6205=op_6();
					PopFollow();

					stream_op_6.Add(op_6205.Tree);
					DebugLocation(292, 34);
					WS206=(IToken)Match(input,WS,Follow._WS_in_expression_61716);  
					stream_WS.Add(WS206);

					DebugLocation(292, 38);
					PushFollow(Follow._expression_5_in_expression_61720);
					b=expression_5();
					PopFollow();

					stream_expression_5.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, op_6, expression_6
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 292:52: -> ^( T_OP_BINARY op_6 $expression_6 $b)
					{
						DebugLocation(292, 55);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:292:55: ^( T_OP_BINARY op_6 $expression_6 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(292, 57);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(292, 69);
						adaptor.AddChild(root_1, stream_op_6.NextTree());
						DebugLocation(292, 75);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(292, 89);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop70;
				}
			}

			loop70:
				;

			} finally { DebugExitSubRule(70); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_6", 36);
			LeaveRule("expression_6", 36);
			LeaveRule_expression_6();
	    }
	 	DebugLocation(293, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_6"); }
		return retval;

	}
	// $ANTLR end "expression_6"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_6() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_6() {}

	// $ANTLR start "op_6"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:295:1: op_6 : AND -> T_AND ;
	[GrammarRule("op_6")]
	private AstParserRuleReturnScope<object, IToken> op_6()
	{
		EnterRule_op_6();
		EnterRule("op_6", 37);
		TraceIn("op_6", 37);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken AND207 = default(IToken);

	    object AND207_tree = default(object);
	    RewriteRuleITokenStream stream_AND=new RewriteRuleITokenStream(adaptor,"token AND");

		try { DebugEnterRule(GrammarFileName, "op_6");
		DebugLocation(295, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:295:6: ( AND -> T_AND )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:295:8: AND
			{
			DebugLocation(295, 8);
			AND207=(IToken)Match(input,AND,Follow._AND_in_op_61748);  
			stream_AND.Add(AND207);



			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 295:12: -> T_AND
			{
				DebugLocation(295, 15);
				adaptor.AddChild(root_0, (object)adaptor.Create(T_AND, "T_AND"));

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_6", 37);
			LeaveRule("op_6", 37);
			LeaveRule_op_6();
	    }
	 	DebugLocation(296, 1);
		} finally { DebugExitRule(GrammarFileName, "op_6"); }
		return retval;

	}
	// $ANTLR end "op_6"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_5() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_5() {}

	// $ANTLR start "expression_5"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:298:1: expression_5 : ( op_5 WS expression_5 -> ^( T_OP_UNARY op_5 expression_5 ) | expression_4 );
	[GrammarRule("expression_5")]
	private AstParserRuleReturnScope<object, IToken> expression_5()
	{
		EnterRule_expression_5();
		EnterRule("expression_5", 38);
		TraceIn("expression_5", 38);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS209 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> op_5208 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_5210 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_4211 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS209_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression_5=new RewriteRuleSubtreeStream(adaptor,"rule expression_5");
	    RewriteRuleSubtreeStream stream_op_5=new RewriteRuleSubtreeStream(adaptor,"rule op_5");
		try { DebugEnterRule(GrammarFileName, "expression_5");
		DebugLocation(298, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:299:2: ( op_5 WS expression_5 -> ^( T_OP_UNARY op_5 expression_5 ) | expression_4 )
			int alt71=2;
			try { DebugEnterDecision(71, decisionCanBacktrack[71]);
			int LA71_0 = input.LA(1);

			if ((LA71_0==NOT))
			{
				alt71 = 1;
			}
			else if (((LA71_0>=CASE && LA71_0<=CAST)||LA71_0==CONVERT||LA71_0==EXISTS||LA71_0==NUMBER||LA71_0==SIMPLE_FILE||(LA71_0>=STRING && LA71_0<=SYSTEMVAR)||LA71_0==TOKEN||LA71_0==VARIABLE||LA71_0==147))
			{
				alt71 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 71, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(71); }
			switch (alt71)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:299:4: op_5 WS expression_5
				{
				DebugLocation(299, 4);
				PushFollow(Follow._op_5_in_expression_51766);
				op_5208=op_5();
				PopFollow();

				stream_op_5.Add(op_5208.Tree);
				DebugLocation(299, 9);
				WS209=(IToken)Match(input,WS,Follow._WS_in_expression_51768);  
				stream_WS.Add(WS209);

				DebugLocation(299, 12);
				PushFollow(Follow._expression_5_in_expression_51770);
				expression_5210=expression_5();
				PopFollow();

				stream_expression_5.Add(expression_5210.Tree);


				{
				// AST REWRITE
				// elements: expression_5, op_5
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 299:25: -> ^( T_OP_UNARY op_5 expression_5 )
				{
					DebugLocation(299, 28);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:299:28: ^( T_OP_UNARY op_5 expression_5 )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(299, 30);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_UNARY, "T_OP_UNARY"), root_1);

					DebugLocation(299, 41);
					adaptor.AddChild(root_1, stream_op_5.NextTree());
					DebugLocation(299, 46);
					adaptor.AddChild(root_1, stream_expression_5.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:300:4: expression_4
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(300, 4);
				PushFollow(Follow._expression_4_in_expression_51785);
				expression_4211=expression_4();
				PopFollow();

				adaptor.AddChild(root_0, expression_4211.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_5", 38);
			LeaveRule("expression_5", 38);
			LeaveRule_expression_5();
	    }
	 	DebugLocation(301, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_5"); }
		return retval;

	}
	// $ANTLR end "expression_5"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_5() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_5() {}

	// $ANTLR start "op_5"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:303:1: op_5 : NOT -> T_NOT ;
	[GrammarRule("op_5")]
	private AstParserRuleReturnScope<object, IToken> op_5()
	{
		EnterRule_op_5();
		EnterRule("op_5", 39);
		TraceIn("op_5", 39);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken NOT212 = default(IToken);

	    object NOT212_tree = default(object);
	    RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");

		try { DebugEnterRule(GrammarFileName, "op_5");
		DebugLocation(303, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:303:7: ( NOT -> T_NOT )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:303:9: NOT
			{
			DebugLocation(303, 9);
			NOT212=(IToken)Match(input,NOT,Follow._NOT_in_op_51796);  
			stream_NOT.Add(NOT212);



			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 303:13: -> T_NOT
			{
				DebugLocation(303, 16);
				adaptor.AddChild(root_0, (object)adaptor.Create(T_NOT, "T_NOT"));

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_5", 39);
			LeaveRule("op_5", 39);
			LeaveRule_op_5();
	    }
	 	DebugLocation(304, 1);
		} finally { DebugExitRule(GrammarFileName, "op_5"); }
		return retval;

	}
	// $ANTLR end "op_5"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_4() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_4() {}

	// $ANTLR start "expression_4"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:306:1: expression_4 : (a= expression_3 -> $a) ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )* ;
	[GrammarRule("expression_4")]
	private AstParserRuleReturnScope<object, IToken> expression_4()
	{
		EnterRule_expression_4();
		EnterRule("expression_4", 40);
		TraceIn("expression_4", 40);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS213 = default(IToken);
	    IToken WS215 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_4214 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS213_tree = default(object);
	    object WS215_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression_3=new RewriteRuleSubtreeStream(adaptor,"rule expression_3");
	    RewriteRuleSubtreeStream stream_op_4=new RewriteRuleSubtreeStream(adaptor,"rule op_4");
		try { DebugEnterRule(GrammarFileName, "expression_4");
		DebugLocation(306, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:307:2: ( (a= expression_3 -> $a) ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:307:4: (a= expression_3 -> $a) ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )*
			{
			DebugLocation(307, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:307:4: (a= expression_3 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:307:5: a= expression_3
			{
			DebugLocation(307, 6);
			PushFollow(Follow._expression_3_in_expression_41815);
			a=expression_3();
			PopFollow();

			stream_expression_3.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 307:19: -> $a
			{
				DebugLocation(307, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(307, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:307:25: ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )*
			try { DebugEnterSubRule(74);
			while (true)
			{
				int alt74=2;
				try { DebugEnterDecision(74, decisionCanBacktrack[74]);
				int LA74_0 = input.LA(1);

				if ((LA74_0==WS))
				{
					switch (input.LA(2))
					{
					case 158:
						{
						int LA74_4 = input.LA(3);

						if ((LA74_4==WS))
						{
							int LA74_13 = input.LA(4);

							if (((LA74_13>=CASE && LA74_13<=CAST)||LA74_13==CONVERT||LA74_13==EXISTS||LA74_13==NUMBER||LA74_13==SIMPLE_FILE||(LA74_13>=STRING && LA74_13<=SYSTEMVAR)||LA74_13==TOKEN||LA74_13==VARIABLE||LA74_13==147))
							{
								alt74 = 1;
							}


						}
						else if (((LA74_4>=CASE && LA74_4<=CAST)||LA74_4==CONVERT||LA74_4==EXISTS||LA74_4==NUMBER||LA74_4==SIMPLE_FILE||(LA74_4>=STRING && LA74_4<=SYSTEMVAR)||LA74_4==TOKEN||LA74_4==VARIABLE||LA74_4==147))
						{
							alt74 = 1;
						}


						}
						break;
					case 160:
						{
						int LA74_5 = input.LA(3);

						if ((LA74_5==WS))
						{
							int LA74_13 = input.LA(4);

							if (((LA74_13>=CASE && LA74_13<=CAST)||LA74_13==CONVERT||LA74_13==EXISTS||LA74_13==NUMBER||LA74_13==SIMPLE_FILE||(LA74_13>=STRING && LA74_13<=SYSTEMVAR)||LA74_13==TOKEN||LA74_13==VARIABLE||LA74_13==147))
							{
								alt74 = 1;
							}


						}
						else if (((LA74_5>=CASE && LA74_5<=CAST)||LA74_5==CONVERT||LA74_5==EXISTS||LA74_5==NUMBER||LA74_5==SIMPLE_FILE||(LA74_5>=STRING && LA74_5<=SYSTEMVAR)||LA74_5==TOKEN||LA74_5==VARIABLE||LA74_5==147))
						{
							alt74 = 1;
						}


						}
						break;
					case 156:
						{
						int LA74_6 = input.LA(3);

						if ((LA74_6==WS))
						{
							int LA74_13 = input.LA(4);

							if (((LA74_13>=CASE && LA74_13<=CAST)||LA74_13==CONVERT||LA74_13==EXISTS||LA74_13==NUMBER||LA74_13==SIMPLE_FILE||(LA74_13>=STRING && LA74_13<=SYSTEMVAR)||LA74_13==TOKEN||LA74_13==VARIABLE||LA74_13==147))
							{
								alt74 = 1;
							}


						}
						else if (((LA74_6>=CASE && LA74_6<=CAST)||LA74_6==CONVERT||LA74_6==EXISTS||LA74_6==NUMBER||LA74_6==SIMPLE_FILE||(LA74_6>=STRING && LA74_6<=SYSTEMVAR)||LA74_6==TOKEN||LA74_6==VARIABLE||LA74_6==147))
						{
							alt74 = 1;
						}


						}
						break;
					case 157:
						{
						int LA74_7 = input.LA(3);

						if ((LA74_7==WS))
						{
							int LA74_13 = input.LA(4);

							if (((LA74_13>=CASE && LA74_13<=CAST)||LA74_13==CONVERT||LA74_13==EXISTS||LA74_13==NUMBER||LA74_13==SIMPLE_FILE||(LA74_13>=STRING && LA74_13<=SYSTEMVAR)||LA74_13==TOKEN||LA74_13==VARIABLE||LA74_13==147))
							{
								alt74 = 1;
							}


						}
						else if (((LA74_7>=CASE && LA74_7<=CAST)||LA74_7==CONVERT||LA74_7==EXISTS||LA74_7==NUMBER||LA74_7==SIMPLE_FILE||(LA74_7>=STRING && LA74_7<=SYSTEMVAR)||LA74_7==TOKEN||LA74_7==VARIABLE||LA74_7==147))
						{
							alt74 = 1;
						}


						}
						break;
					case 143:
						{
						int LA74_8 = input.LA(3);

						if ((LA74_8==WS))
						{
							int LA74_13 = input.LA(4);

							if (((LA74_13>=CASE && LA74_13<=CAST)||LA74_13==CONVERT||LA74_13==EXISTS||LA74_13==NUMBER||LA74_13==SIMPLE_FILE||(LA74_13>=STRING && LA74_13<=SYSTEMVAR)||LA74_13==TOKEN||LA74_13==VARIABLE||LA74_13==147))
							{
								alt74 = 1;
							}


						}
						else if (((LA74_8>=CASE && LA74_8<=CAST)||LA74_8==CONVERT||LA74_8==EXISTS||LA74_8==NUMBER||LA74_8==SIMPLE_FILE||(LA74_8>=STRING && LA74_8<=SYSTEMVAR)||LA74_8==TOKEN||LA74_8==VARIABLE||LA74_8==147))
						{
							alt74 = 1;
						}


						}
						break;
					case 144:
						{
						int LA74_9 = input.LA(3);

						if ((LA74_9==WS))
						{
							int LA74_13 = input.LA(4);

							if (((LA74_13>=CASE && LA74_13<=CAST)||LA74_13==CONVERT||LA74_13==EXISTS||LA74_13==NUMBER||LA74_13==SIMPLE_FILE||(LA74_13>=STRING && LA74_13<=SYSTEMVAR)||LA74_13==TOKEN||LA74_13==VARIABLE||LA74_13==147))
							{
								alt74 = 1;
							}


						}
						else if (((LA74_9>=CASE && LA74_9<=CAST)||LA74_9==CONVERT||LA74_9==EXISTS||LA74_9==NUMBER||LA74_9==SIMPLE_FILE||(LA74_9>=STRING && LA74_9<=SYSTEMVAR)||LA74_9==TOKEN||LA74_9==VARIABLE||LA74_9==147))
						{
							alt74 = 1;
						}


						}
						break;
					case 142:
						{
						int LA74_10 = input.LA(3);

						if ((LA74_10==WS))
						{
							int LA74_13 = input.LA(4);

							if (((LA74_13>=CASE && LA74_13<=CAST)||LA74_13==CONVERT||LA74_13==EXISTS||LA74_13==NUMBER||LA74_13==SIMPLE_FILE||(LA74_13>=STRING && LA74_13<=SYSTEMVAR)||LA74_13==TOKEN||LA74_13==VARIABLE||LA74_13==147))
							{
								alt74 = 1;
							}


						}
						else if (((LA74_10>=CASE && LA74_10<=CAST)||LA74_10==CONVERT||LA74_10==EXISTS||LA74_10==NUMBER||LA74_10==SIMPLE_FILE||(LA74_10>=STRING && LA74_10<=SYSTEMVAR)||LA74_10==TOKEN||LA74_10==VARIABLE||LA74_10==147))
						{
							alt74 = 1;
						}


						}
						break;
					case 159:
						{
						int LA74_11 = input.LA(3);

						if ((LA74_11==WS))
						{
							int LA74_13 = input.LA(4);

							if (((LA74_13>=CASE && LA74_13<=CAST)||LA74_13==CONVERT||LA74_13==EXISTS||LA74_13==NUMBER||LA74_13==SIMPLE_FILE||(LA74_13>=STRING && LA74_13<=SYSTEMVAR)||LA74_13==TOKEN||LA74_13==VARIABLE||LA74_13==147))
							{
								alt74 = 1;
							}


						}
						else if (((LA74_11>=CASE && LA74_11<=CAST)||LA74_11==CONVERT||LA74_11==EXISTS||LA74_11==NUMBER||LA74_11==SIMPLE_FILE||(LA74_11>=STRING && LA74_11<=SYSTEMVAR)||LA74_11==TOKEN||LA74_11==VARIABLE||LA74_11==147))
						{
							alt74 = 1;
						}


						}
						break;
					case 155:
						{
						int LA74_12 = input.LA(3);

						if ((LA74_12==WS))
						{
							int LA74_13 = input.LA(4);

							if (((LA74_13>=CASE && LA74_13<=CAST)||LA74_13==CONVERT||LA74_13==EXISTS||LA74_13==NUMBER||LA74_13==SIMPLE_FILE||(LA74_13>=STRING && LA74_13<=SYSTEMVAR)||LA74_13==TOKEN||LA74_13==VARIABLE||LA74_13==147))
							{
								alt74 = 1;
							}


						}
						else if (((LA74_12>=CASE && LA74_12<=CAST)||LA74_12==CONVERT||LA74_12==EXISTS||LA74_12==NUMBER||LA74_12==SIMPLE_FILE||(LA74_12>=STRING && LA74_12<=SYSTEMVAR)||LA74_12==TOKEN||LA74_12==VARIABLE||LA74_12==147))
						{
							alt74 = 1;
						}


						}
						break;
					}

				}
				else if (((LA74_0>=142 && LA74_0<=144)||(LA74_0>=155 && LA74_0<=160)))
				{
					alt74 = 1;
				}


				} finally { DebugExitDecision(74); }
				switch ( alt74 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:307:26: ( WS )? op_4 ( WS )? b= expression_3
					{
					DebugLocation(307, 26);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:307:26: ( WS )?
					int alt72=2;
					try { DebugEnterSubRule(72);
					try { DebugEnterDecision(72, decisionCanBacktrack[72]);
					int LA72_0 = input.LA(1);

					if ((LA72_0==WS))
					{
						alt72 = 1;
					}
					} finally { DebugExitDecision(72); }
					switch (alt72)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:307:26: WS
						{
						DebugLocation(307, 26);
						WS213=(IToken)Match(input,WS,Follow._WS_in_expression_41822);  
						stream_WS.Add(WS213);


						}
						break;

					}
					} finally { DebugExitSubRule(72); }

					DebugLocation(307, 30);
					PushFollow(Follow._op_4_in_expression_41825);
					op_4214=op_4();
					PopFollow();

					stream_op_4.Add(op_4214.Tree);
					DebugLocation(307, 35);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:307:35: ( WS )?
					int alt73=2;
					try { DebugEnterSubRule(73);
					try { DebugEnterDecision(73, decisionCanBacktrack[73]);
					int LA73_0 = input.LA(1);

					if ((LA73_0==WS))
					{
						alt73 = 1;
					}
					} finally { DebugExitDecision(73); }
					switch (alt73)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:307:35: WS
						{
						DebugLocation(307, 35);
						WS215=(IToken)Match(input,WS,Follow._WS_in_expression_41827);  
						stream_WS.Add(WS215);


						}
						break;

					}
					} finally { DebugExitSubRule(73); }

					DebugLocation(307, 40);
					PushFollow(Follow._expression_3_in_expression_41832);
					b=expression_3();
					PopFollow();

					stream_expression_3.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, expression_4, op_4
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 307:54: -> ^( T_OP_BINARY op_4 $expression_4 $b)
					{
						DebugLocation(307, 57);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:307:57: ^( T_OP_BINARY op_4 $expression_4 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(307, 59);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(307, 71);
						adaptor.AddChild(root_1, stream_op_4.NextTree());
						DebugLocation(307, 77);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(307, 91);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop74;
				}
			}

			loop74:
				;

			} finally { DebugExitSubRule(74); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_4", 40);
			LeaveRule("expression_4", 40);
			LeaveRule_expression_4();
	    }
	 	DebugLocation(308, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_4"); }
		return retval;

	}
	// $ANTLR end "expression_4"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_4() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_4() {}

	// $ANTLR start "op_4"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:310:1: op_4 : ( '=' -> T_EQUAL | '>=' -> T_NOTLESS | '<=' -> T_NOTGREATER | '<>' -> T_NOTEQUAL | '!=' -> T_NOTEQUAL | '!>' -> T_NOTGREATER | '!<' -> T_NOTLESS | '>' -> T_GREATER | '<' -> T_LESS );
	[GrammarRule("op_4")]
	private AstParserRuleReturnScope<object, IToken> op_4()
	{
		EnterRule_op_4();
		EnterRule("op_4", 41);
		TraceIn("op_4", 41);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal216 = default(IToken);
	    IToken string_literal217 = default(IToken);
	    IToken string_literal218 = default(IToken);
	    IToken string_literal219 = default(IToken);
	    IToken string_literal220 = default(IToken);
	    IToken string_literal221 = default(IToken);
	    IToken string_literal222 = default(IToken);
	    IToken char_literal223 = default(IToken);
	    IToken char_literal224 = default(IToken);

	    object char_literal216_tree = default(object);
	    object string_literal217_tree = default(object);
	    object string_literal218_tree = default(object);
	    object string_literal219_tree = default(object);
	    object string_literal220_tree = default(object);
	    object string_literal221_tree = default(object);
	    object string_literal222_tree = default(object);
	    object char_literal223_tree = default(object);
	    object char_literal224_tree = default(object);
	    RewriteRuleITokenStream stream_143=new RewriteRuleITokenStream(adaptor,"token 143");
	    RewriteRuleITokenStream stream_144=new RewriteRuleITokenStream(adaptor,"token 144");
	    RewriteRuleITokenStream stream_160=new RewriteRuleITokenStream(adaptor,"token 160");
	    RewriteRuleITokenStream stream_159=new RewriteRuleITokenStream(adaptor,"token 159");
	    RewriteRuleITokenStream stream_158=new RewriteRuleITokenStream(adaptor,"token 158");
	    RewriteRuleITokenStream stream_157=new RewriteRuleITokenStream(adaptor,"token 157");
	    RewriteRuleITokenStream stream_156=new RewriteRuleITokenStream(adaptor,"token 156");
	    RewriteRuleITokenStream stream_155=new RewriteRuleITokenStream(adaptor,"token 155");
	    RewriteRuleITokenStream stream_142=new RewriteRuleITokenStream(adaptor,"token 142");

		try { DebugEnterRule(GrammarFileName, "op_4");
		DebugLocation(310, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:310:6: ( '=' -> T_EQUAL | '>=' -> T_NOTLESS | '<=' -> T_NOTGREATER | '<>' -> T_NOTEQUAL | '!=' -> T_NOTEQUAL | '!>' -> T_NOTGREATER | '!<' -> T_NOTLESS | '>' -> T_GREATER | '<' -> T_LESS )
			int alt75=9;
			try { DebugEnterDecision(75, decisionCanBacktrack[75]);
			switch (input.LA(1))
			{
			case 158:
				{
				alt75 = 1;
				}
				break;
			case 160:
				{
				alt75 = 2;
				}
				break;
			case 156:
				{
				alt75 = 3;
				}
				break;
			case 157:
				{
				alt75 = 4;
				}
				break;
			case 143:
				{
				alt75 = 5;
				}
				break;
			case 144:
				{
				alt75 = 6;
				}
				break;
			case 142:
				{
				alt75 = 7;
				}
				break;
			case 159:
				{
				alt75 = 8;
				}
				break;
			case 155:
				{
				alt75 = 9;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 75, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(75); }
			switch (alt75)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:310:8: '='
				{
				DebugLocation(310, 8);
				char_literal216=(IToken)Match(input,158,Follow._158_in_op_41858);  
				stream_158.Add(char_literal216);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 310:12: -> T_EQUAL
				{
					DebugLocation(310, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_EQUAL, "T_EQUAL"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:311:4: '>='
				{
				DebugLocation(311, 4);
				string_literal217=(IToken)Match(input,160,Follow._160_in_op_41867);  
				stream_160.Add(string_literal217);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 311:9: -> T_NOTLESS
				{
					DebugLocation(311, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTLESS, "T_NOTLESS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:312:4: '<='
				{
				DebugLocation(312, 4);
				string_literal218=(IToken)Match(input,156,Follow._156_in_op_41877);  
				stream_156.Add(string_literal218);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 312:9: -> T_NOTGREATER
				{
					DebugLocation(312, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTGREATER, "T_NOTGREATER"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:313:4: '<>'
				{
				DebugLocation(313, 4);
				string_literal219=(IToken)Match(input,157,Follow._157_in_op_41887);  
				stream_157.Add(string_literal219);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 313:9: -> T_NOTEQUAL
				{
					DebugLocation(313, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTEQUAL, "T_NOTEQUAL"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:314:4: '!='
				{
				DebugLocation(314, 4);
				string_literal220=(IToken)Match(input,143,Follow._143_in_op_41896);  
				stream_143.Add(string_literal220);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 314:9: -> T_NOTEQUAL
				{
					DebugLocation(314, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTEQUAL, "T_NOTEQUAL"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:315:4: '!>'
				{
				DebugLocation(315, 4);
				string_literal221=(IToken)Match(input,144,Follow._144_in_op_41905);  
				stream_144.Add(string_literal221);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 315:9: -> T_NOTGREATER
				{
					DebugLocation(315, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTGREATER, "T_NOTGREATER"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:316:4: '!<'
				{
				DebugLocation(316, 4);
				string_literal222=(IToken)Match(input,142,Follow._142_in_op_41914);  
				stream_142.Add(string_literal222);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 316:9: -> T_NOTLESS
				{
					DebugLocation(316, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTLESS, "T_NOTLESS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:317:4: '>'
				{
				DebugLocation(317, 4);
				char_literal223=(IToken)Match(input,159,Follow._159_in_op_41923);  
				stream_159.Add(char_literal223);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 317:8: -> T_GREATER
				{
					DebugLocation(317, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_GREATER, "T_GREATER"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:318:4: '<'
				{
				DebugLocation(318, 4);
				char_literal224=(IToken)Match(input,155,Follow._155_in_op_41933);  
				stream_155.Add(char_literal224);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 318:8: -> T_LESS
				{
					DebugLocation(318, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_LESS, "T_LESS"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_4", 41);
			LeaveRule("op_4", 41);
			LeaveRule_op_4();
	    }
	 	DebugLocation(319, 1);
		} finally { DebugExitRule(GrammarFileName, "op_4"); }
		return retval;

	}
	// $ANTLR end "op_4"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_3() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_3() {}

	// $ANTLR start "expression_3"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:321:1: expression_3 : (a= expression_2 -> $a) ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )* ;
	[GrammarRule("expression_3")]
	private AstParserRuleReturnScope<object, IToken> expression_3()
	{
		EnterRule_expression_3();
		EnterRule("expression_3", 42);
		TraceIn("expression_3", 42);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS225 = default(IToken);
	    IToken WS227 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_3226 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS225_tree = default(object);
	    object WS227_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_op_3=new RewriteRuleSubtreeStream(adaptor,"rule op_3");
	    RewriteRuleSubtreeStream stream_expression_2=new RewriteRuleSubtreeStream(adaptor,"rule expression_2");
		try { DebugEnterRule(GrammarFileName, "expression_3");
		DebugLocation(321, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:322:2: ( (a= expression_2 -> $a) ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:322:4: (a= expression_2 -> $a) ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )*
			{
			DebugLocation(322, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:322:4: (a= expression_2 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:322:5: a= expression_2
			{
			DebugLocation(322, 6);
			PushFollow(Follow._expression_2_in_expression_31952);
			a=expression_2();
			PopFollow();

			stream_expression_2.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 322:19: -> $a
			{
				DebugLocation(322, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(322, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:322:25: ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )*
			try { DebugEnterSubRule(78);
			while (true)
			{
				int alt78=2;
				try { DebugEnterDecision(78, decisionCanBacktrack[78]);
				int LA78_0 = input.LA(1);

				if ((LA78_0==WS))
				{
					int LA78_1 = input.LA(2);

					if ((LA78_1==146||LA78_1==150||LA78_1==152||(LA78_1>=163 && LA78_1<=164)))
					{
						alt78 = 1;
					}


				}
				else if ((LA78_0==146||LA78_0==150||LA78_0==152||(LA78_0>=163 && LA78_0<=164)))
				{
					alt78 = 1;
				}


				} finally { DebugExitDecision(78); }
				switch ( alt78 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:322:26: ( WS )? op_3 ( WS )? b= expression_2
					{
					DebugLocation(322, 26);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:322:26: ( WS )?
					int alt76=2;
					try { DebugEnterSubRule(76);
					try { DebugEnterDecision(76, decisionCanBacktrack[76]);
					int LA76_0 = input.LA(1);

					if ((LA76_0==WS))
					{
						alt76 = 1;
					}
					} finally { DebugExitDecision(76); }
					switch (alt76)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:322:26: WS
						{
						DebugLocation(322, 26);
						WS225=(IToken)Match(input,WS,Follow._WS_in_expression_31959);  
						stream_WS.Add(WS225);


						}
						break;

					}
					} finally { DebugExitSubRule(76); }

					DebugLocation(322, 30);
					PushFollow(Follow._op_3_in_expression_31962);
					op_3226=op_3();
					PopFollow();

					stream_op_3.Add(op_3226.Tree);
					DebugLocation(322, 35);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:322:35: ( WS )?
					int alt77=2;
					try { DebugEnterSubRule(77);
					try { DebugEnterDecision(77, decisionCanBacktrack[77]);
					int LA77_0 = input.LA(1);

					if ((LA77_0==WS))
					{
						alt77 = 1;
					}
					} finally { DebugExitDecision(77); }
					switch (alt77)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:322:35: WS
						{
						DebugLocation(322, 35);
						WS227=(IToken)Match(input,WS,Follow._WS_in_expression_31964);  
						stream_WS.Add(WS227);


						}
						break;

					}
					} finally { DebugExitSubRule(77); }

					DebugLocation(322, 40);
					PushFollow(Follow._expression_2_in_expression_31969);
					b=expression_2();
					PopFollow();

					stream_expression_2.Add(b.Tree);


					{
					// AST REWRITE
					// elements: expression_3, op_3, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 322:54: -> ^( T_OP_BINARY op_3 $expression_3 $b)
					{
						DebugLocation(322, 57);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:322:57: ^( T_OP_BINARY op_3 $expression_3 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(322, 59);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(322, 71);
						adaptor.AddChild(root_1, stream_op_3.NextTree());
						DebugLocation(322, 77);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(322, 91);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop78;
				}
			}

			loop78:
				;

			} finally { DebugExitSubRule(78); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_3", 42);
			LeaveRule("expression_3", 42);
			LeaveRule_expression_3();
	    }
	 	DebugLocation(323, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_3"); }
		return retval;

	}
	// $ANTLR end "expression_3"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_3() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_3() {}

	// $ANTLR start "op_3"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:325:1: op_3 : ( '+' -> T_PLUS | '-' -> T_MINUS | '&' -> T_BITWISE_AND | '|' -> T_BITWISE_OR | '^' -> T_BITWISE_XOR );
	[GrammarRule("op_3")]
	private AstParserRuleReturnScope<object, IToken> op_3()
	{
		EnterRule_op_3();
		EnterRule("op_3", 43);
		TraceIn("op_3", 43);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal228 = default(IToken);
	    IToken char_literal229 = default(IToken);
	    IToken char_literal230 = default(IToken);
	    IToken char_literal231 = default(IToken);
	    IToken char_literal232 = default(IToken);

	    object char_literal228_tree = default(object);
	    object char_literal229_tree = default(object);
	    object char_literal230_tree = default(object);
	    object char_literal231_tree = default(object);
	    object char_literal232_tree = default(object);
	    RewriteRuleITokenStream stream_152=new RewriteRuleITokenStream(adaptor,"token 152");
	    RewriteRuleITokenStream stream_163=new RewriteRuleITokenStream(adaptor,"token 163");
	    RewriteRuleITokenStream stream_150=new RewriteRuleITokenStream(adaptor,"token 150");
	    RewriteRuleITokenStream stream_164=new RewriteRuleITokenStream(adaptor,"token 164");
	    RewriteRuleITokenStream stream_146=new RewriteRuleITokenStream(adaptor,"token 146");

		try { DebugEnterRule(GrammarFileName, "op_3");
		DebugLocation(325, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:325:6: ( '+' -> T_PLUS | '-' -> T_MINUS | '&' -> T_BITWISE_AND | '|' -> T_BITWISE_OR | '^' -> T_BITWISE_XOR )
			int alt79=5;
			try { DebugEnterDecision(79, decisionCanBacktrack[79]);
			switch (input.LA(1))
			{
			case 150:
				{
				alt79 = 1;
				}
				break;
			case 152:
				{
				alt79 = 2;
				}
				break;
			case 146:
				{
				alt79 = 3;
				}
				break;
			case 164:
				{
				alt79 = 4;
				}
				break;
			case 163:
				{
				alt79 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 79, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(79); }
			switch (alt79)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:325:8: '+'
				{
				DebugLocation(325, 8);
				char_literal228=(IToken)Match(input,150,Follow._150_in_op_31995);  
				stream_150.Add(char_literal228);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 325:12: -> T_PLUS
				{
					DebugLocation(325, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_PLUS, "T_PLUS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:326:4: '-'
				{
				DebugLocation(326, 4);
				char_literal229=(IToken)Match(input,152,Follow._152_in_op_32004);  
				stream_152.Add(char_literal229);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 326:8: -> T_MINUS
				{
					DebugLocation(326, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MINUS, "T_MINUS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:327:4: '&'
				{
				DebugLocation(327, 4);
				char_literal230=(IToken)Match(input,146,Follow._146_in_op_32013);  
				stream_146.Add(char_literal230);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 327:8: -> T_BITWISE_AND
				{
					DebugLocation(327, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_AND, "T_BITWISE_AND"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:328:4: '|'
				{
				DebugLocation(328, 4);
				char_literal231=(IToken)Match(input,164,Follow._164_in_op_32022);  
				stream_164.Add(char_literal231);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 328:8: -> T_BITWISE_OR
				{
					DebugLocation(328, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_OR, "T_BITWISE_OR"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:329:4: '^'
				{
				DebugLocation(329, 4);
				char_literal232=(IToken)Match(input,163,Follow._163_in_op_32031);  
				stream_163.Add(char_literal232);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 329:8: -> T_BITWISE_XOR
				{
					DebugLocation(329, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_XOR, "T_BITWISE_XOR"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_3", 43);
			LeaveRule("op_3", 43);
			LeaveRule_op_3();
	    }
	 	DebugLocation(330, 1);
		} finally { DebugExitRule(GrammarFileName, "op_3"); }
		return retval;

	}
	// $ANTLR end "op_3"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_2() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_2() {}

	// $ANTLR start "expression_2"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:338:1: expression_2 : (a= expression_1 -> $a) ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )* ;
	[GrammarRule("expression_2")]
	private AstParserRuleReturnScope<object, IToken> expression_2()
	{
		EnterRule_expression_2();
		EnterRule("expression_2", 44);
		TraceIn("expression_2", 44);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS233 = default(IToken);
	    IToken WS235 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_2234 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS233_tree = default(object);
	    object WS235_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_op_2=new RewriteRuleSubtreeStream(adaptor,"rule op_2");
	    RewriteRuleSubtreeStream stream_expression_1=new RewriteRuleSubtreeStream(adaptor,"rule expression_1");
		try { DebugEnterRule(GrammarFileName, "expression_2");
		DebugLocation(338, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:339:2: ( (a= expression_1 -> $a) ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:339:4: (a= expression_1 -> $a) ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )*
			{
			DebugLocation(339, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:339:4: (a= expression_1 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:339:5: a= expression_1
			{
			DebugLocation(339, 6);
			PushFollow(Follow._expression_1_in_expression_22053);
			a=expression_1();
			PopFollow();

			stream_expression_1.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 339:19: -> $a
			{
				DebugLocation(339, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(339, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:339:25: ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )*
			try { DebugEnterSubRule(82);
			while (true)
			{
				int alt82=2;
				try { DebugEnterDecision(82, decisionCanBacktrack[82]);
				int LA82_0 = input.LA(1);

				if ((LA82_0==WS))
				{
					int LA82_1 = input.LA(2);

					if ((LA82_1==149))
					{
						int LA82_4 = input.LA(3);

						if ((LA82_4==WS))
						{
							int LA82_5 = input.LA(4);

							if (((LA82_5>=CASE && LA82_5<=CAST)||LA82_5==CONVERT||LA82_5==EXISTS||LA82_5==NUMBER||LA82_5==SIMPLE_FILE||(LA82_5>=STRING && LA82_5<=SYSTEMVAR)||LA82_5==TOKEN||LA82_5==VARIABLE||LA82_5==147))
							{
								alt82 = 1;
							}


						}
						else if (((LA82_4>=CASE && LA82_4<=CAST)||LA82_4==CONVERT||LA82_4==EXISTS||LA82_4==NUMBER||LA82_4==SIMPLE_FILE||(LA82_4>=STRING && LA82_4<=SYSTEMVAR)||LA82_4==TOKEN||LA82_4==VARIABLE||LA82_4==147))
						{
							alt82 = 1;
						}


					}
					else if ((LA82_1==145||LA82_1==153))
					{
						alt82 = 1;
					}


				}
				else if ((LA82_0==145||LA82_0==149||LA82_0==153))
				{
					alt82 = 1;
				}


				} finally { DebugExitDecision(82); }
				switch ( alt82 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:339:26: ( WS )? op_2 ( WS )? b= expression_1
					{
					DebugLocation(339, 26);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:339:26: ( WS )?
					int alt80=2;
					try { DebugEnterSubRule(80);
					try { DebugEnterDecision(80, decisionCanBacktrack[80]);
					int LA80_0 = input.LA(1);

					if ((LA80_0==WS))
					{
						alt80 = 1;
					}
					} finally { DebugExitDecision(80); }
					switch (alt80)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:339:26: WS
						{
						DebugLocation(339, 26);
						WS233=(IToken)Match(input,WS,Follow._WS_in_expression_22060);  
						stream_WS.Add(WS233);


						}
						break;

					}
					} finally { DebugExitSubRule(80); }

					DebugLocation(339, 30);
					PushFollow(Follow._op_2_in_expression_22063);
					op_2234=op_2();
					PopFollow();

					stream_op_2.Add(op_2234.Tree);
					DebugLocation(339, 35);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:339:35: ( WS )?
					int alt81=2;
					try { DebugEnterSubRule(81);
					try { DebugEnterDecision(81, decisionCanBacktrack[81]);
					int LA81_0 = input.LA(1);

					if ((LA81_0==WS))
					{
						alt81 = 1;
					}
					} finally { DebugExitDecision(81); }
					switch (alt81)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:339:35: WS
						{
						DebugLocation(339, 35);
						WS235=(IToken)Match(input,WS,Follow._WS_in_expression_22065);  
						stream_WS.Add(WS235);


						}
						break;

					}
					} finally { DebugExitSubRule(81); }

					DebugLocation(339, 40);
					PushFollow(Follow._expression_1_in_expression_22070);
					b=expression_1();
					PopFollow();

					stream_expression_1.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, expression_2, op_2
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 339:54: -> ^( T_OP_BINARY op_2 $expression_2 $b)
					{
						DebugLocation(339, 57);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:339:57: ^( T_OP_BINARY op_2 $expression_2 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(339, 59);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(339, 71);
						adaptor.AddChild(root_1, stream_op_2.NextTree());
						DebugLocation(339, 77);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(339, 91);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop82;
				}
			}

			loop82:
				;

			} finally { DebugExitSubRule(82); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_2", 44);
			LeaveRule("expression_2", 44);
			LeaveRule_expression_2();
	    }
	 	DebugLocation(340, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_2"); }
		return retval;

	}
	// $ANTLR end "expression_2"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_2() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_2() {}

	// $ANTLR start "op_2"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:342:1: op_2 : ( '*' -> T_PRODUCT | '/' -> T_DIVIDE | '%' -> T_MODULO );
	[GrammarRule("op_2")]
	private AstParserRuleReturnScope<object, IToken> op_2()
	{
		EnterRule_op_2();
		EnterRule("op_2", 45);
		TraceIn("op_2", 45);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal236 = default(IToken);
	    IToken char_literal237 = default(IToken);
	    IToken char_literal238 = default(IToken);

	    object char_literal236_tree = default(object);
	    object char_literal237_tree = default(object);
	    object char_literal238_tree = default(object);
	    RewriteRuleITokenStream stream_153=new RewriteRuleITokenStream(adaptor,"token 153");
	    RewriteRuleITokenStream stream_145=new RewriteRuleITokenStream(adaptor,"token 145");
	    RewriteRuleITokenStream stream_149=new RewriteRuleITokenStream(adaptor,"token 149");

		try { DebugEnterRule(GrammarFileName, "op_2");
		DebugLocation(342, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:342:6: ( '*' -> T_PRODUCT | '/' -> T_DIVIDE | '%' -> T_MODULO )
			int alt83=3;
			try { DebugEnterDecision(83, decisionCanBacktrack[83]);
			switch (input.LA(1))
			{
			case 149:
				{
				alt83 = 1;
				}
				break;
			case 153:
				{
				alt83 = 2;
				}
				break;
			case 145:
				{
				alt83 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 83, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(83); }
			switch (alt83)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:342:8: '*'
				{
				DebugLocation(342, 8);
				char_literal236=(IToken)Match(input,149,Follow._149_in_op_22096);  
				stream_149.Add(char_literal236);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 342:12: -> T_PRODUCT
				{
					DebugLocation(342, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_PRODUCT, "T_PRODUCT"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:343:4: '/'
				{
				DebugLocation(343, 4);
				char_literal237=(IToken)Match(input,153,Follow._153_in_op_22105);  
				stream_153.Add(char_literal237);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 343:8: -> T_DIVIDE
				{
					DebugLocation(343, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_DIVIDE, "T_DIVIDE"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:344:4: '%'
				{
				DebugLocation(344, 4);
				char_literal238=(IToken)Match(input,145,Follow._145_in_op_22114);  
				stream_145.Add(char_literal238);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 344:8: -> T_MODULO
				{
					DebugLocation(344, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MODULO, "T_MODULO"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_2", 45);
			LeaveRule("op_2", 45);
			LeaveRule_op_2();
	    }
	 	DebugLocation(345, 1);
		} finally { DebugExitRule(GrammarFileName, "op_2"); }
		return retval;

	}
	// $ANTLR end "op_2"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_1() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_1() {}

	// $ANTLR start "expression_1"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:347:1: expression_1 : ( '(' ( WS )? op_1 ( WS )? expression_1 ( WS )? ')' -> ^( T_OP_UNARY op_1 expression_1 ) | expression_atom );
	[GrammarRule("expression_1")]
	private AstParserRuleReturnScope<object, IToken> expression_1()
	{
		EnterRule_expression_1();
		EnterRule("expression_1", 46);
		TraceIn("expression_1", 46);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal239 = default(IToken);
	    IToken WS240 = default(IToken);
	    IToken WS242 = default(IToken);
	    IToken WS244 = default(IToken);
	    IToken char_literal245 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> op_1241 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_1243 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_atom246 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal239_tree = default(object);
	    object WS240_tree = default(object);
	    object WS242_tree = default(object);
	    object WS244_tree = default(object);
	    object char_literal245_tree = default(object);
	    RewriteRuleITokenStream stream_147=new RewriteRuleITokenStream(adaptor,"token 147");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_148=new RewriteRuleITokenStream(adaptor,"token 148");
	    RewriteRuleSubtreeStream stream_expression_1=new RewriteRuleSubtreeStream(adaptor,"rule expression_1");
	    RewriteRuleSubtreeStream stream_op_1=new RewriteRuleSubtreeStream(adaptor,"rule op_1");
		try { DebugEnterRule(GrammarFileName, "expression_1");
		DebugLocation(347, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:349:2: ( '(' ( WS )? op_1 ( WS )? expression_1 ( WS )? ')' -> ^( T_OP_UNARY op_1 expression_1 ) | expression_atom )
			int alt87=2;
			try { DebugEnterDecision(87, decisionCanBacktrack[87]);
			int LA87_0 = input.LA(1);

			if ((LA87_0==147))
			{
				switch (input.LA(2))
				{
				case WS:
					{
					int LA87_3 = input.LA(3);

					if ((LA87_3==150||LA87_3==152||LA87_3==165))
					{
						alt87 = 1;
					}
					else if ((LA87_3==SELECT))
					{
						alt87 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 87, 3, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 150:
				case 152:
				case 165:
					{
					alt87 = 1;
					}
					break;
				case CASE:
				case CAST:
				case CONVERT:
				case EXISTS:
				case NOT:
				case NUMBER:
				case SELECT:
				case SIMPLE_FILE:
				case STRING:
				case SYSTEMVAR:
				case TOKEN:
				case VARIABLE:
				case 147:
					{
					alt87 = 2;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 87, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else if (((LA87_0>=CASE && LA87_0<=CAST)||LA87_0==CONVERT||LA87_0==EXISTS||LA87_0==NUMBER||LA87_0==SIMPLE_FILE||(LA87_0>=STRING && LA87_0<=SYSTEMVAR)||LA87_0==TOKEN||LA87_0==VARIABLE))
			{
				alt87 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 87, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(87); }
			switch (alt87)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:349:4: '(' ( WS )? op_1 ( WS )? expression_1 ( WS )? ')'
				{
				DebugLocation(349, 4);
				char_literal239=(IToken)Match(input,147,Follow._147_in_expression_12132);  
				stream_147.Add(char_literal239);

				DebugLocation(349, 8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:349:8: ( WS )?
				int alt84=2;
				try { DebugEnterSubRule(84);
				try { DebugEnterDecision(84, decisionCanBacktrack[84]);
				int LA84_0 = input.LA(1);

				if ((LA84_0==WS))
				{
					alt84 = 1;
				}
				} finally { DebugExitDecision(84); }
				switch (alt84)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:349:8: WS
					{
					DebugLocation(349, 8);
					WS240=(IToken)Match(input,WS,Follow._WS_in_expression_12134);  
					stream_WS.Add(WS240);


					}
					break;

				}
				} finally { DebugExitSubRule(84); }

				DebugLocation(349, 12);
				PushFollow(Follow._op_1_in_expression_12137);
				op_1241=op_1();
				PopFollow();

				stream_op_1.Add(op_1241.Tree);
				DebugLocation(349, 17);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:349:17: ( WS )?
				int alt85=2;
				try { DebugEnterSubRule(85);
				try { DebugEnterDecision(85, decisionCanBacktrack[85]);
				int LA85_0 = input.LA(1);

				if ((LA85_0==WS))
				{
					alt85 = 1;
				}
				} finally { DebugExitDecision(85); }
				switch (alt85)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:349:17: WS
					{
					DebugLocation(349, 17);
					WS242=(IToken)Match(input,WS,Follow._WS_in_expression_12139);  
					stream_WS.Add(WS242);


					}
					break;

				}
				} finally { DebugExitSubRule(85); }

				DebugLocation(349, 21);
				PushFollow(Follow._expression_1_in_expression_12142);
				expression_1243=expression_1();
				PopFollow();

				stream_expression_1.Add(expression_1243.Tree);
				DebugLocation(349, 34);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:349:34: ( WS )?
				int alt86=2;
				try { DebugEnterSubRule(86);
				try { DebugEnterDecision(86, decisionCanBacktrack[86]);
				int LA86_0 = input.LA(1);

				if ((LA86_0==WS))
				{
					alt86 = 1;
				}
				} finally { DebugExitDecision(86); }
				switch (alt86)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:349:34: WS
					{
					DebugLocation(349, 34);
					WS244=(IToken)Match(input,WS,Follow._WS_in_expression_12144);  
					stream_WS.Add(WS244);


					}
					break;

				}
				} finally { DebugExitSubRule(86); }

				DebugLocation(349, 38);
				char_literal245=(IToken)Match(input,148,Follow._148_in_expression_12147);  
				stream_148.Add(char_literal245);



				{
				// AST REWRITE
				// elements: expression_1, op_1
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 349:42: -> ^( T_OP_UNARY op_1 expression_1 )
				{
					DebugLocation(349, 45);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:349:45: ^( T_OP_UNARY op_1 expression_1 )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(349, 47);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_UNARY, "T_OP_UNARY"), root_1);

					DebugLocation(349, 58);
					adaptor.AddChild(root_1, stream_op_1.NextTree());
					DebugLocation(349, 63);
					adaptor.AddChild(root_1, stream_expression_1.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:351:4: expression_atom
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(351, 4);
				PushFollow(Follow._expression_atom_in_expression_12164);
				expression_atom246=expression_atom();
				PopFollow();

				adaptor.AddChild(root_0, expression_atom246.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_1", 46);
			LeaveRule("expression_1", 46);
			LeaveRule_expression_1();
	    }
	 	DebugLocation(352, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_1"); }
		return retval;

	}
	// $ANTLR end "expression_1"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_1() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_1() {}

	// $ANTLR start "op_1"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:354:1: op_1 : ( '~' -> T_BITWISE_NOT | '+' -> T_PLUS | '-' -> T_MINUS );
	[GrammarRule("op_1")]
	private AstParserRuleReturnScope<object, IToken> op_1()
	{
		EnterRule_op_1();
		EnterRule("op_1", 47);
		TraceIn("op_1", 47);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal247 = default(IToken);
	    IToken char_literal248 = default(IToken);
	    IToken char_literal249 = default(IToken);

	    object char_literal247_tree = default(object);
	    object char_literal248_tree = default(object);
	    object char_literal249_tree = default(object);
	    RewriteRuleITokenStream stream_152=new RewriteRuleITokenStream(adaptor,"token 152");
	    RewriteRuleITokenStream stream_150=new RewriteRuleITokenStream(adaptor,"token 150");
	    RewriteRuleITokenStream stream_165=new RewriteRuleITokenStream(adaptor,"token 165");

		try { DebugEnterRule(GrammarFileName, "op_1");
		DebugLocation(354, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:354:6: ( '~' -> T_BITWISE_NOT | '+' -> T_PLUS | '-' -> T_MINUS )
			int alt88=3;
			try { DebugEnterDecision(88, decisionCanBacktrack[88]);
			switch (input.LA(1))
			{
			case 165:
				{
				alt88 = 1;
				}
				break;
			case 150:
				{
				alt88 = 2;
				}
				break;
			case 152:
				{
				alt88 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 88, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(88); }
			switch (alt88)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:354:8: '~'
				{
				DebugLocation(354, 8);
				char_literal247=(IToken)Match(input,165,Follow._165_in_op_12174);  
				stream_165.Add(char_literal247);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 354:12: -> T_BITWISE_NOT
				{
					DebugLocation(354, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_NOT, "T_BITWISE_NOT"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:355:5: '+'
				{
				DebugLocation(355, 5);
				char_literal248=(IToken)Match(input,150,Follow._150_in_op_12184);  
				stream_150.Add(char_literal248);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 355:9: -> T_PLUS
				{
					DebugLocation(355, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_PLUS, "T_PLUS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:356:4: '-'
				{
				DebugLocation(356, 4);
				char_literal249=(IToken)Match(input,152,Follow._152_in_op_12193);  
				stream_152.Add(char_literal249);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 356:8: -> T_MINUS
				{
					DebugLocation(356, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MINUS, "T_MINUS"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_1", 47);
			LeaveRule("op_1", 47);
			LeaveRule_op_1();
	    }
	 	DebugLocation(357, 1);
		} finally { DebugExitRule(GrammarFileName, "op_1"); }
		return retval;

	}
	// $ANTLR end "op_1"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_atom() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_atom() {}

	// $ANTLR start "expression_atom"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:359:1: expression_atom : ( NUMBER -> ^( T_INTEGER NUMBER ) | string | SYSTEMVAR -> ^( T_SYSTEMVAR SYSTEMVAR ) | variable | subquery | '(' expression ')' -> expression | functioncall_or_column | conversion | case | EXISTS ( WS )? '(' ( WS )? select_command ( WS )? ')' -> ^( T_EXISTS select_command ) );
	[GrammarRule("expression_atom")]
	private AstParserRuleReturnScope<object, IToken> expression_atom()
	{
		EnterRule_expression_atom();
		EnterRule("expression_atom", 48);
		TraceIn("expression_atom", 48);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken NUMBER250 = default(IToken);
	    IToken SYSTEMVAR252 = default(IToken);
	    IToken char_literal255 = default(IToken);
	    IToken char_literal257 = default(IToken);
	    IToken EXISTS261 = default(IToken);
	    IToken WS262 = default(IToken);
	    IToken char_literal263 = default(IToken);
	    IToken WS264 = default(IToken);
	    IToken WS266 = default(IToken);
	    IToken char_literal267 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> string251 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> variable253 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> subquery254 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression256 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> functioncall_or_column258 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> conversion259 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> case260 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> select_command265 = default(AstParserRuleReturnScope<object, IToken>);

	    object NUMBER250_tree = default(object);
	    object SYSTEMVAR252_tree = default(object);
	    object char_literal255_tree = default(object);
	    object char_literal257_tree = default(object);
	    object EXISTS261_tree = default(object);
	    object WS262_tree = default(object);
	    object char_literal263_tree = default(object);
	    object WS264_tree = default(object);
	    object WS266_tree = default(object);
	    object char_literal267_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_147=new RewriteRuleITokenStream(adaptor,"token 147");
	    RewriteRuleITokenStream stream_148=new RewriteRuleITokenStream(adaptor,"token 148");
	    RewriteRuleITokenStream stream_EXISTS=new RewriteRuleITokenStream(adaptor,"token EXISTS");
	    RewriteRuleITokenStream stream_SYSTEMVAR=new RewriteRuleITokenStream(adaptor,"token SYSTEMVAR");
	    RewriteRuleITokenStream stream_NUMBER=new RewriteRuleITokenStream(adaptor,"token NUMBER");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_select_command=new RewriteRuleSubtreeStream(adaptor,"rule select_command");
		try { DebugEnterRule(GrammarFileName, "expression_atom");
		DebugLocation(359, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:360:2: ( NUMBER -> ^( T_INTEGER NUMBER ) | string | SYSTEMVAR -> ^( T_SYSTEMVAR SYSTEMVAR ) | variable | subquery | '(' expression ')' -> expression | functioncall_or_column | conversion | case | EXISTS ( WS )? '(' ( WS )? select_command ( WS )? ')' -> ^( T_EXISTS select_command ) )
			int alt92=10;
			try { DebugEnterDecision(92, decisionCanBacktrack[92]);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt92 = 1;
				}
				break;
			case STRING:
				{
				alt92 = 2;
				}
				break;
			case SYSTEMVAR:
				{
				alt92 = 3;
				}
				break;
			case VARIABLE:
				{
				alt92 = 4;
				}
				break;
			case 147:
				{
				int LA92_5 = input.LA(2);

				if ((LA92_5==SELECT||LA92_5==WS))
				{
					alt92 = 5;
				}
				else if (((LA92_5>=CASE && LA92_5<=CAST)||LA92_5==CONVERT||LA92_5==EXISTS||(LA92_5>=NOT && LA92_5<=NUMBER)||LA92_5==SIMPLE_FILE||(LA92_5>=STRING && LA92_5<=SYSTEMVAR)||LA92_5==TOKEN||LA92_5==VARIABLE||LA92_5==147))
				{
					alt92 = 6;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 92, 5, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SIMPLE_FILE:
			case TOKEN:
				{
				alt92 = 7;
				}
				break;
			case CAST:
			case CONVERT:
				{
				alt92 = 8;
				}
				break;
			case CASE:
				{
				alt92 = 9;
				}
				break;
			case EXISTS:
				{
				alt92 = 10;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 92, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(92); }
			switch (alt92)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:360:4: NUMBER
				{
				DebugLocation(360, 4);
				NUMBER250=(IToken)Match(input,NUMBER,Follow._NUMBER_in_expression_atom2208);  
				stream_NUMBER.Add(NUMBER250);



				{
				// AST REWRITE
				// elements: NUMBER
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 360:11: -> ^( T_INTEGER NUMBER )
				{
					DebugLocation(360, 14);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:360:14: ^( T_INTEGER NUMBER )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(360, 16);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_INTEGER, "T_INTEGER"), root_1);

					DebugLocation(360, 26);
					adaptor.AddChild(root_1, stream_NUMBER.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:361:4: string
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(361, 4);
				PushFollow(Follow._string_in_expression_atom2221);
				string251=@string();
				PopFollow();

				adaptor.AddChild(root_0, string251.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:362:4: SYSTEMVAR
				{
				DebugLocation(362, 4);
				SYSTEMVAR252=(IToken)Match(input,SYSTEMVAR,Follow._SYSTEMVAR_in_expression_atom2226);  
				stream_SYSTEMVAR.Add(SYSTEMVAR252);



				{
				// AST REWRITE
				// elements: SYSTEMVAR
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 362:14: -> ^( T_SYSTEMVAR SYSTEMVAR )
				{
					DebugLocation(362, 17);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:362:17: ^( T_SYSTEMVAR SYSTEMVAR )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(362, 19);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SYSTEMVAR, "T_SYSTEMVAR"), root_1);

					DebugLocation(362, 31);
					adaptor.AddChild(root_1, stream_SYSTEMVAR.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:363:4: variable
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(363, 4);
				PushFollow(Follow._variable_in_expression_atom2239);
				variable253=variable();
				PopFollow();

				adaptor.AddChild(root_0, variable253.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:364:4: subquery
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(364, 4);
				PushFollow(Follow._subquery_in_expression_atom2244);
				subquery254=subquery();
				PopFollow();

				adaptor.AddChild(root_0, subquery254.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:365:4: '(' expression ')'
				{
				DebugLocation(365, 4);
				char_literal255=(IToken)Match(input,147,Follow._147_in_expression_atom2249);  
				stream_147.Add(char_literal255);

				DebugLocation(365, 8);
				PushFollow(Follow._expression_in_expression_atom2251);
				expression256=expression();
				PopFollow();

				stream_expression.Add(expression256.Tree);
				DebugLocation(365, 19);
				char_literal257=(IToken)Match(input,148,Follow._148_in_expression_atom2253);  
				stream_148.Add(char_literal257);



				{
				// AST REWRITE
				// elements: expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 365:23: -> expression
				{
					DebugLocation(365, 26);
					adaptor.AddChild(root_0, stream_expression.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:366:4: functioncall_or_column
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(366, 4);
				PushFollow(Follow._functioncall_or_column_in_expression_atom2262);
				functioncall_or_column258=functioncall_or_column();
				PopFollow();

				adaptor.AddChild(root_0, functioncall_or_column258.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:367:4: conversion
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(367, 4);
				PushFollow(Follow._conversion_in_expression_atom2267);
				conversion259=conversion();
				PopFollow();

				adaptor.AddChild(root_0, conversion259.Tree);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:368:4: case
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(368, 4);
				PushFollow(Follow._case_in_expression_atom2272);
				case260=@case();
				PopFollow();

				adaptor.AddChild(root_0, case260.Tree);

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:369:4: EXISTS ( WS )? '(' ( WS )? select_command ( WS )? ')'
				{
				DebugLocation(369, 4);
				EXISTS261=(IToken)Match(input,EXISTS,Follow._EXISTS_in_expression_atom2277);  
				stream_EXISTS.Add(EXISTS261);

				DebugLocation(369, 11);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:369:11: ( WS )?
				int alt89=2;
				try { DebugEnterSubRule(89);
				try { DebugEnterDecision(89, decisionCanBacktrack[89]);
				int LA89_0 = input.LA(1);

				if ((LA89_0==WS))
				{
					alt89 = 1;
				}
				} finally { DebugExitDecision(89); }
				switch (alt89)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:369:11: WS
					{
					DebugLocation(369, 11);
					WS262=(IToken)Match(input,WS,Follow._WS_in_expression_atom2279);  
					stream_WS.Add(WS262);


					}
					break;

				}
				} finally { DebugExitSubRule(89); }

				DebugLocation(369, 15);
				char_literal263=(IToken)Match(input,147,Follow._147_in_expression_atom2282);  
				stream_147.Add(char_literal263);

				DebugLocation(369, 19);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:369:19: ( WS )?
				int alt90=2;
				try { DebugEnterSubRule(90);
				try { DebugEnterDecision(90, decisionCanBacktrack[90]);
				int LA90_0 = input.LA(1);

				if ((LA90_0==WS))
				{
					alt90 = 1;
				}
				} finally { DebugExitDecision(90); }
				switch (alt90)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:369:19: WS
					{
					DebugLocation(369, 19);
					WS264=(IToken)Match(input,WS,Follow._WS_in_expression_atom2284);  
					stream_WS.Add(WS264);


					}
					break;

				}
				} finally { DebugExitSubRule(90); }

				DebugLocation(369, 23);
				PushFollow(Follow._select_command_in_expression_atom2287);
				select_command265=select_command();
				PopFollow();

				stream_select_command.Add(select_command265.Tree);
				DebugLocation(369, 38);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:369:38: ( WS )?
				int alt91=2;
				try { DebugEnterSubRule(91);
				try { DebugEnterDecision(91, decisionCanBacktrack[91]);
				int LA91_0 = input.LA(1);

				if ((LA91_0==WS))
				{
					alt91 = 1;
				}
				} finally { DebugExitDecision(91); }
				switch (alt91)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:369:38: WS
					{
					DebugLocation(369, 38);
					WS266=(IToken)Match(input,WS,Follow._WS_in_expression_atom2289);  
					stream_WS.Add(WS266);


					}
					break;

				}
				} finally { DebugExitSubRule(91); }

				DebugLocation(369, 42);
				char_literal267=(IToken)Match(input,148,Follow._148_in_expression_atom2292);  
				stream_148.Add(char_literal267);



				{
				// AST REWRITE
				// elements: select_command
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 369:46: -> ^( T_EXISTS select_command )
				{
					DebugLocation(369, 49);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:369:49: ^( T_EXISTS select_command )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(369, 51);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_EXISTS, "T_EXISTS"), root_1);

					DebugLocation(369, 60);
					adaptor.AddChild(root_1, stream_select_command.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_atom", 48);
			LeaveRule("expression_atom", 48);
			LeaveRule_expression_atom();
	    }
	 	DebugLocation(370, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_atom"); }
		return retval;

	}
	// $ANTLR end "expression_atom"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_functioncall_or_column() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_functioncall_or_column() {}

	// $ANTLR start "functioncall_or_column"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:373:1: functioncall_or_column : ( TOKEN ( WS )? '(' ( WS )? ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )? ')' -> ^( T_FUNCTIONCALL TOKEN ( expression )* ) | TOKEN ( WS )? '(' ( WS )? '*' ( WS )? ')' -> ^( T_FUNCTIONCALL TOKEN '*' ) | SIMPLE_FILE -> ^( T_COLUMN SIMPLE_FILE ) );
	[GrammarRule("functioncall_or_column")]
	private AstParserRuleReturnScope<object, IToken> functioncall_or_column()
	{
		EnterRule_functioncall_or_column();
		EnterRule("functioncall_or_column", 49);
		TraceIn("functioncall_or_column", 49);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN268 = default(IToken);
	    IToken WS269 = default(IToken);
	    IToken char_literal270 = default(IToken);
	    IToken WS271 = default(IToken);
	    IToken WS273 = default(IToken);
	    IToken char_literal274 = default(IToken);
	    IToken WS275 = default(IToken);
	    IToken WS277 = default(IToken);
	    IToken char_literal278 = default(IToken);
	    IToken TOKEN279 = default(IToken);
	    IToken WS280 = default(IToken);
	    IToken char_literal281 = default(IToken);
	    IToken WS282 = default(IToken);
	    IToken char_literal283 = default(IToken);
	    IToken WS284 = default(IToken);
	    IToken char_literal285 = default(IToken);
	    IToken SIMPLE_FILE286 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression272 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression276 = default(AstParserRuleReturnScope<object, IToken>);

	    object TOKEN268_tree = default(object);
	    object WS269_tree = default(object);
	    object char_literal270_tree = default(object);
	    object WS271_tree = default(object);
	    object WS273_tree = default(object);
	    object char_literal274_tree = default(object);
	    object WS275_tree = default(object);
	    object WS277_tree = default(object);
	    object char_literal278_tree = default(object);
	    object TOKEN279_tree = default(object);
	    object WS280_tree = default(object);
	    object char_literal281_tree = default(object);
	    object WS282_tree = default(object);
	    object char_literal283_tree = default(object);
	    object WS284_tree = default(object);
	    object char_literal285_tree = default(object);
	    object SIMPLE_FILE286_tree = default(object);
	    RewriteRuleITokenStream stream_151=new RewriteRuleITokenStream(adaptor,"token 151");
	    RewriteRuleITokenStream stream_147=new RewriteRuleITokenStream(adaptor,"token 147");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_SIMPLE_FILE=new RewriteRuleITokenStream(adaptor,"token SIMPLE_FILE");
	    RewriteRuleITokenStream stream_148=new RewriteRuleITokenStream(adaptor,"token 148");
	    RewriteRuleITokenStream stream_149=new RewriteRuleITokenStream(adaptor,"token 149");
	    RewriteRuleITokenStream stream_TOKEN=new RewriteRuleITokenStream(adaptor,"token TOKEN");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "functioncall_or_column");
		DebugLocation(373, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:374:2: ( TOKEN ( WS )? '(' ( WS )? ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )? ')' -> ^( T_FUNCTIONCALL TOKEN ( expression )* ) | TOKEN ( WS )? '(' ( WS )? '*' ( WS )? ')' -> ^( T_FUNCTIONCALL TOKEN '*' ) | SIMPLE_FILE -> ^( T_COLUMN SIMPLE_FILE ) )
			int alt103=3;
			try { DebugEnterDecision(103, decisionCanBacktrack[103]);
			int LA103_0 = input.LA(1);

			if ((LA103_0==TOKEN))
			{
				int LA103_1 = input.LA(2);

				if ((LA103_1==WS))
				{
					int LA103_3 = input.LA(3);

					if ((LA103_3==147))
					{
						switch (input.LA(4))
						{
						case WS:
							{
							int LA103_5 = input.LA(5);

							if (((LA103_5>=CASE && LA103_5<=CAST)||LA103_5==CONVERT||LA103_5==EXISTS||(LA103_5>=NOT && LA103_5<=NUMBER)||LA103_5==SIMPLE_FILE||(LA103_5>=STRING && LA103_5<=SYSTEMVAR)||LA103_5==TOKEN||LA103_5==VARIABLE||(LA103_5>=147 && LA103_5<=148)))
							{
								alt103 = 1;
							}
							else if ((LA103_5==149))
							{
								alt103 = 2;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 103, 5, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case CASE:
						case CAST:
						case CONVERT:
						case EXISTS:
						case NOT:
						case NUMBER:
						case SIMPLE_FILE:
						case STRING:
						case SYSTEMVAR:
						case TOKEN:
						case VARIABLE:
						case 147:
						case 148:
							{
							alt103 = 1;
							}
							break;
						case 149:
							{
							alt103 = 2;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 103, 4, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 103, 3, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA103_1==147))
				{
					switch (input.LA(3))
					{
					case WS:
						{
						int LA103_5 = input.LA(4);

						if (((LA103_5>=CASE && LA103_5<=CAST)||LA103_5==CONVERT||LA103_5==EXISTS||(LA103_5>=NOT && LA103_5<=NUMBER)||LA103_5==SIMPLE_FILE||(LA103_5>=STRING && LA103_5<=SYSTEMVAR)||LA103_5==TOKEN||LA103_5==VARIABLE||(LA103_5>=147 && LA103_5<=148)))
						{
							alt103 = 1;
						}
						else if ((LA103_5==149))
						{
							alt103 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 103, 5, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case CASE:
					case CAST:
					case CONVERT:
					case EXISTS:
					case NOT:
					case NUMBER:
					case SIMPLE_FILE:
					case STRING:
					case SYSTEMVAR:
					case TOKEN:
					case VARIABLE:
					case 147:
					case 148:
						{
						alt103 = 1;
						}
						break;
					case 149:
						{
						alt103 = 2;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 103, 4, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 103, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA103_0==SIMPLE_FILE))
			{
				alt103 = 3;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 103, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(103); }
			switch (alt103)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:374:4: TOKEN ( WS )? '(' ( WS )? ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )? ')'
				{
				DebugLocation(374, 4);
				TOKEN268=(IToken)Match(input,TOKEN,Follow._TOKEN_in_functioncall_or_column2312);  
				stream_TOKEN.Add(TOKEN268);

				DebugLocation(374, 10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:374:10: ( WS )?
				int alt93=2;
				try { DebugEnterSubRule(93);
				try { DebugEnterDecision(93, decisionCanBacktrack[93]);
				int LA93_0 = input.LA(1);

				if ((LA93_0==WS))
				{
					alt93 = 1;
				}
				} finally { DebugExitDecision(93); }
				switch (alt93)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:374:10: WS
					{
					DebugLocation(374, 10);
					WS269=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2314);  
					stream_WS.Add(WS269);


					}
					break;

				}
				} finally { DebugExitSubRule(93); }

				DebugLocation(374, 14);
				char_literal270=(IToken)Match(input,147,Follow._147_in_functioncall_or_column2317);  
				stream_147.Add(char_literal270);

				DebugLocation(374, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:374:18: ( WS )?
				int alt94=2;
				try { DebugEnterSubRule(94);
				try { DebugEnterDecision(94, decisionCanBacktrack[94]);
				int LA94_0 = input.LA(1);

				if ((LA94_0==WS))
				{
					alt94 = 1;
				}
				} finally { DebugExitDecision(94); }
				switch (alt94)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:374:18: WS
					{
					DebugLocation(374, 18);
					WS271=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2319);  
					stream_WS.Add(WS271);


					}
					break;

				}
				} finally { DebugExitSubRule(94); }

				DebugLocation(374, 22);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:374:22: ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )?
				int alt99=2;
				try { DebugEnterSubRule(99);
				try { DebugEnterDecision(99, decisionCanBacktrack[99]);
				int LA99_0 = input.LA(1);

				if (((LA99_0>=CASE && LA99_0<=CAST)||LA99_0==CONVERT||LA99_0==EXISTS||(LA99_0>=NOT && LA99_0<=NUMBER)||LA99_0==SIMPLE_FILE||(LA99_0>=STRING && LA99_0<=SYSTEMVAR)||LA99_0==TOKEN||LA99_0==VARIABLE||LA99_0==147))
				{
					alt99 = 1;
				}
				} finally { DebugExitDecision(99); }
				switch (alt99)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:374:23: expression ( WS )? ( ',' ( WS )? expression ( WS )? )*
					{
					DebugLocation(374, 23);
					PushFollow(Follow._expression_in_functioncall_or_column2323);
					expression272=expression();
					PopFollow();

					stream_expression.Add(expression272.Tree);
					DebugLocation(374, 34);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:374:34: ( WS )?
					int alt95=2;
					try { DebugEnterSubRule(95);
					try { DebugEnterDecision(95, decisionCanBacktrack[95]);
					int LA95_0 = input.LA(1);

					if ((LA95_0==WS))
					{
						alt95 = 1;
					}
					} finally { DebugExitDecision(95); }
					switch (alt95)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:374:34: WS
						{
						DebugLocation(374, 34);
						WS273=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2325);  
						stream_WS.Add(WS273);


						}
						break;

					}
					} finally { DebugExitSubRule(95); }

					DebugLocation(374, 38);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:374:38: ( ',' ( WS )? expression ( WS )? )*
					try { DebugEnterSubRule(98);
					while (true)
					{
						int alt98=2;
						try { DebugEnterDecision(98, decisionCanBacktrack[98]);
						int LA98_0 = input.LA(1);

						if ((LA98_0==151))
						{
							alt98 = 1;
						}


						} finally { DebugExitDecision(98); }
						switch ( alt98 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:374:39: ',' ( WS )? expression ( WS )?
							{
							DebugLocation(374, 39);
							char_literal274=(IToken)Match(input,151,Follow._151_in_functioncall_or_column2329);  
							stream_151.Add(char_literal274);

							DebugLocation(374, 43);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:374:43: ( WS )?
							int alt96=2;
							try { DebugEnterSubRule(96);
							try { DebugEnterDecision(96, decisionCanBacktrack[96]);
							int LA96_0 = input.LA(1);

							if ((LA96_0==WS))
							{
								alt96 = 1;
							}
							} finally { DebugExitDecision(96); }
							switch (alt96)
							{
							case 1:
								DebugEnterAlt(1);
								// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:374:43: WS
								{
								DebugLocation(374, 43);
								WS275=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2331);  
								stream_WS.Add(WS275);


								}
								break;

							}
							} finally { DebugExitSubRule(96); }

							DebugLocation(374, 47);
							PushFollow(Follow._expression_in_functioncall_or_column2334);
							expression276=expression();
							PopFollow();

							stream_expression.Add(expression276.Tree);
							DebugLocation(374, 58);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:374:58: ( WS )?
							int alt97=2;
							try { DebugEnterSubRule(97);
							try { DebugEnterDecision(97, decisionCanBacktrack[97]);
							int LA97_0 = input.LA(1);

							if ((LA97_0==WS))
							{
								alt97 = 1;
							}
							} finally { DebugExitDecision(97); }
							switch (alt97)
							{
							case 1:
								DebugEnterAlt(1);
								// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:374:58: WS
								{
								DebugLocation(374, 58);
								WS277=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2336);  
								stream_WS.Add(WS277);


								}
								break;

							}
							} finally { DebugExitSubRule(97); }


							}
							break;

						default:
							goto loop98;
						}
					}

					loop98:
						;

					} finally { DebugExitSubRule(98); }


					}
					break;

				}
				} finally { DebugExitSubRule(99); }

				DebugLocation(374, 66);
				char_literal278=(IToken)Match(input,148,Follow._148_in_functioncall_or_column2343);  
				stream_148.Add(char_literal278);



				{
				// AST REWRITE
				// elements: expression, TOKEN
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 374:70: -> ^( T_FUNCTIONCALL TOKEN ( expression )* )
				{
					DebugLocation(374, 73);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:374:73: ^( T_FUNCTIONCALL TOKEN ( expression )* )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(374, 75);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(374, 90);
					adaptor.AddChild(root_1, stream_TOKEN.NextNode());
					DebugLocation(374, 96);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:374:96: ( expression )*
					while ( stream_expression.HasNext )
					{
						DebugLocation(374, 96);
						adaptor.AddChild(root_1, stream_expression.NextTree());

					}
					stream_expression.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:375:4: TOKEN ( WS )? '(' ( WS )? '*' ( WS )? ')'
				{
				DebugLocation(375, 4);
				TOKEN279=(IToken)Match(input,TOKEN,Follow._TOKEN_in_functioncall_or_column2359);  
				stream_TOKEN.Add(TOKEN279);

				DebugLocation(375, 10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:375:10: ( WS )?
				int alt100=2;
				try { DebugEnterSubRule(100);
				try { DebugEnterDecision(100, decisionCanBacktrack[100]);
				int LA100_0 = input.LA(1);

				if ((LA100_0==WS))
				{
					alt100 = 1;
				}
				} finally { DebugExitDecision(100); }
				switch (alt100)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:375:10: WS
					{
					DebugLocation(375, 10);
					WS280=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2361);  
					stream_WS.Add(WS280);


					}
					break;

				}
				} finally { DebugExitSubRule(100); }

				DebugLocation(375, 14);
				char_literal281=(IToken)Match(input,147,Follow._147_in_functioncall_or_column2364);  
				stream_147.Add(char_literal281);

				DebugLocation(375, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:375:18: ( WS )?
				int alt101=2;
				try { DebugEnterSubRule(101);
				try { DebugEnterDecision(101, decisionCanBacktrack[101]);
				int LA101_0 = input.LA(1);

				if ((LA101_0==WS))
				{
					alt101 = 1;
				}
				} finally { DebugExitDecision(101); }
				switch (alt101)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:375:18: WS
					{
					DebugLocation(375, 18);
					WS282=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2366);  
					stream_WS.Add(WS282);


					}
					break;

				}
				} finally { DebugExitSubRule(101); }

				DebugLocation(375, 22);
				char_literal283=(IToken)Match(input,149,Follow._149_in_functioncall_or_column2369);  
				stream_149.Add(char_literal283);

				DebugLocation(375, 26);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:375:26: ( WS )?
				int alt102=2;
				try { DebugEnterSubRule(102);
				try { DebugEnterDecision(102, decisionCanBacktrack[102]);
				int LA102_0 = input.LA(1);

				if ((LA102_0==WS))
				{
					alt102 = 1;
				}
				} finally { DebugExitDecision(102); }
				switch (alt102)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:375:26: WS
					{
					DebugLocation(375, 26);
					WS284=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2371);  
					stream_WS.Add(WS284);


					}
					break;

				}
				} finally { DebugExitSubRule(102); }

				DebugLocation(375, 30);
				char_literal285=(IToken)Match(input,148,Follow._148_in_functioncall_or_column2374);  
				stream_148.Add(char_literal285);



				{
				// AST REWRITE
				// elements: 149, TOKEN
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 375:34: -> ^( T_FUNCTIONCALL TOKEN '*' )
				{
					DebugLocation(375, 37);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:375:37: ^( T_FUNCTIONCALL TOKEN '*' )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(375, 39);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(375, 54);
					adaptor.AddChild(root_1, stream_TOKEN.NextNode());
					DebugLocation(375, 60);
					adaptor.AddChild(root_1, stream_149.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:377:4: SIMPLE_FILE
				{
				DebugLocation(377, 4);
				SIMPLE_FILE286=(IToken)Match(input,SIMPLE_FILE,Follow._SIMPLE_FILE_in_functioncall_or_column2391);  
				stream_SIMPLE_FILE.Add(SIMPLE_FILE286);



				{
				// AST REWRITE
				// elements: SIMPLE_FILE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 377:16: -> ^( T_COLUMN SIMPLE_FILE )
				{
					DebugLocation(377, 19);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:377:19: ^( T_COLUMN SIMPLE_FILE )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(377, 21);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_COLUMN, "T_COLUMN"), root_1);

					DebugLocation(377, 30);
					adaptor.AddChild(root_1, stream_SIMPLE_FILE.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("functioncall_or_column", 49);
			LeaveRule("functioncall_or_column", 49);
			LeaveRule_functioncall_or_column();
	    }
	 	DebugLocation(378, 1);
		} finally { DebugExitRule(GrammarFileName, "functioncall_or_column"); }
		return retval;

	}
	// $ANTLR end "functioncall_or_column"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_conversion() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_conversion() {}

	// $ANTLR start "conversion"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:380:1: conversion : ( CONVERT ( WS )? '(' ( WS )? TOKEN ( WS )? ',' ( WS )? expression ( WS )? ')' -> ^( T_CONVERT TOKEN expression ) | CAST ( WS )? '(' ( WS )? expression WS AS WS datatype ( WS )? ')' -> ^( T_CONVERT TOKEN expression ) );
	[GrammarRule("conversion")]
	private AstParserRuleReturnScope<object, IToken> conversion()
	{
		EnterRule_conversion();
		EnterRule("conversion", 50);
		TraceIn("conversion", 50);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken CONVERT287 = default(IToken);
	    IToken WS288 = default(IToken);
	    IToken char_literal289 = default(IToken);
	    IToken WS290 = default(IToken);
	    IToken TOKEN291 = default(IToken);
	    IToken WS292 = default(IToken);
	    IToken char_literal293 = default(IToken);
	    IToken WS294 = default(IToken);
	    IToken WS296 = default(IToken);
	    IToken char_literal297 = default(IToken);
	    IToken CAST298 = default(IToken);
	    IToken WS299 = default(IToken);
	    IToken char_literal300 = default(IToken);
	    IToken WS301 = default(IToken);
	    IToken WS303 = default(IToken);
	    IToken AS304 = default(IToken);
	    IToken WS305 = default(IToken);
	    IToken WS307 = default(IToken);
	    IToken char_literal308 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression295 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression302 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> datatype306 = default(AstParserRuleReturnScope<object, IToken>);

	    object CONVERT287_tree = default(object);
	    object WS288_tree = default(object);
	    object char_literal289_tree = default(object);
	    object WS290_tree = default(object);
	    object TOKEN291_tree = default(object);
	    object WS292_tree = default(object);
	    object char_literal293_tree = default(object);
	    object WS294_tree = default(object);
	    object WS296_tree = default(object);
	    object char_literal297_tree = default(object);
	    object CAST298_tree = default(object);
	    object WS299_tree = default(object);
	    object char_literal300_tree = default(object);
	    object WS301_tree = default(object);
	    object WS303_tree = default(object);
	    object AS304_tree = default(object);
	    object WS305_tree = default(object);
	    object WS307_tree = default(object);
	    object char_literal308_tree = default(object);
	    RewriteRuleITokenStream stream_CAST=new RewriteRuleITokenStream(adaptor,"token CAST");
	    RewriteRuleITokenStream stream_AS=new RewriteRuleITokenStream(adaptor,"token AS");
	    RewriteRuleITokenStream stream_151=new RewriteRuleITokenStream(adaptor,"token 151");
	    RewriteRuleITokenStream stream_147=new RewriteRuleITokenStream(adaptor,"token 147");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_148=new RewriteRuleITokenStream(adaptor,"token 148");
	    RewriteRuleITokenStream stream_CONVERT=new RewriteRuleITokenStream(adaptor,"token CONVERT");
	    RewriteRuleITokenStream stream_TOKEN=new RewriteRuleITokenStream(adaptor,"token TOKEN");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_datatype=new RewriteRuleSubtreeStream(adaptor,"rule datatype");
		try { DebugEnterRule(GrammarFileName, "conversion");
		DebugLocation(380, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:381:2: ( CONVERT ( WS )? '(' ( WS )? TOKEN ( WS )? ',' ( WS )? expression ( WS )? ')' -> ^( T_CONVERT TOKEN expression ) | CAST ( WS )? '(' ( WS )? expression WS AS WS datatype ( WS )? ')' -> ^( T_CONVERT TOKEN expression ) )
			int alt112=2;
			try { DebugEnterDecision(112, decisionCanBacktrack[112]);
			int LA112_0 = input.LA(1);

			if ((LA112_0==CONVERT))
			{
				alt112 = 1;
			}
			else if ((LA112_0==CAST))
			{
				alt112 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 112, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(112); }
			switch (alt112)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:381:4: CONVERT ( WS )? '(' ( WS )? TOKEN ( WS )? ',' ( WS )? expression ( WS )? ')'
				{
				DebugLocation(381, 4);
				CONVERT287=(IToken)Match(input,CONVERT,Follow._CONVERT_in_conversion2411);  
				stream_CONVERT.Add(CONVERT287);

				DebugLocation(381, 12);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:381:12: ( WS )?
				int alt104=2;
				try { DebugEnterSubRule(104);
				try { DebugEnterDecision(104, decisionCanBacktrack[104]);
				int LA104_0 = input.LA(1);

				if ((LA104_0==WS))
				{
					alt104 = 1;
				}
				} finally { DebugExitDecision(104); }
				switch (alt104)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:381:12: WS
					{
					DebugLocation(381, 12);
					WS288=(IToken)Match(input,WS,Follow._WS_in_conversion2413);  
					stream_WS.Add(WS288);


					}
					break;

				}
				} finally { DebugExitSubRule(104); }

				DebugLocation(381, 16);
				char_literal289=(IToken)Match(input,147,Follow._147_in_conversion2416);  
				stream_147.Add(char_literal289);

				DebugLocation(381, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:381:20: ( WS )?
				int alt105=2;
				try { DebugEnterSubRule(105);
				try { DebugEnterDecision(105, decisionCanBacktrack[105]);
				int LA105_0 = input.LA(1);

				if ((LA105_0==WS))
				{
					alt105 = 1;
				}
				} finally { DebugExitDecision(105); }
				switch (alt105)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:381:20: WS
					{
					DebugLocation(381, 20);
					WS290=(IToken)Match(input,WS,Follow._WS_in_conversion2418);  
					stream_WS.Add(WS290);


					}
					break;

				}
				} finally { DebugExitSubRule(105); }

				DebugLocation(381, 24);
				TOKEN291=(IToken)Match(input,TOKEN,Follow._TOKEN_in_conversion2421);  
				stream_TOKEN.Add(TOKEN291);

				DebugLocation(381, 30);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:381:30: ( WS )?
				int alt106=2;
				try { DebugEnterSubRule(106);
				try { DebugEnterDecision(106, decisionCanBacktrack[106]);
				int LA106_0 = input.LA(1);

				if ((LA106_0==WS))
				{
					alt106 = 1;
				}
				} finally { DebugExitDecision(106); }
				switch (alt106)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:381:30: WS
					{
					DebugLocation(381, 30);
					WS292=(IToken)Match(input,WS,Follow._WS_in_conversion2423);  
					stream_WS.Add(WS292);


					}
					break;

				}
				} finally { DebugExitSubRule(106); }

				DebugLocation(381, 34);
				char_literal293=(IToken)Match(input,151,Follow._151_in_conversion2426);  
				stream_151.Add(char_literal293);

				DebugLocation(381, 38);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:381:38: ( WS )?
				int alt107=2;
				try { DebugEnterSubRule(107);
				try { DebugEnterDecision(107, decisionCanBacktrack[107]);
				int LA107_0 = input.LA(1);

				if ((LA107_0==WS))
				{
					alt107 = 1;
				}
				} finally { DebugExitDecision(107); }
				switch (alt107)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:381:38: WS
					{
					DebugLocation(381, 38);
					WS294=(IToken)Match(input,WS,Follow._WS_in_conversion2428);  
					stream_WS.Add(WS294);


					}
					break;

				}
				} finally { DebugExitSubRule(107); }

				DebugLocation(381, 42);
				PushFollow(Follow._expression_in_conversion2431);
				expression295=expression();
				PopFollow();

				stream_expression.Add(expression295.Tree);
				DebugLocation(381, 53);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:381:53: ( WS )?
				int alt108=2;
				try { DebugEnterSubRule(108);
				try { DebugEnterDecision(108, decisionCanBacktrack[108]);
				int LA108_0 = input.LA(1);

				if ((LA108_0==WS))
				{
					alt108 = 1;
				}
				} finally { DebugExitDecision(108); }
				switch (alt108)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:381:53: WS
					{
					DebugLocation(381, 53);
					WS296=(IToken)Match(input,WS,Follow._WS_in_conversion2433);  
					stream_WS.Add(WS296);


					}
					break;

				}
				} finally { DebugExitSubRule(108); }

				DebugLocation(381, 57);
				char_literal297=(IToken)Match(input,148,Follow._148_in_conversion2436);  
				stream_148.Add(char_literal297);



				{
				// AST REWRITE
				// elements: expression, TOKEN
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 381:61: -> ^( T_CONVERT TOKEN expression )
				{
					DebugLocation(381, 64);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:381:64: ^( T_CONVERT TOKEN expression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(381, 66);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CONVERT, "T_CONVERT"), root_1);

					DebugLocation(381, 76);
					adaptor.AddChild(root_1, stream_TOKEN.NextNode());
					DebugLocation(381, 82);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:382:4: CAST ( WS )? '(' ( WS )? expression WS AS WS datatype ( WS )? ')'
				{
				DebugLocation(382, 4);
				CAST298=(IToken)Match(input,CAST,Follow._CAST_in_conversion2451);  
				stream_CAST.Add(CAST298);

				DebugLocation(382, 9);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:382:9: ( WS )?
				int alt109=2;
				try { DebugEnterSubRule(109);
				try { DebugEnterDecision(109, decisionCanBacktrack[109]);
				int LA109_0 = input.LA(1);

				if ((LA109_0==WS))
				{
					alt109 = 1;
				}
				} finally { DebugExitDecision(109); }
				switch (alt109)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:382:9: WS
					{
					DebugLocation(382, 9);
					WS299=(IToken)Match(input,WS,Follow._WS_in_conversion2453);  
					stream_WS.Add(WS299);


					}
					break;

				}
				} finally { DebugExitSubRule(109); }

				DebugLocation(382, 13);
				char_literal300=(IToken)Match(input,147,Follow._147_in_conversion2456);  
				stream_147.Add(char_literal300);

				DebugLocation(382, 17);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:382:17: ( WS )?
				int alt110=2;
				try { DebugEnterSubRule(110);
				try { DebugEnterDecision(110, decisionCanBacktrack[110]);
				int LA110_0 = input.LA(1);

				if ((LA110_0==WS))
				{
					alt110 = 1;
				}
				} finally { DebugExitDecision(110); }
				switch (alt110)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:382:17: WS
					{
					DebugLocation(382, 17);
					WS301=(IToken)Match(input,WS,Follow._WS_in_conversion2458);  
					stream_WS.Add(WS301);


					}
					break;

				}
				} finally { DebugExitSubRule(110); }

				DebugLocation(382, 21);
				PushFollow(Follow._expression_in_conversion2461);
				expression302=expression();
				PopFollow();

				stream_expression.Add(expression302.Tree);
				DebugLocation(382, 32);
				WS303=(IToken)Match(input,WS,Follow._WS_in_conversion2463);  
				stream_WS.Add(WS303);

				DebugLocation(382, 35);
				AS304=(IToken)Match(input,AS,Follow._AS_in_conversion2465);  
				stream_AS.Add(AS304);

				DebugLocation(382, 38);
				WS305=(IToken)Match(input,WS,Follow._WS_in_conversion2467);  
				stream_WS.Add(WS305);

				DebugLocation(382, 41);
				PushFollow(Follow._datatype_in_conversion2469);
				datatype306=datatype();
				PopFollow();

				stream_datatype.Add(datatype306.Tree);
				DebugLocation(382, 50);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:382:50: ( WS )?
				int alt111=2;
				try { DebugEnterSubRule(111);
				try { DebugEnterDecision(111, decisionCanBacktrack[111]);
				int LA111_0 = input.LA(1);

				if ((LA111_0==WS))
				{
					alt111 = 1;
				}
				} finally { DebugExitDecision(111); }
				switch (alt111)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:382:50: WS
					{
					DebugLocation(382, 50);
					WS307=(IToken)Match(input,WS,Follow._WS_in_conversion2471);  
					stream_WS.Add(WS307);


					}
					break;

				}
				} finally { DebugExitSubRule(111); }

				DebugLocation(382, 54);
				char_literal308=(IToken)Match(input,148,Follow._148_in_conversion2474);  
				stream_148.Add(char_literal308);



				{
				// AST REWRITE
				// elements: expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 382:58: -> ^( T_CONVERT TOKEN expression )
				{
					DebugLocation(382, 61);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:382:61: ^( T_CONVERT TOKEN expression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(382, 63);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CONVERT, "T_CONVERT"), root_1);

					DebugLocation(382, 73);
					adaptor.AddChild(root_1, (object)adaptor.Create(TOKEN, "TOKEN"));
					DebugLocation(382, 79);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conversion", 50);
			LeaveRule("conversion", 50);
			LeaveRule_conversion();
	    }
	 	DebugLocation(383, 1);
		} finally { DebugExitRule(GrammarFileName, "conversion"); }
		return retval;

	}
	// $ANTLR end "conversion"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_string() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_string() {}

	// $ANTLR start "string"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:385:1: string : STRING -> ^( T_STRING STRING ) ;
	[GrammarRule("string")]
	private AstParserRuleReturnScope<object, IToken> @string()
	{
		EnterRule_string();
		EnterRule("string", 51);
		TraceIn("string", 51);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken STRING309 = default(IToken);

	    object STRING309_tree = default(object);
	    RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");

		try { DebugEnterRule(GrammarFileName, "string");
		DebugLocation(385, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:385:8: ( STRING -> ^( T_STRING STRING ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:385:10: STRING
			{
			DebugLocation(385, 10);
			STRING309=(IToken)Match(input,STRING,Follow._STRING_in_string2494);  
			stream_STRING.Add(STRING309);



			{
			// AST REWRITE
			// elements: STRING
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 385:17: -> ^( T_STRING STRING )
			{
				DebugLocation(385, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:385:20: ^( T_STRING STRING )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(385, 22);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_STRING, "T_STRING"), root_1);

				DebugLocation(385, 31);
				adaptor.AddChild(root_1, stream_STRING.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("string", 51);
			LeaveRule("string", 51);
			LeaveRule_string();
	    }
	 	DebugLocation(386, 1);
		} finally { DebugExitRule(GrammarFileName, "string"); }
		return retval;

	}
	// $ANTLR end "string"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_datatype() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_datatype() {}

	// $ANTLR start "datatype"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:388:1: datatype : TOKEN ;
	[GrammarRule("datatype")]
	private AstParserRuleReturnScope<object, IToken> datatype()
	{
		EnterRule_datatype();
		EnterRule("datatype", 52);
		TraceIn("datatype", 52);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN310 = default(IToken);

	    object TOKEN310_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "datatype");
		DebugLocation(388, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:389:2: ( TOKEN )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:389:4: TOKEN
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(389, 4);
			TOKEN310=(IToken)Match(input,TOKEN,Follow._TOKEN_in_datatype2514); 
			TOKEN310_tree = (object)adaptor.Create(TOKEN310);
			adaptor.AddChild(root_0, TOKEN310_tree);


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("datatype", 52);
			LeaveRule("datatype", 52);
			LeaveRule_datatype();
	    }
	 	DebugLocation(390, 1);
		} finally { DebugExitRule(GrammarFileName, "datatype"); }
		return retval;

	}
	// $ANTLR end "datatype"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_variable() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_variable() {}

	// $ANTLR start "variable"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:392:1: variable : VARIABLE -> ^( T_VARIABLE VARIABLE ) ;
	[GrammarRule("variable")]
	private AstParserRuleReturnScope<object, IToken> variable()
	{
		EnterRule_variable();
		EnterRule("variable", 53);
		TraceIn("variable", 53);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken VARIABLE311 = default(IToken);

	    object VARIABLE311_tree = default(object);
	    RewriteRuleITokenStream stream_VARIABLE=new RewriteRuleITokenStream(adaptor,"token VARIABLE");

		try { DebugEnterRule(GrammarFileName, "variable");
		DebugLocation(392, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:393:2: ( VARIABLE -> ^( T_VARIABLE VARIABLE ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:393:4: VARIABLE
			{
			DebugLocation(393, 4);
			VARIABLE311=(IToken)Match(input,VARIABLE,Follow._VARIABLE_in_variable2526);  
			stream_VARIABLE.Add(VARIABLE311);



			{
			// AST REWRITE
			// elements: VARIABLE
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 393:13: -> ^( T_VARIABLE VARIABLE )
			{
				DebugLocation(393, 16);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:393:16: ^( T_VARIABLE VARIABLE )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(393, 18);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_VARIABLE, "T_VARIABLE"), root_1);

				DebugLocation(393, 29);
				adaptor.AddChild(root_1, stream_VARIABLE.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variable", 53);
			LeaveRule("variable", 53);
			LeaveRule_variable();
	    }
	 	DebugLocation(394, 1);
		} finally { DebugExitRule(GrammarFileName, "variable"); }
		return retval;

	}
	// $ANTLR end "variable"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_case() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_case() {}

	// $ANTLR start "case"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:396:1: case : CASE WS ( expression WS )? ( case_when WS )* ( case_else WS )? END -> ^( T_CASE ( expression )? ( case_when )* ( case_else )? ) ;
	[GrammarRule("case")]
	private AstParserRuleReturnScope<object, IToken> @case()
	{
		EnterRule_case();
		EnterRule("case", 54);
		TraceIn("case", 54);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken CASE312 = default(IToken);
	    IToken WS313 = default(IToken);
	    IToken WS315 = default(IToken);
	    IToken WS317 = default(IToken);
	    IToken WS319 = default(IToken);
	    IToken END320 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression314 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> case_when316 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> case_else318 = default(AstParserRuleReturnScope<object, IToken>);

	    object CASE312_tree = default(object);
	    object WS313_tree = default(object);
	    object WS315_tree = default(object);
	    object WS317_tree = default(object);
	    object WS319_tree = default(object);
	    object END320_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_END=new RewriteRuleITokenStream(adaptor,"token END");
	    RewriteRuleITokenStream stream_CASE=new RewriteRuleITokenStream(adaptor,"token CASE");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_case_when=new RewriteRuleSubtreeStream(adaptor,"rule case_when");
	    RewriteRuleSubtreeStream stream_case_else=new RewriteRuleSubtreeStream(adaptor,"rule case_else");
		try { DebugEnterRule(GrammarFileName, "case");
		DebugLocation(396, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:397:2: ( CASE WS ( expression WS )? ( case_when WS )* ( case_else WS )? END -> ^( T_CASE ( expression )? ( case_when )* ( case_else )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:397:4: CASE WS ( expression WS )? ( case_when WS )* ( case_else WS )? END
			{
			DebugLocation(397, 4);
			CASE312=(IToken)Match(input,CASE,Follow._CASE_in_case2546);  
			stream_CASE.Add(CASE312);

			DebugLocation(397, 9);
			WS313=(IToken)Match(input,WS,Follow._WS_in_case2548);  
			stream_WS.Add(WS313);

			DebugLocation(397, 12);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:397:12: ( expression WS )?
			int alt113=2;
			try { DebugEnterSubRule(113);
			try { DebugEnterDecision(113, decisionCanBacktrack[113]);
			int LA113_0 = input.LA(1);

			if (((LA113_0>=CASE && LA113_0<=CAST)||LA113_0==CONVERT||LA113_0==EXISTS||(LA113_0>=NOT && LA113_0<=NUMBER)||LA113_0==SIMPLE_FILE||(LA113_0>=STRING && LA113_0<=SYSTEMVAR)||LA113_0==TOKEN||LA113_0==VARIABLE||LA113_0==147))
			{
				alt113 = 1;
			}
			} finally { DebugExitDecision(113); }
			switch (alt113)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:397:13: expression WS
				{
				DebugLocation(397, 13);
				PushFollow(Follow._expression_in_case2551);
				expression314=expression();
				PopFollow();

				stream_expression.Add(expression314.Tree);
				DebugLocation(397, 24);
				WS315=(IToken)Match(input,WS,Follow._WS_in_case2553);  
				stream_WS.Add(WS315);


				}
				break;

			}
			} finally { DebugExitSubRule(113); }

			DebugLocation(397, 29);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:397:29: ( case_when WS )*
			try { DebugEnterSubRule(114);
			while (true)
			{
				int alt114=2;
				try { DebugEnterDecision(114, decisionCanBacktrack[114]);
				int LA114_0 = input.LA(1);

				if ((LA114_0==WHEN))
				{
					alt114 = 1;
				}


				} finally { DebugExitDecision(114); }
				switch ( alt114 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:397:30: case_when WS
					{
					DebugLocation(397, 30);
					PushFollow(Follow._case_when_in_case2558);
					case_when316=case_when();
					PopFollow();

					stream_case_when.Add(case_when316.Tree);
					DebugLocation(397, 40);
					WS317=(IToken)Match(input,WS,Follow._WS_in_case2560);  
					stream_WS.Add(WS317);


					}
					break;

				default:
					goto loop114;
				}
			}

			loop114:
				;

			} finally { DebugExitSubRule(114); }

			DebugLocation(397, 45);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:397:45: ( case_else WS )?
			int alt115=2;
			try { DebugEnterSubRule(115);
			try { DebugEnterDecision(115, decisionCanBacktrack[115]);
			int LA115_0 = input.LA(1);

			if ((LA115_0==ELSE))
			{
				alt115 = 1;
			}
			} finally { DebugExitDecision(115); }
			switch (alt115)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:397:46: case_else WS
				{
				DebugLocation(397, 46);
				PushFollow(Follow._case_else_in_case2565);
				case_else318=case_else();
				PopFollow();

				stream_case_else.Add(case_else318.Tree);
				DebugLocation(397, 56);
				WS319=(IToken)Match(input,WS,Follow._WS_in_case2567);  
				stream_WS.Add(WS319);


				}
				break;

			}
			} finally { DebugExitSubRule(115); }

			DebugLocation(397, 61);
			END320=(IToken)Match(input,END,Follow._END_in_case2571);  
			stream_END.Add(END320);



			{
			// AST REWRITE
			// elements: expression, case_else, case_when
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 398:2: -> ^( T_CASE ( expression )? ( case_when )* ( case_else )? )
			{
				DebugLocation(398, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:398:5: ^( T_CASE ( expression )? ( case_when )* ( case_else )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(398, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CASE, "T_CASE"), root_1);

				DebugLocation(398, 14);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:398:14: ( expression )?
				if (stream_expression.HasNext)
				{
					DebugLocation(398, 14);
					adaptor.AddChild(root_1, stream_expression.NextTree());

				}
				stream_expression.Reset();
				DebugLocation(398, 26);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:398:26: ( case_when )*
				while ( stream_case_when.HasNext )
				{
					DebugLocation(398, 26);
					adaptor.AddChild(root_1, stream_case_when.NextTree());

				}
				stream_case_when.Reset();
				DebugLocation(398, 37);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:398:37: ( case_else )?
				if (stream_case_else.HasNext)
				{
					DebugLocation(398, 37);
					adaptor.AddChild(root_1, stream_case_else.NextTree());

				}
				stream_case_else.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("case", 54);
			LeaveRule("case", 54);
			LeaveRule_case();
	    }
	 	DebugLocation(399, 1);
		} finally { DebugExitRule(GrammarFileName, "case"); }
		return retval;

	}
	// $ANTLR end "case"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_case_when() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_case_when() {}

	// $ANTLR start "case_when"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:401:1: case_when : WHEN WS a= expression WS THEN WS b= expression -> ^( T_CASE_WHEN $a $b) ;
	[GrammarRule("case_when")]
	private AstParserRuleReturnScope<object, IToken> case_when()
	{
		EnterRule_case_when();
		EnterRule("case_when", 55);
		TraceIn("case_when", 55);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WHEN321 = default(IToken);
	    IToken WS322 = default(IToken);
	    IToken WS323 = default(IToken);
	    IToken THEN324 = default(IToken);
	    IToken WS325 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);

	    object WHEN321_tree = default(object);
	    object WS322_tree = default(object);
	    object WS323_tree = default(object);
	    object THEN324_tree = default(object);
	    object WS325_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_THEN=new RewriteRuleITokenStream(adaptor,"token THEN");
	    RewriteRuleITokenStream stream_WHEN=new RewriteRuleITokenStream(adaptor,"token WHEN");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "case_when");
		DebugLocation(401, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:402:2: ( WHEN WS a= expression WS THEN WS b= expression -> ^( T_CASE_WHEN $a $b) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:402:4: WHEN WS a= expression WS THEN WS b= expression
			{
			DebugLocation(402, 4);
			WHEN321=(IToken)Match(input,WHEN,Follow._WHEN_in_case_when2599);  
			stream_WHEN.Add(WHEN321);

			DebugLocation(402, 9);
			WS322=(IToken)Match(input,WS,Follow._WS_in_case_when2601);  
			stream_WS.Add(WS322);

			DebugLocation(402, 13);
			PushFollow(Follow._expression_in_case_when2605);
			a=expression();
			PopFollow();

			stream_expression.Add(a.Tree);
			DebugLocation(402, 25);
			WS323=(IToken)Match(input,WS,Follow._WS_in_case_when2607);  
			stream_WS.Add(WS323);

			DebugLocation(402, 28);
			THEN324=(IToken)Match(input,THEN,Follow._THEN_in_case_when2609);  
			stream_THEN.Add(THEN324);

			DebugLocation(402, 33);
			WS325=(IToken)Match(input,WS,Follow._WS_in_case_when2611);  
			stream_WS.Add(WS325);

			DebugLocation(402, 37);
			PushFollow(Follow._expression_in_case_when2615);
			b=expression();
			PopFollow();

			stream_expression.Add(b.Tree);


			{
			// AST REWRITE
			// elements: a, b
			// token labels: 
			// rule labels: retval, b, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 403:2: -> ^( T_CASE_WHEN $a $b)
			{
				DebugLocation(403, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:403:5: ^( T_CASE_WHEN $a $b)
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(403, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CASE_WHEN, "T_CASE_WHEN"), root_1);

				DebugLocation(403, 20);
				adaptor.AddChild(root_1, stream_a.NextTree());
				DebugLocation(403, 23);
				adaptor.AddChild(root_1, stream_b.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("case_when", 55);
			LeaveRule("case_when", 55);
			LeaveRule_case_when();
	    }
	 	DebugLocation(404, 1);
		} finally { DebugExitRule(GrammarFileName, "case_when"); }
		return retval;

	}
	// $ANTLR end "case_when"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_case_else() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_case_else() {}

	// $ANTLR start "case_else"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:406:1: case_else : ELSE WS expression -> ^( T_CASE_ELSE expression ) ;
	[GrammarRule("case_else")]
	private AstParserRuleReturnScope<object, IToken> case_else()
	{
		EnterRule_case_else();
		EnterRule("case_else", 56);
		TraceIn("case_else", 56);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken ELSE326 = default(IToken);
	    IToken WS327 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression328 = default(AstParserRuleReturnScope<object, IToken>);

	    object ELSE326_tree = default(object);
	    object WS327_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_ELSE=new RewriteRuleITokenStream(adaptor,"token ELSE");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "case_else");
		DebugLocation(406, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:407:2: ( ELSE WS expression -> ^( T_CASE_ELSE expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:407:4: ELSE WS expression
			{
			DebugLocation(407, 4);
			ELSE326=(IToken)Match(input,ELSE,Follow._ELSE_in_case_else2640);  
			stream_ELSE.Add(ELSE326);

			DebugLocation(407, 9);
			WS327=(IToken)Match(input,WS,Follow._WS_in_case_else2642);  
			stream_WS.Add(WS327);

			DebugLocation(407, 12);
			PushFollow(Follow._expression_in_case_else2644);
			expression328=expression();
			PopFollow();

			stream_expression.Add(expression328.Tree);


			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 408:2: -> ^( T_CASE_ELSE expression )
			{
				DebugLocation(408, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:408:5: ^( T_CASE_ELSE expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(408, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CASE_ELSE, "T_CASE_ELSE"), root_1);

				DebugLocation(408, 19);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("case_else", 56);
			LeaveRule("case_else", 56);
			LeaveRule_case_else();
	    }
	 	DebugLocation(409, 1);
		} finally { DebugExitRule(GrammarFileName, "case_else"); }
		return retval;

	}
	// $ANTLR end "case_else"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _WS_in_parse344 = new BitSet(new ulong[]{0xC0000000280000UL,0x0UL,0x8UL});
		public static readonly BitSet _commands_in_parse348 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400UL});
		public static readonly BitSet _WS_in_parse350 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_parse355 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _command_in_commands378 = new BitSet(new ulong[]{0xC0000000280002UL,0x0UL,0x4000408UL});
		public static readonly BitSet _WS_in_commands381 = new BitSet(new ulong[]{0xC0000000280000UL,0x0UL,0x4000008UL});
		public static readonly BitSet _154_in_commands385 = new BitSet(new ulong[]{0xC0000000280000UL,0x0UL,0x408UL});
		public static readonly BitSet _WS_in_commands387 = new BitSet(new ulong[]{0xC0000000280000UL,0x0UL,0x8UL});
		public static readonly BitSet _command_in_commands392 = new BitSet(new ulong[]{0xC0000000280002UL,0x0UL,0x4000408UL});
		public static readonly BitSet _WS_in_commands397 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _154_in_commands400 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _select_command_in_command420 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _use_command_in_command425 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declare_command_in_command430 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_command_in_command435 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _create_view_command_in_command440 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SELECT_in_select_command454 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400UL});
		public static readonly BitSet _WS_in_select_command457 = new BitSet(new ulong[]{0x1000020UL});
		public static readonly BitSet _distinct_clause_in_select_command459 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400UL});
		public static readonly BitSet _WS_in_select_command464 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _top_clause_in_select_command466 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400UL});
		public static readonly BitSet _WS_in_select_command470 = new BitSet(new ulong[]{0x4D0030001004C000UL,0x0UL,0x280020UL});
		public static readonly BitSet _column_list_in_select_command472 = new BitSet(new ulong[]{0x2UL,0x0UL,0x400UL});
		public static readonly BitSet _WS_in_select_command475 = new BitSet(new ulong[]{0x1000000000UL});
		public static readonly BitSet _into_clause_in_select_command477 = new BitSet(new ulong[]{0x2UL,0x0UL,0x400UL});
		public static readonly BitSet _WS_in_select_command482 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _from_clause_in_select_command484 = new BitSet(new ulong[]{0x2UL,0x0UL,0x400UL});
		public static readonly BitSet _WS_in_select_command489 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _where_clause_in_select_command491 = new BitSet(new ulong[]{0x2UL,0x0UL,0x400UL});
		public static readonly BitSet _WS_in_select_command496 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _groupby_clause_in_select_command498 = new BitSet(new ulong[]{0x2UL,0x0UL,0x400UL});
		public static readonly BitSet _WS_in_select_command503 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _orderby_clause_in_select_command505 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DISTINCT_in_distinct_clause550 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ALL_in_distinct_clause559 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOP_in_top_clause575 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400UL});
		public static readonly BitSet _WS_in_top_clause577 = new BitSet(new ulong[]{0x4D0030001004C000UL,0x0UL,0x80020UL});
		public static readonly BitSet _expression_in_top_clause579 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _column_in_column_list601 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800400UL});
		public static readonly BitSet _WS_in_column_list604 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000UL});
		public static readonly BitSet _151_in_column_list607 = new BitSet(new ulong[]{0x4D0030001004C000UL,0x0UL,0x280420UL});
		public static readonly BitSet _WS_in_column_list609 = new BitSet(new ulong[]{0x4D0030001004C000UL,0x0UL,0x280020UL});
		public static readonly BitSet _column_in_column_list612 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800400UL});
		public static readonly BitSet _149_in_column636 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_column650 = new BitSet(new ulong[]{0x2UL,0x0UL,0x400UL});
		public static readonly BitSet _WS_in_column653 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _SIMPLE_FILE_in_column655 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INTO_in_into_clause678 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400UL});
		public static readonly BitSet _WS_in_into_clause680 = new BitSet(new ulong[]{0x100000000000000UL,0x0UL,0x200000000UL});
		public static readonly BitSet _file_in_into_clause682 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FROM_in_from_clause702 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400UL});
		public static readonly BitSet _WS_in_from_clause704 = new BitSet(new ulong[]{0x4500000000000000UL,0x0UL,0x200080000UL});
		public static readonly BitSet _from_clause_item_in_from_clause706 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800400UL});
		public static readonly BitSet _WS_in_from_clause709 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000UL});
		public static readonly BitSet _151_in_from_clause712 = new BitSet(new ulong[]{0x4500000000000000UL,0x0UL,0x200080400UL});
		public static readonly BitSet _WS_in_from_clause714 = new BitSet(new ulong[]{0x4500000000000000UL,0x0UL,0x200080000UL});
		public static readonly BitSet _from_clause_item_in_from_clause717 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800400UL});
		public static readonly BitSet _STRING_in_from_clause_item740 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _file_in_from_clause_item753 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _subquery_in_from_clause_item758 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _view_name_in_from_clause_item763 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _147_in_subquery775 = new BitSet(new ulong[]{0x40000000000000UL,0x0UL,0x400UL});
		public static readonly BitSet _WS_in_subquery777 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _select_command_in_subquery780 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100400UL});
		public static readonly BitSet _WS_in_subquery782 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000UL});
		public static readonly BitSet _148_in_subquery785 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _161_in_file804 = new BitSet(new ulong[]{0x400000000000000UL,0x0UL,0x420UL});
		public static readonly BitSet _WS_in_file806 = new BitSet(new ulong[]{0x400000000000000UL,0x0UL,0x20UL});
		public static readonly BitSet _file_spec_in_file809 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000400UL});
		public static readonly BitSet _WS_in_file812 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000UL});
		public static readonly BitSet _file_option_in_file814 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000400UL});
		public static readonly BitSet _WS_in_file818 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000000UL});
		public static readonly BitSet _162_in_file821 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SIMPLE_FILE_in_file838 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _string_in_file_spec857 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_in_file_spec862 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _152_in_file_option874 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _file_option_name_in_file_option876 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40000400UL});
		public static readonly BitSet _WS_in_file_option880 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _158_in_file_option883 = new BitSet(new ulong[]{0x4400200000000000UL,0x0UL,0x420UL});
		public static readonly BitSet _WS_in_file_option885 = new BitSet(new ulong[]{0x4400200000000000UL,0x0UL,0x20UL});
		public static readonly BitSet _file_option_value_in_file_option888 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_file_option_name912 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_file_option_value924 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_file_option_value928 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_file_option_value932 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_in_file_option_value936 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHERE_in_where_clause948 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400UL});
		public static readonly BitSet _WS_in_where_clause950 = new BitSet(new ulong[]{0x4D0030001004C000UL,0x0UL,0x80020UL});
		public static readonly BitSet _expression_in_where_clause952 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GROUP_in_groupby_clause971 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400UL});
		public static readonly BitSet _WS_in_groupby_clause973 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _BY_in_groupby_clause975 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400UL});
		public static readonly BitSet _WS_in_groupby_clause977 = new BitSet(new ulong[]{0x4D0030001004C000UL,0x0UL,0x80020UL});
		public static readonly BitSet _orderby_column_list_in_groupby_clause979 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ORDER_in_orderby_clause1000 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400UL});
		public static readonly BitSet _WS_in_orderby_clause1002 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _BY_in_orderby_clause1004 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400UL});
		public static readonly BitSet _WS_in_orderby_clause1006 = new BitSet(new ulong[]{0x4D0030001004C000UL,0x0UL,0x80020UL});
		public static readonly BitSet _orderby_column_list_in_orderby_clause1008 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _orderby_column_in_orderby_column_list1029 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800400UL});
		public static readonly BitSet _WS_in_orderby_column_list1032 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000UL});
		public static readonly BitSet _151_in_orderby_column_list1035 = new BitSet(new ulong[]{0x4D0030001004C000UL,0x0UL,0x80420UL});
		public static readonly BitSet _WS_in_orderby_column_list1037 = new BitSet(new ulong[]{0x4D0030001004C000UL,0x0UL,0x80020UL});
		public static readonly BitSet _orderby_column_in_orderby_column_list1040 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800400UL});
		public static readonly BitSet _expression_in_orderby_column1060 = new BitSet(new ulong[]{0x2UL,0x0UL,0x400UL});
		public static readonly BitSet _WS_in_orderby_column1063 = new BitSet(new ulong[]{0x2000000400200UL});
		public static readonly BitSet _orderby_direction_in_orderby_column1065 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASC_in_orderby_direction1090 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DESC_in_orderby_direction1099 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ORIG_in_orderby_direction1108 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _USE_in_use_command1126 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400UL});
		public static readonly BitSet _WS_in_use_command1128 = new BitSet(new ulong[]{0x100000000000000UL,0x0UL,0x200000000UL});
		public static readonly BitSet _file_in_use_command1130 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DECLARE_in_declare_command1152 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400UL});
		public static readonly BitSet _WS_in_declare_command1154 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _declaration_list_in_declare_command1156 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_in_declaration_list1173 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800400UL});
		public static readonly BitSet _WS_in_declaration_list1176 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000UL});
		public static readonly BitSet _151_in_declaration_list1179 = new BitSet(new ulong[]{0x0UL,0x0UL,0x420UL});
		public static readonly BitSet _WS_in_declaration_list1181 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _declaration_in_declaration_list1184 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800400UL});
		public static readonly BitSet _variable_in_declaration1208 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400UL});
		public static readonly BitSet _WS_in_declaration1210 = new BitSet(new ulong[]{0x4000000000000100UL});
		public static readonly BitSet _AS_in_declaration1213 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400UL});
		public static readonly BitSet _WS_in_declaration1215 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _datatype_in_declaration1219 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CREATE_in_create_view_command1244 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400UL});
		public static readonly BitSet _WS_in_create_view_command1246 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _VIEW_in_create_view_command1248 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400UL});
		public static readonly BitSet _WS_in_create_view_command1250 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _view_name_in_create_view_command1252 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80400UL});
		public static readonly BitSet _WS_in_create_view_command1255 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _147_in_create_view_command1258 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _declaration_list_in_create_view_command1260 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000UL});
		public static readonly BitSet _148_in_create_view_command1262 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400UL});
		public static readonly BitSet _WS_in_create_view_command1266 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _AS_in_create_view_command1268 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400UL});
		public static readonly BitSet _WS_in_create_view_command1270 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _select_command_in_create_view_command1272 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_view_name1298 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SET_in_set_command1322 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400UL});
		public static readonly BitSet _WS_in_set_command1324 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _variable_in_set_command1326 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000400UL});
		public static readonly BitSet _WS_in_set_command1328 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _158_in_set_command1331 = new BitSet(new ulong[]{0x4D0030001004C000UL,0x0UL,0x80420UL});
		public static readonly BitSet _WS_in_set_command1333 = new BitSet(new ulong[]{0x4D0030001004C000UL,0x0UL,0x80020UL});
		public static readonly BitSet _expression_in_set_command1336 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_expression_list1361 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800400UL});
		public static readonly BitSet _WS_in_expression_list1364 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000UL});
		public static readonly BitSet _151_in_expression_list1367 = new BitSet(new ulong[]{0x4D0030001004C000UL,0x0UL,0x80420UL});
		public static readonly BitSet _WS_in_expression_list1369 = new BitSet(new ulong[]{0x4D0030001004C000UL,0x0UL,0x80020UL});
		public static readonly BitSet _expression_in_expression_list1372 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800400UL});
		public static readonly BitSet _expression_list_in_expression_list_or_select_command1395 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _select_command_in_expression_list_or_select_command1399 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_7_in_expression1411 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_6_in_expression_71427 = new BitSet(new ulong[]{0x2UL,0x0UL,0x400UL});
		public static readonly BitSet _WS_in_expression_71434 = new BitSet(new ulong[]{0x950800000800UL,0x0UL,0x1F801C000UL});
		public static readonly BitSet _op_7_in_expression_71439 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400UL});
		public static readonly BitSet _WS_in_expression_71441 = new BitSet(new ulong[]{0x4D0030001004C000UL,0x0UL,0x80020UL});
		public static readonly BitSet _expression_6_in_expression_71445 = new BitSet(new ulong[]{0x2UL,0x0UL,0x400UL});
		public static readonly BitSet _IN_in_expression_71464 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80400UL});
		public static readonly BitSet _WS_in_expression_71466 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _147_in_expression_71469 = new BitSet(new ulong[]{0x4D4030001004C000UL,0x0UL,0x80420UL});
		public static readonly BitSet _WS_in_expression_71471 = new BitSet(new ulong[]{0x4D4030001004C000UL,0x0UL,0x80020UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_71474 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100400UL});
		public static readonly BitSet _WS_in_expression_71476 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000UL});
		public static readonly BitSet _148_in_expression_71479 = new BitSet(new ulong[]{0x2UL,0x0UL,0x400UL});
		public static readonly BitSet _NOT_in_expression_71497 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400UL});
		public static readonly BitSet _WS_in_expression_71499 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _IN_in_expression_71501 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80400UL});
		public static readonly BitSet _WS_in_expression_71503 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _147_in_expression_71506 = new BitSet(new ulong[]{0x4D4030001004C000UL,0x0UL,0x80420UL});
		public static readonly BitSet _WS_in_expression_71508 = new BitSet(new ulong[]{0x4D4030001004C000UL,0x0UL,0x80020UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_71512 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100400UL});
		public static readonly BitSet _WS_in_expression_71515 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000UL});
		public static readonly BitSet _148_in_expression_71518 = new BitSet(new ulong[]{0x2UL,0x0UL,0x400UL});
		public static readonly BitSet _op_4_in_expression_71536 = new BitSet(new ulong[]{0x200000000000080UL,0x0UL,0x400UL});
		public static readonly BitSet _WS_in_expression_71538 = new BitSet(new ulong[]{0x200000000000080UL});
		public static readonly BitSet _SOME_in_expression_71542 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80400UL});
		public static readonly BitSet _ANY_in_expression_71546 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80400UL});
		public static readonly BitSet _WS_in_expression_71549 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _147_in_expression_71552 = new BitSet(new ulong[]{0x4D4030001004C000UL,0x0UL,0x80020UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_71554 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000UL});
		public static readonly BitSet _148_in_expression_71556 = new BitSet(new ulong[]{0x2UL,0x0UL,0x400UL});
		public static readonly BitSet _op_4_in_expression_71576 = new BitSet(new ulong[]{0x20UL,0x0UL,0x400UL});
		public static readonly BitSet _WS_in_expression_71578 = new BitSet(new ulong[]{0x20UL});
		public static readonly BitSet _ALL_in_expression_71581 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80400UL});
		public static readonly BitSet _WS_in_expression_71583 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _147_in_expression_71586 = new BitSet(new ulong[]{0x4D4030001004C000UL,0x0UL,0x80020UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_71588 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000UL});
		public static readonly BitSet _148_in_expression_71590 = new BitSet(new ulong[]{0x2UL,0x0UL,0x400UL});
		public static readonly BitSet _OR_in_op_71620 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LIKE_in_op_71629 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_71638 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400UL});
		public static readonly BitSet _WS_in_op_71640 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _LIKE_in_op_71642 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MATCH_in_op_71651 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_71660 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400UL});
		public static readonly BitSet _WS_in_op_71662 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _MATCH_in_op_71664 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BETWEEN_in_op_71673 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_71682 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400UL});
		public static readonly BitSet _WS_in_op_71684 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _BETWEEN_in_op_71686 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_5_in_expression_61705 = new BitSet(new ulong[]{0x2UL,0x0UL,0x400UL});
		public static readonly BitSet _WS_in_expression_61712 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _op_6_in_expression_61714 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400UL});
		public static readonly BitSet _WS_in_expression_61716 = new BitSet(new ulong[]{0x4D0030001004C000UL,0x0UL,0x80020UL});
		public static readonly BitSet _expression_5_in_expression_61720 = new BitSet(new ulong[]{0x2UL,0x0UL,0x400UL});
		public static readonly BitSet _AND_in_op_61748 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _op_5_in_expression_51766 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400UL});
		public static readonly BitSet _WS_in_expression_51768 = new BitSet(new ulong[]{0x4D0030001004C000UL,0x0UL,0x80020UL});
		public static readonly BitSet _expression_5_in_expression_51770 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_4_in_expression_51785 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_51796 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_3_in_expression_41815 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1F801C400UL});
		public static readonly BitSet _WS_in_expression_41822 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1F801C000UL});
		public static readonly BitSet _op_4_in_expression_41825 = new BitSet(new ulong[]{0x4D0020001004C000UL,0x0UL,0x80420UL});
		public static readonly BitSet _WS_in_expression_41827 = new BitSet(new ulong[]{0x4D0020001004C000UL,0x0UL,0x80020UL});
		public static readonly BitSet _expression_3_in_expression_41832 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1F801C400UL});
		public static readonly BitSet _158_in_op_41858 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _160_in_op_41867 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _156_in_op_41877 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _157_in_op_41887 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _143_in_op_41896 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _144_in_op_41905 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _142_in_op_41914 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _159_in_op_41923 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _155_in_op_41933 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_2_in_expression_31952 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1801440400UL});
		public static readonly BitSet _WS_in_expression_31959 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1801440000UL});
		public static readonly BitSet _op_3_in_expression_31962 = new BitSet(new ulong[]{0x4D0020001004C000UL,0x0UL,0x80420UL});
		public static readonly BitSet _WS_in_expression_31964 = new BitSet(new ulong[]{0x4D0020001004C000UL,0x0UL,0x80020UL});
		public static readonly BitSet _expression_2_in_expression_31969 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1801440400UL});
		public static readonly BitSet _150_in_op_31995 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _152_in_op_32004 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _146_in_op_32013 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _164_in_op_32022 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _163_in_op_32031 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_1_in_expression_22053 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2220400UL});
		public static readonly BitSet _WS_in_expression_22060 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2220000UL});
		public static readonly BitSet _op_2_in_expression_22063 = new BitSet(new ulong[]{0x4D0020001004C000UL,0x0UL,0x80420UL});
		public static readonly BitSet _WS_in_expression_22065 = new BitSet(new ulong[]{0x4D0020001004C000UL,0x0UL,0x80020UL});
		public static readonly BitSet _expression_1_in_expression_22070 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2220400UL});
		public static readonly BitSet _149_in_op_22096 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _153_in_op_22105 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _145_in_op_22114 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _147_in_expression_12132 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2001400400UL});
		public static readonly BitSet _WS_in_expression_12134 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2001400000UL});
		public static readonly BitSet _op_1_in_expression_12137 = new BitSet(new ulong[]{0x4D0020001004C000UL,0x0UL,0x80420UL});
		public static readonly BitSet _WS_in_expression_12139 = new BitSet(new ulong[]{0x4D0020001004C000UL,0x0UL,0x80020UL});
		public static readonly BitSet _expression_1_in_expression_12142 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100400UL});
		public static readonly BitSet _WS_in_expression_12144 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000UL});
		public static readonly BitSet _148_in_expression_12147 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_atom_in_expression_12164 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _165_in_op_12174 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _150_in_op_12184 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _152_in_op_12193 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_expression_atom2208 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _string_in_expression_atom2221 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SYSTEMVAR_in_expression_atom2226 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_in_expression_atom2239 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _subquery_in_expression_atom2244 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _147_in_expression_atom2249 = new BitSet(new ulong[]{0x4D0030001004C000UL,0x0UL,0x80020UL});
		public static readonly BitSet _expression_in_expression_atom2251 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000UL});
		public static readonly BitSet _148_in_expression_atom2253 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functioncall_or_column_in_expression_atom2262 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conversion_in_expression_atom2267 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _case_in_expression_atom2272 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXISTS_in_expression_atom2277 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80400UL});
		public static readonly BitSet _WS_in_expression_atom2279 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _147_in_expression_atom2282 = new BitSet(new ulong[]{0x40000000000000UL,0x0UL,0x400UL});
		public static readonly BitSet _WS_in_expression_atom2284 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _select_command_in_expression_atom2287 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100400UL});
		public static readonly BitSet _WS_in_expression_atom2289 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000UL});
		public static readonly BitSet _148_in_expression_atom2292 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_functioncall_or_column2312 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80400UL});
		public static readonly BitSet _WS_in_functioncall_or_column2314 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _147_in_functioncall_or_column2317 = new BitSet(new ulong[]{0x4D0030001004C000UL,0x0UL,0x180420UL});
		public static readonly BitSet _WS_in_functioncall_or_column2319 = new BitSet(new ulong[]{0x4D0030001004C000UL,0x0UL,0x180020UL});
		public static readonly BitSet _expression_in_functioncall_or_column2323 = new BitSet(new ulong[]{0x0UL,0x0UL,0x900400UL});
		public static readonly BitSet _WS_in_functioncall_or_column2325 = new BitSet(new ulong[]{0x0UL,0x0UL,0x900000UL});
		public static readonly BitSet _151_in_functioncall_or_column2329 = new BitSet(new ulong[]{0x4D0030001004C000UL,0x0UL,0x80420UL});
		public static readonly BitSet _WS_in_functioncall_or_column2331 = new BitSet(new ulong[]{0x4D0030001004C000UL,0x0UL,0x80020UL});
		public static readonly BitSet _expression_in_functioncall_or_column2334 = new BitSet(new ulong[]{0x0UL,0x0UL,0x900400UL});
		public static readonly BitSet _WS_in_functioncall_or_column2336 = new BitSet(new ulong[]{0x0UL,0x0UL,0x900000UL});
		public static readonly BitSet _148_in_functioncall_or_column2343 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_functioncall_or_column2359 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80400UL});
		public static readonly BitSet _WS_in_functioncall_or_column2361 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _147_in_functioncall_or_column2364 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200400UL});
		public static readonly BitSet _WS_in_functioncall_or_column2366 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _149_in_functioncall_or_column2369 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100400UL});
		public static readonly BitSet _WS_in_functioncall_or_column2371 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000UL});
		public static readonly BitSet _148_in_functioncall_or_column2374 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SIMPLE_FILE_in_functioncall_or_column2391 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CONVERT_in_conversion2411 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80400UL});
		public static readonly BitSet _WS_in_conversion2413 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _147_in_conversion2416 = new BitSet(new ulong[]{0x4000000000000000UL,0x0UL,0x400UL});
		public static readonly BitSet _WS_in_conversion2418 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _TOKEN_in_conversion2421 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800400UL});
		public static readonly BitSet _WS_in_conversion2423 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000UL});
		public static readonly BitSet _151_in_conversion2426 = new BitSet(new ulong[]{0x4D0030001004C000UL,0x0UL,0x80420UL});
		public static readonly BitSet _WS_in_conversion2428 = new BitSet(new ulong[]{0x4D0030001004C000UL,0x0UL,0x80020UL});
		public static readonly BitSet _expression_in_conversion2431 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100400UL});
		public static readonly BitSet _WS_in_conversion2433 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000UL});
		public static readonly BitSet _148_in_conversion2436 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CAST_in_conversion2451 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80400UL});
		public static readonly BitSet _WS_in_conversion2453 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _147_in_conversion2456 = new BitSet(new ulong[]{0x4D0030001004C000UL,0x0UL,0x80420UL});
		public static readonly BitSet _WS_in_conversion2458 = new BitSet(new ulong[]{0x4D0030001004C000UL,0x0UL,0x80020UL});
		public static readonly BitSet _expression_in_conversion2461 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400UL});
		public static readonly BitSet _WS_in_conversion2463 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _AS_in_conversion2465 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400UL});
		public static readonly BitSet _WS_in_conversion2467 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _datatype_in_conversion2469 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100400UL});
		public static readonly BitSet _WS_in_conversion2471 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000UL});
		public static readonly BitSet _148_in_conversion2474 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_string2494 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_datatype2514 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VARIABLE_in_variable2526 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CASE_in_case2546 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400UL});
		public static readonly BitSet _WS_in_case2548 = new BitSet(new ulong[]{0x4D0030001C04C000UL,0x0UL,0x80120UL});
		public static readonly BitSet _expression_in_case2551 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400UL});
		public static readonly BitSet _WS_in_case2553 = new BitSet(new ulong[]{0xC000000UL,0x0UL,0x100UL});
		public static readonly BitSet _case_when_in_case2558 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400UL});
		public static readonly BitSet _WS_in_case2560 = new BitSet(new ulong[]{0xC000000UL,0x0UL,0x100UL});
		public static readonly BitSet _case_else_in_case2565 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400UL});
		public static readonly BitSet _WS_in_case2567 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _END_in_case2571 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHEN_in_case_when2599 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400UL});
		public static readonly BitSet _WS_in_case_when2601 = new BitSet(new ulong[]{0x4D0030001004C000UL,0x0UL,0x80020UL});
		public static readonly BitSet _expression_in_case_when2605 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400UL});
		public static readonly BitSet _WS_in_case_when2607 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _THEN_in_case_when2609 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400UL});
		public static readonly BitSet _WS_in_case_when2611 = new BitSet(new ulong[]{0x4D0030001004C000UL,0x0UL,0x80020UL});
		public static readonly BitSet _expression_in_case_when2615 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ELSE_in_case_else2640 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400UL});
		public static readonly BitSet _WS_in_case_else2642 = new BitSet(new ulong[]{0x4D0030001004C000UL,0x0UL,0x80020UL});
		public static readonly BitSet _expression_in_case_else2644 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  FxGqlLib 
