//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g 2012-08-27 17:10:11

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591


// `XXX' does not need a CLSCompliant attribute because the assembly is not marked as CLS-compliant (CS3021)
#pragma warning disable 3021
// The private field `XXX' is assigned but its value is never used (CS0414)
#pragma warning disable 414


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  FxGqlLib 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class gqlParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "A", "ALL", "AND", "ANY", "AS", "ASC", "B", "BETWEEN", "BY", "C", "CASE", "CAST", "COMMENT_BLOCK", "COMMENT_LINE", "CONVERT", "COUNT", "CREATE", "D", "DATEADD", "DATEDIFF", "DATEPART", "DECLARE", "DESC", "DIGIT", "DISTINCT", "DROP", "E", "ELSE", "END", "EXISTS", "F", "FROM", "G", "GROUP", "H", "HAVING", "I", "IN", "INTO", "J", "K", "L", "LIKE", "M", "MATCH", "N", "NOT", "NUMBER", "O", "OR", "ORDER", "ORIG", "P", "Q", "R", "S", "SELECT", "SET", "SIMPLE_FILE", "SOME", "STRING", "SYSTEMVAR", "T", "TABLE", "THEN", "TOKEN", "TOP", "T_ALL", "T_ALLCOLUMNS", "T_AND", "T_ANY", "T_BETWEEN", "T_BITWISE_AND", "T_BITWISE_NOT", "T_BITWISE_OR", "T_BITWISE_XOR", "T_CASE", "T_CASE_ELSE", "T_CASE_WHEN", "T_COLUMN", "T_COLUMNLIST", "T_CONVERT", "T_COUNT", "T_CREATE_VIEW", "T_DATEPART", "T_DECLARATION", "T_DECLARE", "T_DISTINCT", "T_DISTINCTCOUNT", "T_DIVIDE", "T_DROP_TABLE", "T_DROP_VIEW", "T_EQUAL", "T_EXISTS", "T_EXPRESSIONLIST", "T_FILE", "T_FILEOPTION", "T_FILESUBQUERY", "T_FROM", "T_FUNCTIONCALL", "T_GREATER", "T_GROUPBY", "T_GROUPBY_ORIG", "T_HAVING", "T_IN", "T_INTEGER", "T_INTO", "T_LESS", "T_LIKE", "T_MATCH", "T_MINUS", "T_MODULO", "T_NOT", "T_NOTBETWEEN", "T_NOTEQUAL", "T_NOTGREATER", "T_NOTIN", "T_NOTLESS", "T_NOTLIKE", "T_NOTMATCH", "T_OP_BINARY", "T_OP_UNARY", "T_OR", "T_ORDERBY", "T_ORDERBY_ASC", "T_ORDERBY_COLUMN", "T_ORDERBY_DESC", "T_ORDERBY_ORIG", "T_PLUS", "T_PRODUCT", "T_ROOT", "T_SELECT", "T_SELECT_SIMPLE", "T_SELECT_UNION", "T_SET_VARIABLE", "T_STRING", "T_SUBQUERY", "T_SYSTEMVAR", "T_TABLE_ALIAS", "T_TOP", "T_USE", "T_VARIABLE", "T_VIEW", "T_VIEW_NAME", "T_WHERE", "U", "UNION", "USE", "V", "VARIABLE", "VIEW", "W", "WHEN", "WHERE", "WS", "X", "Y", "Z", "'!<'", "'!='", "'!>'", "'%'", "'&'", "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", "';'", "'<'", "'<='", "'<>'", "'='", "'>'", "'>='", "'['", "']'", "'^'", "'|'", "'~'"
	};
	public const int EOF=-1;
	public const int T__162=162;
	public const int T__163=163;
	public const int T__164=164;
	public const int T__165=165;
	public const int T__166=166;
	public const int T__167=167;
	public const int T__168=168;
	public const int T__169=169;
	public const int T__170=170;
	public const int T__171=171;
	public const int T__172=172;
	public const int T__173=173;
	public const int T__174=174;
	public const int T__175=175;
	public const int T__176=176;
	public const int T__177=177;
	public const int T__178=178;
	public const int T__179=179;
	public const int T__180=180;
	public const int T__181=181;
	public const int T__182=182;
	public const int T__183=183;
	public const int T__184=184;
	public const int T__185=185;
	public const int T__186=186;
	public const int A=4;
	public const int ALL=5;
	public const int AND=6;
	public const int ANY=7;
	public const int AS=8;
	public const int ASC=9;
	public const int B=10;
	public const int BETWEEN=11;
	public const int BY=12;
	public const int C=13;
	public const int CASE=14;
	public const int CAST=15;
	public const int COMMENT_BLOCK=16;
	public const int COMMENT_LINE=17;
	public const int CONVERT=18;
	public const int COUNT=19;
	public const int CREATE=20;
	public const int D=21;
	public const int DATEADD=22;
	public const int DATEDIFF=23;
	public const int DATEPART=24;
	public const int DECLARE=25;
	public const int DESC=26;
	public const int DIGIT=27;
	public const int DISTINCT=28;
	public const int DROP=29;
	public const int E=30;
	public const int ELSE=31;
	public const int END=32;
	public const int EXISTS=33;
	public const int F=34;
	public const int FROM=35;
	public const int G=36;
	public const int GROUP=37;
	public const int H=38;
	public const int HAVING=39;
	public const int I=40;
	public const int IN=41;
	public const int INTO=42;
	public const int J=43;
	public const int K=44;
	public const int L=45;
	public const int LIKE=46;
	public const int M=47;
	public const int MATCH=48;
	public const int N=49;
	public const int NOT=50;
	public const int NUMBER=51;
	public const int O=52;
	public const int OR=53;
	public const int ORDER=54;
	public const int ORIG=55;
	public const int P=56;
	public const int Q=57;
	public const int R=58;
	public const int S=59;
	public const int SELECT=60;
	public const int SET=61;
	public const int SIMPLE_FILE=62;
	public const int SOME=63;
	public const int STRING=64;
	public const int SYSTEMVAR=65;
	public const int T=66;
	public const int TABLE=67;
	public const int THEN=68;
	public const int TOKEN=69;
	public const int TOP=70;
	public const int T_ALL=71;
	public const int T_ALLCOLUMNS=72;
	public const int T_AND=73;
	public const int T_ANY=74;
	public const int T_BETWEEN=75;
	public const int T_BITWISE_AND=76;
	public const int T_BITWISE_NOT=77;
	public const int T_BITWISE_OR=78;
	public const int T_BITWISE_XOR=79;
	public const int T_CASE=80;
	public const int T_CASE_ELSE=81;
	public const int T_CASE_WHEN=82;
	public const int T_COLUMN=83;
	public const int T_COLUMNLIST=84;
	public const int T_CONVERT=85;
	public const int T_COUNT=86;
	public const int T_CREATE_VIEW=87;
	public const int T_DATEPART=88;
	public const int T_DECLARATION=89;
	public const int T_DECLARE=90;
	public const int T_DISTINCT=91;
	public const int T_DISTINCTCOUNT=92;
	public const int T_DIVIDE=93;
	public const int T_DROP_TABLE=94;
	public const int T_DROP_VIEW=95;
	public const int T_EQUAL=96;
	public const int T_EXISTS=97;
	public const int T_EXPRESSIONLIST=98;
	public const int T_FILE=99;
	public const int T_FILEOPTION=100;
	public const int T_FILESUBQUERY=101;
	public const int T_FROM=102;
	public const int T_FUNCTIONCALL=103;
	public const int T_GREATER=104;
	public const int T_GROUPBY=105;
	public const int T_GROUPBY_ORIG=106;
	public const int T_HAVING=107;
	public const int T_IN=108;
	public const int T_INTEGER=109;
	public const int T_INTO=110;
	public const int T_LESS=111;
	public const int T_LIKE=112;
	public const int T_MATCH=113;
	public const int T_MINUS=114;
	public const int T_MODULO=115;
	public const int T_NOT=116;
	public const int T_NOTBETWEEN=117;
	public const int T_NOTEQUAL=118;
	public const int T_NOTGREATER=119;
	public const int T_NOTIN=120;
	public const int T_NOTLESS=121;
	public const int T_NOTLIKE=122;
	public const int T_NOTMATCH=123;
	public const int T_OP_BINARY=124;
	public const int T_OP_UNARY=125;
	public const int T_OR=126;
	public const int T_ORDERBY=127;
	public const int T_ORDERBY_ASC=128;
	public const int T_ORDERBY_COLUMN=129;
	public const int T_ORDERBY_DESC=130;
	public const int T_ORDERBY_ORIG=131;
	public const int T_PLUS=132;
	public const int T_PRODUCT=133;
	public const int T_ROOT=134;
	public const int T_SELECT=135;
	public const int T_SELECT_SIMPLE=136;
	public const int T_SELECT_UNION=137;
	public const int T_SET_VARIABLE=138;
	public const int T_STRING=139;
	public const int T_SUBQUERY=140;
	public const int T_SYSTEMVAR=141;
	public const int T_TABLE_ALIAS=142;
	public const int T_TOP=143;
	public const int T_USE=144;
	public const int T_VARIABLE=145;
	public const int T_VIEW=146;
	public const int T_VIEW_NAME=147;
	public const int T_WHERE=148;
	public const int U=149;
	public const int UNION=150;
	public const int USE=151;
	public const int V=152;
	public const int VARIABLE=153;
	public const int VIEW=154;
	public const int W=155;
	public const int WHEN=156;
	public const int WHERE=157;
	public const int WS=158;
	public const int X=159;
	public const int Y=160;
	public const int Z=161;

	#if ANTLR_DEBUG
		private static readonly bool[] decisionCanBacktrack =
			new bool[]
			{
				false, // invalid decision
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, true, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				true, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false
			};
	#else
		private static readonly bool[] decisionCanBacktrack = new bool[0];
	#endif
	public gqlParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public gqlParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}
	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return gqlParser.tokenNames; } }
	public override string GrammarFileName { get { return "C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g"; } }


	[Conditional("ANTLR_TRACE")]
	protected virtual void OnCreated() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

	#region Rules

	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_parse() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_parse() {}

	// $ANTLR start "parse"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:110:1: parse : ( WS )? ( commands ( WS )? )? EOF -> ^( T_ROOT ( commands )? ) ;
	[GrammarRule("parse")]
	private AstParserRuleReturnScope<object, IToken> parse()
	{
		EnterRule_parse();
		EnterRule("parse", 1);
		TraceIn("parse", 1);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS1 = default(IToken);
	    IToken WS3 = default(IToken);
	    IToken EOF4 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> commands2 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS1_tree = default(object);
	    object WS3_tree = default(object);
	    object EOF4_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
	    RewriteRuleSubtreeStream stream_commands=new RewriteRuleSubtreeStream(adaptor,"rule commands");
		try { DebugEnterRule(GrammarFileName, "parse");
		DebugLocation(110, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:111:2: ( ( WS )? ( commands ( WS )? )? EOF -> ^( T_ROOT ( commands )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:111:4: ( WS )? ( commands ( WS )? )? EOF
			{
			DebugLocation(111, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:111:4: ( WS )?
			int alt1=2;
			try { DebugEnterSubRule(1);
			try { DebugEnterDecision(1, decisionCanBacktrack[1]);
			int LA1_0 = input.LA(1);

			if ((LA1_0==WS))
			{
				alt1 = 1;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:111:4: WS
				{
				DebugLocation(111, 4);
				WS1=(IToken)Match(input,WS,Follow._WS_in_parse394); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS1);


				}
				break;

			}
			} finally { DebugExitSubRule(1); }

			DebugLocation(111, 8);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:111:8: ( commands ( WS )? )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, decisionCanBacktrack[3]);
			int LA3_0 = input.LA(1);

			if ((LA3_0==CREATE||LA3_0==DECLARE||LA3_0==DROP||(LA3_0>=SELECT && LA3_0<=SET)||LA3_0==USE||LA3_0==167))
			{
				alt3 = 1;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:111:9: commands ( WS )?
				{
				DebugLocation(111, 9);
				PushFollow(Follow._commands_in_parse398);
				commands2=commands();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_commands.Add(commands2.Tree);
				DebugLocation(111, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:111:18: ( WS )?
				int alt2=2;
				try { DebugEnterSubRule(2);
				try { DebugEnterDecision(2, decisionCanBacktrack[2]);
				int LA2_0 = input.LA(1);

				if ((LA2_0==WS))
				{
					alt2 = 1;
				}
				} finally { DebugExitDecision(2); }
				switch (alt2)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:111:18: WS
					{
					DebugLocation(111, 18);
					WS3=(IToken)Match(input,WS,Follow._WS_in_parse400); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS3);


					}
					break;

				}
				} finally { DebugExitSubRule(2); }


				}
				break;

			}
			} finally { DebugExitSubRule(3); }

			DebugLocation(111, 24);
			EOF4=(IToken)Match(input,EOF,Follow._EOF_in_parse405); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EOF.Add(EOF4);



			{
			// AST REWRITE
			// elements: commands
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 112:2: -> ^( T_ROOT ( commands )? )
			{
				DebugLocation(112, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:112:5: ^( T_ROOT ( commands )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(112, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_ROOT, "T_ROOT"), root_1);

				DebugLocation(112, 14);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:112:14: ( commands )?
				if (stream_commands.HasNext)
				{
					DebugLocation(112, 14);
					adaptor.AddChild(root_1, stream_commands.NextTree());

				}
				stream_commands.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parse", 1);
			LeaveRule("parse", 1);
			LeaveRule_parse();
	    }
	 	DebugLocation(113, 1);
		} finally { DebugExitRule(GrammarFileName, "parse"); }
		return retval;

	}
	// $ANTLR end "parse"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_commands() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_commands() {}

	// $ANTLR start "commands"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:115:1: commands : command ( ( WS )? ';' ( WS )? command )* ( ( WS )? ';' )? -> ( command )+ ;
	[GrammarRule("commands")]
	private AstParserRuleReturnScope<object, IToken> commands()
	{
		EnterRule_commands();
		EnterRule("commands", 2);
		TraceIn("commands", 2);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS6 = default(IToken);
	    IToken char_literal7 = default(IToken);
	    IToken WS8 = default(IToken);
	    IToken WS10 = default(IToken);
	    IToken char_literal11 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> command5 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> command9 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS6_tree = default(object);
	    object char_literal7_tree = default(object);
	    object WS8_tree = default(object);
	    object WS10_tree = default(object);
	    object char_literal11_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_175=new RewriteRuleITokenStream(adaptor,"token 175");
	    RewriteRuleSubtreeStream stream_command=new RewriteRuleSubtreeStream(adaptor,"rule command");
		try { DebugEnterRule(GrammarFileName, "commands");
		DebugLocation(115, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:116:2: ( command ( ( WS )? ';' ( WS )? command )* ( ( WS )? ';' )? -> ( command )+ )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:116:4: command ( ( WS )? ';' ( WS )? command )* ( ( WS )? ';' )?
			{
			DebugLocation(116, 4);
			PushFollow(Follow._command_in_commands428);
			command5=command();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_command.Add(command5.Tree);
			DebugLocation(116, 12);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:116:12: ( ( WS )? ';' ( WS )? command )*
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, decisionCanBacktrack[6]);
				int LA6_0 = input.LA(1);

				if ((LA6_0==WS))
				{
					int LA6_1 = input.LA(2);

					if ((LA6_1==175))
					{
						int LA6_2 = input.LA(3);

						if ((LA6_2==WS))
						{
							int LA6_4 = input.LA(4);

							if ((LA6_4==CREATE||LA6_4==DECLARE||LA6_4==DROP||(LA6_4>=SELECT && LA6_4<=SET)||LA6_4==USE||LA6_4==167))
							{
								alt6 = 1;
							}


						}
						else if ((LA6_2==CREATE||LA6_2==DECLARE||LA6_2==DROP||(LA6_2>=SELECT && LA6_2<=SET)||LA6_2==USE||LA6_2==167))
						{
							alt6 = 1;
						}


					}


				}
				else if ((LA6_0==175))
				{
					int LA6_2 = input.LA(2);

					if ((LA6_2==WS))
					{
						int LA6_4 = input.LA(3);

						if ((LA6_4==CREATE||LA6_4==DECLARE||LA6_4==DROP||(LA6_4>=SELECT && LA6_4<=SET)||LA6_4==USE||LA6_4==167))
						{
							alt6 = 1;
						}


					}
					else if ((LA6_2==CREATE||LA6_2==DECLARE||LA6_2==DROP||(LA6_2>=SELECT && LA6_2<=SET)||LA6_2==USE||LA6_2==167))
					{
						alt6 = 1;
					}


				}


				} finally { DebugExitDecision(6); }
				switch ( alt6 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:116:13: ( WS )? ';' ( WS )? command
					{
					DebugLocation(116, 13);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:116:13: ( WS )?
					int alt4=2;
					try { DebugEnterSubRule(4);
					try { DebugEnterDecision(4, decisionCanBacktrack[4]);
					int LA4_0 = input.LA(1);

					if ((LA4_0==WS))
					{
						alt4 = 1;
					}
					} finally { DebugExitDecision(4); }
					switch (alt4)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:116:13: WS
						{
						DebugLocation(116, 13);
						WS6=(IToken)Match(input,WS,Follow._WS_in_commands431); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS6);


						}
						break;

					}
					} finally { DebugExitSubRule(4); }

					DebugLocation(116, 17);
					char_literal7=(IToken)Match(input,175,Follow._175_in_commands434); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_175.Add(char_literal7);

					DebugLocation(116, 21);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:116:21: ( WS )?
					int alt5=2;
					try { DebugEnterSubRule(5);
					try { DebugEnterDecision(5, decisionCanBacktrack[5]);
					int LA5_0 = input.LA(1);

					if ((LA5_0==WS))
					{
						alt5 = 1;
					}
					} finally { DebugExitDecision(5); }
					switch (alt5)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:116:21: WS
						{
						DebugLocation(116, 21);
						WS8=(IToken)Match(input,WS,Follow._WS_in_commands436); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS8);


						}
						break;

					}
					} finally { DebugExitSubRule(5); }

					DebugLocation(116, 25);
					PushFollow(Follow._command_in_commands439);
					command9=command();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_command.Add(command9.Tree);

					}
					break;

				default:
					goto loop6;
				}
			}

			loop6:
				;

			} finally { DebugExitSubRule(6); }

			DebugLocation(116, 35);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:116:35: ( ( WS )? ';' )?
			int alt8=2;
			try { DebugEnterSubRule(8);
			try { DebugEnterDecision(8, decisionCanBacktrack[8]);
			int LA8_0 = input.LA(1);

			if ((LA8_0==WS))
			{
				int LA8_1 = input.LA(2);

				if ((LA8_1==175))
				{
					alt8 = 1;
				}
			}
			else if ((LA8_0==175))
			{
				alt8 = 1;
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:116:36: ( WS )? ';'
				{
				DebugLocation(116, 36);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:116:36: ( WS )?
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, decisionCanBacktrack[7]);
				int LA7_0 = input.LA(1);

				if ((LA7_0==WS))
				{
					alt7 = 1;
				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:116:36: WS
					{
					DebugLocation(116, 36);
					WS10=(IToken)Match(input,WS,Follow._WS_in_commands444); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS10);


					}
					break;

				}
				} finally { DebugExitSubRule(7); }

				DebugLocation(116, 40);
				char_literal11=(IToken)Match(input,175,Follow._175_in_commands447); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_175.Add(char_literal11);


				}
				break;

			}
			} finally { DebugExitSubRule(8); }



			{
			// AST REWRITE
			// elements: command
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 117:2: -> ( command )+
			{
				DebugLocation(117, 5);
				if (!(stream_command.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_command.HasNext )
				{
					DebugLocation(117, 5);
					adaptor.AddChild(root_0, stream_command.NextTree());

				}
				stream_command.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("commands", 2);
			LeaveRule("commands", 2);
			LeaveRule_commands();
	    }
	 	DebugLocation(118, 1);
		} finally { DebugExitRule(GrammarFileName, "commands"); }
		return retval;

	}
	// $ANTLR end "commands"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_command() {}

	// $ANTLR start "command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:120:1: command : ( select_command | use_command | declare_command | set_command | create_view_command | drop_view_command | drop_table_command );
	[GrammarRule("command")]
	private AstParserRuleReturnScope<object, IToken> command()
	{
		EnterRule_command();
		EnterRule("command", 3);
		TraceIn("command", 3);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> select_command12 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> use_command13 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> declare_command14 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> set_command15 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> create_view_command16 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> drop_view_command17 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> drop_table_command18 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "command");
		DebugLocation(120, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:121:2: ( select_command | use_command | declare_command | set_command | create_view_command | drop_view_command | drop_table_command )
			int alt9=7;
			try { DebugEnterDecision(9, decisionCanBacktrack[9]);
			switch (input.LA(1))
			{
			case SELECT:
			case 167:
				{
				alt9 = 1;
				}
				break;
			case USE:
				{
				alt9 = 2;
				}
				break;
			case DECLARE:
				{
				alt9 = 3;
				}
				break;
			case SET:
				{
				alt9 = 4;
				}
				break;
			case CREATE:
				{
				alt9 = 5;
				}
				break;
			case DROP:
				{
				int LA9_6 = input.LA(2);

				if ((LA9_6==WS))
				{
					int LA9_7 = input.LA(3);

					if ((LA9_7==VIEW))
					{
						alt9 = 6;
					}
					else if ((LA9_7==TABLE))
					{
						alt9 = 7;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 9, 7, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 6, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:121:4: select_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(121, 4);
				PushFollow(Follow._select_command_in_command467);
				select_command12=select_command();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, select_command12.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:122:4: use_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(122, 4);
				PushFollow(Follow._use_command_in_command472);
				use_command13=use_command();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, use_command13.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:123:4: declare_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(123, 4);
				PushFollow(Follow._declare_command_in_command477);
				declare_command14=declare_command();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, declare_command14.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:124:4: set_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(124, 4);
				PushFollow(Follow._set_command_in_command482);
				set_command15=set_command();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, set_command15.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:125:4: create_view_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(125, 4);
				PushFollow(Follow._create_view_command_in_command487);
				create_view_command16=create_view_command();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, create_view_command16.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:126:4: drop_view_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(126, 4);
				PushFollow(Follow._drop_view_command_in_command492);
				drop_view_command17=drop_view_command();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, drop_view_command17.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:127:4: drop_table_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(127, 4);
				PushFollow(Follow._drop_table_command_in_command497);
				drop_table_command18=drop_table_command();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, drop_table_command18.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("command", 3);
			LeaveRule("command", 3);
			LeaveRule_command();
	    }
	 	DebugLocation(128, 1);
		} finally { DebugExitRule(GrammarFileName, "command"); }
		return retval;

	}
	// $ANTLR end "command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_select_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_select_command() {}

	// $ANTLR start "select_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:133:1: select_command : select_command_union ( WS orderby_clause )? -> ^( T_SELECT select_command_union ( orderby_clause )? ) ;
	[GrammarRule("select_command")]
	private AstParserRuleReturnScope<object, IToken> select_command()
	{
		EnterRule_select_command();
		EnterRule("select_command", 4);
		TraceIn("select_command", 4);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS20 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> select_command_union19 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> orderby_clause21 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS20_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_select_command_union=new RewriteRuleSubtreeStream(adaptor,"rule select_command_union");
	    RewriteRuleSubtreeStream stream_orderby_clause=new RewriteRuleSubtreeStream(adaptor,"rule orderby_clause");
		try { DebugEnterRule(GrammarFileName, "select_command");
		DebugLocation(133, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:134:2: ( select_command_union ( WS orderby_clause )? -> ^( T_SELECT select_command_union ( orderby_clause )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:134:4: select_command_union ( WS orderby_clause )?
			{
			DebugLocation(134, 4);
			PushFollow(Follow._select_command_union_in_select_command511);
			select_command_union19=select_command_union();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_select_command_union.Add(select_command_union19.Tree);
			DebugLocation(134, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:134:25: ( WS orderby_clause )?
			int alt10=2;
			try { DebugEnterSubRule(10);
			try { DebugEnterDecision(10, decisionCanBacktrack[10]);
			int LA10_0 = input.LA(1);

			if ((LA10_0==WS))
			{
				int LA10_1 = input.LA(2);

				if ((LA10_1==ORDER))
				{
					alt10 = 1;
				}
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:134:26: WS orderby_clause
				{
				DebugLocation(134, 26);
				WS20=(IToken)Match(input,WS,Follow._WS_in_select_command514); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS20);

				DebugLocation(134, 29);
				PushFollow(Follow._orderby_clause_in_select_command516);
				orderby_clause21=orderby_clause();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_orderby_clause.Add(orderby_clause21.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(10); }



			{
			// AST REWRITE
			// elements: orderby_clause, select_command_union
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 135:3: -> ^( T_SELECT select_command_union ( orderby_clause )? )
			{
				DebugLocation(135, 6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:135:6: ^( T_SELECT select_command_union ( orderby_clause )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(135, 8);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SELECT, "T_SELECT"), root_1);

				DebugLocation(135, 17);
				adaptor.AddChild(root_1, stream_select_command_union.NextTree());
				DebugLocation(135, 38);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:135:38: ( orderby_clause )?
				if (stream_orderby_clause.HasNext)
				{
					DebugLocation(135, 38);
					adaptor.AddChild(root_1, stream_orderby_clause.NextTree());

				}
				stream_orderby_clause.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("select_command", 4);
			LeaveRule("select_command", 4);
			LeaveRule_select_command();
	    }
	 	DebugLocation(136, 1);
		} finally { DebugExitRule(GrammarFileName, "select_command"); }
		return retval;

	}
	// $ANTLR end "select_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_select_command_union() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_select_command_union() {}

	// $ANTLR start "select_command_union"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:141:1: select_command_union : (a= select_command_simple -> $a) ( WS UNION WS b= select_command_simple -> ^( T_SELECT_UNION $select_command_union $b) )* ;
	[GrammarRule("select_command_union")]
	private AstParserRuleReturnScope<object, IToken> select_command_union()
	{
		EnterRule_select_command_union();
		EnterRule("select_command_union", 5);
		TraceIn("select_command_union", 5);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS22 = default(IToken);
	    IToken UNION23 = default(IToken);
	    IToken WS24 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);

	    object WS22_tree = default(object);
	    object UNION23_tree = default(object);
	    object WS24_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_UNION=new RewriteRuleITokenStream(adaptor,"token UNION");
	    RewriteRuleSubtreeStream stream_select_command_simple=new RewriteRuleSubtreeStream(adaptor,"rule select_command_simple");
		try { DebugEnterRule(GrammarFileName, "select_command_union");
		DebugLocation(141, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:142:2: ( (a= select_command_simple -> $a) ( WS UNION WS b= select_command_simple -> ^( T_SELECT_UNION $select_command_union $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:142:4: (a= select_command_simple -> $a) ( WS UNION WS b= select_command_simple -> ^( T_SELECT_UNION $select_command_union $b) )*
			{
			DebugLocation(142, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:142:4: (a= select_command_simple -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:142:5: a= select_command_simple
			{
			DebugLocation(142, 6);
			PushFollow(Follow._select_command_simple_in_select_command_union548);
			a=select_command_simple();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_select_command_simple.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 142:28: -> $a
			{
				DebugLocation(142, 31);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(142, 34);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:142:34: ( WS UNION WS b= select_command_simple -> ^( T_SELECT_UNION $select_command_union $b) )*
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, decisionCanBacktrack[11]);
				int LA11_0 = input.LA(1);

				if ((LA11_0==WS))
				{
					int LA11_1 = input.LA(2);

					if ((LA11_1==UNION))
					{
						alt11 = 1;
					}


				}


				} finally { DebugExitDecision(11); }
				switch ( alt11 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:142:35: WS UNION WS b= select_command_simple
					{
					DebugLocation(142, 35);
					WS22=(IToken)Match(input,WS,Follow._WS_in_select_command_union555); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS22);

					DebugLocation(142, 38);
					UNION23=(IToken)Match(input,UNION,Follow._UNION_in_select_command_union557); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_UNION.Add(UNION23);

					DebugLocation(142, 44);
					WS24=(IToken)Match(input,WS,Follow._WS_in_select_command_union559); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS24);

					DebugLocation(142, 48);
					PushFollow(Follow._select_command_simple_in_select_command_union563);
					b=select_command_simple();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_select_command_simple.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, select_command_union
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 142:71: -> ^( T_SELECT_UNION $select_command_union $b)
					{
						DebugLocation(142, 74);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:142:74: ^( T_SELECT_UNION $select_command_union $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(142, 76);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SELECT_UNION, "T_SELECT_UNION"), root_1);

						DebugLocation(142, 92);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(142, 114);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop11;
				}
			}

			loop11:
				;

			} finally { DebugExitSubRule(11); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("select_command_union", 5);
			LeaveRule("select_command_union", 5);
			LeaveRule_select_command_union();
	    }
	 	DebugLocation(143, 1);
		} finally { DebugExitRule(GrammarFileName, "select_command_union"); }
		return retval;

	}
	// $ANTLR end "select_command_union"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_select_command_simple() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_select_command_simple() {}

	// $ANTLR start "select_command_simple"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:145:1: select_command_simple : ( ( '(' )=> subquery | SELECT ( WS distinct_clause )? ( WS top_clause )? WS column_list ( WS into_clause )? ( WS from_clause )? ( WS where_clause )? ( WS groupby_clause )? ( WS having_clause )? -> ^( T_SELECT_SIMPLE ( distinct_clause )? ( top_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( having_clause )? ) );
	[GrammarRule("select_command_simple")]
	private AstParserRuleReturnScope<object, IToken> select_command_simple()
	{
		EnterRule_select_command_simple();
		EnterRule("select_command_simple", 6);
		TraceIn("select_command_simple", 6);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken SELECT26 = default(IToken);
	    IToken WS27 = default(IToken);
	    IToken WS29 = default(IToken);
	    IToken WS31 = default(IToken);
	    IToken WS33 = default(IToken);
	    IToken WS35 = default(IToken);
	    IToken WS37 = default(IToken);
	    IToken WS39 = default(IToken);
	    IToken WS41 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> subquery25 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> distinct_clause28 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> top_clause30 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> column_list32 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> into_clause34 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> from_clause36 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> where_clause38 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> groupby_clause40 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> having_clause42 = default(AstParserRuleReturnScope<object, IToken>);

	    object SELECT26_tree = default(object);
	    object WS27_tree = default(object);
	    object WS29_tree = default(object);
	    object WS31_tree = default(object);
	    object WS33_tree = default(object);
	    object WS35_tree = default(object);
	    object WS37_tree = default(object);
	    object WS39_tree = default(object);
	    object WS41_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_SELECT=new RewriteRuleITokenStream(adaptor,"token SELECT");
	    RewriteRuleSubtreeStream stream_groupby_clause=new RewriteRuleSubtreeStream(adaptor,"rule groupby_clause");
	    RewriteRuleSubtreeStream stream_distinct_clause=new RewriteRuleSubtreeStream(adaptor,"rule distinct_clause");
	    RewriteRuleSubtreeStream stream_from_clause=new RewriteRuleSubtreeStream(adaptor,"rule from_clause");
	    RewriteRuleSubtreeStream stream_having_clause=new RewriteRuleSubtreeStream(adaptor,"rule having_clause");
	    RewriteRuleSubtreeStream stream_column_list=new RewriteRuleSubtreeStream(adaptor,"rule column_list");
	    RewriteRuleSubtreeStream stream_where_clause=new RewriteRuleSubtreeStream(adaptor,"rule where_clause");
	    RewriteRuleSubtreeStream stream_into_clause=new RewriteRuleSubtreeStream(adaptor,"rule into_clause");
	    RewriteRuleSubtreeStream stream_top_clause=new RewriteRuleSubtreeStream(adaptor,"rule top_clause");
		try { DebugEnterRule(GrammarFileName, "select_command_simple");
		DebugLocation(145, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:146:2: ( ( '(' )=> subquery | SELECT ( WS distinct_clause )? ( WS top_clause )? WS column_list ( WS into_clause )? ( WS from_clause )? ( WS where_clause )? ( WS groupby_clause )? ( WS having_clause )? -> ^( T_SELECT_SIMPLE ( distinct_clause )? ( top_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( having_clause )? ) )
			int alt19=2;
			try { DebugEnterDecision(19, decisionCanBacktrack[19]);
			int LA19_0 = input.LA(1);

			if ((LA19_0==167) && (EvaluatePredicate(synpred1_gql_fragment)))
			{
				alt19 = 1;
			}
			else if ((LA19_0==SELECT))
			{
				alt19 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 19, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:146:4: ( '(' )=> subquery
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(146, 13);
				PushFollow(Follow._subquery_in_select_command_simple595);
				subquery25=subquery();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, subquery25.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:147:4: SELECT ( WS distinct_clause )? ( WS top_clause )? WS column_list ( WS into_clause )? ( WS from_clause )? ( WS where_clause )? ( WS groupby_clause )? ( WS having_clause )?
				{
				DebugLocation(147, 4);
				SELECT26=(IToken)Match(input,SELECT,Follow._SELECT_in_select_command_simple600); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SELECT.Add(SELECT26);

				DebugLocation(147, 11);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:147:11: ( WS distinct_clause )?
				int alt12=2;
				try { DebugEnterSubRule(12);
				try { DebugEnterDecision(12, decisionCanBacktrack[12]);
				int LA12_0 = input.LA(1);

				if ((LA12_0==WS))
				{
					int LA12_1 = input.LA(2);

					if ((LA12_1==ALL||LA12_1==DISTINCT))
					{
						alt12 = 1;
					}
				}
				} finally { DebugExitDecision(12); }
				switch (alt12)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:147:12: WS distinct_clause
					{
					DebugLocation(147, 12);
					WS27=(IToken)Match(input,WS,Follow._WS_in_select_command_simple603); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS27);

					DebugLocation(147, 15);
					PushFollow(Follow._distinct_clause_in_select_command_simple605);
					distinct_clause28=distinct_clause();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_distinct_clause.Add(distinct_clause28.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(12); }

				DebugLocation(147, 33);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:147:33: ( WS top_clause )?
				int alt13=2;
				try { DebugEnterSubRule(13);
				try { DebugEnterDecision(13, decisionCanBacktrack[13]);
				int LA13_0 = input.LA(1);

				if ((LA13_0==WS))
				{
					int LA13_1 = input.LA(2);

					if ((LA13_1==TOP))
					{
						alt13 = 1;
					}
				}
				} finally { DebugExitDecision(13); }
				switch (alt13)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:147:34: WS top_clause
					{
					DebugLocation(147, 34);
					WS29=(IToken)Match(input,WS,Follow._WS_in_select_command_simple610); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS29);

					DebugLocation(147, 37);
					PushFollow(Follow._top_clause_in_select_command_simple612);
					top_clause30=top_clause();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_top_clause.Add(top_clause30.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(13); }

				DebugLocation(147, 50);
				WS31=(IToken)Match(input,WS,Follow._WS_in_select_command_simple616); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS31);

				DebugLocation(147, 53);
				PushFollow(Follow._column_list_in_select_command_simple618);
				column_list32=column_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_column_list.Add(column_list32.Tree);
				DebugLocation(147, 65);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:147:65: ( WS into_clause )?
				int alt14=2;
				try { DebugEnterSubRule(14);
				try { DebugEnterDecision(14, decisionCanBacktrack[14]);
				int LA14_0 = input.LA(1);

				if ((LA14_0==WS))
				{
					int LA14_1 = input.LA(2);

					if ((LA14_1==INTO))
					{
						alt14 = 1;
					}
				}
				} finally { DebugExitDecision(14); }
				switch (alt14)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:147:66: WS into_clause
					{
					DebugLocation(147, 66);
					WS33=(IToken)Match(input,WS,Follow._WS_in_select_command_simple621); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS33);

					DebugLocation(147, 69);
					PushFollow(Follow._into_clause_in_select_command_simple623);
					into_clause34=into_clause();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_into_clause.Add(into_clause34.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(14); }

				DebugLocation(147, 83);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:147:83: ( WS from_clause )?
				int alt15=2;
				try { DebugEnterSubRule(15);
				try { DebugEnterDecision(15, decisionCanBacktrack[15]);
				int LA15_0 = input.LA(1);

				if ((LA15_0==WS))
				{
					int LA15_1 = input.LA(2);

					if ((LA15_1==FROM))
					{
						alt15 = 1;
					}
				}
				} finally { DebugExitDecision(15); }
				switch (alt15)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:147:84: WS from_clause
					{
					DebugLocation(147, 84);
					WS35=(IToken)Match(input,WS,Follow._WS_in_select_command_simple628); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS35);

					DebugLocation(147, 87);
					PushFollow(Follow._from_clause_in_select_command_simple630);
					from_clause36=from_clause();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_from_clause.Add(from_clause36.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(15); }

				DebugLocation(147, 101);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:147:101: ( WS where_clause )?
				int alt16=2;
				try { DebugEnterSubRule(16);
				try { DebugEnterDecision(16, decisionCanBacktrack[16]);
				int LA16_0 = input.LA(1);

				if ((LA16_0==WS))
				{
					int LA16_1 = input.LA(2);

					if ((LA16_1==WHERE))
					{
						alt16 = 1;
					}
				}
				} finally { DebugExitDecision(16); }
				switch (alt16)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:147:102: WS where_clause
					{
					DebugLocation(147, 102);
					WS37=(IToken)Match(input,WS,Follow._WS_in_select_command_simple635); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS37);

					DebugLocation(147, 105);
					PushFollow(Follow._where_clause_in_select_command_simple637);
					where_clause38=where_clause();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_where_clause.Add(where_clause38.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(16); }

				DebugLocation(147, 120);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:147:120: ( WS groupby_clause )?
				int alt17=2;
				try { DebugEnterSubRule(17);
				try { DebugEnterDecision(17, decisionCanBacktrack[17]);
				int LA17_0 = input.LA(1);

				if ((LA17_0==WS))
				{
					int LA17_1 = input.LA(2);

					if ((LA17_1==GROUP))
					{
						alt17 = 1;
					}
				}
				} finally { DebugExitDecision(17); }
				switch (alt17)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:147:121: WS groupby_clause
					{
					DebugLocation(147, 121);
					WS39=(IToken)Match(input,WS,Follow._WS_in_select_command_simple642); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS39);

					DebugLocation(147, 124);
					PushFollow(Follow._groupby_clause_in_select_command_simple644);
					groupby_clause40=groupby_clause();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_groupby_clause.Add(groupby_clause40.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(17); }

				DebugLocation(147, 141);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:147:141: ( WS having_clause )?
				int alt18=2;
				try { DebugEnterSubRule(18);
				try { DebugEnterDecision(18, decisionCanBacktrack[18]);
				int LA18_0 = input.LA(1);

				if ((LA18_0==WS))
				{
					int LA18_1 = input.LA(2);

					if ((LA18_1==HAVING))
					{
						alt18 = 1;
					}
				}
				} finally { DebugExitDecision(18); }
				switch (alt18)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:147:142: WS having_clause
					{
					DebugLocation(147, 142);
					WS41=(IToken)Match(input,WS,Follow._WS_in_select_command_simple649); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS41);

					DebugLocation(147, 145);
					PushFollow(Follow._having_clause_in_select_command_simple651);
					having_clause42=having_clause();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_having_clause.Add(having_clause42.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(18); }



				{
				// AST REWRITE
				// elements: having_clause, where_clause, distinct_clause, top_clause, from_clause, column_list, groupby_clause, into_clause
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 148:3: -> ^( T_SELECT_SIMPLE ( distinct_clause )? ( top_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( having_clause )? )
				{
					DebugLocation(148, 6);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:148:6: ^( T_SELECT_SIMPLE ( distinct_clause )? ( top_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( having_clause )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(148, 8);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SELECT_SIMPLE, "T_SELECT_SIMPLE"), root_1);

					DebugLocation(148, 24);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:148:24: ( distinct_clause )?
					if (stream_distinct_clause.HasNext)
					{
						DebugLocation(148, 24);
						adaptor.AddChild(root_1, stream_distinct_clause.NextTree());

					}
					stream_distinct_clause.Reset();
					DebugLocation(148, 41);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:148:41: ( top_clause )?
					if (stream_top_clause.HasNext)
					{
						DebugLocation(148, 41);
						adaptor.AddChild(root_1, stream_top_clause.NextTree());

					}
					stream_top_clause.Reset();
					DebugLocation(148, 53);
					adaptor.AddChild(root_1, stream_column_list.NextTree());
					DebugLocation(148, 65);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:148:65: ( into_clause )?
					if (stream_into_clause.HasNext)
					{
						DebugLocation(148, 65);
						adaptor.AddChild(root_1, stream_into_clause.NextTree());

					}
					stream_into_clause.Reset();
					DebugLocation(148, 78);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:148:78: ( from_clause )?
					if (stream_from_clause.HasNext)
					{
						DebugLocation(148, 78);
						adaptor.AddChild(root_1, stream_from_clause.NextTree());

					}
					stream_from_clause.Reset();
					DebugLocation(148, 91);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:148:91: ( where_clause )?
					if (stream_where_clause.HasNext)
					{
						DebugLocation(148, 91);
						adaptor.AddChild(root_1, stream_where_clause.NextTree());

					}
					stream_where_clause.Reset();
					DebugLocation(148, 105);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:148:105: ( groupby_clause )?
					if (stream_groupby_clause.HasNext)
					{
						DebugLocation(148, 105);
						adaptor.AddChild(root_1, stream_groupby_clause.NextTree());

					}
					stream_groupby_clause.Reset();
					DebugLocation(148, 121);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:148:121: ( having_clause )?
					if (stream_having_clause.HasNext)
					{
						DebugLocation(148, 121);
						adaptor.AddChild(root_1, stream_having_clause.NextTree());

					}
					stream_having_clause.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("select_command_simple", 6);
			LeaveRule("select_command_simple", 6);
			LeaveRule_select_command_simple();
	    }
	 	DebugLocation(149, 1);
		} finally { DebugExitRule(GrammarFileName, "select_command_simple"); }
		return retval;

	}
	// $ANTLR end "select_command_simple"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_distinct_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_distinct_clause() {}

	// $ANTLR start "distinct_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:151:1: distinct_clause : ( DISTINCT -> T_DISTINCT | ALL -> T_ALL );
	[GrammarRule("distinct_clause")]
	private AstParserRuleReturnScope<object, IToken> distinct_clause()
	{
		EnterRule_distinct_clause();
		EnterRule("distinct_clause", 7);
		TraceIn("distinct_clause", 7);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken DISTINCT43 = default(IToken);
	    IToken ALL44 = default(IToken);

	    object DISTINCT43_tree = default(object);
	    object ALL44_tree = default(object);
	    RewriteRuleITokenStream stream_DISTINCT=new RewriteRuleITokenStream(adaptor,"token DISTINCT");
	    RewriteRuleITokenStream stream_ALL=new RewriteRuleITokenStream(adaptor,"token ALL");

		try { DebugEnterRule(GrammarFileName, "distinct_clause");
		DebugLocation(151, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:152:2: ( DISTINCT -> T_DISTINCT | ALL -> T_ALL )
			int alt20=2;
			try { DebugEnterDecision(20, decisionCanBacktrack[20]);
			int LA20_0 = input.LA(1);

			if ((LA20_0==DISTINCT))
			{
				alt20 = 1;
			}
			else if ((LA20_0==ALL))
			{
				alt20 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 20, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:152:4: DISTINCT
				{
				DebugLocation(152, 4);
				DISTINCT43=(IToken)Match(input,DISTINCT,Follow._DISTINCT_in_distinct_clause696); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DISTINCT.Add(DISTINCT43);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 152:13: -> T_DISTINCT
				{
					DebugLocation(152, 16);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_DISTINCT, "T_DISTINCT"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:153:4: ALL
				{
				DebugLocation(153, 4);
				ALL44=(IToken)Match(input,ALL,Follow._ALL_in_distinct_clause705); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ALL.Add(ALL44);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 153:8: -> T_ALL
				{
					DebugLocation(153, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_ALL, "T_ALL"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("distinct_clause", 7);
			LeaveRule("distinct_clause", 7);
			LeaveRule_distinct_clause();
	    }
	 	DebugLocation(154, 1);
		} finally { DebugExitRule(GrammarFileName, "distinct_clause"); }
		return retval;

	}
	// $ANTLR end "distinct_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_top_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_top_clause() {}

	// $ANTLR start "top_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:156:1: top_clause : TOP WS expression_atom -> ^( T_TOP expression_atom ) ;
	[GrammarRule("top_clause")]
	private AstParserRuleReturnScope<object, IToken> top_clause()
	{
		EnterRule_top_clause();
		EnterRule("top_clause", 8);
		TraceIn("top_clause", 8);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOP45 = default(IToken);
	    IToken WS46 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression_atom47 = default(AstParserRuleReturnScope<object, IToken>);

	    object TOP45_tree = default(object);
	    object WS46_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_TOP=new RewriteRuleITokenStream(adaptor,"token TOP");
	    RewriteRuleSubtreeStream stream_expression_atom=new RewriteRuleSubtreeStream(adaptor,"rule expression_atom");
		try { DebugEnterRule(GrammarFileName, "top_clause");
		DebugLocation(156, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:157:2: ( TOP WS expression_atom -> ^( T_TOP expression_atom ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:157:4: TOP WS expression_atom
			{
			DebugLocation(157, 4);
			TOP45=(IToken)Match(input,TOP,Follow._TOP_in_top_clause721); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_TOP.Add(TOP45);

			DebugLocation(157, 8);
			WS46=(IToken)Match(input,WS,Follow._WS_in_top_clause723); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS46);

			DebugLocation(157, 11);
			PushFollow(Follow._expression_atom_in_top_clause725);
			expression_atom47=expression_atom();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression_atom.Add(expression_atom47.Tree);


			{
			// AST REWRITE
			// elements: expression_atom
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 158:2: -> ^( T_TOP expression_atom )
			{
				DebugLocation(158, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:158:5: ^( T_TOP expression_atom )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(158, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_TOP, "T_TOP"), root_1);

				DebugLocation(158, 13);
				adaptor.AddChild(root_1, stream_expression_atom.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("top_clause", 8);
			LeaveRule("top_clause", 8);
			LeaveRule_top_clause();
	    }
	 	DebugLocation(159, 1);
		} finally { DebugExitRule(GrammarFileName, "top_clause"); }
		return retval;

	}
	// $ANTLR end "top_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_column_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_column_list() {}

	// $ANTLR start "column_list"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:161:1: column_list : column ( ( WS )? ',' ( WS )? column )* -> ^( T_COLUMNLIST ( column )* ) ;
	[GrammarRule("column_list")]
	private AstParserRuleReturnScope<object, IToken> column_list()
	{
		EnterRule_column_list();
		EnterRule("column_list", 9);
		TraceIn("column_list", 9);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS49 = default(IToken);
	    IToken char_literal50 = default(IToken);
	    IToken WS51 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> column48 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> column52 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS49_tree = default(object);
	    object char_literal50_tree = default(object);
	    object WS51_tree = default(object);
	    RewriteRuleITokenStream stream_171=new RewriteRuleITokenStream(adaptor,"token 171");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_column=new RewriteRuleSubtreeStream(adaptor,"rule column");
		try { DebugEnterRule(GrammarFileName, "column_list");
		DebugLocation(161, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:162:2: ( column ( ( WS )? ',' ( WS )? column )* -> ^( T_COLUMNLIST ( column )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:162:4: column ( ( WS )? ',' ( WS )? column )*
			{
			DebugLocation(162, 4);
			PushFollow(Follow._column_in_column_list747);
			column48=column();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_column.Add(column48.Tree);
			DebugLocation(162, 11);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:162:11: ( ( WS )? ',' ( WS )? column )*
			try { DebugEnterSubRule(23);
			while (true)
			{
				int alt23=2;
				try { DebugEnterDecision(23, decisionCanBacktrack[23]);
				int LA23_0 = input.LA(1);

				if ((LA23_0==WS))
				{
					int LA23_1 = input.LA(2);

					if ((LA23_1==171))
					{
						alt23 = 1;
					}


				}
				else if ((LA23_0==171))
				{
					alt23 = 1;
				}


				} finally { DebugExitDecision(23); }
				switch ( alt23 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:162:12: ( WS )? ',' ( WS )? column
					{
					DebugLocation(162, 12);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:162:12: ( WS )?
					int alt21=2;
					try { DebugEnterSubRule(21);
					try { DebugEnterDecision(21, decisionCanBacktrack[21]);
					int LA21_0 = input.LA(1);

					if ((LA21_0==WS))
					{
						alt21 = 1;
					}
					} finally { DebugExitDecision(21); }
					switch (alt21)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:162:12: WS
						{
						DebugLocation(162, 12);
						WS49=(IToken)Match(input,WS,Follow._WS_in_column_list750); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS49);


						}
						break;

					}
					} finally { DebugExitSubRule(21); }

					DebugLocation(162, 16);
					char_literal50=(IToken)Match(input,171,Follow._171_in_column_list753); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_171.Add(char_literal50);

					DebugLocation(162, 20);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:162:20: ( WS )?
					int alt22=2;
					try { DebugEnterSubRule(22);
					try { DebugEnterDecision(22, decisionCanBacktrack[22]);
					int LA22_0 = input.LA(1);

					if ((LA22_0==WS))
					{
						alt22 = 1;
					}
					} finally { DebugExitDecision(22); }
					switch (alt22)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:162:20: WS
						{
						DebugLocation(162, 20);
						WS51=(IToken)Match(input,WS,Follow._WS_in_column_list755); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS51);


						}
						break;

					}
					} finally { DebugExitSubRule(22); }

					DebugLocation(162, 24);
					PushFollow(Follow._column_in_column_list758);
					column52=column();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_column.Add(column52.Tree);

					}
					break;

				default:
					goto loop23;
				}
			}

			loop23:
				;

			} finally { DebugExitSubRule(23); }



			{
			// AST REWRITE
			// elements: column
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 163:2: -> ^( T_COLUMNLIST ( column )* )
			{
				DebugLocation(163, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:163:5: ^( T_COLUMNLIST ( column )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(163, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_COLUMNLIST, "T_COLUMNLIST"), root_1);

				DebugLocation(163, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:163:20: ( column )*
				while ( stream_column.HasNext )
				{
					DebugLocation(163, 20);
					adaptor.AddChild(root_1, stream_column.NextTree());

				}
				stream_column.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("column_list", 9);
			LeaveRule("column_list", 9);
			LeaveRule_column_list();
	    }
	 	DebugLocation(164, 1);
		} finally { DebugExitRule(GrammarFileName, "column_list"); }
		return retval;

	}
	// $ANTLR end "column_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_column() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_column() {}

	// $ANTLR start "column"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:166:1: column : ( all_columns | expression ( WS SIMPLE_FILE )? -> ^( T_COLUMN expression ( SIMPLE_FILE )? ) );
	[GrammarRule("column")]
	private AstParserRuleReturnScope<object, IToken> column()
	{
		EnterRule_column();
		EnterRule("column", 10);
		TraceIn("column", 10);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS55 = default(IToken);
	    IToken SIMPLE_FILE56 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> all_columns53 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression54 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS55_tree = default(object);
	    object SIMPLE_FILE56_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_SIMPLE_FILE=new RewriteRuleITokenStream(adaptor,"token SIMPLE_FILE");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "column");
		DebugLocation(166, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:167:2: ( all_columns | expression ( WS SIMPLE_FILE )? -> ^( T_COLUMN expression ( SIMPLE_FILE )? ) )
			int alt25=2;
			try { DebugEnterDecision(25, decisionCanBacktrack[25]);
			switch (input.LA(1))
			{
			case SIMPLE_FILE:
				{
				switch (input.LA(2))
				{
				case WS:
					{
					int LA25_4 = input.LA(3);

					if ((LA25_4==EOF||LA25_4==AND||LA25_4==BETWEEN||LA25_4==FROM||LA25_4==GROUP||LA25_4==HAVING||(LA25_4>=IN && LA25_4<=INTO)||LA25_4==LIKE||LA25_4==MATCH||LA25_4==NOT||(LA25_4>=OR && LA25_4<=ORDER)||LA25_4==SIMPLE_FILE||LA25_4==UNION||LA25_4==WHERE||(LA25_4>=162 && LA25_4<=166)||(LA25_4>=168 && LA25_4<=172)||(LA25_4>=174 && LA25_4<=181)||(LA25_4>=184 && LA25_4<=185)))
					{
						alt25 = 2;
					}
					else if ((LA25_4==173))
					{
						switch (input.LA(4))
						{
						case WS:
							{
							int LA25_6 = input.LA(5);

							if ((LA25_6==169))
							{
								alt25 = 1;
							}
							else if ((LA25_6==SIMPLE_FILE))
							{
								alt25 = 2;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 25, 6, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case 169:
							{
							alt25 = 1;
							}
							break;
						case SIMPLE_FILE:
							{
							alt25 = 2;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 25, 5, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 25, 4, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 173:
					{
					switch (input.LA(3))
					{
					case WS:
						{
						int LA25_6 = input.LA(4);

						if ((LA25_6==169))
						{
							alt25 = 1;
						}
						else if ((LA25_6==SIMPLE_FILE))
						{
							alt25 = 2;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 25, 6, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case 169:
						{
						alt25 = 1;
						}
						break;
					case SIMPLE_FILE:
						{
						alt25 = 2;
						}
						break;
					default:
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 25, 5, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					}
					break;
				case EOF:
				case LIKE:
				case MATCH:
				case NOT:
				case 162:
				case 163:
				case 164:
				case 165:
				case 166:
				case 168:
				case 169:
				case 170:
				case 171:
				case 172:
				case 174:
				case 175:
				case 176:
				case 177:
				case 178:
				case 179:
				case 180:
				case 181:
				case 184:
				case 185:
					{
					alt25 = 2;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 25, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				}
				break;
			case 169:
				{
				alt25 = 1;
				}
				break;
			case CASE:
			case CAST:
			case CONVERT:
			case COUNT:
			case DATEADD:
			case DATEDIFF:
			case DATEPART:
			case EXISTS:
			case NOT:
			case NUMBER:
			case STRING:
			case SYSTEMVAR:
			case TOKEN:
			case VARIABLE:
			case 167:
			case 170:
			case 172:
			case 186:
				{
				alt25 = 2;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 25, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:167:4: all_columns
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(167, 4);
				PushFollow(Follow._all_columns_in_column782);
				all_columns53=all_columns();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, all_columns53.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:168:4: expression ( WS SIMPLE_FILE )?
				{
				DebugLocation(168, 4);
				PushFollow(Follow._expression_in_column787);
				expression54=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression54.Tree);
				DebugLocation(168, 15);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:168:15: ( WS SIMPLE_FILE )?
				int alt24=2;
				try { DebugEnterSubRule(24);
				try { DebugEnterDecision(24, decisionCanBacktrack[24]);
				int LA24_0 = input.LA(1);

				if ((LA24_0==WS))
				{
					int LA24_1 = input.LA(2);

					if ((LA24_1==SIMPLE_FILE))
					{
						alt24 = 1;
					}
				}
				} finally { DebugExitDecision(24); }
				switch (alt24)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:168:16: WS SIMPLE_FILE
					{
					DebugLocation(168, 16);
					WS55=(IToken)Match(input,WS,Follow._WS_in_column790); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS55);

					DebugLocation(168, 19);
					SIMPLE_FILE56=(IToken)Match(input,SIMPLE_FILE,Follow._SIMPLE_FILE_in_column792); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SIMPLE_FILE.Add(SIMPLE_FILE56);


					}
					break;

				}
				} finally { DebugExitSubRule(24); }



				{
				// AST REWRITE
				// elements: expression, SIMPLE_FILE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 168:33: -> ^( T_COLUMN expression ( SIMPLE_FILE )? )
				{
					DebugLocation(168, 36);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:168:36: ^( T_COLUMN expression ( SIMPLE_FILE )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(168, 38);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_COLUMN, "T_COLUMN"), root_1);

					DebugLocation(168, 47);
					adaptor.AddChild(root_1, stream_expression.NextTree());
					DebugLocation(168, 58);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:168:58: ( SIMPLE_FILE )?
					if (stream_SIMPLE_FILE.HasNext)
					{
						DebugLocation(168, 58);
						adaptor.AddChild(root_1, stream_SIMPLE_FILE.NextNode());

					}
					stream_SIMPLE_FILE.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("column", 10);
			LeaveRule("column", 10);
			LeaveRule_column();
	    }
	 	DebugLocation(169, 1);
		} finally { DebugExitRule(GrammarFileName, "column"); }
		return retval;

	}
	// $ANTLR end "column"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_all_columns() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_all_columns() {}

	// $ANTLR start "all_columns"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:171:1: all_columns : ( table_alias ( WS )? '.' ( WS )? )? '*' -> ^( T_ALLCOLUMNS ( table_alias )? ) ;
	[GrammarRule("all_columns")]
	private AstParserRuleReturnScope<object, IToken> all_columns()
	{
		EnterRule_all_columns();
		EnterRule("all_columns", 11);
		TraceIn("all_columns", 11);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS58 = default(IToken);
	    IToken char_literal59 = default(IToken);
	    IToken WS60 = default(IToken);
	    IToken char_literal61 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> table_alias57 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS58_tree = default(object);
	    object char_literal59_tree = default(object);
	    object WS60_tree = default(object);
	    object char_literal61_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_173=new RewriteRuleITokenStream(adaptor,"token 173");
	    RewriteRuleITokenStream stream_169=new RewriteRuleITokenStream(adaptor,"token 169");
	    RewriteRuleSubtreeStream stream_table_alias=new RewriteRuleSubtreeStream(adaptor,"rule table_alias");
		try { DebugEnterRule(GrammarFileName, "all_columns");
		DebugLocation(171, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:172:2: ( ( table_alias ( WS )? '.' ( WS )? )? '*' -> ^( T_ALLCOLUMNS ( table_alias )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:172:4: ( table_alias ( WS )? '.' ( WS )? )? '*'
			{
			DebugLocation(172, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:172:4: ( table_alias ( WS )? '.' ( WS )? )?
			int alt28=2;
			try { DebugEnterSubRule(28);
			try { DebugEnterDecision(28, decisionCanBacktrack[28]);
			int LA28_0 = input.LA(1);

			if ((LA28_0==SIMPLE_FILE))
			{
				alt28 = 1;
			}
			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:172:5: table_alias ( WS )? '.' ( WS )?
				{
				DebugLocation(172, 5);
				PushFollow(Follow._table_alias_in_all_columns817);
				table_alias57=table_alias();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_table_alias.Add(table_alias57.Tree);
				DebugLocation(172, 17);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:172:17: ( WS )?
				int alt26=2;
				try { DebugEnterSubRule(26);
				try { DebugEnterDecision(26, decisionCanBacktrack[26]);
				int LA26_0 = input.LA(1);

				if ((LA26_0==WS))
				{
					alt26 = 1;
				}
				} finally { DebugExitDecision(26); }
				switch (alt26)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:172:17: WS
					{
					DebugLocation(172, 17);
					WS58=(IToken)Match(input,WS,Follow._WS_in_all_columns819); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS58);


					}
					break;

				}
				} finally { DebugExitSubRule(26); }

				DebugLocation(172, 21);
				char_literal59=(IToken)Match(input,173,Follow._173_in_all_columns822); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_173.Add(char_literal59);

				DebugLocation(172, 25);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:172:25: ( WS )?
				int alt27=2;
				try { DebugEnterSubRule(27);
				try { DebugEnterDecision(27, decisionCanBacktrack[27]);
				int LA27_0 = input.LA(1);

				if ((LA27_0==WS))
				{
					alt27 = 1;
				}
				} finally { DebugExitDecision(27); }
				switch (alt27)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:172:25: WS
					{
					DebugLocation(172, 25);
					WS60=(IToken)Match(input,WS,Follow._WS_in_all_columns824); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS60);


					}
					break;

				}
				} finally { DebugExitSubRule(27); }


				}
				break;

			}
			} finally { DebugExitSubRule(28); }

			DebugLocation(172, 31);
			char_literal61=(IToken)Match(input,169,Follow._169_in_all_columns829); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_169.Add(char_literal61);



			{
			// AST REWRITE
			// elements: table_alias
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 172:35: -> ^( T_ALLCOLUMNS ( table_alias )? )
			{
				DebugLocation(172, 38);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:172:38: ^( T_ALLCOLUMNS ( table_alias )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(172, 40);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_ALLCOLUMNS, "T_ALLCOLUMNS"), root_1);

				DebugLocation(172, 53);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:172:53: ( table_alias )?
				if (stream_table_alias.HasNext)
				{
					DebugLocation(172, 53);
					adaptor.AddChild(root_1, stream_table_alias.NextTree());

				}
				stream_table_alias.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("all_columns", 11);
			LeaveRule("all_columns", 11);
			LeaveRule_all_columns();
	    }
	 	DebugLocation(173, 1);
		} finally { DebugExitRule(GrammarFileName, "all_columns"); }
		return retval;

	}
	// $ANTLR end "all_columns"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_into_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_into_clause() {}

	// $ANTLR start "into_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:175:1: into_clause : INTO WS file -> ^( T_INTO file ) ;
	[GrammarRule("into_clause")]
	private AstParserRuleReturnScope<object, IToken> into_clause()
	{
		EnterRule_into_clause();
		EnterRule("into_clause", 12);
		TraceIn("into_clause", 12);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken INTO62 = default(IToken);
	    IToken WS63 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file64 = default(AstParserRuleReturnScope<object, IToken>);

	    object INTO62_tree = default(object);
	    object WS63_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_INTO=new RewriteRuleITokenStream(adaptor,"token INTO");
	    RewriteRuleSubtreeStream stream_file=new RewriteRuleSubtreeStream(adaptor,"rule file");
		try { DebugEnterRule(GrammarFileName, "into_clause");
		DebugLocation(175, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:176:2: ( INTO WS file -> ^( T_INTO file ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:176:4: INTO WS file
			{
			DebugLocation(176, 4);
			INTO62=(IToken)Match(input,INTO,Follow._INTO_in_into_clause849); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INTO.Add(INTO62);

			DebugLocation(176, 9);
			WS63=(IToken)Match(input,WS,Follow._WS_in_into_clause851); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS63);

			DebugLocation(176, 12);
			PushFollow(Follow._file_in_into_clause853);
			file64=file();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_file.Add(file64.Tree);


			{
			// AST REWRITE
			// elements: file
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 176:17: -> ^( T_INTO file )
			{
				DebugLocation(176, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:176:20: ^( T_INTO file )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(176, 22);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_INTO, "T_INTO"), root_1);

				DebugLocation(176, 29);
				adaptor.AddChild(root_1, stream_file.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("into_clause", 12);
			LeaveRule("into_clause", 12);
			LeaveRule_into_clause();
	    }
	 	DebugLocation(177, 1);
		} finally { DebugExitRule(GrammarFileName, "into_clause"); }
		return retval;

	}
	// $ANTLR end "into_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_from_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_from_clause() {}

	// $ANTLR start "from_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:179:1: from_clause : FROM WS from_clause_item ( ( WS )? ',' ( WS )? from_clause_item )* ( WS table_alias )? -> ^( T_FROM ( table_alias )? ( from_clause_item )* ) ;
	[GrammarRule("from_clause")]
	private AstParserRuleReturnScope<object, IToken> from_clause()
	{
		EnterRule_from_clause();
		EnterRule("from_clause", 13);
		TraceIn("from_clause", 13);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken FROM65 = default(IToken);
	    IToken WS66 = default(IToken);
	    IToken WS68 = default(IToken);
	    IToken char_literal69 = default(IToken);
	    IToken WS70 = default(IToken);
	    IToken WS72 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> from_clause_item67 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> from_clause_item71 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> table_alias73 = default(AstParserRuleReturnScope<object, IToken>);

	    object FROM65_tree = default(object);
	    object WS66_tree = default(object);
	    object WS68_tree = default(object);
	    object char_literal69_tree = default(object);
	    object WS70_tree = default(object);
	    object WS72_tree = default(object);
	    RewriteRuleITokenStream stream_171=new RewriteRuleITokenStream(adaptor,"token 171");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_FROM=new RewriteRuleITokenStream(adaptor,"token FROM");
	    RewriteRuleSubtreeStream stream_from_clause_item=new RewriteRuleSubtreeStream(adaptor,"rule from_clause_item");
	    RewriteRuleSubtreeStream stream_table_alias=new RewriteRuleSubtreeStream(adaptor,"rule table_alias");
		try { DebugEnterRule(GrammarFileName, "from_clause");
		DebugLocation(179, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:180:2: ( FROM WS from_clause_item ( ( WS )? ',' ( WS )? from_clause_item )* ( WS table_alias )? -> ^( T_FROM ( table_alias )? ( from_clause_item )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:180:4: FROM WS from_clause_item ( ( WS )? ',' ( WS )? from_clause_item )* ( WS table_alias )?
			{
			DebugLocation(180, 4);
			FROM65=(IToken)Match(input,FROM,Follow._FROM_in_from_clause873); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_FROM.Add(FROM65);

			DebugLocation(180, 9);
			WS66=(IToken)Match(input,WS,Follow._WS_in_from_clause875); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS66);

			DebugLocation(180, 12);
			PushFollow(Follow._from_clause_item_in_from_clause877);
			from_clause_item67=from_clause_item();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_from_clause_item.Add(from_clause_item67.Tree);
			DebugLocation(180, 29);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:180:29: ( ( WS )? ',' ( WS )? from_clause_item )*
			try { DebugEnterSubRule(31);
			while (true)
			{
				int alt31=2;
				try { DebugEnterDecision(31, decisionCanBacktrack[31]);
				int LA31_0 = input.LA(1);

				if ((LA31_0==WS))
				{
					int LA31_1 = input.LA(2);

					if ((LA31_1==171))
					{
						alt31 = 1;
					}


				}
				else if ((LA31_0==171))
				{
					alt31 = 1;
				}


				} finally { DebugExitDecision(31); }
				switch ( alt31 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:180:30: ( WS )? ',' ( WS )? from_clause_item
					{
					DebugLocation(180, 30);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:180:30: ( WS )?
					int alt29=2;
					try { DebugEnterSubRule(29);
					try { DebugEnterDecision(29, decisionCanBacktrack[29]);
					int LA29_0 = input.LA(1);

					if ((LA29_0==WS))
					{
						alt29 = 1;
					}
					} finally { DebugExitDecision(29); }
					switch (alt29)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:180:30: WS
						{
						DebugLocation(180, 30);
						WS68=(IToken)Match(input,WS,Follow._WS_in_from_clause880); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS68);


						}
						break;

					}
					} finally { DebugExitSubRule(29); }

					DebugLocation(180, 34);
					char_literal69=(IToken)Match(input,171,Follow._171_in_from_clause883); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_171.Add(char_literal69);

					DebugLocation(180, 38);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:180:38: ( WS )?
					int alt30=2;
					try { DebugEnterSubRule(30);
					try { DebugEnterDecision(30, decisionCanBacktrack[30]);
					int LA30_0 = input.LA(1);

					if ((LA30_0==WS))
					{
						alt30 = 1;
					}
					} finally { DebugExitDecision(30); }
					switch (alt30)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:180:38: WS
						{
						DebugLocation(180, 38);
						WS70=(IToken)Match(input,WS,Follow._WS_in_from_clause885); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS70);


						}
						break;

					}
					} finally { DebugExitSubRule(30); }

					DebugLocation(180, 42);
					PushFollow(Follow._from_clause_item_in_from_clause888);
					from_clause_item71=from_clause_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_from_clause_item.Add(from_clause_item71.Tree);

					}
					break;

				default:
					goto loop31;
				}
			}

			loop31:
				;

			} finally { DebugExitSubRule(31); }

			DebugLocation(180, 61);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:180:61: ( WS table_alias )?
			int alt32=2;
			try { DebugEnterSubRule(32);
			try { DebugEnterDecision(32, decisionCanBacktrack[32]);
			int LA32_0 = input.LA(1);

			if ((LA32_0==WS))
			{
				int LA32_1 = input.LA(2);

				if ((LA32_1==SIMPLE_FILE))
				{
					alt32 = 1;
				}
			}
			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:180:62: WS table_alias
				{
				DebugLocation(180, 62);
				WS72=(IToken)Match(input,WS,Follow._WS_in_from_clause893); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS72);

				DebugLocation(180, 65);
				PushFollow(Follow._table_alias_in_from_clause895);
				table_alias73=table_alias();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_table_alias.Add(table_alias73.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(32); }



			{
			// AST REWRITE
			// elements: from_clause_item, table_alias
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 180:79: -> ^( T_FROM ( table_alias )? ( from_clause_item )* )
			{
				DebugLocation(180, 82);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:180:82: ^( T_FROM ( table_alias )? ( from_clause_item )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(180, 84);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FROM, "T_FROM"), root_1);

				DebugLocation(180, 91);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:180:91: ( table_alias )?
				if (stream_table_alias.HasNext)
				{
					DebugLocation(180, 91);
					adaptor.AddChild(root_1, stream_table_alias.NextTree());

				}
				stream_table_alias.Reset();
				DebugLocation(180, 104);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:180:104: ( from_clause_item )*
				while ( stream_from_clause_item.HasNext )
				{
					DebugLocation(180, 104);
					adaptor.AddChild(root_1, stream_from_clause_item.NextTree());

				}
				stream_from_clause_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("from_clause", 13);
			LeaveRule("from_clause", 13);
			LeaveRule_from_clause();
	    }
	 	DebugLocation(182, 1);
		} finally { DebugExitRule(GrammarFileName, "from_clause"); }
		return retval;

	}
	// $ANTLR end "from_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_from_clause_item() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_from_clause_item() {}

	// $ANTLR start "from_clause_item"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:184:1: from_clause_item : ( STRING -> ^( T_FILE STRING ) | file | subquery | view_name ( ( WS )? '(' ( expression_list )? ')' )? -> ^( T_VIEW view_name ( expression_list )? ) );
	[GrammarRule("from_clause_item")]
	private AstParserRuleReturnScope<object, IToken> from_clause_item()
	{
		EnterRule_from_clause_item();
		EnterRule("from_clause_item", 14);
		TraceIn("from_clause_item", 14);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken STRING74 = default(IToken);
	    IToken WS78 = default(IToken);
	    IToken char_literal79 = default(IToken);
	    IToken char_literal81 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file75 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> subquery76 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> view_name77 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list80 = default(AstParserRuleReturnScope<object, IToken>);

	    object STRING74_tree = default(object);
	    object WS78_tree = default(object);
	    object char_literal79_tree = default(object);
	    object char_literal81_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_168=new RewriteRuleITokenStream(adaptor,"token 168");
	    RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
	    RewriteRuleITokenStream stream_167=new RewriteRuleITokenStream(adaptor,"token 167");
	    RewriteRuleSubtreeStream stream_view_name=new RewriteRuleSubtreeStream(adaptor,"rule view_name");
	    RewriteRuleSubtreeStream stream_expression_list=new RewriteRuleSubtreeStream(adaptor,"rule expression_list");
		try { DebugEnterRule(GrammarFileName, "from_clause_item");
		DebugLocation(184, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:185:2: ( STRING -> ^( T_FILE STRING ) | file | subquery | view_name ( ( WS )? '(' ( expression_list )? ')' )? -> ^( T_VIEW view_name ( expression_list )? ) )
			int alt36=4;
			try { DebugEnterDecision(36, decisionCanBacktrack[36]);
			switch (input.LA(1))
			{
			case STRING:
				{
				alt36 = 1;
				}
				break;
			case SIMPLE_FILE:
			case 182:
				{
				alt36 = 2;
				}
				break;
			case 167:
				{
				alt36 = 3;
				}
				break;
			case TOKEN:
				{
				alt36 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 36, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:185:4: STRING
				{
				DebugLocation(185, 4);
				STRING74=(IToken)Match(input,STRING,Follow._STRING_in_from_clause_item922); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_STRING.Add(STRING74);



				{
				// AST REWRITE
				// elements: STRING
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 185:11: -> ^( T_FILE STRING )
				{
					DebugLocation(185, 14);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:185:14: ^( T_FILE STRING )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(185, 16);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILE, "T_FILE"), root_1);

					DebugLocation(185, 23);
					adaptor.AddChild(root_1, stream_STRING.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:186:4: file
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(186, 4);
				PushFollow(Follow._file_in_from_clause_item935);
				file75=file();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, file75.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:187:4: subquery
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(187, 4);
				PushFollow(Follow._subquery_in_from_clause_item940);
				subquery76=subquery();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, subquery76.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:188:4: view_name ( ( WS )? '(' ( expression_list )? ')' )?
				{
				DebugLocation(188, 4);
				PushFollow(Follow._view_name_in_from_clause_item945);
				view_name77=view_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_view_name.Add(view_name77.Tree);
				DebugLocation(188, 14);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:188:14: ( ( WS )? '(' ( expression_list )? ')' )?
				int alt35=2;
				try { DebugEnterSubRule(35);
				try { DebugEnterDecision(35, decisionCanBacktrack[35]);
				int LA35_0 = input.LA(1);

				if ((LA35_0==WS))
				{
					int LA35_1 = input.LA(2);

					if ((LA35_1==167))
					{
						alt35 = 1;
					}
				}
				else if ((LA35_0==167))
				{
					alt35 = 1;
				}
				} finally { DebugExitDecision(35); }
				switch (alt35)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:188:15: ( WS )? '(' ( expression_list )? ')'
					{
					DebugLocation(188, 15);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:188:15: ( WS )?
					int alt33=2;
					try { DebugEnterSubRule(33);
					try { DebugEnterDecision(33, decisionCanBacktrack[33]);
					int LA33_0 = input.LA(1);

					if ((LA33_0==WS))
					{
						alt33 = 1;
					}
					} finally { DebugExitDecision(33); }
					switch (alt33)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:188:15: WS
						{
						DebugLocation(188, 15);
						WS78=(IToken)Match(input,WS,Follow._WS_in_from_clause_item948); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS78);


						}
						break;

					}
					} finally { DebugExitSubRule(33); }

					DebugLocation(188, 19);
					char_literal79=(IToken)Match(input,167,Follow._167_in_from_clause_item951); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_167.Add(char_literal79);

					DebugLocation(188, 23);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:188:23: ( expression_list )?
					int alt34=2;
					try { DebugEnterSubRule(34);
					try { DebugEnterDecision(34, decisionCanBacktrack[34]);
					int LA34_0 = input.LA(1);

					if (((LA34_0>=CASE && LA34_0<=CAST)||(LA34_0>=CONVERT && LA34_0<=COUNT)||(LA34_0>=DATEADD && LA34_0<=DATEPART)||LA34_0==EXISTS||(LA34_0>=NOT && LA34_0<=NUMBER)||LA34_0==SIMPLE_FILE||(LA34_0>=STRING && LA34_0<=SYSTEMVAR)||LA34_0==TOKEN||LA34_0==VARIABLE||LA34_0==167||LA34_0==170||LA34_0==172||LA34_0==186))
					{
						alt34 = 1;
					}
					} finally { DebugExitDecision(34); }
					switch (alt34)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:188:23: expression_list
						{
						DebugLocation(188, 23);
						PushFollow(Follow._expression_list_in_from_clause_item953);
						expression_list80=expression_list();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expression_list.Add(expression_list80.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(34); }

					DebugLocation(188, 40);
					char_literal81=(IToken)Match(input,168,Follow._168_in_from_clause_item956); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_168.Add(char_literal81);


					}
					break;

				}
				} finally { DebugExitSubRule(35); }



				{
				// AST REWRITE
				// elements: view_name, expression_list
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 188:46: -> ^( T_VIEW view_name ( expression_list )? )
				{
					DebugLocation(188, 49);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:188:49: ^( T_VIEW view_name ( expression_list )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(188, 51);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_VIEW, "T_VIEW"), root_1);

					DebugLocation(188, 58);
					adaptor.AddChild(root_1, stream_view_name.NextTree());
					DebugLocation(188, 68);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:188:68: ( expression_list )?
					if (stream_expression_list.HasNext)
					{
						DebugLocation(188, 68);
						adaptor.AddChild(root_1, stream_expression_list.NextTree());

					}
					stream_expression_list.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("from_clause_item", 14);
			LeaveRule("from_clause_item", 14);
			LeaveRule_from_clause_item();
	    }
	 	DebugLocation(189, 1);
		} finally { DebugExitRule(GrammarFileName, "from_clause_item"); }
		return retval;

	}
	// $ANTLR end "from_clause_item"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_subquery() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_subquery() {}

	// $ANTLR start "subquery"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:191:1: subquery : '(' ( WS )? select_command ( WS )? ')' -> ^( T_SUBQUERY select_command ) ;
	[GrammarRule("subquery")]
	private AstParserRuleReturnScope<object, IToken> subquery()
	{
		EnterRule_subquery();
		EnterRule("subquery", 15);
		TraceIn("subquery", 15);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal82 = default(IToken);
	    IToken WS83 = default(IToken);
	    IToken WS85 = default(IToken);
	    IToken char_literal86 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> select_command84 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal82_tree = default(object);
	    object WS83_tree = default(object);
	    object WS85_tree = default(object);
	    object char_literal86_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_168=new RewriteRuleITokenStream(adaptor,"token 168");
	    RewriteRuleITokenStream stream_167=new RewriteRuleITokenStream(adaptor,"token 167");
	    RewriteRuleSubtreeStream stream_select_command=new RewriteRuleSubtreeStream(adaptor,"rule select_command");
		try { DebugEnterRule(GrammarFileName, "subquery");
		DebugLocation(191, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:192:2: ( '(' ( WS )? select_command ( WS )? ')' -> ^( T_SUBQUERY select_command ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:192:4: '(' ( WS )? select_command ( WS )? ')'
			{
			DebugLocation(192, 4);
			char_literal82=(IToken)Match(input,167,Follow._167_in_subquery981); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_167.Add(char_literal82);

			DebugLocation(192, 8);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:192:8: ( WS )?
			int alt37=2;
			try { DebugEnterSubRule(37);
			try { DebugEnterDecision(37, decisionCanBacktrack[37]);
			int LA37_0 = input.LA(1);

			if ((LA37_0==WS))
			{
				alt37 = 1;
			}
			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:192:8: WS
				{
				DebugLocation(192, 8);
				WS83=(IToken)Match(input,WS,Follow._WS_in_subquery983); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS83);


				}
				break;

			}
			} finally { DebugExitSubRule(37); }

			DebugLocation(192, 12);
			PushFollow(Follow._select_command_in_subquery986);
			select_command84=select_command();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_select_command.Add(select_command84.Tree);
			DebugLocation(192, 27);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:192:27: ( WS )?
			int alt38=2;
			try { DebugEnterSubRule(38);
			try { DebugEnterDecision(38, decisionCanBacktrack[38]);
			int LA38_0 = input.LA(1);

			if ((LA38_0==WS))
			{
				alt38 = 1;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:192:27: WS
				{
				DebugLocation(192, 27);
				WS85=(IToken)Match(input,WS,Follow._WS_in_subquery988); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS85);


				}
				break;

			}
			} finally { DebugExitSubRule(38); }

			DebugLocation(192, 31);
			char_literal86=(IToken)Match(input,168,Follow._168_in_subquery991); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_168.Add(char_literal86);



			{
			// AST REWRITE
			// elements: select_command
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 192:35: -> ^( T_SUBQUERY select_command )
			{
				DebugLocation(192, 38);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:192:38: ^( T_SUBQUERY select_command )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(192, 40);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SUBQUERY, "T_SUBQUERY"), root_1);

				DebugLocation(192, 51);
				adaptor.AddChild(root_1, stream_select_command.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("subquery", 15);
			LeaveRule("subquery", 15);
			LeaveRule_subquery();
	    }
	 	DebugLocation(193, 1);
		} finally { DebugExitRule(GrammarFileName, "subquery"); }
		return retval;

	}
	// $ANTLR end "subquery"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file() {}

	// $ANTLR start "file"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:195:1: file : ( '[' ( WS )? file_spec ( WS file_option )* ( WS )? ']' -> ^( T_FILE file_spec ( file_option )* ) | '[' ( WS )? subquery ( WS )? ']' -> ^( T_FILESUBQUERY subquery ) | SIMPLE_FILE -> ^( T_FILE SIMPLE_FILE ) );
	[GrammarRule("file")]
	private AstParserRuleReturnScope<object, IToken> file()
	{
		EnterRule_file();
		EnterRule("file", 16);
		TraceIn("file", 16);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal87 = default(IToken);
	    IToken WS88 = default(IToken);
	    IToken WS90 = default(IToken);
	    IToken WS92 = default(IToken);
	    IToken char_literal93 = default(IToken);
	    IToken char_literal94 = default(IToken);
	    IToken WS95 = default(IToken);
	    IToken WS97 = default(IToken);
	    IToken char_literal98 = default(IToken);
	    IToken SIMPLE_FILE99 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file_spec89 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> file_option91 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> subquery96 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal87_tree = default(object);
	    object WS88_tree = default(object);
	    object WS90_tree = default(object);
	    object WS92_tree = default(object);
	    object char_literal93_tree = default(object);
	    object char_literal94_tree = default(object);
	    object WS95_tree = default(object);
	    object WS97_tree = default(object);
	    object char_literal98_tree = default(object);
	    object SIMPLE_FILE99_tree = default(object);
	    RewriteRuleITokenStream stream_182=new RewriteRuleITokenStream(adaptor,"token 182");
	    RewriteRuleITokenStream stream_183=new RewriteRuleITokenStream(adaptor,"token 183");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_SIMPLE_FILE=new RewriteRuleITokenStream(adaptor,"token SIMPLE_FILE");
	    RewriteRuleSubtreeStream stream_file_option=new RewriteRuleSubtreeStream(adaptor,"rule file_option");
	    RewriteRuleSubtreeStream stream_file_spec=new RewriteRuleSubtreeStream(adaptor,"rule file_spec");
	    RewriteRuleSubtreeStream stream_subquery=new RewriteRuleSubtreeStream(adaptor,"rule subquery");
		try { DebugEnterRule(GrammarFileName, "file");
		DebugLocation(195, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:196:2: ( '[' ( WS )? file_spec ( WS file_option )* ( WS )? ']' -> ^( T_FILE file_spec ( file_option )* ) | '[' ( WS )? subquery ( WS )? ']' -> ^( T_FILESUBQUERY subquery ) | SIMPLE_FILE -> ^( T_FILE SIMPLE_FILE ) )
			int alt44=3;
			try { DebugEnterDecision(44, decisionCanBacktrack[44]);
			int LA44_0 = input.LA(1);

			if ((LA44_0==182))
			{
				switch (input.LA(2))
				{
				case WS:
					{
					int LA44_3 = input.LA(3);

					if ((LA44_3==STRING||LA44_3==VARIABLE))
					{
						alt44 = 1;
					}
					else if ((LA44_3==167))
					{
						alt44 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 44, 3, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case STRING:
				case VARIABLE:
					{
					alt44 = 1;
					}
					break;
				case 167:
					{
					alt44 = 2;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 44, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else if ((LA44_0==SIMPLE_FILE))
			{
				alt44 = 3;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 44, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(44); }
			switch (alt44)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:196:4: '[' ( WS )? file_spec ( WS file_option )* ( WS )? ']'
				{
				DebugLocation(196, 4);
				char_literal87=(IToken)Match(input,182,Follow._182_in_file1010); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_182.Add(char_literal87);

				DebugLocation(196, 8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:196:8: ( WS )?
				int alt39=2;
				try { DebugEnterSubRule(39);
				try { DebugEnterDecision(39, decisionCanBacktrack[39]);
				int LA39_0 = input.LA(1);

				if ((LA39_0==WS))
				{
					alt39 = 1;
				}
				} finally { DebugExitDecision(39); }
				switch (alt39)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:196:8: WS
					{
					DebugLocation(196, 8);
					WS88=(IToken)Match(input,WS,Follow._WS_in_file1012); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS88);


					}
					break;

				}
				} finally { DebugExitSubRule(39); }

				DebugLocation(196, 12);
				PushFollow(Follow._file_spec_in_file1015);
				file_spec89=file_spec();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_file_spec.Add(file_spec89.Tree);
				DebugLocation(196, 22);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:196:22: ( WS file_option )*
				try { DebugEnterSubRule(40);
				while (true)
				{
					int alt40=2;
					try { DebugEnterDecision(40, decisionCanBacktrack[40]);
					int LA40_0 = input.LA(1);

					if ((LA40_0==WS))
					{
						int LA40_1 = input.LA(2);

						if ((LA40_1==172))
						{
							alt40 = 1;
						}


					}


					} finally { DebugExitDecision(40); }
					switch ( alt40 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:196:23: WS file_option
						{
						DebugLocation(196, 23);
						WS90=(IToken)Match(input,WS,Follow._WS_in_file1018); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS90);

						DebugLocation(196, 26);
						PushFollow(Follow._file_option_in_file1020);
						file_option91=file_option();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_file_option.Add(file_option91.Tree);

						}
						break;

					default:
						goto loop40;
					}
				}

				loop40:
					;

				} finally { DebugExitSubRule(40); }

				DebugLocation(196, 40);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:196:40: ( WS )?
				int alt41=2;
				try { DebugEnterSubRule(41);
				try { DebugEnterDecision(41, decisionCanBacktrack[41]);
				int LA41_0 = input.LA(1);

				if ((LA41_0==WS))
				{
					alt41 = 1;
				}
				} finally { DebugExitDecision(41); }
				switch (alt41)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:196:40: WS
					{
					DebugLocation(196, 40);
					WS92=(IToken)Match(input,WS,Follow._WS_in_file1024); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS92);


					}
					break;

				}
				} finally { DebugExitSubRule(41); }

				DebugLocation(196, 44);
				char_literal93=(IToken)Match(input,183,Follow._183_in_file1027); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_183.Add(char_literal93);



				{
				// AST REWRITE
				// elements: file_spec, file_option
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 196:48: -> ^( T_FILE file_spec ( file_option )* )
				{
					DebugLocation(196, 51);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:196:51: ^( T_FILE file_spec ( file_option )* )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(196, 53);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILE, "T_FILE"), root_1);

					DebugLocation(196, 60);
					adaptor.AddChild(root_1, stream_file_spec.NextTree());
					DebugLocation(196, 70);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:196:70: ( file_option )*
					while ( stream_file_option.HasNext )
					{
						DebugLocation(196, 70);
						adaptor.AddChild(root_1, stream_file_option.NextTree());

					}
					stream_file_option.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:197:4: '[' ( WS )? subquery ( WS )? ']'
				{
				DebugLocation(197, 4);
				char_literal94=(IToken)Match(input,182,Follow._182_in_file1044); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_182.Add(char_literal94);

				DebugLocation(197, 8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:197:8: ( WS )?
				int alt42=2;
				try { DebugEnterSubRule(42);
				try { DebugEnterDecision(42, decisionCanBacktrack[42]);
				int LA42_0 = input.LA(1);

				if ((LA42_0==WS))
				{
					alt42 = 1;
				}
				} finally { DebugExitDecision(42); }
				switch (alt42)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:197:8: WS
					{
					DebugLocation(197, 8);
					WS95=(IToken)Match(input,WS,Follow._WS_in_file1046); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS95);


					}
					break;

				}
				} finally { DebugExitSubRule(42); }

				DebugLocation(197, 12);
				PushFollow(Follow._subquery_in_file1049);
				subquery96=subquery();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_subquery.Add(subquery96.Tree);
				DebugLocation(197, 21);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:197:21: ( WS )?
				int alt43=2;
				try { DebugEnterSubRule(43);
				try { DebugEnterDecision(43, decisionCanBacktrack[43]);
				int LA43_0 = input.LA(1);

				if ((LA43_0==WS))
				{
					alt43 = 1;
				}
				} finally { DebugExitDecision(43); }
				switch (alt43)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:197:21: WS
					{
					DebugLocation(197, 21);
					WS97=(IToken)Match(input,WS,Follow._WS_in_file1051); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS97);


					}
					break;

				}
				} finally { DebugExitSubRule(43); }

				DebugLocation(197, 25);
				char_literal98=(IToken)Match(input,183,Follow._183_in_file1054); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_183.Add(char_literal98);



				{
				// AST REWRITE
				// elements: subquery
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 197:29: -> ^( T_FILESUBQUERY subquery )
				{
					DebugLocation(197, 32);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:197:32: ^( T_FILESUBQUERY subquery )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(197, 34);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILESUBQUERY, "T_FILESUBQUERY"), root_1);

					DebugLocation(197, 49);
					adaptor.AddChild(root_1, stream_subquery.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:198:4: SIMPLE_FILE
				{
				DebugLocation(198, 4);
				SIMPLE_FILE99=(IToken)Match(input,SIMPLE_FILE,Follow._SIMPLE_FILE_in_file1067); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SIMPLE_FILE.Add(SIMPLE_FILE99);



				{
				// AST REWRITE
				// elements: SIMPLE_FILE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 198:16: -> ^( T_FILE SIMPLE_FILE )
				{
					DebugLocation(198, 19);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:198:19: ^( T_FILE SIMPLE_FILE )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(198, 21);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILE, "T_FILE"), root_1);

					DebugLocation(198, 28);
					adaptor.AddChild(root_1, stream_SIMPLE_FILE.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file", 16);
			LeaveRule("file", 16);
			LeaveRule_file();
	    }
	 	DebugLocation(199, 1);
		} finally { DebugExitRule(GrammarFileName, "file"); }
		return retval;

	}
	// $ANTLR end "file"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_spec() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_spec() {}

	// $ANTLR start "file_spec"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:201:1: file_spec : ( string | variable );
	[GrammarRule("file_spec")]
	private AstParserRuleReturnScope<object, IToken> file_spec()
	{
		EnterRule_file_spec();
		EnterRule("file_spec", 17);
		TraceIn("file_spec", 17);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> string100 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> variable101 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "file_spec");
		DebugLocation(201, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:202:2: ( string | variable )
			int alt45=2;
			try { DebugEnterDecision(45, decisionCanBacktrack[45]);
			int LA45_0 = input.LA(1);

			if ((LA45_0==STRING))
			{
				alt45 = 1;
			}
			else if ((LA45_0==VARIABLE))
			{
				alt45 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 45, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(45); }
			switch (alt45)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:202:4: string
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(202, 4);
				PushFollow(Follow._string_in_file_spec1086);
				string100=@string();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, string100.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:203:4: variable
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(203, 4);
				PushFollow(Follow._variable_in_file_spec1091);
				variable101=variable();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variable101.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_spec", 17);
			LeaveRule("file_spec", 17);
			LeaveRule_file_spec();
	    }
	 	DebugLocation(204, 1);
		} finally { DebugExitRule(GrammarFileName, "file_spec"); }
		return retval;

	}
	// $ANTLR end "file_spec"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_option() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_option() {}

	// $ANTLR start "file_option"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:206:1: file_option : '-' file_option_name ( ( WS )? '=' ( WS )? file_option_value )? -> ^( T_FILEOPTION file_option_name ( file_option_value )? ) ;
	[GrammarRule("file_option")]
	private AstParserRuleReturnScope<object, IToken> file_option()
	{
		EnterRule_file_option();
		EnterRule("file_option", 18);
		TraceIn("file_option", 18);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal102 = default(IToken);
	    IToken WS104 = default(IToken);
	    IToken char_literal105 = default(IToken);
	    IToken WS106 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file_option_name103 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> file_option_value107 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal102_tree = default(object);
	    object WS104_tree = default(object);
	    object char_literal105_tree = default(object);
	    object WS106_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_172=new RewriteRuleITokenStream(adaptor,"token 172");
	    RewriteRuleITokenStream stream_179=new RewriteRuleITokenStream(adaptor,"token 179");
	    RewriteRuleSubtreeStream stream_file_option_name=new RewriteRuleSubtreeStream(adaptor,"rule file_option_name");
	    RewriteRuleSubtreeStream stream_file_option_value=new RewriteRuleSubtreeStream(adaptor,"rule file_option_value");
		try { DebugEnterRule(GrammarFileName, "file_option");
		DebugLocation(206, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:207:2: ( '-' file_option_name ( ( WS )? '=' ( WS )? file_option_value )? -> ^( T_FILEOPTION file_option_name ( file_option_value )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:207:4: '-' file_option_name ( ( WS )? '=' ( WS )? file_option_value )?
			{
			DebugLocation(207, 4);
			char_literal102=(IToken)Match(input,172,Follow._172_in_file_option1103); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_172.Add(char_literal102);

			DebugLocation(207, 8);
			PushFollow(Follow._file_option_name_in_file_option1105);
			file_option_name103=file_option_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_file_option_name.Add(file_option_name103.Tree);
			DebugLocation(207, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:207:25: ( ( WS )? '=' ( WS )? file_option_value )?
			int alt48=2;
			try { DebugEnterSubRule(48);
			try { DebugEnterDecision(48, decisionCanBacktrack[48]);
			int LA48_0 = input.LA(1);

			if ((LA48_0==WS))
			{
				int LA48_1 = input.LA(2);

				if ((LA48_1==179))
				{
					alt48 = 1;
				}
			}
			else if ((LA48_0==179))
			{
				alt48 = 1;
			}
			} finally { DebugExitDecision(48); }
			switch (alt48)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:207:27: ( WS )? '=' ( WS )? file_option_value
				{
				DebugLocation(207, 27);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:207:27: ( WS )?
				int alt46=2;
				try { DebugEnterSubRule(46);
				try { DebugEnterDecision(46, decisionCanBacktrack[46]);
				int LA46_0 = input.LA(1);

				if ((LA46_0==WS))
				{
					alt46 = 1;
				}
				} finally { DebugExitDecision(46); }
				switch (alt46)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:207:27: WS
					{
					DebugLocation(207, 27);
					WS104=(IToken)Match(input,WS,Follow._WS_in_file_option1109); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS104);


					}
					break;

				}
				} finally { DebugExitSubRule(46); }

				DebugLocation(207, 31);
				char_literal105=(IToken)Match(input,179,Follow._179_in_file_option1112); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_179.Add(char_literal105);

				DebugLocation(207, 35);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:207:35: ( WS )?
				int alt47=2;
				try { DebugEnterSubRule(47);
				try { DebugEnterDecision(47, decisionCanBacktrack[47]);
				int LA47_0 = input.LA(1);

				if ((LA47_0==WS))
				{
					alt47 = 1;
				}
				} finally { DebugExitDecision(47); }
				switch (alt47)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:207:35: WS
					{
					DebugLocation(207, 35);
					WS106=(IToken)Match(input,WS,Follow._WS_in_file_option1114); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS106);


					}
					break;

				}
				} finally { DebugExitSubRule(47); }

				DebugLocation(207, 39);
				PushFollow(Follow._file_option_value_in_file_option1117);
				file_option_value107=file_option_value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_file_option_value.Add(file_option_value107.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(48); }



			{
			// AST REWRITE
			// elements: file_option_value, file_option_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 207:59: -> ^( T_FILEOPTION file_option_name ( file_option_value )? )
			{
				DebugLocation(207, 62);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:207:62: ^( T_FILEOPTION file_option_name ( file_option_value )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(207, 64);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILEOPTION, "T_FILEOPTION"), root_1);

				DebugLocation(207, 77);
				adaptor.AddChild(root_1, stream_file_option_name.NextTree());
				DebugLocation(207, 94);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:207:94: ( file_option_value )?
				if (stream_file_option_value.HasNext)
				{
					DebugLocation(207, 94);
					adaptor.AddChild(root_1, stream_file_option_value.NextTree());

				}
				stream_file_option_value.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_option", 18);
			LeaveRule("file_option", 18);
			LeaveRule_file_option();
	    }
	 	DebugLocation(208, 1);
		} finally { DebugExitRule(GrammarFileName, "file_option"); }
		return retval;

	}
	// $ANTLR end "file_option"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_option_name() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_option_name() {}

	// $ANTLR start "file_option_name"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:210:1: file_option_name : TOKEN ;
	[GrammarRule("file_option_name")]
	private AstParserRuleReturnScope<object, IToken> file_option_name()
	{
		EnterRule_file_option_name();
		EnterRule("file_option_name", 19);
		TraceIn("file_option_name", 19);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN108 = default(IToken);

	    object TOKEN108_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "file_option_name");
		DebugLocation(210, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:211:2: ( TOKEN )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:211:4: TOKEN
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(211, 4);
			TOKEN108=(IToken)Match(input,TOKEN,Follow._TOKEN_in_file_option_name1141); if (state.failed) return retval;
			if (state.backtracking == 0) {
			TOKEN108_tree = (object)adaptor.Create(TOKEN108);
			adaptor.AddChild(root_0, TOKEN108_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_option_name", 19);
			LeaveRule("file_option_name", 19);
			LeaveRule_file_option_name();
	    }
	 	DebugLocation(212, 1);
		} finally { DebugExitRule(GrammarFileName, "file_option_name"); }
		return retval;

	}
	// $ANTLR end "file_option_name"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_option_value() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_option_value() {}

	// $ANTLR start "file_option_value"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:214:1: file_option_value : ( TOKEN | STRING | NUMBER | variable );
	[GrammarRule("file_option_value")]
	private AstParserRuleReturnScope<object, IToken> file_option_value()
	{
		EnterRule_file_option_value();
		EnterRule("file_option_value", 20);
		TraceIn("file_option_value", 20);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN109 = default(IToken);
	    IToken STRING110 = default(IToken);
	    IToken NUMBER111 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> variable112 = default(AstParserRuleReturnScope<object, IToken>);

	    object TOKEN109_tree = default(object);
	    object STRING110_tree = default(object);
	    object NUMBER111_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "file_option_value");
		DebugLocation(214, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:215:2: ( TOKEN | STRING | NUMBER | variable )
			int alt49=4;
			try { DebugEnterDecision(49, decisionCanBacktrack[49]);
			switch (input.LA(1))
			{
			case TOKEN:
				{
				alt49 = 1;
				}
				break;
			case STRING:
				{
				alt49 = 2;
				}
				break;
			case NUMBER:
				{
				alt49 = 3;
				}
				break;
			case VARIABLE:
				{
				alt49 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 49, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(49); }
			switch (alt49)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:215:4: TOKEN
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(215, 4);
				TOKEN109=(IToken)Match(input,TOKEN,Follow._TOKEN_in_file_option_value1153); if (state.failed) return retval;
				if (state.backtracking == 0) {
				TOKEN109_tree = (object)adaptor.Create(TOKEN109);
				adaptor.AddChild(root_0, TOKEN109_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:215:12: STRING
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(215, 12);
				STRING110=(IToken)Match(input,STRING,Follow._STRING_in_file_option_value1157); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRING110_tree = (object)adaptor.Create(STRING110);
				adaptor.AddChild(root_0, STRING110_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:215:21: NUMBER
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(215, 21);
				NUMBER111=(IToken)Match(input,NUMBER,Follow._NUMBER_in_file_option_value1161); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NUMBER111_tree = (object)adaptor.Create(NUMBER111);
				adaptor.AddChild(root_0, NUMBER111_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:215:30: variable
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(215, 30);
				PushFollow(Follow._variable_in_file_option_value1165);
				variable112=variable();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variable112.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_option_value", 20);
			LeaveRule("file_option_value", 20);
			LeaveRule_file_option_value();
	    }
	 	DebugLocation(216, 1);
		} finally { DebugExitRule(GrammarFileName, "file_option_value"); }
		return retval;

	}
	// $ANTLR end "file_option_value"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_where_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_where_clause() {}

	// $ANTLR start "where_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:218:1: where_clause : WHERE WS expression -> ^( T_WHERE expression ) ;
	[GrammarRule("where_clause")]
	private AstParserRuleReturnScope<object, IToken> where_clause()
	{
		EnterRule_where_clause();
		EnterRule("where_clause", 21);
		TraceIn("where_clause", 21);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WHERE113 = default(IToken);
	    IToken WS114 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression115 = default(AstParserRuleReturnScope<object, IToken>);

	    object WHERE113_tree = default(object);
	    object WS114_tree = default(object);
	    RewriteRuleITokenStream stream_WHERE=new RewriteRuleITokenStream(adaptor,"token WHERE");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "where_clause");
		DebugLocation(218, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:219:2: ( WHERE WS expression -> ^( T_WHERE expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:219:4: WHERE WS expression
			{
			DebugLocation(219, 4);
			WHERE113=(IToken)Match(input,WHERE,Follow._WHERE_in_where_clause1177); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WHERE.Add(WHERE113);

			DebugLocation(219, 10);
			WS114=(IToken)Match(input,WS,Follow._WS_in_where_clause1179); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS114);

			DebugLocation(219, 13);
			PushFollow(Follow._expression_in_where_clause1181);
			expression115=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression.Add(expression115.Tree);


			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 220:2: -> ^( T_WHERE expression )
			{
				DebugLocation(220, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:220:5: ^( T_WHERE expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(220, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_WHERE, "T_WHERE"), root_1);

				DebugLocation(220, 15);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("where_clause", 21);
			LeaveRule("where_clause", 21);
			LeaveRule_where_clause();
	    }
	 	DebugLocation(221, 1);
		} finally { DebugExitRule(GrammarFileName, "where_clause"); }
		return retval;

	}
	// $ANTLR end "where_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_groupby_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_groupby_clause() {}

	// $ANTLR start "groupby_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:222:1: groupby_clause : GROUP WS BY WS orderby_column_list -> ^( T_GROUPBY orderby_column_list ) ;
	[GrammarRule("groupby_clause")]
	private AstParserRuleReturnScope<object, IToken> groupby_clause()
	{
		EnterRule_groupby_clause();
		EnterRule("groupby_clause", 22);
		TraceIn("groupby_clause", 22);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken GROUP116 = default(IToken);
	    IToken WS117 = default(IToken);
	    IToken BY118 = default(IToken);
	    IToken WS119 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> orderby_column_list120 = default(AstParserRuleReturnScope<object, IToken>);

	    object GROUP116_tree = default(object);
	    object WS117_tree = default(object);
	    object BY118_tree = default(object);
	    object WS119_tree = default(object);
	    RewriteRuleITokenStream stream_GROUP=new RewriteRuleITokenStream(adaptor,"token GROUP");
	    RewriteRuleITokenStream stream_BY=new RewriteRuleITokenStream(adaptor,"token BY");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_orderby_column_list=new RewriteRuleSubtreeStream(adaptor,"rule orderby_column_list");
		try { DebugEnterRule(GrammarFileName, "groupby_clause");
		DebugLocation(222, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:223:2: ( GROUP WS BY WS orderby_column_list -> ^( T_GROUPBY orderby_column_list ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:223:4: GROUP WS BY WS orderby_column_list
			{
			DebugLocation(223, 4);
			GROUP116=(IToken)Match(input,GROUP,Follow._GROUP_in_groupby_clause1200); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_GROUP.Add(GROUP116);

			DebugLocation(223, 10);
			WS117=(IToken)Match(input,WS,Follow._WS_in_groupby_clause1202); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS117);

			DebugLocation(223, 13);
			BY118=(IToken)Match(input,BY,Follow._BY_in_groupby_clause1204); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_BY.Add(BY118);

			DebugLocation(223, 16);
			WS119=(IToken)Match(input,WS,Follow._WS_in_groupby_clause1206); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS119);

			DebugLocation(223, 19);
			PushFollow(Follow._orderby_column_list_in_groupby_clause1208);
			orderby_column_list120=orderby_column_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_orderby_column_list.Add(orderby_column_list120.Tree);


			{
			// AST REWRITE
			// elements: orderby_column_list
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 224:2: -> ^( T_GROUPBY orderby_column_list )
			{
				DebugLocation(224, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:224:5: ^( T_GROUPBY orderby_column_list )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(224, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_GROUPBY, "T_GROUPBY"), root_1);

				DebugLocation(224, 17);
				adaptor.AddChild(root_1, stream_orderby_column_list.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("groupby_clause", 22);
			LeaveRule("groupby_clause", 22);
			LeaveRule_groupby_clause();
	    }
	 	DebugLocation(225, 1);
		} finally { DebugExitRule(GrammarFileName, "groupby_clause"); }
		return retval;

	}
	// $ANTLR end "groupby_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_having_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_having_clause() {}

	// $ANTLR start "having_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:227:1: having_clause : HAVING WS expression -> ^( T_HAVING expression ) ;
	[GrammarRule("having_clause")]
	private AstParserRuleReturnScope<object, IToken> having_clause()
	{
		EnterRule_having_clause();
		EnterRule("having_clause", 23);
		TraceIn("having_clause", 23);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken HAVING121 = default(IToken);
	    IToken WS122 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression123 = default(AstParserRuleReturnScope<object, IToken>);

	    object HAVING121_tree = default(object);
	    object WS122_tree = default(object);
	    RewriteRuleITokenStream stream_HAVING=new RewriteRuleITokenStream(adaptor,"token HAVING");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "having_clause");
		DebugLocation(227, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:228:2: ( HAVING WS expression -> ^( T_HAVING expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:228:4: HAVING WS expression
			{
			DebugLocation(228, 4);
			HAVING121=(IToken)Match(input,HAVING,Follow._HAVING_in_having_clause1229); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_HAVING.Add(HAVING121);

			DebugLocation(228, 11);
			WS122=(IToken)Match(input,WS,Follow._WS_in_having_clause1231); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS122);

			DebugLocation(228, 14);
			PushFollow(Follow._expression_in_having_clause1233);
			expression123=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression.Add(expression123.Tree);


			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 229:2: -> ^( T_HAVING expression )
			{
				DebugLocation(229, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:229:5: ^( T_HAVING expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(229, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_HAVING, "T_HAVING"), root_1);

				DebugLocation(229, 16);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("having_clause", 23);
			LeaveRule("having_clause", 23);
			LeaveRule_having_clause();
	    }
	 	DebugLocation(230, 1);
		} finally { DebugExitRule(GrammarFileName, "having_clause"); }
		return retval;

	}
	// $ANTLR end "having_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_clause() {}

	// $ANTLR start "orderby_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:232:1: orderby_clause : ORDER WS BY WS orderby_column_list -> ^( T_ORDERBY orderby_column_list ) ;
	[GrammarRule("orderby_clause")]
	private AstParserRuleReturnScope<object, IToken> orderby_clause()
	{
		EnterRule_orderby_clause();
		EnterRule("orderby_clause", 24);
		TraceIn("orderby_clause", 24);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken ORDER124 = default(IToken);
	    IToken WS125 = default(IToken);
	    IToken BY126 = default(IToken);
	    IToken WS127 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> orderby_column_list128 = default(AstParserRuleReturnScope<object, IToken>);

	    object ORDER124_tree = default(object);
	    object WS125_tree = default(object);
	    object BY126_tree = default(object);
	    object WS127_tree = default(object);
	    RewriteRuleITokenStream stream_BY=new RewriteRuleITokenStream(adaptor,"token BY");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_ORDER=new RewriteRuleITokenStream(adaptor,"token ORDER");
	    RewriteRuleSubtreeStream stream_orderby_column_list=new RewriteRuleSubtreeStream(adaptor,"rule orderby_column_list");
		try { DebugEnterRule(GrammarFileName, "orderby_clause");
		DebugLocation(232, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:233:2: ( ORDER WS BY WS orderby_column_list -> ^( T_ORDERBY orderby_column_list ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:233:4: ORDER WS BY WS orderby_column_list
			{
			DebugLocation(233, 4);
			ORDER124=(IToken)Match(input,ORDER,Follow._ORDER_in_orderby_clause1254); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ORDER.Add(ORDER124);

			DebugLocation(233, 10);
			WS125=(IToken)Match(input,WS,Follow._WS_in_orderby_clause1256); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS125);

			DebugLocation(233, 13);
			BY126=(IToken)Match(input,BY,Follow._BY_in_orderby_clause1258); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_BY.Add(BY126);

			DebugLocation(233, 16);
			WS127=(IToken)Match(input,WS,Follow._WS_in_orderby_clause1260); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS127);

			DebugLocation(233, 19);
			PushFollow(Follow._orderby_column_list_in_orderby_clause1262);
			orderby_column_list128=orderby_column_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_orderby_column_list.Add(orderby_column_list128.Tree);


			{
			// AST REWRITE
			// elements: orderby_column_list
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 234:2: -> ^( T_ORDERBY orderby_column_list )
			{
				DebugLocation(234, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:234:5: ^( T_ORDERBY orderby_column_list )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(234, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_ORDERBY, "T_ORDERBY"), root_1);

				DebugLocation(234, 17);
				adaptor.AddChild(root_1, stream_orderby_column_list.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_clause", 24);
			LeaveRule("orderby_clause", 24);
			LeaveRule_orderby_clause();
	    }
	 	DebugLocation(235, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_clause"); }
		return retval;

	}
	// $ANTLR end "orderby_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_column_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_column_list() {}

	// $ANTLR start "orderby_column_list"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:237:1: orderby_column_list : orderby_column ( ( WS )? ',' ( WS )? orderby_column )* -> ( orderby_column )* ;
	[GrammarRule("orderby_column_list")]
	private AstParserRuleReturnScope<object, IToken> orderby_column_list()
	{
		EnterRule_orderby_column_list();
		EnterRule("orderby_column_list", 25);
		TraceIn("orderby_column_list", 25);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS130 = default(IToken);
	    IToken char_literal131 = default(IToken);
	    IToken WS132 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> orderby_column129 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> orderby_column133 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS130_tree = default(object);
	    object char_literal131_tree = default(object);
	    object WS132_tree = default(object);
	    RewriteRuleITokenStream stream_171=new RewriteRuleITokenStream(adaptor,"token 171");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_orderby_column=new RewriteRuleSubtreeStream(adaptor,"rule orderby_column");
		try { DebugEnterRule(GrammarFileName, "orderby_column_list");
		DebugLocation(237, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:238:2: ( orderby_column ( ( WS )? ',' ( WS )? orderby_column )* -> ( orderby_column )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:238:4: orderby_column ( ( WS )? ',' ( WS )? orderby_column )*
			{
			DebugLocation(238, 4);
			PushFollow(Follow._orderby_column_in_orderby_column_list1283);
			orderby_column129=orderby_column();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_orderby_column.Add(orderby_column129.Tree);
			DebugLocation(238, 19);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:238:19: ( ( WS )? ',' ( WS )? orderby_column )*
			try { DebugEnterSubRule(52);
			while (true)
			{
				int alt52=2;
				try { DebugEnterDecision(52, decisionCanBacktrack[52]);
				int LA52_0 = input.LA(1);

				if ((LA52_0==WS))
				{
					int LA52_1 = input.LA(2);

					if ((LA52_1==171))
					{
						alt52 = 1;
					}


				}
				else if ((LA52_0==171))
				{
					alt52 = 1;
				}


				} finally { DebugExitDecision(52); }
				switch ( alt52 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:238:20: ( WS )? ',' ( WS )? orderby_column
					{
					DebugLocation(238, 20);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:238:20: ( WS )?
					int alt50=2;
					try { DebugEnterSubRule(50);
					try { DebugEnterDecision(50, decisionCanBacktrack[50]);
					int LA50_0 = input.LA(1);

					if ((LA50_0==WS))
					{
						alt50 = 1;
					}
					} finally { DebugExitDecision(50); }
					switch (alt50)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:238:20: WS
						{
						DebugLocation(238, 20);
						WS130=(IToken)Match(input,WS,Follow._WS_in_orderby_column_list1286); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS130);


						}
						break;

					}
					} finally { DebugExitSubRule(50); }

					DebugLocation(238, 24);
					char_literal131=(IToken)Match(input,171,Follow._171_in_orderby_column_list1289); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_171.Add(char_literal131);

					DebugLocation(238, 28);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:238:28: ( WS )?
					int alt51=2;
					try { DebugEnterSubRule(51);
					try { DebugEnterDecision(51, decisionCanBacktrack[51]);
					int LA51_0 = input.LA(1);

					if ((LA51_0==WS))
					{
						alt51 = 1;
					}
					} finally { DebugExitDecision(51); }
					switch (alt51)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:238:28: WS
						{
						DebugLocation(238, 28);
						WS132=(IToken)Match(input,WS,Follow._WS_in_orderby_column_list1291); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS132);


						}
						break;

					}
					} finally { DebugExitSubRule(51); }

					DebugLocation(238, 32);
					PushFollow(Follow._orderby_column_in_orderby_column_list1294);
					orderby_column133=orderby_column();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_orderby_column.Add(orderby_column133.Tree);

					}
					break;

				default:
					goto loop52;
				}
			}

			loop52:
				;

			} finally { DebugExitSubRule(52); }



			{
			// AST REWRITE
			// elements: orderby_column
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 239:2: -> ( orderby_column )*
			{
				DebugLocation(239, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:239:5: ( orderby_column )*
				while ( stream_orderby_column.HasNext )
				{
					DebugLocation(239, 5);
					adaptor.AddChild(root_0, stream_orderby_column.NextTree());

				}
				stream_orderby_column.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_column_list", 25);
			LeaveRule("orderby_column_list", 25);
			LeaveRule_orderby_column_list();
	    }
	 	DebugLocation(240, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_column_list"); }
		return retval;

	}
	// $ANTLR end "orderby_column_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_column() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_column() {}

	// $ANTLR start "orderby_column"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:242:1: orderby_column : expression ( WS orderby_direction )? -> ^( T_ORDERBY_COLUMN expression ( orderby_direction )? ) ;
	[GrammarRule("orderby_column")]
	private AstParserRuleReturnScope<object, IToken> orderby_column()
	{
		EnterRule_orderby_column();
		EnterRule("orderby_column", 26);
		TraceIn("orderby_column", 26);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS135 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression134 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> orderby_direction136 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS135_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_orderby_direction=new RewriteRuleSubtreeStream(adaptor,"rule orderby_direction");
		try { DebugEnterRule(GrammarFileName, "orderby_column");
		DebugLocation(242, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:243:2: ( expression ( WS orderby_direction )? -> ^( T_ORDERBY_COLUMN expression ( orderby_direction )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:243:4: expression ( WS orderby_direction )?
			{
			DebugLocation(243, 4);
			PushFollow(Follow._expression_in_orderby_column1314);
			expression134=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression.Add(expression134.Tree);
			DebugLocation(243, 15);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:243:15: ( WS orderby_direction )?
			int alt53=2;
			try { DebugEnterSubRule(53);
			try { DebugEnterDecision(53, decisionCanBacktrack[53]);
			int LA53_0 = input.LA(1);

			if ((LA53_0==WS))
			{
				int LA53_1 = input.LA(2);

				if ((LA53_1==ASC||LA53_1==DESC||LA53_1==ORIG))
				{
					alt53 = 1;
				}
			}
			} finally { DebugExitDecision(53); }
			switch (alt53)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:243:16: WS orderby_direction
				{
				DebugLocation(243, 16);
				WS135=(IToken)Match(input,WS,Follow._WS_in_orderby_column1317); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS135);

				DebugLocation(243, 19);
				PushFollow(Follow._orderby_direction_in_orderby_column1319);
				orderby_direction136=orderby_direction();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_orderby_direction.Add(orderby_direction136.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(53); }



			{
			// AST REWRITE
			// elements: orderby_direction, expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 243:39: -> ^( T_ORDERBY_COLUMN expression ( orderby_direction )? )
			{
				DebugLocation(243, 42);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:243:42: ^( T_ORDERBY_COLUMN expression ( orderby_direction )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(243, 44);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_ORDERBY_COLUMN, "T_ORDERBY_COLUMN"), root_1);

				DebugLocation(243, 61);
				adaptor.AddChild(root_1, stream_expression.NextTree());
				DebugLocation(243, 72);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:243:72: ( orderby_direction )?
				if (stream_orderby_direction.HasNext)
				{
					DebugLocation(243, 72);
					adaptor.AddChild(root_1, stream_orderby_direction.NextTree());

				}
				stream_orderby_direction.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_column", 26);
			LeaveRule("orderby_column", 26);
			LeaveRule_orderby_column();
	    }
	 	DebugLocation(244, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_column"); }
		return retval;

	}
	// $ANTLR end "orderby_column"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_direction() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_direction() {}

	// $ANTLR start "orderby_direction"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:246:1: orderby_direction : ( ASC -> T_ORDERBY_ASC | DESC -> T_ORDERBY_DESC | ORIG -> T_ORDERBY_ORIG );
	[GrammarRule("orderby_direction")]
	private AstParserRuleReturnScope<object, IToken> orderby_direction()
	{
		EnterRule_orderby_direction();
		EnterRule("orderby_direction", 27);
		TraceIn("orderby_direction", 27);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken ASC137 = default(IToken);
	    IToken DESC138 = default(IToken);
	    IToken ORIG139 = default(IToken);

	    object ASC137_tree = default(object);
	    object DESC138_tree = default(object);
	    object ORIG139_tree = default(object);
	    RewriteRuleITokenStream stream_DESC=new RewriteRuleITokenStream(adaptor,"token DESC");
	    RewriteRuleITokenStream stream_ASC=new RewriteRuleITokenStream(adaptor,"token ASC");
	    RewriteRuleITokenStream stream_ORIG=new RewriteRuleITokenStream(adaptor,"token ORIG");

		try { DebugEnterRule(GrammarFileName, "orderby_direction");
		DebugLocation(246, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:247:2: ( ASC -> T_ORDERBY_ASC | DESC -> T_ORDERBY_DESC | ORIG -> T_ORDERBY_ORIG )
			int alt54=3;
			try { DebugEnterDecision(54, decisionCanBacktrack[54]);
			switch (input.LA(1))
			{
			case ASC:
				{
				alt54 = 1;
				}
				break;
			case DESC:
				{
				alt54 = 2;
				}
				break;
			case ORIG:
				{
				alt54 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 54, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:247:4: ASC
				{
				DebugLocation(247, 4);
				ASC137=(IToken)Match(input,ASC,Follow._ASC_in_orderby_direction1344); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ASC.Add(ASC137);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 247:8: -> T_ORDERBY_ASC
				{
					DebugLocation(247, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_ORDERBY_ASC, "T_ORDERBY_ASC"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:248:4: DESC
				{
				DebugLocation(248, 4);
				DESC138=(IToken)Match(input,DESC,Follow._DESC_in_orderby_direction1353); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DESC.Add(DESC138);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 248:9: -> T_ORDERBY_DESC
				{
					DebugLocation(248, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_ORDERBY_DESC, "T_ORDERBY_DESC"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:249:4: ORIG
				{
				DebugLocation(249, 4);
				ORIG139=(IToken)Match(input,ORIG,Follow._ORIG_in_orderby_direction1362); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ORIG.Add(ORIG139);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 249:9: -> T_ORDERBY_ORIG
				{
					DebugLocation(249, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_ORDERBY_ORIG, "T_ORDERBY_ORIG"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_direction", 27);
			LeaveRule("orderby_direction", 27);
			LeaveRule_orderby_direction();
	    }
	 	DebugLocation(250, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_direction"); }
		return retval;

	}
	// $ANTLR end "orderby_direction"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_use_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_use_command() {}

	// $ANTLR start "use_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:255:1: use_command : USE WS file -> ^( T_USE file ) ;
	[GrammarRule("use_command")]
	private AstParserRuleReturnScope<object, IToken> use_command()
	{
		EnterRule_use_command();
		EnterRule("use_command", 28);
		TraceIn("use_command", 28);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken USE140 = default(IToken);
	    IToken WS141 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file142 = default(AstParserRuleReturnScope<object, IToken>);

	    object USE140_tree = default(object);
	    object WS141_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_USE=new RewriteRuleITokenStream(adaptor,"token USE");
	    RewriteRuleSubtreeStream stream_file=new RewriteRuleSubtreeStream(adaptor,"rule file");
		try { DebugEnterRule(GrammarFileName, "use_command");
		DebugLocation(255, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:256:2: ( USE WS file -> ^( T_USE file ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:256:4: USE WS file
			{
			DebugLocation(256, 4);
			USE140=(IToken)Match(input,USE,Follow._USE_in_use_command1380); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_USE.Add(USE140);

			DebugLocation(256, 8);
			WS141=(IToken)Match(input,WS,Follow._WS_in_use_command1382); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS141);

			DebugLocation(256, 11);
			PushFollow(Follow._file_in_use_command1384);
			file142=file();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_file.Add(file142.Tree);


			{
			// AST REWRITE
			// elements: file
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 256:16: -> ^( T_USE file )
			{
				DebugLocation(256, 19);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:256:19: ^( T_USE file )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(256, 21);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_USE, "T_USE"), root_1);

				DebugLocation(256, 27);
				adaptor.AddChild(root_1, stream_file.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("use_command", 28);
			LeaveRule("use_command", 28);
			LeaveRule_use_command();
	    }
	 	DebugLocation(257, 1);
		} finally { DebugExitRule(GrammarFileName, "use_command"); }
		return retval;

	}
	// $ANTLR end "use_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_declare_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_declare_command() {}

	// $ANTLR start "declare_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:262:1: declare_command : DECLARE WS declaration_list -> declaration_list ;
	[GrammarRule("declare_command")]
	private AstParserRuleReturnScope<object, IToken> declare_command()
	{
		EnterRule_declare_command();
		EnterRule("declare_command", 29);
		TraceIn("declare_command", 29);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken DECLARE143 = default(IToken);
	    IToken WS144 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> declaration_list145 = default(AstParserRuleReturnScope<object, IToken>);

	    object DECLARE143_tree = default(object);
	    object WS144_tree = default(object);
	    RewriteRuleITokenStream stream_DECLARE=new RewriteRuleITokenStream(adaptor,"token DECLARE");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_declaration_list=new RewriteRuleSubtreeStream(adaptor,"rule declaration_list");
		try { DebugEnterRule(GrammarFileName, "declare_command");
		DebugLocation(262, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:263:2: ( DECLARE WS declaration_list -> declaration_list )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:263:4: DECLARE WS declaration_list
			{
			DebugLocation(263, 4);
			DECLARE143=(IToken)Match(input,DECLARE,Follow._DECLARE_in_declare_command1406); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DECLARE.Add(DECLARE143);

			DebugLocation(263, 12);
			WS144=(IToken)Match(input,WS,Follow._WS_in_declare_command1408); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS144);

			DebugLocation(263, 15);
			PushFollow(Follow._declaration_list_in_declare_command1410);
			declaration_list145=declaration_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_declaration_list.Add(declaration_list145.Tree);


			{
			// AST REWRITE
			// elements: declaration_list
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 263:32: -> declaration_list
			{
				DebugLocation(263, 35);
				adaptor.AddChild(root_0, stream_declaration_list.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declare_command", 29);
			LeaveRule("declare_command", 29);
			LeaveRule_declare_command();
	    }
	 	DebugLocation(264, 1);
		} finally { DebugExitRule(GrammarFileName, "declare_command"); }
		return retval;

	}
	// $ANTLR end "declare_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_declaration_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_declaration_list() {}

	// $ANTLR start "declaration_list"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:266:1: declaration_list : declaration ( ( WS )? ',' ( WS )? declaration )* -> ^( T_DECLARE ( declaration )+ ) ;
	[GrammarRule("declaration_list")]
	private AstParserRuleReturnScope<object, IToken> declaration_list()
	{
		EnterRule_declaration_list();
		EnterRule("declaration_list", 30);
		TraceIn("declaration_list", 30);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS147 = default(IToken);
	    IToken char_literal148 = default(IToken);
	    IToken WS149 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> declaration146 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> declaration150 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS147_tree = default(object);
	    object char_literal148_tree = default(object);
	    object WS149_tree = default(object);
	    RewriteRuleITokenStream stream_171=new RewriteRuleITokenStream(adaptor,"token 171");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_declaration=new RewriteRuleSubtreeStream(adaptor,"rule declaration");
		try { DebugEnterRule(GrammarFileName, "declaration_list");
		DebugLocation(266, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:267:2: ( declaration ( ( WS )? ',' ( WS )? declaration )* -> ^( T_DECLARE ( declaration )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:267:4: declaration ( ( WS )? ',' ( WS )? declaration )*
			{
			DebugLocation(267, 4);
			PushFollow(Follow._declaration_in_declaration_list1427);
			declaration146=declaration();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_declaration.Add(declaration146.Tree);
			DebugLocation(267, 16);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:267:16: ( ( WS )? ',' ( WS )? declaration )*
			try { DebugEnterSubRule(57);
			while (true)
			{
				int alt57=2;
				try { DebugEnterDecision(57, decisionCanBacktrack[57]);
				int LA57_0 = input.LA(1);

				if ((LA57_0==WS))
				{
					int LA57_1 = input.LA(2);

					if ((LA57_1==171))
					{
						alt57 = 1;
					}


				}
				else if ((LA57_0==171))
				{
					alt57 = 1;
				}


				} finally { DebugExitDecision(57); }
				switch ( alt57 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:267:17: ( WS )? ',' ( WS )? declaration
					{
					DebugLocation(267, 17);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:267:17: ( WS )?
					int alt55=2;
					try { DebugEnterSubRule(55);
					try { DebugEnterDecision(55, decisionCanBacktrack[55]);
					int LA55_0 = input.LA(1);

					if ((LA55_0==WS))
					{
						alt55 = 1;
					}
					} finally { DebugExitDecision(55); }
					switch (alt55)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:267:17: WS
						{
						DebugLocation(267, 17);
						WS147=(IToken)Match(input,WS,Follow._WS_in_declaration_list1430); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS147);


						}
						break;

					}
					} finally { DebugExitSubRule(55); }

					DebugLocation(267, 21);
					char_literal148=(IToken)Match(input,171,Follow._171_in_declaration_list1433); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_171.Add(char_literal148);

					DebugLocation(267, 25);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:267:25: ( WS )?
					int alt56=2;
					try { DebugEnterSubRule(56);
					try { DebugEnterDecision(56, decisionCanBacktrack[56]);
					int LA56_0 = input.LA(1);

					if ((LA56_0==WS))
					{
						alt56 = 1;
					}
					} finally { DebugExitDecision(56); }
					switch (alt56)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:267:25: WS
						{
						DebugLocation(267, 25);
						WS149=(IToken)Match(input,WS,Follow._WS_in_declaration_list1435); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS149);


						}
						break;

					}
					} finally { DebugExitSubRule(56); }

					DebugLocation(267, 29);
					PushFollow(Follow._declaration_in_declaration_list1438);
					declaration150=declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_declaration.Add(declaration150.Tree);

					}
					break;

				default:
					goto loop57;
				}
			}

			loop57:
				;

			} finally { DebugExitSubRule(57); }



			{
			// AST REWRITE
			// elements: declaration
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 268:2: -> ^( T_DECLARE ( declaration )+ )
			{
				DebugLocation(268, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:268:5: ^( T_DECLARE ( declaration )+ )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(268, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_DECLARE, "T_DECLARE"), root_1);

				DebugLocation(268, 17);
				if (!(stream_declaration.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_declaration.HasNext )
				{
					DebugLocation(268, 17);
					adaptor.AddChild(root_1, stream_declaration.NextTree());

				}
				stream_declaration.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declaration_list", 30);
			LeaveRule("declaration_list", 30);
			LeaveRule_declaration_list();
	    }
	 	DebugLocation(269, 1);
		} finally { DebugExitRule(GrammarFileName, "declaration_list"); }
		return retval;

	}
	// $ANTLR end "declaration_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_declaration() {}

	// $ANTLR start "declaration"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:271:1: declaration : variable WS ( AS WS )? datatype -> ^( T_DECLARATION variable datatype ) ;
	[GrammarRule("declaration")]
	private AstParserRuleReturnScope<object, IToken> declaration()
	{
		EnterRule_declaration();
		EnterRule("declaration", 31);
		TraceIn("declaration", 31);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS152 = default(IToken);
	    IToken AS153 = default(IToken);
	    IToken WS154 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> variable151 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> datatype155 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS152_tree = default(object);
	    object AS153_tree = default(object);
	    object WS154_tree = default(object);
	    RewriteRuleITokenStream stream_AS=new RewriteRuleITokenStream(adaptor,"token AS");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_datatype=new RewriteRuleSubtreeStream(adaptor,"rule datatype");
	    RewriteRuleSubtreeStream stream_variable=new RewriteRuleSubtreeStream(adaptor,"rule variable");
		try { DebugEnterRule(GrammarFileName, "declaration");
		DebugLocation(271, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:272:2: ( variable WS ( AS WS )? datatype -> ^( T_DECLARATION variable datatype ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:272:4: variable WS ( AS WS )? datatype
			{
			DebugLocation(272, 4);
			PushFollow(Follow._variable_in_declaration1462);
			variable151=variable();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_variable.Add(variable151.Tree);
			DebugLocation(272, 13);
			WS152=(IToken)Match(input,WS,Follow._WS_in_declaration1464); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS152);

			DebugLocation(272, 16);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:272:16: ( AS WS )?
			int alt58=2;
			try { DebugEnterSubRule(58);
			try { DebugEnterDecision(58, decisionCanBacktrack[58]);
			int LA58_0 = input.LA(1);

			if ((LA58_0==AS))
			{
				alt58 = 1;
			}
			} finally { DebugExitDecision(58); }
			switch (alt58)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:272:17: AS WS
				{
				DebugLocation(272, 17);
				AS153=(IToken)Match(input,AS,Follow._AS_in_declaration1467); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_AS.Add(AS153);

				DebugLocation(272, 20);
				WS154=(IToken)Match(input,WS,Follow._WS_in_declaration1469); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS154);


				}
				break;

			}
			} finally { DebugExitSubRule(58); }

			DebugLocation(272, 25);
			PushFollow(Follow._datatype_in_declaration1473);
			datatype155=datatype();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_datatype.Add(datatype155.Tree);


			{
			// AST REWRITE
			// elements: datatype, variable
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 273:2: -> ^( T_DECLARATION variable datatype )
			{
				DebugLocation(273, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:273:5: ^( T_DECLARATION variable datatype )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(273, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_DECLARATION, "T_DECLARATION"), root_1);

				DebugLocation(273, 21);
				adaptor.AddChild(root_1, stream_variable.NextTree());
				DebugLocation(273, 30);
				adaptor.AddChild(root_1, stream_datatype.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declaration", 31);
			LeaveRule("declaration", 31);
			LeaveRule_declaration();
	    }
	 	DebugLocation(274, 1);
		} finally { DebugExitRule(GrammarFileName, "declaration"); }
		return retval;

	}
	// $ANTLR end "declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_create_view_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_create_view_command() {}

	// $ANTLR start "create_view_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:279:1: create_view_command : CREATE WS VIEW WS view_name ( ( WS )? '(' declaration_list ')' )? WS AS WS select_command -> ^( T_CREATE_VIEW view_name ( declaration_list )? select_command ) ;
	[GrammarRule("create_view_command")]
	private AstParserRuleReturnScope<object, IToken> create_view_command()
	{
		EnterRule_create_view_command();
		EnterRule("create_view_command", 32);
		TraceIn("create_view_command", 32);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken CREATE156 = default(IToken);
	    IToken WS157 = default(IToken);
	    IToken VIEW158 = default(IToken);
	    IToken WS159 = default(IToken);
	    IToken WS161 = default(IToken);
	    IToken char_literal162 = default(IToken);
	    IToken char_literal164 = default(IToken);
	    IToken WS165 = default(IToken);
	    IToken AS166 = default(IToken);
	    IToken WS167 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> view_name160 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> declaration_list163 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> select_command168 = default(AstParserRuleReturnScope<object, IToken>);

	    object CREATE156_tree = default(object);
	    object WS157_tree = default(object);
	    object VIEW158_tree = default(object);
	    object WS159_tree = default(object);
	    object WS161_tree = default(object);
	    object char_literal162_tree = default(object);
	    object char_literal164_tree = default(object);
	    object WS165_tree = default(object);
	    object AS166_tree = default(object);
	    object WS167_tree = default(object);
	    RewriteRuleITokenStream stream_AS=new RewriteRuleITokenStream(adaptor,"token AS");
	    RewriteRuleITokenStream stream_CREATE=new RewriteRuleITokenStream(adaptor,"token CREATE");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_VIEW=new RewriteRuleITokenStream(adaptor,"token VIEW");
	    RewriteRuleITokenStream stream_168=new RewriteRuleITokenStream(adaptor,"token 168");
	    RewriteRuleITokenStream stream_167=new RewriteRuleITokenStream(adaptor,"token 167");
	    RewriteRuleSubtreeStream stream_view_name=new RewriteRuleSubtreeStream(adaptor,"rule view_name");
	    RewriteRuleSubtreeStream stream_select_command=new RewriteRuleSubtreeStream(adaptor,"rule select_command");
	    RewriteRuleSubtreeStream stream_declaration_list=new RewriteRuleSubtreeStream(adaptor,"rule declaration_list");
		try { DebugEnterRule(GrammarFileName, "create_view_command");
		DebugLocation(279, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:280:2: ( CREATE WS VIEW WS view_name ( ( WS )? '(' declaration_list ')' )? WS AS WS select_command -> ^( T_CREATE_VIEW view_name ( declaration_list )? select_command ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:280:4: CREATE WS VIEW WS view_name ( ( WS )? '(' declaration_list ')' )? WS AS WS select_command
			{
			DebugLocation(280, 4);
			CREATE156=(IToken)Match(input,CREATE,Follow._CREATE_in_create_view_command1498); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CREATE.Add(CREATE156);

			DebugLocation(280, 11);
			WS157=(IToken)Match(input,WS,Follow._WS_in_create_view_command1500); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS157);

			DebugLocation(280, 14);
			VIEW158=(IToken)Match(input,VIEW,Follow._VIEW_in_create_view_command1502); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_VIEW.Add(VIEW158);

			DebugLocation(280, 19);
			WS159=(IToken)Match(input,WS,Follow._WS_in_create_view_command1504); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS159);

			DebugLocation(280, 22);
			PushFollow(Follow._view_name_in_create_view_command1506);
			view_name160=view_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_view_name.Add(view_name160.Tree);
			DebugLocation(280, 32);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:280:32: ( ( WS )? '(' declaration_list ')' )?
			int alt60=2;
			try { DebugEnterSubRule(60);
			try { DebugEnterDecision(60, decisionCanBacktrack[60]);
			int LA60_0 = input.LA(1);

			if ((LA60_0==WS))
			{
				int LA60_1 = input.LA(2);

				if ((LA60_1==167))
				{
					alt60 = 1;
				}
			}
			else if ((LA60_0==167))
			{
				alt60 = 1;
			}
			} finally { DebugExitDecision(60); }
			switch (alt60)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:280:33: ( WS )? '(' declaration_list ')'
				{
				DebugLocation(280, 33);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:280:33: ( WS )?
				int alt59=2;
				try { DebugEnterSubRule(59);
				try { DebugEnterDecision(59, decisionCanBacktrack[59]);
				int LA59_0 = input.LA(1);

				if ((LA59_0==WS))
				{
					alt59 = 1;
				}
				} finally { DebugExitDecision(59); }
				switch (alt59)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:280:33: WS
					{
					DebugLocation(280, 33);
					WS161=(IToken)Match(input,WS,Follow._WS_in_create_view_command1509); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS161);


					}
					break;

				}
				} finally { DebugExitSubRule(59); }

				DebugLocation(280, 37);
				char_literal162=(IToken)Match(input,167,Follow._167_in_create_view_command1512); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_167.Add(char_literal162);

				DebugLocation(280, 41);
				PushFollow(Follow._declaration_list_in_create_view_command1514);
				declaration_list163=declaration_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_declaration_list.Add(declaration_list163.Tree);
				DebugLocation(280, 58);
				char_literal164=(IToken)Match(input,168,Follow._168_in_create_view_command1516); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_168.Add(char_literal164);


				}
				break;

			}
			} finally { DebugExitSubRule(60); }

			DebugLocation(280, 64);
			WS165=(IToken)Match(input,WS,Follow._WS_in_create_view_command1520); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS165);

			DebugLocation(280, 67);
			AS166=(IToken)Match(input,AS,Follow._AS_in_create_view_command1522); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_AS.Add(AS166);

			DebugLocation(280, 70);
			WS167=(IToken)Match(input,WS,Follow._WS_in_create_view_command1524); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS167);

			DebugLocation(280, 73);
			PushFollow(Follow._select_command_in_create_view_command1526);
			select_command168=select_command();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_select_command.Add(select_command168.Tree);


			{
			// AST REWRITE
			// elements: view_name, select_command, declaration_list
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 281:2: -> ^( T_CREATE_VIEW view_name ( declaration_list )? select_command )
			{
				DebugLocation(281, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:281:5: ^( T_CREATE_VIEW view_name ( declaration_list )? select_command )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(281, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CREATE_VIEW, "T_CREATE_VIEW"), root_1);

				DebugLocation(281, 21);
				adaptor.AddChild(root_1, stream_view_name.NextTree());
				DebugLocation(281, 31);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:281:31: ( declaration_list )?
				if (stream_declaration_list.HasNext)
				{
					DebugLocation(281, 31);
					adaptor.AddChild(root_1, stream_declaration_list.NextTree());

				}
				stream_declaration_list.Reset();
				DebugLocation(281, 49);
				adaptor.AddChild(root_1, stream_select_command.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("create_view_command", 32);
			LeaveRule("create_view_command", 32);
			LeaveRule_create_view_command();
	    }
	 	DebugLocation(282, 1);
		} finally { DebugExitRule(GrammarFileName, "create_view_command"); }
		return retval;

	}
	// $ANTLR end "create_view_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_drop_view_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_drop_view_command() {}

	// $ANTLR start "drop_view_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:284:1: drop_view_command : DROP WS VIEW WS view_name -> ^( T_DROP_VIEW view_name ) ;
	[GrammarRule("drop_view_command")]
	private AstParserRuleReturnScope<object, IToken> drop_view_command()
	{
		EnterRule_drop_view_command();
		EnterRule("drop_view_command", 33);
		TraceIn("drop_view_command", 33);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken DROP169 = default(IToken);
	    IToken WS170 = default(IToken);
	    IToken VIEW171 = default(IToken);
	    IToken WS172 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> view_name173 = default(AstParserRuleReturnScope<object, IToken>);

	    object DROP169_tree = default(object);
	    object WS170_tree = default(object);
	    object VIEW171_tree = default(object);
	    object WS172_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_VIEW=new RewriteRuleITokenStream(adaptor,"token VIEW");
	    RewriteRuleITokenStream stream_DROP=new RewriteRuleITokenStream(adaptor,"token DROP");
	    RewriteRuleSubtreeStream stream_view_name=new RewriteRuleSubtreeStream(adaptor,"rule view_name");
		try { DebugEnterRule(GrammarFileName, "drop_view_command");
		DebugLocation(284, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:285:2: ( DROP WS VIEW WS view_name -> ^( T_DROP_VIEW view_name ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:285:4: DROP WS VIEW WS view_name
			{
			DebugLocation(285, 4);
			DROP169=(IToken)Match(input,DROP,Follow._DROP_in_drop_view_command1552); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DROP.Add(DROP169);

			DebugLocation(285, 9);
			WS170=(IToken)Match(input,WS,Follow._WS_in_drop_view_command1554); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS170);

			DebugLocation(285, 12);
			VIEW171=(IToken)Match(input,VIEW,Follow._VIEW_in_drop_view_command1556); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_VIEW.Add(VIEW171);

			DebugLocation(285, 17);
			WS172=(IToken)Match(input,WS,Follow._WS_in_drop_view_command1558); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS172);

			DebugLocation(285, 20);
			PushFollow(Follow._view_name_in_drop_view_command1560);
			view_name173=view_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_view_name.Add(view_name173.Tree);


			{
			// AST REWRITE
			// elements: view_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 286:2: -> ^( T_DROP_VIEW view_name )
			{
				DebugLocation(286, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:286:5: ^( T_DROP_VIEW view_name )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(286, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_DROP_VIEW, "T_DROP_VIEW"), root_1);

				DebugLocation(286, 19);
				adaptor.AddChild(root_1, stream_view_name.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("drop_view_command", 33);
			LeaveRule("drop_view_command", 33);
			LeaveRule_drop_view_command();
	    }
	 	DebugLocation(287, 1);
		} finally { DebugExitRule(GrammarFileName, "drop_view_command"); }
		return retval;

	}
	// $ANTLR end "drop_view_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_view_name() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_view_name() {}

	// $ANTLR start "view_name"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:289:1: view_name : TOKEN -> ^( T_VIEW_NAME TOKEN ) ;
	[GrammarRule("view_name")]
	private AstParserRuleReturnScope<object, IToken> view_name()
	{
		EnterRule_view_name();
		EnterRule("view_name", 34);
		TraceIn("view_name", 34);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN174 = default(IToken);

	    object TOKEN174_tree = default(object);
	    RewriteRuleITokenStream stream_TOKEN=new RewriteRuleITokenStream(adaptor,"token TOKEN");

		try { DebugEnterRule(GrammarFileName, "view_name");
		DebugLocation(289, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:290:2: ( TOKEN -> ^( T_VIEW_NAME TOKEN ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:290:4: TOKEN
			{
			DebugLocation(290, 4);
			TOKEN174=(IToken)Match(input,TOKEN,Follow._TOKEN_in_view_name1580); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_TOKEN.Add(TOKEN174);



			{
			// AST REWRITE
			// elements: TOKEN
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 290:10: -> ^( T_VIEW_NAME TOKEN )
			{
				DebugLocation(290, 13);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:290:13: ^( T_VIEW_NAME TOKEN )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(290, 15);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_VIEW_NAME, "T_VIEW_NAME"), root_1);

				DebugLocation(290, 27);
				adaptor.AddChild(root_1, stream_TOKEN.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("view_name", 34);
			LeaveRule("view_name", 34);
			LeaveRule_view_name();
	    }
	 	DebugLocation(291, 1);
		} finally { DebugExitRule(GrammarFileName, "view_name"); }
		return retval;

	}
	// $ANTLR end "view_name"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_drop_table_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_drop_table_command() {}

	// $ANTLR start "drop_table_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:295:1: drop_table_command : DROP WS TABLE WS file -> ^( T_DROP_TABLE file ) ;
	[GrammarRule("drop_table_command")]
	private AstParserRuleReturnScope<object, IToken> drop_table_command()
	{
		EnterRule_drop_table_command();
		EnterRule("drop_table_command", 35);
		TraceIn("drop_table_command", 35);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken DROP175 = default(IToken);
	    IToken WS176 = default(IToken);
	    IToken TABLE177 = default(IToken);
	    IToken WS178 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file179 = default(AstParserRuleReturnScope<object, IToken>);

	    object DROP175_tree = default(object);
	    object WS176_tree = default(object);
	    object TABLE177_tree = default(object);
	    object WS178_tree = default(object);
	    RewriteRuleITokenStream stream_TABLE=new RewriteRuleITokenStream(adaptor,"token TABLE");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_DROP=new RewriteRuleITokenStream(adaptor,"token DROP");
	    RewriteRuleSubtreeStream stream_file=new RewriteRuleSubtreeStream(adaptor,"rule file");
		try { DebugEnterRule(GrammarFileName, "drop_table_command");
		DebugLocation(295, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:296:2: ( DROP WS TABLE WS file -> ^( T_DROP_TABLE file ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:296:4: DROP WS TABLE WS file
			{
			DebugLocation(296, 4);
			DROP175=(IToken)Match(input,DROP,Follow._DROP_in_drop_table_command1602); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DROP.Add(DROP175);

			DebugLocation(296, 9);
			WS176=(IToken)Match(input,WS,Follow._WS_in_drop_table_command1604); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS176);

			DebugLocation(296, 12);
			TABLE177=(IToken)Match(input,TABLE,Follow._TABLE_in_drop_table_command1606); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_TABLE.Add(TABLE177);

			DebugLocation(296, 18);
			WS178=(IToken)Match(input,WS,Follow._WS_in_drop_table_command1608); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS178);

			DebugLocation(296, 21);
			PushFollow(Follow._file_in_drop_table_command1610);
			file179=file();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_file.Add(file179.Tree);


			{
			// AST REWRITE
			// elements: file
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 297:2: -> ^( T_DROP_TABLE file )
			{
				DebugLocation(297, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:297:5: ^( T_DROP_TABLE file )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(297, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_DROP_TABLE, "T_DROP_TABLE"), root_1);

				DebugLocation(297, 20);
				adaptor.AddChild(root_1, stream_file.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("drop_table_command", 35);
			LeaveRule("drop_table_command", 35);
			LeaveRule_drop_table_command();
	    }
	 	DebugLocation(298, 1);
		} finally { DebugExitRule(GrammarFileName, "drop_table_command"); }
		return retval;

	}
	// $ANTLR end "drop_table_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_set_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_set_command() {}

	// $ANTLR start "set_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:304:1: set_command : SET WS variable ( WS )? '=' ( WS )? expression -> ^( T_SET_VARIABLE variable expression ) ;
	[GrammarRule("set_command")]
	private AstParserRuleReturnScope<object, IToken> set_command()
	{
		EnterRule_set_command();
		EnterRule("set_command", 36);
		TraceIn("set_command", 36);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken SET180 = default(IToken);
	    IToken WS181 = default(IToken);
	    IToken WS183 = default(IToken);
	    IToken char_literal184 = default(IToken);
	    IToken WS185 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> variable182 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression186 = default(AstParserRuleReturnScope<object, IToken>);

	    object SET180_tree = default(object);
	    object WS181_tree = default(object);
	    object WS183_tree = default(object);
	    object char_literal184_tree = default(object);
	    object WS185_tree = default(object);
	    RewriteRuleITokenStream stream_SET=new RewriteRuleITokenStream(adaptor,"token SET");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_179=new RewriteRuleITokenStream(adaptor,"token 179");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_variable=new RewriteRuleSubtreeStream(adaptor,"rule variable");
		try { DebugEnterRule(GrammarFileName, "set_command");
		DebugLocation(304, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:305:2: ( SET WS variable ( WS )? '=' ( WS )? expression -> ^( T_SET_VARIABLE variable expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:305:4: SET WS variable ( WS )? '=' ( WS )? expression
			{
			DebugLocation(305, 4);
			SET180=(IToken)Match(input,SET,Follow._SET_in_set_command1634); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_SET.Add(SET180);

			DebugLocation(305, 8);
			WS181=(IToken)Match(input,WS,Follow._WS_in_set_command1636); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS181);

			DebugLocation(305, 11);
			PushFollow(Follow._variable_in_set_command1638);
			variable182=variable();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_variable.Add(variable182.Tree);
			DebugLocation(305, 20);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:305:20: ( WS )?
			int alt61=2;
			try { DebugEnterSubRule(61);
			try { DebugEnterDecision(61, decisionCanBacktrack[61]);
			int LA61_0 = input.LA(1);

			if ((LA61_0==WS))
			{
				alt61 = 1;
			}
			} finally { DebugExitDecision(61); }
			switch (alt61)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:305:20: WS
				{
				DebugLocation(305, 20);
				WS183=(IToken)Match(input,WS,Follow._WS_in_set_command1640); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS183);


				}
				break;

			}
			} finally { DebugExitSubRule(61); }

			DebugLocation(305, 24);
			char_literal184=(IToken)Match(input,179,Follow._179_in_set_command1643); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_179.Add(char_literal184);

			DebugLocation(305, 28);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:305:28: ( WS )?
			int alt62=2;
			try { DebugEnterSubRule(62);
			try { DebugEnterDecision(62, decisionCanBacktrack[62]);
			int LA62_0 = input.LA(1);

			if ((LA62_0==WS))
			{
				alt62 = 1;
			}
			} finally { DebugExitDecision(62); }
			switch (alt62)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:305:28: WS
				{
				DebugLocation(305, 28);
				WS185=(IToken)Match(input,WS,Follow._WS_in_set_command1645); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS185);


				}
				break;

			}
			} finally { DebugExitSubRule(62); }

			DebugLocation(305, 32);
			PushFollow(Follow._expression_in_set_command1648);
			expression186=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression.Add(expression186.Tree);


			{
			// AST REWRITE
			// elements: variable, expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 306:2: -> ^( T_SET_VARIABLE variable expression )
			{
				DebugLocation(306, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:306:5: ^( T_SET_VARIABLE variable expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(306, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SET_VARIABLE, "T_SET_VARIABLE"), root_1);

				DebugLocation(306, 22);
				adaptor.AddChild(root_1, stream_variable.NextTree());
				DebugLocation(306, 31);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("set_command", 36);
			LeaveRule("set_command", 36);
			LeaveRule_set_command();
	    }
	 	DebugLocation(307, 1);
		} finally { DebugExitRule(GrammarFileName, "set_command"); }
		return retval;

	}
	// $ANTLR end "set_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_list() {}

	// $ANTLR start "expression_list"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:312:1: expression_list : expression ( ( WS )? ',' ( WS )? expression )* -> ^( T_EXPRESSIONLIST ( expression )+ ) ;
	[GrammarRule("expression_list")]
	private AstParserRuleReturnScope<object, IToken> expression_list()
	{
		EnterRule_expression_list();
		EnterRule("expression_list", 37);
		TraceIn("expression_list", 37);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS188 = default(IToken);
	    IToken char_literal189 = default(IToken);
	    IToken WS190 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression187 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression191 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS188_tree = default(object);
	    object char_literal189_tree = default(object);
	    object WS190_tree = default(object);
	    RewriteRuleITokenStream stream_171=new RewriteRuleITokenStream(adaptor,"token 171");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "expression_list");
		DebugLocation(312, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:313:2: ( expression ( ( WS )? ',' ( WS )? expression )* -> ^( T_EXPRESSIONLIST ( expression )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:313:4: expression ( ( WS )? ',' ( WS )? expression )*
			{
			DebugLocation(313, 4);
			PushFollow(Follow._expression_in_expression_list1673);
			expression187=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression.Add(expression187.Tree);
			DebugLocation(313, 15);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:313:15: ( ( WS )? ',' ( WS )? expression )*
			try { DebugEnterSubRule(65);
			while (true)
			{
				int alt65=2;
				try { DebugEnterDecision(65, decisionCanBacktrack[65]);
				int LA65_0 = input.LA(1);

				if ((LA65_0==WS))
				{
					int LA65_2 = input.LA(2);

					if ((LA65_2==171))
					{
						alt65 = 1;
					}


				}
				else if ((LA65_0==171))
				{
					alt65 = 1;
				}


				} finally { DebugExitDecision(65); }
				switch ( alt65 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:313:16: ( WS )? ',' ( WS )? expression
					{
					DebugLocation(313, 16);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:313:16: ( WS )?
					int alt63=2;
					try { DebugEnterSubRule(63);
					try { DebugEnterDecision(63, decisionCanBacktrack[63]);
					int LA63_0 = input.LA(1);

					if ((LA63_0==WS))
					{
						alt63 = 1;
					}
					} finally { DebugExitDecision(63); }
					switch (alt63)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:313:16: WS
						{
						DebugLocation(313, 16);
						WS188=(IToken)Match(input,WS,Follow._WS_in_expression_list1676); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS188);


						}
						break;

					}
					} finally { DebugExitSubRule(63); }

					DebugLocation(313, 20);
					char_literal189=(IToken)Match(input,171,Follow._171_in_expression_list1679); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_171.Add(char_literal189);

					DebugLocation(313, 24);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:313:24: ( WS )?
					int alt64=2;
					try { DebugEnterSubRule(64);
					try { DebugEnterDecision(64, decisionCanBacktrack[64]);
					int LA64_0 = input.LA(1);

					if ((LA64_0==WS))
					{
						alt64 = 1;
					}
					} finally { DebugExitDecision(64); }
					switch (alt64)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:313:24: WS
						{
						DebugLocation(313, 24);
						WS190=(IToken)Match(input,WS,Follow._WS_in_expression_list1681); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS190);


						}
						break;

					}
					} finally { DebugExitSubRule(64); }

					DebugLocation(313, 28);
					PushFollow(Follow._expression_in_expression_list1684);
					expression191=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expression.Add(expression191.Tree);

					}
					break;

				default:
					goto loop65;
				}
			}

			loop65:
				;

			} finally { DebugExitSubRule(65); }



			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 313:41: -> ^( T_EXPRESSIONLIST ( expression )+ )
			{
				DebugLocation(313, 44);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:313:44: ^( T_EXPRESSIONLIST ( expression )+ )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(313, 46);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_EXPRESSIONLIST, "T_EXPRESSIONLIST"), root_1);

				DebugLocation(313, 63);
				if (!(stream_expression.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_expression.HasNext )
				{
					DebugLocation(313, 63);
					adaptor.AddChild(root_1, stream_expression.NextTree());

				}
				stream_expression.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_list", 37);
			LeaveRule("expression_list", 37);
			LeaveRule_expression_list();
	    }
	 	DebugLocation(314, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_list"); }
		return retval;

	}
	// $ANTLR end "expression_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_list_or_select_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_list_or_select_command() {}

	// $ANTLR start "expression_list_or_select_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:316:1: expression_list_or_select_command : ( ( SELECT )=> select_command | expression_list );
	[GrammarRule("expression_list_or_select_command")]
	private AstParserRuleReturnScope<object, IToken> expression_list_or_select_command()
	{
		EnterRule_expression_list_or_select_command();
		EnterRule("expression_list_or_select_command", 38);
		TraceIn("expression_list_or_select_command", 38);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> select_command192 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list193 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "expression_list_or_select_command");
		DebugLocation(316, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:317:2: ( ( SELECT )=> select_command | expression_list )
			int alt66=2;
			try { DebugEnterDecision(66, decisionCanBacktrack[66]);
			int LA66_0 = input.LA(1);

			if ((LA66_0==167))
			{
				int LA66_1 = input.LA(2);

				if ((EvaluatePredicate(synpred2_gql_fragment)))
				{
					alt66 = 1;
				}
				else if ((true))
				{
					alt66 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 66, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA66_0==SELECT) && (EvaluatePredicate(synpred2_gql_fragment)))
			{
				alt66 = 1;
			}
			else if (((LA66_0>=CASE && LA66_0<=CAST)||(LA66_0>=CONVERT && LA66_0<=COUNT)||(LA66_0>=DATEADD && LA66_0<=DATEPART)||LA66_0==EXISTS||(LA66_0>=NOT && LA66_0<=NUMBER)||LA66_0==SIMPLE_FILE||(LA66_0>=STRING && LA66_0<=SYSTEMVAR)||LA66_0==TOKEN||LA66_0==VARIABLE||LA66_0==170||LA66_0==172||LA66_0==186))
			{
				alt66 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 66, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(66); }
			switch (alt66)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:317:4: ( SELECT )=> select_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(317, 16);
				PushFollow(Follow._select_command_in_expression_list_or_select_command1713);
				select_command192=select_command();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, select_command192.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:318:4: expression_list
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(318, 4);
				PushFollow(Follow._expression_list_in_expression_list_or_select_command1718);
				expression_list193=expression_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression_list193.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_list_or_select_command", 38);
			LeaveRule("expression_list_or_select_command", 38);
			LeaveRule_expression_list_or_select_command();
	    }
	 	DebugLocation(319, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_list_or_select_command"); }
		return retval;

	}
	// $ANTLR end "expression_list_or_select_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression() {}

	// $ANTLR start "expression"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:321:1: expression : expression_7 ;
	[GrammarRule("expression")]
	private AstParserRuleReturnScope<object, IToken> expression()
	{
		EnterRule_expression();
		EnterRule("expression", 39);
		TraceIn("expression", 39);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> expression_7194 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(321, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:322:2: ( expression_7 )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:322:4: expression_7
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(322, 4);
			PushFollow(Follow._expression_7_in_expression1731);
			expression_7194=expression_7();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression_7194.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression", 39);
			LeaveRule("expression", 39);
			LeaveRule_expression();
	    }
	 	DebugLocation(323, 1);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return retval;

	}
	// $ANTLR end "expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_7() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_7() {}

	// $ANTLR start "expression_7"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:325:1: expression_7 : (a= expression_6 -> $a) ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )* ;
	[GrammarRule("expression_7")]
	private AstParserRuleReturnScope<object, IToken> expression_7()
	{
		EnterRule_expression_7();
		EnterRule("expression_7", 40);
		TraceIn("expression_7", 40);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS195 = default(IToken);
	    IToken WS197 = default(IToken);
	    IToken IN198 = default(IToken);
	    IToken WS199 = default(IToken);
	    IToken char_literal200 = default(IToken);
	    IToken WS201 = default(IToken);
	    IToken WS203 = default(IToken);
	    IToken char_literal204 = default(IToken);
	    IToken NOT205 = default(IToken);
	    IToken WS206 = default(IToken);
	    IToken IN207 = default(IToken);
	    IToken WS208 = default(IToken);
	    IToken char_literal209 = default(IToken);
	    IToken WS210 = default(IToken);
	    IToken WS212 = default(IToken);
	    IToken char_literal213 = default(IToken);
	    IToken WS215 = default(IToken);
	    IToken SOME216 = default(IToken);
	    IToken ANY217 = default(IToken);
	    IToken WS218 = default(IToken);
	    IToken char_literal219 = default(IToken);
	    IToken char_literal221 = default(IToken);
	    IToken WS223 = default(IToken);
	    IToken ALL224 = default(IToken);
	    IToken WS225 = default(IToken);
	    IToken char_literal226 = default(IToken);
	    IToken char_literal228 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_7196 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command202 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command211 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_4214 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command220 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_4222 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command227 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS195_tree = default(object);
	    object WS197_tree = default(object);
	    object IN198_tree = default(object);
	    object WS199_tree = default(object);
	    object char_literal200_tree = default(object);
	    object WS201_tree = default(object);
	    object WS203_tree = default(object);
	    object char_literal204_tree = default(object);
	    object NOT205_tree = default(object);
	    object WS206_tree = default(object);
	    object IN207_tree = default(object);
	    object WS208_tree = default(object);
	    object char_literal209_tree = default(object);
	    object WS210_tree = default(object);
	    object WS212_tree = default(object);
	    object char_literal213_tree = default(object);
	    object WS215_tree = default(object);
	    object SOME216_tree = default(object);
	    object ANY217_tree = default(object);
	    object WS218_tree = default(object);
	    object char_literal219_tree = default(object);
	    object char_literal221_tree = default(object);
	    object WS223_tree = default(object);
	    object ALL224_tree = default(object);
	    object WS225_tree = default(object);
	    object char_literal226_tree = default(object);
	    object char_literal228_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_ANY=new RewriteRuleITokenStream(adaptor,"token ANY");
	    RewriteRuleITokenStream stream_IN=new RewriteRuleITokenStream(adaptor,"token IN");
	    RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");
	    RewriteRuleITokenStream stream_SOME=new RewriteRuleITokenStream(adaptor,"token SOME");
	    RewriteRuleITokenStream stream_ALL=new RewriteRuleITokenStream(adaptor,"token ALL");
	    RewriteRuleITokenStream stream_168=new RewriteRuleITokenStream(adaptor,"token 168");
	    RewriteRuleITokenStream stream_167=new RewriteRuleITokenStream(adaptor,"token 167");
	    RewriteRuleSubtreeStream stream_op_7=new RewriteRuleSubtreeStream(adaptor,"rule op_7");
	    RewriteRuleSubtreeStream stream_expression_6=new RewriteRuleSubtreeStream(adaptor,"rule expression_6");
	    RewriteRuleSubtreeStream stream_expression_list_or_select_command=new RewriteRuleSubtreeStream(adaptor,"rule expression_list_or_select_command");
	    RewriteRuleSubtreeStream stream_op_4=new RewriteRuleSubtreeStream(adaptor,"rule op_4");
		try { DebugEnterRule(GrammarFileName, "expression_7");
		DebugLocation(325, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:326:2: ( (a= expression_6 -> $a) ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:326:4: (a= expression_6 -> $a) ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )*
			{
			DebugLocation(326, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:326:4: (a= expression_6 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:326:5: a= expression_6
			{
			DebugLocation(326, 6);
			PushFollow(Follow._expression_6_in_expression_71747);
			a=expression_6();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression_6.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 326:19: -> $a
			{
				DebugLocation(326, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(326, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:326:25: ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )*
			try { DebugEnterSubRule(79);
			while (true)
			{
				int alt79=2;
				try { DebugEnterDecision(79, decisionCanBacktrack[79]);
				int LA79_0 = input.LA(1);

				if ((LA79_0==WS))
				{
					int LA79_1 = input.LA(2);

					if ((LA79_1==BETWEEN||LA79_1==IN||LA79_1==LIKE||LA79_1==MATCH||LA79_1==NOT||LA79_1==OR||(LA79_1>=162 && LA79_1<=164)||(LA79_1>=176 && LA79_1<=181)))
					{
						alt79 = 1;
					}


				}


				} finally { DebugExitDecision(79); }
				switch ( alt79 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:326:26: WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) )
					{
					DebugLocation(326, 26);
					WS195=(IToken)Match(input,WS,Follow._WS_in_expression_71754); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS195);

					DebugLocation(326, 29);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:326:29: ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) )
					int alt78=5;
					try { DebugEnterSubRule(78);
					try { DebugEnterDecision(78, decisionCanBacktrack[78]);
					switch (input.LA(1))
					{
					case BETWEEN:
					case OR:
						{
						alt78 = 1;
						}
						break;
					case NOT:
						{
						int LA78_2 = input.LA(2);

						if ((LA78_2==WS))
						{
							switch (input.LA(3))
							{
							case BETWEEN:
								{
								alt78 = 1;
								}
								break;
							case IN:
								{
								alt78 = 3;
								}
								break;
							case LIKE:
								{
								switch (input.LA(4))
								{
								case WS:
									{
									int LA78_16 = input.LA(5);

									if ((LA78_16==ANY||LA78_16==SOME))
									{
										alt78 = 4;
									}
									else if ((LA78_16==ALL))
									{
										alt78 = 5;
									}
									else
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 78, 16, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
									}
									break;
								case ANY:
								case SOME:
									{
									alt78 = 4;
									}
									break;
								case ALL:
									{
									alt78 = 5;
									}
									break;
								default:
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 78, 20, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

								}
								break;
							case MATCH:
								{
								switch (input.LA(4))
								{
								case WS:
									{
									int LA78_16 = input.LA(5);

									if ((LA78_16==ANY||LA78_16==SOME))
									{
										alt78 = 4;
									}
									else if ((LA78_16==ALL))
									{
										alt78 = 5;
									}
									else
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 78, 16, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
									}
									break;
								case ANY:
								case SOME:
									{
									alt78 = 4;
									}
									break;
								case ALL:
									{
									alt78 = 5;
									}
									break;
								default:
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 78, 21, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

								}
								break;
							default:
								{
									if (state.backtracking>0) {state.failed=true; return retval;}
									NoViableAltException nvae = new NoViableAltException("", 78, 15, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}

						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 78, 2, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case IN:
						{
						alt78 = 2;
						}
						break;
					case 179:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA78_16 = input.LA(3);

							if ((LA78_16==ANY||LA78_16==SOME))
							{
								alt78 = 4;
							}
							else if ((LA78_16==ALL))
							{
								alt78 = 5;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 78, 16, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt78 = 4;
							}
							break;
						case ALL:
							{
							alt78 = 5;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 78, 4, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 181:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA78_16 = input.LA(3);

							if ((LA78_16==ANY||LA78_16==SOME))
							{
								alt78 = 4;
							}
							else if ((LA78_16==ALL))
							{
								alt78 = 5;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 78, 16, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt78 = 4;
							}
							break;
						case ALL:
							{
							alt78 = 5;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 78, 5, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 177:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA78_16 = input.LA(3);

							if ((LA78_16==ANY||LA78_16==SOME))
							{
								alt78 = 4;
							}
							else if ((LA78_16==ALL))
							{
								alt78 = 5;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 78, 16, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt78 = 4;
							}
							break;
						case ALL:
							{
							alt78 = 5;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 78, 6, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 178:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA78_16 = input.LA(3);

							if ((LA78_16==ANY||LA78_16==SOME))
							{
								alt78 = 4;
							}
							else if ((LA78_16==ALL))
							{
								alt78 = 5;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 78, 16, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt78 = 4;
							}
							break;
						case ALL:
							{
							alt78 = 5;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 78, 7, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 163:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA78_16 = input.LA(3);

							if ((LA78_16==ANY||LA78_16==SOME))
							{
								alt78 = 4;
							}
							else if ((LA78_16==ALL))
							{
								alt78 = 5;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 78, 16, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt78 = 4;
							}
							break;
						case ALL:
							{
							alt78 = 5;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 78, 8, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 164:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA78_16 = input.LA(3);

							if ((LA78_16==ANY||LA78_16==SOME))
							{
								alt78 = 4;
							}
							else if ((LA78_16==ALL))
							{
								alt78 = 5;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 78, 16, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt78 = 4;
							}
							break;
						case ALL:
							{
							alt78 = 5;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 78, 9, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 162:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA78_16 = input.LA(3);

							if ((LA78_16==ANY||LA78_16==SOME))
							{
								alt78 = 4;
							}
							else if ((LA78_16==ALL))
							{
								alt78 = 5;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 78, 16, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt78 = 4;
							}
							break;
						case ALL:
							{
							alt78 = 5;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 78, 10, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 180:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA78_16 = input.LA(3);

							if ((LA78_16==ANY||LA78_16==SOME))
							{
								alt78 = 4;
							}
							else if ((LA78_16==ALL))
							{
								alt78 = 5;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 78, 16, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt78 = 4;
							}
							break;
						case ALL:
							{
							alt78 = 5;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 78, 11, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 176:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA78_16 = input.LA(3);

							if ((LA78_16==ANY||LA78_16==SOME))
							{
								alt78 = 4;
							}
							else if ((LA78_16==ALL))
							{
								alt78 = 5;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 78, 16, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt78 = 4;
							}
							break;
						case ALL:
							{
							alt78 = 5;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 78, 12, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case LIKE:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA78_16 = input.LA(3);

							if ((LA78_16==ANY||LA78_16==SOME))
							{
								alt78 = 4;
							}
							else if ((LA78_16==ALL))
							{
								alt78 = 5;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 78, 16, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt78 = 4;
							}
							break;
						case ALL:
							{
							alt78 = 5;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 78, 13, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case MATCH:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA78_16 = input.LA(3);

							if ((LA78_16==ANY||LA78_16==SOME))
							{
								alt78 = 4;
							}
							else if ((LA78_16==ALL))
							{
								alt78 = 5;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 78, 16, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt78 = 4;
							}
							break;
						case ALL:
							{
							alt78 = 5;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 78, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					default:
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 78, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(78); }
					switch (alt78)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:327:2: op_7 WS b= expression_6
						{
						DebugLocation(327, 2);
						PushFollow(Follow._op_7_in_expression_71759);
						op_7196=op_7();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_op_7.Add(op_7196.Tree);
						DebugLocation(327, 7);
						WS197=(IToken)Match(input,WS,Follow._WS_in_expression_71761); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS197);

						DebugLocation(327, 11);
						PushFollow(Follow._expression_6_in_expression_71765);
						b=expression_6();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expression_6.Add(b.Tree);


						{
						// AST REWRITE
						// elements: expression_7, op_7, b
						// token labels: 
						// rule labels: retval, b
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 327:25: -> ^( T_OP_BINARY op_7 $expression_7 $b)
						{
							DebugLocation(327, 28);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:327:28: ^( T_OP_BINARY op_7 $expression_7 $b)
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(327, 30);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(327, 42);
							adaptor.AddChild(root_1, stream_op_7.NextTree());
							DebugLocation(327, 48);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(327, 62);
							adaptor.AddChild(root_1, stream_b.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:328:4: IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')'
						{
						DebugLocation(328, 4);
						IN198=(IToken)Match(input,IN,Follow._IN_in_expression_71784); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_IN.Add(IN198);

						DebugLocation(328, 7);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:328:7: ( WS )?
						int alt67=2;
						try { DebugEnterSubRule(67);
						try { DebugEnterDecision(67, decisionCanBacktrack[67]);
						int LA67_0 = input.LA(1);

						if ((LA67_0==WS))
						{
							alt67 = 1;
						}
						} finally { DebugExitDecision(67); }
						switch (alt67)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:328:7: WS
							{
							DebugLocation(328, 7);
							WS199=(IToken)Match(input,WS,Follow._WS_in_expression_71786); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS199);


							}
							break;

						}
						} finally { DebugExitSubRule(67); }

						DebugLocation(328, 11);
						char_literal200=(IToken)Match(input,167,Follow._167_in_expression_71789); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_167.Add(char_literal200);

						DebugLocation(328, 15);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:328:15: ( WS )?
						int alt68=2;
						try { DebugEnterSubRule(68);
						try { DebugEnterDecision(68, decisionCanBacktrack[68]);
						int LA68_0 = input.LA(1);

						if ((LA68_0==WS))
						{
							alt68 = 1;
						}
						} finally { DebugExitDecision(68); }
						switch (alt68)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:328:15: WS
							{
							DebugLocation(328, 15);
							WS201=(IToken)Match(input,WS,Follow._WS_in_expression_71791); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS201);


							}
							break;

						}
						} finally { DebugExitSubRule(68); }

						DebugLocation(328, 19);
						PushFollow(Follow._expression_list_or_select_command_in_expression_71794);
						expression_list_or_select_command202=expression_list_or_select_command();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expression_list_or_select_command.Add(expression_list_or_select_command202.Tree);
						DebugLocation(328, 53);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:328:53: ( WS )?
						int alt69=2;
						try { DebugEnterSubRule(69);
						try { DebugEnterDecision(69, decisionCanBacktrack[69]);
						int LA69_0 = input.LA(1);

						if ((LA69_0==WS))
						{
							alt69 = 1;
						}
						} finally { DebugExitDecision(69); }
						switch (alt69)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:328:53: WS
							{
							DebugLocation(328, 53);
							WS203=(IToken)Match(input,WS,Follow._WS_in_expression_71796); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS203);


							}
							break;

						}
						} finally { DebugExitSubRule(69); }

						DebugLocation(328, 57);
						char_literal204=(IToken)Match(input,168,Follow._168_in_expression_71799); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_168.Add(char_literal204);



						{
						// AST REWRITE
						// elements: expression_7, expression_list_or_select_command
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 328:61: -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command )
						{
							DebugLocation(328, 64);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:328:64: ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(328, 66);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(328, 78);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_IN, "T_IN"));
							DebugLocation(328, 84);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(328, 97);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:329:4: NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')'
						{
						DebugLocation(329, 4);
						NOT205=(IToken)Match(input,NOT,Follow._NOT_in_expression_71817); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NOT.Add(NOT205);

						DebugLocation(329, 8);
						WS206=(IToken)Match(input,WS,Follow._WS_in_expression_71819); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS206);

						DebugLocation(329, 11);
						IN207=(IToken)Match(input,IN,Follow._IN_in_expression_71821); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_IN.Add(IN207);

						DebugLocation(329, 14);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:329:14: ( WS )?
						int alt70=2;
						try { DebugEnterSubRule(70);
						try { DebugEnterDecision(70, decisionCanBacktrack[70]);
						int LA70_0 = input.LA(1);

						if ((LA70_0==WS))
						{
							alt70 = 1;
						}
						} finally { DebugExitDecision(70); }
						switch (alt70)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:329:14: WS
							{
							DebugLocation(329, 14);
							WS208=(IToken)Match(input,WS,Follow._WS_in_expression_71823); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS208);


							}
							break;

						}
						} finally { DebugExitSubRule(70); }

						DebugLocation(329, 18);
						char_literal209=(IToken)Match(input,167,Follow._167_in_expression_71826); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_167.Add(char_literal209);

						DebugLocation(329, 22);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:329:22: ( WS )?
						int alt71=2;
						try { DebugEnterSubRule(71);
						try { DebugEnterDecision(71, decisionCanBacktrack[71]);
						int LA71_0 = input.LA(1);

						if ((LA71_0==WS))
						{
							alt71 = 1;
						}
						} finally { DebugExitDecision(71); }
						switch (alt71)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:329:22: WS
							{
							DebugLocation(329, 22);
							WS210=(IToken)Match(input,WS,Follow._WS_in_expression_71828); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS210);


							}
							break;

						}
						} finally { DebugExitSubRule(71); }

						DebugLocation(329, 26);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:329:26: ( expression_list_or_select_command )
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:329:27: expression_list_or_select_command
						{
						DebugLocation(329, 27);
						PushFollow(Follow._expression_list_or_select_command_in_expression_71832);
						expression_list_or_select_command211=expression_list_or_select_command();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expression_list_or_select_command.Add(expression_list_or_select_command211.Tree);

						}

						DebugLocation(329, 62);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:329:62: ( WS )?
						int alt72=2;
						try { DebugEnterSubRule(72);
						try { DebugEnterDecision(72, decisionCanBacktrack[72]);
						int LA72_0 = input.LA(1);

						if ((LA72_0==WS))
						{
							alt72 = 1;
						}
						} finally { DebugExitDecision(72); }
						switch (alt72)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:329:62: WS
							{
							DebugLocation(329, 62);
							WS212=(IToken)Match(input,WS,Follow._WS_in_expression_71835); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS212);


							}
							break;

						}
						} finally { DebugExitSubRule(72); }

						DebugLocation(329, 66);
						char_literal213=(IToken)Match(input,168,Follow._168_in_expression_71838); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_168.Add(char_literal213);



						{
						// AST REWRITE
						// elements: expression_list_or_select_command, expression_7
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 329:70: -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command )
						{
							DebugLocation(329, 73);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:329:73: ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(329, 75);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(329, 87);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_NOTIN, "T_NOTIN"));
							DebugLocation(329, 96);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(329, 109);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 4:
						DebugEnterAlt(4);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:330:4: op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')'
						{
						DebugLocation(330, 4);
						PushFollow(Follow._op_4_in_expression_71856);
						op_4214=op_4();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_op_4.Add(op_4214.Tree);
						DebugLocation(330, 9);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:330:9: ( WS )?
						int alt73=2;
						try { DebugEnterSubRule(73);
						try { DebugEnterDecision(73, decisionCanBacktrack[73]);
						int LA73_0 = input.LA(1);

						if ((LA73_0==WS))
						{
							alt73 = 1;
						}
						} finally { DebugExitDecision(73); }
						switch (alt73)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:330:9: WS
							{
							DebugLocation(330, 9);
							WS215=(IToken)Match(input,WS,Follow._WS_in_expression_71858); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS215);


							}
							break;

						}
						} finally { DebugExitSubRule(73); }

						DebugLocation(330, 13);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:330:13: ( SOME | ANY )
						int alt74=2;
						try { DebugEnterSubRule(74);
						try { DebugEnterDecision(74, decisionCanBacktrack[74]);
						int LA74_0 = input.LA(1);

						if ((LA74_0==SOME))
						{
							alt74 = 1;
						}
						else if ((LA74_0==ANY))
						{
							alt74 = 2;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 74, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						} finally { DebugExitDecision(74); }
						switch (alt74)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:330:14: SOME
							{
							DebugLocation(330, 14);
							SOME216=(IToken)Match(input,SOME,Follow._SOME_in_expression_71862); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_SOME.Add(SOME216);


							}
							break;
						case 2:
							DebugEnterAlt(2);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:330:21: ANY
							{
							DebugLocation(330, 21);
							ANY217=(IToken)Match(input,ANY,Follow._ANY_in_expression_71866); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_ANY.Add(ANY217);


							}
							break;

						}
						} finally { DebugExitSubRule(74); }

						DebugLocation(330, 26);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:330:26: ( WS )?
						int alt75=2;
						try { DebugEnterSubRule(75);
						try { DebugEnterDecision(75, decisionCanBacktrack[75]);
						int LA75_0 = input.LA(1);

						if ((LA75_0==WS))
						{
							alt75 = 1;
						}
						} finally { DebugExitDecision(75); }
						switch (alt75)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:330:26: WS
							{
							DebugLocation(330, 26);
							WS218=(IToken)Match(input,WS,Follow._WS_in_expression_71869); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS218);


							}
							break;

						}
						} finally { DebugExitSubRule(75); }

						DebugLocation(330, 30);
						char_literal219=(IToken)Match(input,167,Follow._167_in_expression_71872); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_167.Add(char_literal219);

						DebugLocation(330, 34);
						PushFollow(Follow._expression_list_or_select_command_in_expression_71874);
						expression_list_or_select_command220=expression_list_or_select_command();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expression_list_or_select_command.Add(expression_list_or_select_command220.Tree);
						DebugLocation(330, 68);
						char_literal221=(IToken)Match(input,168,Follow._168_in_expression_71876); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_168.Add(char_literal221);



						{
						// AST REWRITE
						// elements: expression_list_or_select_command, expression_7, op_4
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 330:72: -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command )
						{
							DebugLocation(330, 75);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:330:75: ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(330, 77);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(330, 89);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_ANY, "T_ANY"));
							DebugLocation(330, 95);
							adaptor.AddChild(root_1, stream_op_4.NextTree());
							DebugLocation(330, 101);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(330, 114);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 5:
						DebugEnterAlt(5);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:331:4: op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')'
						{
						DebugLocation(331, 4);
						PushFollow(Follow._op_4_in_expression_71896);
						op_4222=op_4();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_op_4.Add(op_4222.Tree);
						DebugLocation(331, 9);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:331:9: ( WS )?
						int alt76=2;
						try { DebugEnterSubRule(76);
						try { DebugEnterDecision(76, decisionCanBacktrack[76]);
						int LA76_0 = input.LA(1);

						if ((LA76_0==WS))
						{
							alt76 = 1;
						}
						} finally { DebugExitDecision(76); }
						switch (alt76)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:331:9: WS
							{
							DebugLocation(331, 9);
							WS223=(IToken)Match(input,WS,Follow._WS_in_expression_71898); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS223);


							}
							break;

						}
						} finally { DebugExitSubRule(76); }

						DebugLocation(331, 13);
						ALL224=(IToken)Match(input,ALL,Follow._ALL_in_expression_71901); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_ALL.Add(ALL224);

						DebugLocation(331, 17);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:331:17: ( WS )?
						int alt77=2;
						try { DebugEnterSubRule(77);
						try { DebugEnterDecision(77, decisionCanBacktrack[77]);
						int LA77_0 = input.LA(1);

						if ((LA77_0==WS))
						{
							alt77 = 1;
						}
						} finally { DebugExitDecision(77); }
						switch (alt77)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:331:17: WS
							{
							DebugLocation(331, 17);
							WS225=(IToken)Match(input,WS,Follow._WS_in_expression_71903); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS225);


							}
							break;

						}
						} finally { DebugExitSubRule(77); }

						DebugLocation(331, 21);
						char_literal226=(IToken)Match(input,167,Follow._167_in_expression_71906); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_167.Add(char_literal226);

						DebugLocation(331, 25);
						PushFollow(Follow._expression_list_or_select_command_in_expression_71908);
						expression_list_or_select_command227=expression_list_or_select_command();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expression_list_or_select_command.Add(expression_list_or_select_command227.Tree);
						DebugLocation(331, 59);
						char_literal228=(IToken)Match(input,168,Follow._168_in_expression_71910); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_168.Add(char_literal228);



						{
						// AST REWRITE
						// elements: expression_7, expression_list_or_select_command, op_4
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 331:63: -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command )
						{
							DebugLocation(331, 66);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:331:66: ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(331, 68);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(331, 80);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_ALL, "T_ALL"));
							DebugLocation(331, 86);
							adaptor.AddChild(root_1, stream_op_4.NextTree());
							DebugLocation(331, 92);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(331, 105);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;

					}
					} finally { DebugExitSubRule(78); }


					}
					break;

				default:
					goto loop79;
				}
			}

			loop79:
				;

			} finally { DebugExitSubRule(79); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_7", 40);
			LeaveRule("expression_7", 40);
			LeaveRule_expression_7();
	    }
	 	DebugLocation(333, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_7"); }
		return retval;

	}
	// $ANTLR end "expression_7"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_7() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_7() {}

	// $ANTLR start "op_7"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:335:1: op_7 : ( OR -> T_OR | BETWEEN -> T_BETWEEN | NOT WS BETWEEN -> T_NOTBETWEEN );
	[GrammarRule("op_7")]
	private AstParserRuleReturnScope<object, IToken> op_7()
	{
		EnterRule_op_7();
		EnterRule("op_7", 41);
		TraceIn("op_7", 41);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken OR229 = default(IToken);
	    IToken BETWEEN230 = default(IToken);
	    IToken NOT231 = default(IToken);
	    IToken WS232 = default(IToken);
	    IToken BETWEEN233 = default(IToken);

	    object OR229_tree = default(object);
	    object BETWEEN230_tree = default(object);
	    object NOT231_tree = default(object);
	    object WS232_tree = default(object);
	    object BETWEEN233_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");
	    RewriteRuleITokenStream stream_BETWEEN=new RewriteRuleITokenStream(adaptor,"token BETWEEN");
	    RewriteRuleITokenStream stream_OR=new RewriteRuleITokenStream(adaptor,"token OR");

		try { DebugEnterRule(GrammarFileName, "op_7");
		DebugLocation(335, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:335:6: ( OR -> T_OR | BETWEEN -> T_BETWEEN | NOT WS BETWEEN -> T_NOTBETWEEN )
			int alt80=3;
			try { DebugEnterDecision(80, decisionCanBacktrack[80]);
			switch (input.LA(1))
			{
			case OR:
				{
				alt80 = 1;
				}
				break;
			case BETWEEN:
				{
				alt80 = 2;
				}
				break;
			case NOT:
				{
				alt80 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 80, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(80); }
			switch (alt80)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:335:8: OR
				{
				DebugLocation(335, 8);
				OR229=(IToken)Match(input,OR,Follow._OR_in_op_71940); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_OR.Add(OR229);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 335:11: -> T_OR
				{
					DebugLocation(335, 14);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_OR, "T_OR"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:336:4: BETWEEN
				{
				DebugLocation(336, 4);
				BETWEEN230=(IToken)Match(input,BETWEEN,Follow._BETWEEN_in_op_71949); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_BETWEEN.Add(BETWEEN230);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 336:12: -> T_BETWEEN
				{
					DebugLocation(336, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BETWEEN, "T_BETWEEN"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:337:4: NOT WS BETWEEN
				{
				DebugLocation(337, 4);
				NOT231=(IToken)Match(input,NOT,Follow._NOT_in_op_71958); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_NOT.Add(NOT231);

				DebugLocation(337, 8);
				WS232=(IToken)Match(input,WS,Follow._WS_in_op_71960); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS232);

				DebugLocation(337, 11);
				BETWEEN233=(IToken)Match(input,BETWEEN,Follow._BETWEEN_in_op_71962); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_BETWEEN.Add(BETWEEN233);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 337:19: -> T_NOTBETWEEN
				{
					DebugLocation(337, 22);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTBETWEEN, "T_NOTBETWEEN"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_7", 41);
			LeaveRule("op_7", 41);
			LeaveRule_op_7();
	    }
	 	DebugLocation(338, 1);
		} finally { DebugExitRule(GrammarFileName, "op_7"); }
		return retval;

	}
	// $ANTLR end "op_7"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_6() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_6() {}

	// $ANTLR start "expression_6"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:340:1: expression_6 : (a= expression_5 -> $a) ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )* ;
	[GrammarRule("expression_6")]
	private AstParserRuleReturnScope<object, IToken> expression_6()
	{
		EnterRule_expression_6();
		EnterRule("expression_6", 42);
		TraceIn("expression_6", 42);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS234 = default(IToken);
	    IToken WS236 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_6235 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS234_tree = default(object);
	    object WS236_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_op_6=new RewriteRuleSubtreeStream(adaptor,"rule op_6");
	    RewriteRuleSubtreeStream stream_expression_5=new RewriteRuleSubtreeStream(adaptor,"rule expression_5");
		try { DebugEnterRule(GrammarFileName, "expression_6");
		DebugLocation(340, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:341:2: ( (a= expression_5 -> $a) ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:341:4: (a= expression_5 -> $a) ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )*
			{
			DebugLocation(341, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:341:4: (a= expression_5 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:341:5: a= expression_5
			{
			DebugLocation(341, 6);
			PushFollow(Follow._expression_5_in_expression_61981);
			a=expression_5();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression_5.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 341:19: -> $a
			{
				DebugLocation(341, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(341, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:341:25: ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )*
			try { DebugEnterSubRule(81);
			while (true)
			{
				int alt81=2;
				try { DebugEnterDecision(81, decisionCanBacktrack[81]);
				int LA81_0 = input.LA(1);

				if ((LA81_0==WS))
				{
					int LA81_1 = input.LA(2);

					if ((LA81_1==AND))
					{
						alt81 = 1;
					}


				}


				} finally { DebugExitDecision(81); }
				switch ( alt81 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:341:26: WS op_6 WS b= expression_5
					{
					DebugLocation(341, 26);
					WS234=(IToken)Match(input,WS,Follow._WS_in_expression_61988); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS234);

					DebugLocation(341, 29);
					PushFollow(Follow._op_6_in_expression_61990);
					op_6235=op_6();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_op_6.Add(op_6235.Tree);
					DebugLocation(341, 34);
					WS236=(IToken)Match(input,WS,Follow._WS_in_expression_61992); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS236);

					DebugLocation(341, 38);
					PushFollow(Follow._expression_5_in_expression_61996);
					b=expression_5();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expression_5.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, op_6, expression_6
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 341:52: -> ^( T_OP_BINARY op_6 $expression_6 $b)
					{
						DebugLocation(341, 55);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:341:55: ^( T_OP_BINARY op_6 $expression_6 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(341, 57);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(341, 69);
						adaptor.AddChild(root_1, stream_op_6.NextTree());
						DebugLocation(341, 75);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(341, 89);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop81;
				}
			}

			loop81:
				;

			} finally { DebugExitSubRule(81); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_6", 42);
			LeaveRule("expression_6", 42);
			LeaveRule_expression_6();
	    }
	 	DebugLocation(342, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_6"); }
		return retval;

	}
	// $ANTLR end "expression_6"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_6() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_6() {}

	// $ANTLR start "op_6"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:344:1: op_6 : AND -> T_AND ;
	[GrammarRule("op_6")]
	private AstParserRuleReturnScope<object, IToken> op_6()
	{
		EnterRule_op_6();
		EnterRule("op_6", 43);
		TraceIn("op_6", 43);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken AND237 = default(IToken);

	    object AND237_tree = default(object);
	    RewriteRuleITokenStream stream_AND=new RewriteRuleITokenStream(adaptor,"token AND");

		try { DebugEnterRule(GrammarFileName, "op_6");
		DebugLocation(344, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:344:6: ( AND -> T_AND )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:344:8: AND
			{
			DebugLocation(344, 8);
			AND237=(IToken)Match(input,AND,Follow._AND_in_op_62024); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_AND.Add(AND237);



			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 344:12: -> T_AND
			{
				DebugLocation(344, 15);
				adaptor.AddChild(root_0, (object)adaptor.Create(T_AND, "T_AND"));

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_6", 43);
			LeaveRule("op_6", 43);
			LeaveRule_op_6();
	    }
	 	DebugLocation(345, 1);
		} finally { DebugExitRule(GrammarFileName, "op_6"); }
		return retval;

	}
	// $ANTLR end "op_6"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_5() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_5() {}

	// $ANTLR start "expression_5"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:347:1: expression_5 : ( op_5 WS expression_5 -> ^( T_OP_UNARY op_5 expression_5 ) | expression_4 );
	[GrammarRule("expression_5")]
	private AstParserRuleReturnScope<object, IToken> expression_5()
	{
		EnterRule_expression_5();
		EnterRule("expression_5", 44);
		TraceIn("expression_5", 44);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS239 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> op_5238 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_5240 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_4241 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS239_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression_5=new RewriteRuleSubtreeStream(adaptor,"rule expression_5");
	    RewriteRuleSubtreeStream stream_op_5=new RewriteRuleSubtreeStream(adaptor,"rule op_5");
		try { DebugEnterRule(GrammarFileName, "expression_5");
		DebugLocation(347, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:348:2: ( op_5 WS expression_5 -> ^( T_OP_UNARY op_5 expression_5 ) | expression_4 )
			int alt82=2;
			try { DebugEnterDecision(82, decisionCanBacktrack[82]);
			int LA82_0 = input.LA(1);

			if ((LA82_0==NOT))
			{
				alt82 = 1;
			}
			else if (((LA82_0>=CASE && LA82_0<=CAST)||(LA82_0>=CONVERT && LA82_0<=COUNT)||(LA82_0>=DATEADD && LA82_0<=DATEPART)||LA82_0==EXISTS||LA82_0==NUMBER||LA82_0==SIMPLE_FILE||(LA82_0>=STRING && LA82_0<=SYSTEMVAR)||LA82_0==TOKEN||LA82_0==VARIABLE||LA82_0==167||LA82_0==170||LA82_0==172||LA82_0==186))
			{
				alt82 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 82, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(82); }
			switch (alt82)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:348:4: op_5 WS expression_5
				{
				DebugLocation(348, 4);
				PushFollow(Follow._op_5_in_expression_52042);
				op_5238=op_5();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_op_5.Add(op_5238.Tree);
				DebugLocation(348, 9);
				WS239=(IToken)Match(input,WS,Follow._WS_in_expression_52044); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS239);

				DebugLocation(348, 12);
				PushFollow(Follow._expression_5_in_expression_52046);
				expression_5240=expression_5();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression_5.Add(expression_5240.Tree);


				{
				// AST REWRITE
				// elements: expression_5, op_5
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 348:25: -> ^( T_OP_UNARY op_5 expression_5 )
				{
					DebugLocation(348, 28);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:348:28: ^( T_OP_UNARY op_5 expression_5 )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(348, 30);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_UNARY, "T_OP_UNARY"), root_1);

					DebugLocation(348, 41);
					adaptor.AddChild(root_1, stream_op_5.NextTree());
					DebugLocation(348, 46);
					adaptor.AddChild(root_1, stream_expression_5.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:349:4: expression_4
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(349, 4);
				PushFollow(Follow._expression_4_in_expression_52061);
				expression_4241=expression_4();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression_4241.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_5", 44);
			LeaveRule("expression_5", 44);
			LeaveRule_expression_5();
	    }
	 	DebugLocation(350, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_5"); }
		return retval;

	}
	// $ANTLR end "expression_5"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_5() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_5() {}

	// $ANTLR start "op_5"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:352:1: op_5 : NOT -> T_NOT ;
	[GrammarRule("op_5")]
	private AstParserRuleReturnScope<object, IToken> op_5()
	{
		EnterRule_op_5();
		EnterRule("op_5", 45);
		TraceIn("op_5", 45);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken NOT242 = default(IToken);

	    object NOT242_tree = default(object);
	    RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");

		try { DebugEnterRule(GrammarFileName, "op_5");
		DebugLocation(352, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:352:7: ( NOT -> T_NOT )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:352:9: NOT
			{
			DebugLocation(352, 9);
			NOT242=(IToken)Match(input,NOT,Follow._NOT_in_op_52072); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_NOT.Add(NOT242);



			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 352:13: -> T_NOT
			{
				DebugLocation(352, 16);
				adaptor.AddChild(root_0, (object)adaptor.Create(T_NOT, "T_NOT"));

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_5", 45);
			LeaveRule("op_5", 45);
			LeaveRule_op_5();
	    }
	 	DebugLocation(353, 1);
		} finally { DebugExitRule(GrammarFileName, "op_5"); }
		return retval;

	}
	// $ANTLR end "op_5"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_4() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_4() {}

	// $ANTLR start "expression_4"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:355:1: expression_4 : (a= expression_3 -> $a) ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )* ;
	[GrammarRule("expression_4")]
	private AstParserRuleReturnScope<object, IToken> expression_4()
	{
		EnterRule_expression_4();
		EnterRule("expression_4", 46);
		TraceIn("expression_4", 46);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS243 = default(IToken);
	    IToken WS245 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_4244 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS243_tree = default(object);
	    object WS245_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression_3=new RewriteRuleSubtreeStream(adaptor,"rule expression_3");
	    RewriteRuleSubtreeStream stream_op_4=new RewriteRuleSubtreeStream(adaptor,"rule op_4");
		try { DebugEnterRule(GrammarFileName, "expression_4");
		DebugLocation(355, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:356:2: ( (a= expression_3 -> $a) ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:356:4: (a= expression_3 -> $a) ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )*
			{
			DebugLocation(356, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:356:4: (a= expression_3 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:356:5: a= expression_3
			{
			DebugLocation(356, 6);
			PushFollow(Follow._expression_3_in_expression_42091);
			a=expression_3();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression_3.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 356:19: -> $a
			{
				DebugLocation(356, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(356, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:356:25: ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )*
			try { DebugEnterSubRule(85);
			while (true)
			{
				int alt85=2;
				try { DebugEnterDecision(85, decisionCanBacktrack[85]);
				int LA85_0 = input.LA(1);

				if ((LA85_0==WS))
				{
					switch (input.LA(2))
					{
					case NOT:
						{
						int LA85_4 = input.LA(3);

						if ((LA85_4==WS))
						{
							int LA85_16 = input.LA(4);

							if ((LA85_16==LIKE))
							{
								int LA85_18 = input.LA(5);

								if ((LA85_18==WS))
								{
									int LA85_17 = input.LA(6);

									if (((LA85_17>=CASE && LA85_17<=CAST)||(LA85_17>=CONVERT && LA85_17<=COUNT)||(LA85_17>=DATEADD && LA85_17<=DATEPART)||LA85_17==EXISTS||LA85_17==NUMBER||LA85_17==SIMPLE_FILE||(LA85_17>=STRING && LA85_17<=SYSTEMVAR)||LA85_17==TOKEN||LA85_17==VARIABLE||LA85_17==167||LA85_17==170||LA85_17==172||LA85_17==186))
									{
										alt85 = 1;
									}


								}
								else if (((LA85_18>=CASE && LA85_18<=CAST)||(LA85_18>=CONVERT && LA85_18<=COUNT)||(LA85_18>=DATEADD && LA85_18<=DATEPART)||LA85_18==EXISTS||LA85_18==NUMBER||LA85_18==SIMPLE_FILE||(LA85_18>=STRING && LA85_18<=SYSTEMVAR)||LA85_18==TOKEN||LA85_18==VARIABLE||LA85_18==167||LA85_18==170||LA85_18==172||LA85_18==186))
								{
									alt85 = 1;
								}


							}
							else if ((LA85_16==MATCH))
							{
								int LA85_19 = input.LA(5);

								if ((LA85_19==WS))
								{
									int LA85_17 = input.LA(6);

									if (((LA85_17>=CASE && LA85_17<=CAST)||(LA85_17>=CONVERT && LA85_17<=COUNT)||(LA85_17>=DATEADD && LA85_17<=DATEPART)||LA85_17==EXISTS||LA85_17==NUMBER||LA85_17==SIMPLE_FILE||(LA85_17>=STRING && LA85_17<=SYSTEMVAR)||LA85_17==TOKEN||LA85_17==VARIABLE||LA85_17==167||LA85_17==170||LA85_17==172||LA85_17==186))
									{
										alt85 = 1;
									}


								}
								else if (((LA85_19>=CASE && LA85_19<=CAST)||(LA85_19>=CONVERT && LA85_19<=COUNT)||(LA85_19>=DATEADD && LA85_19<=DATEPART)||LA85_19==EXISTS||LA85_19==NUMBER||LA85_19==SIMPLE_FILE||(LA85_19>=STRING && LA85_19<=SYSTEMVAR)||LA85_19==TOKEN||LA85_19==VARIABLE||LA85_19==167||LA85_19==170||LA85_19==172||LA85_19==186))
								{
									alt85 = 1;
								}


							}


						}


						}
						break;
					case 179:
						{
						int LA85_5 = input.LA(3);

						if ((LA85_5==WS))
						{
							int LA85_17 = input.LA(4);

							if (((LA85_17>=CASE && LA85_17<=CAST)||(LA85_17>=CONVERT && LA85_17<=COUNT)||(LA85_17>=DATEADD && LA85_17<=DATEPART)||LA85_17==EXISTS||LA85_17==NUMBER||LA85_17==SIMPLE_FILE||(LA85_17>=STRING && LA85_17<=SYSTEMVAR)||LA85_17==TOKEN||LA85_17==VARIABLE||LA85_17==167||LA85_17==170||LA85_17==172||LA85_17==186))
							{
								alt85 = 1;
							}


						}
						else if (((LA85_5>=CASE && LA85_5<=CAST)||(LA85_5>=CONVERT && LA85_5<=COUNT)||(LA85_5>=DATEADD && LA85_5<=DATEPART)||LA85_5==EXISTS||LA85_5==NUMBER||LA85_5==SIMPLE_FILE||(LA85_5>=STRING && LA85_5<=SYSTEMVAR)||LA85_5==TOKEN||LA85_5==VARIABLE||LA85_5==167||LA85_5==170||LA85_5==172||LA85_5==186))
						{
							alt85 = 1;
						}


						}
						break;
					case 181:
						{
						int LA85_6 = input.LA(3);

						if ((LA85_6==WS))
						{
							int LA85_17 = input.LA(4);

							if (((LA85_17>=CASE && LA85_17<=CAST)||(LA85_17>=CONVERT && LA85_17<=COUNT)||(LA85_17>=DATEADD && LA85_17<=DATEPART)||LA85_17==EXISTS||LA85_17==NUMBER||LA85_17==SIMPLE_FILE||(LA85_17>=STRING && LA85_17<=SYSTEMVAR)||LA85_17==TOKEN||LA85_17==VARIABLE||LA85_17==167||LA85_17==170||LA85_17==172||LA85_17==186))
							{
								alt85 = 1;
							}


						}
						else if (((LA85_6>=CASE && LA85_6<=CAST)||(LA85_6>=CONVERT && LA85_6<=COUNT)||(LA85_6>=DATEADD && LA85_6<=DATEPART)||LA85_6==EXISTS||LA85_6==NUMBER||LA85_6==SIMPLE_FILE||(LA85_6>=STRING && LA85_6<=SYSTEMVAR)||LA85_6==TOKEN||LA85_6==VARIABLE||LA85_6==167||LA85_6==170||LA85_6==172||LA85_6==186))
						{
							alt85 = 1;
						}


						}
						break;
					case 177:
						{
						int LA85_7 = input.LA(3);

						if ((LA85_7==WS))
						{
							int LA85_17 = input.LA(4);

							if (((LA85_17>=CASE && LA85_17<=CAST)||(LA85_17>=CONVERT && LA85_17<=COUNT)||(LA85_17>=DATEADD && LA85_17<=DATEPART)||LA85_17==EXISTS||LA85_17==NUMBER||LA85_17==SIMPLE_FILE||(LA85_17>=STRING && LA85_17<=SYSTEMVAR)||LA85_17==TOKEN||LA85_17==VARIABLE||LA85_17==167||LA85_17==170||LA85_17==172||LA85_17==186))
							{
								alt85 = 1;
							}


						}
						else if (((LA85_7>=CASE && LA85_7<=CAST)||(LA85_7>=CONVERT && LA85_7<=COUNT)||(LA85_7>=DATEADD && LA85_7<=DATEPART)||LA85_7==EXISTS||LA85_7==NUMBER||LA85_7==SIMPLE_FILE||(LA85_7>=STRING && LA85_7<=SYSTEMVAR)||LA85_7==TOKEN||LA85_7==VARIABLE||LA85_7==167||LA85_7==170||LA85_7==172||LA85_7==186))
						{
							alt85 = 1;
						}


						}
						break;
					case 178:
						{
						int LA85_8 = input.LA(3);

						if ((LA85_8==WS))
						{
							int LA85_17 = input.LA(4);

							if (((LA85_17>=CASE && LA85_17<=CAST)||(LA85_17>=CONVERT && LA85_17<=COUNT)||(LA85_17>=DATEADD && LA85_17<=DATEPART)||LA85_17==EXISTS||LA85_17==NUMBER||LA85_17==SIMPLE_FILE||(LA85_17>=STRING && LA85_17<=SYSTEMVAR)||LA85_17==TOKEN||LA85_17==VARIABLE||LA85_17==167||LA85_17==170||LA85_17==172||LA85_17==186))
							{
								alt85 = 1;
							}


						}
						else if (((LA85_8>=CASE && LA85_8<=CAST)||(LA85_8>=CONVERT && LA85_8<=COUNT)||(LA85_8>=DATEADD && LA85_8<=DATEPART)||LA85_8==EXISTS||LA85_8==NUMBER||LA85_8==SIMPLE_FILE||(LA85_8>=STRING && LA85_8<=SYSTEMVAR)||LA85_8==TOKEN||LA85_8==VARIABLE||LA85_8==167||LA85_8==170||LA85_8==172||LA85_8==186))
						{
							alt85 = 1;
						}


						}
						break;
					case 163:
						{
						int LA85_9 = input.LA(3);

						if ((LA85_9==WS))
						{
							int LA85_17 = input.LA(4);

							if (((LA85_17>=CASE && LA85_17<=CAST)||(LA85_17>=CONVERT && LA85_17<=COUNT)||(LA85_17>=DATEADD && LA85_17<=DATEPART)||LA85_17==EXISTS||LA85_17==NUMBER||LA85_17==SIMPLE_FILE||(LA85_17>=STRING && LA85_17<=SYSTEMVAR)||LA85_17==TOKEN||LA85_17==VARIABLE||LA85_17==167||LA85_17==170||LA85_17==172||LA85_17==186))
							{
								alt85 = 1;
							}


						}
						else if (((LA85_9>=CASE && LA85_9<=CAST)||(LA85_9>=CONVERT && LA85_9<=COUNT)||(LA85_9>=DATEADD && LA85_9<=DATEPART)||LA85_9==EXISTS||LA85_9==NUMBER||LA85_9==SIMPLE_FILE||(LA85_9>=STRING && LA85_9<=SYSTEMVAR)||LA85_9==TOKEN||LA85_9==VARIABLE||LA85_9==167||LA85_9==170||LA85_9==172||LA85_9==186))
						{
							alt85 = 1;
						}


						}
						break;
					case 164:
						{
						int LA85_10 = input.LA(3);

						if ((LA85_10==WS))
						{
							int LA85_17 = input.LA(4);

							if (((LA85_17>=CASE && LA85_17<=CAST)||(LA85_17>=CONVERT && LA85_17<=COUNT)||(LA85_17>=DATEADD && LA85_17<=DATEPART)||LA85_17==EXISTS||LA85_17==NUMBER||LA85_17==SIMPLE_FILE||(LA85_17>=STRING && LA85_17<=SYSTEMVAR)||LA85_17==TOKEN||LA85_17==VARIABLE||LA85_17==167||LA85_17==170||LA85_17==172||LA85_17==186))
							{
								alt85 = 1;
							}


						}
						else if (((LA85_10>=CASE && LA85_10<=CAST)||(LA85_10>=CONVERT && LA85_10<=COUNT)||(LA85_10>=DATEADD && LA85_10<=DATEPART)||LA85_10==EXISTS||LA85_10==NUMBER||LA85_10==SIMPLE_FILE||(LA85_10>=STRING && LA85_10<=SYSTEMVAR)||LA85_10==TOKEN||LA85_10==VARIABLE||LA85_10==167||LA85_10==170||LA85_10==172||LA85_10==186))
						{
							alt85 = 1;
						}


						}
						break;
					case 162:
						{
						int LA85_11 = input.LA(3);

						if ((LA85_11==WS))
						{
							int LA85_17 = input.LA(4);

							if (((LA85_17>=CASE && LA85_17<=CAST)||(LA85_17>=CONVERT && LA85_17<=COUNT)||(LA85_17>=DATEADD && LA85_17<=DATEPART)||LA85_17==EXISTS||LA85_17==NUMBER||LA85_17==SIMPLE_FILE||(LA85_17>=STRING && LA85_17<=SYSTEMVAR)||LA85_17==TOKEN||LA85_17==VARIABLE||LA85_17==167||LA85_17==170||LA85_17==172||LA85_17==186))
							{
								alt85 = 1;
							}


						}
						else if (((LA85_11>=CASE && LA85_11<=CAST)||(LA85_11>=CONVERT && LA85_11<=COUNT)||(LA85_11>=DATEADD && LA85_11<=DATEPART)||LA85_11==EXISTS||LA85_11==NUMBER||LA85_11==SIMPLE_FILE||(LA85_11>=STRING && LA85_11<=SYSTEMVAR)||LA85_11==TOKEN||LA85_11==VARIABLE||LA85_11==167||LA85_11==170||LA85_11==172||LA85_11==186))
						{
							alt85 = 1;
						}


						}
						break;
					case 180:
						{
						int LA85_12 = input.LA(3);

						if ((LA85_12==WS))
						{
							int LA85_17 = input.LA(4);

							if (((LA85_17>=CASE && LA85_17<=CAST)||(LA85_17>=CONVERT && LA85_17<=COUNT)||(LA85_17>=DATEADD && LA85_17<=DATEPART)||LA85_17==EXISTS||LA85_17==NUMBER||LA85_17==SIMPLE_FILE||(LA85_17>=STRING && LA85_17<=SYSTEMVAR)||LA85_17==TOKEN||LA85_17==VARIABLE||LA85_17==167||LA85_17==170||LA85_17==172||LA85_17==186))
							{
								alt85 = 1;
							}


						}
						else if (((LA85_12>=CASE && LA85_12<=CAST)||(LA85_12>=CONVERT && LA85_12<=COUNT)||(LA85_12>=DATEADD && LA85_12<=DATEPART)||LA85_12==EXISTS||LA85_12==NUMBER||LA85_12==SIMPLE_FILE||(LA85_12>=STRING && LA85_12<=SYSTEMVAR)||LA85_12==TOKEN||LA85_12==VARIABLE||LA85_12==167||LA85_12==170||LA85_12==172||LA85_12==186))
						{
							alt85 = 1;
						}


						}
						break;
					case 176:
						{
						int LA85_13 = input.LA(3);

						if ((LA85_13==WS))
						{
							int LA85_17 = input.LA(4);

							if (((LA85_17>=CASE && LA85_17<=CAST)||(LA85_17>=CONVERT && LA85_17<=COUNT)||(LA85_17>=DATEADD && LA85_17<=DATEPART)||LA85_17==EXISTS||LA85_17==NUMBER||LA85_17==SIMPLE_FILE||(LA85_17>=STRING && LA85_17<=SYSTEMVAR)||LA85_17==TOKEN||LA85_17==VARIABLE||LA85_17==167||LA85_17==170||LA85_17==172||LA85_17==186))
							{
								alt85 = 1;
							}


						}
						else if (((LA85_13>=CASE && LA85_13<=CAST)||(LA85_13>=CONVERT && LA85_13<=COUNT)||(LA85_13>=DATEADD && LA85_13<=DATEPART)||LA85_13==EXISTS||LA85_13==NUMBER||LA85_13==SIMPLE_FILE||(LA85_13>=STRING && LA85_13<=SYSTEMVAR)||LA85_13==TOKEN||LA85_13==VARIABLE||LA85_13==167||LA85_13==170||LA85_13==172||LA85_13==186))
						{
							alt85 = 1;
						}


						}
						break;
					case LIKE:
						{
						int LA85_14 = input.LA(3);

						if ((LA85_14==WS))
						{
							int LA85_17 = input.LA(4);

							if (((LA85_17>=CASE && LA85_17<=CAST)||(LA85_17>=CONVERT && LA85_17<=COUNT)||(LA85_17>=DATEADD && LA85_17<=DATEPART)||LA85_17==EXISTS||LA85_17==NUMBER||LA85_17==SIMPLE_FILE||(LA85_17>=STRING && LA85_17<=SYSTEMVAR)||LA85_17==TOKEN||LA85_17==VARIABLE||LA85_17==167||LA85_17==170||LA85_17==172||LA85_17==186))
							{
								alt85 = 1;
							}


						}
						else if (((LA85_14>=CASE && LA85_14<=CAST)||(LA85_14>=CONVERT && LA85_14<=COUNT)||(LA85_14>=DATEADD && LA85_14<=DATEPART)||LA85_14==EXISTS||LA85_14==NUMBER||LA85_14==SIMPLE_FILE||(LA85_14>=STRING && LA85_14<=SYSTEMVAR)||LA85_14==TOKEN||LA85_14==VARIABLE||LA85_14==167||LA85_14==170||LA85_14==172||LA85_14==186))
						{
							alt85 = 1;
						}


						}
						break;
					case MATCH:
						{
						int LA85_15 = input.LA(3);

						if ((LA85_15==WS))
						{
							int LA85_17 = input.LA(4);

							if (((LA85_17>=CASE && LA85_17<=CAST)||(LA85_17>=CONVERT && LA85_17<=COUNT)||(LA85_17>=DATEADD && LA85_17<=DATEPART)||LA85_17==EXISTS||LA85_17==NUMBER||LA85_17==SIMPLE_FILE||(LA85_17>=STRING && LA85_17<=SYSTEMVAR)||LA85_17==TOKEN||LA85_17==VARIABLE||LA85_17==167||LA85_17==170||LA85_17==172||LA85_17==186))
							{
								alt85 = 1;
							}


						}
						else if (((LA85_15>=CASE && LA85_15<=CAST)||(LA85_15>=CONVERT && LA85_15<=COUNT)||(LA85_15>=DATEADD && LA85_15<=DATEPART)||LA85_15==EXISTS||LA85_15==NUMBER||LA85_15==SIMPLE_FILE||(LA85_15>=STRING && LA85_15<=SYSTEMVAR)||LA85_15==TOKEN||LA85_15==VARIABLE||LA85_15==167||LA85_15==170||LA85_15==172||LA85_15==186))
						{
							alt85 = 1;
						}


						}
						break;
					}

				}
				else if ((LA85_0==LIKE||LA85_0==MATCH||LA85_0==NOT||(LA85_0>=162 && LA85_0<=164)||(LA85_0>=176 && LA85_0<=181)))
				{
					alt85 = 1;
				}


				} finally { DebugExitDecision(85); }
				switch ( alt85 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:356:26: ( WS )? op_4 ( WS )? b= expression_3
					{
					DebugLocation(356, 26);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:356:26: ( WS )?
					int alt83=2;
					try { DebugEnterSubRule(83);
					try { DebugEnterDecision(83, decisionCanBacktrack[83]);
					int LA83_0 = input.LA(1);

					if ((LA83_0==WS))
					{
						alt83 = 1;
					}
					} finally { DebugExitDecision(83); }
					switch (alt83)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:356:26: WS
						{
						DebugLocation(356, 26);
						WS243=(IToken)Match(input,WS,Follow._WS_in_expression_42098); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS243);


						}
						break;

					}
					} finally { DebugExitSubRule(83); }

					DebugLocation(356, 30);
					PushFollow(Follow._op_4_in_expression_42101);
					op_4244=op_4();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_op_4.Add(op_4244.Tree);
					DebugLocation(356, 35);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:356:35: ( WS )?
					int alt84=2;
					try { DebugEnterSubRule(84);
					try { DebugEnterDecision(84, decisionCanBacktrack[84]);
					int LA84_0 = input.LA(1);

					if ((LA84_0==WS))
					{
						alt84 = 1;
					}
					} finally { DebugExitDecision(84); }
					switch (alt84)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:356:35: WS
						{
						DebugLocation(356, 35);
						WS245=(IToken)Match(input,WS,Follow._WS_in_expression_42103); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS245);


						}
						break;

					}
					} finally { DebugExitSubRule(84); }

					DebugLocation(356, 40);
					PushFollow(Follow._expression_3_in_expression_42108);
					b=expression_3();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expression_3.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, expression_4, op_4
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 356:54: -> ^( T_OP_BINARY op_4 $expression_4 $b)
					{
						DebugLocation(356, 57);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:356:57: ^( T_OP_BINARY op_4 $expression_4 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(356, 59);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(356, 71);
						adaptor.AddChild(root_1, stream_op_4.NextTree());
						DebugLocation(356, 77);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(356, 91);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop85;
				}
			}

			loop85:
				;

			} finally { DebugExitSubRule(85); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_4", 46);
			LeaveRule("expression_4", 46);
			LeaveRule_expression_4();
	    }
	 	DebugLocation(357, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_4"); }
		return retval;

	}
	// $ANTLR end "expression_4"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_4() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_4() {}

	// $ANTLR start "op_4"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:359:1: op_4 : ( '=' -> T_EQUAL | '>=' -> T_NOTLESS | '<=' -> T_NOTGREATER | '<>' -> T_NOTEQUAL | '!=' -> T_NOTEQUAL | '!>' -> T_NOTGREATER | '!<' -> T_NOTLESS | '>' -> T_GREATER | '<' -> T_LESS | LIKE -> T_LIKE | NOT WS LIKE -> T_NOTLIKE | MATCH -> T_MATCH | NOT WS MATCH -> T_NOTMATCH );
	[GrammarRule("op_4")]
	private AstParserRuleReturnScope<object, IToken> op_4()
	{
		EnterRule_op_4();
		EnterRule("op_4", 47);
		TraceIn("op_4", 47);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal246 = default(IToken);
	    IToken string_literal247 = default(IToken);
	    IToken string_literal248 = default(IToken);
	    IToken string_literal249 = default(IToken);
	    IToken string_literal250 = default(IToken);
	    IToken string_literal251 = default(IToken);
	    IToken string_literal252 = default(IToken);
	    IToken char_literal253 = default(IToken);
	    IToken char_literal254 = default(IToken);
	    IToken LIKE255 = default(IToken);
	    IToken NOT256 = default(IToken);
	    IToken WS257 = default(IToken);
	    IToken LIKE258 = default(IToken);
	    IToken MATCH259 = default(IToken);
	    IToken NOT260 = default(IToken);
	    IToken WS261 = default(IToken);
	    IToken MATCH262 = default(IToken);

	    object char_literal246_tree = default(object);
	    object string_literal247_tree = default(object);
	    object string_literal248_tree = default(object);
	    object string_literal249_tree = default(object);
	    object string_literal250_tree = default(object);
	    object string_literal251_tree = default(object);
	    object string_literal252_tree = default(object);
	    object char_literal253_tree = default(object);
	    object char_literal254_tree = default(object);
	    object LIKE255_tree = default(object);
	    object NOT256_tree = default(object);
	    object WS257_tree = default(object);
	    object LIKE258_tree = default(object);
	    object MATCH259_tree = default(object);
	    object NOT260_tree = default(object);
	    object WS261_tree = default(object);
	    object MATCH262_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_179=new RewriteRuleITokenStream(adaptor,"token 179");
	    RewriteRuleITokenStream stream_178=new RewriteRuleITokenStream(adaptor,"token 178");
	    RewriteRuleITokenStream stream_177=new RewriteRuleITokenStream(adaptor,"token 177");
	    RewriteRuleITokenStream stream_176=new RewriteRuleITokenStream(adaptor,"token 176");
	    RewriteRuleITokenStream stream_162=new RewriteRuleITokenStream(adaptor,"token 162");
	    RewriteRuleITokenStream stream_180=new RewriteRuleITokenStream(adaptor,"token 180");
	    RewriteRuleITokenStream stream_181=new RewriteRuleITokenStream(adaptor,"token 181");
	    RewriteRuleITokenStream stream_163=new RewriteRuleITokenStream(adaptor,"token 163");
	    RewriteRuleITokenStream stream_164=new RewriteRuleITokenStream(adaptor,"token 164");
	    RewriteRuleITokenStream stream_MATCH=new RewriteRuleITokenStream(adaptor,"token MATCH");
	    RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");
	    RewriteRuleITokenStream stream_LIKE=new RewriteRuleITokenStream(adaptor,"token LIKE");

		try { DebugEnterRule(GrammarFileName, "op_4");
		DebugLocation(359, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:359:6: ( '=' -> T_EQUAL | '>=' -> T_NOTLESS | '<=' -> T_NOTGREATER | '<>' -> T_NOTEQUAL | '!=' -> T_NOTEQUAL | '!>' -> T_NOTGREATER | '!<' -> T_NOTLESS | '>' -> T_GREATER | '<' -> T_LESS | LIKE -> T_LIKE | NOT WS LIKE -> T_NOTLIKE | MATCH -> T_MATCH | NOT WS MATCH -> T_NOTMATCH )
			int alt86=13;
			try { DebugEnterDecision(86, decisionCanBacktrack[86]);
			switch (input.LA(1))
			{
			case 179:
				{
				alt86 = 1;
				}
				break;
			case 181:
				{
				alt86 = 2;
				}
				break;
			case 177:
				{
				alt86 = 3;
				}
				break;
			case 178:
				{
				alt86 = 4;
				}
				break;
			case 163:
				{
				alt86 = 5;
				}
				break;
			case 164:
				{
				alt86 = 6;
				}
				break;
			case 162:
				{
				alt86 = 7;
				}
				break;
			case 180:
				{
				alt86 = 8;
				}
				break;
			case 176:
				{
				alt86 = 9;
				}
				break;
			case LIKE:
				{
				alt86 = 10;
				}
				break;
			case NOT:
				{
				int LA86_11 = input.LA(2);

				if ((LA86_11==WS))
				{
					int LA86_13 = input.LA(3);

					if ((LA86_13==LIKE))
					{
						alt86 = 11;
					}
					else if ((LA86_13==MATCH))
					{
						alt86 = 13;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 86, 13, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 86, 11, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case MATCH:
				{
				alt86 = 12;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 86, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(86); }
			switch (alt86)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:359:8: '='
				{
				DebugLocation(359, 8);
				char_literal246=(IToken)Match(input,179,Follow._179_in_op_42134); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_179.Add(char_literal246);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 359:12: -> T_EQUAL
				{
					DebugLocation(359, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_EQUAL, "T_EQUAL"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:360:4: '>='
				{
				DebugLocation(360, 4);
				string_literal247=(IToken)Match(input,181,Follow._181_in_op_42143); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_181.Add(string_literal247);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 360:9: -> T_NOTLESS
				{
					DebugLocation(360, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTLESS, "T_NOTLESS"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:361:4: '<='
				{
				DebugLocation(361, 4);
				string_literal248=(IToken)Match(input,177,Follow._177_in_op_42153); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_177.Add(string_literal248);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 361:9: -> T_NOTGREATER
				{
					DebugLocation(361, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTGREATER, "T_NOTGREATER"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:362:4: '<>'
				{
				DebugLocation(362, 4);
				string_literal249=(IToken)Match(input,178,Follow._178_in_op_42163); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_178.Add(string_literal249);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 362:9: -> T_NOTEQUAL
				{
					DebugLocation(362, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTEQUAL, "T_NOTEQUAL"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:363:4: '!='
				{
				DebugLocation(363, 4);
				string_literal250=(IToken)Match(input,163,Follow._163_in_op_42172); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_163.Add(string_literal250);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 363:9: -> T_NOTEQUAL
				{
					DebugLocation(363, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTEQUAL, "T_NOTEQUAL"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:364:4: '!>'
				{
				DebugLocation(364, 4);
				string_literal251=(IToken)Match(input,164,Follow._164_in_op_42181); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_164.Add(string_literal251);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 364:9: -> T_NOTGREATER
				{
					DebugLocation(364, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTGREATER, "T_NOTGREATER"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:365:4: '!<'
				{
				DebugLocation(365, 4);
				string_literal252=(IToken)Match(input,162,Follow._162_in_op_42190); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_162.Add(string_literal252);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 365:9: -> T_NOTLESS
				{
					DebugLocation(365, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTLESS, "T_NOTLESS"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:366:4: '>'
				{
				DebugLocation(366, 4);
				char_literal253=(IToken)Match(input,180,Follow._180_in_op_42199); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_180.Add(char_literal253);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 366:8: -> T_GREATER
				{
					DebugLocation(366, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_GREATER, "T_GREATER"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:367:4: '<'
				{
				DebugLocation(367, 4);
				char_literal254=(IToken)Match(input,176,Follow._176_in_op_42209); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_176.Add(char_literal254);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 367:8: -> T_LESS
				{
					DebugLocation(367, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_LESS, "T_LESS"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:368:4: LIKE
				{
				DebugLocation(368, 4);
				LIKE255=(IToken)Match(input,LIKE,Follow._LIKE_in_op_42218); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LIKE.Add(LIKE255);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 368:9: -> T_LIKE
				{
					DebugLocation(368, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_LIKE, "T_LIKE"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:369:4: NOT WS LIKE
				{
				DebugLocation(369, 4);
				NOT256=(IToken)Match(input,NOT,Follow._NOT_in_op_42227); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_NOT.Add(NOT256);

				DebugLocation(369, 8);
				WS257=(IToken)Match(input,WS,Follow._WS_in_op_42229); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS257);

				DebugLocation(369, 11);
				LIKE258=(IToken)Match(input,LIKE,Follow._LIKE_in_op_42231); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LIKE.Add(LIKE258);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 369:16: -> T_NOTLIKE
				{
					DebugLocation(369, 19);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTLIKE, "T_NOTLIKE"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:370:4: MATCH
				{
				DebugLocation(370, 4);
				MATCH259=(IToken)Match(input,MATCH,Follow._MATCH_in_op_42240); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_MATCH.Add(MATCH259);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 370:10: -> T_MATCH
				{
					DebugLocation(370, 13);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MATCH, "T_MATCH"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:371:4: NOT WS MATCH
				{
				DebugLocation(371, 4);
				NOT260=(IToken)Match(input,NOT,Follow._NOT_in_op_42249); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_NOT.Add(NOT260);

				DebugLocation(371, 8);
				WS261=(IToken)Match(input,WS,Follow._WS_in_op_42251); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS261);

				DebugLocation(371, 11);
				MATCH262=(IToken)Match(input,MATCH,Follow._MATCH_in_op_42253); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_MATCH.Add(MATCH262);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 371:17: -> T_NOTMATCH
				{
					DebugLocation(371, 20);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTMATCH, "T_NOTMATCH"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_4", 47);
			LeaveRule("op_4", 47);
			LeaveRule_op_4();
	    }
	 	DebugLocation(372, 1);
		} finally { DebugExitRule(GrammarFileName, "op_4"); }
		return retval;

	}
	// $ANTLR end "op_4"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_3() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_3() {}

	// $ANTLR start "expression_3"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:374:1: expression_3 : (a= expression_2 -> $a) ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )* ;
	[GrammarRule("expression_3")]
	private AstParserRuleReturnScope<object, IToken> expression_3()
	{
		EnterRule_expression_3();
		EnterRule("expression_3", 48);
		TraceIn("expression_3", 48);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS263 = default(IToken);
	    IToken WS265 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_3264 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS263_tree = default(object);
	    object WS265_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_op_3=new RewriteRuleSubtreeStream(adaptor,"rule op_3");
	    RewriteRuleSubtreeStream stream_expression_2=new RewriteRuleSubtreeStream(adaptor,"rule expression_2");
		try { DebugEnterRule(GrammarFileName, "expression_3");
		DebugLocation(374, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:375:2: ( (a= expression_2 -> $a) ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:375:4: (a= expression_2 -> $a) ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )*
			{
			DebugLocation(375, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:375:4: (a= expression_2 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:375:5: a= expression_2
			{
			DebugLocation(375, 6);
			PushFollow(Follow._expression_2_in_expression_32272);
			a=expression_2();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression_2.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 375:19: -> $a
			{
				DebugLocation(375, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(375, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:375:25: ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )*
			try { DebugEnterSubRule(89);
			while (true)
			{
				int alt89=2;
				try { DebugEnterDecision(89, decisionCanBacktrack[89]);
				int LA89_0 = input.LA(1);

				if ((LA89_0==WS))
				{
					int LA89_1 = input.LA(2);

					if ((LA89_1==166||LA89_1==170||LA89_1==172||(LA89_1>=184 && LA89_1<=185)))
					{
						alt89 = 1;
					}


				}
				else if ((LA89_0==166||LA89_0==170||LA89_0==172||(LA89_0>=184 && LA89_0<=185)))
				{
					alt89 = 1;
				}


				} finally { DebugExitDecision(89); }
				switch ( alt89 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:375:26: ( WS )? op_3 ( WS )? b= expression_2
					{
					DebugLocation(375, 26);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:375:26: ( WS )?
					int alt87=2;
					try { DebugEnterSubRule(87);
					try { DebugEnterDecision(87, decisionCanBacktrack[87]);
					int LA87_0 = input.LA(1);

					if ((LA87_0==WS))
					{
						alt87 = 1;
					}
					} finally { DebugExitDecision(87); }
					switch (alt87)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:375:26: WS
						{
						DebugLocation(375, 26);
						WS263=(IToken)Match(input,WS,Follow._WS_in_expression_32279); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS263);


						}
						break;

					}
					} finally { DebugExitSubRule(87); }

					DebugLocation(375, 30);
					PushFollow(Follow._op_3_in_expression_32282);
					op_3264=op_3();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_op_3.Add(op_3264.Tree);
					DebugLocation(375, 35);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:375:35: ( WS )?
					int alt88=2;
					try { DebugEnterSubRule(88);
					try { DebugEnterDecision(88, decisionCanBacktrack[88]);
					int LA88_0 = input.LA(1);

					if ((LA88_0==WS))
					{
						alt88 = 1;
					}
					} finally { DebugExitDecision(88); }
					switch (alt88)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:375:35: WS
						{
						DebugLocation(375, 35);
						WS265=(IToken)Match(input,WS,Follow._WS_in_expression_32284); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS265);


						}
						break;

					}
					} finally { DebugExitSubRule(88); }

					DebugLocation(375, 40);
					PushFollow(Follow._expression_2_in_expression_32289);
					b=expression_2();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expression_2.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, op_3, expression_3
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 375:54: -> ^( T_OP_BINARY op_3 $expression_3 $b)
					{
						DebugLocation(375, 57);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:375:57: ^( T_OP_BINARY op_3 $expression_3 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(375, 59);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(375, 71);
						adaptor.AddChild(root_1, stream_op_3.NextTree());
						DebugLocation(375, 77);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(375, 91);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop89;
				}
			}

			loop89:
				;

			} finally { DebugExitSubRule(89); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_3", 48);
			LeaveRule("expression_3", 48);
			LeaveRule_expression_3();
	    }
	 	DebugLocation(376, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_3"); }
		return retval;

	}
	// $ANTLR end "expression_3"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_3() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_3() {}

	// $ANTLR start "op_3"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:378:1: op_3 : ( '+' -> T_PLUS | '-' -> T_MINUS | '&' -> T_BITWISE_AND | '|' -> T_BITWISE_OR | '^' -> T_BITWISE_XOR );
	[GrammarRule("op_3")]
	private AstParserRuleReturnScope<object, IToken> op_3()
	{
		EnterRule_op_3();
		EnterRule("op_3", 49);
		TraceIn("op_3", 49);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal266 = default(IToken);
	    IToken char_literal267 = default(IToken);
	    IToken char_literal268 = default(IToken);
	    IToken char_literal269 = default(IToken);
	    IToken char_literal270 = default(IToken);

	    object char_literal266_tree = default(object);
	    object char_literal267_tree = default(object);
	    object char_literal268_tree = default(object);
	    object char_literal269_tree = default(object);
	    object char_literal270_tree = default(object);
	    RewriteRuleITokenStream stream_170=new RewriteRuleITokenStream(adaptor,"token 170");
	    RewriteRuleITokenStream stream_184=new RewriteRuleITokenStream(adaptor,"token 184");
	    RewriteRuleITokenStream stream_185=new RewriteRuleITokenStream(adaptor,"token 185");
	    RewriteRuleITokenStream stream_172=new RewriteRuleITokenStream(adaptor,"token 172");
	    RewriteRuleITokenStream stream_166=new RewriteRuleITokenStream(adaptor,"token 166");

		try { DebugEnterRule(GrammarFileName, "op_3");
		DebugLocation(378, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:378:6: ( '+' -> T_PLUS | '-' -> T_MINUS | '&' -> T_BITWISE_AND | '|' -> T_BITWISE_OR | '^' -> T_BITWISE_XOR )
			int alt90=5;
			try { DebugEnterDecision(90, decisionCanBacktrack[90]);
			switch (input.LA(1))
			{
			case 170:
				{
				alt90 = 1;
				}
				break;
			case 172:
				{
				alt90 = 2;
				}
				break;
			case 166:
				{
				alt90 = 3;
				}
				break;
			case 185:
				{
				alt90 = 4;
				}
				break;
			case 184:
				{
				alt90 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 90, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(90); }
			switch (alt90)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:378:8: '+'
				{
				DebugLocation(378, 8);
				char_literal266=(IToken)Match(input,170,Follow._170_in_op_32315); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_170.Add(char_literal266);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 378:12: -> T_PLUS
				{
					DebugLocation(378, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_PLUS, "T_PLUS"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:379:4: '-'
				{
				DebugLocation(379, 4);
				char_literal267=(IToken)Match(input,172,Follow._172_in_op_32324); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_172.Add(char_literal267);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 379:8: -> T_MINUS
				{
					DebugLocation(379, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MINUS, "T_MINUS"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:380:4: '&'
				{
				DebugLocation(380, 4);
				char_literal268=(IToken)Match(input,166,Follow._166_in_op_32333); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_166.Add(char_literal268);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 380:8: -> T_BITWISE_AND
				{
					DebugLocation(380, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_AND, "T_BITWISE_AND"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:381:4: '|'
				{
				DebugLocation(381, 4);
				char_literal269=(IToken)Match(input,185,Follow._185_in_op_32342); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_185.Add(char_literal269);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 381:8: -> T_BITWISE_OR
				{
					DebugLocation(381, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_OR, "T_BITWISE_OR"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:382:4: '^'
				{
				DebugLocation(382, 4);
				char_literal270=(IToken)Match(input,184,Follow._184_in_op_32351); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_184.Add(char_literal270);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 382:8: -> T_BITWISE_XOR
				{
					DebugLocation(382, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_XOR, "T_BITWISE_XOR"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_3", 49);
			LeaveRule("op_3", 49);
			LeaveRule_op_3();
	    }
	 	DebugLocation(383, 1);
		} finally { DebugExitRule(GrammarFileName, "op_3"); }
		return retval;

	}
	// $ANTLR end "op_3"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_2() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_2() {}

	// $ANTLR start "expression_2"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:385:1: expression_2 : (a= expression_1 -> $a) ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )* ;
	[GrammarRule("expression_2")]
	private AstParserRuleReturnScope<object, IToken> expression_2()
	{
		EnterRule_expression_2();
		EnterRule("expression_2", 50);
		TraceIn("expression_2", 50);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS271 = default(IToken);
	    IToken WS273 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_2272 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS271_tree = default(object);
	    object WS273_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_op_2=new RewriteRuleSubtreeStream(adaptor,"rule op_2");
	    RewriteRuleSubtreeStream stream_expression_1=new RewriteRuleSubtreeStream(adaptor,"rule expression_1");
		try { DebugEnterRule(GrammarFileName, "expression_2");
		DebugLocation(385, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:386:2: ( (a= expression_1 -> $a) ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:386:4: (a= expression_1 -> $a) ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )*
			{
			DebugLocation(386, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:386:4: (a= expression_1 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:386:5: a= expression_1
			{
			DebugLocation(386, 6);
			PushFollow(Follow._expression_1_in_expression_22371);
			a=expression_1();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression_1.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 386:19: -> $a
			{
				DebugLocation(386, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(386, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:386:25: ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )*
			try { DebugEnterSubRule(93);
			while (true)
			{
				int alt93=2;
				try { DebugEnterDecision(93, decisionCanBacktrack[93]);
				int LA93_0 = input.LA(1);

				if ((LA93_0==WS))
				{
					int LA93_1 = input.LA(2);

					if ((LA93_1==165||LA93_1==169||LA93_1==174))
					{
						alt93 = 1;
					}


				}
				else if ((LA93_0==165||LA93_0==169||LA93_0==174))
				{
					alt93 = 1;
				}


				} finally { DebugExitDecision(93); }
				switch ( alt93 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:386:26: ( WS )? op_2 ( WS )? b= expression_1
					{
					DebugLocation(386, 26);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:386:26: ( WS )?
					int alt91=2;
					try { DebugEnterSubRule(91);
					try { DebugEnterDecision(91, decisionCanBacktrack[91]);
					int LA91_0 = input.LA(1);

					if ((LA91_0==WS))
					{
						alt91 = 1;
					}
					} finally { DebugExitDecision(91); }
					switch (alt91)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:386:26: WS
						{
						DebugLocation(386, 26);
						WS271=(IToken)Match(input,WS,Follow._WS_in_expression_22378); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS271);


						}
						break;

					}
					} finally { DebugExitSubRule(91); }

					DebugLocation(386, 30);
					PushFollow(Follow._op_2_in_expression_22381);
					op_2272=op_2();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_op_2.Add(op_2272.Tree);
					DebugLocation(386, 35);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:386:35: ( WS )?
					int alt92=2;
					try { DebugEnterSubRule(92);
					try { DebugEnterDecision(92, decisionCanBacktrack[92]);
					int LA92_0 = input.LA(1);

					if ((LA92_0==WS))
					{
						alt92 = 1;
					}
					} finally { DebugExitDecision(92); }
					switch (alt92)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:386:35: WS
						{
						DebugLocation(386, 35);
						WS273=(IToken)Match(input,WS,Follow._WS_in_expression_22383); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS273);


						}
						break;

					}
					} finally { DebugExitSubRule(92); }

					DebugLocation(386, 40);
					PushFollow(Follow._expression_1_in_expression_22388);
					b=expression_1();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expression_1.Add(b.Tree);


					{
					// AST REWRITE
					// elements: expression_2, op_2, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 386:54: -> ^( T_OP_BINARY op_2 $expression_2 $b)
					{
						DebugLocation(386, 57);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:386:57: ^( T_OP_BINARY op_2 $expression_2 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(386, 59);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(386, 71);
						adaptor.AddChild(root_1, stream_op_2.NextTree());
						DebugLocation(386, 77);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(386, 91);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop93;
				}
			}

			loop93:
				;

			} finally { DebugExitSubRule(93); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_2", 50);
			LeaveRule("expression_2", 50);
			LeaveRule_expression_2();
	    }
	 	DebugLocation(387, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_2"); }
		return retval;

	}
	// $ANTLR end "expression_2"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_2() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_2() {}

	// $ANTLR start "op_2"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:389:1: op_2 : ( '*' -> T_PRODUCT | '/' -> T_DIVIDE | '%' -> T_MODULO );
	[GrammarRule("op_2")]
	private AstParserRuleReturnScope<object, IToken> op_2()
	{
		EnterRule_op_2();
		EnterRule("op_2", 51);
		TraceIn("op_2", 51);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal274 = default(IToken);
	    IToken char_literal275 = default(IToken);
	    IToken char_literal276 = default(IToken);

	    object char_literal274_tree = default(object);
	    object char_literal275_tree = default(object);
	    object char_literal276_tree = default(object);
	    RewriteRuleITokenStream stream_174=new RewriteRuleITokenStream(adaptor,"token 174");
	    RewriteRuleITokenStream stream_169=new RewriteRuleITokenStream(adaptor,"token 169");
	    RewriteRuleITokenStream stream_165=new RewriteRuleITokenStream(adaptor,"token 165");

		try { DebugEnterRule(GrammarFileName, "op_2");
		DebugLocation(389, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:389:6: ( '*' -> T_PRODUCT | '/' -> T_DIVIDE | '%' -> T_MODULO )
			int alt94=3;
			try { DebugEnterDecision(94, decisionCanBacktrack[94]);
			switch (input.LA(1))
			{
			case 169:
				{
				alt94 = 1;
				}
				break;
			case 174:
				{
				alt94 = 2;
				}
				break;
			case 165:
				{
				alt94 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 94, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(94); }
			switch (alt94)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:389:8: '*'
				{
				DebugLocation(389, 8);
				char_literal274=(IToken)Match(input,169,Follow._169_in_op_22414); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_169.Add(char_literal274);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 389:12: -> T_PRODUCT
				{
					DebugLocation(389, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_PRODUCT, "T_PRODUCT"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:390:4: '/'
				{
				DebugLocation(390, 4);
				char_literal275=(IToken)Match(input,174,Follow._174_in_op_22423); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_174.Add(char_literal275);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 390:8: -> T_DIVIDE
				{
					DebugLocation(390, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_DIVIDE, "T_DIVIDE"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:391:4: '%'
				{
				DebugLocation(391, 4);
				char_literal276=(IToken)Match(input,165,Follow._165_in_op_22432); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_165.Add(char_literal276);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 391:8: -> T_MODULO
				{
					DebugLocation(391, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MODULO, "T_MODULO"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_2", 51);
			LeaveRule("op_2", 51);
			LeaveRule_op_2();
	    }
	 	DebugLocation(392, 1);
		} finally { DebugExitRule(GrammarFileName, "op_2"); }
		return retval;

	}
	// $ANTLR end "op_2"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_1() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_1() {}

	// $ANTLR start "expression_1"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:394:1: expression_1 : ( op_1 ( WS )? expression_1 -> ^( T_OP_UNARY op_1 expression_1 ) | expression_atom );
	[GrammarRule("expression_1")]
	private AstParserRuleReturnScope<object, IToken> expression_1()
	{
		EnterRule_expression_1();
		EnterRule("expression_1", 52);
		TraceIn("expression_1", 52);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS278 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> op_1277 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_1279 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_atom280 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS278_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression_1=new RewriteRuleSubtreeStream(adaptor,"rule expression_1");
	    RewriteRuleSubtreeStream stream_op_1=new RewriteRuleSubtreeStream(adaptor,"rule op_1");
		try { DebugEnterRule(GrammarFileName, "expression_1");
		DebugLocation(394, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:395:2: ( op_1 ( WS )? expression_1 -> ^( T_OP_UNARY op_1 expression_1 ) | expression_atom )
			int alt96=2;
			try { DebugEnterDecision(96, decisionCanBacktrack[96]);
			int LA96_0 = input.LA(1);

			if ((LA96_0==170||LA96_0==172||LA96_0==186))
			{
				alt96 = 1;
			}
			else if (((LA96_0>=CASE && LA96_0<=CAST)||(LA96_0>=CONVERT && LA96_0<=COUNT)||(LA96_0>=DATEADD && LA96_0<=DATEPART)||LA96_0==EXISTS||LA96_0==NUMBER||LA96_0==SIMPLE_FILE||(LA96_0>=STRING && LA96_0<=SYSTEMVAR)||LA96_0==TOKEN||LA96_0==VARIABLE||LA96_0==167))
			{
				alt96 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 96, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(96); }
			switch (alt96)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:395:4: op_1 ( WS )? expression_1
				{
				DebugLocation(395, 4);
				PushFollow(Follow._op_1_in_expression_12448);
				op_1277=op_1();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_op_1.Add(op_1277.Tree);
				DebugLocation(395, 9);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:395:9: ( WS )?
				int alt95=2;
				try { DebugEnterSubRule(95);
				try { DebugEnterDecision(95, decisionCanBacktrack[95]);
				int LA95_0 = input.LA(1);

				if ((LA95_0==WS))
				{
					alt95 = 1;
				}
				} finally { DebugExitDecision(95); }
				switch (alt95)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:395:9: WS
					{
					DebugLocation(395, 9);
					WS278=(IToken)Match(input,WS,Follow._WS_in_expression_12450); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS278);


					}
					break;

				}
				} finally { DebugExitSubRule(95); }

				DebugLocation(395, 13);
				PushFollow(Follow._expression_1_in_expression_12453);
				expression_1279=expression_1();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression_1.Add(expression_1279.Tree);


				{
				// AST REWRITE
				// elements: op_1, expression_1
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 395:26: -> ^( T_OP_UNARY op_1 expression_1 )
				{
					DebugLocation(395, 29);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:395:29: ^( T_OP_UNARY op_1 expression_1 )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(395, 31);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_UNARY, "T_OP_UNARY"), root_1);

					DebugLocation(395, 42);
					adaptor.AddChild(root_1, stream_op_1.NextTree());
					DebugLocation(395, 47);
					adaptor.AddChild(root_1, stream_expression_1.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:396:4: expression_atom
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(396, 4);
				PushFollow(Follow._expression_atom_in_expression_12468);
				expression_atom280=expression_atom();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression_atom280.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_1", 52);
			LeaveRule("expression_1", 52);
			LeaveRule_expression_1();
	    }
	 	DebugLocation(397, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_1"); }
		return retval;

	}
	// $ANTLR end "expression_1"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_1() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_1() {}

	// $ANTLR start "op_1"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:399:1: op_1 : ( '~' -> T_BITWISE_NOT | '+' -> T_PLUS | '-' -> T_MINUS );
	[GrammarRule("op_1")]
	private AstParserRuleReturnScope<object, IToken> op_1()
	{
		EnterRule_op_1();
		EnterRule("op_1", 53);
		TraceIn("op_1", 53);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal281 = default(IToken);
	    IToken char_literal282 = default(IToken);
	    IToken char_literal283 = default(IToken);

	    object char_literal281_tree = default(object);
	    object char_literal282_tree = default(object);
	    object char_literal283_tree = default(object);
	    RewriteRuleITokenStream stream_170=new RewriteRuleITokenStream(adaptor,"token 170");
	    RewriteRuleITokenStream stream_172=new RewriteRuleITokenStream(adaptor,"token 172");
	    RewriteRuleITokenStream stream_186=new RewriteRuleITokenStream(adaptor,"token 186");

		try { DebugEnterRule(GrammarFileName, "op_1");
		DebugLocation(399, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:399:6: ( '~' -> T_BITWISE_NOT | '+' -> T_PLUS | '-' -> T_MINUS )
			int alt97=3;
			try { DebugEnterDecision(97, decisionCanBacktrack[97]);
			switch (input.LA(1))
			{
			case 186:
				{
				alt97 = 1;
				}
				break;
			case 170:
				{
				alt97 = 2;
				}
				break;
			case 172:
				{
				alt97 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 97, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(97); }
			switch (alt97)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:399:8: '~'
				{
				DebugLocation(399, 8);
				char_literal281=(IToken)Match(input,186,Follow._186_in_op_12478); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_186.Add(char_literal281);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 399:12: -> T_BITWISE_NOT
				{
					DebugLocation(399, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_NOT, "T_BITWISE_NOT"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:400:5: '+'
				{
				DebugLocation(400, 5);
				char_literal282=(IToken)Match(input,170,Follow._170_in_op_12488); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_170.Add(char_literal282);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 400:9: -> T_PLUS
				{
					DebugLocation(400, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_PLUS, "T_PLUS"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:401:4: '-'
				{
				DebugLocation(401, 4);
				char_literal283=(IToken)Match(input,172,Follow._172_in_op_12497); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_172.Add(char_literal283);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 401:8: -> T_MINUS
				{
					DebugLocation(401, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MINUS, "T_MINUS"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_1", 53);
			LeaveRule("op_1", 53);
			LeaveRule_op_1();
	    }
	 	DebugLocation(402, 1);
		} finally { DebugExitRule(GrammarFileName, "op_1"); }
		return retval;

	}
	// $ANTLR end "op_1"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_atom() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_atom() {}

	// $ANTLR start "expression_atom"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:404:1: expression_atom : ( number -> ^( T_INTEGER number ) | string | SYSTEMVAR -> ^( T_SYSTEMVAR SYSTEMVAR ) | variable | ( subquery )=> subquery | '(' expression ')' -> expression | functioncall_or_column | specialfunctioncall | case | EXISTS ( WS )? '(' ( WS )? select_command ( WS )? ')' -> ^( T_EXISTS select_command ) );
	[GrammarRule("expression_atom")]
	private AstParserRuleReturnScope<object, IToken> expression_atom()
	{
		EnterRule_expression_atom();
		EnterRule("expression_atom", 54);
		TraceIn("expression_atom", 54);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken SYSTEMVAR286 = default(IToken);
	    IToken char_literal289 = default(IToken);
	    IToken char_literal291 = default(IToken);
	    IToken EXISTS295 = default(IToken);
	    IToken WS296 = default(IToken);
	    IToken char_literal297 = default(IToken);
	    IToken WS298 = default(IToken);
	    IToken WS300 = default(IToken);
	    IToken char_literal301 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> number284 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> string285 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> variable287 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> subquery288 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression290 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> functioncall_or_column292 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> specialfunctioncall293 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> case294 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> select_command299 = default(AstParserRuleReturnScope<object, IToken>);

	    object SYSTEMVAR286_tree = default(object);
	    object char_literal289_tree = default(object);
	    object char_literal291_tree = default(object);
	    object EXISTS295_tree = default(object);
	    object WS296_tree = default(object);
	    object char_literal297_tree = default(object);
	    object WS298_tree = default(object);
	    object WS300_tree = default(object);
	    object char_literal301_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_EXISTS=new RewriteRuleITokenStream(adaptor,"token EXISTS");
	    RewriteRuleITokenStream stream_SYSTEMVAR=new RewriteRuleITokenStream(adaptor,"token SYSTEMVAR");
	    RewriteRuleITokenStream stream_168=new RewriteRuleITokenStream(adaptor,"token 168");
	    RewriteRuleITokenStream stream_167=new RewriteRuleITokenStream(adaptor,"token 167");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_select_command=new RewriteRuleSubtreeStream(adaptor,"rule select_command");
	    RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
		try { DebugEnterRule(GrammarFileName, "expression_atom");
		DebugLocation(404, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:405:2: ( number -> ^( T_INTEGER number ) | string | SYSTEMVAR -> ^( T_SYSTEMVAR SYSTEMVAR ) | variable | ( subquery )=> subquery | '(' expression ')' -> expression | functioncall_or_column | specialfunctioncall | case | EXISTS ( WS )? '(' ( WS )? select_command ( WS )? ')' -> ^( T_EXISTS select_command ) )
			int alt101=10;
			try { DebugEnterDecision(101, decisionCanBacktrack[101]);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt101 = 1;
				}
				break;
			case STRING:
				{
				alt101 = 2;
				}
				break;
			case SYSTEMVAR:
				{
				alt101 = 3;
				}
				break;
			case VARIABLE:
				{
				alt101 = 4;
				}
				break;
			case 167:
				{
				int LA101_5 = input.LA(2);

				if ((EvaluatePredicate(synpred3_gql_fragment)))
				{
					alt101 = 5;
				}
				else if ((true))
				{
					alt101 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 5, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case COUNT:
			case SIMPLE_FILE:
			case TOKEN:
				{
				alt101 = 7;
				}
				break;
			case CAST:
			case CONVERT:
			case DATEADD:
			case DATEDIFF:
			case DATEPART:
				{
				alt101 = 8;
				}
				break;
			case CASE:
				{
				alt101 = 9;
				}
				break;
			case EXISTS:
				{
				alt101 = 10;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(101); }
			switch (alt101)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:405:4: number
				{
				DebugLocation(405, 4);
				PushFollow(Follow._number_in_expression_atom2512);
				number284=number();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_number.Add(number284.Tree);


				{
				// AST REWRITE
				// elements: number
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 405:11: -> ^( T_INTEGER number )
				{
					DebugLocation(405, 14);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:405:14: ^( T_INTEGER number )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(405, 16);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_INTEGER, "T_INTEGER"), root_1);

					DebugLocation(405, 26);
					adaptor.AddChild(root_1, stream_number.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:406:4: string
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(406, 4);
				PushFollow(Follow._string_in_expression_atom2525);
				string285=@string();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, string285.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:407:4: SYSTEMVAR
				{
				DebugLocation(407, 4);
				SYSTEMVAR286=(IToken)Match(input,SYSTEMVAR,Follow._SYSTEMVAR_in_expression_atom2530); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SYSTEMVAR.Add(SYSTEMVAR286);



				{
				// AST REWRITE
				// elements: SYSTEMVAR
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 407:14: -> ^( T_SYSTEMVAR SYSTEMVAR )
				{
					DebugLocation(407, 17);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:407:17: ^( T_SYSTEMVAR SYSTEMVAR )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(407, 19);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SYSTEMVAR, "T_SYSTEMVAR"), root_1);

					DebugLocation(407, 31);
					adaptor.AddChild(root_1, stream_SYSTEMVAR.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:408:4: variable
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(408, 4);
				PushFollow(Follow._variable_in_expression_atom2543);
				variable287=variable();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variable287.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:409:4: ( subquery )=> subquery
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(409, 18);
				PushFollow(Follow._subquery_in_expression_atom2554);
				subquery288=subquery();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, subquery288.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:410:4: '(' expression ')'
				{
				DebugLocation(410, 4);
				char_literal289=(IToken)Match(input,167,Follow._167_in_expression_atom2559); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_167.Add(char_literal289);

				DebugLocation(410, 8);
				PushFollow(Follow._expression_in_expression_atom2561);
				expression290=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression290.Tree);
				DebugLocation(410, 19);
				char_literal291=(IToken)Match(input,168,Follow._168_in_expression_atom2563); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_168.Add(char_literal291);



				{
				// AST REWRITE
				// elements: expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 410:23: -> expression
				{
					DebugLocation(410, 26);
					adaptor.AddChild(root_0, stream_expression.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:411:4: functioncall_or_column
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(411, 4);
				PushFollow(Follow._functioncall_or_column_in_expression_atom2572);
				functioncall_or_column292=functioncall_or_column();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, functioncall_or_column292.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:412:4: specialfunctioncall
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(412, 4);
				PushFollow(Follow._specialfunctioncall_in_expression_atom2577);
				specialfunctioncall293=specialfunctioncall();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, specialfunctioncall293.Tree);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:413:4: case
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(413, 4);
				PushFollow(Follow._case_in_expression_atom2582);
				case294=@case();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, case294.Tree);

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:414:4: EXISTS ( WS )? '(' ( WS )? select_command ( WS )? ')'
				{
				DebugLocation(414, 4);
				EXISTS295=(IToken)Match(input,EXISTS,Follow._EXISTS_in_expression_atom2587); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_EXISTS.Add(EXISTS295);

				DebugLocation(414, 11);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:414:11: ( WS )?
				int alt98=2;
				try { DebugEnterSubRule(98);
				try { DebugEnterDecision(98, decisionCanBacktrack[98]);
				int LA98_0 = input.LA(1);

				if ((LA98_0==WS))
				{
					alt98 = 1;
				}
				} finally { DebugExitDecision(98); }
				switch (alt98)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:414:11: WS
					{
					DebugLocation(414, 11);
					WS296=(IToken)Match(input,WS,Follow._WS_in_expression_atom2589); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS296);


					}
					break;

				}
				} finally { DebugExitSubRule(98); }

				DebugLocation(414, 15);
				char_literal297=(IToken)Match(input,167,Follow._167_in_expression_atom2592); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_167.Add(char_literal297);

				DebugLocation(414, 19);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:414:19: ( WS )?
				int alt99=2;
				try { DebugEnterSubRule(99);
				try { DebugEnterDecision(99, decisionCanBacktrack[99]);
				int LA99_0 = input.LA(1);

				if ((LA99_0==WS))
				{
					alt99 = 1;
				}
				} finally { DebugExitDecision(99); }
				switch (alt99)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:414:19: WS
					{
					DebugLocation(414, 19);
					WS298=(IToken)Match(input,WS,Follow._WS_in_expression_atom2594); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS298);


					}
					break;

				}
				} finally { DebugExitSubRule(99); }

				DebugLocation(414, 23);
				PushFollow(Follow._select_command_in_expression_atom2597);
				select_command299=select_command();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_select_command.Add(select_command299.Tree);
				DebugLocation(414, 38);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:414:38: ( WS )?
				int alt100=2;
				try { DebugEnterSubRule(100);
				try { DebugEnterDecision(100, decisionCanBacktrack[100]);
				int LA100_0 = input.LA(1);

				if ((LA100_0==WS))
				{
					alt100 = 1;
				}
				} finally { DebugExitDecision(100); }
				switch (alt100)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:414:38: WS
					{
					DebugLocation(414, 38);
					WS300=(IToken)Match(input,WS,Follow._WS_in_expression_atom2599); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS300);


					}
					break;

				}
				} finally { DebugExitSubRule(100); }

				DebugLocation(414, 42);
				char_literal301=(IToken)Match(input,168,Follow._168_in_expression_atom2602); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_168.Add(char_literal301);



				{
				// AST REWRITE
				// elements: select_command
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 414:46: -> ^( T_EXISTS select_command )
				{
					DebugLocation(414, 49);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:414:49: ^( T_EXISTS select_command )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(414, 51);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_EXISTS, "T_EXISTS"), root_1);

					DebugLocation(414, 60);
					adaptor.AddChild(root_1, stream_select_command.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_atom", 54);
			LeaveRule("expression_atom", 54);
			LeaveRule_expression_atom();
	    }
	 	DebugLocation(415, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_atom"); }
		return retval;

	}
	// $ANTLR end "expression_atom"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_functioncall_or_column() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_functioncall_or_column() {}

	// $ANTLR start "functioncall_or_column"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:418:1: functioncall_or_column : ( TOKEN ( WS )? '(' ( WS )? ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )? ')' -> ^( T_FUNCTIONCALL TOKEN ( expression )* ) | COUNT ( WS )? '(' ( WS )? expression ( WS )? ')' -> ^( T_FUNCTIONCALL T_COUNT expression ) | COUNT ( WS )? '(' ( WS )? DISTINCT WS expression ( WS )? ')' -> ^( T_FUNCTIONCALL T_DISTINCTCOUNT expression ) | COUNT ( WS )? '(' ( WS )? all_columns ( WS )? ')' -> ^( T_FUNCTIONCALL T_COUNT all_columns ) | COUNT ( WS )? '(' ( WS )? DISTINCT WS all_columns ( WS )? ')' -> ^( T_FUNCTIONCALL T_DISTINCTCOUNT all_columns ) | ( table_alias ( WS )? '.' ( WS )? )? column_name -> ^( T_COLUMN column_name ( table_alias )? ) );
	[GrammarRule("functioncall_or_column")]
	private AstParserRuleReturnScope<object, IToken> functioncall_or_column()
	{
		EnterRule_functioncall_or_column();
		EnterRule("functioncall_or_column", 55);
		TraceIn("functioncall_or_column", 55);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN302 = default(IToken);
	    IToken WS303 = default(IToken);
	    IToken char_literal304 = default(IToken);
	    IToken WS305 = default(IToken);
	    IToken WS307 = default(IToken);
	    IToken char_literal308 = default(IToken);
	    IToken WS309 = default(IToken);
	    IToken WS311 = default(IToken);
	    IToken char_literal312 = default(IToken);
	    IToken COUNT313 = default(IToken);
	    IToken WS314 = default(IToken);
	    IToken char_literal315 = default(IToken);
	    IToken WS316 = default(IToken);
	    IToken WS318 = default(IToken);
	    IToken char_literal319 = default(IToken);
	    IToken COUNT320 = default(IToken);
	    IToken WS321 = default(IToken);
	    IToken char_literal322 = default(IToken);
	    IToken WS323 = default(IToken);
	    IToken DISTINCT324 = default(IToken);
	    IToken WS325 = default(IToken);
	    IToken WS327 = default(IToken);
	    IToken char_literal328 = default(IToken);
	    IToken COUNT329 = default(IToken);
	    IToken WS330 = default(IToken);
	    IToken char_literal331 = default(IToken);
	    IToken WS332 = default(IToken);
	    IToken WS334 = default(IToken);
	    IToken char_literal335 = default(IToken);
	    IToken COUNT336 = default(IToken);
	    IToken WS337 = default(IToken);
	    IToken char_literal338 = default(IToken);
	    IToken WS339 = default(IToken);
	    IToken DISTINCT340 = default(IToken);
	    IToken WS341 = default(IToken);
	    IToken WS343 = default(IToken);
	    IToken char_literal344 = default(IToken);
	    IToken WS346 = default(IToken);
	    IToken char_literal347 = default(IToken);
	    IToken WS348 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression306 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression310 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression317 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression326 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> all_columns333 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> all_columns342 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> table_alias345 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> column_name349 = default(AstParserRuleReturnScope<object, IToken>);

	    object TOKEN302_tree = default(object);
	    object WS303_tree = default(object);
	    object char_literal304_tree = default(object);
	    object WS305_tree = default(object);
	    object WS307_tree = default(object);
	    object char_literal308_tree = default(object);
	    object WS309_tree = default(object);
	    object WS311_tree = default(object);
	    object char_literal312_tree = default(object);
	    object COUNT313_tree = default(object);
	    object WS314_tree = default(object);
	    object char_literal315_tree = default(object);
	    object WS316_tree = default(object);
	    object WS318_tree = default(object);
	    object char_literal319_tree = default(object);
	    object COUNT320_tree = default(object);
	    object WS321_tree = default(object);
	    object char_literal322_tree = default(object);
	    object WS323_tree = default(object);
	    object DISTINCT324_tree = default(object);
	    object WS325_tree = default(object);
	    object WS327_tree = default(object);
	    object char_literal328_tree = default(object);
	    object COUNT329_tree = default(object);
	    object WS330_tree = default(object);
	    object char_literal331_tree = default(object);
	    object WS332_tree = default(object);
	    object WS334_tree = default(object);
	    object char_literal335_tree = default(object);
	    object COUNT336_tree = default(object);
	    object WS337_tree = default(object);
	    object char_literal338_tree = default(object);
	    object WS339_tree = default(object);
	    object DISTINCT340_tree = default(object);
	    object WS341_tree = default(object);
	    object WS343_tree = default(object);
	    object char_literal344_tree = default(object);
	    object WS346_tree = default(object);
	    object char_literal347_tree = default(object);
	    object WS348_tree = default(object);
	    RewriteRuleITokenStream stream_171=new RewriteRuleITokenStream(adaptor,"token 171");
	    RewriteRuleITokenStream stream_COUNT=new RewriteRuleITokenStream(adaptor,"token COUNT");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_173=new RewriteRuleITokenStream(adaptor,"token 173");
	    RewriteRuleITokenStream stream_DISTINCT=new RewriteRuleITokenStream(adaptor,"token DISTINCT");
	    RewriteRuleITokenStream stream_168=new RewriteRuleITokenStream(adaptor,"token 168");
	    RewriteRuleITokenStream stream_TOKEN=new RewriteRuleITokenStream(adaptor,"token TOKEN");
	    RewriteRuleITokenStream stream_167=new RewriteRuleITokenStream(adaptor,"token 167");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_table_alias=new RewriteRuleSubtreeStream(adaptor,"rule table_alias");
	    RewriteRuleSubtreeStream stream_all_columns=new RewriteRuleSubtreeStream(adaptor,"rule all_columns");
	    RewriteRuleSubtreeStream stream_column_name=new RewriteRuleSubtreeStream(adaptor,"rule column_name");
		try { DebugEnterRule(GrammarFileName, "functioncall_or_column");
		DebugLocation(418, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:419:2: ( TOKEN ( WS )? '(' ( WS )? ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )? ')' -> ^( T_FUNCTIONCALL TOKEN ( expression )* ) | COUNT ( WS )? '(' ( WS )? expression ( WS )? ')' -> ^( T_FUNCTIONCALL T_COUNT expression ) | COUNT ( WS )? '(' ( WS )? DISTINCT WS expression ( WS )? ')' -> ^( T_FUNCTIONCALL T_DISTINCTCOUNT expression ) | COUNT ( WS )? '(' ( WS )? all_columns ( WS )? ')' -> ^( T_FUNCTIONCALL T_COUNT all_columns ) | COUNT ( WS )? '(' ( WS )? DISTINCT WS all_columns ( WS )? ')' -> ^( T_FUNCTIONCALL T_DISTINCTCOUNT all_columns ) | ( table_alias ( WS )? '.' ( WS )? )? column_name -> ^( T_COLUMN column_name ( table_alias )? ) )
			int alt124=6;
			try { DebugEnterDecision(124, decisionCanBacktrack[124]);
			switch (input.LA(1))
			{
			case TOKEN:
				{
				alt124 = 1;
				}
				break;
			case COUNT:
				{
				int LA124_2 = input.LA(2);

				if ((LA124_2==WS))
				{
					int LA124_4 = input.LA(3);

					if ((LA124_4==167))
					{
						switch (input.LA(4))
						{
						case WS:
							{
							switch (input.LA(5))
							{
							case CASE:
							case CAST:
							case CONVERT:
							case COUNT:
							case DATEADD:
							case DATEDIFF:
							case DATEPART:
							case EXISTS:
							case NOT:
							case NUMBER:
							case STRING:
							case SYSTEMVAR:
							case TOKEN:
							case VARIABLE:
							case 167:
							case 170:
							case 172:
							case 186:
								{
								alt124 = 2;
								}
								break;
							case SIMPLE_FILE:
								{
								switch (input.LA(6))
								{
								case WS:
									{
									int LA124_11 = input.LA(7);

									if ((LA124_11==173))
									{
										switch (input.LA(8))
										{
										case WS:
											{
											int LA124_14 = input.LA(9);

											if ((LA124_14==SIMPLE_FILE))
											{
												alt124 = 2;
											}
											else if ((LA124_14==169))
											{
												alt124 = 4;
											}
											else
											{
												if (state.backtracking>0) {state.failed=true; return retval;}
												NoViableAltException nvae = new NoViableAltException("", 124, 14, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
											}
											break;
										case SIMPLE_FILE:
											{
											alt124 = 2;
											}
											break;
										case 169:
											{
											alt124 = 4;
											}
											break;
										default:
											{
												if (state.backtracking>0) {state.failed=true; return retval;}
												NoViableAltException nvae = new NoViableAltException("", 124, 12, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
										}

									}
									else if ((LA124_11==AND||LA124_11==BETWEEN||LA124_11==IN||LA124_11==LIKE||LA124_11==MATCH||LA124_11==NOT||LA124_11==OR||(LA124_11>=162 && LA124_11<=166)||(LA124_11>=168 && LA124_11<=170)||LA124_11==172||LA124_11==174||(LA124_11>=176 && LA124_11<=181)||(LA124_11>=184 && LA124_11<=185)))
									{
										alt124 = 2;
									}
									else
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 124, 11, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
									}
									break;
								case 173:
									{
									switch (input.LA(7))
									{
									case WS:
										{
										int LA124_14 = input.LA(8);

										if ((LA124_14==SIMPLE_FILE))
										{
											alt124 = 2;
										}
										else if ((LA124_14==169))
										{
											alt124 = 4;
										}
										else
										{
											if (state.backtracking>0) {state.failed=true; return retval;}
											NoViableAltException nvae = new NoViableAltException("", 124, 14, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
										}
										break;
									case SIMPLE_FILE:
										{
										alt124 = 2;
										}
										break;
									case 169:
										{
										alt124 = 4;
										}
										break;
									default:
										{
											if (state.backtracking>0) {state.failed=true; return retval;}
											NoViableAltException nvae = new NoViableAltException("", 124, 12, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}

									}
									break;
								case LIKE:
								case MATCH:
								case NOT:
								case 162:
								case 163:
								case 164:
								case 165:
								case 166:
								case 168:
								case 169:
								case 170:
								case 172:
								case 174:
								case 176:
								case 177:
								case 178:
								case 179:
								case 180:
								case 181:
								case 184:
								case 185:
									{
									alt124 = 2;
									}
									break;
								default:
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 124, 8, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

								}
								break;
							case DISTINCT:
								{
								int LA124_9 = input.LA(6);

								if ((LA124_9==WS))
								{
									switch (input.LA(7))
									{
									case CASE:
									case CAST:
									case CONVERT:
									case COUNT:
									case DATEADD:
									case DATEDIFF:
									case DATEPART:
									case EXISTS:
									case NOT:
									case NUMBER:
									case STRING:
									case SYSTEMVAR:
									case TOKEN:
									case VARIABLE:
									case 167:
									case 170:
									case 172:
									case 186:
										{
										alt124 = 3;
										}
										break;
									case SIMPLE_FILE:
										{
										switch (input.LA(8))
										{
										case WS:
											{
											int LA124_18 = input.LA(9);

											if ((LA124_18==173))
											{
												switch (input.LA(10))
												{
												case WS:
													{
													int LA124_20 = input.LA(11);

													if ((LA124_20==SIMPLE_FILE))
													{
														alt124 = 3;
													}
													else if ((LA124_20==169))
													{
														alt124 = 5;
													}
													else
													{
														if (state.backtracking>0) {state.failed=true; return retval;}
														NoViableAltException nvae = new NoViableAltException("", 124, 20, input);
														DebugRecognitionException(nvae);
														throw nvae;
													}
													}
													break;
												case SIMPLE_FILE:
													{
													alt124 = 3;
													}
													break;
												case 169:
													{
													alt124 = 5;
													}
													break;
												default:
													{
														if (state.backtracking>0) {state.failed=true; return retval;}
														NoViableAltException nvae = new NoViableAltException("", 124, 19, input);
														DebugRecognitionException(nvae);
														throw nvae;
													}
												}

											}
											else if ((LA124_18==AND||LA124_18==BETWEEN||LA124_18==IN||LA124_18==LIKE||LA124_18==MATCH||LA124_18==NOT||LA124_18==OR||(LA124_18>=162 && LA124_18<=166)||(LA124_18>=168 && LA124_18<=170)||LA124_18==172||LA124_18==174||(LA124_18>=176 && LA124_18<=181)||(LA124_18>=184 && LA124_18<=185)))
											{
												alt124 = 3;
											}
											else
											{
												if (state.backtracking>0) {state.failed=true; return retval;}
												NoViableAltException nvae = new NoViableAltException("", 124, 18, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
											}
											break;
										case 173:
											{
											switch (input.LA(9))
											{
											case WS:
												{
												int LA124_20 = input.LA(10);

												if ((LA124_20==SIMPLE_FILE))
												{
													alt124 = 3;
												}
												else if ((LA124_20==169))
												{
													alt124 = 5;
												}
												else
												{
													if (state.backtracking>0) {state.failed=true; return retval;}
													NoViableAltException nvae = new NoViableAltException("", 124, 20, input);
													DebugRecognitionException(nvae);
													throw nvae;
												}
												}
												break;
											case SIMPLE_FILE:
												{
												alt124 = 3;
												}
												break;
											case 169:
												{
												alt124 = 5;
												}
												break;
											default:
												{
													if (state.backtracking>0) {state.failed=true; return retval;}
													NoViableAltException nvae = new NoViableAltException("", 124, 19, input);
													DebugRecognitionException(nvae);
													throw nvae;
												}
											}

											}
											break;
										case LIKE:
										case MATCH:
										case NOT:
										case 162:
										case 163:
										case 164:
										case 165:
										case 166:
										case 168:
										case 169:
										case 170:
										case 172:
										case 174:
										case 176:
										case 177:
										case 178:
										case 179:
										case 180:
										case 181:
										case 184:
										case 185:
											{
											alt124 = 3;
											}
											break;
										default:
											{
												if (state.backtracking>0) {state.failed=true; return retval;}
												NoViableAltException nvae = new NoViableAltException("", 124, 16, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
										}

										}
										break;
									case 169:
										{
										alt124 = 5;
										}
										break;
									default:
										{
											if (state.backtracking>0) {state.failed=true; return retval;}
											NoViableAltException nvae = new NoViableAltException("", 124, 13, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}

								}
								else
								{
									if (state.backtracking>0) {state.failed=true; return retval;}
									NoViableAltException nvae = new NoViableAltException("", 124, 9, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
								}
								break;
							case 169:
								{
								alt124 = 4;
								}
								break;
							default:
								{
									if (state.backtracking>0) {state.failed=true; return retval;}
									NoViableAltException nvae = new NoViableAltException("", 124, 6, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}

							}
							break;
						case CASE:
						case CAST:
						case CONVERT:
						case COUNT:
						case DATEADD:
						case DATEDIFF:
						case DATEPART:
						case EXISTS:
						case NOT:
						case NUMBER:
						case STRING:
						case SYSTEMVAR:
						case TOKEN:
						case VARIABLE:
						case 167:
						case 170:
						case 172:
						case 186:
							{
							alt124 = 2;
							}
							break;
						case SIMPLE_FILE:
							{
							switch (input.LA(5))
							{
							case WS:
								{
								int LA124_11 = input.LA(6);

								if ((LA124_11==173))
								{
									switch (input.LA(7))
									{
									case WS:
										{
										int LA124_14 = input.LA(8);

										if ((LA124_14==SIMPLE_FILE))
										{
											alt124 = 2;
										}
										else if ((LA124_14==169))
										{
											alt124 = 4;
										}
										else
										{
											if (state.backtracking>0) {state.failed=true; return retval;}
											NoViableAltException nvae = new NoViableAltException("", 124, 14, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
										}
										break;
									case SIMPLE_FILE:
										{
										alt124 = 2;
										}
										break;
									case 169:
										{
										alt124 = 4;
										}
										break;
									default:
										{
											if (state.backtracking>0) {state.failed=true; return retval;}
											NoViableAltException nvae = new NoViableAltException("", 124, 12, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}

								}
								else if ((LA124_11==AND||LA124_11==BETWEEN||LA124_11==IN||LA124_11==LIKE||LA124_11==MATCH||LA124_11==NOT||LA124_11==OR||(LA124_11>=162 && LA124_11<=166)||(LA124_11>=168 && LA124_11<=170)||LA124_11==172||LA124_11==174||(LA124_11>=176 && LA124_11<=181)||(LA124_11>=184 && LA124_11<=185)))
								{
									alt124 = 2;
								}
								else
								{
									if (state.backtracking>0) {state.failed=true; return retval;}
									NoViableAltException nvae = new NoViableAltException("", 124, 11, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
								}
								break;
							case 173:
								{
								switch (input.LA(6))
								{
								case WS:
									{
									int LA124_14 = input.LA(7);

									if ((LA124_14==SIMPLE_FILE))
									{
										alt124 = 2;
									}
									else if ((LA124_14==169))
									{
										alt124 = 4;
									}
									else
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 124, 14, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
									}
									break;
								case SIMPLE_FILE:
									{
									alt124 = 2;
									}
									break;
								case 169:
									{
									alt124 = 4;
									}
									break;
								default:
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 124, 12, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

								}
								break;
							case LIKE:
							case MATCH:
							case NOT:
							case 162:
							case 163:
							case 164:
							case 165:
							case 166:
							case 168:
							case 169:
							case 170:
							case 172:
							case 174:
							case 176:
							case 177:
							case 178:
							case 179:
							case 180:
							case 181:
							case 184:
							case 185:
								{
								alt124 = 2;
								}
								break;
							default:
								{
									if (state.backtracking>0) {state.failed=true; return retval;}
									NoViableAltException nvae = new NoViableAltException("", 124, 8, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}

							}
							break;
						case DISTINCT:
							{
							int LA124_9 = input.LA(5);

							if ((LA124_9==WS))
							{
								switch (input.LA(6))
								{
								case CASE:
								case CAST:
								case CONVERT:
								case COUNT:
								case DATEADD:
								case DATEDIFF:
								case DATEPART:
								case EXISTS:
								case NOT:
								case NUMBER:
								case STRING:
								case SYSTEMVAR:
								case TOKEN:
								case VARIABLE:
								case 167:
								case 170:
								case 172:
								case 186:
									{
									alt124 = 3;
									}
									break;
								case SIMPLE_FILE:
									{
									switch (input.LA(7))
									{
									case WS:
										{
										int LA124_18 = input.LA(8);

										if ((LA124_18==173))
										{
											switch (input.LA(9))
											{
											case WS:
												{
												int LA124_20 = input.LA(10);

												if ((LA124_20==SIMPLE_FILE))
												{
													alt124 = 3;
												}
												else if ((LA124_20==169))
												{
													alt124 = 5;
												}
												else
												{
													if (state.backtracking>0) {state.failed=true; return retval;}
													NoViableAltException nvae = new NoViableAltException("", 124, 20, input);
													DebugRecognitionException(nvae);
													throw nvae;
												}
												}
												break;
											case SIMPLE_FILE:
												{
												alt124 = 3;
												}
												break;
											case 169:
												{
												alt124 = 5;
												}
												break;
											default:
												{
													if (state.backtracking>0) {state.failed=true; return retval;}
													NoViableAltException nvae = new NoViableAltException("", 124, 19, input);
													DebugRecognitionException(nvae);
													throw nvae;
												}
											}

										}
										else if ((LA124_18==AND||LA124_18==BETWEEN||LA124_18==IN||LA124_18==LIKE||LA124_18==MATCH||LA124_18==NOT||LA124_18==OR||(LA124_18>=162 && LA124_18<=166)||(LA124_18>=168 && LA124_18<=170)||LA124_18==172||LA124_18==174||(LA124_18>=176 && LA124_18<=181)||(LA124_18>=184 && LA124_18<=185)))
										{
											alt124 = 3;
										}
										else
										{
											if (state.backtracking>0) {state.failed=true; return retval;}
											NoViableAltException nvae = new NoViableAltException("", 124, 18, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
										}
										break;
									case 173:
										{
										switch (input.LA(8))
										{
										case WS:
											{
											int LA124_20 = input.LA(9);

											if ((LA124_20==SIMPLE_FILE))
											{
												alt124 = 3;
											}
											else if ((LA124_20==169))
											{
												alt124 = 5;
											}
											else
											{
												if (state.backtracking>0) {state.failed=true; return retval;}
												NoViableAltException nvae = new NoViableAltException("", 124, 20, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
											}
											break;
										case SIMPLE_FILE:
											{
											alt124 = 3;
											}
											break;
										case 169:
											{
											alt124 = 5;
											}
											break;
										default:
											{
												if (state.backtracking>0) {state.failed=true; return retval;}
												NoViableAltException nvae = new NoViableAltException("", 124, 19, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
										}

										}
										break;
									case LIKE:
									case MATCH:
									case NOT:
									case 162:
									case 163:
									case 164:
									case 165:
									case 166:
									case 168:
									case 169:
									case 170:
									case 172:
									case 174:
									case 176:
									case 177:
									case 178:
									case 179:
									case 180:
									case 181:
									case 184:
									case 185:
										{
										alt124 = 3;
										}
										break;
									default:
										{
											if (state.backtracking>0) {state.failed=true; return retval;}
											NoViableAltException nvae = new NoViableAltException("", 124, 16, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}

									}
									break;
								case 169:
									{
									alt124 = 5;
									}
									break;
								default:
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 124, 13, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 124, 9, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case 169:
							{
							alt124 = 4;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 124, 5, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 124, 4, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA124_2==167))
				{
					switch (input.LA(3))
					{
					case WS:
						{
						switch (input.LA(4))
						{
						case CASE:
						case CAST:
						case CONVERT:
						case COUNT:
						case DATEADD:
						case DATEDIFF:
						case DATEPART:
						case EXISTS:
						case NOT:
						case NUMBER:
						case STRING:
						case SYSTEMVAR:
						case TOKEN:
						case VARIABLE:
						case 167:
						case 170:
						case 172:
						case 186:
							{
							alt124 = 2;
							}
							break;
						case SIMPLE_FILE:
							{
							switch (input.LA(5))
							{
							case WS:
								{
								int LA124_11 = input.LA(6);

								if ((LA124_11==173))
								{
									switch (input.LA(7))
									{
									case WS:
										{
										int LA124_14 = input.LA(8);

										if ((LA124_14==SIMPLE_FILE))
										{
											alt124 = 2;
										}
										else if ((LA124_14==169))
										{
											alt124 = 4;
										}
										else
										{
											if (state.backtracking>0) {state.failed=true; return retval;}
											NoViableAltException nvae = new NoViableAltException("", 124, 14, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
										}
										break;
									case SIMPLE_FILE:
										{
										alt124 = 2;
										}
										break;
									case 169:
										{
										alt124 = 4;
										}
										break;
									default:
										{
											if (state.backtracking>0) {state.failed=true; return retval;}
											NoViableAltException nvae = new NoViableAltException("", 124, 12, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}

								}
								else if ((LA124_11==AND||LA124_11==BETWEEN||LA124_11==IN||LA124_11==LIKE||LA124_11==MATCH||LA124_11==NOT||LA124_11==OR||(LA124_11>=162 && LA124_11<=166)||(LA124_11>=168 && LA124_11<=170)||LA124_11==172||LA124_11==174||(LA124_11>=176 && LA124_11<=181)||(LA124_11>=184 && LA124_11<=185)))
								{
									alt124 = 2;
								}
								else
								{
									if (state.backtracking>0) {state.failed=true; return retval;}
									NoViableAltException nvae = new NoViableAltException("", 124, 11, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
								}
								break;
							case 173:
								{
								switch (input.LA(6))
								{
								case WS:
									{
									int LA124_14 = input.LA(7);

									if ((LA124_14==SIMPLE_FILE))
									{
										alt124 = 2;
									}
									else if ((LA124_14==169))
									{
										alt124 = 4;
									}
									else
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 124, 14, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
									}
									break;
								case SIMPLE_FILE:
									{
									alt124 = 2;
									}
									break;
								case 169:
									{
									alt124 = 4;
									}
									break;
								default:
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 124, 12, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

								}
								break;
							case LIKE:
							case MATCH:
							case NOT:
							case 162:
							case 163:
							case 164:
							case 165:
							case 166:
							case 168:
							case 169:
							case 170:
							case 172:
							case 174:
							case 176:
							case 177:
							case 178:
							case 179:
							case 180:
							case 181:
							case 184:
							case 185:
								{
								alt124 = 2;
								}
								break;
							default:
								{
									if (state.backtracking>0) {state.failed=true; return retval;}
									NoViableAltException nvae = new NoViableAltException("", 124, 8, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}

							}
							break;
						case DISTINCT:
							{
							int LA124_9 = input.LA(5);

							if ((LA124_9==WS))
							{
								switch (input.LA(6))
								{
								case CASE:
								case CAST:
								case CONVERT:
								case COUNT:
								case DATEADD:
								case DATEDIFF:
								case DATEPART:
								case EXISTS:
								case NOT:
								case NUMBER:
								case STRING:
								case SYSTEMVAR:
								case TOKEN:
								case VARIABLE:
								case 167:
								case 170:
								case 172:
								case 186:
									{
									alt124 = 3;
									}
									break;
								case SIMPLE_FILE:
									{
									switch (input.LA(7))
									{
									case WS:
										{
										int LA124_18 = input.LA(8);

										if ((LA124_18==173))
										{
											switch (input.LA(9))
											{
											case WS:
												{
												int LA124_20 = input.LA(10);

												if ((LA124_20==SIMPLE_FILE))
												{
													alt124 = 3;
												}
												else if ((LA124_20==169))
												{
													alt124 = 5;
												}
												else
												{
													if (state.backtracking>0) {state.failed=true; return retval;}
													NoViableAltException nvae = new NoViableAltException("", 124, 20, input);
													DebugRecognitionException(nvae);
													throw nvae;
												}
												}
												break;
											case SIMPLE_FILE:
												{
												alt124 = 3;
												}
												break;
											case 169:
												{
												alt124 = 5;
												}
												break;
											default:
												{
													if (state.backtracking>0) {state.failed=true; return retval;}
													NoViableAltException nvae = new NoViableAltException("", 124, 19, input);
													DebugRecognitionException(nvae);
													throw nvae;
												}
											}

										}
										else if ((LA124_18==AND||LA124_18==BETWEEN||LA124_18==IN||LA124_18==LIKE||LA124_18==MATCH||LA124_18==NOT||LA124_18==OR||(LA124_18>=162 && LA124_18<=166)||(LA124_18>=168 && LA124_18<=170)||LA124_18==172||LA124_18==174||(LA124_18>=176 && LA124_18<=181)||(LA124_18>=184 && LA124_18<=185)))
										{
											alt124 = 3;
										}
										else
										{
											if (state.backtracking>0) {state.failed=true; return retval;}
											NoViableAltException nvae = new NoViableAltException("", 124, 18, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
										}
										break;
									case 173:
										{
										switch (input.LA(8))
										{
										case WS:
											{
											int LA124_20 = input.LA(9);

											if ((LA124_20==SIMPLE_FILE))
											{
												alt124 = 3;
											}
											else if ((LA124_20==169))
											{
												alt124 = 5;
											}
											else
											{
												if (state.backtracking>0) {state.failed=true; return retval;}
												NoViableAltException nvae = new NoViableAltException("", 124, 20, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
											}
											break;
										case SIMPLE_FILE:
											{
											alt124 = 3;
											}
											break;
										case 169:
											{
											alt124 = 5;
											}
											break;
										default:
											{
												if (state.backtracking>0) {state.failed=true; return retval;}
												NoViableAltException nvae = new NoViableAltException("", 124, 19, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
										}

										}
										break;
									case LIKE:
									case MATCH:
									case NOT:
									case 162:
									case 163:
									case 164:
									case 165:
									case 166:
									case 168:
									case 169:
									case 170:
									case 172:
									case 174:
									case 176:
									case 177:
									case 178:
									case 179:
									case 180:
									case 181:
									case 184:
									case 185:
										{
										alt124 = 3;
										}
										break;
									default:
										{
											if (state.backtracking>0) {state.failed=true; return retval;}
											NoViableAltException nvae = new NoViableAltException("", 124, 16, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}

									}
									break;
								case 169:
									{
									alt124 = 5;
									}
									break;
								default:
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 124, 13, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 124, 9, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case 169:
							{
							alt124 = 4;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 124, 6, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case CASE:
					case CAST:
					case CONVERT:
					case COUNT:
					case DATEADD:
					case DATEDIFF:
					case DATEPART:
					case EXISTS:
					case NOT:
					case NUMBER:
					case STRING:
					case SYSTEMVAR:
					case TOKEN:
					case VARIABLE:
					case 167:
					case 170:
					case 172:
					case 186:
						{
						alt124 = 2;
						}
						break;
					case SIMPLE_FILE:
						{
						switch (input.LA(4))
						{
						case WS:
							{
							int LA124_11 = input.LA(5);

							if ((LA124_11==173))
							{
								switch (input.LA(6))
								{
								case WS:
									{
									int LA124_14 = input.LA(7);

									if ((LA124_14==SIMPLE_FILE))
									{
										alt124 = 2;
									}
									else if ((LA124_14==169))
									{
										alt124 = 4;
									}
									else
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 124, 14, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
									}
									break;
								case SIMPLE_FILE:
									{
									alt124 = 2;
									}
									break;
								case 169:
									{
									alt124 = 4;
									}
									break;
								default:
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 124, 12, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

							}
							else if ((LA124_11==AND||LA124_11==BETWEEN||LA124_11==IN||LA124_11==LIKE||LA124_11==MATCH||LA124_11==NOT||LA124_11==OR||(LA124_11>=162 && LA124_11<=166)||(LA124_11>=168 && LA124_11<=170)||LA124_11==172||LA124_11==174||(LA124_11>=176 && LA124_11<=181)||(LA124_11>=184 && LA124_11<=185)))
							{
								alt124 = 2;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 124, 11, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case 173:
							{
							switch (input.LA(5))
							{
							case WS:
								{
								int LA124_14 = input.LA(6);

								if ((LA124_14==SIMPLE_FILE))
								{
									alt124 = 2;
								}
								else if ((LA124_14==169))
								{
									alt124 = 4;
								}
								else
								{
									if (state.backtracking>0) {state.failed=true; return retval;}
									NoViableAltException nvae = new NoViableAltException("", 124, 14, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
								}
								break;
							case SIMPLE_FILE:
								{
								alt124 = 2;
								}
								break;
							case 169:
								{
								alt124 = 4;
								}
								break;
							default:
								{
									if (state.backtracking>0) {state.failed=true; return retval;}
									NoViableAltException nvae = new NoViableAltException("", 124, 12, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}

							}
							break;
						case LIKE:
						case MATCH:
						case NOT:
						case 162:
						case 163:
						case 164:
						case 165:
						case 166:
						case 168:
						case 169:
						case 170:
						case 172:
						case 174:
						case 176:
						case 177:
						case 178:
						case 179:
						case 180:
						case 181:
						case 184:
						case 185:
							{
							alt124 = 2;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 124, 8, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case DISTINCT:
						{
						int LA124_9 = input.LA(4);

						if ((LA124_9==WS))
						{
							switch (input.LA(5))
							{
							case CASE:
							case CAST:
							case CONVERT:
							case COUNT:
							case DATEADD:
							case DATEDIFF:
							case DATEPART:
							case EXISTS:
							case NOT:
							case NUMBER:
							case STRING:
							case SYSTEMVAR:
							case TOKEN:
							case VARIABLE:
							case 167:
							case 170:
							case 172:
							case 186:
								{
								alt124 = 3;
								}
								break;
							case SIMPLE_FILE:
								{
								switch (input.LA(6))
								{
								case WS:
									{
									int LA124_18 = input.LA(7);

									if ((LA124_18==173))
									{
										switch (input.LA(8))
										{
										case WS:
											{
											int LA124_20 = input.LA(9);

											if ((LA124_20==SIMPLE_FILE))
											{
												alt124 = 3;
											}
											else if ((LA124_20==169))
											{
												alt124 = 5;
											}
											else
											{
												if (state.backtracking>0) {state.failed=true; return retval;}
												NoViableAltException nvae = new NoViableAltException("", 124, 20, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
											}
											break;
										case SIMPLE_FILE:
											{
											alt124 = 3;
											}
											break;
										case 169:
											{
											alt124 = 5;
											}
											break;
										default:
											{
												if (state.backtracking>0) {state.failed=true; return retval;}
												NoViableAltException nvae = new NoViableAltException("", 124, 19, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
										}

									}
									else if ((LA124_18==AND||LA124_18==BETWEEN||LA124_18==IN||LA124_18==LIKE||LA124_18==MATCH||LA124_18==NOT||LA124_18==OR||(LA124_18>=162 && LA124_18<=166)||(LA124_18>=168 && LA124_18<=170)||LA124_18==172||LA124_18==174||(LA124_18>=176 && LA124_18<=181)||(LA124_18>=184 && LA124_18<=185)))
									{
										alt124 = 3;
									}
									else
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 124, 18, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
									}
									break;
								case 173:
									{
									switch (input.LA(7))
									{
									case WS:
										{
										int LA124_20 = input.LA(8);

										if ((LA124_20==SIMPLE_FILE))
										{
											alt124 = 3;
										}
										else if ((LA124_20==169))
										{
											alt124 = 5;
										}
										else
										{
											if (state.backtracking>0) {state.failed=true; return retval;}
											NoViableAltException nvae = new NoViableAltException("", 124, 20, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
										}
										break;
									case SIMPLE_FILE:
										{
										alt124 = 3;
										}
										break;
									case 169:
										{
										alt124 = 5;
										}
										break;
									default:
										{
											if (state.backtracking>0) {state.failed=true; return retval;}
											NoViableAltException nvae = new NoViableAltException("", 124, 19, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}

									}
									break;
								case LIKE:
								case MATCH:
								case NOT:
								case 162:
								case 163:
								case 164:
								case 165:
								case 166:
								case 168:
								case 169:
								case 170:
								case 172:
								case 174:
								case 176:
								case 177:
								case 178:
								case 179:
								case 180:
								case 181:
								case 184:
								case 185:
									{
									alt124 = 3;
									}
									break;
								default:
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 124, 16, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

								}
								break;
							case 169:
								{
								alt124 = 5;
								}
								break;
							default:
								{
									if (state.backtracking>0) {state.failed=true; return retval;}
									NoViableAltException nvae = new NoViableAltException("", 124, 13, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}

						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 124, 9, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case 169:
						{
						alt124 = 4;
						}
						break;
					default:
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 124, 5, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 124, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SIMPLE_FILE:
				{
				alt124 = 6;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 124, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(124); }
			switch (alt124)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:419:4: TOKEN ( WS )? '(' ( WS )? ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )? ')'
				{
				DebugLocation(419, 4);
				TOKEN302=(IToken)Match(input,TOKEN,Follow._TOKEN_in_functioncall_or_column2622); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TOKEN.Add(TOKEN302);

				DebugLocation(419, 10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:419:10: ( WS )?
				int alt102=2;
				try { DebugEnterSubRule(102);
				try { DebugEnterDecision(102, decisionCanBacktrack[102]);
				int LA102_0 = input.LA(1);

				if ((LA102_0==WS))
				{
					alt102 = 1;
				}
				} finally { DebugExitDecision(102); }
				switch (alt102)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:419:10: WS
					{
					DebugLocation(419, 10);
					WS303=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2624); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS303);


					}
					break;

				}
				} finally { DebugExitSubRule(102); }

				DebugLocation(419, 14);
				char_literal304=(IToken)Match(input,167,Follow._167_in_functioncall_or_column2627); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_167.Add(char_literal304);

				DebugLocation(419, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:419:18: ( WS )?
				int alt103=2;
				try { DebugEnterSubRule(103);
				try { DebugEnterDecision(103, decisionCanBacktrack[103]);
				int LA103_0 = input.LA(1);

				if ((LA103_0==WS))
				{
					alt103 = 1;
				}
				} finally { DebugExitDecision(103); }
				switch (alt103)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:419:18: WS
					{
					DebugLocation(419, 18);
					WS305=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2629); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS305);


					}
					break;

				}
				} finally { DebugExitSubRule(103); }

				DebugLocation(419, 22);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:419:22: ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )?
				int alt108=2;
				try { DebugEnterSubRule(108);
				try { DebugEnterDecision(108, decisionCanBacktrack[108]);
				int LA108_0 = input.LA(1);

				if (((LA108_0>=CASE && LA108_0<=CAST)||(LA108_0>=CONVERT && LA108_0<=COUNT)||(LA108_0>=DATEADD && LA108_0<=DATEPART)||LA108_0==EXISTS||(LA108_0>=NOT && LA108_0<=NUMBER)||LA108_0==SIMPLE_FILE||(LA108_0>=STRING && LA108_0<=SYSTEMVAR)||LA108_0==TOKEN||LA108_0==VARIABLE||LA108_0==167||LA108_0==170||LA108_0==172||LA108_0==186))
				{
					alt108 = 1;
				}
				} finally { DebugExitDecision(108); }
				switch (alt108)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:419:23: expression ( WS )? ( ',' ( WS )? expression ( WS )? )*
					{
					DebugLocation(419, 23);
					PushFollow(Follow._expression_in_functioncall_or_column2633);
					expression306=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expression.Add(expression306.Tree);
					DebugLocation(419, 34);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:419:34: ( WS )?
					int alt104=2;
					try { DebugEnterSubRule(104);
					try { DebugEnterDecision(104, decisionCanBacktrack[104]);
					int LA104_0 = input.LA(1);

					if ((LA104_0==WS))
					{
						alt104 = 1;
					}
					} finally { DebugExitDecision(104); }
					switch (alt104)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:419:34: WS
						{
						DebugLocation(419, 34);
						WS307=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2635); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS307);


						}
						break;

					}
					} finally { DebugExitSubRule(104); }

					DebugLocation(419, 38);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:419:38: ( ',' ( WS )? expression ( WS )? )*
					try { DebugEnterSubRule(107);
					while (true)
					{
						int alt107=2;
						try { DebugEnterDecision(107, decisionCanBacktrack[107]);
						int LA107_0 = input.LA(1);

						if ((LA107_0==171))
						{
							alt107 = 1;
						}


						} finally { DebugExitDecision(107); }
						switch ( alt107 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:419:39: ',' ( WS )? expression ( WS )?
							{
							DebugLocation(419, 39);
							char_literal308=(IToken)Match(input,171,Follow._171_in_functioncall_or_column2639); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_171.Add(char_literal308);

							DebugLocation(419, 43);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:419:43: ( WS )?
							int alt105=2;
							try { DebugEnterSubRule(105);
							try { DebugEnterDecision(105, decisionCanBacktrack[105]);
							int LA105_0 = input.LA(1);

							if ((LA105_0==WS))
							{
								alt105 = 1;
							}
							} finally { DebugExitDecision(105); }
							switch (alt105)
							{
							case 1:
								DebugEnterAlt(1);
								// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:419:43: WS
								{
								DebugLocation(419, 43);
								WS309=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2641); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_WS.Add(WS309);


								}
								break;

							}
							} finally { DebugExitSubRule(105); }

							DebugLocation(419, 47);
							PushFollow(Follow._expression_in_functioncall_or_column2644);
							expression310=expression();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_expression.Add(expression310.Tree);
							DebugLocation(419, 58);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:419:58: ( WS )?
							int alt106=2;
							try { DebugEnterSubRule(106);
							try { DebugEnterDecision(106, decisionCanBacktrack[106]);
							int LA106_0 = input.LA(1);

							if ((LA106_0==WS))
							{
								alt106 = 1;
							}
							} finally { DebugExitDecision(106); }
							switch (alt106)
							{
							case 1:
								DebugEnterAlt(1);
								// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:419:58: WS
								{
								DebugLocation(419, 58);
								WS311=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2646); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_WS.Add(WS311);


								}
								break;

							}
							} finally { DebugExitSubRule(106); }


							}
							break;

						default:
							goto loop107;
						}
					}

					loop107:
						;

					} finally { DebugExitSubRule(107); }


					}
					break;

				}
				} finally { DebugExitSubRule(108); }

				DebugLocation(419, 66);
				char_literal312=(IToken)Match(input,168,Follow._168_in_functioncall_or_column2653); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_168.Add(char_literal312);



				{
				// AST REWRITE
				// elements: TOKEN, expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 419:70: -> ^( T_FUNCTIONCALL TOKEN ( expression )* )
				{
					DebugLocation(419, 73);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:419:73: ^( T_FUNCTIONCALL TOKEN ( expression )* )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(419, 75);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(419, 90);
					adaptor.AddChild(root_1, stream_TOKEN.NextNode());
					DebugLocation(419, 96);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:419:96: ( expression )*
					while ( stream_expression.HasNext )
					{
						DebugLocation(419, 96);
						adaptor.AddChild(root_1, stream_expression.NextTree());

					}
					stream_expression.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:420:4: COUNT ( WS )? '(' ( WS )? expression ( WS )? ')'
				{
				DebugLocation(420, 4);
				COUNT313=(IToken)Match(input,COUNT,Follow._COUNT_in_functioncall_or_column2669); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COUNT.Add(COUNT313);

				DebugLocation(420, 10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:420:10: ( WS )?
				int alt109=2;
				try { DebugEnterSubRule(109);
				try { DebugEnterDecision(109, decisionCanBacktrack[109]);
				int LA109_0 = input.LA(1);

				if ((LA109_0==WS))
				{
					alt109 = 1;
				}
				} finally { DebugExitDecision(109); }
				switch (alt109)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:420:10: WS
					{
					DebugLocation(420, 10);
					WS314=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2671); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS314);


					}
					break;

				}
				} finally { DebugExitSubRule(109); }

				DebugLocation(420, 14);
				char_literal315=(IToken)Match(input,167,Follow._167_in_functioncall_or_column2674); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_167.Add(char_literal315);

				DebugLocation(420, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:420:18: ( WS )?
				int alt110=2;
				try { DebugEnterSubRule(110);
				try { DebugEnterDecision(110, decisionCanBacktrack[110]);
				int LA110_0 = input.LA(1);

				if ((LA110_0==WS))
				{
					alt110 = 1;
				}
				} finally { DebugExitDecision(110); }
				switch (alt110)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:420:18: WS
					{
					DebugLocation(420, 18);
					WS316=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2676); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS316);


					}
					break;

				}
				} finally { DebugExitSubRule(110); }

				DebugLocation(420, 22);
				PushFollow(Follow._expression_in_functioncall_or_column2679);
				expression317=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression317.Tree);
				DebugLocation(420, 33);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:420:33: ( WS )?
				int alt111=2;
				try { DebugEnterSubRule(111);
				try { DebugEnterDecision(111, decisionCanBacktrack[111]);
				int LA111_0 = input.LA(1);

				if ((LA111_0==WS))
				{
					alt111 = 1;
				}
				} finally { DebugExitDecision(111); }
				switch (alt111)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:420:33: WS
					{
					DebugLocation(420, 33);
					WS318=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2681); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS318);


					}
					break;

				}
				} finally { DebugExitSubRule(111); }

				DebugLocation(420, 37);
				char_literal319=(IToken)Match(input,168,Follow._168_in_functioncall_or_column2684); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_168.Add(char_literal319);



				{
				// AST REWRITE
				// elements: expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 420:41: -> ^( T_FUNCTIONCALL T_COUNT expression )
				{
					DebugLocation(420, 44);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:420:44: ^( T_FUNCTIONCALL T_COUNT expression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(420, 46);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(420, 61);
					adaptor.AddChild(root_1, (object)adaptor.Create(T_COUNT, "T_COUNT"));
					DebugLocation(420, 69);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:421:4: COUNT ( WS )? '(' ( WS )? DISTINCT WS expression ( WS )? ')'
				{
				DebugLocation(421, 4);
				COUNT320=(IToken)Match(input,COUNT,Follow._COUNT_in_functioncall_or_column2699); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COUNT.Add(COUNT320);

				DebugLocation(421, 10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:421:10: ( WS )?
				int alt112=2;
				try { DebugEnterSubRule(112);
				try { DebugEnterDecision(112, decisionCanBacktrack[112]);
				int LA112_0 = input.LA(1);

				if ((LA112_0==WS))
				{
					alt112 = 1;
				}
				} finally { DebugExitDecision(112); }
				switch (alt112)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:421:10: WS
					{
					DebugLocation(421, 10);
					WS321=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2701); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS321);


					}
					break;

				}
				} finally { DebugExitSubRule(112); }

				DebugLocation(421, 14);
				char_literal322=(IToken)Match(input,167,Follow._167_in_functioncall_or_column2704); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_167.Add(char_literal322);

				DebugLocation(421, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:421:18: ( WS )?
				int alt113=2;
				try { DebugEnterSubRule(113);
				try { DebugEnterDecision(113, decisionCanBacktrack[113]);
				int LA113_0 = input.LA(1);

				if ((LA113_0==WS))
				{
					alt113 = 1;
				}
				} finally { DebugExitDecision(113); }
				switch (alt113)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:421:18: WS
					{
					DebugLocation(421, 18);
					WS323=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2706); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS323);


					}
					break;

				}
				} finally { DebugExitSubRule(113); }

				DebugLocation(421, 22);
				DISTINCT324=(IToken)Match(input,DISTINCT,Follow._DISTINCT_in_functioncall_or_column2709); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DISTINCT.Add(DISTINCT324);

				DebugLocation(421, 31);
				WS325=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2711); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS325);

				DebugLocation(421, 34);
				PushFollow(Follow._expression_in_functioncall_or_column2713);
				expression326=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression326.Tree);
				DebugLocation(421, 45);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:421:45: ( WS )?
				int alt114=2;
				try { DebugEnterSubRule(114);
				try { DebugEnterDecision(114, decisionCanBacktrack[114]);
				int LA114_0 = input.LA(1);

				if ((LA114_0==WS))
				{
					alt114 = 1;
				}
				} finally { DebugExitDecision(114); }
				switch (alt114)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:421:45: WS
					{
					DebugLocation(421, 45);
					WS327=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2715); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS327);


					}
					break;

				}
				} finally { DebugExitSubRule(114); }

				DebugLocation(421, 49);
				char_literal328=(IToken)Match(input,168,Follow._168_in_functioncall_or_column2718); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_168.Add(char_literal328);



				{
				// AST REWRITE
				// elements: expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 421:53: -> ^( T_FUNCTIONCALL T_DISTINCTCOUNT expression )
				{
					DebugLocation(421, 56);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:421:56: ^( T_FUNCTIONCALL T_DISTINCTCOUNT expression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(421, 58);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(421, 73);
					adaptor.AddChild(root_1, (object)adaptor.Create(T_DISTINCTCOUNT, "T_DISTINCTCOUNT"));
					DebugLocation(421, 89);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:422:4: COUNT ( WS )? '(' ( WS )? all_columns ( WS )? ')'
				{
				DebugLocation(422, 4);
				COUNT329=(IToken)Match(input,COUNT,Follow._COUNT_in_functioncall_or_column2733); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COUNT.Add(COUNT329);

				DebugLocation(422, 10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:422:10: ( WS )?
				int alt115=2;
				try { DebugEnterSubRule(115);
				try { DebugEnterDecision(115, decisionCanBacktrack[115]);
				int LA115_0 = input.LA(1);

				if ((LA115_0==WS))
				{
					alt115 = 1;
				}
				} finally { DebugExitDecision(115); }
				switch (alt115)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:422:10: WS
					{
					DebugLocation(422, 10);
					WS330=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2735); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS330);


					}
					break;

				}
				} finally { DebugExitSubRule(115); }

				DebugLocation(422, 14);
				char_literal331=(IToken)Match(input,167,Follow._167_in_functioncall_or_column2738); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_167.Add(char_literal331);

				DebugLocation(422, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:422:18: ( WS )?
				int alt116=2;
				try { DebugEnterSubRule(116);
				try { DebugEnterDecision(116, decisionCanBacktrack[116]);
				int LA116_0 = input.LA(1);

				if ((LA116_0==WS))
				{
					alt116 = 1;
				}
				} finally { DebugExitDecision(116); }
				switch (alt116)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:422:18: WS
					{
					DebugLocation(422, 18);
					WS332=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2740); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS332);


					}
					break;

				}
				} finally { DebugExitSubRule(116); }

				DebugLocation(422, 22);
				PushFollow(Follow._all_columns_in_functioncall_or_column2743);
				all_columns333=all_columns();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_all_columns.Add(all_columns333.Tree);
				DebugLocation(422, 34);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:422:34: ( WS )?
				int alt117=2;
				try { DebugEnterSubRule(117);
				try { DebugEnterDecision(117, decisionCanBacktrack[117]);
				int LA117_0 = input.LA(1);

				if ((LA117_0==WS))
				{
					alt117 = 1;
				}
				} finally { DebugExitDecision(117); }
				switch (alt117)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:422:34: WS
					{
					DebugLocation(422, 34);
					WS334=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2745); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS334);


					}
					break;

				}
				} finally { DebugExitSubRule(117); }

				DebugLocation(422, 38);
				char_literal335=(IToken)Match(input,168,Follow._168_in_functioncall_or_column2748); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_168.Add(char_literal335);



				{
				// AST REWRITE
				// elements: all_columns
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 422:42: -> ^( T_FUNCTIONCALL T_COUNT all_columns )
				{
					DebugLocation(422, 45);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:422:45: ^( T_FUNCTIONCALL T_COUNT all_columns )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(422, 47);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(422, 62);
					adaptor.AddChild(root_1, (object)adaptor.Create(T_COUNT, "T_COUNT"));
					DebugLocation(422, 70);
					adaptor.AddChild(root_1, stream_all_columns.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:423:4: COUNT ( WS )? '(' ( WS )? DISTINCT WS all_columns ( WS )? ')'
				{
				DebugLocation(423, 4);
				COUNT336=(IToken)Match(input,COUNT,Follow._COUNT_in_functioncall_or_column2763); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COUNT.Add(COUNT336);

				DebugLocation(423, 10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:423:10: ( WS )?
				int alt118=2;
				try { DebugEnterSubRule(118);
				try { DebugEnterDecision(118, decisionCanBacktrack[118]);
				int LA118_0 = input.LA(1);

				if ((LA118_0==WS))
				{
					alt118 = 1;
				}
				} finally { DebugExitDecision(118); }
				switch (alt118)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:423:10: WS
					{
					DebugLocation(423, 10);
					WS337=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2765); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS337);


					}
					break;

				}
				} finally { DebugExitSubRule(118); }

				DebugLocation(423, 14);
				char_literal338=(IToken)Match(input,167,Follow._167_in_functioncall_or_column2768); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_167.Add(char_literal338);

				DebugLocation(423, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:423:18: ( WS )?
				int alt119=2;
				try { DebugEnterSubRule(119);
				try { DebugEnterDecision(119, decisionCanBacktrack[119]);
				int LA119_0 = input.LA(1);

				if ((LA119_0==WS))
				{
					alt119 = 1;
				}
				} finally { DebugExitDecision(119); }
				switch (alt119)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:423:18: WS
					{
					DebugLocation(423, 18);
					WS339=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2770); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS339);


					}
					break;

				}
				} finally { DebugExitSubRule(119); }

				DebugLocation(423, 22);
				DISTINCT340=(IToken)Match(input,DISTINCT,Follow._DISTINCT_in_functioncall_or_column2773); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DISTINCT.Add(DISTINCT340);

				DebugLocation(423, 31);
				WS341=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2775); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS341);

				DebugLocation(423, 34);
				PushFollow(Follow._all_columns_in_functioncall_or_column2777);
				all_columns342=all_columns();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_all_columns.Add(all_columns342.Tree);
				DebugLocation(423, 46);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:423:46: ( WS )?
				int alt120=2;
				try { DebugEnterSubRule(120);
				try { DebugEnterDecision(120, decisionCanBacktrack[120]);
				int LA120_0 = input.LA(1);

				if ((LA120_0==WS))
				{
					alt120 = 1;
				}
				} finally { DebugExitDecision(120); }
				switch (alt120)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:423:46: WS
					{
					DebugLocation(423, 46);
					WS343=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2779); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS343);


					}
					break;

				}
				} finally { DebugExitSubRule(120); }

				DebugLocation(423, 50);
				char_literal344=(IToken)Match(input,168,Follow._168_in_functioncall_or_column2782); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_168.Add(char_literal344);



				{
				// AST REWRITE
				// elements: all_columns
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 423:54: -> ^( T_FUNCTIONCALL T_DISTINCTCOUNT all_columns )
				{
					DebugLocation(423, 57);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:423:57: ^( T_FUNCTIONCALL T_DISTINCTCOUNT all_columns )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(423, 59);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(423, 74);
					adaptor.AddChild(root_1, (object)adaptor.Create(T_DISTINCTCOUNT, "T_DISTINCTCOUNT"));
					DebugLocation(423, 90);
					adaptor.AddChild(root_1, stream_all_columns.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:425:4: ( table_alias ( WS )? '.' ( WS )? )? column_name
				{
				DebugLocation(425, 4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:425:4: ( table_alias ( WS )? '.' ( WS )? )?
				int alt123=2;
				try { DebugEnterSubRule(123);
				try { DebugEnterDecision(123, decisionCanBacktrack[123]);
				int LA123_0 = input.LA(1);

				if ((LA123_0==SIMPLE_FILE))
				{
					int LA123_1 = input.LA(2);

					if ((LA123_1==WS))
					{
						int LA123_2 = input.LA(3);

						if ((LA123_2==173))
						{
							alt123 = 1;
						}
					}
					else if ((LA123_1==173))
					{
						alt123 = 1;
					}
				}
				} finally { DebugExitDecision(123); }
				switch (alt123)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:425:5: table_alias ( WS )? '.' ( WS )?
					{
					DebugLocation(425, 5);
					PushFollow(Follow._table_alias_in_functioncall_or_column2800);
					table_alias345=table_alias();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_table_alias.Add(table_alias345.Tree);
					DebugLocation(425, 17);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:425:17: ( WS )?
					int alt121=2;
					try { DebugEnterSubRule(121);
					try { DebugEnterDecision(121, decisionCanBacktrack[121]);
					int LA121_0 = input.LA(1);

					if ((LA121_0==WS))
					{
						alt121 = 1;
					}
					} finally { DebugExitDecision(121); }
					switch (alt121)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:425:17: WS
						{
						DebugLocation(425, 17);
						WS346=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2802); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS346);


						}
						break;

					}
					} finally { DebugExitSubRule(121); }

					DebugLocation(425, 21);
					char_literal347=(IToken)Match(input,173,Follow._173_in_functioncall_or_column2805); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_173.Add(char_literal347);

					DebugLocation(425, 25);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:425:25: ( WS )?
					int alt122=2;
					try { DebugEnterSubRule(122);
					try { DebugEnterDecision(122, decisionCanBacktrack[122]);
					int LA122_0 = input.LA(1);

					if ((LA122_0==WS))
					{
						alt122 = 1;
					}
					} finally { DebugExitDecision(122); }
					switch (alt122)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:425:25: WS
						{
						DebugLocation(425, 25);
						WS348=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2807); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS348);


						}
						break;

					}
					} finally { DebugExitSubRule(122); }


					}
					break;

				}
				} finally { DebugExitSubRule(123); }

				DebugLocation(425, 31);
				PushFollow(Follow._column_name_in_functioncall_or_column2812);
				column_name349=column_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_column_name.Add(column_name349.Tree);


				{
				// AST REWRITE
				// elements: table_alias, column_name
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 425:43: -> ^( T_COLUMN column_name ( table_alias )? )
				{
					DebugLocation(425, 46);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:425:46: ^( T_COLUMN column_name ( table_alias )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(425, 48);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_COLUMN, "T_COLUMN"), root_1);

					DebugLocation(425, 57);
					adaptor.AddChild(root_1, stream_column_name.NextTree());
					DebugLocation(425, 69);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:425:69: ( table_alias )?
					if (stream_table_alias.HasNext)
					{
						DebugLocation(425, 69);
						adaptor.AddChild(root_1, stream_table_alias.NextTree());

					}
					stream_table_alias.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("functioncall_or_column", 55);
			LeaveRule("functioncall_or_column", 55);
			LeaveRule_functioncall_or_column();
	    }
	 	DebugLocation(426, 1);
		} finally { DebugExitRule(GrammarFileName, "functioncall_or_column"); }
		return retval;

	}
	// $ANTLR end "functioncall_or_column"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_column_name() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_column_name() {}

	// $ANTLR start "column_name"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:428:1: column_name : SIMPLE_FILE ;
	[GrammarRule("column_name")]
	private AstParserRuleReturnScope<object, IToken> column_name()
	{
		EnterRule_column_name();
		EnterRule("column_name", 56);
		TraceIn("column_name", 56);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken SIMPLE_FILE350 = default(IToken);

	    object SIMPLE_FILE350_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "column_name");
		DebugLocation(428, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:429:2: ( SIMPLE_FILE )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:429:4: SIMPLE_FILE
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(429, 4);
			SIMPLE_FILE350=(IToken)Match(input,SIMPLE_FILE,Follow._SIMPLE_FILE_in_column_name2835); if (state.failed) return retval;
			if (state.backtracking == 0) {
			SIMPLE_FILE350_tree = (object)adaptor.Create(SIMPLE_FILE350);
			adaptor.AddChild(root_0, SIMPLE_FILE350_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("column_name", 56);
			LeaveRule("column_name", 56);
			LeaveRule_column_name();
	    }
	 	DebugLocation(430, 1);
		} finally { DebugExitRule(GrammarFileName, "column_name"); }
		return retval;

	}
	// $ANTLR end "column_name"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_table_alias() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_table_alias() {}

	// $ANTLR start "table_alias"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:432:1: table_alias : SIMPLE_FILE -> ^( T_TABLE_ALIAS SIMPLE_FILE ) ;
	[GrammarRule("table_alias")]
	private AstParserRuleReturnScope<object, IToken> table_alias()
	{
		EnterRule_table_alias();
		EnterRule("table_alias", 57);
		TraceIn("table_alias", 57);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken SIMPLE_FILE351 = default(IToken);

	    object SIMPLE_FILE351_tree = default(object);
	    RewriteRuleITokenStream stream_SIMPLE_FILE=new RewriteRuleITokenStream(adaptor,"token SIMPLE_FILE");

		try { DebugEnterRule(GrammarFileName, "table_alias");
		DebugLocation(432, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:433:2: ( SIMPLE_FILE -> ^( T_TABLE_ALIAS SIMPLE_FILE ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:433:4: SIMPLE_FILE
			{
			DebugLocation(433, 4);
			SIMPLE_FILE351=(IToken)Match(input,SIMPLE_FILE,Follow._SIMPLE_FILE_in_table_alias2846); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_SIMPLE_FILE.Add(SIMPLE_FILE351);



			{
			// AST REWRITE
			// elements: SIMPLE_FILE
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 433:16: -> ^( T_TABLE_ALIAS SIMPLE_FILE )
			{
				DebugLocation(433, 19);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:433:19: ^( T_TABLE_ALIAS SIMPLE_FILE )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(433, 21);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_TABLE_ALIAS, "T_TABLE_ALIAS"), root_1);

				DebugLocation(433, 35);
				adaptor.AddChild(root_1, stream_SIMPLE_FILE.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("table_alias", 57);
			LeaveRule("table_alias", 57);
			LeaveRule_table_alias();
	    }
	 	DebugLocation(434, 1);
		} finally { DebugExitRule(GrammarFileName, "table_alias"); }
		return retval;

	}
	// $ANTLR end "table_alias"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_specialfunctioncall() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_specialfunctioncall() {}

	// $ANTLR start "specialfunctioncall"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:436:1: specialfunctioncall : ( CONVERT ( WS )? '(' ( WS )? TOKEN ( WS )? ',' ( WS )? expression ( WS )? ( ',' ( WS )? STRING ( WS )? )? ')' -> ^( T_CONVERT TOKEN expression ( STRING )? ) | CAST ( WS )? '(' ( WS )? expression WS AS WS datatype ( WS )? ')' -> ^( T_CONVERT TOKEN expression ) | DATEADD ( WS )? '(' ( WS )? datepart ( WS )? ',' ( WS )? expression ( WS )? ',' ( WS )? expression ( WS )? ')' -> ^( T_FUNCTIONCALL DATEADD datepart ( expression )+ ) | DATEDIFF ( WS )? '(' ( WS )? datepart ( WS )? ',' ( WS )? expression ( WS )? ',' ( WS )? expression ( WS )? ')' -> ^( T_FUNCTIONCALL DATEDIFF datepart ( expression )+ ) | DATEPART ( WS )? '(' ( WS )? datepart ( WS )? ',' ( WS )? expression ( WS )? ')' -> ^( T_FUNCTIONCALL DATEPART datepart expression ) );
	[GrammarRule("specialfunctioncall")]
	private AstParserRuleReturnScope<object, IToken> specialfunctioncall()
	{
		EnterRule_specialfunctioncall();
		EnterRule("specialfunctioncall", 58);
		TraceIn("specialfunctioncall", 58);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken CONVERT352 = default(IToken);
	    IToken WS353 = default(IToken);
	    IToken char_literal354 = default(IToken);
	    IToken WS355 = default(IToken);
	    IToken TOKEN356 = default(IToken);
	    IToken WS357 = default(IToken);
	    IToken char_literal358 = default(IToken);
	    IToken WS359 = default(IToken);
	    IToken WS361 = default(IToken);
	    IToken char_literal362 = default(IToken);
	    IToken WS363 = default(IToken);
	    IToken STRING364 = default(IToken);
	    IToken WS365 = default(IToken);
	    IToken char_literal366 = default(IToken);
	    IToken CAST367 = default(IToken);
	    IToken WS368 = default(IToken);
	    IToken char_literal369 = default(IToken);
	    IToken WS370 = default(IToken);
	    IToken WS372 = default(IToken);
	    IToken AS373 = default(IToken);
	    IToken WS374 = default(IToken);
	    IToken WS376 = default(IToken);
	    IToken char_literal377 = default(IToken);
	    IToken DATEADD378 = default(IToken);
	    IToken WS379 = default(IToken);
	    IToken char_literal380 = default(IToken);
	    IToken WS381 = default(IToken);
	    IToken WS383 = default(IToken);
	    IToken char_literal384 = default(IToken);
	    IToken WS385 = default(IToken);
	    IToken WS387 = default(IToken);
	    IToken char_literal388 = default(IToken);
	    IToken WS389 = default(IToken);
	    IToken WS391 = default(IToken);
	    IToken char_literal392 = default(IToken);
	    IToken DATEDIFF393 = default(IToken);
	    IToken WS394 = default(IToken);
	    IToken char_literal395 = default(IToken);
	    IToken WS396 = default(IToken);
	    IToken WS398 = default(IToken);
	    IToken char_literal399 = default(IToken);
	    IToken WS400 = default(IToken);
	    IToken WS402 = default(IToken);
	    IToken char_literal403 = default(IToken);
	    IToken WS404 = default(IToken);
	    IToken WS406 = default(IToken);
	    IToken char_literal407 = default(IToken);
	    IToken DATEPART408 = default(IToken);
	    IToken WS409 = default(IToken);
	    IToken char_literal410 = default(IToken);
	    IToken WS411 = default(IToken);
	    IToken WS413 = default(IToken);
	    IToken char_literal414 = default(IToken);
	    IToken WS415 = default(IToken);
	    IToken WS417 = default(IToken);
	    IToken char_literal418 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression360 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression371 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> datatype375 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> datepart382 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression386 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression390 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> datepart397 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression401 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression405 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> datepart412 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression416 = default(AstParserRuleReturnScope<object, IToken>);

	    object CONVERT352_tree = default(object);
	    object WS353_tree = default(object);
	    object char_literal354_tree = default(object);
	    object WS355_tree = default(object);
	    object TOKEN356_tree = default(object);
	    object WS357_tree = default(object);
	    object char_literal358_tree = default(object);
	    object WS359_tree = default(object);
	    object WS361_tree = default(object);
	    object char_literal362_tree = default(object);
	    object WS363_tree = default(object);
	    object STRING364_tree = default(object);
	    object WS365_tree = default(object);
	    object char_literal366_tree = default(object);
	    object CAST367_tree = default(object);
	    object WS368_tree = default(object);
	    object char_literal369_tree = default(object);
	    object WS370_tree = default(object);
	    object WS372_tree = default(object);
	    object AS373_tree = default(object);
	    object WS374_tree = default(object);
	    object WS376_tree = default(object);
	    object char_literal377_tree = default(object);
	    object DATEADD378_tree = default(object);
	    object WS379_tree = default(object);
	    object char_literal380_tree = default(object);
	    object WS381_tree = default(object);
	    object WS383_tree = default(object);
	    object char_literal384_tree = default(object);
	    object WS385_tree = default(object);
	    object WS387_tree = default(object);
	    object char_literal388_tree = default(object);
	    object WS389_tree = default(object);
	    object WS391_tree = default(object);
	    object char_literal392_tree = default(object);
	    object DATEDIFF393_tree = default(object);
	    object WS394_tree = default(object);
	    object char_literal395_tree = default(object);
	    object WS396_tree = default(object);
	    object WS398_tree = default(object);
	    object char_literal399_tree = default(object);
	    object WS400_tree = default(object);
	    object WS402_tree = default(object);
	    object char_literal403_tree = default(object);
	    object WS404_tree = default(object);
	    object WS406_tree = default(object);
	    object char_literal407_tree = default(object);
	    object DATEPART408_tree = default(object);
	    object WS409_tree = default(object);
	    object char_literal410_tree = default(object);
	    object WS411_tree = default(object);
	    object WS413_tree = default(object);
	    object char_literal414_tree = default(object);
	    object WS415_tree = default(object);
	    object WS417_tree = default(object);
	    object char_literal418_tree = default(object);
	    RewriteRuleITokenStream stream_CAST=new RewriteRuleITokenStream(adaptor,"token CAST");
	    RewriteRuleITokenStream stream_AS=new RewriteRuleITokenStream(adaptor,"token AS");
	    RewriteRuleITokenStream stream_171=new RewriteRuleITokenStream(adaptor,"token 171");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_DATEPART=new RewriteRuleITokenStream(adaptor,"token DATEPART");
	    RewriteRuleITokenStream stream_DATEADD=new RewriteRuleITokenStream(adaptor,"token DATEADD");
	    RewriteRuleITokenStream stream_CONVERT=new RewriteRuleITokenStream(adaptor,"token CONVERT");
	    RewriteRuleITokenStream stream_DATEDIFF=new RewriteRuleITokenStream(adaptor,"token DATEDIFF");
	    RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
	    RewriteRuleITokenStream stream_168=new RewriteRuleITokenStream(adaptor,"token 168");
	    RewriteRuleITokenStream stream_TOKEN=new RewriteRuleITokenStream(adaptor,"token TOKEN");
	    RewriteRuleITokenStream stream_167=new RewriteRuleITokenStream(adaptor,"token 167");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_datatype=new RewriteRuleSubtreeStream(adaptor,"rule datatype");
	    RewriteRuleSubtreeStream stream_datepart=new RewriteRuleSubtreeStream(adaptor,"rule datepart");
		try { DebugEnterRule(GrammarFileName, "specialfunctioncall");
		DebugLocation(436, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:437:2: ( CONVERT ( WS )? '(' ( WS )? TOKEN ( WS )? ',' ( WS )? expression ( WS )? ( ',' ( WS )? STRING ( WS )? )? ')' -> ^( T_CONVERT TOKEN expression ( STRING )? ) | CAST ( WS )? '(' ( WS )? expression WS AS WS datatype ( WS )? ')' -> ^( T_CONVERT TOKEN expression ) | DATEADD ( WS )? '(' ( WS )? datepart ( WS )? ',' ( WS )? expression ( WS )? ',' ( WS )? expression ( WS )? ')' -> ^( T_FUNCTIONCALL DATEADD datepart ( expression )+ ) | DATEDIFF ( WS )? '(' ( WS )? datepart ( WS )? ',' ( WS )? expression ( WS )? ',' ( WS )? expression ( WS )? ')' -> ^( T_FUNCTIONCALL DATEDIFF datepart ( expression )+ ) | DATEPART ( WS )? '(' ( WS )? datepart ( WS )? ',' ( WS )? expression ( WS )? ')' -> ^( T_FUNCTIONCALL DATEPART datepart expression ) )
			int alt155=5;
			try { DebugEnterDecision(155, decisionCanBacktrack[155]);
			switch (input.LA(1))
			{
			case CONVERT:
				{
				alt155 = 1;
				}
				break;
			case CAST:
				{
				alt155 = 2;
				}
				break;
			case DATEADD:
				{
				alt155 = 3;
				}
				break;
			case DATEDIFF:
				{
				alt155 = 4;
				}
				break;
			case DATEPART:
				{
				alt155 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 155, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(155); }
			switch (alt155)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:437:4: CONVERT ( WS )? '(' ( WS )? TOKEN ( WS )? ',' ( WS )? expression ( WS )? ( ',' ( WS )? STRING ( WS )? )? ')'
				{
				DebugLocation(437, 4);
				CONVERT352=(IToken)Match(input,CONVERT,Follow._CONVERT_in_specialfunctioncall2866); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CONVERT.Add(CONVERT352);

				DebugLocation(437, 12);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:437:12: ( WS )?
				int alt125=2;
				try { DebugEnterSubRule(125);
				try { DebugEnterDecision(125, decisionCanBacktrack[125]);
				int LA125_0 = input.LA(1);

				if ((LA125_0==WS))
				{
					alt125 = 1;
				}
				} finally { DebugExitDecision(125); }
				switch (alt125)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:437:12: WS
					{
					DebugLocation(437, 12);
					WS353=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2868); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS353);


					}
					break;

				}
				} finally { DebugExitSubRule(125); }

				DebugLocation(437, 16);
				char_literal354=(IToken)Match(input,167,Follow._167_in_specialfunctioncall2871); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_167.Add(char_literal354);

				DebugLocation(437, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:437:20: ( WS )?
				int alt126=2;
				try { DebugEnterSubRule(126);
				try { DebugEnterDecision(126, decisionCanBacktrack[126]);
				int LA126_0 = input.LA(1);

				if ((LA126_0==WS))
				{
					alt126 = 1;
				}
				} finally { DebugExitDecision(126); }
				switch (alt126)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:437:20: WS
					{
					DebugLocation(437, 20);
					WS355=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2873); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS355);


					}
					break;

				}
				} finally { DebugExitSubRule(126); }

				DebugLocation(437, 24);
				TOKEN356=(IToken)Match(input,TOKEN,Follow._TOKEN_in_specialfunctioncall2876); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TOKEN.Add(TOKEN356);

				DebugLocation(437, 30);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:437:30: ( WS )?
				int alt127=2;
				try { DebugEnterSubRule(127);
				try { DebugEnterDecision(127, decisionCanBacktrack[127]);
				int LA127_0 = input.LA(1);

				if ((LA127_0==WS))
				{
					alt127 = 1;
				}
				} finally { DebugExitDecision(127); }
				switch (alt127)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:437:30: WS
					{
					DebugLocation(437, 30);
					WS357=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2878); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS357);


					}
					break;

				}
				} finally { DebugExitSubRule(127); }

				DebugLocation(437, 34);
				char_literal358=(IToken)Match(input,171,Follow._171_in_specialfunctioncall2881); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_171.Add(char_literal358);

				DebugLocation(437, 38);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:437:38: ( WS )?
				int alt128=2;
				try { DebugEnterSubRule(128);
				try { DebugEnterDecision(128, decisionCanBacktrack[128]);
				int LA128_0 = input.LA(1);

				if ((LA128_0==WS))
				{
					alt128 = 1;
				}
				} finally { DebugExitDecision(128); }
				switch (alt128)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:437:38: WS
					{
					DebugLocation(437, 38);
					WS359=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2883); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS359);


					}
					break;

				}
				} finally { DebugExitSubRule(128); }

				DebugLocation(437, 42);
				PushFollow(Follow._expression_in_specialfunctioncall2886);
				expression360=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression360.Tree);
				DebugLocation(437, 53);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:437:53: ( WS )?
				int alt129=2;
				try { DebugEnterSubRule(129);
				try { DebugEnterDecision(129, decisionCanBacktrack[129]);
				int LA129_0 = input.LA(1);

				if ((LA129_0==WS))
				{
					alt129 = 1;
				}
				} finally { DebugExitDecision(129); }
				switch (alt129)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:437:53: WS
					{
					DebugLocation(437, 53);
					WS361=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2888); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS361);


					}
					break;

				}
				} finally { DebugExitSubRule(129); }

				DebugLocation(437, 57);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:437:57: ( ',' ( WS )? STRING ( WS )? )?
				int alt132=2;
				try { DebugEnterSubRule(132);
				try { DebugEnterDecision(132, decisionCanBacktrack[132]);
				int LA132_0 = input.LA(1);

				if ((LA132_0==171))
				{
					alt132 = 1;
				}
				} finally { DebugExitDecision(132); }
				switch (alt132)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:437:58: ',' ( WS )? STRING ( WS )?
					{
					DebugLocation(437, 58);
					char_literal362=(IToken)Match(input,171,Follow._171_in_specialfunctioncall2892); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_171.Add(char_literal362);

					DebugLocation(437, 62);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:437:62: ( WS )?
					int alt130=2;
					try { DebugEnterSubRule(130);
					try { DebugEnterDecision(130, decisionCanBacktrack[130]);
					int LA130_0 = input.LA(1);

					if ((LA130_0==WS))
					{
						alt130 = 1;
					}
					} finally { DebugExitDecision(130); }
					switch (alt130)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:437:62: WS
						{
						DebugLocation(437, 62);
						WS363=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2894); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS363);


						}
						break;

					}
					} finally { DebugExitSubRule(130); }

					DebugLocation(437, 66);
					STRING364=(IToken)Match(input,STRING,Follow._STRING_in_specialfunctioncall2897); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_STRING.Add(STRING364);

					DebugLocation(437, 73);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:437:73: ( WS )?
					int alt131=2;
					try { DebugEnterSubRule(131);
					try { DebugEnterDecision(131, decisionCanBacktrack[131]);
					int LA131_0 = input.LA(1);

					if ((LA131_0==WS))
					{
						alt131 = 1;
					}
					} finally { DebugExitDecision(131); }
					switch (alt131)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:437:73: WS
						{
						DebugLocation(437, 73);
						WS365=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2899); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS365);


						}
						break;

					}
					} finally { DebugExitSubRule(131); }


					}
					break;

				}
				} finally { DebugExitSubRule(132); }

				DebugLocation(437, 79);
				char_literal366=(IToken)Match(input,168,Follow._168_in_specialfunctioncall2904); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_168.Add(char_literal366);



				{
				// AST REWRITE
				// elements: TOKEN, expression, STRING
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 437:83: -> ^( T_CONVERT TOKEN expression ( STRING )? )
				{
					DebugLocation(437, 86);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:437:86: ^( T_CONVERT TOKEN expression ( STRING )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(437, 88);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CONVERT, "T_CONVERT"), root_1);

					DebugLocation(437, 98);
					adaptor.AddChild(root_1, stream_TOKEN.NextNode());
					DebugLocation(437, 104);
					adaptor.AddChild(root_1, stream_expression.NextTree());
					DebugLocation(437, 115);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:437:115: ( STRING )?
					if (stream_STRING.HasNext)
					{
						DebugLocation(437, 115);
						adaptor.AddChild(root_1, stream_STRING.NextNode());

					}
					stream_STRING.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:438:4: CAST ( WS )? '(' ( WS )? expression WS AS WS datatype ( WS )? ')'
				{
				DebugLocation(438, 4);
				CAST367=(IToken)Match(input,CAST,Follow._CAST_in_specialfunctioncall2922); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CAST.Add(CAST367);

				DebugLocation(438, 9);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:438:9: ( WS )?
				int alt133=2;
				try { DebugEnterSubRule(133);
				try { DebugEnterDecision(133, decisionCanBacktrack[133]);
				int LA133_0 = input.LA(1);

				if ((LA133_0==WS))
				{
					alt133 = 1;
				}
				} finally { DebugExitDecision(133); }
				switch (alt133)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:438:9: WS
					{
					DebugLocation(438, 9);
					WS368=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2924); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS368);


					}
					break;

				}
				} finally { DebugExitSubRule(133); }

				DebugLocation(438, 13);
				char_literal369=(IToken)Match(input,167,Follow._167_in_specialfunctioncall2927); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_167.Add(char_literal369);

				DebugLocation(438, 17);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:438:17: ( WS )?
				int alt134=2;
				try { DebugEnterSubRule(134);
				try { DebugEnterDecision(134, decisionCanBacktrack[134]);
				int LA134_0 = input.LA(1);

				if ((LA134_0==WS))
				{
					alt134 = 1;
				}
				} finally { DebugExitDecision(134); }
				switch (alt134)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:438:17: WS
					{
					DebugLocation(438, 17);
					WS370=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2929); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS370);


					}
					break;

				}
				} finally { DebugExitSubRule(134); }

				DebugLocation(438, 21);
				PushFollow(Follow._expression_in_specialfunctioncall2932);
				expression371=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression371.Tree);
				DebugLocation(438, 32);
				WS372=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2934); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS372);

				DebugLocation(438, 35);
				AS373=(IToken)Match(input,AS,Follow._AS_in_specialfunctioncall2936); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_AS.Add(AS373);

				DebugLocation(438, 38);
				WS374=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2938); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS374);

				DebugLocation(438, 41);
				PushFollow(Follow._datatype_in_specialfunctioncall2940);
				datatype375=datatype();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_datatype.Add(datatype375.Tree);
				DebugLocation(438, 50);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:438:50: ( WS )?
				int alt135=2;
				try { DebugEnterSubRule(135);
				try { DebugEnterDecision(135, decisionCanBacktrack[135]);
				int LA135_0 = input.LA(1);

				if ((LA135_0==WS))
				{
					alt135 = 1;
				}
				} finally { DebugExitDecision(135); }
				switch (alt135)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:438:50: WS
					{
					DebugLocation(438, 50);
					WS376=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2942); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS376);


					}
					break;

				}
				} finally { DebugExitSubRule(135); }

				DebugLocation(438, 54);
				char_literal377=(IToken)Match(input,168,Follow._168_in_specialfunctioncall2945); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_168.Add(char_literal377);



				{
				// AST REWRITE
				// elements: expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 438:58: -> ^( T_CONVERT TOKEN expression )
				{
					DebugLocation(438, 61);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:438:61: ^( T_CONVERT TOKEN expression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(438, 63);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CONVERT, "T_CONVERT"), root_1);

					DebugLocation(438, 73);
					adaptor.AddChild(root_1, (object)adaptor.Create(TOKEN, "TOKEN"));
					DebugLocation(438, 79);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:439:4: DATEADD ( WS )? '(' ( WS )? datepart ( WS )? ',' ( WS )? expression ( WS )? ',' ( WS )? expression ( WS )? ')'
				{
				DebugLocation(439, 4);
				DATEADD378=(IToken)Match(input,DATEADD,Follow._DATEADD_in_specialfunctioncall2960); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DATEADD.Add(DATEADD378);

				DebugLocation(439, 12);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:439:12: ( WS )?
				int alt136=2;
				try { DebugEnterSubRule(136);
				try { DebugEnterDecision(136, decisionCanBacktrack[136]);
				int LA136_0 = input.LA(1);

				if ((LA136_0==WS))
				{
					alt136 = 1;
				}
				} finally { DebugExitDecision(136); }
				switch (alt136)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:439:12: WS
					{
					DebugLocation(439, 12);
					WS379=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2962); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS379);


					}
					break;

				}
				} finally { DebugExitSubRule(136); }

				DebugLocation(439, 16);
				char_literal380=(IToken)Match(input,167,Follow._167_in_specialfunctioncall2965); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_167.Add(char_literal380);

				DebugLocation(439, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:439:20: ( WS )?
				int alt137=2;
				try { DebugEnterSubRule(137);
				try { DebugEnterDecision(137, decisionCanBacktrack[137]);
				int LA137_0 = input.LA(1);

				if ((LA137_0==WS))
				{
					alt137 = 1;
				}
				} finally { DebugExitDecision(137); }
				switch (alt137)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:439:20: WS
					{
					DebugLocation(439, 20);
					WS381=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2967); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS381);


					}
					break;

				}
				} finally { DebugExitSubRule(137); }

				DebugLocation(439, 24);
				PushFollow(Follow._datepart_in_specialfunctioncall2970);
				datepart382=datepart();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_datepart.Add(datepart382.Tree);
				DebugLocation(439, 33);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:439:33: ( WS )?
				int alt138=2;
				try { DebugEnterSubRule(138);
				try { DebugEnterDecision(138, decisionCanBacktrack[138]);
				int LA138_0 = input.LA(1);

				if ((LA138_0==WS))
				{
					alt138 = 1;
				}
				} finally { DebugExitDecision(138); }
				switch (alt138)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:439:33: WS
					{
					DebugLocation(439, 33);
					WS383=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2972); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS383);


					}
					break;

				}
				} finally { DebugExitSubRule(138); }

				DebugLocation(439, 37);
				char_literal384=(IToken)Match(input,171,Follow._171_in_specialfunctioncall2975); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_171.Add(char_literal384);

				DebugLocation(439, 41);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:439:41: ( WS )?
				int alt139=2;
				try { DebugEnterSubRule(139);
				try { DebugEnterDecision(139, decisionCanBacktrack[139]);
				int LA139_0 = input.LA(1);

				if ((LA139_0==WS))
				{
					alt139 = 1;
				}
				} finally { DebugExitDecision(139); }
				switch (alt139)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:439:41: WS
					{
					DebugLocation(439, 41);
					WS385=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2977); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS385);


					}
					break;

				}
				} finally { DebugExitSubRule(139); }

				DebugLocation(439, 45);
				PushFollow(Follow._expression_in_specialfunctioncall2980);
				expression386=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression386.Tree);
				DebugLocation(439, 56);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:439:56: ( WS )?
				int alt140=2;
				try { DebugEnterSubRule(140);
				try { DebugEnterDecision(140, decisionCanBacktrack[140]);
				int LA140_0 = input.LA(1);

				if ((LA140_0==WS))
				{
					alt140 = 1;
				}
				} finally { DebugExitDecision(140); }
				switch (alt140)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:439:56: WS
					{
					DebugLocation(439, 56);
					WS387=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2982); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS387);


					}
					break;

				}
				} finally { DebugExitSubRule(140); }

				DebugLocation(439, 60);
				char_literal388=(IToken)Match(input,171,Follow._171_in_specialfunctioncall2985); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_171.Add(char_literal388);

				DebugLocation(439, 64);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:439:64: ( WS )?
				int alt141=2;
				try { DebugEnterSubRule(141);
				try { DebugEnterDecision(141, decisionCanBacktrack[141]);
				int LA141_0 = input.LA(1);

				if ((LA141_0==WS))
				{
					alt141 = 1;
				}
				} finally { DebugExitDecision(141); }
				switch (alt141)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:439:64: WS
					{
					DebugLocation(439, 64);
					WS389=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2987); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS389);


					}
					break;

				}
				} finally { DebugExitSubRule(141); }

				DebugLocation(439, 68);
				PushFollow(Follow._expression_in_specialfunctioncall2990);
				expression390=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression390.Tree);
				DebugLocation(439, 79);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:439:79: ( WS )?
				int alt142=2;
				try { DebugEnterSubRule(142);
				try { DebugEnterDecision(142, decisionCanBacktrack[142]);
				int LA142_0 = input.LA(1);

				if ((LA142_0==WS))
				{
					alt142 = 1;
				}
				} finally { DebugExitDecision(142); }
				switch (alt142)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:439:79: WS
					{
					DebugLocation(439, 79);
					WS391=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2992); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS391);


					}
					break;

				}
				} finally { DebugExitSubRule(142); }

				DebugLocation(439, 83);
				char_literal392=(IToken)Match(input,168,Follow._168_in_specialfunctioncall2995); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_168.Add(char_literal392);



				{
				// AST REWRITE
				// elements: expression, DATEADD, datepart
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 439:87: -> ^( T_FUNCTIONCALL DATEADD datepart ( expression )+ )
				{
					DebugLocation(439, 90);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:439:90: ^( T_FUNCTIONCALL DATEADD datepart ( expression )+ )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(439, 92);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(439, 107);
					adaptor.AddChild(root_1, stream_DATEADD.NextNode());
					DebugLocation(439, 115);
					adaptor.AddChild(root_1, stream_datepart.NextTree());
					DebugLocation(439, 124);
					if (!(stream_expression.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expression.HasNext )
					{
						DebugLocation(439, 124);
						adaptor.AddChild(root_1, stream_expression.NextTree());

					}
					stream_expression.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:440:4: DATEDIFF ( WS )? '(' ( WS )? datepart ( WS )? ',' ( WS )? expression ( WS )? ',' ( WS )? expression ( WS )? ')'
				{
				DebugLocation(440, 4);
				DATEDIFF393=(IToken)Match(input,DATEDIFF,Follow._DATEDIFF_in_specialfunctioncall3013); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DATEDIFF.Add(DATEDIFF393);

				DebugLocation(440, 13);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:440:13: ( WS )?
				int alt143=2;
				try { DebugEnterSubRule(143);
				try { DebugEnterDecision(143, decisionCanBacktrack[143]);
				int LA143_0 = input.LA(1);

				if ((LA143_0==WS))
				{
					alt143 = 1;
				}
				} finally { DebugExitDecision(143); }
				switch (alt143)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:440:13: WS
					{
					DebugLocation(440, 13);
					WS394=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3015); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS394);


					}
					break;

				}
				} finally { DebugExitSubRule(143); }

				DebugLocation(440, 17);
				char_literal395=(IToken)Match(input,167,Follow._167_in_specialfunctioncall3018); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_167.Add(char_literal395);

				DebugLocation(440, 21);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:440:21: ( WS )?
				int alt144=2;
				try { DebugEnterSubRule(144);
				try { DebugEnterDecision(144, decisionCanBacktrack[144]);
				int LA144_0 = input.LA(1);

				if ((LA144_0==WS))
				{
					alt144 = 1;
				}
				} finally { DebugExitDecision(144); }
				switch (alt144)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:440:21: WS
					{
					DebugLocation(440, 21);
					WS396=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3020); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS396);


					}
					break;

				}
				} finally { DebugExitSubRule(144); }

				DebugLocation(440, 25);
				PushFollow(Follow._datepart_in_specialfunctioncall3023);
				datepart397=datepart();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_datepart.Add(datepart397.Tree);
				DebugLocation(440, 34);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:440:34: ( WS )?
				int alt145=2;
				try { DebugEnterSubRule(145);
				try { DebugEnterDecision(145, decisionCanBacktrack[145]);
				int LA145_0 = input.LA(1);

				if ((LA145_0==WS))
				{
					alt145 = 1;
				}
				} finally { DebugExitDecision(145); }
				switch (alt145)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:440:34: WS
					{
					DebugLocation(440, 34);
					WS398=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3025); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS398);


					}
					break;

				}
				} finally { DebugExitSubRule(145); }

				DebugLocation(440, 38);
				char_literal399=(IToken)Match(input,171,Follow._171_in_specialfunctioncall3028); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_171.Add(char_literal399);

				DebugLocation(440, 42);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:440:42: ( WS )?
				int alt146=2;
				try { DebugEnterSubRule(146);
				try { DebugEnterDecision(146, decisionCanBacktrack[146]);
				int LA146_0 = input.LA(1);

				if ((LA146_0==WS))
				{
					alt146 = 1;
				}
				} finally { DebugExitDecision(146); }
				switch (alt146)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:440:42: WS
					{
					DebugLocation(440, 42);
					WS400=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3030); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS400);


					}
					break;

				}
				} finally { DebugExitSubRule(146); }

				DebugLocation(440, 46);
				PushFollow(Follow._expression_in_specialfunctioncall3033);
				expression401=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression401.Tree);
				DebugLocation(440, 57);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:440:57: ( WS )?
				int alt147=2;
				try { DebugEnterSubRule(147);
				try { DebugEnterDecision(147, decisionCanBacktrack[147]);
				int LA147_0 = input.LA(1);

				if ((LA147_0==WS))
				{
					alt147 = 1;
				}
				} finally { DebugExitDecision(147); }
				switch (alt147)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:440:57: WS
					{
					DebugLocation(440, 57);
					WS402=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3035); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS402);


					}
					break;

				}
				} finally { DebugExitSubRule(147); }

				DebugLocation(440, 61);
				char_literal403=(IToken)Match(input,171,Follow._171_in_specialfunctioncall3038); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_171.Add(char_literal403);

				DebugLocation(440, 65);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:440:65: ( WS )?
				int alt148=2;
				try { DebugEnterSubRule(148);
				try { DebugEnterDecision(148, decisionCanBacktrack[148]);
				int LA148_0 = input.LA(1);

				if ((LA148_0==WS))
				{
					alt148 = 1;
				}
				} finally { DebugExitDecision(148); }
				switch (alt148)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:440:65: WS
					{
					DebugLocation(440, 65);
					WS404=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3040); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS404);


					}
					break;

				}
				} finally { DebugExitSubRule(148); }

				DebugLocation(440, 69);
				PushFollow(Follow._expression_in_specialfunctioncall3043);
				expression405=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression405.Tree);
				DebugLocation(440, 80);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:440:80: ( WS )?
				int alt149=2;
				try { DebugEnterSubRule(149);
				try { DebugEnterDecision(149, decisionCanBacktrack[149]);
				int LA149_0 = input.LA(1);

				if ((LA149_0==WS))
				{
					alt149 = 1;
				}
				} finally { DebugExitDecision(149); }
				switch (alt149)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:440:80: WS
					{
					DebugLocation(440, 80);
					WS406=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3045); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS406);


					}
					break;

				}
				} finally { DebugExitSubRule(149); }

				DebugLocation(440, 84);
				char_literal407=(IToken)Match(input,168,Follow._168_in_specialfunctioncall3048); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_168.Add(char_literal407);



				{
				// AST REWRITE
				// elements: expression, DATEDIFF, datepart
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 440:88: -> ^( T_FUNCTIONCALL DATEDIFF datepart ( expression )+ )
				{
					DebugLocation(440, 91);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:440:91: ^( T_FUNCTIONCALL DATEDIFF datepart ( expression )+ )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(440, 93);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(440, 108);
					adaptor.AddChild(root_1, stream_DATEDIFF.NextNode());
					DebugLocation(440, 117);
					adaptor.AddChild(root_1, stream_datepart.NextTree());
					DebugLocation(440, 126);
					if (!(stream_expression.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expression.HasNext )
					{
						DebugLocation(440, 126);
						adaptor.AddChild(root_1, stream_expression.NextTree());

					}
					stream_expression.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:441:4: DATEPART ( WS )? '(' ( WS )? datepart ( WS )? ',' ( WS )? expression ( WS )? ')'
				{
				DebugLocation(441, 4);
				DATEPART408=(IToken)Match(input,DATEPART,Follow._DATEPART_in_specialfunctioncall3066); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DATEPART.Add(DATEPART408);

				DebugLocation(441, 13);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:441:13: ( WS )?
				int alt150=2;
				try { DebugEnterSubRule(150);
				try { DebugEnterDecision(150, decisionCanBacktrack[150]);
				int LA150_0 = input.LA(1);

				if ((LA150_0==WS))
				{
					alt150 = 1;
				}
				} finally { DebugExitDecision(150); }
				switch (alt150)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:441:13: WS
					{
					DebugLocation(441, 13);
					WS409=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3068); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS409);


					}
					break;

				}
				} finally { DebugExitSubRule(150); }

				DebugLocation(441, 17);
				char_literal410=(IToken)Match(input,167,Follow._167_in_specialfunctioncall3071); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_167.Add(char_literal410);

				DebugLocation(441, 21);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:441:21: ( WS )?
				int alt151=2;
				try { DebugEnterSubRule(151);
				try { DebugEnterDecision(151, decisionCanBacktrack[151]);
				int LA151_0 = input.LA(1);

				if ((LA151_0==WS))
				{
					alt151 = 1;
				}
				} finally { DebugExitDecision(151); }
				switch (alt151)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:441:21: WS
					{
					DebugLocation(441, 21);
					WS411=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3073); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS411);


					}
					break;

				}
				} finally { DebugExitSubRule(151); }

				DebugLocation(441, 25);
				PushFollow(Follow._datepart_in_specialfunctioncall3076);
				datepart412=datepart();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_datepart.Add(datepart412.Tree);
				DebugLocation(441, 34);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:441:34: ( WS )?
				int alt152=2;
				try { DebugEnterSubRule(152);
				try { DebugEnterDecision(152, decisionCanBacktrack[152]);
				int LA152_0 = input.LA(1);

				if ((LA152_0==WS))
				{
					alt152 = 1;
				}
				} finally { DebugExitDecision(152); }
				switch (alt152)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:441:34: WS
					{
					DebugLocation(441, 34);
					WS413=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3078); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS413);


					}
					break;

				}
				} finally { DebugExitSubRule(152); }

				DebugLocation(441, 38);
				char_literal414=(IToken)Match(input,171,Follow._171_in_specialfunctioncall3081); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_171.Add(char_literal414);

				DebugLocation(441, 42);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:441:42: ( WS )?
				int alt153=2;
				try { DebugEnterSubRule(153);
				try { DebugEnterDecision(153, decisionCanBacktrack[153]);
				int LA153_0 = input.LA(1);

				if ((LA153_0==WS))
				{
					alt153 = 1;
				}
				} finally { DebugExitDecision(153); }
				switch (alt153)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:441:42: WS
					{
					DebugLocation(441, 42);
					WS415=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3083); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS415);


					}
					break;

				}
				} finally { DebugExitSubRule(153); }

				DebugLocation(441, 46);
				PushFollow(Follow._expression_in_specialfunctioncall3086);
				expression416=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression416.Tree);
				DebugLocation(441, 57);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:441:57: ( WS )?
				int alt154=2;
				try { DebugEnterSubRule(154);
				try { DebugEnterDecision(154, decisionCanBacktrack[154]);
				int LA154_0 = input.LA(1);

				if ((LA154_0==WS))
				{
					alt154 = 1;
				}
				} finally { DebugExitDecision(154); }
				switch (alt154)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:441:57: WS
					{
					DebugLocation(441, 57);
					WS417=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3088); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS417);


					}
					break;

				}
				} finally { DebugExitSubRule(154); }

				DebugLocation(441, 61);
				char_literal418=(IToken)Match(input,168,Follow._168_in_specialfunctioncall3091); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_168.Add(char_literal418);



				{
				// AST REWRITE
				// elements: datepart, expression, DATEPART
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 441:65: -> ^( T_FUNCTIONCALL DATEPART datepart expression )
				{
					DebugLocation(441, 68);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:441:68: ^( T_FUNCTIONCALL DATEPART datepart expression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(441, 70);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(441, 85);
					adaptor.AddChild(root_1, stream_DATEPART.NextNode());
					DebugLocation(441, 94);
					adaptor.AddChild(root_1, stream_datepart.NextTree());
					DebugLocation(441, 103);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("specialfunctioncall", 58);
			LeaveRule("specialfunctioncall", 58);
			LeaveRule_specialfunctioncall();
	    }
	 	DebugLocation(442, 1);
		} finally { DebugExitRule(GrammarFileName, "specialfunctioncall"); }
		return retval;

	}
	// $ANTLR end "specialfunctioncall"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_datepart() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_datepart() {}

	// $ANTLR start "datepart"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:444:1: datepart : TOKEN -> ^( T_DATEPART TOKEN ) ;
	[GrammarRule("datepart")]
	private AstParserRuleReturnScope<object, IToken> datepart()
	{
		EnterRule_datepart();
		EnterRule("datepart", 59);
		TraceIn("datepart", 59);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN419 = default(IToken);

	    object TOKEN419_tree = default(object);
	    RewriteRuleITokenStream stream_TOKEN=new RewriteRuleITokenStream(adaptor,"token TOKEN");

		try { DebugEnterRule(GrammarFileName, "datepart");
		DebugLocation(444, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:445:2: ( TOKEN -> ^( T_DATEPART TOKEN ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:445:4: TOKEN
			{
			DebugLocation(445, 4);
			TOKEN419=(IToken)Match(input,TOKEN,Follow._TOKEN_in_datepart3115); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_TOKEN.Add(TOKEN419);



			{
			// AST REWRITE
			// elements: TOKEN
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 445:10: -> ^( T_DATEPART TOKEN )
			{
				DebugLocation(445, 13);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:445:13: ^( T_DATEPART TOKEN )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(445, 15);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_DATEPART, "T_DATEPART"), root_1);

				DebugLocation(445, 26);
				adaptor.AddChild(root_1, stream_TOKEN.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("datepart", 59);
			LeaveRule("datepart", 59);
			LeaveRule_datepart();
	    }
	 	DebugLocation(446, 1);
		} finally { DebugExitRule(GrammarFileName, "datepart"); }
		return retval;

	}
	// $ANTLR end "datepart"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_number() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_number() {}

	// $ANTLR start "number"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:448:1: number : NUMBER ;
	[GrammarRule("number")]
	private AstParserRuleReturnScope<object, IToken> number()
	{
		EnterRule_number();
		EnterRule("number", 60);
		TraceIn("number", 60);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken NUMBER420 = default(IToken);

	    object NUMBER420_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "number");
		DebugLocation(448, 16);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:448:9: ( NUMBER )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:448:11: NUMBER
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(448, 11);
			NUMBER420=(IToken)Match(input,NUMBER,Follow._NUMBER_in_number3135); if (state.failed) return retval;
			if (state.backtracking == 0) {
			NUMBER420_tree = (object)adaptor.Create(NUMBER420);
			adaptor.AddChild(root_0, NUMBER420_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("number", 60);
			LeaveRule("number", 60);
			LeaveRule_number();
	    }
	 	DebugLocation(448, 16);
		} finally { DebugExitRule(GrammarFileName, "number"); }
		return retval;

	}
	// $ANTLR end "number"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_string() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_string() {}

	// $ANTLR start "string"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:450:1: string : STRING -> ^( T_STRING STRING ) ;
	[GrammarRule("string")]
	private AstParserRuleReturnScope<object, IToken> @string()
	{
		EnterRule_string();
		EnterRule("string", 61);
		TraceIn("string", 61);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken STRING421 = default(IToken);

	    object STRING421_tree = default(object);
	    RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");

		try { DebugEnterRule(GrammarFileName, "string");
		DebugLocation(450, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:450:8: ( STRING -> ^( T_STRING STRING ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:450:10: STRING
			{
			DebugLocation(450, 10);
			STRING421=(IToken)Match(input,STRING,Follow._STRING_in_string3143); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_STRING.Add(STRING421);



			{
			// AST REWRITE
			// elements: STRING
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 450:17: -> ^( T_STRING STRING )
			{
				DebugLocation(450, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:450:20: ^( T_STRING STRING )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(450, 22);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_STRING, "T_STRING"), root_1);

				DebugLocation(450, 31);
				adaptor.AddChild(root_1, stream_STRING.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("string", 61);
			LeaveRule("string", 61);
			LeaveRule_string();
	    }
	 	DebugLocation(451, 1);
		} finally { DebugExitRule(GrammarFileName, "string"); }
		return retval;

	}
	// $ANTLR end "string"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_datatype() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_datatype() {}

	// $ANTLR start "datatype"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:453:1: datatype : TOKEN ;
	[GrammarRule("datatype")]
	private AstParserRuleReturnScope<object, IToken> datatype()
	{
		EnterRule_datatype();
		EnterRule("datatype", 62);
		TraceIn("datatype", 62);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN422 = default(IToken);

	    object TOKEN422_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "datatype");
		DebugLocation(453, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:454:2: ( TOKEN )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:454:4: TOKEN
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(454, 4);
			TOKEN422=(IToken)Match(input,TOKEN,Follow._TOKEN_in_datatype3163); if (state.failed) return retval;
			if (state.backtracking == 0) {
			TOKEN422_tree = (object)adaptor.Create(TOKEN422);
			adaptor.AddChild(root_0, TOKEN422_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("datatype", 62);
			LeaveRule("datatype", 62);
			LeaveRule_datatype();
	    }
	 	DebugLocation(455, 1);
		} finally { DebugExitRule(GrammarFileName, "datatype"); }
		return retval;

	}
	// $ANTLR end "datatype"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_variable() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_variable() {}

	// $ANTLR start "variable"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:457:1: variable : VARIABLE -> ^( T_VARIABLE VARIABLE ) ;
	[GrammarRule("variable")]
	private AstParserRuleReturnScope<object, IToken> variable()
	{
		EnterRule_variable();
		EnterRule("variable", 63);
		TraceIn("variable", 63);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken VARIABLE423 = default(IToken);

	    object VARIABLE423_tree = default(object);
	    RewriteRuleITokenStream stream_VARIABLE=new RewriteRuleITokenStream(adaptor,"token VARIABLE");

		try { DebugEnterRule(GrammarFileName, "variable");
		DebugLocation(457, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:458:2: ( VARIABLE -> ^( T_VARIABLE VARIABLE ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:458:4: VARIABLE
			{
			DebugLocation(458, 4);
			VARIABLE423=(IToken)Match(input,VARIABLE,Follow._VARIABLE_in_variable3175); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_VARIABLE.Add(VARIABLE423);



			{
			// AST REWRITE
			// elements: VARIABLE
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 458:13: -> ^( T_VARIABLE VARIABLE )
			{
				DebugLocation(458, 16);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:458:16: ^( T_VARIABLE VARIABLE )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(458, 18);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_VARIABLE, "T_VARIABLE"), root_1);

				DebugLocation(458, 29);
				adaptor.AddChild(root_1, stream_VARIABLE.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variable", 63);
			LeaveRule("variable", 63);
			LeaveRule_variable();
	    }
	 	DebugLocation(459, 1);
		} finally { DebugExitRule(GrammarFileName, "variable"); }
		return retval;

	}
	// $ANTLR end "variable"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_case() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_case() {}

	// $ANTLR start "case"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:461:1: case : CASE WS ( expression WS )? ( case_when WS )* ( case_else WS )? END -> ^( T_CASE ( expression )? ( case_when )* ( case_else )? ) ;
	[GrammarRule("case")]
	private AstParserRuleReturnScope<object, IToken> @case()
	{
		EnterRule_case();
		EnterRule("case", 64);
		TraceIn("case", 64);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken CASE424 = default(IToken);
	    IToken WS425 = default(IToken);
	    IToken WS427 = default(IToken);
	    IToken WS429 = default(IToken);
	    IToken WS431 = default(IToken);
	    IToken END432 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression426 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> case_when428 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> case_else430 = default(AstParserRuleReturnScope<object, IToken>);

	    object CASE424_tree = default(object);
	    object WS425_tree = default(object);
	    object WS427_tree = default(object);
	    object WS429_tree = default(object);
	    object WS431_tree = default(object);
	    object END432_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_END=new RewriteRuleITokenStream(adaptor,"token END");
	    RewriteRuleITokenStream stream_CASE=new RewriteRuleITokenStream(adaptor,"token CASE");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_case_when=new RewriteRuleSubtreeStream(adaptor,"rule case_when");
	    RewriteRuleSubtreeStream stream_case_else=new RewriteRuleSubtreeStream(adaptor,"rule case_else");
		try { DebugEnterRule(GrammarFileName, "case");
		DebugLocation(461, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:462:2: ( CASE WS ( expression WS )? ( case_when WS )* ( case_else WS )? END -> ^( T_CASE ( expression )? ( case_when )* ( case_else )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:462:4: CASE WS ( expression WS )? ( case_when WS )* ( case_else WS )? END
			{
			DebugLocation(462, 4);
			CASE424=(IToken)Match(input,CASE,Follow._CASE_in_case3195); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CASE.Add(CASE424);

			DebugLocation(462, 9);
			WS425=(IToken)Match(input,WS,Follow._WS_in_case3197); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS425);

			DebugLocation(462, 12);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:462:12: ( expression WS )?
			int alt156=2;
			try { DebugEnterSubRule(156);
			try { DebugEnterDecision(156, decisionCanBacktrack[156]);
			int LA156_0 = input.LA(1);

			if (((LA156_0>=CASE && LA156_0<=CAST)||(LA156_0>=CONVERT && LA156_0<=COUNT)||(LA156_0>=DATEADD && LA156_0<=DATEPART)||LA156_0==EXISTS||(LA156_0>=NOT && LA156_0<=NUMBER)||LA156_0==SIMPLE_FILE||(LA156_0>=STRING && LA156_0<=SYSTEMVAR)||LA156_0==TOKEN||LA156_0==VARIABLE||LA156_0==167||LA156_0==170||LA156_0==172||LA156_0==186))
			{
				alt156 = 1;
			}
			} finally { DebugExitDecision(156); }
			switch (alt156)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:462:13: expression WS
				{
				DebugLocation(462, 13);
				PushFollow(Follow._expression_in_case3200);
				expression426=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression426.Tree);
				DebugLocation(462, 24);
				WS427=(IToken)Match(input,WS,Follow._WS_in_case3202); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS427);


				}
				break;

			}
			} finally { DebugExitSubRule(156); }

			DebugLocation(462, 29);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:462:29: ( case_when WS )*
			try { DebugEnterSubRule(157);
			while (true)
			{
				int alt157=2;
				try { DebugEnterDecision(157, decisionCanBacktrack[157]);
				int LA157_0 = input.LA(1);

				if ((LA157_0==WHEN))
				{
					alt157 = 1;
				}


				} finally { DebugExitDecision(157); }
				switch ( alt157 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:462:30: case_when WS
					{
					DebugLocation(462, 30);
					PushFollow(Follow._case_when_in_case3207);
					case_when428=case_when();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_case_when.Add(case_when428.Tree);
					DebugLocation(462, 40);
					WS429=(IToken)Match(input,WS,Follow._WS_in_case3209); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS429);


					}
					break;

				default:
					goto loop157;
				}
			}

			loop157:
				;

			} finally { DebugExitSubRule(157); }

			DebugLocation(462, 45);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:462:45: ( case_else WS )?
			int alt158=2;
			try { DebugEnterSubRule(158);
			try { DebugEnterDecision(158, decisionCanBacktrack[158]);
			int LA158_0 = input.LA(1);

			if ((LA158_0==ELSE))
			{
				alt158 = 1;
			}
			} finally { DebugExitDecision(158); }
			switch (alt158)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:462:46: case_else WS
				{
				DebugLocation(462, 46);
				PushFollow(Follow._case_else_in_case3214);
				case_else430=case_else();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_case_else.Add(case_else430.Tree);
				DebugLocation(462, 56);
				WS431=(IToken)Match(input,WS,Follow._WS_in_case3216); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS431);


				}
				break;

			}
			} finally { DebugExitSubRule(158); }

			DebugLocation(462, 61);
			END432=(IToken)Match(input,END,Follow._END_in_case3220); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_END.Add(END432);



			{
			// AST REWRITE
			// elements: case_else, case_when, expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 463:2: -> ^( T_CASE ( expression )? ( case_when )* ( case_else )? )
			{
				DebugLocation(463, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:463:5: ^( T_CASE ( expression )? ( case_when )* ( case_else )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(463, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CASE, "T_CASE"), root_1);

				DebugLocation(463, 14);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:463:14: ( expression )?
				if (stream_expression.HasNext)
				{
					DebugLocation(463, 14);
					adaptor.AddChild(root_1, stream_expression.NextTree());

				}
				stream_expression.Reset();
				DebugLocation(463, 26);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:463:26: ( case_when )*
				while ( stream_case_when.HasNext )
				{
					DebugLocation(463, 26);
					adaptor.AddChild(root_1, stream_case_when.NextTree());

				}
				stream_case_when.Reset();
				DebugLocation(463, 37);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:463:37: ( case_else )?
				if (stream_case_else.HasNext)
				{
					DebugLocation(463, 37);
					adaptor.AddChild(root_1, stream_case_else.NextTree());

				}
				stream_case_else.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("case", 64);
			LeaveRule("case", 64);
			LeaveRule_case();
	    }
	 	DebugLocation(464, 1);
		} finally { DebugExitRule(GrammarFileName, "case"); }
		return retval;

	}
	// $ANTLR end "case"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_case_when() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_case_when() {}

	// $ANTLR start "case_when"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:466:1: case_when : WHEN WS a= expression WS THEN WS b= expression -> ^( T_CASE_WHEN $a $b) ;
	[GrammarRule("case_when")]
	private AstParserRuleReturnScope<object, IToken> case_when()
	{
		EnterRule_case_when();
		EnterRule("case_when", 65);
		TraceIn("case_when", 65);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WHEN433 = default(IToken);
	    IToken WS434 = default(IToken);
	    IToken WS435 = default(IToken);
	    IToken THEN436 = default(IToken);
	    IToken WS437 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);

	    object WHEN433_tree = default(object);
	    object WS434_tree = default(object);
	    object WS435_tree = default(object);
	    object THEN436_tree = default(object);
	    object WS437_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_THEN=new RewriteRuleITokenStream(adaptor,"token THEN");
	    RewriteRuleITokenStream stream_WHEN=new RewriteRuleITokenStream(adaptor,"token WHEN");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "case_when");
		DebugLocation(466, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:467:2: ( WHEN WS a= expression WS THEN WS b= expression -> ^( T_CASE_WHEN $a $b) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:467:4: WHEN WS a= expression WS THEN WS b= expression
			{
			DebugLocation(467, 4);
			WHEN433=(IToken)Match(input,WHEN,Follow._WHEN_in_case_when3248); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WHEN.Add(WHEN433);

			DebugLocation(467, 9);
			WS434=(IToken)Match(input,WS,Follow._WS_in_case_when3250); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS434);

			DebugLocation(467, 13);
			PushFollow(Follow._expression_in_case_when3254);
			a=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression.Add(a.Tree);
			DebugLocation(467, 25);
			WS435=(IToken)Match(input,WS,Follow._WS_in_case_when3256); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS435);

			DebugLocation(467, 28);
			THEN436=(IToken)Match(input,THEN,Follow._THEN_in_case_when3258); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_THEN.Add(THEN436);

			DebugLocation(467, 33);
			WS437=(IToken)Match(input,WS,Follow._WS_in_case_when3260); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS437);

			DebugLocation(467, 37);
			PushFollow(Follow._expression_in_case_when3264);
			b=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression.Add(b.Tree);


			{
			// AST REWRITE
			// elements: b, a
			// token labels: 
			// rule labels: retval, b, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 468:2: -> ^( T_CASE_WHEN $a $b)
			{
				DebugLocation(468, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:468:5: ^( T_CASE_WHEN $a $b)
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(468, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CASE_WHEN, "T_CASE_WHEN"), root_1);

				DebugLocation(468, 20);
				adaptor.AddChild(root_1, stream_a.NextTree());
				DebugLocation(468, 23);
				adaptor.AddChild(root_1, stream_b.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("case_when", 65);
			LeaveRule("case_when", 65);
			LeaveRule_case_when();
	    }
	 	DebugLocation(469, 1);
		} finally { DebugExitRule(GrammarFileName, "case_when"); }
		return retval;

	}
	// $ANTLR end "case_when"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_case_else() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_case_else() {}

	// $ANTLR start "case_else"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:471:1: case_else : ELSE WS expression -> ^( T_CASE_ELSE expression ) ;
	[GrammarRule("case_else")]
	private AstParserRuleReturnScope<object, IToken> case_else()
	{
		EnterRule_case_else();
		EnterRule("case_else", 66);
		TraceIn("case_else", 66);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken ELSE438 = default(IToken);
	    IToken WS439 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression440 = default(AstParserRuleReturnScope<object, IToken>);

	    object ELSE438_tree = default(object);
	    object WS439_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_ELSE=new RewriteRuleITokenStream(adaptor,"token ELSE");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "case_else");
		DebugLocation(471, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:472:2: ( ELSE WS expression -> ^( T_CASE_ELSE expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:472:4: ELSE WS expression
			{
			DebugLocation(472, 4);
			ELSE438=(IToken)Match(input,ELSE,Follow._ELSE_in_case_else3289); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ELSE.Add(ELSE438);

			DebugLocation(472, 9);
			WS439=(IToken)Match(input,WS,Follow._WS_in_case_else3291); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS439);

			DebugLocation(472, 12);
			PushFollow(Follow._expression_in_case_else3293);
			expression440=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression.Add(expression440.Tree);


			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 473:2: -> ^( T_CASE_ELSE expression )
			{
				DebugLocation(473, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:473:5: ^( T_CASE_ELSE expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(473, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CASE_ELSE, "T_CASE_ELSE"), root_1);

				DebugLocation(473, 19);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("case_else", 66);
			LeaveRule("case_else", 66);
			LeaveRule_case_else();
	    }
	 	DebugLocation(474, 1);
		} finally { DebugExitRule(GrammarFileName, "case_else"); }
		return retval;

	}
	// $ANTLR end "case_else"
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred1_gql_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred1_gql_fragment() {}

	// $ANTLR start synpred1_gql
	public void synpred1_gql_fragment()
	{
		EnterRule_synpred1_gql_fragment();
		EnterRule("synpred1_gql_fragment", 67);
		TraceIn("synpred1_gql_fragment", 67);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:146:4: ( '(' )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:146:5: '('
			{
			DebugLocation(146, 5);
			Match(input,167,Follow._167_in_synpred1_gql590); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred1_gql_fragment", 67);
			LeaveRule("synpred1_gql_fragment", 67);
			LeaveRule_synpred1_gql_fragment();
		}
	}
	// $ANTLR end synpred1_gql
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred2_gql_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred2_gql_fragment() {}

	// $ANTLR start synpred2_gql
	public void synpred2_gql_fragment()
	{
		EnterRule_synpred2_gql_fragment();
		EnterRule("synpred2_gql_fragment", 68);
		TraceIn("synpred2_gql_fragment", 68);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:317:4: ( SELECT )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:317:5: SELECT
			{
			DebugLocation(317, 5);
			Match(input,SELECT,Follow._SELECT_in_synpred2_gql1708); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred2_gql_fragment", 68);
			LeaveRule("synpred2_gql_fragment", 68);
			LeaveRule_synpred2_gql_fragment();
		}
	}
	// $ANTLR end synpred2_gql
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred3_gql_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred3_gql_fragment() {}

	// $ANTLR start synpred3_gql
	public void synpred3_gql_fragment()
	{
		EnterRule_synpred3_gql_fragment();
		EnterRule("synpred3_gql_fragment", 69);
		TraceIn("synpred3_gql_fragment", 69);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:409:4: ( subquery )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:409:5: subquery
			{
			DebugLocation(409, 5);
			PushFollow(Follow._subquery_in_synpred3_gql2549);
			subquery();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred3_gql_fragment", 69);
			LeaveRule("synpred3_gql_fragment", 69);
			LeaveRule_synpred3_gql_fragment();
		}
	}
	// $ANTLR end synpred3_gql
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _WS_in_parse394 = new BitSet(new ulong[]{0x3000000022100000UL,0x0UL,0x8000800000UL});
		public static readonly BitSet _commands_in_parse398 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _WS_in_parse400 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_parse405 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _command_in_commands428 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800040000000UL});
		public static readonly BitSet _WS_in_commands431 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000000UL});
		public static readonly BitSet _175_in_commands434 = new BitSet(new ulong[]{0x3000000022100000UL,0x0UL,0x8040800000UL});
		public static readonly BitSet _WS_in_commands436 = new BitSet(new ulong[]{0x3000000022100000UL,0x0UL,0x8000800000UL});
		public static readonly BitSet _command_in_commands439 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800040000000UL});
		public static readonly BitSet _WS_in_commands444 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000000UL});
		public static readonly BitSet _175_in_commands447 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _select_command_in_command467 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _use_command_in_command472 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declare_command_in_command477 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_command_in_command482 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _create_view_command_in_command487 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _drop_view_command_in_command492 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _drop_table_command_in_command497 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _select_command_union_in_select_command511 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40000000UL});
		public static readonly BitSet _WS_in_select_command514 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _orderby_clause_in_select_command516 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _select_command_simple_in_select_command_union548 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40000000UL});
		public static readonly BitSet _WS_in_select_command_union555 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000UL});
		public static readonly BitSet _UNION_in_select_command_union557 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _WS_in_select_command_union559 = new BitSet(new ulong[]{0x1000000000000000UL,0x0UL,0x8000000000UL});
		public static readonly BitSet _select_command_simple_in_select_command_union563 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40000000UL});
		public static readonly BitSet _subquery_in_select_command_simple595 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SELECT_in_select_command_simple600 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _WS_in_select_command_simple603 = new BitSet(new ulong[]{0x10000020UL});
		public static readonly BitSet _distinct_clause_in_select_command_simple605 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _WS_in_select_command_simple610 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _top_clause_in_select_command_simple612 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _WS_in_select_command_simple616 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x400168002000000UL});
		public static readonly BitSet _column_list_in_select_command_simple618 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40000000UL});
		public static readonly BitSet _WS_in_select_command_simple621 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _into_clause_in_select_command_simple623 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40000000UL});
		public static readonly BitSet _WS_in_select_command_simple628 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _from_clause_in_select_command_simple630 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40000000UL});
		public static readonly BitSet _WS_in_select_command_simple635 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20000000UL});
		public static readonly BitSet _where_clause_in_select_command_simple637 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40000000UL});
		public static readonly BitSet _WS_in_select_command_simple642 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _groupby_clause_in_select_command_simple644 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40000000UL});
		public static readonly BitSet _WS_in_select_command_simple649 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _having_clause_in_select_command_simple651 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DISTINCT_in_distinct_clause696 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ALL_in_distinct_clause705 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOP_in_top_clause721 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _WS_in_top_clause723 = new BitSet(new ulong[]{0x4008000201CCC000UL,0x23UL,0x8002000000UL});
		public static readonly BitSet _expression_atom_in_top_clause725 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _column_in_column_list747 = new BitSet(new ulong[]{0x2UL,0x0UL,0x80040000000UL});
		public static readonly BitSet _WS_in_column_list750 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000000UL});
		public static readonly BitSet _171_in_column_list753 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x400168042000000UL});
		public static readonly BitSet _WS_in_column_list755 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x400168002000000UL});
		public static readonly BitSet _column_in_column_list758 = new BitSet(new ulong[]{0x2UL,0x0UL,0x80040000000UL});
		public static readonly BitSet _all_columns_in_column782 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_column787 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40000000UL});
		public static readonly BitSet _WS_in_column790 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _SIMPLE_FILE_in_column792 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _table_alias_in_all_columns817 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200040000000UL});
		public static readonly BitSet _WS_in_all_columns819 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _173_in_all_columns822 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20040000000UL});
		public static readonly BitSet _WS_in_all_columns824 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20000000000UL});
		public static readonly BitSet _169_in_all_columns829 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INTO_in_into_clause849 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _WS_in_into_clause851 = new BitSet(new ulong[]{0x4000000000000000UL,0x0UL,0x40000000000000UL});
		public static readonly BitSet _file_in_into_clause853 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FROM_in_from_clause873 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _WS_in_from_clause875 = new BitSet(new ulong[]{0x4000000000000000UL,0x21UL,0x40008000000000UL});
		public static readonly BitSet _from_clause_item_in_from_clause877 = new BitSet(new ulong[]{0x2UL,0x0UL,0x80040000000UL});
		public static readonly BitSet _WS_in_from_clause880 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000000UL});
		public static readonly BitSet _171_in_from_clause883 = new BitSet(new ulong[]{0x4000000000000000UL,0x21UL,0x40008040000000UL});
		public static readonly BitSet _WS_in_from_clause885 = new BitSet(new ulong[]{0x4000000000000000UL,0x21UL,0x40008000000000UL});
		public static readonly BitSet _from_clause_item_in_from_clause888 = new BitSet(new ulong[]{0x2UL,0x0UL,0x80040000000UL});
		public static readonly BitSet _WS_in_from_clause893 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _table_alias_in_from_clause895 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_from_clause_item922 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _file_in_from_clause_item935 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _subquery_in_from_clause_item940 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _view_name_in_from_clause_item945 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8040000000UL});
		public static readonly BitSet _WS_in_from_clause_item948 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000000UL});
		public static readonly BitSet _167_in_from_clause_item951 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x400158002000000UL});
		public static readonly BitSet _expression_list_in_from_clause_item953 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000000UL});
		public static readonly BitSet _168_in_from_clause_item956 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _167_in_subquery981 = new BitSet(new ulong[]{0x1000000000000000UL,0x0UL,0x8040000000UL});
		public static readonly BitSet _WS_in_subquery983 = new BitSet(new ulong[]{0x1000000000000000UL,0x0UL,0x8000000000UL});
		public static readonly BitSet _select_command_in_subquery986 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10040000000UL});
		public static readonly BitSet _WS_in_subquery988 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000000UL});
		public static readonly BitSet _168_in_subquery991 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _182_in_file1010 = new BitSet(new ulong[]{0x0UL,0x1UL,0x42000000UL});
		public static readonly BitSet _WS_in_file1012 = new BitSet(new ulong[]{0x0UL,0x1UL,0x2000000UL});
		public static readonly BitSet _file_spec_in_file1015 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000040000000UL});
		public static readonly BitSet _WS_in_file1018 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000UL});
		public static readonly BitSet _file_option_in_file1020 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000040000000UL});
		public static readonly BitSet _WS_in_file1024 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000000000UL});
		public static readonly BitSet _183_in_file1027 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _182_in_file1044 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8040000000UL});
		public static readonly BitSet _WS_in_file1046 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000000UL});
		public static readonly BitSet _subquery_in_file1049 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000040000000UL});
		public static readonly BitSet _WS_in_file1051 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000000000UL});
		public static readonly BitSet _183_in_file1054 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SIMPLE_FILE_in_file1067 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _string_in_file_spec1086 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_in_file_spec1091 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _172_in_file_option1103 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _file_option_name_in_file_option1105 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8000040000000UL});
		public static readonly BitSet _WS_in_file_option1109 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _179_in_file_option1112 = new BitSet(new ulong[]{0x8000000000000UL,0x21UL,0x42000000UL});
		public static readonly BitSet _WS_in_file_option1114 = new BitSet(new ulong[]{0x8000000000000UL,0x21UL,0x2000000UL});
		public static readonly BitSet _file_option_value_in_file_option1117 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_file_option_name1141 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_file_option_value1153 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_file_option_value1157 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_file_option_value1161 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_in_file_option_value1165 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHERE_in_where_clause1177 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _WS_in_where_clause1179 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x400148002000000UL});
		public static readonly BitSet _expression_in_where_clause1181 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GROUP_in_groupby_clause1200 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _WS_in_groupby_clause1202 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _BY_in_groupby_clause1204 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _WS_in_groupby_clause1206 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x400148002000000UL});
		public static readonly BitSet _orderby_column_list_in_groupby_clause1208 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _HAVING_in_having_clause1229 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _WS_in_having_clause1231 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x400148002000000UL});
		public static readonly BitSet _expression_in_having_clause1233 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ORDER_in_orderby_clause1254 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _WS_in_orderby_clause1256 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _BY_in_orderby_clause1258 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _WS_in_orderby_clause1260 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x400148002000000UL});
		public static readonly BitSet _orderby_column_list_in_orderby_clause1262 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _orderby_column_in_orderby_column_list1283 = new BitSet(new ulong[]{0x2UL,0x0UL,0x80040000000UL});
		public static readonly BitSet _WS_in_orderby_column_list1286 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000000UL});
		public static readonly BitSet _171_in_orderby_column_list1289 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x400148042000000UL});
		public static readonly BitSet _WS_in_orderby_column_list1291 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x400148002000000UL});
		public static readonly BitSet _orderby_column_in_orderby_column_list1294 = new BitSet(new ulong[]{0x2UL,0x0UL,0x80040000000UL});
		public static readonly BitSet _expression_in_orderby_column1314 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40000000UL});
		public static readonly BitSet _WS_in_orderby_column1317 = new BitSet(new ulong[]{0x80000004000200UL});
		public static readonly BitSet _orderby_direction_in_orderby_column1319 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASC_in_orderby_direction1344 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DESC_in_orderby_direction1353 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ORIG_in_orderby_direction1362 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _USE_in_use_command1380 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _WS_in_use_command1382 = new BitSet(new ulong[]{0x4000000000000000UL,0x0UL,0x40000000000000UL});
		public static readonly BitSet _file_in_use_command1384 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DECLARE_in_declare_command1406 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _WS_in_declare_command1408 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000UL});
		public static readonly BitSet _declaration_list_in_declare_command1410 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_in_declaration_list1427 = new BitSet(new ulong[]{0x2UL,0x0UL,0x80040000000UL});
		public static readonly BitSet _WS_in_declaration_list1430 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000000UL});
		public static readonly BitSet _171_in_declaration_list1433 = new BitSet(new ulong[]{0x0UL,0x0UL,0x42000000UL});
		public static readonly BitSet _WS_in_declaration_list1435 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000UL});
		public static readonly BitSet _declaration_in_declaration_list1438 = new BitSet(new ulong[]{0x2UL,0x0UL,0x80040000000UL});
		public static readonly BitSet _variable_in_declaration1462 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _WS_in_declaration1464 = new BitSet(new ulong[]{0x100UL,0x20UL});
		public static readonly BitSet _AS_in_declaration1467 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _WS_in_declaration1469 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _datatype_in_declaration1473 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CREATE_in_create_view_command1498 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _WS_in_create_view_command1500 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _VIEW_in_create_view_command1502 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _WS_in_create_view_command1504 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _view_name_in_create_view_command1506 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8040000000UL});
		public static readonly BitSet _WS_in_create_view_command1509 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000000UL});
		public static readonly BitSet _167_in_create_view_command1512 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000UL});
		public static readonly BitSet _declaration_list_in_create_view_command1514 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000000UL});
		public static readonly BitSet _168_in_create_view_command1516 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _WS_in_create_view_command1520 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _AS_in_create_view_command1522 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _WS_in_create_view_command1524 = new BitSet(new ulong[]{0x1000000000000000UL,0x0UL,0x8000000000UL});
		public static readonly BitSet _select_command_in_create_view_command1526 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DROP_in_drop_view_command1552 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _WS_in_drop_view_command1554 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _VIEW_in_drop_view_command1556 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _WS_in_drop_view_command1558 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _view_name_in_drop_view_command1560 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_view_name1580 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DROP_in_drop_table_command1602 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _WS_in_drop_table_command1604 = new BitSet(new ulong[]{0x0UL,0x8UL});
		public static readonly BitSet _TABLE_in_drop_table_command1606 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _WS_in_drop_table_command1608 = new BitSet(new ulong[]{0x4000000000000000UL,0x0UL,0x40000000000000UL});
		public static readonly BitSet _file_in_drop_table_command1610 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SET_in_set_command1634 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _WS_in_set_command1636 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000UL});
		public static readonly BitSet _variable_in_set_command1638 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000040000000UL});
		public static readonly BitSet _WS_in_set_command1640 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _179_in_set_command1643 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x400148042000000UL});
		public static readonly BitSet _WS_in_set_command1645 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x400148002000000UL});
		public static readonly BitSet _expression_in_set_command1648 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_expression_list1673 = new BitSet(new ulong[]{0x2UL,0x0UL,0x80040000000UL});
		public static readonly BitSet _WS_in_expression_list1676 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000000UL});
		public static readonly BitSet _171_in_expression_list1679 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x400148042000000UL});
		public static readonly BitSet _WS_in_expression_list1681 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x400148002000000UL});
		public static readonly BitSet _expression_in_expression_list1684 = new BitSet(new ulong[]{0x2UL,0x0UL,0x80040000000UL});
		public static readonly BitSet _select_command_in_expression_list_or_select_command1713 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_list_in_expression_list_or_select_command1718 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_7_in_expression1731 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_6_in_expression_71747 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40000000UL});
		public static readonly BitSet _WS_in_expression_71754 = new BitSet(new ulong[]{0x25420000000800UL,0x0UL,0x3F001C00000000UL});
		public static readonly BitSet _op_7_in_expression_71759 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _WS_in_expression_71761 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x400148002000000UL});
		public static readonly BitSet _expression_6_in_expression_71765 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40000000UL});
		public static readonly BitSet _IN_in_expression_71784 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8040000000UL});
		public static readonly BitSet _WS_in_expression_71786 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000000UL});
		public static readonly BitSet _167_in_expression_71789 = new BitSet(new ulong[]{0x500C000201CCC000UL,0x23UL,0x400148042000000UL});
		public static readonly BitSet _WS_in_expression_71791 = new BitSet(new ulong[]{0x500C000201CCC000UL,0x23UL,0x400148002000000UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_71794 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10040000000UL});
		public static readonly BitSet _WS_in_expression_71796 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000000UL});
		public static readonly BitSet _168_in_expression_71799 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40000000UL});
		public static readonly BitSet _NOT_in_expression_71817 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _WS_in_expression_71819 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _IN_in_expression_71821 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8040000000UL});
		public static readonly BitSet _WS_in_expression_71823 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000000UL});
		public static readonly BitSet _167_in_expression_71826 = new BitSet(new ulong[]{0x500C000201CCC000UL,0x23UL,0x400148042000000UL});
		public static readonly BitSet _WS_in_expression_71828 = new BitSet(new ulong[]{0x500C000201CCC000UL,0x23UL,0x400148002000000UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_71832 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10040000000UL});
		public static readonly BitSet _WS_in_expression_71835 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000000UL});
		public static readonly BitSet _168_in_expression_71838 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40000000UL});
		public static readonly BitSet _op_4_in_expression_71856 = new BitSet(new ulong[]{0x8000000000000080UL,0x0UL,0x40000000UL});
		public static readonly BitSet _WS_in_expression_71858 = new BitSet(new ulong[]{0x8000000000000080UL});
		public static readonly BitSet _SOME_in_expression_71862 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8040000000UL});
		public static readonly BitSet _ANY_in_expression_71866 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8040000000UL});
		public static readonly BitSet _WS_in_expression_71869 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000000UL});
		public static readonly BitSet _167_in_expression_71872 = new BitSet(new ulong[]{0x500C000201CCC000UL,0x23UL,0x400148002000000UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_71874 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000000UL});
		public static readonly BitSet _168_in_expression_71876 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40000000UL});
		public static readonly BitSet _op_4_in_expression_71896 = new BitSet(new ulong[]{0x20UL,0x0UL,0x40000000UL});
		public static readonly BitSet _WS_in_expression_71898 = new BitSet(new ulong[]{0x20UL});
		public static readonly BitSet _ALL_in_expression_71901 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8040000000UL});
		public static readonly BitSet _WS_in_expression_71903 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000000UL});
		public static readonly BitSet _167_in_expression_71906 = new BitSet(new ulong[]{0x500C000201CCC000UL,0x23UL,0x400148002000000UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_71908 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000000UL});
		public static readonly BitSet _168_in_expression_71910 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40000000UL});
		public static readonly BitSet _OR_in_op_71940 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BETWEEN_in_op_71949 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_71958 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _WS_in_op_71960 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _BETWEEN_in_op_71962 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_5_in_expression_61981 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40000000UL});
		public static readonly BitSet _WS_in_expression_61988 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _op_6_in_expression_61990 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _WS_in_expression_61992 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x400148002000000UL});
		public static readonly BitSet _expression_5_in_expression_61996 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40000000UL});
		public static readonly BitSet _AND_in_op_62024 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _op_5_in_expression_52042 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _WS_in_expression_52044 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x400148002000000UL});
		public static readonly BitSet _expression_5_in_expression_52046 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_4_in_expression_52061 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_52072 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_3_in_expression_42091 = new BitSet(new ulong[]{0x5400000000002UL,0x0UL,0x3F001C40000000UL});
		public static readonly BitSet _WS_in_expression_42098 = new BitSet(new ulong[]{0x5400000000000UL,0x0UL,0x3F001C00000000UL});
		public static readonly BitSet _op_4_in_expression_42101 = new BitSet(new ulong[]{0x4008000201CCC000UL,0x23UL,0x400148042000000UL});
		public static readonly BitSet _WS_in_expression_42103 = new BitSet(new ulong[]{0x4008000201CCC000UL,0x23UL,0x400148002000000UL});
		public static readonly BitSet _expression_3_in_expression_42108 = new BitSet(new ulong[]{0x5400000000002UL,0x0UL,0x3F001C40000000UL});
		public static readonly BitSet _179_in_op_42134 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _181_in_op_42143 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _177_in_op_42153 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _178_in_op_42163 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _163_in_op_42172 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _164_in_op_42181 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _162_in_op_42190 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _180_in_op_42199 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _176_in_op_42209 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LIKE_in_op_42218 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_42227 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _WS_in_op_42229 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _LIKE_in_op_42231 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MATCH_in_op_42240 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_42249 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _WS_in_op_42251 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _MATCH_in_op_42253 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_2_in_expression_32272 = new BitSet(new ulong[]{0x2UL,0x0UL,0x300144040000000UL});
		public static readonly BitSet _WS_in_expression_32279 = new BitSet(new ulong[]{0x0UL,0x0UL,0x300144000000000UL});
		public static readonly BitSet _op_3_in_expression_32282 = new BitSet(new ulong[]{0x4008000201CCC000UL,0x23UL,0x400148042000000UL});
		public static readonly BitSet _WS_in_expression_32284 = new BitSet(new ulong[]{0x4008000201CCC000UL,0x23UL,0x400148002000000UL});
		public static readonly BitSet _expression_2_in_expression_32289 = new BitSet(new ulong[]{0x2UL,0x0UL,0x300144040000000UL});
		public static readonly BitSet _170_in_op_32315 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _172_in_op_32324 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _166_in_op_32333 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _185_in_op_32342 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _184_in_op_32351 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_1_in_expression_22371 = new BitSet(new ulong[]{0x2UL,0x0UL,0x422040000000UL});
		public static readonly BitSet _WS_in_expression_22378 = new BitSet(new ulong[]{0x0UL,0x0UL,0x422000000000UL});
		public static readonly BitSet _op_2_in_expression_22381 = new BitSet(new ulong[]{0x4008000201CCC000UL,0x23UL,0x400148042000000UL});
		public static readonly BitSet _WS_in_expression_22383 = new BitSet(new ulong[]{0x4008000201CCC000UL,0x23UL,0x400148002000000UL});
		public static readonly BitSet _expression_1_in_expression_22388 = new BitSet(new ulong[]{0x2UL,0x0UL,0x422040000000UL});
		public static readonly BitSet _169_in_op_22414 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _174_in_op_22423 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _165_in_op_22432 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _op_1_in_expression_12448 = new BitSet(new ulong[]{0x4008000201CCC000UL,0x23UL,0x400148042000000UL});
		public static readonly BitSet _WS_in_expression_12450 = new BitSet(new ulong[]{0x4008000201CCC000UL,0x23UL,0x400148002000000UL});
		public static readonly BitSet _expression_1_in_expression_12453 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_atom_in_expression_12468 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _186_in_op_12478 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _170_in_op_12488 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _172_in_op_12497 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _number_in_expression_atom2512 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _string_in_expression_atom2525 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SYSTEMVAR_in_expression_atom2530 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_in_expression_atom2543 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _subquery_in_expression_atom2554 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _167_in_expression_atom2559 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x400148002000000UL});
		public static readonly BitSet _expression_in_expression_atom2561 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000000UL});
		public static readonly BitSet _168_in_expression_atom2563 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functioncall_or_column_in_expression_atom2572 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _specialfunctioncall_in_expression_atom2577 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _case_in_expression_atom2582 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXISTS_in_expression_atom2587 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8040000000UL});
		public static readonly BitSet _WS_in_expression_atom2589 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000000UL});
		public static readonly BitSet _167_in_expression_atom2592 = new BitSet(new ulong[]{0x1000000000000000UL,0x0UL,0x8040000000UL});
		public static readonly BitSet _WS_in_expression_atom2594 = new BitSet(new ulong[]{0x1000000000000000UL,0x0UL,0x8000000000UL});
		public static readonly BitSet _select_command_in_expression_atom2597 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10040000000UL});
		public static readonly BitSet _WS_in_expression_atom2599 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000000UL});
		public static readonly BitSet _168_in_expression_atom2602 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_functioncall_or_column2622 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8040000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2624 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000000UL});
		public static readonly BitSet _167_in_functioncall_or_column2627 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x400158042000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2629 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x400158002000000UL});
		public static readonly BitSet _expression_in_functioncall_or_column2633 = new BitSet(new ulong[]{0x0UL,0x0UL,0x90040000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2635 = new BitSet(new ulong[]{0x0UL,0x0UL,0x90000000000UL});
		public static readonly BitSet _171_in_functioncall_or_column2639 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x400148042000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2641 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x400148002000000UL});
		public static readonly BitSet _expression_in_functioncall_or_column2644 = new BitSet(new ulong[]{0x0UL,0x0UL,0x90040000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2646 = new BitSet(new ulong[]{0x0UL,0x0UL,0x90000000000UL});
		public static readonly BitSet _168_in_functioncall_or_column2653 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COUNT_in_functioncall_or_column2669 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8040000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2671 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000000UL});
		public static readonly BitSet _167_in_functioncall_or_column2674 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x400148042000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2676 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x400148002000000UL});
		public static readonly BitSet _expression_in_functioncall_or_column2679 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10040000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2681 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000000UL});
		public static readonly BitSet _168_in_functioncall_or_column2684 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COUNT_in_functioncall_or_column2699 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8040000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2701 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000000UL});
		public static readonly BitSet _167_in_functioncall_or_column2704 = new BitSet(new ulong[]{0x10000000UL,0x0UL,0x40000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2706 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _DISTINCT_in_functioncall_or_column2709 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2711 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x400148002000000UL});
		public static readonly BitSet _expression_in_functioncall_or_column2713 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10040000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2715 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000000UL});
		public static readonly BitSet _168_in_functioncall_or_column2718 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COUNT_in_functioncall_or_column2733 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8040000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2735 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000000UL});
		public static readonly BitSet _167_in_functioncall_or_column2738 = new BitSet(new ulong[]{0x4000000000000000UL,0x0UL,0x20040000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2740 = new BitSet(new ulong[]{0x4000000000000000UL,0x0UL,0x20000000000UL});
		public static readonly BitSet _all_columns_in_functioncall_or_column2743 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10040000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2745 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000000UL});
		public static readonly BitSet _168_in_functioncall_or_column2748 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COUNT_in_functioncall_or_column2763 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8040000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2765 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000000UL});
		public static readonly BitSet _167_in_functioncall_or_column2768 = new BitSet(new ulong[]{0x10000000UL,0x0UL,0x40000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2770 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _DISTINCT_in_functioncall_or_column2773 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2775 = new BitSet(new ulong[]{0x4000000000000000UL,0x0UL,0x20000000000UL});
		public static readonly BitSet _all_columns_in_functioncall_or_column2777 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10040000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2779 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000000UL});
		public static readonly BitSet _168_in_functioncall_or_column2782 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _table_alias_in_functioncall_or_column2800 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200040000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2802 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _173_in_functioncall_or_column2805 = new BitSet(new ulong[]{0x4000000000000000UL,0x0UL,0x40000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2807 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _column_name_in_functioncall_or_column2812 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SIMPLE_FILE_in_column_name2835 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SIMPLE_FILE_in_table_alias2846 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CONVERT_in_specialfunctioncall2866 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8040000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2868 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000000UL});
		public static readonly BitSet _167_in_specialfunctioncall2871 = new BitSet(new ulong[]{0x0UL,0x20UL,0x40000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2873 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _TOKEN_in_specialfunctioncall2876 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80040000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2878 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000000UL});
		public static readonly BitSet _171_in_specialfunctioncall2881 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x400148042000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2883 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x400148002000000UL});
		public static readonly BitSet _expression_in_specialfunctioncall2886 = new BitSet(new ulong[]{0x0UL,0x0UL,0x90040000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2888 = new BitSet(new ulong[]{0x0UL,0x0UL,0x90000000000UL});
		public static readonly BitSet _171_in_specialfunctioncall2892 = new BitSet(new ulong[]{0x0UL,0x1UL,0x40000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2894 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _STRING_in_specialfunctioncall2897 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10040000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2899 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000000UL});
		public static readonly BitSet _168_in_specialfunctioncall2904 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CAST_in_specialfunctioncall2922 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8040000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2924 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000000UL});
		public static readonly BitSet _167_in_specialfunctioncall2927 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x400148042000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2929 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x400148002000000UL});
		public static readonly BitSet _expression_in_specialfunctioncall2932 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2934 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _AS_in_specialfunctioncall2936 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2938 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _datatype_in_specialfunctioncall2940 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10040000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2942 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000000UL});
		public static readonly BitSet _168_in_specialfunctioncall2945 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DATEADD_in_specialfunctioncall2960 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8040000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2962 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000000UL});
		public static readonly BitSet _167_in_specialfunctioncall2965 = new BitSet(new ulong[]{0x0UL,0x20UL,0x40000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2967 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _datepart_in_specialfunctioncall2970 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80040000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2972 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000000UL});
		public static readonly BitSet _171_in_specialfunctioncall2975 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x400148042000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2977 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x400148002000000UL});
		public static readonly BitSet _expression_in_specialfunctioncall2980 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80040000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2982 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000000UL});
		public static readonly BitSet _171_in_specialfunctioncall2985 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x400148042000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2987 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x400148002000000UL});
		public static readonly BitSet _expression_in_specialfunctioncall2990 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10040000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2992 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000000UL});
		public static readonly BitSet _168_in_specialfunctioncall2995 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DATEDIFF_in_specialfunctioncall3013 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8040000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3015 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000000UL});
		public static readonly BitSet _167_in_specialfunctioncall3018 = new BitSet(new ulong[]{0x0UL,0x20UL,0x40000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3020 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _datepart_in_specialfunctioncall3023 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80040000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3025 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000000UL});
		public static readonly BitSet _171_in_specialfunctioncall3028 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x400148042000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3030 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x400148002000000UL});
		public static readonly BitSet _expression_in_specialfunctioncall3033 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80040000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3035 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000000UL});
		public static readonly BitSet _171_in_specialfunctioncall3038 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x400148042000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3040 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x400148002000000UL});
		public static readonly BitSet _expression_in_specialfunctioncall3043 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10040000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3045 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000000UL});
		public static readonly BitSet _168_in_specialfunctioncall3048 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DATEPART_in_specialfunctioncall3066 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8040000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3068 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000000UL});
		public static readonly BitSet _167_in_specialfunctioncall3071 = new BitSet(new ulong[]{0x0UL,0x20UL,0x40000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3073 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _datepart_in_specialfunctioncall3076 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80040000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3078 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000000UL});
		public static readonly BitSet _171_in_specialfunctioncall3081 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x400148042000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3083 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x400148002000000UL});
		public static readonly BitSet _expression_in_specialfunctioncall3086 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10040000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3088 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000000UL});
		public static readonly BitSet _168_in_specialfunctioncall3091 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_datepart3115 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_number3135 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_string3143 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_datatype3163 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VARIABLE_in_variable3175 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CASE_in_case3195 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _WS_in_case3197 = new BitSet(new ulong[]{0x400C000381CCC000UL,0x23UL,0x400148012000000UL});
		public static readonly BitSet _expression_in_case3200 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _WS_in_case3202 = new BitSet(new ulong[]{0x180000000UL,0x0UL,0x10000000UL});
		public static readonly BitSet _case_when_in_case3207 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _WS_in_case3209 = new BitSet(new ulong[]{0x180000000UL,0x0UL,0x10000000UL});
		public static readonly BitSet _case_else_in_case3214 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _WS_in_case3216 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _END_in_case3220 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHEN_in_case_when3248 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _WS_in_case_when3250 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x400148002000000UL});
		public static readonly BitSet _expression_in_case_when3254 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _WS_in_case_when3256 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _THEN_in_case_when3258 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _WS_in_case_when3260 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x400148002000000UL});
		public static readonly BitSet _expression_in_case_when3264 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ELSE_in_case_else3289 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _WS_in_case_else3291 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x400148002000000UL});
		public static readonly BitSet _expression_in_case_else3293 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _167_in_synpred1_gql590 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SELECT_in_synpred2_gql1708 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _subquery_in_synpred3_gql2549 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  FxGqlLib 
