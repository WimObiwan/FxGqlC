//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g 2012-10-31 17:21:13

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591


// `XXX' does not need a CLSCompliant attribute because the assembly is not marked as CLS-compliant (CS3021)
#pragma warning disable 3021
// The private field `XXX' is assigned but its value is never used (CS0414)
#pragma warning disable 414


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  FxGqlLib 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class gqlParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "A", "ALL", "AND", "ANY", "AS", "ASC", "B", "BETWEEN", "BOTTOM", "BY", "C", "CASE", "CAST", "COMMENT_BLOCK", "COMMENT_LINE", "CONVERT", "COUNT", "CREATE", "D", "DATEADD", "DATEDIFF", "DATEPART", "DECLARE", "DESC", "DIGIT", "DISTINCT", "DROP", "E", "ELSE", "END", "EXISTS", "F", "FOR", "FROM", "G", "GROUP", "H", "HAVING", "I", "IN", "INTO", "J", "K", "L", "LIKE", "M", "MATCH", "N", "NOT", "NUMBER", "O", "OR", "ORDER", "ORIG", "P", "Q", "R", "S", "SELECT", "SET", "SIMPLEPIVOT", "SIMPLE_FILE", "SOME", "STRING", "SYSTEMVAR", "T", "TABLE", "THEN", "TOKEN", "TOP", "T_ALL", "T_ALLCOLUMNS", "T_AND", "T_ANY", "T_BETWEEN", "T_BITWISE_AND", "T_BITWISE_NOT", "T_BITWISE_OR", "T_BITWISE_XOR", "T_BOTTOM", "T_CASE", "T_CASE_ELSE", "T_CASE_WHEN", "T_COLUMN", "T_COLUMNLIST", "T_CONVERT", "T_COUNT", "T_CREATE_VIEW", "T_DATEPART", "T_DECLARATION", "T_DECLARE", "T_DISTINCT", "T_DISTINCTCOUNT", "T_DIVIDE", "T_DROP_TABLE", "T_DROP_VIEW", "T_EQUAL", "T_EXISTS", "T_EXPRESSIONLIST", "T_FILE", "T_FILEOPTION", "T_FILESUBQUERY", "T_FROM", "T_FUNCTIONCALL", "T_GREATER", "T_GROUPBY", "T_GROUPBY_ORIG", "T_HAVING", "T_IN", "T_INTEGER", "T_INTO", "T_LESS", "T_LIKE", "T_MATCH", "T_MINUS", "T_MODULO", "T_NOT", "T_NOTBETWEEN", "T_NOTEQUAL", "T_NOTGREATER", "T_NOTIN", "T_NOTLESS", "T_NOTLIKE", "T_NOTMATCH", "T_OP_BINARY", "T_OP_UNARY", "T_OR", "T_ORDERBY", "T_ORDERBY_ASC", "T_ORDERBY_COLUMN", "T_ORDERBY_DESC", "T_ORDERBY_ORIG", "T_PLUS", "T_PRODUCT", "T_ROOT", "T_SELECT", "T_SELECT_SIMPLE", "T_SELECT_UNION", "T_SET_VARIABLE", "T_STRING", "T_SUBQUERY", "T_SYSTEMVAR", "T_TABLE_ALIAS", "T_TOP", "T_USE", "T_VARIABLE", "T_VIEW", "T_VIEW_NAME", "T_WHERE", "U", "UNION", "USE", "V", "VARIABLE", "VIEW", "W", "WHEN", "WHERE", "WITH", "WS", "X", "Y", "Z", "'!<'", "'!='", "'!>'", "'%'", "'&'", "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", "';'", "'<'", "'<='", "'<>'", "'='", "'>'", "'>='", "'['", "']'", "'^'", "'|'", "'~'"
	};
	public const int EOF=-1;
	public const int T__167=167;
	public const int T__168=168;
	public const int T__169=169;
	public const int T__170=170;
	public const int T__171=171;
	public const int T__172=172;
	public const int T__173=173;
	public const int T__174=174;
	public const int T__175=175;
	public const int T__176=176;
	public const int T__177=177;
	public const int T__178=178;
	public const int T__179=179;
	public const int T__180=180;
	public const int T__181=181;
	public const int T__182=182;
	public const int T__183=183;
	public const int T__184=184;
	public const int T__185=185;
	public const int T__186=186;
	public const int T__187=187;
	public const int T__188=188;
	public const int T__189=189;
	public const int T__190=190;
	public const int T__191=191;
	public const int A=4;
	public const int ALL=5;
	public const int AND=6;
	public const int ANY=7;
	public const int AS=8;
	public const int ASC=9;
	public const int B=10;
	public const int BETWEEN=11;
	public const int BOTTOM=12;
	public const int BY=13;
	public const int C=14;
	public const int CASE=15;
	public const int CAST=16;
	public const int COMMENT_BLOCK=17;
	public const int COMMENT_LINE=18;
	public const int CONVERT=19;
	public const int COUNT=20;
	public const int CREATE=21;
	public const int D=22;
	public const int DATEADD=23;
	public const int DATEDIFF=24;
	public const int DATEPART=25;
	public const int DECLARE=26;
	public const int DESC=27;
	public const int DIGIT=28;
	public const int DISTINCT=29;
	public const int DROP=30;
	public const int E=31;
	public const int ELSE=32;
	public const int END=33;
	public const int EXISTS=34;
	public const int F=35;
	public const int FOR=36;
	public const int FROM=37;
	public const int G=38;
	public const int GROUP=39;
	public const int H=40;
	public const int HAVING=41;
	public const int I=42;
	public const int IN=43;
	public const int INTO=44;
	public const int J=45;
	public const int K=46;
	public const int L=47;
	public const int LIKE=48;
	public const int M=49;
	public const int MATCH=50;
	public const int N=51;
	public const int NOT=52;
	public const int NUMBER=53;
	public const int O=54;
	public const int OR=55;
	public const int ORDER=56;
	public const int ORIG=57;
	public const int P=58;
	public const int Q=59;
	public const int R=60;
	public const int S=61;
	public const int SELECT=62;
	public const int SET=63;
	public const int SIMPLEPIVOT=64;
	public const int SIMPLE_FILE=65;
	public const int SOME=66;
	public const int STRING=67;
	public const int SYSTEMVAR=68;
	public const int T=69;
	public const int TABLE=70;
	public const int THEN=71;
	public const int TOKEN=72;
	public const int TOP=73;
	public const int T_ALL=74;
	public const int T_ALLCOLUMNS=75;
	public const int T_AND=76;
	public const int T_ANY=77;
	public const int T_BETWEEN=78;
	public const int T_BITWISE_AND=79;
	public const int T_BITWISE_NOT=80;
	public const int T_BITWISE_OR=81;
	public const int T_BITWISE_XOR=82;
	public const int T_BOTTOM=83;
	public const int T_CASE=84;
	public const int T_CASE_ELSE=85;
	public const int T_CASE_WHEN=86;
	public const int T_COLUMN=87;
	public const int T_COLUMNLIST=88;
	public const int T_CONVERT=89;
	public const int T_COUNT=90;
	public const int T_CREATE_VIEW=91;
	public const int T_DATEPART=92;
	public const int T_DECLARATION=93;
	public const int T_DECLARE=94;
	public const int T_DISTINCT=95;
	public const int T_DISTINCTCOUNT=96;
	public const int T_DIVIDE=97;
	public const int T_DROP_TABLE=98;
	public const int T_DROP_VIEW=99;
	public const int T_EQUAL=100;
	public const int T_EXISTS=101;
	public const int T_EXPRESSIONLIST=102;
	public const int T_FILE=103;
	public const int T_FILEOPTION=104;
	public const int T_FILESUBQUERY=105;
	public const int T_FROM=106;
	public const int T_FUNCTIONCALL=107;
	public const int T_GREATER=108;
	public const int T_GROUPBY=109;
	public const int T_GROUPBY_ORIG=110;
	public const int T_HAVING=111;
	public const int T_IN=112;
	public const int T_INTEGER=113;
	public const int T_INTO=114;
	public const int T_LESS=115;
	public const int T_LIKE=116;
	public const int T_MATCH=117;
	public const int T_MINUS=118;
	public const int T_MODULO=119;
	public const int T_NOT=120;
	public const int T_NOTBETWEEN=121;
	public const int T_NOTEQUAL=122;
	public const int T_NOTGREATER=123;
	public const int T_NOTIN=124;
	public const int T_NOTLESS=125;
	public const int T_NOTLIKE=126;
	public const int T_NOTMATCH=127;
	public const int T_OP_BINARY=128;
	public const int T_OP_UNARY=129;
	public const int T_OR=130;
	public const int T_ORDERBY=131;
	public const int T_ORDERBY_ASC=132;
	public const int T_ORDERBY_COLUMN=133;
	public const int T_ORDERBY_DESC=134;
	public const int T_ORDERBY_ORIG=135;
	public const int T_PLUS=136;
	public const int T_PRODUCT=137;
	public const int T_ROOT=138;
	public const int T_SELECT=139;
	public const int T_SELECT_SIMPLE=140;
	public const int T_SELECT_UNION=141;
	public const int T_SET_VARIABLE=142;
	public const int T_STRING=143;
	public const int T_SUBQUERY=144;
	public const int T_SYSTEMVAR=145;
	public const int T_TABLE_ALIAS=146;
	public const int T_TOP=147;
	public const int T_USE=148;
	public const int T_VARIABLE=149;
	public const int T_VIEW=150;
	public const int T_VIEW_NAME=151;
	public const int T_WHERE=152;
	public const int U=153;
	public const int UNION=154;
	public const int USE=155;
	public const int V=156;
	public const int VARIABLE=157;
	public const int VIEW=158;
	public const int W=159;
	public const int WHEN=160;
	public const int WHERE=161;
	public const int WITH=162;
	public const int WS=163;
	public const int X=164;
	public const int Y=165;
	public const int Z=166;

	#if ANTLR_DEBUG
		private static readonly bool[] decisionCanBacktrack =
			new bool[]
			{
				false, // invalid decision
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, true, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, true, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, true, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false
			};
	#else
		private static readonly bool[] decisionCanBacktrack = new bool[0];
	#endif
	public gqlParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public gqlParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}
	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return gqlParser.tokenNames; } }
	public override string GrammarFileName { get { return "C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g"; } }


	[Conditional("ANTLR_TRACE")]
	protected virtual void OnCreated() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

	#region Rules

	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_parse() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_parse() {}

	// $ANTLR start "parse"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:111:1: parse : ( WS )? ( commands ( WS )? )? EOF -> ^( T_ROOT ( commands )? ) ;
	[GrammarRule("parse")]
	private AstParserRuleReturnScope<object, IToken> parse()
	{
		EnterRule_parse();
		EnterRule("parse", 1);
		TraceIn("parse", 1);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS1 = default(IToken);
	    IToken WS3 = default(IToken);
	    IToken EOF4 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> commands2 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS1_tree = default(object);
	    object WS3_tree = default(object);
	    object EOF4_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
	    RewriteRuleSubtreeStream stream_commands=new RewriteRuleSubtreeStream(adaptor,"rule commands");
		try { DebugEnterRule(GrammarFileName, "parse");
		DebugLocation(111, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:112:2: ( ( WS )? ( commands ( WS )? )? EOF -> ^( T_ROOT ( commands )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:112:4: ( WS )? ( commands ( WS )? )? EOF
			{
			DebugLocation(112, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:112:4: ( WS )?
			int alt1=2;
			try { DebugEnterSubRule(1);
			try { DebugEnterDecision(1, decisionCanBacktrack[1]);
			int LA1_0 = input.LA(1);

			if ((LA1_0==WS))
			{
				alt1 = 1;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:112:4: WS
				{
				DebugLocation(112, 4);
				WS1=(IToken)Match(input,WS,Follow._WS_in_parse398); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS1);


				}
				break;

			}
			} finally { DebugExitSubRule(1); }

			DebugLocation(112, 8);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:112:8: ( commands ( WS )? )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, decisionCanBacktrack[3]);
			int LA3_0 = input.LA(1);

			if ((LA3_0==CREATE||LA3_0==DECLARE||LA3_0==DROP||(LA3_0>=SELECT && LA3_0<=SET)||LA3_0==USE||LA3_0==172))
			{
				alt3 = 1;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:112:9: commands ( WS )?
				{
				DebugLocation(112, 9);
				PushFollow(Follow._commands_in_parse402);
				commands2=commands();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_commands.Add(commands2.Tree);
				DebugLocation(112, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:112:18: ( WS )?
				int alt2=2;
				try { DebugEnterSubRule(2);
				try { DebugEnterDecision(2, decisionCanBacktrack[2]);
				int LA2_0 = input.LA(1);

				if ((LA2_0==WS))
				{
					alt2 = 1;
				}
				} finally { DebugExitDecision(2); }
				switch (alt2)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:112:18: WS
					{
					DebugLocation(112, 18);
					WS3=(IToken)Match(input,WS,Follow._WS_in_parse404); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS3);


					}
					break;

				}
				} finally { DebugExitSubRule(2); }


				}
				break;

			}
			} finally { DebugExitSubRule(3); }

			DebugLocation(112, 24);
			EOF4=(IToken)Match(input,EOF,Follow._EOF_in_parse409); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EOF.Add(EOF4);



			{
			// AST REWRITE
			// elements: commands
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 113:2: -> ^( T_ROOT ( commands )? )
			{
				DebugLocation(113, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:113:5: ^( T_ROOT ( commands )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(113, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_ROOT, "T_ROOT"), root_1);

				DebugLocation(113, 14);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:113:14: ( commands )?
				if (stream_commands.HasNext)
				{
					DebugLocation(113, 14);
					adaptor.AddChild(root_1, stream_commands.NextTree());

				}
				stream_commands.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parse", 1);
			LeaveRule("parse", 1);
			LeaveRule_parse();
	    }
	 	DebugLocation(114, 1);
		} finally { DebugExitRule(GrammarFileName, "parse"); }
		return retval;

	}
	// $ANTLR end "parse"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_commands() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_commands() {}

	// $ANTLR start "commands"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:116:1: commands : command ( ( WS )? ';' ( WS )? command )* ( ( WS )? ';' )? -> ( command )+ ;
	[GrammarRule("commands")]
	private AstParserRuleReturnScope<object, IToken> commands()
	{
		EnterRule_commands();
		EnterRule("commands", 2);
		TraceIn("commands", 2);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS6 = default(IToken);
	    IToken char_literal7 = default(IToken);
	    IToken WS8 = default(IToken);
	    IToken WS10 = default(IToken);
	    IToken char_literal11 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> command5 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> command9 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS6_tree = default(object);
	    object char_literal7_tree = default(object);
	    object WS8_tree = default(object);
	    object WS10_tree = default(object);
	    object char_literal11_tree = default(object);
	    RewriteRuleITokenStream stream_180=new RewriteRuleITokenStream(adaptor,"token 180");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_command=new RewriteRuleSubtreeStream(adaptor,"rule command");
		try { DebugEnterRule(GrammarFileName, "commands");
		DebugLocation(116, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:117:2: ( command ( ( WS )? ';' ( WS )? command )* ( ( WS )? ';' )? -> ( command )+ )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:117:4: command ( ( WS )? ';' ( WS )? command )* ( ( WS )? ';' )?
			{
			DebugLocation(117, 4);
			PushFollow(Follow._command_in_commands432);
			command5=command();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_command.Add(command5.Tree);
			DebugLocation(117, 12);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:117:12: ( ( WS )? ';' ( WS )? command )*
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, decisionCanBacktrack[6]);
				int LA6_0 = input.LA(1);

				if ((LA6_0==WS))
				{
					int LA6_1 = input.LA(2);

					if ((LA6_1==180))
					{
						int LA6_2 = input.LA(3);

						if ((LA6_2==WS))
						{
							int LA6_4 = input.LA(4);

							if ((LA6_4==CREATE||LA6_4==DECLARE||LA6_4==DROP||(LA6_4>=SELECT && LA6_4<=SET)||LA6_4==USE||LA6_4==172))
							{
								alt6 = 1;
							}


						}
						else if ((LA6_2==CREATE||LA6_2==DECLARE||LA6_2==DROP||(LA6_2>=SELECT && LA6_2<=SET)||LA6_2==USE||LA6_2==172))
						{
							alt6 = 1;
						}


					}


				}
				else if ((LA6_0==180))
				{
					int LA6_2 = input.LA(2);

					if ((LA6_2==WS))
					{
						int LA6_4 = input.LA(3);

						if ((LA6_4==CREATE||LA6_4==DECLARE||LA6_4==DROP||(LA6_4>=SELECT && LA6_4<=SET)||LA6_4==USE||LA6_4==172))
						{
							alt6 = 1;
						}


					}
					else if ((LA6_2==CREATE||LA6_2==DECLARE||LA6_2==DROP||(LA6_2>=SELECT && LA6_2<=SET)||LA6_2==USE||LA6_2==172))
					{
						alt6 = 1;
					}


				}


				} finally { DebugExitDecision(6); }
				switch ( alt6 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:117:13: ( WS )? ';' ( WS )? command
					{
					DebugLocation(117, 13);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:117:13: ( WS )?
					int alt4=2;
					try { DebugEnterSubRule(4);
					try { DebugEnterDecision(4, decisionCanBacktrack[4]);
					int LA4_0 = input.LA(1);

					if ((LA4_0==WS))
					{
						alt4 = 1;
					}
					} finally { DebugExitDecision(4); }
					switch (alt4)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:117:13: WS
						{
						DebugLocation(117, 13);
						WS6=(IToken)Match(input,WS,Follow._WS_in_commands435); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS6);


						}
						break;

					}
					} finally { DebugExitSubRule(4); }

					DebugLocation(117, 17);
					char_literal7=(IToken)Match(input,180,Follow._180_in_commands438); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_180.Add(char_literal7);

					DebugLocation(117, 21);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:117:21: ( WS )?
					int alt5=2;
					try { DebugEnterSubRule(5);
					try { DebugEnterDecision(5, decisionCanBacktrack[5]);
					int LA5_0 = input.LA(1);

					if ((LA5_0==WS))
					{
						alt5 = 1;
					}
					} finally { DebugExitDecision(5); }
					switch (alt5)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:117:21: WS
						{
						DebugLocation(117, 21);
						WS8=(IToken)Match(input,WS,Follow._WS_in_commands440); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS8);


						}
						break;

					}
					} finally { DebugExitSubRule(5); }

					DebugLocation(117, 25);
					PushFollow(Follow._command_in_commands443);
					command9=command();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_command.Add(command9.Tree);

					}
					break;

				default:
					goto loop6;
				}
			}

			loop6:
				;

			} finally { DebugExitSubRule(6); }

			DebugLocation(117, 35);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:117:35: ( ( WS )? ';' )?
			int alt8=2;
			try { DebugEnterSubRule(8);
			try { DebugEnterDecision(8, decisionCanBacktrack[8]);
			int LA8_0 = input.LA(1);

			if ((LA8_0==WS))
			{
				int LA8_1 = input.LA(2);

				if ((LA8_1==180))
				{
					alt8 = 1;
				}
			}
			else if ((LA8_0==180))
			{
				alt8 = 1;
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:117:36: ( WS )? ';'
				{
				DebugLocation(117, 36);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:117:36: ( WS )?
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, decisionCanBacktrack[7]);
				int LA7_0 = input.LA(1);

				if ((LA7_0==WS))
				{
					alt7 = 1;
				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:117:36: WS
					{
					DebugLocation(117, 36);
					WS10=(IToken)Match(input,WS,Follow._WS_in_commands448); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS10);


					}
					break;

				}
				} finally { DebugExitSubRule(7); }

				DebugLocation(117, 40);
				char_literal11=(IToken)Match(input,180,Follow._180_in_commands451); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_180.Add(char_literal11);


				}
				break;

			}
			} finally { DebugExitSubRule(8); }



			{
			// AST REWRITE
			// elements: command
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 118:2: -> ( command )+
			{
				DebugLocation(118, 5);
				if (!(stream_command.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_command.HasNext )
				{
					DebugLocation(118, 5);
					adaptor.AddChild(root_0, stream_command.NextTree());

				}
				stream_command.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("commands", 2);
			LeaveRule("commands", 2);
			LeaveRule_commands();
	    }
	 	DebugLocation(119, 1);
		} finally { DebugExitRule(GrammarFileName, "commands"); }
		return retval;

	}
	// $ANTLR end "commands"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_command() {}

	// $ANTLR start "command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:121:1: command : ( select_command | use_command | declare_command | set_command | create_view_command | drop_view_command | drop_table_command );
	[GrammarRule("command")]
	private AstParserRuleReturnScope<object, IToken> command()
	{
		EnterRule_command();
		EnterRule("command", 3);
		TraceIn("command", 3);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> select_command12 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> use_command13 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> declare_command14 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> set_command15 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> create_view_command16 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> drop_view_command17 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> drop_table_command18 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "command");
		DebugLocation(121, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:122:2: ( select_command | use_command | declare_command | set_command | create_view_command | drop_view_command | drop_table_command )
			int alt9=7;
			try { DebugEnterDecision(9, decisionCanBacktrack[9]);
			switch (input.LA(1))
			{
			case SELECT:
			case 172:
				{
				alt9 = 1;
				}
				break;
			case USE:
				{
				alt9 = 2;
				}
				break;
			case DECLARE:
				{
				alt9 = 3;
				}
				break;
			case SET:
				{
				alt9 = 4;
				}
				break;
			case CREATE:
				{
				alt9 = 5;
				}
				break;
			case DROP:
				{
				int LA9_6 = input.LA(2);

				if ((LA9_6==WS))
				{
					int LA9_7 = input.LA(3);

					if ((LA9_7==VIEW))
					{
						alt9 = 6;
					}
					else if ((LA9_7==TABLE))
					{
						alt9 = 7;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 9, 7, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 6, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:122:4: select_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(122, 4);
				PushFollow(Follow._select_command_in_command471);
				select_command12=select_command();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, select_command12.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:123:4: use_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(123, 4);
				PushFollow(Follow._use_command_in_command476);
				use_command13=use_command();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, use_command13.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:124:4: declare_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(124, 4);
				PushFollow(Follow._declare_command_in_command481);
				declare_command14=declare_command();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, declare_command14.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:125:4: set_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(125, 4);
				PushFollow(Follow._set_command_in_command486);
				set_command15=set_command();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, set_command15.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:126:4: create_view_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(126, 4);
				PushFollow(Follow._create_view_command_in_command491);
				create_view_command16=create_view_command();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, create_view_command16.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:127:4: drop_view_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(127, 4);
				PushFollow(Follow._drop_view_command_in_command496);
				drop_view_command17=drop_view_command();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, drop_view_command17.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:128:4: drop_table_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(128, 4);
				PushFollow(Follow._drop_table_command_in_command501);
				drop_table_command18=drop_table_command();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, drop_table_command18.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("command", 3);
			LeaveRule("command", 3);
			LeaveRule_command();
	    }
	 	DebugLocation(129, 1);
		} finally { DebugExitRule(GrammarFileName, "command"); }
		return retval;

	}
	// $ANTLR end "command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_select_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_select_command() {}

	// $ANTLR start "select_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:134:1: select_command : select_command_union ( WS orderby_clause )? -> ^( T_SELECT select_command_union ( orderby_clause )? ) ;
	[GrammarRule("select_command")]
	private AstParserRuleReturnScope<object, IToken> select_command()
	{
		EnterRule_select_command();
		EnterRule("select_command", 4);
		TraceIn("select_command", 4);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS20 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> select_command_union19 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> orderby_clause21 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS20_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_select_command_union=new RewriteRuleSubtreeStream(adaptor,"rule select_command_union");
	    RewriteRuleSubtreeStream stream_orderby_clause=new RewriteRuleSubtreeStream(adaptor,"rule orderby_clause");
		try { DebugEnterRule(GrammarFileName, "select_command");
		DebugLocation(134, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:135:2: ( select_command_union ( WS orderby_clause )? -> ^( T_SELECT select_command_union ( orderby_clause )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:135:4: select_command_union ( WS orderby_clause )?
			{
			DebugLocation(135, 4);
			PushFollow(Follow._select_command_union_in_select_command515);
			select_command_union19=select_command_union();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_select_command_union.Add(select_command_union19.Tree);
			DebugLocation(135, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:135:25: ( WS orderby_clause )?
			int alt10=2;
			try { DebugEnterSubRule(10);
			try { DebugEnterDecision(10, decisionCanBacktrack[10]);
			int LA10_0 = input.LA(1);

			if ((LA10_0==WS))
			{
				int LA10_1 = input.LA(2);

				if ((LA10_1==ORDER))
				{
					alt10 = 1;
				}
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:135:26: WS orderby_clause
				{
				DebugLocation(135, 26);
				WS20=(IToken)Match(input,WS,Follow._WS_in_select_command518); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS20);

				DebugLocation(135, 29);
				PushFollow(Follow._orderby_clause_in_select_command520);
				orderby_clause21=orderby_clause();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_orderby_clause.Add(orderby_clause21.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(10); }



			{
			// AST REWRITE
			// elements: select_command_union, orderby_clause
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 136:3: -> ^( T_SELECT select_command_union ( orderby_clause )? )
			{
				DebugLocation(136, 6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:136:6: ^( T_SELECT select_command_union ( orderby_clause )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(136, 8);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SELECT, "T_SELECT"), root_1);

				DebugLocation(136, 17);
				adaptor.AddChild(root_1, stream_select_command_union.NextTree());
				DebugLocation(136, 38);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:136:38: ( orderby_clause )?
				if (stream_orderby_clause.HasNext)
				{
					DebugLocation(136, 38);
					adaptor.AddChild(root_1, stream_orderby_clause.NextTree());

				}
				stream_orderby_clause.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("select_command", 4);
			LeaveRule("select_command", 4);
			LeaveRule_select_command();
	    }
	 	DebugLocation(137, 1);
		} finally { DebugExitRule(GrammarFileName, "select_command"); }
		return retval;

	}
	// $ANTLR end "select_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_select_command_union() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_select_command_union() {}

	// $ANTLR start "select_command_union"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:142:1: select_command_union : (a= select_command_simple -> $a) ( WS UNION WS b= select_command_simple -> ^( T_SELECT_UNION $select_command_union $b) )* ;
	[GrammarRule("select_command_union")]
	private AstParserRuleReturnScope<object, IToken> select_command_union()
	{
		EnterRule_select_command_union();
		EnterRule("select_command_union", 5);
		TraceIn("select_command_union", 5);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS22 = default(IToken);
	    IToken UNION23 = default(IToken);
	    IToken WS24 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);

	    object WS22_tree = default(object);
	    object UNION23_tree = default(object);
	    object WS24_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_UNION=new RewriteRuleITokenStream(adaptor,"token UNION");
	    RewriteRuleSubtreeStream stream_select_command_simple=new RewriteRuleSubtreeStream(adaptor,"rule select_command_simple");
		try { DebugEnterRule(GrammarFileName, "select_command_union");
		DebugLocation(142, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:143:2: ( (a= select_command_simple -> $a) ( WS UNION WS b= select_command_simple -> ^( T_SELECT_UNION $select_command_union $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:143:4: (a= select_command_simple -> $a) ( WS UNION WS b= select_command_simple -> ^( T_SELECT_UNION $select_command_union $b) )*
			{
			DebugLocation(143, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:143:4: (a= select_command_simple -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:143:5: a= select_command_simple
			{
			DebugLocation(143, 6);
			PushFollow(Follow._select_command_simple_in_select_command_union552);
			a=select_command_simple();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_select_command_simple.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 143:28: -> $a
			{
				DebugLocation(143, 31);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(143, 34);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:143:34: ( WS UNION WS b= select_command_simple -> ^( T_SELECT_UNION $select_command_union $b) )*
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, decisionCanBacktrack[11]);
				int LA11_0 = input.LA(1);

				if ((LA11_0==WS))
				{
					int LA11_1 = input.LA(2);

					if ((LA11_1==UNION))
					{
						alt11 = 1;
					}


				}


				} finally { DebugExitDecision(11); }
				switch ( alt11 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:143:35: WS UNION WS b= select_command_simple
					{
					DebugLocation(143, 35);
					WS22=(IToken)Match(input,WS,Follow._WS_in_select_command_union559); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS22);

					DebugLocation(143, 38);
					UNION23=(IToken)Match(input,UNION,Follow._UNION_in_select_command_union561); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_UNION.Add(UNION23);

					DebugLocation(143, 44);
					WS24=(IToken)Match(input,WS,Follow._WS_in_select_command_union563); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS24);

					DebugLocation(143, 48);
					PushFollow(Follow._select_command_simple_in_select_command_union567);
					b=select_command_simple();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_select_command_simple.Add(b.Tree);


					{
					// AST REWRITE
					// elements: select_command_union, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 143:71: -> ^( T_SELECT_UNION $select_command_union $b)
					{
						DebugLocation(143, 74);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:143:74: ^( T_SELECT_UNION $select_command_union $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(143, 76);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SELECT_UNION, "T_SELECT_UNION"), root_1);

						DebugLocation(143, 92);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(143, 114);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop11;
				}
			}

			loop11:
				;

			} finally { DebugExitSubRule(11); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("select_command_union", 5);
			LeaveRule("select_command_union", 5);
			LeaveRule_select_command_union();
	    }
	 	DebugLocation(144, 1);
		} finally { DebugExitRule(GrammarFileName, "select_command_union"); }
		return retval;

	}
	// $ANTLR end "select_command_union"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_select_command_simple() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_select_command_simple() {}

	// $ANTLR start "select_command_simple"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:146:1: select_command_simple : ( ( '(' )=> subquery | SELECT ( WS distinct_clause )? ( WS top_clause )? ( WS bottom_clause )? WS column_list ( WS into_clause )? ( WS from_clause )? ( WS where_clause )? ( WS groupby_clause )? ( WS having_clause )? -> ^( T_SELECT_SIMPLE ( distinct_clause )? ( top_clause )? ( bottom_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( having_clause )? ) );
	[GrammarRule("select_command_simple")]
	private AstParserRuleReturnScope<object, IToken> select_command_simple()
	{
		EnterRule_select_command_simple();
		EnterRule("select_command_simple", 6);
		TraceIn("select_command_simple", 6);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken SELECT26 = default(IToken);
	    IToken WS27 = default(IToken);
	    IToken WS29 = default(IToken);
	    IToken WS31 = default(IToken);
	    IToken WS33 = default(IToken);
	    IToken WS35 = default(IToken);
	    IToken WS37 = default(IToken);
	    IToken WS39 = default(IToken);
	    IToken WS41 = default(IToken);
	    IToken WS43 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> subquery25 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> distinct_clause28 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> top_clause30 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> bottom_clause32 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> column_list34 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> into_clause36 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> from_clause38 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> where_clause40 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> groupby_clause42 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> having_clause44 = default(AstParserRuleReturnScope<object, IToken>);

	    object SELECT26_tree = default(object);
	    object WS27_tree = default(object);
	    object WS29_tree = default(object);
	    object WS31_tree = default(object);
	    object WS33_tree = default(object);
	    object WS35_tree = default(object);
	    object WS37_tree = default(object);
	    object WS39_tree = default(object);
	    object WS41_tree = default(object);
	    object WS43_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_SELECT=new RewriteRuleITokenStream(adaptor,"token SELECT");
	    RewriteRuleSubtreeStream stream_groupby_clause=new RewriteRuleSubtreeStream(adaptor,"rule groupby_clause");
	    RewriteRuleSubtreeStream stream_distinct_clause=new RewriteRuleSubtreeStream(adaptor,"rule distinct_clause");
	    RewriteRuleSubtreeStream stream_from_clause=new RewriteRuleSubtreeStream(adaptor,"rule from_clause");
	    RewriteRuleSubtreeStream stream_having_clause=new RewriteRuleSubtreeStream(adaptor,"rule having_clause");
	    RewriteRuleSubtreeStream stream_column_list=new RewriteRuleSubtreeStream(adaptor,"rule column_list");
	    RewriteRuleSubtreeStream stream_where_clause=new RewriteRuleSubtreeStream(adaptor,"rule where_clause");
	    RewriteRuleSubtreeStream stream_into_clause=new RewriteRuleSubtreeStream(adaptor,"rule into_clause");
	    RewriteRuleSubtreeStream stream_bottom_clause=new RewriteRuleSubtreeStream(adaptor,"rule bottom_clause");
	    RewriteRuleSubtreeStream stream_top_clause=new RewriteRuleSubtreeStream(adaptor,"rule top_clause");
		try { DebugEnterRule(GrammarFileName, "select_command_simple");
		DebugLocation(146, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:147:2: ( ( '(' )=> subquery | SELECT ( WS distinct_clause )? ( WS top_clause )? ( WS bottom_clause )? WS column_list ( WS into_clause )? ( WS from_clause )? ( WS where_clause )? ( WS groupby_clause )? ( WS having_clause )? -> ^( T_SELECT_SIMPLE ( distinct_clause )? ( top_clause )? ( bottom_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( having_clause )? ) )
			int alt20=2;
			try { DebugEnterDecision(20, decisionCanBacktrack[20]);
			int LA20_0 = input.LA(1);

			if ((LA20_0==172) && (EvaluatePredicate(synpred1_gql_fragment)))
			{
				alt20 = 1;
			}
			else if ((LA20_0==SELECT))
			{
				alt20 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 20, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:147:4: ( '(' )=> subquery
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(147, 13);
				PushFollow(Follow._subquery_in_select_command_simple599);
				subquery25=subquery();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, subquery25.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:148:4: SELECT ( WS distinct_clause )? ( WS top_clause )? ( WS bottom_clause )? WS column_list ( WS into_clause )? ( WS from_clause )? ( WS where_clause )? ( WS groupby_clause )? ( WS having_clause )?
				{
				DebugLocation(148, 4);
				SELECT26=(IToken)Match(input,SELECT,Follow._SELECT_in_select_command_simple604); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SELECT.Add(SELECT26);

				DebugLocation(148, 11);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:148:11: ( WS distinct_clause )?
				int alt12=2;
				try { DebugEnterSubRule(12);
				try { DebugEnterDecision(12, decisionCanBacktrack[12]);
				int LA12_0 = input.LA(1);

				if ((LA12_0==WS))
				{
					int LA12_1 = input.LA(2);

					if ((LA12_1==ALL||LA12_1==DISTINCT))
					{
						alt12 = 1;
					}
				}
				} finally { DebugExitDecision(12); }
				switch (alt12)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:148:12: WS distinct_clause
					{
					DebugLocation(148, 12);
					WS27=(IToken)Match(input,WS,Follow._WS_in_select_command_simple607); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS27);

					DebugLocation(148, 15);
					PushFollow(Follow._distinct_clause_in_select_command_simple609);
					distinct_clause28=distinct_clause();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_distinct_clause.Add(distinct_clause28.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(12); }

				DebugLocation(148, 33);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:148:33: ( WS top_clause )?
				int alt13=2;
				try { DebugEnterSubRule(13);
				try { DebugEnterDecision(13, decisionCanBacktrack[13]);
				int LA13_0 = input.LA(1);

				if ((LA13_0==WS))
				{
					int LA13_1 = input.LA(2);

					if ((LA13_1==TOP))
					{
						alt13 = 1;
					}
				}
				} finally { DebugExitDecision(13); }
				switch (alt13)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:148:34: WS top_clause
					{
					DebugLocation(148, 34);
					WS29=(IToken)Match(input,WS,Follow._WS_in_select_command_simple614); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS29);

					DebugLocation(148, 37);
					PushFollow(Follow._top_clause_in_select_command_simple616);
					top_clause30=top_clause();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_top_clause.Add(top_clause30.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(13); }

				DebugLocation(148, 50);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:148:50: ( WS bottom_clause )?
				int alt14=2;
				try { DebugEnterSubRule(14);
				try { DebugEnterDecision(14, decisionCanBacktrack[14]);
				int LA14_0 = input.LA(1);

				if ((LA14_0==WS))
				{
					int LA14_1 = input.LA(2);

					if ((LA14_1==BOTTOM))
					{
						alt14 = 1;
					}
				}
				} finally { DebugExitDecision(14); }
				switch (alt14)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:148:51: WS bottom_clause
					{
					DebugLocation(148, 51);
					WS31=(IToken)Match(input,WS,Follow._WS_in_select_command_simple621); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS31);

					DebugLocation(148, 54);
					PushFollow(Follow._bottom_clause_in_select_command_simple623);
					bottom_clause32=bottom_clause();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bottom_clause.Add(bottom_clause32.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(14); }

				DebugLocation(148, 70);
				WS33=(IToken)Match(input,WS,Follow._WS_in_select_command_simple627); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS33);

				DebugLocation(148, 73);
				PushFollow(Follow._column_list_in_select_command_simple629);
				column_list34=column_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_column_list.Add(column_list34.Tree);
				DebugLocation(148, 85);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:148:85: ( WS into_clause )?
				int alt15=2;
				try { DebugEnterSubRule(15);
				try { DebugEnterDecision(15, decisionCanBacktrack[15]);
				int LA15_0 = input.LA(1);

				if ((LA15_0==WS))
				{
					int LA15_1 = input.LA(2);

					if ((LA15_1==INTO))
					{
						alt15 = 1;
					}
				}
				} finally { DebugExitDecision(15); }
				switch (alt15)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:148:86: WS into_clause
					{
					DebugLocation(148, 86);
					WS35=(IToken)Match(input,WS,Follow._WS_in_select_command_simple632); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS35);

					DebugLocation(148, 89);
					PushFollow(Follow._into_clause_in_select_command_simple634);
					into_clause36=into_clause();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_into_clause.Add(into_clause36.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(15); }

				DebugLocation(148, 103);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:148:103: ( WS from_clause )?
				int alt16=2;
				try { DebugEnterSubRule(16);
				try { DebugEnterDecision(16, decisionCanBacktrack[16]);
				int LA16_0 = input.LA(1);

				if ((LA16_0==WS))
				{
					int LA16_1 = input.LA(2);

					if ((LA16_1==FROM))
					{
						alt16 = 1;
					}
				}
				} finally { DebugExitDecision(16); }
				switch (alt16)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:148:104: WS from_clause
					{
					DebugLocation(148, 104);
					WS37=(IToken)Match(input,WS,Follow._WS_in_select_command_simple639); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS37);

					DebugLocation(148, 107);
					PushFollow(Follow._from_clause_in_select_command_simple641);
					from_clause38=from_clause();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_from_clause.Add(from_clause38.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(16); }

				DebugLocation(148, 121);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:148:121: ( WS where_clause )?
				int alt17=2;
				try { DebugEnterSubRule(17);
				try { DebugEnterDecision(17, decisionCanBacktrack[17]);
				int LA17_0 = input.LA(1);

				if ((LA17_0==WS))
				{
					int LA17_1 = input.LA(2);

					if ((LA17_1==WHERE))
					{
						alt17 = 1;
					}
				}
				} finally { DebugExitDecision(17); }
				switch (alt17)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:148:122: WS where_clause
					{
					DebugLocation(148, 122);
					WS39=(IToken)Match(input,WS,Follow._WS_in_select_command_simple646); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS39);

					DebugLocation(148, 125);
					PushFollow(Follow._where_clause_in_select_command_simple648);
					where_clause40=where_clause();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_where_clause.Add(where_clause40.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(17); }

				DebugLocation(148, 140);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:148:140: ( WS groupby_clause )?
				int alt18=2;
				try { DebugEnterSubRule(18);
				try { DebugEnterDecision(18, decisionCanBacktrack[18]);
				int LA18_0 = input.LA(1);

				if ((LA18_0==WS))
				{
					int LA18_1 = input.LA(2);

					if ((LA18_1==GROUP))
					{
						alt18 = 1;
					}
				}
				} finally { DebugExitDecision(18); }
				switch (alt18)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:148:141: WS groupby_clause
					{
					DebugLocation(148, 141);
					WS41=(IToken)Match(input,WS,Follow._WS_in_select_command_simple653); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS41);

					DebugLocation(148, 144);
					PushFollow(Follow._groupby_clause_in_select_command_simple655);
					groupby_clause42=groupby_clause();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_groupby_clause.Add(groupby_clause42.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(18); }

				DebugLocation(148, 161);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:148:161: ( WS having_clause )?
				int alt19=2;
				try { DebugEnterSubRule(19);
				try { DebugEnterDecision(19, decisionCanBacktrack[19]);
				int LA19_0 = input.LA(1);

				if ((LA19_0==WS))
				{
					int LA19_1 = input.LA(2);

					if ((LA19_1==HAVING))
					{
						alt19 = 1;
					}
				}
				} finally { DebugExitDecision(19); }
				switch (alt19)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:148:162: WS having_clause
					{
					DebugLocation(148, 162);
					WS43=(IToken)Match(input,WS,Follow._WS_in_select_command_simple660); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS43);

					DebugLocation(148, 165);
					PushFollow(Follow._having_clause_in_select_command_simple662);
					having_clause44=having_clause();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_having_clause.Add(having_clause44.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(19); }



				{
				// AST REWRITE
				// elements: groupby_clause, column_list, bottom_clause, top_clause, having_clause, where_clause, from_clause, into_clause, distinct_clause
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 149:3: -> ^( T_SELECT_SIMPLE ( distinct_clause )? ( top_clause )? ( bottom_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( having_clause )? )
				{
					DebugLocation(149, 6);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:149:6: ^( T_SELECT_SIMPLE ( distinct_clause )? ( top_clause )? ( bottom_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( having_clause )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(149, 8);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SELECT_SIMPLE, "T_SELECT_SIMPLE"), root_1);

					DebugLocation(149, 24);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:149:24: ( distinct_clause )?
					if (stream_distinct_clause.HasNext)
					{
						DebugLocation(149, 24);
						adaptor.AddChild(root_1, stream_distinct_clause.NextTree());

					}
					stream_distinct_clause.Reset();
					DebugLocation(149, 41);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:149:41: ( top_clause )?
					if (stream_top_clause.HasNext)
					{
						DebugLocation(149, 41);
						adaptor.AddChild(root_1, stream_top_clause.NextTree());

					}
					stream_top_clause.Reset();
					DebugLocation(149, 53);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:149:53: ( bottom_clause )?
					if (stream_bottom_clause.HasNext)
					{
						DebugLocation(149, 53);
						adaptor.AddChild(root_1, stream_bottom_clause.NextTree());

					}
					stream_bottom_clause.Reset();
					DebugLocation(149, 68);
					adaptor.AddChild(root_1, stream_column_list.NextTree());
					DebugLocation(149, 80);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:149:80: ( into_clause )?
					if (stream_into_clause.HasNext)
					{
						DebugLocation(149, 80);
						adaptor.AddChild(root_1, stream_into_clause.NextTree());

					}
					stream_into_clause.Reset();
					DebugLocation(149, 93);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:149:93: ( from_clause )?
					if (stream_from_clause.HasNext)
					{
						DebugLocation(149, 93);
						adaptor.AddChild(root_1, stream_from_clause.NextTree());

					}
					stream_from_clause.Reset();
					DebugLocation(149, 106);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:149:106: ( where_clause )?
					if (stream_where_clause.HasNext)
					{
						DebugLocation(149, 106);
						adaptor.AddChild(root_1, stream_where_clause.NextTree());

					}
					stream_where_clause.Reset();
					DebugLocation(149, 120);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:149:120: ( groupby_clause )?
					if (stream_groupby_clause.HasNext)
					{
						DebugLocation(149, 120);
						adaptor.AddChild(root_1, stream_groupby_clause.NextTree());

					}
					stream_groupby_clause.Reset();
					DebugLocation(149, 136);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:149:136: ( having_clause )?
					if (stream_having_clause.HasNext)
					{
						DebugLocation(149, 136);
						adaptor.AddChild(root_1, stream_having_clause.NextTree());

					}
					stream_having_clause.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("select_command_simple", 6);
			LeaveRule("select_command_simple", 6);
			LeaveRule_select_command_simple();
	    }
	 	DebugLocation(150, 1);
		} finally { DebugExitRule(GrammarFileName, "select_command_simple"); }
		return retval;

	}
	// $ANTLR end "select_command_simple"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_distinct_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_distinct_clause() {}

	// $ANTLR start "distinct_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:152:1: distinct_clause : ( DISTINCT -> T_DISTINCT | ALL -> T_ALL );
	[GrammarRule("distinct_clause")]
	private AstParserRuleReturnScope<object, IToken> distinct_clause()
	{
		EnterRule_distinct_clause();
		EnterRule("distinct_clause", 7);
		TraceIn("distinct_clause", 7);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken DISTINCT45 = default(IToken);
	    IToken ALL46 = default(IToken);

	    object DISTINCT45_tree = default(object);
	    object ALL46_tree = default(object);
	    RewriteRuleITokenStream stream_DISTINCT=new RewriteRuleITokenStream(adaptor,"token DISTINCT");
	    RewriteRuleITokenStream stream_ALL=new RewriteRuleITokenStream(adaptor,"token ALL");

		try { DebugEnterRule(GrammarFileName, "distinct_clause");
		DebugLocation(152, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:153:2: ( DISTINCT -> T_DISTINCT | ALL -> T_ALL )
			int alt21=2;
			try { DebugEnterDecision(21, decisionCanBacktrack[21]);
			int LA21_0 = input.LA(1);

			if ((LA21_0==DISTINCT))
			{
				alt21 = 1;
			}
			else if ((LA21_0==ALL))
			{
				alt21 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 21, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:153:4: DISTINCT
				{
				DebugLocation(153, 4);
				DISTINCT45=(IToken)Match(input,DISTINCT,Follow._DISTINCT_in_distinct_clause710); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DISTINCT.Add(DISTINCT45);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 153:13: -> T_DISTINCT
				{
					DebugLocation(153, 16);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_DISTINCT, "T_DISTINCT"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:154:4: ALL
				{
				DebugLocation(154, 4);
				ALL46=(IToken)Match(input,ALL,Follow._ALL_in_distinct_clause719); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ALL.Add(ALL46);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 154:8: -> T_ALL
				{
					DebugLocation(154, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_ALL, "T_ALL"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("distinct_clause", 7);
			LeaveRule("distinct_clause", 7);
			LeaveRule_distinct_clause();
	    }
	 	DebugLocation(155, 1);
		} finally { DebugExitRule(GrammarFileName, "distinct_clause"); }
		return retval;

	}
	// $ANTLR end "distinct_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_top_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_top_clause() {}

	// $ANTLR start "top_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:157:1: top_clause : TOP WS expression_atom -> ^( T_TOP expression_atom ) ;
	[GrammarRule("top_clause")]
	private AstParserRuleReturnScope<object, IToken> top_clause()
	{
		EnterRule_top_clause();
		EnterRule("top_clause", 8);
		TraceIn("top_clause", 8);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOP47 = default(IToken);
	    IToken WS48 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression_atom49 = default(AstParserRuleReturnScope<object, IToken>);

	    object TOP47_tree = default(object);
	    object WS48_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_TOP=new RewriteRuleITokenStream(adaptor,"token TOP");
	    RewriteRuleSubtreeStream stream_expression_atom=new RewriteRuleSubtreeStream(adaptor,"rule expression_atom");
		try { DebugEnterRule(GrammarFileName, "top_clause");
		DebugLocation(157, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:158:2: ( TOP WS expression_atom -> ^( T_TOP expression_atom ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:158:4: TOP WS expression_atom
			{
			DebugLocation(158, 4);
			TOP47=(IToken)Match(input,TOP,Follow._TOP_in_top_clause735); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_TOP.Add(TOP47);

			DebugLocation(158, 8);
			WS48=(IToken)Match(input,WS,Follow._WS_in_top_clause737); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS48);

			DebugLocation(158, 11);
			PushFollow(Follow._expression_atom_in_top_clause739);
			expression_atom49=expression_atom();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression_atom.Add(expression_atom49.Tree);


			{
			// AST REWRITE
			// elements: expression_atom
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 158:27: -> ^( T_TOP expression_atom )
			{
				DebugLocation(158, 30);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:158:30: ^( T_TOP expression_atom )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(158, 32);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_TOP, "T_TOP"), root_1);

				DebugLocation(158, 38);
				adaptor.AddChild(root_1, stream_expression_atom.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("top_clause", 8);
			LeaveRule("top_clause", 8);
			LeaveRule_top_clause();
	    }
	 	DebugLocation(159, 1);
		} finally { DebugExitRule(GrammarFileName, "top_clause"); }
		return retval;

	}
	// $ANTLR end "top_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_bottom_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_bottom_clause() {}

	// $ANTLR start "bottom_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:161:1: bottom_clause : BOTTOM WS expression_atom -> ^( T_BOTTOM expression_atom ) ;
	[GrammarRule("bottom_clause")]
	private AstParserRuleReturnScope<object, IToken> bottom_clause()
	{
		EnterRule_bottom_clause();
		EnterRule("bottom_clause", 9);
		TraceIn("bottom_clause", 9);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken BOTTOM50 = default(IToken);
	    IToken WS51 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression_atom52 = default(AstParserRuleReturnScope<object, IToken>);

	    object BOTTOM50_tree = default(object);
	    object WS51_tree = default(object);
	    RewriteRuleITokenStream stream_BOTTOM=new RewriteRuleITokenStream(adaptor,"token BOTTOM");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression_atom=new RewriteRuleSubtreeStream(adaptor,"rule expression_atom");
		try { DebugEnterRule(GrammarFileName, "bottom_clause");
		DebugLocation(161, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:162:2: ( BOTTOM WS expression_atom -> ^( T_BOTTOM expression_atom ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:162:4: BOTTOM WS expression_atom
			{
			DebugLocation(162, 4);
			BOTTOM50=(IToken)Match(input,BOTTOM,Follow._BOTTOM_in_bottom_clause760); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_BOTTOM.Add(BOTTOM50);

			DebugLocation(162, 11);
			WS51=(IToken)Match(input,WS,Follow._WS_in_bottom_clause762); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS51);

			DebugLocation(162, 14);
			PushFollow(Follow._expression_atom_in_bottom_clause764);
			expression_atom52=expression_atom();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression_atom.Add(expression_atom52.Tree);


			{
			// AST REWRITE
			// elements: expression_atom
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 162:30: -> ^( T_BOTTOM expression_atom )
			{
				DebugLocation(162, 33);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:162:33: ^( T_BOTTOM expression_atom )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(162, 35);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_BOTTOM, "T_BOTTOM"), root_1);

				DebugLocation(162, 44);
				adaptor.AddChild(root_1, stream_expression_atom.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bottom_clause", 9);
			LeaveRule("bottom_clause", 9);
			LeaveRule_bottom_clause();
	    }
	 	DebugLocation(163, 1);
		} finally { DebugExitRule(GrammarFileName, "bottom_clause"); }
		return retval;

	}
	// $ANTLR end "bottom_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_column_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_column_list() {}

	// $ANTLR start "column_list"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:165:1: column_list : column ( ( WS )? ',' ( WS )? column )* -> ^( T_COLUMNLIST ( column )* ) ;
	[GrammarRule("column_list")]
	private AstParserRuleReturnScope<object, IToken> column_list()
	{
		EnterRule_column_list();
		EnterRule("column_list", 10);
		TraceIn("column_list", 10);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS54 = default(IToken);
	    IToken char_literal55 = default(IToken);
	    IToken WS56 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> column53 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> column57 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS54_tree = default(object);
	    object char_literal55_tree = default(object);
	    object WS56_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_176=new RewriteRuleITokenStream(adaptor,"token 176");
	    RewriteRuleSubtreeStream stream_column=new RewriteRuleSubtreeStream(adaptor,"rule column");
		try { DebugEnterRule(GrammarFileName, "column_list");
		DebugLocation(165, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:166:2: ( column ( ( WS )? ',' ( WS )? column )* -> ^( T_COLUMNLIST ( column )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:166:4: column ( ( WS )? ',' ( WS )? column )*
			{
			DebugLocation(166, 4);
			PushFollow(Follow._column_in_column_list785);
			column53=column();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_column.Add(column53.Tree);
			DebugLocation(166, 11);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:166:11: ( ( WS )? ',' ( WS )? column )*
			try { DebugEnterSubRule(24);
			while (true)
			{
				int alt24=2;
				try { DebugEnterDecision(24, decisionCanBacktrack[24]);
				int LA24_0 = input.LA(1);

				if ((LA24_0==WS))
				{
					int LA24_1 = input.LA(2);

					if ((LA24_1==176))
					{
						alt24 = 1;
					}


				}
				else if ((LA24_0==176))
				{
					alt24 = 1;
				}


				} finally { DebugExitDecision(24); }
				switch ( alt24 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:166:12: ( WS )? ',' ( WS )? column
					{
					DebugLocation(166, 12);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:166:12: ( WS )?
					int alt22=2;
					try { DebugEnterSubRule(22);
					try { DebugEnterDecision(22, decisionCanBacktrack[22]);
					int LA22_0 = input.LA(1);

					if ((LA22_0==WS))
					{
						alt22 = 1;
					}
					} finally { DebugExitDecision(22); }
					switch (alt22)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:166:12: WS
						{
						DebugLocation(166, 12);
						WS54=(IToken)Match(input,WS,Follow._WS_in_column_list788); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS54);


						}
						break;

					}
					} finally { DebugExitSubRule(22); }

					DebugLocation(166, 16);
					char_literal55=(IToken)Match(input,176,Follow._176_in_column_list791); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_176.Add(char_literal55);

					DebugLocation(166, 20);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:166:20: ( WS )?
					int alt23=2;
					try { DebugEnterSubRule(23);
					try { DebugEnterDecision(23, decisionCanBacktrack[23]);
					int LA23_0 = input.LA(1);

					if ((LA23_0==WS))
					{
						alt23 = 1;
					}
					} finally { DebugExitDecision(23); }
					switch (alt23)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:166:20: WS
						{
						DebugLocation(166, 20);
						WS56=(IToken)Match(input,WS,Follow._WS_in_column_list793); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS56);


						}
						break;

					}
					} finally { DebugExitSubRule(23); }

					DebugLocation(166, 24);
					PushFollow(Follow._column_in_column_list796);
					column57=column();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_column.Add(column57.Tree);

					}
					break;

				default:
					goto loop24;
				}
			}

			loop24:
				;

			} finally { DebugExitSubRule(24); }



			{
			// AST REWRITE
			// elements: column
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 167:2: -> ^( T_COLUMNLIST ( column )* )
			{
				DebugLocation(167, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:167:5: ^( T_COLUMNLIST ( column )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(167, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_COLUMNLIST, "T_COLUMNLIST"), root_1);

				DebugLocation(167, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:167:20: ( column )*
				while ( stream_column.HasNext )
				{
					DebugLocation(167, 20);
					adaptor.AddChild(root_1, stream_column.NextTree());

				}
				stream_column.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("column_list", 10);
			LeaveRule("column_list", 10);
			LeaveRule_column_list();
	    }
	 	DebugLocation(168, 1);
		} finally { DebugExitRule(GrammarFileName, "column_list"); }
		return retval;

	}
	// $ANTLR end "column_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_column() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_column() {}

	// $ANTLR start "column"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:170:1: column : ( all_columns | expression ( WS SIMPLE_FILE )? -> ^( T_COLUMN expression ( SIMPLE_FILE )? ) );
	[GrammarRule("column")]
	private AstParserRuleReturnScope<object, IToken> column()
	{
		EnterRule_column();
		EnterRule("column", 11);
		TraceIn("column", 11);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS60 = default(IToken);
	    IToken SIMPLE_FILE61 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> all_columns58 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression59 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS60_tree = default(object);
	    object SIMPLE_FILE61_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_SIMPLE_FILE=new RewriteRuleITokenStream(adaptor,"token SIMPLE_FILE");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "column");
		DebugLocation(170, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:171:2: ( all_columns | expression ( WS SIMPLE_FILE )? -> ^( T_COLUMN expression ( SIMPLE_FILE )? ) )
			int alt26=2;
			try { DebugEnterDecision(26, decisionCanBacktrack[26]);
			switch (input.LA(1))
			{
			case SIMPLE_FILE:
				{
				switch (input.LA(2))
				{
				case WS:
					{
					int LA26_4 = input.LA(3);

					if ((LA26_4==EOF||LA26_4==AND||LA26_4==BETWEEN||(LA26_4>=FOR && LA26_4<=FROM)||LA26_4==GROUP||LA26_4==HAVING||(LA26_4>=IN && LA26_4<=INTO)||LA26_4==LIKE||LA26_4==MATCH||LA26_4==NOT||(LA26_4>=OR && LA26_4<=ORDER)||LA26_4==SIMPLE_FILE||LA26_4==UNION||LA26_4==WHERE||(LA26_4>=167 && LA26_4<=171)||(LA26_4>=173 && LA26_4<=177)||(LA26_4>=179 && LA26_4<=186)||(LA26_4>=189 && LA26_4<=190)))
					{
						alt26 = 2;
					}
					else if ((LA26_4==178))
					{
						switch (input.LA(4))
						{
						case WS:
							{
							int LA26_6 = input.LA(5);

							if ((LA26_6==174))
							{
								alt26 = 1;
							}
							else if ((LA26_6==SIMPLE_FILE))
							{
								alt26 = 2;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 26, 6, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case 174:
							{
							alt26 = 1;
							}
							break;
						case SIMPLE_FILE:
							{
							alt26 = 2;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 26, 5, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 26, 4, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 178:
					{
					switch (input.LA(3))
					{
					case WS:
						{
						int LA26_6 = input.LA(4);

						if ((LA26_6==174))
						{
							alt26 = 1;
						}
						else if ((LA26_6==SIMPLE_FILE))
						{
							alt26 = 2;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 26, 6, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case 174:
						{
						alt26 = 1;
						}
						break;
					case SIMPLE_FILE:
						{
						alt26 = 2;
						}
						break;
					default:
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 26, 5, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					}
					break;
				case EOF:
				case LIKE:
				case MATCH:
				case NOT:
				case 167:
				case 168:
				case 169:
				case 170:
				case 171:
				case 173:
				case 174:
				case 175:
				case 176:
				case 177:
				case 179:
				case 180:
				case 181:
				case 182:
				case 183:
				case 184:
				case 185:
				case 186:
				case 189:
				case 190:
					{
					alt26 = 2;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 26, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				}
				break;
			case 174:
				{
				alt26 = 1;
				}
				break;
			case CASE:
			case CAST:
			case CONVERT:
			case COUNT:
			case DATEADD:
			case DATEDIFF:
			case DATEPART:
			case EXISTS:
			case NOT:
			case NUMBER:
			case STRING:
			case SYSTEMVAR:
			case TOKEN:
			case VARIABLE:
			case 172:
			case 175:
			case 177:
			case 191:
				{
				alt26 = 2;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 26, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:171:4: all_columns
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(171, 4);
				PushFollow(Follow._all_columns_in_column820);
				all_columns58=all_columns();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, all_columns58.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:172:4: expression ( WS SIMPLE_FILE )?
				{
				DebugLocation(172, 4);
				PushFollow(Follow._expression_in_column825);
				expression59=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression59.Tree);
				DebugLocation(172, 15);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:172:15: ( WS SIMPLE_FILE )?
				int alt25=2;
				try { DebugEnterSubRule(25);
				try { DebugEnterDecision(25, decisionCanBacktrack[25]);
				int LA25_0 = input.LA(1);

				if ((LA25_0==WS))
				{
					int LA25_1 = input.LA(2);

					if ((LA25_1==SIMPLE_FILE))
					{
						alt25 = 1;
					}
				}
				} finally { DebugExitDecision(25); }
				switch (alt25)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:172:16: WS SIMPLE_FILE
					{
					DebugLocation(172, 16);
					WS60=(IToken)Match(input,WS,Follow._WS_in_column828); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS60);

					DebugLocation(172, 19);
					SIMPLE_FILE61=(IToken)Match(input,SIMPLE_FILE,Follow._SIMPLE_FILE_in_column830); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SIMPLE_FILE.Add(SIMPLE_FILE61);


					}
					break;

				}
				} finally { DebugExitSubRule(25); }



				{
				// AST REWRITE
				// elements: SIMPLE_FILE, expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 172:33: -> ^( T_COLUMN expression ( SIMPLE_FILE )? )
				{
					DebugLocation(172, 36);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:172:36: ^( T_COLUMN expression ( SIMPLE_FILE )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(172, 38);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_COLUMN, "T_COLUMN"), root_1);

					DebugLocation(172, 47);
					adaptor.AddChild(root_1, stream_expression.NextTree());
					DebugLocation(172, 58);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:172:58: ( SIMPLE_FILE )?
					if (stream_SIMPLE_FILE.HasNext)
					{
						DebugLocation(172, 58);
						adaptor.AddChild(root_1, stream_SIMPLE_FILE.NextNode());

					}
					stream_SIMPLE_FILE.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("column", 11);
			LeaveRule("column", 11);
			LeaveRule_column();
	    }
	 	DebugLocation(173, 1);
		} finally { DebugExitRule(GrammarFileName, "column"); }
		return retval;

	}
	// $ANTLR end "column"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_all_columns() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_all_columns() {}

	// $ANTLR start "all_columns"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:175:1: all_columns : ( table_alias ( WS )? '.' ( WS )? )? '*' -> ^( T_ALLCOLUMNS ( table_alias )? ) ;
	[GrammarRule("all_columns")]
	private AstParserRuleReturnScope<object, IToken> all_columns()
	{
		EnterRule_all_columns();
		EnterRule("all_columns", 12);
		TraceIn("all_columns", 12);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS63 = default(IToken);
	    IToken char_literal64 = default(IToken);
	    IToken WS65 = default(IToken);
	    IToken char_literal66 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> table_alias62 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS63_tree = default(object);
	    object char_literal64_tree = default(object);
	    object WS65_tree = default(object);
	    object char_literal66_tree = default(object);
	    RewriteRuleITokenStream stream_174=new RewriteRuleITokenStream(adaptor,"token 174");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_178=new RewriteRuleITokenStream(adaptor,"token 178");
	    RewriteRuleSubtreeStream stream_table_alias=new RewriteRuleSubtreeStream(adaptor,"rule table_alias");
		try { DebugEnterRule(GrammarFileName, "all_columns");
		DebugLocation(175, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:176:2: ( ( table_alias ( WS )? '.' ( WS )? )? '*' -> ^( T_ALLCOLUMNS ( table_alias )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:176:4: ( table_alias ( WS )? '.' ( WS )? )? '*'
			{
			DebugLocation(176, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:176:4: ( table_alias ( WS )? '.' ( WS )? )?
			int alt29=2;
			try { DebugEnterSubRule(29);
			try { DebugEnterDecision(29, decisionCanBacktrack[29]);
			int LA29_0 = input.LA(1);

			if ((LA29_0==SIMPLE_FILE))
			{
				alt29 = 1;
			}
			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:176:5: table_alias ( WS )? '.' ( WS )?
				{
				DebugLocation(176, 5);
				PushFollow(Follow._table_alias_in_all_columns855);
				table_alias62=table_alias();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_table_alias.Add(table_alias62.Tree);
				DebugLocation(176, 17);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:176:17: ( WS )?
				int alt27=2;
				try { DebugEnterSubRule(27);
				try { DebugEnterDecision(27, decisionCanBacktrack[27]);
				int LA27_0 = input.LA(1);

				if ((LA27_0==WS))
				{
					alt27 = 1;
				}
				} finally { DebugExitDecision(27); }
				switch (alt27)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:176:17: WS
					{
					DebugLocation(176, 17);
					WS63=(IToken)Match(input,WS,Follow._WS_in_all_columns857); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS63);


					}
					break;

				}
				} finally { DebugExitSubRule(27); }

				DebugLocation(176, 21);
				char_literal64=(IToken)Match(input,178,Follow._178_in_all_columns860); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_178.Add(char_literal64);

				DebugLocation(176, 25);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:176:25: ( WS )?
				int alt28=2;
				try { DebugEnterSubRule(28);
				try { DebugEnterDecision(28, decisionCanBacktrack[28]);
				int LA28_0 = input.LA(1);

				if ((LA28_0==WS))
				{
					alt28 = 1;
				}
				} finally { DebugExitDecision(28); }
				switch (alt28)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:176:25: WS
					{
					DebugLocation(176, 25);
					WS65=(IToken)Match(input,WS,Follow._WS_in_all_columns862); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS65);


					}
					break;

				}
				} finally { DebugExitSubRule(28); }


				}
				break;

			}
			} finally { DebugExitSubRule(29); }

			DebugLocation(176, 31);
			char_literal66=(IToken)Match(input,174,Follow._174_in_all_columns867); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_174.Add(char_literal66);



			{
			// AST REWRITE
			// elements: table_alias
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 176:35: -> ^( T_ALLCOLUMNS ( table_alias )? )
			{
				DebugLocation(176, 38);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:176:38: ^( T_ALLCOLUMNS ( table_alias )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(176, 40);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_ALLCOLUMNS, "T_ALLCOLUMNS"), root_1);

				DebugLocation(176, 53);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:176:53: ( table_alias )?
				if (stream_table_alias.HasNext)
				{
					DebugLocation(176, 53);
					adaptor.AddChild(root_1, stream_table_alias.NextTree());

				}
				stream_table_alias.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("all_columns", 12);
			LeaveRule("all_columns", 12);
			LeaveRule_all_columns();
	    }
	 	DebugLocation(177, 1);
		} finally { DebugExitRule(GrammarFileName, "all_columns"); }
		return retval;

	}
	// $ANTLR end "all_columns"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_into_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_into_clause() {}

	// $ANTLR start "into_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:179:1: into_clause : INTO WS file -> ^( T_INTO file ) ;
	[GrammarRule("into_clause")]
	private AstParserRuleReturnScope<object, IToken> into_clause()
	{
		EnterRule_into_clause();
		EnterRule("into_clause", 13);
		TraceIn("into_clause", 13);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken INTO67 = default(IToken);
	    IToken WS68 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file69 = default(AstParserRuleReturnScope<object, IToken>);

	    object INTO67_tree = default(object);
	    object WS68_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_INTO=new RewriteRuleITokenStream(adaptor,"token INTO");
	    RewriteRuleSubtreeStream stream_file=new RewriteRuleSubtreeStream(adaptor,"rule file");
		try { DebugEnterRule(GrammarFileName, "into_clause");
		DebugLocation(179, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:180:2: ( INTO WS file -> ^( T_INTO file ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:180:4: INTO WS file
			{
			DebugLocation(180, 4);
			INTO67=(IToken)Match(input,INTO,Follow._INTO_in_into_clause887); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INTO.Add(INTO67);

			DebugLocation(180, 9);
			WS68=(IToken)Match(input,WS,Follow._WS_in_into_clause889); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS68);

			DebugLocation(180, 12);
			PushFollow(Follow._file_in_into_clause891);
			file69=file();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_file.Add(file69.Tree);


			{
			// AST REWRITE
			// elements: file
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 180:17: -> ^( T_INTO file )
			{
				DebugLocation(180, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:180:20: ^( T_INTO file )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(180, 22);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_INTO, "T_INTO"), root_1);

				DebugLocation(180, 29);
				adaptor.AddChild(root_1, stream_file.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("into_clause", 13);
			LeaveRule("into_clause", 13);
			LeaveRule_into_clause();
	    }
	 	DebugLocation(181, 1);
		} finally { DebugExitRule(GrammarFileName, "into_clause"); }
		return retval;

	}
	// $ANTLR end "into_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_from_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_from_clause() {}

	// $ANTLR start "from_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:183:1: from_clause : FROM WS from_clause_item ( ( WS )? ',' ( WS )? from_clause_item )* ( WS table_alias )? -> ^( T_FROM ( table_alias )? ( from_clause_item )* ) ;
	[GrammarRule("from_clause")]
	private AstParserRuleReturnScope<object, IToken> from_clause()
	{
		EnterRule_from_clause();
		EnterRule("from_clause", 14);
		TraceIn("from_clause", 14);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken FROM70 = default(IToken);
	    IToken WS71 = default(IToken);
	    IToken WS73 = default(IToken);
	    IToken char_literal74 = default(IToken);
	    IToken WS75 = default(IToken);
	    IToken WS77 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> from_clause_item72 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> from_clause_item76 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> table_alias78 = default(AstParserRuleReturnScope<object, IToken>);

	    object FROM70_tree = default(object);
	    object WS71_tree = default(object);
	    object WS73_tree = default(object);
	    object char_literal74_tree = default(object);
	    object WS75_tree = default(object);
	    object WS77_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_FROM=new RewriteRuleITokenStream(adaptor,"token FROM");
	    RewriteRuleITokenStream stream_176=new RewriteRuleITokenStream(adaptor,"token 176");
	    RewriteRuleSubtreeStream stream_from_clause_item=new RewriteRuleSubtreeStream(adaptor,"rule from_clause_item");
	    RewriteRuleSubtreeStream stream_table_alias=new RewriteRuleSubtreeStream(adaptor,"rule table_alias");
		try { DebugEnterRule(GrammarFileName, "from_clause");
		DebugLocation(183, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:184:2: ( FROM WS from_clause_item ( ( WS )? ',' ( WS )? from_clause_item )* ( WS table_alias )? -> ^( T_FROM ( table_alias )? ( from_clause_item )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:184:4: FROM WS from_clause_item ( ( WS )? ',' ( WS )? from_clause_item )* ( WS table_alias )?
			{
			DebugLocation(184, 4);
			FROM70=(IToken)Match(input,FROM,Follow._FROM_in_from_clause911); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_FROM.Add(FROM70);

			DebugLocation(184, 9);
			WS71=(IToken)Match(input,WS,Follow._WS_in_from_clause913); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS71);

			DebugLocation(184, 12);
			PushFollow(Follow._from_clause_item_in_from_clause915);
			from_clause_item72=from_clause_item();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_from_clause_item.Add(from_clause_item72.Tree);
			DebugLocation(184, 29);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:184:29: ( ( WS )? ',' ( WS )? from_clause_item )*
			try { DebugEnterSubRule(32);
			while (true)
			{
				int alt32=2;
				try { DebugEnterDecision(32, decisionCanBacktrack[32]);
				int LA32_0 = input.LA(1);

				if ((LA32_0==WS))
				{
					int LA32_1 = input.LA(2);

					if ((LA32_1==176))
					{
						alt32 = 1;
					}


				}
				else if ((LA32_0==176))
				{
					alt32 = 1;
				}


				} finally { DebugExitDecision(32); }
				switch ( alt32 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:184:30: ( WS )? ',' ( WS )? from_clause_item
					{
					DebugLocation(184, 30);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:184:30: ( WS )?
					int alt30=2;
					try { DebugEnterSubRule(30);
					try { DebugEnterDecision(30, decisionCanBacktrack[30]);
					int LA30_0 = input.LA(1);

					if ((LA30_0==WS))
					{
						alt30 = 1;
					}
					} finally { DebugExitDecision(30); }
					switch (alt30)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:184:30: WS
						{
						DebugLocation(184, 30);
						WS73=(IToken)Match(input,WS,Follow._WS_in_from_clause918); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS73);


						}
						break;

					}
					} finally { DebugExitSubRule(30); }

					DebugLocation(184, 34);
					char_literal74=(IToken)Match(input,176,Follow._176_in_from_clause921); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_176.Add(char_literal74);

					DebugLocation(184, 38);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:184:38: ( WS )?
					int alt31=2;
					try { DebugEnterSubRule(31);
					try { DebugEnterDecision(31, decisionCanBacktrack[31]);
					int LA31_0 = input.LA(1);

					if ((LA31_0==WS))
					{
						alt31 = 1;
					}
					} finally { DebugExitDecision(31); }
					switch (alt31)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:184:38: WS
						{
						DebugLocation(184, 38);
						WS75=(IToken)Match(input,WS,Follow._WS_in_from_clause923); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS75);


						}
						break;

					}
					} finally { DebugExitSubRule(31); }

					DebugLocation(184, 42);
					PushFollow(Follow._from_clause_item_in_from_clause926);
					from_clause_item76=from_clause_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_from_clause_item.Add(from_clause_item76.Tree);

					}
					break;

				default:
					goto loop32;
				}
			}

			loop32:
				;

			} finally { DebugExitSubRule(32); }

			DebugLocation(184, 61);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:184:61: ( WS table_alias )?
			int alt33=2;
			try { DebugEnterSubRule(33);
			try { DebugEnterDecision(33, decisionCanBacktrack[33]);
			int LA33_0 = input.LA(1);

			if ((LA33_0==WS))
			{
				int LA33_1 = input.LA(2);

				if ((LA33_1==SIMPLE_FILE))
				{
					alt33 = 1;
				}
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:184:62: WS table_alias
				{
				DebugLocation(184, 62);
				WS77=(IToken)Match(input,WS,Follow._WS_in_from_clause931); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS77);

				DebugLocation(184, 65);
				PushFollow(Follow._table_alias_in_from_clause933);
				table_alias78=table_alias();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_table_alias.Add(table_alias78.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(33); }



			{
			// AST REWRITE
			// elements: table_alias, from_clause_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 184:79: -> ^( T_FROM ( table_alias )? ( from_clause_item )* )
			{
				DebugLocation(184, 82);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:184:82: ^( T_FROM ( table_alias )? ( from_clause_item )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(184, 84);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FROM, "T_FROM"), root_1);

				DebugLocation(184, 91);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:184:91: ( table_alias )?
				if (stream_table_alias.HasNext)
				{
					DebugLocation(184, 91);
					adaptor.AddChild(root_1, stream_table_alias.NextTree());

				}
				stream_table_alias.Reset();
				DebugLocation(184, 104);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:184:104: ( from_clause_item )*
				while ( stream_from_clause_item.HasNext )
				{
					DebugLocation(184, 104);
					adaptor.AddChild(root_1, stream_from_clause_item.NextTree());

				}
				stream_from_clause_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("from_clause", 14);
			LeaveRule("from_clause", 14);
			LeaveRule_from_clause();
	    }
	 	DebugLocation(186, 1);
		} finally { DebugExitRule(GrammarFileName, "from_clause"); }
		return retval;

	}
	// $ANTLR end "from_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_from_clause_item() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_from_clause_item() {}

	// $ANTLR start "from_clause_item"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:188:1: from_clause_item : ( STRING -> ^( T_FILE STRING ) | file | ( subquery WS SIMPLEPIVOT )=> simplepivot | subquery | view_name ( ( WS )? '(' ( expression_list )? ')' )? -> ^( T_VIEW view_name ( expression_list )? ) );
	[GrammarRule("from_clause_item")]
	private AstParserRuleReturnScope<object, IToken> from_clause_item()
	{
		EnterRule_from_clause_item();
		EnterRule("from_clause_item", 15);
		TraceIn("from_clause_item", 15);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken STRING79 = default(IToken);
	    IToken WS84 = default(IToken);
	    IToken char_literal85 = default(IToken);
	    IToken char_literal87 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file80 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> simplepivot81 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> subquery82 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> view_name83 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list86 = default(AstParserRuleReturnScope<object, IToken>);

	    object STRING79_tree = default(object);
	    object WS84_tree = default(object);
	    object char_literal85_tree = default(object);
	    object char_literal87_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_172=new RewriteRuleITokenStream(adaptor,"token 172");
	    RewriteRuleITokenStream stream_173=new RewriteRuleITokenStream(adaptor,"token 173");
	    RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
	    RewriteRuleSubtreeStream stream_view_name=new RewriteRuleSubtreeStream(adaptor,"rule view_name");
	    RewriteRuleSubtreeStream stream_expression_list=new RewriteRuleSubtreeStream(adaptor,"rule expression_list");
		try { DebugEnterRule(GrammarFileName, "from_clause_item");
		DebugLocation(188, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:189:2: ( STRING -> ^( T_FILE STRING ) | file | ( subquery WS SIMPLEPIVOT )=> simplepivot | subquery | view_name ( ( WS )? '(' ( expression_list )? ')' )? -> ^( T_VIEW view_name ( expression_list )? ) )
			int alt37=5;
			try { DebugEnterDecision(37, decisionCanBacktrack[37]);
			switch (input.LA(1))
			{
			case STRING:
				{
				alt37 = 1;
				}
				break;
			case SIMPLE_FILE:
			case 187:
				{
				alt37 = 2;
				}
				break;
			case 172:
				{
				int LA37_4 = input.LA(2);

				if ((EvaluatePredicate(synpred2_gql_fragment)))
				{
					alt37 = 3;
				}
				else if ((true))
				{
					alt37 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 37, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TOKEN:
				{
				alt37 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 37, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:189:4: STRING
				{
				DebugLocation(189, 4);
				STRING79=(IToken)Match(input,STRING,Follow._STRING_in_from_clause_item960); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_STRING.Add(STRING79);



				{
				// AST REWRITE
				// elements: STRING
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 189:11: -> ^( T_FILE STRING )
				{
					DebugLocation(189, 14);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:189:14: ^( T_FILE STRING )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(189, 16);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILE, "T_FILE"), root_1);

					DebugLocation(189, 23);
					adaptor.AddChild(root_1, stream_STRING.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:190:4: file
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(190, 4);
				PushFollow(Follow._file_in_from_clause_item973);
				file80=file();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, file80.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:191:4: ( subquery WS SIMPLEPIVOT )=> simplepivot
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(191, 33);
				PushFollow(Follow._simplepivot_in_from_clause_item988);
				simplepivot81=simplepivot();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, simplepivot81.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:192:4: subquery
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(192, 4);
				PushFollow(Follow._subquery_in_from_clause_item993);
				subquery82=subquery();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, subquery82.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:193:4: view_name ( ( WS )? '(' ( expression_list )? ')' )?
				{
				DebugLocation(193, 4);
				PushFollow(Follow._view_name_in_from_clause_item998);
				view_name83=view_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_view_name.Add(view_name83.Tree);
				DebugLocation(193, 14);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:193:14: ( ( WS )? '(' ( expression_list )? ')' )?
				int alt36=2;
				try { DebugEnterSubRule(36);
				try { DebugEnterDecision(36, decisionCanBacktrack[36]);
				int LA36_0 = input.LA(1);

				if ((LA36_0==WS))
				{
					int LA36_1 = input.LA(2);

					if ((LA36_1==172))
					{
						alt36 = 1;
					}
				}
				else if ((LA36_0==172))
				{
					alt36 = 1;
				}
				} finally { DebugExitDecision(36); }
				switch (alt36)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:193:15: ( WS )? '(' ( expression_list )? ')'
					{
					DebugLocation(193, 15);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:193:15: ( WS )?
					int alt34=2;
					try { DebugEnterSubRule(34);
					try { DebugEnterDecision(34, decisionCanBacktrack[34]);
					int LA34_0 = input.LA(1);

					if ((LA34_0==WS))
					{
						alt34 = 1;
					}
					} finally { DebugExitDecision(34); }
					switch (alt34)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:193:15: WS
						{
						DebugLocation(193, 15);
						WS84=(IToken)Match(input,WS,Follow._WS_in_from_clause_item1001); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS84);


						}
						break;

					}
					} finally { DebugExitSubRule(34); }

					DebugLocation(193, 19);
					char_literal85=(IToken)Match(input,172,Follow._172_in_from_clause_item1004); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_172.Add(char_literal85);

					DebugLocation(193, 23);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:193:23: ( expression_list )?
					int alt35=2;
					try { DebugEnterSubRule(35);
					try { DebugEnterDecision(35, decisionCanBacktrack[35]);
					int LA35_0 = input.LA(1);

					if (((LA35_0>=CASE && LA35_0<=CAST)||(LA35_0>=CONVERT && LA35_0<=COUNT)||(LA35_0>=DATEADD && LA35_0<=DATEPART)||LA35_0==EXISTS||(LA35_0>=NOT && LA35_0<=NUMBER)||LA35_0==SIMPLE_FILE||(LA35_0>=STRING && LA35_0<=SYSTEMVAR)||LA35_0==TOKEN||LA35_0==VARIABLE||LA35_0==172||LA35_0==175||LA35_0==177||LA35_0==191))
					{
						alt35 = 1;
					}
					} finally { DebugExitDecision(35); }
					switch (alt35)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:193:23: expression_list
						{
						DebugLocation(193, 23);
						PushFollow(Follow._expression_list_in_from_clause_item1006);
						expression_list86=expression_list();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expression_list.Add(expression_list86.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(35); }

					DebugLocation(193, 40);
					char_literal87=(IToken)Match(input,173,Follow._173_in_from_clause_item1009); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_173.Add(char_literal87);


					}
					break;

				}
				} finally { DebugExitSubRule(36); }



				{
				// AST REWRITE
				// elements: expression_list, view_name
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 193:46: -> ^( T_VIEW view_name ( expression_list )? )
				{
					DebugLocation(193, 49);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:193:49: ^( T_VIEW view_name ( expression_list )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(193, 51);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_VIEW, "T_VIEW"), root_1);

					DebugLocation(193, 58);
					adaptor.AddChild(root_1, stream_view_name.NextTree());
					DebugLocation(193, 68);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:193:68: ( expression_list )?
					if (stream_expression_list.HasNext)
					{
						DebugLocation(193, 68);
						adaptor.AddChild(root_1, stream_expression_list.NextTree());

					}
					stream_expression_list.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("from_clause_item", 15);
			LeaveRule("from_clause_item", 15);
			LeaveRule_from_clause_item();
	    }
	 	DebugLocation(194, 1);
		} finally { DebugExitRule(GrammarFileName, "from_clause_item"); }
		return retval;

	}
	// $ANTLR end "from_clause_item"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_simplepivot() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_simplepivot() {}

	// $ANTLR start "simplepivot"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:195:1: simplepivot : subquery WS SIMPLEPIVOT WS '(' ( WS )? column_list WS FOR WS expression_atom WS IN WS '(' ( WS )? expression_list ( WS )? ')' ( WS WITH WS '(' ( WS )? with_options ( WS )? ')' ) ( WS )? ')' ;
	[GrammarRule("simplepivot")]
	private AstParserRuleReturnScope<object, IToken> simplepivot()
	{
		EnterRule_simplepivot();
		EnterRule("simplepivot", 16);
		TraceIn("simplepivot", 16);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS89 = default(IToken);
	    IToken SIMPLEPIVOT90 = default(IToken);
	    IToken WS91 = default(IToken);
	    IToken char_literal92 = default(IToken);
	    IToken WS93 = default(IToken);
	    IToken WS95 = default(IToken);
	    IToken FOR96 = default(IToken);
	    IToken WS97 = default(IToken);
	    IToken WS99 = default(IToken);
	    IToken IN100 = default(IToken);
	    IToken WS101 = default(IToken);
	    IToken char_literal102 = default(IToken);
	    IToken WS103 = default(IToken);
	    IToken WS105 = default(IToken);
	    IToken char_literal106 = default(IToken);
	    IToken WS107 = default(IToken);
	    IToken WITH108 = default(IToken);
	    IToken WS109 = default(IToken);
	    IToken char_literal110 = default(IToken);
	    IToken WS111 = default(IToken);
	    IToken WS113 = default(IToken);
	    IToken char_literal114 = default(IToken);
	    IToken WS115 = default(IToken);
	    IToken char_literal116 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> subquery88 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> column_list94 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_atom98 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list104 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> with_options112 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS89_tree = default(object);
	    object SIMPLEPIVOT90_tree = default(object);
	    object WS91_tree = default(object);
	    object char_literal92_tree = default(object);
	    object WS93_tree = default(object);
	    object WS95_tree = default(object);
	    object FOR96_tree = default(object);
	    object WS97_tree = default(object);
	    object WS99_tree = default(object);
	    object IN100_tree = default(object);
	    object WS101_tree = default(object);
	    object char_literal102_tree = default(object);
	    object WS103_tree = default(object);
	    object WS105_tree = default(object);
	    object char_literal106_tree = default(object);
	    object WS107_tree = default(object);
	    object WITH108_tree = default(object);
	    object WS109_tree = default(object);
	    object char_literal110_tree = default(object);
	    object WS111_tree = default(object);
	    object WS113_tree = default(object);
	    object char_literal114_tree = default(object);
	    object WS115_tree = default(object);
	    object char_literal116_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "simplepivot");
		DebugLocation(195, 166);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:196:2: ( subquery WS SIMPLEPIVOT WS '(' ( WS )? column_list WS FOR WS expression_atom WS IN WS '(' ( WS )? expression_list ( WS )? ')' ( WS WITH WS '(' ( WS )? with_options ( WS )? ')' ) ( WS )? ')' )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:196:4: subquery WS SIMPLEPIVOT WS '(' ( WS )? column_list WS FOR WS expression_atom WS IN WS '(' ( WS )? expression_list ( WS )? ')' ( WS WITH WS '(' ( WS )? with_options ( WS )? ')' ) ( WS )? ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(196, 4);
			PushFollow(Follow._subquery_in_simplepivot1032);
			subquery88=subquery();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, subquery88.Tree);
			DebugLocation(196, 13);
			WS89=(IToken)Match(input,WS,Follow._WS_in_simplepivot1034); if (state.failed) return retval;
			if (state.backtracking == 0) {
			WS89_tree = (object)adaptor.Create(WS89);
			adaptor.AddChild(root_0, WS89_tree);
			}
			DebugLocation(196, 16);
			SIMPLEPIVOT90=(IToken)Match(input,SIMPLEPIVOT,Follow._SIMPLEPIVOT_in_simplepivot1036); if (state.failed) return retval;
			if (state.backtracking == 0) {
			SIMPLEPIVOT90_tree = (object)adaptor.Create(SIMPLEPIVOT90);
			adaptor.AddChild(root_0, SIMPLEPIVOT90_tree);
			}
			DebugLocation(196, 28);
			WS91=(IToken)Match(input,WS,Follow._WS_in_simplepivot1038); if (state.failed) return retval;
			if (state.backtracking == 0) {
			WS91_tree = (object)adaptor.Create(WS91);
			adaptor.AddChild(root_0, WS91_tree);
			}
			DebugLocation(196, 31);
			char_literal92=(IToken)Match(input,172,Follow._172_in_simplepivot1040); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal92_tree = (object)adaptor.Create(char_literal92);
			adaptor.AddChild(root_0, char_literal92_tree);
			}
			DebugLocation(196, 35);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:196:35: ( WS )?
			int alt38=2;
			try { DebugEnterSubRule(38);
			try { DebugEnterDecision(38, decisionCanBacktrack[38]);
			int LA38_0 = input.LA(1);

			if ((LA38_0==WS))
			{
				alt38 = 1;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:196:35: WS
				{
				DebugLocation(196, 35);
				WS93=(IToken)Match(input,WS,Follow._WS_in_simplepivot1042); if (state.failed) return retval;
				if (state.backtracking == 0) {
				WS93_tree = (object)adaptor.Create(WS93);
				adaptor.AddChild(root_0, WS93_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(38); }

			DebugLocation(196, 39);
			PushFollow(Follow._column_list_in_simplepivot1045);
			column_list94=column_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, column_list94.Tree);
			DebugLocation(196, 51);
			WS95=(IToken)Match(input,WS,Follow._WS_in_simplepivot1047); if (state.failed) return retval;
			if (state.backtracking == 0) {
			WS95_tree = (object)adaptor.Create(WS95);
			adaptor.AddChild(root_0, WS95_tree);
			}
			DebugLocation(196, 54);
			FOR96=(IToken)Match(input,FOR,Follow._FOR_in_simplepivot1049); if (state.failed) return retval;
			if (state.backtracking == 0) {
			FOR96_tree = (object)adaptor.Create(FOR96);
			adaptor.AddChild(root_0, FOR96_tree);
			}
			DebugLocation(196, 58);
			WS97=(IToken)Match(input,WS,Follow._WS_in_simplepivot1051); if (state.failed) return retval;
			if (state.backtracking == 0) {
			WS97_tree = (object)adaptor.Create(WS97);
			adaptor.AddChild(root_0, WS97_tree);
			}
			DebugLocation(196, 61);
			PushFollow(Follow._expression_atom_in_simplepivot1053);
			expression_atom98=expression_atom();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression_atom98.Tree);
			DebugLocation(196, 77);
			WS99=(IToken)Match(input,WS,Follow._WS_in_simplepivot1055); if (state.failed) return retval;
			if (state.backtracking == 0) {
			WS99_tree = (object)adaptor.Create(WS99);
			adaptor.AddChild(root_0, WS99_tree);
			}
			DebugLocation(196, 80);
			IN100=(IToken)Match(input,IN,Follow._IN_in_simplepivot1057); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IN100_tree = (object)adaptor.Create(IN100);
			adaptor.AddChild(root_0, IN100_tree);
			}
			DebugLocation(196, 83);
			WS101=(IToken)Match(input,WS,Follow._WS_in_simplepivot1059); if (state.failed) return retval;
			if (state.backtracking == 0) {
			WS101_tree = (object)adaptor.Create(WS101);
			adaptor.AddChild(root_0, WS101_tree);
			}
			DebugLocation(196, 86);
			char_literal102=(IToken)Match(input,172,Follow._172_in_simplepivot1061); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal102_tree = (object)adaptor.Create(char_literal102);
			adaptor.AddChild(root_0, char_literal102_tree);
			}
			DebugLocation(196, 90);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:196:90: ( WS )?
			int alt39=2;
			try { DebugEnterSubRule(39);
			try { DebugEnterDecision(39, decisionCanBacktrack[39]);
			int LA39_0 = input.LA(1);

			if ((LA39_0==WS))
			{
				alt39 = 1;
			}
			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:196:90: WS
				{
				DebugLocation(196, 90);
				WS103=(IToken)Match(input,WS,Follow._WS_in_simplepivot1063); if (state.failed) return retval;
				if (state.backtracking == 0) {
				WS103_tree = (object)adaptor.Create(WS103);
				adaptor.AddChild(root_0, WS103_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(39); }

			DebugLocation(196, 94);
			PushFollow(Follow._expression_list_in_simplepivot1066);
			expression_list104=expression_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression_list104.Tree);
			DebugLocation(196, 110);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:196:110: ( WS )?
			int alt40=2;
			try { DebugEnterSubRule(40);
			try { DebugEnterDecision(40, decisionCanBacktrack[40]);
			int LA40_0 = input.LA(1);

			if ((LA40_0==WS))
			{
				alt40 = 1;
			}
			} finally { DebugExitDecision(40); }
			switch (alt40)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:196:110: WS
				{
				DebugLocation(196, 110);
				WS105=(IToken)Match(input,WS,Follow._WS_in_simplepivot1068); if (state.failed) return retval;
				if (state.backtracking == 0) {
				WS105_tree = (object)adaptor.Create(WS105);
				adaptor.AddChild(root_0, WS105_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(40); }

			DebugLocation(196, 114);
			char_literal106=(IToken)Match(input,173,Follow._173_in_simplepivot1071); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal106_tree = (object)adaptor.Create(char_literal106);
			adaptor.AddChild(root_0, char_literal106_tree);
			}
			DebugLocation(196, 118);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:196:118: ( WS WITH WS '(' ( WS )? with_options ( WS )? ')' )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:196:119: WS WITH WS '(' ( WS )? with_options ( WS )? ')'
			{
			DebugLocation(196, 119);
			WS107=(IToken)Match(input,WS,Follow._WS_in_simplepivot1074); if (state.failed) return retval;
			if (state.backtracking == 0) {
			WS107_tree = (object)adaptor.Create(WS107);
			adaptor.AddChild(root_0, WS107_tree);
			}
			DebugLocation(196, 122);
			WITH108=(IToken)Match(input,WITH,Follow._WITH_in_simplepivot1076); if (state.failed) return retval;
			if (state.backtracking == 0) {
			WITH108_tree = (object)adaptor.Create(WITH108);
			adaptor.AddChild(root_0, WITH108_tree);
			}
			DebugLocation(196, 127);
			WS109=(IToken)Match(input,WS,Follow._WS_in_simplepivot1078); if (state.failed) return retval;
			if (state.backtracking == 0) {
			WS109_tree = (object)adaptor.Create(WS109);
			adaptor.AddChild(root_0, WS109_tree);
			}
			DebugLocation(196, 130);
			char_literal110=(IToken)Match(input,172,Follow._172_in_simplepivot1080); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal110_tree = (object)adaptor.Create(char_literal110);
			adaptor.AddChild(root_0, char_literal110_tree);
			}
			DebugLocation(196, 134);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:196:134: ( WS )?
			int alt41=2;
			try { DebugEnterSubRule(41);
			try { DebugEnterDecision(41, decisionCanBacktrack[41]);
			int LA41_0 = input.LA(1);

			if ((LA41_0==WS))
			{
				alt41 = 1;
			}
			} finally { DebugExitDecision(41); }
			switch (alt41)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:196:134: WS
				{
				DebugLocation(196, 134);
				WS111=(IToken)Match(input,WS,Follow._WS_in_simplepivot1082); if (state.failed) return retval;
				if (state.backtracking == 0) {
				WS111_tree = (object)adaptor.Create(WS111);
				adaptor.AddChild(root_0, WS111_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(41); }

			DebugLocation(196, 138);
			PushFollow(Follow._with_options_in_simplepivot1085);
			with_options112=with_options();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, with_options112.Tree);
			DebugLocation(196, 151);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:196:151: ( WS )?
			int alt42=2;
			try { DebugEnterSubRule(42);
			try { DebugEnterDecision(42, decisionCanBacktrack[42]);
			int LA42_0 = input.LA(1);

			if ((LA42_0==WS))
			{
				alt42 = 1;
			}
			} finally { DebugExitDecision(42); }
			switch (alt42)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:196:151: WS
				{
				DebugLocation(196, 151);
				WS113=(IToken)Match(input,WS,Follow._WS_in_simplepivot1087); if (state.failed) return retval;
				if (state.backtracking == 0) {
				WS113_tree = (object)adaptor.Create(WS113);
				adaptor.AddChild(root_0, WS113_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(42); }

			DebugLocation(196, 155);
			char_literal114=(IToken)Match(input,173,Follow._173_in_simplepivot1090); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal114_tree = (object)adaptor.Create(char_literal114);
			adaptor.AddChild(root_0, char_literal114_tree);
			}

			}

			DebugLocation(196, 160);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:196:160: ( WS )?
			int alt43=2;
			try { DebugEnterSubRule(43);
			try { DebugEnterDecision(43, decisionCanBacktrack[43]);
			int LA43_0 = input.LA(1);

			if ((LA43_0==WS))
			{
				alt43 = 1;
			}
			} finally { DebugExitDecision(43); }
			switch (alt43)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:196:160: WS
				{
				DebugLocation(196, 160);
				WS115=(IToken)Match(input,WS,Follow._WS_in_simplepivot1093); if (state.failed) return retval;
				if (state.backtracking == 0) {
				WS115_tree = (object)adaptor.Create(WS115);
				adaptor.AddChild(root_0, WS115_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(43); }

			DebugLocation(196, 164);
			char_literal116=(IToken)Match(input,173,Follow._173_in_simplepivot1096); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal116_tree = (object)adaptor.Create(char_literal116);
			adaptor.AddChild(root_0, char_literal116_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("simplepivot", 16);
			LeaveRule("simplepivot", 16);
			LeaveRule_simplepivot();
	    }
	 	DebugLocation(196, 166);
		} finally { DebugExitRule(GrammarFileName, "simplepivot"); }
		return retval;

	}
	// $ANTLR end "simplepivot"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_subquery() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_subquery() {}

	// $ANTLR start "subquery"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:198:1: subquery : '(' ( WS )? select_command ( WS )? ')' -> ^( T_SUBQUERY select_command ) ;
	[GrammarRule("subquery")]
	private AstParserRuleReturnScope<object, IToken> subquery()
	{
		EnterRule_subquery();
		EnterRule("subquery", 17);
		TraceIn("subquery", 17);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal117 = default(IToken);
	    IToken WS118 = default(IToken);
	    IToken WS120 = default(IToken);
	    IToken char_literal121 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> select_command119 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal117_tree = default(object);
	    object WS118_tree = default(object);
	    object WS120_tree = default(object);
	    object char_literal121_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_172=new RewriteRuleITokenStream(adaptor,"token 172");
	    RewriteRuleITokenStream stream_173=new RewriteRuleITokenStream(adaptor,"token 173");
	    RewriteRuleSubtreeStream stream_select_command=new RewriteRuleSubtreeStream(adaptor,"rule select_command");
		try { DebugEnterRule(GrammarFileName, "subquery");
		DebugLocation(198, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:199:2: ( '(' ( WS )? select_command ( WS )? ')' -> ^( T_SUBQUERY select_command ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:199:4: '(' ( WS )? select_command ( WS )? ')'
			{
			DebugLocation(199, 4);
			char_literal117=(IToken)Match(input,172,Follow._172_in_subquery1106); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_172.Add(char_literal117);

			DebugLocation(199, 8);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:199:8: ( WS )?
			int alt44=2;
			try { DebugEnterSubRule(44);
			try { DebugEnterDecision(44, decisionCanBacktrack[44]);
			int LA44_0 = input.LA(1);

			if ((LA44_0==WS))
			{
				alt44 = 1;
			}
			} finally { DebugExitDecision(44); }
			switch (alt44)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:199:8: WS
				{
				DebugLocation(199, 8);
				WS118=(IToken)Match(input,WS,Follow._WS_in_subquery1108); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS118);


				}
				break;

			}
			} finally { DebugExitSubRule(44); }

			DebugLocation(199, 12);
			PushFollow(Follow._select_command_in_subquery1111);
			select_command119=select_command();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_select_command.Add(select_command119.Tree);
			DebugLocation(199, 27);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:199:27: ( WS )?
			int alt45=2;
			try { DebugEnterSubRule(45);
			try { DebugEnterDecision(45, decisionCanBacktrack[45]);
			int LA45_0 = input.LA(1);

			if ((LA45_0==WS))
			{
				alt45 = 1;
			}
			} finally { DebugExitDecision(45); }
			switch (alt45)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:199:27: WS
				{
				DebugLocation(199, 27);
				WS120=(IToken)Match(input,WS,Follow._WS_in_subquery1113); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS120);


				}
				break;

			}
			} finally { DebugExitSubRule(45); }

			DebugLocation(199, 31);
			char_literal121=(IToken)Match(input,173,Follow._173_in_subquery1116); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_173.Add(char_literal121);



			{
			// AST REWRITE
			// elements: select_command
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 199:35: -> ^( T_SUBQUERY select_command )
			{
				DebugLocation(199, 38);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:199:38: ^( T_SUBQUERY select_command )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(199, 40);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SUBQUERY, "T_SUBQUERY"), root_1);

				DebugLocation(199, 51);
				adaptor.AddChild(root_1, stream_select_command.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("subquery", 17);
			LeaveRule("subquery", 17);
			LeaveRule_subquery();
	    }
	 	DebugLocation(200, 1);
		} finally { DebugExitRule(GrammarFileName, "subquery"); }
		return retval;

	}
	// $ANTLR end "subquery"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file() {}

	// $ANTLR start "file"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:202:1: file : ( '[' ( WS )? file_spec ( WS file_options )? ( WS )? ']' -> ^( T_FILE file_spec file_options ) | '[' ( WS )? subquery ( WS )? ']' -> ^( T_FILESUBQUERY subquery ) | SIMPLE_FILE -> ^( T_FILE SIMPLE_FILE ) );
	[GrammarRule("file")]
	private AstParserRuleReturnScope<object, IToken> file()
	{
		EnterRule_file();
		EnterRule("file", 18);
		TraceIn("file", 18);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal122 = default(IToken);
	    IToken WS123 = default(IToken);
	    IToken WS125 = default(IToken);
	    IToken WS127 = default(IToken);
	    IToken char_literal128 = default(IToken);
	    IToken char_literal129 = default(IToken);
	    IToken WS130 = default(IToken);
	    IToken WS132 = default(IToken);
	    IToken char_literal133 = default(IToken);
	    IToken SIMPLE_FILE134 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file_spec124 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> file_options126 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> subquery131 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal122_tree = default(object);
	    object WS123_tree = default(object);
	    object WS125_tree = default(object);
	    object WS127_tree = default(object);
	    object char_literal128_tree = default(object);
	    object char_literal129_tree = default(object);
	    object WS130_tree = default(object);
	    object WS132_tree = default(object);
	    object char_literal133_tree = default(object);
	    object SIMPLE_FILE134_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_SIMPLE_FILE=new RewriteRuleITokenStream(adaptor,"token SIMPLE_FILE");
	    RewriteRuleITokenStream stream_188=new RewriteRuleITokenStream(adaptor,"token 188");
	    RewriteRuleITokenStream stream_187=new RewriteRuleITokenStream(adaptor,"token 187");
	    RewriteRuleSubtreeStream stream_file_options=new RewriteRuleSubtreeStream(adaptor,"rule file_options");
	    RewriteRuleSubtreeStream stream_file_spec=new RewriteRuleSubtreeStream(adaptor,"rule file_spec");
	    RewriteRuleSubtreeStream stream_subquery=new RewriteRuleSubtreeStream(adaptor,"rule subquery");
		try { DebugEnterRule(GrammarFileName, "file");
		DebugLocation(202, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:203:2: ( '[' ( WS )? file_spec ( WS file_options )? ( WS )? ']' -> ^( T_FILE file_spec file_options ) | '[' ( WS )? subquery ( WS )? ']' -> ^( T_FILESUBQUERY subquery ) | SIMPLE_FILE -> ^( T_FILE SIMPLE_FILE ) )
			int alt51=3;
			try { DebugEnterDecision(51, decisionCanBacktrack[51]);
			int LA51_0 = input.LA(1);

			if ((LA51_0==187))
			{
				switch (input.LA(2))
				{
				case WS:
					{
					int LA51_3 = input.LA(3);

					if ((LA51_3==STRING||LA51_3==VARIABLE))
					{
						alt51 = 1;
					}
					else if ((LA51_3==172))
					{
						alt51 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 51, 3, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case STRING:
				case VARIABLE:
					{
					alt51 = 1;
					}
					break;
				case 172:
					{
					alt51 = 2;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 51, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else if ((LA51_0==SIMPLE_FILE))
			{
				alt51 = 3;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 51, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(51); }
			switch (alt51)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:203:4: '[' ( WS )? file_spec ( WS file_options )? ( WS )? ']'
				{
				DebugLocation(203, 4);
				char_literal122=(IToken)Match(input,187,Follow._187_in_file1135); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_187.Add(char_literal122);

				DebugLocation(203, 8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:203:8: ( WS )?
				int alt46=2;
				try { DebugEnterSubRule(46);
				try { DebugEnterDecision(46, decisionCanBacktrack[46]);
				int LA46_0 = input.LA(1);

				if ((LA46_0==WS))
				{
					alt46 = 1;
				}
				} finally { DebugExitDecision(46); }
				switch (alt46)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:203:8: WS
					{
					DebugLocation(203, 8);
					WS123=(IToken)Match(input,WS,Follow._WS_in_file1137); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS123);


					}
					break;

				}
				} finally { DebugExitSubRule(46); }

				DebugLocation(203, 12);
				PushFollow(Follow._file_spec_in_file1140);
				file_spec124=file_spec();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_file_spec.Add(file_spec124.Tree);
				DebugLocation(203, 22);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:203:22: ( WS file_options )?
				int alt47=2;
				try { DebugEnterSubRule(47);
				try { DebugEnterDecision(47, decisionCanBacktrack[47]);
				int LA47_0 = input.LA(1);

				if ((LA47_0==WS))
				{
					int LA47_1 = input.LA(2);

					if ((LA47_1==177))
					{
						alt47 = 1;
					}
				}
				} finally { DebugExitDecision(47); }
				switch (alt47)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:203:23: WS file_options
					{
					DebugLocation(203, 23);
					WS125=(IToken)Match(input,WS,Follow._WS_in_file1143); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS125);

					DebugLocation(203, 26);
					PushFollow(Follow._file_options_in_file1145);
					file_options126=file_options();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_file_options.Add(file_options126.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(47); }

				DebugLocation(203, 41);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:203:41: ( WS )?
				int alt48=2;
				try { DebugEnterSubRule(48);
				try { DebugEnterDecision(48, decisionCanBacktrack[48]);
				int LA48_0 = input.LA(1);

				if ((LA48_0==WS))
				{
					alt48 = 1;
				}
				} finally { DebugExitDecision(48); }
				switch (alt48)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:203:41: WS
					{
					DebugLocation(203, 41);
					WS127=(IToken)Match(input,WS,Follow._WS_in_file1149); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS127);


					}
					break;

				}
				} finally { DebugExitSubRule(48); }

				DebugLocation(203, 45);
				char_literal128=(IToken)Match(input,188,Follow._188_in_file1152); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_188.Add(char_literal128);



				{
				// AST REWRITE
				// elements: file_options, file_spec
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 203:49: -> ^( T_FILE file_spec file_options )
				{
					DebugLocation(203, 52);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:203:52: ^( T_FILE file_spec file_options )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(203, 54);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILE, "T_FILE"), root_1);

					DebugLocation(203, 61);
					adaptor.AddChild(root_1, stream_file_spec.NextTree());
					DebugLocation(203, 71);
					adaptor.AddChild(root_1, stream_file_options.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:204:4: '[' ( WS )? subquery ( WS )? ']'
				{
				DebugLocation(204, 4);
				char_literal129=(IToken)Match(input,187,Follow._187_in_file1168); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_187.Add(char_literal129);

				DebugLocation(204, 8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:204:8: ( WS )?
				int alt49=2;
				try { DebugEnterSubRule(49);
				try { DebugEnterDecision(49, decisionCanBacktrack[49]);
				int LA49_0 = input.LA(1);

				if ((LA49_0==WS))
				{
					alt49 = 1;
				}
				} finally { DebugExitDecision(49); }
				switch (alt49)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:204:8: WS
					{
					DebugLocation(204, 8);
					WS130=(IToken)Match(input,WS,Follow._WS_in_file1170); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS130);


					}
					break;

				}
				} finally { DebugExitSubRule(49); }

				DebugLocation(204, 12);
				PushFollow(Follow._subquery_in_file1173);
				subquery131=subquery();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_subquery.Add(subquery131.Tree);
				DebugLocation(204, 21);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:204:21: ( WS )?
				int alt50=2;
				try { DebugEnterSubRule(50);
				try { DebugEnterDecision(50, decisionCanBacktrack[50]);
				int LA50_0 = input.LA(1);

				if ((LA50_0==WS))
				{
					alt50 = 1;
				}
				} finally { DebugExitDecision(50); }
				switch (alt50)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:204:21: WS
					{
					DebugLocation(204, 21);
					WS132=(IToken)Match(input,WS,Follow._WS_in_file1175); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS132);


					}
					break;

				}
				} finally { DebugExitSubRule(50); }

				DebugLocation(204, 25);
				char_literal133=(IToken)Match(input,188,Follow._188_in_file1178); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_188.Add(char_literal133);



				{
				// AST REWRITE
				// elements: subquery
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 204:29: -> ^( T_FILESUBQUERY subquery )
				{
					DebugLocation(204, 32);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:204:32: ^( T_FILESUBQUERY subquery )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(204, 34);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILESUBQUERY, "T_FILESUBQUERY"), root_1);

					DebugLocation(204, 49);
					adaptor.AddChild(root_1, stream_subquery.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:205:4: SIMPLE_FILE
				{
				DebugLocation(205, 4);
				SIMPLE_FILE134=(IToken)Match(input,SIMPLE_FILE,Follow._SIMPLE_FILE_in_file1191); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SIMPLE_FILE.Add(SIMPLE_FILE134);



				{
				// AST REWRITE
				// elements: SIMPLE_FILE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 205:16: -> ^( T_FILE SIMPLE_FILE )
				{
					DebugLocation(205, 19);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:205:19: ^( T_FILE SIMPLE_FILE )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(205, 21);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILE, "T_FILE"), root_1);

					DebugLocation(205, 28);
					adaptor.AddChild(root_1, stream_SIMPLE_FILE.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file", 18);
			LeaveRule("file", 18);
			LeaveRule_file();
	    }
	 	DebugLocation(206, 1);
		} finally { DebugExitRule(GrammarFileName, "file"); }
		return retval;

	}
	// $ANTLR end "file"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_spec() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_spec() {}

	// $ANTLR start "file_spec"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:208:1: file_spec : ( string | variable );
	[GrammarRule("file_spec")]
	private AstParserRuleReturnScope<object, IToken> file_spec()
	{
		EnterRule_file_spec();
		EnterRule("file_spec", 19);
		TraceIn("file_spec", 19);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> string135 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> variable136 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "file_spec");
		DebugLocation(208, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:209:2: ( string | variable )
			int alt52=2;
			try { DebugEnterDecision(52, decisionCanBacktrack[52]);
			int LA52_0 = input.LA(1);

			if ((LA52_0==STRING))
			{
				alt52 = 1;
			}
			else if ((LA52_0==VARIABLE))
			{
				alt52 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 52, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:209:4: string
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(209, 4);
				PushFollow(Follow._string_in_file_spec1210);
				string135=@string();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, string135.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:210:4: variable
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(210, 4);
				PushFollow(Follow._variable_in_file_spec1215);
				variable136=variable();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variable136.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_spec", 19);
			LeaveRule("file_spec", 19);
			LeaveRule_file_spec();
	    }
	 	DebugLocation(211, 1);
		} finally { DebugExitRule(GrammarFileName, "file_spec"); }
		return retval;

	}
	// $ANTLR end "file_spec"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_options() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_options() {}

	// $ANTLR start "file_options"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:213:1: file_options : file_option ( WS file_option )* ;
	[GrammarRule("file_options")]
	private AstParserRuleReturnScope<object, IToken> file_options()
	{
		EnterRule_file_options();
		EnterRule("file_options", 20);
		TraceIn("file_options", 20);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS138 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file_option137 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> file_option139 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS138_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "file_options");
		DebugLocation(213, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:214:2: ( file_option ( WS file_option )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:214:4: file_option ( WS file_option )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(214, 4);
			PushFollow(Follow._file_option_in_file_options1227);
			file_option137=file_option();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, file_option137.Tree);
			DebugLocation(214, 16);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:214:16: ( WS file_option )*
			try { DebugEnterSubRule(53);
			while (true)
			{
				int alt53=2;
				try { DebugEnterDecision(53, decisionCanBacktrack[53]);
				int LA53_0 = input.LA(1);

				if ((LA53_0==WS))
				{
					int LA53_1 = input.LA(2);

					if ((LA53_1==177))
					{
						alt53 = 1;
					}


				}


				} finally { DebugExitDecision(53); }
				switch ( alt53 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:214:17: WS file_option
					{
					DebugLocation(214, 17);
					WS138=(IToken)Match(input,WS,Follow._WS_in_file_options1230); if (state.failed) return retval;
					if (state.backtracking == 0) {
					WS138_tree = (object)adaptor.Create(WS138);
					adaptor.AddChild(root_0, WS138_tree);
					}
					DebugLocation(214, 20);
					PushFollow(Follow._file_option_in_file_options1232);
					file_option139=file_option();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, file_option139.Tree);

					}
					break;

				default:
					goto loop53;
				}
			}

			loop53:
				;

			} finally { DebugExitSubRule(53); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_options", 20);
			LeaveRule("file_options", 20);
			LeaveRule_file_options();
	    }
	 	DebugLocation(215, 1);
		} finally { DebugExitRule(GrammarFileName, "file_options"); }
		return retval;

	}
	// $ANTLR end "file_options"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_option() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_option() {}

	// $ANTLR start "file_option"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:217:1: file_option : '-' file_option_name ( ( WS )? '=' ( WS )? file_option_value )? -> ^( T_FILEOPTION file_option_name ( file_option_value )? ) ;
	[GrammarRule("file_option")]
	private AstParserRuleReturnScope<object, IToken> file_option()
	{
		EnterRule_file_option();
		EnterRule("file_option", 21);
		TraceIn("file_option", 21);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal140 = default(IToken);
	    IToken WS142 = default(IToken);
	    IToken char_literal143 = default(IToken);
	    IToken WS144 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file_option_name141 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> file_option_value145 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal140_tree = default(object);
	    object WS142_tree = default(object);
	    object char_literal143_tree = default(object);
	    object WS144_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_184=new RewriteRuleITokenStream(adaptor,"token 184");
	    RewriteRuleITokenStream stream_177=new RewriteRuleITokenStream(adaptor,"token 177");
	    RewriteRuleSubtreeStream stream_file_option_name=new RewriteRuleSubtreeStream(adaptor,"rule file_option_name");
	    RewriteRuleSubtreeStream stream_file_option_value=new RewriteRuleSubtreeStream(adaptor,"rule file_option_value");
		try { DebugEnterRule(GrammarFileName, "file_option");
		DebugLocation(217, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:218:2: ( '-' file_option_name ( ( WS )? '=' ( WS )? file_option_value )? -> ^( T_FILEOPTION file_option_name ( file_option_value )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:218:4: '-' file_option_name ( ( WS )? '=' ( WS )? file_option_value )?
			{
			DebugLocation(218, 4);
			char_literal140=(IToken)Match(input,177,Follow._177_in_file_option1246); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_177.Add(char_literal140);

			DebugLocation(218, 8);
			PushFollow(Follow._file_option_name_in_file_option1248);
			file_option_name141=file_option_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_file_option_name.Add(file_option_name141.Tree);
			DebugLocation(218, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:218:25: ( ( WS )? '=' ( WS )? file_option_value )?
			int alt56=2;
			try { DebugEnterSubRule(56);
			try { DebugEnterDecision(56, decisionCanBacktrack[56]);
			int LA56_0 = input.LA(1);

			if ((LA56_0==WS))
			{
				int LA56_1 = input.LA(2);

				if ((LA56_1==184))
				{
					alt56 = 1;
				}
			}
			else if ((LA56_0==184))
			{
				alt56 = 1;
			}
			} finally { DebugExitDecision(56); }
			switch (alt56)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:218:27: ( WS )? '=' ( WS )? file_option_value
				{
				DebugLocation(218, 27);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:218:27: ( WS )?
				int alt54=2;
				try { DebugEnterSubRule(54);
				try { DebugEnterDecision(54, decisionCanBacktrack[54]);
				int LA54_0 = input.LA(1);

				if ((LA54_0==WS))
				{
					alt54 = 1;
				}
				} finally { DebugExitDecision(54); }
				switch (alt54)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:218:27: WS
					{
					DebugLocation(218, 27);
					WS142=(IToken)Match(input,WS,Follow._WS_in_file_option1252); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS142);


					}
					break;

				}
				} finally { DebugExitSubRule(54); }

				DebugLocation(218, 31);
				char_literal143=(IToken)Match(input,184,Follow._184_in_file_option1255); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_184.Add(char_literal143);

				DebugLocation(218, 35);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:218:35: ( WS )?
				int alt55=2;
				try { DebugEnterSubRule(55);
				try { DebugEnterDecision(55, decisionCanBacktrack[55]);
				int LA55_0 = input.LA(1);

				if ((LA55_0==WS))
				{
					alt55 = 1;
				}
				} finally { DebugExitDecision(55); }
				switch (alt55)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:218:35: WS
					{
					DebugLocation(218, 35);
					WS144=(IToken)Match(input,WS,Follow._WS_in_file_option1257); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS144);


					}
					break;

				}
				} finally { DebugExitSubRule(55); }

				DebugLocation(218, 39);
				PushFollow(Follow._file_option_value_in_file_option1260);
				file_option_value145=file_option_value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_file_option_value.Add(file_option_value145.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(56); }



			{
			// AST REWRITE
			// elements: file_option_name, file_option_value
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 218:59: -> ^( T_FILEOPTION file_option_name ( file_option_value )? )
			{
				DebugLocation(218, 62);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:218:62: ^( T_FILEOPTION file_option_name ( file_option_value )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(218, 64);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILEOPTION, "T_FILEOPTION"), root_1);

				DebugLocation(218, 77);
				adaptor.AddChild(root_1, stream_file_option_name.NextTree());
				DebugLocation(218, 94);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:218:94: ( file_option_value )?
				if (stream_file_option_value.HasNext)
				{
					DebugLocation(218, 94);
					adaptor.AddChild(root_1, stream_file_option_value.NextTree());

				}
				stream_file_option_value.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_option", 21);
			LeaveRule("file_option", 21);
			LeaveRule_file_option();
	    }
	 	DebugLocation(219, 1);
		} finally { DebugExitRule(GrammarFileName, "file_option"); }
		return retval;

	}
	// $ANTLR end "file_option"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_option_name() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_option_name() {}

	// $ANTLR start "file_option_name"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:221:1: file_option_name : TOKEN ;
	[GrammarRule("file_option_name")]
	private AstParserRuleReturnScope<object, IToken> file_option_name()
	{
		EnterRule_file_option_name();
		EnterRule("file_option_name", 22);
		TraceIn("file_option_name", 22);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN146 = default(IToken);

	    object TOKEN146_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "file_option_name");
		DebugLocation(221, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:222:2: ( TOKEN )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:222:4: TOKEN
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(222, 4);
			TOKEN146=(IToken)Match(input,TOKEN,Follow._TOKEN_in_file_option_name1284); if (state.failed) return retval;
			if (state.backtracking == 0) {
			TOKEN146_tree = (object)adaptor.Create(TOKEN146);
			adaptor.AddChild(root_0, TOKEN146_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_option_name", 22);
			LeaveRule("file_option_name", 22);
			LeaveRule_file_option_name();
	    }
	 	DebugLocation(223, 1);
		} finally { DebugExitRule(GrammarFileName, "file_option_name"); }
		return retval;

	}
	// $ANTLR end "file_option_name"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_option_value() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_option_value() {}

	// $ANTLR start "file_option_value"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:225:1: file_option_value : ( TOKEN | STRING | NUMBER | variable );
	[GrammarRule("file_option_value")]
	private AstParserRuleReturnScope<object, IToken> file_option_value()
	{
		EnterRule_file_option_value();
		EnterRule("file_option_value", 23);
		TraceIn("file_option_value", 23);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN147 = default(IToken);
	    IToken STRING148 = default(IToken);
	    IToken NUMBER149 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> variable150 = default(AstParserRuleReturnScope<object, IToken>);

	    object TOKEN147_tree = default(object);
	    object STRING148_tree = default(object);
	    object NUMBER149_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "file_option_value");
		DebugLocation(225, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:226:2: ( TOKEN | STRING | NUMBER | variable )
			int alt57=4;
			try { DebugEnterDecision(57, decisionCanBacktrack[57]);
			switch (input.LA(1))
			{
			case TOKEN:
				{
				alt57 = 1;
				}
				break;
			case STRING:
				{
				alt57 = 2;
				}
				break;
			case NUMBER:
				{
				alt57 = 3;
				}
				break;
			case VARIABLE:
				{
				alt57 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 57, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(57); }
			switch (alt57)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:226:4: TOKEN
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(226, 4);
				TOKEN147=(IToken)Match(input,TOKEN,Follow._TOKEN_in_file_option_value1296); if (state.failed) return retval;
				if (state.backtracking == 0) {
				TOKEN147_tree = (object)adaptor.Create(TOKEN147);
				adaptor.AddChild(root_0, TOKEN147_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:226:12: STRING
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(226, 12);
				STRING148=(IToken)Match(input,STRING,Follow._STRING_in_file_option_value1300); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRING148_tree = (object)adaptor.Create(STRING148);
				adaptor.AddChild(root_0, STRING148_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:226:21: NUMBER
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(226, 21);
				NUMBER149=(IToken)Match(input,NUMBER,Follow._NUMBER_in_file_option_value1304); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NUMBER149_tree = (object)adaptor.Create(NUMBER149);
				adaptor.AddChild(root_0, NUMBER149_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:226:30: variable
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(226, 30);
				PushFollow(Follow._variable_in_file_option_value1308);
				variable150=variable();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variable150.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_option_value", 23);
			LeaveRule("file_option_value", 23);
			LeaveRule_file_option_value();
	    }
	 	DebugLocation(227, 1);
		} finally { DebugExitRule(GrammarFileName, "file_option_value"); }
		return retval;

	}
	// $ANTLR end "file_option_value"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_with_options() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_with_options() {}

	// $ANTLR start "with_options"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:229:1: with_options : with_option ( ( WS )? ',' ( WS )? with_option )* ;
	[GrammarRule("with_options")]
	private AstParserRuleReturnScope<object, IToken> with_options()
	{
		EnterRule_with_options();
		EnterRule("with_options", 24);
		TraceIn("with_options", 24);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS152 = default(IToken);
	    IToken char_literal153 = default(IToken);
	    IToken WS154 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> with_option151 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> with_option155 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS152_tree = default(object);
	    object char_literal153_tree = default(object);
	    object WS154_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "with_options");
		DebugLocation(229, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:230:2: ( with_option ( ( WS )? ',' ( WS )? with_option )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:230:4: with_option ( ( WS )? ',' ( WS )? with_option )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(230, 4);
			PushFollow(Follow._with_option_in_with_options1320);
			with_option151=with_option();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, with_option151.Tree);
			DebugLocation(230, 16);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:230:16: ( ( WS )? ',' ( WS )? with_option )*
			try { DebugEnterSubRule(60);
			while (true)
			{
				int alt60=2;
				try { DebugEnterDecision(60, decisionCanBacktrack[60]);
				int LA60_0 = input.LA(1);

				if ((LA60_0==WS))
				{
					int LA60_1 = input.LA(2);

					if ((LA60_1==176))
					{
						alt60 = 1;
					}


				}
				else if ((LA60_0==176))
				{
					alt60 = 1;
				}


				} finally { DebugExitDecision(60); }
				switch ( alt60 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:230:17: ( WS )? ',' ( WS )? with_option
					{
					DebugLocation(230, 17);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:230:17: ( WS )?
					int alt58=2;
					try { DebugEnterSubRule(58);
					try { DebugEnterDecision(58, decisionCanBacktrack[58]);
					int LA58_0 = input.LA(1);

					if ((LA58_0==WS))
					{
						alt58 = 1;
					}
					} finally { DebugExitDecision(58); }
					switch (alt58)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:230:17: WS
						{
						DebugLocation(230, 17);
						WS152=(IToken)Match(input,WS,Follow._WS_in_with_options1323); if (state.failed) return retval;
						if (state.backtracking == 0) {
						WS152_tree = (object)adaptor.Create(WS152);
						adaptor.AddChild(root_0, WS152_tree);
						}

						}
						break;

					}
					} finally { DebugExitSubRule(58); }

					DebugLocation(230, 21);
					char_literal153=(IToken)Match(input,176,Follow._176_in_with_options1326); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal153_tree = (object)adaptor.Create(char_literal153);
					adaptor.AddChild(root_0, char_literal153_tree);
					}
					DebugLocation(230, 25);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:230:25: ( WS )?
					int alt59=2;
					try { DebugEnterSubRule(59);
					try { DebugEnterDecision(59, decisionCanBacktrack[59]);
					int LA59_0 = input.LA(1);

					if ((LA59_0==WS))
					{
						alt59 = 1;
					}
					} finally { DebugExitDecision(59); }
					switch (alt59)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:230:25: WS
						{
						DebugLocation(230, 25);
						WS154=(IToken)Match(input,WS,Follow._WS_in_with_options1328); if (state.failed) return retval;
						if (state.backtracking == 0) {
						WS154_tree = (object)adaptor.Create(WS154);
						adaptor.AddChild(root_0, WS154_tree);
						}

						}
						break;

					}
					} finally { DebugExitSubRule(59); }

					DebugLocation(230, 29);
					PushFollow(Follow._with_option_in_with_options1331);
					with_option155=with_option();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, with_option155.Tree);

					}
					break;

				default:
					goto loop60;
				}
			}

			loop60:
				;

			} finally { DebugExitSubRule(60); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("with_options", 24);
			LeaveRule("with_options", 24);
			LeaveRule_with_options();
	    }
	 	DebugLocation(231, 1);
		} finally { DebugExitRule(GrammarFileName, "with_options"); }
		return retval;

	}
	// $ANTLR end "with_options"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_with_option() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_with_option() {}

	// $ANTLR start "with_option"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:233:1: with_option : file_option_name ( ( WS )? '=' ( WS )? file_option_value )? -> ^( T_FILEOPTION file_option_name ( file_option_value )? ) ;
	[GrammarRule("with_option")]
	private AstParserRuleReturnScope<object, IToken> with_option()
	{
		EnterRule_with_option();
		EnterRule("with_option", 25);
		TraceIn("with_option", 25);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS157 = default(IToken);
	    IToken char_literal158 = default(IToken);
	    IToken WS159 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file_option_name156 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> file_option_value160 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS157_tree = default(object);
	    object char_literal158_tree = default(object);
	    object WS159_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_184=new RewriteRuleITokenStream(adaptor,"token 184");
	    RewriteRuleSubtreeStream stream_file_option_name=new RewriteRuleSubtreeStream(adaptor,"rule file_option_name");
	    RewriteRuleSubtreeStream stream_file_option_value=new RewriteRuleSubtreeStream(adaptor,"rule file_option_value");
		try { DebugEnterRule(GrammarFileName, "with_option");
		DebugLocation(233, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:234:2: ( file_option_name ( ( WS )? '=' ( WS )? file_option_value )? -> ^( T_FILEOPTION file_option_name ( file_option_value )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:234:4: file_option_name ( ( WS )? '=' ( WS )? file_option_value )?
			{
			DebugLocation(234, 4);
			PushFollow(Follow._file_option_name_in_with_option1345);
			file_option_name156=file_option_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_file_option_name.Add(file_option_name156.Tree);
			DebugLocation(234, 21);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:234:21: ( ( WS )? '=' ( WS )? file_option_value )?
			int alt63=2;
			try { DebugEnterSubRule(63);
			try { DebugEnterDecision(63, decisionCanBacktrack[63]);
			int LA63_0 = input.LA(1);

			if ((LA63_0==WS))
			{
				int LA63_1 = input.LA(2);

				if ((LA63_1==184))
				{
					alt63 = 1;
				}
			}
			else if ((LA63_0==184))
			{
				alt63 = 1;
			}
			} finally { DebugExitDecision(63); }
			switch (alt63)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:234:23: ( WS )? '=' ( WS )? file_option_value
				{
				DebugLocation(234, 23);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:234:23: ( WS )?
				int alt61=2;
				try { DebugEnterSubRule(61);
				try { DebugEnterDecision(61, decisionCanBacktrack[61]);
				int LA61_0 = input.LA(1);

				if ((LA61_0==WS))
				{
					alt61 = 1;
				}
				} finally { DebugExitDecision(61); }
				switch (alt61)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:234:23: WS
					{
					DebugLocation(234, 23);
					WS157=(IToken)Match(input,WS,Follow._WS_in_with_option1349); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS157);


					}
					break;

				}
				} finally { DebugExitSubRule(61); }

				DebugLocation(234, 27);
				char_literal158=(IToken)Match(input,184,Follow._184_in_with_option1352); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_184.Add(char_literal158);

				DebugLocation(234, 31);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:234:31: ( WS )?
				int alt62=2;
				try { DebugEnterSubRule(62);
				try { DebugEnterDecision(62, decisionCanBacktrack[62]);
				int LA62_0 = input.LA(1);

				if ((LA62_0==WS))
				{
					alt62 = 1;
				}
				} finally { DebugExitDecision(62); }
				switch (alt62)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:234:31: WS
					{
					DebugLocation(234, 31);
					WS159=(IToken)Match(input,WS,Follow._WS_in_with_option1354); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS159);


					}
					break;

				}
				} finally { DebugExitSubRule(62); }

				DebugLocation(234, 35);
				PushFollow(Follow._file_option_value_in_with_option1357);
				file_option_value160=file_option_value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_file_option_value.Add(file_option_value160.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(63); }



			{
			// AST REWRITE
			// elements: file_option_name, file_option_value
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 234:55: -> ^( T_FILEOPTION file_option_name ( file_option_value )? )
			{
				DebugLocation(234, 58);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:234:58: ^( T_FILEOPTION file_option_name ( file_option_value )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(234, 60);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILEOPTION, "T_FILEOPTION"), root_1);

				DebugLocation(234, 73);
				adaptor.AddChild(root_1, stream_file_option_name.NextTree());
				DebugLocation(234, 90);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:234:90: ( file_option_value )?
				if (stream_file_option_value.HasNext)
				{
					DebugLocation(234, 90);
					adaptor.AddChild(root_1, stream_file_option_value.NextTree());

				}
				stream_file_option_value.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("with_option", 25);
			LeaveRule("with_option", 25);
			LeaveRule_with_option();
	    }
	 	DebugLocation(235, 1);
		} finally { DebugExitRule(GrammarFileName, "with_option"); }
		return retval;

	}
	// $ANTLR end "with_option"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_where_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_where_clause() {}

	// $ANTLR start "where_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:237:1: where_clause : WHERE WS expression -> ^( T_WHERE expression ) ;
	[GrammarRule("where_clause")]
	private AstParserRuleReturnScope<object, IToken> where_clause()
	{
		EnterRule_where_clause();
		EnterRule("where_clause", 26);
		TraceIn("where_clause", 26);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WHERE161 = default(IToken);
	    IToken WS162 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression163 = default(AstParserRuleReturnScope<object, IToken>);

	    object WHERE161_tree = default(object);
	    object WS162_tree = default(object);
	    RewriteRuleITokenStream stream_WHERE=new RewriteRuleITokenStream(adaptor,"token WHERE");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "where_clause");
		DebugLocation(237, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:238:2: ( WHERE WS expression -> ^( T_WHERE expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:238:4: WHERE WS expression
			{
			DebugLocation(238, 4);
			WHERE161=(IToken)Match(input,WHERE,Follow._WHERE_in_where_clause1382); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WHERE.Add(WHERE161);

			DebugLocation(238, 10);
			WS162=(IToken)Match(input,WS,Follow._WS_in_where_clause1384); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS162);

			DebugLocation(238, 13);
			PushFollow(Follow._expression_in_where_clause1386);
			expression163=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression.Add(expression163.Tree);


			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 239:2: -> ^( T_WHERE expression )
			{
				DebugLocation(239, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:239:5: ^( T_WHERE expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(239, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_WHERE, "T_WHERE"), root_1);

				DebugLocation(239, 15);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("where_clause", 26);
			LeaveRule("where_clause", 26);
			LeaveRule_where_clause();
	    }
	 	DebugLocation(240, 1);
		} finally { DebugExitRule(GrammarFileName, "where_clause"); }
		return retval;

	}
	// $ANTLR end "where_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_groupby_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_groupby_clause() {}

	// $ANTLR start "groupby_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:241:1: groupby_clause : GROUP WS BY WS orderby_column_list -> ^( T_GROUPBY orderby_column_list ) ;
	[GrammarRule("groupby_clause")]
	private AstParserRuleReturnScope<object, IToken> groupby_clause()
	{
		EnterRule_groupby_clause();
		EnterRule("groupby_clause", 27);
		TraceIn("groupby_clause", 27);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken GROUP164 = default(IToken);
	    IToken WS165 = default(IToken);
	    IToken BY166 = default(IToken);
	    IToken WS167 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> orderby_column_list168 = default(AstParserRuleReturnScope<object, IToken>);

	    object GROUP164_tree = default(object);
	    object WS165_tree = default(object);
	    object BY166_tree = default(object);
	    object WS167_tree = default(object);
	    RewriteRuleITokenStream stream_GROUP=new RewriteRuleITokenStream(adaptor,"token GROUP");
	    RewriteRuleITokenStream stream_BY=new RewriteRuleITokenStream(adaptor,"token BY");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_orderby_column_list=new RewriteRuleSubtreeStream(adaptor,"rule orderby_column_list");
		try { DebugEnterRule(GrammarFileName, "groupby_clause");
		DebugLocation(241, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:242:2: ( GROUP WS BY WS orderby_column_list -> ^( T_GROUPBY orderby_column_list ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:242:4: GROUP WS BY WS orderby_column_list
			{
			DebugLocation(242, 4);
			GROUP164=(IToken)Match(input,GROUP,Follow._GROUP_in_groupby_clause1405); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_GROUP.Add(GROUP164);

			DebugLocation(242, 10);
			WS165=(IToken)Match(input,WS,Follow._WS_in_groupby_clause1407); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS165);

			DebugLocation(242, 13);
			BY166=(IToken)Match(input,BY,Follow._BY_in_groupby_clause1409); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_BY.Add(BY166);

			DebugLocation(242, 16);
			WS167=(IToken)Match(input,WS,Follow._WS_in_groupby_clause1411); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS167);

			DebugLocation(242, 19);
			PushFollow(Follow._orderby_column_list_in_groupby_clause1413);
			orderby_column_list168=orderby_column_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_orderby_column_list.Add(orderby_column_list168.Tree);


			{
			// AST REWRITE
			// elements: orderby_column_list
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 243:2: -> ^( T_GROUPBY orderby_column_list )
			{
				DebugLocation(243, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:243:5: ^( T_GROUPBY orderby_column_list )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(243, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_GROUPBY, "T_GROUPBY"), root_1);

				DebugLocation(243, 17);
				adaptor.AddChild(root_1, stream_orderby_column_list.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("groupby_clause", 27);
			LeaveRule("groupby_clause", 27);
			LeaveRule_groupby_clause();
	    }
	 	DebugLocation(244, 1);
		} finally { DebugExitRule(GrammarFileName, "groupby_clause"); }
		return retval;

	}
	// $ANTLR end "groupby_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_having_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_having_clause() {}

	// $ANTLR start "having_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:246:1: having_clause : HAVING WS expression -> ^( T_HAVING expression ) ;
	[GrammarRule("having_clause")]
	private AstParserRuleReturnScope<object, IToken> having_clause()
	{
		EnterRule_having_clause();
		EnterRule("having_clause", 28);
		TraceIn("having_clause", 28);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken HAVING169 = default(IToken);
	    IToken WS170 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression171 = default(AstParserRuleReturnScope<object, IToken>);

	    object HAVING169_tree = default(object);
	    object WS170_tree = default(object);
	    RewriteRuleITokenStream stream_HAVING=new RewriteRuleITokenStream(adaptor,"token HAVING");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "having_clause");
		DebugLocation(246, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:247:2: ( HAVING WS expression -> ^( T_HAVING expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:247:4: HAVING WS expression
			{
			DebugLocation(247, 4);
			HAVING169=(IToken)Match(input,HAVING,Follow._HAVING_in_having_clause1434); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_HAVING.Add(HAVING169);

			DebugLocation(247, 11);
			WS170=(IToken)Match(input,WS,Follow._WS_in_having_clause1436); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS170);

			DebugLocation(247, 14);
			PushFollow(Follow._expression_in_having_clause1438);
			expression171=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression.Add(expression171.Tree);


			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 248:2: -> ^( T_HAVING expression )
			{
				DebugLocation(248, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:248:5: ^( T_HAVING expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(248, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_HAVING, "T_HAVING"), root_1);

				DebugLocation(248, 16);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("having_clause", 28);
			LeaveRule("having_clause", 28);
			LeaveRule_having_clause();
	    }
	 	DebugLocation(249, 1);
		} finally { DebugExitRule(GrammarFileName, "having_clause"); }
		return retval;

	}
	// $ANTLR end "having_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_clause() {}

	// $ANTLR start "orderby_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:251:1: orderby_clause : ORDER WS BY WS orderby_column_list -> ^( T_ORDERBY orderby_column_list ) ;
	[GrammarRule("orderby_clause")]
	private AstParserRuleReturnScope<object, IToken> orderby_clause()
	{
		EnterRule_orderby_clause();
		EnterRule("orderby_clause", 29);
		TraceIn("orderby_clause", 29);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken ORDER172 = default(IToken);
	    IToken WS173 = default(IToken);
	    IToken BY174 = default(IToken);
	    IToken WS175 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> orderby_column_list176 = default(AstParserRuleReturnScope<object, IToken>);

	    object ORDER172_tree = default(object);
	    object WS173_tree = default(object);
	    object BY174_tree = default(object);
	    object WS175_tree = default(object);
	    RewriteRuleITokenStream stream_BY=new RewriteRuleITokenStream(adaptor,"token BY");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_ORDER=new RewriteRuleITokenStream(adaptor,"token ORDER");
	    RewriteRuleSubtreeStream stream_orderby_column_list=new RewriteRuleSubtreeStream(adaptor,"rule orderby_column_list");
		try { DebugEnterRule(GrammarFileName, "orderby_clause");
		DebugLocation(251, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:252:2: ( ORDER WS BY WS orderby_column_list -> ^( T_ORDERBY orderby_column_list ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:252:4: ORDER WS BY WS orderby_column_list
			{
			DebugLocation(252, 4);
			ORDER172=(IToken)Match(input,ORDER,Follow._ORDER_in_orderby_clause1459); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ORDER.Add(ORDER172);

			DebugLocation(252, 10);
			WS173=(IToken)Match(input,WS,Follow._WS_in_orderby_clause1461); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS173);

			DebugLocation(252, 13);
			BY174=(IToken)Match(input,BY,Follow._BY_in_orderby_clause1463); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_BY.Add(BY174);

			DebugLocation(252, 16);
			WS175=(IToken)Match(input,WS,Follow._WS_in_orderby_clause1465); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS175);

			DebugLocation(252, 19);
			PushFollow(Follow._orderby_column_list_in_orderby_clause1467);
			orderby_column_list176=orderby_column_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_orderby_column_list.Add(orderby_column_list176.Tree);


			{
			// AST REWRITE
			// elements: orderby_column_list
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 253:2: -> ^( T_ORDERBY orderby_column_list )
			{
				DebugLocation(253, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:253:5: ^( T_ORDERBY orderby_column_list )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(253, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_ORDERBY, "T_ORDERBY"), root_1);

				DebugLocation(253, 17);
				adaptor.AddChild(root_1, stream_orderby_column_list.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_clause", 29);
			LeaveRule("orderby_clause", 29);
			LeaveRule_orderby_clause();
	    }
	 	DebugLocation(254, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_clause"); }
		return retval;

	}
	// $ANTLR end "orderby_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_column_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_column_list() {}

	// $ANTLR start "orderby_column_list"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:256:1: orderby_column_list : orderby_column ( ( WS )? ',' ( WS )? orderby_column )* -> ( orderby_column )* ;
	[GrammarRule("orderby_column_list")]
	private AstParserRuleReturnScope<object, IToken> orderby_column_list()
	{
		EnterRule_orderby_column_list();
		EnterRule("orderby_column_list", 30);
		TraceIn("orderby_column_list", 30);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS178 = default(IToken);
	    IToken char_literal179 = default(IToken);
	    IToken WS180 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> orderby_column177 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> orderby_column181 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS178_tree = default(object);
	    object char_literal179_tree = default(object);
	    object WS180_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_176=new RewriteRuleITokenStream(adaptor,"token 176");
	    RewriteRuleSubtreeStream stream_orderby_column=new RewriteRuleSubtreeStream(adaptor,"rule orderby_column");
		try { DebugEnterRule(GrammarFileName, "orderby_column_list");
		DebugLocation(256, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:257:2: ( orderby_column ( ( WS )? ',' ( WS )? orderby_column )* -> ( orderby_column )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:257:4: orderby_column ( ( WS )? ',' ( WS )? orderby_column )*
			{
			DebugLocation(257, 4);
			PushFollow(Follow._orderby_column_in_orderby_column_list1488);
			orderby_column177=orderby_column();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_orderby_column.Add(orderby_column177.Tree);
			DebugLocation(257, 19);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:257:19: ( ( WS )? ',' ( WS )? orderby_column )*
			try { DebugEnterSubRule(66);
			while (true)
			{
				int alt66=2;
				try { DebugEnterDecision(66, decisionCanBacktrack[66]);
				int LA66_0 = input.LA(1);

				if ((LA66_0==WS))
				{
					int LA66_1 = input.LA(2);

					if ((LA66_1==176))
					{
						alt66 = 1;
					}


				}
				else if ((LA66_0==176))
				{
					alt66 = 1;
				}


				} finally { DebugExitDecision(66); }
				switch ( alt66 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:257:20: ( WS )? ',' ( WS )? orderby_column
					{
					DebugLocation(257, 20);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:257:20: ( WS )?
					int alt64=2;
					try { DebugEnterSubRule(64);
					try { DebugEnterDecision(64, decisionCanBacktrack[64]);
					int LA64_0 = input.LA(1);

					if ((LA64_0==WS))
					{
						alt64 = 1;
					}
					} finally { DebugExitDecision(64); }
					switch (alt64)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:257:20: WS
						{
						DebugLocation(257, 20);
						WS178=(IToken)Match(input,WS,Follow._WS_in_orderby_column_list1491); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS178);


						}
						break;

					}
					} finally { DebugExitSubRule(64); }

					DebugLocation(257, 24);
					char_literal179=(IToken)Match(input,176,Follow._176_in_orderby_column_list1494); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_176.Add(char_literal179);

					DebugLocation(257, 28);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:257:28: ( WS )?
					int alt65=2;
					try { DebugEnterSubRule(65);
					try { DebugEnterDecision(65, decisionCanBacktrack[65]);
					int LA65_0 = input.LA(1);

					if ((LA65_0==WS))
					{
						alt65 = 1;
					}
					} finally { DebugExitDecision(65); }
					switch (alt65)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:257:28: WS
						{
						DebugLocation(257, 28);
						WS180=(IToken)Match(input,WS,Follow._WS_in_orderby_column_list1496); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS180);


						}
						break;

					}
					} finally { DebugExitSubRule(65); }

					DebugLocation(257, 32);
					PushFollow(Follow._orderby_column_in_orderby_column_list1499);
					orderby_column181=orderby_column();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_orderby_column.Add(orderby_column181.Tree);

					}
					break;

				default:
					goto loop66;
				}
			}

			loop66:
				;

			} finally { DebugExitSubRule(66); }



			{
			// AST REWRITE
			// elements: orderby_column
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 258:2: -> ( orderby_column )*
			{
				DebugLocation(258, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:258:5: ( orderby_column )*
				while ( stream_orderby_column.HasNext )
				{
					DebugLocation(258, 5);
					adaptor.AddChild(root_0, stream_orderby_column.NextTree());

				}
				stream_orderby_column.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_column_list", 30);
			LeaveRule("orderby_column_list", 30);
			LeaveRule_orderby_column_list();
	    }
	 	DebugLocation(259, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_column_list"); }
		return retval;

	}
	// $ANTLR end "orderby_column_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_column() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_column() {}

	// $ANTLR start "orderby_column"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:261:1: orderby_column : expression ( WS orderby_direction )? -> ^( T_ORDERBY_COLUMN expression ( orderby_direction )? ) ;
	[GrammarRule("orderby_column")]
	private AstParserRuleReturnScope<object, IToken> orderby_column()
	{
		EnterRule_orderby_column();
		EnterRule("orderby_column", 31);
		TraceIn("orderby_column", 31);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS183 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression182 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> orderby_direction184 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS183_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_orderby_direction=new RewriteRuleSubtreeStream(adaptor,"rule orderby_direction");
		try { DebugEnterRule(GrammarFileName, "orderby_column");
		DebugLocation(261, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:262:2: ( expression ( WS orderby_direction )? -> ^( T_ORDERBY_COLUMN expression ( orderby_direction )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:262:4: expression ( WS orderby_direction )?
			{
			DebugLocation(262, 4);
			PushFollow(Follow._expression_in_orderby_column1519);
			expression182=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression.Add(expression182.Tree);
			DebugLocation(262, 15);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:262:15: ( WS orderby_direction )?
			int alt67=2;
			try { DebugEnterSubRule(67);
			try { DebugEnterDecision(67, decisionCanBacktrack[67]);
			int LA67_0 = input.LA(1);

			if ((LA67_0==WS))
			{
				int LA67_1 = input.LA(2);

				if ((LA67_1==ASC||LA67_1==DESC||LA67_1==ORIG))
				{
					alt67 = 1;
				}
			}
			} finally { DebugExitDecision(67); }
			switch (alt67)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:262:16: WS orderby_direction
				{
				DebugLocation(262, 16);
				WS183=(IToken)Match(input,WS,Follow._WS_in_orderby_column1522); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS183);

				DebugLocation(262, 19);
				PushFollow(Follow._orderby_direction_in_orderby_column1524);
				orderby_direction184=orderby_direction();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_orderby_direction.Add(orderby_direction184.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(67); }



			{
			// AST REWRITE
			// elements: orderby_direction, expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 262:39: -> ^( T_ORDERBY_COLUMN expression ( orderby_direction )? )
			{
				DebugLocation(262, 42);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:262:42: ^( T_ORDERBY_COLUMN expression ( orderby_direction )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(262, 44);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_ORDERBY_COLUMN, "T_ORDERBY_COLUMN"), root_1);

				DebugLocation(262, 61);
				adaptor.AddChild(root_1, stream_expression.NextTree());
				DebugLocation(262, 72);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:262:72: ( orderby_direction )?
				if (stream_orderby_direction.HasNext)
				{
					DebugLocation(262, 72);
					adaptor.AddChild(root_1, stream_orderby_direction.NextTree());

				}
				stream_orderby_direction.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_column", 31);
			LeaveRule("orderby_column", 31);
			LeaveRule_orderby_column();
	    }
	 	DebugLocation(263, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_column"); }
		return retval;

	}
	// $ANTLR end "orderby_column"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_direction() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_direction() {}

	// $ANTLR start "orderby_direction"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:265:1: orderby_direction : ( ASC -> T_ORDERBY_ASC | DESC -> T_ORDERBY_DESC | ORIG -> T_ORDERBY_ORIG );
	[GrammarRule("orderby_direction")]
	private AstParserRuleReturnScope<object, IToken> orderby_direction()
	{
		EnterRule_orderby_direction();
		EnterRule("orderby_direction", 32);
		TraceIn("orderby_direction", 32);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken ASC185 = default(IToken);
	    IToken DESC186 = default(IToken);
	    IToken ORIG187 = default(IToken);

	    object ASC185_tree = default(object);
	    object DESC186_tree = default(object);
	    object ORIG187_tree = default(object);
	    RewriteRuleITokenStream stream_DESC=new RewriteRuleITokenStream(adaptor,"token DESC");
	    RewriteRuleITokenStream stream_ASC=new RewriteRuleITokenStream(adaptor,"token ASC");
	    RewriteRuleITokenStream stream_ORIG=new RewriteRuleITokenStream(adaptor,"token ORIG");

		try { DebugEnterRule(GrammarFileName, "orderby_direction");
		DebugLocation(265, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:266:2: ( ASC -> T_ORDERBY_ASC | DESC -> T_ORDERBY_DESC | ORIG -> T_ORDERBY_ORIG )
			int alt68=3;
			try { DebugEnterDecision(68, decisionCanBacktrack[68]);
			switch (input.LA(1))
			{
			case ASC:
				{
				alt68 = 1;
				}
				break;
			case DESC:
				{
				alt68 = 2;
				}
				break;
			case ORIG:
				{
				alt68 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 68, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(68); }
			switch (alt68)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:266:4: ASC
				{
				DebugLocation(266, 4);
				ASC185=(IToken)Match(input,ASC,Follow._ASC_in_orderby_direction1549); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ASC.Add(ASC185);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 266:8: -> T_ORDERBY_ASC
				{
					DebugLocation(266, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_ORDERBY_ASC, "T_ORDERBY_ASC"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:267:4: DESC
				{
				DebugLocation(267, 4);
				DESC186=(IToken)Match(input,DESC,Follow._DESC_in_orderby_direction1558); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DESC.Add(DESC186);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 267:9: -> T_ORDERBY_DESC
				{
					DebugLocation(267, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_ORDERBY_DESC, "T_ORDERBY_DESC"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:268:4: ORIG
				{
				DebugLocation(268, 4);
				ORIG187=(IToken)Match(input,ORIG,Follow._ORIG_in_orderby_direction1567); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ORIG.Add(ORIG187);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 268:9: -> T_ORDERBY_ORIG
				{
					DebugLocation(268, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_ORDERBY_ORIG, "T_ORDERBY_ORIG"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_direction", 32);
			LeaveRule("orderby_direction", 32);
			LeaveRule_orderby_direction();
	    }
	 	DebugLocation(269, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_direction"); }
		return retval;

	}
	// $ANTLR end "orderby_direction"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_use_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_use_command() {}

	// $ANTLR start "use_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:274:1: use_command : USE WS file -> ^( T_USE file ) ;
	[GrammarRule("use_command")]
	private AstParserRuleReturnScope<object, IToken> use_command()
	{
		EnterRule_use_command();
		EnterRule("use_command", 33);
		TraceIn("use_command", 33);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken USE188 = default(IToken);
	    IToken WS189 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file190 = default(AstParserRuleReturnScope<object, IToken>);

	    object USE188_tree = default(object);
	    object WS189_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_USE=new RewriteRuleITokenStream(adaptor,"token USE");
	    RewriteRuleSubtreeStream stream_file=new RewriteRuleSubtreeStream(adaptor,"rule file");
		try { DebugEnterRule(GrammarFileName, "use_command");
		DebugLocation(274, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:275:2: ( USE WS file -> ^( T_USE file ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:275:4: USE WS file
			{
			DebugLocation(275, 4);
			USE188=(IToken)Match(input,USE,Follow._USE_in_use_command1585); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_USE.Add(USE188);

			DebugLocation(275, 8);
			WS189=(IToken)Match(input,WS,Follow._WS_in_use_command1587); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS189);

			DebugLocation(275, 11);
			PushFollow(Follow._file_in_use_command1589);
			file190=file();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_file.Add(file190.Tree);


			{
			// AST REWRITE
			// elements: file
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 275:16: -> ^( T_USE file )
			{
				DebugLocation(275, 19);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:275:19: ^( T_USE file )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(275, 21);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_USE, "T_USE"), root_1);

				DebugLocation(275, 27);
				adaptor.AddChild(root_1, stream_file.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("use_command", 33);
			LeaveRule("use_command", 33);
			LeaveRule_use_command();
	    }
	 	DebugLocation(276, 1);
		} finally { DebugExitRule(GrammarFileName, "use_command"); }
		return retval;

	}
	// $ANTLR end "use_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_declare_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_declare_command() {}

	// $ANTLR start "declare_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:281:1: declare_command : DECLARE WS declaration_list -> declaration_list ;
	[GrammarRule("declare_command")]
	private AstParserRuleReturnScope<object, IToken> declare_command()
	{
		EnterRule_declare_command();
		EnterRule("declare_command", 34);
		TraceIn("declare_command", 34);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken DECLARE191 = default(IToken);
	    IToken WS192 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> declaration_list193 = default(AstParserRuleReturnScope<object, IToken>);

	    object DECLARE191_tree = default(object);
	    object WS192_tree = default(object);
	    RewriteRuleITokenStream stream_DECLARE=new RewriteRuleITokenStream(adaptor,"token DECLARE");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_declaration_list=new RewriteRuleSubtreeStream(adaptor,"rule declaration_list");
		try { DebugEnterRule(GrammarFileName, "declare_command");
		DebugLocation(281, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:282:2: ( DECLARE WS declaration_list -> declaration_list )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:282:4: DECLARE WS declaration_list
			{
			DebugLocation(282, 4);
			DECLARE191=(IToken)Match(input,DECLARE,Follow._DECLARE_in_declare_command1611); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DECLARE.Add(DECLARE191);

			DebugLocation(282, 12);
			WS192=(IToken)Match(input,WS,Follow._WS_in_declare_command1613); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS192);

			DebugLocation(282, 15);
			PushFollow(Follow._declaration_list_in_declare_command1615);
			declaration_list193=declaration_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_declaration_list.Add(declaration_list193.Tree);


			{
			// AST REWRITE
			// elements: declaration_list
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 282:32: -> declaration_list
			{
				DebugLocation(282, 35);
				adaptor.AddChild(root_0, stream_declaration_list.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declare_command", 34);
			LeaveRule("declare_command", 34);
			LeaveRule_declare_command();
	    }
	 	DebugLocation(283, 1);
		} finally { DebugExitRule(GrammarFileName, "declare_command"); }
		return retval;

	}
	// $ANTLR end "declare_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_declaration_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_declaration_list() {}

	// $ANTLR start "declaration_list"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:285:1: declaration_list : declaration ( ( WS )? ',' ( WS )? declaration )* -> ^( T_DECLARE ( declaration )+ ) ;
	[GrammarRule("declaration_list")]
	private AstParserRuleReturnScope<object, IToken> declaration_list()
	{
		EnterRule_declaration_list();
		EnterRule("declaration_list", 35);
		TraceIn("declaration_list", 35);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS195 = default(IToken);
	    IToken char_literal196 = default(IToken);
	    IToken WS197 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> declaration194 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> declaration198 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS195_tree = default(object);
	    object char_literal196_tree = default(object);
	    object WS197_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_176=new RewriteRuleITokenStream(adaptor,"token 176");
	    RewriteRuleSubtreeStream stream_declaration=new RewriteRuleSubtreeStream(adaptor,"rule declaration");
		try { DebugEnterRule(GrammarFileName, "declaration_list");
		DebugLocation(285, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:286:2: ( declaration ( ( WS )? ',' ( WS )? declaration )* -> ^( T_DECLARE ( declaration )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:286:4: declaration ( ( WS )? ',' ( WS )? declaration )*
			{
			DebugLocation(286, 4);
			PushFollow(Follow._declaration_in_declaration_list1632);
			declaration194=declaration();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_declaration.Add(declaration194.Tree);
			DebugLocation(286, 16);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:286:16: ( ( WS )? ',' ( WS )? declaration )*
			try { DebugEnterSubRule(71);
			while (true)
			{
				int alt71=2;
				try { DebugEnterDecision(71, decisionCanBacktrack[71]);
				int LA71_0 = input.LA(1);

				if ((LA71_0==WS))
				{
					int LA71_1 = input.LA(2);

					if ((LA71_1==176))
					{
						alt71 = 1;
					}


				}
				else if ((LA71_0==176))
				{
					alt71 = 1;
				}


				} finally { DebugExitDecision(71); }
				switch ( alt71 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:286:17: ( WS )? ',' ( WS )? declaration
					{
					DebugLocation(286, 17);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:286:17: ( WS )?
					int alt69=2;
					try { DebugEnterSubRule(69);
					try { DebugEnterDecision(69, decisionCanBacktrack[69]);
					int LA69_0 = input.LA(1);

					if ((LA69_0==WS))
					{
						alt69 = 1;
					}
					} finally { DebugExitDecision(69); }
					switch (alt69)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:286:17: WS
						{
						DebugLocation(286, 17);
						WS195=(IToken)Match(input,WS,Follow._WS_in_declaration_list1635); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS195);


						}
						break;

					}
					} finally { DebugExitSubRule(69); }

					DebugLocation(286, 21);
					char_literal196=(IToken)Match(input,176,Follow._176_in_declaration_list1638); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_176.Add(char_literal196);

					DebugLocation(286, 25);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:286:25: ( WS )?
					int alt70=2;
					try { DebugEnterSubRule(70);
					try { DebugEnterDecision(70, decisionCanBacktrack[70]);
					int LA70_0 = input.LA(1);

					if ((LA70_0==WS))
					{
						alt70 = 1;
					}
					} finally { DebugExitDecision(70); }
					switch (alt70)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:286:25: WS
						{
						DebugLocation(286, 25);
						WS197=(IToken)Match(input,WS,Follow._WS_in_declaration_list1640); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS197);


						}
						break;

					}
					} finally { DebugExitSubRule(70); }

					DebugLocation(286, 29);
					PushFollow(Follow._declaration_in_declaration_list1643);
					declaration198=declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_declaration.Add(declaration198.Tree);

					}
					break;

				default:
					goto loop71;
				}
			}

			loop71:
				;

			} finally { DebugExitSubRule(71); }



			{
			// AST REWRITE
			// elements: declaration
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 287:2: -> ^( T_DECLARE ( declaration )+ )
			{
				DebugLocation(287, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:287:5: ^( T_DECLARE ( declaration )+ )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(287, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_DECLARE, "T_DECLARE"), root_1);

				DebugLocation(287, 17);
				if (!(stream_declaration.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_declaration.HasNext )
				{
					DebugLocation(287, 17);
					adaptor.AddChild(root_1, stream_declaration.NextTree());

				}
				stream_declaration.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declaration_list", 35);
			LeaveRule("declaration_list", 35);
			LeaveRule_declaration_list();
	    }
	 	DebugLocation(288, 1);
		} finally { DebugExitRule(GrammarFileName, "declaration_list"); }
		return retval;

	}
	// $ANTLR end "declaration_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_declaration() {}

	// $ANTLR start "declaration"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:290:1: declaration : variable WS ( AS WS )? datatype -> ^( T_DECLARATION variable datatype ) ;
	[GrammarRule("declaration")]
	private AstParserRuleReturnScope<object, IToken> declaration()
	{
		EnterRule_declaration();
		EnterRule("declaration", 36);
		TraceIn("declaration", 36);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS200 = default(IToken);
	    IToken AS201 = default(IToken);
	    IToken WS202 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> variable199 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> datatype203 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS200_tree = default(object);
	    object AS201_tree = default(object);
	    object WS202_tree = default(object);
	    RewriteRuleITokenStream stream_AS=new RewriteRuleITokenStream(adaptor,"token AS");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_datatype=new RewriteRuleSubtreeStream(adaptor,"rule datatype");
	    RewriteRuleSubtreeStream stream_variable=new RewriteRuleSubtreeStream(adaptor,"rule variable");
		try { DebugEnterRule(GrammarFileName, "declaration");
		DebugLocation(290, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:291:2: ( variable WS ( AS WS )? datatype -> ^( T_DECLARATION variable datatype ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:291:4: variable WS ( AS WS )? datatype
			{
			DebugLocation(291, 4);
			PushFollow(Follow._variable_in_declaration1667);
			variable199=variable();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_variable.Add(variable199.Tree);
			DebugLocation(291, 13);
			WS200=(IToken)Match(input,WS,Follow._WS_in_declaration1669); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS200);

			DebugLocation(291, 16);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:291:16: ( AS WS )?
			int alt72=2;
			try { DebugEnterSubRule(72);
			try { DebugEnterDecision(72, decisionCanBacktrack[72]);
			int LA72_0 = input.LA(1);

			if ((LA72_0==AS))
			{
				alt72 = 1;
			}
			} finally { DebugExitDecision(72); }
			switch (alt72)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:291:17: AS WS
				{
				DebugLocation(291, 17);
				AS201=(IToken)Match(input,AS,Follow._AS_in_declaration1672); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_AS.Add(AS201);

				DebugLocation(291, 20);
				WS202=(IToken)Match(input,WS,Follow._WS_in_declaration1674); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS202);


				}
				break;

			}
			} finally { DebugExitSubRule(72); }

			DebugLocation(291, 25);
			PushFollow(Follow._datatype_in_declaration1678);
			datatype203=datatype();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_datatype.Add(datatype203.Tree);


			{
			// AST REWRITE
			// elements: datatype, variable
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 292:2: -> ^( T_DECLARATION variable datatype )
			{
				DebugLocation(292, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:292:5: ^( T_DECLARATION variable datatype )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(292, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_DECLARATION, "T_DECLARATION"), root_1);

				DebugLocation(292, 21);
				adaptor.AddChild(root_1, stream_variable.NextTree());
				DebugLocation(292, 30);
				adaptor.AddChild(root_1, stream_datatype.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declaration", 36);
			LeaveRule("declaration", 36);
			LeaveRule_declaration();
	    }
	 	DebugLocation(293, 1);
		} finally { DebugExitRule(GrammarFileName, "declaration"); }
		return retval;

	}
	// $ANTLR end "declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_create_view_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_create_view_command() {}

	// $ANTLR start "create_view_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:298:1: create_view_command : CREATE WS VIEW WS view_name ( ( WS )? '(' declaration_list ')' )? WS AS WS select_command -> ^( T_CREATE_VIEW view_name ( declaration_list )? select_command ) ;
	[GrammarRule("create_view_command")]
	private AstParserRuleReturnScope<object, IToken> create_view_command()
	{
		EnterRule_create_view_command();
		EnterRule("create_view_command", 37);
		TraceIn("create_view_command", 37);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken CREATE204 = default(IToken);
	    IToken WS205 = default(IToken);
	    IToken VIEW206 = default(IToken);
	    IToken WS207 = default(IToken);
	    IToken WS209 = default(IToken);
	    IToken char_literal210 = default(IToken);
	    IToken char_literal212 = default(IToken);
	    IToken WS213 = default(IToken);
	    IToken AS214 = default(IToken);
	    IToken WS215 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> view_name208 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> declaration_list211 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> select_command216 = default(AstParserRuleReturnScope<object, IToken>);

	    object CREATE204_tree = default(object);
	    object WS205_tree = default(object);
	    object VIEW206_tree = default(object);
	    object WS207_tree = default(object);
	    object WS209_tree = default(object);
	    object char_literal210_tree = default(object);
	    object char_literal212_tree = default(object);
	    object WS213_tree = default(object);
	    object AS214_tree = default(object);
	    object WS215_tree = default(object);
	    RewriteRuleITokenStream stream_AS=new RewriteRuleITokenStream(adaptor,"token AS");
	    RewriteRuleITokenStream stream_CREATE=new RewriteRuleITokenStream(adaptor,"token CREATE");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_172=new RewriteRuleITokenStream(adaptor,"token 172");
	    RewriteRuleITokenStream stream_VIEW=new RewriteRuleITokenStream(adaptor,"token VIEW");
	    RewriteRuleITokenStream stream_173=new RewriteRuleITokenStream(adaptor,"token 173");
	    RewriteRuleSubtreeStream stream_view_name=new RewriteRuleSubtreeStream(adaptor,"rule view_name");
	    RewriteRuleSubtreeStream stream_select_command=new RewriteRuleSubtreeStream(adaptor,"rule select_command");
	    RewriteRuleSubtreeStream stream_declaration_list=new RewriteRuleSubtreeStream(adaptor,"rule declaration_list");
		try { DebugEnterRule(GrammarFileName, "create_view_command");
		DebugLocation(298, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:299:2: ( CREATE WS VIEW WS view_name ( ( WS )? '(' declaration_list ')' )? WS AS WS select_command -> ^( T_CREATE_VIEW view_name ( declaration_list )? select_command ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:299:4: CREATE WS VIEW WS view_name ( ( WS )? '(' declaration_list ')' )? WS AS WS select_command
			{
			DebugLocation(299, 4);
			CREATE204=(IToken)Match(input,CREATE,Follow._CREATE_in_create_view_command1703); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CREATE.Add(CREATE204);

			DebugLocation(299, 11);
			WS205=(IToken)Match(input,WS,Follow._WS_in_create_view_command1705); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS205);

			DebugLocation(299, 14);
			VIEW206=(IToken)Match(input,VIEW,Follow._VIEW_in_create_view_command1707); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_VIEW.Add(VIEW206);

			DebugLocation(299, 19);
			WS207=(IToken)Match(input,WS,Follow._WS_in_create_view_command1709); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS207);

			DebugLocation(299, 22);
			PushFollow(Follow._view_name_in_create_view_command1711);
			view_name208=view_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_view_name.Add(view_name208.Tree);
			DebugLocation(299, 32);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:299:32: ( ( WS )? '(' declaration_list ')' )?
			int alt74=2;
			try { DebugEnterSubRule(74);
			try { DebugEnterDecision(74, decisionCanBacktrack[74]);
			int LA74_0 = input.LA(1);

			if ((LA74_0==WS))
			{
				int LA74_1 = input.LA(2);

				if ((LA74_1==172))
				{
					alt74 = 1;
				}
			}
			else if ((LA74_0==172))
			{
				alt74 = 1;
			}
			} finally { DebugExitDecision(74); }
			switch (alt74)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:299:33: ( WS )? '(' declaration_list ')'
				{
				DebugLocation(299, 33);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:299:33: ( WS )?
				int alt73=2;
				try { DebugEnterSubRule(73);
				try { DebugEnterDecision(73, decisionCanBacktrack[73]);
				int LA73_0 = input.LA(1);

				if ((LA73_0==WS))
				{
					alt73 = 1;
				}
				} finally { DebugExitDecision(73); }
				switch (alt73)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:299:33: WS
					{
					DebugLocation(299, 33);
					WS209=(IToken)Match(input,WS,Follow._WS_in_create_view_command1714); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS209);


					}
					break;

				}
				} finally { DebugExitSubRule(73); }

				DebugLocation(299, 37);
				char_literal210=(IToken)Match(input,172,Follow._172_in_create_view_command1717); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_172.Add(char_literal210);

				DebugLocation(299, 41);
				PushFollow(Follow._declaration_list_in_create_view_command1719);
				declaration_list211=declaration_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_declaration_list.Add(declaration_list211.Tree);
				DebugLocation(299, 58);
				char_literal212=(IToken)Match(input,173,Follow._173_in_create_view_command1721); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_173.Add(char_literal212);


				}
				break;

			}
			} finally { DebugExitSubRule(74); }

			DebugLocation(299, 64);
			WS213=(IToken)Match(input,WS,Follow._WS_in_create_view_command1725); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS213);

			DebugLocation(299, 67);
			AS214=(IToken)Match(input,AS,Follow._AS_in_create_view_command1727); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_AS.Add(AS214);

			DebugLocation(299, 70);
			WS215=(IToken)Match(input,WS,Follow._WS_in_create_view_command1729); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS215);

			DebugLocation(299, 73);
			PushFollow(Follow._select_command_in_create_view_command1731);
			select_command216=select_command();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_select_command.Add(select_command216.Tree);


			{
			// AST REWRITE
			// elements: select_command, declaration_list, view_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 300:2: -> ^( T_CREATE_VIEW view_name ( declaration_list )? select_command )
			{
				DebugLocation(300, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:300:5: ^( T_CREATE_VIEW view_name ( declaration_list )? select_command )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(300, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CREATE_VIEW, "T_CREATE_VIEW"), root_1);

				DebugLocation(300, 21);
				adaptor.AddChild(root_1, stream_view_name.NextTree());
				DebugLocation(300, 31);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:300:31: ( declaration_list )?
				if (stream_declaration_list.HasNext)
				{
					DebugLocation(300, 31);
					adaptor.AddChild(root_1, stream_declaration_list.NextTree());

				}
				stream_declaration_list.Reset();
				DebugLocation(300, 49);
				adaptor.AddChild(root_1, stream_select_command.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("create_view_command", 37);
			LeaveRule("create_view_command", 37);
			LeaveRule_create_view_command();
	    }
	 	DebugLocation(301, 1);
		} finally { DebugExitRule(GrammarFileName, "create_view_command"); }
		return retval;

	}
	// $ANTLR end "create_view_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_drop_view_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_drop_view_command() {}

	// $ANTLR start "drop_view_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:303:1: drop_view_command : DROP WS VIEW WS view_name -> ^( T_DROP_VIEW view_name ) ;
	[GrammarRule("drop_view_command")]
	private AstParserRuleReturnScope<object, IToken> drop_view_command()
	{
		EnterRule_drop_view_command();
		EnterRule("drop_view_command", 38);
		TraceIn("drop_view_command", 38);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken DROP217 = default(IToken);
	    IToken WS218 = default(IToken);
	    IToken VIEW219 = default(IToken);
	    IToken WS220 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> view_name221 = default(AstParserRuleReturnScope<object, IToken>);

	    object DROP217_tree = default(object);
	    object WS218_tree = default(object);
	    object VIEW219_tree = default(object);
	    object WS220_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_VIEW=new RewriteRuleITokenStream(adaptor,"token VIEW");
	    RewriteRuleITokenStream stream_DROP=new RewriteRuleITokenStream(adaptor,"token DROP");
	    RewriteRuleSubtreeStream stream_view_name=new RewriteRuleSubtreeStream(adaptor,"rule view_name");
		try { DebugEnterRule(GrammarFileName, "drop_view_command");
		DebugLocation(303, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:304:2: ( DROP WS VIEW WS view_name -> ^( T_DROP_VIEW view_name ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:304:4: DROP WS VIEW WS view_name
			{
			DebugLocation(304, 4);
			DROP217=(IToken)Match(input,DROP,Follow._DROP_in_drop_view_command1757); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DROP.Add(DROP217);

			DebugLocation(304, 9);
			WS218=(IToken)Match(input,WS,Follow._WS_in_drop_view_command1759); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS218);

			DebugLocation(304, 12);
			VIEW219=(IToken)Match(input,VIEW,Follow._VIEW_in_drop_view_command1761); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_VIEW.Add(VIEW219);

			DebugLocation(304, 17);
			WS220=(IToken)Match(input,WS,Follow._WS_in_drop_view_command1763); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS220);

			DebugLocation(304, 20);
			PushFollow(Follow._view_name_in_drop_view_command1765);
			view_name221=view_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_view_name.Add(view_name221.Tree);


			{
			// AST REWRITE
			// elements: view_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 305:2: -> ^( T_DROP_VIEW view_name )
			{
				DebugLocation(305, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:305:5: ^( T_DROP_VIEW view_name )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(305, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_DROP_VIEW, "T_DROP_VIEW"), root_1);

				DebugLocation(305, 19);
				adaptor.AddChild(root_1, stream_view_name.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("drop_view_command", 38);
			LeaveRule("drop_view_command", 38);
			LeaveRule_drop_view_command();
	    }
	 	DebugLocation(306, 1);
		} finally { DebugExitRule(GrammarFileName, "drop_view_command"); }
		return retval;

	}
	// $ANTLR end "drop_view_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_view_name() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_view_name() {}

	// $ANTLR start "view_name"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:308:1: view_name : TOKEN -> ^( T_VIEW_NAME TOKEN ) ;
	[GrammarRule("view_name")]
	private AstParserRuleReturnScope<object, IToken> view_name()
	{
		EnterRule_view_name();
		EnterRule("view_name", 39);
		TraceIn("view_name", 39);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN222 = default(IToken);

	    object TOKEN222_tree = default(object);
	    RewriteRuleITokenStream stream_TOKEN=new RewriteRuleITokenStream(adaptor,"token TOKEN");

		try { DebugEnterRule(GrammarFileName, "view_name");
		DebugLocation(308, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:309:2: ( TOKEN -> ^( T_VIEW_NAME TOKEN ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:309:4: TOKEN
			{
			DebugLocation(309, 4);
			TOKEN222=(IToken)Match(input,TOKEN,Follow._TOKEN_in_view_name1785); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_TOKEN.Add(TOKEN222);



			{
			// AST REWRITE
			// elements: TOKEN
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 309:10: -> ^( T_VIEW_NAME TOKEN )
			{
				DebugLocation(309, 13);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:309:13: ^( T_VIEW_NAME TOKEN )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(309, 15);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_VIEW_NAME, "T_VIEW_NAME"), root_1);

				DebugLocation(309, 27);
				adaptor.AddChild(root_1, stream_TOKEN.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("view_name", 39);
			LeaveRule("view_name", 39);
			LeaveRule_view_name();
	    }
	 	DebugLocation(310, 1);
		} finally { DebugExitRule(GrammarFileName, "view_name"); }
		return retval;

	}
	// $ANTLR end "view_name"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_drop_table_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_drop_table_command() {}

	// $ANTLR start "drop_table_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:314:1: drop_table_command : DROP WS TABLE WS file -> ^( T_DROP_TABLE file ) ;
	[GrammarRule("drop_table_command")]
	private AstParserRuleReturnScope<object, IToken> drop_table_command()
	{
		EnterRule_drop_table_command();
		EnterRule("drop_table_command", 40);
		TraceIn("drop_table_command", 40);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken DROP223 = default(IToken);
	    IToken WS224 = default(IToken);
	    IToken TABLE225 = default(IToken);
	    IToken WS226 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file227 = default(AstParserRuleReturnScope<object, IToken>);

	    object DROP223_tree = default(object);
	    object WS224_tree = default(object);
	    object TABLE225_tree = default(object);
	    object WS226_tree = default(object);
	    RewriteRuleITokenStream stream_TABLE=new RewriteRuleITokenStream(adaptor,"token TABLE");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_DROP=new RewriteRuleITokenStream(adaptor,"token DROP");
	    RewriteRuleSubtreeStream stream_file=new RewriteRuleSubtreeStream(adaptor,"rule file");
		try { DebugEnterRule(GrammarFileName, "drop_table_command");
		DebugLocation(314, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:315:2: ( DROP WS TABLE WS file -> ^( T_DROP_TABLE file ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:315:4: DROP WS TABLE WS file
			{
			DebugLocation(315, 4);
			DROP223=(IToken)Match(input,DROP,Follow._DROP_in_drop_table_command1807); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DROP.Add(DROP223);

			DebugLocation(315, 9);
			WS224=(IToken)Match(input,WS,Follow._WS_in_drop_table_command1809); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS224);

			DebugLocation(315, 12);
			TABLE225=(IToken)Match(input,TABLE,Follow._TABLE_in_drop_table_command1811); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_TABLE.Add(TABLE225);

			DebugLocation(315, 18);
			WS226=(IToken)Match(input,WS,Follow._WS_in_drop_table_command1813); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS226);

			DebugLocation(315, 21);
			PushFollow(Follow._file_in_drop_table_command1815);
			file227=file();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_file.Add(file227.Tree);


			{
			// AST REWRITE
			// elements: file
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 316:2: -> ^( T_DROP_TABLE file )
			{
				DebugLocation(316, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:316:5: ^( T_DROP_TABLE file )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(316, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_DROP_TABLE, "T_DROP_TABLE"), root_1);

				DebugLocation(316, 20);
				adaptor.AddChild(root_1, stream_file.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("drop_table_command", 40);
			LeaveRule("drop_table_command", 40);
			LeaveRule_drop_table_command();
	    }
	 	DebugLocation(317, 1);
		} finally { DebugExitRule(GrammarFileName, "drop_table_command"); }
		return retval;

	}
	// $ANTLR end "drop_table_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_set_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_set_command() {}

	// $ANTLR start "set_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:323:1: set_command : SET WS variable ( WS )? '=' ( WS )? expression -> ^( T_SET_VARIABLE variable expression ) ;
	[GrammarRule("set_command")]
	private AstParserRuleReturnScope<object, IToken> set_command()
	{
		EnterRule_set_command();
		EnterRule("set_command", 41);
		TraceIn("set_command", 41);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken SET228 = default(IToken);
	    IToken WS229 = default(IToken);
	    IToken WS231 = default(IToken);
	    IToken char_literal232 = default(IToken);
	    IToken WS233 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> variable230 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression234 = default(AstParserRuleReturnScope<object, IToken>);

	    object SET228_tree = default(object);
	    object WS229_tree = default(object);
	    object WS231_tree = default(object);
	    object char_literal232_tree = default(object);
	    object WS233_tree = default(object);
	    RewriteRuleITokenStream stream_SET=new RewriteRuleITokenStream(adaptor,"token SET");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_184=new RewriteRuleITokenStream(adaptor,"token 184");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_variable=new RewriteRuleSubtreeStream(adaptor,"rule variable");
		try { DebugEnterRule(GrammarFileName, "set_command");
		DebugLocation(323, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:324:2: ( SET WS variable ( WS )? '=' ( WS )? expression -> ^( T_SET_VARIABLE variable expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:324:4: SET WS variable ( WS )? '=' ( WS )? expression
			{
			DebugLocation(324, 4);
			SET228=(IToken)Match(input,SET,Follow._SET_in_set_command1839); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_SET.Add(SET228);

			DebugLocation(324, 8);
			WS229=(IToken)Match(input,WS,Follow._WS_in_set_command1841); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS229);

			DebugLocation(324, 11);
			PushFollow(Follow._variable_in_set_command1843);
			variable230=variable();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_variable.Add(variable230.Tree);
			DebugLocation(324, 20);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:324:20: ( WS )?
			int alt75=2;
			try { DebugEnterSubRule(75);
			try { DebugEnterDecision(75, decisionCanBacktrack[75]);
			int LA75_0 = input.LA(1);

			if ((LA75_0==WS))
			{
				alt75 = 1;
			}
			} finally { DebugExitDecision(75); }
			switch (alt75)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:324:20: WS
				{
				DebugLocation(324, 20);
				WS231=(IToken)Match(input,WS,Follow._WS_in_set_command1845); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS231);


				}
				break;

			}
			} finally { DebugExitSubRule(75); }

			DebugLocation(324, 24);
			char_literal232=(IToken)Match(input,184,Follow._184_in_set_command1848); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_184.Add(char_literal232);

			DebugLocation(324, 28);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:324:28: ( WS )?
			int alt76=2;
			try { DebugEnterSubRule(76);
			try { DebugEnterDecision(76, decisionCanBacktrack[76]);
			int LA76_0 = input.LA(1);

			if ((LA76_0==WS))
			{
				alt76 = 1;
			}
			} finally { DebugExitDecision(76); }
			switch (alt76)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:324:28: WS
				{
				DebugLocation(324, 28);
				WS233=(IToken)Match(input,WS,Follow._WS_in_set_command1850); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS233);


				}
				break;

			}
			} finally { DebugExitSubRule(76); }

			DebugLocation(324, 32);
			PushFollow(Follow._expression_in_set_command1853);
			expression234=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression.Add(expression234.Tree);


			{
			// AST REWRITE
			// elements: variable, expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 325:2: -> ^( T_SET_VARIABLE variable expression )
			{
				DebugLocation(325, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:325:5: ^( T_SET_VARIABLE variable expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(325, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SET_VARIABLE, "T_SET_VARIABLE"), root_1);

				DebugLocation(325, 22);
				adaptor.AddChild(root_1, stream_variable.NextTree());
				DebugLocation(325, 31);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("set_command", 41);
			LeaveRule("set_command", 41);
			LeaveRule_set_command();
	    }
	 	DebugLocation(326, 1);
		} finally { DebugExitRule(GrammarFileName, "set_command"); }
		return retval;

	}
	// $ANTLR end "set_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_list() {}

	// $ANTLR start "expression_list"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:331:1: expression_list : expression ( ( WS )? ',' ( WS )? expression )* -> ^( T_EXPRESSIONLIST ( expression )+ ) ;
	[GrammarRule("expression_list")]
	private AstParserRuleReturnScope<object, IToken> expression_list()
	{
		EnterRule_expression_list();
		EnterRule("expression_list", 42);
		TraceIn("expression_list", 42);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS236 = default(IToken);
	    IToken char_literal237 = default(IToken);
	    IToken WS238 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression235 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression239 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS236_tree = default(object);
	    object char_literal237_tree = default(object);
	    object WS238_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_176=new RewriteRuleITokenStream(adaptor,"token 176");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "expression_list");
		DebugLocation(331, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:332:2: ( expression ( ( WS )? ',' ( WS )? expression )* -> ^( T_EXPRESSIONLIST ( expression )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:332:4: expression ( ( WS )? ',' ( WS )? expression )*
			{
			DebugLocation(332, 4);
			PushFollow(Follow._expression_in_expression_list1878);
			expression235=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression.Add(expression235.Tree);
			DebugLocation(332, 15);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:332:15: ( ( WS )? ',' ( WS )? expression )*
			try { DebugEnterSubRule(79);
			while (true)
			{
				int alt79=2;
				try { DebugEnterDecision(79, decisionCanBacktrack[79]);
				int LA79_0 = input.LA(1);

				if ((LA79_0==WS))
				{
					int LA79_2 = input.LA(2);

					if ((LA79_2==176))
					{
						alt79 = 1;
					}


				}
				else if ((LA79_0==176))
				{
					alt79 = 1;
				}


				} finally { DebugExitDecision(79); }
				switch ( alt79 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:332:16: ( WS )? ',' ( WS )? expression
					{
					DebugLocation(332, 16);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:332:16: ( WS )?
					int alt77=2;
					try { DebugEnterSubRule(77);
					try { DebugEnterDecision(77, decisionCanBacktrack[77]);
					int LA77_0 = input.LA(1);

					if ((LA77_0==WS))
					{
						alt77 = 1;
					}
					} finally { DebugExitDecision(77); }
					switch (alt77)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:332:16: WS
						{
						DebugLocation(332, 16);
						WS236=(IToken)Match(input,WS,Follow._WS_in_expression_list1881); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS236);


						}
						break;

					}
					} finally { DebugExitSubRule(77); }

					DebugLocation(332, 20);
					char_literal237=(IToken)Match(input,176,Follow._176_in_expression_list1884); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_176.Add(char_literal237);

					DebugLocation(332, 24);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:332:24: ( WS )?
					int alt78=2;
					try { DebugEnterSubRule(78);
					try { DebugEnterDecision(78, decisionCanBacktrack[78]);
					int LA78_0 = input.LA(1);

					if ((LA78_0==WS))
					{
						alt78 = 1;
					}
					} finally { DebugExitDecision(78); }
					switch (alt78)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:332:24: WS
						{
						DebugLocation(332, 24);
						WS238=(IToken)Match(input,WS,Follow._WS_in_expression_list1886); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS238);


						}
						break;

					}
					} finally { DebugExitSubRule(78); }

					DebugLocation(332, 28);
					PushFollow(Follow._expression_in_expression_list1889);
					expression239=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expression.Add(expression239.Tree);

					}
					break;

				default:
					goto loop79;
				}
			}

			loop79:
				;

			} finally { DebugExitSubRule(79); }



			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 332:41: -> ^( T_EXPRESSIONLIST ( expression )+ )
			{
				DebugLocation(332, 44);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:332:44: ^( T_EXPRESSIONLIST ( expression )+ )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(332, 46);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_EXPRESSIONLIST, "T_EXPRESSIONLIST"), root_1);

				DebugLocation(332, 63);
				if (!(stream_expression.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_expression.HasNext )
				{
					DebugLocation(332, 63);
					adaptor.AddChild(root_1, stream_expression.NextTree());

				}
				stream_expression.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_list", 42);
			LeaveRule("expression_list", 42);
			LeaveRule_expression_list();
	    }
	 	DebugLocation(333, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_list"); }
		return retval;

	}
	// $ANTLR end "expression_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_list_or_select_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_list_or_select_command() {}

	// $ANTLR start "expression_list_or_select_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:335:1: expression_list_or_select_command : ( ( SELECT )=> select_command | expression_list );
	[GrammarRule("expression_list_or_select_command")]
	private AstParserRuleReturnScope<object, IToken> expression_list_or_select_command()
	{
		EnterRule_expression_list_or_select_command();
		EnterRule("expression_list_or_select_command", 43);
		TraceIn("expression_list_or_select_command", 43);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> select_command240 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list241 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "expression_list_or_select_command");
		DebugLocation(335, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:336:2: ( ( SELECT )=> select_command | expression_list )
			int alt80=2;
			try { DebugEnterDecision(80, decisionCanBacktrack[80]);
			int LA80_0 = input.LA(1);

			if ((LA80_0==172))
			{
				int LA80_1 = input.LA(2);

				if ((EvaluatePredicate(synpred3_gql_fragment)))
				{
					alt80 = 1;
				}
				else if ((true))
				{
					alt80 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 80, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA80_0==SELECT) && (EvaluatePredicate(synpred3_gql_fragment)))
			{
				alt80 = 1;
			}
			else if (((LA80_0>=CASE && LA80_0<=CAST)||(LA80_0>=CONVERT && LA80_0<=COUNT)||(LA80_0>=DATEADD && LA80_0<=DATEPART)||LA80_0==EXISTS||(LA80_0>=NOT && LA80_0<=NUMBER)||LA80_0==SIMPLE_FILE||(LA80_0>=STRING && LA80_0<=SYSTEMVAR)||LA80_0==TOKEN||LA80_0==VARIABLE||LA80_0==175||LA80_0==177||LA80_0==191))
			{
				alt80 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 80, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(80); }
			switch (alt80)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:336:4: ( SELECT )=> select_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(336, 16);
				PushFollow(Follow._select_command_in_expression_list_or_select_command1918);
				select_command240=select_command();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, select_command240.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:337:4: expression_list
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(337, 4);
				PushFollow(Follow._expression_list_in_expression_list_or_select_command1923);
				expression_list241=expression_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression_list241.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_list_or_select_command", 43);
			LeaveRule("expression_list_or_select_command", 43);
			LeaveRule_expression_list_or_select_command();
	    }
	 	DebugLocation(338, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_list_or_select_command"); }
		return retval;

	}
	// $ANTLR end "expression_list_or_select_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression() {}

	// $ANTLR start "expression"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:340:1: expression : expression_7 ;
	[GrammarRule("expression")]
	private AstParserRuleReturnScope<object, IToken> expression()
	{
		EnterRule_expression();
		EnterRule("expression", 44);
		TraceIn("expression", 44);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> expression_7242 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(340, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:341:2: ( expression_7 )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:341:4: expression_7
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(341, 4);
			PushFollow(Follow._expression_7_in_expression1936);
			expression_7242=expression_7();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression_7242.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression", 44);
			LeaveRule("expression", 44);
			LeaveRule_expression();
	    }
	 	DebugLocation(342, 1);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return retval;

	}
	// $ANTLR end "expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_7() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_7() {}

	// $ANTLR start "expression_7"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:344:1: expression_7 : (a= expression_6 -> $a) ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )* ;
	[GrammarRule("expression_7")]
	private AstParserRuleReturnScope<object, IToken> expression_7()
	{
		EnterRule_expression_7();
		EnterRule("expression_7", 45);
		TraceIn("expression_7", 45);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS243 = default(IToken);
	    IToken WS245 = default(IToken);
	    IToken IN246 = default(IToken);
	    IToken WS247 = default(IToken);
	    IToken char_literal248 = default(IToken);
	    IToken WS249 = default(IToken);
	    IToken WS251 = default(IToken);
	    IToken char_literal252 = default(IToken);
	    IToken NOT253 = default(IToken);
	    IToken WS254 = default(IToken);
	    IToken IN255 = default(IToken);
	    IToken WS256 = default(IToken);
	    IToken char_literal257 = default(IToken);
	    IToken WS258 = default(IToken);
	    IToken WS260 = default(IToken);
	    IToken char_literal261 = default(IToken);
	    IToken WS263 = default(IToken);
	    IToken SOME264 = default(IToken);
	    IToken ANY265 = default(IToken);
	    IToken WS266 = default(IToken);
	    IToken char_literal267 = default(IToken);
	    IToken char_literal269 = default(IToken);
	    IToken WS271 = default(IToken);
	    IToken ALL272 = default(IToken);
	    IToken WS273 = default(IToken);
	    IToken char_literal274 = default(IToken);
	    IToken char_literal276 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_7244 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command250 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command259 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_4262 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command268 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_4270 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command275 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS243_tree = default(object);
	    object WS245_tree = default(object);
	    object IN246_tree = default(object);
	    object WS247_tree = default(object);
	    object char_literal248_tree = default(object);
	    object WS249_tree = default(object);
	    object WS251_tree = default(object);
	    object char_literal252_tree = default(object);
	    object NOT253_tree = default(object);
	    object WS254_tree = default(object);
	    object IN255_tree = default(object);
	    object WS256_tree = default(object);
	    object char_literal257_tree = default(object);
	    object WS258_tree = default(object);
	    object WS260_tree = default(object);
	    object char_literal261_tree = default(object);
	    object WS263_tree = default(object);
	    object SOME264_tree = default(object);
	    object ANY265_tree = default(object);
	    object WS266_tree = default(object);
	    object char_literal267_tree = default(object);
	    object char_literal269_tree = default(object);
	    object WS271_tree = default(object);
	    object ALL272_tree = default(object);
	    object WS273_tree = default(object);
	    object char_literal274_tree = default(object);
	    object char_literal276_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_ANY=new RewriteRuleITokenStream(adaptor,"token ANY");
	    RewriteRuleITokenStream stream_IN=new RewriteRuleITokenStream(adaptor,"token IN");
	    RewriteRuleITokenStream stream_172=new RewriteRuleITokenStream(adaptor,"token 172");
	    RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");
	    RewriteRuleITokenStream stream_173=new RewriteRuleITokenStream(adaptor,"token 173");
	    RewriteRuleITokenStream stream_SOME=new RewriteRuleITokenStream(adaptor,"token SOME");
	    RewriteRuleITokenStream stream_ALL=new RewriteRuleITokenStream(adaptor,"token ALL");
	    RewriteRuleSubtreeStream stream_op_7=new RewriteRuleSubtreeStream(adaptor,"rule op_7");
	    RewriteRuleSubtreeStream stream_expression_6=new RewriteRuleSubtreeStream(adaptor,"rule expression_6");
	    RewriteRuleSubtreeStream stream_expression_list_or_select_command=new RewriteRuleSubtreeStream(adaptor,"rule expression_list_or_select_command");
	    RewriteRuleSubtreeStream stream_op_4=new RewriteRuleSubtreeStream(adaptor,"rule op_4");
		try { DebugEnterRule(GrammarFileName, "expression_7");
		DebugLocation(344, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:345:2: ( (a= expression_6 -> $a) ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:345:4: (a= expression_6 -> $a) ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )*
			{
			DebugLocation(345, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:345:4: (a= expression_6 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:345:5: a= expression_6
			{
			DebugLocation(345, 6);
			PushFollow(Follow._expression_6_in_expression_71952);
			a=expression_6();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression_6.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 345:19: -> $a
			{
				DebugLocation(345, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(345, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:345:25: ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )*
			try { DebugEnterSubRule(93);
			while (true)
			{
				int alt93=2;
				try { DebugEnterDecision(93, decisionCanBacktrack[93]);
				int LA93_0 = input.LA(1);

				if ((LA93_0==WS))
				{
					int LA93_1 = input.LA(2);

					if ((LA93_1==BETWEEN||LA93_1==IN||LA93_1==LIKE||LA93_1==MATCH||LA93_1==NOT||LA93_1==OR||(LA93_1>=167 && LA93_1<=169)||(LA93_1>=181 && LA93_1<=186)))
					{
						alt93 = 1;
					}


				}


				} finally { DebugExitDecision(93); }
				switch ( alt93 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:345:26: WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) )
					{
					DebugLocation(345, 26);
					WS243=(IToken)Match(input,WS,Follow._WS_in_expression_71959); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS243);

					DebugLocation(345, 29);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:345:29: ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) )
					int alt92=5;
					try { DebugEnterSubRule(92);
					try { DebugEnterDecision(92, decisionCanBacktrack[92]);
					switch (input.LA(1))
					{
					case BETWEEN:
					case OR:
						{
						alt92 = 1;
						}
						break;
					case NOT:
						{
						int LA92_2 = input.LA(2);

						if ((LA92_2==WS))
						{
							switch (input.LA(3))
							{
							case BETWEEN:
								{
								alt92 = 1;
								}
								break;
							case IN:
								{
								alt92 = 3;
								}
								break;
							case LIKE:
								{
								switch (input.LA(4))
								{
								case WS:
									{
									int LA92_16 = input.LA(5);

									if ((LA92_16==ANY||LA92_16==SOME))
									{
										alt92 = 4;
									}
									else if ((LA92_16==ALL))
									{
										alt92 = 5;
									}
									else
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 92, 16, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
									}
									break;
								case ANY:
								case SOME:
									{
									alt92 = 4;
									}
									break;
								case ALL:
									{
									alt92 = 5;
									}
									break;
								default:
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 92, 20, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

								}
								break;
							case MATCH:
								{
								switch (input.LA(4))
								{
								case WS:
									{
									int LA92_16 = input.LA(5);

									if ((LA92_16==ANY||LA92_16==SOME))
									{
										alt92 = 4;
									}
									else if ((LA92_16==ALL))
									{
										alt92 = 5;
									}
									else
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 92, 16, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
									}
									break;
								case ANY:
								case SOME:
									{
									alt92 = 4;
									}
									break;
								case ALL:
									{
									alt92 = 5;
									}
									break;
								default:
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 92, 21, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

								}
								break;
							default:
								{
									if (state.backtracking>0) {state.failed=true; return retval;}
									NoViableAltException nvae = new NoViableAltException("", 92, 15, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}

						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 92, 2, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case IN:
						{
						alt92 = 2;
						}
						break;
					case 184:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA92_16 = input.LA(3);

							if ((LA92_16==ANY||LA92_16==SOME))
							{
								alt92 = 4;
							}
							else if ((LA92_16==ALL))
							{
								alt92 = 5;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 92, 16, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt92 = 4;
							}
							break;
						case ALL:
							{
							alt92 = 5;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 92, 4, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 186:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA92_16 = input.LA(3);

							if ((LA92_16==ANY||LA92_16==SOME))
							{
								alt92 = 4;
							}
							else if ((LA92_16==ALL))
							{
								alt92 = 5;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 92, 16, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt92 = 4;
							}
							break;
						case ALL:
							{
							alt92 = 5;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 92, 5, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 182:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA92_16 = input.LA(3);

							if ((LA92_16==ANY||LA92_16==SOME))
							{
								alt92 = 4;
							}
							else if ((LA92_16==ALL))
							{
								alt92 = 5;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 92, 16, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt92 = 4;
							}
							break;
						case ALL:
							{
							alt92 = 5;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 92, 6, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 183:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA92_16 = input.LA(3);

							if ((LA92_16==ANY||LA92_16==SOME))
							{
								alt92 = 4;
							}
							else if ((LA92_16==ALL))
							{
								alt92 = 5;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 92, 16, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt92 = 4;
							}
							break;
						case ALL:
							{
							alt92 = 5;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 92, 7, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 168:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA92_16 = input.LA(3);

							if ((LA92_16==ANY||LA92_16==SOME))
							{
								alt92 = 4;
							}
							else if ((LA92_16==ALL))
							{
								alt92 = 5;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 92, 16, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt92 = 4;
							}
							break;
						case ALL:
							{
							alt92 = 5;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 92, 8, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 169:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA92_16 = input.LA(3);

							if ((LA92_16==ANY||LA92_16==SOME))
							{
								alt92 = 4;
							}
							else if ((LA92_16==ALL))
							{
								alt92 = 5;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 92, 16, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt92 = 4;
							}
							break;
						case ALL:
							{
							alt92 = 5;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 92, 9, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 167:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA92_16 = input.LA(3);

							if ((LA92_16==ANY||LA92_16==SOME))
							{
								alt92 = 4;
							}
							else if ((LA92_16==ALL))
							{
								alt92 = 5;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 92, 16, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt92 = 4;
							}
							break;
						case ALL:
							{
							alt92 = 5;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 92, 10, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 185:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA92_16 = input.LA(3);

							if ((LA92_16==ANY||LA92_16==SOME))
							{
								alt92 = 4;
							}
							else if ((LA92_16==ALL))
							{
								alt92 = 5;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 92, 16, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt92 = 4;
							}
							break;
						case ALL:
							{
							alt92 = 5;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 92, 11, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 181:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA92_16 = input.LA(3);

							if ((LA92_16==ANY||LA92_16==SOME))
							{
								alt92 = 4;
							}
							else if ((LA92_16==ALL))
							{
								alt92 = 5;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 92, 16, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt92 = 4;
							}
							break;
						case ALL:
							{
							alt92 = 5;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 92, 12, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case LIKE:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA92_16 = input.LA(3);

							if ((LA92_16==ANY||LA92_16==SOME))
							{
								alt92 = 4;
							}
							else if ((LA92_16==ALL))
							{
								alt92 = 5;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 92, 16, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt92 = 4;
							}
							break;
						case ALL:
							{
							alt92 = 5;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 92, 13, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case MATCH:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA92_16 = input.LA(3);

							if ((LA92_16==ANY||LA92_16==SOME))
							{
								alt92 = 4;
							}
							else if ((LA92_16==ALL))
							{
								alt92 = 5;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 92, 16, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt92 = 4;
							}
							break;
						case ALL:
							{
							alt92 = 5;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 92, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					default:
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 92, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(92); }
					switch (alt92)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:346:2: op_7 WS b= expression_6
						{
						DebugLocation(346, 2);
						PushFollow(Follow._op_7_in_expression_71964);
						op_7244=op_7();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_op_7.Add(op_7244.Tree);
						DebugLocation(346, 7);
						WS245=(IToken)Match(input,WS,Follow._WS_in_expression_71966); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS245);

						DebugLocation(346, 11);
						PushFollow(Follow._expression_6_in_expression_71970);
						b=expression_6();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expression_6.Add(b.Tree);


						{
						// AST REWRITE
						// elements: b, op_7, expression_7
						// token labels: 
						// rule labels: retval, b
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 346:25: -> ^( T_OP_BINARY op_7 $expression_7 $b)
						{
							DebugLocation(346, 28);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:346:28: ^( T_OP_BINARY op_7 $expression_7 $b)
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(346, 30);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(346, 42);
							adaptor.AddChild(root_1, stream_op_7.NextTree());
							DebugLocation(346, 48);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(346, 62);
							adaptor.AddChild(root_1, stream_b.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:347:4: IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')'
						{
						DebugLocation(347, 4);
						IN246=(IToken)Match(input,IN,Follow._IN_in_expression_71989); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_IN.Add(IN246);

						DebugLocation(347, 7);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:347:7: ( WS )?
						int alt81=2;
						try { DebugEnterSubRule(81);
						try { DebugEnterDecision(81, decisionCanBacktrack[81]);
						int LA81_0 = input.LA(1);

						if ((LA81_0==WS))
						{
							alt81 = 1;
						}
						} finally { DebugExitDecision(81); }
						switch (alt81)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:347:7: WS
							{
							DebugLocation(347, 7);
							WS247=(IToken)Match(input,WS,Follow._WS_in_expression_71991); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS247);


							}
							break;

						}
						} finally { DebugExitSubRule(81); }

						DebugLocation(347, 11);
						char_literal248=(IToken)Match(input,172,Follow._172_in_expression_71994); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_172.Add(char_literal248);

						DebugLocation(347, 15);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:347:15: ( WS )?
						int alt82=2;
						try { DebugEnterSubRule(82);
						try { DebugEnterDecision(82, decisionCanBacktrack[82]);
						int LA82_0 = input.LA(1);

						if ((LA82_0==WS))
						{
							alt82 = 1;
						}
						} finally { DebugExitDecision(82); }
						switch (alt82)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:347:15: WS
							{
							DebugLocation(347, 15);
							WS249=(IToken)Match(input,WS,Follow._WS_in_expression_71996); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS249);


							}
							break;

						}
						} finally { DebugExitSubRule(82); }

						DebugLocation(347, 19);
						PushFollow(Follow._expression_list_or_select_command_in_expression_71999);
						expression_list_or_select_command250=expression_list_or_select_command();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expression_list_or_select_command.Add(expression_list_or_select_command250.Tree);
						DebugLocation(347, 53);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:347:53: ( WS )?
						int alt83=2;
						try { DebugEnterSubRule(83);
						try { DebugEnterDecision(83, decisionCanBacktrack[83]);
						int LA83_0 = input.LA(1);

						if ((LA83_0==WS))
						{
							alt83 = 1;
						}
						} finally { DebugExitDecision(83); }
						switch (alt83)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:347:53: WS
							{
							DebugLocation(347, 53);
							WS251=(IToken)Match(input,WS,Follow._WS_in_expression_72001); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS251);


							}
							break;

						}
						} finally { DebugExitSubRule(83); }

						DebugLocation(347, 57);
						char_literal252=(IToken)Match(input,173,Follow._173_in_expression_72004); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_173.Add(char_literal252);



						{
						// AST REWRITE
						// elements: expression_list_or_select_command, expression_7
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 347:61: -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command )
						{
							DebugLocation(347, 64);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:347:64: ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(347, 66);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(347, 78);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_IN, "T_IN"));
							DebugLocation(347, 84);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(347, 97);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:348:4: NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')'
						{
						DebugLocation(348, 4);
						NOT253=(IToken)Match(input,NOT,Follow._NOT_in_expression_72022); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NOT.Add(NOT253);

						DebugLocation(348, 8);
						WS254=(IToken)Match(input,WS,Follow._WS_in_expression_72024); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS254);

						DebugLocation(348, 11);
						IN255=(IToken)Match(input,IN,Follow._IN_in_expression_72026); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_IN.Add(IN255);

						DebugLocation(348, 14);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:348:14: ( WS )?
						int alt84=2;
						try { DebugEnterSubRule(84);
						try { DebugEnterDecision(84, decisionCanBacktrack[84]);
						int LA84_0 = input.LA(1);

						if ((LA84_0==WS))
						{
							alt84 = 1;
						}
						} finally { DebugExitDecision(84); }
						switch (alt84)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:348:14: WS
							{
							DebugLocation(348, 14);
							WS256=(IToken)Match(input,WS,Follow._WS_in_expression_72028); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS256);


							}
							break;

						}
						} finally { DebugExitSubRule(84); }

						DebugLocation(348, 18);
						char_literal257=(IToken)Match(input,172,Follow._172_in_expression_72031); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_172.Add(char_literal257);

						DebugLocation(348, 22);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:348:22: ( WS )?
						int alt85=2;
						try { DebugEnterSubRule(85);
						try { DebugEnterDecision(85, decisionCanBacktrack[85]);
						int LA85_0 = input.LA(1);

						if ((LA85_0==WS))
						{
							alt85 = 1;
						}
						} finally { DebugExitDecision(85); }
						switch (alt85)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:348:22: WS
							{
							DebugLocation(348, 22);
							WS258=(IToken)Match(input,WS,Follow._WS_in_expression_72033); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS258);


							}
							break;

						}
						} finally { DebugExitSubRule(85); }

						DebugLocation(348, 26);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:348:26: ( expression_list_or_select_command )
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:348:27: expression_list_or_select_command
						{
						DebugLocation(348, 27);
						PushFollow(Follow._expression_list_or_select_command_in_expression_72037);
						expression_list_or_select_command259=expression_list_or_select_command();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expression_list_or_select_command.Add(expression_list_or_select_command259.Tree);

						}

						DebugLocation(348, 62);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:348:62: ( WS )?
						int alt86=2;
						try { DebugEnterSubRule(86);
						try { DebugEnterDecision(86, decisionCanBacktrack[86]);
						int LA86_0 = input.LA(1);

						if ((LA86_0==WS))
						{
							alt86 = 1;
						}
						} finally { DebugExitDecision(86); }
						switch (alt86)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:348:62: WS
							{
							DebugLocation(348, 62);
							WS260=(IToken)Match(input,WS,Follow._WS_in_expression_72040); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS260);


							}
							break;

						}
						} finally { DebugExitSubRule(86); }

						DebugLocation(348, 66);
						char_literal261=(IToken)Match(input,173,Follow._173_in_expression_72043); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_173.Add(char_literal261);



						{
						// AST REWRITE
						// elements: expression_7, expression_list_or_select_command
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 348:70: -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command )
						{
							DebugLocation(348, 73);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:348:73: ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(348, 75);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(348, 87);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_NOTIN, "T_NOTIN"));
							DebugLocation(348, 96);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(348, 109);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 4:
						DebugEnterAlt(4);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:349:4: op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')'
						{
						DebugLocation(349, 4);
						PushFollow(Follow._op_4_in_expression_72061);
						op_4262=op_4();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_op_4.Add(op_4262.Tree);
						DebugLocation(349, 9);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:349:9: ( WS )?
						int alt87=2;
						try { DebugEnterSubRule(87);
						try { DebugEnterDecision(87, decisionCanBacktrack[87]);
						int LA87_0 = input.LA(1);

						if ((LA87_0==WS))
						{
							alt87 = 1;
						}
						} finally { DebugExitDecision(87); }
						switch (alt87)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:349:9: WS
							{
							DebugLocation(349, 9);
							WS263=(IToken)Match(input,WS,Follow._WS_in_expression_72063); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS263);


							}
							break;

						}
						} finally { DebugExitSubRule(87); }

						DebugLocation(349, 13);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:349:13: ( SOME | ANY )
						int alt88=2;
						try { DebugEnterSubRule(88);
						try { DebugEnterDecision(88, decisionCanBacktrack[88]);
						int LA88_0 = input.LA(1);

						if ((LA88_0==SOME))
						{
							alt88 = 1;
						}
						else if ((LA88_0==ANY))
						{
							alt88 = 2;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 88, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						} finally { DebugExitDecision(88); }
						switch (alt88)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:349:14: SOME
							{
							DebugLocation(349, 14);
							SOME264=(IToken)Match(input,SOME,Follow._SOME_in_expression_72067); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_SOME.Add(SOME264);


							}
							break;
						case 2:
							DebugEnterAlt(2);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:349:21: ANY
							{
							DebugLocation(349, 21);
							ANY265=(IToken)Match(input,ANY,Follow._ANY_in_expression_72071); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_ANY.Add(ANY265);


							}
							break;

						}
						} finally { DebugExitSubRule(88); }

						DebugLocation(349, 26);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:349:26: ( WS )?
						int alt89=2;
						try { DebugEnterSubRule(89);
						try { DebugEnterDecision(89, decisionCanBacktrack[89]);
						int LA89_0 = input.LA(1);

						if ((LA89_0==WS))
						{
							alt89 = 1;
						}
						} finally { DebugExitDecision(89); }
						switch (alt89)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:349:26: WS
							{
							DebugLocation(349, 26);
							WS266=(IToken)Match(input,WS,Follow._WS_in_expression_72074); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS266);


							}
							break;

						}
						} finally { DebugExitSubRule(89); }

						DebugLocation(349, 30);
						char_literal267=(IToken)Match(input,172,Follow._172_in_expression_72077); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_172.Add(char_literal267);

						DebugLocation(349, 34);
						PushFollow(Follow._expression_list_or_select_command_in_expression_72079);
						expression_list_or_select_command268=expression_list_or_select_command();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expression_list_or_select_command.Add(expression_list_or_select_command268.Tree);
						DebugLocation(349, 68);
						char_literal269=(IToken)Match(input,173,Follow._173_in_expression_72081); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_173.Add(char_literal269);



						{
						// AST REWRITE
						// elements: expression_7, op_4, expression_list_or_select_command
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 349:72: -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command )
						{
							DebugLocation(349, 75);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:349:75: ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(349, 77);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(349, 89);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_ANY, "T_ANY"));
							DebugLocation(349, 95);
							adaptor.AddChild(root_1, stream_op_4.NextTree());
							DebugLocation(349, 101);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(349, 114);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 5:
						DebugEnterAlt(5);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:350:4: op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')'
						{
						DebugLocation(350, 4);
						PushFollow(Follow._op_4_in_expression_72101);
						op_4270=op_4();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_op_4.Add(op_4270.Tree);
						DebugLocation(350, 9);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:350:9: ( WS )?
						int alt90=2;
						try { DebugEnterSubRule(90);
						try { DebugEnterDecision(90, decisionCanBacktrack[90]);
						int LA90_0 = input.LA(1);

						if ((LA90_0==WS))
						{
							alt90 = 1;
						}
						} finally { DebugExitDecision(90); }
						switch (alt90)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:350:9: WS
							{
							DebugLocation(350, 9);
							WS271=(IToken)Match(input,WS,Follow._WS_in_expression_72103); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS271);


							}
							break;

						}
						} finally { DebugExitSubRule(90); }

						DebugLocation(350, 13);
						ALL272=(IToken)Match(input,ALL,Follow._ALL_in_expression_72106); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_ALL.Add(ALL272);

						DebugLocation(350, 17);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:350:17: ( WS )?
						int alt91=2;
						try { DebugEnterSubRule(91);
						try { DebugEnterDecision(91, decisionCanBacktrack[91]);
						int LA91_0 = input.LA(1);

						if ((LA91_0==WS))
						{
							alt91 = 1;
						}
						} finally { DebugExitDecision(91); }
						switch (alt91)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:350:17: WS
							{
							DebugLocation(350, 17);
							WS273=(IToken)Match(input,WS,Follow._WS_in_expression_72108); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS273);


							}
							break;

						}
						} finally { DebugExitSubRule(91); }

						DebugLocation(350, 21);
						char_literal274=(IToken)Match(input,172,Follow._172_in_expression_72111); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_172.Add(char_literal274);

						DebugLocation(350, 25);
						PushFollow(Follow._expression_list_or_select_command_in_expression_72113);
						expression_list_or_select_command275=expression_list_or_select_command();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expression_list_or_select_command.Add(expression_list_or_select_command275.Tree);
						DebugLocation(350, 59);
						char_literal276=(IToken)Match(input,173,Follow._173_in_expression_72115); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_173.Add(char_literal276);



						{
						// AST REWRITE
						// elements: expression_list_or_select_command, op_4, expression_7
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 350:63: -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command )
						{
							DebugLocation(350, 66);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:350:66: ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(350, 68);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(350, 80);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_ALL, "T_ALL"));
							DebugLocation(350, 86);
							adaptor.AddChild(root_1, stream_op_4.NextTree());
							DebugLocation(350, 92);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(350, 105);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;

					}
					} finally { DebugExitSubRule(92); }


					}
					break;

				default:
					goto loop93;
				}
			}

			loop93:
				;

			} finally { DebugExitSubRule(93); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_7", 45);
			LeaveRule("expression_7", 45);
			LeaveRule_expression_7();
	    }
	 	DebugLocation(352, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_7"); }
		return retval;

	}
	// $ANTLR end "expression_7"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_7() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_7() {}

	// $ANTLR start "op_7"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:354:1: op_7 : ( OR -> T_OR | BETWEEN -> T_BETWEEN | NOT WS BETWEEN -> T_NOTBETWEEN );
	[GrammarRule("op_7")]
	private AstParserRuleReturnScope<object, IToken> op_7()
	{
		EnterRule_op_7();
		EnterRule("op_7", 46);
		TraceIn("op_7", 46);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken OR277 = default(IToken);
	    IToken BETWEEN278 = default(IToken);
	    IToken NOT279 = default(IToken);
	    IToken WS280 = default(IToken);
	    IToken BETWEEN281 = default(IToken);

	    object OR277_tree = default(object);
	    object BETWEEN278_tree = default(object);
	    object NOT279_tree = default(object);
	    object WS280_tree = default(object);
	    object BETWEEN281_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");
	    RewriteRuleITokenStream stream_BETWEEN=new RewriteRuleITokenStream(adaptor,"token BETWEEN");
	    RewriteRuleITokenStream stream_OR=new RewriteRuleITokenStream(adaptor,"token OR");

		try { DebugEnterRule(GrammarFileName, "op_7");
		DebugLocation(354, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:354:6: ( OR -> T_OR | BETWEEN -> T_BETWEEN | NOT WS BETWEEN -> T_NOTBETWEEN )
			int alt94=3;
			try { DebugEnterDecision(94, decisionCanBacktrack[94]);
			switch (input.LA(1))
			{
			case OR:
				{
				alt94 = 1;
				}
				break;
			case BETWEEN:
				{
				alt94 = 2;
				}
				break;
			case NOT:
				{
				alt94 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 94, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(94); }
			switch (alt94)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:354:8: OR
				{
				DebugLocation(354, 8);
				OR277=(IToken)Match(input,OR,Follow._OR_in_op_72145); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_OR.Add(OR277);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 354:11: -> T_OR
				{
					DebugLocation(354, 14);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_OR, "T_OR"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:355:4: BETWEEN
				{
				DebugLocation(355, 4);
				BETWEEN278=(IToken)Match(input,BETWEEN,Follow._BETWEEN_in_op_72154); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_BETWEEN.Add(BETWEEN278);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 355:12: -> T_BETWEEN
				{
					DebugLocation(355, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BETWEEN, "T_BETWEEN"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:356:4: NOT WS BETWEEN
				{
				DebugLocation(356, 4);
				NOT279=(IToken)Match(input,NOT,Follow._NOT_in_op_72163); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_NOT.Add(NOT279);

				DebugLocation(356, 8);
				WS280=(IToken)Match(input,WS,Follow._WS_in_op_72165); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS280);

				DebugLocation(356, 11);
				BETWEEN281=(IToken)Match(input,BETWEEN,Follow._BETWEEN_in_op_72167); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_BETWEEN.Add(BETWEEN281);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 356:19: -> T_NOTBETWEEN
				{
					DebugLocation(356, 22);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTBETWEEN, "T_NOTBETWEEN"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_7", 46);
			LeaveRule("op_7", 46);
			LeaveRule_op_7();
	    }
	 	DebugLocation(357, 1);
		} finally { DebugExitRule(GrammarFileName, "op_7"); }
		return retval;

	}
	// $ANTLR end "op_7"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_6() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_6() {}

	// $ANTLR start "expression_6"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:359:1: expression_6 : (a= expression_5 -> $a) ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )* ;
	[GrammarRule("expression_6")]
	private AstParserRuleReturnScope<object, IToken> expression_6()
	{
		EnterRule_expression_6();
		EnterRule("expression_6", 47);
		TraceIn("expression_6", 47);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS282 = default(IToken);
	    IToken WS284 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_6283 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS282_tree = default(object);
	    object WS284_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_op_6=new RewriteRuleSubtreeStream(adaptor,"rule op_6");
	    RewriteRuleSubtreeStream stream_expression_5=new RewriteRuleSubtreeStream(adaptor,"rule expression_5");
		try { DebugEnterRule(GrammarFileName, "expression_6");
		DebugLocation(359, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:360:2: ( (a= expression_5 -> $a) ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:360:4: (a= expression_5 -> $a) ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )*
			{
			DebugLocation(360, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:360:4: (a= expression_5 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:360:5: a= expression_5
			{
			DebugLocation(360, 6);
			PushFollow(Follow._expression_5_in_expression_62186);
			a=expression_5();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression_5.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 360:19: -> $a
			{
				DebugLocation(360, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(360, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:360:25: ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )*
			try { DebugEnterSubRule(95);
			while (true)
			{
				int alt95=2;
				try { DebugEnterDecision(95, decisionCanBacktrack[95]);
				int LA95_0 = input.LA(1);

				if ((LA95_0==WS))
				{
					int LA95_1 = input.LA(2);

					if ((LA95_1==AND))
					{
						alt95 = 1;
					}


				}


				} finally { DebugExitDecision(95); }
				switch ( alt95 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:360:26: WS op_6 WS b= expression_5
					{
					DebugLocation(360, 26);
					WS282=(IToken)Match(input,WS,Follow._WS_in_expression_62193); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS282);

					DebugLocation(360, 29);
					PushFollow(Follow._op_6_in_expression_62195);
					op_6283=op_6();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_op_6.Add(op_6283.Tree);
					DebugLocation(360, 34);
					WS284=(IToken)Match(input,WS,Follow._WS_in_expression_62197); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS284);

					DebugLocation(360, 38);
					PushFollow(Follow._expression_5_in_expression_62201);
					b=expression_5();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expression_5.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, expression_6, op_6
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 360:52: -> ^( T_OP_BINARY op_6 $expression_6 $b)
					{
						DebugLocation(360, 55);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:360:55: ^( T_OP_BINARY op_6 $expression_6 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(360, 57);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(360, 69);
						adaptor.AddChild(root_1, stream_op_6.NextTree());
						DebugLocation(360, 75);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(360, 89);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop95;
				}
			}

			loop95:
				;

			} finally { DebugExitSubRule(95); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_6", 47);
			LeaveRule("expression_6", 47);
			LeaveRule_expression_6();
	    }
	 	DebugLocation(361, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_6"); }
		return retval;

	}
	// $ANTLR end "expression_6"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_6() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_6() {}

	// $ANTLR start "op_6"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:363:1: op_6 : AND -> T_AND ;
	[GrammarRule("op_6")]
	private AstParserRuleReturnScope<object, IToken> op_6()
	{
		EnterRule_op_6();
		EnterRule("op_6", 48);
		TraceIn("op_6", 48);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken AND285 = default(IToken);

	    object AND285_tree = default(object);
	    RewriteRuleITokenStream stream_AND=new RewriteRuleITokenStream(adaptor,"token AND");

		try { DebugEnterRule(GrammarFileName, "op_6");
		DebugLocation(363, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:363:6: ( AND -> T_AND )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:363:8: AND
			{
			DebugLocation(363, 8);
			AND285=(IToken)Match(input,AND,Follow._AND_in_op_62229); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_AND.Add(AND285);



			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 363:12: -> T_AND
			{
				DebugLocation(363, 15);
				adaptor.AddChild(root_0, (object)adaptor.Create(T_AND, "T_AND"));

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_6", 48);
			LeaveRule("op_6", 48);
			LeaveRule_op_6();
	    }
	 	DebugLocation(364, 1);
		} finally { DebugExitRule(GrammarFileName, "op_6"); }
		return retval;

	}
	// $ANTLR end "op_6"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_5() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_5() {}

	// $ANTLR start "expression_5"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:366:1: expression_5 : ( op_5 WS expression_5 -> ^( T_OP_UNARY op_5 expression_5 ) | expression_4 );
	[GrammarRule("expression_5")]
	private AstParserRuleReturnScope<object, IToken> expression_5()
	{
		EnterRule_expression_5();
		EnterRule("expression_5", 49);
		TraceIn("expression_5", 49);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS287 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> op_5286 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_5288 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_4289 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS287_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression_5=new RewriteRuleSubtreeStream(adaptor,"rule expression_5");
	    RewriteRuleSubtreeStream stream_op_5=new RewriteRuleSubtreeStream(adaptor,"rule op_5");
		try { DebugEnterRule(GrammarFileName, "expression_5");
		DebugLocation(366, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:367:2: ( op_5 WS expression_5 -> ^( T_OP_UNARY op_5 expression_5 ) | expression_4 )
			int alt96=2;
			try { DebugEnterDecision(96, decisionCanBacktrack[96]);
			int LA96_0 = input.LA(1);

			if ((LA96_0==NOT))
			{
				alt96 = 1;
			}
			else if (((LA96_0>=CASE && LA96_0<=CAST)||(LA96_0>=CONVERT && LA96_0<=COUNT)||(LA96_0>=DATEADD && LA96_0<=DATEPART)||LA96_0==EXISTS||LA96_0==NUMBER||LA96_0==SIMPLE_FILE||(LA96_0>=STRING && LA96_0<=SYSTEMVAR)||LA96_0==TOKEN||LA96_0==VARIABLE||LA96_0==172||LA96_0==175||LA96_0==177||LA96_0==191))
			{
				alt96 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 96, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(96); }
			switch (alt96)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:367:4: op_5 WS expression_5
				{
				DebugLocation(367, 4);
				PushFollow(Follow._op_5_in_expression_52247);
				op_5286=op_5();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_op_5.Add(op_5286.Tree);
				DebugLocation(367, 9);
				WS287=(IToken)Match(input,WS,Follow._WS_in_expression_52249); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS287);

				DebugLocation(367, 12);
				PushFollow(Follow._expression_5_in_expression_52251);
				expression_5288=expression_5();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression_5.Add(expression_5288.Tree);


				{
				// AST REWRITE
				// elements: expression_5, op_5
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 367:25: -> ^( T_OP_UNARY op_5 expression_5 )
				{
					DebugLocation(367, 28);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:367:28: ^( T_OP_UNARY op_5 expression_5 )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(367, 30);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_UNARY, "T_OP_UNARY"), root_1);

					DebugLocation(367, 41);
					adaptor.AddChild(root_1, stream_op_5.NextTree());
					DebugLocation(367, 46);
					adaptor.AddChild(root_1, stream_expression_5.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:368:4: expression_4
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(368, 4);
				PushFollow(Follow._expression_4_in_expression_52266);
				expression_4289=expression_4();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression_4289.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_5", 49);
			LeaveRule("expression_5", 49);
			LeaveRule_expression_5();
	    }
	 	DebugLocation(369, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_5"); }
		return retval;

	}
	// $ANTLR end "expression_5"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_5() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_5() {}

	// $ANTLR start "op_5"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:371:1: op_5 : NOT -> T_NOT ;
	[GrammarRule("op_5")]
	private AstParserRuleReturnScope<object, IToken> op_5()
	{
		EnterRule_op_5();
		EnterRule("op_5", 50);
		TraceIn("op_5", 50);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken NOT290 = default(IToken);

	    object NOT290_tree = default(object);
	    RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");

		try { DebugEnterRule(GrammarFileName, "op_5");
		DebugLocation(371, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:371:7: ( NOT -> T_NOT )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:371:9: NOT
			{
			DebugLocation(371, 9);
			NOT290=(IToken)Match(input,NOT,Follow._NOT_in_op_52277); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_NOT.Add(NOT290);



			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 371:13: -> T_NOT
			{
				DebugLocation(371, 16);
				adaptor.AddChild(root_0, (object)adaptor.Create(T_NOT, "T_NOT"));

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_5", 50);
			LeaveRule("op_5", 50);
			LeaveRule_op_5();
	    }
	 	DebugLocation(372, 1);
		} finally { DebugExitRule(GrammarFileName, "op_5"); }
		return retval;

	}
	// $ANTLR end "op_5"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_4() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_4() {}

	// $ANTLR start "expression_4"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:374:1: expression_4 : (a= expression_3 -> $a) ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )* ;
	[GrammarRule("expression_4")]
	private AstParserRuleReturnScope<object, IToken> expression_4()
	{
		EnterRule_expression_4();
		EnterRule("expression_4", 51);
		TraceIn("expression_4", 51);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS291 = default(IToken);
	    IToken WS293 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_4292 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS291_tree = default(object);
	    object WS293_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression_3=new RewriteRuleSubtreeStream(adaptor,"rule expression_3");
	    RewriteRuleSubtreeStream stream_op_4=new RewriteRuleSubtreeStream(adaptor,"rule op_4");
		try { DebugEnterRule(GrammarFileName, "expression_4");
		DebugLocation(374, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:375:2: ( (a= expression_3 -> $a) ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:375:4: (a= expression_3 -> $a) ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )*
			{
			DebugLocation(375, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:375:4: (a= expression_3 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:375:5: a= expression_3
			{
			DebugLocation(375, 6);
			PushFollow(Follow._expression_3_in_expression_42296);
			a=expression_3();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression_3.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 375:19: -> $a
			{
				DebugLocation(375, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(375, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:375:25: ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )*
			try { DebugEnterSubRule(99);
			while (true)
			{
				int alt99=2;
				try { DebugEnterDecision(99, decisionCanBacktrack[99]);
				int LA99_0 = input.LA(1);

				if ((LA99_0==WS))
				{
					switch (input.LA(2))
					{
					case NOT:
						{
						int LA99_4 = input.LA(3);

						if ((LA99_4==WS))
						{
							int LA99_16 = input.LA(4);

							if ((LA99_16==LIKE))
							{
								int LA99_18 = input.LA(5);

								if ((LA99_18==WS))
								{
									int LA99_17 = input.LA(6);

									if (((LA99_17>=CASE && LA99_17<=CAST)||(LA99_17>=CONVERT && LA99_17<=COUNT)||(LA99_17>=DATEADD && LA99_17<=DATEPART)||LA99_17==EXISTS||LA99_17==NUMBER||LA99_17==SIMPLE_FILE||(LA99_17>=STRING && LA99_17<=SYSTEMVAR)||LA99_17==TOKEN||LA99_17==VARIABLE||LA99_17==172||LA99_17==175||LA99_17==177||LA99_17==191))
									{
										alt99 = 1;
									}


								}
								else if (((LA99_18>=CASE && LA99_18<=CAST)||(LA99_18>=CONVERT && LA99_18<=COUNT)||(LA99_18>=DATEADD && LA99_18<=DATEPART)||LA99_18==EXISTS||LA99_18==NUMBER||LA99_18==SIMPLE_FILE||(LA99_18>=STRING && LA99_18<=SYSTEMVAR)||LA99_18==TOKEN||LA99_18==VARIABLE||LA99_18==172||LA99_18==175||LA99_18==177||LA99_18==191))
								{
									alt99 = 1;
								}


							}
							else if ((LA99_16==MATCH))
							{
								int LA99_19 = input.LA(5);

								if ((LA99_19==WS))
								{
									int LA99_17 = input.LA(6);

									if (((LA99_17>=CASE && LA99_17<=CAST)||(LA99_17>=CONVERT && LA99_17<=COUNT)||(LA99_17>=DATEADD && LA99_17<=DATEPART)||LA99_17==EXISTS||LA99_17==NUMBER||LA99_17==SIMPLE_FILE||(LA99_17>=STRING && LA99_17<=SYSTEMVAR)||LA99_17==TOKEN||LA99_17==VARIABLE||LA99_17==172||LA99_17==175||LA99_17==177||LA99_17==191))
									{
										alt99 = 1;
									}


								}
								else if (((LA99_19>=CASE && LA99_19<=CAST)||(LA99_19>=CONVERT && LA99_19<=COUNT)||(LA99_19>=DATEADD && LA99_19<=DATEPART)||LA99_19==EXISTS||LA99_19==NUMBER||LA99_19==SIMPLE_FILE||(LA99_19>=STRING && LA99_19<=SYSTEMVAR)||LA99_19==TOKEN||LA99_19==VARIABLE||LA99_19==172||LA99_19==175||LA99_19==177||LA99_19==191))
								{
									alt99 = 1;
								}


							}


						}


						}
						break;
					case 184:
						{
						int LA99_5 = input.LA(3);

						if ((LA99_5==WS))
						{
							int LA99_17 = input.LA(4);

							if (((LA99_17>=CASE && LA99_17<=CAST)||(LA99_17>=CONVERT && LA99_17<=COUNT)||(LA99_17>=DATEADD && LA99_17<=DATEPART)||LA99_17==EXISTS||LA99_17==NUMBER||LA99_17==SIMPLE_FILE||(LA99_17>=STRING && LA99_17<=SYSTEMVAR)||LA99_17==TOKEN||LA99_17==VARIABLE||LA99_17==172||LA99_17==175||LA99_17==177||LA99_17==191))
							{
								alt99 = 1;
							}


						}
						else if (((LA99_5>=CASE && LA99_5<=CAST)||(LA99_5>=CONVERT && LA99_5<=COUNT)||(LA99_5>=DATEADD && LA99_5<=DATEPART)||LA99_5==EXISTS||LA99_5==NUMBER||LA99_5==SIMPLE_FILE||(LA99_5>=STRING && LA99_5<=SYSTEMVAR)||LA99_5==TOKEN||LA99_5==VARIABLE||LA99_5==172||LA99_5==175||LA99_5==177||LA99_5==191))
						{
							alt99 = 1;
						}


						}
						break;
					case 186:
						{
						int LA99_6 = input.LA(3);

						if ((LA99_6==WS))
						{
							int LA99_17 = input.LA(4);

							if (((LA99_17>=CASE && LA99_17<=CAST)||(LA99_17>=CONVERT && LA99_17<=COUNT)||(LA99_17>=DATEADD && LA99_17<=DATEPART)||LA99_17==EXISTS||LA99_17==NUMBER||LA99_17==SIMPLE_FILE||(LA99_17>=STRING && LA99_17<=SYSTEMVAR)||LA99_17==TOKEN||LA99_17==VARIABLE||LA99_17==172||LA99_17==175||LA99_17==177||LA99_17==191))
							{
								alt99 = 1;
							}


						}
						else if (((LA99_6>=CASE && LA99_6<=CAST)||(LA99_6>=CONVERT && LA99_6<=COUNT)||(LA99_6>=DATEADD && LA99_6<=DATEPART)||LA99_6==EXISTS||LA99_6==NUMBER||LA99_6==SIMPLE_FILE||(LA99_6>=STRING && LA99_6<=SYSTEMVAR)||LA99_6==TOKEN||LA99_6==VARIABLE||LA99_6==172||LA99_6==175||LA99_6==177||LA99_6==191))
						{
							alt99 = 1;
						}


						}
						break;
					case 182:
						{
						int LA99_7 = input.LA(3);

						if ((LA99_7==WS))
						{
							int LA99_17 = input.LA(4);

							if (((LA99_17>=CASE && LA99_17<=CAST)||(LA99_17>=CONVERT && LA99_17<=COUNT)||(LA99_17>=DATEADD && LA99_17<=DATEPART)||LA99_17==EXISTS||LA99_17==NUMBER||LA99_17==SIMPLE_FILE||(LA99_17>=STRING && LA99_17<=SYSTEMVAR)||LA99_17==TOKEN||LA99_17==VARIABLE||LA99_17==172||LA99_17==175||LA99_17==177||LA99_17==191))
							{
								alt99 = 1;
							}


						}
						else if (((LA99_7>=CASE && LA99_7<=CAST)||(LA99_7>=CONVERT && LA99_7<=COUNT)||(LA99_7>=DATEADD && LA99_7<=DATEPART)||LA99_7==EXISTS||LA99_7==NUMBER||LA99_7==SIMPLE_FILE||(LA99_7>=STRING && LA99_7<=SYSTEMVAR)||LA99_7==TOKEN||LA99_7==VARIABLE||LA99_7==172||LA99_7==175||LA99_7==177||LA99_7==191))
						{
							alt99 = 1;
						}


						}
						break;
					case 183:
						{
						int LA99_8 = input.LA(3);

						if ((LA99_8==WS))
						{
							int LA99_17 = input.LA(4);

							if (((LA99_17>=CASE && LA99_17<=CAST)||(LA99_17>=CONVERT && LA99_17<=COUNT)||(LA99_17>=DATEADD && LA99_17<=DATEPART)||LA99_17==EXISTS||LA99_17==NUMBER||LA99_17==SIMPLE_FILE||(LA99_17>=STRING && LA99_17<=SYSTEMVAR)||LA99_17==TOKEN||LA99_17==VARIABLE||LA99_17==172||LA99_17==175||LA99_17==177||LA99_17==191))
							{
								alt99 = 1;
							}


						}
						else if (((LA99_8>=CASE && LA99_8<=CAST)||(LA99_8>=CONVERT && LA99_8<=COUNT)||(LA99_8>=DATEADD && LA99_8<=DATEPART)||LA99_8==EXISTS||LA99_8==NUMBER||LA99_8==SIMPLE_FILE||(LA99_8>=STRING && LA99_8<=SYSTEMVAR)||LA99_8==TOKEN||LA99_8==VARIABLE||LA99_8==172||LA99_8==175||LA99_8==177||LA99_8==191))
						{
							alt99 = 1;
						}


						}
						break;
					case 168:
						{
						int LA99_9 = input.LA(3);

						if ((LA99_9==WS))
						{
							int LA99_17 = input.LA(4);

							if (((LA99_17>=CASE && LA99_17<=CAST)||(LA99_17>=CONVERT && LA99_17<=COUNT)||(LA99_17>=DATEADD && LA99_17<=DATEPART)||LA99_17==EXISTS||LA99_17==NUMBER||LA99_17==SIMPLE_FILE||(LA99_17>=STRING && LA99_17<=SYSTEMVAR)||LA99_17==TOKEN||LA99_17==VARIABLE||LA99_17==172||LA99_17==175||LA99_17==177||LA99_17==191))
							{
								alt99 = 1;
							}


						}
						else if (((LA99_9>=CASE && LA99_9<=CAST)||(LA99_9>=CONVERT && LA99_9<=COUNT)||(LA99_9>=DATEADD && LA99_9<=DATEPART)||LA99_9==EXISTS||LA99_9==NUMBER||LA99_9==SIMPLE_FILE||(LA99_9>=STRING && LA99_9<=SYSTEMVAR)||LA99_9==TOKEN||LA99_9==VARIABLE||LA99_9==172||LA99_9==175||LA99_9==177||LA99_9==191))
						{
							alt99 = 1;
						}


						}
						break;
					case 169:
						{
						int LA99_10 = input.LA(3);

						if ((LA99_10==WS))
						{
							int LA99_17 = input.LA(4);

							if (((LA99_17>=CASE && LA99_17<=CAST)||(LA99_17>=CONVERT && LA99_17<=COUNT)||(LA99_17>=DATEADD && LA99_17<=DATEPART)||LA99_17==EXISTS||LA99_17==NUMBER||LA99_17==SIMPLE_FILE||(LA99_17>=STRING && LA99_17<=SYSTEMVAR)||LA99_17==TOKEN||LA99_17==VARIABLE||LA99_17==172||LA99_17==175||LA99_17==177||LA99_17==191))
							{
								alt99 = 1;
							}


						}
						else if (((LA99_10>=CASE && LA99_10<=CAST)||(LA99_10>=CONVERT && LA99_10<=COUNT)||(LA99_10>=DATEADD && LA99_10<=DATEPART)||LA99_10==EXISTS||LA99_10==NUMBER||LA99_10==SIMPLE_FILE||(LA99_10>=STRING && LA99_10<=SYSTEMVAR)||LA99_10==TOKEN||LA99_10==VARIABLE||LA99_10==172||LA99_10==175||LA99_10==177||LA99_10==191))
						{
							alt99 = 1;
						}


						}
						break;
					case 167:
						{
						int LA99_11 = input.LA(3);

						if ((LA99_11==WS))
						{
							int LA99_17 = input.LA(4);

							if (((LA99_17>=CASE && LA99_17<=CAST)||(LA99_17>=CONVERT && LA99_17<=COUNT)||(LA99_17>=DATEADD && LA99_17<=DATEPART)||LA99_17==EXISTS||LA99_17==NUMBER||LA99_17==SIMPLE_FILE||(LA99_17>=STRING && LA99_17<=SYSTEMVAR)||LA99_17==TOKEN||LA99_17==VARIABLE||LA99_17==172||LA99_17==175||LA99_17==177||LA99_17==191))
							{
								alt99 = 1;
							}


						}
						else if (((LA99_11>=CASE && LA99_11<=CAST)||(LA99_11>=CONVERT && LA99_11<=COUNT)||(LA99_11>=DATEADD && LA99_11<=DATEPART)||LA99_11==EXISTS||LA99_11==NUMBER||LA99_11==SIMPLE_FILE||(LA99_11>=STRING && LA99_11<=SYSTEMVAR)||LA99_11==TOKEN||LA99_11==VARIABLE||LA99_11==172||LA99_11==175||LA99_11==177||LA99_11==191))
						{
							alt99 = 1;
						}


						}
						break;
					case 185:
						{
						int LA99_12 = input.LA(3);

						if ((LA99_12==WS))
						{
							int LA99_17 = input.LA(4);

							if (((LA99_17>=CASE && LA99_17<=CAST)||(LA99_17>=CONVERT && LA99_17<=COUNT)||(LA99_17>=DATEADD && LA99_17<=DATEPART)||LA99_17==EXISTS||LA99_17==NUMBER||LA99_17==SIMPLE_FILE||(LA99_17>=STRING && LA99_17<=SYSTEMVAR)||LA99_17==TOKEN||LA99_17==VARIABLE||LA99_17==172||LA99_17==175||LA99_17==177||LA99_17==191))
							{
								alt99 = 1;
							}


						}
						else if (((LA99_12>=CASE && LA99_12<=CAST)||(LA99_12>=CONVERT && LA99_12<=COUNT)||(LA99_12>=DATEADD && LA99_12<=DATEPART)||LA99_12==EXISTS||LA99_12==NUMBER||LA99_12==SIMPLE_FILE||(LA99_12>=STRING && LA99_12<=SYSTEMVAR)||LA99_12==TOKEN||LA99_12==VARIABLE||LA99_12==172||LA99_12==175||LA99_12==177||LA99_12==191))
						{
							alt99 = 1;
						}


						}
						break;
					case 181:
						{
						int LA99_13 = input.LA(3);

						if ((LA99_13==WS))
						{
							int LA99_17 = input.LA(4);

							if (((LA99_17>=CASE && LA99_17<=CAST)||(LA99_17>=CONVERT && LA99_17<=COUNT)||(LA99_17>=DATEADD && LA99_17<=DATEPART)||LA99_17==EXISTS||LA99_17==NUMBER||LA99_17==SIMPLE_FILE||(LA99_17>=STRING && LA99_17<=SYSTEMVAR)||LA99_17==TOKEN||LA99_17==VARIABLE||LA99_17==172||LA99_17==175||LA99_17==177||LA99_17==191))
							{
								alt99 = 1;
							}


						}
						else if (((LA99_13>=CASE && LA99_13<=CAST)||(LA99_13>=CONVERT && LA99_13<=COUNT)||(LA99_13>=DATEADD && LA99_13<=DATEPART)||LA99_13==EXISTS||LA99_13==NUMBER||LA99_13==SIMPLE_FILE||(LA99_13>=STRING && LA99_13<=SYSTEMVAR)||LA99_13==TOKEN||LA99_13==VARIABLE||LA99_13==172||LA99_13==175||LA99_13==177||LA99_13==191))
						{
							alt99 = 1;
						}


						}
						break;
					case LIKE:
						{
						int LA99_14 = input.LA(3);

						if ((LA99_14==WS))
						{
							int LA99_17 = input.LA(4);

							if (((LA99_17>=CASE && LA99_17<=CAST)||(LA99_17>=CONVERT && LA99_17<=COUNT)||(LA99_17>=DATEADD && LA99_17<=DATEPART)||LA99_17==EXISTS||LA99_17==NUMBER||LA99_17==SIMPLE_FILE||(LA99_17>=STRING && LA99_17<=SYSTEMVAR)||LA99_17==TOKEN||LA99_17==VARIABLE||LA99_17==172||LA99_17==175||LA99_17==177||LA99_17==191))
							{
								alt99 = 1;
							}


						}
						else if (((LA99_14>=CASE && LA99_14<=CAST)||(LA99_14>=CONVERT && LA99_14<=COUNT)||(LA99_14>=DATEADD && LA99_14<=DATEPART)||LA99_14==EXISTS||LA99_14==NUMBER||LA99_14==SIMPLE_FILE||(LA99_14>=STRING && LA99_14<=SYSTEMVAR)||LA99_14==TOKEN||LA99_14==VARIABLE||LA99_14==172||LA99_14==175||LA99_14==177||LA99_14==191))
						{
							alt99 = 1;
						}


						}
						break;
					case MATCH:
						{
						int LA99_15 = input.LA(3);

						if ((LA99_15==WS))
						{
							int LA99_17 = input.LA(4);

							if (((LA99_17>=CASE && LA99_17<=CAST)||(LA99_17>=CONVERT && LA99_17<=COUNT)||(LA99_17>=DATEADD && LA99_17<=DATEPART)||LA99_17==EXISTS||LA99_17==NUMBER||LA99_17==SIMPLE_FILE||(LA99_17>=STRING && LA99_17<=SYSTEMVAR)||LA99_17==TOKEN||LA99_17==VARIABLE||LA99_17==172||LA99_17==175||LA99_17==177||LA99_17==191))
							{
								alt99 = 1;
							}


						}
						else if (((LA99_15>=CASE && LA99_15<=CAST)||(LA99_15>=CONVERT && LA99_15<=COUNT)||(LA99_15>=DATEADD && LA99_15<=DATEPART)||LA99_15==EXISTS||LA99_15==NUMBER||LA99_15==SIMPLE_FILE||(LA99_15>=STRING && LA99_15<=SYSTEMVAR)||LA99_15==TOKEN||LA99_15==VARIABLE||LA99_15==172||LA99_15==175||LA99_15==177||LA99_15==191))
						{
							alt99 = 1;
						}


						}
						break;
					}

				}
				else if ((LA99_0==LIKE||LA99_0==MATCH||LA99_0==NOT||(LA99_0>=167 && LA99_0<=169)||(LA99_0>=181 && LA99_0<=186)))
				{
					alt99 = 1;
				}


				} finally { DebugExitDecision(99); }
				switch ( alt99 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:375:26: ( WS )? op_4 ( WS )? b= expression_3
					{
					DebugLocation(375, 26);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:375:26: ( WS )?
					int alt97=2;
					try { DebugEnterSubRule(97);
					try { DebugEnterDecision(97, decisionCanBacktrack[97]);
					int LA97_0 = input.LA(1);

					if ((LA97_0==WS))
					{
						alt97 = 1;
					}
					} finally { DebugExitDecision(97); }
					switch (alt97)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:375:26: WS
						{
						DebugLocation(375, 26);
						WS291=(IToken)Match(input,WS,Follow._WS_in_expression_42303); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS291);


						}
						break;

					}
					} finally { DebugExitSubRule(97); }

					DebugLocation(375, 30);
					PushFollow(Follow._op_4_in_expression_42306);
					op_4292=op_4();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_op_4.Add(op_4292.Tree);
					DebugLocation(375, 35);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:375:35: ( WS )?
					int alt98=2;
					try { DebugEnterSubRule(98);
					try { DebugEnterDecision(98, decisionCanBacktrack[98]);
					int LA98_0 = input.LA(1);

					if ((LA98_0==WS))
					{
						alt98 = 1;
					}
					} finally { DebugExitDecision(98); }
					switch (alt98)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:375:35: WS
						{
						DebugLocation(375, 35);
						WS293=(IToken)Match(input,WS,Follow._WS_in_expression_42308); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS293);


						}
						break;

					}
					} finally { DebugExitSubRule(98); }

					DebugLocation(375, 40);
					PushFollow(Follow._expression_3_in_expression_42313);
					b=expression_3();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expression_3.Add(b.Tree);


					{
					// AST REWRITE
					// elements: expression_4, op_4, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 375:54: -> ^( T_OP_BINARY op_4 $expression_4 $b)
					{
						DebugLocation(375, 57);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:375:57: ^( T_OP_BINARY op_4 $expression_4 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(375, 59);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(375, 71);
						adaptor.AddChild(root_1, stream_op_4.NextTree());
						DebugLocation(375, 77);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(375, 91);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop99;
				}
			}

			loop99:
				;

			} finally { DebugExitSubRule(99); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_4", 51);
			LeaveRule("expression_4", 51);
			LeaveRule_expression_4();
	    }
	 	DebugLocation(376, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_4"); }
		return retval;

	}
	// $ANTLR end "expression_4"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_4() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_4() {}

	// $ANTLR start "op_4"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:378:1: op_4 : ( '=' -> T_EQUAL | '>=' -> T_NOTLESS | '<=' -> T_NOTGREATER | '<>' -> T_NOTEQUAL | '!=' -> T_NOTEQUAL | '!>' -> T_NOTGREATER | '!<' -> T_NOTLESS | '>' -> T_GREATER | '<' -> T_LESS | LIKE -> T_LIKE | NOT WS LIKE -> T_NOTLIKE | MATCH -> T_MATCH | NOT WS MATCH -> T_NOTMATCH );
	[GrammarRule("op_4")]
	private AstParserRuleReturnScope<object, IToken> op_4()
	{
		EnterRule_op_4();
		EnterRule("op_4", 52);
		TraceIn("op_4", 52);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal294 = default(IToken);
	    IToken string_literal295 = default(IToken);
	    IToken string_literal296 = default(IToken);
	    IToken string_literal297 = default(IToken);
	    IToken string_literal298 = default(IToken);
	    IToken string_literal299 = default(IToken);
	    IToken string_literal300 = default(IToken);
	    IToken char_literal301 = default(IToken);
	    IToken char_literal302 = default(IToken);
	    IToken LIKE303 = default(IToken);
	    IToken NOT304 = default(IToken);
	    IToken WS305 = default(IToken);
	    IToken LIKE306 = default(IToken);
	    IToken MATCH307 = default(IToken);
	    IToken NOT308 = default(IToken);
	    IToken WS309 = default(IToken);
	    IToken MATCH310 = default(IToken);

	    object char_literal294_tree = default(object);
	    object string_literal295_tree = default(object);
	    object string_literal296_tree = default(object);
	    object string_literal297_tree = default(object);
	    object string_literal298_tree = default(object);
	    object string_literal299_tree = default(object);
	    object string_literal300_tree = default(object);
	    object char_literal301_tree = default(object);
	    object char_literal302_tree = default(object);
	    object LIKE303_tree = default(object);
	    object NOT304_tree = default(object);
	    object WS305_tree = default(object);
	    object LIKE306_tree = default(object);
	    object MATCH307_tree = default(object);
	    object NOT308_tree = default(object);
	    object WS309_tree = default(object);
	    object MATCH310_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_169=new RewriteRuleITokenStream(adaptor,"token 169");
	    RewriteRuleITokenStream stream_168=new RewriteRuleITokenStream(adaptor,"token 168");
	    RewriteRuleITokenStream stream_167=new RewriteRuleITokenStream(adaptor,"token 167");
	    RewriteRuleITokenStream stream_181=new RewriteRuleITokenStream(adaptor,"token 181");
	    RewriteRuleITokenStream stream_182=new RewriteRuleITokenStream(adaptor,"token 182");
	    RewriteRuleITokenStream stream_MATCH=new RewriteRuleITokenStream(adaptor,"token MATCH");
	    RewriteRuleITokenStream stream_183=new RewriteRuleITokenStream(adaptor,"token 183");
	    RewriteRuleITokenStream stream_184=new RewriteRuleITokenStream(adaptor,"token 184");
	    RewriteRuleITokenStream stream_185=new RewriteRuleITokenStream(adaptor,"token 185");
	    RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");
	    RewriteRuleITokenStream stream_186=new RewriteRuleITokenStream(adaptor,"token 186");
	    RewriteRuleITokenStream stream_LIKE=new RewriteRuleITokenStream(adaptor,"token LIKE");

		try { DebugEnterRule(GrammarFileName, "op_4");
		DebugLocation(378, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:378:6: ( '=' -> T_EQUAL | '>=' -> T_NOTLESS | '<=' -> T_NOTGREATER | '<>' -> T_NOTEQUAL | '!=' -> T_NOTEQUAL | '!>' -> T_NOTGREATER | '!<' -> T_NOTLESS | '>' -> T_GREATER | '<' -> T_LESS | LIKE -> T_LIKE | NOT WS LIKE -> T_NOTLIKE | MATCH -> T_MATCH | NOT WS MATCH -> T_NOTMATCH )
			int alt100=13;
			try { DebugEnterDecision(100, decisionCanBacktrack[100]);
			switch (input.LA(1))
			{
			case 184:
				{
				alt100 = 1;
				}
				break;
			case 186:
				{
				alt100 = 2;
				}
				break;
			case 182:
				{
				alt100 = 3;
				}
				break;
			case 183:
				{
				alt100 = 4;
				}
				break;
			case 168:
				{
				alt100 = 5;
				}
				break;
			case 169:
				{
				alt100 = 6;
				}
				break;
			case 167:
				{
				alt100 = 7;
				}
				break;
			case 185:
				{
				alt100 = 8;
				}
				break;
			case 181:
				{
				alt100 = 9;
				}
				break;
			case LIKE:
				{
				alt100 = 10;
				}
				break;
			case NOT:
				{
				int LA100_11 = input.LA(2);

				if ((LA100_11==WS))
				{
					int LA100_13 = input.LA(3);

					if ((LA100_13==LIKE))
					{
						alt100 = 11;
					}
					else if ((LA100_13==MATCH))
					{
						alt100 = 13;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 100, 13, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 100, 11, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case MATCH:
				{
				alt100 = 12;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 100, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(100); }
			switch (alt100)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:378:8: '='
				{
				DebugLocation(378, 8);
				char_literal294=(IToken)Match(input,184,Follow._184_in_op_42339); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_184.Add(char_literal294);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 378:12: -> T_EQUAL
				{
					DebugLocation(378, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_EQUAL, "T_EQUAL"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:379:4: '>='
				{
				DebugLocation(379, 4);
				string_literal295=(IToken)Match(input,186,Follow._186_in_op_42348); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_186.Add(string_literal295);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 379:9: -> T_NOTLESS
				{
					DebugLocation(379, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTLESS, "T_NOTLESS"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:380:4: '<='
				{
				DebugLocation(380, 4);
				string_literal296=(IToken)Match(input,182,Follow._182_in_op_42358); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_182.Add(string_literal296);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 380:9: -> T_NOTGREATER
				{
					DebugLocation(380, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTGREATER, "T_NOTGREATER"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:381:4: '<>'
				{
				DebugLocation(381, 4);
				string_literal297=(IToken)Match(input,183,Follow._183_in_op_42368); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_183.Add(string_literal297);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 381:9: -> T_NOTEQUAL
				{
					DebugLocation(381, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTEQUAL, "T_NOTEQUAL"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:382:4: '!='
				{
				DebugLocation(382, 4);
				string_literal298=(IToken)Match(input,168,Follow._168_in_op_42377); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_168.Add(string_literal298);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 382:9: -> T_NOTEQUAL
				{
					DebugLocation(382, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTEQUAL, "T_NOTEQUAL"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:383:4: '!>'
				{
				DebugLocation(383, 4);
				string_literal299=(IToken)Match(input,169,Follow._169_in_op_42386); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_169.Add(string_literal299);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 383:9: -> T_NOTGREATER
				{
					DebugLocation(383, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTGREATER, "T_NOTGREATER"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:384:4: '!<'
				{
				DebugLocation(384, 4);
				string_literal300=(IToken)Match(input,167,Follow._167_in_op_42395); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_167.Add(string_literal300);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 384:9: -> T_NOTLESS
				{
					DebugLocation(384, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTLESS, "T_NOTLESS"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:385:4: '>'
				{
				DebugLocation(385, 4);
				char_literal301=(IToken)Match(input,185,Follow._185_in_op_42404); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_185.Add(char_literal301);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 385:8: -> T_GREATER
				{
					DebugLocation(385, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_GREATER, "T_GREATER"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:386:4: '<'
				{
				DebugLocation(386, 4);
				char_literal302=(IToken)Match(input,181,Follow._181_in_op_42414); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_181.Add(char_literal302);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 386:8: -> T_LESS
				{
					DebugLocation(386, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_LESS, "T_LESS"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:387:4: LIKE
				{
				DebugLocation(387, 4);
				LIKE303=(IToken)Match(input,LIKE,Follow._LIKE_in_op_42423); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LIKE.Add(LIKE303);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 387:9: -> T_LIKE
				{
					DebugLocation(387, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_LIKE, "T_LIKE"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:388:4: NOT WS LIKE
				{
				DebugLocation(388, 4);
				NOT304=(IToken)Match(input,NOT,Follow._NOT_in_op_42432); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_NOT.Add(NOT304);

				DebugLocation(388, 8);
				WS305=(IToken)Match(input,WS,Follow._WS_in_op_42434); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS305);

				DebugLocation(388, 11);
				LIKE306=(IToken)Match(input,LIKE,Follow._LIKE_in_op_42436); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LIKE.Add(LIKE306);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 388:16: -> T_NOTLIKE
				{
					DebugLocation(388, 19);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTLIKE, "T_NOTLIKE"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:389:4: MATCH
				{
				DebugLocation(389, 4);
				MATCH307=(IToken)Match(input,MATCH,Follow._MATCH_in_op_42445); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_MATCH.Add(MATCH307);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 389:10: -> T_MATCH
				{
					DebugLocation(389, 13);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MATCH, "T_MATCH"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:390:4: NOT WS MATCH
				{
				DebugLocation(390, 4);
				NOT308=(IToken)Match(input,NOT,Follow._NOT_in_op_42454); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_NOT.Add(NOT308);

				DebugLocation(390, 8);
				WS309=(IToken)Match(input,WS,Follow._WS_in_op_42456); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS309);

				DebugLocation(390, 11);
				MATCH310=(IToken)Match(input,MATCH,Follow._MATCH_in_op_42458); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_MATCH.Add(MATCH310);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 390:17: -> T_NOTMATCH
				{
					DebugLocation(390, 20);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTMATCH, "T_NOTMATCH"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_4", 52);
			LeaveRule("op_4", 52);
			LeaveRule_op_4();
	    }
	 	DebugLocation(391, 1);
		} finally { DebugExitRule(GrammarFileName, "op_4"); }
		return retval;

	}
	// $ANTLR end "op_4"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_3() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_3() {}

	// $ANTLR start "expression_3"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:393:1: expression_3 : (a= expression_2 -> $a) ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )* ;
	[GrammarRule("expression_3")]
	private AstParserRuleReturnScope<object, IToken> expression_3()
	{
		EnterRule_expression_3();
		EnterRule("expression_3", 53);
		TraceIn("expression_3", 53);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS311 = default(IToken);
	    IToken WS313 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_3312 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS311_tree = default(object);
	    object WS313_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_op_3=new RewriteRuleSubtreeStream(adaptor,"rule op_3");
	    RewriteRuleSubtreeStream stream_expression_2=new RewriteRuleSubtreeStream(adaptor,"rule expression_2");
		try { DebugEnterRule(GrammarFileName, "expression_3");
		DebugLocation(393, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:394:2: ( (a= expression_2 -> $a) ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:394:4: (a= expression_2 -> $a) ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )*
			{
			DebugLocation(394, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:394:4: (a= expression_2 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:394:5: a= expression_2
			{
			DebugLocation(394, 6);
			PushFollow(Follow._expression_2_in_expression_32477);
			a=expression_2();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression_2.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 394:19: -> $a
			{
				DebugLocation(394, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(394, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:394:25: ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )*
			try { DebugEnterSubRule(103);
			while (true)
			{
				int alt103=2;
				try { DebugEnterDecision(103, decisionCanBacktrack[103]);
				int LA103_0 = input.LA(1);

				if ((LA103_0==WS))
				{
					int LA103_1 = input.LA(2);

					if ((LA103_1==171||LA103_1==175||LA103_1==177||(LA103_1>=189 && LA103_1<=190)))
					{
						alt103 = 1;
					}


				}
				else if ((LA103_0==171||LA103_0==175||LA103_0==177||(LA103_0>=189 && LA103_0<=190)))
				{
					alt103 = 1;
				}


				} finally { DebugExitDecision(103); }
				switch ( alt103 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:394:26: ( WS )? op_3 ( WS )? b= expression_2
					{
					DebugLocation(394, 26);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:394:26: ( WS )?
					int alt101=2;
					try { DebugEnterSubRule(101);
					try { DebugEnterDecision(101, decisionCanBacktrack[101]);
					int LA101_0 = input.LA(1);

					if ((LA101_0==WS))
					{
						alt101 = 1;
					}
					} finally { DebugExitDecision(101); }
					switch (alt101)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:394:26: WS
						{
						DebugLocation(394, 26);
						WS311=(IToken)Match(input,WS,Follow._WS_in_expression_32484); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS311);


						}
						break;

					}
					} finally { DebugExitSubRule(101); }

					DebugLocation(394, 30);
					PushFollow(Follow._op_3_in_expression_32487);
					op_3312=op_3();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_op_3.Add(op_3312.Tree);
					DebugLocation(394, 35);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:394:35: ( WS )?
					int alt102=2;
					try { DebugEnterSubRule(102);
					try { DebugEnterDecision(102, decisionCanBacktrack[102]);
					int LA102_0 = input.LA(1);

					if ((LA102_0==WS))
					{
						alt102 = 1;
					}
					} finally { DebugExitDecision(102); }
					switch (alt102)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:394:35: WS
						{
						DebugLocation(394, 35);
						WS313=(IToken)Match(input,WS,Follow._WS_in_expression_32489); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS313);


						}
						break;

					}
					} finally { DebugExitSubRule(102); }

					DebugLocation(394, 40);
					PushFollow(Follow._expression_2_in_expression_32494);
					b=expression_2();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expression_2.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, op_3, expression_3
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 394:54: -> ^( T_OP_BINARY op_3 $expression_3 $b)
					{
						DebugLocation(394, 57);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:394:57: ^( T_OP_BINARY op_3 $expression_3 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(394, 59);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(394, 71);
						adaptor.AddChild(root_1, stream_op_3.NextTree());
						DebugLocation(394, 77);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(394, 91);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop103;
				}
			}

			loop103:
				;

			} finally { DebugExitSubRule(103); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_3", 53);
			LeaveRule("expression_3", 53);
			LeaveRule_expression_3();
	    }
	 	DebugLocation(395, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_3"); }
		return retval;

	}
	// $ANTLR end "expression_3"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_3() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_3() {}

	// $ANTLR start "op_3"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:397:1: op_3 : ( '+' -> T_PLUS | '-' -> T_MINUS | '&' -> T_BITWISE_AND | '|' -> T_BITWISE_OR | '^' -> T_BITWISE_XOR );
	[GrammarRule("op_3")]
	private AstParserRuleReturnScope<object, IToken> op_3()
	{
		EnterRule_op_3();
		EnterRule("op_3", 54);
		TraceIn("op_3", 54);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal314 = default(IToken);
	    IToken char_literal315 = default(IToken);
	    IToken char_literal316 = default(IToken);
	    IToken char_literal317 = default(IToken);
	    IToken char_literal318 = default(IToken);

	    object char_literal314_tree = default(object);
	    object char_literal315_tree = default(object);
	    object char_literal316_tree = default(object);
	    object char_literal317_tree = default(object);
	    object char_literal318_tree = default(object);
	    RewriteRuleITokenStream stream_171=new RewriteRuleITokenStream(adaptor,"token 171");
	    RewriteRuleITokenStream stream_175=new RewriteRuleITokenStream(adaptor,"token 175");
	    RewriteRuleITokenStream stream_177=new RewriteRuleITokenStream(adaptor,"token 177");
	    RewriteRuleITokenStream stream_189=new RewriteRuleITokenStream(adaptor,"token 189");
	    RewriteRuleITokenStream stream_190=new RewriteRuleITokenStream(adaptor,"token 190");

		try { DebugEnterRule(GrammarFileName, "op_3");
		DebugLocation(397, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:397:6: ( '+' -> T_PLUS | '-' -> T_MINUS | '&' -> T_BITWISE_AND | '|' -> T_BITWISE_OR | '^' -> T_BITWISE_XOR )
			int alt104=5;
			try { DebugEnterDecision(104, decisionCanBacktrack[104]);
			switch (input.LA(1))
			{
			case 175:
				{
				alt104 = 1;
				}
				break;
			case 177:
				{
				alt104 = 2;
				}
				break;
			case 171:
				{
				alt104 = 3;
				}
				break;
			case 190:
				{
				alt104 = 4;
				}
				break;
			case 189:
				{
				alt104 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 104, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(104); }
			switch (alt104)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:397:8: '+'
				{
				DebugLocation(397, 8);
				char_literal314=(IToken)Match(input,175,Follow._175_in_op_32520); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_175.Add(char_literal314);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 397:12: -> T_PLUS
				{
					DebugLocation(397, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_PLUS, "T_PLUS"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:398:4: '-'
				{
				DebugLocation(398, 4);
				char_literal315=(IToken)Match(input,177,Follow._177_in_op_32529); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_177.Add(char_literal315);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 398:8: -> T_MINUS
				{
					DebugLocation(398, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MINUS, "T_MINUS"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:399:4: '&'
				{
				DebugLocation(399, 4);
				char_literal316=(IToken)Match(input,171,Follow._171_in_op_32538); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_171.Add(char_literal316);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 399:8: -> T_BITWISE_AND
				{
					DebugLocation(399, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_AND, "T_BITWISE_AND"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:400:4: '|'
				{
				DebugLocation(400, 4);
				char_literal317=(IToken)Match(input,190,Follow._190_in_op_32547); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_190.Add(char_literal317);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 400:8: -> T_BITWISE_OR
				{
					DebugLocation(400, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_OR, "T_BITWISE_OR"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:401:4: '^'
				{
				DebugLocation(401, 4);
				char_literal318=(IToken)Match(input,189,Follow._189_in_op_32556); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_189.Add(char_literal318);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 401:8: -> T_BITWISE_XOR
				{
					DebugLocation(401, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_XOR, "T_BITWISE_XOR"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_3", 54);
			LeaveRule("op_3", 54);
			LeaveRule_op_3();
	    }
	 	DebugLocation(402, 1);
		} finally { DebugExitRule(GrammarFileName, "op_3"); }
		return retval;

	}
	// $ANTLR end "op_3"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_2() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_2() {}

	// $ANTLR start "expression_2"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:404:1: expression_2 : (a= expression_1 -> $a) ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )* ;
	[GrammarRule("expression_2")]
	private AstParserRuleReturnScope<object, IToken> expression_2()
	{
		EnterRule_expression_2();
		EnterRule("expression_2", 55);
		TraceIn("expression_2", 55);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS319 = default(IToken);
	    IToken WS321 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_2320 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS319_tree = default(object);
	    object WS321_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_op_2=new RewriteRuleSubtreeStream(adaptor,"rule op_2");
	    RewriteRuleSubtreeStream stream_expression_1=new RewriteRuleSubtreeStream(adaptor,"rule expression_1");
		try { DebugEnterRule(GrammarFileName, "expression_2");
		DebugLocation(404, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:405:2: ( (a= expression_1 -> $a) ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:405:4: (a= expression_1 -> $a) ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )*
			{
			DebugLocation(405, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:405:4: (a= expression_1 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:405:5: a= expression_1
			{
			DebugLocation(405, 6);
			PushFollow(Follow._expression_1_in_expression_22576);
			a=expression_1();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression_1.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 405:19: -> $a
			{
				DebugLocation(405, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(405, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:405:25: ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )*
			try { DebugEnterSubRule(107);
			while (true)
			{
				int alt107=2;
				try { DebugEnterDecision(107, decisionCanBacktrack[107]);
				int LA107_0 = input.LA(1);

				if ((LA107_0==WS))
				{
					int LA107_1 = input.LA(2);

					if ((LA107_1==170||LA107_1==174||LA107_1==179))
					{
						alt107 = 1;
					}


				}
				else if ((LA107_0==170||LA107_0==174||LA107_0==179))
				{
					alt107 = 1;
				}


				} finally { DebugExitDecision(107); }
				switch ( alt107 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:405:26: ( WS )? op_2 ( WS )? b= expression_1
					{
					DebugLocation(405, 26);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:405:26: ( WS )?
					int alt105=2;
					try { DebugEnterSubRule(105);
					try { DebugEnterDecision(105, decisionCanBacktrack[105]);
					int LA105_0 = input.LA(1);

					if ((LA105_0==WS))
					{
						alt105 = 1;
					}
					} finally { DebugExitDecision(105); }
					switch (alt105)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:405:26: WS
						{
						DebugLocation(405, 26);
						WS319=(IToken)Match(input,WS,Follow._WS_in_expression_22583); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS319);


						}
						break;

					}
					} finally { DebugExitSubRule(105); }

					DebugLocation(405, 30);
					PushFollow(Follow._op_2_in_expression_22586);
					op_2320=op_2();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_op_2.Add(op_2320.Tree);
					DebugLocation(405, 35);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:405:35: ( WS )?
					int alt106=2;
					try { DebugEnterSubRule(106);
					try { DebugEnterDecision(106, decisionCanBacktrack[106]);
					int LA106_0 = input.LA(1);

					if ((LA106_0==WS))
					{
						alt106 = 1;
					}
					} finally { DebugExitDecision(106); }
					switch (alt106)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:405:35: WS
						{
						DebugLocation(405, 35);
						WS321=(IToken)Match(input,WS,Follow._WS_in_expression_22588); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS321);


						}
						break;

					}
					} finally { DebugExitSubRule(106); }

					DebugLocation(405, 40);
					PushFollow(Follow._expression_1_in_expression_22593);
					b=expression_1();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expression_1.Add(b.Tree);


					{
					// AST REWRITE
					// elements: expression_2, op_2, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 405:54: -> ^( T_OP_BINARY op_2 $expression_2 $b)
					{
						DebugLocation(405, 57);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:405:57: ^( T_OP_BINARY op_2 $expression_2 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(405, 59);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(405, 71);
						adaptor.AddChild(root_1, stream_op_2.NextTree());
						DebugLocation(405, 77);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(405, 91);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop107;
				}
			}

			loop107:
				;

			} finally { DebugExitSubRule(107); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_2", 55);
			LeaveRule("expression_2", 55);
			LeaveRule_expression_2();
	    }
	 	DebugLocation(406, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_2"); }
		return retval;

	}
	// $ANTLR end "expression_2"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_2() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_2() {}

	// $ANTLR start "op_2"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:408:1: op_2 : ( '*' -> T_PRODUCT | '/' -> T_DIVIDE | '%' -> T_MODULO );
	[GrammarRule("op_2")]
	private AstParserRuleReturnScope<object, IToken> op_2()
	{
		EnterRule_op_2();
		EnterRule("op_2", 56);
		TraceIn("op_2", 56);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal322 = default(IToken);
	    IToken char_literal323 = default(IToken);
	    IToken char_literal324 = default(IToken);

	    object char_literal322_tree = default(object);
	    object char_literal323_tree = default(object);
	    object char_literal324_tree = default(object);
	    RewriteRuleITokenStream stream_170=new RewriteRuleITokenStream(adaptor,"token 170");
	    RewriteRuleITokenStream stream_174=new RewriteRuleITokenStream(adaptor,"token 174");
	    RewriteRuleITokenStream stream_179=new RewriteRuleITokenStream(adaptor,"token 179");

		try { DebugEnterRule(GrammarFileName, "op_2");
		DebugLocation(408, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:408:6: ( '*' -> T_PRODUCT | '/' -> T_DIVIDE | '%' -> T_MODULO )
			int alt108=3;
			try { DebugEnterDecision(108, decisionCanBacktrack[108]);
			switch (input.LA(1))
			{
			case 174:
				{
				alt108 = 1;
				}
				break;
			case 179:
				{
				alt108 = 2;
				}
				break;
			case 170:
				{
				alt108 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 108, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(108); }
			switch (alt108)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:408:8: '*'
				{
				DebugLocation(408, 8);
				char_literal322=(IToken)Match(input,174,Follow._174_in_op_22619); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_174.Add(char_literal322);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 408:12: -> T_PRODUCT
				{
					DebugLocation(408, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_PRODUCT, "T_PRODUCT"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:409:4: '/'
				{
				DebugLocation(409, 4);
				char_literal323=(IToken)Match(input,179,Follow._179_in_op_22628); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_179.Add(char_literal323);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 409:8: -> T_DIVIDE
				{
					DebugLocation(409, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_DIVIDE, "T_DIVIDE"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:410:4: '%'
				{
				DebugLocation(410, 4);
				char_literal324=(IToken)Match(input,170,Follow._170_in_op_22637); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_170.Add(char_literal324);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 410:8: -> T_MODULO
				{
					DebugLocation(410, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MODULO, "T_MODULO"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_2", 56);
			LeaveRule("op_2", 56);
			LeaveRule_op_2();
	    }
	 	DebugLocation(411, 1);
		} finally { DebugExitRule(GrammarFileName, "op_2"); }
		return retval;

	}
	// $ANTLR end "op_2"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_1() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_1() {}

	// $ANTLR start "expression_1"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:413:1: expression_1 : ( op_1 ( WS )? expression_1 -> ^( T_OP_UNARY op_1 expression_1 ) | expression_atom );
	[GrammarRule("expression_1")]
	private AstParserRuleReturnScope<object, IToken> expression_1()
	{
		EnterRule_expression_1();
		EnterRule("expression_1", 57);
		TraceIn("expression_1", 57);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS326 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> op_1325 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_1327 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_atom328 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS326_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression_1=new RewriteRuleSubtreeStream(adaptor,"rule expression_1");
	    RewriteRuleSubtreeStream stream_op_1=new RewriteRuleSubtreeStream(adaptor,"rule op_1");
		try { DebugEnterRule(GrammarFileName, "expression_1");
		DebugLocation(413, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:414:2: ( op_1 ( WS )? expression_1 -> ^( T_OP_UNARY op_1 expression_1 ) | expression_atom )
			int alt110=2;
			try { DebugEnterDecision(110, decisionCanBacktrack[110]);
			int LA110_0 = input.LA(1);

			if ((LA110_0==175||LA110_0==177||LA110_0==191))
			{
				alt110 = 1;
			}
			else if (((LA110_0>=CASE && LA110_0<=CAST)||(LA110_0>=CONVERT && LA110_0<=COUNT)||(LA110_0>=DATEADD && LA110_0<=DATEPART)||LA110_0==EXISTS||LA110_0==NUMBER||LA110_0==SIMPLE_FILE||(LA110_0>=STRING && LA110_0<=SYSTEMVAR)||LA110_0==TOKEN||LA110_0==VARIABLE||LA110_0==172))
			{
				alt110 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 110, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(110); }
			switch (alt110)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:414:4: op_1 ( WS )? expression_1
				{
				DebugLocation(414, 4);
				PushFollow(Follow._op_1_in_expression_12653);
				op_1325=op_1();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_op_1.Add(op_1325.Tree);
				DebugLocation(414, 9);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:414:9: ( WS )?
				int alt109=2;
				try { DebugEnterSubRule(109);
				try { DebugEnterDecision(109, decisionCanBacktrack[109]);
				int LA109_0 = input.LA(1);

				if ((LA109_0==WS))
				{
					alt109 = 1;
				}
				} finally { DebugExitDecision(109); }
				switch (alt109)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:414:9: WS
					{
					DebugLocation(414, 9);
					WS326=(IToken)Match(input,WS,Follow._WS_in_expression_12655); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS326);


					}
					break;

				}
				} finally { DebugExitSubRule(109); }

				DebugLocation(414, 13);
				PushFollow(Follow._expression_1_in_expression_12658);
				expression_1327=expression_1();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression_1.Add(expression_1327.Tree);


				{
				// AST REWRITE
				// elements: expression_1, op_1
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 414:26: -> ^( T_OP_UNARY op_1 expression_1 )
				{
					DebugLocation(414, 29);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:414:29: ^( T_OP_UNARY op_1 expression_1 )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(414, 31);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_UNARY, "T_OP_UNARY"), root_1);

					DebugLocation(414, 42);
					adaptor.AddChild(root_1, stream_op_1.NextTree());
					DebugLocation(414, 47);
					adaptor.AddChild(root_1, stream_expression_1.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:415:4: expression_atom
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(415, 4);
				PushFollow(Follow._expression_atom_in_expression_12673);
				expression_atom328=expression_atom();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression_atom328.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_1", 57);
			LeaveRule("expression_1", 57);
			LeaveRule_expression_1();
	    }
	 	DebugLocation(416, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_1"); }
		return retval;

	}
	// $ANTLR end "expression_1"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_1() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_1() {}

	// $ANTLR start "op_1"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:418:1: op_1 : ( '~' -> T_BITWISE_NOT | '+' -> T_PLUS | '-' -> T_MINUS );
	[GrammarRule("op_1")]
	private AstParserRuleReturnScope<object, IToken> op_1()
	{
		EnterRule_op_1();
		EnterRule("op_1", 58);
		TraceIn("op_1", 58);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal329 = default(IToken);
	    IToken char_literal330 = default(IToken);
	    IToken char_literal331 = default(IToken);

	    object char_literal329_tree = default(object);
	    object char_literal330_tree = default(object);
	    object char_literal331_tree = default(object);
	    RewriteRuleITokenStream stream_175=new RewriteRuleITokenStream(adaptor,"token 175");
	    RewriteRuleITokenStream stream_177=new RewriteRuleITokenStream(adaptor,"token 177");
	    RewriteRuleITokenStream stream_191=new RewriteRuleITokenStream(adaptor,"token 191");

		try { DebugEnterRule(GrammarFileName, "op_1");
		DebugLocation(418, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:418:6: ( '~' -> T_BITWISE_NOT | '+' -> T_PLUS | '-' -> T_MINUS )
			int alt111=3;
			try { DebugEnterDecision(111, decisionCanBacktrack[111]);
			switch (input.LA(1))
			{
			case 191:
				{
				alt111 = 1;
				}
				break;
			case 175:
				{
				alt111 = 2;
				}
				break;
			case 177:
				{
				alt111 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 111, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(111); }
			switch (alt111)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:418:8: '~'
				{
				DebugLocation(418, 8);
				char_literal329=(IToken)Match(input,191,Follow._191_in_op_12683); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_191.Add(char_literal329);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 418:12: -> T_BITWISE_NOT
				{
					DebugLocation(418, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_NOT, "T_BITWISE_NOT"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:419:5: '+'
				{
				DebugLocation(419, 5);
				char_literal330=(IToken)Match(input,175,Follow._175_in_op_12693); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_175.Add(char_literal330);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 419:9: -> T_PLUS
				{
					DebugLocation(419, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_PLUS, "T_PLUS"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:420:4: '-'
				{
				DebugLocation(420, 4);
				char_literal331=(IToken)Match(input,177,Follow._177_in_op_12702); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_177.Add(char_literal331);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 420:8: -> T_MINUS
				{
					DebugLocation(420, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MINUS, "T_MINUS"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_1", 58);
			LeaveRule("op_1", 58);
			LeaveRule_op_1();
	    }
	 	DebugLocation(421, 1);
		} finally { DebugExitRule(GrammarFileName, "op_1"); }
		return retval;

	}
	// $ANTLR end "op_1"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_atom() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_atom() {}

	// $ANTLR start "expression_atom"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:423:1: expression_atom : ( number -> ^( T_INTEGER number ) | string | SYSTEMVAR -> ^( T_SYSTEMVAR SYSTEMVAR ) | variable | ( subquery )=> subquery | '(' expression ')' -> expression | functioncall_or_column | specialfunctioncall | case | EXISTS ( WS )? '(' ( WS )? select_command ( WS )? ')' -> ^( T_EXISTS select_command ) );
	[GrammarRule("expression_atom")]
	private AstParserRuleReturnScope<object, IToken> expression_atom()
	{
		EnterRule_expression_atom();
		EnterRule("expression_atom", 59);
		TraceIn("expression_atom", 59);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken SYSTEMVAR334 = default(IToken);
	    IToken char_literal337 = default(IToken);
	    IToken char_literal339 = default(IToken);
	    IToken EXISTS343 = default(IToken);
	    IToken WS344 = default(IToken);
	    IToken char_literal345 = default(IToken);
	    IToken WS346 = default(IToken);
	    IToken WS348 = default(IToken);
	    IToken char_literal349 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> number332 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> string333 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> variable335 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> subquery336 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression338 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> functioncall_or_column340 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> specialfunctioncall341 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> case342 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> select_command347 = default(AstParserRuleReturnScope<object, IToken>);

	    object SYSTEMVAR334_tree = default(object);
	    object char_literal337_tree = default(object);
	    object char_literal339_tree = default(object);
	    object EXISTS343_tree = default(object);
	    object WS344_tree = default(object);
	    object char_literal345_tree = default(object);
	    object WS346_tree = default(object);
	    object WS348_tree = default(object);
	    object char_literal349_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_EXISTS=new RewriteRuleITokenStream(adaptor,"token EXISTS");
	    RewriteRuleITokenStream stream_172=new RewriteRuleITokenStream(adaptor,"token 172");
	    RewriteRuleITokenStream stream_173=new RewriteRuleITokenStream(adaptor,"token 173");
	    RewriteRuleITokenStream stream_SYSTEMVAR=new RewriteRuleITokenStream(adaptor,"token SYSTEMVAR");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_select_command=new RewriteRuleSubtreeStream(adaptor,"rule select_command");
	    RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
		try { DebugEnterRule(GrammarFileName, "expression_atom");
		DebugLocation(423, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:424:2: ( number -> ^( T_INTEGER number ) | string | SYSTEMVAR -> ^( T_SYSTEMVAR SYSTEMVAR ) | variable | ( subquery )=> subquery | '(' expression ')' -> expression | functioncall_or_column | specialfunctioncall | case | EXISTS ( WS )? '(' ( WS )? select_command ( WS )? ')' -> ^( T_EXISTS select_command ) )
			int alt115=10;
			try { DebugEnterDecision(115, decisionCanBacktrack[115]);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt115 = 1;
				}
				break;
			case STRING:
				{
				alt115 = 2;
				}
				break;
			case SYSTEMVAR:
				{
				alt115 = 3;
				}
				break;
			case VARIABLE:
				{
				alt115 = 4;
				}
				break;
			case 172:
				{
				int LA115_5 = input.LA(2);

				if ((EvaluatePredicate(synpred4_gql_fragment)))
				{
					alt115 = 5;
				}
				else if ((true))
				{
					alt115 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 115, 5, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case COUNT:
			case SIMPLE_FILE:
			case TOKEN:
				{
				alt115 = 7;
				}
				break;
			case CAST:
			case CONVERT:
			case DATEADD:
			case DATEDIFF:
			case DATEPART:
				{
				alt115 = 8;
				}
				break;
			case CASE:
				{
				alt115 = 9;
				}
				break;
			case EXISTS:
				{
				alt115 = 10;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 115, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(115); }
			switch (alt115)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:424:4: number
				{
				DebugLocation(424, 4);
				PushFollow(Follow._number_in_expression_atom2717);
				number332=number();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_number.Add(number332.Tree);


				{
				// AST REWRITE
				// elements: number
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 424:11: -> ^( T_INTEGER number )
				{
					DebugLocation(424, 14);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:424:14: ^( T_INTEGER number )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(424, 16);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_INTEGER, "T_INTEGER"), root_1);

					DebugLocation(424, 26);
					adaptor.AddChild(root_1, stream_number.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:425:4: string
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(425, 4);
				PushFollow(Follow._string_in_expression_atom2730);
				string333=@string();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, string333.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:426:4: SYSTEMVAR
				{
				DebugLocation(426, 4);
				SYSTEMVAR334=(IToken)Match(input,SYSTEMVAR,Follow._SYSTEMVAR_in_expression_atom2735); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SYSTEMVAR.Add(SYSTEMVAR334);



				{
				// AST REWRITE
				// elements: SYSTEMVAR
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 426:14: -> ^( T_SYSTEMVAR SYSTEMVAR )
				{
					DebugLocation(426, 17);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:426:17: ^( T_SYSTEMVAR SYSTEMVAR )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(426, 19);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SYSTEMVAR, "T_SYSTEMVAR"), root_1);

					DebugLocation(426, 31);
					adaptor.AddChild(root_1, stream_SYSTEMVAR.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:427:4: variable
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(427, 4);
				PushFollow(Follow._variable_in_expression_atom2748);
				variable335=variable();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variable335.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:428:4: ( subquery )=> subquery
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(428, 18);
				PushFollow(Follow._subquery_in_expression_atom2759);
				subquery336=subquery();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, subquery336.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:429:4: '(' expression ')'
				{
				DebugLocation(429, 4);
				char_literal337=(IToken)Match(input,172,Follow._172_in_expression_atom2764); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_172.Add(char_literal337);

				DebugLocation(429, 8);
				PushFollow(Follow._expression_in_expression_atom2766);
				expression338=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression338.Tree);
				DebugLocation(429, 19);
				char_literal339=(IToken)Match(input,173,Follow._173_in_expression_atom2768); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_173.Add(char_literal339);



				{
				// AST REWRITE
				// elements: expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 429:23: -> expression
				{
					DebugLocation(429, 26);
					adaptor.AddChild(root_0, stream_expression.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:430:4: functioncall_or_column
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(430, 4);
				PushFollow(Follow._functioncall_or_column_in_expression_atom2777);
				functioncall_or_column340=functioncall_or_column();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, functioncall_or_column340.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:431:4: specialfunctioncall
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(431, 4);
				PushFollow(Follow._specialfunctioncall_in_expression_atom2782);
				specialfunctioncall341=specialfunctioncall();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, specialfunctioncall341.Tree);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:432:4: case
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(432, 4);
				PushFollow(Follow._case_in_expression_atom2787);
				case342=@case();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, case342.Tree);

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:433:4: EXISTS ( WS )? '(' ( WS )? select_command ( WS )? ')'
				{
				DebugLocation(433, 4);
				EXISTS343=(IToken)Match(input,EXISTS,Follow._EXISTS_in_expression_atom2792); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_EXISTS.Add(EXISTS343);

				DebugLocation(433, 11);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:433:11: ( WS )?
				int alt112=2;
				try { DebugEnterSubRule(112);
				try { DebugEnterDecision(112, decisionCanBacktrack[112]);
				int LA112_0 = input.LA(1);

				if ((LA112_0==WS))
				{
					alt112 = 1;
				}
				} finally { DebugExitDecision(112); }
				switch (alt112)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:433:11: WS
					{
					DebugLocation(433, 11);
					WS344=(IToken)Match(input,WS,Follow._WS_in_expression_atom2794); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS344);


					}
					break;

				}
				} finally { DebugExitSubRule(112); }

				DebugLocation(433, 15);
				char_literal345=(IToken)Match(input,172,Follow._172_in_expression_atom2797); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_172.Add(char_literal345);

				DebugLocation(433, 19);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:433:19: ( WS )?
				int alt113=2;
				try { DebugEnterSubRule(113);
				try { DebugEnterDecision(113, decisionCanBacktrack[113]);
				int LA113_0 = input.LA(1);

				if ((LA113_0==WS))
				{
					alt113 = 1;
				}
				} finally { DebugExitDecision(113); }
				switch (alt113)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:433:19: WS
					{
					DebugLocation(433, 19);
					WS346=(IToken)Match(input,WS,Follow._WS_in_expression_atom2799); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS346);


					}
					break;

				}
				} finally { DebugExitSubRule(113); }

				DebugLocation(433, 23);
				PushFollow(Follow._select_command_in_expression_atom2802);
				select_command347=select_command();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_select_command.Add(select_command347.Tree);
				DebugLocation(433, 38);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:433:38: ( WS )?
				int alt114=2;
				try { DebugEnterSubRule(114);
				try { DebugEnterDecision(114, decisionCanBacktrack[114]);
				int LA114_0 = input.LA(1);

				if ((LA114_0==WS))
				{
					alt114 = 1;
				}
				} finally { DebugExitDecision(114); }
				switch (alt114)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:433:38: WS
					{
					DebugLocation(433, 38);
					WS348=(IToken)Match(input,WS,Follow._WS_in_expression_atom2804); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS348);


					}
					break;

				}
				} finally { DebugExitSubRule(114); }

				DebugLocation(433, 42);
				char_literal349=(IToken)Match(input,173,Follow._173_in_expression_atom2807); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_173.Add(char_literal349);



				{
				// AST REWRITE
				// elements: select_command
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 433:46: -> ^( T_EXISTS select_command )
				{
					DebugLocation(433, 49);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:433:49: ^( T_EXISTS select_command )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(433, 51);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_EXISTS, "T_EXISTS"), root_1);

					DebugLocation(433, 60);
					adaptor.AddChild(root_1, stream_select_command.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_atom", 59);
			LeaveRule("expression_atom", 59);
			LeaveRule_expression_atom();
	    }
	 	DebugLocation(434, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_atom"); }
		return retval;

	}
	// $ANTLR end "expression_atom"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_functioncall_or_column() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_functioncall_or_column() {}

	// $ANTLR start "functioncall_or_column"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:437:1: functioncall_or_column : ( TOKEN ( WS )? '(' ( WS )? ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )? ')' -> ^( T_FUNCTIONCALL TOKEN ( expression )* ) | COUNT ( WS )? '(' ( WS )? expression ( WS )? ')' -> ^( T_FUNCTIONCALL T_COUNT expression ) | COUNT ( WS )? '(' ( WS )? DISTINCT WS expression ( WS )? ')' -> ^( T_FUNCTIONCALL T_DISTINCTCOUNT expression ) | COUNT ( WS )? '(' ( WS )? all_columns ( WS )? ')' -> ^( T_FUNCTIONCALL T_COUNT all_columns ) | COUNT ( WS )? '(' ( WS )? DISTINCT WS all_columns ( WS )? ')' -> ^( T_FUNCTIONCALL T_DISTINCTCOUNT all_columns ) | ( table_alias ( WS )? '.' ( WS )? )? column_name -> ^( T_COLUMN column_name ( table_alias )? ) );
	[GrammarRule("functioncall_or_column")]
	private AstParserRuleReturnScope<object, IToken> functioncall_or_column()
	{
		EnterRule_functioncall_or_column();
		EnterRule("functioncall_or_column", 60);
		TraceIn("functioncall_or_column", 60);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN350 = default(IToken);
	    IToken WS351 = default(IToken);
	    IToken char_literal352 = default(IToken);
	    IToken WS353 = default(IToken);
	    IToken WS355 = default(IToken);
	    IToken char_literal356 = default(IToken);
	    IToken WS357 = default(IToken);
	    IToken WS359 = default(IToken);
	    IToken char_literal360 = default(IToken);
	    IToken COUNT361 = default(IToken);
	    IToken WS362 = default(IToken);
	    IToken char_literal363 = default(IToken);
	    IToken WS364 = default(IToken);
	    IToken WS366 = default(IToken);
	    IToken char_literal367 = default(IToken);
	    IToken COUNT368 = default(IToken);
	    IToken WS369 = default(IToken);
	    IToken char_literal370 = default(IToken);
	    IToken WS371 = default(IToken);
	    IToken DISTINCT372 = default(IToken);
	    IToken WS373 = default(IToken);
	    IToken WS375 = default(IToken);
	    IToken char_literal376 = default(IToken);
	    IToken COUNT377 = default(IToken);
	    IToken WS378 = default(IToken);
	    IToken char_literal379 = default(IToken);
	    IToken WS380 = default(IToken);
	    IToken WS382 = default(IToken);
	    IToken char_literal383 = default(IToken);
	    IToken COUNT384 = default(IToken);
	    IToken WS385 = default(IToken);
	    IToken char_literal386 = default(IToken);
	    IToken WS387 = default(IToken);
	    IToken DISTINCT388 = default(IToken);
	    IToken WS389 = default(IToken);
	    IToken WS391 = default(IToken);
	    IToken char_literal392 = default(IToken);
	    IToken WS394 = default(IToken);
	    IToken char_literal395 = default(IToken);
	    IToken WS396 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression354 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression358 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression365 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression374 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> all_columns381 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> all_columns390 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> table_alias393 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> column_name397 = default(AstParserRuleReturnScope<object, IToken>);

	    object TOKEN350_tree = default(object);
	    object WS351_tree = default(object);
	    object char_literal352_tree = default(object);
	    object WS353_tree = default(object);
	    object WS355_tree = default(object);
	    object char_literal356_tree = default(object);
	    object WS357_tree = default(object);
	    object WS359_tree = default(object);
	    object char_literal360_tree = default(object);
	    object COUNT361_tree = default(object);
	    object WS362_tree = default(object);
	    object char_literal363_tree = default(object);
	    object WS364_tree = default(object);
	    object WS366_tree = default(object);
	    object char_literal367_tree = default(object);
	    object COUNT368_tree = default(object);
	    object WS369_tree = default(object);
	    object char_literal370_tree = default(object);
	    object WS371_tree = default(object);
	    object DISTINCT372_tree = default(object);
	    object WS373_tree = default(object);
	    object WS375_tree = default(object);
	    object char_literal376_tree = default(object);
	    object COUNT377_tree = default(object);
	    object WS378_tree = default(object);
	    object char_literal379_tree = default(object);
	    object WS380_tree = default(object);
	    object WS382_tree = default(object);
	    object char_literal383_tree = default(object);
	    object COUNT384_tree = default(object);
	    object WS385_tree = default(object);
	    object char_literal386_tree = default(object);
	    object WS387_tree = default(object);
	    object DISTINCT388_tree = default(object);
	    object WS389_tree = default(object);
	    object WS391_tree = default(object);
	    object char_literal392_tree = default(object);
	    object WS394_tree = default(object);
	    object char_literal395_tree = default(object);
	    object WS396_tree = default(object);
	    RewriteRuleITokenStream stream_COUNT=new RewriteRuleITokenStream(adaptor,"token COUNT");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_172=new RewriteRuleITokenStream(adaptor,"token 172");
	    RewriteRuleITokenStream stream_173=new RewriteRuleITokenStream(adaptor,"token 173");
	    RewriteRuleITokenStream stream_178=new RewriteRuleITokenStream(adaptor,"token 178");
	    RewriteRuleITokenStream stream_DISTINCT=new RewriteRuleITokenStream(adaptor,"token DISTINCT");
	    RewriteRuleITokenStream stream_176=new RewriteRuleITokenStream(adaptor,"token 176");
	    RewriteRuleITokenStream stream_TOKEN=new RewriteRuleITokenStream(adaptor,"token TOKEN");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_table_alias=new RewriteRuleSubtreeStream(adaptor,"rule table_alias");
	    RewriteRuleSubtreeStream stream_all_columns=new RewriteRuleSubtreeStream(adaptor,"rule all_columns");
	    RewriteRuleSubtreeStream stream_column_name=new RewriteRuleSubtreeStream(adaptor,"rule column_name");
		try { DebugEnterRule(GrammarFileName, "functioncall_or_column");
		DebugLocation(437, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:438:2: ( TOKEN ( WS )? '(' ( WS )? ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )? ')' -> ^( T_FUNCTIONCALL TOKEN ( expression )* ) | COUNT ( WS )? '(' ( WS )? expression ( WS )? ')' -> ^( T_FUNCTIONCALL T_COUNT expression ) | COUNT ( WS )? '(' ( WS )? DISTINCT WS expression ( WS )? ')' -> ^( T_FUNCTIONCALL T_DISTINCTCOUNT expression ) | COUNT ( WS )? '(' ( WS )? all_columns ( WS )? ')' -> ^( T_FUNCTIONCALL T_COUNT all_columns ) | COUNT ( WS )? '(' ( WS )? DISTINCT WS all_columns ( WS )? ')' -> ^( T_FUNCTIONCALL T_DISTINCTCOUNT all_columns ) | ( table_alias ( WS )? '.' ( WS )? )? column_name -> ^( T_COLUMN column_name ( table_alias )? ) )
			int alt138=6;
			try { DebugEnterDecision(138, decisionCanBacktrack[138]);
			switch (input.LA(1))
			{
			case TOKEN:
				{
				alt138 = 1;
				}
				break;
			case COUNT:
				{
				int LA138_2 = input.LA(2);

				if ((LA138_2==WS))
				{
					int LA138_4 = input.LA(3);

					if ((LA138_4==172))
					{
						switch (input.LA(4))
						{
						case WS:
							{
							switch (input.LA(5))
							{
							case CASE:
							case CAST:
							case CONVERT:
							case COUNT:
							case DATEADD:
							case DATEDIFF:
							case DATEPART:
							case EXISTS:
							case NOT:
							case NUMBER:
							case STRING:
							case SYSTEMVAR:
							case TOKEN:
							case VARIABLE:
							case 172:
							case 175:
							case 177:
							case 191:
								{
								alt138 = 2;
								}
								break;
							case SIMPLE_FILE:
								{
								switch (input.LA(6))
								{
								case WS:
									{
									int LA138_11 = input.LA(7);

									if ((LA138_11==178))
									{
										switch (input.LA(8))
										{
										case WS:
											{
											int LA138_14 = input.LA(9);

											if ((LA138_14==SIMPLE_FILE))
											{
												alt138 = 2;
											}
											else if ((LA138_14==174))
											{
												alt138 = 4;
											}
											else
											{
												if (state.backtracking>0) {state.failed=true; return retval;}
												NoViableAltException nvae = new NoViableAltException("", 138, 14, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
											}
											break;
										case SIMPLE_FILE:
											{
											alt138 = 2;
											}
											break;
										case 174:
											{
											alt138 = 4;
											}
											break;
										default:
											{
												if (state.backtracking>0) {state.failed=true; return retval;}
												NoViableAltException nvae = new NoViableAltException("", 138, 12, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
										}

									}
									else if ((LA138_11==AND||LA138_11==BETWEEN||LA138_11==IN||LA138_11==LIKE||LA138_11==MATCH||LA138_11==NOT||LA138_11==OR||(LA138_11>=167 && LA138_11<=171)||(LA138_11>=173 && LA138_11<=175)||LA138_11==177||LA138_11==179||(LA138_11>=181 && LA138_11<=186)||(LA138_11>=189 && LA138_11<=190)))
									{
										alt138 = 2;
									}
									else
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 138, 11, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
									}
									break;
								case 178:
									{
									switch (input.LA(7))
									{
									case WS:
										{
										int LA138_14 = input.LA(8);

										if ((LA138_14==SIMPLE_FILE))
										{
											alt138 = 2;
										}
										else if ((LA138_14==174))
										{
											alt138 = 4;
										}
										else
										{
											if (state.backtracking>0) {state.failed=true; return retval;}
											NoViableAltException nvae = new NoViableAltException("", 138, 14, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
										}
										break;
									case SIMPLE_FILE:
										{
										alt138 = 2;
										}
										break;
									case 174:
										{
										alt138 = 4;
										}
										break;
									default:
										{
											if (state.backtracking>0) {state.failed=true; return retval;}
											NoViableAltException nvae = new NoViableAltException("", 138, 12, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}

									}
									break;
								case LIKE:
								case MATCH:
								case NOT:
								case 167:
								case 168:
								case 169:
								case 170:
								case 171:
								case 173:
								case 174:
								case 175:
								case 177:
								case 179:
								case 181:
								case 182:
								case 183:
								case 184:
								case 185:
								case 186:
								case 189:
								case 190:
									{
									alt138 = 2;
									}
									break;
								default:
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 138, 8, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

								}
								break;
							case DISTINCT:
								{
								int LA138_9 = input.LA(6);

								if ((LA138_9==WS))
								{
									switch (input.LA(7))
									{
									case CASE:
									case CAST:
									case CONVERT:
									case COUNT:
									case DATEADD:
									case DATEDIFF:
									case DATEPART:
									case EXISTS:
									case NOT:
									case NUMBER:
									case STRING:
									case SYSTEMVAR:
									case TOKEN:
									case VARIABLE:
									case 172:
									case 175:
									case 177:
									case 191:
										{
										alt138 = 3;
										}
										break;
									case SIMPLE_FILE:
										{
										switch (input.LA(8))
										{
										case WS:
											{
											int LA138_18 = input.LA(9);

											if ((LA138_18==178))
											{
												switch (input.LA(10))
												{
												case WS:
													{
													int LA138_20 = input.LA(11);

													if ((LA138_20==SIMPLE_FILE))
													{
														alt138 = 3;
													}
													else if ((LA138_20==174))
													{
														alt138 = 5;
													}
													else
													{
														if (state.backtracking>0) {state.failed=true; return retval;}
														NoViableAltException nvae = new NoViableAltException("", 138, 20, input);
														DebugRecognitionException(nvae);
														throw nvae;
													}
													}
													break;
												case SIMPLE_FILE:
													{
													alt138 = 3;
													}
													break;
												case 174:
													{
													alt138 = 5;
													}
													break;
												default:
													{
														if (state.backtracking>0) {state.failed=true; return retval;}
														NoViableAltException nvae = new NoViableAltException("", 138, 19, input);
														DebugRecognitionException(nvae);
														throw nvae;
													}
												}

											}
											else if ((LA138_18==AND||LA138_18==BETWEEN||LA138_18==IN||LA138_18==LIKE||LA138_18==MATCH||LA138_18==NOT||LA138_18==OR||(LA138_18>=167 && LA138_18<=171)||(LA138_18>=173 && LA138_18<=175)||LA138_18==177||LA138_18==179||(LA138_18>=181 && LA138_18<=186)||(LA138_18>=189 && LA138_18<=190)))
											{
												alt138 = 3;
											}
											else
											{
												if (state.backtracking>0) {state.failed=true; return retval;}
												NoViableAltException nvae = new NoViableAltException("", 138, 18, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
											}
											break;
										case 178:
											{
											switch (input.LA(9))
											{
											case WS:
												{
												int LA138_20 = input.LA(10);

												if ((LA138_20==SIMPLE_FILE))
												{
													alt138 = 3;
												}
												else if ((LA138_20==174))
												{
													alt138 = 5;
												}
												else
												{
													if (state.backtracking>0) {state.failed=true; return retval;}
													NoViableAltException nvae = new NoViableAltException("", 138, 20, input);
													DebugRecognitionException(nvae);
													throw nvae;
												}
												}
												break;
											case SIMPLE_FILE:
												{
												alt138 = 3;
												}
												break;
											case 174:
												{
												alt138 = 5;
												}
												break;
											default:
												{
													if (state.backtracking>0) {state.failed=true; return retval;}
													NoViableAltException nvae = new NoViableAltException("", 138, 19, input);
													DebugRecognitionException(nvae);
													throw nvae;
												}
											}

											}
											break;
										case LIKE:
										case MATCH:
										case NOT:
										case 167:
										case 168:
										case 169:
										case 170:
										case 171:
										case 173:
										case 174:
										case 175:
										case 177:
										case 179:
										case 181:
										case 182:
										case 183:
										case 184:
										case 185:
										case 186:
										case 189:
										case 190:
											{
											alt138 = 3;
											}
											break;
										default:
											{
												if (state.backtracking>0) {state.failed=true; return retval;}
												NoViableAltException nvae = new NoViableAltException("", 138, 16, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
										}

										}
										break;
									case 174:
										{
										alt138 = 5;
										}
										break;
									default:
										{
											if (state.backtracking>0) {state.failed=true; return retval;}
											NoViableAltException nvae = new NoViableAltException("", 138, 13, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}

								}
								else
								{
									if (state.backtracking>0) {state.failed=true; return retval;}
									NoViableAltException nvae = new NoViableAltException("", 138, 9, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
								}
								break;
							case 174:
								{
								alt138 = 4;
								}
								break;
							default:
								{
									if (state.backtracking>0) {state.failed=true; return retval;}
									NoViableAltException nvae = new NoViableAltException("", 138, 6, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}

							}
							break;
						case CASE:
						case CAST:
						case CONVERT:
						case COUNT:
						case DATEADD:
						case DATEDIFF:
						case DATEPART:
						case EXISTS:
						case NOT:
						case NUMBER:
						case STRING:
						case SYSTEMVAR:
						case TOKEN:
						case VARIABLE:
						case 172:
						case 175:
						case 177:
						case 191:
							{
							alt138 = 2;
							}
							break;
						case SIMPLE_FILE:
							{
							switch (input.LA(5))
							{
							case WS:
								{
								int LA138_11 = input.LA(6);

								if ((LA138_11==178))
								{
									switch (input.LA(7))
									{
									case WS:
										{
										int LA138_14 = input.LA(8);

										if ((LA138_14==SIMPLE_FILE))
										{
											alt138 = 2;
										}
										else if ((LA138_14==174))
										{
											alt138 = 4;
										}
										else
										{
											if (state.backtracking>0) {state.failed=true; return retval;}
											NoViableAltException nvae = new NoViableAltException("", 138, 14, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
										}
										break;
									case SIMPLE_FILE:
										{
										alt138 = 2;
										}
										break;
									case 174:
										{
										alt138 = 4;
										}
										break;
									default:
										{
											if (state.backtracking>0) {state.failed=true; return retval;}
											NoViableAltException nvae = new NoViableAltException("", 138, 12, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}

								}
								else if ((LA138_11==AND||LA138_11==BETWEEN||LA138_11==IN||LA138_11==LIKE||LA138_11==MATCH||LA138_11==NOT||LA138_11==OR||(LA138_11>=167 && LA138_11<=171)||(LA138_11>=173 && LA138_11<=175)||LA138_11==177||LA138_11==179||(LA138_11>=181 && LA138_11<=186)||(LA138_11>=189 && LA138_11<=190)))
								{
									alt138 = 2;
								}
								else
								{
									if (state.backtracking>0) {state.failed=true; return retval;}
									NoViableAltException nvae = new NoViableAltException("", 138, 11, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
								}
								break;
							case 178:
								{
								switch (input.LA(6))
								{
								case WS:
									{
									int LA138_14 = input.LA(7);

									if ((LA138_14==SIMPLE_FILE))
									{
										alt138 = 2;
									}
									else if ((LA138_14==174))
									{
										alt138 = 4;
									}
									else
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 138, 14, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
									}
									break;
								case SIMPLE_FILE:
									{
									alt138 = 2;
									}
									break;
								case 174:
									{
									alt138 = 4;
									}
									break;
								default:
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 138, 12, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

								}
								break;
							case LIKE:
							case MATCH:
							case NOT:
							case 167:
							case 168:
							case 169:
							case 170:
							case 171:
							case 173:
							case 174:
							case 175:
							case 177:
							case 179:
							case 181:
							case 182:
							case 183:
							case 184:
							case 185:
							case 186:
							case 189:
							case 190:
								{
								alt138 = 2;
								}
								break;
							default:
								{
									if (state.backtracking>0) {state.failed=true; return retval;}
									NoViableAltException nvae = new NoViableAltException("", 138, 8, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}

							}
							break;
						case DISTINCT:
							{
							int LA138_9 = input.LA(5);

							if ((LA138_9==WS))
							{
								switch (input.LA(6))
								{
								case CASE:
								case CAST:
								case CONVERT:
								case COUNT:
								case DATEADD:
								case DATEDIFF:
								case DATEPART:
								case EXISTS:
								case NOT:
								case NUMBER:
								case STRING:
								case SYSTEMVAR:
								case TOKEN:
								case VARIABLE:
								case 172:
								case 175:
								case 177:
								case 191:
									{
									alt138 = 3;
									}
									break;
								case SIMPLE_FILE:
									{
									switch (input.LA(7))
									{
									case WS:
										{
										int LA138_18 = input.LA(8);

										if ((LA138_18==178))
										{
											switch (input.LA(9))
											{
											case WS:
												{
												int LA138_20 = input.LA(10);

												if ((LA138_20==SIMPLE_FILE))
												{
													alt138 = 3;
												}
												else if ((LA138_20==174))
												{
													alt138 = 5;
												}
												else
												{
													if (state.backtracking>0) {state.failed=true; return retval;}
													NoViableAltException nvae = new NoViableAltException("", 138, 20, input);
													DebugRecognitionException(nvae);
													throw nvae;
												}
												}
												break;
											case SIMPLE_FILE:
												{
												alt138 = 3;
												}
												break;
											case 174:
												{
												alt138 = 5;
												}
												break;
											default:
												{
													if (state.backtracking>0) {state.failed=true; return retval;}
													NoViableAltException nvae = new NoViableAltException("", 138, 19, input);
													DebugRecognitionException(nvae);
													throw nvae;
												}
											}

										}
										else if ((LA138_18==AND||LA138_18==BETWEEN||LA138_18==IN||LA138_18==LIKE||LA138_18==MATCH||LA138_18==NOT||LA138_18==OR||(LA138_18>=167 && LA138_18<=171)||(LA138_18>=173 && LA138_18<=175)||LA138_18==177||LA138_18==179||(LA138_18>=181 && LA138_18<=186)||(LA138_18>=189 && LA138_18<=190)))
										{
											alt138 = 3;
										}
										else
										{
											if (state.backtracking>0) {state.failed=true; return retval;}
											NoViableAltException nvae = new NoViableAltException("", 138, 18, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
										}
										break;
									case 178:
										{
										switch (input.LA(8))
										{
										case WS:
											{
											int LA138_20 = input.LA(9);

											if ((LA138_20==SIMPLE_FILE))
											{
												alt138 = 3;
											}
											else if ((LA138_20==174))
											{
												alt138 = 5;
											}
											else
											{
												if (state.backtracking>0) {state.failed=true; return retval;}
												NoViableAltException nvae = new NoViableAltException("", 138, 20, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
											}
											break;
										case SIMPLE_FILE:
											{
											alt138 = 3;
											}
											break;
										case 174:
											{
											alt138 = 5;
											}
											break;
										default:
											{
												if (state.backtracking>0) {state.failed=true; return retval;}
												NoViableAltException nvae = new NoViableAltException("", 138, 19, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
										}

										}
										break;
									case LIKE:
									case MATCH:
									case NOT:
									case 167:
									case 168:
									case 169:
									case 170:
									case 171:
									case 173:
									case 174:
									case 175:
									case 177:
									case 179:
									case 181:
									case 182:
									case 183:
									case 184:
									case 185:
									case 186:
									case 189:
									case 190:
										{
										alt138 = 3;
										}
										break;
									default:
										{
											if (state.backtracking>0) {state.failed=true; return retval;}
											NoViableAltException nvae = new NoViableAltException("", 138, 16, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}

									}
									break;
								case 174:
									{
									alt138 = 5;
									}
									break;
								default:
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 138, 13, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 138, 9, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case 174:
							{
							alt138 = 4;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 138, 5, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 138, 4, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA138_2==172))
				{
					switch (input.LA(3))
					{
					case WS:
						{
						switch (input.LA(4))
						{
						case CASE:
						case CAST:
						case CONVERT:
						case COUNT:
						case DATEADD:
						case DATEDIFF:
						case DATEPART:
						case EXISTS:
						case NOT:
						case NUMBER:
						case STRING:
						case SYSTEMVAR:
						case TOKEN:
						case VARIABLE:
						case 172:
						case 175:
						case 177:
						case 191:
							{
							alt138 = 2;
							}
							break;
						case SIMPLE_FILE:
							{
							switch (input.LA(5))
							{
							case WS:
								{
								int LA138_11 = input.LA(6);

								if ((LA138_11==178))
								{
									switch (input.LA(7))
									{
									case WS:
										{
										int LA138_14 = input.LA(8);

										if ((LA138_14==SIMPLE_FILE))
										{
											alt138 = 2;
										}
										else if ((LA138_14==174))
										{
											alt138 = 4;
										}
										else
										{
											if (state.backtracking>0) {state.failed=true; return retval;}
											NoViableAltException nvae = new NoViableAltException("", 138, 14, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
										}
										break;
									case SIMPLE_FILE:
										{
										alt138 = 2;
										}
										break;
									case 174:
										{
										alt138 = 4;
										}
										break;
									default:
										{
											if (state.backtracking>0) {state.failed=true; return retval;}
											NoViableAltException nvae = new NoViableAltException("", 138, 12, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}

								}
								else if ((LA138_11==AND||LA138_11==BETWEEN||LA138_11==IN||LA138_11==LIKE||LA138_11==MATCH||LA138_11==NOT||LA138_11==OR||(LA138_11>=167 && LA138_11<=171)||(LA138_11>=173 && LA138_11<=175)||LA138_11==177||LA138_11==179||(LA138_11>=181 && LA138_11<=186)||(LA138_11>=189 && LA138_11<=190)))
								{
									alt138 = 2;
								}
								else
								{
									if (state.backtracking>0) {state.failed=true; return retval;}
									NoViableAltException nvae = new NoViableAltException("", 138, 11, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
								}
								break;
							case 178:
								{
								switch (input.LA(6))
								{
								case WS:
									{
									int LA138_14 = input.LA(7);

									if ((LA138_14==SIMPLE_FILE))
									{
										alt138 = 2;
									}
									else if ((LA138_14==174))
									{
										alt138 = 4;
									}
									else
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 138, 14, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
									}
									break;
								case SIMPLE_FILE:
									{
									alt138 = 2;
									}
									break;
								case 174:
									{
									alt138 = 4;
									}
									break;
								default:
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 138, 12, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

								}
								break;
							case LIKE:
							case MATCH:
							case NOT:
							case 167:
							case 168:
							case 169:
							case 170:
							case 171:
							case 173:
							case 174:
							case 175:
							case 177:
							case 179:
							case 181:
							case 182:
							case 183:
							case 184:
							case 185:
							case 186:
							case 189:
							case 190:
								{
								alt138 = 2;
								}
								break;
							default:
								{
									if (state.backtracking>0) {state.failed=true; return retval;}
									NoViableAltException nvae = new NoViableAltException("", 138, 8, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}

							}
							break;
						case DISTINCT:
							{
							int LA138_9 = input.LA(5);

							if ((LA138_9==WS))
							{
								switch (input.LA(6))
								{
								case CASE:
								case CAST:
								case CONVERT:
								case COUNT:
								case DATEADD:
								case DATEDIFF:
								case DATEPART:
								case EXISTS:
								case NOT:
								case NUMBER:
								case STRING:
								case SYSTEMVAR:
								case TOKEN:
								case VARIABLE:
								case 172:
								case 175:
								case 177:
								case 191:
									{
									alt138 = 3;
									}
									break;
								case SIMPLE_FILE:
									{
									switch (input.LA(7))
									{
									case WS:
										{
										int LA138_18 = input.LA(8);

										if ((LA138_18==178))
										{
											switch (input.LA(9))
											{
											case WS:
												{
												int LA138_20 = input.LA(10);

												if ((LA138_20==SIMPLE_FILE))
												{
													alt138 = 3;
												}
												else if ((LA138_20==174))
												{
													alt138 = 5;
												}
												else
												{
													if (state.backtracking>0) {state.failed=true; return retval;}
													NoViableAltException nvae = new NoViableAltException("", 138, 20, input);
													DebugRecognitionException(nvae);
													throw nvae;
												}
												}
												break;
											case SIMPLE_FILE:
												{
												alt138 = 3;
												}
												break;
											case 174:
												{
												alt138 = 5;
												}
												break;
											default:
												{
													if (state.backtracking>0) {state.failed=true; return retval;}
													NoViableAltException nvae = new NoViableAltException("", 138, 19, input);
													DebugRecognitionException(nvae);
													throw nvae;
												}
											}

										}
										else if ((LA138_18==AND||LA138_18==BETWEEN||LA138_18==IN||LA138_18==LIKE||LA138_18==MATCH||LA138_18==NOT||LA138_18==OR||(LA138_18>=167 && LA138_18<=171)||(LA138_18>=173 && LA138_18<=175)||LA138_18==177||LA138_18==179||(LA138_18>=181 && LA138_18<=186)||(LA138_18>=189 && LA138_18<=190)))
										{
											alt138 = 3;
										}
										else
										{
											if (state.backtracking>0) {state.failed=true; return retval;}
											NoViableAltException nvae = new NoViableAltException("", 138, 18, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
										}
										break;
									case 178:
										{
										switch (input.LA(8))
										{
										case WS:
											{
											int LA138_20 = input.LA(9);

											if ((LA138_20==SIMPLE_FILE))
											{
												alt138 = 3;
											}
											else if ((LA138_20==174))
											{
												alt138 = 5;
											}
											else
											{
												if (state.backtracking>0) {state.failed=true; return retval;}
												NoViableAltException nvae = new NoViableAltException("", 138, 20, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
											}
											break;
										case SIMPLE_FILE:
											{
											alt138 = 3;
											}
											break;
										case 174:
											{
											alt138 = 5;
											}
											break;
										default:
											{
												if (state.backtracking>0) {state.failed=true; return retval;}
												NoViableAltException nvae = new NoViableAltException("", 138, 19, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
										}

										}
										break;
									case LIKE:
									case MATCH:
									case NOT:
									case 167:
									case 168:
									case 169:
									case 170:
									case 171:
									case 173:
									case 174:
									case 175:
									case 177:
									case 179:
									case 181:
									case 182:
									case 183:
									case 184:
									case 185:
									case 186:
									case 189:
									case 190:
										{
										alt138 = 3;
										}
										break;
									default:
										{
											if (state.backtracking>0) {state.failed=true; return retval;}
											NoViableAltException nvae = new NoViableAltException("", 138, 16, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}

									}
									break;
								case 174:
									{
									alt138 = 5;
									}
									break;
								default:
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 138, 13, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 138, 9, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case 174:
							{
							alt138 = 4;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 138, 6, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case CASE:
					case CAST:
					case CONVERT:
					case COUNT:
					case DATEADD:
					case DATEDIFF:
					case DATEPART:
					case EXISTS:
					case NOT:
					case NUMBER:
					case STRING:
					case SYSTEMVAR:
					case TOKEN:
					case VARIABLE:
					case 172:
					case 175:
					case 177:
					case 191:
						{
						alt138 = 2;
						}
						break;
					case SIMPLE_FILE:
						{
						switch (input.LA(4))
						{
						case WS:
							{
							int LA138_11 = input.LA(5);

							if ((LA138_11==178))
							{
								switch (input.LA(6))
								{
								case WS:
									{
									int LA138_14 = input.LA(7);

									if ((LA138_14==SIMPLE_FILE))
									{
										alt138 = 2;
									}
									else if ((LA138_14==174))
									{
										alt138 = 4;
									}
									else
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 138, 14, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
									}
									break;
								case SIMPLE_FILE:
									{
									alt138 = 2;
									}
									break;
								case 174:
									{
									alt138 = 4;
									}
									break;
								default:
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 138, 12, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

							}
							else if ((LA138_11==AND||LA138_11==BETWEEN||LA138_11==IN||LA138_11==LIKE||LA138_11==MATCH||LA138_11==NOT||LA138_11==OR||(LA138_11>=167 && LA138_11<=171)||(LA138_11>=173 && LA138_11<=175)||LA138_11==177||LA138_11==179||(LA138_11>=181 && LA138_11<=186)||(LA138_11>=189 && LA138_11<=190)))
							{
								alt138 = 2;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 138, 11, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case 178:
							{
							switch (input.LA(5))
							{
							case WS:
								{
								int LA138_14 = input.LA(6);

								if ((LA138_14==SIMPLE_FILE))
								{
									alt138 = 2;
								}
								else if ((LA138_14==174))
								{
									alt138 = 4;
								}
								else
								{
									if (state.backtracking>0) {state.failed=true; return retval;}
									NoViableAltException nvae = new NoViableAltException("", 138, 14, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
								}
								break;
							case SIMPLE_FILE:
								{
								alt138 = 2;
								}
								break;
							case 174:
								{
								alt138 = 4;
								}
								break;
							default:
								{
									if (state.backtracking>0) {state.failed=true; return retval;}
									NoViableAltException nvae = new NoViableAltException("", 138, 12, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}

							}
							break;
						case LIKE:
						case MATCH:
						case NOT:
						case 167:
						case 168:
						case 169:
						case 170:
						case 171:
						case 173:
						case 174:
						case 175:
						case 177:
						case 179:
						case 181:
						case 182:
						case 183:
						case 184:
						case 185:
						case 186:
						case 189:
						case 190:
							{
							alt138 = 2;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 138, 8, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case DISTINCT:
						{
						int LA138_9 = input.LA(4);

						if ((LA138_9==WS))
						{
							switch (input.LA(5))
							{
							case CASE:
							case CAST:
							case CONVERT:
							case COUNT:
							case DATEADD:
							case DATEDIFF:
							case DATEPART:
							case EXISTS:
							case NOT:
							case NUMBER:
							case STRING:
							case SYSTEMVAR:
							case TOKEN:
							case VARIABLE:
							case 172:
							case 175:
							case 177:
							case 191:
								{
								alt138 = 3;
								}
								break;
							case SIMPLE_FILE:
								{
								switch (input.LA(6))
								{
								case WS:
									{
									int LA138_18 = input.LA(7);

									if ((LA138_18==178))
									{
										switch (input.LA(8))
										{
										case WS:
											{
											int LA138_20 = input.LA(9);

											if ((LA138_20==SIMPLE_FILE))
											{
												alt138 = 3;
											}
											else if ((LA138_20==174))
											{
												alt138 = 5;
											}
											else
											{
												if (state.backtracking>0) {state.failed=true; return retval;}
												NoViableAltException nvae = new NoViableAltException("", 138, 20, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
											}
											break;
										case SIMPLE_FILE:
											{
											alt138 = 3;
											}
											break;
										case 174:
											{
											alt138 = 5;
											}
											break;
										default:
											{
												if (state.backtracking>0) {state.failed=true; return retval;}
												NoViableAltException nvae = new NoViableAltException("", 138, 19, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
										}

									}
									else if ((LA138_18==AND||LA138_18==BETWEEN||LA138_18==IN||LA138_18==LIKE||LA138_18==MATCH||LA138_18==NOT||LA138_18==OR||(LA138_18>=167 && LA138_18<=171)||(LA138_18>=173 && LA138_18<=175)||LA138_18==177||LA138_18==179||(LA138_18>=181 && LA138_18<=186)||(LA138_18>=189 && LA138_18<=190)))
									{
										alt138 = 3;
									}
									else
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 138, 18, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
									}
									break;
								case 178:
									{
									switch (input.LA(7))
									{
									case WS:
										{
										int LA138_20 = input.LA(8);

										if ((LA138_20==SIMPLE_FILE))
										{
											alt138 = 3;
										}
										else if ((LA138_20==174))
										{
											alt138 = 5;
										}
										else
										{
											if (state.backtracking>0) {state.failed=true; return retval;}
											NoViableAltException nvae = new NoViableAltException("", 138, 20, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
										}
										break;
									case SIMPLE_FILE:
										{
										alt138 = 3;
										}
										break;
									case 174:
										{
										alt138 = 5;
										}
										break;
									default:
										{
											if (state.backtracking>0) {state.failed=true; return retval;}
											NoViableAltException nvae = new NoViableAltException("", 138, 19, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}

									}
									break;
								case LIKE:
								case MATCH:
								case NOT:
								case 167:
								case 168:
								case 169:
								case 170:
								case 171:
								case 173:
								case 174:
								case 175:
								case 177:
								case 179:
								case 181:
								case 182:
								case 183:
								case 184:
								case 185:
								case 186:
								case 189:
								case 190:
									{
									alt138 = 3;
									}
									break;
								default:
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 138, 16, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

								}
								break;
							case 174:
								{
								alt138 = 5;
								}
								break;
							default:
								{
									if (state.backtracking>0) {state.failed=true; return retval;}
									NoViableAltException nvae = new NoViableAltException("", 138, 13, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}

						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 138, 9, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case 174:
						{
						alt138 = 4;
						}
						break;
					default:
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 138, 5, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 138, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SIMPLE_FILE:
				{
				alt138 = 6;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 138, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(138); }
			switch (alt138)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:438:4: TOKEN ( WS )? '(' ( WS )? ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )? ')'
				{
				DebugLocation(438, 4);
				TOKEN350=(IToken)Match(input,TOKEN,Follow._TOKEN_in_functioncall_or_column2827); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TOKEN.Add(TOKEN350);

				DebugLocation(438, 10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:438:10: ( WS )?
				int alt116=2;
				try { DebugEnterSubRule(116);
				try { DebugEnterDecision(116, decisionCanBacktrack[116]);
				int LA116_0 = input.LA(1);

				if ((LA116_0==WS))
				{
					alt116 = 1;
				}
				} finally { DebugExitDecision(116); }
				switch (alt116)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:438:10: WS
					{
					DebugLocation(438, 10);
					WS351=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2829); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS351);


					}
					break;

				}
				} finally { DebugExitSubRule(116); }

				DebugLocation(438, 14);
				char_literal352=(IToken)Match(input,172,Follow._172_in_functioncall_or_column2832); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_172.Add(char_literal352);

				DebugLocation(438, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:438:18: ( WS )?
				int alt117=2;
				try { DebugEnterSubRule(117);
				try { DebugEnterDecision(117, decisionCanBacktrack[117]);
				int LA117_0 = input.LA(1);

				if ((LA117_0==WS))
				{
					alt117 = 1;
				}
				} finally { DebugExitDecision(117); }
				switch (alt117)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:438:18: WS
					{
					DebugLocation(438, 18);
					WS353=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2834); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS353);


					}
					break;

				}
				} finally { DebugExitSubRule(117); }

				DebugLocation(438, 22);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:438:22: ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )?
				int alt122=2;
				try { DebugEnterSubRule(122);
				try { DebugEnterDecision(122, decisionCanBacktrack[122]);
				int LA122_0 = input.LA(1);

				if (((LA122_0>=CASE && LA122_0<=CAST)||(LA122_0>=CONVERT && LA122_0<=COUNT)||(LA122_0>=DATEADD && LA122_0<=DATEPART)||LA122_0==EXISTS||(LA122_0>=NOT && LA122_0<=NUMBER)||LA122_0==SIMPLE_FILE||(LA122_0>=STRING && LA122_0<=SYSTEMVAR)||LA122_0==TOKEN||LA122_0==VARIABLE||LA122_0==172||LA122_0==175||LA122_0==177||LA122_0==191))
				{
					alt122 = 1;
				}
				} finally { DebugExitDecision(122); }
				switch (alt122)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:438:23: expression ( WS )? ( ',' ( WS )? expression ( WS )? )*
					{
					DebugLocation(438, 23);
					PushFollow(Follow._expression_in_functioncall_or_column2838);
					expression354=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expression.Add(expression354.Tree);
					DebugLocation(438, 34);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:438:34: ( WS )?
					int alt118=2;
					try { DebugEnterSubRule(118);
					try { DebugEnterDecision(118, decisionCanBacktrack[118]);
					int LA118_0 = input.LA(1);

					if ((LA118_0==WS))
					{
						alt118 = 1;
					}
					} finally { DebugExitDecision(118); }
					switch (alt118)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:438:34: WS
						{
						DebugLocation(438, 34);
						WS355=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2840); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS355);


						}
						break;

					}
					} finally { DebugExitSubRule(118); }

					DebugLocation(438, 38);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:438:38: ( ',' ( WS )? expression ( WS )? )*
					try { DebugEnterSubRule(121);
					while (true)
					{
						int alt121=2;
						try { DebugEnterDecision(121, decisionCanBacktrack[121]);
						int LA121_0 = input.LA(1);

						if ((LA121_0==176))
						{
							alt121 = 1;
						}


						} finally { DebugExitDecision(121); }
						switch ( alt121 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:438:39: ',' ( WS )? expression ( WS )?
							{
							DebugLocation(438, 39);
							char_literal356=(IToken)Match(input,176,Follow._176_in_functioncall_or_column2844); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_176.Add(char_literal356);

							DebugLocation(438, 43);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:438:43: ( WS )?
							int alt119=2;
							try { DebugEnterSubRule(119);
							try { DebugEnterDecision(119, decisionCanBacktrack[119]);
							int LA119_0 = input.LA(1);

							if ((LA119_0==WS))
							{
								alt119 = 1;
							}
							} finally { DebugExitDecision(119); }
							switch (alt119)
							{
							case 1:
								DebugEnterAlt(1);
								// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:438:43: WS
								{
								DebugLocation(438, 43);
								WS357=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2846); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_WS.Add(WS357);


								}
								break;

							}
							} finally { DebugExitSubRule(119); }

							DebugLocation(438, 47);
							PushFollow(Follow._expression_in_functioncall_or_column2849);
							expression358=expression();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_expression.Add(expression358.Tree);
							DebugLocation(438, 58);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:438:58: ( WS )?
							int alt120=2;
							try { DebugEnterSubRule(120);
							try { DebugEnterDecision(120, decisionCanBacktrack[120]);
							int LA120_0 = input.LA(1);

							if ((LA120_0==WS))
							{
								alt120 = 1;
							}
							} finally { DebugExitDecision(120); }
							switch (alt120)
							{
							case 1:
								DebugEnterAlt(1);
								// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:438:58: WS
								{
								DebugLocation(438, 58);
								WS359=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2851); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_WS.Add(WS359);


								}
								break;

							}
							} finally { DebugExitSubRule(120); }


							}
							break;

						default:
							goto loop121;
						}
					}

					loop121:
						;

					} finally { DebugExitSubRule(121); }


					}
					break;

				}
				} finally { DebugExitSubRule(122); }

				DebugLocation(438, 66);
				char_literal360=(IToken)Match(input,173,Follow._173_in_functioncall_or_column2858); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_173.Add(char_literal360);



				{
				// AST REWRITE
				// elements: expression, TOKEN
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 438:70: -> ^( T_FUNCTIONCALL TOKEN ( expression )* )
				{
					DebugLocation(438, 73);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:438:73: ^( T_FUNCTIONCALL TOKEN ( expression )* )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(438, 75);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(438, 90);
					adaptor.AddChild(root_1, stream_TOKEN.NextNode());
					DebugLocation(438, 96);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:438:96: ( expression )*
					while ( stream_expression.HasNext )
					{
						DebugLocation(438, 96);
						adaptor.AddChild(root_1, stream_expression.NextTree());

					}
					stream_expression.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:439:4: COUNT ( WS )? '(' ( WS )? expression ( WS )? ')'
				{
				DebugLocation(439, 4);
				COUNT361=(IToken)Match(input,COUNT,Follow._COUNT_in_functioncall_or_column2874); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COUNT.Add(COUNT361);

				DebugLocation(439, 10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:439:10: ( WS )?
				int alt123=2;
				try { DebugEnterSubRule(123);
				try { DebugEnterDecision(123, decisionCanBacktrack[123]);
				int LA123_0 = input.LA(1);

				if ((LA123_0==WS))
				{
					alt123 = 1;
				}
				} finally { DebugExitDecision(123); }
				switch (alt123)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:439:10: WS
					{
					DebugLocation(439, 10);
					WS362=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2876); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS362);


					}
					break;

				}
				} finally { DebugExitSubRule(123); }

				DebugLocation(439, 14);
				char_literal363=(IToken)Match(input,172,Follow._172_in_functioncall_or_column2879); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_172.Add(char_literal363);

				DebugLocation(439, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:439:18: ( WS )?
				int alt124=2;
				try { DebugEnterSubRule(124);
				try { DebugEnterDecision(124, decisionCanBacktrack[124]);
				int LA124_0 = input.LA(1);

				if ((LA124_0==WS))
				{
					alt124 = 1;
				}
				} finally { DebugExitDecision(124); }
				switch (alt124)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:439:18: WS
					{
					DebugLocation(439, 18);
					WS364=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2881); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS364);


					}
					break;

				}
				} finally { DebugExitSubRule(124); }

				DebugLocation(439, 22);
				PushFollow(Follow._expression_in_functioncall_or_column2884);
				expression365=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression365.Tree);
				DebugLocation(439, 33);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:439:33: ( WS )?
				int alt125=2;
				try { DebugEnterSubRule(125);
				try { DebugEnterDecision(125, decisionCanBacktrack[125]);
				int LA125_0 = input.LA(1);

				if ((LA125_0==WS))
				{
					alt125 = 1;
				}
				} finally { DebugExitDecision(125); }
				switch (alt125)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:439:33: WS
					{
					DebugLocation(439, 33);
					WS366=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2886); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS366);


					}
					break;

				}
				} finally { DebugExitSubRule(125); }

				DebugLocation(439, 37);
				char_literal367=(IToken)Match(input,173,Follow._173_in_functioncall_or_column2889); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_173.Add(char_literal367);



				{
				// AST REWRITE
				// elements: expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 439:41: -> ^( T_FUNCTIONCALL T_COUNT expression )
				{
					DebugLocation(439, 44);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:439:44: ^( T_FUNCTIONCALL T_COUNT expression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(439, 46);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(439, 61);
					adaptor.AddChild(root_1, (object)adaptor.Create(T_COUNT, "T_COUNT"));
					DebugLocation(439, 69);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:440:4: COUNT ( WS )? '(' ( WS )? DISTINCT WS expression ( WS )? ')'
				{
				DebugLocation(440, 4);
				COUNT368=(IToken)Match(input,COUNT,Follow._COUNT_in_functioncall_or_column2904); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COUNT.Add(COUNT368);

				DebugLocation(440, 10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:440:10: ( WS )?
				int alt126=2;
				try { DebugEnterSubRule(126);
				try { DebugEnterDecision(126, decisionCanBacktrack[126]);
				int LA126_0 = input.LA(1);

				if ((LA126_0==WS))
				{
					alt126 = 1;
				}
				} finally { DebugExitDecision(126); }
				switch (alt126)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:440:10: WS
					{
					DebugLocation(440, 10);
					WS369=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2906); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS369);


					}
					break;

				}
				} finally { DebugExitSubRule(126); }

				DebugLocation(440, 14);
				char_literal370=(IToken)Match(input,172,Follow._172_in_functioncall_or_column2909); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_172.Add(char_literal370);

				DebugLocation(440, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:440:18: ( WS )?
				int alt127=2;
				try { DebugEnterSubRule(127);
				try { DebugEnterDecision(127, decisionCanBacktrack[127]);
				int LA127_0 = input.LA(1);

				if ((LA127_0==WS))
				{
					alt127 = 1;
				}
				} finally { DebugExitDecision(127); }
				switch (alt127)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:440:18: WS
					{
					DebugLocation(440, 18);
					WS371=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2911); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS371);


					}
					break;

				}
				} finally { DebugExitSubRule(127); }

				DebugLocation(440, 22);
				DISTINCT372=(IToken)Match(input,DISTINCT,Follow._DISTINCT_in_functioncall_or_column2914); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DISTINCT.Add(DISTINCT372);

				DebugLocation(440, 31);
				WS373=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2916); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS373);

				DebugLocation(440, 34);
				PushFollow(Follow._expression_in_functioncall_or_column2918);
				expression374=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression374.Tree);
				DebugLocation(440, 45);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:440:45: ( WS )?
				int alt128=2;
				try { DebugEnterSubRule(128);
				try { DebugEnterDecision(128, decisionCanBacktrack[128]);
				int LA128_0 = input.LA(1);

				if ((LA128_0==WS))
				{
					alt128 = 1;
				}
				} finally { DebugExitDecision(128); }
				switch (alt128)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:440:45: WS
					{
					DebugLocation(440, 45);
					WS375=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2920); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS375);


					}
					break;

				}
				} finally { DebugExitSubRule(128); }

				DebugLocation(440, 49);
				char_literal376=(IToken)Match(input,173,Follow._173_in_functioncall_or_column2923); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_173.Add(char_literal376);



				{
				// AST REWRITE
				// elements: expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 440:53: -> ^( T_FUNCTIONCALL T_DISTINCTCOUNT expression )
				{
					DebugLocation(440, 56);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:440:56: ^( T_FUNCTIONCALL T_DISTINCTCOUNT expression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(440, 58);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(440, 73);
					adaptor.AddChild(root_1, (object)adaptor.Create(T_DISTINCTCOUNT, "T_DISTINCTCOUNT"));
					DebugLocation(440, 89);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:441:4: COUNT ( WS )? '(' ( WS )? all_columns ( WS )? ')'
				{
				DebugLocation(441, 4);
				COUNT377=(IToken)Match(input,COUNT,Follow._COUNT_in_functioncall_or_column2938); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COUNT.Add(COUNT377);

				DebugLocation(441, 10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:441:10: ( WS )?
				int alt129=2;
				try { DebugEnterSubRule(129);
				try { DebugEnterDecision(129, decisionCanBacktrack[129]);
				int LA129_0 = input.LA(1);

				if ((LA129_0==WS))
				{
					alt129 = 1;
				}
				} finally { DebugExitDecision(129); }
				switch (alt129)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:441:10: WS
					{
					DebugLocation(441, 10);
					WS378=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2940); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS378);


					}
					break;

				}
				} finally { DebugExitSubRule(129); }

				DebugLocation(441, 14);
				char_literal379=(IToken)Match(input,172,Follow._172_in_functioncall_or_column2943); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_172.Add(char_literal379);

				DebugLocation(441, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:441:18: ( WS )?
				int alt130=2;
				try { DebugEnterSubRule(130);
				try { DebugEnterDecision(130, decisionCanBacktrack[130]);
				int LA130_0 = input.LA(1);

				if ((LA130_0==WS))
				{
					alt130 = 1;
				}
				} finally { DebugExitDecision(130); }
				switch (alt130)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:441:18: WS
					{
					DebugLocation(441, 18);
					WS380=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2945); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS380);


					}
					break;

				}
				} finally { DebugExitSubRule(130); }

				DebugLocation(441, 22);
				PushFollow(Follow._all_columns_in_functioncall_or_column2948);
				all_columns381=all_columns();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_all_columns.Add(all_columns381.Tree);
				DebugLocation(441, 34);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:441:34: ( WS )?
				int alt131=2;
				try { DebugEnterSubRule(131);
				try { DebugEnterDecision(131, decisionCanBacktrack[131]);
				int LA131_0 = input.LA(1);

				if ((LA131_0==WS))
				{
					alt131 = 1;
				}
				} finally { DebugExitDecision(131); }
				switch (alt131)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:441:34: WS
					{
					DebugLocation(441, 34);
					WS382=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2950); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS382);


					}
					break;

				}
				} finally { DebugExitSubRule(131); }

				DebugLocation(441, 38);
				char_literal383=(IToken)Match(input,173,Follow._173_in_functioncall_or_column2953); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_173.Add(char_literal383);



				{
				// AST REWRITE
				// elements: all_columns
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 441:42: -> ^( T_FUNCTIONCALL T_COUNT all_columns )
				{
					DebugLocation(441, 45);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:441:45: ^( T_FUNCTIONCALL T_COUNT all_columns )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(441, 47);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(441, 62);
					adaptor.AddChild(root_1, (object)adaptor.Create(T_COUNT, "T_COUNT"));
					DebugLocation(441, 70);
					adaptor.AddChild(root_1, stream_all_columns.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:442:4: COUNT ( WS )? '(' ( WS )? DISTINCT WS all_columns ( WS )? ')'
				{
				DebugLocation(442, 4);
				COUNT384=(IToken)Match(input,COUNT,Follow._COUNT_in_functioncall_or_column2968); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COUNT.Add(COUNT384);

				DebugLocation(442, 10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:442:10: ( WS )?
				int alt132=2;
				try { DebugEnterSubRule(132);
				try { DebugEnterDecision(132, decisionCanBacktrack[132]);
				int LA132_0 = input.LA(1);

				if ((LA132_0==WS))
				{
					alt132 = 1;
				}
				} finally { DebugExitDecision(132); }
				switch (alt132)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:442:10: WS
					{
					DebugLocation(442, 10);
					WS385=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2970); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS385);


					}
					break;

				}
				} finally { DebugExitSubRule(132); }

				DebugLocation(442, 14);
				char_literal386=(IToken)Match(input,172,Follow._172_in_functioncall_or_column2973); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_172.Add(char_literal386);

				DebugLocation(442, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:442:18: ( WS )?
				int alt133=2;
				try { DebugEnterSubRule(133);
				try { DebugEnterDecision(133, decisionCanBacktrack[133]);
				int LA133_0 = input.LA(1);

				if ((LA133_0==WS))
				{
					alt133 = 1;
				}
				} finally { DebugExitDecision(133); }
				switch (alt133)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:442:18: WS
					{
					DebugLocation(442, 18);
					WS387=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2975); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS387);


					}
					break;

				}
				} finally { DebugExitSubRule(133); }

				DebugLocation(442, 22);
				DISTINCT388=(IToken)Match(input,DISTINCT,Follow._DISTINCT_in_functioncall_or_column2978); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DISTINCT.Add(DISTINCT388);

				DebugLocation(442, 31);
				WS389=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2980); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS389);

				DebugLocation(442, 34);
				PushFollow(Follow._all_columns_in_functioncall_or_column2982);
				all_columns390=all_columns();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_all_columns.Add(all_columns390.Tree);
				DebugLocation(442, 46);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:442:46: ( WS )?
				int alt134=2;
				try { DebugEnterSubRule(134);
				try { DebugEnterDecision(134, decisionCanBacktrack[134]);
				int LA134_0 = input.LA(1);

				if ((LA134_0==WS))
				{
					alt134 = 1;
				}
				} finally { DebugExitDecision(134); }
				switch (alt134)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:442:46: WS
					{
					DebugLocation(442, 46);
					WS391=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2984); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS391);


					}
					break;

				}
				} finally { DebugExitSubRule(134); }

				DebugLocation(442, 50);
				char_literal392=(IToken)Match(input,173,Follow._173_in_functioncall_or_column2987); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_173.Add(char_literal392);



				{
				// AST REWRITE
				// elements: all_columns
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 442:54: -> ^( T_FUNCTIONCALL T_DISTINCTCOUNT all_columns )
				{
					DebugLocation(442, 57);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:442:57: ^( T_FUNCTIONCALL T_DISTINCTCOUNT all_columns )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(442, 59);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(442, 74);
					adaptor.AddChild(root_1, (object)adaptor.Create(T_DISTINCTCOUNT, "T_DISTINCTCOUNT"));
					DebugLocation(442, 90);
					adaptor.AddChild(root_1, stream_all_columns.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:444:4: ( table_alias ( WS )? '.' ( WS )? )? column_name
				{
				DebugLocation(444, 4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:444:4: ( table_alias ( WS )? '.' ( WS )? )?
				int alt137=2;
				try { DebugEnterSubRule(137);
				try { DebugEnterDecision(137, decisionCanBacktrack[137]);
				int LA137_0 = input.LA(1);

				if ((LA137_0==SIMPLE_FILE))
				{
					int LA137_1 = input.LA(2);

					if ((LA137_1==WS))
					{
						int LA137_2 = input.LA(3);

						if ((LA137_2==178))
						{
							alt137 = 1;
						}
					}
					else if ((LA137_1==178))
					{
						alt137 = 1;
					}
				}
				} finally { DebugExitDecision(137); }
				switch (alt137)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:444:5: table_alias ( WS )? '.' ( WS )?
					{
					DebugLocation(444, 5);
					PushFollow(Follow._table_alias_in_functioncall_or_column3005);
					table_alias393=table_alias();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_table_alias.Add(table_alias393.Tree);
					DebugLocation(444, 17);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:444:17: ( WS )?
					int alt135=2;
					try { DebugEnterSubRule(135);
					try { DebugEnterDecision(135, decisionCanBacktrack[135]);
					int LA135_0 = input.LA(1);

					if ((LA135_0==WS))
					{
						alt135 = 1;
					}
					} finally { DebugExitDecision(135); }
					switch (alt135)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:444:17: WS
						{
						DebugLocation(444, 17);
						WS394=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column3007); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS394);


						}
						break;

					}
					} finally { DebugExitSubRule(135); }

					DebugLocation(444, 21);
					char_literal395=(IToken)Match(input,178,Follow._178_in_functioncall_or_column3010); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_178.Add(char_literal395);

					DebugLocation(444, 25);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:444:25: ( WS )?
					int alt136=2;
					try { DebugEnterSubRule(136);
					try { DebugEnterDecision(136, decisionCanBacktrack[136]);
					int LA136_0 = input.LA(1);

					if ((LA136_0==WS))
					{
						alt136 = 1;
					}
					} finally { DebugExitDecision(136); }
					switch (alt136)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:444:25: WS
						{
						DebugLocation(444, 25);
						WS396=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column3012); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS396);


						}
						break;

					}
					} finally { DebugExitSubRule(136); }


					}
					break;

				}
				} finally { DebugExitSubRule(137); }

				DebugLocation(444, 31);
				PushFollow(Follow._column_name_in_functioncall_or_column3017);
				column_name397=column_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_column_name.Add(column_name397.Tree);


				{
				// AST REWRITE
				// elements: table_alias, column_name
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 444:43: -> ^( T_COLUMN column_name ( table_alias )? )
				{
					DebugLocation(444, 46);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:444:46: ^( T_COLUMN column_name ( table_alias )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(444, 48);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_COLUMN, "T_COLUMN"), root_1);

					DebugLocation(444, 57);
					adaptor.AddChild(root_1, stream_column_name.NextTree());
					DebugLocation(444, 69);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:444:69: ( table_alias )?
					if (stream_table_alias.HasNext)
					{
						DebugLocation(444, 69);
						adaptor.AddChild(root_1, stream_table_alias.NextTree());

					}
					stream_table_alias.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("functioncall_or_column", 60);
			LeaveRule("functioncall_or_column", 60);
			LeaveRule_functioncall_or_column();
	    }
	 	DebugLocation(445, 1);
		} finally { DebugExitRule(GrammarFileName, "functioncall_or_column"); }
		return retval;

	}
	// $ANTLR end "functioncall_or_column"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_column_name() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_column_name() {}

	// $ANTLR start "column_name"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:447:1: column_name : SIMPLE_FILE ;
	[GrammarRule("column_name")]
	private AstParserRuleReturnScope<object, IToken> column_name()
	{
		EnterRule_column_name();
		EnterRule("column_name", 61);
		TraceIn("column_name", 61);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken SIMPLE_FILE398 = default(IToken);

	    object SIMPLE_FILE398_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "column_name");
		DebugLocation(447, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:448:2: ( SIMPLE_FILE )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:448:4: SIMPLE_FILE
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(448, 4);
			SIMPLE_FILE398=(IToken)Match(input,SIMPLE_FILE,Follow._SIMPLE_FILE_in_column_name3040); if (state.failed) return retval;
			if (state.backtracking == 0) {
			SIMPLE_FILE398_tree = (object)adaptor.Create(SIMPLE_FILE398);
			adaptor.AddChild(root_0, SIMPLE_FILE398_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("column_name", 61);
			LeaveRule("column_name", 61);
			LeaveRule_column_name();
	    }
	 	DebugLocation(449, 1);
		} finally { DebugExitRule(GrammarFileName, "column_name"); }
		return retval;

	}
	// $ANTLR end "column_name"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_table_alias() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_table_alias() {}

	// $ANTLR start "table_alias"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:451:1: table_alias : SIMPLE_FILE -> ^( T_TABLE_ALIAS SIMPLE_FILE ) ;
	[GrammarRule("table_alias")]
	private AstParserRuleReturnScope<object, IToken> table_alias()
	{
		EnterRule_table_alias();
		EnterRule("table_alias", 62);
		TraceIn("table_alias", 62);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken SIMPLE_FILE399 = default(IToken);

	    object SIMPLE_FILE399_tree = default(object);
	    RewriteRuleITokenStream stream_SIMPLE_FILE=new RewriteRuleITokenStream(adaptor,"token SIMPLE_FILE");

		try { DebugEnterRule(GrammarFileName, "table_alias");
		DebugLocation(451, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:452:2: ( SIMPLE_FILE -> ^( T_TABLE_ALIAS SIMPLE_FILE ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:452:4: SIMPLE_FILE
			{
			DebugLocation(452, 4);
			SIMPLE_FILE399=(IToken)Match(input,SIMPLE_FILE,Follow._SIMPLE_FILE_in_table_alias3051); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_SIMPLE_FILE.Add(SIMPLE_FILE399);



			{
			// AST REWRITE
			// elements: SIMPLE_FILE
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 452:16: -> ^( T_TABLE_ALIAS SIMPLE_FILE )
			{
				DebugLocation(452, 19);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:452:19: ^( T_TABLE_ALIAS SIMPLE_FILE )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(452, 21);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_TABLE_ALIAS, "T_TABLE_ALIAS"), root_1);

				DebugLocation(452, 35);
				adaptor.AddChild(root_1, stream_SIMPLE_FILE.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("table_alias", 62);
			LeaveRule("table_alias", 62);
			LeaveRule_table_alias();
	    }
	 	DebugLocation(453, 1);
		} finally { DebugExitRule(GrammarFileName, "table_alias"); }
		return retval;

	}
	// $ANTLR end "table_alias"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_specialfunctioncall() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_specialfunctioncall() {}

	// $ANTLR start "specialfunctioncall"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:455:1: specialfunctioncall : ( CONVERT ( WS )? '(' ( WS )? TOKEN ( WS )? ',' ( WS )? expression ( WS )? ( ',' ( WS )? STRING ( WS )? )? ')' -> ^( T_CONVERT TOKEN expression ( STRING )? ) | CAST ( WS )? '(' ( WS )? expression WS AS WS datatype ( WS )? ')' -> ^( T_CONVERT TOKEN expression ) | DATEADD ( WS )? '(' ( WS )? datepart ( WS )? ',' ( WS )? expression ( WS )? ',' ( WS )? expression ( WS )? ')' -> ^( T_FUNCTIONCALL DATEADD datepart ( expression )+ ) | DATEDIFF ( WS )? '(' ( WS )? datepart ( WS )? ',' ( WS )? expression ( WS )? ',' ( WS )? expression ( WS )? ')' -> ^( T_FUNCTIONCALL DATEDIFF datepart ( expression )+ ) | DATEPART ( WS )? '(' ( WS )? datepart ( WS )? ',' ( WS )? expression ( WS )? ')' -> ^( T_FUNCTIONCALL DATEPART datepart expression ) );
	[GrammarRule("specialfunctioncall")]
	private AstParserRuleReturnScope<object, IToken> specialfunctioncall()
	{
		EnterRule_specialfunctioncall();
		EnterRule("specialfunctioncall", 63);
		TraceIn("specialfunctioncall", 63);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken CONVERT400 = default(IToken);
	    IToken WS401 = default(IToken);
	    IToken char_literal402 = default(IToken);
	    IToken WS403 = default(IToken);
	    IToken TOKEN404 = default(IToken);
	    IToken WS405 = default(IToken);
	    IToken char_literal406 = default(IToken);
	    IToken WS407 = default(IToken);
	    IToken WS409 = default(IToken);
	    IToken char_literal410 = default(IToken);
	    IToken WS411 = default(IToken);
	    IToken STRING412 = default(IToken);
	    IToken WS413 = default(IToken);
	    IToken char_literal414 = default(IToken);
	    IToken CAST415 = default(IToken);
	    IToken WS416 = default(IToken);
	    IToken char_literal417 = default(IToken);
	    IToken WS418 = default(IToken);
	    IToken WS420 = default(IToken);
	    IToken AS421 = default(IToken);
	    IToken WS422 = default(IToken);
	    IToken WS424 = default(IToken);
	    IToken char_literal425 = default(IToken);
	    IToken DATEADD426 = default(IToken);
	    IToken WS427 = default(IToken);
	    IToken char_literal428 = default(IToken);
	    IToken WS429 = default(IToken);
	    IToken WS431 = default(IToken);
	    IToken char_literal432 = default(IToken);
	    IToken WS433 = default(IToken);
	    IToken WS435 = default(IToken);
	    IToken char_literal436 = default(IToken);
	    IToken WS437 = default(IToken);
	    IToken WS439 = default(IToken);
	    IToken char_literal440 = default(IToken);
	    IToken DATEDIFF441 = default(IToken);
	    IToken WS442 = default(IToken);
	    IToken char_literal443 = default(IToken);
	    IToken WS444 = default(IToken);
	    IToken WS446 = default(IToken);
	    IToken char_literal447 = default(IToken);
	    IToken WS448 = default(IToken);
	    IToken WS450 = default(IToken);
	    IToken char_literal451 = default(IToken);
	    IToken WS452 = default(IToken);
	    IToken WS454 = default(IToken);
	    IToken char_literal455 = default(IToken);
	    IToken DATEPART456 = default(IToken);
	    IToken WS457 = default(IToken);
	    IToken char_literal458 = default(IToken);
	    IToken WS459 = default(IToken);
	    IToken WS461 = default(IToken);
	    IToken char_literal462 = default(IToken);
	    IToken WS463 = default(IToken);
	    IToken WS465 = default(IToken);
	    IToken char_literal466 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression408 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression419 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> datatype423 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> datepart430 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression434 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression438 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> datepart445 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression449 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression453 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> datepart460 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression464 = default(AstParserRuleReturnScope<object, IToken>);

	    object CONVERT400_tree = default(object);
	    object WS401_tree = default(object);
	    object char_literal402_tree = default(object);
	    object WS403_tree = default(object);
	    object TOKEN404_tree = default(object);
	    object WS405_tree = default(object);
	    object char_literal406_tree = default(object);
	    object WS407_tree = default(object);
	    object WS409_tree = default(object);
	    object char_literal410_tree = default(object);
	    object WS411_tree = default(object);
	    object STRING412_tree = default(object);
	    object WS413_tree = default(object);
	    object char_literal414_tree = default(object);
	    object CAST415_tree = default(object);
	    object WS416_tree = default(object);
	    object char_literal417_tree = default(object);
	    object WS418_tree = default(object);
	    object WS420_tree = default(object);
	    object AS421_tree = default(object);
	    object WS422_tree = default(object);
	    object WS424_tree = default(object);
	    object char_literal425_tree = default(object);
	    object DATEADD426_tree = default(object);
	    object WS427_tree = default(object);
	    object char_literal428_tree = default(object);
	    object WS429_tree = default(object);
	    object WS431_tree = default(object);
	    object char_literal432_tree = default(object);
	    object WS433_tree = default(object);
	    object WS435_tree = default(object);
	    object char_literal436_tree = default(object);
	    object WS437_tree = default(object);
	    object WS439_tree = default(object);
	    object char_literal440_tree = default(object);
	    object DATEDIFF441_tree = default(object);
	    object WS442_tree = default(object);
	    object char_literal443_tree = default(object);
	    object WS444_tree = default(object);
	    object WS446_tree = default(object);
	    object char_literal447_tree = default(object);
	    object WS448_tree = default(object);
	    object WS450_tree = default(object);
	    object char_literal451_tree = default(object);
	    object WS452_tree = default(object);
	    object WS454_tree = default(object);
	    object char_literal455_tree = default(object);
	    object DATEPART456_tree = default(object);
	    object WS457_tree = default(object);
	    object char_literal458_tree = default(object);
	    object WS459_tree = default(object);
	    object WS461_tree = default(object);
	    object char_literal462_tree = default(object);
	    object WS463_tree = default(object);
	    object WS465_tree = default(object);
	    object char_literal466_tree = default(object);
	    RewriteRuleITokenStream stream_CAST=new RewriteRuleITokenStream(adaptor,"token CAST");
	    RewriteRuleITokenStream stream_AS=new RewriteRuleITokenStream(adaptor,"token AS");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_172=new RewriteRuleITokenStream(adaptor,"token 172");
	    RewriteRuleITokenStream stream_DATEPART=new RewriteRuleITokenStream(adaptor,"token DATEPART");
	    RewriteRuleITokenStream stream_DATEADD=new RewriteRuleITokenStream(adaptor,"token DATEADD");
	    RewriteRuleITokenStream stream_173=new RewriteRuleITokenStream(adaptor,"token 173");
	    RewriteRuleITokenStream stream_CONVERT=new RewriteRuleITokenStream(adaptor,"token CONVERT");
	    RewriteRuleITokenStream stream_176=new RewriteRuleITokenStream(adaptor,"token 176");
	    RewriteRuleITokenStream stream_DATEDIFF=new RewriteRuleITokenStream(adaptor,"token DATEDIFF");
	    RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
	    RewriteRuleITokenStream stream_TOKEN=new RewriteRuleITokenStream(adaptor,"token TOKEN");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_datatype=new RewriteRuleSubtreeStream(adaptor,"rule datatype");
	    RewriteRuleSubtreeStream stream_datepart=new RewriteRuleSubtreeStream(adaptor,"rule datepart");
		try { DebugEnterRule(GrammarFileName, "specialfunctioncall");
		DebugLocation(455, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:456:2: ( CONVERT ( WS )? '(' ( WS )? TOKEN ( WS )? ',' ( WS )? expression ( WS )? ( ',' ( WS )? STRING ( WS )? )? ')' -> ^( T_CONVERT TOKEN expression ( STRING )? ) | CAST ( WS )? '(' ( WS )? expression WS AS WS datatype ( WS )? ')' -> ^( T_CONVERT TOKEN expression ) | DATEADD ( WS )? '(' ( WS )? datepart ( WS )? ',' ( WS )? expression ( WS )? ',' ( WS )? expression ( WS )? ')' -> ^( T_FUNCTIONCALL DATEADD datepart ( expression )+ ) | DATEDIFF ( WS )? '(' ( WS )? datepart ( WS )? ',' ( WS )? expression ( WS )? ',' ( WS )? expression ( WS )? ')' -> ^( T_FUNCTIONCALL DATEDIFF datepart ( expression )+ ) | DATEPART ( WS )? '(' ( WS )? datepart ( WS )? ',' ( WS )? expression ( WS )? ')' -> ^( T_FUNCTIONCALL DATEPART datepart expression ) )
			int alt169=5;
			try { DebugEnterDecision(169, decisionCanBacktrack[169]);
			switch (input.LA(1))
			{
			case CONVERT:
				{
				alt169 = 1;
				}
				break;
			case CAST:
				{
				alt169 = 2;
				}
				break;
			case DATEADD:
				{
				alt169 = 3;
				}
				break;
			case DATEDIFF:
				{
				alt169 = 4;
				}
				break;
			case DATEPART:
				{
				alt169 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 169, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(169); }
			switch (alt169)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:456:4: CONVERT ( WS )? '(' ( WS )? TOKEN ( WS )? ',' ( WS )? expression ( WS )? ( ',' ( WS )? STRING ( WS )? )? ')'
				{
				DebugLocation(456, 4);
				CONVERT400=(IToken)Match(input,CONVERT,Follow._CONVERT_in_specialfunctioncall3071); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CONVERT.Add(CONVERT400);

				DebugLocation(456, 12);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:456:12: ( WS )?
				int alt139=2;
				try { DebugEnterSubRule(139);
				try { DebugEnterDecision(139, decisionCanBacktrack[139]);
				int LA139_0 = input.LA(1);

				if ((LA139_0==WS))
				{
					alt139 = 1;
				}
				} finally { DebugExitDecision(139); }
				switch (alt139)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:456:12: WS
					{
					DebugLocation(456, 12);
					WS401=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3073); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS401);


					}
					break;

				}
				} finally { DebugExitSubRule(139); }

				DebugLocation(456, 16);
				char_literal402=(IToken)Match(input,172,Follow._172_in_specialfunctioncall3076); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_172.Add(char_literal402);

				DebugLocation(456, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:456:20: ( WS )?
				int alt140=2;
				try { DebugEnterSubRule(140);
				try { DebugEnterDecision(140, decisionCanBacktrack[140]);
				int LA140_0 = input.LA(1);

				if ((LA140_0==WS))
				{
					alt140 = 1;
				}
				} finally { DebugExitDecision(140); }
				switch (alt140)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:456:20: WS
					{
					DebugLocation(456, 20);
					WS403=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3078); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS403);


					}
					break;

				}
				} finally { DebugExitSubRule(140); }

				DebugLocation(456, 24);
				TOKEN404=(IToken)Match(input,TOKEN,Follow._TOKEN_in_specialfunctioncall3081); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TOKEN.Add(TOKEN404);

				DebugLocation(456, 30);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:456:30: ( WS )?
				int alt141=2;
				try { DebugEnterSubRule(141);
				try { DebugEnterDecision(141, decisionCanBacktrack[141]);
				int LA141_0 = input.LA(1);

				if ((LA141_0==WS))
				{
					alt141 = 1;
				}
				} finally { DebugExitDecision(141); }
				switch (alt141)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:456:30: WS
					{
					DebugLocation(456, 30);
					WS405=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3083); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS405);


					}
					break;

				}
				} finally { DebugExitSubRule(141); }

				DebugLocation(456, 34);
				char_literal406=(IToken)Match(input,176,Follow._176_in_specialfunctioncall3086); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_176.Add(char_literal406);

				DebugLocation(456, 38);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:456:38: ( WS )?
				int alt142=2;
				try { DebugEnterSubRule(142);
				try { DebugEnterDecision(142, decisionCanBacktrack[142]);
				int LA142_0 = input.LA(1);

				if ((LA142_0==WS))
				{
					alt142 = 1;
				}
				} finally { DebugExitDecision(142); }
				switch (alt142)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:456:38: WS
					{
					DebugLocation(456, 38);
					WS407=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3088); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS407);


					}
					break;

				}
				} finally { DebugExitSubRule(142); }

				DebugLocation(456, 42);
				PushFollow(Follow._expression_in_specialfunctioncall3091);
				expression408=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression408.Tree);
				DebugLocation(456, 53);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:456:53: ( WS )?
				int alt143=2;
				try { DebugEnterSubRule(143);
				try { DebugEnterDecision(143, decisionCanBacktrack[143]);
				int LA143_0 = input.LA(1);

				if ((LA143_0==WS))
				{
					alt143 = 1;
				}
				} finally { DebugExitDecision(143); }
				switch (alt143)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:456:53: WS
					{
					DebugLocation(456, 53);
					WS409=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3093); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS409);


					}
					break;

				}
				} finally { DebugExitSubRule(143); }

				DebugLocation(456, 57);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:456:57: ( ',' ( WS )? STRING ( WS )? )?
				int alt146=2;
				try { DebugEnterSubRule(146);
				try { DebugEnterDecision(146, decisionCanBacktrack[146]);
				int LA146_0 = input.LA(1);

				if ((LA146_0==176))
				{
					alt146 = 1;
				}
				} finally { DebugExitDecision(146); }
				switch (alt146)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:456:58: ',' ( WS )? STRING ( WS )?
					{
					DebugLocation(456, 58);
					char_literal410=(IToken)Match(input,176,Follow._176_in_specialfunctioncall3097); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_176.Add(char_literal410);

					DebugLocation(456, 62);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:456:62: ( WS )?
					int alt144=2;
					try { DebugEnterSubRule(144);
					try { DebugEnterDecision(144, decisionCanBacktrack[144]);
					int LA144_0 = input.LA(1);

					if ((LA144_0==WS))
					{
						alt144 = 1;
					}
					} finally { DebugExitDecision(144); }
					switch (alt144)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:456:62: WS
						{
						DebugLocation(456, 62);
						WS411=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3099); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS411);


						}
						break;

					}
					} finally { DebugExitSubRule(144); }

					DebugLocation(456, 66);
					STRING412=(IToken)Match(input,STRING,Follow._STRING_in_specialfunctioncall3102); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_STRING.Add(STRING412);

					DebugLocation(456, 73);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:456:73: ( WS )?
					int alt145=2;
					try { DebugEnterSubRule(145);
					try { DebugEnterDecision(145, decisionCanBacktrack[145]);
					int LA145_0 = input.LA(1);

					if ((LA145_0==WS))
					{
						alt145 = 1;
					}
					} finally { DebugExitDecision(145); }
					switch (alt145)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:456:73: WS
						{
						DebugLocation(456, 73);
						WS413=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3104); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS413);


						}
						break;

					}
					} finally { DebugExitSubRule(145); }


					}
					break;

				}
				} finally { DebugExitSubRule(146); }

				DebugLocation(456, 79);
				char_literal414=(IToken)Match(input,173,Follow._173_in_specialfunctioncall3109); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_173.Add(char_literal414);



				{
				// AST REWRITE
				// elements: STRING, TOKEN, expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 456:83: -> ^( T_CONVERT TOKEN expression ( STRING )? )
				{
					DebugLocation(456, 86);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:456:86: ^( T_CONVERT TOKEN expression ( STRING )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(456, 88);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CONVERT, "T_CONVERT"), root_1);

					DebugLocation(456, 98);
					adaptor.AddChild(root_1, stream_TOKEN.NextNode());
					DebugLocation(456, 104);
					adaptor.AddChild(root_1, stream_expression.NextTree());
					DebugLocation(456, 115);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:456:115: ( STRING )?
					if (stream_STRING.HasNext)
					{
						DebugLocation(456, 115);
						adaptor.AddChild(root_1, stream_STRING.NextNode());

					}
					stream_STRING.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:457:4: CAST ( WS )? '(' ( WS )? expression WS AS WS datatype ( WS )? ')'
				{
				DebugLocation(457, 4);
				CAST415=(IToken)Match(input,CAST,Follow._CAST_in_specialfunctioncall3127); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CAST.Add(CAST415);

				DebugLocation(457, 9);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:457:9: ( WS )?
				int alt147=2;
				try { DebugEnterSubRule(147);
				try { DebugEnterDecision(147, decisionCanBacktrack[147]);
				int LA147_0 = input.LA(1);

				if ((LA147_0==WS))
				{
					alt147 = 1;
				}
				} finally { DebugExitDecision(147); }
				switch (alt147)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:457:9: WS
					{
					DebugLocation(457, 9);
					WS416=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3129); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS416);


					}
					break;

				}
				} finally { DebugExitSubRule(147); }

				DebugLocation(457, 13);
				char_literal417=(IToken)Match(input,172,Follow._172_in_specialfunctioncall3132); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_172.Add(char_literal417);

				DebugLocation(457, 17);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:457:17: ( WS )?
				int alt148=2;
				try { DebugEnterSubRule(148);
				try { DebugEnterDecision(148, decisionCanBacktrack[148]);
				int LA148_0 = input.LA(1);

				if ((LA148_0==WS))
				{
					alt148 = 1;
				}
				} finally { DebugExitDecision(148); }
				switch (alt148)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:457:17: WS
					{
					DebugLocation(457, 17);
					WS418=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3134); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS418);


					}
					break;

				}
				} finally { DebugExitSubRule(148); }

				DebugLocation(457, 21);
				PushFollow(Follow._expression_in_specialfunctioncall3137);
				expression419=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression419.Tree);
				DebugLocation(457, 32);
				WS420=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3139); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS420);

				DebugLocation(457, 35);
				AS421=(IToken)Match(input,AS,Follow._AS_in_specialfunctioncall3141); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_AS.Add(AS421);

				DebugLocation(457, 38);
				WS422=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3143); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS422);

				DebugLocation(457, 41);
				PushFollow(Follow._datatype_in_specialfunctioncall3145);
				datatype423=datatype();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_datatype.Add(datatype423.Tree);
				DebugLocation(457, 50);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:457:50: ( WS )?
				int alt149=2;
				try { DebugEnterSubRule(149);
				try { DebugEnterDecision(149, decisionCanBacktrack[149]);
				int LA149_0 = input.LA(1);

				if ((LA149_0==WS))
				{
					alt149 = 1;
				}
				} finally { DebugExitDecision(149); }
				switch (alt149)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:457:50: WS
					{
					DebugLocation(457, 50);
					WS424=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3147); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS424);


					}
					break;

				}
				} finally { DebugExitSubRule(149); }

				DebugLocation(457, 54);
				char_literal425=(IToken)Match(input,173,Follow._173_in_specialfunctioncall3150); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_173.Add(char_literal425);



				{
				// AST REWRITE
				// elements: expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 457:58: -> ^( T_CONVERT TOKEN expression )
				{
					DebugLocation(457, 61);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:457:61: ^( T_CONVERT TOKEN expression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(457, 63);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CONVERT, "T_CONVERT"), root_1);

					DebugLocation(457, 73);
					adaptor.AddChild(root_1, (object)adaptor.Create(TOKEN, "TOKEN"));
					DebugLocation(457, 79);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:458:4: DATEADD ( WS )? '(' ( WS )? datepart ( WS )? ',' ( WS )? expression ( WS )? ',' ( WS )? expression ( WS )? ')'
				{
				DebugLocation(458, 4);
				DATEADD426=(IToken)Match(input,DATEADD,Follow._DATEADD_in_specialfunctioncall3165); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DATEADD.Add(DATEADD426);

				DebugLocation(458, 12);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:458:12: ( WS )?
				int alt150=2;
				try { DebugEnterSubRule(150);
				try { DebugEnterDecision(150, decisionCanBacktrack[150]);
				int LA150_0 = input.LA(1);

				if ((LA150_0==WS))
				{
					alt150 = 1;
				}
				} finally { DebugExitDecision(150); }
				switch (alt150)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:458:12: WS
					{
					DebugLocation(458, 12);
					WS427=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3167); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS427);


					}
					break;

				}
				} finally { DebugExitSubRule(150); }

				DebugLocation(458, 16);
				char_literal428=(IToken)Match(input,172,Follow._172_in_specialfunctioncall3170); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_172.Add(char_literal428);

				DebugLocation(458, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:458:20: ( WS )?
				int alt151=2;
				try { DebugEnterSubRule(151);
				try { DebugEnterDecision(151, decisionCanBacktrack[151]);
				int LA151_0 = input.LA(1);

				if ((LA151_0==WS))
				{
					alt151 = 1;
				}
				} finally { DebugExitDecision(151); }
				switch (alt151)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:458:20: WS
					{
					DebugLocation(458, 20);
					WS429=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3172); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS429);


					}
					break;

				}
				} finally { DebugExitSubRule(151); }

				DebugLocation(458, 24);
				PushFollow(Follow._datepart_in_specialfunctioncall3175);
				datepart430=datepart();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_datepart.Add(datepart430.Tree);
				DebugLocation(458, 33);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:458:33: ( WS )?
				int alt152=2;
				try { DebugEnterSubRule(152);
				try { DebugEnterDecision(152, decisionCanBacktrack[152]);
				int LA152_0 = input.LA(1);

				if ((LA152_0==WS))
				{
					alt152 = 1;
				}
				} finally { DebugExitDecision(152); }
				switch (alt152)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:458:33: WS
					{
					DebugLocation(458, 33);
					WS431=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3177); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS431);


					}
					break;

				}
				} finally { DebugExitSubRule(152); }

				DebugLocation(458, 37);
				char_literal432=(IToken)Match(input,176,Follow._176_in_specialfunctioncall3180); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_176.Add(char_literal432);

				DebugLocation(458, 41);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:458:41: ( WS )?
				int alt153=2;
				try { DebugEnterSubRule(153);
				try { DebugEnterDecision(153, decisionCanBacktrack[153]);
				int LA153_0 = input.LA(1);

				if ((LA153_0==WS))
				{
					alt153 = 1;
				}
				} finally { DebugExitDecision(153); }
				switch (alt153)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:458:41: WS
					{
					DebugLocation(458, 41);
					WS433=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3182); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS433);


					}
					break;

				}
				} finally { DebugExitSubRule(153); }

				DebugLocation(458, 45);
				PushFollow(Follow._expression_in_specialfunctioncall3185);
				expression434=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression434.Tree);
				DebugLocation(458, 56);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:458:56: ( WS )?
				int alt154=2;
				try { DebugEnterSubRule(154);
				try { DebugEnterDecision(154, decisionCanBacktrack[154]);
				int LA154_0 = input.LA(1);

				if ((LA154_0==WS))
				{
					alt154 = 1;
				}
				} finally { DebugExitDecision(154); }
				switch (alt154)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:458:56: WS
					{
					DebugLocation(458, 56);
					WS435=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3187); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS435);


					}
					break;

				}
				} finally { DebugExitSubRule(154); }

				DebugLocation(458, 60);
				char_literal436=(IToken)Match(input,176,Follow._176_in_specialfunctioncall3190); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_176.Add(char_literal436);

				DebugLocation(458, 64);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:458:64: ( WS )?
				int alt155=2;
				try { DebugEnterSubRule(155);
				try { DebugEnterDecision(155, decisionCanBacktrack[155]);
				int LA155_0 = input.LA(1);

				if ((LA155_0==WS))
				{
					alt155 = 1;
				}
				} finally { DebugExitDecision(155); }
				switch (alt155)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:458:64: WS
					{
					DebugLocation(458, 64);
					WS437=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3192); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS437);


					}
					break;

				}
				} finally { DebugExitSubRule(155); }

				DebugLocation(458, 68);
				PushFollow(Follow._expression_in_specialfunctioncall3195);
				expression438=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression438.Tree);
				DebugLocation(458, 79);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:458:79: ( WS )?
				int alt156=2;
				try { DebugEnterSubRule(156);
				try { DebugEnterDecision(156, decisionCanBacktrack[156]);
				int LA156_0 = input.LA(1);

				if ((LA156_0==WS))
				{
					alt156 = 1;
				}
				} finally { DebugExitDecision(156); }
				switch (alt156)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:458:79: WS
					{
					DebugLocation(458, 79);
					WS439=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3197); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS439);


					}
					break;

				}
				} finally { DebugExitSubRule(156); }

				DebugLocation(458, 83);
				char_literal440=(IToken)Match(input,173,Follow._173_in_specialfunctioncall3200); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_173.Add(char_literal440);



				{
				// AST REWRITE
				// elements: datepart, DATEADD, expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 458:87: -> ^( T_FUNCTIONCALL DATEADD datepart ( expression )+ )
				{
					DebugLocation(458, 90);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:458:90: ^( T_FUNCTIONCALL DATEADD datepart ( expression )+ )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(458, 92);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(458, 107);
					adaptor.AddChild(root_1, stream_DATEADD.NextNode());
					DebugLocation(458, 115);
					adaptor.AddChild(root_1, stream_datepart.NextTree());
					DebugLocation(458, 124);
					if (!(stream_expression.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expression.HasNext )
					{
						DebugLocation(458, 124);
						adaptor.AddChild(root_1, stream_expression.NextTree());

					}
					stream_expression.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:459:4: DATEDIFF ( WS )? '(' ( WS )? datepart ( WS )? ',' ( WS )? expression ( WS )? ',' ( WS )? expression ( WS )? ')'
				{
				DebugLocation(459, 4);
				DATEDIFF441=(IToken)Match(input,DATEDIFF,Follow._DATEDIFF_in_specialfunctioncall3218); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DATEDIFF.Add(DATEDIFF441);

				DebugLocation(459, 13);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:459:13: ( WS )?
				int alt157=2;
				try { DebugEnterSubRule(157);
				try { DebugEnterDecision(157, decisionCanBacktrack[157]);
				int LA157_0 = input.LA(1);

				if ((LA157_0==WS))
				{
					alt157 = 1;
				}
				} finally { DebugExitDecision(157); }
				switch (alt157)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:459:13: WS
					{
					DebugLocation(459, 13);
					WS442=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3220); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS442);


					}
					break;

				}
				} finally { DebugExitSubRule(157); }

				DebugLocation(459, 17);
				char_literal443=(IToken)Match(input,172,Follow._172_in_specialfunctioncall3223); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_172.Add(char_literal443);

				DebugLocation(459, 21);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:459:21: ( WS )?
				int alt158=2;
				try { DebugEnterSubRule(158);
				try { DebugEnterDecision(158, decisionCanBacktrack[158]);
				int LA158_0 = input.LA(1);

				if ((LA158_0==WS))
				{
					alt158 = 1;
				}
				} finally { DebugExitDecision(158); }
				switch (alt158)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:459:21: WS
					{
					DebugLocation(459, 21);
					WS444=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3225); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS444);


					}
					break;

				}
				} finally { DebugExitSubRule(158); }

				DebugLocation(459, 25);
				PushFollow(Follow._datepart_in_specialfunctioncall3228);
				datepart445=datepart();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_datepart.Add(datepart445.Tree);
				DebugLocation(459, 34);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:459:34: ( WS )?
				int alt159=2;
				try { DebugEnterSubRule(159);
				try { DebugEnterDecision(159, decisionCanBacktrack[159]);
				int LA159_0 = input.LA(1);

				if ((LA159_0==WS))
				{
					alt159 = 1;
				}
				} finally { DebugExitDecision(159); }
				switch (alt159)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:459:34: WS
					{
					DebugLocation(459, 34);
					WS446=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3230); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS446);


					}
					break;

				}
				} finally { DebugExitSubRule(159); }

				DebugLocation(459, 38);
				char_literal447=(IToken)Match(input,176,Follow._176_in_specialfunctioncall3233); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_176.Add(char_literal447);

				DebugLocation(459, 42);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:459:42: ( WS )?
				int alt160=2;
				try { DebugEnterSubRule(160);
				try { DebugEnterDecision(160, decisionCanBacktrack[160]);
				int LA160_0 = input.LA(1);

				if ((LA160_0==WS))
				{
					alt160 = 1;
				}
				} finally { DebugExitDecision(160); }
				switch (alt160)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:459:42: WS
					{
					DebugLocation(459, 42);
					WS448=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3235); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS448);


					}
					break;

				}
				} finally { DebugExitSubRule(160); }

				DebugLocation(459, 46);
				PushFollow(Follow._expression_in_specialfunctioncall3238);
				expression449=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression449.Tree);
				DebugLocation(459, 57);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:459:57: ( WS )?
				int alt161=2;
				try { DebugEnterSubRule(161);
				try { DebugEnterDecision(161, decisionCanBacktrack[161]);
				int LA161_0 = input.LA(1);

				if ((LA161_0==WS))
				{
					alt161 = 1;
				}
				} finally { DebugExitDecision(161); }
				switch (alt161)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:459:57: WS
					{
					DebugLocation(459, 57);
					WS450=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3240); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS450);


					}
					break;

				}
				} finally { DebugExitSubRule(161); }

				DebugLocation(459, 61);
				char_literal451=(IToken)Match(input,176,Follow._176_in_specialfunctioncall3243); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_176.Add(char_literal451);

				DebugLocation(459, 65);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:459:65: ( WS )?
				int alt162=2;
				try { DebugEnterSubRule(162);
				try { DebugEnterDecision(162, decisionCanBacktrack[162]);
				int LA162_0 = input.LA(1);

				if ((LA162_0==WS))
				{
					alt162 = 1;
				}
				} finally { DebugExitDecision(162); }
				switch (alt162)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:459:65: WS
					{
					DebugLocation(459, 65);
					WS452=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3245); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS452);


					}
					break;

				}
				} finally { DebugExitSubRule(162); }

				DebugLocation(459, 69);
				PushFollow(Follow._expression_in_specialfunctioncall3248);
				expression453=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression453.Tree);
				DebugLocation(459, 80);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:459:80: ( WS )?
				int alt163=2;
				try { DebugEnterSubRule(163);
				try { DebugEnterDecision(163, decisionCanBacktrack[163]);
				int LA163_0 = input.LA(1);

				if ((LA163_0==WS))
				{
					alt163 = 1;
				}
				} finally { DebugExitDecision(163); }
				switch (alt163)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:459:80: WS
					{
					DebugLocation(459, 80);
					WS454=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3250); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS454);


					}
					break;

				}
				} finally { DebugExitSubRule(163); }

				DebugLocation(459, 84);
				char_literal455=(IToken)Match(input,173,Follow._173_in_specialfunctioncall3253); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_173.Add(char_literal455);



				{
				// AST REWRITE
				// elements: expression, DATEDIFF, datepart
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 459:88: -> ^( T_FUNCTIONCALL DATEDIFF datepart ( expression )+ )
				{
					DebugLocation(459, 91);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:459:91: ^( T_FUNCTIONCALL DATEDIFF datepart ( expression )+ )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(459, 93);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(459, 108);
					adaptor.AddChild(root_1, stream_DATEDIFF.NextNode());
					DebugLocation(459, 117);
					adaptor.AddChild(root_1, stream_datepart.NextTree());
					DebugLocation(459, 126);
					if (!(stream_expression.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expression.HasNext )
					{
						DebugLocation(459, 126);
						adaptor.AddChild(root_1, stream_expression.NextTree());

					}
					stream_expression.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:460:4: DATEPART ( WS )? '(' ( WS )? datepart ( WS )? ',' ( WS )? expression ( WS )? ')'
				{
				DebugLocation(460, 4);
				DATEPART456=(IToken)Match(input,DATEPART,Follow._DATEPART_in_specialfunctioncall3271); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DATEPART.Add(DATEPART456);

				DebugLocation(460, 13);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:460:13: ( WS )?
				int alt164=2;
				try { DebugEnterSubRule(164);
				try { DebugEnterDecision(164, decisionCanBacktrack[164]);
				int LA164_0 = input.LA(1);

				if ((LA164_0==WS))
				{
					alt164 = 1;
				}
				} finally { DebugExitDecision(164); }
				switch (alt164)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:460:13: WS
					{
					DebugLocation(460, 13);
					WS457=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3273); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS457);


					}
					break;

				}
				} finally { DebugExitSubRule(164); }

				DebugLocation(460, 17);
				char_literal458=(IToken)Match(input,172,Follow._172_in_specialfunctioncall3276); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_172.Add(char_literal458);

				DebugLocation(460, 21);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:460:21: ( WS )?
				int alt165=2;
				try { DebugEnterSubRule(165);
				try { DebugEnterDecision(165, decisionCanBacktrack[165]);
				int LA165_0 = input.LA(1);

				if ((LA165_0==WS))
				{
					alt165 = 1;
				}
				} finally { DebugExitDecision(165); }
				switch (alt165)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:460:21: WS
					{
					DebugLocation(460, 21);
					WS459=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3278); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS459);


					}
					break;

				}
				} finally { DebugExitSubRule(165); }

				DebugLocation(460, 25);
				PushFollow(Follow._datepart_in_specialfunctioncall3281);
				datepart460=datepart();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_datepart.Add(datepart460.Tree);
				DebugLocation(460, 34);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:460:34: ( WS )?
				int alt166=2;
				try { DebugEnterSubRule(166);
				try { DebugEnterDecision(166, decisionCanBacktrack[166]);
				int LA166_0 = input.LA(1);

				if ((LA166_0==WS))
				{
					alt166 = 1;
				}
				} finally { DebugExitDecision(166); }
				switch (alt166)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:460:34: WS
					{
					DebugLocation(460, 34);
					WS461=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3283); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS461);


					}
					break;

				}
				} finally { DebugExitSubRule(166); }

				DebugLocation(460, 38);
				char_literal462=(IToken)Match(input,176,Follow._176_in_specialfunctioncall3286); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_176.Add(char_literal462);

				DebugLocation(460, 42);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:460:42: ( WS )?
				int alt167=2;
				try { DebugEnterSubRule(167);
				try { DebugEnterDecision(167, decisionCanBacktrack[167]);
				int LA167_0 = input.LA(1);

				if ((LA167_0==WS))
				{
					alt167 = 1;
				}
				} finally { DebugExitDecision(167); }
				switch (alt167)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:460:42: WS
					{
					DebugLocation(460, 42);
					WS463=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3288); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS463);


					}
					break;

				}
				} finally { DebugExitSubRule(167); }

				DebugLocation(460, 46);
				PushFollow(Follow._expression_in_specialfunctioncall3291);
				expression464=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression464.Tree);
				DebugLocation(460, 57);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:460:57: ( WS )?
				int alt168=2;
				try { DebugEnterSubRule(168);
				try { DebugEnterDecision(168, decisionCanBacktrack[168]);
				int LA168_0 = input.LA(1);

				if ((LA168_0==WS))
				{
					alt168 = 1;
				}
				} finally { DebugExitDecision(168); }
				switch (alt168)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:460:57: WS
					{
					DebugLocation(460, 57);
					WS465=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3293); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS465);


					}
					break;

				}
				} finally { DebugExitSubRule(168); }

				DebugLocation(460, 61);
				char_literal466=(IToken)Match(input,173,Follow._173_in_specialfunctioncall3296); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_173.Add(char_literal466);



				{
				// AST REWRITE
				// elements: expression, DATEPART, datepart
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 460:65: -> ^( T_FUNCTIONCALL DATEPART datepart expression )
				{
					DebugLocation(460, 68);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:460:68: ^( T_FUNCTIONCALL DATEPART datepart expression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(460, 70);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(460, 85);
					adaptor.AddChild(root_1, stream_DATEPART.NextNode());
					DebugLocation(460, 94);
					adaptor.AddChild(root_1, stream_datepart.NextTree());
					DebugLocation(460, 103);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("specialfunctioncall", 63);
			LeaveRule("specialfunctioncall", 63);
			LeaveRule_specialfunctioncall();
	    }
	 	DebugLocation(461, 1);
		} finally { DebugExitRule(GrammarFileName, "specialfunctioncall"); }
		return retval;

	}
	// $ANTLR end "specialfunctioncall"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_datepart() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_datepart() {}

	// $ANTLR start "datepart"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:463:1: datepart : TOKEN -> ^( T_DATEPART TOKEN ) ;
	[GrammarRule("datepart")]
	private AstParserRuleReturnScope<object, IToken> datepart()
	{
		EnterRule_datepart();
		EnterRule("datepart", 64);
		TraceIn("datepart", 64);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN467 = default(IToken);

	    object TOKEN467_tree = default(object);
	    RewriteRuleITokenStream stream_TOKEN=new RewriteRuleITokenStream(adaptor,"token TOKEN");

		try { DebugEnterRule(GrammarFileName, "datepart");
		DebugLocation(463, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:464:2: ( TOKEN -> ^( T_DATEPART TOKEN ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:464:4: TOKEN
			{
			DebugLocation(464, 4);
			TOKEN467=(IToken)Match(input,TOKEN,Follow._TOKEN_in_datepart3320); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_TOKEN.Add(TOKEN467);



			{
			// AST REWRITE
			// elements: TOKEN
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 464:10: -> ^( T_DATEPART TOKEN )
			{
				DebugLocation(464, 13);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:464:13: ^( T_DATEPART TOKEN )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(464, 15);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_DATEPART, "T_DATEPART"), root_1);

				DebugLocation(464, 26);
				adaptor.AddChild(root_1, stream_TOKEN.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("datepart", 64);
			LeaveRule("datepart", 64);
			LeaveRule_datepart();
	    }
	 	DebugLocation(465, 1);
		} finally { DebugExitRule(GrammarFileName, "datepart"); }
		return retval;

	}
	// $ANTLR end "datepart"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_number() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_number() {}

	// $ANTLR start "number"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:467:1: number : NUMBER ;
	[GrammarRule("number")]
	private AstParserRuleReturnScope<object, IToken> number()
	{
		EnterRule_number();
		EnterRule("number", 65);
		TraceIn("number", 65);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken NUMBER468 = default(IToken);

	    object NUMBER468_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "number");
		DebugLocation(467, 16);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:467:9: ( NUMBER )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:467:11: NUMBER
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(467, 11);
			NUMBER468=(IToken)Match(input,NUMBER,Follow._NUMBER_in_number3340); if (state.failed) return retval;
			if (state.backtracking == 0) {
			NUMBER468_tree = (object)adaptor.Create(NUMBER468);
			adaptor.AddChild(root_0, NUMBER468_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("number", 65);
			LeaveRule("number", 65);
			LeaveRule_number();
	    }
	 	DebugLocation(467, 16);
		} finally { DebugExitRule(GrammarFileName, "number"); }
		return retval;

	}
	// $ANTLR end "number"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_string() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_string() {}

	// $ANTLR start "string"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:469:1: string : STRING -> ^( T_STRING STRING ) ;
	[GrammarRule("string")]
	private AstParserRuleReturnScope<object, IToken> @string()
	{
		EnterRule_string();
		EnterRule("string", 66);
		TraceIn("string", 66);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken STRING469 = default(IToken);

	    object STRING469_tree = default(object);
	    RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");

		try { DebugEnterRule(GrammarFileName, "string");
		DebugLocation(469, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:469:8: ( STRING -> ^( T_STRING STRING ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:469:10: STRING
			{
			DebugLocation(469, 10);
			STRING469=(IToken)Match(input,STRING,Follow._STRING_in_string3348); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_STRING.Add(STRING469);



			{
			// AST REWRITE
			// elements: STRING
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 469:17: -> ^( T_STRING STRING )
			{
				DebugLocation(469, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:469:20: ^( T_STRING STRING )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(469, 22);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_STRING, "T_STRING"), root_1);

				DebugLocation(469, 31);
				adaptor.AddChild(root_1, stream_STRING.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("string", 66);
			LeaveRule("string", 66);
			LeaveRule_string();
	    }
	 	DebugLocation(470, 1);
		} finally { DebugExitRule(GrammarFileName, "string"); }
		return retval;

	}
	// $ANTLR end "string"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_datatype() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_datatype() {}

	// $ANTLR start "datatype"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:472:1: datatype : TOKEN ;
	[GrammarRule("datatype")]
	private AstParserRuleReturnScope<object, IToken> datatype()
	{
		EnterRule_datatype();
		EnterRule("datatype", 67);
		TraceIn("datatype", 67);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN470 = default(IToken);

	    object TOKEN470_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "datatype");
		DebugLocation(472, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:473:2: ( TOKEN )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:473:4: TOKEN
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(473, 4);
			TOKEN470=(IToken)Match(input,TOKEN,Follow._TOKEN_in_datatype3368); if (state.failed) return retval;
			if (state.backtracking == 0) {
			TOKEN470_tree = (object)adaptor.Create(TOKEN470);
			adaptor.AddChild(root_0, TOKEN470_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("datatype", 67);
			LeaveRule("datatype", 67);
			LeaveRule_datatype();
	    }
	 	DebugLocation(474, 1);
		} finally { DebugExitRule(GrammarFileName, "datatype"); }
		return retval;

	}
	// $ANTLR end "datatype"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_variable() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_variable() {}

	// $ANTLR start "variable"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:476:1: variable : VARIABLE -> ^( T_VARIABLE VARIABLE ) ;
	[GrammarRule("variable")]
	private AstParserRuleReturnScope<object, IToken> variable()
	{
		EnterRule_variable();
		EnterRule("variable", 68);
		TraceIn("variable", 68);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken VARIABLE471 = default(IToken);

	    object VARIABLE471_tree = default(object);
	    RewriteRuleITokenStream stream_VARIABLE=new RewriteRuleITokenStream(adaptor,"token VARIABLE");

		try { DebugEnterRule(GrammarFileName, "variable");
		DebugLocation(476, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:477:2: ( VARIABLE -> ^( T_VARIABLE VARIABLE ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:477:4: VARIABLE
			{
			DebugLocation(477, 4);
			VARIABLE471=(IToken)Match(input,VARIABLE,Follow._VARIABLE_in_variable3380); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_VARIABLE.Add(VARIABLE471);



			{
			// AST REWRITE
			// elements: VARIABLE
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 477:13: -> ^( T_VARIABLE VARIABLE )
			{
				DebugLocation(477, 16);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:477:16: ^( T_VARIABLE VARIABLE )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(477, 18);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_VARIABLE, "T_VARIABLE"), root_1);

				DebugLocation(477, 29);
				adaptor.AddChild(root_1, stream_VARIABLE.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variable", 68);
			LeaveRule("variable", 68);
			LeaveRule_variable();
	    }
	 	DebugLocation(478, 1);
		} finally { DebugExitRule(GrammarFileName, "variable"); }
		return retval;

	}
	// $ANTLR end "variable"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_case() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_case() {}

	// $ANTLR start "case"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:480:1: case : CASE WS ( expression WS )? ( case_when WS )* ( case_else WS )? END -> ^( T_CASE ( expression )? ( case_when )* ( case_else )? ) ;
	[GrammarRule("case")]
	private AstParserRuleReturnScope<object, IToken> @case()
	{
		EnterRule_case();
		EnterRule("case", 69);
		TraceIn("case", 69);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken CASE472 = default(IToken);
	    IToken WS473 = default(IToken);
	    IToken WS475 = default(IToken);
	    IToken WS477 = default(IToken);
	    IToken WS479 = default(IToken);
	    IToken END480 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression474 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> case_when476 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> case_else478 = default(AstParserRuleReturnScope<object, IToken>);

	    object CASE472_tree = default(object);
	    object WS473_tree = default(object);
	    object WS475_tree = default(object);
	    object WS477_tree = default(object);
	    object WS479_tree = default(object);
	    object END480_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_END=new RewriteRuleITokenStream(adaptor,"token END");
	    RewriteRuleITokenStream stream_CASE=new RewriteRuleITokenStream(adaptor,"token CASE");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_case_when=new RewriteRuleSubtreeStream(adaptor,"rule case_when");
	    RewriteRuleSubtreeStream stream_case_else=new RewriteRuleSubtreeStream(adaptor,"rule case_else");
		try { DebugEnterRule(GrammarFileName, "case");
		DebugLocation(480, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:481:2: ( CASE WS ( expression WS )? ( case_when WS )* ( case_else WS )? END -> ^( T_CASE ( expression )? ( case_when )* ( case_else )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:481:4: CASE WS ( expression WS )? ( case_when WS )* ( case_else WS )? END
			{
			DebugLocation(481, 4);
			CASE472=(IToken)Match(input,CASE,Follow._CASE_in_case3400); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CASE.Add(CASE472);

			DebugLocation(481, 9);
			WS473=(IToken)Match(input,WS,Follow._WS_in_case3402); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS473);

			DebugLocation(481, 12);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:481:12: ( expression WS )?
			int alt170=2;
			try { DebugEnterSubRule(170);
			try { DebugEnterDecision(170, decisionCanBacktrack[170]);
			int LA170_0 = input.LA(1);

			if (((LA170_0>=CASE && LA170_0<=CAST)||(LA170_0>=CONVERT && LA170_0<=COUNT)||(LA170_0>=DATEADD && LA170_0<=DATEPART)||LA170_0==EXISTS||(LA170_0>=NOT && LA170_0<=NUMBER)||LA170_0==SIMPLE_FILE||(LA170_0>=STRING && LA170_0<=SYSTEMVAR)||LA170_0==TOKEN||LA170_0==VARIABLE||LA170_0==172||LA170_0==175||LA170_0==177||LA170_0==191))
			{
				alt170 = 1;
			}
			} finally { DebugExitDecision(170); }
			switch (alt170)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:481:13: expression WS
				{
				DebugLocation(481, 13);
				PushFollow(Follow._expression_in_case3405);
				expression474=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression474.Tree);
				DebugLocation(481, 24);
				WS475=(IToken)Match(input,WS,Follow._WS_in_case3407); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS475);


				}
				break;

			}
			} finally { DebugExitSubRule(170); }

			DebugLocation(481, 29);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:481:29: ( case_when WS )*
			try { DebugEnterSubRule(171);
			while (true)
			{
				int alt171=2;
				try { DebugEnterDecision(171, decisionCanBacktrack[171]);
				int LA171_0 = input.LA(1);

				if ((LA171_0==WHEN))
				{
					alt171 = 1;
				}


				} finally { DebugExitDecision(171); }
				switch ( alt171 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:481:30: case_when WS
					{
					DebugLocation(481, 30);
					PushFollow(Follow._case_when_in_case3412);
					case_when476=case_when();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_case_when.Add(case_when476.Tree);
					DebugLocation(481, 40);
					WS477=(IToken)Match(input,WS,Follow._WS_in_case3414); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS477);


					}
					break;

				default:
					goto loop171;
				}
			}

			loop171:
				;

			} finally { DebugExitSubRule(171); }

			DebugLocation(481, 45);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:481:45: ( case_else WS )?
			int alt172=2;
			try { DebugEnterSubRule(172);
			try { DebugEnterDecision(172, decisionCanBacktrack[172]);
			int LA172_0 = input.LA(1);

			if ((LA172_0==ELSE))
			{
				alt172 = 1;
			}
			} finally { DebugExitDecision(172); }
			switch (alt172)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:481:46: case_else WS
				{
				DebugLocation(481, 46);
				PushFollow(Follow._case_else_in_case3419);
				case_else478=case_else();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_case_else.Add(case_else478.Tree);
				DebugLocation(481, 56);
				WS479=(IToken)Match(input,WS,Follow._WS_in_case3421); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS479);


				}
				break;

			}
			} finally { DebugExitSubRule(172); }

			DebugLocation(481, 61);
			END480=(IToken)Match(input,END,Follow._END_in_case3425); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_END.Add(END480);



			{
			// AST REWRITE
			// elements: case_else, case_when, expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 482:2: -> ^( T_CASE ( expression )? ( case_when )* ( case_else )? )
			{
				DebugLocation(482, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:482:5: ^( T_CASE ( expression )? ( case_when )* ( case_else )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(482, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CASE, "T_CASE"), root_1);

				DebugLocation(482, 14);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:482:14: ( expression )?
				if (stream_expression.HasNext)
				{
					DebugLocation(482, 14);
					adaptor.AddChild(root_1, stream_expression.NextTree());

				}
				stream_expression.Reset();
				DebugLocation(482, 26);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:482:26: ( case_when )*
				while ( stream_case_when.HasNext )
				{
					DebugLocation(482, 26);
					adaptor.AddChild(root_1, stream_case_when.NextTree());

				}
				stream_case_when.Reset();
				DebugLocation(482, 37);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:482:37: ( case_else )?
				if (stream_case_else.HasNext)
				{
					DebugLocation(482, 37);
					adaptor.AddChild(root_1, stream_case_else.NextTree());

				}
				stream_case_else.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("case", 69);
			LeaveRule("case", 69);
			LeaveRule_case();
	    }
	 	DebugLocation(483, 1);
		} finally { DebugExitRule(GrammarFileName, "case"); }
		return retval;

	}
	// $ANTLR end "case"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_case_when() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_case_when() {}

	// $ANTLR start "case_when"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:485:1: case_when : WHEN WS a= expression WS THEN WS b= expression -> ^( T_CASE_WHEN $a $b) ;
	[GrammarRule("case_when")]
	private AstParserRuleReturnScope<object, IToken> case_when()
	{
		EnterRule_case_when();
		EnterRule("case_when", 70);
		TraceIn("case_when", 70);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WHEN481 = default(IToken);
	    IToken WS482 = default(IToken);
	    IToken WS483 = default(IToken);
	    IToken THEN484 = default(IToken);
	    IToken WS485 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);

	    object WHEN481_tree = default(object);
	    object WS482_tree = default(object);
	    object WS483_tree = default(object);
	    object THEN484_tree = default(object);
	    object WS485_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_THEN=new RewriteRuleITokenStream(adaptor,"token THEN");
	    RewriteRuleITokenStream stream_WHEN=new RewriteRuleITokenStream(adaptor,"token WHEN");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "case_when");
		DebugLocation(485, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:486:2: ( WHEN WS a= expression WS THEN WS b= expression -> ^( T_CASE_WHEN $a $b) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:486:4: WHEN WS a= expression WS THEN WS b= expression
			{
			DebugLocation(486, 4);
			WHEN481=(IToken)Match(input,WHEN,Follow._WHEN_in_case_when3453); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WHEN.Add(WHEN481);

			DebugLocation(486, 9);
			WS482=(IToken)Match(input,WS,Follow._WS_in_case_when3455); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS482);

			DebugLocation(486, 13);
			PushFollow(Follow._expression_in_case_when3459);
			a=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression.Add(a.Tree);
			DebugLocation(486, 25);
			WS483=(IToken)Match(input,WS,Follow._WS_in_case_when3461); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS483);

			DebugLocation(486, 28);
			THEN484=(IToken)Match(input,THEN,Follow._THEN_in_case_when3463); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_THEN.Add(THEN484);

			DebugLocation(486, 33);
			WS485=(IToken)Match(input,WS,Follow._WS_in_case_when3465); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS485);

			DebugLocation(486, 37);
			PushFollow(Follow._expression_in_case_when3469);
			b=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression.Add(b.Tree);


			{
			// AST REWRITE
			// elements: b, a
			// token labels: 
			// rule labels: retval, b, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 487:2: -> ^( T_CASE_WHEN $a $b)
			{
				DebugLocation(487, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:487:5: ^( T_CASE_WHEN $a $b)
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(487, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CASE_WHEN, "T_CASE_WHEN"), root_1);

				DebugLocation(487, 20);
				adaptor.AddChild(root_1, stream_a.NextTree());
				DebugLocation(487, 23);
				adaptor.AddChild(root_1, stream_b.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("case_when", 70);
			LeaveRule("case_when", 70);
			LeaveRule_case_when();
	    }
	 	DebugLocation(488, 1);
		} finally { DebugExitRule(GrammarFileName, "case_when"); }
		return retval;

	}
	// $ANTLR end "case_when"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_case_else() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_case_else() {}

	// $ANTLR start "case_else"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:490:1: case_else : ELSE WS expression -> ^( T_CASE_ELSE expression ) ;
	[GrammarRule("case_else")]
	private AstParserRuleReturnScope<object, IToken> case_else()
	{
		EnterRule_case_else();
		EnterRule("case_else", 71);
		TraceIn("case_else", 71);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken ELSE486 = default(IToken);
	    IToken WS487 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression488 = default(AstParserRuleReturnScope<object, IToken>);

	    object ELSE486_tree = default(object);
	    object WS487_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_ELSE=new RewriteRuleITokenStream(adaptor,"token ELSE");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "case_else");
		DebugLocation(490, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:491:2: ( ELSE WS expression -> ^( T_CASE_ELSE expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:491:4: ELSE WS expression
			{
			DebugLocation(491, 4);
			ELSE486=(IToken)Match(input,ELSE,Follow._ELSE_in_case_else3494); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ELSE.Add(ELSE486);

			DebugLocation(491, 9);
			WS487=(IToken)Match(input,WS,Follow._WS_in_case_else3496); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS487);

			DebugLocation(491, 12);
			PushFollow(Follow._expression_in_case_else3498);
			expression488=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression.Add(expression488.Tree);


			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 492:2: -> ^( T_CASE_ELSE expression )
			{
				DebugLocation(492, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:492:5: ^( T_CASE_ELSE expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(492, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CASE_ELSE, "T_CASE_ELSE"), root_1);

				DebugLocation(492, 19);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("case_else", 71);
			LeaveRule("case_else", 71);
			LeaveRule_case_else();
	    }
	 	DebugLocation(493, 1);
		} finally { DebugExitRule(GrammarFileName, "case_else"); }
		return retval;

	}
	// $ANTLR end "case_else"
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred1_gql_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred1_gql_fragment() {}

	// $ANTLR start synpred1_gql
	public void synpred1_gql_fragment()
	{
		EnterRule_synpred1_gql_fragment();
		EnterRule("synpred1_gql_fragment", 72);
		TraceIn("synpred1_gql_fragment", 72);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:147:4: ( '(' )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:147:5: '('
			{
			DebugLocation(147, 5);
			Match(input,172,Follow._172_in_synpred1_gql594); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred1_gql_fragment", 72);
			LeaveRule("synpred1_gql_fragment", 72);
			LeaveRule_synpred1_gql_fragment();
		}
	}
	// $ANTLR end synpred1_gql
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred2_gql_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred2_gql_fragment() {}

	// $ANTLR start synpred2_gql
	public void synpred2_gql_fragment()
	{
		EnterRule_synpred2_gql_fragment();
		EnterRule("synpred2_gql_fragment", 73);
		TraceIn("synpred2_gql_fragment", 73);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:191:4: ( subquery WS SIMPLEPIVOT )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:191:5: subquery WS SIMPLEPIVOT
			{
			DebugLocation(191, 5);
			PushFollow(Follow._subquery_in_synpred2_gql979);
			subquery();
			PopFollow();
			if (state.failed) return;
			DebugLocation(191, 14);
			Match(input,WS,Follow._WS_in_synpred2_gql981); if (state.failed) return;
			DebugLocation(191, 17);
			Match(input,SIMPLEPIVOT,Follow._SIMPLEPIVOT_in_synpred2_gql983); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred2_gql_fragment", 73);
			LeaveRule("synpred2_gql_fragment", 73);
			LeaveRule_synpred2_gql_fragment();
		}
	}
	// $ANTLR end synpred2_gql
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred3_gql_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred3_gql_fragment() {}

	// $ANTLR start synpred3_gql
	public void synpred3_gql_fragment()
	{
		EnterRule_synpred3_gql_fragment();
		EnterRule("synpred3_gql_fragment", 74);
		TraceIn("synpred3_gql_fragment", 74);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:336:4: ( SELECT )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:336:5: SELECT
			{
			DebugLocation(336, 5);
			Match(input,SELECT,Follow._SELECT_in_synpred3_gql1913); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred3_gql_fragment", 74);
			LeaveRule("synpred3_gql_fragment", 74);
			LeaveRule_synpred3_gql_fragment();
		}
	}
	// $ANTLR end synpred3_gql
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred4_gql_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred4_gql_fragment() {}

	// $ANTLR start synpred4_gql
	public void synpred4_gql_fragment()
	{
		EnterRule_synpred4_gql_fragment();
		EnterRule("synpred4_gql_fragment", 75);
		TraceIn("synpred4_gql_fragment", 75);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:428:4: ( subquery )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:428:5: subquery
			{
			DebugLocation(428, 5);
			PushFollow(Follow._subquery_in_synpred4_gql2754);
			subquery();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred4_gql_fragment", 75);
			LeaveRule("synpred4_gql_fragment", 75);
			LeaveRule_synpred4_gql_fragment();
		}
	}
	// $ANTLR end synpred4_gql
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _WS_in_parse398 = new BitSet(new ulong[]{0xC000000044200000UL,0x0UL,0x100008000000UL});
		public static readonly BitSet _commands_in_parse402 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_parse404 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_parse409 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _command_in_commands432 = new BitSet(new ulong[]{0x2UL,0x0UL,0x10000800000000UL});
		public static readonly BitSet _WS_in_commands435 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000000000UL});
		public static readonly BitSet _180_in_commands438 = new BitSet(new ulong[]{0xC000000044200000UL,0x0UL,0x100808000000UL});
		public static readonly BitSet _WS_in_commands440 = new BitSet(new ulong[]{0xC000000044200000UL,0x0UL,0x100008000000UL});
		public static readonly BitSet _command_in_commands443 = new BitSet(new ulong[]{0x2UL,0x0UL,0x10000800000000UL});
		public static readonly BitSet _WS_in_commands448 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000000000UL});
		public static readonly BitSet _180_in_commands451 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _select_command_in_command471 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _use_command_in_command476 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declare_command_in_command481 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_command_in_command486 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _create_view_command_in_command491 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _drop_view_command_in_command496 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _drop_table_command_in_command501 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _select_command_union_in_select_command515 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_select_command518 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _orderby_clause_in_select_command520 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _select_command_simple_in_select_command_union552 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_select_command_union559 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _UNION_in_select_command_union561 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_select_command_union563 = new BitSet(new ulong[]{0x4000000000000000UL,0x0UL,0x100000000000UL});
		public static readonly BitSet _select_command_simple_in_select_command_union567 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800000000UL});
		public static readonly BitSet _subquery_in_select_command_simple599 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SELECT_in_select_command_simple604 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_select_command_simple607 = new BitSet(new ulong[]{0x20000020UL});
		public static readonly BitSet _distinct_clause_in_select_command_simple609 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_select_command_simple614 = new BitSet(new ulong[]{0x0UL,0x200UL});
		public static readonly BitSet _top_clause_in_select_command_simple616 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_select_command_simple621 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _bottom_clause_in_select_command_simple623 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_select_command_simple627 = new BitSet(new ulong[]{0x30000403998000UL,0x11AUL,0x8002D00020000000UL});
		public static readonly BitSet _column_list_in_select_command_simple629 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_select_command_simple632 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _into_clause_in_select_command_simple634 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_select_command_simple639 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _from_clause_in_select_command_simple641 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_select_command_simple646 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000UL});
		public static readonly BitSet _where_clause_in_select_command_simple648 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_select_command_simple653 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _groupby_clause_in_select_command_simple655 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_select_command_simple660 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _having_clause_in_select_command_simple662 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DISTINCT_in_distinct_clause710 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ALL_in_distinct_clause719 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOP_in_top_clause735 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_top_clause737 = new BitSet(new ulong[]{0x20000403998000UL,0x11AUL,0x100020000000UL});
		public static readonly BitSet _expression_atom_in_top_clause739 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BOTTOM_in_bottom_clause760 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_bottom_clause762 = new BitSet(new ulong[]{0x20000403998000UL,0x11AUL,0x100020000000UL});
		public static readonly BitSet _expression_atom_in_bottom_clause764 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _column_in_column_list785 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1000800000000UL});
		public static readonly BitSet _WS_in_column_list788 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000000UL});
		public static readonly BitSet _176_in_column_list791 = new BitSet(new ulong[]{0x30000403998000UL,0x11AUL,0x8002D00820000000UL});
		public static readonly BitSet _WS_in_column_list793 = new BitSet(new ulong[]{0x30000403998000UL,0x11AUL,0x8002D00020000000UL});
		public static readonly BitSet _column_in_column_list796 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1000800000000UL});
		public static readonly BitSet _all_columns_in_column820 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_column825 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_column828 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _SIMPLE_FILE_in_column830 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _table_alias_in_all_columns855 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000800000000UL});
		public static readonly BitSet _WS_in_all_columns857 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000000000UL});
		public static readonly BitSet _178_in_all_columns860 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400800000000UL});
		public static readonly BitSet _WS_in_all_columns862 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000000000UL});
		public static readonly BitSet _174_in_all_columns867 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INTO_in_into_clause887 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_into_clause889 = new BitSet(new ulong[]{0x0UL,0x2UL,0x800000000000000UL});
		public static readonly BitSet _file_in_into_clause891 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FROM_in_from_clause911 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_from_clause913 = new BitSet(new ulong[]{0x0UL,0x10AUL,0x800100000000000UL});
		public static readonly BitSet _from_clause_item_in_from_clause915 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1000800000000UL});
		public static readonly BitSet _WS_in_from_clause918 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000000UL});
		public static readonly BitSet _176_in_from_clause921 = new BitSet(new ulong[]{0x0UL,0x10AUL,0x800100800000000UL});
		public static readonly BitSet _WS_in_from_clause923 = new BitSet(new ulong[]{0x0UL,0x10AUL,0x800100000000000UL});
		public static readonly BitSet _from_clause_item_in_from_clause926 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1000800000000UL});
		public static readonly BitSet _WS_in_from_clause931 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _table_alias_in_from_clause933 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_from_clause_item960 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _file_in_from_clause_item973 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _simplepivot_in_from_clause_item988 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _subquery_in_from_clause_item993 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _view_name_in_from_clause_item998 = new BitSet(new ulong[]{0x2UL,0x0UL,0x100800000000UL});
		public static readonly BitSet _WS_in_from_clause_item1001 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000UL});
		public static readonly BitSet _172_in_from_clause_item1004 = new BitSet(new ulong[]{0x30000403998000UL,0x11AUL,0x8002B00020000000UL});
		public static readonly BitSet _expression_list_in_from_clause_item1006 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _173_in_from_clause_item1009 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _subquery_in_simplepivot1032 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_simplepivot1034 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _SIMPLEPIVOT_in_simplepivot1036 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_simplepivot1038 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000UL});
		public static readonly BitSet _172_in_simplepivot1040 = new BitSet(new ulong[]{0x30000403998000UL,0x11AUL,0x8002D00820000000UL});
		public static readonly BitSet _WS_in_simplepivot1042 = new BitSet(new ulong[]{0x30000403998000UL,0x11AUL,0x8002D00020000000UL});
		public static readonly BitSet _column_list_in_simplepivot1045 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_simplepivot1047 = new BitSet(new ulong[]{0x1000000000UL});
		public static readonly BitSet _FOR_in_simplepivot1049 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_simplepivot1051 = new BitSet(new ulong[]{0x20000403998000UL,0x11AUL,0x100020000000UL});
		public static readonly BitSet _expression_atom_in_simplepivot1053 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_simplepivot1055 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _IN_in_simplepivot1057 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_simplepivot1059 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000UL});
		public static readonly BitSet _172_in_simplepivot1061 = new BitSet(new ulong[]{0x30000403998000UL,0x11AUL,0x8002900820000000UL});
		public static readonly BitSet _WS_in_simplepivot1063 = new BitSet(new ulong[]{0x30000403998000UL,0x11AUL,0x8002900020000000UL});
		public static readonly BitSet _expression_list_in_simplepivot1066 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200800000000UL});
		public static readonly BitSet _WS_in_simplepivot1068 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _173_in_simplepivot1071 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_simplepivot1074 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000000UL});
		public static readonly BitSet _WITH_in_simplepivot1076 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_simplepivot1078 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000UL});
		public static readonly BitSet _172_in_simplepivot1080 = new BitSet(new ulong[]{0x0UL,0x100UL,0x800000000UL});
		public static readonly BitSet _WS_in_simplepivot1082 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _with_options_in_simplepivot1085 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200800000000UL});
		public static readonly BitSet _WS_in_simplepivot1087 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _173_in_simplepivot1090 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200800000000UL});
		public static readonly BitSet _WS_in_simplepivot1093 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _173_in_simplepivot1096 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _172_in_subquery1106 = new BitSet(new ulong[]{0x4000000000000000UL,0x0UL,0x100800000000UL});
		public static readonly BitSet _WS_in_subquery1108 = new BitSet(new ulong[]{0x4000000000000000UL,0x0UL,0x100000000000UL});
		public static readonly BitSet _select_command_in_subquery1111 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200800000000UL});
		public static readonly BitSet _WS_in_subquery1113 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _173_in_subquery1116 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _187_in_file1135 = new BitSet(new ulong[]{0x0UL,0x8UL,0x820000000UL});
		public static readonly BitSet _WS_in_file1137 = new BitSet(new ulong[]{0x0UL,0x8UL,0x20000000UL});
		public static readonly BitSet _file_spec_in_file1140 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000800000000UL});
		public static readonly BitSet _WS_in_file1143 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _file_options_in_file1145 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000800000000UL});
		public static readonly BitSet _WS_in_file1149 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000000000UL});
		public static readonly BitSet _188_in_file1152 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _187_in_file1168 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100800000000UL});
		public static readonly BitSet _WS_in_file1170 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000UL});
		public static readonly BitSet _subquery_in_file1173 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000800000000UL});
		public static readonly BitSet _WS_in_file1175 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000000000UL});
		public static readonly BitSet _188_in_file1178 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SIMPLE_FILE_in_file1191 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _string_in_file_spec1210 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_in_file_spec1215 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _file_option_in_file_options1227 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_file_options1230 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _file_option_in_file_options1232 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800000000UL});
		public static readonly BitSet _177_in_file_option1246 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _file_option_name_in_file_option1248 = new BitSet(new ulong[]{0x2UL,0x0UL,0x100000800000000UL});
		public static readonly BitSet _WS_in_file_option1252 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000000UL});
		public static readonly BitSet _184_in_file_option1255 = new BitSet(new ulong[]{0x20000000000000UL,0x108UL,0x820000000UL});
		public static readonly BitSet _WS_in_file_option1257 = new BitSet(new ulong[]{0x20000000000000UL,0x108UL,0x20000000UL});
		public static readonly BitSet _file_option_value_in_file_option1260 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_file_option_name1284 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_file_option_value1296 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_file_option_value1300 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_file_option_value1304 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_in_file_option_value1308 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _with_option_in_with_options1320 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1000800000000UL});
		public static readonly BitSet _WS_in_with_options1323 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000000UL});
		public static readonly BitSet _176_in_with_options1326 = new BitSet(new ulong[]{0x0UL,0x100UL,0x800000000UL});
		public static readonly BitSet _WS_in_with_options1328 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _with_option_in_with_options1331 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1000800000000UL});
		public static readonly BitSet _file_option_name_in_with_option1345 = new BitSet(new ulong[]{0x2UL,0x0UL,0x100000800000000UL});
		public static readonly BitSet _WS_in_with_option1349 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000000UL});
		public static readonly BitSet _184_in_with_option1352 = new BitSet(new ulong[]{0x20000000000000UL,0x108UL,0x820000000UL});
		public static readonly BitSet _WS_in_with_option1354 = new BitSet(new ulong[]{0x20000000000000UL,0x108UL,0x20000000UL});
		public static readonly BitSet _file_option_value_in_with_option1357 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHERE_in_where_clause1382 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_where_clause1384 = new BitSet(new ulong[]{0x30000403998000UL,0x11AUL,0x8002900020000000UL});
		public static readonly BitSet _expression_in_where_clause1386 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GROUP_in_groupby_clause1405 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_groupby_clause1407 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _BY_in_groupby_clause1409 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_groupby_clause1411 = new BitSet(new ulong[]{0x30000403998000UL,0x11AUL,0x8002900020000000UL});
		public static readonly BitSet _orderby_column_list_in_groupby_clause1413 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _HAVING_in_having_clause1434 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_having_clause1436 = new BitSet(new ulong[]{0x30000403998000UL,0x11AUL,0x8002900020000000UL});
		public static readonly BitSet _expression_in_having_clause1438 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ORDER_in_orderby_clause1459 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_orderby_clause1461 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _BY_in_orderby_clause1463 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_orderby_clause1465 = new BitSet(new ulong[]{0x30000403998000UL,0x11AUL,0x8002900020000000UL});
		public static readonly BitSet _orderby_column_list_in_orderby_clause1467 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _orderby_column_in_orderby_column_list1488 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1000800000000UL});
		public static readonly BitSet _WS_in_orderby_column_list1491 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000000UL});
		public static readonly BitSet _176_in_orderby_column_list1494 = new BitSet(new ulong[]{0x30000403998000UL,0x11AUL,0x8002900820000000UL});
		public static readonly BitSet _WS_in_orderby_column_list1496 = new BitSet(new ulong[]{0x30000403998000UL,0x11AUL,0x8002900020000000UL});
		public static readonly BitSet _orderby_column_in_orderby_column_list1499 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1000800000000UL});
		public static readonly BitSet _expression_in_orderby_column1519 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_orderby_column1522 = new BitSet(new ulong[]{0x200000008000200UL});
		public static readonly BitSet _orderby_direction_in_orderby_column1524 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASC_in_orderby_direction1549 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DESC_in_orderby_direction1558 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ORIG_in_orderby_direction1567 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _USE_in_use_command1585 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_use_command1587 = new BitSet(new ulong[]{0x0UL,0x2UL,0x800000000000000UL});
		public static readonly BitSet _file_in_use_command1589 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DECLARE_in_declare_command1611 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_declare_command1613 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20000000UL});
		public static readonly BitSet _declaration_list_in_declare_command1615 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_in_declaration_list1632 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1000800000000UL});
		public static readonly BitSet _WS_in_declaration_list1635 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000000UL});
		public static readonly BitSet _176_in_declaration_list1638 = new BitSet(new ulong[]{0x0UL,0x0UL,0x820000000UL});
		public static readonly BitSet _WS_in_declaration_list1640 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20000000UL});
		public static readonly BitSet _declaration_in_declaration_list1643 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1000800000000UL});
		public static readonly BitSet _variable_in_declaration1667 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_declaration1669 = new BitSet(new ulong[]{0x100UL,0x100UL});
		public static readonly BitSet _AS_in_declaration1672 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_declaration1674 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _datatype_in_declaration1678 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CREATE_in_create_view_command1703 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_create_view_command1705 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _VIEW_in_create_view_command1707 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_create_view_command1709 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _view_name_in_create_view_command1711 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100800000000UL});
		public static readonly BitSet _WS_in_create_view_command1714 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000UL});
		public static readonly BitSet _172_in_create_view_command1717 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20000000UL});
		public static readonly BitSet _declaration_list_in_create_view_command1719 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _173_in_create_view_command1721 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_create_view_command1725 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _AS_in_create_view_command1727 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_create_view_command1729 = new BitSet(new ulong[]{0x4000000000000000UL,0x0UL,0x100000000000UL});
		public static readonly BitSet _select_command_in_create_view_command1731 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DROP_in_drop_view_command1757 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_drop_view_command1759 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _VIEW_in_drop_view_command1761 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_drop_view_command1763 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _view_name_in_drop_view_command1765 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_view_name1785 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DROP_in_drop_table_command1807 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_drop_table_command1809 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _TABLE_in_drop_table_command1811 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_drop_table_command1813 = new BitSet(new ulong[]{0x0UL,0x2UL,0x800000000000000UL});
		public static readonly BitSet _file_in_drop_table_command1815 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SET_in_set_command1839 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_set_command1841 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20000000UL});
		public static readonly BitSet _variable_in_set_command1843 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000800000000UL});
		public static readonly BitSet _WS_in_set_command1845 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000000UL});
		public static readonly BitSet _184_in_set_command1848 = new BitSet(new ulong[]{0x30000403998000UL,0x11AUL,0x8002900820000000UL});
		public static readonly BitSet _WS_in_set_command1850 = new BitSet(new ulong[]{0x30000403998000UL,0x11AUL,0x8002900020000000UL});
		public static readonly BitSet _expression_in_set_command1853 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_expression_list1878 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1000800000000UL});
		public static readonly BitSet _WS_in_expression_list1881 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000000UL});
		public static readonly BitSet _176_in_expression_list1884 = new BitSet(new ulong[]{0x30000403998000UL,0x11AUL,0x8002900820000000UL});
		public static readonly BitSet _WS_in_expression_list1886 = new BitSet(new ulong[]{0x30000403998000UL,0x11AUL,0x8002900020000000UL});
		public static readonly BitSet _expression_in_expression_list1889 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1000800000000UL});
		public static readonly BitSet _select_command_in_expression_list_or_select_command1918 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_list_in_expression_list_or_select_command1923 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_7_in_expression1936 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_6_in_expression_71952 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_expression_71959 = new BitSet(new ulong[]{0x95080000000800UL,0x0UL,0x7E0038000000000UL});
		public static readonly BitSet _op_7_in_expression_71964 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_expression_71966 = new BitSet(new ulong[]{0x30000403998000UL,0x11AUL,0x8002900020000000UL});
		public static readonly BitSet _expression_6_in_expression_71970 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800000000UL});
		public static readonly BitSet _IN_in_expression_71989 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100800000000UL});
		public static readonly BitSet _WS_in_expression_71991 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000UL});
		public static readonly BitSet _172_in_expression_71994 = new BitSet(new ulong[]{0x4030000403998000UL,0x11AUL,0x8002900820000000UL});
		public static readonly BitSet _WS_in_expression_71996 = new BitSet(new ulong[]{0x4030000403998000UL,0x11AUL,0x8002900020000000UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_71999 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200800000000UL});
		public static readonly BitSet _WS_in_expression_72001 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _173_in_expression_72004 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800000000UL});
		public static readonly BitSet _NOT_in_expression_72022 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_expression_72024 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _IN_in_expression_72026 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100800000000UL});
		public static readonly BitSet _WS_in_expression_72028 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000UL});
		public static readonly BitSet _172_in_expression_72031 = new BitSet(new ulong[]{0x4030000403998000UL,0x11AUL,0x8002900820000000UL});
		public static readonly BitSet _WS_in_expression_72033 = new BitSet(new ulong[]{0x4030000403998000UL,0x11AUL,0x8002900020000000UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_72037 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200800000000UL});
		public static readonly BitSet _WS_in_expression_72040 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _173_in_expression_72043 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800000000UL});
		public static readonly BitSet _op_4_in_expression_72061 = new BitSet(new ulong[]{0x80UL,0x4UL,0x800000000UL});
		public static readonly BitSet _WS_in_expression_72063 = new BitSet(new ulong[]{0x80UL,0x4UL});
		public static readonly BitSet _SOME_in_expression_72067 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100800000000UL});
		public static readonly BitSet _ANY_in_expression_72071 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100800000000UL});
		public static readonly BitSet _WS_in_expression_72074 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000UL});
		public static readonly BitSet _172_in_expression_72077 = new BitSet(new ulong[]{0x4030000403998000UL,0x11AUL,0x8002900020000000UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_72079 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _173_in_expression_72081 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800000000UL});
		public static readonly BitSet _op_4_in_expression_72101 = new BitSet(new ulong[]{0x20UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_expression_72103 = new BitSet(new ulong[]{0x20UL});
		public static readonly BitSet _ALL_in_expression_72106 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100800000000UL});
		public static readonly BitSet _WS_in_expression_72108 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000UL});
		public static readonly BitSet _172_in_expression_72111 = new BitSet(new ulong[]{0x4030000403998000UL,0x11AUL,0x8002900020000000UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_72113 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _173_in_expression_72115 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800000000UL});
		public static readonly BitSet _OR_in_op_72145 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BETWEEN_in_op_72154 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_72163 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_op_72165 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _BETWEEN_in_op_72167 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_5_in_expression_62186 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_expression_62193 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _op_6_in_expression_62195 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_expression_62197 = new BitSet(new ulong[]{0x30000403998000UL,0x11AUL,0x8002900020000000UL});
		public static readonly BitSet _expression_5_in_expression_62201 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800000000UL});
		public static readonly BitSet _AND_in_op_62229 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _op_5_in_expression_52247 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_expression_52249 = new BitSet(new ulong[]{0x30000403998000UL,0x11AUL,0x8002900020000000UL});
		public static readonly BitSet _expression_5_in_expression_52251 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_4_in_expression_52266 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_52277 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_3_in_expression_42296 = new BitSet(new ulong[]{0x15000000000002UL,0x0UL,0x7E0038800000000UL});
		public static readonly BitSet _WS_in_expression_42303 = new BitSet(new ulong[]{0x15000000000000UL,0x0UL,0x7E0038000000000UL});
		public static readonly BitSet _op_4_in_expression_42306 = new BitSet(new ulong[]{0x20000403998000UL,0x11AUL,0x8002900820000000UL});
		public static readonly BitSet _WS_in_expression_42308 = new BitSet(new ulong[]{0x20000403998000UL,0x11AUL,0x8002900020000000UL});
		public static readonly BitSet _expression_3_in_expression_42313 = new BitSet(new ulong[]{0x15000000000002UL,0x0UL,0x7E0038800000000UL});
		public static readonly BitSet _184_in_op_42339 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _186_in_op_42348 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _182_in_op_42358 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _183_in_op_42368 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _168_in_op_42377 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _169_in_op_42386 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _167_in_op_42395 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _185_in_op_42404 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _181_in_op_42414 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LIKE_in_op_42423 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_42432 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_op_42434 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _LIKE_in_op_42436 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MATCH_in_op_42445 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_42454 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_op_42456 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _MATCH_in_op_42458 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_2_in_expression_32477 = new BitSet(new ulong[]{0x2UL,0x0UL,0x6002880800000000UL});
		public static readonly BitSet _WS_in_expression_32484 = new BitSet(new ulong[]{0x0UL,0x0UL,0x6002880000000000UL});
		public static readonly BitSet _op_3_in_expression_32487 = new BitSet(new ulong[]{0x20000403998000UL,0x11AUL,0x8002900820000000UL});
		public static readonly BitSet _WS_in_expression_32489 = new BitSet(new ulong[]{0x20000403998000UL,0x11AUL,0x8002900020000000UL});
		public static readonly BitSet _expression_2_in_expression_32494 = new BitSet(new ulong[]{0x2UL,0x0UL,0x6002880800000000UL});
		public static readonly BitSet _175_in_op_32520 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _177_in_op_32529 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _171_in_op_32538 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _190_in_op_32547 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _189_in_op_32556 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_1_in_expression_22576 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8440800000000UL});
		public static readonly BitSet _WS_in_expression_22583 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8440000000000UL});
		public static readonly BitSet _op_2_in_expression_22586 = new BitSet(new ulong[]{0x20000403998000UL,0x11AUL,0x8002900820000000UL});
		public static readonly BitSet _WS_in_expression_22588 = new BitSet(new ulong[]{0x20000403998000UL,0x11AUL,0x8002900020000000UL});
		public static readonly BitSet _expression_1_in_expression_22593 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8440800000000UL});
		public static readonly BitSet _174_in_op_22619 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _179_in_op_22628 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _170_in_op_22637 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _op_1_in_expression_12653 = new BitSet(new ulong[]{0x20000403998000UL,0x11AUL,0x8002900820000000UL});
		public static readonly BitSet _WS_in_expression_12655 = new BitSet(new ulong[]{0x20000403998000UL,0x11AUL,0x8002900020000000UL});
		public static readonly BitSet _expression_1_in_expression_12658 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_atom_in_expression_12673 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _191_in_op_12683 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _175_in_op_12693 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _177_in_op_12702 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _number_in_expression_atom2717 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _string_in_expression_atom2730 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SYSTEMVAR_in_expression_atom2735 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_in_expression_atom2748 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _subquery_in_expression_atom2759 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _172_in_expression_atom2764 = new BitSet(new ulong[]{0x30000403998000UL,0x11AUL,0x8002900020000000UL});
		public static readonly BitSet _expression_in_expression_atom2766 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _173_in_expression_atom2768 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functioncall_or_column_in_expression_atom2777 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _specialfunctioncall_in_expression_atom2782 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _case_in_expression_atom2787 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXISTS_in_expression_atom2792 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100800000000UL});
		public static readonly BitSet _WS_in_expression_atom2794 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000UL});
		public static readonly BitSet _172_in_expression_atom2797 = new BitSet(new ulong[]{0x4000000000000000UL,0x0UL,0x100800000000UL});
		public static readonly BitSet _WS_in_expression_atom2799 = new BitSet(new ulong[]{0x4000000000000000UL,0x0UL,0x100000000000UL});
		public static readonly BitSet _select_command_in_expression_atom2802 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200800000000UL});
		public static readonly BitSet _WS_in_expression_atom2804 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _173_in_expression_atom2807 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_functioncall_or_column2827 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100800000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2829 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000UL});
		public static readonly BitSet _172_in_functioncall_or_column2832 = new BitSet(new ulong[]{0x30000403998000UL,0x11AUL,0x8002B00820000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2834 = new BitSet(new ulong[]{0x30000403998000UL,0x11AUL,0x8002B00020000000UL});
		public static readonly BitSet _expression_in_functioncall_or_column2838 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1200800000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2840 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1200000000000UL});
		public static readonly BitSet _176_in_functioncall_or_column2844 = new BitSet(new ulong[]{0x30000403998000UL,0x11AUL,0x8002900820000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2846 = new BitSet(new ulong[]{0x30000403998000UL,0x11AUL,0x8002900020000000UL});
		public static readonly BitSet _expression_in_functioncall_or_column2849 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1200800000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2851 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1200000000000UL});
		public static readonly BitSet _173_in_functioncall_or_column2858 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COUNT_in_functioncall_or_column2874 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100800000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2876 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000UL});
		public static readonly BitSet _172_in_functioncall_or_column2879 = new BitSet(new ulong[]{0x30000403998000UL,0x11AUL,0x8002900820000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2881 = new BitSet(new ulong[]{0x30000403998000UL,0x11AUL,0x8002900020000000UL});
		public static readonly BitSet _expression_in_functioncall_or_column2884 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200800000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2886 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _173_in_functioncall_or_column2889 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COUNT_in_functioncall_or_column2904 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100800000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2906 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000UL});
		public static readonly BitSet _172_in_functioncall_or_column2909 = new BitSet(new ulong[]{0x20000000UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2911 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _DISTINCT_in_functioncall_or_column2914 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2916 = new BitSet(new ulong[]{0x30000403998000UL,0x11AUL,0x8002900020000000UL});
		public static readonly BitSet _expression_in_functioncall_or_column2918 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200800000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2920 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _173_in_functioncall_or_column2923 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COUNT_in_functioncall_or_column2938 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100800000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2940 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000UL});
		public static readonly BitSet _172_in_functioncall_or_column2943 = new BitSet(new ulong[]{0x0UL,0x2UL,0x400800000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2945 = new BitSet(new ulong[]{0x0UL,0x2UL,0x400000000000UL});
		public static readonly BitSet _all_columns_in_functioncall_or_column2948 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200800000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2950 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _173_in_functioncall_or_column2953 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COUNT_in_functioncall_or_column2968 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100800000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2970 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000UL});
		public static readonly BitSet _172_in_functioncall_or_column2973 = new BitSet(new ulong[]{0x20000000UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2975 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _DISTINCT_in_functioncall_or_column2978 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2980 = new BitSet(new ulong[]{0x0UL,0x2UL,0x400000000000UL});
		public static readonly BitSet _all_columns_in_functioncall_or_column2982 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200800000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2984 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _173_in_functioncall_or_column2987 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _table_alias_in_functioncall_or_column3005 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000800000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column3007 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000000000UL});
		public static readonly BitSet _178_in_functioncall_or_column3010 = new BitSet(new ulong[]{0x0UL,0x2UL,0x800000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column3012 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _column_name_in_functioncall_or_column3017 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SIMPLE_FILE_in_column_name3040 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SIMPLE_FILE_in_table_alias3051 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CONVERT_in_specialfunctioncall3071 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100800000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3073 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000UL});
		public static readonly BitSet _172_in_specialfunctioncall3076 = new BitSet(new ulong[]{0x0UL,0x100UL,0x800000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3078 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _TOKEN_in_specialfunctioncall3081 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000800000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3083 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000000UL});
		public static readonly BitSet _176_in_specialfunctioncall3086 = new BitSet(new ulong[]{0x30000403998000UL,0x11AUL,0x8002900820000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3088 = new BitSet(new ulong[]{0x30000403998000UL,0x11AUL,0x8002900020000000UL});
		public static readonly BitSet _expression_in_specialfunctioncall3091 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1200800000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3093 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1200000000000UL});
		public static readonly BitSet _176_in_specialfunctioncall3097 = new BitSet(new ulong[]{0x0UL,0x8UL,0x800000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3099 = new BitSet(new ulong[]{0x0UL,0x8UL});
		public static readonly BitSet _STRING_in_specialfunctioncall3102 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200800000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3104 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _173_in_specialfunctioncall3109 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CAST_in_specialfunctioncall3127 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100800000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3129 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000UL});
		public static readonly BitSet _172_in_specialfunctioncall3132 = new BitSet(new ulong[]{0x30000403998000UL,0x11AUL,0x8002900820000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3134 = new BitSet(new ulong[]{0x30000403998000UL,0x11AUL,0x8002900020000000UL});
		public static readonly BitSet _expression_in_specialfunctioncall3137 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3139 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _AS_in_specialfunctioncall3141 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3143 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _datatype_in_specialfunctioncall3145 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200800000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3147 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _173_in_specialfunctioncall3150 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DATEADD_in_specialfunctioncall3165 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100800000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3167 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000UL});
		public static readonly BitSet _172_in_specialfunctioncall3170 = new BitSet(new ulong[]{0x0UL,0x100UL,0x800000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3172 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _datepart_in_specialfunctioncall3175 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000800000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3177 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000000UL});
		public static readonly BitSet _176_in_specialfunctioncall3180 = new BitSet(new ulong[]{0x30000403998000UL,0x11AUL,0x8002900820000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3182 = new BitSet(new ulong[]{0x30000403998000UL,0x11AUL,0x8002900020000000UL});
		public static readonly BitSet _expression_in_specialfunctioncall3185 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000800000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3187 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000000UL});
		public static readonly BitSet _176_in_specialfunctioncall3190 = new BitSet(new ulong[]{0x30000403998000UL,0x11AUL,0x8002900820000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3192 = new BitSet(new ulong[]{0x30000403998000UL,0x11AUL,0x8002900020000000UL});
		public static readonly BitSet _expression_in_specialfunctioncall3195 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200800000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3197 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _173_in_specialfunctioncall3200 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DATEDIFF_in_specialfunctioncall3218 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100800000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3220 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000UL});
		public static readonly BitSet _172_in_specialfunctioncall3223 = new BitSet(new ulong[]{0x0UL,0x100UL,0x800000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3225 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _datepart_in_specialfunctioncall3228 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000800000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3230 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000000UL});
		public static readonly BitSet _176_in_specialfunctioncall3233 = new BitSet(new ulong[]{0x30000403998000UL,0x11AUL,0x8002900820000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3235 = new BitSet(new ulong[]{0x30000403998000UL,0x11AUL,0x8002900020000000UL});
		public static readonly BitSet _expression_in_specialfunctioncall3238 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000800000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3240 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000000UL});
		public static readonly BitSet _176_in_specialfunctioncall3243 = new BitSet(new ulong[]{0x30000403998000UL,0x11AUL,0x8002900820000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3245 = new BitSet(new ulong[]{0x30000403998000UL,0x11AUL,0x8002900020000000UL});
		public static readonly BitSet _expression_in_specialfunctioncall3248 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200800000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3250 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _173_in_specialfunctioncall3253 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DATEPART_in_specialfunctioncall3271 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100800000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3273 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000UL});
		public static readonly BitSet _172_in_specialfunctioncall3276 = new BitSet(new ulong[]{0x0UL,0x100UL,0x800000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3278 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _datepart_in_specialfunctioncall3281 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000800000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3283 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000000UL});
		public static readonly BitSet _176_in_specialfunctioncall3286 = new BitSet(new ulong[]{0x30000403998000UL,0x11AUL,0x8002900820000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3288 = new BitSet(new ulong[]{0x30000403998000UL,0x11AUL,0x8002900020000000UL});
		public static readonly BitSet _expression_in_specialfunctioncall3291 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200800000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3293 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _173_in_specialfunctioncall3296 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_datepart3320 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_number3340 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_string3348 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_datatype3368 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VARIABLE_in_variable3380 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CASE_in_case3400 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_case3402 = new BitSet(new ulong[]{0x30000703998000UL,0x11AUL,0x8002900120000000UL});
		public static readonly BitSet _expression_in_case3405 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_case3407 = new BitSet(new ulong[]{0x300000000UL,0x0UL,0x100000000UL});
		public static readonly BitSet _case_when_in_case3412 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_case3414 = new BitSet(new ulong[]{0x300000000UL,0x0UL,0x100000000UL});
		public static readonly BitSet _case_else_in_case3419 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_case3421 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _END_in_case3425 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHEN_in_case_when3453 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_case_when3455 = new BitSet(new ulong[]{0x30000403998000UL,0x11AUL,0x8002900020000000UL});
		public static readonly BitSet _expression_in_case_when3459 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_case_when3461 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _THEN_in_case_when3463 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_case_when3465 = new BitSet(new ulong[]{0x30000403998000UL,0x11AUL,0x8002900020000000UL});
		public static readonly BitSet _expression_in_case_when3469 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ELSE_in_case_else3494 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_case_else3496 = new BitSet(new ulong[]{0x30000403998000UL,0x11AUL,0x8002900020000000UL});
		public static readonly BitSet _expression_in_case_else3498 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _172_in_synpred1_gql594 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _subquery_in_synpred2_gql979 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_synpred2_gql981 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _SIMPLEPIVOT_in_synpred2_gql983 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SELECT_in_synpred3_gql1913 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _subquery_in_synpred4_gql2754 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  FxGqlLib 
