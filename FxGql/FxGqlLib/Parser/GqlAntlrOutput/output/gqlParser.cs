//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g 2012-10-05 14:21:04

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591


// `XXX' does not need a CLSCompliant attribute because the assembly is not marked as CLS-compliant (CS3021)
#pragma warning disable 3021
// The private field `XXX' is assigned but its value is never used (CS0414)
#pragma warning disable 414


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  FxGqlLib 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class gqlParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "A", "ALL", "AND", "ANY", "AS", "ASC", "B", "BETWEEN", "BOTTOM", "BY", "C", "CASE", "CAST", "COMMENT_BLOCK", "COMMENT_LINE", "CONVERT", "COUNT", "CREATE", "D", "DATEADD", "DATEDIFF", "DATEPART", "DECLARE", "DESC", "DIGIT", "DISTINCT", "DROP", "E", "ELSE", "END", "EXISTS", "F", "FROM", "G", "GROUP", "H", "HAVING", "I", "IN", "INTO", "J", "K", "L", "LIKE", "M", "MATCH", "N", "NOT", "NUMBER", "O", "OR", "ORDER", "ORIG", "P", "Q", "R", "S", "SELECT", "SET", "SIMPLE_FILE", "SOME", "STRING", "SYSTEMVAR", "T", "TABLE", "THEN", "TOKEN", "TOP", "T_ALL", "T_ALLCOLUMNS", "T_AND", "T_ANY", "T_BETWEEN", "T_BITWISE_AND", "T_BITWISE_NOT", "T_BITWISE_OR", "T_BITWISE_XOR", "T_BOTTOM", "T_CASE", "T_CASE_ELSE", "T_CASE_WHEN", "T_COLUMN", "T_COLUMNLIST", "T_CONVERT", "T_COUNT", "T_CREATE_VIEW", "T_DATEPART", "T_DECLARATION", "T_DECLARE", "T_DISTINCT", "T_DISTINCTCOUNT", "T_DIVIDE", "T_DROP_TABLE", "T_DROP_VIEW", "T_EQUAL", "T_EXISTS", "T_EXPRESSIONLIST", "T_FILE", "T_FILEOPTION", "T_FILESUBQUERY", "T_FROM", "T_FUNCTIONCALL", "T_GREATER", "T_GROUPBY", "T_GROUPBY_ORIG", "T_HAVING", "T_IN", "T_INTEGER", "T_INTO", "T_LESS", "T_LIKE", "T_MATCH", "T_MINUS", "T_MODULO", "T_NOT", "T_NOTBETWEEN", "T_NOTEQUAL", "T_NOTGREATER", "T_NOTIN", "T_NOTLESS", "T_NOTLIKE", "T_NOTMATCH", "T_OP_BINARY", "T_OP_UNARY", "T_OR", "T_ORDERBY", "T_ORDERBY_ASC", "T_ORDERBY_COLUMN", "T_ORDERBY_DESC", "T_ORDERBY_ORIG", "T_PLUS", "T_PRODUCT", "T_ROOT", "T_SELECT", "T_SELECT_SIMPLE", "T_SELECT_UNION", "T_SET_VARIABLE", "T_STRING", "T_SUBQUERY", "T_SYSTEMVAR", "T_TABLE_ALIAS", "T_TOP", "T_USE", "T_VARIABLE", "T_VIEW", "T_VIEW_NAME", "T_WHERE", "U", "UNION", "USE", "V", "VARIABLE", "VIEW", "W", "WHEN", "WHERE", "WS", "X", "Y", "Z", "'!<'", "'!='", "'!>'", "'%'", "'&'", "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", "';'", "'<'", "'<='", "'<>'", "'='", "'>'", "'>='", "'['", "']'", "'^'", "'|'", "'~'"
	};
	public const int EOF=-1;
	public const int T__164=164;
	public const int T__165=165;
	public const int T__166=166;
	public const int T__167=167;
	public const int T__168=168;
	public const int T__169=169;
	public const int T__170=170;
	public const int T__171=171;
	public const int T__172=172;
	public const int T__173=173;
	public const int T__174=174;
	public const int T__175=175;
	public const int T__176=176;
	public const int T__177=177;
	public const int T__178=178;
	public const int T__179=179;
	public const int T__180=180;
	public const int T__181=181;
	public const int T__182=182;
	public const int T__183=183;
	public const int T__184=184;
	public const int T__185=185;
	public const int T__186=186;
	public const int T__187=187;
	public const int T__188=188;
	public const int A=4;
	public const int ALL=5;
	public const int AND=6;
	public const int ANY=7;
	public const int AS=8;
	public const int ASC=9;
	public const int B=10;
	public const int BETWEEN=11;
	public const int BOTTOM=12;
	public const int BY=13;
	public const int C=14;
	public const int CASE=15;
	public const int CAST=16;
	public const int COMMENT_BLOCK=17;
	public const int COMMENT_LINE=18;
	public const int CONVERT=19;
	public const int COUNT=20;
	public const int CREATE=21;
	public const int D=22;
	public const int DATEADD=23;
	public const int DATEDIFF=24;
	public const int DATEPART=25;
	public const int DECLARE=26;
	public const int DESC=27;
	public const int DIGIT=28;
	public const int DISTINCT=29;
	public const int DROP=30;
	public const int E=31;
	public const int ELSE=32;
	public const int END=33;
	public const int EXISTS=34;
	public const int F=35;
	public const int FROM=36;
	public const int G=37;
	public const int GROUP=38;
	public const int H=39;
	public const int HAVING=40;
	public const int I=41;
	public const int IN=42;
	public const int INTO=43;
	public const int J=44;
	public const int K=45;
	public const int L=46;
	public const int LIKE=47;
	public const int M=48;
	public const int MATCH=49;
	public const int N=50;
	public const int NOT=51;
	public const int NUMBER=52;
	public const int O=53;
	public const int OR=54;
	public const int ORDER=55;
	public const int ORIG=56;
	public const int P=57;
	public const int Q=58;
	public const int R=59;
	public const int S=60;
	public const int SELECT=61;
	public const int SET=62;
	public const int SIMPLE_FILE=63;
	public const int SOME=64;
	public const int STRING=65;
	public const int SYSTEMVAR=66;
	public const int T=67;
	public const int TABLE=68;
	public const int THEN=69;
	public const int TOKEN=70;
	public const int TOP=71;
	public const int T_ALL=72;
	public const int T_ALLCOLUMNS=73;
	public const int T_AND=74;
	public const int T_ANY=75;
	public const int T_BETWEEN=76;
	public const int T_BITWISE_AND=77;
	public const int T_BITWISE_NOT=78;
	public const int T_BITWISE_OR=79;
	public const int T_BITWISE_XOR=80;
	public const int T_BOTTOM=81;
	public const int T_CASE=82;
	public const int T_CASE_ELSE=83;
	public const int T_CASE_WHEN=84;
	public const int T_COLUMN=85;
	public const int T_COLUMNLIST=86;
	public const int T_CONVERT=87;
	public const int T_COUNT=88;
	public const int T_CREATE_VIEW=89;
	public const int T_DATEPART=90;
	public const int T_DECLARATION=91;
	public const int T_DECLARE=92;
	public const int T_DISTINCT=93;
	public const int T_DISTINCTCOUNT=94;
	public const int T_DIVIDE=95;
	public const int T_DROP_TABLE=96;
	public const int T_DROP_VIEW=97;
	public const int T_EQUAL=98;
	public const int T_EXISTS=99;
	public const int T_EXPRESSIONLIST=100;
	public const int T_FILE=101;
	public const int T_FILEOPTION=102;
	public const int T_FILESUBQUERY=103;
	public const int T_FROM=104;
	public const int T_FUNCTIONCALL=105;
	public const int T_GREATER=106;
	public const int T_GROUPBY=107;
	public const int T_GROUPBY_ORIG=108;
	public const int T_HAVING=109;
	public const int T_IN=110;
	public const int T_INTEGER=111;
	public const int T_INTO=112;
	public const int T_LESS=113;
	public const int T_LIKE=114;
	public const int T_MATCH=115;
	public const int T_MINUS=116;
	public const int T_MODULO=117;
	public const int T_NOT=118;
	public const int T_NOTBETWEEN=119;
	public const int T_NOTEQUAL=120;
	public const int T_NOTGREATER=121;
	public const int T_NOTIN=122;
	public const int T_NOTLESS=123;
	public const int T_NOTLIKE=124;
	public const int T_NOTMATCH=125;
	public const int T_OP_BINARY=126;
	public const int T_OP_UNARY=127;
	public const int T_OR=128;
	public const int T_ORDERBY=129;
	public const int T_ORDERBY_ASC=130;
	public const int T_ORDERBY_COLUMN=131;
	public const int T_ORDERBY_DESC=132;
	public const int T_ORDERBY_ORIG=133;
	public const int T_PLUS=134;
	public const int T_PRODUCT=135;
	public const int T_ROOT=136;
	public const int T_SELECT=137;
	public const int T_SELECT_SIMPLE=138;
	public const int T_SELECT_UNION=139;
	public const int T_SET_VARIABLE=140;
	public const int T_STRING=141;
	public const int T_SUBQUERY=142;
	public const int T_SYSTEMVAR=143;
	public const int T_TABLE_ALIAS=144;
	public const int T_TOP=145;
	public const int T_USE=146;
	public const int T_VARIABLE=147;
	public const int T_VIEW=148;
	public const int T_VIEW_NAME=149;
	public const int T_WHERE=150;
	public const int U=151;
	public const int UNION=152;
	public const int USE=153;
	public const int V=154;
	public const int VARIABLE=155;
	public const int VIEW=156;
	public const int W=157;
	public const int WHEN=158;
	public const int WHERE=159;
	public const int WS=160;
	public const int X=161;
	public const int Y=162;
	public const int Z=163;

	#if ANTLR_DEBUG
		private static readonly bool[] decisionCanBacktrack =
			new bool[]
			{
				false, // invalid decision
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, true, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, true, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false
			};
	#else
		private static readonly bool[] decisionCanBacktrack = new bool[0];
	#endif
	public gqlParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public gqlParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}
	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return gqlParser.tokenNames; } }
	public override string GrammarFileName { get { return "C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g"; } }


	[Conditional("ANTLR_TRACE")]
	protected virtual void OnCreated() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

	#region Rules

	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_parse() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_parse() {}

	// $ANTLR start "parse"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:111:1: parse : ( WS )? ( commands ( WS )? )? EOF -> ^( T_ROOT ( commands )? ) ;
	[GrammarRule("parse")]
	private AstParserRuleReturnScope<object, IToken> parse()
	{
		EnterRule_parse();
		EnterRule("parse", 1);
		TraceIn("parse", 1);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS1 = default(IToken);
	    IToken WS3 = default(IToken);
	    IToken EOF4 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> commands2 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS1_tree = default(object);
	    object WS3_tree = default(object);
	    object EOF4_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
	    RewriteRuleSubtreeStream stream_commands=new RewriteRuleSubtreeStream(adaptor,"rule commands");
		try { DebugEnterRule(GrammarFileName, "parse");
		DebugLocation(111, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:112:2: ( ( WS )? ( commands ( WS )? )? EOF -> ^( T_ROOT ( commands )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:112:4: ( WS )? ( commands ( WS )? )? EOF
			{
			DebugLocation(112, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:112:4: ( WS )?
			int alt1=2;
			try { DebugEnterSubRule(1);
			try { DebugEnterDecision(1, decisionCanBacktrack[1]);
			int LA1_0 = input.LA(1);

			if ((LA1_0==WS))
			{
				alt1 = 1;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:112:4: WS
				{
				DebugLocation(112, 4);
				WS1=(IToken)Match(input,WS,Follow._WS_in_parse398); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS1);


				}
				break;

			}
			} finally { DebugExitSubRule(1); }

			DebugLocation(112, 8);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:112:8: ( commands ( WS )? )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, decisionCanBacktrack[3]);
			int LA3_0 = input.LA(1);

			if ((LA3_0==CREATE||LA3_0==DECLARE||LA3_0==DROP||(LA3_0>=SELECT && LA3_0<=SET)||LA3_0==USE||LA3_0==169))
			{
				alt3 = 1;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:112:9: commands ( WS )?
				{
				DebugLocation(112, 9);
				PushFollow(Follow._commands_in_parse402);
				commands2=commands();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_commands.Add(commands2.Tree);
				DebugLocation(112, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:112:18: ( WS )?
				int alt2=2;
				try { DebugEnterSubRule(2);
				try { DebugEnterDecision(2, decisionCanBacktrack[2]);
				int LA2_0 = input.LA(1);

				if ((LA2_0==WS))
				{
					alt2 = 1;
				}
				} finally { DebugExitDecision(2); }
				switch (alt2)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:112:18: WS
					{
					DebugLocation(112, 18);
					WS3=(IToken)Match(input,WS,Follow._WS_in_parse404); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS3);


					}
					break;

				}
				} finally { DebugExitSubRule(2); }


				}
				break;

			}
			} finally { DebugExitSubRule(3); }

			DebugLocation(112, 24);
			EOF4=(IToken)Match(input,EOF,Follow._EOF_in_parse409); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EOF.Add(EOF4);



			{
			// AST REWRITE
			// elements: commands
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 113:2: -> ^( T_ROOT ( commands )? )
			{
				DebugLocation(113, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:113:5: ^( T_ROOT ( commands )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(113, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_ROOT, "T_ROOT"), root_1);

				DebugLocation(113, 14);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:113:14: ( commands )?
				if (stream_commands.HasNext)
				{
					DebugLocation(113, 14);
					adaptor.AddChild(root_1, stream_commands.NextTree());

				}
				stream_commands.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parse", 1);
			LeaveRule("parse", 1);
			LeaveRule_parse();
	    }
	 	DebugLocation(114, 1);
		} finally { DebugExitRule(GrammarFileName, "parse"); }
		return retval;

	}
	// $ANTLR end "parse"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_commands() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_commands() {}

	// $ANTLR start "commands"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:116:1: commands : command ( ( WS )? ';' ( WS )? command )* ( ( WS )? ';' )? -> ( command )+ ;
	[GrammarRule("commands")]
	private AstParserRuleReturnScope<object, IToken> commands()
	{
		EnterRule_commands();
		EnterRule("commands", 2);
		TraceIn("commands", 2);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS6 = default(IToken);
	    IToken char_literal7 = default(IToken);
	    IToken WS8 = default(IToken);
	    IToken WS10 = default(IToken);
	    IToken char_literal11 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> command5 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> command9 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS6_tree = default(object);
	    object char_literal7_tree = default(object);
	    object WS8_tree = default(object);
	    object WS10_tree = default(object);
	    object char_literal11_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_177=new RewriteRuleITokenStream(adaptor,"token 177");
	    RewriteRuleSubtreeStream stream_command=new RewriteRuleSubtreeStream(adaptor,"rule command");
		try { DebugEnterRule(GrammarFileName, "commands");
		DebugLocation(116, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:117:2: ( command ( ( WS )? ';' ( WS )? command )* ( ( WS )? ';' )? -> ( command )+ )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:117:4: command ( ( WS )? ';' ( WS )? command )* ( ( WS )? ';' )?
			{
			DebugLocation(117, 4);
			PushFollow(Follow._command_in_commands432);
			command5=command();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_command.Add(command5.Tree);
			DebugLocation(117, 12);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:117:12: ( ( WS )? ';' ( WS )? command )*
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, decisionCanBacktrack[6]);
				int LA6_0 = input.LA(1);

				if ((LA6_0==WS))
				{
					int LA6_1 = input.LA(2);

					if ((LA6_1==177))
					{
						int LA6_2 = input.LA(3);

						if ((LA6_2==WS))
						{
							int LA6_4 = input.LA(4);

							if ((LA6_4==CREATE||LA6_4==DECLARE||LA6_4==DROP||(LA6_4>=SELECT && LA6_4<=SET)||LA6_4==USE||LA6_4==169))
							{
								alt6 = 1;
							}


						}
						else if ((LA6_2==CREATE||LA6_2==DECLARE||LA6_2==DROP||(LA6_2>=SELECT && LA6_2<=SET)||LA6_2==USE||LA6_2==169))
						{
							alt6 = 1;
						}


					}


				}
				else if ((LA6_0==177))
				{
					int LA6_2 = input.LA(2);

					if ((LA6_2==WS))
					{
						int LA6_4 = input.LA(3);

						if ((LA6_4==CREATE||LA6_4==DECLARE||LA6_4==DROP||(LA6_4>=SELECT && LA6_4<=SET)||LA6_4==USE||LA6_4==169))
						{
							alt6 = 1;
						}


					}
					else if ((LA6_2==CREATE||LA6_2==DECLARE||LA6_2==DROP||(LA6_2>=SELECT && LA6_2<=SET)||LA6_2==USE||LA6_2==169))
					{
						alt6 = 1;
					}


				}


				} finally { DebugExitDecision(6); }
				switch ( alt6 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:117:13: ( WS )? ';' ( WS )? command
					{
					DebugLocation(117, 13);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:117:13: ( WS )?
					int alt4=2;
					try { DebugEnterSubRule(4);
					try { DebugEnterDecision(4, decisionCanBacktrack[4]);
					int LA4_0 = input.LA(1);

					if ((LA4_0==WS))
					{
						alt4 = 1;
					}
					} finally { DebugExitDecision(4); }
					switch (alt4)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:117:13: WS
						{
						DebugLocation(117, 13);
						WS6=(IToken)Match(input,WS,Follow._WS_in_commands435); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS6);


						}
						break;

					}
					} finally { DebugExitSubRule(4); }

					DebugLocation(117, 17);
					char_literal7=(IToken)Match(input,177,Follow._177_in_commands438); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_177.Add(char_literal7);

					DebugLocation(117, 21);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:117:21: ( WS )?
					int alt5=2;
					try { DebugEnterSubRule(5);
					try { DebugEnterDecision(5, decisionCanBacktrack[5]);
					int LA5_0 = input.LA(1);

					if ((LA5_0==WS))
					{
						alt5 = 1;
					}
					} finally { DebugExitDecision(5); }
					switch (alt5)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:117:21: WS
						{
						DebugLocation(117, 21);
						WS8=(IToken)Match(input,WS,Follow._WS_in_commands440); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS8);


						}
						break;

					}
					} finally { DebugExitSubRule(5); }

					DebugLocation(117, 25);
					PushFollow(Follow._command_in_commands443);
					command9=command();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_command.Add(command9.Tree);

					}
					break;

				default:
					goto loop6;
				}
			}

			loop6:
				;

			} finally { DebugExitSubRule(6); }

			DebugLocation(117, 35);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:117:35: ( ( WS )? ';' )?
			int alt8=2;
			try { DebugEnterSubRule(8);
			try { DebugEnterDecision(8, decisionCanBacktrack[8]);
			int LA8_0 = input.LA(1);

			if ((LA8_0==WS))
			{
				int LA8_1 = input.LA(2);

				if ((LA8_1==177))
				{
					alt8 = 1;
				}
			}
			else if ((LA8_0==177))
			{
				alt8 = 1;
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:117:36: ( WS )? ';'
				{
				DebugLocation(117, 36);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:117:36: ( WS )?
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, decisionCanBacktrack[7]);
				int LA7_0 = input.LA(1);

				if ((LA7_0==WS))
				{
					alt7 = 1;
				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:117:36: WS
					{
					DebugLocation(117, 36);
					WS10=(IToken)Match(input,WS,Follow._WS_in_commands448); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS10);


					}
					break;

				}
				} finally { DebugExitSubRule(7); }

				DebugLocation(117, 40);
				char_literal11=(IToken)Match(input,177,Follow._177_in_commands451); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_177.Add(char_literal11);


				}
				break;

			}
			} finally { DebugExitSubRule(8); }



			{
			// AST REWRITE
			// elements: command
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 118:2: -> ( command )+
			{
				DebugLocation(118, 5);
				if (!(stream_command.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_command.HasNext )
				{
					DebugLocation(118, 5);
					adaptor.AddChild(root_0, stream_command.NextTree());

				}
				stream_command.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("commands", 2);
			LeaveRule("commands", 2);
			LeaveRule_commands();
	    }
	 	DebugLocation(119, 1);
		} finally { DebugExitRule(GrammarFileName, "commands"); }
		return retval;

	}
	// $ANTLR end "commands"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_command() {}

	// $ANTLR start "command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:121:1: command : ( select_command | use_command | declare_command | set_command | create_view_command | drop_view_command | drop_table_command );
	[GrammarRule("command")]
	private AstParserRuleReturnScope<object, IToken> command()
	{
		EnterRule_command();
		EnterRule("command", 3);
		TraceIn("command", 3);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> select_command12 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> use_command13 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> declare_command14 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> set_command15 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> create_view_command16 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> drop_view_command17 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> drop_table_command18 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "command");
		DebugLocation(121, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:122:2: ( select_command | use_command | declare_command | set_command | create_view_command | drop_view_command | drop_table_command )
			int alt9=7;
			try { DebugEnterDecision(9, decisionCanBacktrack[9]);
			switch (input.LA(1))
			{
			case SELECT:
			case 169:
				{
				alt9 = 1;
				}
				break;
			case USE:
				{
				alt9 = 2;
				}
				break;
			case DECLARE:
				{
				alt9 = 3;
				}
				break;
			case SET:
				{
				alt9 = 4;
				}
				break;
			case CREATE:
				{
				alt9 = 5;
				}
				break;
			case DROP:
				{
				int LA9_6 = input.LA(2);

				if ((LA9_6==WS))
				{
					int LA9_7 = input.LA(3);

					if ((LA9_7==VIEW))
					{
						alt9 = 6;
					}
					else if ((LA9_7==TABLE))
					{
						alt9 = 7;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 9, 7, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 6, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:122:4: select_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(122, 4);
				PushFollow(Follow._select_command_in_command471);
				select_command12=select_command();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, select_command12.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:123:4: use_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(123, 4);
				PushFollow(Follow._use_command_in_command476);
				use_command13=use_command();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, use_command13.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:124:4: declare_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(124, 4);
				PushFollow(Follow._declare_command_in_command481);
				declare_command14=declare_command();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, declare_command14.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:125:4: set_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(125, 4);
				PushFollow(Follow._set_command_in_command486);
				set_command15=set_command();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, set_command15.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:126:4: create_view_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(126, 4);
				PushFollow(Follow._create_view_command_in_command491);
				create_view_command16=create_view_command();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, create_view_command16.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:127:4: drop_view_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(127, 4);
				PushFollow(Follow._drop_view_command_in_command496);
				drop_view_command17=drop_view_command();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, drop_view_command17.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:128:4: drop_table_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(128, 4);
				PushFollow(Follow._drop_table_command_in_command501);
				drop_table_command18=drop_table_command();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, drop_table_command18.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("command", 3);
			LeaveRule("command", 3);
			LeaveRule_command();
	    }
	 	DebugLocation(129, 1);
		} finally { DebugExitRule(GrammarFileName, "command"); }
		return retval;

	}
	// $ANTLR end "command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_select_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_select_command() {}

	// $ANTLR start "select_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:134:1: select_command : select_command_union ( WS orderby_clause )? -> ^( T_SELECT select_command_union ( orderby_clause )? ) ;
	[GrammarRule("select_command")]
	private AstParserRuleReturnScope<object, IToken> select_command()
	{
		EnterRule_select_command();
		EnterRule("select_command", 4);
		TraceIn("select_command", 4);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS20 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> select_command_union19 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> orderby_clause21 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS20_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_select_command_union=new RewriteRuleSubtreeStream(adaptor,"rule select_command_union");
	    RewriteRuleSubtreeStream stream_orderby_clause=new RewriteRuleSubtreeStream(adaptor,"rule orderby_clause");
		try { DebugEnterRule(GrammarFileName, "select_command");
		DebugLocation(134, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:135:2: ( select_command_union ( WS orderby_clause )? -> ^( T_SELECT select_command_union ( orderby_clause )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:135:4: select_command_union ( WS orderby_clause )?
			{
			DebugLocation(135, 4);
			PushFollow(Follow._select_command_union_in_select_command515);
			select_command_union19=select_command_union();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_select_command_union.Add(select_command_union19.Tree);
			DebugLocation(135, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:135:25: ( WS orderby_clause )?
			int alt10=2;
			try { DebugEnterSubRule(10);
			try { DebugEnterDecision(10, decisionCanBacktrack[10]);
			int LA10_0 = input.LA(1);

			if ((LA10_0==WS))
			{
				int LA10_1 = input.LA(2);

				if ((LA10_1==ORDER))
				{
					alt10 = 1;
				}
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:135:26: WS orderby_clause
				{
				DebugLocation(135, 26);
				WS20=(IToken)Match(input,WS,Follow._WS_in_select_command518); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS20);

				DebugLocation(135, 29);
				PushFollow(Follow._orderby_clause_in_select_command520);
				orderby_clause21=orderby_clause();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_orderby_clause.Add(orderby_clause21.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(10); }



			{
			// AST REWRITE
			// elements: orderby_clause, select_command_union
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 136:3: -> ^( T_SELECT select_command_union ( orderby_clause )? )
			{
				DebugLocation(136, 6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:136:6: ^( T_SELECT select_command_union ( orderby_clause )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(136, 8);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SELECT, "T_SELECT"), root_1);

				DebugLocation(136, 17);
				adaptor.AddChild(root_1, stream_select_command_union.NextTree());
				DebugLocation(136, 38);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:136:38: ( orderby_clause )?
				if (stream_orderby_clause.HasNext)
				{
					DebugLocation(136, 38);
					adaptor.AddChild(root_1, stream_orderby_clause.NextTree());

				}
				stream_orderby_clause.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("select_command", 4);
			LeaveRule("select_command", 4);
			LeaveRule_select_command();
	    }
	 	DebugLocation(137, 1);
		} finally { DebugExitRule(GrammarFileName, "select_command"); }
		return retval;

	}
	// $ANTLR end "select_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_select_command_union() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_select_command_union() {}

	// $ANTLR start "select_command_union"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:142:1: select_command_union : (a= select_command_simple -> $a) ( WS UNION WS b= select_command_simple -> ^( T_SELECT_UNION $select_command_union $b) )* ;
	[GrammarRule("select_command_union")]
	private AstParserRuleReturnScope<object, IToken> select_command_union()
	{
		EnterRule_select_command_union();
		EnterRule("select_command_union", 5);
		TraceIn("select_command_union", 5);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS22 = default(IToken);
	    IToken UNION23 = default(IToken);
	    IToken WS24 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);

	    object WS22_tree = default(object);
	    object UNION23_tree = default(object);
	    object WS24_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_UNION=new RewriteRuleITokenStream(adaptor,"token UNION");
	    RewriteRuleSubtreeStream stream_select_command_simple=new RewriteRuleSubtreeStream(adaptor,"rule select_command_simple");
		try { DebugEnterRule(GrammarFileName, "select_command_union");
		DebugLocation(142, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:143:2: ( (a= select_command_simple -> $a) ( WS UNION WS b= select_command_simple -> ^( T_SELECT_UNION $select_command_union $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:143:4: (a= select_command_simple -> $a) ( WS UNION WS b= select_command_simple -> ^( T_SELECT_UNION $select_command_union $b) )*
			{
			DebugLocation(143, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:143:4: (a= select_command_simple -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:143:5: a= select_command_simple
			{
			DebugLocation(143, 6);
			PushFollow(Follow._select_command_simple_in_select_command_union552);
			a=select_command_simple();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_select_command_simple.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 143:28: -> $a
			{
				DebugLocation(143, 31);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(143, 34);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:143:34: ( WS UNION WS b= select_command_simple -> ^( T_SELECT_UNION $select_command_union $b) )*
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, decisionCanBacktrack[11]);
				int LA11_0 = input.LA(1);

				if ((LA11_0==WS))
				{
					int LA11_1 = input.LA(2);

					if ((LA11_1==UNION))
					{
						alt11 = 1;
					}


				}


				} finally { DebugExitDecision(11); }
				switch ( alt11 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:143:35: WS UNION WS b= select_command_simple
					{
					DebugLocation(143, 35);
					WS22=(IToken)Match(input,WS,Follow._WS_in_select_command_union559); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS22);

					DebugLocation(143, 38);
					UNION23=(IToken)Match(input,UNION,Follow._UNION_in_select_command_union561); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_UNION.Add(UNION23);

					DebugLocation(143, 44);
					WS24=(IToken)Match(input,WS,Follow._WS_in_select_command_union563); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS24);

					DebugLocation(143, 48);
					PushFollow(Follow._select_command_simple_in_select_command_union567);
					b=select_command_simple();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_select_command_simple.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, select_command_union
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 143:71: -> ^( T_SELECT_UNION $select_command_union $b)
					{
						DebugLocation(143, 74);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:143:74: ^( T_SELECT_UNION $select_command_union $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(143, 76);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SELECT_UNION, "T_SELECT_UNION"), root_1);

						DebugLocation(143, 92);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(143, 114);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop11;
				}
			}

			loop11:
				;

			} finally { DebugExitSubRule(11); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("select_command_union", 5);
			LeaveRule("select_command_union", 5);
			LeaveRule_select_command_union();
	    }
	 	DebugLocation(144, 1);
		} finally { DebugExitRule(GrammarFileName, "select_command_union"); }
		return retval;

	}
	// $ANTLR end "select_command_union"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_select_command_simple() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_select_command_simple() {}

	// $ANTLR start "select_command_simple"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:146:1: select_command_simple : ( ( '(' )=> subquery | SELECT ( WS distinct_clause )? ( WS top_clause )? ( WS bottom_clause )? WS column_list ( WS into_clause )? ( WS from_clause )? ( WS where_clause )? ( WS groupby_clause )? ( WS having_clause )? -> ^( T_SELECT_SIMPLE ( distinct_clause )? ( top_clause )? ( bottom_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( having_clause )? ) );
	[GrammarRule("select_command_simple")]
	private AstParserRuleReturnScope<object, IToken> select_command_simple()
	{
		EnterRule_select_command_simple();
		EnterRule("select_command_simple", 6);
		TraceIn("select_command_simple", 6);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken SELECT26 = default(IToken);
	    IToken WS27 = default(IToken);
	    IToken WS29 = default(IToken);
	    IToken WS31 = default(IToken);
	    IToken WS33 = default(IToken);
	    IToken WS35 = default(IToken);
	    IToken WS37 = default(IToken);
	    IToken WS39 = default(IToken);
	    IToken WS41 = default(IToken);
	    IToken WS43 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> subquery25 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> distinct_clause28 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> top_clause30 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> bottom_clause32 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> column_list34 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> into_clause36 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> from_clause38 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> where_clause40 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> groupby_clause42 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> having_clause44 = default(AstParserRuleReturnScope<object, IToken>);

	    object SELECT26_tree = default(object);
	    object WS27_tree = default(object);
	    object WS29_tree = default(object);
	    object WS31_tree = default(object);
	    object WS33_tree = default(object);
	    object WS35_tree = default(object);
	    object WS37_tree = default(object);
	    object WS39_tree = default(object);
	    object WS41_tree = default(object);
	    object WS43_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_SELECT=new RewriteRuleITokenStream(adaptor,"token SELECT");
	    RewriteRuleSubtreeStream stream_groupby_clause=new RewriteRuleSubtreeStream(adaptor,"rule groupby_clause");
	    RewriteRuleSubtreeStream stream_distinct_clause=new RewriteRuleSubtreeStream(adaptor,"rule distinct_clause");
	    RewriteRuleSubtreeStream stream_from_clause=new RewriteRuleSubtreeStream(adaptor,"rule from_clause");
	    RewriteRuleSubtreeStream stream_having_clause=new RewriteRuleSubtreeStream(adaptor,"rule having_clause");
	    RewriteRuleSubtreeStream stream_column_list=new RewriteRuleSubtreeStream(adaptor,"rule column_list");
	    RewriteRuleSubtreeStream stream_where_clause=new RewriteRuleSubtreeStream(adaptor,"rule where_clause");
	    RewriteRuleSubtreeStream stream_into_clause=new RewriteRuleSubtreeStream(adaptor,"rule into_clause");
	    RewriteRuleSubtreeStream stream_bottom_clause=new RewriteRuleSubtreeStream(adaptor,"rule bottom_clause");
	    RewriteRuleSubtreeStream stream_top_clause=new RewriteRuleSubtreeStream(adaptor,"rule top_clause");
		try { DebugEnterRule(GrammarFileName, "select_command_simple");
		DebugLocation(146, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:147:2: ( ( '(' )=> subquery | SELECT ( WS distinct_clause )? ( WS top_clause )? ( WS bottom_clause )? WS column_list ( WS into_clause )? ( WS from_clause )? ( WS where_clause )? ( WS groupby_clause )? ( WS having_clause )? -> ^( T_SELECT_SIMPLE ( distinct_clause )? ( top_clause )? ( bottom_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( having_clause )? ) )
			int alt20=2;
			try { DebugEnterDecision(20, decisionCanBacktrack[20]);
			int LA20_0 = input.LA(1);

			if ((LA20_0==169) && (EvaluatePredicate(synpred1_gql_fragment)))
			{
				alt20 = 1;
			}
			else if ((LA20_0==SELECT))
			{
				alt20 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 20, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:147:4: ( '(' )=> subquery
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(147, 13);
				PushFollow(Follow._subquery_in_select_command_simple599);
				subquery25=subquery();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, subquery25.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:148:4: SELECT ( WS distinct_clause )? ( WS top_clause )? ( WS bottom_clause )? WS column_list ( WS into_clause )? ( WS from_clause )? ( WS where_clause )? ( WS groupby_clause )? ( WS having_clause )?
				{
				DebugLocation(148, 4);
				SELECT26=(IToken)Match(input,SELECT,Follow._SELECT_in_select_command_simple604); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SELECT.Add(SELECT26);

				DebugLocation(148, 11);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:148:11: ( WS distinct_clause )?
				int alt12=2;
				try { DebugEnterSubRule(12);
				try { DebugEnterDecision(12, decisionCanBacktrack[12]);
				int LA12_0 = input.LA(1);

				if ((LA12_0==WS))
				{
					int LA12_1 = input.LA(2);

					if ((LA12_1==ALL||LA12_1==DISTINCT))
					{
						alt12 = 1;
					}
				}
				} finally { DebugExitDecision(12); }
				switch (alt12)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:148:12: WS distinct_clause
					{
					DebugLocation(148, 12);
					WS27=(IToken)Match(input,WS,Follow._WS_in_select_command_simple607); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS27);

					DebugLocation(148, 15);
					PushFollow(Follow._distinct_clause_in_select_command_simple609);
					distinct_clause28=distinct_clause();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_distinct_clause.Add(distinct_clause28.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(12); }

				DebugLocation(148, 33);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:148:33: ( WS top_clause )?
				int alt13=2;
				try { DebugEnterSubRule(13);
				try { DebugEnterDecision(13, decisionCanBacktrack[13]);
				int LA13_0 = input.LA(1);

				if ((LA13_0==WS))
				{
					int LA13_1 = input.LA(2);

					if ((LA13_1==TOP))
					{
						alt13 = 1;
					}
				}
				} finally { DebugExitDecision(13); }
				switch (alt13)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:148:34: WS top_clause
					{
					DebugLocation(148, 34);
					WS29=(IToken)Match(input,WS,Follow._WS_in_select_command_simple614); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS29);

					DebugLocation(148, 37);
					PushFollow(Follow._top_clause_in_select_command_simple616);
					top_clause30=top_clause();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_top_clause.Add(top_clause30.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(13); }

				DebugLocation(148, 50);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:148:50: ( WS bottom_clause )?
				int alt14=2;
				try { DebugEnterSubRule(14);
				try { DebugEnterDecision(14, decisionCanBacktrack[14]);
				int LA14_0 = input.LA(1);

				if ((LA14_0==WS))
				{
					int LA14_1 = input.LA(2);

					if ((LA14_1==BOTTOM))
					{
						alt14 = 1;
					}
				}
				} finally { DebugExitDecision(14); }
				switch (alt14)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:148:51: WS bottom_clause
					{
					DebugLocation(148, 51);
					WS31=(IToken)Match(input,WS,Follow._WS_in_select_command_simple621); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS31);

					DebugLocation(148, 54);
					PushFollow(Follow._bottom_clause_in_select_command_simple623);
					bottom_clause32=bottom_clause();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bottom_clause.Add(bottom_clause32.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(14); }

				DebugLocation(148, 70);
				WS33=(IToken)Match(input,WS,Follow._WS_in_select_command_simple627); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS33);

				DebugLocation(148, 73);
				PushFollow(Follow._column_list_in_select_command_simple629);
				column_list34=column_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_column_list.Add(column_list34.Tree);
				DebugLocation(148, 85);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:148:85: ( WS into_clause )?
				int alt15=2;
				try { DebugEnterSubRule(15);
				try { DebugEnterDecision(15, decisionCanBacktrack[15]);
				int LA15_0 = input.LA(1);

				if ((LA15_0==WS))
				{
					int LA15_1 = input.LA(2);

					if ((LA15_1==INTO))
					{
						alt15 = 1;
					}
				}
				} finally { DebugExitDecision(15); }
				switch (alt15)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:148:86: WS into_clause
					{
					DebugLocation(148, 86);
					WS35=(IToken)Match(input,WS,Follow._WS_in_select_command_simple632); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS35);

					DebugLocation(148, 89);
					PushFollow(Follow._into_clause_in_select_command_simple634);
					into_clause36=into_clause();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_into_clause.Add(into_clause36.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(15); }

				DebugLocation(148, 103);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:148:103: ( WS from_clause )?
				int alt16=2;
				try { DebugEnterSubRule(16);
				try { DebugEnterDecision(16, decisionCanBacktrack[16]);
				int LA16_0 = input.LA(1);

				if ((LA16_0==WS))
				{
					int LA16_1 = input.LA(2);

					if ((LA16_1==FROM))
					{
						alt16 = 1;
					}
				}
				} finally { DebugExitDecision(16); }
				switch (alt16)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:148:104: WS from_clause
					{
					DebugLocation(148, 104);
					WS37=(IToken)Match(input,WS,Follow._WS_in_select_command_simple639); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS37);

					DebugLocation(148, 107);
					PushFollow(Follow._from_clause_in_select_command_simple641);
					from_clause38=from_clause();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_from_clause.Add(from_clause38.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(16); }

				DebugLocation(148, 121);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:148:121: ( WS where_clause )?
				int alt17=2;
				try { DebugEnterSubRule(17);
				try { DebugEnterDecision(17, decisionCanBacktrack[17]);
				int LA17_0 = input.LA(1);

				if ((LA17_0==WS))
				{
					int LA17_1 = input.LA(2);

					if ((LA17_1==WHERE))
					{
						alt17 = 1;
					}
				}
				} finally { DebugExitDecision(17); }
				switch (alt17)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:148:122: WS where_clause
					{
					DebugLocation(148, 122);
					WS39=(IToken)Match(input,WS,Follow._WS_in_select_command_simple646); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS39);

					DebugLocation(148, 125);
					PushFollow(Follow._where_clause_in_select_command_simple648);
					where_clause40=where_clause();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_where_clause.Add(where_clause40.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(17); }

				DebugLocation(148, 140);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:148:140: ( WS groupby_clause )?
				int alt18=2;
				try { DebugEnterSubRule(18);
				try { DebugEnterDecision(18, decisionCanBacktrack[18]);
				int LA18_0 = input.LA(1);

				if ((LA18_0==WS))
				{
					int LA18_1 = input.LA(2);

					if ((LA18_1==GROUP))
					{
						alt18 = 1;
					}
				}
				} finally { DebugExitDecision(18); }
				switch (alt18)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:148:141: WS groupby_clause
					{
					DebugLocation(148, 141);
					WS41=(IToken)Match(input,WS,Follow._WS_in_select_command_simple653); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS41);

					DebugLocation(148, 144);
					PushFollow(Follow._groupby_clause_in_select_command_simple655);
					groupby_clause42=groupby_clause();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_groupby_clause.Add(groupby_clause42.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(18); }

				DebugLocation(148, 161);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:148:161: ( WS having_clause )?
				int alt19=2;
				try { DebugEnterSubRule(19);
				try { DebugEnterDecision(19, decisionCanBacktrack[19]);
				int LA19_0 = input.LA(1);

				if ((LA19_0==WS))
				{
					int LA19_1 = input.LA(2);

					if ((LA19_1==HAVING))
					{
						alt19 = 1;
					}
				}
				} finally { DebugExitDecision(19); }
				switch (alt19)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:148:162: WS having_clause
					{
					DebugLocation(148, 162);
					WS43=(IToken)Match(input,WS,Follow._WS_in_select_command_simple660); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS43);

					DebugLocation(148, 165);
					PushFollow(Follow._having_clause_in_select_command_simple662);
					having_clause44=having_clause();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_having_clause.Add(having_clause44.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(19); }



				{
				// AST REWRITE
				// elements: groupby_clause, column_list, bottom_clause, distinct_clause, into_clause, having_clause, top_clause, from_clause, where_clause
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 149:3: -> ^( T_SELECT_SIMPLE ( distinct_clause )? ( top_clause )? ( bottom_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( having_clause )? )
				{
					DebugLocation(149, 6);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:149:6: ^( T_SELECT_SIMPLE ( distinct_clause )? ( top_clause )? ( bottom_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( having_clause )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(149, 8);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SELECT_SIMPLE, "T_SELECT_SIMPLE"), root_1);

					DebugLocation(149, 24);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:149:24: ( distinct_clause )?
					if (stream_distinct_clause.HasNext)
					{
						DebugLocation(149, 24);
						adaptor.AddChild(root_1, stream_distinct_clause.NextTree());

					}
					stream_distinct_clause.Reset();
					DebugLocation(149, 41);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:149:41: ( top_clause )?
					if (stream_top_clause.HasNext)
					{
						DebugLocation(149, 41);
						adaptor.AddChild(root_1, stream_top_clause.NextTree());

					}
					stream_top_clause.Reset();
					DebugLocation(149, 53);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:149:53: ( bottom_clause )?
					if (stream_bottom_clause.HasNext)
					{
						DebugLocation(149, 53);
						adaptor.AddChild(root_1, stream_bottom_clause.NextTree());

					}
					stream_bottom_clause.Reset();
					DebugLocation(149, 68);
					adaptor.AddChild(root_1, stream_column_list.NextTree());
					DebugLocation(149, 80);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:149:80: ( into_clause )?
					if (stream_into_clause.HasNext)
					{
						DebugLocation(149, 80);
						adaptor.AddChild(root_1, stream_into_clause.NextTree());

					}
					stream_into_clause.Reset();
					DebugLocation(149, 93);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:149:93: ( from_clause )?
					if (stream_from_clause.HasNext)
					{
						DebugLocation(149, 93);
						adaptor.AddChild(root_1, stream_from_clause.NextTree());

					}
					stream_from_clause.Reset();
					DebugLocation(149, 106);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:149:106: ( where_clause )?
					if (stream_where_clause.HasNext)
					{
						DebugLocation(149, 106);
						adaptor.AddChild(root_1, stream_where_clause.NextTree());

					}
					stream_where_clause.Reset();
					DebugLocation(149, 120);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:149:120: ( groupby_clause )?
					if (stream_groupby_clause.HasNext)
					{
						DebugLocation(149, 120);
						adaptor.AddChild(root_1, stream_groupby_clause.NextTree());

					}
					stream_groupby_clause.Reset();
					DebugLocation(149, 136);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:149:136: ( having_clause )?
					if (stream_having_clause.HasNext)
					{
						DebugLocation(149, 136);
						adaptor.AddChild(root_1, stream_having_clause.NextTree());

					}
					stream_having_clause.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("select_command_simple", 6);
			LeaveRule("select_command_simple", 6);
			LeaveRule_select_command_simple();
	    }
	 	DebugLocation(150, 1);
		} finally { DebugExitRule(GrammarFileName, "select_command_simple"); }
		return retval;

	}
	// $ANTLR end "select_command_simple"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_distinct_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_distinct_clause() {}

	// $ANTLR start "distinct_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:152:1: distinct_clause : ( DISTINCT -> T_DISTINCT | ALL -> T_ALL );
	[GrammarRule("distinct_clause")]
	private AstParserRuleReturnScope<object, IToken> distinct_clause()
	{
		EnterRule_distinct_clause();
		EnterRule("distinct_clause", 7);
		TraceIn("distinct_clause", 7);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken DISTINCT45 = default(IToken);
	    IToken ALL46 = default(IToken);

	    object DISTINCT45_tree = default(object);
	    object ALL46_tree = default(object);
	    RewriteRuleITokenStream stream_DISTINCT=new RewriteRuleITokenStream(adaptor,"token DISTINCT");
	    RewriteRuleITokenStream stream_ALL=new RewriteRuleITokenStream(adaptor,"token ALL");

		try { DebugEnterRule(GrammarFileName, "distinct_clause");
		DebugLocation(152, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:153:2: ( DISTINCT -> T_DISTINCT | ALL -> T_ALL )
			int alt21=2;
			try { DebugEnterDecision(21, decisionCanBacktrack[21]);
			int LA21_0 = input.LA(1);

			if ((LA21_0==DISTINCT))
			{
				alt21 = 1;
			}
			else if ((LA21_0==ALL))
			{
				alt21 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 21, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:153:4: DISTINCT
				{
				DebugLocation(153, 4);
				DISTINCT45=(IToken)Match(input,DISTINCT,Follow._DISTINCT_in_distinct_clause710); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DISTINCT.Add(DISTINCT45);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 153:13: -> T_DISTINCT
				{
					DebugLocation(153, 16);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_DISTINCT, "T_DISTINCT"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:154:4: ALL
				{
				DebugLocation(154, 4);
				ALL46=(IToken)Match(input,ALL,Follow._ALL_in_distinct_clause719); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ALL.Add(ALL46);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 154:8: -> T_ALL
				{
					DebugLocation(154, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_ALL, "T_ALL"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("distinct_clause", 7);
			LeaveRule("distinct_clause", 7);
			LeaveRule_distinct_clause();
	    }
	 	DebugLocation(155, 1);
		} finally { DebugExitRule(GrammarFileName, "distinct_clause"); }
		return retval;

	}
	// $ANTLR end "distinct_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_top_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_top_clause() {}

	// $ANTLR start "top_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:157:1: top_clause : TOP WS expression_atom -> ^( T_TOP expression_atom ) ;
	[GrammarRule("top_clause")]
	private AstParserRuleReturnScope<object, IToken> top_clause()
	{
		EnterRule_top_clause();
		EnterRule("top_clause", 8);
		TraceIn("top_clause", 8);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOP47 = default(IToken);
	    IToken WS48 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression_atom49 = default(AstParserRuleReturnScope<object, IToken>);

	    object TOP47_tree = default(object);
	    object WS48_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_TOP=new RewriteRuleITokenStream(adaptor,"token TOP");
	    RewriteRuleSubtreeStream stream_expression_atom=new RewriteRuleSubtreeStream(adaptor,"rule expression_atom");
		try { DebugEnterRule(GrammarFileName, "top_clause");
		DebugLocation(157, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:158:2: ( TOP WS expression_atom -> ^( T_TOP expression_atom ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:158:4: TOP WS expression_atom
			{
			DebugLocation(158, 4);
			TOP47=(IToken)Match(input,TOP,Follow._TOP_in_top_clause735); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_TOP.Add(TOP47);

			DebugLocation(158, 8);
			WS48=(IToken)Match(input,WS,Follow._WS_in_top_clause737); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS48);

			DebugLocation(158, 11);
			PushFollow(Follow._expression_atom_in_top_clause739);
			expression_atom49=expression_atom();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression_atom.Add(expression_atom49.Tree);


			{
			// AST REWRITE
			// elements: expression_atom
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 158:27: -> ^( T_TOP expression_atom )
			{
				DebugLocation(158, 30);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:158:30: ^( T_TOP expression_atom )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(158, 32);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_TOP, "T_TOP"), root_1);

				DebugLocation(158, 38);
				adaptor.AddChild(root_1, stream_expression_atom.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("top_clause", 8);
			LeaveRule("top_clause", 8);
			LeaveRule_top_clause();
	    }
	 	DebugLocation(159, 1);
		} finally { DebugExitRule(GrammarFileName, "top_clause"); }
		return retval;

	}
	// $ANTLR end "top_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_bottom_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_bottom_clause() {}

	// $ANTLR start "bottom_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:161:1: bottom_clause : BOTTOM WS expression_atom -> ^( T_BOTTOM expression_atom ) ;
	[GrammarRule("bottom_clause")]
	private AstParserRuleReturnScope<object, IToken> bottom_clause()
	{
		EnterRule_bottom_clause();
		EnterRule("bottom_clause", 9);
		TraceIn("bottom_clause", 9);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken BOTTOM50 = default(IToken);
	    IToken WS51 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression_atom52 = default(AstParserRuleReturnScope<object, IToken>);

	    object BOTTOM50_tree = default(object);
	    object WS51_tree = default(object);
	    RewriteRuleITokenStream stream_BOTTOM=new RewriteRuleITokenStream(adaptor,"token BOTTOM");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression_atom=new RewriteRuleSubtreeStream(adaptor,"rule expression_atom");
		try { DebugEnterRule(GrammarFileName, "bottom_clause");
		DebugLocation(161, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:162:2: ( BOTTOM WS expression_atom -> ^( T_BOTTOM expression_atom ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:162:4: BOTTOM WS expression_atom
			{
			DebugLocation(162, 4);
			BOTTOM50=(IToken)Match(input,BOTTOM,Follow._BOTTOM_in_bottom_clause760); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_BOTTOM.Add(BOTTOM50);

			DebugLocation(162, 11);
			WS51=(IToken)Match(input,WS,Follow._WS_in_bottom_clause762); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS51);

			DebugLocation(162, 14);
			PushFollow(Follow._expression_atom_in_bottom_clause764);
			expression_atom52=expression_atom();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression_atom.Add(expression_atom52.Tree);


			{
			// AST REWRITE
			// elements: expression_atom
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 162:30: -> ^( T_BOTTOM expression_atom )
			{
				DebugLocation(162, 33);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:162:33: ^( T_BOTTOM expression_atom )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(162, 35);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_BOTTOM, "T_BOTTOM"), root_1);

				DebugLocation(162, 44);
				adaptor.AddChild(root_1, stream_expression_atom.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bottom_clause", 9);
			LeaveRule("bottom_clause", 9);
			LeaveRule_bottom_clause();
	    }
	 	DebugLocation(163, 1);
		} finally { DebugExitRule(GrammarFileName, "bottom_clause"); }
		return retval;

	}
	// $ANTLR end "bottom_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_column_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_column_list() {}

	// $ANTLR start "column_list"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:165:1: column_list : column ( ( WS )? ',' ( WS )? column )* -> ^( T_COLUMNLIST ( column )* ) ;
	[GrammarRule("column_list")]
	private AstParserRuleReturnScope<object, IToken> column_list()
	{
		EnterRule_column_list();
		EnterRule("column_list", 10);
		TraceIn("column_list", 10);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS54 = default(IToken);
	    IToken char_literal55 = default(IToken);
	    IToken WS56 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> column53 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> column57 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS54_tree = default(object);
	    object char_literal55_tree = default(object);
	    object WS56_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_173=new RewriteRuleITokenStream(adaptor,"token 173");
	    RewriteRuleSubtreeStream stream_column=new RewriteRuleSubtreeStream(adaptor,"rule column");
		try { DebugEnterRule(GrammarFileName, "column_list");
		DebugLocation(165, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:166:2: ( column ( ( WS )? ',' ( WS )? column )* -> ^( T_COLUMNLIST ( column )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:166:4: column ( ( WS )? ',' ( WS )? column )*
			{
			DebugLocation(166, 4);
			PushFollow(Follow._column_in_column_list785);
			column53=column();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_column.Add(column53.Tree);
			DebugLocation(166, 11);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:166:11: ( ( WS )? ',' ( WS )? column )*
			try { DebugEnterSubRule(24);
			while (true)
			{
				int alt24=2;
				try { DebugEnterDecision(24, decisionCanBacktrack[24]);
				int LA24_0 = input.LA(1);

				if ((LA24_0==WS))
				{
					int LA24_1 = input.LA(2);

					if ((LA24_1==173))
					{
						alt24 = 1;
					}


				}
				else if ((LA24_0==173))
				{
					alt24 = 1;
				}


				} finally { DebugExitDecision(24); }
				switch ( alt24 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:166:12: ( WS )? ',' ( WS )? column
					{
					DebugLocation(166, 12);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:166:12: ( WS )?
					int alt22=2;
					try { DebugEnterSubRule(22);
					try { DebugEnterDecision(22, decisionCanBacktrack[22]);
					int LA22_0 = input.LA(1);

					if ((LA22_0==WS))
					{
						alt22 = 1;
					}
					} finally { DebugExitDecision(22); }
					switch (alt22)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:166:12: WS
						{
						DebugLocation(166, 12);
						WS54=(IToken)Match(input,WS,Follow._WS_in_column_list788); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS54);


						}
						break;

					}
					} finally { DebugExitSubRule(22); }

					DebugLocation(166, 16);
					char_literal55=(IToken)Match(input,173,Follow._173_in_column_list791); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_173.Add(char_literal55);

					DebugLocation(166, 20);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:166:20: ( WS )?
					int alt23=2;
					try { DebugEnterSubRule(23);
					try { DebugEnterDecision(23, decisionCanBacktrack[23]);
					int LA23_0 = input.LA(1);

					if ((LA23_0==WS))
					{
						alt23 = 1;
					}
					} finally { DebugExitDecision(23); }
					switch (alt23)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:166:20: WS
						{
						DebugLocation(166, 20);
						WS56=(IToken)Match(input,WS,Follow._WS_in_column_list793); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS56);


						}
						break;

					}
					} finally { DebugExitSubRule(23); }

					DebugLocation(166, 24);
					PushFollow(Follow._column_in_column_list796);
					column57=column();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_column.Add(column57.Tree);

					}
					break;

				default:
					goto loop24;
				}
			}

			loop24:
				;

			} finally { DebugExitSubRule(24); }



			{
			// AST REWRITE
			// elements: column
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 167:2: -> ^( T_COLUMNLIST ( column )* )
			{
				DebugLocation(167, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:167:5: ^( T_COLUMNLIST ( column )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(167, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_COLUMNLIST, "T_COLUMNLIST"), root_1);

				DebugLocation(167, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:167:20: ( column )*
				while ( stream_column.HasNext )
				{
					DebugLocation(167, 20);
					adaptor.AddChild(root_1, stream_column.NextTree());

				}
				stream_column.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("column_list", 10);
			LeaveRule("column_list", 10);
			LeaveRule_column_list();
	    }
	 	DebugLocation(168, 1);
		} finally { DebugExitRule(GrammarFileName, "column_list"); }
		return retval;

	}
	// $ANTLR end "column_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_column() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_column() {}

	// $ANTLR start "column"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:170:1: column : ( all_columns | expression ( WS SIMPLE_FILE )? -> ^( T_COLUMN expression ( SIMPLE_FILE )? ) );
	[GrammarRule("column")]
	private AstParserRuleReturnScope<object, IToken> column()
	{
		EnterRule_column();
		EnterRule("column", 11);
		TraceIn("column", 11);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS60 = default(IToken);
	    IToken SIMPLE_FILE61 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> all_columns58 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression59 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS60_tree = default(object);
	    object SIMPLE_FILE61_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_SIMPLE_FILE=new RewriteRuleITokenStream(adaptor,"token SIMPLE_FILE");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "column");
		DebugLocation(170, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:171:2: ( all_columns | expression ( WS SIMPLE_FILE )? -> ^( T_COLUMN expression ( SIMPLE_FILE )? ) )
			int alt26=2;
			try { DebugEnterDecision(26, decisionCanBacktrack[26]);
			switch (input.LA(1))
			{
			case SIMPLE_FILE:
				{
				switch (input.LA(2))
				{
				case WS:
					{
					int LA26_4 = input.LA(3);

					if ((LA26_4==EOF||LA26_4==AND||LA26_4==BETWEEN||LA26_4==FROM||LA26_4==GROUP||LA26_4==HAVING||(LA26_4>=IN && LA26_4<=INTO)||LA26_4==LIKE||LA26_4==MATCH||LA26_4==NOT||(LA26_4>=OR && LA26_4<=ORDER)||LA26_4==SIMPLE_FILE||LA26_4==UNION||LA26_4==WHERE||(LA26_4>=164 && LA26_4<=168)||(LA26_4>=170 && LA26_4<=174)||(LA26_4>=176 && LA26_4<=183)||(LA26_4>=186 && LA26_4<=187)))
					{
						alt26 = 2;
					}
					else if ((LA26_4==175))
					{
						switch (input.LA(4))
						{
						case WS:
							{
							int LA26_6 = input.LA(5);

							if ((LA26_6==171))
							{
								alt26 = 1;
							}
							else if ((LA26_6==SIMPLE_FILE))
							{
								alt26 = 2;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 26, 6, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case 171:
							{
							alt26 = 1;
							}
							break;
						case SIMPLE_FILE:
							{
							alt26 = 2;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 26, 5, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 26, 4, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 175:
					{
					switch (input.LA(3))
					{
					case WS:
						{
						int LA26_6 = input.LA(4);

						if ((LA26_6==171))
						{
							alt26 = 1;
						}
						else if ((LA26_6==SIMPLE_FILE))
						{
							alt26 = 2;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 26, 6, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case 171:
						{
						alt26 = 1;
						}
						break;
					case SIMPLE_FILE:
						{
						alt26 = 2;
						}
						break;
					default:
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 26, 5, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					}
					break;
				case EOF:
				case LIKE:
				case MATCH:
				case NOT:
				case 164:
				case 165:
				case 166:
				case 167:
				case 168:
				case 170:
				case 171:
				case 172:
				case 173:
				case 174:
				case 176:
				case 177:
				case 178:
				case 179:
				case 180:
				case 181:
				case 182:
				case 183:
				case 186:
				case 187:
					{
					alt26 = 2;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 26, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				}
				break;
			case 171:
				{
				alt26 = 1;
				}
				break;
			case CASE:
			case CAST:
			case CONVERT:
			case COUNT:
			case DATEADD:
			case DATEDIFF:
			case DATEPART:
			case EXISTS:
			case NOT:
			case NUMBER:
			case STRING:
			case SYSTEMVAR:
			case TOKEN:
			case VARIABLE:
			case 169:
			case 172:
			case 174:
			case 188:
				{
				alt26 = 2;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 26, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:171:4: all_columns
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(171, 4);
				PushFollow(Follow._all_columns_in_column820);
				all_columns58=all_columns();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, all_columns58.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:172:4: expression ( WS SIMPLE_FILE )?
				{
				DebugLocation(172, 4);
				PushFollow(Follow._expression_in_column825);
				expression59=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression59.Tree);
				DebugLocation(172, 15);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:172:15: ( WS SIMPLE_FILE )?
				int alt25=2;
				try { DebugEnterSubRule(25);
				try { DebugEnterDecision(25, decisionCanBacktrack[25]);
				int LA25_0 = input.LA(1);

				if ((LA25_0==WS))
				{
					int LA25_1 = input.LA(2);

					if ((LA25_1==SIMPLE_FILE))
					{
						alt25 = 1;
					}
				}
				} finally { DebugExitDecision(25); }
				switch (alt25)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:172:16: WS SIMPLE_FILE
					{
					DebugLocation(172, 16);
					WS60=(IToken)Match(input,WS,Follow._WS_in_column828); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS60);

					DebugLocation(172, 19);
					SIMPLE_FILE61=(IToken)Match(input,SIMPLE_FILE,Follow._SIMPLE_FILE_in_column830); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SIMPLE_FILE.Add(SIMPLE_FILE61);


					}
					break;

				}
				} finally { DebugExitSubRule(25); }



				{
				// AST REWRITE
				// elements: SIMPLE_FILE, expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 172:33: -> ^( T_COLUMN expression ( SIMPLE_FILE )? )
				{
					DebugLocation(172, 36);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:172:36: ^( T_COLUMN expression ( SIMPLE_FILE )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(172, 38);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_COLUMN, "T_COLUMN"), root_1);

					DebugLocation(172, 47);
					adaptor.AddChild(root_1, stream_expression.NextTree());
					DebugLocation(172, 58);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:172:58: ( SIMPLE_FILE )?
					if (stream_SIMPLE_FILE.HasNext)
					{
						DebugLocation(172, 58);
						adaptor.AddChild(root_1, stream_SIMPLE_FILE.NextNode());

					}
					stream_SIMPLE_FILE.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("column", 11);
			LeaveRule("column", 11);
			LeaveRule_column();
	    }
	 	DebugLocation(173, 1);
		} finally { DebugExitRule(GrammarFileName, "column"); }
		return retval;

	}
	// $ANTLR end "column"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_all_columns() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_all_columns() {}

	// $ANTLR start "all_columns"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:175:1: all_columns : ( table_alias ( WS )? '.' ( WS )? )? '*' -> ^( T_ALLCOLUMNS ( table_alias )? ) ;
	[GrammarRule("all_columns")]
	private AstParserRuleReturnScope<object, IToken> all_columns()
	{
		EnterRule_all_columns();
		EnterRule("all_columns", 12);
		TraceIn("all_columns", 12);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS63 = default(IToken);
	    IToken char_literal64 = default(IToken);
	    IToken WS65 = default(IToken);
	    IToken char_literal66 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> table_alias62 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS63_tree = default(object);
	    object char_literal64_tree = default(object);
	    object WS65_tree = default(object);
	    object char_literal66_tree = default(object);
	    RewriteRuleITokenStream stream_171=new RewriteRuleITokenStream(adaptor,"token 171");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_175=new RewriteRuleITokenStream(adaptor,"token 175");
	    RewriteRuleSubtreeStream stream_table_alias=new RewriteRuleSubtreeStream(adaptor,"rule table_alias");
		try { DebugEnterRule(GrammarFileName, "all_columns");
		DebugLocation(175, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:176:2: ( ( table_alias ( WS )? '.' ( WS )? )? '*' -> ^( T_ALLCOLUMNS ( table_alias )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:176:4: ( table_alias ( WS )? '.' ( WS )? )? '*'
			{
			DebugLocation(176, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:176:4: ( table_alias ( WS )? '.' ( WS )? )?
			int alt29=2;
			try { DebugEnterSubRule(29);
			try { DebugEnterDecision(29, decisionCanBacktrack[29]);
			int LA29_0 = input.LA(1);

			if ((LA29_0==SIMPLE_FILE))
			{
				alt29 = 1;
			}
			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:176:5: table_alias ( WS )? '.' ( WS )?
				{
				DebugLocation(176, 5);
				PushFollow(Follow._table_alias_in_all_columns855);
				table_alias62=table_alias();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_table_alias.Add(table_alias62.Tree);
				DebugLocation(176, 17);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:176:17: ( WS )?
				int alt27=2;
				try { DebugEnterSubRule(27);
				try { DebugEnterDecision(27, decisionCanBacktrack[27]);
				int LA27_0 = input.LA(1);

				if ((LA27_0==WS))
				{
					alt27 = 1;
				}
				} finally { DebugExitDecision(27); }
				switch (alt27)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:176:17: WS
					{
					DebugLocation(176, 17);
					WS63=(IToken)Match(input,WS,Follow._WS_in_all_columns857); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS63);


					}
					break;

				}
				} finally { DebugExitSubRule(27); }

				DebugLocation(176, 21);
				char_literal64=(IToken)Match(input,175,Follow._175_in_all_columns860); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_175.Add(char_literal64);

				DebugLocation(176, 25);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:176:25: ( WS )?
				int alt28=2;
				try { DebugEnterSubRule(28);
				try { DebugEnterDecision(28, decisionCanBacktrack[28]);
				int LA28_0 = input.LA(1);

				if ((LA28_0==WS))
				{
					alt28 = 1;
				}
				} finally { DebugExitDecision(28); }
				switch (alt28)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:176:25: WS
					{
					DebugLocation(176, 25);
					WS65=(IToken)Match(input,WS,Follow._WS_in_all_columns862); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS65);


					}
					break;

				}
				} finally { DebugExitSubRule(28); }


				}
				break;

			}
			} finally { DebugExitSubRule(29); }

			DebugLocation(176, 31);
			char_literal66=(IToken)Match(input,171,Follow._171_in_all_columns867); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_171.Add(char_literal66);



			{
			// AST REWRITE
			// elements: table_alias
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 176:35: -> ^( T_ALLCOLUMNS ( table_alias )? )
			{
				DebugLocation(176, 38);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:176:38: ^( T_ALLCOLUMNS ( table_alias )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(176, 40);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_ALLCOLUMNS, "T_ALLCOLUMNS"), root_1);

				DebugLocation(176, 53);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:176:53: ( table_alias )?
				if (stream_table_alias.HasNext)
				{
					DebugLocation(176, 53);
					adaptor.AddChild(root_1, stream_table_alias.NextTree());

				}
				stream_table_alias.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("all_columns", 12);
			LeaveRule("all_columns", 12);
			LeaveRule_all_columns();
	    }
	 	DebugLocation(177, 1);
		} finally { DebugExitRule(GrammarFileName, "all_columns"); }
		return retval;

	}
	// $ANTLR end "all_columns"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_into_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_into_clause() {}

	// $ANTLR start "into_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:179:1: into_clause : INTO WS file -> ^( T_INTO file ) ;
	[GrammarRule("into_clause")]
	private AstParserRuleReturnScope<object, IToken> into_clause()
	{
		EnterRule_into_clause();
		EnterRule("into_clause", 13);
		TraceIn("into_clause", 13);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken INTO67 = default(IToken);
	    IToken WS68 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file69 = default(AstParserRuleReturnScope<object, IToken>);

	    object INTO67_tree = default(object);
	    object WS68_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_INTO=new RewriteRuleITokenStream(adaptor,"token INTO");
	    RewriteRuleSubtreeStream stream_file=new RewriteRuleSubtreeStream(adaptor,"rule file");
		try { DebugEnterRule(GrammarFileName, "into_clause");
		DebugLocation(179, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:180:2: ( INTO WS file -> ^( T_INTO file ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:180:4: INTO WS file
			{
			DebugLocation(180, 4);
			INTO67=(IToken)Match(input,INTO,Follow._INTO_in_into_clause887); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INTO.Add(INTO67);

			DebugLocation(180, 9);
			WS68=(IToken)Match(input,WS,Follow._WS_in_into_clause889); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS68);

			DebugLocation(180, 12);
			PushFollow(Follow._file_in_into_clause891);
			file69=file();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_file.Add(file69.Tree);


			{
			// AST REWRITE
			// elements: file
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 180:17: -> ^( T_INTO file )
			{
				DebugLocation(180, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:180:20: ^( T_INTO file )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(180, 22);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_INTO, "T_INTO"), root_1);

				DebugLocation(180, 29);
				adaptor.AddChild(root_1, stream_file.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("into_clause", 13);
			LeaveRule("into_clause", 13);
			LeaveRule_into_clause();
	    }
	 	DebugLocation(181, 1);
		} finally { DebugExitRule(GrammarFileName, "into_clause"); }
		return retval;

	}
	// $ANTLR end "into_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_from_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_from_clause() {}

	// $ANTLR start "from_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:183:1: from_clause : FROM WS from_clause_item ( ( WS )? ',' ( WS )? from_clause_item )* ( WS table_alias )? -> ^( T_FROM ( table_alias )? ( from_clause_item )* ) ;
	[GrammarRule("from_clause")]
	private AstParserRuleReturnScope<object, IToken> from_clause()
	{
		EnterRule_from_clause();
		EnterRule("from_clause", 14);
		TraceIn("from_clause", 14);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken FROM70 = default(IToken);
	    IToken WS71 = default(IToken);
	    IToken WS73 = default(IToken);
	    IToken char_literal74 = default(IToken);
	    IToken WS75 = default(IToken);
	    IToken WS77 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> from_clause_item72 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> from_clause_item76 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> table_alias78 = default(AstParserRuleReturnScope<object, IToken>);

	    object FROM70_tree = default(object);
	    object WS71_tree = default(object);
	    object WS73_tree = default(object);
	    object char_literal74_tree = default(object);
	    object WS75_tree = default(object);
	    object WS77_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_173=new RewriteRuleITokenStream(adaptor,"token 173");
	    RewriteRuleITokenStream stream_FROM=new RewriteRuleITokenStream(adaptor,"token FROM");
	    RewriteRuleSubtreeStream stream_from_clause_item=new RewriteRuleSubtreeStream(adaptor,"rule from_clause_item");
	    RewriteRuleSubtreeStream stream_table_alias=new RewriteRuleSubtreeStream(adaptor,"rule table_alias");
		try { DebugEnterRule(GrammarFileName, "from_clause");
		DebugLocation(183, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:184:2: ( FROM WS from_clause_item ( ( WS )? ',' ( WS )? from_clause_item )* ( WS table_alias )? -> ^( T_FROM ( table_alias )? ( from_clause_item )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:184:4: FROM WS from_clause_item ( ( WS )? ',' ( WS )? from_clause_item )* ( WS table_alias )?
			{
			DebugLocation(184, 4);
			FROM70=(IToken)Match(input,FROM,Follow._FROM_in_from_clause911); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_FROM.Add(FROM70);

			DebugLocation(184, 9);
			WS71=(IToken)Match(input,WS,Follow._WS_in_from_clause913); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS71);

			DebugLocation(184, 12);
			PushFollow(Follow._from_clause_item_in_from_clause915);
			from_clause_item72=from_clause_item();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_from_clause_item.Add(from_clause_item72.Tree);
			DebugLocation(184, 29);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:184:29: ( ( WS )? ',' ( WS )? from_clause_item )*
			try { DebugEnterSubRule(32);
			while (true)
			{
				int alt32=2;
				try { DebugEnterDecision(32, decisionCanBacktrack[32]);
				int LA32_0 = input.LA(1);

				if ((LA32_0==WS))
				{
					int LA32_1 = input.LA(2);

					if ((LA32_1==173))
					{
						alt32 = 1;
					}


				}
				else if ((LA32_0==173))
				{
					alt32 = 1;
				}


				} finally { DebugExitDecision(32); }
				switch ( alt32 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:184:30: ( WS )? ',' ( WS )? from_clause_item
					{
					DebugLocation(184, 30);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:184:30: ( WS )?
					int alt30=2;
					try { DebugEnterSubRule(30);
					try { DebugEnterDecision(30, decisionCanBacktrack[30]);
					int LA30_0 = input.LA(1);

					if ((LA30_0==WS))
					{
						alt30 = 1;
					}
					} finally { DebugExitDecision(30); }
					switch (alt30)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:184:30: WS
						{
						DebugLocation(184, 30);
						WS73=(IToken)Match(input,WS,Follow._WS_in_from_clause918); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS73);


						}
						break;

					}
					} finally { DebugExitSubRule(30); }

					DebugLocation(184, 34);
					char_literal74=(IToken)Match(input,173,Follow._173_in_from_clause921); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_173.Add(char_literal74);

					DebugLocation(184, 38);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:184:38: ( WS )?
					int alt31=2;
					try { DebugEnterSubRule(31);
					try { DebugEnterDecision(31, decisionCanBacktrack[31]);
					int LA31_0 = input.LA(1);

					if ((LA31_0==WS))
					{
						alt31 = 1;
					}
					} finally { DebugExitDecision(31); }
					switch (alt31)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:184:38: WS
						{
						DebugLocation(184, 38);
						WS75=(IToken)Match(input,WS,Follow._WS_in_from_clause923); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS75);


						}
						break;

					}
					} finally { DebugExitSubRule(31); }

					DebugLocation(184, 42);
					PushFollow(Follow._from_clause_item_in_from_clause926);
					from_clause_item76=from_clause_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_from_clause_item.Add(from_clause_item76.Tree);

					}
					break;

				default:
					goto loop32;
				}
			}

			loop32:
				;

			} finally { DebugExitSubRule(32); }

			DebugLocation(184, 61);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:184:61: ( WS table_alias )?
			int alt33=2;
			try { DebugEnterSubRule(33);
			try { DebugEnterDecision(33, decisionCanBacktrack[33]);
			int LA33_0 = input.LA(1);

			if ((LA33_0==WS))
			{
				int LA33_1 = input.LA(2);

				if ((LA33_1==SIMPLE_FILE))
				{
					alt33 = 1;
				}
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:184:62: WS table_alias
				{
				DebugLocation(184, 62);
				WS77=(IToken)Match(input,WS,Follow._WS_in_from_clause931); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS77);

				DebugLocation(184, 65);
				PushFollow(Follow._table_alias_in_from_clause933);
				table_alias78=table_alias();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_table_alias.Add(table_alias78.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(33); }



			{
			// AST REWRITE
			// elements: from_clause_item, table_alias
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 184:79: -> ^( T_FROM ( table_alias )? ( from_clause_item )* )
			{
				DebugLocation(184, 82);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:184:82: ^( T_FROM ( table_alias )? ( from_clause_item )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(184, 84);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FROM, "T_FROM"), root_1);

				DebugLocation(184, 91);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:184:91: ( table_alias )?
				if (stream_table_alias.HasNext)
				{
					DebugLocation(184, 91);
					adaptor.AddChild(root_1, stream_table_alias.NextTree());

				}
				stream_table_alias.Reset();
				DebugLocation(184, 104);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:184:104: ( from_clause_item )*
				while ( stream_from_clause_item.HasNext )
				{
					DebugLocation(184, 104);
					adaptor.AddChild(root_1, stream_from_clause_item.NextTree());

				}
				stream_from_clause_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("from_clause", 14);
			LeaveRule("from_clause", 14);
			LeaveRule_from_clause();
	    }
	 	DebugLocation(186, 1);
		} finally { DebugExitRule(GrammarFileName, "from_clause"); }
		return retval;

	}
	// $ANTLR end "from_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_from_clause_item() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_from_clause_item() {}

	// $ANTLR start "from_clause_item"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:188:1: from_clause_item : ( STRING -> ^( T_FILE STRING ) | file | subquery | view_name ( ( WS )? '(' ( expression_list )? ')' )? -> ^( T_VIEW view_name ( expression_list )? ) );
	[GrammarRule("from_clause_item")]
	private AstParserRuleReturnScope<object, IToken> from_clause_item()
	{
		EnterRule_from_clause_item();
		EnterRule("from_clause_item", 15);
		TraceIn("from_clause_item", 15);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken STRING79 = default(IToken);
	    IToken WS83 = default(IToken);
	    IToken char_literal84 = default(IToken);
	    IToken char_literal86 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file80 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> subquery81 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> view_name82 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list85 = default(AstParserRuleReturnScope<object, IToken>);

	    object STRING79_tree = default(object);
	    object WS83_tree = default(object);
	    object char_literal84_tree = default(object);
	    object char_literal86_tree = default(object);
	    RewriteRuleITokenStream stream_170=new RewriteRuleITokenStream(adaptor,"token 170");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_169=new RewriteRuleITokenStream(adaptor,"token 169");
	    RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
	    RewriteRuleSubtreeStream stream_view_name=new RewriteRuleSubtreeStream(adaptor,"rule view_name");
	    RewriteRuleSubtreeStream stream_expression_list=new RewriteRuleSubtreeStream(adaptor,"rule expression_list");
		try { DebugEnterRule(GrammarFileName, "from_clause_item");
		DebugLocation(188, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:189:2: ( STRING -> ^( T_FILE STRING ) | file | subquery | view_name ( ( WS )? '(' ( expression_list )? ')' )? -> ^( T_VIEW view_name ( expression_list )? ) )
			int alt37=4;
			try { DebugEnterDecision(37, decisionCanBacktrack[37]);
			switch (input.LA(1))
			{
			case STRING:
				{
				alt37 = 1;
				}
				break;
			case SIMPLE_FILE:
			case 184:
				{
				alt37 = 2;
				}
				break;
			case 169:
				{
				alt37 = 3;
				}
				break;
			case TOKEN:
				{
				alt37 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 37, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:189:4: STRING
				{
				DebugLocation(189, 4);
				STRING79=(IToken)Match(input,STRING,Follow._STRING_in_from_clause_item960); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_STRING.Add(STRING79);



				{
				// AST REWRITE
				// elements: STRING
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 189:11: -> ^( T_FILE STRING )
				{
					DebugLocation(189, 14);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:189:14: ^( T_FILE STRING )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(189, 16);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILE, "T_FILE"), root_1);

					DebugLocation(189, 23);
					adaptor.AddChild(root_1, stream_STRING.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:190:4: file
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(190, 4);
				PushFollow(Follow._file_in_from_clause_item973);
				file80=file();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, file80.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:191:4: subquery
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(191, 4);
				PushFollow(Follow._subquery_in_from_clause_item978);
				subquery81=subquery();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, subquery81.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:192:4: view_name ( ( WS )? '(' ( expression_list )? ')' )?
				{
				DebugLocation(192, 4);
				PushFollow(Follow._view_name_in_from_clause_item983);
				view_name82=view_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_view_name.Add(view_name82.Tree);
				DebugLocation(192, 14);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:192:14: ( ( WS )? '(' ( expression_list )? ')' )?
				int alt36=2;
				try { DebugEnterSubRule(36);
				try { DebugEnterDecision(36, decisionCanBacktrack[36]);
				int LA36_0 = input.LA(1);

				if ((LA36_0==WS))
				{
					int LA36_1 = input.LA(2);

					if ((LA36_1==169))
					{
						alt36 = 1;
					}
				}
				else if ((LA36_0==169))
				{
					alt36 = 1;
				}
				} finally { DebugExitDecision(36); }
				switch (alt36)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:192:15: ( WS )? '(' ( expression_list )? ')'
					{
					DebugLocation(192, 15);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:192:15: ( WS )?
					int alt34=2;
					try { DebugEnterSubRule(34);
					try { DebugEnterDecision(34, decisionCanBacktrack[34]);
					int LA34_0 = input.LA(1);

					if ((LA34_0==WS))
					{
						alt34 = 1;
					}
					} finally { DebugExitDecision(34); }
					switch (alt34)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:192:15: WS
						{
						DebugLocation(192, 15);
						WS83=(IToken)Match(input,WS,Follow._WS_in_from_clause_item986); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS83);


						}
						break;

					}
					} finally { DebugExitSubRule(34); }

					DebugLocation(192, 19);
					char_literal84=(IToken)Match(input,169,Follow._169_in_from_clause_item989); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_169.Add(char_literal84);

					DebugLocation(192, 23);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:192:23: ( expression_list )?
					int alt35=2;
					try { DebugEnterSubRule(35);
					try { DebugEnterDecision(35, decisionCanBacktrack[35]);
					int LA35_0 = input.LA(1);

					if (((LA35_0>=CASE && LA35_0<=CAST)||(LA35_0>=CONVERT && LA35_0<=COUNT)||(LA35_0>=DATEADD && LA35_0<=DATEPART)||LA35_0==EXISTS||(LA35_0>=NOT && LA35_0<=NUMBER)||LA35_0==SIMPLE_FILE||(LA35_0>=STRING && LA35_0<=SYSTEMVAR)||LA35_0==TOKEN||LA35_0==VARIABLE||LA35_0==169||LA35_0==172||LA35_0==174||LA35_0==188))
					{
						alt35 = 1;
					}
					} finally { DebugExitDecision(35); }
					switch (alt35)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:192:23: expression_list
						{
						DebugLocation(192, 23);
						PushFollow(Follow._expression_list_in_from_clause_item991);
						expression_list85=expression_list();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expression_list.Add(expression_list85.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(35); }

					DebugLocation(192, 40);
					char_literal86=(IToken)Match(input,170,Follow._170_in_from_clause_item994); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_170.Add(char_literal86);


					}
					break;

				}
				} finally { DebugExitSubRule(36); }



				{
				// AST REWRITE
				// elements: expression_list, view_name
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 192:46: -> ^( T_VIEW view_name ( expression_list )? )
				{
					DebugLocation(192, 49);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:192:49: ^( T_VIEW view_name ( expression_list )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(192, 51);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_VIEW, "T_VIEW"), root_1);

					DebugLocation(192, 58);
					adaptor.AddChild(root_1, stream_view_name.NextTree());
					DebugLocation(192, 68);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:192:68: ( expression_list )?
					if (stream_expression_list.HasNext)
					{
						DebugLocation(192, 68);
						adaptor.AddChild(root_1, stream_expression_list.NextTree());

					}
					stream_expression_list.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("from_clause_item", 15);
			LeaveRule("from_clause_item", 15);
			LeaveRule_from_clause_item();
	    }
	 	DebugLocation(193, 1);
		} finally { DebugExitRule(GrammarFileName, "from_clause_item"); }
		return retval;

	}
	// $ANTLR end "from_clause_item"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_subquery() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_subquery() {}

	// $ANTLR start "subquery"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:195:1: subquery : '(' ( WS )? select_command ( WS )? ')' -> ^( T_SUBQUERY select_command ) ;
	[GrammarRule("subquery")]
	private AstParserRuleReturnScope<object, IToken> subquery()
	{
		EnterRule_subquery();
		EnterRule("subquery", 16);
		TraceIn("subquery", 16);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal87 = default(IToken);
	    IToken WS88 = default(IToken);
	    IToken WS90 = default(IToken);
	    IToken char_literal91 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> select_command89 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal87_tree = default(object);
	    object WS88_tree = default(object);
	    object WS90_tree = default(object);
	    object char_literal91_tree = default(object);
	    RewriteRuleITokenStream stream_170=new RewriteRuleITokenStream(adaptor,"token 170");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_169=new RewriteRuleITokenStream(adaptor,"token 169");
	    RewriteRuleSubtreeStream stream_select_command=new RewriteRuleSubtreeStream(adaptor,"rule select_command");
		try { DebugEnterRule(GrammarFileName, "subquery");
		DebugLocation(195, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:196:2: ( '(' ( WS )? select_command ( WS )? ')' -> ^( T_SUBQUERY select_command ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:196:4: '(' ( WS )? select_command ( WS )? ')'
			{
			DebugLocation(196, 4);
			char_literal87=(IToken)Match(input,169,Follow._169_in_subquery1019); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_169.Add(char_literal87);

			DebugLocation(196, 8);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:196:8: ( WS )?
			int alt38=2;
			try { DebugEnterSubRule(38);
			try { DebugEnterDecision(38, decisionCanBacktrack[38]);
			int LA38_0 = input.LA(1);

			if ((LA38_0==WS))
			{
				alt38 = 1;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:196:8: WS
				{
				DebugLocation(196, 8);
				WS88=(IToken)Match(input,WS,Follow._WS_in_subquery1021); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS88);


				}
				break;

			}
			} finally { DebugExitSubRule(38); }

			DebugLocation(196, 12);
			PushFollow(Follow._select_command_in_subquery1024);
			select_command89=select_command();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_select_command.Add(select_command89.Tree);
			DebugLocation(196, 27);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:196:27: ( WS )?
			int alt39=2;
			try { DebugEnterSubRule(39);
			try { DebugEnterDecision(39, decisionCanBacktrack[39]);
			int LA39_0 = input.LA(1);

			if ((LA39_0==WS))
			{
				alt39 = 1;
			}
			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:196:27: WS
				{
				DebugLocation(196, 27);
				WS90=(IToken)Match(input,WS,Follow._WS_in_subquery1026); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS90);


				}
				break;

			}
			} finally { DebugExitSubRule(39); }

			DebugLocation(196, 31);
			char_literal91=(IToken)Match(input,170,Follow._170_in_subquery1029); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_170.Add(char_literal91);



			{
			// AST REWRITE
			// elements: select_command
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 196:35: -> ^( T_SUBQUERY select_command )
			{
				DebugLocation(196, 38);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:196:38: ^( T_SUBQUERY select_command )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(196, 40);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SUBQUERY, "T_SUBQUERY"), root_1);

				DebugLocation(196, 51);
				adaptor.AddChild(root_1, stream_select_command.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("subquery", 16);
			LeaveRule("subquery", 16);
			LeaveRule_subquery();
	    }
	 	DebugLocation(197, 1);
		} finally { DebugExitRule(GrammarFileName, "subquery"); }
		return retval;

	}
	// $ANTLR end "subquery"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file() {}

	// $ANTLR start "file"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:199:1: file : ( '[' ( WS )? file_spec ( WS file_option )* ( WS )? ']' -> ^( T_FILE file_spec ( file_option )* ) | '[' ( WS )? subquery ( WS )? ']' -> ^( T_FILESUBQUERY subquery ) | SIMPLE_FILE -> ^( T_FILE SIMPLE_FILE ) );
	[GrammarRule("file")]
	private AstParserRuleReturnScope<object, IToken> file()
	{
		EnterRule_file();
		EnterRule("file", 17);
		TraceIn("file", 17);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal92 = default(IToken);
	    IToken WS93 = default(IToken);
	    IToken WS95 = default(IToken);
	    IToken WS97 = default(IToken);
	    IToken char_literal98 = default(IToken);
	    IToken char_literal99 = default(IToken);
	    IToken WS100 = default(IToken);
	    IToken WS102 = default(IToken);
	    IToken char_literal103 = default(IToken);
	    IToken SIMPLE_FILE104 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file_spec94 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> file_option96 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> subquery101 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal92_tree = default(object);
	    object WS93_tree = default(object);
	    object WS95_tree = default(object);
	    object WS97_tree = default(object);
	    object char_literal98_tree = default(object);
	    object char_literal99_tree = default(object);
	    object WS100_tree = default(object);
	    object WS102_tree = default(object);
	    object char_literal103_tree = default(object);
	    object SIMPLE_FILE104_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_SIMPLE_FILE=new RewriteRuleITokenStream(adaptor,"token SIMPLE_FILE");
	    RewriteRuleITokenStream stream_184=new RewriteRuleITokenStream(adaptor,"token 184");
	    RewriteRuleITokenStream stream_185=new RewriteRuleITokenStream(adaptor,"token 185");
	    RewriteRuleSubtreeStream stream_file_option=new RewriteRuleSubtreeStream(adaptor,"rule file_option");
	    RewriteRuleSubtreeStream stream_file_spec=new RewriteRuleSubtreeStream(adaptor,"rule file_spec");
	    RewriteRuleSubtreeStream stream_subquery=new RewriteRuleSubtreeStream(adaptor,"rule subquery");
		try { DebugEnterRule(GrammarFileName, "file");
		DebugLocation(199, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:200:2: ( '[' ( WS )? file_spec ( WS file_option )* ( WS )? ']' -> ^( T_FILE file_spec ( file_option )* ) | '[' ( WS )? subquery ( WS )? ']' -> ^( T_FILESUBQUERY subquery ) | SIMPLE_FILE -> ^( T_FILE SIMPLE_FILE ) )
			int alt45=3;
			try { DebugEnterDecision(45, decisionCanBacktrack[45]);
			int LA45_0 = input.LA(1);

			if ((LA45_0==184))
			{
				switch (input.LA(2))
				{
				case WS:
					{
					int LA45_3 = input.LA(3);

					if ((LA45_3==STRING||LA45_3==VARIABLE))
					{
						alt45 = 1;
					}
					else if ((LA45_3==169))
					{
						alt45 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 45, 3, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case STRING:
				case VARIABLE:
					{
					alt45 = 1;
					}
					break;
				case 169:
					{
					alt45 = 2;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 45, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else if ((LA45_0==SIMPLE_FILE))
			{
				alt45 = 3;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 45, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(45); }
			switch (alt45)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:200:4: '[' ( WS )? file_spec ( WS file_option )* ( WS )? ']'
				{
				DebugLocation(200, 4);
				char_literal92=(IToken)Match(input,184,Follow._184_in_file1048); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_184.Add(char_literal92);

				DebugLocation(200, 8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:200:8: ( WS )?
				int alt40=2;
				try { DebugEnterSubRule(40);
				try { DebugEnterDecision(40, decisionCanBacktrack[40]);
				int LA40_0 = input.LA(1);

				if ((LA40_0==WS))
				{
					alt40 = 1;
				}
				} finally { DebugExitDecision(40); }
				switch (alt40)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:200:8: WS
					{
					DebugLocation(200, 8);
					WS93=(IToken)Match(input,WS,Follow._WS_in_file1050); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS93);


					}
					break;

				}
				} finally { DebugExitSubRule(40); }

				DebugLocation(200, 12);
				PushFollow(Follow._file_spec_in_file1053);
				file_spec94=file_spec();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_file_spec.Add(file_spec94.Tree);
				DebugLocation(200, 22);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:200:22: ( WS file_option )*
				try { DebugEnterSubRule(41);
				while (true)
				{
					int alt41=2;
					try { DebugEnterDecision(41, decisionCanBacktrack[41]);
					int LA41_0 = input.LA(1);

					if ((LA41_0==WS))
					{
						int LA41_1 = input.LA(2);

						if ((LA41_1==174))
						{
							alt41 = 1;
						}


					}


					} finally { DebugExitDecision(41); }
					switch ( alt41 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:200:23: WS file_option
						{
						DebugLocation(200, 23);
						WS95=(IToken)Match(input,WS,Follow._WS_in_file1056); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS95);

						DebugLocation(200, 26);
						PushFollow(Follow._file_option_in_file1058);
						file_option96=file_option();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_file_option.Add(file_option96.Tree);

						}
						break;

					default:
						goto loop41;
					}
				}

				loop41:
					;

				} finally { DebugExitSubRule(41); }

				DebugLocation(200, 40);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:200:40: ( WS )?
				int alt42=2;
				try { DebugEnterSubRule(42);
				try { DebugEnterDecision(42, decisionCanBacktrack[42]);
				int LA42_0 = input.LA(1);

				if ((LA42_0==WS))
				{
					alt42 = 1;
				}
				} finally { DebugExitDecision(42); }
				switch (alt42)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:200:40: WS
					{
					DebugLocation(200, 40);
					WS97=(IToken)Match(input,WS,Follow._WS_in_file1062); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS97);


					}
					break;

				}
				} finally { DebugExitSubRule(42); }

				DebugLocation(200, 44);
				char_literal98=(IToken)Match(input,185,Follow._185_in_file1065); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_185.Add(char_literal98);



				{
				// AST REWRITE
				// elements: file_spec, file_option
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 200:48: -> ^( T_FILE file_spec ( file_option )* )
				{
					DebugLocation(200, 51);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:200:51: ^( T_FILE file_spec ( file_option )* )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(200, 53);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILE, "T_FILE"), root_1);

					DebugLocation(200, 60);
					adaptor.AddChild(root_1, stream_file_spec.NextTree());
					DebugLocation(200, 70);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:200:70: ( file_option )*
					while ( stream_file_option.HasNext )
					{
						DebugLocation(200, 70);
						adaptor.AddChild(root_1, stream_file_option.NextTree());

					}
					stream_file_option.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:201:4: '[' ( WS )? subquery ( WS )? ']'
				{
				DebugLocation(201, 4);
				char_literal99=(IToken)Match(input,184,Follow._184_in_file1082); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_184.Add(char_literal99);

				DebugLocation(201, 8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:201:8: ( WS )?
				int alt43=2;
				try { DebugEnterSubRule(43);
				try { DebugEnterDecision(43, decisionCanBacktrack[43]);
				int LA43_0 = input.LA(1);

				if ((LA43_0==WS))
				{
					alt43 = 1;
				}
				} finally { DebugExitDecision(43); }
				switch (alt43)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:201:8: WS
					{
					DebugLocation(201, 8);
					WS100=(IToken)Match(input,WS,Follow._WS_in_file1084); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS100);


					}
					break;

				}
				} finally { DebugExitSubRule(43); }

				DebugLocation(201, 12);
				PushFollow(Follow._subquery_in_file1087);
				subquery101=subquery();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_subquery.Add(subquery101.Tree);
				DebugLocation(201, 21);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:201:21: ( WS )?
				int alt44=2;
				try { DebugEnterSubRule(44);
				try { DebugEnterDecision(44, decisionCanBacktrack[44]);
				int LA44_0 = input.LA(1);

				if ((LA44_0==WS))
				{
					alt44 = 1;
				}
				} finally { DebugExitDecision(44); }
				switch (alt44)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:201:21: WS
					{
					DebugLocation(201, 21);
					WS102=(IToken)Match(input,WS,Follow._WS_in_file1089); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS102);


					}
					break;

				}
				} finally { DebugExitSubRule(44); }

				DebugLocation(201, 25);
				char_literal103=(IToken)Match(input,185,Follow._185_in_file1092); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_185.Add(char_literal103);



				{
				// AST REWRITE
				// elements: subquery
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 201:29: -> ^( T_FILESUBQUERY subquery )
				{
					DebugLocation(201, 32);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:201:32: ^( T_FILESUBQUERY subquery )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(201, 34);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILESUBQUERY, "T_FILESUBQUERY"), root_1);

					DebugLocation(201, 49);
					adaptor.AddChild(root_1, stream_subquery.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:202:4: SIMPLE_FILE
				{
				DebugLocation(202, 4);
				SIMPLE_FILE104=(IToken)Match(input,SIMPLE_FILE,Follow._SIMPLE_FILE_in_file1105); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SIMPLE_FILE.Add(SIMPLE_FILE104);



				{
				// AST REWRITE
				// elements: SIMPLE_FILE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 202:16: -> ^( T_FILE SIMPLE_FILE )
				{
					DebugLocation(202, 19);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:202:19: ^( T_FILE SIMPLE_FILE )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(202, 21);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILE, "T_FILE"), root_1);

					DebugLocation(202, 28);
					adaptor.AddChild(root_1, stream_SIMPLE_FILE.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file", 17);
			LeaveRule("file", 17);
			LeaveRule_file();
	    }
	 	DebugLocation(203, 1);
		} finally { DebugExitRule(GrammarFileName, "file"); }
		return retval;

	}
	// $ANTLR end "file"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_spec() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_spec() {}

	// $ANTLR start "file_spec"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:205:1: file_spec : ( string | variable );
	[GrammarRule("file_spec")]
	private AstParserRuleReturnScope<object, IToken> file_spec()
	{
		EnterRule_file_spec();
		EnterRule("file_spec", 18);
		TraceIn("file_spec", 18);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> string105 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> variable106 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "file_spec");
		DebugLocation(205, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:206:2: ( string | variable )
			int alt46=2;
			try { DebugEnterDecision(46, decisionCanBacktrack[46]);
			int LA46_0 = input.LA(1);

			if ((LA46_0==STRING))
			{
				alt46 = 1;
			}
			else if ((LA46_0==VARIABLE))
			{
				alt46 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 46, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(46); }
			switch (alt46)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:206:4: string
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(206, 4);
				PushFollow(Follow._string_in_file_spec1124);
				string105=@string();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, string105.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:207:4: variable
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(207, 4);
				PushFollow(Follow._variable_in_file_spec1129);
				variable106=variable();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variable106.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_spec", 18);
			LeaveRule("file_spec", 18);
			LeaveRule_file_spec();
	    }
	 	DebugLocation(208, 1);
		} finally { DebugExitRule(GrammarFileName, "file_spec"); }
		return retval;

	}
	// $ANTLR end "file_spec"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_option() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_option() {}

	// $ANTLR start "file_option"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:210:1: file_option : '-' file_option_name ( ( WS )? '=' ( WS )? file_option_value )? -> ^( T_FILEOPTION file_option_name ( file_option_value )? ) ;
	[GrammarRule("file_option")]
	private AstParserRuleReturnScope<object, IToken> file_option()
	{
		EnterRule_file_option();
		EnterRule("file_option", 19);
		TraceIn("file_option", 19);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal107 = default(IToken);
	    IToken WS109 = default(IToken);
	    IToken char_literal110 = default(IToken);
	    IToken WS111 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file_option_name108 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> file_option_value112 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal107_tree = default(object);
	    object WS109_tree = default(object);
	    object char_literal110_tree = default(object);
	    object WS111_tree = default(object);
	    RewriteRuleITokenStream stream_181=new RewriteRuleITokenStream(adaptor,"token 181");
	    RewriteRuleITokenStream stream_174=new RewriteRuleITokenStream(adaptor,"token 174");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_file_option_name=new RewriteRuleSubtreeStream(adaptor,"rule file_option_name");
	    RewriteRuleSubtreeStream stream_file_option_value=new RewriteRuleSubtreeStream(adaptor,"rule file_option_value");
		try { DebugEnterRule(GrammarFileName, "file_option");
		DebugLocation(210, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:211:2: ( '-' file_option_name ( ( WS )? '=' ( WS )? file_option_value )? -> ^( T_FILEOPTION file_option_name ( file_option_value )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:211:4: '-' file_option_name ( ( WS )? '=' ( WS )? file_option_value )?
			{
			DebugLocation(211, 4);
			char_literal107=(IToken)Match(input,174,Follow._174_in_file_option1141); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_174.Add(char_literal107);

			DebugLocation(211, 8);
			PushFollow(Follow._file_option_name_in_file_option1143);
			file_option_name108=file_option_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_file_option_name.Add(file_option_name108.Tree);
			DebugLocation(211, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:211:25: ( ( WS )? '=' ( WS )? file_option_value )?
			int alt49=2;
			try { DebugEnterSubRule(49);
			try { DebugEnterDecision(49, decisionCanBacktrack[49]);
			int LA49_0 = input.LA(1);

			if ((LA49_0==WS))
			{
				int LA49_1 = input.LA(2);

				if ((LA49_1==181))
				{
					alt49 = 1;
				}
			}
			else if ((LA49_0==181))
			{
				alt49 = 1;
			}
			} finally { DebugExitDecision(49); }
			switch (alt49)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:211:27: ( WS )? '=' ( WS )? file_option_value
				{
				DebugLocation(211, 27);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:211:27: ( WS )?
				int alt47=2;
				try { DebugEnterSubRule(47);
				try { DebugEnterDecision(47, decisionCanBacktrack[47]);
				int LA47_0 = input.LA(1);

				if ((LA47_0==WS))
				{
					alt47 = 1;
				}
				} finally { DebugExitDecision(47); }
				switch (alt47)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:211:27: WS
					{
					DebugLocation(211, 27);
					WS109=(IToken)Match(input,WS,Follow._WS_in_file_option1147); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS109);


					}
					break;

				}
				} finally { DebugExitSubRule(47); }

				DebugLocation(211, 31);
				char_literal110=(IToken)Match(input,181,Follow._181_in_file_option1150); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_181.Add(char_literal110);

				DebugLocation(211, 35);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:211:35: ( WS )?
				int alt48=2;
				try { DebugEnterSubRule(48);
				try { DebugEnterDecision(48, decisionCanBacktrack[48]);
				int LA48_0 = input.LA(1);

				if ((LA48_0==WS))
				{
					alt48 = 1;
				}
				} finally { DebugExitDecision(48); }
				switch (alt48)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:211:35: WS
					{
					DebugLocation(211, 35);
					WS111=(IToken)Match(input,WS,Follow._WS_in_file_option1152); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS111);


					}
					break;

				}
				} finally { DebugExitSubRule(48); }

				DebugLocation(211, 39);
				PushFollow(Follow._file_option_value_in_file_option1155);
				file_option_value112=file_option_value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_file_option_value.Add(file_option_value112.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(49); }



			{
			// AST REWRITE
			// elements: file_option_value, file_option_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 211:59: -> ^( T_FILEOPTION file_option_name ( file_option_value )? )
			{
				DebugLocation(211, 62);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:211:62: ^( T_FILEOPTION file_option_name ( file_option_value )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(211, 64);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILEOPTION, "T_FILEOPTION"), root_1);

				DebugLocation(211, 77);
				adaptor.AddChild(root_1, stream_file_option_name.NextTree());
				DebugLocation(211, 94);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:211:94: ( file_option_value )?
				if (stream_file_option_value.HasNext)
				{
					DebugLocation(211, 94);
					adaptor.AddChild(root_1, stream_file_option_value.NextTree());

				}
				stream_file_option_value.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_option", 19);
			LeaveRule("file_option", 19);
			LeaveRule_file_option();
	    }
	 	DebugLocation(212, 1);
		} finally { DebugExitRule(GrammarFileName, "file_option"); }
		return retval;

	}
	// $ANTLR end "file_option"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_option_name() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_option_name() {}

	// $ANTLR start "file_option_name"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:214:1: file_option_name : TOKEN ;
	[GrammarRule("file_option_name")]
	private AstParserRuleReturnScope<object, IToken> file_option_name()
	{
		EnterRule_file_option_name();
		EnterRule("file_option_name", 20);
		TraceIn("file_option_name", 20);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN113 = default(IToken);

	    object TOKEN113_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "file_option_name");
		DebugLocation(214, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:215:2: ( TOKEN )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:215:4: TOKEN
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(215, 4);
			TOKEN113=(IToken)Match(input,TOKEN,Follow._TOKEN_in_file_option_name1179); if (state.failed) return retval;
			if (state.backtracking == 0) {
			TOKEN113_tree = (object)adaptor.Create(TOKEN113);
			adaptor.AddChild(root_0, TOKEN113_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_option_name", 20);
			LeaveRule("file_option_name", 20);
			LeaveRule_file_option_name();
	    }
	 	DebugLocation(216, 1);
		} finally { DebugExitRule(GrammarFileName, "file_option_name"); }
		return retval;

	}
	// $ANTLR end "file_option_name"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_option_value() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_option_value() {}

	// $ANTLR start "file_option_value"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:218:1: file_option_value : ( TOKEN | STRING | NUMBER | variable );
	[GrammarRule("file_option_value")]
	private AstParserRuleReturnScope<object, IToken> file_option_value()
	{
		EnterRule_file_option_value();
		EnterRule("file_option_value", 21);
		TraceIn("file_option_value", 21);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN114 = default(IToken);
	    IToken STRING115 = default(IToken);
	    IToken NUMBER116 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> variable117 = default(AstParserRuleReturnScope<object, IToken>);

	    object TOKEN114_tree = default(object);
	    object STRING115_tree = default(object);
	    object NUMBER116_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "file_option_value");
		DebugLocation(218, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:219:2: ( TOKEN | STRING | NUMBER | variable )
			int alt50=4;
			try { DebugEnterDecision(50, decisionCanBacktrack[50]);
			switch (input.LA(1))
			{
			case TOKEN:
				{
				alt50 = 1;
				}
				break;
			case STRING:
				{
				alt50 = 2;
				}
				break;
			case NUMBER:
				{
				alt50 = 3;
				}
				break;
			case VARIABLE:
				{
				alt50 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 50, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(50); }
			switch (alt50)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:219:4: TOKEN
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(219, 4);
				TOKEN114=(IToken)Match(input,TOKEN,Follow._TOKEN_in_file_option_value1191); if (state.failed) return retval;
				if (state.backtracking == 0) {
				TOKEN114_tree = (object)adaptor.Create(TOKEN114);
				adaptor.AddChild(root_0, TOKEN114_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:219:12: STRING
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(219, 12);
				STRING115=(IToken)Match(input,STRING,Follow._STRING_in_file_option_value1195); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRING115_tree = (object)adaptor.Create(STRING115);
				adaptor.AddChild(root_0, STRING115_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:219:21: NUMBER
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(219, 21);
				NUMBER116=(IToken)Match(input,NUMBER,Follow._NUMBER_in_file_option_value1199); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NUMBER116_tree = (object)adaptor.Create(NUMBER116);
				adaptor.AddChild(root_0, NUMBER116_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:219:30: variable
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(219, 30);
				PushFollow(Follow._variable_in_file_option_value1203);
				variable117=variable();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variable117.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_option_value", 21);
			LeaveRule("file_option_value", 21);
			LeaveRule_file_option_value();
	    }
	 	DebugLocation(220, 1);
		} finally { DebugExitRule(GrammarFileName, "file_option_value"); }
		return retval;

	}
	// $ANTLR end "file_option_value"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_where_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_where_clause() {}

	// $ANTLR start "where_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:222:1: where_clause : WHERE WS expression -> ^( T_WHERE expression ) ;
	[GrammarRule("where_clause")]
	private AstParserRuleReturnScope<object, IToken> where_clause()
	{
		EnterRule_where_clause();
		EnterRule("where_clause", 22);
		TraceIn("where_clause", 22);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WHERE118 = default(IToken);
	    IToken WS119 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression120 = default(AstParserRuleReturnScope<object, IToken>);

	    object WHERE118_tree = default(object);
	    object WS119_tree = default(object);
	    RewriteRuleITokenStream stream_WHERE=new RewriteRuleITokenStream(adaptor,"token WHERE");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "where_clause");
		DebugLocation(222, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:223:2: ( WHERE WS expression -> ^( T_WHERE expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:223:4: WHERE WS expression
			{
			DebugLocation(223, 4);
			WHERE118=(IToken)Match(input,WHERE,Follow._WHERE_in_where_clause1215); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WHERE.Add(WHERE118);

			DebugLocation(223, 10);
			WS119=(IToken)Match(input,WS,Follow._WS_in_where_clause1217); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS119);

			DebugLocation(223, 13);
			PushFollow(Follow._expression_in_where_clause1219);
			expression120=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression.Add(expression120.Tree);


			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 224:2: -> ^( T_WHERE expression )
			{
				DebugLocation(224, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:224:5: ^( T_WHERE expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(224, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_WHERE, "T_WHERE"), root_1);

				DebugLocation(224, 15);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("where_clause", 22);
			LeaveRule("where_clause", 22);
			LeaveRule_where_clause();
	    }
	 	DebugLocation(225, 1);
		} finally { DebugExitRule(GrammarFileName, "where_clause"); }
		return retval;

	}
	// $ANTLR end "where_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_groupby_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_groupby_clause() {}

	// $ANTLR start "groupby_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:226:1: groupby_clause : GROUP WS BY WS orderby_column_list -> ^( T_GROUPBY orderby_column_list ) ;
	[GrammarRule("groupby_clause")]
	private AstParserRuleReturnScope<object, IToken> groupby_clause()
	{
		EnterRule_groupby_clause();
		EnterRule("groupby_clause", 23);
		TraceIn("groupby_clause", 23);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken GROUP121 = default(IToken);
	    IToken WS122 = default(IToken);
	    IToken BY123 = default(IToken);
	    IToken WS124 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> orderby_column_list125 = default(AstParserRuleReturnScope<object, IToken>);

	    object GROUP121_tree = default(object);
	    object WS122_tree = default(object);
	    object BY123_tree = default(object);
	    object WS124_tree = default(object);
	    RewriteRuleITokenStream stream_GROUP=new RewriteRuleITokenStream(adaptor,"token GROUP");
	    RewriteRuleITokenStream stream_BY=new RewriteRuleITokenStream(adaptor,"token BY");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_orderby_column_list=new RewriteRuleSubtreeStream(adaptor,"rule orderby_column_list");
		try { DebugEnterRule(GrammarFileName, "groupby_clause");
		DebugLocation(226, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:227:2: ( GROUP WS BY WS orderby_column_list -> ^( T_GROUPBY orderby_column_list ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:227:4: GROUP WS BY WS orderby_column_list
			{
			DebugLocation(227, 4);
			GROUP121=(IToken)Match(input,GROUP,Follow._GROUP_in_groupby_clause1238); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_GROUP.Add(GROUP121);

			DebugLocation(227, 10);
			WS122=(IToken)Match(input,WS,Follow._WS_in_groupby_clause1240); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS122);

			DebugLocation(227, 13);
			BY123=(IToken)Match(input,BY,Follow._BY_in_groupby_clause1242); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_BY.Add(BY123);

			DebugLocation(227, 16);
			WS124=(IToken)Match(input,WS,Follow._WS_in_groupby_clause1244); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS124);

			DebugLocation(227, 19);
			PushFollow(Follow._orderby_column_list_in_groupby_clause1246);
			orderby_column_list125=orderby_column_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_orderby_column_list.Add(orderby_column_list125.Tree);


			{
			// AST REWRITE
			// elements: orderby_column_list
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 228:2: -> ^( T_GROUPBY orderby_column_list )
			{
				DebugLocation(228, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:228:5: ^( T_GROUPBY orderby_column_list )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(228, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_GROUPBY, "T_GROUPBY"), root_1);

				DebugLocation(228, 17);
				adaptor.AddChild(root_1, stream_orderby_column_list.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("groupby_clause", 23);
			LeaveRule("groupby_clause", 23);
			LeaveRule_groupby_clause();
	    }
	 	DebugLocation(229, 1);
		} finally { DebugExitRule(GrammarFileName, "groupby_clause"); }
		return retval;

	}
	// $ANTLR end "groupby_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_having_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_having_clause() {}

	// $ANTLR start "having_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:231:1: having_clause : HAVING WS expression -> ^( T_HAVING expression ) ;
	[GrammarRule("having_clause")]
	private AstParserRuleReturnScope<object, IToken> having_clause()
	{
		EnterRule_having_clause();
		EnterRule("having_clause", 24);
		TraceIn("having_clause", 24);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken HAVING126 = default(IToken);
	    IToken WS127 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression128 = default(AstParserRuleReturnScope<object, IToken>);

	    object HAVING126_tree = default(object);
	    object WS127_tree = default(object);
	    RewriteRuleITokenStream stream_HAVING=new RewriteRuleITokenStream(adaptor,"token HAVING");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "having_clause");
		DebugLocation(231, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:232:2: ( HAVING WS expression -> ^( T_HAVING expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:232:4: HAVING WS expression
			{
			DebugLocation(232, 4);
			HAVING126=(IToken)Match(input,HAVING,Follow._HAVING_in_having_clause1267); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_HAVING.Add(HAVING126);

			DebugLocation(232, 11);
			WS127=(IToken)Match(input,WS,Follow._WS_in_having_clause1269); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS127);

			DebugLocation(232, 14);
			PushFollow(Follow._expression_in_having_clause1271);
			expression128=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression.Add(expression128.Tree);


			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 233:2: -> ^( T_HAVING expression )
			{
				DebugLocation(233, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:233:5: ^( T_HAVING expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(233, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_HAVING, "T_HAVING"), root_1);

				DebugLocation(233, 16);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("having_clause", 24);
			LeaveRule("having_clause", 24);
			LeaveRule_having_clause();
	    }
	 	DebugLocation(234, 1);
		} finally { DebugExitRule(GrammarFileName, "having_clause"); }
		return retval;

	}
	// $ANTLR end "having_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_clause() {}

	// $ANTLR start "orderby_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:236:1: orderby_clause : ORDER WS BY WS orderby_column_list -> ^( T_ORDERBY orderby_column_list ) ;
	[GrammarRule("orderby_clause")]
	private AstParserRuleReturnScope<object, IToken> orderby_clause()
	{
		EnterRule_orderby_clause();
		EnterRule("orderby_clause", 25);
		TraceIn("orderby_clause", 25);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken ORDER129 = default(IToken);
	    IToken WS130 = default(IToken);
	    IToken BY131 = default(IToken);
	    IToken WS132 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> orderby_column_list133 = default(AstParserRuleReturnScope<object, IToken>);

	    object ORDER129_tree = default(object);
	    object WS130_tree = default(object);
	    object BY131_tree = default(object);
	    object WS132_tree = default(object);
	    RewriteRuleITokenStream stream_BY=new RewriteRuleITokenStream(adaptor,"token BY");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_ORDER=new RewriteRuleITokenStream(adaptor,"token ORDER");
	    RewriteRuleSubtreeStream stream_orderby_column_list=new RewriteRuleSubtreeStream(adaptor,"rule orderby_column_list");
		try { DebugEnterRule(GrammarFileName, "orderby_clause");
		DebugLocation(236, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:237:2: ( ORDER WS BY WS orderby_column_list -> ^( T_ORDERBY orderby_column_list ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:237:4: ORDER WS BY WS orderby_column_list
			{
			DebugLocation(237, 4);
			ORDER129=(IToken)Match(input,ORDER,Follow._ORDER_in_orderby_clause1292); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ORDER.Add(ORDER129);

			DebugLocation(237, 10);
			WS130=(IToken)Match(input,WS,Follow._WS_in_orderby_clause1294); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS130);

			DebugLocation(237, 13);
			BY131=(IToken)Match(input,BY,Follow._BY_in_orderby_clause1296); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_BY.Add(BY131);

			DebugLocation(237, 16);
			WS132=(IToken)Match(input,WS,Follow._WS_in_orderby_clause1298); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS132);

			DebugLocation(237, 19);
			PushFollow(Follow._orderby_column_list_in_orderby_clause1300);
			orderby_column_list133=orderby_column_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_orderby_column_list.Add(orderby_column_list133.Tree);


			{
			// AST REWRITE
			// elements: orderby_column_list
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 238:2: -> ^( T_ORDERBY orderby_column_list )
			{
				DebugLocation(238, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:238:5: ^( T_ORDERBY orderby_column_list )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(238, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_ORDERBY, "T_ORDERBY"), root_1);

				DebugLocation(238, 17);
				adaptor.AddChild(root_1, stream_orderby_column_list.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_clause", 25);
			LeaveRule("orderby_clause", 25);
			LeaveRule_orderby_clause();
	    }
	 	DebugLocation(239, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_clause"); }
		return retval;

	}
	// $ANTLR end "orderby_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_column_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_column_list() {}

	// $ANTLR start "orderby_column_list"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:241:1: orderby_column_list : orderby_column ( ( WS )? ',' ( WS )? orderby_column )* -> ( orderby_column )* ;
	[GrammarRule("orderby_column_list")]
	private AstParserRuleReturnScope<object, IToken> orderby_column_list()
	{
		EnterRule_orderby_column_list();
		EnterRule("orderby_column_list", 26);
		TraceIn("orderby_column_list", 26);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS135 = default(IToken);
	    IToken char_literal136 = default(IToken);
	    IToken WS137 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> orderby_column134 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> orderby_column138 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS135_tree = default(object);
	    object char_literal136_tree = default(object);
	    object WS137_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_173=new RewriteRuleITokenStream(adaptor,"token 173");
	    RewriteRuleSubtreeStream stream_orderby_column=new RewriteRuleSubtreeStream(adaptor,"rule orderby_column");
		try { DebugEnterRule(GrammarFileName, "orderby_column_list");
		DebugLocation(241, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:242:2: ( orderby_column ( ( WS )? ',' ( WS )? orderby_column )* -> ( orderby_column )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:242:4: orderby_column ( ( WS )? ',' ( WS )? orderby_column )*
			{
			DebugLocation(242, 4);
			PushFollow(Follow._orderby_column_in_orderby_column_list1321);
			orderby_column134=orderby_column();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_orderby_column.Add(orderby_column134.Tree);
			DebugLocation(242, 19);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:242:19: ( ( WS )? ',' ( WS )? orderby_column )*
			try { DebugEnterSubRule(53);
			while (true)
			{
				int alt53=2;
				try { DebugEnterDecision(53, decisionCanBacktrack[53]);
				int LA53_0 = input.LA(1);

				if ((LA53_0==WS))
				{
					int LA53_1 = input.LA(2);

					if ((LA53_1==173))
					{
						alt53 = 1;
					}


				}
				else if ((LA53_0==173))
				{
					alt53 = 1;
				}


				} finally { DebugExitDecision(53); }
				switch ( alt53 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:242:20: ( WS )? ',' ( WS )? orderby_column
					{
					DebugLocation(242, 20);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:242:20: ( WS )?
					int alt51=2;
					try { DebugEnterSubRule(51);
					try { DebugEnterDecision(51, decisionCanBacktrack[51]);
					int LA51_0 = input.LA(1);

					if ((LA51_0==WS))
					{
						alt51 = 1;
					}
					} finally { DebugExitDecision(51); }
					switch (alt51)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:242:20: WS
						{
						DebugLocation(242, 20);
						WS135=(IToken)Match(input,WS,Follow._WS_in_orderby_column_list1324); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS135);


						}
						break;

					}
					} finally { DebugExitSubRule(51); }

					DebugLocation(242, 24);
					char_literal136=(IToken)Match(input,173,Follow._173_in_orderby_column_list1327); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_173.Add(char_literal136);

					DebugLocation(242, 28);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:242:28: ( WS )?
					int alt52=2;
					try { DebugEnterSubRule(52);
					try { DebugEnterDecision(52, decisionCanBacktrack[52]);
					int LA52_0 = input.LA(1);

					if ((LA52_0==WS))
					{
						alt52 = 1;
					}
					} finally { DebugExitDecision(52); }
					switch (alt52)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:242:28: WS
						{
						DebugLocation(242, 28);
						WS137=(IToken)Match(input,WS,Follow._WS_in_orderby_column_list1329); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS137);


						}
						break;

					}
					} finally { DebugExitSubRule(52); }

					DebugLocation(242, 32);
					PushFollow(Follow._orderby_column_in_orderby_column_list1332);
					orderby_column138=orderby_column();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_orderby_column.Add(orderby_column138.Tree);

					}
					break;

				default:
					goto loop53;
				}
			}

			loop53:
				;

			} finally { DebugExitSubRule(53); }



			{
			// AST REWRITE
			// elements: orderby_column
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 243:2: -> ( orderby_column )*
			{
				DebugLocation(243, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:243:5: ( orderby_column )*
				while ( stream_orderby_column.HasNext )
				{
					DebugLocation(243, 5);
					adaptor.AddChild(root_0, stream_orderby_column.NextTree());

				}
				stream_orderby_column.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_column_list", 26);
			LeaveRule("orderby_column_list", 26);
			LeaveRule_orderby_column_list();
	    }
	 	DebugLocation(244, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_column_list"); }
		return retval;

	}
	// $ANTLR end "orderby_column_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_column() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_column() {}

	// $ANTLR start "orderby_column"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:246:1: orderby_column : expression ( WS orderby_direction )? -> ^( T_ORDERBY_COLUMN expression ( orderby_direction )? ) ;
	[GrammarRule("orderby_column")]
	private AstParserRuleReturnScope<object, IToken> orderby_column()
	{
		EnterRule_orderby_column();
		EnterRule("orderby_column", 27);
		TraceIn("orderby_column", 27);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS140 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression139 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> orderby_direction141 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS140_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_orderby_direction=new RewriteRuleSubtreeStream(adaptor,"rule orderby_direction");
		try { DebugEnterRule(GrammarFileName, "orderby_column");
		DebugLocation(246, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:247:2: ( expression ( WS orderby_direction )? -> ^( T_ORDERBY_COLUMN expression ( orderby_direction )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:247:4: expression ( WS orderby_direction )?
			{
			DebugLocation(247, 4);
			PushFollow(Follow._expression_in_orderby_column1352);
			expression139=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression.Add(expression139.Tree);
			DebugLocation(247, 15);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:247:15: ( WS orderby_direction )?
			int alt54=2;
			try { DebugEnterSubRule(54);
			try { DebugEnterDecision(54, decisionCanBacktrack[54]);
			int LA54_0 = input.LA(1);

			if ((LA54_0==WS))
			{
				int LA54_1 = input.LA(2);

				if ((LA54_1==ASC||LA54_1==DESC||LA54_1==ORIG))
				{
					alt54 = 1;
				}
			}
			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:247:16: WS orderby_direction
				{
				DebugLocation(247, 16);
				WS140=(IToken)Match(input,WS,Follow._WS_in_orderby_column1355); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS140);

				DebugLocation(247, 19);
				PushFollow(Follow._orderby_direction_in_orderby_column1357);
				orderby_direction141=orderby_direction();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_orderby_direction.Add(orderby_direction141.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(54); }



			{
			// AST REWRITE
			// elements: orderby_direction, expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 247:39: -> ^( T_ORDERBY_COLUMN expression ( orderby_direction )? )
			{
				DebugLocation(247, 42);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:247:42: ^( T_ORDERBY_COLUMN expression ( orderby_direction )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(247, 44);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_ORDERBY_COLUMN, "T_ORDERBY_COLUMN"), root_1);

				DebugLocation(247, 61);
				adaptor.AddChild(root_1, stream_expression.NextTree());
				DebugLocation(247, 72);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:247:72: ( orderby_direction )?
				if (stream_orderby_direction.HasNext)
				{
					DebugLocation(247, 72);
					adaptor.AddChild(root_1, stream_orderby_direction.NextTree());

				}
				stream_orderby_direction.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_column", 27);
			LeaveRule("orderby_column", 27);
			LeaveRule_orderby_column();
	    }
	 	DebugLocation(248, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_column"); }
		return retval;

	}
	// $ANTLR end "orderby_column"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_direction() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_direction() {}

	// $ANTLR start "orderby_direction"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:250:1: orderby_direction : ( ASC -> T_ORDERBY_ASC | DESC -> T_ORDERBY_DESC | ORIG -> T_ORDERBY_ORIG );
	[GrammarRule("orderby_direction")]
	private AstParserRuleReturnScope<object, IToken> orderby_direction()
	{
		EnterRule_orderby_direction();
		EnterRule("orderby_direction", 28);
		TraceIn("orderby_direction", 28);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken ASC142 = default(IToken);
	    IToken DESC143 = default(IToken);
	    IToken ORIG144 = default(IToken);

	    object ASC142_tree = default(object);
	    object DESC143_tree = default(object);
	    object ORIG144_tree = default(object);
	    RewriteRuleITokenStream stream_DESC=new RewriteRuleITokenStream(adaptor,"token DESC");
	    RewriteRuleITokenStream stream_ASC=new RewriteRuleITokenStream(adaptor,"token ASC");
	    RewriteRuleITokenStream stream_ORIG=new RewriteRuleITokenStream(adaptor,"token ORIG");

		try { DebugEnterRule(GrammarFileName, "orderby_direction");
		DebugLocation(250, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:251:2: ( ASC -> T_ORDERBY_ASC | DESC -> T_ORDERBY_DESC | ORIG -> T_ORDERBY_ORIG )
			int alt55=3;
			try { DebugEnterDecision(55, decisionCanBacktrack[55]);
			switch (input.LA(1))
			{
			case ASC:
				{
				alt55 = 1;
				}
				break;
			case DESC:
				{
				alt55 = 2;
				}
				break;
			case ORIG:
				{
				alt55 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 55, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(55); }
			switch (alt55)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:251:4: ASC
				{
				DebugLocation(251, 4);
				ASC142=(IToken)Match(input,ASC,Follow._ASC_in_orderby_direction1382); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ASC.Add(ASC142);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 251:8: -> T_ORDERBY_ASC
				{
					DebugLocation(251, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_ORDERBY_ASC, "T_ORDERBY_ASC"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:252:4: DESC
				{
				DebugLocation(252, 4);
				DESC143=(IToken)Match(input,DESC,Follow._DESC_in_orderby_direction1391); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DESC.Add(DESC143);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 252:9: -> T_ORDERBY_DESC
				{
					DebugLocation(252, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_ORDERBY_DESC, "T_ORDERBY_DESC"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:253:4: ORIG
				{
				DebugLocation(253, 4);
				ORIG144=(IToken)Match(input,ORIG,Follow._ORIG_in_orderby_direction1400); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ORIG.Add(ORIG144);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 253:9: -> T_ORDERBY_ORIG
				{
					DebugLocation(253, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_ORDERBY_ORIG, "T_ORDERBY_ORIG"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_direction", 28);
			LeaveRule("orderby_direction", 28);
			LeaveRule_orderby_direction();
	    }
	 	DebugLocation(254, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_direction"); }
		return retval;

	}
	// $ANTLR end "orderby_direction"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_use_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_use_command() {}

	// $ANTLR start "use_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:259:1: use_command : USE WS file -> ^( T_USE file ) ;
	[GrammarRule("use_command")]
	private AstParserRuleReturnScope<object, IToken> use_command()
	{
		EnterRule_use_command();
		EnterRule("use_command", 29);
		TraceIn("use_command", 29);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken USE145 = default(IToken);
	    IToken WS146 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file147 = default(AstParserRuleReturnScope<object, IToken>);

	    object USE145_tree = default(object);
	    object WS146_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_USE=new RewriteRuleITokenStream(adaptor,"token USE");
	    RewriteRuleSubtreeStream stream_file=new RewriteRuleSubtreeStream(adaptor,"rule file");
		try { DebugEnterRule(GrammarFileName, "use_command");
		DebugLocation(259, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:260:2: ( USE WS file -> ^( T_USE file ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:260:4: USE WS file
			{
			DebugLocation(260, 4);
			USE145=(IToken)Match(input,USE,Follow._USE_in_use_command1418); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_USE.Add(USE145);

			DebugLocation(260, 8);
			WS146=(IToken)Match(input,WS,Follow._WS_in_use_command1420); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS146);

			DebugLocation(260, 11);
			PushFollow(Follow._file_in_use_command1422);
			file147=file();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_file.Add(file147.Tree);


			{
			// AST REWRITE
			// elements: file
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 260:16: -> ^( T_USE file )
			{
				DebugLocation(260, 19);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:260:19: ^( T_USE file )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(260, 21);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_USE, "T_USE"), root_1);

				DebugLocation(260, 27);
				adaptor.AddChild(root_1, stream_file.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("use_command", 29);
			LeaveRule("use_command", 29);
			LeaveRule_use_command();
	    }
	 	DebugLocation(261, 1);
		} finally { DebugExitRule(GrammarFileName, "use_command"); }
		return retval;

	}
	// $ANTLR end "use_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_declare_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_declare_command() {}

	// $ANTLR start "declare_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:266:1: declare_command : DECLARE WS declaration_list -> declaration_list ;
	[GrammarRule("declare_command")]
	private AstParserRuleReturnScope<object, IToken> declare_command()
	{
		EnterRule_declare_command();
		EnterRule("declare_command", 30);
		TraceIn("declare_command", 30);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken DECLARE148 = default(IToken);
	    IToken WS149 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> declaration_list150 = default(AstParserRuleReturnScope<object, IToken>);

	    object DECLARE148_tree = default(object);
	    object WS149_tree = default(object);
	    RewriteRuleITokenStream stream_DECLARE=new RewriteRuleITokenStream(adaptor,"token DECLARE");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_declaration_list=new RewriteRuleSubtreeStream(adaptor,"rule declaration_list");
		try { DebugEnterRule(GrammarFileName, "declare_command");
		DebugLocation(266, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:267:2: ( DECLARE WS declaration_list -> declaration_list )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:267:4: DECLARE WS declaration_list
			{
			DebugLocation(267, 4);
			DECLARE148=(IToken)Match(input,DECLARE,Follow._DECLARE_in_declare_command1444); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DECLARE.Add(DECLARE148);

			DebugLocation(267, 12);
			WS149=(IToken)Match(input,WS,Follow._WS_in_declare_command1446); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS149);

			DebugLocation(267, 15);
			PushFollow(Follow._declaration_list_in_declare_command1448);
			declaration_list150=declaration_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_declaration_list.Add(declaration_list150.Tree);


			{
			// AST REWRITE
			// elements: declaration_list
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 267:32: -> declaration_list
			{
				DebugLocation(267, 35);
				adaptor.AddChild(root_0, stream_declaration_list.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declare_command", 30);
			LeaveRule("declare_command", 30);
			LeaveRule_declare_command();
	    }
	 	DebugLocation(268, 1);
		} finally { DebugExitRule(GrammarFileName, "declare_command"); }
		return retval;

	}
	// $ANTLR end "declare_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_declaration_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_declaration_list() {}

	// $ANTLR start "declaration_list"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:270:1: declaration_list : declaration ( ( WS )? ',' ( WS )? declaration )* -> ^( T_DECLARE ( declaration )+ ) ;
	[GrammarRule("declaration_list")]
	private AstParserRuleReturnScope<object, IToken> declaration_list()
	{
		EnterRule_declaration_list();
		EnterRule("declaration_list", 31);
		TraceIn("declaration_list", 31);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS152 = default(IToken);
	    IToken char_literal153 = default(IToken);
	    IToken WS154 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> declaration151 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> declaration155 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS152_tree = default(object);
	    object char_literal153_tree = default(object);
	    object WS154_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_173=new RewriteRuleITokenStream(adaptor,"token 173");
	    RewriteRuleSubtreeStream stream_declaration=new RewriteRuleSubtreeStream(adaptor,"rule declaration");
		try { DebugEnterRule(GrammarFileName, "declaration_list");
		DebugLocation(270, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:271:2: ( declaration ( ( WS )? ',' ( WS )? declaration )* -> ^( T_DECLARE ( declaration )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:271:4: declaration ( ( WS )? ',' ( WS )? declaration )*
			{
			DebugLocation(271, 4);
			PushFollow(Follow._declaration_in_declaration_list1465);
			declaration151=declaration();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_declaration.Add(declaration151.Tree);
			DebugLocation(271, 16);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:271:16: ( ( WS )? ',' ( WS )? declaration )*
			try { DebugEnterSubRule(58);
			while (true)
			{
				int alt58=2;
				try { DebugEnterDecision(58, decisionCanBacktrack[58]);
				int LA58_0 = input.LA(1);

				if ((LA58_0==WS))
				{
					int LA58_1 = input.LA(2);

					if ((LA58_1==173))
					{
						alt58 = 1;
					}


				}
				else if ((LA58_0==173))
				{
					alt58 = 1;
				}


				} finally { DebugExitDecision(58); }
				switch ( alt58 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:271:17: ( WS )? ',' ( WS )? declaration
					{
					DebugLocation(271, 17);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:271:17: ( WS )?
					int alt56=2;
					try { DebugEnterSubRule(56);
					try { DebugEnterDecision(56, decisionCanBacktrack[56]);
					int LA56_0 = input.LA(1);

					if ((LA56_0==WS))
					{
						alt56 = 1;
					}
					} finally { DebugExitDecision(56); }
					switch (alt56)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:271:17: WS
						{
						DebugLocation(271, 17);
						WS152=(IToken)Match(input,WS,Follow._WS_in_declaration_list1468); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS152);


						}
						break;

					}
					} finally { DebugExitSubRule(56); }

					DebugLocation(271, 21);
					char_literal153=(IToken)Match(input,173,Follow._173_in_declaration_list1471); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_173.Add(char_literal153);

					DebugLocation(271, 25);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:271:25: ( WS )?
					int alt57=2;
					try { DebugEnterSubRule(57);
					try { DebugEnterDecision(57, decisionCanBacktrack[57]);
					int LA57_0 = input.LA(1);

					if ((LA57_0==WS))
					{
						alt57 = 1;
					}
					} finally { DebugExitDecision(57); }
					switch (alt57)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:271:25: WS
						{
						DebugLocation(271, 25);
						WS154=(IToken)Match(input,WS,Follow._WS_in_declaration_list1473); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS154);


						}
						break;

					}
					} finally { DebugExitSubRule(57); }

					DebugLocation(271, 29);
					PushFollow(Follow._declaration_in_declaration_list1476);
					declaration155=declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_declaration.Add(declaration155.Tree);

					}
					break;

				default:
					goto loop58;
				}
			}

			loop58:
				;

			} finally { DebugExitSubRule(58); }



			{
			// AST REWRITE
			// elements: declaration
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 272:2: -> ^( T_DECLARE ( declaration )+ )
			{
				DebugLocation(272, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:272:5: ^( T_DECLARE ( declaration )+ )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(272, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_DECLARE, "T_DECLARE"), root_1);

				DebugLocation(272, 17);
				if (!(stream_declaration.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_declaration.HasNext )
				{
					DebugLocation(272, 17);
					adaptor.AddChild(root_1, stream_declaration.NextTree());

				}
				stream_declaration.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declaration_list", 31);
			LeaveRule("declaration_list", 31);
			LeaveRule_declaration_list();
	    }
	 	DebugLocation(273, 1);
		} finally { DebugExitRule(GrammarFileName, "declaration_list"); }
		return retval;

	}
	// $ANTLR end "declaration_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_declaration() {}

	// $ANTLR start "declaration"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:275:1: declaration : variable WS ( AS WS )? datatype -> ^( T_DECLARATION variable datatype ) ;
	[GrammarRule("declaration")]
	private AstParserRuleReturnScope<object, IToken> declaration()
	{
		EnterRule_declaration();
		EnterRule("declaration", 32);
		TraceIn("declaration", 32);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS157 = default(IToken);
	    IToken AS158 = default(IToken);
	    IToken WS159 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> variable156 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> datatype160 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS157_tree = default(object);
	    object AS158_tree = default(object);
	    object WS159_tree = default(object);
	    RewriteRuleITokenStream stream_AS=new RewriteRuleITokenStream(adaptor,"token AS");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_datatype=new RewriteRuleSubtreeStream(adaptor,"rule datatype");
	    RewriteRuleSubtreeStream stream_variable=new RewriteRuleSubtreeStream(adaptor,"rule variable");
		try { DebugEnterRule(GrammarFileName, "declaration");
		DebugLocation(275, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:276:2: ( variable WS ( AS WS )? datatype -> ^( T_DECLARATION variable datatype ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:276:4: variable WS ( AS WS )? datatype
			{
			DebugLocation(276, 4);
			PushFollow(Follow._variable_in_declaration1500);
			variable156=variable();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_variable.Add(variable156.Tree);
			DebugLocation(276, 13);
			WS157=(IToken)Match(input,WS,Follow._WS_in_declaration1502); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS157);

			DebugLocation(276, 16);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:276:16: ( AS WS )?
			int alt59=2;
			try { DebugEnterSubRule(59);
			try { DebugEnterDecision(59, decisionCanBacktrack[59]);
			int LA59_0 = input.LA(1);

			if ((LA59_0==AS))
			{
				alt59 = 1;
			}
			} finally { DebugExitDecision(59); }
			switch (alt59)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:276:17: AS WS
				{
				DebugLocation(276, 17);
				AS158=(IToken)Match(input,AS,Follow._AS_in_declaration1505); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_AS.Add(AS158);

				DebugLocation(276, 20);
				WS159=(IToken)Match(input,WS,Follow._WS_in_declaration1507); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS159);


				}
				break;

			}
			} finally { DebugExitSubRule(59); }

			DebugLocation(276, 25);
			PushFollow(Follow._datatype_in_declaration1511);
			datatype160=datatype();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_datatype.Add(datatype160.Tree);


			{
			// AST REWRITE
			// elements: datatype, variable
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 277:2: -> ^( T_DECLARATION variable datatype )
			{
				DebugLocation(277, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:277:5: ^( T_DECLARATION variable datatype )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(277, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_DECLARATION, "T_DECLARATION"), root_1);

				DebugLocation(277, 21);
				adaptor.AddChild(root_1, stream_variable.NextTree());
				DebugLocation(277, 30);
				adaptor.AddChild(root_1, stream_datatype.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declaration", 32);
			LeaveRule("declaration", 32);
			LeaveRule_declaration();
	    }
	 	DebugLocation(278, 1);
		} finally { DebugExitRule(GrammarFileName, "declaration"); }
		return retval;

	}
	// $ANTLR end "declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_create_view_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_create_view_command() {}

	// $ANTLR start "create_view_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:283:1: create_view_command : CREATE WS VIEW WS view_name ( ( WS )? '(' declaration_list ')' )? WS AS WS select_command -> ^( T_CREATE_VIEW view_name ( declaration_list )? select_command ) ;
	[GrammarRule("create_view_command")]
	private AstParserRuleReturnScope<object, IToken> create_view_command()
	{
		EnterRule_create_view_command();
		EnterRule("create_view_command", 33);
		TraceIn("create_view_command", 33);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken CREATE161 = default(IToken);
	    IToken WS162 = default(IToken);
	    IToken VIEW163 = default(IToken);
	    IToken WS164 = default(IToken);
	    IToken WS166 = default(IToken);
	    IToken char_literal167 = default(IToken);
	    IToken char_literal169 = default(IToken);
	    IToken WS170 = default(IToken);
	    IToken AS171 = default(IToken);
	    IToken WS172 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> view_name165 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> declaration_list168 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> select_command173 = default(AstParserRuleReturnScope<object, IToken>);

	    object CREATE161_tree = default(object);
	    object WS162_tree = default(object);
	    object VIEW163_tree = default(object);
	    object WS164_tree = default(object);
	    object WS166_tree = default(object);
	    object char_literal167_tree = default(object);
	    object char_literal169_tree = default(object);
	    object WS170_tree = default(object);
	    object AS171_tree = default(object);
	    object WS172_tree = default(object);
	    RewriteRuleITokenStream stream_170=new RewriteRuleITokenStream(adaptor,"token 170");
	    RewriteRuleITokenStream stream_AS=new RewriteRuleITokenStream(adaptor,"token AS");
	    RewriteRuleITokenStream stream_CREATE=new RewriteRuleITokenStream(adaptor,"token CREATE");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_VIEW=new RewriteRuleITokenStream(adaptor,"token VIEW");
	    RewriteRuleITokenStream stream_169=new RewriteRuleITokenStream(adaptor,"token 169");
	    RewriteRuleSubtreeStream stream_view_name=new RewriteRuleSubtreeStream(adaptor,"rule view_name");
	    RewriteRuleSubtreeStream stream_select_command=new RewriteRuleSubtreeStream(adaptor,"rule select_command");
	    RewriteRuleSubtreeStream stream_declaration_list=new RewriteRuleSubtreeStream(adaptor,"rule declaration_list");
		try { DebugEnterRule(GrammarFileName, "create_view_command");
		DebugLocation(283, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:284:2: ( CREATE WS VIEW WS view_name ( ( WS )? '(' declaration_list ')' )? WS AS WS select_command -> ^( T_CREATE_VIEW view_name ( declaration_list )? select_command ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:284:4: CREATE WS VIEW WS view_name ( ( WS )? '(' declaration_list ')' )? WS AS WS select_command
			{
			DebugLocation(284, 4);
			CREATE161=(IToken)Match(input,CREATE,Follow._CREATE_in_create_view_command1536); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CREATE.Add(CREATE161);

			DebugLocation(284, 11);
			WS162=(IToken)Match(input,WS,Follow._WS_in_create_view_command1538); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS162);

			DebugLocation(284, 14);
			VIEW163=(IToken)Match(input,VIEW,Follow._VIEW_in_create_view_command1540); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_VIEW.Add(VIEW163);

			DebugLocation(284, 19);
			WS164=(IToken)Match(input,WS,Follow._WS_in_create_view_command1542); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS164);

			DebugLocation(284, 22);
			PushFollow(Follow._view_name_in_create_view_command1544);
			view_name165=view_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_view_name.Add(view_name165.Tree);
			DebugLocation(284, 32);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:284:32: ( ( WS )? '(' declaration_list ')' )?
			int alt61=2;
			try { DebugEnterSubRule(61);
			try { DebugEnterDecision(61, decisionCanBacktrack[61]);
			int LA61_0 = input.LA(1);

			if ((LA61_0==WS))
			{
				int LA61_1 = input.LA(2);

				if ((LA61_1==169))
				{
					alt61 = 1;
				}
			}
			else if ((LA61_0==169))
			{
				alt61 = 1;
			}
			} finally { DebugExitDecision(61); }
			switch (alt61)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:284:33: ( WS )? '(' declaration_list ')'
				{
				DebugLocation(284, 33);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:284:33: ( WS )?
				int alt60=2;
				try { DebugEnterSubRule(60);
				try { DebugEnterDecision(60, decisionCanBacktrack[60]);
				int LA60_0 = input.LA(1);

				if ((LA60_0==WS))
				{
					alt60 = 1;
				}
				} finally { DebugExitDecision(60); }
				switch (alt60)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:284:33: WS
					{
					DebugLocation(284, 33);
					WS166=(IToken)Match(input,WS,Follow._WS_in_create_view_command1547); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS166);


					}
					break;

				}
				} finally { DebugExitSubRule(60); }

				DebugLocation(284, 37);
				char_literal167=(IToken)Match(input,169,Follow._169_in_create_view_command1550); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_169.Add(char_literal167);

				DebugLocation(284, 41);
				PushFollow(Follow._declaration_list_in_create_view_command1552);
				declaration_list168=declaration_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_declaration_list.Add(declaration_list168.Tree);
				DebugLocation(284, 58);
				char_literal169=(IToken)Match(input,170,Follow._170_in_create_view_command1554); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_170.Add(char_literal169);


				}
				break;

			}
			} finally { DebugExitSubRule(61); }

			DebugLocation(284, 64);
			WS170=(IToken)Match(input,WS,Follow._WS_in_create_view_command1558); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS170);

			DebugLocation(284, 67);
			AS171=(IToken)Match(input,AS,Follow._AS_in_create_view_command1560); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_AS.Add(AS171);

			DebugLocation(284, 70);
			WS172=(IToken)Match(input,WS,Follow._WS_in_create_view_command1562); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS172);

			DebugLocation(284, 73);
			PushFollow(Follow._select_command_in_create_view_command1564);
			select_command173=select_command();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_select_command.Add(select_command173.Tree);


			{
			// AST REWRITE
			// elements: declaration_list, view_name, select_command
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 285:2: -> ^( T_CREATE_VIEW view_name ( declaration_list )? select_command )
			{
				DebugLocation(285, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:285:5: ^( T_CREATE_VIEW view_name ( declaration_list )? select_command )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(285, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CREATE_VIEW, "T_CREATE_VIEW"), root_1);

				DebugLocation(285, 21);
				adaptor.AddChild(root_1, stream_view_name.NextTree());
				DebugLocation(285, 31);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:285:31: ( declaration_list )?
				if (stream_declaration_list.HasNext)
				{
					DebugLocation(285, 31);
					adaptor.AddChild(root_1, stream_declaration_list.NextTree());

				}
				stream_declaration_list.Reset();
				DebugLocation(285, 49);
				adaptor.AddChild(root_1, stream_select_command.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("create_view_command", 33);
			LeaveRule("create_view_command", 33);
			LeaveRule_create_view_command();
	    }
	 	DebugLocation(286, 1);
		} finally { DebugExitRule(GrammarFileName, "create_view_command"); }
		return retval;

	}
	// $ANTLR end "create_view_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_drop_view_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_drop_view_command() {}

	// $ANTLR start "drop_view_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:288:1: drop_view_command : DROP WS VIEW WS view_name -> ^( T_DROP_VIEW view_name ) ;
	[GrammarRule("drop_view_command")]
	private AstParserRuleReturnScope<object, IToken> drop_view_command()
	{
		EnterRule_drop_view_command();
		EnterRule("drop_view_command", 34);
		TraceIn("drop_view_command", 34);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken DROP174 = default(IToken);
	    IToken WS175 = default(IToken);
	    IToken VIEW176 = default(IToken);
	    IToken WS177 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> view_name178 = default(AstParserRuleReturnScope<object, IToken>);

	    object DROP174_tree = default(object);
	    object WS175_tree = default(object);
	    object VIEW176_tree = default(object);
	    object WS177_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_VIEW=new RewriteRuleITokenStream(adaptor,"token VIEW");
	    RewriteRuleITokenStream stream_DROP=new RewriteRuleITokenStream(adaptor,"token DROP");
	    RewriteRuleSubtreeStream stream_view_name=new RewriteRuleSubtreeStream(adaptor,"rule view_name");
		try { DebugEnterRule(GrammarFileName, "drop_view_command");
		DebugLocation(288, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:289:2: ( DROP WS VIEW WS view_name -> ^( T_DROP_VIEW view_name ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:289:4: DROP WS VIEW WS view_name
			{
			DebugLocation(289, 4);
			DROP174=(IToken)Match(input,DROP,Follow._DROP_in_drop_view_command1590); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DROP.Add(DROP174);

			DebugLocation(289, 9);
			WS175=(IToken)Match(input,WS,Follow._WS_in_drop_view_command1592); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS175);

			DebugLocation(289, 12);
			VIEW176=(IToken)Match(input,VIEW,Follow._VIEW_in_drop_view_command1594); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_VIEW.Add(VIEW176);

			DebugLocation(289, 17);
			WS177=(IToken)Match(input,WS,Follow._WS_in_drop_view_command1596); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS177);

			DebugLocation(289, 20);
			PushFollow(Follow._view_name_in_drop_view_command1598);
			view_name178=view_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_view_name.Add(view_name178.Tree);


			{
			// AST REWRITE
			// elements: view_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 290:2: -> ^( T_DROP_VIEW view_name )
			{
				DebugLocation(290, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:290:5: ^( T_DROP_VIEW view_name )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(290, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_DROP_VIEW, "T_DROP_VIEW"), root_1);

				DebugLocation(290, 19);
				adaptor.AddChild(root_1, stream_view_name.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("drop_view_command", 34);
			LeaveRule("drop_view_command", 34);
			LeaveRule_drop_view_command();
	    }
	 	DebugLocation(291, 1);
		} finally { DebugExitRule(GrammarFileName, "drop_view_command"); }
		return retval;

	}
	// $ANTLR end "drop_view_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_view_name() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_view_name() {}

	// $ANTLR start "view_name"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:293:1: view_name : TOKEN -> ^( T_VIEW_NAME TOKEN ) ;
	[GrammarRule("view_name")]
	private AstParserRuleReturnScope<object, IToken> view_name()
	{
		EnterRule_view_name();
		EnterRule("view_name", 35);
		TraceIn("view_name", 35);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN179 = default(IToken);

	    object TOKEN179_tree = default(object);
	    RewriteRuleITokenStream stream_TOKEN=new RewriteRuleITokenStream(adaptor,"token TOKEN");

		try { DebugEnterRule(GrammarFileName, "view_name");
		DebugLocation(293, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:294:2: ( TOKEN -> ^( T_VIEW_NAME TOKEN ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:294:4: TOKEN
			{
			DebugLocation(294, 4);
			TOKEN179=(IToken)Match(input,TOKEN,Follow._TOKEN_in_view_name1618); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_TOKEN.Add(TOKEN179);



			{
			// AST REWRITE
			// elements: TOKEN
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 294:10: -> ^( T_VIEW_NAME TOKEN )
			{
				DebugLocation(294, 13);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:294:13: ^( T_VIEW_NAME TOKEN )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(294, 15);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_VIEW_NAME, "T_VIEW_NAME"), root_1);

				DebugLocation(294, 27);
				adaptor.AddChild(root_1, stream_TOKEN.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("view_name", 35);
			LeaveRule("view_name", 35);
			LeaveRule_view_name();
	    }
	 	DebugLocation(295, 1);
		} finally { DebugExitRule(GrammarFileName, "view_name"); }
		return retval;

	}
	// $ANTLR end "view_name"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_drop_table_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_drop_table_command() {}

	// $ANTLR start "drop_table_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:299:1: drop_table_command : DROP WS TABLE WS file -> ^( T_DROP_TABLE file ) ;
	[GrammarRule("drop_table_command")]
	private AstParserRuleReturnScope<object, IToken> drop_table_command()
	{
		EnterRule_drop_table_command();
		EnterRule("drop_table_command", 36);
		TraceIn("drop_table_command", 36);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken DROP180 = default(IToken);
	    IToken WS181 = default(IToken);
	    IToken TABLE182 = default(IToken);
	    IToken WS183 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file184 = default(AstParserRuleReturnScope<object, IToken>);

	    object DROP180_tree = default(object);
	    object WS181_tree = default(object);
	    object TABLE182_tree = default(object);
	    object WS183_tree = default(object);
	    RewriteRuleITokenStream stream_TABLE=new RewriteRuleITokenStream(adaptor,"token TABLE");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_DROP=new RewriteRuleITokenStream(adaptor,"token DROP");
	    RewriteRuleSubtreeStream stream_file=new RewriteRuleSubtreeStream(adaptor,"rule file");
		try { DebugEnterRule(GrammarFileName, "drop_table_command");
		DebugLocation(299, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:300:2: ( DROP WS TABLE WS file -> ^( T_DROP_TABLE file ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:300:4: DROP WS TABLE WS file
			{
			DebugLocation(300, 4);
			DROP180=(IToken)Match(input,DROP,Follow._DROP_in_drop_table_command1640); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DROP.Add(DROP180);

			DebugLocation(300, 9);
			WS181=(IToken)Match(input,WS,Follow._WS_in_drop_table_command1642); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS181);

			DebugLocation(300, 12);
			TABLE182=(IToken)Match(input,TABLE,Follow._TABLE_in_drop_table_command1644); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_TABLE.Add(TABLE182);

			DebugLocation(300, 18);
			WS183=(IToken)Match(input,WS,Follow._WS_in_drop_table_command1646); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS183);

			DebugLocation(300, 21);
			PushFollow(Follow._file_in_drop_table_command1648);
			file184=file();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_file.Add(file184.Tree);


			{
			// AST REWRITE
			// elements: file
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 301:2: -> ^( T_DROP_TABLE file )
			{
				DebugLocation(301, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:301:5: ^( T_DROP_TABLE file )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(301, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_DROP_TABLE, "T_DROP_TABLE"), root_1);

				DebugLocation(301, 20);
				adaptor.AddChild(root_1, stream_file.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("drop_table_command", 36);
			LeaveRule("drop_table_command", 36);
			LeaveRule_drop_table_command();
	    }
	 	DebugLocation(302, 1);
		} finally { DebugExitRule(GrammarFileName, "drop_table_command"); }
		return retval;

	}
	// $ANTLR end "drop_table_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_set_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_set_command() {}

	// $ANTLR start "set_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:308:1: set_command : SET WS variable ( WS )? '=' ( WS )? expression -> ^( T_SET_VARIABLE variable expression ) ;
	[GrammarRule("set_command")]
	private AstParserRuleReturnScope<object, IToken> set_command()
	{
		EnterRule_set_command();
		EnterRule("set_command", 37);
		TraceIn("set_command", 37);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken SET185 = default(IToken);
	    IToken WS186 = default(IToken);
	    IToken WS188 = default(IToken);
	    IToken char_literal189 = default(IToken);
	    IToken WS190 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> variable187 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression191 = default(AstParserRuleReturnScope<object, IToken>);

	    object SET185_tree = default(object);
	    object WS186_tree = default(object);
	    object WS188_tree = default(object);
	    object char_literal189_tree = default(object);
	    object WS190_tree = default(object);
	    RewriteRuleITokenStream stream_181=new RewriteRuleITokenStream(adaptor,"token 181");
	    RewriteRuleITokenStream stream_SET=new RewriteRuleITokenStream(adaptor,"token SET");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_variable=new RewriteRuleSubtreeStream(adaptor,"rule variable");
		try { DebugEnterRule(GrammarFileName, "set_command");
		DebugLocation(308, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:309:2: ( SET WS variable ( WS )? '=' ( WS )? expression -> ^( T_SET_VARIABLE variable expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:309:4: SET WS variable ( WS )? '=' ( WS )? expression
			{
			DebugLocation(309, 4);
			SET185=(IToken)Match(input,SET,Follow._SET_in_set_command1672); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_SET.Add(SET185);

			DebugLocation(309, 8);
			WS186=(IToken)Match(input,WS,Follow._WS_in_set_command1674); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS186);

			DebugLocation(309, 11);
			PushFollow(Follow._variable_in_set_command1676);
			variable187=variable();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_variable.Add(variable187.Tree);
			DebugLocation(309, 20);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:309:20: ( WS )?
			int alt62=2;
			try { DebugEnterSubRule(62);
			try { DebugEnterDecision(62, decisionCanBacktrack[62]);
			int LA62_0 = input.LA(1);

			if ((LA62_0==WS))
			{
				alt62 = 1;
			}
			} finally { DebugExitDecision(62); }
			switch (alt62)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:309:20: WS
				{
				DebugLocation(309, 20);
				WS188=(IToken)Match(input,WS,Follow._WS_in_set_command1678); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS188);


				}
				break;

			}
			} finally { DebugExitSubRule(62); }

			DebugLocation(309, 24);
			char_literal189=(IToken)Match(input,181,Follow._181_in_set_command1681); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_181.Add(char_literal189);

			DebugLocation(309, 28);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:309:28: ( WS )?
			int alt63=2;
			try { DebugEnterSubRule(63);
			try { DebugEnterDecision(63, decisionCanBacktrack[63]);
			int LA63_0 = input.LA(1);

			if ((LA63_0==WS))
			{
				alt63 = 1;
			}
			} finally { DebugExitDecision(63); }
			switch (alt63)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:309:28: WS
				{
				DebugLocation(309, 28);
				WS190=(IToken)Match(input,WS,Follow._WS_in_set_command1683); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS190);


				}
				break;

			}
			} finally { DebugExitSubRule(63); }

			DebugLocation(309, 32);
			PushFollow(Follow._expression_in_set_command1686);
			expression191=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression.Add(expression191.Tree);


			{
			// AST REWRITE
			// elements: expression, variable
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 310:2: -> ^( T_SET_VARIABLE variable expression )
			{
				DebugLocation(310, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:310:5: ^( T_SET_VARIABLE variable expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(310, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SET_VARIABLE, "T_SET_VARIABLE"), root_1);

				DebugLocation(310, 22);
				adaptor.AddChild(root_1, stream_variable.NextTree());
				DebugLocation(310, 31);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("set_command", 37);
			LeaveRule("set_command", 37);
			LeaveRule_set_command();
	    }
	 	DebugLocation(311, 1);
		} finally { DebugExitRule(GrammarFileName, "set_command"); }
		return retval;

	}
	// $ANTLR end "set_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_list() {}

	// $ANTLR start "expression_list"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:316:1: expression_list : expression ( ( WS )? ',' ( WS )? expression )* -> ^( T_EXPRESSIONLIST ( expression )+ ) ;
	[GrammarRule("expression_list")]
	private AstParserRuleReturnScope<object, IToken> expression_list()
	{
		EnterRule_expression_list();
		EnterRule("expression_list", 38);
		TraceIn("expression_list", 38);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS193 = default(IToken);
	    IToken char_literal194 = default(IToken);
	    IToken WS195 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression192 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression196 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS193_tree = default(object);
	    object char_literal194_tree = default(object);
	    object WS195_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_173=new RewriteRuleITokenStream(adaptor,"token 173");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "expression_list");
		DebugLocation(316, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:317:2: ( expression ( ( WS )? ',' ( WS )? expression )* -> ^( T_EXPRESSIONLIST ( expression )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:317:4: expression ( ( WS )? ',' ( WS )? expression )*
			{
			DebugLocation(317, 4);
			PushFollow(Follow._expression_in_expression_list1711);
			expression192=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression.Add(expression192.Tree);
			DebugLocation(317, 15);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:317:15: ( ( WS )? ',' ( WS )? expression )*
			try { DebugEnterSubRule(66);
			while (true)
			{
				int alt66=2;
				try { DebugEnterDecision(66, decisionCanBacktrack[66]);
				int LA66_0 = input.LA(1);

				if ((LA66_0==WS))
				{
					int LA66_2 = input.LA(2);

					if ((LA66_2==173))
					{
						alt66 = 1;
					}


				}
				else if ((LA66_0==173))
				{
					alt66 = 1;
				}


				} finally { DebugExitDecision(66); }
				switch ( alt66 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:317:16: ( WS )? ',' ( WS )? expression
					{
					DebugLocation(317, 16);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:317:16: ( WS )?
					int alt64=2;
					try { DebugEnterSubRule(64);
					try { DebugEnterDecision(64, decisionCanBacktrack[64]);
					int LA64_0 = input.LA(1);

					if ((LA64_0==WS))
					{
						alt64 = 1;
					}
					} finally { DebugExitDecision(64); }
					switch (alt64)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:317:16: WS
						{
						DebugLocation(317, 16);
						WS193=(IToken)Match(input,WS,Follow._WS_in_expression_list1714); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS193);


						}
						break;

					}
					} finally { DebugExitSubRule(64); }

					DebugLocation(317, 20);
					char_literal194=(IToken)Match(input,173,Follow._173_in_expression_list1717); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_173.Add(char_literal194);

					DebugLocation(317, 24);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:317:24: ( WS )?
					int alt65=2;
					try { DebugEnterSubRule(65);
					try { DebugEnterDecision(65, decisionCanBacktrack[65]);
					int LA65_0 = input.LA(1);

					if ((LA65_0==WS))
					{
						alt65 = 1;
					}
					} finally { DebugExitDecision(65); }
					switch (alt65)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:317:24: WS
						{
						DebugLocation(317, 24);
						WS195=(IToken)Match(input,WS,Follow._WS_in_expression_list1719); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS195);


						}
						break;

					}
					} finally { DebugExitSubRule(65); }

					DebugLocation(317, 28);
					PushFollow(Follow._expression_in_expression_list1722);
					expression196=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expression.Add(expression196.Tree);

					}
					break;

				default:
					goto loop66;
				}
			}

			loop66:
				;

			} finally { DebugExitSubRule(66); }



			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 317:41: -> ^( T_EXPRESSIONLIST ( expression )+ )
			{
				DebugLocation(317, 44);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:317:44: ^( T_EXPRESSIONLIST ( expression )+ )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(317, 46);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_EXPRESSIONLIST, "T_EXPRESSIONLIST"), root_1);

				DebugLocation(317, 63);
				if (!(stream_expression.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_expression.HasNext )
				{
					DebugLocation(317, 63);
					adaptor.AddChild(root_1, stream_expression.NextTree());

				}
				stream_expression.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_list", 38);
			LeaveRule("expression_list", 38);
			LeaveRule_expression_list();
	    }
	 	DebugLocation(318, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_list"); }
		return retval;

	}
	// $ANTLR end "expression_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_list_or_select_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_list_or_select_command() {}

	// $ANTLR start "expression_list_or_select_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:320:1: expression_list_or_select_command : ( ( SELECT )=> select_command | expression_list );
	[GrammarRule("expression_list_or_select_command")]
	private AstParserRuleReturnScope<object, IToken> expression_list_or_select_command()
	{
		EnterRule_expression_list_or_select_command();
		EnterRule("expression_list_or_select_command", 39);
		TraceIn("expression_list_or_select_command", 39);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> select_command197 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list198 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "expression_list_or_select_command");
		DebugLocation(320, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:321:2: ( ( SELECT )=> select_command | expression_list )
			int alt67=2;
			try { DebugEnterDecision(67, decisionCanBacktrack[67]);
			int LA67_0 = input.LA(1);

			if ((LA67_0==169))
			{
				int LA67_1 = input.LA(2);

				if ((EvaluatePredicate(synpred2_gql_fragment)))
				{
					alt67 = 1;
				}
				else if ((true))
				{
					alt67 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 67, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA67_0==SELECT) && (EvaluatePredicate(synpred2_gql_fragment)))
			{
				alt67 = 1;
			}
			else if (((LA67_0>=CASE && LA67_0<=CAST)||(LA67_0>=CONVERT && LA67_0<=COUNT)||(LA67_0>=DATEADD && LA67_0<=DATEPART)||LA67_0==EXISTS||(LA67_0>=NOT && LA67_0<=NUMBER)||LA67_0==SIMPLE_FILE||(LA67_0>=STRING && LA67_0<=SYSTEMVAR)||LA67_0==TOKEN||LA67_0==VARIABLE||LA67_0==172||LA67_0==174||LA67_0==188))
			{
				alt67 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 67, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(67); }
			switch (alt67)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:321:4: ( SELECT )=> select_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(321, 16);
				PushFollow(Follow._select_command_in_expression_list_or_select_command1751);
				select_command197=select_command();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, select_command197.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:322:4: expression_list
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(322, 4);
				PushFollow(Follow._expression_list_in_expression_list_or_select_command1756);
				expression_list198=expression_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression_list198.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_list_or_select_command", 39);
			LeaveRule("expression_list_or_select_command", 39);
			LeaveRule_expression_list_or_select_command();
	    }
	 	DebugLocation(323, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_list_or_select_command"); }
		return retval;

	}
	// $ANTLR end "expression_list_or_select_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression() {}

	// $ANTLR start "expression"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:325:1: expression : expression_7 ;
	[GrammarRule("expression")]
	private AstParserRuleReturnScope<object, IToken> expression()
	{
		EnterRule_expression();
		EnterRule("expression", 40);
		TraceIn("expression", 40);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> expression_7199 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(325, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:326:2: ( expression_7 )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:326:4: expression_7
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(326, 4);
			PushFollow(Follow._expression_7_in_expression1769);
			expression_7199=expression_7();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression_7199.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression", 40);
			LeaveRule("expression", 40);
			LeaveRule_expression();
	    }
	 	DebugLocation(327, 1);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return retval;

	}
	// $ANTLR end "expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_7() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_7() {}

	// $ANTLR start "expression_7"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:329:1: expression_7 : (a= expression_6 -> $a) ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )* ;
	[GrammarRule("expression_7")]
	private AstParserRuleReturnScope<object, IToken> expression_7()
	{
		EnterRule_expression_7();
		EnterRule("expression_7", 41);
		TraceIn("expression_7", 41);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS200 = default(IToken);
	    IToken WS202 = default(IToken);
	    IToken IN203 = default(IToken);
	    IToken WS204 = default(IToken);
	    IToken char_literal205 = default(IToken);
	    IToken WS206 = default(IToken);
	    IToken WS208 = default(IToken);
	    IToken char_literal209 = default(IToken);
	    IToken NOT210 = default(IToken);
	    IToken WS211 = default(IToken);
	    IToken IN212 = default(IToken);
	    IToken WS213 = default(IToken);
	    IToken char_literal214 = default(IToken);
	    IToken WS215 = default(IToken);
	    IToken WS217 = default(IToken);
	    IToken char_literal218 = default(IToken);
	    IToken WS220 = default(IToken);
	    IToken SOME221 = default(IToken);
	    IToken ANY222 = default(IToken);
	    IToken WS223 = default(IToken);
	    IToken char_literal224 = default(IToken);
	    IToken char_literal226 = default(IToken);
	    IToken WS228 = default(IToken);
	    IToken ALL229 = default(IToken);
	    IToken WS230 = default(IToken);
	    IToken char_literal231 = default(IToken);
	    IToken char_literal233 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_7201 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command207 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command216 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_4219 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command225 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_4227 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command232 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS200_tree = default(object);
	    object WS202_tree = default(object);
	    object IN203_tree = default(object);
	    object WS204_tree = default(object);
	    object char_literal205_tree = default(object);
	    object WS206_tree = default(object);
	    object WS208_tree = default(object);
	    object char_literal209_tree = default(object);
	    object NOT210_tree = default(object);
	    object WS211_tree = default(object);
	    object IN212_tree = default(object);
	    object WS213_tree = default(object);
	    object char_literal214_tree = default(object);
	    object WS215_tree = default(object);
	    object WS217_tree = default(object);
	    object char_literal218_tree = default(object);
	    object WS220_tree = default(object);
	    object SOME221_tree = default(object);
	    object ANY222_tree = default(object);
	    object WS223_tree = default(object);
	    object char_literal224_tree = default(object);
	    object char_literal226_tree = default(object);
	    object WS228_tree = default(object);
	    object ALL229_tree = default(object);
	    object WS230_tree = default(object);
	    object char_literal231_tree = default(object);
	    object char_literal233_tree = default(object);
	    RewriteRuleITokenStream stream_170=new RewriteRuleITokenStream(adaptor,"token 170");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_ANY=new RewriteRuleITokenStream(adaptor,"token ANY");
	    RewriteRuleITokenStream stream_IN=new RewriteRuleITokenStream(adaptor,"token IN");
	    RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");
	    RewriteRuleITokenStream stream_169=new RewriteRuleITokenStream(adaptor,"token 169");
	    RewriteRuleITokenStream stream_SOME=new RewriteRuleITokenStream(adaptor,"token SOME");
	    RewriteRuleITokenStream stream_ALL=new RewriteRuleITokenStream(adaptor,"token ALL");
	    RewriteRuleSubtreeStream stream_op_7=new RewriteRuleSubtreeStream(adaptor,"rule op_7");
	    RewriteRuleSubtreeStream stream_expression_6=new RewriteRuleSubtreeStream(adaptor,"rule expression_6");
	    RewriteRuleSubtreeStream stream_expression_list_or_select_command=new RewriteRuleSubtreeStream(adaptor,"rule expression_list_or_select_command");
	    RewriteRuleSubtreeStream stream_op_4=new RewriteRuleSubtreeStream(adaptor,"rule op_4");
		try { DebugEnterRule(GrammarFileName, "expression_7");
		DebugLocation(329, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:330:2: ( (a= expression_6 -> $a) ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:330:4: (a= expression_6 -> $a) ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )*
			{
			DebugLocation(330, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:330:4: (a= expression_6 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:330:5: a= expression_6
			{
			DebugLocation(330, 6);
			PushFollow(Follow._expression_6_in_expression_71785);
			a=expression_6();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression_6.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 330:19: -> $a
			{
				DebugLocation(330, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(330, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:330:25: ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )*
			try { DebugEnterSubRule(80);
			while (true)
			{
				int alt80=2;
				try { DebugEnterDecision(80, decisionCanBacktrack[80]);
				int LA80_0 = input.LA(1);

				if ((LA80_0==WS))
				{
					int LA80_1 = input.LA(2);

					if ((LA80_1==BETWEEN||LA80_1==IN||LA80_1==LIKE||LA80_1==MATCH||LA80_1==NOT||LA80_1==OR||(LA80_1>=164 && LA80_1<=166)||(LA80_1>=178 && LA80_1<=183)))
					{
						alt80 = 1;
					}


				}


				} finally { DebugExitDecision(80); }
				switch ( alt80 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:330:26: WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) )
					{
					DebugLocation(330, 26);
					WS200=(IToken)Match(input,WS,Follow._WS_in_expression_71792); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS200);

					DebugLocation(330, 29);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:330:29: ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) )
					int alt79=5;
					try { DebugEnterSubRule(79);
					try { DebugEnterDecision(79, decisionCanBacktrack[79]);
					switch (input.LA(1))
					{
					case BETWEEN:
					case OR:
						{
						alt79 = 1;
						}
						break;
					case NOT:
						{
						int LA79_2 = input.LA(2);

						if ((LA79_2==WS))
						{
							switch (input.LA(3))
							{
							case BETWEEN:
								{
								alt79 = 1;
								}
								break;
							case IN:
								{
								alt79 = 3;
								}
								break;
							case LIKE:
								{
								switch (input.LA(4))
								{
								case WS:
									{
									int LA79_16 = input.LA(5);

									if ((LA79_16==ANY||LA79_16==SOME))
									{
										alt79 = 4;
									}
									else if ((LA79_16==ALL))
									{
										alt79 = 5;
									}
									else
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 79, 16, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
									}
									break;
								case ANY:
								case SOME:
									{
									alt79 = 4;
									}
									break;
								case ALL:
									{
									alt79 = 5;
									}
									break;
								default:
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 79, 20, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

								}
								break;
							case MATCH:
								{
								switch (input.LA(4))
								{
								case WS:
									{
									int LA79_16 = input.LA(5);

									if ((LA79_16==ANY||LA79_16==SOME))
									{
										alt79 = 4;
									}
									else if ((LA79_16==ALL))
									{
										alt79 = 5;
									}
									else
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 79, 16, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
									}
									break;
								case ANY:
								case SOME:
									{
									alt79 = 4;
									}
									break;
								case ALL:
									{
									alt79 = 5;
									}
									break;
								default:
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 79, 21, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

								}
								break;
							default:
								{
									if (state.backtracking>0) {state.failed=true; return retval;}
									NoViableAltException nvae = new NoViableAltException("", 79, 15, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}

						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 79, 2, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case IN:
						{
						alt79 = 2;
						}
						break;
					case 181:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA79_16 = input.LA(3);

							if ((LA79_16==ANY||LA79_16==SOME))
							{
								alt79 = 4;
							}
							else if ((LA79_16==ALL))
							{
								alt79 = 5;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 79, 16, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt79 = 4;
							}
							break;
						case ALL:
							{
							alt79 = 5;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 79, 4, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 183:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA79_16 = input.LA(3);

							if ((LA79_16==ANY||LA79_16==SOME))
							{
								alt79 = 4;
							}
							else if ((LA79_16==ALL))
							{
								alt79 = 5;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 79, 16, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt79 = 4;
							}
							break;
						case ALL:
							{
							alt79 = 5;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 79, 5, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 179:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA79_16 = input.LA(3);

							if ((LA79_16==ANY||LA79_16==SOME))
							{
								alt79 = 4;
							}
							else if ((LA79_16==ALL))
							{
								alt79 = 5;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 79, 16, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt79 = 4;
							}
							break;
						case ALL:
							{
							alt79 = 5;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 79, 6, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 180:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA79_16 = input.LA(3);

							if ((LA79_16==ANY||LA79_16==SOME))
							{
								alt79 = 4;
							}
							else if ((LA79_16==ALL))
							{
								alt79 = 5;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 79, 16, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt79 = 4;
							}
							break;
						case ALL:
							{
							alt79 = 5;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 79, 7, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 165:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA79_16 = input.LA(3);

							if ((LA79_16==ANY||LA79_16==SOME))
							{
								alt79 = 4;
							}
							else if ((LA79_16==ALL))
							{
								alt79 = 5;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 79, 16, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt79 = 4;
							}
							break;
						case ALL:
							{
							alt79 = 5;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 79, 8, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 166:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA79_16 = input.LA(3);

							if ((LA79_16==ANY||LA79_16==SOME))
							{
								alt79 = 4;
							}
							else if ((LA79_16==ALL))
							{
								alt79 = 5;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 79, 16, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt79 = 4;
							}
							break;
						case ALL:
							{
							alt79 = 5;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 79, 9, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 164:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA79_16 = input.LA(3);

							if ((LA79_16==ANY||LA79_16==SOME))
							{
								alt79 = 4;
							}
							else if ((LA79_16==ALL))
							{
								alt79 = 5;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 79, 16, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt79 = 4;
							}
							break;
						case ALL:
							{
							alt79 = 5;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 79, 10, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 182:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA79_16 = input.LA(3);

							if ((LA79_16==ANY||LA79_16==SOME))
							{
								alt79 = 4;
							}
							else if ((LA79_16==ALL))
							{
								alt79 = 5;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 79, 16, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt79 = 4;
							}
							break;
						case ALL:
							{
							alt79 = 5;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 79, 11, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 178:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA79_16 = input.LA(3);

							if ((LA79_16==ANY||LA79_16==SOME))
							{
								alt79 = 4;
							}
							else if ((LA79_16==ALL))
							{
								alt79 = 5;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 79, 16, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt79 = 4;
							}
							break;
						case ALL:
							{
							alt79 = 5;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 79, 12, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case LIKE:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA79_16 = input.LA(3);

							if ((LA79_16==ANY||LA79_16==SOME))
							{
								alt79 = 4;
							}
							else if ((LA79_16==ALL))
							{
								alt79 = 5;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 79, 16, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt79 = 4;
							}
							break;
						case ALL:
							{
							alt79 = 5;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 79, 13, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case MATCH:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA79_16 = input.LA(3);

							if ((LA79_16==ANY||LA79_16==SOME))
							{
								alt79 = 4;
							}
							else if ((LA79_16==ALL))
							{
								alt79 = 5;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 79, 16, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt79 = 4;
							}
							break;
						case ALL:
							{
							alt79 = 5;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 79, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					default:
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 79, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(79); }
					switch (alt79)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:331:2: op_7 WS b= expression_6
						{
						DebugLocation(331, 2);
						PushFollow(Follow._op_7_in_expression_71797);
						op_7201=op_7();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_op_7.Add(op_7201.Tree);
						DebugLocation(331, 7);
						WS202=(IToken)Match(input,WS,Follow._WS_in_expression_71799); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS202);

						DebugLocation(331, 11);
						PushFollow(Follow._expression_6_in_expression_71803);
						b=expression_6();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expression_6.Add(b.Tree);


						{
						// AST REWRITE
						// elements: expression_7, op_7, b
						// token labels: 
						// rule labels: retval, b
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 331:25: -> ^( T_OP_BINARY op_7 $expression_7 $b)
						{
							DebugLocation(331, 28);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:331:28: ^( T_OP_BINARY op_7 $expression_7 $b)
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(331, 30);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(331, 42);
							adaptor.AddChild(root_1, stream_op_7.NextTree());
							DebugLocation(331, 48);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(331, 62);
							adaptor.AddChild(root_1, stream_b.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:332:4: IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')'
						{
						DebugLocation(332, 4);
						IN203=(IToken)Match(input,IN,Follow._IN_in_expression_71822); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_IN.Add(IN203);

						DebugLocation(332, 7);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:332:7: ( WS )?
						int alt68=2;
						try { DebugEnterSubRule(68);
						try { DebugEnterDecision(68, decisionCanBacktrack[68]);
						int LA68_0 = input.LA(1);

						if ((LA68_0==WS))
						{
							alt68 = 1;
						}
						} finally { DebugExitDecision(68); }
						switch (alt68)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:332:7: WS
							{
							DebugLocation(332, 7);
							WS204=(IToken)Match(input,WS,Follow._WS_in_expression_71824); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS204);


							}
							break;

						}
						} finally { DebugExitSubRule(68); }

						DebugLocation(332, 11);
						char_literal205=(IToken)Match(input,169,Follow._169_in_expression_71827); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_169.Add(char_literal205);

						DebugLocation(332, 15);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:332:15: ( WS )?
						int alt69=2;
						try { DebugEnterSubRule(69);
						try { DebugEnterDecision(69, decisionCanBacktrack[69]);
						int LA69_0 = input.LA(1);

						if ((LA69_0==WS))
						{
							alt69 = 1;
						}
						} finally { DebugExitDecision(69); }
						switch (alt69)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:332:15: WS
							{
							DebugLocation(332, 15);
							WS206=(IToken)Match(input,WS,Follow._WS_in_expression_71829); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS206);


							}
							break;

						}
						} finally { DebugExitSubRule(69); }

						DebugLocation(332, 19);
						PushFollow(Follow._expression_list_or_select_command_in_expression_71832);
						expression_list_or_select_command207=expression_list_or_select_command();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expression_list_or_select_command.Add(expression_list_or_select_command207.Tree);
						DebugLocation(332, 53);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:332:53: ( WS )?
						int alt70=2;
						try { DebugEnterSubRule(70);
						try { DebugEnterDecision(70, decisionCanBacktrack[70]);
						int LA70_0 = input.LA(1);

						if ((LA70_0==WS))
						{
							alt70 = 1;
						}
						} finally { DebugExitDecision(70); }
						switch (alt70)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:332:53: WS
							{
							DebugLocation(332, 53);
							WS208=(IToken)Match(input,WS,Follow._WS_in_expression_71834); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS208);


							}
							break;

						}
						} finally { DebugExitSubRule(70); }

						DebugLocation(332, 57);
						char_literal209=(IToken)Match(input,170,Follow._170_in_expression_71837); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_170.Add(char_literal209);



						{
						// AST REWRITE
						// elements: expression_7, expression_list_or_select_command
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 332:61: -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command )
						{
							DebugLocation(332, 64);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:332:64: ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(332, 66);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(332, 78);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_IN, "T_IN"));
							DebugLocation(332, 84);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(332, 97);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:333:4: NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')'
						{
						DebugLocation(333, 4);
						NOT210=(IToken)Match(input,NOT,Follow._NOT_in_expression_71855); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NOT.Add(NOT210);

						DebugLocation(333, 8);
						WS211=(IToken)Match(input,WS,Follow._WS_in_expression_71857); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS211);

						DebugLocation(333, 11);
						IN212=(IToken)Match(input,IN,Follow._IN_in_expression_71859); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_IN.Add(IN212);

						DebugLocation(333, 14);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:333:14: ( WS )?
						int alt71=2;
						try { DebugEnterSubRule(71);
						try { DebugEnterDecision(71, decisionCanBacktrack[71]);
						int LA71_0 = input.LA(1);

						if ((LA71_0==WS))
						{
							alt71 = 1;
						}
						} finally { DebugExitDecision(71); }
						switch (alt71)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:333:14: WS
							{
							DebugLocation(333, 14);
							WS213=(IToken)Match(input,WS,Follow._WS_in_expression_71861); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS213);


							}
							break;

						}
						} finally { DebugExitSubRule(71); }

						DebugLocation(333, 18);
						char_literal214=(IToken)Match(input,169,Follow._169_in_expression_71864); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_169.Add(char_literal214);

						DebugLocation(333, 22);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:333:22: ( WS )?
						int alt72=2;
						try { DebugEnterSubRule(72);
						try { DebugEnterDecision(72, decisionCanBacktrack[72]);
						int LA72_0 = input.LA(1);

						if ((LA72_0==WS))
						{
							alt72 = 1;
						}
						} finally { DebugExitDecision(72); }
						switch (alt72)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:333:22: WS
							{
							DebugLocation(333, 22);
							WS215=(IToken)Match(input,WS,Follow._WS_in_expression_71866); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS215);


							}
							break;

						}
						} finally { DebugExitSubRule(72); }

						DebugLocation(333, 26);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:333:26: ( expression_list_or_select_command )
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:333:27: expression_list_or_select_command
						{
						DebugLocation(333, 27);
						PushFollow(Follow._expression_list_or_select_command_in_expression_71870);
						expression_list_or_select_command216=expression_list_or_select_command();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expression_list_or_select_command.Add(expression_list_or_select_command216.Tree);

						}

						DebugLocation(333, 62);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:333:62: ( WS )?
						int alt73=2;
						try { DebugEnterSubRule(73);
						try { DebugEnterDecision(73, decisionCanBacktrack[73]);
						int LA73_0 = input.LA(1);

						if ((LA73_0==WS))
						{
							alt73 = 1;
						}
						} finally { DebugExitDecision(73); }
						switch (alt73)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:333:62: WS
							{
							DebugLocation(333, 62);
							WS217=(IToken)Match(input,WS,Follow._WS_in_expression_71873); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS217);


							}
							break;

						}
						} finally { DebugExitSubRule(73); }

						DebugLocation(333, 66);
						char_literal218=(IToken)Match(input,170,Follow._170_in_expression_71876); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_170.Add(char_literal218);



						{
						// AST REWRITE
						// elements: expression_7, expression_list_or_select_command
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 333:70: -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command )
						{
							DebugLocation(333, 73);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:333:73: ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(333, 75);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(333, 87);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_NOTIN, "T_NOTIN"));
							DebugLocation(333, 96);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(333, 109);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 4:
						DebugEnterAlt(4);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:334:4: op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')'
						{
						DebugLocation(334, 4);
						PushFollow(Follow._op_4_in_expression_71894);
						op_4219=op_4();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_op_4.Add(op_4219.Tree);
						DebugLocation(334, 9);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:334:9: ( WS )?
						int alt74=2;
						try { DebugEnterSubRule(74);
						try { DebugEnterDecision(74, decisionCanBacktrack[74]);
						int LA74_0 = input.LA(1);

						if ((LA74_0==WS))
						{
							alt74 = 1;
						}
						} finally { DebugExitDecision(74); }
						switch (alt74)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:334:9: WS
							{
							DebugLocation(334, 9);
							WS220=(IToken)Match(input,WS,Follow._WS_in_expression_71896); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS220);


							}
							break;

						}
						} finally { DebugExitSubRule(74); }

						DebugLocation(334, 13);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:334:13: ( SOME | ANY )
						int alt75=2;
						try { DebugEnterSubRule(75);
						try { DebugEnterDecision(75, decisionCanBacktrack[75]);
						int LA75_0 = input.LA(1);

						if ((LA75_0==SOME))
						{
							alt75 = 1;
						}
						else if ((LA75_0==ANY))
						{
							alt75 = 2;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 75, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						} finally { DebugExitDecision(75); }
						switch (alt75)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:334:14: SOME
							{
							DebugLocation(334, 14);
							SOME221=(IToken)Match(input,SOME,Follow._SOME_in_expression_71900); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_SOME.Add(SOME221);


							}
							break;
						case 2:
							DebugEnterAlt(2);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:334:21: ANY
							{
							DebugLocation(334, 21);
							ANY222=(IToken)Match(input,ANY,Follow._ANY_in_expression_71904); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_ANY.Add(ANY222);


							}
							break;

						}
						} finally { DebugExitSubRule(75); }

						DebugLocation(334, 26);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:334:26: ( WS )?
						int alt76=2;
						try { DebugEnterSubRule(76);
						try { DebugEnterDecision(76, decisionCanBacktrack[76]);
						int LA76_0 = input.LA(1);

						if ((LA76_0==WS))
						{
							alt76 = 1;
						}
						} finally { DebugExitDecision(76); }
						switch (alt76)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:334:26: WS
							{
							DebugLocation(334, 26);
							WS223=(IToken)Match(input,WS,Follow._WS_in_expression_71907); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS223);


							}
							break;

						}
						} finally { DebugExitSubRule(76); }

						DebugLocation(334, 30);
						char_literal224=(IToken)Match(input,169,Follow._169_in_expression_71910); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_169.Add(char_literal224);

						DebugLocation(334, 34);
						PushFollow(Follow._expression_list_or_select_command_in_expression_71912);
						expression_list_or_select_command225=expression_list_or_select_command();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expression_list_or_select_command.Add(expression_list_or_select_command225.Tree);
						DebugLocation(334, 68);
						char_literal226=(IToken)Match(input,170,Follow._170_in_expression_71914); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_170.Add(char_literal226);



						{
						// AST REWRITE
						// elements: expression_7, op_4, expression_list_or_select_command
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 334:72: -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command )
						{
							DebugLocation(334, 75);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:334:75: ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(334, 77);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(334, 89);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_ANY, "T_ANY"));
							DebugLocation(334, 95);
							adaptor.AddChild(root_1, stream_op_4.NextTree());
							DebugLocation(334, 101);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(334, 114);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 5:
						DebugEnterAlt(5);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:335:4: op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')'
						{
						DebugLocation(335, 4);
						PushFollow(Follow._op_4_in_expression_71934);
						op_4227=op_4();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_op_4.Add(op_4227.Tree);
						DebugLocation(335, 9);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:335:9: ( WS )?
						int alt77=2;
						try { DebugEnterSubRule(77);
						try { DebugEnterDecision(77, decisionCanBacktrack[77]);
						int LA77_0 = input.LA(1);

						if ((LA77_0==WS))
						{
							alt77 = 1;
						}
						} finally { DebugExitDecision(77); }
						switch (alt77)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:335:9: WS
							{
							DebugLocation(335, 9);
							WS228=(IToken)Match(input,WS,Follow._WS_in_expression_71936); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS228);


							}
							break;

						}
						} finally { DebugExitSubRule(77); }

						DebugLocation(335, 13);
						ALL229=(IToken)Match(input,ALL,Follow._ALL_in_expression_71939); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_ALL.Add(ALL229);

						DebugLocation(335, 17);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:335:17: ( WS )?
						int alt78=2;
						try { DebugEnterSubRule(78);
						try { DebugEnterDecision(78, decisionCanBacktrack[78]);
						int LA78_0 = input.LA(1);

						if ((LA78_0==WS))
						{
							alt78 = 1;
						}
						} finally { DebugExitDecision(78); }
						switch (alt78)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:335:17: WS
							{
							DebugLocation(335, 17);
							WS230=(IToken)Match(input,WS,Follow._WS_in_expression_71941); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS230);


							}
							break;

						}
						} finally { DebugExitSubRule(78); }

						DebugLocation(335, 21);
						char_literal231=(IToken)Match(input,169,Follow._169_in_expression_71944); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_169.Add(char_literal231);

						DebugLocation(335, 25);
						PushFollow(Follow._expression_list_or_select_command_in_expression_71946);
						expression_list_or_select_command232=expression_list_or_select_command();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expression_list_or_select_command.Add(expression_list_or_select_command232.Tree);
						DebugLocation(335, 59);
						char_literal233=(IToken)Match(input,170,Follow._170_in_expression_71948); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_170.Add(char_literal233);



						{
						// AST REWRITE
						// elements: expression_list_or_select_command, op_4, expression_7
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 335:63: -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command )
						{
							DebugLocation(335, 66);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:335:66: ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(335, 68);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(335, 80);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_ALL, "T_ALL"));
							DebugLocation(335, 86);
							adaptor.AddChild(root_1, stream_op_4.NextTree());
							DebugLocation(335, 92);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(335, 105);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;

					}
					} finally { DebugExitSubRule(79); }


					}
					break;

				default:
					goto loop80;
				}
			}

			loop80:
				;

			} finally { DebugExitSubRule(80); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_7", 41);
			LeaveRule("expression_7", 41);
			LeaveRule_expression_7();
	    }
	 	DebugLocation(337, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_7"); }
		return retval;

	}
	// $ANTLR end "expression_7"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_7() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_7() {}

	// $ANTLR start "op_7"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:339:1: op_7 : ( OR -> T_OR | BETWEEN -> T_BETWEEN | NOT WS BETWEEN -> T_NOTBETWEEN );
	[GrammarRule("op_7")]
	private AstParserRuleReturnScope<object, IToken> op_7()
	{
		EnterRule_op_7();
		EnterRule("op_7", 42);
		TraceIn("op_7", 42);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken OR234 = default(IToken);
	    IToken BETWEEN235 = default(IToken);
	    IToken NOT236 = default(IToken);
	    IToken WS237 = default(IToken);
	    IToken BETWEEN238 = default(IToken);

	    object OR234_tree = default(object);
	    object BETWEEN235_tree = default(object);
	    object NOT236_tree = default(object);
	    object WS237_tree = default(object);
	    object BETWEEN238_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");
	    RewriteRuleITokenStream stream_BETWEEN=new RewriteRuleITokenStream(adaptor,"token BETWEEN");
	    RewriteRuleITokenStream stream_OR=new RewriteRuleITokenStream(adaptor,"token OR");

		try { DebugEnterRule(GrammarFileName, "op_7");
		DebugLocation(339, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:339:6: ( OR -> T_OR | BETWEEN -> T_BETWEEN | NOT WS BETWEEN -> T_NOTBETWEEN )
			int alt81=3;
			try { DebugEnterDecision(81, decisionCanBacktrack[81]);
			switch (input.LA(1))
			{
			case OR:
				{
				alt81 = 1;
				}
				break;
			case BETWEEN:
				{
				alt81 = 2;
				}
				break;
			case NOT:
				{
				alt81 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 81, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(81); }
			switch (alt81)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:339:8: OR
				{
				DebugLocation(339, 8);
				OR234=(IToken)Match(input,OR,Follow._OR_in_op_71978); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_OR.Add(OR234);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 339:11: -> T_OR
				{
					DebugLocation(339, 14);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_OR, "T_OR"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:340:4: BETWEEN
				{
				DebugLocation(340, 4);
				BETWEEN235=(IToken)Match(input,BETWEEN,Follow._BETWEEN_in_op_71987); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_BETWEEN.Add(BETWEEN235);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 340:12: -> T_BETWEEN
				{
					DebugLocation(340, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BETWEEN, "T_BETWEEN"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:341:4: NOT WS BETWEEN
				{
				DebugLocation(341, 4);
				NOT236=(IToken)Match(input,NOT,Follow._NOT_in_op_71996); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_NOT.Add(NOT236);

				DebugLocation(341, 8);
				WS237=(IToken)Match(input,WS,Follow._WS_in_op_71998); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS237);

				DebugLocation(341, 11);
				BETWEEN238=(IToken)Match(input,BETWEEN,Follow._BETWEEN_in_op_72000); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_BETWEEN.Add(BETWEEN238);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 341:19: -> T_NOTBETWEEN
				{
					DebugLocation(341, 22);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTBETWEEN, "T_NOTBETWEEN"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_7", 42);
			LeaveRule("op_7", 42);
			LeaveRule_op_7();
	    }
	 	DebugLocation(342, 1);
		} finally { DebugExitRule(GrammarFileName, "op_7"); }
		return retval;

	}
	// $ANTLR end "op_7"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_6() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_6() {}

	// $ANTLR start "expression_6"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:344:1: expression_6 : (a= expression_5 -> $a) ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )* ;
	[GrammarRule("expression_6")]
	private AstParserRuleReturnScope<object, IToken> expression_6()
	{
		EnterRule_expression_6();
		EnterRule("expression_6", 43);
		TraceIn("expression_6", 43);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS239 = default(IToken);
	    IToken WS241 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_6240 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS239_tree = default(object);
	    object WS241_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_op_6=new RewriteRuleSubtreeStream(adaptor,"rule op_6");
	    RewriteRuleSubtreeStream stream_expression_5=new RewriteRuleSubtreeStream(adaptor,"rule expression_5");
		try { DebugEnterRule(GrammarFileName, "expression_6");
		DebugLocation(344, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:345:2: ( (a= expression_5 -> $a) ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:345:4: (a= expression_5 -> $a) ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )*
			{
			DebugLocation(345, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:345:4: (a= expression_5 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:345:5: a= expression_5
			{
			DebugLocation(345, 6);
			PushFollow(Follow._expression_5_in_expression_62019);
			a=expression_5();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression_5.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 345:19: -> $a
			{
				DebugLocation(345, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(345, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:345:25: ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )*
			try { DebugEnterSubRule(82);
			while (true)
			{
				int alt82=2;
				try { DebugEnterDecision(82, decisionCanBacktrack[82]);
				int LA82_0 = input.LA(1);

				if ((LA82_0==WS))
				{
					int LA82_1 = input.LA(2);

					if ((LA82_1==AND))
					{
						alt82 = 1;
					}


				}


				} finally { DebugExitDecision(82); }
				switch ( alt82 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:345:26: WS op_6 WS b= expression_5
					{
					DebugLocation(345, 26);
					WS239=(IToken)Match(input,WS,Follow._WS_in_expression_62026); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS239);

					DebugLocation(345, 29);
					PushFollow(Follow._op_6_in_expression_62028);
					op_6240=op_6();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_op_6.Add(op_6240.Tree);
					DebugLocation(345, 34);
					WS241=(IToken)Match(input,WS,Follow._WS_in_expression_62030); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS241);

					DebugLocation(345, 38);
					PushFollow(Follow._expression_5_in_expression_62034);
					b=expression_5();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expression_5.Add(b.Tree);


					{
					// AST REWRITE
					// elements: op_6, b, expression_6
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 345:52: -> ^( T_OP_BINARY op_6 $expression_6 $b)
					{
						DebugLocation(345, 55);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:345:55: ^( T_OP_BINARY op_6 $expression_6 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(345, 57);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(345, 69);
						adaptor.AddChild(root_1, stream_op_6.NextTree());
						DebugLocation(345, 75);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(345, 89);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop82;
				}
			}

			loop82:
				;

			} finally { DebugExitSubRule(82); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_6", 43);
			LeaveRule("expression_6", 43);
			LeaveRule_expression_6();
	    }
	 	DebugLocation(346, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_6"); }
		return retval;

	}
	// $ANTLR end "expression_6"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_6() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_6() {}

	// $ANTLR start "op_6"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:348:1: op_6 : AND -> T_AND ;
	[GrammarRule("op_6")]
	private AstParserRuleReturnScope<object, IToken> op_6()
	{
		EnterRule_op_6();
		EnterRule("op_6", 44);
		TraceIn("op_6", 44);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken AND242 = default(IToken);

	    object AND242_tree = default(object);
	    RewriteRuleITokenStream stream_AND=new RewriteRuleITokenStream(adaptor,"token AND");

		try { DebugEnterRule(GrammarFileName, "op_6");
		DebugLocation(348, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:348:6: ( AND -> T_AND )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:348:8: AND
			{
			DebugLocation(348, 8);
			AND242=(IToken)Match(input,AND,Follow._AND_in_op_62062); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_AND.Add(AND242);



			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 348:12: -> T_AND
			{
				DebugLocation(348, 15);
				adaptor.AddChild(root_0, (object)adaptor.Create(T_AND, "T_AND"));

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_6", 44);
			LeaveRule("op_6", 44);
			LeaveRule_op_6();
	    }
	 	DebugLocation(349, 1);
		} finally { DebugExitRule(GrammarFileName, "op_6"); }
		return retval;

	}
	// $ANTLR end "op_6"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_5() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_5() {}

	// $ANTLR start "expression_5"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:351:1: expression_5 : ( op_5 WS expression_5 -> ^( T_OP_UNARY op_5 expression_5 ) | expression_4 );
	[GrammarRule("expression_5")]
	private AstParserRuleReturnScope<object, IToken> expression_5()
	{
		EnterRule_expression_5();
		EnterRule("expression_5", 45);
		TraceIn("expression_5", 45);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS244 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> op_5243 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_5245 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_4246 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS244_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression_5=new RewriteRuleSubtreeStream(adaptor,"rule expression_5");
	    RewriteRuleSubtreeStream stream_op_5=new RewriteRuleSubtreeStream(adaptor,"rule op_5");
		try { DebugEnterRule(GrammarFileName, "expression_5");
		DebugLocation(351, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:352:2: ( op_5 WS expression_5 -> ^( T_OP_UNARY op_5 expression_5 ) | expression_4 )
			int alt83=2;
			try { DebugEnterDecision(83, decisionCanBacktrack[83]);
			int LA83_0 = input.LA(1);

			if ((LA83_0==NOT))
			{
				alt83 = 1;
			}
			else if (((LA83_0>=CASE && LA83_0<=CAST)||(LA83_0>=CONVERT && LA83_0<=COUNT)||(LA83_0>=DATEADD && LA83_0<=DATEPART)||LA83_0==EXISTS||LA83_0==NUMBER||LA83_0==SIMPLE_FILE||(LA83_0>=STRING && LA83_0<=SYSTEMVAR)||LA83_0==TOKEN||LA83_0==VARIABLE||LA83_0==169||LA83_0==172||LA83_0==174||LA83_0==188))
			{
				alt83 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 83, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(83); }
			switch (alt83)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:352:4: op_5 WS expression_5
				{
				DebugLocation(352, 4);
				PushFollow(Follow._op_5_in_expression_52080);
				op_5243=op_5();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_op_5.Add(op_5243.Tree);
				DebugLocation(352, 9);
				WS244=(IToken)Match(input,WS,Follow._WS_in_expression_52082); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS244);

				DebugLocation(352, 12);
				PushFollow(Follow._expression_5_in_expression_52084);
				expression_5245=expression_5();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression_5.Add(expression_5245.Tree);


				{
				// AST REWRITE
				// elements: expression_5, op_5
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 352:25: -> ^( T_OP_UNARY op_5 expression_5 )
				{
					DebugLocation(352, 28);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:352:28: ^( T_OP_UNARY op_5 expression_5 )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(352, 30);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_UNARY, "T_OP_UNARY"), root_1);

					DebugLocation(352, 41);
					adaptor.AddChild(root_1, stream_op_5.NextTree());
					DebugLocation(352, 46);
					adaptor.AddChild(root_1, stream_expression_5.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:353:4: expression_4
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(353, 4);
				PushFollow(Follow._expression_4_in_expression_52099);
				expression_4246=expression_4();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression_4246.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_5", 45);
			LeaveRule("expression_5", 45);
			LeaveRule_expression_5();
	    }
	 	DebugLocation(354, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_5"); }
		return retval;

	}
	// $ANTLR end "expression_5"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_5() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_5() {}

	// $ANTLR start "op_5"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:356:1: op_5 : NOT -> T_NOT ;
	[GrammarRule("op_5")]
	private AstParserRuleReturnScope<object, IToken> op_5()
	{
		EnterRule_op_5();
		EnterRule("op_5", 46);
		TraceIn("op_5", 46);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken NOT247 = default(IToken);

	    object NOT247_tree = default(object);
	    RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");

		try { DebugEnterRule(GrammarFileName, "op_5");
		DebugLocation(356, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:356:7: ( NOT -> T_NOT )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:356:9: NOT
			{
			DebugLocation(356, 9);
			NOT247=(IToken)Match(input,NOT,Follow._NOT_in_op_52110); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_NOT.Add(NOT247);



			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 356:13: -> T_NOT
			{
				DebugLocation(356, 16);
				adaptor.AddChild(root_0, (object)adaptor.Create(T_NOT, "T_NOT"));

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_5", 46);
			LeaveRule("op_5", 46);
			LeaveRule_op_5();
	    }
	 	DebugLocation(357, 1);
		} finally { DebugExitRule(GrammarFileName, "op_5"); }
		return retval;

	}
	// $ANTLR end "op_5"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_4() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_4() {}

	// $ANTLR start "expression_4"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:359:1: expression_4 : (a= expression_3 -> $a) ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )* ;
	[GrammarRule("expression_4")]
	private AstParserRuleReturnScope<object, IToken> expression_4()
	{
		EnterRule_expression_4();
		EnterRule("expression_4", 47);
		TraceIn("expression_4", 47);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS248 = default(IToken);
	    IToken WS250 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_4249 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS248_tree = default(object);
	    object WS250_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression_3=new RewriteRuleSubtreeStream(adaptor,"rule expression_3");
	    RewriteRuleSubtreeStream stream_op_4=new RewriteRuleSubtreeStream(adaptor,"rule op_4");
		try { DebugEnterRule(GrammarFileName, "expression_4");
		DebugLocation(359, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:360:2: ( (a= expression_3 -> $a) ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:360:4: (a= expression_3 -> $a) ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )*
			{
			DebugLocation(360, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:360:4: (a= expression_3 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:360:5: a= expression_3
			{
			DebugLocation(360, 6);
			PushFollow(Follow._expression_3_in_expression_42129);
			a=expression_3();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression_3.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 360:19: -> $a
			{
				DebugLocation(360, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(360, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:360:25: ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )*
			try { DebugEnterSubRule(86);
			while (true)
			{
				int alt86=2;
				try { DebugEnterDecision(86, decisionCanBacktrack[86]);
				int LA86_0 = input.LA(1);

				if ((LA86_0==WS))
				{
					switch (input.LA(2))
					{
					case NOT:
						{
						int LA86_4 = input.LA(3);

						if ((LA86_4==WS))
						{
							int LA86_16 = input.LA(4);

							if ((LA86_16==LIKE))
							{
								int LA86_18 = input.LA(5);

								if ((LA86_18==WS))
								{
									int LA86_17 = input.LA(6);

									if (((LA86_17>=CASE && LA86_17<=CAST)||(LA86_17>=CONVERT && LA86_17<=COUNT)||(LA86_17>=DATEADD && LA86_17<=DATEPART)||LA86_17==EXISTS||LA86_17==NUMBER||LA86_17==SIMPLE_FILE||(LA86_17>=STRING && LA86_17<=SYSTEMVAR)||LA86_17==TOKEN||LA86_17==VARIABLE||LA86_17==169||LA86_17==172||LA86_17==174||LA86_17==188))
									{
										alt86 = 1;
									}


								}
								else if (((LA86_18>=CASE && LA86_18<=CAST)||(LA86_18>=CONVERT && LA86_18<=COUNT)||(LA86_18>=DATEADD && LA86_18<=DATEPART)||LA86_18==EXISTS||LA86_18==NUMBER||LA86_18==SIMPLE_FILE||(LA86_18>=STRING && LA86_18<=SYSTEMVAR)||LA86_18==TOKEN||LA86_18==VARIABLE||LA86_18==169||LA86_18==172||LA86_18==174||LA86_18==188))
								{
									alt86 = 1;
								}


							}
							else if ((LA86_16==MATCH))
							{
								int LA86_19 = input.LA(5);

								if ((LA86_19==WS))
								{
									int LA86_17 = input.LA(6);

									if (((LA86_17>=CASE && LA86_17<=CAST)||(LA86_17>=CONVERT && LA86_17<=COUNT)||(LA86_17>=DATEADD && LA86_17<=DATEPART)||LA86_17==EXISTS||LA86_17==NUMBER||LA86_17==SIMPLE_FILE||(LA86_17>=STRING && LA86_17<=SYSTEMVAR)||LA86_17==TOKEN||LA86_17==VARIABLE||LA86_17==169||LA86_17==172||LA86_17==174||LA86_17==188))
									{
										alt86 = 1;
									}


								}
								else if (((LA86_19>=CASE && LA86_19<=CAST)||(LA86_19>=CONVERT && LA86_19<=COUNT)||(LA86_19>=DATEADD && LA86_19<=DATEPART)||LA86_19==EXISTS||LA86_19==NUMBER||LA86_19==SIMPLE_FILE||(LA86_19>=STRING && LA86_19<=SYSTEMVAR)||LA86_19==TOKEN||LA86_19==VARIABLE||LA86_19==169||LA86_19==172||LA86_19==174||LA86_19==188))
								{
									alt86 = 1;
								}


							}


						}


						}
						break;
					case 181:
						{
						int LA86_5 = input.LA(3);

						if ((LA86_5==WS))
						{
							int LA86_17 = input.LA(4);

							if (((LA86_17>=CASE && LA86_17<=CAST)||(LA86_17>=CONVERT && LA86_17<=COUNT)||(LA86_17>=DATEADD && LA86_17<=DATEPART)||LA86_17==EXISTS||LA86_17==NUMBER||LA86_17==SIMPLE_FILE||(LA86_17>=STRING && LA86_17<=SYSTEMVAR)||LA86_17==TOKEN||LA86_17==VARIABLE||LA86_17==169||LA86_17==172||LA86_17==174||LA86_17==188))
							{
								alt86 = 1;
							}


						}
						else if (((LA86_5>=CASE && LA86_5<=CAST)||(LA86_5>=CONVERT && LA86_5<=COUNT)||(LA86_5>=DATEADD && LA86_5<=DATEPART)||LA86_5==EXISTS||LA86_5==NUMBER||LA86_5==SIMPLE_FILE||(LA86_5>=STRING && LA86_5<=SYSTEMVAR)||LA86_5==TOKEN||LA86_5==VARIABLE||LA86_5==169||LA86_5==172||LA86_5==174||LA86_5==188))
						{
							alt86 = 1;
						}


						}
						break;
					case 183:
						{
						int LA86_6 = input.LA(3);

						if ((LA86_6==WS))
						{
							int LA86_17 = input.LA(4);

							if (((LA86_17>=CASE && LA86_17<=CAST)||(LA86_17>=CONVERT && LA86_17<=COUNT)||(LA86_17>=DATEADD && LA86_17<=DATEPART)||LA86_17==EXISTS||LA86_17==NUMBER||LA86_17==SIMPLE_FILE||(LA86_17>=STRING && LA86_17<=SYSTEMVAR)||LA86_17==TOKEN||LA86_17==VARIABLE||LA86_17==169||LA86_17==172||LA86_17==174||LA86_17==188))
							{
								alt86 = 1;
							}


						}
						else if (((LA86_6>=CASE && LA86_6<=CAST)||(LA86_6>=CONVERT && LA86_6<=COUNT)||(LA86_6>=DATEADD && LA86_6<=DATEPART)||LA86_6==EXISTS||LA86_6==NUMBER||LA86_6==SIMPLE_FILE||(LA86_6>=STRING && LA86_6<=SYSTEMVAR)||LA86_6==TOKEN||LA86_6==VARIABLE||LA86_6==169||LA86_6==172||LA86_6==174||LA86_6==188))
						{
							alt86 = 1;
						}


						}
						break;
					case 179:
						{
						int LA86_7 = input.LA(3);

						if ((LA86_7==WS))
						{
							int LA86_17 = input.LA(4);

							if (((LA86_17>=CASE && LA86_17<=CAST)||(LA86_17>=CONVERT && LA86_17<=COUNT)||(LA86_17>=DATEADD && LA86_17<=DATEPART)||LA86_17==EXISTS||LA86_17==NUMBER||LA86_17==SIMPLE_FILE||(LA86_17>=STRING && LA86_17<=SYSTEMVAR)||LA86_17==TOKEN||LA86_17==VARIABLE||LA86_17==169||LA86_17==172||LA86_17==174||LA86_17==188))
							{
								alt86 = 1;
							}


						}
						else if (((LA86_7>=CASE && LA86_7<=CAST)||(LA86_7>=CONVERT && LA86_7<=COUNT)||(LA86_7>=DATEADD && LA86_7<=DATEPART)||LA86_7==EXISTS||LA86_7==NUMBER||LA86_7==SIMPLE_FILE||(LA86_7>=STRING && LA86_7<=SYSTEMVAR)||LA86_7==TOKEN||LA86_7==VARIABLE||LA86_7==169||LA86_7==172||LA86_7==174||LA86_7==188))
						{
							alt86 = 1;
						}


						}
						break;
					case 180:
						{
						int LA86_8 = input.LA(3);

						if ((LA86_8==WS))
						{
							int LA86_17 = input.LA(4);

							if (((LA86_17>=CASE && LA86_17<=CAST)||(LA86_17>=CONVERT && LA86_17<=COUNT)||(LA86_17>=DATEADD && LA86_17<=DATEPART)||LA86_17==EXISTS||LA86_17==NUMBER||LA86_17==SIMPLE_FILE||(LA86_17>=STRING && LA86_17<=SYSTEMVAR)||LA86_17==TOKEN||LA86_17==VARIABLE||LA86_17==169||LA86_17==172||LA86_17==174||LA86_17==188))
							{
								alt86 = 1;
							}


						}
						else if (((LA86_8>=CASE && LA86_8<=CAST)||(LA86_8>=CONVERT && LA86_8<=COUNT)||(LA86_8>=DATEADD && LA86_8<=DATEPART)||LA86_8==EXISTS||LA86_8==NUMBER||LA86_8==SIMPLE_FILE||(LA86_8>=STRING && LA86_8<=SYSTEMVAR)||LA86_8==TOKEN||LA86_8==VARIABLE||LA86_8==169||LA86_8==172||LA86_8==174||LA86_8==188))
						{
							alt86 = 1;
						}


						}
						break;
					case 165:
						{
						int LA86_9 = input.LA(3);

						if ((LA86_9==WS))
						{
							int LA86_17 = input.LA(4);

							if (((LA86_17>=CASE && LA86_17<=CAST)||(LA86_17>=CONVERT && LA86_17<=COUNT)||(LA86_17>=DATEADD && LA86_17<=DATEPART)||LA86_17==EXISTS||LA86_17==NUMBER||LA86_17==SIMPLE_FILE||(LA86_17>=STRING && LA86_17<=SYSTEMVAR)||LA86_17==TOKEN||LA86_17==VARIABLE||LA86_17==169||LA86_17==172||LA86_17==174||LA86_17==188))
							{
								alt86 = 1;
							}


						}
						else if (((LA86_9>=CASE && LA86_9<=CAST)||(LA86_9>=CONVERT && LA86_9<=COUNT)||(LA86_9>=DATEADD && LA86_9<=DATEPART)||LA86_9==EXISTS||LA86_9==NUMBER||LA86_9==SIMPLE_FILE||(LA86_9>=STRING && LA86_9<=SYSTEMVAR)||LA86_9==TOKEN||LA86_9==VARIABLE||LA86_9==169||LA86_9==172||LA86_9==174||LA86_9==188))
						{
							alt86 = 1;
						}


						}
						break;
					case 166:
						{
						int LA86_10 = input.LA(3);

						if ((LA86_10==WS))
						{
							int LA86_17 = input.LA(4);

							if (((LA86_17>=CASE && LA86_17<=CAST)||(LA86_17>=CONVERT && LA86_17<=COUNT)||(LA86_17>=DATEADD && LA86_17<=DATEPART)||LA86_17==EXISTS||LA86_17==NUMBER||LA86_17==SIMPLE_FILE||(LA86_17>=STRING && LA86_17<=SYSTEMVAR)||LA86_17==TOKEN||LA86_17==VARIABLE||LA86_17==169||LA86_17==172||LA86_17==174||LA86_17==188))
							{
								alt86 = 1;
							}


						}
						else if (((LA86_10>=CASE && LA86_10<=CAST)||(LA86_10>=CONVERT && LA86_10<=COUNT)||(LA86_10>=DATEADD && LA86_10<=DATEPART)||LA86_10==EXISTS||LA86_10==NUMBER||LA86_10==SIMPLE_FILE||(LA86_10>=STRING && LA86_10<=SYSTEMVAR)||LA86_10==TOKEN||LA86_10==VARIABLE||LA86_10==169||LA86_10==172||LA86_10==174||LA86_10==188))
						{
							alt86 = 1;
						}


						}
						break;
					case 164:
						{
						int LA86_11 = input.LA(3);

						if ((LA86_11==WS))
						{
							int LA86_17 = input.LA(4);

							if (((LA86_17>=CASE && LA86_17<=CAST)||(LA86_17>=CONVERT && LA86_17<=COUNT)||(LA86_17>=DATEADD && LA86_17<=DATEPART)||LA86_17==EXISTS||LA86_17==NUMBER||LA86_17==SIMPLE_FILE||(LA86_17>=STRING && LA86_17<=SYSTEMVAR)||LA86_17==TOKEN||LA86_17==VARIABLE||LA86_17==169||LA86_17==172||LA86_17==174||LA86_17==188))
							{
								alt86 = 1;
							}


						}
						else if (((LA86_11>=CASE && LA86_11<=CAST)||(LA86_11>=CONVERT && LA86_11<=COUNT)||(LA86_11>=DATEADD && LA86_11<=DATEPART)||LA86_11==EXISTS||LA86_11==NUMBER||LA86_11==SIMPLE_FILE||(LA86_11>=STRING && LA86_11<=SYSTEMVAR)||LA86_11==TOKEN||LA86_11==VARIABLE||LA86_11==169||LA86_11==172||LA86_11==174||LA86_11==188))
						{
							alt86 = 1;
						}


						}
						break;
					case 182:
						{
						int LA86_12 = input.LA(3);

						if ((LA86_12==WS))
						{
							int LA86_17 = input.LA(4);

							if (((LA86_17>=CASE && LA86_17<=CAST)||(LA86_17>=CONVERT && LA86_17<=COUNT)||(LA86_17>=DATEADD && LA86_17<=DATEPART)||LA86_17==EXISTS||LA86_17==NUMBER||LA86_17==SIMPLE_FILE||(LA86_17>=STRING && LA86_17<=SYSTEMVAR)||LA86_17==TOKEN||LA86_17==VARIABLE||LA86_17==169||LA86_17==172||LA86_17==174||LA86_17==188))
							{
								alt86 = 1;
							}


						}
						else if (((LA86_12>=CASE && LA86_12<=CAST)||(LA86_12>=CONVERT && LA86_12<=COUNT)||(LA86_12>=DATEADD && LA86_12<=DATEPART)||LA86_12==EXISTS||LA86_12==NUMBER||LA86_12==SIMPLE_FILE||(LA86_12>=STRING && LA86_12<=SYSTEMVAR)||LA86_12==TOKEN||LA86_12==VARIABLE||LA86_12==169||LA86_12==172||LA86_12==174||LA86_12==188))
						{
							alt86 = 1;
						}


						}
						break;
					case 178:
						{
						int LA86_13 = input.LA(3);

						if ((LA86_13==WS))
						{
							int LA86_17 = input.LA(4);

							if (((LA86_17>=CASE && LA86_17<=CAST)||(LA86_17>=CONVERT && LA86_17<=COUNT)||(LA86_17>=DATEADD && LA86_17<=DATEPART)||LA86_17==EXISTS||LA86_17==NUMBER||LA86_17==SIMPLE_FILE||(LA86_17>=STRING && LA86_17<=SYSTEMVAR)||LA86_17==TOKEN||LA86_17==VARIABLE||LA86_17==169||LA86_17==172||LA86_17==174||LA86_17==188))
							{
								alt86 = 1;
							}


						}
						else if (((LA86_13>=CASE && LA86_13<=CAST)||(LA86_13>=CONVERT && LA86_13<=COUNT)||(LA86_13>=DATEADD && LA86_13<=DATEPART)||LA86_13==EXISTS||LA86_13==NUMBER||LA86_13==SIMPLE_FILE||(LA86_13>=STRING && LA86_13<=SYSTEMVAR)||LA86_13==TOKEN||LA86_13==VARIABLE||LA86_13==169||LA86_13==172||LA86_13==174||LA86_13==188))
						{
							alt86 = 1;
						}


						}
						break;
					case LIKE:
						{
						int LA86_14 = input.LA(3);

						if ((LA86_14==WS))
						{
							int LA86_17 = input.LA(4);

							if (((LA86_17>=CASE && LA86_17<=CAST)||(LA86_17>=CONVERT && LA86_17<=COUNT)||(LA86_17>=DATEADD && LA86_17<=DATEPART)||LA86_17==EXISTS||LA86_17==NUMBER||LA86_17==SIMPLE_FILE||(LA86_17>=STRING && LA86_17<=SYSTEMVAR)||LA86_17==TOKEN||LA86_17==VARIABLE||LA86_17==169||LA86_17==172||LA86_17==174||LA86_17==188))
							{
								alt86 = 1;
							}


						}
						else if (((LA86_14>=CASE && LA86_14<=CAST)||(LA86_14>=CONVERT && LA86_14<=COUNT)||(LA86_14>=DATEADD && LA86_14<=DATEPART)||LA86_14==EXISTS||LA86_14==NUMBER||LA86_14==SIMPLE_FILE||(LA86_14>=STRING && LA86_14<=SYSTEMVAR)||LA86_14==TOKEN||LA86_14==VARIABLE||LA86_14==169||LA86_14==172||LA86_14==174||LA86_14==188))
						{
							alt86 = 1;
						}


						}
						break;
					case MATCH:
						{
						int LA86_15 = input.LA(3);

						if ((LA86_15==WS))
						{
							int LA86_17 = input.LA(4);

							if (((LA86_17>=CASE && LA86_17<=CAST)||(LA86_17>=CONVERT && LA86_17<=COUNT)||(LA86_17>=DATEADD && LA86_17<=DATEPART)||LA86_17==EXISTS||LA86_17==NUMBER||LA86_17==SIMPLE_FILE||(LA86_17>=STRING && LA86_17<=SYSTEMVAR)||LA86_17==TOKEN||LA86_17==VARIABLE||LA86_17==169||LA86_17==172||LA86_17==174||LA86_17==188))
							{
								alt86 = 1;
							}


						}
						else if (((LA86_15>=CASE && LA86_15<=CAST)||(LA86_15>=CONVERT && LA86_15<=COUNT)||(LA86_15>=DATEADD && LA86_15<=DATEPART)||LA86_15==EXISTS||LA86_15==NUMBER||LA86_15==SIMPLE_FILE||(LA86_15>=STRING && LA86_15<=SYSTEMVAR)||LA86_15==TOKEN||LA86_15==VARIABLE||LA86_15==169||LA86_15==172||LA86_15==174||LA86_15==188))
						{
							alt86 = 1;
						}


						}
						break;
					}

				}
				else if ((LA86_0==LIKE||LA86_0==MATCH||LA86_0==NOT||(LA86_0>=164 && LA86_0<=166)||(LA86_0>=178 && LA86_0<=183)))
				{
					alt86 = 1;
				}


				} finally { DebugExitDecision(86); }
				switch ( alt86 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:360:26: ( WS )? op_4 ( WS )? b= expression_3
					{
					DebugLocation(360, 26);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:360:26: ( WS )?
					int alt84=2;
					try { DebugEnterSubRule(84);
					try { DebugEnterDecision(84, decisionCanBacktrack[84]);
					int LA84_0 = input.LA(1);

					if ((LA84_0==WS))
					{
						alt84 = 1;
					}
					} finally { DebugExitDecision(84); }
					switch (alt84)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:360:26: WS
						{
						DebugLocation(360, 26);
						WS248=(IToken)Match(input,WS,Follow._WS_in_expression_42136); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS248);


						}
						break;

					}
					} finally { DebugExitSubRule(84); }

					DebugLocation(360, 30);
					PushFollow(Follow._op_4_in_expression_42139);
					op_4249=op_4();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_op_4.Add(op_4249.Tree);
					DebugLocation(360, 35);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:360:35: ( WS )?
					int alt85=2;
					try { DebugEnterSubRule(85);
					try { DebugEnterDecision(85, decisionCanBacktrack[85]);
					int LA85_0 = input.LA(1);

					if ((LA85_0==WS))
					{
						alt85 = 1;
					}
					} finally { DebugExitDecision(85); }
					switch (alt85)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:360:35: WS
						{
						DebugLocation(360, 35);
						WS250=(IToken)Match(input,WS,Follow._WS_in_expression_42141); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS250);


						}
						break;

					}
					} finally { DebugExitSubRule(85); }

					DebugLocation(360, 40);
					PushFollow(Follow._expression_3_in_expression_42146);
					b=expression_3();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expression_3.Add(b.Tree);


					{
					// AST REWRITE
					// elements: op_4, b, expression_4
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 360:54: -> ^( T_OP_BINARY op_4 $expression_4 $b)
					{
						DebugLocation(360, 57);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:360:57: ^( T_OP_BINARY op_4 $expression_4 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(360, 59);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(360, 71);
						adaptor.AddChild(root_1, stream_op_4.NextTree());
						DebugLocation(360, 77);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(360, 91);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop86;
				}
			}

			loop86:
				;

			} finally { DebugExitSubRule(86); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_4", 47);
			LeaveRule("expression_4", 47);
			LeaveRule_expression_4();
	    }
	 	DebugLocation(361, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_4"); }
		return retval;

	}
	// $ANTLR end "expression_4"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_4() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_4() {}

	// $ANTLR start "op_4"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:363:1: op_4 : ( '=' -> T_EQUAL | '>=' -> T_NOTLESS | '<=' -> T_NOTGREATER | '<>' -> T_NOTEQUAL | '!=' -> T_NOTEQUAL | '!>' -> T_NOTGREATER | '!<' -> T_NOTLESS | '>' -> T_GREATER | '<' -> T_LESS | LIKE -> T_LIKE | NOT WS LIKE -> T_NOTLIKE | MATCH -> T_MATCH | NOT WS MATCH -> T_NOTMATCH );
	[GrammarRule("op_4")]
	private AstParserRuleReturnScope<object, IToken> op_4()
	{
		EnterRule_op_4();
		EnterRule("op_4", 48);
		TraceIn("op_4", 48);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal251 = default(IToken);
	    IToken string_literal252 = default(IToken);
	    IToken string_literal253 = default(IToken);
	    IToken string_literal254 = default(IToken);
	    IToken string_literal255 = default(IToken);
	    IToken string_literal256 = default(IToken);
	    IToken string_literal257 = default(IToken);
	    IToken char_literal258 = default(IToken);
	    IToken char_literal259 = default(IToken);
	    IToken LIKE260 = default(IToken);
	    IToken NOT261 = default(IToken);
	    IToken WS262 = default(IToken);
	    IToken LIKE263 = default(IToken);
	    IToken MATCH264 = default(IToken);
	    IToken NOT265 = default(IToken);
	    IToken WS266 = default(IToken);
	    IToken MATCH267 = default(IToken);

	    object char_literal251_tree = default(object);
	    object string_literal252_tree = default(object);
	    object string_literal253_tree = default(object);
	    object string_literal254_tree = default(object);
	    object string_literal255_tree = default(object);
	    object string_literal256_tree = default(object);
	    object string_literal257_tree = default(object);
	    object char_literal258_tree = default(object);
	    object char_literal259_tree = default(object);
	    object LIKE260_tree = default(object);
	    object NOT261_tree = default(object);
	    object WS262_tree = default(object);
	    object LIKE263_tree = default(object);
	    object MATCH264_tree = default(object);
	    object NOT265_tree = default(object);
	    object WS266_tree = default(object);
	    object MATCH267_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_179=new RewriteRuleITokenStream(adaptor,"token 179");
	    RewriteRuleITokenStream stream_178=new RewriteRuleITokenStream(adaptor,"token 178");
	    RewriteRuleITokenStream stream_166=new RewriteRuleITokenStream(adaptor,"token 166");
	    RewriteRuleITokenStream stream_165=new RewriteRuleITokenStream(adaptor,"token 165");
	    RewriteRuleITokenStream stream_180=new RewriteRuleITokenStream(adaptor,"token 180");
	    RewriteRuleITokenStream stream_181=new RewriteRuleITokenStream(adaptor,"token 181");
	    RewriteRuleITokenStream stream_164=new RewriteRuleITokenStream(adaptor,"token 164");
	    RewriteRuleITokenStream stream_182=new RewriteRuleITokenStream(adaptor,"token 182");
	    RewriteRuleITokenStream stream_MATCH=new RewriteRuleITokenStream(adaptor,"token MATCH");
	    RewriteRuleITokenStream stream_183=new RewriteRuleITokenStream(adaptor,"token 183");
	    RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");
	    RewriteRuleITokenStream stream_LIKE=new RewriteRuleITokenStream(adaptor,"token LIKE");

		try { DebugEnterRule(GrammarFileName, "op_4");
		DebugLocation(363, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:363:6: ( '=' -> T_EQUAL | '>=' -> T_NOTLESS | '<=' -> T_NOTGREATER | '<>' -> T_NOTEQUAL | '!=' -> T_NOTEQUAL | '!>' -> T_NOTGREATER | '!<' -> T_NOTLESS | '>' -> T_GREATER | '<' -> T_LESS | LIKE -> T_LIKE | NOT WS LIKE -> T_NOTLIKE | MATCH -> T_MATCH | NOT WS MATCH -> T_NOTMATCH )
			int alt87=13;
			try { DebugEnterDecision(87, decisionCanBacktrack[87]);
			switch (input.LA(1))
			{
			case 181:
				{
				alt87 = 1;
				}
				break;
			case 183:
				{
				alt87 = 2;
				}
				break;
			case 179:
				{
				alt87 = 3;
				}
				break;
			case 180:
				{
				alt87 = 4;
				}
				break;
			case 165:
				{
				alt87 = 5;
				}
				break;
			case 166:
				{
				alt87 = 6;
				}
				break;
			case 164:
				{
				alt87 = 7;
				}
				break;
			case 182:
				{
				alt87 = 8;
				}
				break;
			case 178:
				{
				alt87 = 9;
				}
				break;
			case LIKE:
				{
				alt87 = 10;
				}
				break;
			case NOT:
				{
				int LA87_11 = input.LA(2);

				if ((LA87_11==WS))
				{
					int LA87_13 = input.LA(3);

					if ((LA87_13==LIKE))
					{
						alt87 = 11;
					}
					else if ((LA87_13==MATCH))
					{
						alt87 = 13;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 87, 13, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 87, 11, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case MATCH:
				{
				alt87 = 12;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 87, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(87); }
			switch (alt87)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:363:8: '='
				{
				DebugLocation(363, 8);
				char_literal251=(IToken)Match(input,181,Follow._181_in_op_42172); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_181.Add(char_literal251);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 363:12: -> T_EQUAL
				{
					DebugLocation(363, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_EQUAL, "T_EQUAL"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:364:4: '>='
				{
				DebugLocation(364, 4);
				string_literal252=(IToken)Match(input,183,Follow._183_in_op_42181); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_183.Add(string_literal252);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 364:9: -> T_NOTLESS
				{
					DebugLocation(364, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTLESS, "T_NOTLESS"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:365:4: '<='
				{
				DebugLocation(365, 4);
				string_literal253=(IToken)Match(input,179,Follow._179_in_op_42191); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_179.Add(string_literal253);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 365:9: -> T_NOTGREATER
				{
					DebugLocation(365, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTGREATER, "T_NOTGREATER"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:366:4: '<>'
				{
				DebugLocation(366, 4);
				string_literal254=(IToken)Match(input,180,Follow._180_in_op_42201); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_180.Add(string_literal254);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 366:9: -> T_NOTEQUAL
				{
					DebugLocation(366, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTEQUAL, "T_NOTEQUAL"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:367:4: '!='
				{
				DebugLocation(367, 4);
				string_literal255=(IToken)Match(input,165,Follow._165_in_op_42210); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_165.Add(string_literal255);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 367:9: -> T_NOTEQUAL
				{
					DebugLocation(367, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTEQUAL, "T_NOTEQUAL"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:368:4: '!>'
				{
				DebugLocation(368, 4);
				string_literal256=(IToken)Match(input,166,Follow._166_in_op_42219); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_166.Add(string_literal256);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 368:9: -> T_NOTGREATER
				{
					DebugLocation(368, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTGREATER, "T_NOTGREATER"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:369:4: '!<'
				{
				DebugLocation(369, 4);
				string_literal257=(IToken)Match(input,164,Follow._164_in_op_42228); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_164.Add(string_literal257);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 369:9: -> T_NOTLESS
				{
					DebugLocation(369, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTLESS, "T_NOTLESS"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:370:4: '>'
				{
				DebugLocation(370, 4);
				char_literal258=(IToken)Match(input,182,Follow._182_in_op_42237); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_182.Add(char_literal258);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 370:8: -> T_GREATER
				{
					DebugLocation(370, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_GREATER, "T_GREATER"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:371:4: '<'
				{
				DebugLocation(371, 4);
				char_literal259=(IToken)Match(input,178,Follow._178_in_op_42247); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_178.Add(char_literal259);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 371:8: -> T_LESS
				{
					DebugLocation(371, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_LESS, "T_LESS"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:372:4: LIKE
				{
				DebugLocation(372, 4);
				LIKE260=(IToken)Match(input,LIKE,Follow._LIKE_in_op_42256); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LIKE.Add(LIKE260);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 372:9: -> T_LIKE
				{
					DebugLocation(372, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_LIKE, "T_LIKE"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:373:4: NOT WS LIKE
				{
				DebugLocation(373, 4);
				NOT261=(IToken)Match(input,NOT,Follow._NOT_in_op_42265); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_NOT.Add(NOT261);

				DebugLocation(373, 8);
				WS262=(IToken)Match(input,WS,Follow._WS_in_op_42267); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS262);

				DebugLocation(373, 11);
				LIKE263=(IToken)Match(input,LIKE,Follow._LIKE_in_op_42269); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LIKE.Add(LIKE263);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 373:16: -> T_NOTLIKE
				{
					DebugLocation(373, 19);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTLIKE, "T_NOTLIKE"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:374:4: MATCH
				{
				DebugLocation(374, 4);
				MATCH264=(IToken)Match(input,MATCH,Follow._MATCH_in_op_42278); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_MATCH.Add(MATCH264);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 374:10: -> T_MATCH
				{
					DebugLocation(374, 13);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MATCH, "T_MATCH"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:375:4: NOT WS MATCH
				{
				DebugLocation(375, 4);
				NOT265=(IToken)Match(input,NOT,Follow._NOT_in_op_42287); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_NOT.Add(NOT265);

				DebugLocation(375, 8);
				WS266=(IToken)Match(input,WS,Follow._WS_in_op_42289); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS266);

				DebugLocation(375, 11);
				MATCH267=(IToken)Match(input,MATCH,Follow._MATCH_in_op_42291); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_MATCH.Add(MATCH267);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 375:17: -> T_NOTMATCH
				{
					DebugLocation(375, 20);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTMATCH, "T_NOTMATCH"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_4", 48);
			LeaveRule("op_4", 48);
			LeaveRule_op_4();
	    }
	 	DebugLocation(376, 1);
		} finally { DebugExitRule(GrammarFileName, "op_4"); }
		return retval;

	}
	// $ANTLR end "op_4"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_3() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_3() {}

	// $ANTLR start "expression_3"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:378:1: expression_3 : (a= expression_2 -> $a) ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )* ;
	[GrammarRule("expression_3")]
	private AstParserRuleReturnScope<object, IToken> expression_3()
	{
		EnterRule_expression_3();
		EnterRule("expression_3", 49);
		TraceIn("expression_3", 49);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS268 = default(IToken);
	    IToken WS270 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_3269 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS268_tree = default(object);
	    object WS270_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_op_3=new RewriteRuleSubtreeStream(adaptor,"rule op_3");
	    RewriteRuleSubtreeStream stream_expression_2=new RewriteRuleSubtreeStream(adaptor,"rule expression_2");
		try { DebugEnterRule(GrammarFileName, "expression_3");
		DebugLocation(378, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:379:2: ( (a= expression_2 -> $a) ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:379:4: (a= expression_2 -> $a) ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )*
			{
			DebugLocation(379, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:379:4: (a= expression_2 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:379:5: a= expression_2
			{
			DebugLocation(379, 6);
			PushFollow(Follow._expression_2_in_expression_32310);
			a=expression_2();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression_2.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 379:19: -> $a
			{
				DebugLocation(379, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(379, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:379:25: ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )*
			try { DebugEnterSubRule(90);
			while (true)
			{
				int alt90=2;
				try { DebugEnterDecision(90, decisionCanBacktrack[90]);
				int LA90_0 = input.LA(1);

				if ((LA90_0==WS))
				{
					int LA90_1 = input.LA(2);

					if ((LA90_1==168||LA90_1==172||LA90_1==174||(LA90_1>=186 && LA90_1<=187)))
					{
						alt90 = 1;
					}


				}
				else if ((LA90_0==168||LA90_0==172||LA90_0==174||(LA90_0>=186 && LA90_0<=187)))
				{
					alt90 = 1;
				}


				} finally { DebugExitDecision(90); }
				switch ( alt90 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:379:26: ( WS )? op_3 ( WS )? b= expression_2
					{
					DebugLocation(379, 26);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:379:26: ( WS )?
					int alt88=2;
					try { DebugEnterSubRule(88);
					try { DebugEnterDecision(88, decisionCanBacktrack[88]);
					int LA88_0 = input.LA(1);

					if ((LA88_0==WS))
					{
						alt88 = 1;
					}
					} finally { DebugExitDecision(88); }
					switch (alt88)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:379:26: WS
						{
						DebugLocation(379, 26);
						WS268=(IToken)Match(input,WS,Follow._WS_in_expression_32317); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS268);


						}
						break;

					}
					} finally { DebugExitSubRule(88); }

					DebugLocation(379, 30);
					PushFollow(Follow._op_3_in_expression_32320);
					op_3269=op_3();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_op_3.Add(op_3269.Tree);
					DebugLocation(379, 35);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:379:35: ( WS )?
					int alt89=2;
					try { DebugEnterSubRule(89);
					try { DebugEnterDecision(89, decisionCanBacktrack[89]);
					int LA89_0 = input.LA(1);

					if ((LA89_0==WS))
					{
						alt89 = 1;
					}
					} finally { DebugExitDecision(89); }
					switch (alt89)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:379:35: WS
						{
						DebugLocation(379, 35);
						WS270=(IToken)Match(input,WS,Follow._WS_in_expression_32322); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS270);


						}
						break;

					}
					} finally { DebugExitSubRule(89); }

					DebugLocation(379, 40);
					PushFollow(Follow._expression_2_in_expression_32327);
					b=expression_2();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expression_2.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, expression_3, op_3
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 379:54: -> ^( T_OP_BINARY op_3 $expression_3 $b)
					{
						DebugLocation(379, 57);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:379:57: ^( T_OP_BINARY op_3 $expression_3 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(379, 59);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(379, 71);
						adaptor.AddChild(root_1, stream_op_3.NextTree());
						DebugLocation(379, 77);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(379, 91);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop90;
				}
			}

			loop90:
				;

			} finally { DebugExitSubRule(90); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_3", 49);
			LeaveRule("expression_3", 49);
			LeaveRule_expression_3();
	    }
	 	DebugLocation(380, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_3"); }
		return retval;

	}
	// $ANTLR end "expression_3"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_3() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_3() {}

	// $ANTLR start "op_3"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:382:1: op_3 : ( '+' -> T_PLUS | '-' -> T_MINUS | '&' -> T_BITWISE_AND | '|' -> T_BITWISE_OR | '^' -> T_BITWISE_XOR );
	[GrammarRule("op_3")]
	private AstParserRuleReturnScope<object, IToken> op_3()
	{
		EnterRule_op_3();
		EnterRule("op_3", 50);
		TraceIn("op_3", 50);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal271 = default(IToken);
	    IToken char_literal272 = default(IToken);
	    IToken char_literal273 = default(IToken);
	    IToken char_literal274 = default(IToken);
	    IToken char_literal275 = default(IToken);

	    object char_literal271_tree = default(object);
	    object char_literal272_tree = default(object);
	    object char_literal273_tree = default(object);
	    object char_literal274_tree = default(object);
	    object char_literal275_tree = default(object);
	    RewriteRuleITokenStream stream_174=new RewriteRuleITokenStream(adaptor,"token 174");
	    RewriteRuleITokenStream stream_172=new RewriteRuleITokenStream(adaptor,"token 172");
	    RewriteRuleITokenStream stream_186=new RewriteRuleITokenStream(adaptor,"token 186");
	    RewriteRuleITokenStream stream_187=new RewriteRuleITokenStream(adaptor,"token 187");
	    RewriteRuleITokenStream stream_168=new RewriteRuleITokenStream(adaptor,"token 168");

		try { DebugEnterRule(GrammarFileName, "op_3");
		DebugLocation(382, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:382:6: ( '+' -> T_PLUS | '-' -> T_MINUS | '&' -> T_BITWISE_AND | '|' -> T_BITWISE_OR | '^' -> T_BITWISE_XOR )
			int alt91=5;
			try { DebugEnterDecision(91, decisionCanBacktrack[91]);
			switch (input.LA(1))
			{
			case 172:
				{
				alt91 = 1;
				}
				break;
			case 174:
				{
				alt91 = 2;
				}
				break;
			case 168:
				{
				alt91 = 3;
				}
				break;
			case 187:
				{
				alt91 = 4;
				}
				break;
			case 186:
				{
				alt91 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 91, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(91); }
			switch (alt91)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:382:8: '+'
				{
				DebugLocation(382, 8);
				char_literal271=(IToken)Match(input,172,Follow._172_in_op_32353); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_172.Add(char_literal271);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 382:12: -> T_PLUS
				{
					DebugLocation(382, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_PLUS, "T_PLUS"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:383:4: '-'
				{
				DebugLocation(383, 4);
				char_literal272=(IToken)Match(input,174,Follow._174_in_op_32362); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_174.Add(char_literal272);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 383:8: -> T_MINUS
				{
					DebugLocation(383, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MINUS, "T_MINUS"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:384:4: '&'
				{
				DebugLocation(384, 4);
				char_literal273=(IToken)Match(input,168,Follow._168_in_op_32371); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_168.Add(char_literal273);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 384:8: -> T_BITWISE_AND
				{
					DebugLocation(384, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_AND, "T_BITWISE_AND"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:385:4: '|'
				{
				DebugLocation(385, 4);
				char_literal274=(IToken)Match(input,187,Follow._187_in_op_32380); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_187.Add(char_literal274);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 385:8: -> T_BITWISE_OR
				{
					DebugLocation(385, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_OR, "T_BITWISE_OR"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:386:4: '^'
				{
				DebugLocation(386, 4);
				char_literal275=(IToken)Match(input,186,Follow._186_in_op_32389); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_186.Add(char_literal275);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 386:8: -> T_BITWISE_XOR
				{
					DebugLocation(386, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_XOR, "T_BITWISE_XOR"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_3", 50);
			LeaveRule("op_3", 50);
			LeaveRule_op_3();
	    }
	 	DebugLocation(387, 1);
		} finally { DebugExitRule(GrammarFileName, "op_3"); }
		return retval;

	}
	// $ANTLR end "op_3"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_2() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_2() {}

	// $ANTLR start "expression_2"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:389:1: expression_2 : (a= expression_1 -> $a) ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )* ;
	[GrammarRule("expression_2")]
	private AstParserRuleReturnScope<object, IToken> expression_2()
	{
		EnterRule_expression_2();
		EnterRule("expression_2", 51);
		TraceIn("expression_2", 51);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS276 = default(IToken);
	    IToken WS278 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_2277 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS276_tree = default(object);
	    object WS278_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_op_2=new RewriteRuleSubtreeStream(adaptor,"rule op_2");
	    RewriteRuleSubtreeStream stream_expression_1=new RewriteRuleSubtreeStream(adaptor,"rule expression_1");
		try { DebugEnterRule(GrammarFileName, "expression_2");
		DebugLocation(389, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:390:2: ( (a= expression_1 -> $a) ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:390:4: (a= expression_1 -> $a) ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )*
			{
			DebugLocation(390, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:390:4: (a= expression_1 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:390:5: a= expression_1
			{
			DebugLocation(390, 6);
			PushFollow(Follow._expression_1_in_expression_22409);
			a=expression_1();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression_1.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 390:19: -> $a
			{
				DebugLocation(390, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(390, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:390:25: ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )*
			try { DebugEnterSubRule(94);
			while (true)
			{
				int alt94=2;
				try { DebugEnterDecision(94, decisionCanBacktrack[94]);
				int LA94_0 = input.LA(1);

				if ((LA94_0==WS))
				{
					int LA94_1 = input.LA(2);

					if ((LA94_1==167||LA94_1==171||LA94_1==176))
					{
						alt94 = 1;
					}


				}
				else if ((LA94_0==167||LA94_0==171||LA94_0==176))
				{
					alt94 = 1;
				}


				} finally { DebugExitDecision(94); }
				switch ( alt94 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:390:26: ( WS )? op_2 ( WS )? b= expression_1
					{
					DebugLocation(390, 26);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:390:26: ( WS )?
					int alt92=2;
					try { DebugEnterSubRule(92);
					try { DebugEnterDecision(92, decisionCanBacktrack[92]);
					int LA92_0 = input.LA(1);

					if ((LA92_0==WS))
					{
						alt92 = 1;
					}
					} finally { DebugExitDecision(92); }
					switch (alt92)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:390:26: WS
						{
						DebugLocation(390, 26);
						WS276=(IToken)Match(input,WS,Follow._WS_in_expression_22416); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS276);


						}
						break;

					}
					} finally { DebugExitSubRule(92); }

					DebugLocation(390, 30);
					PushFollow(Follow._op_2_in_expression_22419);
					op_2277=op_2();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_op_2.Add(op_2277.Tree);
					DebugLocation(390, 35);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:390:35: ( WS )?
					int alt93=2;
					try { DebugEnterSubRule(93);
					try { DebugEnterDecision(93, decisionCanBacktrack[93]);
					int LA93_0 = input.LA(1);

					if ((LA93_0==WS))
					{
						alt93 = 1;
					}
					} finally { DebugExitDecision(93); }
					switch (alt93)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:390:35: WS
						{
						DebugLocation(390, 35);
						WS278=(IToken)Match(input,WS,Follow._WS_in_expression_22421); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS278);


						}
						break;

					}
					} finally { DebugExitSubRule(93); }

					DebugLocation(390, 40);
					PushFollow(Follow._expression_1_in_expression_22426);
					b=expression_1();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expression_1.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, expression_2, op_2
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 390:54: -> ^( T_OP_BINARY op_2 $expression_2 $b)
					{
						DebugLocation(390, 57);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:390:57: ^( T_OP_BINARY op_2 $expression_2 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(390, 59);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(390, 71);
						adaptor.AddChild(root_1, stream_op_2.NextTree());
						DebugLocation(390, 77);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(390, 91);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop94;
				}
			}

			loop94:
				;

			} finally { DebugExitSubRule(94); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_2", 51);
			LeaveRule("expression_2", 51);
			LeaveRule_expression_2();
	    }
	 	DebugLocation(391, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_2"); }
		return retval;

	}
	// $ANTLR end "expression_2"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_2() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_2() {}

	// $ANTLR start "op_2"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:393:1: op_2 : ( '*' -> T_PRODUCT | '/' -> T_DIVIDE | '%' -> T_MODULO );
	[GrammarRule("op_2")]
	private AstParserRuleReturnScope<object, IToken> op_2()
	{
		EnterRule_op_2();
		EnterRule("op_2", 52);
		TraceIn("op_2", 52);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal279 = default(IToken);
	    IToken char_literal280 = default(IToken);
	    IToken char_literal281 = default(IToken);

	    object char_literal279_tree = default(object);
	    object char_literal280_tree = default(object);
	    object char_literal281_tree = default(object);
	    RewriteRuleITokenStream stream_171=new RewriteRuleITokenStream(adaptor,"token 171");
	    RewriteRuleITokenStream stream_176=new RewriteRuleITokenStream(adaptor,"token 176");
	    RewriteRuleITokenStream stream_167=new RewriteRuleITokenStream(adaptor,"token 167");

		try { DebugEnterRule(GrammarFileName, "op_2");
		DebugLocation(393, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:393:6: ( '*' -> T_PRODUCT | '/' -> T_DIVIDE | '%' -> T_MODULO )
			int alt95=3;
			try { DebugEnterDecision(95, decisionCanBacktrack[95]);
			switch (input.LA(1))
			{
			case 171:
				{
				alt95 = 1;
				}
				break;
			case 176:
				{
				alt95 = 2;
				}
				break;
			case 167:
				{
				alt95 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 95, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(95); }
			switch (alt95)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:393:8: '*'
				{
				DebugLocation(393, 8);
				char_literal279=(IToken)Match(input,171,Follow._171_in_op_22452); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_171.Add(char_literal279);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 393:12: -> T_PRODUCT
				{
					DebugLocation(393, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_PRODUCT, "T_PRODUCT"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:394:4: '/'
				{
				DebugLocation(394, 4);
				char_literal280=(IToken)Match(input,176,Follow._176_in_op_22461); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_176.Add(char_literal280);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 394:8: -> T_DIVIDE
				{
					DebugLocation(394, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_DIVIDE, "T_DIVIDE"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:395:4: '%'
				{
				DebugLocation(395, 4);
				char_literal281=(IToken)Match(input,167,Follow._167_in_op_22470); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_167.Add(char_literal281);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 395:8: -> T_MODULO
				{
					DebugLocation(395, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MODULO, "T_MODULO"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_2", 52);
			LeaveRule("op_2", 52);
			LeaveRule_op_2();
	    }
	 	DebugLocation(396, 1);
		} finally { DebugExitRule(GrammarFileName, "op_2"); }
		return retval;

	}
	// $ANTLR end "op_2"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_1() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_1() {}

	// $ANTLR start "expression_1"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:398:1: expression_1 : ( op_1 ( WS )? expression_1 -> ^( T_OP_UNARY op_1 expression_1 ) | expression_atom );
	[GrammarRule("expression_1")]
	private AstParserRuleReturnScope<object, IToken> expression_1()
	{
		EnterRule_expression_1();
		EnterRule("expression_1", 53);
		TraceIn("expression_1", 53);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS283 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> op_1282 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_1284 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_atom285 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS283_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression_1=new RewriteRuleSubtreeStream(adaptor,"rule expression_1");
	    RewriteRuleSubtreeStream stream_op_1=new RewriteRuleSubtreeStream(adaptor,"rule op_1");
		try { DebugEnterRule(GrammarFileName, "expression_1");
		DebugLocation(398, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:399:2: ( op_1 ( WS )? expression_1 -> ^( T_OP_UNARY op_1 expression_1 ) | expression_atom )
			int alt97=2;
			try { DebugEnterDecision(97, decisionCanBacktrack[97]);
			int LA97_0 = input.LA(1);

			if ((LA97_0==172||LA97_0==174||LA97_0==188))
			{
				alt97 = 1;
			}
			else if (((LA97_0>=CASE && LA97_0<=CAST)||(LA97_0>=CONVERT && LA97_0<=COUNT)||(LA97_0>=DATEADD && LA97_0<=DATEPART)||LA97_0==EXISTS||LA97_0==NUMBER||LA97_0==SIMPLE_FILE||(LA97_0>=STRING && LA97_0<=SYSTEMVAR)||LA97_0==TOKEN||LA97_0==VARIABLE||LA97_0==169))
			{
				alt97 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 97, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(97); }
			switch (alt97)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:399:4: op_1 ( WS )? expression_1
				{
				DebugLocation(399, 4);
				PushFollow(Follow._op_1_in_expression_12486);
				op_1282=op_1();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_op_1.Add(op_1282.Tree);
				DebugLocation(399, 9);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:399:9: ( WS )?
				int alt96=2;
				try { DebugEnterSubRule(96);
				try { DebugEnterDecision(96, decisionCanBacktrack[96]);
				int LA96_0 = input.LA(1);

				if ((LA96_0==WS))
				{
					alt96 = 1;
				}
				} finally { DebugExitDecision(96); }
				switch (alt96)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:399:9: WS
					{
					DebugLocation(399, 9);
					WS283=(IToken)Match(input,WS,Follow._WS_in_expression_12488); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS283);


					}
					break;

				}
				} finally { DebugExitSubRule(96); }

				DebugLocation(399, 13);
				PushFollow(Follow._expression_1_in_expression_12491);
				expression_1284=expression_1();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression_1.Add(expression_1284.Tree);


				{
				// AST REWRITE
				// elements: expression_1, op_1
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 399:26: -> ^( T_OP_UNARY op_1 expression_1 )
				{
					DebugLocation(399, 29);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:399:29: ^( T_OP_UNARY op_1 expression_1 )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(399, 31);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_UNARY, "T_OP_UNARY"), root_1);

					DebugLocation(399, 42);
					adaptor.AddChild(root_1, stream_op_1.NextTree());
					DebugLocation(399, 47);
					adaptor.AddChild(root_1, stream_expression_1.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:400:4: expression_atom
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(400, 4);
				PushFollow(Follow._expression_atom_in_expression_12506);
				expression_atom285=expression_atom();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression_atom285.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_1", 53);
			LeaveRule("expression_1", 53);
			LeaveRule_expression_1();
	    }
	 	DebugLocation(401, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_1"); }
		return retval;

	}
	// $ANTLR end "expression_1"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_1() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_1() {}

	// $ANTLR start "op_1"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:403:1: op_1 : ( '~' -> T_BITWISE_NOT | '+' -> T_PLUS | '-' -> T_MINUS );
	[GrammarRule("op_1")]
	private AstParserRuleReturnScope<object, IToken> op_1()
	{
		EnterRule_op_1();
		EnterRule("op_1", 54);
		TraceIn("op_1", 54);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal286 = default(IToken);
	    IToken char_literal287 = default(IToken);
	    IToken char_literal288 = default(IToken);

	    object char_literal286_tree = default(object);
	    object char_literal287_tree = default(object);
	    object char_literal288_tree = default(object);
	    RewriteRuleITokenStream stream_174=new RewriteRuleITokenStream(adaptor,"token 174");
	    RewriteRuleITokenStream stream_172=new RewriteRuleITokenStream(adaptor,"token 172");
	    RewriteRuleITokenStream stream_188=new RewriteRuleITokenStream(adaptor,"token 188");

		try { DebugEnterRule(GrammarFileName, "op_1");
		DebugLocation(403, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:403:6: ( '~' -> T_BITWISE_NOT | '+' -> T_PLUS | '-' -> T_MINUS )
			int alt98=3;
			try { DebugEnterDecision(98, decisionCanBacktrack[98]);
			switch (input.LA(1))
			{
			case 188:
				{
				alt98 = 1;
				}
				break;
			case 172:
				{
				alt98 = 2;
				}
				break;
			case 174:
				{
				alt98 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 98, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(98); }
			switch (alt98)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:403:8: '~'
				{
				DebugLocation(403, 8);
				char_literal286=(IToken)Match(input,188,Follow._188_in_op_12516); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_188.Add(char_literal286);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 403:12: -> T_BITWISE_NOT
				{
					DebugLocation(403, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_NOT, "T_BITWISE_NOT"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:404:5: '+'
				{
				DebugLocation(404, 5);
				char_literal287=(IToken)Match(input,172,Follow._172_in_op_12526); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_172.Add(char_literal287);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 404:9: -> T_PLUS
				{
					DebugLocation(404, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_PLUS, "T_PLUS"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:405:4: '-'
				{
				DebugLocation(405, 4);
				char_literal288=(IToken)Match(input,174,Follow._174_in_op_12535); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_174.Add(char_literal288);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 405:8: -> T_MINUS
				{
					DebugLocation(405, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MINUS, "T_MINUS"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_1", 54);
			LeaveRule("op_1", 54);
			LeaveRule_op_1();
	    }
	 	DebugLocation(406, 1);
		} finally { DebugExitRule(GrammarFileName, "op_1"); }
		return retval;

	}
	// $ANTLR end "op_1"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_atom() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_atom() {}

	// $ANTLR start "expression_atom"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:408:1: expression_atom : ( number -> ^( T_INTEGER number ) | string | SYSTEMVAR -> ^( T_SYSTEMVAR SYSTEMVAR ) | variable | ( subquery )=> subquery | '(' expression ')' -> expression | functioncall_or_column | specialfunctioncall | case | EXISTS ( WS )? '(' ( WS )? select_command ( WS )? ')' -> ^( T_EXISTS select_command ) );
	[GrammarRule("expression_atom")]
	private AstParserRuleReturnScope<object, IToken> expression_atom()
	{
		EnterRule_expression_atom();
		EnterRule("expression_atom", 55);
		TraceIn("expression_atom", 55);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken SYSTEMVAR291 = default(IToken);
	    IToken char_literal294 = default(IToken);
	    IToken char_literal296 = default(IToken);
	    IToken EXISTS300 = default(IToken);
	    IToken WS301 = default(IToken);
	    IToken char_literal302 = default(IToken);
	    IToken WS303 = default(IToken);
	    IToken WS305 = default(IToken);
	    IToken char_literal306 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> number289 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> string290 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> variable292 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> subquery293 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression295 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> functioncall_or_column297 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> specialfunctioncall298 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> case299 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> select_command304 = default(AstParserRuleReturnScope<object, IToken>);

	    object SYSTEMVAR291_tree = default(object);
	    object char_literal294_tree = default(object);
	    object char_literal296_tree = default(object);
	    object EXISTS300_tree = default(object);
	    object WS301_tree = default(object);
	    object char_literal302_tree = default(object);
	    object WS303_tree = default(object);
	    object WS305_tree = default(object);
	    object char_literal306_tree = default(object);
	    RewriteRuleITokenStream stream_170=new RewriteRuleITokenStream(adaptor,"token 170");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_EXISTS=new RewriteRuleITokenStream(adaptor,"token EXISTS");
	    RewriteRuleITokenStream stream_SYSTEMVAR=new RewriteRuleITokenStream(adaptor,"token SYSTEMVAR");
	    RewriteRuleITokenStream stream_169=new RewriteRuleITokenStream(adaptor,"token 169");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_select_command=new RewriteRuleSubtreeStream(adaptor,"rule select_command");
	    RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
		try { DebugEnterRule(GrammarFileName, "expression_atom");
		DebugLocation(408, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:409:2: ( number -> ^( T_INTEGER number ) | string | SYSTEMVAR -> ^( T_SYSTEMVAR SYSTEMVAR ) | variable | ( subquery )=> subquery | '(' expression ')' -> expression | functioncall_or_column | specialfunctioncall | case | EXISTS ( WS )? '(' ( WS )? select_command ( WS )? ')' -> ^( T_EXISTS select_command ) )
			int alt102=10;
			try { DebugEnterDecision(102, decisionCanBacktrack[102]);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt102 = 1;
				}
				break;
			case STRING:
				{
				alt102 = 2;
				}
				break;
			case SYSTEMVAR:
				{
				alt102 = 3;
				}
				break;
			case VARIABLE:
				{
				alt102 = 4;
				}
				break;
			case 169:
				{
				int LA102_5 = input.LA(2);

				if ((EvaluatePredicate(synpred3_gql_fragment)))
				{
					alt102 = 5;
				}
				else if ((true))
				{
					alt102 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 102, 5, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case COUNT:
			case SIMPLE_FILE:
			case TOKEN:
				{
				alt102 = 7;
				}
				break;
			case CAST:
			case CONVERT:
			case DATEADD:
			case DATEDIFF:
			case DATEPART:
				{
				alt102 = 8;
				}
				break;
			case CASE:
				{
				alt102 = 9;
				}
				break;
			case EXISTS:
				{
				alt102 = 10;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 102, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(102); }
			switch (alt102)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:409:4: number
				{
				DebugLocation(409, 4);
				PushFollow(Follow._number_in_expression_atom2550);
				number289=number();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_number.Add(number289.Tree);


				{
				// AST REWRITE
				// elements: number
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 409:11: -> ^( T_INTEGER number )
				{
					DebugLocation(409, 14);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:409:14: ^( T_INTEGER number )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(409, 16);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_INTEGER, "T_INTEGER"), root_1);

					DebugLocation(409, 26);
					adaptor.AddChild(root_1, stream_number.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:410:4: string
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(410, 4);
				PushFollow(Follow._string_in_expression_atom2563);
				string290=@string();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, string290.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:411:4: SYSTEMVAR
				{
				DebugLocation(411, 4);
				SYSTEMVAR291=(IToken)Match(input,SYSTEMVAR,Follow._SYSTEMVAR_in_expression_atom2568); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SYSTEMVAR.Add(SYSTEMVAR291);



				{
				// AST REWRITE
				// elements: SYSTEMVAR
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 411:14: -> ^( T_SYSTEMVAR SYSTEMVAR )
				{
					DebugLocation(411, 17);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:411:17: ^( T_SYSTEMVAR SYSTEMVAR )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(411, 19);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SYSTEMVAR, "T_SYSTEMVAR"), root_1);

					DebugLocation(411, 31);
					adaptor.AddChild(root_1, stream_SYSTEMVAR.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:412:4: variable
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(412, 4);
				PushFollow(Follow._variable_in_expression_atom2581);
				variable292=variable();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variable292.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:413:4: ( subquery )=> subquery
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(413, 18);
				PushFollow(Follow._subquery_in_expression_atom2592);
				subquery293=subquery();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, subquery293.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:414:4: '(' expression ')'
				{
				DebugLocation(414, 4);
				char_literal294=(IToken)Match(input,169,Follow._169_in_expression_atom2597); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_169.Add(char_literal294);

				DebugLocation(414, 8);
				PushFollow(Follow._expression_in_expression_atom2599);
				expression295=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression295.Tree);
				DebugLocation(414, 19);
				char_literal296=(IToken)Match(input,170,Follow._170_in_expression_atom2601); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_170.Add(char_literal296);



				{
				// AST REWRITE
				// elements: expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 414:23: -> expression
				{
					DebugLocation(414, 26);
					adaptor.AddChild(root_0, stream_expression.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:415:4: functioncall_or_column
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(415, 4);
				PushFollow(Follow._functioncall_or_column_in_expression_atom2610);
				functioncall_or_column297=functioncall_or_column();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, functioncall_or_column297.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:416:4: specialfunctioncall
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(416, 4);
				PushFollow(Follow._specialfunctioncall_in_expression_atom2615);
				specialfunctioncall298=specialfunctioncall();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, specialfunctioncall298.Tree);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:417:4: case
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(417, 4);
				PushFollow(Follow._case_in_expression_atom2620);
				case299=@case();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, case299.Tree);

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:418:4: EXISTS ( WS )? '(' ( WS )? select_command ( WS )? ')'
				{
				DebugLocation(418, 4);
				EXISTS300=(IToken)Match(input,EXISTS,Follow._EXISTS_in_expression_atom2625); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_EXISTS.Add(EXISTS300);

				DebugLocation(418, 11);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:418:11: ( WS )?
				int alt99=2;
				try { DebugEnterSubRule(99);
				try { DebugEnterDecision(99, decisionCanBacktrack[99]);
				int LA99_0 = input.LA(1);

				if ((LA99_0==WS))
				{
					alt99 = 1;
				}
				} finally { DebugExitDecision(99); }
				switch (alt99)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:418:11: WS
					{
					DebugLocation(418, 11);
					WS301=(IToken)Match(input,WS,Follow._WS_in_expression_atom2627); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS301);


					}
					break;

				}
				} finally { DebugExitSubRule(99); }

				DebugLocation(418, 15);
				char_literal302=(IToken)Match(input,169,Follow._169_in_expression_atom2630); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_169.Add(char_literal302);

				DebugLocation(418, 19);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:418:19: ( WS )?
				int alt100=2;
				try { DebugEnterSubRule(100);
				try { DebugEnterDecision(100, decisionCanBacktrack[100]);
				int LA100_0 = input.LA(1);

				if ((LA100_0==WS))
				{
					alt100 = 1;
				}
				} finally { DebugExitDecision(100); }
				switch (alt100)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:418:19: WS
					{
					DebugLocation(418, 19);
					WS303=(IToken)Match(input,WS,Follow._WS_in_expression_atom2632); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS303);


					}
					break;

				}
				} finally { DebugExitSubRule(100); }

				DebugLocation(418, 23);
				PushFollow(Follow._select_command_in_expression_atom2635);
				select_command304=select_command();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_select_command.Add(select_command304.Tree);
				DebugLocation(418, 38);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:418:38: ( WS )?
				int alt101=2;
				try { DebugEnterSubRule(101);
				try { DebugEnterDecision(101, decisionCanBacktrack[101]);
				int LA101_0 = input.LA(1);

				if ((LA101_0==WS))
				{
					alt101 = 1;
				}
				} finally { DebugExitDecision(101); }
				switch (alt101)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:418:38: WS
					{
					DebugLocation(418, 38);
					WS305=(IToken)Match(input,WS,Follow._WS_in_expression_atom2637); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS305);


					}
					break;

				}
				} finally { DebugExitSubRule(101); }

				DebugLocation(418, 42);
				char_literal306=(IToken)Match(input,170,Follow._170_in_expression_atom2640); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_170.Add(char_literal306);



				{
				// AST REWRITE
				// elements: select_command
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 418:46: -> ^( T_EXISTS select_command )
				{
					DebugLocation(418, 49);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:418:49: ^( T_EXISTS select_command )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(418, 51);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_EXISTS, "T_EXISTS"), root_1);

					DebugLocation(418, 60);
					adaptor.AddChild(root_1, stream_select_command.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_atom", 55);
			LeaveRule("expression_atom", 55);
			LeaveRule_expression_atom();
	    }
	 	DebugLocation(419, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_atom"); }
		return retval;

	}
	// $ANTLR end "expression_atom"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_functioncall_or_column() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_functioncall_or_column() {}

	// $ANTLR start "functioncall_or_column"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:422:1: functioncall_or_column : ( TOKEN ( WS )? '(' ( WS )? ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )? ')' -> ^( T_FUNCTIONCALL TOKEN ( expression )* ) | COUNT ( WS )? '(' ( WS )? expression ( WS )? ')' -> ^( T_FUNCTIONCALL T_COUNT expression ) | COUNT ( WS )? '(' ( WS )? DISTINCT WS expression ( WS )? ')' -> ^( T_FUNCTIONCALL T_DISTINCTCOUNT expression ) | COUNT ( WS )? '(' ( WS )? all_columns ( WS )? ')' -> ^( T_FUNCTIONCALL T_COUNT all_columns ) | COUNT ( WS )? '(' ( WS )? DISTINCT WS all_columns ( WS )? ')' -> ^( T_FUNCTIONCALL T_DISTINCTCOUNT all_columns ) | ( table_alias ( WS )? '.' ( WS )? )? column_name -> ^( T_COLUMN column_name ( table_alias )? ) );
	[GrammarRule("functioncall_or_column")]
	private AstParserRuleReturnScope<object, IToken> functioncall_or_column()
	{
		EnterRule_functioncall_or_column();
		EnterRule("functioncall_or_column", 56);
		TraceIn("functioncall_or_column", 56);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN307 = default(IToken);
	    IToken WS308 = default(IToken);
	    IToken char_literal309 = default(IToken);
	    IToken WS310 = default(IToken);
	    IToken WS312 = default(IToken);
	    IToken char_literal313 = default(IToken);
	    IToken WS314 = default(IToken);
	    IToken WS316 = default(IToken);
	    IToken char_literal317 = default(IToken);
	    IToken COUNT318 = default(IToken);
	    IToken WS319 = default(IToken);
	    IToken char_literal320 = default(IToken);
	    IToken WS321 = default(IToken);
	    IToken WS323 = default(IToken);
	    IToken char_literal324 = default(IToken);
	    IToken COUNT325 = default(IToken);
	    IToken WS326 = default(IToken);
	    IToken char_literal327 = default(IToken);
	    IToken WS328 = default(IToken);
	    IToken DISTINCT329 = default(IToken);
	    IToken WS330 = default(IToken);
	    IToken WS332 = default(IToken);
	    IToken char_literal333 = default(IToken);
	    IToken COUNT334 = default(IToken);
	    IToken WS335 = default(IToken);
	    IToken char_literal336 = default(IToken);
	    IToken WS337 = default(IToken);
	    IToken WS339 = default(IToken);
	    IToken char_literal340 = default(IToken);
	    IToken COUNT341 = default(IToken);
	    IToken WS342 = default(IToken);
	    IToken char_literal343 = default(IToken);
	    IToken WS344 = default(IToken);
	    IToken DISTINCT345 = default(IToken);
	    IToken WS346 = default(IToken);
	    IToken WS348 = default(IToken);
	    IToken char_literal349 = default(IToken);
	    IToken WS351 = default(IToken);
	    IToken char_literal352 = default(IToken);
	    IToken WS353 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression311 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression315 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression322 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression331 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> all_columns338 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> all_columns347 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> table_alias350 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> column_name354 = default(AstParserRuleReturnScope<object, IToken>);

	    object TOKEN307_tree = default(object);
	    object WS308_tree = default(object);
	    object char_literal309_tree = default(object);
	    object WS310_tree = default(object);
	    object WS312_tree = default(object);
	    object char_literal313_tree = default(object);
	    object WS314_tree = default(object);
	    object WS316_tree = default(object);
	    object char_literal317_tree = default(object);
	    object COUNT318_tree = default(object);
	    object WS319_tree = default(object);
	    object char_literal320_tree = default(object);
	    object WS321_tree = default(object);
	    object WS323_tree = default(object);
	    object char_literal324_tree = default(object);
	    object COUNT325_tree = default(object);
	    object WS326_tree = default(object);
	    object char_literal327_tree = default(object);
	    object WS328_tree = default(object);
	    object DISTINCT329_tree = default(object);
	    object WS330_tree = default(object);
	    object WS332_tree = default(object);
	    object char_literal333_tree = default(object);
	    object COUNT334_tree = default(object);
	    object WS335_tree = default(object);
	    object char_literal336_tree = default(object);
	    object WS337_tree = default(object);
	    object WS339_tree = default(object);
	    object char_literal340_tree = default(object);
	    object COUNT341_tree = default(object);
	    object WS342_tree = default(object);
	    object char_literal343_tree = default(object);
	    object WS344_tree = default(object);
	    object DISTINCT345_tree = default(object);
	    object WS346_tree = default(object);
	    object WS348_tree = default(object);
	    object char_literal349_tree = default(object);
	    object WS351_tree = default(object);
	    object char_literal352_tree = default(object);
	    object WS353_tree = default(object);
	    RewriteRuleITokenStream stream_170=new RewriteRuleITokenStream(adaptor,"token 170");
	    RewriteRuleITokenStream stream_COUNT=new RewriteRuleITokenStream(adaptor,"token COUNT");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_175=new RewriteRuleITokenStream(adaptor,"token 175");
	    RewriteRuleITokenStream stream_173=new RewriteRuleITokenStream(adaptor,"token 173");
	    RewriteRuleITokenStream stream_169=new RewriteRuleITokenStream(adaptor,"token 169");
	    RewriteRuleITokenStream stream_DISTINCT=new RewriteRuleITokenStream(adaptor,"token DISTINCT");
	    RewriteRuleITokenStream stream_TOKEN=new RewriteRuleITokenStream(adaptor,"token TOKEN");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_table_alias=new RewriteRuleSubtreeStream(adaptor,"rule table_alias");
	    RewriteRuleSubtreeStream stream_all_columns=new RewriteRuleSubtreeStream(adaptor,"rule all_columns");
	    RewriteRuleSubtreeStream stream_column_name=new RewriteRuleSubtreeStream(adaptor,"rule column_name");
		try { DebugEnterRule(GrammarFileName, "functioncall_or_column");
		DebugLocation(422, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:423:2: ( TOKEN ( WS )? '(' ( WS )? ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )? ')' -> ^( T_FUNCTIONCALL TOKEN ( expression )* ) | COUNT ( WS )? '(' ( WS )? expression ( WS )? ')' -> ^( T_FUNCTIONCALL T_COUNT expression ) | COUNT ( WS )? '(' ( WS )? DISTINCT WS expression ( WS )? ')' -> ^( T_FUNCTIONCALL T_DISTINCTCOUNT expression ) | COUNT ( WS )? '(' ( WS )? all_columns ( WS )? ')' -> ^( T_FUNCTIONCALL T_COUNT all_columns ) | COUNT ( WS )? '(' ( WS )? DISTINCT WS all_columns ( WS )? ')' -> ^( T_FUNCTIONCALL T_DISTINCTCOUNT all_columns ) | ( table_alias ( WS )? '.' ( WS )? )? column_name -> ^( T_COLUMN column_name ( table_alias )? ) )
			int alt125=6;
			try { DebugEnterDecision(125, decisionCanBacktrack[125]);
			switch (input.LA(1))
			{
			case TOKEN:
				{
				alt125 = 1;
				}
				break;
			case COUNT:
				{
				int LA125_2 = input.LA(2);

				if ((LA125_2==WS))
				{
					int LA125_4 = input.LA(3);

					if ((LA125_4==169))
					{
						switch (input.LA(4))
						{
						case WS:
							{
							switch (input.LA(5))
							{
							case CASE:
							case CAST:
							case CONVERT:
							case COUNT:
							case DATEADD:
							case DATEDIFF:
							case DATEPART:
							case EXISTS:
							case NOT:
							case NUMBER:
							case STRING:
							case SYSTEMVAR:
							case TOKEN:
							case VARIABLE:
							case 169:
							case 172:
							case 174:
							case 188:
								{
								alt125 = 2;
								}
								break;
							case SIMPLE_FILE:
								{
								switch (input.LA(6))
								{
								case WS:
									{
									int LA125_11 = input.LA(7);

									if ((LA125_11==175))
									{
										switch (input.LA(8))
										{
										case WS:
											{
											int LA125_14 = input.LA(9);

											if ((LA125_14==SIMPLE_FILE))
											{
												alt125 = 2;
											}
											else if ((LA125_14==171))
											{
												alt125 = 4;
											}
											else
											{
												if (state.backtracking>0) {state.failed=true; return retval;}
												NoViableAltException nvae = new NoViableAltException("", 125, 14, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
											}
											break;
										case SIMPLE_FILE:
											{
											alt125 = 2;
											}
											break;
										case 171:
											{
											alt125 = 4;
											}
											break;
										default:
											{
												if (state.backtracking>0) {state.failed=true; return retval;}
												NoViableAltException nvae = new NoViableAltException("", 125, 12, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
										}

									}
									else if ((LA125_11==AND||LA125_11==BETWEEN||LA125_11==IN||LA125_11==LIKE||LA125_11==MATCH||LA125_11==NOT||LA125_11==OR||(LA125_11>=164 && LA125_11<=168)||(LA125_11>=170 && LA125_11<=172)||LA125_11==174||LA125_11==176||(LA125_11>=178 && LA125_11<=183)||(LA125_11>=186 && LA125_11<=187)))
									{
										alt125 = 2;
									}
									else
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 125, 11, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
									}
									break;
								case 175:
									{
									switch (input.LA(7))
									{
									case WS:
										{
										int LA125_14 = input.LA(8);

										if ((LA125_14==SIMPLE_FILE))
										{
											alt125 = 2;
										}
										else if ((LA125_14==171))
										{
											alt125 = 4;
										}
										else
										{
											if (state.backtracking>0) {state.failed=true; return retval;}
											NoViableAltException nvae = new NoViableAltException("", 125, 14, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
										}
										break;
									case SIMPLE_FILE:
										{
										alt125 = 2;
										}
										break;
									case 171:
										{
										alt125 = 4;
										}
										break;
									default:
										{
											if (state.backtracking>0) {state.failed=true; return retval;}
											NoViableAltException nvae = new NoViableAltException("", 125, 12, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}

									}
									break;
								case LIKE:
								case MATCH:
								case NOT:
								case 164:
								case 165:
								case 166:
								case 167:
								case 168:
								case 170:
								case 171:
								case 172:
								case 174:
								case 176:
								case 178:
								case 179:
								case 180:
								case 181:
								case 182:
								case 183:
								case 186:
								case 187:
									{
									alt125 = 2;
									}
									break;
								default:
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 125, 8, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

								}
								break;
							case DISTINCT:
								{
								int LA125_9 = input.LA(6);

								if ((LA125_9==WS))
								{
									switch (input.LA(7))
									{
									case CASE:
									case CAST:
									case CONVERT:
									case COUNT:
									case DATEADD:
									case DATEDIFF:
									case DATEPART:
									case EXISTS:
									case NOT:
									case NUMBER:
									case STRING:
									case SYSTEMVAR:
									case TOKEN:
									case VARIABLE:
									case 169:
									case 172:
									case 174:
									case 188:
										{
										alt125 = 3;
										}
										break;
									case SIMPLE_FILE:
										{
										switch (input.LA(8))
										{
										case WS:
											{
											int LA125_18 = input.LA(9);

											if ((LA125_18==175))
											{
												switch (input.LA(10))
												{
												case WS:
													{
													int LA125_20 = input.LA(11);

													if ((LA125_20==SIMPLE_FILE))
													{
														alt125 = 3;
													}
													else if ((LA125_20==171))
													{
														alt125 = 5;
													}
													else
													{
														if (state.backtracking>0) {state.failed=true; return retval;}
														NoViableAltException nvae = new NoViableAltException("", 125, 20, input);
														DebugRecognitionException(nvae);
														throw nvae;
													}
													}
													break;
												case SIMPLE_FILE:
													{
													alt125 = 3;
													}
													break;
												case 171:
													{
													alt125 = 5;
													}
													break;
												default:
													{
														if (state.backtracking>0) {state.failed=true; return retval;}
														NoViableAltException nvae = new NoViableAltException("", 125, 19, input);
														DebugRecognitionException(nvae);
														throw nvae;
													}
												}

											}
											else if ((LA125_18==AND||LA125_18==BETWEEN||LA125_18==IN||LA125_18==LIKE||LA125_18==MATCH||LA125_18==NOT||LA125_18==OR||(LA125_18>=164 && LA125_18<=168)||(LA125_18>=170 && LA125_18<=172)||LA125_18==174||LA125_18==176||(LA125_18>=178 && LA125_18<=183)||(LA125_18>=186 && LA125_18<=187)))
											{
												alt125 = 3;
											}
											else
											{
												if (state.backtracking>0) {state.failed=true; return retval;}
												NoViableAltException nvae = new NoViableAltException("", 125, 18, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
											}
											break;
										case 175:
											{
											switch (input.LA(9))
											{
											case WS:
												{
												int LA125_20 = input.LA(10);

												if ((LA125_20==SIMPLE_FILE))
												{
													alt125 = 3;
												}
												else if ((LA125_20==171))
												{
													alt125 = 5;
												}
												else
												{
													if (state.backtracking>0) {state.failed=true; return retval;}
													NoViableAltException nvae = new NoViableAltException("", 125, 20, input);
													DebugRecognitionException(nvae);
													throw nvae;
												}
												}
												break;
											case SIMPLE_FILE:
												{
												alt125 = 3;
												}
												break;
											case 171:
												{
												alt125 = 5;
												}
												break;
											default:
												{
													if (state.backtracking>0) {state.failed=true; return retval;}
													NoViableAltException nvae = new NoViableAltException("", 125, 19, input);
													DebugRecognitionException(nvae);
													throw nvae;
												}
											}

											}
											break;
										case LIKE:
										case MATCH:
										case NOT:
										case 164:
										case 165:
										case 166:
										case 167:
										case 168:
										case 170:
										case 171:
										case 172:
										case 174:
										case 176:
										case 178:
										case 179:
										case 180:
										case 181:
										case 182:
										case 183:
										case 186:
										case 187:
											{
											alt125 = 3;
											}
											break;
										default:
											{
												if (state.backtracking>0) {state.failed=true; return retval;}
												NoViableAltException nvae = new NoViableAltException("", 125, 16, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
										}

										}
										break;
									case 171:
										{
										alt125 = 5;
										}
										break;
									default:
										{
											if (state.backtracking>0) {state.failed=true; return retval;}
											NoViableAltException nvae = new NoViableAltException("", 125, 13, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}

								}
								else
								{
									if (state.backtracking>0) {state.failed=true; return retval;}
									NoViableAltException nvae = new NoViableAltException("", 125, 9, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
								}
								break;
							case 171:
								{
								alt125 = 4;
								}
								break;
							default:
								{
									if (state.backtracking>0) {state.failed=true; return retval;}
									NoViableAltException nvae = new NoViableAltException("", 125, 6, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}

							}
							break;
						case CASE:
						case CAST:
						case CONVERT:
						case COUNT:
						case DATEADD:
						case DATEDIFF:
						case DATEPART:
						case EXISTS:
						case NOT:
						case NUMBER:
						case STRING:
						case SYSTEMVAR:
						case TOKEN:
						case VARIABLE:
						case 169:
						case 172:
						case 174:
						case 188:
							{
							alt125 = 2;
							}
							break;
						case SIMPLE_FILE:
							{
							switch (input.LA(5))
							{
							case WS:
								{
								int LA125_11 = input.LA(6);

								if ((LA125_11==175))
								{
									switch (input.LA(7))
									{
									case WS:
										{
										int LA125_14 = input.LA(8);

										if ((LA125_14==SIMPLE_FILE))
										{
											alt125 = 2;
										}
										else if ((LA125_14==171))
										{
											alt125 = 4;
										}
										else
										{
											if (state.backtracking>0) {state.failed=true; return retval;}
											NoViableAltException nvae = new NoViableAltException("", 125, 14, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
										}
										break;
									case SIMPLE_FILE:
										{
										alt125 = 2;
										}
										break;
									case 171:
										{
										alt125 = 4;
										}
										break;
									default:
										{
											if (state.backtracking>0) {state.failed=true; return retval;}
											NoViableAltException nvae = new NoViableAltException("", 125, 12, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}

								}
								else if ((LA125_11==AND||LA125_11==BETWEEN||LA125_11==IN||LA125_11==LIKE||LA125_11==MATCH||LA125_11==NOT||LA125_11==OR||(LA125_11>=164 && LA125_11<=168)||(LA125_11>=170 && LA125_11<=172)||LA125_11==174||LA125_11==176||(LA125_11>=178 && LA125_11<=183)||(LA125_11>=186 && LA125_11<=187)))
								{
									alt125 = 2;
								}
								else
								{
									if (state.backtracking>0) {state.failed=true; return retval;}
									NoViableAltException nvae = new NoViableAltException("", 125, 11, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
								}
								break;
							case 175:
								{
								switch (input.LA(6))
								{
								case WS:
									{
									int LA125_14 = input.LA(7);

									if ((LA125_14==SIMPLE_FILE))
									{
										alt125 = 2;
									}
									else if ((LA125_14==171))
									{
										alt125 = 4;
									}
									else
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 125, 14, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
									}
									break;
								case SIMPLE_FILE:
									{
									alt125 = 2;
									}
									break;
								case 171:
									{
									alt125 = 4;
									}
									break;
								default:
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 125, 12, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

								}
								break;
							case LIKE:
							case MATCH:
							case NOT:
							case 164:
							case 165:
							case 166:
							case 167:
							case 168:
							case 170:
							case 171:
							case 172:
							case 174:
							case 176:
							case 178:
							case 179:
							case 180:
							case 181:
							case 182:
							case 183:
							case 186:
							case 187:
								{
								alt125 = 2;
								}
								break;
							default:
								{
									if (state.backtracking>0) {state.failed=true; return retval;}
									NoViableAltException nvae = new NoViableAltException("", 125, 8, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}

							}
							break;
						case DISTINCT:
							{
							int LA125_9 = input.LA(5);

							if ((LA125_9==WS))
							{
								switch (input.LA(6))
								{
								case CASE:
								case CAST:
								case CONVERT:
								case COUNT:
								case DATEADD:
								case DATEDIFF:
								case DATEPART:
								case EXISTS:
								case NOT:
								case NUMBER:
								case STRING:
								case SYSTEMVAR:
								case TOKEN:
								case VARIABLE:
								case 169:
								case 172:
								case 174:
								case 188:
									{
									alt125 = 3;
									}
									break;
								case SIMPLE_FILE:
									{
									switch (input.LA(7))
									{
									case WS:
										{
										int LA125_18 = input.LA(8);

										if ((LA125_18==175))
										{
											switch (input.LA(9))
											{
											case WS:
												{
												int LA125_20 = input.LA(10);

												if ((LA125_20==SIMPLE_FILE))
												{
													alt125 = 3;
												}
												else if ((LA125_20==171))
												{
													alt125 = 5;
												}
												else
												{
													if (state.backtracking>0) {state.failed=true; return retval;}
													NoViableAltException nvae = new NoViableAltException("", 125, 20, input);
													DebugRecognitionException(nvae);
													throw nvae;
												}
												}
												break;
											case SIMPLE_FILE:
												{
												alt125 = 3;
												}
												break;
											case 171:
												{
												alt125 = 5;
												}
												break;
											default:
												{
													if (state.backtracking>0) {state.failed=true; return retval;}
													NoViableAltException nvae = new NoViableAltException("", 125, 19, input);
													DebugRecognitionException(nvae);
													throw nvae;
												}
											}

										}
										else if ((LA125_18==AND||LA125_18==BETWEEN||LA125_18==IN||LA125_18==LIKE||LA125_18==MATCH||LA125_18==NOT||LA125_18==OR||(LA125_18>=164 && LA125_18<=168)||(LA125_18>=170 && LA125_18<=172)||LA125_18==174||LA125_18==176||(LA125_18>=178 && LA125_18<=183)||(LA125_18>=186 && LA125_18<=187)))
										{
											alt125 = 3;
										}
										else
										{
											if (state.backtracking>0) {state.failed=true; return retval;}
											NoViableAltException nvae = new NoViableAltException("", 125, 18, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
										}
										break;
									case 175:
										{
										switch (input.LA(8))
										{
										case WS:
											{
											int LA125_20 = input.LA(9);

											if ((LA125_20==SIMPLE_FILE))
											{
												alt125 = 3;
											}
											else if ((LA125_20==171))
											{
												alt125 = 5;
											}
											else
											{
												if (state.backtracking>0) {state.failed=true; return retval;}
												NoViableAltException nvae = new NoViableAltException("", 125, 20, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
											}
											break;
										case SIMPLE_FILE:
											{
											alt125 = 3;
											}
											break;
										case 171:
											{
											alt125 = 5;
											}
											break;
										default:
											{
												if (state.backtracking>0) {state.failed=true; return retval;}
												NoViableAltException nvae = new NoViableAltException("", 125, 19, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
										}

										}
										break;
									case LIKE:
									case MATCH:
									case NOT:
									case 164:
									case 165:
									case 166:
									case 167:
									case 168:
									case 170:
									case 171:
									case 172:
									case 174:
									case 176:
									case 178:
									case 179:
									case 180:
									case 181:
									case 182:
									case 183:
									case 186:
									case 187:
										{
										alt125 = 3;
										}
										break;
									default:
										{
											if (state.backtracking>0) {state.failed=true; return retval;}
											NoViableAltException nvae = new NoViableAltException("", 125, 16, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}

									}
									break;
								case 171:
									{
									alt125 = 5;
									}
									break;
								default:
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 125, 13, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 125, 9, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case 171:
							{
							alt125 = 4;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 125, 5, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 125, 4, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA125_2==169))
				{
					switch (input.LA(3))
					{
					case WS:
						{
						switch (input.LA(4))
						{
						case CASE:
						case CAST:
						case CONVERT:
						case COUNT:
						case DATEADD:
						case DATEDIFF:
						case DATEPART:
						case EXISTS:
						case NOT:
						case NUMBER:
						case STRING:
						case SYSTEMVAR:
						case TOKEN:
						case VARIABLE:
						case 169:
						case 172:
						case 174:
						case 188:
							{
							alt125 = 2;
							}
							break;
						case SIMPLE_FILE:
							{
							switch (input.LA(5))
							{
							case WS:
								{
								int LA125_11 = input.LA(6);

								if ((LA125_11==175))
								{
									switch (input.LA(7))
									{
									case WS:
										{
										int LA125_14 = input.LA(8);

										if ((LA125_14==SIMPLE_FILE))
										{
											alt125 = 2;
										}
										else if ((LA125_14==171))
										{
											alt125 = 4;
										}
										else
										{
											if (state.backtracking>0) {state.failed=true; return retval;}
											NoViableAltException nvae = new NoViableAltException("", 125, 14, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
										}
										break;
									case SIMPLE_FILE:
										{
										alt125 = 2;
										}
										break;
									case 171:
										{
										alt125 = 4;
										}
										break;
									default:
										{
											if (state.backtracking>0) {state.failed=true; return retval;}
											NoViableAltException nvae = new NoViableAltException("", 125, 12, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}

								}
								else if ((LA125_11==AND||LA125_11==BETWEEN||LA125_11==IN||LA125_11==LIKE||LA125_11==MATCH||LA125_11==NOT||LA125_11==OR||(LA125_11>=164 && LA125_11<=168)||(LA125_11>=170 && LA125_11<=172)||LA125_11==174||LA125_11==176||(LA125_11>=178 && LA125_11<=183)||(LA125_11>=186 && LA125_11<=187)))
								{
									alt125 = 2;
								}
								else
								{
									if (state.backtracking>0) {state.failed=true; return retval;}
									NoViableAltException nvae = new NoViableAltException("", 125, 11, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
								}
								break;
							case 175:
								{
								switch (input.LA(6))
								{
								case WS:
									{
									int LA125_14 = input.LA(7);

									if ((LA125_14==SIMPLE_FILE))
									{
										alt125 = 2;
									}
									else if ((LA125_14==171))
									{
										alt125 = 4;
									}
									else
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 125, 14, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
									}
									break;
								case SIMPLE_FILE:
									{
									alt125 = 2;
									}
									break;
								case 171:
									{
									alt125 = 4;
									}
									break;
								default:
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 125, 12, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

								}
								break;
							case LIKE:
							case MATCH:
							case NOT:
							case 164:
							case 165:
							case 166:
							case 167:
							case 168:
							case 170:
							case 171:
							case 172:
							case 174:
							case 176:
							case 178:
							case 179:
							case 180:
							case 181:
							case 182:
							case 183:
							case 186:
							case 187:
								{
								alt125 = 2;
								}
								break;
							default:
								{
									if (state.backtracking>0) {state.failed=true; return retval;}
									NoViableAltException nvae = new NoViableAltException("", 125, 8, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}

							}
							break;
						case DISTINCT:
							{
							int LA125_9 = input.LA(5);

							if ((LA125_9==WS))
							{
								switch (input.LA(6))
								{
								case CASE:
								case CAST:
								case CONVERT:
								case COUNT:
								case DATEADD:
								case DATEDIFF:
								case DATEPART:
								case EXISTS:
								case NOT:
								case NUMBER:
								case STRING:
								case SYSTEMVAR:
								case TOKEN:
								case VARIABLE:
								case 169:
								case 172:
								case 174:
								case 188:
									{
									alt125 = 3;
									}
									break;
								case SIMPLE_FILE:
									{
									switch (input.LA(7))
									{
									case WS:
										{
										int LA125_18 = input.LA(8);

										if ((LA125_18==175))
										{
											switch (input.LA(9))
											{
											case WS:
												{
												int LA125_20 = input.LA(10);

												if ((LA125_20==SIMPLE_FILE))
												{
													alt125 = 3;
												}
												else if ((LA125_20==171))
												{
													alt125 = 5;
												}
												else
												{
													if (state.backtracking>0) {state.failed=true; return retval;}
													NoViableAltException nvae = new NoViableAltException("", 125, 20, input);
													DebugRecognitionException(nvae);
													throw nvae;
												}
												}
												break;
											case SIMPLE_FILE:
												{
												alt125 = 3;
												}
												break;
											case 171:
												{
												alt125 = 5;
												}
												break;
											default:
												{
													if (state.backtracking>0) {state.failed=true; return retval;}
													NoViableAltException nvae = new NoViableAltException("", 125, 19, input);
													DebugRecognitionException(nvae);
													throw nvae;
												}
											}

										}
										else if ((LA125_18==AND||LA125_18==BETWEEN||LA125_18==IN||LA125_18==LIKE||LA125_18==MATCH||LA125_18==NOT||LA125_18==OR||(LA125_18>=164 && LA125_18<=168)||(LA125_18>=170 && LA125_18<=172)||LA125_18==174||LA125_18==176||(LA125_18>=178 && LA125_18<=183)||(LA125_18>=186 && LA125_18<=187)))
										{
											alt125 = 3;
										}
										else
										{
											if (state.backtracking>0) {state.failed=true; return retval;}
											NoViableAltException nvae = new NoViableAltException("", 125, 18, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
										}
										break;
									case 175:
										{
										switch (input.LA(8))
										{
										case WS:
											{
											int LA125_20 = input.LA(9);

											if ((LA125_20==SIMPLE_FILE))
											{
												alt125 = 3;
											}
											else if ((LA125_20==171))
											{
												alt125 = 5;
											}
											else
											{
												if (state.backtracking>0) {state.failed=true; return retval;}
												NoViableAltException nvae = new NoViableAltException("", 125, 20, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
											}
											break;
										case SIMPLE_FILE:
											{
											alt125 = 3;
											}
											break;
										case 171:
											{
											alt125 = 5;
											}
											break;
										default:
											{
												if (state.backtracking>0) {state.failed=true; return retval;}
												NoViableAltException nvae = new NoViableAltException("", 125, 19, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
										}

										}
										break;
									case LIKE:
									case MATCH:
									case NOT:
									case 164:
									case 165:
									case 166:
									case 167:
									case 168:
									case 170:
									case 171:
									case 172:
									case 174:
									case 176:
									case 178:
									case 179:
									case 180:
									case 181:
									case 182:
									case 183:
									case 186:
									case 187:
										{
										alt125 = 3;
										}
										break;
									default:
										{
											if (state.backtracking>0) {state.failed=true; return retval;}
											NoViableAltException nvae = new NoViableAltException("", 125, 16, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}

									}
									break;
								case 171:
									{
									alt125 = 5;
									}
									break;
								default:
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 125, 13, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 125, 9, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case 171:
							{
							alt125 = 4;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 125, 6, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case CASE:
					case CAST:
					case CONVERT:
					case COUNT:
					case DATEADD:
					case DATEDIFF:
					case DATEPART:
					case EXISTS:
					case NOT:
					case NUMBER:
					case STRING:
					case SYSTEMVAR:
					case TOKEN:
					case VARIABLE:
					case 169:
					case 172:
					case 174:
					case 188:
						{
						alt125 = 2;
						}
						break;
					case SIMPLE_FILE:
						{
						switch (input.LA(4))
						{
						case WS:
							{
							int LA125_11 = input.LA(5);

							if ((LA125_11==175))
							{
								switch (input.LA(6))
								{
								case WS:
									{
									int LA125_14 = input.LA(7);

									if ((LA125_14==SIMPLE_FILE))
									{
										alt125 = 2;
									}
									else if ((LA125_14==171))
									{
										alt125 = 4;
									}
									else
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 125, 14, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
									}
									break;
								case SIMPLE_FILE:
									{
									alt125 = 2;
									}
									break;
								case 171:
									{
									alt125 = 4;
									}
									break;
								default:
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 125, 12, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

							}
							else if ((LA125_11==AND||LA125_11==BETWEEN||LA125_11==IN||LA125_11==LIKE||LA125_11==MATCH||LA125_11==NOT||LA125_11==OR||(LA125_11>=164 && LA125_11<=168)||(LA125_11>=170 && LA125_11<=172)||LA125_11==174||LA125_11==176||(LA125_11>=178 && LA125_11<=183)||(LA125_11>=186 && LA125_11<=187)))
							{
								alt125 = 2;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 125, 11, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case 175:
							{
							switch (input.LA(5))
							{
							case WS:
								{
								int LA125_14 = input.LA(6);

								if ((LA125_14==SIMPLE_FILE))
								{
									alt125 = 2;
								}
								else if ((LA125_14==171))
								{
									alt125 = 4;
								}
								else
								{
									if (state.backtracking>0) {state.failed=true; return retval;}
									NoViableAltException nvae = new NoViableAltException("", 125, 14, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
								}
								break;
							case SIMPLE_FILE:
								{
								alt125 = 2;
								}
								break;
							case 171:
								{
								alt125 = 4;
								}
								break;
							default:
								{
									if (state.backtracking>0) {state.failed=true; return retval;}
									NoViableAltException nvae = new NoViableAltException("", 125, 12, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}

							}
							break;
						case LIKE:
						case MATCH:
						case NOT:
						case 164:
						case 165:
						case 166:
						case 167:
						case 168:
						case 170:
						case 171:
						case 172:
						case 174:
						case 176:
						case 178:
						case 179:
						case 180:
						case 181:
						case 182:
						case 183:
						case 186:
						case 187:
							{
							alt125 = 2;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 125, 8, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case DISTINCT:
						{
						int LA125_9 = input.LA(4);

						if ((LA125_9==WS))
						{
							switch (input.LA(5))
							{
							case CASE:
							case CAST:
							case CONVERT:
							case COUNT:
							case DATEADD:
							case DATEDIFF:
							case DATEPART:
							case EXISTS:
							case NOT:
							case NUMBER:
							case STRING:
							case SYSTEMVAR:
							case TOKEN:
							case VARIABLE:
							case 169:
							case 172:
							case 174:
							case 188:
								{
								alt125 = 3;
								}
								break;
							case SIMPLE_FILE:
								{
								switch (input.LA(6))
								{
								case WS:
									{
									int LA125_18 = input.LA(7);

									if ((LA125_18==175))
									{
										switch (input.LA(8))
										{
										case WS:
											{
											int LA125_20 = input.LA(9);

											if ((LA125_20==SIMPLE_FILE))
											{
												alt125 = 3;
											}
											else if ((LA125_20==171))
											{
												alt125 = 5;
											}
											else
											{
												if (state.backtracking>0) {state.failed=true; return retval;}
												NoViableAltException nvae = new NoViableAltException("", 125, 20, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
											}
											break;
										case SIMPLE_FILE:
											{
											alt125 = 3;
											}
											break;
										case 171:
											{
											alt125 = 5;
											}
											break;
										default:
											{
												if (state.backtracking>0) {state.failed=true; return retval;}
												NoViableAltException nvae = new NoViableAltException("", 125, 19, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
										}

									}
									else if ((LA125_18==AND||LA125_18==BETWEEN||LA125_18==IN||LA125_18==LIKE||LA125_18==MATCH||LA125_18==NOT||LA125_18==OR||(LA125_18>=164 && LA125_18<=168)||(LA125_18>=170 && LA125_18<=172)||LA125_18==174||LA125_18==176||(LA125_18>=178 && LA125_18<=183)||(LA125_18>=186 && LA125_18<=187)))
									{
										alt125 = 3;
									}
									else
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 125, 18, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
									}
									break;
								case 175:
									{
									switch (input.LA(7))
									{
									case WS:
										{
										int LA125_20 = input.LA(8);

										if ((LA125_20==SIMPLE_FILE))
										{
											alt125 = 3;
										}
										else if ((LA125_20==171))
										{
											alt125 = 5;
										}
										else
										{
											if (state.backtracking>0) {state.failed=true; return retval;}
											NoViableAltException nvae = new NoViableAltException("", 125, 20, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
										}
										break;
									case SIMPLE_FILE:
										{
										alt125 = 3;
										}
										break;
									case 171:
										{
										alt125 = 5;
										}
										break;
									default:
										{
											if (state.backtracking>0) {state.failed=true; return retval;}
											NoViableAltException nvae = new NoViableAltException("", 125, 19, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}

									}
									break;
								case LIKE:
								case MATCH:
								case NOT:
								case 164:
								case 165:
								case 166:
								case 167:
								case 168:
								case 170:
								case 171:
								case 172:
								case 174:
								case 176:
								case 178:
								case 179:
								case 180:
								case 181:
								case 182:
								case 183:
								case 186:
								case 187:
									{
									alt125 = 3;
									}
									break;
								default:
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 125, 16, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

								}
								break;
							case 171:
								{
								alt125 = 5;
								}
								break;
							default:
								{
									if (state.backtracking>0) {state.failed=true; return retval;}
									NoViableAltException nvae = new NoViableAltException("", 125, 13, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}

						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 125, 9, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case 171:
						{
						alt125 = 4;
						}
						break;
					default:
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 125, 5, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 125, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SIMPLE_FILE:
				{
				alt125 = 6;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 125, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(125); }
			switch (alt125)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:423:4: TOKEN ( WS )? '(' ( WS )? ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )? ')'
				{
				DebugLocation(423, 4);
				TOKEN307=(IToken)Match(input,TOKEN,Follow._TOKEN_in_functioncall_or_column2660); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TOKEN.Add(TOKEN307);

				DebugLocation(423, 10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:423:10: ( WS )?
				int alt103=2;
				try { DebugEnterSubRule(103);
				try { DebugEnterDecision(103, decisionCanBacktrack[103]);
				int LA103_0 = input.LA(1);

				if ((LA103_0==WS))
				{
					alt103 = 1;
				}
				} finally { DebugExitDecision(103); }
				switch (alt103)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:423:10: WS
					{
					DebugLocation(423, 10);
					WS308=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2662); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS308);


					}
					break;

				}
				} finally { DebugExitSubRule(103); }

				DebugLocation(423, 14);
				char_literal309=(IToken)Match(input,169,Follow._169_in_functioncall_or_column2665); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_169.Add(char_literal309);

				DebugLocation(423, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:423:18: ( WS )?
				int alt104=2;
				try { DebugEnterSubRule(104);
				try { DebugEnterDecision(104, decisionCanBacktrack[104]);
				int LA104_0 = input.LA(1);

				if ((LA104_0==WS))
				{
					alt104 = 1;
				}
				} finally { DebugExitDecision(104); }
				switch (alt104)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:423:18: WS
					{
					DebugLocation(423, 18);
					WS310=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2667); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS310);


					}
					break;

				}
				} finally { DebugExitSubRule(104); }

				DebugLocation(423, 22);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:423:22: ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )?
				int alt109=2;
				try { DebugEnterSubRule(109);
				try { DebugEnterDecision(109, decisionCanBacktrack[109]);
				int LA109_0 = input.LA(1);

				if (((LA109_0>=CASE && LA109_0<=CAST)||(LA109_0>=CONVERT && LA109_0<=COUNT)||(LA109_0>=DATEADD && LA109_0<=DATEPART)||LA109_0==EXISTS||(LA109_0>=NOT && LA109_0<=NUMBER)||LA109_0==SIMPLE_FILE||(LA109_0>=STRING && LA109_0<=SYSTEMVAR)||LA109_0==TOKEN||LA109_0==VARIABLE||LA109_0==169||LA109_0==172||LA109_0==174||LA109_0==188))
				{
					alt109 = 1;
				}
				} finally { DebugExitDecision(109); }
				switch (alt109)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:423:23: expression ( WS )? ( ',' ( WS )? expression ( WS )? )*
					{
					DebugLocation(423, 23);
					PushFollow(Follow._expression_in_functioncall_or_column2671);
					expression311=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expression.Add(expression311.Tree);
					DebugLocation(423, 34);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:423:34: ( WS )?
					int alt105=2;
					try { DebugEnterSubRule(105);
					try { DebugEnterDecision(105, decisionCanBacktrack[105]);
					int LA105_0 = input.LA(1);

					if ((LA105_0==WS))
					{
						alt105 = 1;
					}
					} finally { DebugExitDecision(105); }
					switch (alt105)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:423:34: WS
						{
						DebugLocation(423, 34);
						WS312=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2673); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS312);


						}
						break;

					}
					} finally { DebugExitSubRule(105); }

					DebugLocation(423, 38);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:423:38: ( ',' ( WS )? expression ( WS )? )*
					try { DebugEnterSubRule(108);
					while (true)
					{
						int alt108=2;
						try { DebugEnterDecision(108, decisionCanBacktrack[108]);
						int LA108_0 = input.LA(1);

						if ((LA108_0==173))
						{
							alt108 = 1;
						}


						} finally { DebugExitDecision(108); }
						switch ( alt108 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:423:39: ',' ( WS )? expression ( WS )?
							{
							DebugLocation(423, 39);
							char_literal313=(IToken)Match(input,173,Follow._173_in_functioncall_or_column2677); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_173.Add(char_literal313);

							DebugLocation(423, 43);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:423:43: ( WS )?
							int alt106=2;
							try { DebugEnterSubRule(106);
							try { DebugEnterDecision(106, decisionCanBacktrack[106]);
							int LA106_0 = input.LA(1);

							if ((LA106_0==WS))
							{
								alt106 = 1;
							}
							} finally { DebugExitDecision(106); }
							switch (alt106)
							{
							case 1:
								DebugEnterAlt(1);
								// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:423:43: WS
								{
								DebugLocation(423, 43);
								WS314=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2679); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_WS.Add(WS314);


								}
								break;

							}
							} finally { DebugExitSubRule(106); }

							DebugLocation(423, 47);
							PushFollow(Follow._expression_in_functioncall_or_column2682);
							expression315=expression();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_expression.Add(expression315.Tree);
							DebugLocation(423, 58);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:423:58: ( WS )?
							int alt107=2;
							try { DebugEnterSubRule(107);
							try { DebugEnterDecision(107, decisionCanBacktrack[107]);
							int LA107_0 = input.LA(1);

							if ((LA107_0==WS))
							{
								alt107 = 1;
							}
							} finally { DebugExitDecision(107); }
							switch (alt107)
							{
							case 1:
								DebugEnterAlt(1);
								// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:423:58: WS
								{
								DebugLocation(423, 58);
								WS316=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2684); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_WS.Add(WS316);


								}
								break;

							}
							} finally { DebugExitSubRule(107); }


							}
							break;

						default:
							goto loop108;
						}
					}

					loop108:
						;

					} finally { DebugExitSubRule(108); }


					}
					break;

				}
				} finally { DebugExitSubRule(109); }

				DebugLocation(423, 66);
				char_literal317=(IToken)Match(input,170,Follow._170_in_functioncall_or_column2691); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_170.Add(char_literal317);



				{
				// AST REWRITE
				// elements: TOKEN, expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 423:70: -> ^( T_FUNCTIONCALL TOKEN ( expression )* )
				{
					DebugLocation(423, 73);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:423:73: ^( T_FUNCTIONCALL TOKEN ( expression )* )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(423, 75);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(423, 90);
					adaptor.AddChild(root_1, stream_TOKEN.NextNode());
					DebugLocation(423, 96);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:423:96: ( expression )*
					while ( stream_expression.HasNext )
					{
						DebugLocation(423, 96);
						adaptor.AddChild(root_1, stream_expression.NextTree());

					}
					stream_expression.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:424:4: COUNT ( WS )? '(' ( WS )? expression ( WS )? ')'
				{
				DebugLocation(424, 4);
				COUNT318=(IToken)Match(input,COUNT,Follow._COUNT_in_functioncall_or_column2707); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COUNT.Add(COUNT318);

				DebugLocation(424, 10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:424:10: ( WS )?
				int alt110=2;
				try { DebugEnterSubRule(110);
				try { DebugEnterDecision(110, decisionCanBacktrack[110]);
				int LA110_0 = input.LA(1);

				if ((LA110_0==WS))
				{
					alt110 = 1;
				}
				} finally { DebugExitDecision(110); }
				switch (alt110)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:424:10: WS
					{
					DebugLocation(424, 10);
					WS319=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2709); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS319);


					}
					break;

				}
				} finally { DebugExitSubRule(110); }

				DebugLocation(424, 14);
				char_literal320=(IToken)Match(input,169,Follow._169_in_functioncall_or_column2712); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_169.Add(char_literal320);

				DebugLocation(424, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:424:18: ( WS )?
				int alt111=2;
				try { DebugEnterSubRule(111);
				try { DebugEnterDecision(111, decisionCanBacktrack[111]);
				int LA111_0 = input.LA(1);

				if ((LA111_0==WS))
				{
					alt111 = 1;
				}
				} finally { DebugExitDecision(111); }
				switch (alt111)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:424:18: WS
					{
					DebugLocation(424, 18);
					WS321=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2714); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS321);


					}
					break;

				}
				} finally { DebugExitSubRule(111); }

				DebugLocation(424, 22);
				PushFollow(Follow._expression_in_functioncall_or_column2717);
				expression322=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression322.Tree);
				DebugLocation(424, 33);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:424:33: ( WS )?
				int alt112=2;
				try { DebugEnterSubRule(112);
				try { DebugEnterDecision(112, decisionCanBacktrack[112]);
				int LA112_0 = input.LA(1);

				if ((LA112_0==WS))
				{
					alt112 = 1;
				}
				} finally { DebugExitDecision(112); }
				switch (alt112)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:424:33: WS
					{
					DebugLocation(424, 33);
					WS323=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2719); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS323);


					}
					break;

				}
				} finally { DebugExitSubRule(112); }

				DebugLocation(424, 37);
				char_literal324=(IToken)Match(input,170,Follow._170_in_functioncall_or_column2722); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_170.Add(char_literal324);



				{
				// AST REWRITE
				// elements: expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 424:41: -> ^( T_FUNCTIONCALL T_COUNT expression )
				{
					DebugLocation(424, 44);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:424:44: ^( T_FUNCTIONCALL T_COUNT expression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(424, 46);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(424, 61);
					adaptor.AddChild(root_1, (object)adaptor.Create(T_COUNT, "T_COUNT"));
					DebugLocation(424, 69);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:425:4: COUNT ( WS )? '(' ( WS )? DISTINCT WS expression ( WS )? ')'
				{
				DebugLocation(425, 4);
				COUNT325=(IToken)Match(input,COUNT,Follow._COUNT_in_functioncall_or_column2737); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COUNT.Add(COUNT325);

				DebugLocation(425, 10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:425:10: ( WS )?
				int alt113=2;
				try { DebugEnterSubRule(113);
				try { DebugEnterDecision(113, decisionCanBacktrack[113]);
				int LA113_0 = input.LA(1);

				if ((LA113_0==WS))
				{
					alt113 = 1;
				}
				} finally { DebugExitDecision(113); }
				switch (alt113)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:425:10: WS
					{
					DebugLocation(425, 10);
					WS326=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2739); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS326);


					}
					break;

				}
				} finally { DebugExitSubRule(113); }

				DebugLocation(425, 14);
				char_literal327=(IToken)Match(input,169,Follow._169_in_functioncall_or_column2742); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_169.Add(char_literal327);

				DebugLocation(425, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:425:18: ( WS )?
				int alt114=2;
				try { DebugEnterSubRule(114);
				try { DebugEnterDecision(114, decisionCanBacktrack[114]);
				int LA114_0 = input.LA(1);

				if ((LA114_0==WS))
				{
					alt114 = 1;
				}
				} finally { DebugExitDecision(114); }
				switch (alt114)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:425:18: WS
					{
					DebugLocation(425, 18);
					WS328=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2744); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS328);


					}
					break;

				}
				} finally { DebugExitSubRule(114); }

				DebugLocation(425, 22);
				DISTINCT329=(IToken)Match(input,DISTINCT,Follow._DISTINCT_in_functioncall_or_column2747); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DISTINCT.Add(DISTINCT329);

				DebugLocation(425, 31);
				WS330=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2749); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS330);

				DebugLocation(425, 34);
				PushFollow(Follow._expression_in_functioncall_or_column2751);
				expression331=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression331.Tree);
				DebugLocation(425, 45);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:425:45: ( WS )?
				int alt115=2;
				try { DebugEnterSubRule(115);
				try { DebugEnterDecision(115, decisionCanBacktrack[115]);
				int LA115_0 = input.LA(1);

				if ((LA115_0==WS))
				{
					alt115 = 1;
				}
				} finally { DebugExitDecision(115); }
				switch (alt115)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:425:45: WS
					{
					DebugLocation(425, 45);
					WS332=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2753); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS332);


					}
					break;

				}
				} finally { DebugExitSubRule(115); }

				DebugLocation(425, 49);
				char_literal333=(IToken)Match(input,170,Follow._170_in_functioncall_or_column2756); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_170.Add(char_literal333);



				{
				// AST REWRITE
				// elements: expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 425:53: -> ^( T_FUNCTIONCALL T_DISTINCTCOUNT expression )
				{
					DebugLocation(425, 56);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:425:56: ^( T_FUNCTIONCALL T_DISTINCTCOUNT expression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(425, 58);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(425, 73);
					adaptor.AddChild(root_1, (object)adaptor.Create(T_DISTINCTCOUNT, "T_DISTINCTCOUNT"));
					DebugLocation(425, 89);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:426:4: COUNT ( WS )? '(' ( WS )? all_columns ( WS )? ')'
				{
				DebugLocation(426, 4);
				COUNT334=(IToken)Match(input,COUNT,Follow._COUNT_in_functioncall_or_column2771); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COUNT.Add(COUNT334);

				DebugLocation(426, 10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:426:10: ( WS )?
				int alt116=2;
				try { DebugEnterSubRule(116);
				try { DebugEnterDecision(116, decisionCanBacktrack[116]);
				int LA116_0 = input.LA(1);

				if ((LA116_0==WS))
				{
					alt116 = 1;
				}
				} finally { DebugExitDecision(116); }
				switch (alt116)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:426:10: WS
					{
					DebugLocation(426, 10);
					WS335=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2773); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS335);


					}
					break;

				}
				} finally { DebugExitSubRule(116); }

				DebugLocation(426, 14);
				char_literal336=(IToken)Match(input,169,Follow._169_in_functioncall_or_column2776); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_169.Add(char_literal336);

				DebugLocation(426, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:426:18: ( WS )?
				int alt117=2;
				try { DebugEnterSubRule(117);
				try { DebugEnterDecision(117, decisionCanBacktrack[117]);
				int LA117_0 = input.LA(1);

				if ((LA117_0==WS))
				{
					alt117 = 1;
				}
				} finally { DebugExitDecision(117); }
				switch (alt117)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:426:18: WS
					{
					DebugLocation(426, 18);
					WS337=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2778); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS337);


					}
					break;

				}
				} finally { DebugExitSubRule(117); }

				DebugLocation(426, 22);
				PushFollow(Follow._all_columns_in_functioncall_or_column2781);
				all_columns338=all_columns();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_all_columns.Add(all_columns338.Tree);
				DebugLocation(426, 34);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:426:34: ( WS )?
				int alt118=2;
				try { DebugEnterSubRule(118);
				try { DebugEnterDecision(118, decisionCanBacktrack[118]);
				int LA118_0 = input.LA(1);

				if ((LA118_0==WS))
				{
					alt118 = 1;
				}
				} finally { DebugExitDecision(118); }
				switch (alt118)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:426:34: WS
					{
					DebugLocation(426, 34);
					WS339=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2783); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS339);


					}
					break;

				}
				} finally { DebugExitSubRule(118); }

				DebugLocation(426, 38);
				char_literal340=(IToken)Match(input,170,Follow._170_in_functioncall_or_column2786); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_170.Add(char_literal340);



				{
				// AST REWRITE
				// elements: all_columns
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 426:42: -> ^( T_FUNCTIONCALL T_COUNT all_columns )
				{
					DebugLocation(426, 45);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:426:45: ^( T_FUNCTIONCALL T_COUNT all_columns )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(426, 47);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(426, 62);
					adaptor.AddChild(root_1, (object)adaptor.Create(T_COUNT, "T_COUNT"));
					DebugLocation(426, 70);
					adaptor.AddChild(root_1, stream_all_columns.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:427:4: COUNT ( WS )? '(' ( WS )? DISTINCT WS all_columns ( WS )? ')'
				{
				DebugLocation(427, 4);
				COUNT341=(IToken)Match(input,COUNT,Follow._COUNT_in_functioncall_or_column2801); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COUNT.Add(COUNT341);

				DebugLocation(427, 10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:427:10: ( WS )?
				int alt119=2;
				try { DebugEnterSubRule(119);
				try { DebugEnterDecision(119, decisionCanBacktrack[119]);
				int LA119_0 = input.LA(1);

				if ((LA119_0==WS))
				{
					alt119 = 1;
				}
				} finally { DebugExitDecision(119); }
				switch (alt119)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:427:10: WS
					{
					DebugLocation(427, 10);
					WS342=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2803); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS342);


					}
					break;

				}
				} finally { DebugExitSubRule(119); }

				DebugLocation(427, 14);
				char_literal343=(IToken)Match(input,169,Follow._169_in_functioncall_or_column2806); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_169.Add(char_literal343);

				DebugLocation(427, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:427:18: ( WS )?
				int alt120=2;
				try { DebugEnterSubRule(120);
				try { DebugEnterDecision(120, decisionCanBacktrack[120]);
				int LA120_0 = input.LA(1);

				if ((LA120_0==WS))
				{
					alt120 = 1;
				}
				} finally { DebugExitDecision(120); }
				switch (alt120)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:427:18: WS
					{
					DebugLocation(427, 18);
					WS344=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2808); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS344);


					}
					break;

				}
				} finally { DebugExitSubRule(120); }

				DebugLocation(427, 22);
				DISTINCT345=(IToken)Match(input,DISTINCT,Follow._DISTINCT_in_functioncall_or_column2811); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DISTINCT.Add(DISTINCT345);

				DebugLocation(427, 31);
				WS346=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2813); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS346);

				DebugLocation(427, 34);
				PushFollow(Follow._all_columns_in_functioncall_or_column2815);
				all_columns347=all_columns();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_all_columns.Add(all_columns347.Tree);
				DebugLocation(427, 46);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:427:46: ( WS )?
				int alt121=2;
				try { DebugEnterSubRule(121);
				try { DebugEnterDecision(121, decisionCanBacktrack[121]);
				int LA121_0 = input.LA(1);

				if ((LA121_0==WS))
				{
					alt121 = 1;
				}
				} finally { DebugExitDecision(121); }
				switch (alt121)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:427:46: WS
					{
					DebugLocation(427, 46);
					WS348=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2817); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS348);


					}
					break;

				}
				} finally { DebugExitSubRule(121); }

				DebugLocation(427, 50);
				char_literal349=(IToken)Match(input,170,Follow._170_in_functioncall_or_column2820); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_170.Add(char_literal349);



				{
				// AST REWRITE
				// elements: all_columns
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 427:54: -> ^( T_FUNCTIONCALL T_DISTINCTCOUNT all_columns )
				{
					DebugLocation(427, 57);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:427:57: ^( T_FUNCTIONCALL T_DISTINCTCOUNT all_columns )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(427, 59);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(427, 74);
					adaptor.AddChild(root_1, (object)adaptor.Create(T_DISTINCTCOUNT, "T_DISTINCTCOUNT"));
					DebugLocation(427, 90);
					adaptor.AddChild(root_1, stream_all_columns.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:429:4: ( table_alias ( WS )? '.' ( WS )? )? column_name
				{
				DebugLocation(429, 4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:429:4: ( table_alias ( WS )? '.' ( WS )? )?
				int alt124=2;
				try { DebugEnterSubRule(124);
				try { DebugEnterDecision(124, decisionCanBacktrack[124]);
				int LA124_0 = input.LA(1);

				if ((LA124_0==SIMPLE_FILE))
				{
					int LA124_1 = input.LA(2);

					if ((LA124_1==WS))
					{
						int LA124_2 = input.LA(3);

						if ((LA124_2==175))
						{
							alt124 = 1;
						}
					}
					else if ((LA124_1==175))
					{
						alt124 = 1;
					}
				}
				} finally { DebugExitDecision(124); }
				switch (alt124)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:429:5: table_alias ( WS )? '.' ( WS )?
					{
					DebugLocation(429, 5);
					PushFollow(Follow._table_alias_in_functioncall_or_column2838);
					table_alias350=table_alias();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_table_alias.Add(table_alias350.Tree);
					DebugLocation(429, 17);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:429:17: ( WS )?
					int alt122=2;
					try { DebugEnterSubRule(122);
					try { DebugEnterDecision(122, decisionCanBacktrack[122]);
					int LA122_0 = input.LA(1);

					if ((LA122_0==WS))
					{
						alt122 = 1;
					}
					} finally { DebugExitDecision(122); }
					switch (alt122)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:429:17: WS
						{
						DebugLocation(429, 17);
						WS351=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2840); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS351);


						}
						break;

					}
					} finally { DebugExitSubRule(122); }

					DebugLocation(429, 21);
					char_literal352=(IToken)Match(input,175,Follow._175_in_functioncall_or_column2843); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_175.Add(char_literal352);

					DebugLocation(429, 25);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:429:25: ( WS )?
					int alt123=2;
					try { DebugEnterSubRule(123);
					try { DebugEnterDecision(123, decisionCanBacktrack[123]);
					int LA123_0 = input.LA(1);

					if ((LA123_0==WS))
					{
						alt123 = 1;
					}
					} finally { DebugExitDecision(123); }
					switch (alt123)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:429:25: WS
						{
						DebugLocation(429, 25);
						WS353=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2845); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS353);


						}
						break;

					}
					} finally { DebugExitSubRule(123); }


					}
					break;

				}
				} finally { DebugExitSubRule(124); }

				DebugLocation(429, 31);
				PushFollow(Follow._column_name_in_functioncall_or_column2850);
				column_name354=column_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_column_name.Add(column_name354.Tree);


				{
				// AST REWRITE
				// elements: column_name, table_alias
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 429:43: -> ^( T_COLUMN column_name ( table_alias )? )
				{
					DebugLocation(429, 46);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:429:46: ^( T_COLUMN column_name ( table_alias )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(429, 48);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_COLUMN, "T_COLUMN"), root_1);

					DebugLocation(429, 57);
					adaptor.AddChild(root_1, stream_column_name.NextTree());
					DebugLocation(429, 69);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:429:69: ( table_alias )?
					if (stream_table_alias.HasNext)
					{
						DebugLocation(429, 69);
						adaptor.AddChild(root_1, stream_table_alias.NextTree());

					}
					stream_table_alias.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("functioncall_or_column", 56);
			LeaveRule("functioncall_or_column", 56);
			LeaveRule_functioncall_or_column();
	    }
	 	DebugLocation(430, 1);
		} finally { DebugExitRule(GrammarFileName, "functioncall_or_column"); }
		return retval;

	}
	// $ANTLR end "functioncall_or_column"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_column_name() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_column_name() {}

	// $ANTLR start "column_name"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:432:1: column_name : SIMPLE_FILE ;
	[GrammarRule("column_name")]
	private AstParserRuleReturnScope<object, IToken> column_name()
	{
		EnterRule_column_name();
		EnterRule("column_name", 57);
		TraceIn("column_name", 57);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken SIMPLE_FILE355 = default(IToken);

	    object SIMPLE_FILE355_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "column_name");
		DebugLocation(432, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:433:2: ( SIMPLE_FILE )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:433:4: SIMPLE_FILE
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(433, 4);
			SIMPLE_FILE355=(IToken)Match(input,SIMPLE_FILE,Follow._SIMPLE_FILE_in_column_name2873); if (state.failed) return retval;
			if (state.backtracking == 0) {
			SIMPLE_FILE355_tree = (object)adaptor.Create(SIMPLE_FILE355);
			adaptor.AddChild(root_0, SIMPLE_FILE355_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("column_name", 57);
			LeaveRule("column_name", 57);
			LeaveRule_column_name();
	    }
	 	DebugLocation(434, 1);
		} finally { DebugExitRule(GrammarFileName, "column_name"); }
		return retval;

	}
	// $ANTLR end "column_name"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_table_alias() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_table_alias() {}

	// $ANTLR start "table_alias"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:436:1: table_alias : SIMPLE_FILE -> ^( T_TABLE_ALIAS SIMPLE_FILE ) ;
	[GrammarRule("table_alias")]
	private AstParserRuleReturnScope<object, IToken> table_alias()
	{
		EnterRule_table_alias();
		EnterRule("table_alias", 58);
		TraceIn("table_alias", 58);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken SIMPLE_FILE356 = default(IToken);

	    object SIMPLE_FILE356_tree = default(object);
	    RewriteRuleITokenStream stream_SIMPLE_FILE=new RewriteRuleITokenStream(adaptor,"token SIMPLE_FILE");

		try { DebugEnterRule(GrammarFileName, "table_alias");
		DebugLocation(436, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:437:2: ( SIMPLE_FILE -> ^( T_TABLE_ALIAS SIMPLE_FILE ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:437:4: SIMPLE_FILE
			{
			DebugLocation(437, 4);
			SIMPLE_FILE356=(IToken)Match(input,SIMPLE_FILE,Follow._SIMPLE_FILE_in_table_alias2884); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_SIMPLE_FILE.Add(SIMPLE_FILE356);



			{
			// AST REWRITE
			// elements: SIMPLE_FILE
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 437:16: -> ^( T_TABLE_ALIAS SIMPLE_FILE )
			{
				DebugLocation(437, 19);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:437:19: ^( T_TABLE_ALIAS SIMPLE_FILE )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(437, 21);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_TABLE_ALIAS, "T_TABLE_ALIAS"), root_1);

				DebugLocation(437, 35);
				adaptor.AddChild(root_1, stream_SIMPLE_FILE.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("table_alias", 58);
			LeaveRule("table_alias", 58);
			LeaveRule_table_alias();
	    }
	 	DebugLocation(438, 1);
		} finally { DebugExitRule(GrammarFileName, "table_alias"); }
		return retval;

	}
	// $ANTLR end "table_alias"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_specialfunctioncall() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_specialfunctioncall() {}

	// $ANTLR start "specialfunctioncall"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:440:1: specialfunctioncall : ( CONVERT ( WS )? '(' ( WS )? TOKEN ( WS )? ',' ( WS )? expression ( WS )? ( ',' ( WS )? STRING ( WS )? )? ')' -> ^( T_CONVERT TOKEN expression ( STRING )? ) | CAST ( WS )? '(' ( WS )? expression WS AS WS datatype ( WS )? ')' -> ^( T_CONVERT TOKEN expression ) | DATEADD ( WS )? '(' ( WS )? datepart ( WS )? ',' ( WS )? expression ( WS )? ',' ( WS )? expression ( WS )? ')' -> ^( T_FUNCTIONCALL DATEADD datepart ( expression )+ ) | DATEDIFF ( WS )? '(' ( WS )? datepart ( WS )? ',' ( WS )? expression ( WS )? ',' ( WS )? expression ( WS )? ')' -> ^( T_FUNCTIONCALL DATEDIFF datepart ( expression )+ ) | DATEPART ( WS )? '(' ( WS )? datepart ( WS )? ',' ( WS )? expression ( WS )? ')' -> ^( T_FUNCTIONCALL DATEPART datepart expression ) );
	[GrammarRule("specialfunctioncall")]
	private AstParserRuleReturnScope<object, IToken> specialfunctioncall()
	{
		EnterRule_specialfunctioncall();
		EnterRule("specialfunctioncall", 59);
		TraceIn("specialfunctioncall", 59);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken CONVERT357 = default(IToken);
	    IToken WS358 = default(IToken);
	    IToken char_literal359 = default(IToken);
	    IToken WS360 = default(IToken);
	    IToken TOKEN361 = default(IToken);
	    IToken WS362 = default(IToken);
	    IToken char_literal363 = default(IToken);
	    IToken WS364 = default(IToken);
	    IToken WS366 = default(IToken);
	    IToken char_literal367 = default(IToken);
	    IToken WS368 = default(IToken);
	    IToken STRING369 = default(IToken);
	    IToken WS370 = default(IToken);
	    IToken char_literal371 = default(IToken);
	    IToken CAST372 = default(IToken);
	    IToken WS373 = default(IToken);
	    IToken char_literal374 = default(IToken);
	    IToken WS375 = default(IToken);
	    IToken WS377 = default(IToken);
	    IToken AS378 = default(IToken);
	    IToken WS379 = default(IToken);
	    IToken WS381 = default(IToken);
	    IToken char_literal382 = default(IToken);
	    IToken DATEADD383 = default(IToken);
	    IToken WS384 = default(IToken);
	    IToken char_literal385 = default(IToken);
	    IToken WS386 = default(IToken);
	    IToken WS388 = default(IToken);
	    IToken char_literal389 = default(IToken);
	    IToken WS390 = default(IToken);
	    IToken WS392 = default(IToken);
	    IToken char_literal393 = default(IToken);
	    IToken WS394 = default(IToken);
	    IToken WS396 = default(IToken);
	    IToken char_literal397 = default(IToken);
	    IToken DATEDIFF398 = default(IToken);
	    IToken WS399 = default(IToken);
	    IToken char_literal400 = default(IToken);
	    IToken WS401 = default(IToken);
	    IToken WS403 = default(IToken);
	    IToken char_literal404 = default(IToken);
	    IToken WS405 = default(IToken);
	    IToken WS407 = default(IToken);
	    IToken char_literal408 = default(IToken);
	    IToken WS409 = default(IToken);
	    IToken WS411 = default(IToken);
	    IToken char_literal412 = default(IToken);
	    IToken DATEPART413 = default(IToken);
	    IToken WS414 = default(IToken);
	    IToken char_literal415 = default(IToken);
	    IToken WS416 = default(IToken);
	    IToken WS418 = default(IToken);
	    IToken char_literal419 = default(IToken);
	    IToken WS420 = default(IToken);
	    IToken WS422 = default(IToken);
	    IToken char_literal423 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression365 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression376 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> datatype380 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> datepart387 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression391 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression395 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> datepart402 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression406 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression410 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> datepart417 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression421 = default(AstParserRuleReturnScope<object, IToken>);

	    object CONVERT357_tree = default(object);
	    object WS358_tree = default(object);
	    object char_literal359_tree = default(object);
	    object WS360_tree = default(object);
	    object TOKEN361_tree = default(object);
	    object WS362_tree = default(object);
	    object char_literal363_tree = default(object);
	    object WS364_tree = default(object);
	    object WS366_tree = default(object);
	    object char_literal367_tree = default(object);
	    object WS368_tree = default(object);
	    object STRING369_tree = default(object);
	    object WS370_tree = default(object);
	    object char_literal371_tree = default(object);
	    object CAST372_tree = default(object);
	    object WS373_tree = default(object);
	    object char_literal374_tree = default(object);
	    object WS375_tree = default(object);
	    object WS377_tree = default(object);
	    object AS378_tree = default(object);
	    object WS379_tree = default(object);
	    object WS381_tree = default(object);
	    object char_literal382_tree = default(object);
	    object DATEADD383_tree = default(object);
	    object WS384_tree = default(object);
	    object char_literal385_tree = default(object);
	    object WS386_tree = default(object);
	    object WS388_tree = default(object);
	    object char_literal389_tree = default(object);
	    object WS390_tree = default(object);
	    object WS392_tree = default(object);
	    object char_literal393_tree = default(object);
	    object WS394_tree = default(object);
	    object WS396_tree = default(object);
	    object char_literal397_tree = default(object);
	    object DATEDIFF398_tree = default(object);
	    object WS399_tree = default(object);
	    object char_literal400_tree = default(object);
	    object WS401_tree = default(object);
	    object WS403_tree = default(object);
	    object char_literal404_tree = default(object);
	    object WS405_tree = default(object);
	    object WS407_tree = default(object);
	    object char_literal408_tree = default(object);
	    object WS409_tree = default(object);
	    object WS411_tree = default(object);
	    object char_literal412_tree = default(object);
	    object DATEPART413_tree = default(object);
	    object WS414_tree = default(object);
	    object char_literal415_tree = default(object);
	    object WS416_tree = default(object);
	    object WS418_tree = default(object);
	    object char_literal419_tree = default(object);
	    object WS420_tree = default(object);
	    object WS422_tree = default(object);
	    object char_literal423_tree = default(object);
	    RewriteRuleITokenStream stream_CAST=new RewriteRuleITokenStream(adaptor,"token CAST");
	    RewriteRuleITokenStream stream_170=new RewriteRuleITokenStream(adaptor,"token 170");
	    RewriteRuleITokenStream stream_AS=new RewriteRuleITokenStream(adaptor,"token AS");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_DATEPART=new RewriteRuleITokenStream(adaptor,"token DATEPART");
	    RewriteRuleITokenStream stream_DATEADD=new RewriteRuleITokenStream(adaptor,"token DATEADD");
	    RewriteRuleITokenStream stream_173=new RewriteRuleITokenStream(adaptor,"token 173");
	    RewriteRuleITokenStream stream_CONVERT=new RewriteRuleITokenStream(adaptor,"token CONVERT");
	    RewriteRuleITokenStream stream_169=new RewriteRuleITokenStream(adaptor,"token 169");
	    RewriteRuleITokenStream stream_DATEDIFF=new RewriteRuleITokenStream(adaptor,"token DATEDIFF");
	    RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
	    RewriteRuleITokenStream stream_TOKEN=new RewriteRuleITokenStream(adaptor,"token TOKEN");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_datatype=new RewriteRuleSubtreeStream(adaptor,"rule datatype");
	    RewriteRuleSubtreeStream stream_datepart=new RewriteRuleSubtreeStream(adaptor,"rule datepart");
		try { DebugEnterRule(GrammarFileName, "specialfunctioncall");
		DebugLocation(440, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:441:2: ( CONVERT ( WS )? '(' ( WS )? TOKEN ( WS )? ',' ( WS )? expression ( WS )? ( ',' ( WS )? STRING ( WS )? )? ')' -> ^( T_CONVERT TOKEN expression ( STRING )? ) | CAST ( WS )? '(' ( WS )? expression WS AS WS datatype ( WS )? ')' -> ^( T_CONVERT TOKEN expression ) | DATEADD ( WS )? '(' ( WS )? datepart ( WS )? ',' ( WS )? expression ( WS )? ',' ( WS )? expression ( WS )? ')' -> ^( T_FUNCTIONCALL DATEADD datepart ( expression )+ ) | DATEDIFF ( WS )? '(' ( WS )? datepart ( WS )? ',' ( WS )? expression ( WS )? ',' ( WS )? expression ( WS )? ')' -> ^( T_FUNCTIONCALL DATEDIFF datepart ( expression )+ ) | DATEPART ( WS )? '(' ( WS )? datepart ( WS )? ',' ( WS )? expression ( WS )? ')' -> ^( T_FUNCTIONCALL DATEPART datepart expression ) )
			int alt156=5;
			try { DebugEnterDecision(156, decisionCanBacktrack[156]);
			switch (input.LA(1))
			{
			case CONVERT:
				{
				alt156 = 1;
				}
				break;
			case CAST:
				{
				alt156 = 2;
				}
				break;
			case DATEADD:
				{
				alt156 = 3;
				}
				break;
			case DATEDIFF:
				{
				alt156 = 4;
				}
				break;
			case DATEPART:
				{
				alt156 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 156, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(156); }
			switch (alt156)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:441:4: CONVERT ( WS )? '(' ( WS )? TOKEN ( WS )? ',' ( WS )? expression ( WS )? ( ',' ( WS )? STRING ( WS )? )? ')'
				{
				DebugLocation(441, 4);
				CONVERT357=(IToken)Match(input,CONVERT,Follow._CONVERT_in_specialfunctioncall2904); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CONVERT.Add(CONVERT357);

				DebugLocation(441, 12);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:441:12: ( WS )?
				int alt126=2;
				try { DebugEnterSubRule(126);
				try { DebugEnterDecision(126, decisionCanBacktrack[126]);
				int LA126_0 = input.LA(1);

				if ((LA126_0==WS))
				{
					alt126 = 1;
				}
				} finally { DebugExitDecision(126); }
				switch (alt126)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:441:12: WS
					{
					DebugLocation(441, 12);
					WS358=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2906); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS358);


					}
					break;

				}
				} finally { DebugExitSubRule(126); }

				DebugLocation(441, 16);
				char_literal359=(IToken)Match(input,169,Follow._169_in_specialfunctioncall2909); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_169.Add(char_literal359);

				DebugLocation(441, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:441:20: ( WS )?
				int alt127=2;
				try { DebugEnterSubRule(127);
				try { DebugEnterDecision(127, decisionCanBacktrack[127]);
				int LA127_0 = input.LA(1);

				if ((LA127_0==WS))
				{
					alt127 = 1;
				}
				} finally { DebugExitDecision(127); }
				switch (alt127)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:441:20: WS
					{
					DebugLocation(441, 20);
					WS360=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2911); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS360);


					}
					break;

				}
				} finally { DebugExitSubRule(127); }

				DebugLocation(441, 24);
				TOKEN361=(IToken)Match(input,TOKEN,Follow._TOKEN_in_specialfunctioncall2914); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TOKEN.Add(TOKEN361);

				DebugLocation(441, 30);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:441:30: ( WS )?
				int alt128=2;
				try { DebugEnterSubRule(128);
				try { DebugEnterDecision(128, decisionCanBacktrack[128]);
				int LA128_0 = input.LA(1);

				if ((LA128_0==WS))
				{
					alt128 = 1;
				}
				} finally { DebugExitDecision(128); }
				switch (alt128)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:441:30: WS
					{
					DebugLocation(441, 30);
					WS362=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2916); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS362);


					}
					break;

				}
				} finally { DebugExitSubRule(128); }

				DebugLocation(441, 34);
				char_literal363=(IToken)Match(input,173,Follow._173_in_specialfunctioncall2919); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_173.Add(char_literal363);

				DebugLocation(441, 38);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:441:38: ( WS )?
				int alt129=2;
				try { DebugEnterSubRule(129);
				try { DebugEnterDecision(129, decisionCanBacktrack[129]);
				int LA129_0 = input.LA(1);

				if ((LA129_0==WS))
				{
					alt129 = 1;
				}
				} finally { DebugExitDecision(129); }
				switch (alt129)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:441:38: WS
					{
					DebugLocation(441, 38);
					WS364=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2921); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS364);


					}
					break;

				}
				} finally { DebugExitSubRule(129); }

				DebugLocation(441, 42);
				PushFollow(Follow._expression_in_specialfunctioncall2924);
				expression365=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression365.Tree);
				DebugLocation(441, 53);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:441:53: ( WS )?
				int alt130=2;
				try { DebugEnterSubRule(130);
				try { DebugEnterDecision(130, decisionCanBacktrack[130]);
				int LA130_0 = input.LA(1);

				if ((LA130_0==WS))
				{
					alt130 = 1;
				}
				} finally { DebugExitDecision(130); }
				switch (alt130)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:441:53: WS
					{
					DebugLocation(441, 53);
					WS366=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2926); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS366);


					}
					break;

				}
				} finally { DebugExitSubRule(130); }

				DebugLocation(441, 57);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:441:57: ( ',' ( WS )? STRING ( WS )? )?
				int alt133=2;
				try { DebugEnterSubRule(133);
				try { DebugEnterDecision(133, decisionCanBacktrack[133]);
				int LA133_0 = input.LA(1);

				if ((LA133_0==173))
				{
					alt133 = 1;
				}
				} finally { DebugExitDecision(133); }
				switch (alt133)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:441:58: ',' ( WS )? STRING ( WS )?
					{
					DebugLocation(441, 58);
					char_literal367=(IToken)Match(input,173,Follow._173_in_specialfunctioncall2930); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_173.Add(char_literal367);

					DebugLocation(441, 62);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:441:62: ( WS )?
					int alt131=2;
					try { DebugEnterSubRule(131);
					try { DebugEnterDecision(131, decisionCanBacktrack[131]);
					int LA131_0 = input.LA(1);

					if ((LA131_0==WS))
					{
						alt131 = 1;
					}
					} finally { DebugExitDecision(131); }
					switch (alt131)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:441:62: WS
						{
						DebugLocation(441, 62);
						WS368=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2932); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS368);


						}
						break;

					}
					} finally { DebugExitSubRule(131); }

					DebugLocation(441, 66);
					STRING369=(IToken)Match(input,STRING,Follow._STRING_in_specialfunctioncall2935); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_STRING.Add(STRING369);

					DebugLocation(441, 73);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:441:73: ( WS )?
					int alt132=2;
					try { DebugEnterSubRule(132);
					try { DebugEnterDecision(132, decisionCanBacktrack[132]);
					int LA132_0 = input.LA(1);

					if ((LA132_0==WS))
					{
						alt132 = 1;
					}
					} finally { DebugExitDecision(132); }
					switch (alt132)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:441:73: WS
						{
						DebugLocation(441, 73);
						WS370=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2937); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS370);


						}
						break;

					}
					} finally { DebugExitSubRule(132); }


					}
					break;

				}
				} finally { DebugExitSubRule(133); }

				DebugLocation(441, 79);
				char_literal371=(IToken)Match(input,170,Follow._170_in_specialfunctioncall2942); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_170.Add(char_literal371);



				{
				// AST REWRITE
				// elements: expression, TOKEN, STRING
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 441:83: -> ^( T_CONVERT TOKEN expression ( STRING )? )
				{
					DebugLocation(441, 86);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:441:86: ^( T_CONVERT TOKEN expression ( STRING )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(441, 88);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CONVERT, "T_CONVERT"), root_1);

					DebugLocation(441, 98);
					adaptor.AddChild(root_1, stream_TOKEN.NextNode());
					DebugLocation(441, 104);
					adaptor.AddChild(root_1, stream_expression.NextTree());
					DebugLocation(441, 115);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:441:115: ( STRING )?
					if (stream_STRING.HasNext)
					{
						DebugLocation(441, 115);
						adaptor.AddChild(root_1, stream_STRING.NextNode());

					}
					stream_STRING.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:442:4: CAST ( WS )? '(' ( WS )? expression WS AS WS datatype ( WS )? ')'
				{
				DebugLocation(442, 4);
				CAST372=(IToken)Match(input,CAST,Follow._CAST_in_specialfunctioncall2960); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CAST.Add(CAST372);

				DebugLocation(442, 9);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:442:9: ( WS )?
				int alt134=2;
				try { DebugEnterSubRule(134);
				try { DebugEnterDecision(134, decisionCanBacktrack[134]);
				int LA134_0 = input.LA(1);

				if ((LA134_0==WS))
				{
					alt134 = 1;
				}
				} finally { DebugExitDecision(134); }
				switch (alt134)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:442:9: WS
					{
					DebugLocation(442, 9);
					WS373=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2962); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS373);


					}
					break;

				}
				} finally { DebugExitSubRule(134); }

				DebugLocation(442, 13);
				char_literal374=(IToken)Match(input,169,Follow._169_in_specialfunctioncall2965); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_169.Add(char_literal374);

				DebugLocation(442, 17);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:442:17: ( WS )?
				int alt135=2;
				try { DebugEnterSubRule(135);
				try { DebugEnterDecision(135, decisionCanBacktrack[135]);
				int LA135_0 = input.LA(1);

				if ((LA135_0==WS))
				{
					alt135 = 1;
				}
				} finally { DebugExitDecision(135); }
				switch (alt135)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:442:17: WS
					{
					DebugLocation(442, 17);
					WS375=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2967); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS375);


					}
					break;

				}
				} finally { DebugExitSubRule(135); }

				DebugLocation(442, 21);
				PushFollow(Follow._expression_in_specialfunctioncall2970);
				expression376=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression376.Tree);
				DebugLocation(442, 32);
				WS377=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2972); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS377);

				DebugLocation(442, 35);
				AS378=(IToken)Match(input,AS,Follow._AS_in_specialfunctioncall2974); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_AS.Add(AS378);

				DebugLocation(442, 38);
				WS379=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2976); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS379);

				DebugLocation(442, 41);
				PushFollow(Follow._datatype_in_specialfunctioncall2978);
				datatype380=datatype();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_datatype.Add(datatype380.Tree);
				DebugLocation(442, 50);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:442:50: ( WS )?
				int alt136=2;
				try { DebugEnterSubRule(136);
				try { DebugEnterDecision(136, decisionCanBacktrack[136]);
				int LA136_0 = input.LA(1);

				if ((LA136_0==WS))
				{
					alt136 = 1;
				}
				} finally { DebugExitDecision(136); }
				switch (alt136)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:442:50: WS
					{
					DebugLocation(442, 50);
					WS381=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2980); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS381);


					}
					break;

				}
				} finally { DebugExitSubRule(136); }

				DebugLocation(442, 54);
				char_literal382=(IToken)Match(input,170,Follow._170_in_specialfunctioncall2983); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_170.Add(char_literal382);



				{
				// AST REWRITE
				// elements: expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 442:58: -> ^( T_CONVERT TOKEN expression )
				{
					DebugLocation(442, 61);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:442:61: ^( T_CONVERT TOKEN expression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(442, 63);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CONVERT, "T_CONVERT"), root_1);

					DebugLocation(442, 73);
					adaptor.AddChild(root_1, (object)adaptor.Create(TOKEN, "TOKEN"));
					DebugLocation(442, 79);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:443:4: DATEADD ( WS )? '(' ( WS )? datepart ( WS )? ',' ( WS )? expression ( WS )? ',' ( WS )? expression ( WS )? ')'
				{
				DebugLocation(443, 4);
				DATEADD383=(IToken)Match(input,DATEADD,Follow._DATEADD_in_specialfunctioncall2998); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DATEADD.Add(DATEADD383);

				DebugLocation(443, 12);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:443:12: ( WS )?
				int alt137=2;
				try { DebugEnterSubRule(137);
				try { DebugEnterDecision(137, decisionCanBacktrack[137]);
				int LA137_0 = input.LA(1);

				if ((LA137_0==WS))
				{
					alt137 = 1;
				}
				} finally { DebugExitDecision(137); }
				switch (alt137)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:443:12: WS
					{
					DebugLocation(443, 12);
					WS384=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3000); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS384);


					}
					break;

				}
				} finally { DebugExitSubRule(137); }

				DebugLocation(443, 16);
				char_literal385=(IToken)Match(input,169,Follow._169_in_specialfunctioncall3003); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_169.Add(char_literal385);

				DebugLocation(443, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:443:20: ( WS )?
				int alt138=2;
				try { DebugEnterSubRule(138);
				try { DebugEnterDecision(138, decisionCanBacktrack[138]);
				int LA138_0 = input.LA(1);

				if ((LA138_0==WS))
				{
					alt138 = 1;
				}
				} finally { DebugExitDecision(138); }
				switch (alt138)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:443:20: WS
					{
					DebugLocation(443, 20);
					WS386=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3005); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS386);


					}
					break;

				}
				} finally { DebugExitSubRule(138); }

				DebugLocation(443, 24);
				PushFollow(Follow._datepart_in_specialfunctioncall3008);
				datepart387=datepart();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_datepart.Add(datepart387.Tree);
				DebugLocation(443, 33);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:443:33: ( WS )?
				int alt139=2;
				try { DebugEnterSubRule(139);
				try { DebugEnterDecision(139, decisionCanBacktrack[139]);
				int LA139_0 = input.LA(1);

				if ((LA139_0==WS))
				{
					alt139 = 1;
				}
				} finally { DebugExitDecision(139); }
				switch (alt139)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:443:33: WS
					{
					DebugLocation(443, 33);
					WS388=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3010); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS388);


					}
					break;

				}
				} finally { DebugExitSubRule(139); }

				DebugLocation(443, 37);
				char_literal389=(IToken)Match(input,173,Follow._173_in_specialfunctioncall3013); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_173.Add(char_literal389);

				DebugLocation(443, 41);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:443:41: ( WS )?
				int alt140=2;
				try { DebugEnterSubRule(140);
				try { DebugEnterDecision(140, decisionCanBacktrack[140]);
				int LA140_0 = input.LA(1);

				if ((LA140_0==WS))
				{
					alt140 = 1;
				}
				} finally { DebugExitDecision(140); }
				switch (alt140)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:443:41: WS
					{
					DebugLocation(443, 41);
					WS390=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3015); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS390);


					}
					break;

				}
				} finally { DebugExitSubRule(140); }

				DebugLocation(443, 45);
				PushFollow(Follow._expression_in_specialfunctioncall3018);
				expression391=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression391.Tree);
				DebugLocation(443, 56);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:443:56: ( WS )?
				int alt141=2;
				try { DebugEnterSubRule(141);
				try { DebugEnterDecision(141, decisionCanBacktrack[141]);
				int LA141_0 = input.LA(1);

				if ((LA141_0==WS))
				{
					alt141 = 1;
				}
				} finally { DebugExitDecision(141); }
				switch (alt141)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:443:56: WS
					{
					DebugLocation(443, 56);
					WS392=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3020); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS392);


					}
					break;

				}
				} finally { DebugExitSubRule(141); }

				DebugLocation(443, 60);
				char_literal393=(IToken)Match(input,173,Follow._173_in_specialfunctioncall3023); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_173.Add(char_literal393);

				DebugLocation(443, 64);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:443:64: ( WS )?
				int alt142=2;
				try { DebugEnterSubRule(142);
				try { DebugEnterDecision(142, decisionCanBacktrack[142]);
				int LA142_0 = input.LA(1);

				if ((LA142_0==WS))
				{
					alt142 = 1;
				}
				} finally { DebugExitDecision(142); }
				switch (alt142)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:443:64: WS
					{
					DebugLocation(443, 64);
					WS394=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3025); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS394);


					}
					break;

				}
				} finally { DebugExitSubRule(142); }

				DebugLocation(443, 68);
				PushFollow(Follow._expression_in_specialfunctioncall3028);
				expression395=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression395.Tree);
				DebugLocation(443, 79);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:443:79: ( WS )?
				int alt143=2;
				try { DebugEnterSubRule(143);
				try { DebugEnterDecision(143, decisionCanBacktrack[143]);
				int LA143_0 = input.LA(1);

				if ((LA143_0==WS))
				{
					alt143 = 1;
				}
				} finally { DebugExitDecision(143); }
				switch (alt143)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:443:79: WS
					{
					DebugLocation(443, 79);
					WS396=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3030); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS396);


					}
					break;

				}
				} finally { DebugExitSubRule(143); }

				DebugLocation(443, 83);
				char_literal397=(IToken)Match(input,170,Follow._170_in_specialfunctioncall3033); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_170.Add(char_literal397);



				{
				// AST REWRITE
				// elements: expression, datepart, DATEADD
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 443:87: -> ^( T_FUNCTIONCALL DATEADD datepart ( expression )+ )
				{
					DebugLocation(443, 90);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:443:90: ^( T_FUNCTIONCALL DATEADD datepart ( expression )+ )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(443, 92);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(443, 107);
					adaptor.AddChild(root_1, stream_DATEADD.NextNode());
					DebugLocation(443, 115);
					adaptor.AddChild(root_1, stream_datepart.NextTree());
					DebugLocation(443, 124);
					if (!(stream_expression.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expression.HasNext )
					{
						DebugLocation(443, 124);
						adaptor.AddChild(root_1, stream_expression.NextTree());

					}
					stream_expression.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:444:4: DATEDIFF ( WS )? '(' ( WS )? datepart ( WS )? ',' ( WS )? expression ( WS )? ',' ( WS )? expression ( WS )? ')'
				{
				DebugLocation(444, 4);
				DATEDIFF398=(IToken)Match(input,DATEDIFF,Follow._DATEDIFF_in_specialfunctioncall3051); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DATEDIFF.Add(DATEDIFF398);

				DebugLocation(444, 13);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:444:13: ( WS )?
				int alt144=2;
				try { DebugEnterSubRule(144);
				try { DebugEnterDecision(144, decisionCanBacktrack[144]);
				int LA144_0 = input.LA(1);

				if ((LA144_0==WS))
				{
					alt144 = 1;
				}
				} finally { DebugExitDecision(144); }
				switch (alt144)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:444:13: WS
					{
					DebugLocation(444, 13);
					WS399=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3053); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS399);


					}
					break;

				}
				} finally { DebugExitSubRule(144); }

				DebugLocation(444, 17);
				char_literal400=(IToken)Match(input,169,Follow._169_in_specialfunctioncall3056); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_169.Add(char_literal400);

				DebugLocation(444, 21);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:444:21: ( WS )?
				int alt145=2;
				try { DebugEnterSubRule(145);
				try { DebugEnterDecision(145, decisionCanBacktrack[145]);
				int LA145_0 = input.LA(1);

				if ((LA145_0==WS))
				{
					alt145 = 1;
				}
				} finally { DebugExitDecision(145); }
				switch (alt145)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:444:21: WS
					{
					DebugLocation(444, 21);
					WS401=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3058); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS401);


					}
					break;

				}
				} finally { DebugExitSubRule(145); }

				DebugLocation(444, 25);
				PushFollow(Follow._datepart_in_specialfunctioncall3061);
				datepart402=datepart();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_datepart.Add(datepart402.Tree);
				DebugLocation(444, 34);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:444:34: ( WS )?
				int alt146=2;
				try { DebugEnterSubRule(146);
				try { DebugEnterDecision(146, decisionCanBacktrack[146]);
				int LA146_0 = input.LA(1);

				if ((LA146_0==WS))
				{
					alt146 = 1;
				}
				} finally { DebugExitDecision(146); }
				switch (alt146)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:444:34: WS
					{
					DebugLocation(444, 34);
					WS403=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3063); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS403);


					}
					break;

				}
				} finally { DebugExitSubRule(146); }

				DebugLocation(444, 38);
				char_literal404=(IToken)Match(input,173,Follow._173_in_specialfunctioncall3066); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_173.Add(char_literal404);

				DebugLocation(444, 42);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:444:42: ( WS )?
				int alt147=2;
				try { DebugEnterSubRule(147);
				try { DebugEnterDecision(147, decisionCanBacktrack[147]);
				int LA147_0 = input.LA(1);

				if ((LA147_0==WS))
				{
					alt147 = 1;
				}
				} finally { DebugExitDecision(147); }
				switch (alt147)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:444:42: WS
					{
					DebugLocation(444, 42);
					WS405=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3068); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS405);


					}
					break;

				}
				} finally { DebugExitSubRule(147); }

				DebugLocation(444, 46);
				PushFollow(Follow._expression_in_specialfunctioncall3071);
				expression406=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression406.Tree);
				DebugLocation(444, 57);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:444:57: ( WS )?
				int alt148=2;
				try { DebugEnterSubRule(148);
				try { DebugEnterDecision(148, decisionCanBacktrack[148]);
				int LA148_0 = input.LA(1);

				if ((LA148_0==WS))
				{
					alt148 = 1;
				}
				} finally { DebugExitDecision(148); }
				switch (alt148)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:444:57: WS
					{
					DebugLocation(444, 57);
					WS407=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3073); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS407);


					}
					break;

				}
				} finally { DebugExitSubRule(148); }

				DebugLocation(444, 61);
				char_literal408=(IToken)Match(input,173,Follow._173_in_specialfunctioncall3076); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_173.Add(char_literal408);

				DebugLocation(444, 65);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:444:65: ( WS )?
				int alt149=2;
				try { DebugEnterSubRule(149);
				try { DebugEnterDecision(149, decisionCanBacktrack[149]);
				int LA149_0 = input.LA(1);

				if ((LA149_0==WS))
				{
					alt149 = 1;
				}
				} finally { DebugExitDecision(149); }
				switch (alt149)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:444:65: WS
					{
					DebugLocation(444, 65);
					WS409=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3078); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS409);


					}
					break;

				}
				} finally { DebugExitSubRule(149); }

				DebugLocation(444, 69);
				PushFollow(Follow._expression_in_specialfunctioncall3081);
				expression410=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression410.Tree);
				DebugLocation(444, 80);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:444:80: ( WS )?
				int alt150=2;
				try { DebugEnterSubRule(150);
				try { DebugEnterDecision(150, decisionCanBacktrack[150]);
				int LA150_0 = input.LA(1);

				if ((LA150_0==WS))
				{
					alt150 = 1;
				}
				} finally { DebugExitDecision(150); }
				switch (alt150)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:444:80: WS
					{
					DebugLocation(444, 80);
					WS411=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3083); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS411);


					}
					break;

				}
				} finally { DebugExitSubRule(150); }

				DebugLocation(444, 84);
				char_literal412=(IToken)Match(input,170,Follow._170_in_specialfunctioncall3086); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_170.Add(char_literal412);



				{
				// AST REWRITE
				// elements: DATEDIFF, datepart, expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 444:88: -> ^( T_FUNCTIONCALL DATEDIFF datepart ( expression )+ )
				{
					DebugLocation(444, 91);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:444:91: ^( T_FUNCTIONCALL DATEDIFF datepart ( expression )+ )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(444, 93);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(444, 108);
					adaptor.AddChild(root_1, stream_DATEDIFF.NextNode());
					DebugLocation(444, 117);
					adaptor.AddChild(root_1, stream_datepart.NextTree());
					DebugLocation(444, 126);
					if (!(stream_expression.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expression.HasNext )
					{
						DebugLocation(444, 126);
						adaptor.AddChild(root_1, stream_expression.NextTree());

					}
					stream_expression.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:445:4: DATEPART ( WS )? '(' ( WS )? datepart ( WS )? ',' ( WS )? expression ( WS )? ')'
				{
				DebugLocation(445, 4);
				DATEPART413=(IToken)Match(input,DATEPART,Follow._DATEPART_in_specialfunctioncall3104); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DATEPART.Add(DATEPART413);

				DebugLocation(445, 13);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:445:13: ( WS )?
				int alt151=2;
				try { DebugEnterSubRule(151);
				try { DebugEnterDecision(151, decisionCanBacktrack[151]);
				int LA151_0 = input.LA(1);

				if ((LA151_0==WS))
				{
					alt151 = 1;
				}
				} finally { DebugExitDecision(151); }
				switch (alt151)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:445:13: WS
					{
					DebugLocation(445, 13);
					WS414=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3106); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS414);


					}
					break;

				}
				} finally { DebugExitSubRule(151); }

				DebugLocation(445, 17);
				char_literal415=(IToken)Match(input,169,Follow._169_in_specialfunctioncall3109); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_169.Add(char_literal415);

				DebugLocation(445, 21);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:445:21: ( WS )?
				int alt152=2;
				try { DebugEnterSubRule(152);
				try { DebugEnterDecision(152, decisionCanBacktrack[152]);
				int LA152_0 = input.LA(1);

				if ((LA152_0==WS))
				{
					alt152 = 1;
				}
				} finally { DebugExitDecision(152); }
				switch (alt152)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:445:21: WS
					{
					DebugLocation(445, 21);
					WS416=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3111); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS416);


					}
					break;

				}
				} finally { DebugExitSubRule(152); }

				DebugLocation(445, 25);
				PushFollow(Follow._datepart_in_specialfunctioncall3114);
				datepart417=datepart();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_datepart.Add(datepart417.Tree);
				DebugLocation(445, 34);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:445:34: ( WS )?
				int alt153=2;
				try { DebugEnterSubRule(153);
				try { DebugEnterDecision(153, decisionCanBacktrack[153]);
				int LA153_0 = input.LA(1);

				if ((LA153_0==WS))
				{
					alt153 = 1;
				}
				} finally { DebugExitDecision(153); }
				switch (alt153)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:445:34: WS
					{
					DebugLocation(445, 34);
					WS418=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3116); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS418);


					}
					break;

				}
				} finally { DebugExitSubRule(153); }

				DebugLocation(445, 38);
				char_literal419=(IToken)Match(input,173,Follow._173_in_specialfunctioncall3119); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_173.Add(char_literal419);

				DebugLocation(445, 42);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:445:42: ( WS )?
				int alt154=2;
				try { DebugEnterSubRule(154);
				try { DebugEnterDecision(154, decisionCanBacktrack[154]);
				int LA154_0 = input.LA(1);

				if ((LA154_0==WS))
				{
					alt154 = 1;
				}
				} finally { DebugExitDecision(154); }
				switch (alt154)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:445:42: WS
					{
					DebugLocation(445, 42);
					WS420=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3121); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS420);


					}
					break;

				}
				} finally { DebugExitSubRule(154); }

				DebugLocation(445, 46);
				PushFollow(Follow._expression_in_specialfunctioncall3124);
				expression421=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression421.Tree);
				DebugLocation(445, 57);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:445:57: ( WS )?
				int alt155=2;
				try { DebugEnterSubRule(155);
				try { DebugEnterDecision(155, decisionCanBacktrack[155]);
				int LA155_0 = input.LA(1);

				if ((LA155_0==WS))
				{
					alt155 = 1;
				}
				} finally { DebugExitDecision(155); }
				switch (alt155)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:445:57: WS
					{
					DebugLocation(445, 57);
					WS422=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3126); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS422);


					}
					break;

				}
				} finally { DebugExitSubRule(155); }

				DebugLocation(445, 61);
				char_literal423=(IToken)Match(input,170,Follow._170_in_specialfunctioncall3129); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_170.Add(char_literal423);



				{
				// AST REWRITE
				// elements: DATEPART, datepart, expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 445:65: -> ^( T_FUNCTIONCALL DATEPART datepart expression )
				{
					DebugLocation(445, 68);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:445:68: ^( T_FUNCTIONCALL DATEPART datepart expression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(445, 70);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(445, 85);
					adaptor.AddChild(root_1, stream_DATEPART.NextNode());
					DebugLocation(445, 94);
					adaptor.AddChild(root_1, stream_datepart.NextTree());
					DebugLocation(445, 103);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("specialfunctioncall", 59);
			LeaveRule("specialfunctioncall", 59);
			LeaveRule_specialfunctioncall();
	    }
	 	DebugLocation(446, 1);
		} finally { DebugExitRule(GrammarFileName, "specialfunctioncall"); }
		return retval;

	}
	// $ANTLR end "specialfunctioncall"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_datepart() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_datepart() {}

	// $ANTLR start "datepart"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:448:1: datepart : TOKEN -> ^( T_DATEPART TOKEN ) ;
	[GrammarRule("datepart")]
	private AstParserRuleReturnScope<object, IToken> datepart()
	{
		EnterRule_datepart();
		EnterRule("datepart", 60);
		TraceIn("datepart", 60);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN424 = default(IToken);

	    object TOKEN424_tree = default(object);
	    RewriteRuleITokenStream stream_TOKEN=new RewriteRuleITokenStream(adaptor,"token TOKEN");

		try { DebugEnterRule(GrammarFileName, "datepart");
		DebugLocation(448, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:449:2: ( TOKEN -> ^( T_DATEPART TOKEN ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:449:4: TOKEN
			{
			DebugLocation(449, 4);
			TOKEN424=(IToken)Match(input,TOKEN,Follow._TOKEN_in_datepart3153); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_TOKEN.Add(TOKEN424);



			{
			// AST REWRITE
			// elements: TOKEN
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 449:10: -> ^( T_DATEPART TOKEN )
			{
				DebugLocation(449, 13);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:449:13: ^( T_DATEPART TOKEN )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(449, 15);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_DATEPART, "T_DATEPART"), root_1);

				DebugLocation(449, 26);
				adaptor.AddChild(root_1, stream_TOKEN.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("datepart", 60);
			LeaveRule("datepart", 60);
			LeaveRule_datepart();
	    }
	 	DebugLocation(450, 1);
		} finally { DebugExitRule(GrammarFileName, "datepart"); }
		return retval;

	}
	// $ANTLR end "datepart"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_number() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_number() {}

	// $ANTLR start "number"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:452:1: number : NUMBER ;
	[GrammarRule("number")]
	private AstParserRuleReturnScope<object, IToken> number()
	{
		EnterRule_number();
		EnterRule("number", 61);
		TraceIn("number", 61);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken NUMBER425 = default(IToken);

	    object NUMBER425_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "number");
		DebugLocation(452, 16);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:452:9: ( NUMBER )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:452:11: NUMBER
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(452, 11);
			NUMBER425=(IToken)Match(input,NUMBER,Follow._NUMBER_in_number3173); if (state.failed) return retval;
			if (state.backtracking == 0) {
			NUMBER425_tree = (object)adaptor.Create(NUMBER425);
			adaptor.AddChild(root_0, NUMBER425_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("number", 61);
			LeaveRule("number", 61);
			LeaveRule_number();
	    }
	 	DebugLocation(452, 16);
		} finally { DebugExitRule(GrammarFileName, "number"); }
		return retval;

	}
	// $ANTLR end "number"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_string() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_string() {}

	// $ANTLR start "string"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:454:1: string : STRING -> ^( T_STRING STRING ) ;
	[GrammarRule("string")]
	private AstParserRuleReturnScope<object, IToken> @string()
	{
		EnterRule_string();
		EnterRule("string", 62);
		TraceIn("string", 62);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken STRING426 = default(IToken);

	    object STRING426_tree = default(object);
	    RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");

		try { DebugEnterRule(GrammarFileName, "string");
		DebugLocation(454, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:454:8: ( STRING -> ^( T_STRING STRING ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:454:10: STRING
			{
			DebugLocation(454, 10);
			STRING426=(IToken)Match(input,STRING,Follow._STRING_in_string3181); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_STRING.Add(STRING426);



			{
			// AST REWRITE
			// elements: STRING
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 454:17: -> ^( T_STRING STRING )
			{
				DebugLocation(454, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:454:20: ^( T_STRING STRING )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(454, 22);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_STRING, "T_STRING"), root_1);

				DebugLocation(454, 31);
				adaptor.AddChild(root_1, stream_STRING.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("string", 62);
			LeaveRule("string", 62);
			LeaveRule_string();
	    }
	 	DebugLocation(455, 1);
		} finally { DebugExitRule(GrammarFileName, "string"); }
		return retval;

	}
	// $ANTLR end "string"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_datatype() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_datatype() {}

	// $ANTLR start "datatype"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:457:1: datatype : TOKEN ;
	[GrammarRule("datatype")]
	private AstParserRuleReturnScope<object, IToken> datatype()
	{
		EnterRule_datatype();
		EnterRule("datatype", 63);
		TraceIn("datatype", 63);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN427 = default(IToken);

	    object TOKEN427_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "datatype");
		DebugLocation(457, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:458:2: ( TOKEN )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:458:4: TOKEN
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(458, 4);
			TOKEN427=(IToken)Match(input,TOKEN,Follow._TOKEN_in_datatype3201); if (state.failed) return retval;
			if (state.backtracking == 0) {
			TOKEN427_tree = (object)adaptor.Create(TOKEN427);
			adaptor.AddChild(root_0, TOKEN427_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("datatype", 63);
			LeaveRule("datatype", 63);
			LeaveRule_datatype();
	    }
	 	DebugLocation(459, 1);
		} finally { DebugExitRule(GrammarFileName, "datatype"); }
		return retval;

	}
	// $ANTLR end "datatype"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_variable() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_variable() {}

	// $ANTLR start "variable"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:461:1: variable : VARIABLE -> ^( T_VARIABLE VARIABLE ) ;
	[GrammarRule("variable")]
	private AstParserRuleReturnScope<object, IToken> variable()
	{
		EnterRule_variable();
		EnterRule("variable", 64);
		TraceIn("variable", 64);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken VARIABLE428 = default(IToken);

	    object VARIABLE428_tree = default(object);
	    RewriteRuleITokenStream stream_VARIABLE=new RewriteRuleITokenStream(adaptor,"token VARIABLE");

		try { DebugEnterRule(GrammarFileName, "variable");
		DebugLocation(461, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:462:2: ( VARIABLE -> ^( T_VARIABLE VARIABLE ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:462:4: VARIABLE
			{
			DebugLocation(462, 4);
			VARIABLE428=(IToken)Match(input,VARIABLE,Follow._VARIABLE_in_variable3213); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_VARIABLE.Add(VARIABLE428);



			{
			// AST REWRITE
			// elements: VARIABLE
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 462:13: -> ^( T_VARIABLE VARIABLE )
			{
				DebugLocation(462, 16);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:462:16: ^( T_VARIABLE VARIABLE )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(462, 18);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_VARIABLE, "T_VARIABLE"), root_1);

				DebugLocation(462, 29);
				adaptor.AddChild(root_1, stream_VARIABLE.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variable", 64);
			LeaveRule("variable", 64);
			LeaveRule_variable();
	    }
	 	DebugLocation(463, 1);
		} finally { DebugExitRule(GrammarFileName, "variable"); }
		return retval;

	}
	// $ANTLR end "variable"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_case() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_case() {}

	// $ANTLR start "case"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:465:1: case : CASE WS ( expression WS )? ( case_when WS )* ( case_else WS )? END -> ^( T_CASE ( expression )? ( case_when )* ( case_else )? ) ;
	[GrammarRule("case")]
	private AstParserRuleReturnScope<object, IToken> @case()
	{
		EnterRule_case();
		EnterRule("case", 65);
		TraceIn("case", 65);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken CASE429 = default(IToken);
	    IToken WS430 = default(IToken);
	    IToken WS432 = default(IToken);
	    IToken WS434 = default(IToken);
	    IToken WS436 = default(IToken);
	    IToken END437 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression431 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> case_when433 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> case_else435 = default(AstParserRuleReturnScope<object, IToken>);

	    object CASE429_tree = default(object);
	    object WS430_tree = default(object);
	    object WS432_tree = default(object);
	    object WS434_tree = default(object);
	    object WS436_tree = default(object);
	    object END437_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_END=new RewriteRuleITokenStream(adaptor,"token END");
	    RewriteRuleITokenStream stream_CASE=new RewriteRuleITokenStream(adaptor,"token CASE");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_case_when=new RewriteRuleSubtreeStream(adaptor,"rule case_when");
	    RewriteRuleSubtreeStream stream_case_else=new RewriteRuleSubtreeStream(adaptor,"rule case_else");
		try { DebugEnterRule(GrammarFileName, "case");
		DebugLocation(465, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:466:2: ( CASE WS ( expression WS )? ( case_when WS )* ( case_else WS )? END -> ^( T_CASE ( expression )? ( case_when )* ( case_else )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:466:4: CASE WS ( expression WS )? ( case_when WS )* ( case_else WS )? END
			{
			DebugLocation(466, 4);
			CASE429=(IToken)Match(input,CASE,Follow._CASE_in_case3233); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CASE.Add(CASE429);

			DebugLocation(466, 9);
			WS430=(IToken)Match(input,WS,Follow._WS_in_case3235); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS430);

			DebugLocation(466, 12);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:466:12: ( expression WS )?
			int alt157=2;
			try { DebugEnterSubRule(157);
			try { DebugEnterDecision(157, decisionCanBacktrack[157]);
			int LA157_0 = input.LA(1);

			if (((LA157_0>=CASE && LA157_0<=CAST)||(LA157_0>=CONVERT && LA157_0<=COUNT)||(LA157_0>=DATEADD && LA157_0<=DATEPART)||LA157_0==EXISTS||(LA157_0>=NOT && LA157_0<=NUMBER)||LA157_0==SIMPLE_FILE||(LA157_0>=STRING && LA157_0<=SYSTEMVAR)||LA157_0==TOKEN||LA157_0==VARIABLE||LA157_0==169||LA157_0==172||LA157_0==174||LA157_0==188))
			{
				alt157 = 1;
			}
			} finally { DebugExitDecision(157); }
			switch (alt157)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:466:13: expression WS
				{
				DebugLocation(466, 13);
				PushFollow(Follow._expression_in_case3238);
				expression431=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression431.Tree);
				DebugLocation(466, 24);
				WS432=(IToken)Match(input,WS,Follow._WS_in_case3240); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS432);


				}
				break;

			}
			} finally { DebugExitSubRule(157); }

			DebugLocation(466, 29);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:466:29: ( case_when WS )*
			try { DebugEnterSubRule(158);
			while (true)
			{
				int alt158=2;
				try { DebugEnterDecision(158, decisionCanBacktrack[158]);
				int LA158_0 = input.LA(1);

				if ((LA158_0==WHEN))
				{
					alt158 = 1;
				}


				} finally { DebugExitDecision(158); }
				switch ( alt158 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:466:30: case_when WS
					{
					DebugLocation(466, 30);
					PushFollow(Follow._case_when_in_case3245);
					case_when433=case_when();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_case_when.Add(case_when433.Tree);
					DebugLocation(466, 40);
					WS434=(IToken)Match(input,WS,Follow._WS_in_case3247); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS434);


					}
					break;

				default:
					goto loop158;
				}
			}

			loop158:
				;

			} finally { DebugExitSubRule(158); }

			DebugLocation(466, 45);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:466:45: ( case_else WS )?
			int alt159=2;
			try { DebugEnterSubRule(159);
			try { DebugEnterDecision(159, decisionCanBacktrack[159]);
			int LA159_0 = input.LA(1);

			if ((LA159_0==ELSE))
			{
				alt159 = 1;
			}
			} finally { DebugExitDecision(159); }
			switch (alt159)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:466:46: case_else WS
				{
				DebugLocation(466, 46);
				PushFollow(Follow._case_else_in_case3252);
				case_else435=case_else();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_case_else.Add(case_else435.Tree);
				DebugLocation(466, 56);
				WS436=(IToken)Match(input,WS,Follow._WS_in_case3254); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS436);


				}
				break;

			}
			} finally { DebugExitSubRule(159); }

			DebugLocation(466, 61);
			END437=(IToken)Match(input,END,Follow._END_in_case3258); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_END.Add(END437);



			{
			// AST REWRITE
			// elements: expression, case_else, case_when
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 467:2: -> ^( T_CASE ( expression )? ( case_when )* ( case_else )? )
			{
				DebugLocation(467, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:467:5: ^( T_CASE ( expression )? ( case_when )* ( case_else )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(467, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CASE, "T_CASE"), root_1);

				DebugLocation(467, 14);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:467:14: ( expression )?
				if (stream_expression.HasNext)
				{
					DebugLocation(467, 14);
					adaptor.AddChild(root_1, stream_expression.NextTree());

				}
				stream_expression.Reset();
				DebugLocation(467, 26);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:467:26: ( case_when )*
				while ( stream_case_when.HasNext )
				{
					DebugLocation(467, 26);
					adaptor.AddChild(root_1, stream_case_when.NextTree());

				}
				stream_case_when.Reset();
				DebugLocation(467, 37);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:467:37: ( case_else )?
				if (stream_case_else.HasNext)
				{
					DebugLocation(467, 37);
					adaptor.AddChild(root_1, stream_case_else.NextTree());

				}
				stream_case_else.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("case", 65);
			LeaveRule("case", 65);
			LeaveRule_case();
	    }
	 	DebugLocation(468, 1);
		} finally { DebugExitRule(GrammarFileName, "case"); }
		return retval;

	}
	// $ANTLR end "case"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_case_when() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_case_when() {}

	// $ANTLR start "case_when"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:470:1: case_when : WHEN WS a= expression WS THEN WS b= expression -> ^( T_CASE_WHEN $a $b) ;
	[GrammarRule("case_when")]
	private AstParserRuleReturnScope<object, IToken> case_when()
	{
		EnterRule_case_when();
		EnterRule("case_when", 66);
		TraceIn("case_when", 66);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WHEN438 = default(IToken);
	    IToken WS439 = default(IToken);
	    IToken WS440 = default(IToken);
	    IToken THEN441 = default(IToken);
	    IToken WS442 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);

	    object WHEN438_tree = default(object);
	    object WS439_tree = default(object);
	    object WS440_tree = default(object);
	    object THEN441_tree = default(object);
	    object WS442_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_THEN=new RewriteRuleITokenStream(adaptor,"token THEN");
	    RewriteRuleITokenStream stream_WHEN=new RewriteRuleITokenStream(adaptor,"token WHEN");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "case_when");
		DebugLocation(470, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:471:2: ( WHEN WS a= expression WS THEN WS b= expression -> ^( T_CASE_WHEN $a $b) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:471:4: WHEN WS a= expression WS THEN WS b= expression
			{
			DebugLocation(471, 4);
			WHEN438=(IToken)Match(input,WHEN,Follow._WHEN_in_case_when3286); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WHEN.Add(WHEN438);

			DebugLocation(471, 9);
			WS439=(IToken)Match(input,WS,Follow._WS_in_case_when3288); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS439);

			DebugLocation(471, 13);
			PushFollow(Follow._expression_in_case_when3292);
			a=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression.Add(a.Tree);
			DebugLocation(471, 25);
			WS440=(IToken)Match(input,WS,Follow._WS_in_case_when3294); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS440);

			DebugLocation(471, 28);
			THEN441=(IToken)Match(input,THEN,Follow._THEN_in_case_when3296); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_THEN.Add(THEN441);

			DebugLocation(471, 33);
			WS442=(IToken)Match(input,WS,Follow._WS_in_case_when3298); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS442);

			DebugLocation(471, 37);
			PushFollow(Follow._expression_in_case_when3302);
			b=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression.Add(b.Tree);


			{
			// AST REWRITE
			// elements: b, a
			// token labels: 
			// rule labels: retval, b, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 472:2: -> ^( T_CASE_WHEN $a $b)
			{
				DebugLocation(472, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:472:5: ^( T_CASE_WHEN $a $b)
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(472, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CASE_WHEN, "T_CASE_WHEN"), root_1);

				DebugLocation(472, 20);
				adaptor.AddChild(root_1, stream_a.NextTree());
				DebugLocation(472, 23);
				adaptor.AddChild(root_1, stream_b.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("case_when", 66);
			LeaveRule("case_when", 66);
			LeaveRule_case_when();
	    }
	 	DebugLocation(473, 1);
		} finally { DebugExitRule(GrammarFileName, "case_when"); }
		return retval;

	}
	// $ANTLR end "case_when"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_case_else() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_case_else() {}

	// $ANTLR start "case_else"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:475:1: case_else : ELSE WS expression -> ^( T_CASE_ELSE expression ) ;
	[GrammarRule("case_else")]
	private AstParserRuleReturnScope<object, IToken> case_else()
	{
		EnterRule_case_else();
		EnterRule("case_else", 67);
		TraceIn("case_else", 67);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken ELSE443 = default(IToken);
	    IToken WS444 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression445 = default(AstParserRuleReturnScope<object, IToken>);

	    object ELSE443_tree = default(object);
	    object WS444_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_ELSE=new RewriteRuleITokenStream(adaptor,"token ELSE");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "case_else");
		DebugLocation(475, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:476:2: ( ELSE WS expression -> ^( T_CASE_ELSE expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:476:4: ELSE WS expression
			{
			DebugLocation(476, 4);
			ELSE443=(IToken)Match(input,ELSE,Follow._ELSE_in_case_else3327); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ELSE.Add(ELSE443);

			DebugLocation(476, 9);
			WS444=(IToken)Match(input,WS,Follow._WS_in_case_else3329); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS444);

			DebugLocation(476, 12);
			PushFollow(Follow._expression_in_case_else3331);
			expression445=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression.Add(expression445.Tree);


			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 477:2: -> ^( T_CASE_ELSE expression )
			{
				DebugLocation(477, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:477:5: ^( T_CASE_ELSE expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(477, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CASE_ELSE, "T_CASE_ELSE"), root_1);

				DebugLocation(477, 19);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("case_else", 67);
			LeaveRule("case_else", 67);
			LeaveRule_case_else();
	    }
	 	DebugLocation(478, 1);
		} finally { DebugExitRule(GrammarFileName, "case_else"); }
		return retval;

	}
	// $ANTLR end "case_else"
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred1_gql_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred1_gql_fragment() {}

	// $ANTLR start synpred1_gql
	public void synpred1_gql_fragment()
	{
		EnterRule_synpred1_gql_fragment();
		EnterRule("synpred1_gql_fragment", 68);
		TraceIn("synpred1_gql_fragment", 68);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:147:4: ( '(' )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:147:5: '('
			{
			DebugLocation(147, 5);
			Match(input,169,Follow._169_in_synpred1_gql594); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred1_gql_fragment", 68);
			LeaveRule("synpred1_gql_fragment", 68);
			LeaveRule_synpred1_gql_fragment();
		}
	}
	// $ANTLR end synpred1_gql
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred2_gql_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred2_gql_fragment() {}

	// $ANTLR start synpred2_gql
	public void synpred2_gql_fragment()
	{
		EnterRule_synpred2_gql_fragment();
		EnterRule("synpred2_gql_fragment", 69);
		TraceIn("synpred2_gql_fragment", 69);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:321:4: ( SELECT )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:321:5: SELECT
			{
			DebugLocation(321, 5);
			Match(input,SELECT,Follow._SELECT_in_synpred2_gql1746); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred2_gql_fragment", 69);
			LeaveRule("synpred2_gql_fragment", 69);
			LeaveRule_synpred2_gql_fragment();
		}
	}
	// $ANTLR end synpred2_gql
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred3_gql_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred3_gql_fragment() {}

	// $ANTLR start synpred3_gql
	public void synpred3_gql_fragment()
	{
		EnterRule_synpred3_gql_fragment();
		EnterRule("synpred3_gql_fragment", 70);
		TraceIn("synpred3_gql_fragment", 70);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:413:4: ( subquery )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:413:5: subquery
			{
			DebugLocation(413, 5);
			PushFollow(Follow._subquery_in_synpred3_gql2587);
			subquery();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred3_gql_fragment", 70);
			LeaveRule("synpred3_gql_fragment", 70);
			LeaveRule_synpred3_gql_fragment();
		}
	}
	// $ANTLR end synpred3_gql
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _WS_in_parse398 = new BitSet(new ulong[]{0x6000000044200000UL,0x0UL,0x20002000000UL});
		public static readonly BitSet _commands_in_parse402 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000UL});
		public static readonly BitSet _WS_in_parse404 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_parse409 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _command_in_commands432 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2000100000000UL});
		public static readonly BitSet _WS_in_commands435 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _177_in_commands438 = new BitSet(new ulong[]{0x6000000044200000UL,0x0UL,0x20102000000UL});
		public static readonly BitSet _WS_in_commands440 = new BitSet(new ulong[]{0x6000000044200000UL,0x0UL,0x20002000000UL});
		public static readonly BitSet _command_in_commands443 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2000100000000UL});
		public static readonly BitSet _WS_in_commands448 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _177_in_commands451 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _select_command_in_command471 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _use_command_in_command476 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declare_command_in_command481 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_command_in_command486 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _create_view_command_in_command491 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _drop_view_command_in_command496 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _drop_table_command_in_command501 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _select_command_union_in_select_command515 = new BitSet(new ulong[]{0x2UL,0x0UL,0x100000000UL});
		public static readonly BitSet _WS_in_select_command518 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _orderby_clause_in_select_command520 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _select_command_simple_in_select_command_union552 = new BitSet(new ulong[]{0x2UL,0x0UL,0x100000000UL});
		public static readonly BitSet _WS_in_select_command_union559 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000UL});
		public static readonly BitSet _UNION_in_select_command_union561 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000UL});
		public static readonly BitSet _WS_in_select_command_union563 = new BitSet(new ulong[]{0x2000000000000000UL,0x0UL,0x20000000000UL});
		public static readonly BitSet _select_command_simple_in_select_command_union567 = new BitSet(new ulong[]{0x2UL,0x0UL,0x100000000UL});
		public static readonly BitSet _subquery_in_select_command_simple599 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SELECT_in_select_command_simple604 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000UL});
		public static readonly BitSet _WS_in_select_command_simple607 = new BitSet(new ulong[]{0x20000020UL});
		public static readonly BitSet _distinct_clause_in_select_command_simple609 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000UL});
		public static readonly BitSet _WS_in_select_command_simple614 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _top_clause_in_select_command_simple616 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000UL});
		public static readonly BitSet _WS_in_select_command_simple621 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _bottom_clause_in_select_command_simple623 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000UL});
		public static readonly BitSet _WS_in_select_command_simple627 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x10005A0008000000UL});
		public static readonly BitSet _column_list_in_select_command_simple629 = new BitSet(new ulong[]{0x2UL,0x0UL,0x100000000UL});
		public static readonly BitSet _WS_in_select_command_simple632 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _into_clause_in_select_command_simple634 = new BitSet(new ulong[]{0x2UL,0x0UL,0x100000000UL});
		public static readonly BitSet _WS_in_select_command_simple639 = new BitSet(new ulong[]{0x1000000000UL});
		public static readonly BitSet _from_clause_in_select_command_simple641 = new BitSet(new ulong[]{0x2UL,0x0UL,0x100000000UL});
		public static readonly BitSet _WS_in_select_command_simple646 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _where_clause_in_select_command_simple648 = new BitSet(new ulong[]{0x2UL,0x0UL,0x100000000UL});
		public static readonly BitSet _WS_in_select_command_simple653 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _groupby_clause_in_select_command_simple655 = new BitSet(new ulong[]{0x2UL,0x0UL,0x100000000UL});
		public static readonly BitSet _WS_in_select_command_simple660 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _having_clause_in_select_command_simple662 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DISTINCT_in_distinct_clause710 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ALL_in_distinct_clause719 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOP_in_top_clause735 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000UL});
		public static readonly BitSet _WS_in_top_clause737 = new BitSet(new ulong[]{0x8010000403998000UL,0x46UL,0x20008000000UL});
		public static readonly BitSet _expression_atom_in_top_clause739 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BOTTOM_in_bottom_clause760 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000UL});
		public static readonly BitSet _WS_in_bottom_clause762 = new BitSet(new ulong[]{0x8010000403998000UL,0x46UL,0x20008000000UL});
		public static readonly BitSet _expression_atom_in_bottom_clause764 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _column_in_column_list785 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200100000000UL});
		public static readonly BitSet _WS_in_column_list788 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _173_in_column_list791 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x10005A0108000000UL});
		public static readonly BitSet _WS_in_column_list793 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x10005A0008000000UL});
		public static readonly BitSet _column_in_column_list796 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200100000000UL});
		public static readonly BitSet _all_columns_in_column820 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_column825 = new BitSet(new ulong[]{0x2UL,0x0UL,0x100000000UL});
		public static readonly BitSet _WS_in_column828 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _SIMPLE_FILE_in_column830 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _table_alias_in_all_columns855 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800100000000UL});
		public static readonly BitSet _WS_in_all_columns857 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000000UL});
		public static readonly BitSet _175_in_all_columns860 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80100000000UL});
		public static readonly BitSet _WS_in_all_columns862 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000000UL});
		public static readonly BitSet _171_in_all_columns867 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INTO_in_into_clause887 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000UL});
		public static readonly BitSet _WS_in_into_clause889 = new BitSet(new ulong[]{0x8000000000000000UL,0x0UL,0x100000000000000UL});
		public static readonly BitSet _file_in_into_clause891 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FROM_in_from_clause911 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000UL});
		public static readonly BitSet _WS_in_from_clause913 = new BitSet(new ulong[]{0x8000000000000000UL,0x42UL,0x100020000000000UL});
		public static readonly BitSet _from_clause_item_in_from_clause915 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200100000000UL});
		public static readonly BitSet _WS_in_from_clause918 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _173_in_from_clause921 = new BitSet(new ulong[]{0x8000000000000000UL,0x42UL,0x100020100000000UL});
		public static readonly BitSet _WS_in_from_clause923 = new BitSet(new ulong[]{0x8000000000000000UL,0x42UL,0x100020000000000UL});
		public static readonly BitSet _from_clause_item_in_from_clause926 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200100000000UL});
		public static readonly BitSet _WS_in_from_clause931 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _table_alias_in_from_clause933 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_from_clause_item960 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _file_in_from_clause_item973 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _subquery_in_from_clause_item978 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _view_name_in_from_clause_item983 = new BitSet(new ulong[]{0x2UL,0x0UL,0x20100000000UL});
		public static readonly BitSet _WS_in_from_clause_item986 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20000000000UL});
		public static readonly BitSet _169_in_from_clause_item989 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x1000560008000000UL});
		public static readonly BitSet _expression_list_in_from_clause_item991 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _170_in_from_clause_item994 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _169_in_subquery1019 = new BitSet(new ulong[]{0x2000000000000000UL,0x0UL,0x20100000000UL});
		public static readonly BitSet _WS_in_subquery1021 = new BitSet(new ulong[]{0x2000000000000000UL,0x0UL,0x20000000000UL});
		public static readonly BitSet _select_command_in_subquery1024 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40100000000UL});
		public static readonly BitSet _WS_in_subquery1026 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _170_in_subquery1029 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _184_in_file1048 = new BitSet(new ulong[]{0x0UL,0x2UL,0x108000000UL});
		public static readonly BitSet _WS_in_file1050 = new BitSet(new ulong[]{0x0UL,0x2UL,0x8000000UL});
		public static readonly BitSet _file_spec_in_file1053 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000100000000UL});
		public static readonly BitSet _WS_in_file1056 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000000000UL});
		public static readonly BitSet _file_option_in_file1058 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000100000000UL});
		public static readonly BitSet _WS_in_file1062 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000000000UL});
		public static readonly BitSet _185_in_file1065 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _184_in_file1082 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20100000000UL});
		public static readonly BitSet _WS_in_file1084 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20000000000UL});
		public static readonly BitSet _subquery_in_file1087 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000100000000UL});
		public static readonly BitSet _WS_in_file1089 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000000000UL});
		public static readonly BitSet _185_in_file1092 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SIMPLE_FILE_in_file1105 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _string_in_file_spec1124 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_in_file_spec1129 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _174_in_file_option1141 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _file_option_name_in_file_option1143 = new BitSet(new ulong[]{0x2UL,0x0UL,0x20000100000000UL});
		public static readonly BitSet _WS_in_file_option1147 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20000000000000UL});
		public static readonly BitSet _181_in_file_option1150 = new BitSet(new ulong[]{0x10000000000000UL,0x42UL,0x108000000UL});
		public static readonly BitSet _WS_in_file_option1152 = new BitSet(new ulong[]{0x10000000000000UL,0x42UL,0x8000000UL});
		public static readonly BitSet _file_option_value_in_file_option1155 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_file_option_name1179 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_file_option_value1191 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_file_option_value1195 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_file_option_value1199 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_in_file_option_value1203 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHERE_in_where_clause1215 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000UL});
		public static readonly BitSet _WS_in_where_clause1217 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x1000520008000000UL});
		public static readonly BitSet _expression_in_where_clause1219 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GROUP_in_groupby_clause1238 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000UL});
		public static readonly BitSet _WS_in_groupby_clause1240 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _BY_in_groupby_clause1242 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000UL});
		public static readonly BitSet _WS_in_groupby_clause1244 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x1000520008000000UL});
		public static readonly BitSet _orderby_column_list_in_groupby_clause1246 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _HAVING_in_having_clause1267 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000UL});
		public static readonly BitSet _WS_in_having_clause1269 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x1000520008000000UL});
		public static readonly BitSet _expression_in_having_clause1271 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ORDER_in_orderby_clause1292 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000UL});
		public static readonly BitSet _WS_in_orderby_clause1294 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _BY_in_orderby_clause1296 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000UL});
		public static readonly BitSet _WS_in_orderby_clause1298 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x1000520008000000UL});
		public static readonly BitSet _orderby_column_list_in_orderby_clause1300 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _orderby_column_in_orderby_column_list1321 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200100000000UL});
		public static readonly BitSet _WS_in_orderby_column_list1324 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _173_in_orderby_column_list1327 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x1000520108000000UL});
		public static readonly BitSet _WS_in_orderby_column_list1329 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x1000520008000000UL});
		public static readonly BitSet _orderby_column_in_orderby_column_list1332 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200100000000UL});
		public static readonly BitSet _expression_in_orderby_column1352 = new BitSet(new ulong[]{0x2UL,0x0UL,0x100000000UL});
		public static readonly BitSet _WS_in_orderby_column1355 = new BitSet(new ulong[]{0x100000008000200UL});
		public static readonly BitSet _orderby_direction_in_orderby_column1357 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASC_in_orderby_direction1382 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DESC_in_orderby_direction1391 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ORIG_in_orderby_direction1400 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _USE_in_use_command1418 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000UL});
		public static readonly BitSet _WS_in_use_command1420 = new BitSet(new ulong[]{0x8000000000000000UL,0x0UL,0x100000000000000UL});
		public static readonly BitSet _file_in_use_command1422 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DECLARE_in_declare_command1444 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000UL});
		public static readonly BitSet _WS_in_declare_command1446 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _declaration_list_in_declare_command1448 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_in_declaration_list1465 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200100000000UL});
		public static readonly BitSet _WS_in_declaration_list1468 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _173_in_declaration_list1471 = new BitSet(new ulong[]{0x0UL,0x0UL,0x108000000UL});
		public static readonly BitSet _WS_in_declaration_list1473 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _declaration_in_declaration_list1476 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200100000000UL});
		public static readonly BitSet _variable_in_declaration1500 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000UL});
		public static readonly BitSet _WS_in_declaration1502 = new BitSet(new ulong[]{0x100UL,0x40UL});
		public static readonly BitSet _AS_in_declaration1505 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000UL});
		public static readonly BitSet _WS_in_declaration1507 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _datatype_in_declaration1511 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CREATE_in_create_view_command1536 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000UL});
		public static readonly BitSet _WS_in_create_view_command1538 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000UL});
		public static readonly BitSet _VIEW_in_create_view_command1540 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000UL});
		public static readonly BitSet _WS_in_create_view_command1542 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _view_name_in_create_view_command1544 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20100000000UL});
		public static readonly BitSet _WS_in_create_view_command1547 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20000000000UL});
		public static readonly BitSet _169_in_create_view_command1550 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _declaration_list_in_create_view_command1552 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _170_in_create_view_command1554 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000UL});
		public static readonly BitSet _WS_in_create_view_command1558 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _AS_in_create_view_command1560 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000UL});
		public static readonly BitSet _WS_in_create_view_command1562 = new BitSet(new ulong[]{0x2000000000000000UL,0x0UL,0x20000000000UL});
		public static readonly BitSet _select_command_in_create_view_command1564 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DROP_in_drop_view_command1590 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000UL});
		public static readonly BitSet _WS_in_drop_view_command1592 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000UL});
		public static readonly BitSet _VIEW_in_drop_view_command1594 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000UL});
		public static readonly BitSet _WS_in_drop_view_command1596 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _view_name_in_drop_view_command1598 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_view_name1618 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DROP_in_drop_table_command1640 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000UL});
		public static readonly BitSet _WS_in_drop_table_command1642 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _TABLE_in_drop_table_command1644 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000UL});
		public static readonly BitSet _WS_in_drop_table_command1646 = new BitSet(new ulong[]{0x8000000000000000UL,0x0UL,0x100000000000000UL});
		public static readonly BitSet _file_in_drop_table_command1648 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SET_in_set_command1672 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000UL});
		public static readonly BitSet _WS_in_set_command1674 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _variable_in_set_command1676 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20000100000000UL});
		public static readonly BitSet _WS_in_set_command1678 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20000000000000UL});
		public static readonly BitSet _181_in_set_command1681 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x1000520108000000UL});
		public static readonly BitSet _WS_in_set_command1683 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x1000520008000000UL});
		public static readonly BitSet _expression_in_set_command1686 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_expression_list1711 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200100000000UL});
		public static readonly BitSet _WS_in_expression_list1714 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _173_in_expression_list1717 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x1000520108000000UL});
		public static readonly BitSet _WS_in_expression_list1719 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x1000520008000000UL});
		public static readonly BitSet _expression_in_expression_list1722 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200100000000UL});
		public static readonly BitSet _select_command_in_expression_list_or_select_command1751 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_list_in_expression_list_or_select_command1756 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_7_in_expression1769 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_6_in_expression_71785 = new BitSet(new ulong[]{0x2UL,0x0UL,0x100000000UL});
		public static readonly BitSet _WS_in_expression_71792 = new BitSet(new ulong[]{0x4A840000000800UL,0x0UL,0xFC007000000000UL});
		public static readonly BitSet _op_7_in_expression_71797 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000UL});
		public static readonly BitSet _WS_in_expression_71799 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x1000520008000000UL});
		public static readonly BitSet _expression_6_in_expression_71803 = new BitSet(new ulong[]{0x2UL,0x0UL,0x100000000UL});
		public static readonly BitSet _IN_in_expression_71822 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20100000000UL});
		public static readonly BitSet _WS_in_expression_71824 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20000000000UL});
		public static readonly BitSet _169_in_expression_71827 = new BitSet(new ulong[]{0xA018000403998000UL,0x46UL,0x1000520108000000UL});
		public static readonly BitSet _WS_in_expression_71829 = new BitSet(new ulong[]{0xA018000403998000UL,0x46UL,0x1000520008000000UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_71832 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40100000000UL});
		public static readonly BitSet _WS_in_expression_71834 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _170_in_expression_71837 = new BitSet(new ulong[]{0x2UL,0x0UL,0x100000000UL});
		public static readonly BitSet _NOT_in_expression_71855 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000UL});
		public static readonly BitSet _WS_in_expression_71857 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _IN_in_expression_71859 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20100000000UL});
		public static readonly BitSet _WS_in_expression_71861 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20000000000UL});
		public static readonly BitSet _169_in_expression_71864 = new BitSet(new ulong[]{0xA018000403998000UL,0x46UL,0x1000520108000000UL});
		public static readonly BitSet _WS_in_expression_71866 = new BitSet(new ulong[]{0xA018000403998000UL,0x46UL,0x1000520008000000UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_71870 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40100000000UL});
		public static readonly BitSet _WS_in_expression_71873 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _170_in_expression_71876 = new BitSet(new ulong[]{0x2UL,0x0UL,0x100000000UL});
		public static readonly BitSet _op_4_in_expression_71894 = new BitSet(new ulong[]{0x80UL,0x1UL,0x100000000UL});
		public static readonly BitSet _WS_in_expression_71896 = new BitSet(new ulong[]{0x80UL,0x1UL});
		public static readonly BitSet _SOME_in_expression_71900 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20100000000UL});
		public static readonly BitSet _ANY_in_expression_71904 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20100000000UL});
		public static readonly BitSet _WS_in_expression_71907 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20000000000UL});
		public static readonly BitSet _169_in_expression_71910 = new BitSet(new ulong[]{0xA018000403998000UL,0x46UL,0x1000520008000000UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_71912 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _170_in_expression_71914 = new BitSet(new ulong[]{0x2UL,0x0UL,0x100000000UL});
		public static readonly BitSet _op_4_in_expression_71934 = new BitSet(new ulong[]{0x20UL,0x0UL,0x100000000UL});
		public static readonly BitSet _WS_in_expression_71936 = new BitSet(new ulong[]{0x20UL});
		public static readonly BitSet _ALL_in_expression_71939 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20100000000UL});
		public static readonly BitSet _WS_in_expression_71941 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20000000000UL});
		public static readonly BitSet _169_in_expression_71944 = new BitSet(new ulong[]{0xA018000403998000UL,0x46UL,0x1000520008000000UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_71946 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _170_in_expression_71948 = new BitSet(new ulong[]{0x2UL,0x0UL,0x100000000UL});
		public static readonly BitSet _OR_in_op_71978 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BETWEEN_in_op_71987 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_71996 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000UL});
		public static readonly BitSet _WS_in_op_71998 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _BETWEEN_in_op_72000 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_5_in_expression_62019 = new BitSet(new ulong[]{0x2UL,0x0UL,0x100000000UL});
		public static readonly BitSet _WS_in_expression_62026 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _op_6_in_expression_62028 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000UL});
		public static readonly BitSet _WS_in_expression_62030 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x1000520008000000UL});
		public static readonly BitSet _expression_5_in_expression_62034 = new BitSet(new ulong[]{0x2UL,0x0UL,0x100000000UL});
		public static readonly BitSet _AND_in_op_62062 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _op_5_in_expression_52080 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000UL});
		public static readonly BitSet _WS_in_expression_52082 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x1000520008000000UL});
		public static readonly BitSet _expression_5_in_expression_52084 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_4_in_expression_52099 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_52110 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_3_in_expression_42129 = new BitSet(new ulong[]{0xA800000000002UL,0x0UL,0xFC007100000000UL});
		public static readonly BitSet _WS_in_expression_42136 = new BitSet(new ulong[]{0xA800000000000UL,0x0UL,0xFC007000000000UL});
		public static readonly BitSet _op_4_in_expression_42139 = new BitSet(new ulong[]{0x8010000403998000UL,0x46UL,0x1000520108000000UL});
		public static readonly BitSet _WS_in_expression_42141 = new BitSet(new ulong[]{0x8010000403998000UL,0x46UL,0x1000520008000000UL});
		public static readonly BitSet _expression_3_in_expression_42146 = new BitSet(new ulong[]{0xA800000000002UL,0x0UL,0xFC007100000000UL});
		public static readonly BitSet _181_in_op_42172 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _183_in_op_42181 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _179_in_op_42191 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _180_in_op_42201 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _165_in_op_42210 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _166_in_op_42219 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _164_in_op_42228 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _182_in_op_42237 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _178_in_op_42247 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LIKE_in_op_42256 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_42265 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000UL});
		public static readonly BitSet _WS_in_op_42267 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _LIKE_in_op_42269 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MATCH_in_op_42278 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_42287 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000UL});
		public static readonly BitSet _WS_in_op_42289 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _MATCH_in_op_42291 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_2_in_expression_32310 = new BitSet(new ulong[]{0x2UL,0x0UL,0xC00510100000000UL});
		public static readonly BitSet _WS_in_expression_32317 = new BitSet(new ulong[]{0x0UL,0x0UL,0xC00510000000000UL});
		public static readonly BitSet _op_3_in_expression_32320 = new BitSet(new ulong[]{0x8010000403998000UL,0x46UL,0x1000520108000000UL});
		public static readonly BitSet _WS_in_expression_32322 = new BitSet(new ulong[]{0x8010000403998000UL,0x46UL,0x1000520008000000UL});
		public static readonly BitSet _expression_2_in_expression_32327 = new BitSet(new ulong[]{0x2UL,0x0UL,0xC00510100000000UL});
		public static readonly BitSet _172_in_op_32353 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _174_in_op_32362 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _168_in_op_32371 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _187_in_op_32380 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _186_in_op_32389 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_1_in_expression_22409 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1088100000000UL});
		public static readonly BitSet _WS_in_expression_22416 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1088000000000UL});
		public static readonly BitSet _op_2_in_expression_22419 = new BitSet(new ulong[]{0x8010000403998000UL,0x46UL,0x1000520108000000UL});
		public static readonly BitSet _WS_in_expression_22421 = new BitSet(new ulong[]{0x8010000403998000UL,0x46UL,0x1000520008000000UL});
		public static readonly BitSet _expression_1_in_expression_22426 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1088100000000UL});
		public static readonly BitSet _171_in_op_22452 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _176_in_op_22461 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _167_in_op_22470 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _op_1_in_expression_12486 = new BitSet(new ulong[]{0x8010000403998000UL,0x46UL,0x1000520108000000UL});
		public static readonly BitSet _WS_in_expression_12488 = new BitSet(new ulong[]{0x8010000403998000UL,0x46UL,0x1000520008000000UL});
		public static readonly BitSet _expression_1_in_expression_12491 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_atom_in_expression_12506 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _188_in_op_12516 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _172_in_op_12526 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _174_in_op_12535 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _number_in_expression_atom2550 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _string_in_expression_atom2563 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SYSTEMVAR_in_expression_atom2568 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_in_expression_atom2581 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _subquery_in_expression_atom2592 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _169_in_expression_atom2597 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x1000520008000000UL});
		public static readonly BitSet _expression_in_expression_atom2599 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _170_in_expression_atom2601 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functioncall_or_column_in_expression_atom2610 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _specialfunctioncall_in_expression_atom2615 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _case_in_expression_atom2620 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXISTS_in_expression_atom2625 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20100000000UL});
		public static readonly BitSet _WS_in_expression_atom2627 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20000000000UL});
		public static readonly BitSet _169_in_expression_atom2630 = new BitSet(new ulong[]{0x2000000000000000UL,0x0UL,0x20100000000UL});
		public static readonly BitSet _WS_in_expression_atom2632 = new BitSet(new ulong[]{0x2000000000000000UL,0x0UL,0x20000000000UL});
		public static readonly BitSet _select_command_in_expression_atom2635 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40100000000UL});
		public static readonly BitSet _WS_in_expression_atom2637 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _170_in_expression_atom2640 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_functioncall_or_column2660 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20100000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2662 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20000000000UL});
		public static readonly BitSet _169_in_functioncall_or_column2665 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x1000560108000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2667 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x1000560008000000UL});
		public static readonly BitSet _expression_in_functioncall_or_column2671 = new BitSet(new ulong[]{0x0UL,0x0UL,0x240100000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2673 = new BitSet(new ulong[]{0x0UL,0x0UL,0x240000000000UL});
		public static readonly BitSet _173_in_functioncall_or_column2677 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x1000520108000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2679 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x1000520008000000UL});
		public static readonly BitSet _expression_in_functioncall_or_column2682 = new BitSet(new ulong[]{0x0UL,0x0UL,0x240100000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2684 = new BitSet(new ulong[]{0x0UL,0x0UL,0x240000000000UL});
		public static readonly BitSet _170_in_functioncall_or_column2691 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COUNT_in_functioncall_or_column2707 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20100000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2709 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20000000000UL});
		public static readonly BitSet _169_in_functioncall_or_column2712 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x1000520108000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2714 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x1000520008000000UL});
		public static readonly BitSet _expression_in_functioncall_or_column2717 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40100000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2719 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _170_in_functioncall_or_column2722 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COUNT_in_functioncall_or_column2737 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20100000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2739 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20000000000UL});
		public static readonly BitSet _169_in_functioncall_or_column2742 = new BitSet(new ulong[]{0x20000000UL,0x0UL,0x100000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2744 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _DISTINCT_in_functioncall_or_column2747 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2749 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x1000520008000000UL});
		public static readonly BitSet _expression_in_functioncall_or_column2751 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40100000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2753 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _170_in_functioncall_or_column2756 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COUNT_in_functioncall_or_column2771 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20100000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2773 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20000000000UL});
		public static readonly BitSet _169_in_functioncall_or_column2776 = new BitSet(new ulong[]{0x8000000000000000UL,0x0UL,0x80100000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2778 = new BitSet(new ulong[]{0x8000000000000000UL,0x0UL,0x80000000000UL});
		public static readonly BitSet _all_columns_in_functioncall_or_column2781 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40100000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2783 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _170_in_functioncall_or_column2786 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COUNT_in_functioncall_or_column2801 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20100000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2803 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20000000000UL});
		public static readonly BitSet _169_in_functioncall_or_column2806 = new BitSet(new ulong[]{0x20000000UL,0x0UL,0x100000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2808 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _DISTINCT_in_functioncall_or_column2811 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2813 = new BitSet(new ulong[]{0x8000000000000000UL,0x0UL,0x80000000000UL});
		public static readonly BitSet _all_columns_in_functioncall_or_column2815 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40100000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2817 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _170_in_functioncall_or_column2820 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _table_alias_in_functioncall_or_column2838 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800100000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2840 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000000UL});
		public static readonly BitSet _175_in_functioncall_or_column2843 = new BitSet(new ulong[]{0x8000000000000000UL,0x0UL,0x100000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2845 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _column_name_in_functioncall_or_column2850 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SIMPLE_FILE_in_column_name2873 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SIMPLE_FILE_in_table_alias2884 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CONVERT_in_specialfunctioncall2904 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20100000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2906 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20000000000UL});
		public static readonly BitSet _169_in_specialfunctioncall2909 = new BitSet(new ulong[]{0x0UL,0x40UL,0x100000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2911 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _TOKEN_in_specialfunctioncall2914 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200100000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2916 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _173_in_specialfunctioncall2919 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x1000520108000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2921 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x1000520008000000UL});
		public static readonly BitSet _expression_in_specialfunctioncall2924 = new BitSet(new ulong[]{0x0UL,0x0UL,0x240100000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2926 = new BitSet(new ulong[]{0x0UL,0x0UL,0x240000000000UL});
		public static readonly BitSet _173_in_specialfunctioncall2930 = new BitSet(new ulong[]{0x0UL,0x2UL,0x100000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2932 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _STRING_in_specialfunctioncall2935 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40100000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2937 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _170_in_specialfunctioncall2942 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CAST_in_specialfunctioncall2960 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20100000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2962 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20000000000UL});
		public static readonly BitSet _169_in_specialfunctioncall2965 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x1000520108000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2967 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x1000520008000000UL});
		public static readonly BitSet _expression_in_specialfunctioncall2970 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2972 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _AS_in_specialfunctioncall2974 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2976 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _datatype_in_specialfunctioncall2978 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40100000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2980 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _170_in_specialfunctioncall2983 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DATEADD_in_specialfunctioncall2998 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20100000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3000 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20000000000UL});
		public static readonly BitSet _169_in_specialfunctioncall3003 = new BitSet(new ulong[]{0x0UL,0x40UL,0x100000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3005 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _datepart_in_specialfunctioncall3008 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200100000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3010 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _173_in_specialfunctioncall3013 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x1000520108000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3015 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x1000520008000000UL});
		public static readonly BitSet _expression_in_specialfunctioncall3018 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200100000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3020 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _173_in_specialfunctioncall3023 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x1000520108000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3025 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x1000520008000000UL});
		public static readonly BitSet _expression_in_specialfunctioncall3028 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40100000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3030 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _170_in_specialfunctioncall3033 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DATEDIFF_in_specialfunctioncall3051 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20100000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3053 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20000000000UL});
		public static readonly BitSet _169_in_specialfunctioncall3056 = new BitSet(new ulong[]{0x0UL,0x40UL,0x100000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3058 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _datepart_in_specialfunctioncall3061 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200100000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3063 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _173_in_specialfunctioncall3066 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x1000520108000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3068 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x1000520008000000UL});
		public static readonly BitSet _expression_in_specialfunctioncall3071 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200100000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3073 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _173_in_specialfunctioncall3076 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x1000520108000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3078 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x1000520008000000UL});
		public static readonly BitSet _expression_in_specialfunctioncall3081 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40100000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3083 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _170_in_specialfunctioncall3086 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DATEPART_in_specialfunctioncall3104 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20100000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3106 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20000000000UL});
		public static readonly BitSet _169_in_specialfunctioncall3109 = new BitSet(new ulong[]{0x0UL,0x40UL,0x100000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3111 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _datepart_in_specialfunctioncall3114 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200100000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3116 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _173_in_specialfunctioncall3119 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x1000520108000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3121 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x1000520008000000UL});
		public static readonly BitSet _expression_in_specialfunctioncall3124 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40100000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3126 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _170_in_specialfunctioncall3129 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_datepart3153 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_number3173 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_string3181 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_datatype3201 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VARIABLE_in_variable3213 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CASE_in_case3233 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000UL});
		public static readonly BitSet _WS_in_case3235 = new BitSet(new ulong[]{0x8018000703998000UL,0x46UL,0x1000520048000000UL});
		public static readonly BitSet _expression_in_case3238 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000UL});
		public static readonly BitSet _WS_in_case3240 = new BitSet(new ulong[]{0x300000000UL,0x0UL,0x40000000UL});
		public static readonly BitSet _case_when_in_case3245 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000UL});
		public static readonly BitSet _WS_in_case3247 = new BitSet(new ulong[]{0x300000000UL,0x0UL,0x40000000UL});
		public static readonly BitSet _case_else_in_case3252 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000UL});
		public static readonly BitSet _WS_in_case3254 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _END_in_case3258 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHEN_in_case_when3286 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000UL});
		public static readonly BitSet _WS_in_case_when3288 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x1000520008000000UL});
		public static readonly BitSet _expression_in_case_when3292 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000UL});
		public static readonly BitSet _WS_in_case_when3294 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _THEN_in_case_when3296 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000UL});
		public static readonly BitSet _WS_in_case_when3298 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x1000520008000000UL});
		public static readonly BitSet _expression_in_case_when3302 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ELSE_in_case_else3327 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000UL});
		public static readonly BitSet _WS_in_case_else3329 = new BitSet(new ulong[]{0x8018000403998000UL,0x46UL,0x1000520008000000UL});
		public static readonly BitSet _expression_in_case_else3331 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _169_in_synpred1_gql594 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SELECT_in_synpred2_gql1746 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _subquery_in_synpred3_gql2587 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  FxGqlLib 
