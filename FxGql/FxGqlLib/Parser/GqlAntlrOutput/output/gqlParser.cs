//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g 2012-07-06 12:29:01

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591


// `XXX' does not need a CLSCompliant attribute because the assembly is not marked as CLS-compliant (CS3021)
#pragma warning disable 3021
// The private field `XXX' is assigned but its value is never used (CS0414)
#pragma warning disable 414


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  FxGqlLib 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class gqlParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "A", "ALL", "AND", "ANY", "AS", "ASC", "B", "BETWEEN", "BY", "C", "CASE", "CAST", "COMMENT_BLOCK", "COMMENT_LINE", "CONVERT", "CREATE", "D", "DECLARE", "DESC", "DIGIT", "DISTINCT", "DROP", "E", "ELSE", "END", "EXISTS", "F", "FROM", "G", "GROUP", "H", "I", "IN", "INTO", "J", "K", "L", "LIKE", "M", "MATCH", "N", "NOT", "NUMBER", "O", "OR", "ORDER", "ORIG", "P", "Q", "R", "S", "SELECT", "SET", "SIMPLE_FILE", "SOME", "STRING", "SYSTEMVAR", "T", "THEN", "TOKEN", "TOP", "T_ALL", "T_AND", "T_ANY", "T_BETWEEN", "T_BITWISE_AND", "T_BITWISE_NOT", "T_BITWISE_OR", "T_BITWISE_XOR", "T_CASE", "T_CASE_ELSE", "T_CASE_WHEN", "T_COLUMN", "T_COLUMNLIST", "T_CONVERT", "T_CREATE_VIEW", "T_DECLARATION", "T_DECLARE", "T_DISTINCT", "T_DIVIDE", "T_DROP_VIEW", "T_EQUAL", "T_EXISTS", "T_EXPRESSIONLIST", "T_FILE", "T_FILEOPTION", "T_FROM", "T_FUNCTIONCALL", "T_GREATER", "T_GROUPBY", "T_GROUPBY_ORIG", "T_IN", "T_INTEGER", "T_INTO", "T_LESS", "T_LIKE", "T_MATCH", "T_MINUS", "T_MODULO", "T_NOT", "T_NOTBETWEEN", "T_NOTEQUAL", "T_NOTGREATER", "T_NOTIN", "T_NOTLESS", "T_NOTLIKE", "T_NOTMATCH", "T_OP_BINARY", "T_OP_UNARY", "T_OR", "T_ORDERBY", "T_ORDERBY_ASC", "T_ORDERBY_COLUMN", "T_ORDERBY_DESC", "T_ORDERBY_ORIG", "T_PLUS", "T_PRODUCT", "T_ROOT", "T_SELECT", "T_SET_VARIABLE", "T_STRING", "T_SUBQUERY", "T_SYSTEMVAR", "T_TABLE_ALIAS", "T_TOP", "T_USE", "T_VARIABLE", "T_VIEW_NAME", "T_WHERE", "U", "USE", "V", "VARIABLE", "VIEW", "W", "WHEN", "WHERE", "WS", "X", "Y", "Z", "'!<'", "'!='", "'!>'", "'%'", "'&'", "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", "';'", "'<'", "'<='", "'<>'", "'='", "'>'", "'>='", "'['", "']'", "'^'", "'|'", "'~'"
	};
	public const int EOF=-1;
	public const int T__145=145;
	public const int T__146=146;
	public const int T__147=147;
	public const int T__148=148;
	public const int T__149=149;
	public const int T__150=150;
	public const int T__151=151;
	public const int T__152=152;
	public const int T__153=153;
	public const int T__154=154;
	public const int T__155=155;
	public const int T__156=156;
	public const int T__157=157;
	public const int T__158=158;
	public const int T__159=159;
	public const int T__160=160;
	public const int T__161=161;
	public const int T__162=162;
	public const int T__163=163;
	public const int T__164=164;
	public const int T__165=165;
	public const int T__166=166;
	public const int T__167=167;
	public const int T__168=168;
	public const int T__169=169;
	public const int A=4;
	public const int ALL=5;
	public const int AND=6;
	public const int ANY=7;
	public const int AS=8;
	public const int ASC=9;
	public const int B=10;
	public const int BETWEEN=11;
	public const int BY=12;
	public const int C=13;
	public const int CASE=14;
	public const int CAST=15;
	public const int COMMENT_BLOCK=16;
	public const int COMMENT_LINE=17;
	public const int CONVERT=18;
	public const int CREATE=19;
	public const int D=20;
	public const int DECLARE=21;
	public const int DESC=22;
	public const int DIGIT=23;
	public const int DISTINCT=24;
	public const int DROP=25;
	public const int E=26;
	public const int ELSE=27;
	public const int END=28;
	public const int EXISTS=29;
	public const int F=30;
	public const int FROM=31;
	public const int G=32;
	public const int GROUP=33;
	public const int H=34;
	public const int I=35;
	public const int IN=36;
	public const int INTO=37;
	public const int J=38;
	public const int K=39;
	public const int L=40;
	public const int LIKE=41;
	public const int M=42;
	public const int MATCH=43;
	public const int N=44;
	public const int NOT=45;
	public const int NUMBER=46;
	public const int O=47;
	public const int OR=48;
	public const int ORDER=49;
	public const int ORIG=50;
	public const int P=51;
	public const int Q=52;
	public const int R=53;
	public const int S=54;
	public const int SELECT=55;
	public const int SET=56;
	public const int SIMPLE_FILE=57;
	public const int SOME=58;
	public const int STRING=59;
	public const int SYSTEMVAR=60;
	public const int T=61;
	public const int THEN=62;
	public const int TOKEN=63;
	public const int TOP=64;
	public const int T_ALL=65;
	public const int T_AND=66;
	public const int T_ANY=67;
	public const int T_BETWEEN=68;
	public const int T_BITWISE_AND=69;
	public const int T_BITWISE_NOT=70;
	public const int T_BITWISE_OR=71;
	public const int T_BITWISE_XOR=72;
	public const int T_CASE=73;
	public const int T_CASE_ELSE=74;
	public const int T_CASE_WHEN=75;
	public const int T_COLUMN=76;
	public const int T_COLUMNLIST=77;
	public const int T_CONVERT=78;
	public const int T_CREATE_VIEW=79;
	public const int T_DECLARATION=80;
	public const int T_DECLARE=81;
	public const int T_DISTINCT=82;
	public const int T_DIVIDE=83;
	public const int T_DROP_VIEW=84;
	public const int T_EQUAL=85;
	public const int T_EXISTS=86;
	public const int T_EXPRESSIONLIST=87;
	public const int T_FILE=88;
	public const int T_FILEOPTION=89;
	public const int T_FROM=90;
	public const int T_FUNCTIONCALL=91;
	public const int T_GREATER=92;
	public const int T_GROUPBY=93;
	public const int T_GROUPBY_ORIG=94;
	public const int T_IN=95;
	public const int T_INTEGER=96;
	public const int T_INTO=97;
	public const int T_LESS=98;
	public const int T_LIKE=99;
	public const int T_MATCH=100;
	public const int T_MINUS=101;
	public const int T_MODULO=102;
	public const int T_NOT=103;
	public const int T_NOTBETWEEN=104;
	public const int T_NOTEQUAL=105;
	public const int T_NOTGREATER=106;
	public const int T_NOTIN=107;
	public const int T_NOTLESS=108;
	public const int T_NOTLIKE=109;
	public const int T_NOTMATCH=110;
	public const int T_OP_BINARY=111;
	public const int T_OP_UNARY=112;
	public const int T_OR=113;
	public const int T_ORDERBY=114;
	public const int T_ORDERBY_ASC=115;
	public const int T_ORDERBY_COLUMN=116;
	public const int T_ORDERBY_DESC=117;
	public const int T_ORDERBY_ORIG=118;
	public const int T_PLUS=119;
	public const int T_PRODUCT=120;
	public const int T_ROOT=121;
	public const int T_SELECT=122;
	public const int T_SET_VARIABLE=123;
	public const int T_STRING=124;
	public const int T_SUBQUERY=125;
	public const int T_SYSTEMVAR=126;
	public const int T_TABLE_ALIAS=127;
	public const int T_TOP=128;
	public const int T_USE=129;
	public const int T_VARIABLE=130;
	public const int T_VIEW_NAME=131;
	public const int T_WHERE=132;
	public const int U=133;
	public const int USE=134;
	public const int V=135;
	public const int VARIABLE=136;
	public const int VIEW=137;
	public const int W=138;
	public const int WHEN=139;
	public const int WHERE=140;
	public const int WS=141;
	public const int X=142;
	public const int Y=143;
	public const int Z=144;

	#if ANTLR_DEBUG
		private static readonly bool[] decisionCanBacktrack =
			new bool[]
			{
				false, // invalid decision
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false
			};
	#else
		private static readonly bool[] decisionCanBacktrack = new bool[0];
	#endif
	public gqlParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public gqlParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}
	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return gqlParser.tokenNames; } }
	public override string GrammarFileName { get { return "C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g"; } }


	[Conditional("ANTLR_TRACE")]
	protected virtual void OnCreated() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

	#region Rules

	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_parse() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_parse() {}

	// $ANTLR start "parse"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:99:1: parse : ( WS )? ( commands ( WS )? )? EOF -> ^( T_ROOT ( commands )? ) ;
	[GrammarRule("parse")]
	private AstParserRuleReturnScope<object, IToken> parse()
	{
		EnterRule_parse();
		EnterRule("parse", 1);
		TraceIn("parse", 1);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS1 = default(IToken);
	    IToken WS3 = default(IToken);
	    IToken EOF4 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> commands2 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS1_tree = default(object);
	    object WS3_tree = default(object);
	    object EOF4_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
	    RewriteRuleSubtreeStream stream_commands=new RewriteRuleSubtreeStream(adaptor,"rule commands");
		try { DebugEnterRule(GrammarFileName, "parse");
		DebugLocation(99, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:100:2: ( ( WS )? ( commands ( WS )? )? EOF -> ^( T_ROOT ( commands )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:100:4: ( WS )? ( commands ( WS )? )? EOF
			{
			DebugLocation(100, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:100:4: ( WS )?
			int alt1=2;
			try { DebugEnterSubRule(1);
			try { DebugEnterDecision(1, decisionCanBacktrack[1]);
			int LA1_0 = input.LA(1);

			if ((LA1_0==WS))
			{
				alt1 = 1;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:100:4: WS
				{
				DebugLocation(100, 4);
				WS1=(IToken)Match(input,WS,Follow._WS_in_parse352);  
				stream_WS.Add(WS1);


				}
				break;

			}
			} finally { DebugExitSubRule(1); }

			DebugLocation(100, 8);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:100:8: ( commands ( WS )? )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, decisionCanBacktrack[3]);
			int LA3_0 = input.LA(1);

			if ((LA3_0==CREATE||LA3_0==DECLARE||LA3_0==DROP||(LA3_0>=SELECT && LA3_0<=SET)||LA3_0==USE))
			{
				alt3 = 1;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:100:9: commands ( WS )?
				{
				DebugLocation(100, 9);
				PushFollow(Follow._commands_in_parse356);
				commands2=commands();
				PopFollow();

				stream_commands.Add(commands2.Tree);
				DebugLocation(100, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:100:18: ( WS )?
				int alt2=2;
				try { DebugEnterSubRule(2);
				try { DebugEnterDecision(2, decisionCanBacktrack[2]);
				int LA2_0 = input.LA(1);

				if ((LA2_0==WS))
				{
					alt2 = 1;
				}
				} finally { DebugExitDecision(2); }
				switch (alt2)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:100:18: WS
					{
					DebugLocation(100, 18);
					WS3=(IToken)Match(input,WS,Follow._WS_in_parse358);  
					stream_WS.Add(WS3);


					}
					break;

				}
				} finally { DebugExitSubRule(2); }


				}
				break;

			}
			} finally { DebugExitSubRule(3); }

			DebugLocation(100, 24);
			EOF4=(IToken)Match(input,EOF,Follow._EOF_in_parse363);  
			stream_EOF.Add(EOF4);



			{
			// AST REWRITE
			// elements: commands
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 101:2: -> ^( T_ROOT ( commands )? )
			{
				DebugLocation(101, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:101:5: ^( T_ROOT ( commands )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(101, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_ROOT, "T_ROOT"), root_1);

				DebugLocation(101, 14);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:101:14: ( commands )?
				if (stream_commands.HasNext)
				{
					DebugLocation(101, 14);
					adaptor.AddChild(root_1, stream_commands.NextTree());

				}
				stream_commands.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parse", 1);
			LeaveRule("parse", 1);
			LeaveRule_parse();
	    }
	 	DebugLocation(102, 1);
		} finally { DebugExitRule(GrammarFileName, "parse"); }
		return retval;

	}
	// $ANTLR end "parse"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_commands() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_commands() {}

	// $ANTLR start "commands"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:104:1: commands : command ( ( WS )? ( ';' ( WS )? )? command )* ( ( WS )? ';' )? -> ( command )+ ;
	[GrammarRule("commands")]
	private AstParserRuleReturnScope<object, IToken> commands()
	{
		EnterRule_commands();
		EnterRule("commands", 2);
		TraceIn("commands", 2);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS6 = default(IToken);
	    IToken char_literal7 = default(IToken);
	    IToken WS8 = default(IToken);
	    IToken WS10 = default(IToken);
	    IToken char_literal11 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> command5 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> command9 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS6_tree = default(object);
	    object char_literal7_tree = default(object);
	    object WS8_tree = default(object);
	    object WS10_tree = default(object);
	    object char_literal11_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_158=new RewriteRuleITokenStream(adaptor,"token 158");
	    RewriteRuleSubtreeStream stream_command=new RewriteRuleSubtreeStream(adaptor,"rule command");
		try { DebugEnterRule(GrammarFileName, "commands");
		DebugLocation(104, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:105:2: ( command ( ( WS )? ( ';' ( WS )? )? command )* ( ( WS )? ';' )? -> ( command )+ )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:105:4: command ( ( WS )? ( ';' ( WS )? )? command )* ( ( WS )? ';' )?
			{
			DebugLocation(105, 4);
			PushFollow(Follow._command_in_commands386);
			command5=command();
			PopFollow();

			stream_command.Add(command5.Tree);
			DebugLocation(105, 12);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:105:12: ( ( WS )? ( ';' ( WS )? )? command )*
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, decisionCanBacktrack[7]);
				switch (input.LA(1))
				{
				case WS:
					{
					int LA7_1 = input.LA(2);

					if ((LA7_1==158))
					{
						int LA7_2 = input.LA(3);

						if ((LA7_2==WS))
						{
							int LA7_5 = input.LA(4);

							if ((LA7_5==CREATE||LA7_5==DECLARE||LA7_5==DROP||(LA7_5>=SELECT && LA7_5<=SET)||LA7_5==USE))
							{
								alt7 = 1;
							}


						}
						else if ((LA7_2==CREATE||LA7_2==DECLARE||LA7_2==DROP||(LA7_2>=SELECT && LA7_2<=SET)||LA7_2==USE))
						{
							alt7 = 1;
						}


					}
					else if ((LA7_1==CREATE||LA7_1==DECLARE||LA7_1==DROP||(LA7_1>=SELECT && LA7_1<=SET)||LA7_1==USE))
					{
						alt7 = 1;
					}


					}
					break;
				case 158:
					{
					int LA7_2 = input.LA(2);

					if ((LA7_2==WS))
					{
						int LA7_5 = input.LA(3);

						if ((LA7_5==CREATE||LA7_5==DECLARE||LA7_5==DROP||(LA7_5>=SELECT && LA7_5<=SET)||LA7_5==USE))
						{
							alt7 = 1;
						}


					}
					else if ((LA7_2==CREATE||LA7_2==DECLARE||LA7_2==DROP||(LA7_2>=SELECT && LA7_2<=SET)||LA7_2==USE))
					{
						alt7 = 1;
					}


					}
					break;
				case CREATE:
				case DECLARE:
				case DROP:
				case SELECT:
				case SET:
				case USE:
					{
					alt7 = 1;
					}
					break;
				}

				} finally { DebugExitDecision(7); }
				switch ( alt7 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:105:13: ( WS )? ( ';' ( WS )? )? command
					{
					DebugLocation(105, 13);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:105:13: ( WS )?
					int alt4=2;
					try { DebugEnterSubRule(4);
					try { DebugEnterDecision(4, decisionCanBacktrack[4]);
					int LA4_0 = input.LA(1);

					if ((LA4_0==WS))
					{
						alt4 = 1;
					}
					} finally { DebugExitDecision(4); }
					switch (alt4)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:105:13: WS
						{
						DebugLocation(105, 13);
						WS6=(IToken)Match(input,WS,Follow._WS_in_commands389);  
						stream_WS.Add(WS6);


						}
						break;

					}
					} finally { DebugExitSubRule(4); }

					DebugLocation(105, 17);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:105:17: ( ';' ( WS )? )?
					int alt6=2;
					try { DebugEnterSubRule(6);
					try { DebugEnterDecision(6, decisionCanBacktrack[6]);
					int LA6_0 = input.LA(1);

					if ((LA6_0==158))
					{
						alt6 = 1;
					}
					} finally { DebugExitDecision(6); }
					switch (alt6)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:105:18: ';' ( WS )?
						{
						DebugLocation(105, 18);
						char_literal7=(IToken)Match(input,158,Follow._158_in_commands393);  
						stream_158.Add(char_literal7);

						DebugLocation(105, 22);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:105:22: ( WS )?
						int alt5=2;
						try { DebugEnterSubRule(5);
						try { DebugEnterDecision(5, decisionCanBacktrack[5]);
						int LA5_0 = input.LA(1);

						if ((LA5_0==WS))
						{
							alt5 = 1;
						}
						} finally { DebugExitDecision(5); }
						switch (alt5)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:105:22: WS
							{
							DebugLocation(105, 22);
							WS8=(IToken)Match(input,WS,Follow._WS_in_commands395);  
							stream_WS.Add(WS8);


							}
							break;

						}
						} finally { DebugExitSubRule(5); }


						}
						break;

					}
					} finally { DebugExitSubRule(6); }

					DebugLocation(105, 28);
					PushFollow(Follow._command_in_commands400);
					command9=command();
					PopFollow();

					stream_command.Add(command9.Tree);

					}
					break;

				default:
					goto loop7;
				}
			}

			loop7:
				;

			} finally { DebugExitSubRule(7); }

			DebugLocation(105, 38);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:105:38: ( ( WS )? ';' )?
			int alt9=2;
			try { DebugEnterSubRule(9);
			try { DebugEnterDecision(9, decisionCanBacktrack[9]);
			int LA9_0 = input.LA(1);

			if ((LA9_0==WS))
			{
				int LA9_1 = input.LA(2);

				if ((LA9_1==158))
				{
					alt9 = 1;
				}
			}
			else if ((LA9_0==158))
			{
				alt9 = 1;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:105:39: ( WS )? ';'
				{
				DebugLocation(105, 39);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:105:39: ( WS )?
				int alt8=2;
				try { DebugEnterSubRule(8);
				try { DebugEnterDecision(8, decisionCanBacktrack[8]);
				int LA8_0 = input.LA(1);

				if ((LA8_0==WS))
				{
					alt8 = 1;
				}
				} finally { DebugExitDecision(8); }
				switch (alt8)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:105:39: WS
					{
					DebugLocation(105, 39);
					WS10=(IToken)Match(input,WS,Follow._WS_in_commands405);  
					stream_WS.Add(WS10);


					}
					break;

				}
				} finally { DebugExitSubRule(8); }

				DebugLocation(105, 43);
				char_literal11=(IToken)Match(input,158,Follow._158_in_commands408);  
				stream_158.Add(char_literal11);


				}
				break;

			}
			} finally { DebugExitSubRule(9); }



			{
			// AST REWRITE
			// elements: command
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 106:2: -> ( command )+
			{
				DebugLocation(106, 5);
				if (!(stream_command.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_command.HasNext )
				{
					DebugLocation(106, 5);
					adaptor.AddChild(root_0, stream_command.NextTree());

				}
				stream_command.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("commands", 2);
			LeaveRule("commands", 2);
			LeaveRule_commands();
	    }
	 	DebugLocation(107, 1);
		} finally { DebugExitRule(GrammarFileName, "commands"); }
		return retval;

	}
	// $ANTLR end "commands"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_command() {}

	// $ANTLR start "command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:109:1: command : ( select_command | use_command | declare_command | set_command | create_view_command | drop_view_command );
	[GrammarRule("command")]
	private AstParserRuleReturnScope<object, IToken> command()
	{
		EnterRule_command();
		EnterRule("command", 3);
		TraceIn("command", 3);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> select_command12 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> use_command13 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> declare_command14 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> set_command15 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> create_view_command16 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> drop_view_command17 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "command");
		DebugLocation(109, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:110:2: ( select_command | use_command | declare_command | set_command | create_view_command | drop_view_command )
			int alt10=6;
			try { DebugEnterDecision(10, decisionCanBacktrack[10]);
			switch (input.LA(1))
			{
			case SELECT:
				{
				alt10 = 1;
				}
				break;
			case USE:
				{
				alt10 = 2;
				}
				break;
			case DECLARE:
				{
				alt10 = 3;
				}
				break;
			case SET:
				{
				alt10 = 4;
				}
				break;
			case CREATE:
				{
				alt10 = 5;
				}
				break;
			case DROP:
				{
				alt10 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 10, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:110:4: select_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(110, 4);
				PushFollow(Follow._select_command_in_command428);
				select_command12=select_command();
				PopFollow();

				adaptor.AddChild(root_0, select_command12.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:111:4: use_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(111, 4);
				PushFollow(Follow._use_command_in_command433);
				use_command13=use_command();
				PopFollow();

				adaptor.AddChild(root_0, use_command13.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:112:4: declare_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(112, 4);
				PushFollow(Follow._declare_command_in_command438);
				declare_command14=declare_command();
				PopFollow();

				adaptor.AddChild(root_0, declare_command14.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:113:4: set_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(113, 4);
				PushFollow(Follow._set_command_in_command443);
				set_command15=set_command();
				PopFollow();

				adaptor.AddChild(root_0, set_command15.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:114:4: create_view_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(114, 4);
				PushFollow(Follow._create_view_command_in_command448);
				create_view_command16=create_view_command();
				PopFollow();

				adaptor.AddChild(root_0, create_view_command16.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:115:4: drop_view_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(115, 4);
				PushFollow(Follow._drop_view_command_in_command453);
				drop_view_command17=drop_view_command();
				PopFollow();

				adaptor.AddChild(root_0, drop_view_command17.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("command", 3);
			LeaveRule("command", 3);
			LeaveRule_command();
	    }
	 	DebugLocation(116, 1);
		} finally { DebugExitRule(GrammarFileName, "command"); }
		return retval;

	}
	// $ANTLR end "command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_select_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_select_command() {}

	// $ANTLR start "select_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:121:1: select_command : SELECT ( WS distinct_clause )? ( WS top_clause )? WS column_list ( WS into_clause )? ( WS from_clause )? ( WS where_clause )? ( WS groupby_clause )? ( WS orderby_clause )? -> ^( T_SELECT ( distinct_clause )? ( top_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( orderby_clause )? ) ;
	[GrammarRule("select_command")]
	private AstParserRuleReturnScope<object, IToken> select_command()
	{
		EnterRule_select_command();
		EnterRule("select_command", 4);
		TraceIn("select_command", 4);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken SELECT18 = default(IToken);
	    IToken WS19 = default(IToken);
	    IToken WS21 = default(IToken);
	    IToken WS23 = default(IToken);
	    IToken WS25 = default(IToken);
	    IToken WS27 = default(IToken);
	    IToken WS29 = default(IToken);
	    IToken WS31 = default(IToken);
	    IToken WS33 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> distinct_clause20 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> top_clause22 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> column_list24 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> into_clause26 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> from_clause28 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> where_clause30 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> groupby_clause32 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> orderby_clause34 = default(AstParserRuleReturnScope<object, IToken>);

	    object SELECT18_tree = default(object);
	    object WS19_tree = default(object);
	    object WS21_tree = default(object);
	    object WS23_tree = default(object);
	    object WS25_tree = default(object);
	    object WS27_tree = default(object);
	    object WS29_tree = default(object);
	    object WS31_tree = default(object);
	    object WS33_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_SELECT=new RewriteRuleITokenStream(adaptor,"token SELECT");
	    RewriteRuleSubtreeStream stream_groupby_clause=new RewriteRuleSubtreeStream(adaptor,"rule groupby_clause");
	    RewriteRuleSubtreeStream stream_distinct_clause=new RewriteRuleSubtreeStream(adaptor,"rule distinct_clause");
	    RewriteRuleSubtreeStream stream_from_clause=new RewriteRuleSubtreeStream(adaptor,"rule from_clause");
	    RewriteRuleSubtreeStream stream_column_list=new RewriteRuleSubtreeStream(adaptor,"rule column_list");
	    RewriteRuleSubtreeStream stream_where_clause=new RewriteRuleSubtreeStream(adaptor,"rule where_clause");
	    RewriteRuleSubtreeStream stream_into_clause=new RewriteRuleSubtreeStream(adaptor,"rule into_clause");
	    RewriteRuleSubtreeStream stream_top_clause=new RewriteRuleSubtreeStream(adaptor,"rule top_clause");
	    RewriteRuleSubtreeStream stream_orderby_clause=new RewriteRuleSubtreeStream(adaptor,"rule orderby_clause");
		try { DebugEnterRule(GrammarFileName, "select_command");
		DebugLocation(121, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:122:2: ( SELECT ( WS distinct_clause )? ( WS top_clause )? WS column_list ( WS into_clause )? ( WS from_clause )? ( WS where_clause )? ( WS groupby_clause )? ( WS orderby_clause )? -> ^( T_SELECT ( distinct_clause )? ( top_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( orderby_clause )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:122:4: SELECT ( WS distinct_clause )? ( WS top_clause )? WS column_list ( WS into_clause )? ( WS from_clause )? ( WS where_clause )? ( WS groupby_clause )? ( WS orderby_clause )?
			{
			DebugLocation(122, 4);
			SELECT18=(IToken)Match(input,SELECT,Follow._SELECT_in_select_command467);  
			stream_SELECT.Add(SELECT18);

			DebugLocation(122, 11);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:122:11: ( WS distinct_clause )?
			int alt11=2;
			try { DebugEnterSubRule(11);
			try { DebugEnterDecision(11, decisionCanBacktrack[11]);
			int LA11_0 = input.LA(1);

			if ((LA11_0==WS))
			{
				int LA11_1 = input.LA(2);

				if ((LA11_1==ALL||LA11_1==DISTINCT))
				{
					alt11 = 1;
				}
			}
			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:122:12: WS distinct_clause
				{
				DebugLocation(122, 12);
				WS19=(IToken)Match(input,WS,Follow._WS_in_select_command470);  
				stream_WS.Add(WS19);

				DebugLocation(122, 15);
				PushFollow(Follow._distinct_clause_in_select_command472);
				distinct_clause20=distinct_clause();
				PopFollow();

				stream_distinct_clause.Add(distinct_clause20.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(11); }

			DebugLocation(122, 33);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:122:33: ( WS top_clause )?
			int alt12=2;
			try { DebugEnterSubRule(12);
			try { DebugEnterDecision(12, decisionCanBacktrack[12]);
			int LA12_0 = input.LA(1);

			if ((LA12_0==WS))
			{
				int LA12_1 = input.LA(2);

				if ((LA12_1==TOP))
				{
					alt12 = 1;
				}
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:122:34: WS top_clause
				{
				DebugLocation(122, 34);
				WS21=(IToken)Match(input,WS,Follow._WS_in_select_command477);  
				stream_WS.Add(WS21);

				DebugLocation(122, 37);
				PushFollow(Follow._top_clause_in_select_command479);
				top_clause22=top_clause();
				PopFollow();

				stream_top_clause.Add(top_clause22.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(12); }

			DebugLocation(122, 50);
			WS23=(IToken)Match(input,WS,Follow._WS_in_select_command483);  
			stream_WS.Add(WS23);

			DebugLocation(122, 53);
			PushFollow(Follow._column_list_in_select_command485);
			column_list24=column_list();
			PopFollow();

			stream_column_list.Add(column_list24.Tree);
			DebugLocation(122, 65);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:122:65: ( WS into_clause )?
			int alt13=2;
			try { DebugEnterSubRule(13);
			try { DebugEnterDecision(13, decisionCanBacktrack[13]);
			int LA13_0 = input.LA(1);

			if ((LA13_0==WS))
			{
				int LA13_1 = input.LA(2);

				if ((LA13_1==INTO))
				{
					alt13 = 1;
				}
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:122:66: WS into_clause
				{
				DebugLocation(122, 66);
				WS25=(IToken)Match(input,WS,Follow._WS_in_select_command488);  
				stream_WS.Add(WS25);

				DebugLocation(122, 69);
				PushFollow(Follow._into_clause_in_select_command490);
				into_clause26=into_clause();
				PopFollow();

				stream_into_clause.Add(into_clause26.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(13); }

			DebugLocation(122, 83);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:122:83: ( WS from_clause )?
			int alt14=2;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, decisionCanBacktrack[14]);
			int LA14_0 = input.LA(1);

			if ((LA14_0==WS))
			{
				int LA14_1 = input.LA(2);

				if ((LA14_1==FROM))
				{
					alt14 = 1;
				}
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:122:84: WS from_clause
				{
				DebugLocation(122, 84);
				WS27=(IToken)Match(input,WS,Follow._WS_in_select_command495);  
				stream_WS.Add(WS27);

				DebugLocation(122, 87);
				PushFollow(Follow._from_clause_in_select_command497);
				from_clause28=from_clause();
				PopFollow();

				stream_from_clause.Add(from_clause28.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(14); }

			DebugLocation(122, 101);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:122:101: ( WS where_clause )?
			int alt15=2;
			try { DebugEnterSubRule(15);
			try { DebugEnterDecision(15, decisionCanBacktrack[15]);
			int LA15_0 = input.LA(1);

			if ((LA15_0==WS))
			{
				int LA15_1 = input.LA(2);

				if ((LA15_1==WHERE))
				{
					alt15 = 1;
				}
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:122:102: WS where_clause
				{
				DebugLocation(122, 102);
				WS29=(IToken)Match(input,WS,Follow._WS_in_select_command502);  
				stream_WS.Add(WS29);

				DebugLocation(122, 105);
				PushFollow(Follow._where_clause_in_select_command504);
				where_clause30=where_clause();
				PopFollow();

				stream_where_clause.Add(where_clause30.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(15); }

			DebugLocation(122, 120);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:122:120: ( WS groupby_clause )?
			int alt16=2;
			try { DebugEnterSubRule(16);
			try { DebugEnterDecision(16, decisionCanBacktrack[16]);
			int LA16_0 = input.LA(1);

			if ((LA16_0==WS))
			{
				int LA16_1 = input.LA(2);

				if ((LA16_1==GROUP))
				{
					alt16 = 1;
				}
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:122:121: WS groupby_clause
				{
				DebugLocation(122, 121);
				WS31=(IToken)Match(input,WS,Follow._WS_in_select_command509);  
				stream_WS.Add(WS31);

				DebugLocation(122, 124);
				PushFollow(Follow._groupby_clause_in_select_command511);
				groupby_clause32=groupby_clause();
				PopFollow();

				stream_groupby_clause.Add(groupby_clause32.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(16); }

			DebugLocation(122, 141);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:122:141: ( WS orderby_clause )?
			int alt17=2;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, decisionCanBacktrack[17]);
			int LA17_0 = input.LA(1);

			if ((LA17_0==WS))
			{
				int LA17_1 = input.LA(2);

				if ((LA17_1==ORDER))
				{
					alt17 = 1;
				}
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:122:142: WS orderby_clause
				{
				DebugLocation(122, 142);
				WS33=(IToken)Match(input,WS,Follow._WS_in_select_command516);  
				stream_WS.Add(WS33);

				DebugLocation(122, 145);
				PushFollow(Follow._orderby_clause_in_select_command518);
				orderby_clause34=orderby_clause();
				PopFollow();

				stream_orderby_clause.Add(orderby_clause34.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(17); }



			{
			// AST REWRITE
			// elements: where_clause, from_clause, into_clause, groupby_clause, distinct_clause, top_clause, orderby_clause, column_list
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 123:3: -> ^( T_SELECT ( distinct_clause )? ( top_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( orderby_clause )? )
			{
				DebugLocation(123, 6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:123:6: ^( T_SELECT ( distinct_clause )? ( top_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( orderby_clause )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(123, 8);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SELECT, "T_SELECT"), root_1);

				DebugLocation(123, 17);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:123:17: ( distinct_clause )?
				if (stream_distinct_clause.HasNext)
				{
					DebugLocation(123, 17);
					adaptor.AddChild(root_1, stream_distinct_clause.NextTree());

				}
				stream_distinct_clause.Reset();
				DebugLocation(123, 34);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:123:34: ( top_clause )?
				if (stream_top_clause.HasNext)
				{
					DebugLocation(123, 34);
					adaptor.AddChild(root_1, stream_top_clause.NextTree());

				}
				stream_top_clause.Reset();
				DebugLocation(123, 46);
				adaptor.AddChild(root_1, stream_column_list.NextTree());
				DebugLocation(123, 58);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:123:58: ( into_clause )?
				if (stream_into_clause.HasNext)
				{
					DebugLocation(123, 58);
					adaptor.AddChild(root_1, stream_into_clause.NextTree());

				}
				stream_into_clause.Reset();
				DebugLocation(123, 71);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:123:71: ( from_clause )?
				if (stream_from_clause.HasNext)
				{
					DebugLocation(123, 71);
					adaptor.AddChild(root_1, stream_from_clause.NextTree());

				}
				stream_from_clause.Reset();
				DebugLocation(123, 84);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:123:84: ( where_clause )?
				if (stream_where_clause.HasNext)
				{
					DebugLocation(123, 84);
					adaptor.AddChild(root_1, stream_where_clause.NextTree());

				}
				stream_where_clause.Reset();
				DebugLocation(123, 98);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:123:98: ( groupby_clause )?
				if (stream_groupby_clause.HasNext)
				{
					DebugLocation(123, 98);
					adaptor.AddChild(root_1, stream_groupby_clause.NextTree());

				}
				stream_groupby_clause.Reset();
				DebugLocation(123, 114);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:123:114: ( orderby_clause )?
				if (stream_orderby_clause.HasNext)
				{
					DebugLocation(123, 114);
					adaptor.AddChild(root_1, stream_orderby_clause.NextTree());

				}
				stream_orderby_clause.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("select_command", 4);
			LeaveRule("select_command", 4);
			LeaveRule_select_command();
	    }
	 	DebugLocation(124, 1);
		} finally { DebugExitRule(GrammarFileName, "select_command"); }
		return retval;

	}
	// $ANTLR end "select_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_distinct_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_distinct_clause() {}

	// $ANTLR start "distinct_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:126:1: distinct_clause : ( DISTINCT -> T_DISTINCT | ALL -> T_ALL );
	[GrammarRule("distinct_clause")]
	private AstParserRuleReturnScope<object, IToken> distinct_clause()
	{
		EnterRule_distinct_clause();
		EnterRule("distinct_clause", 5);
		TraceIn("distinct_clause", 5);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken DISTINCT35 = default(IToken);
	    IToken ALL36 = default(IToken);

	    object DISTINCT35_tree = default(object);
	    object ALL36_tree = default(object);
	    RewriteRuleITokenStream stream_DISTINCT=new RewriteRuleITokenStream(adaptor,"token DISTINCT");
	    RewriteRuleITokenStream stream_ALL=new RewriteRuleITokenStream(adaptor,"token ALL");

		try { DebugEnterRule(GrammarFileName, "distinct_clause");
		DebugLocation(126, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:127:2: ( DISTINCT -> T_DISTINCT | ALL -> T_ALL )
			int alt18=2;
			try { DebugEnterDecision(18, decisionCanBacktrack[18]);
			int LA18_0 = input.LA(1);

			if ((LA18_0==DISTINCT))
			{
				alt18 = 1;
			}
			else if ((LA18_0==ALL))
			{
				alt18 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 18, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:127:4: DISTINCT
				{
				DebugLocation(127, 4);
				DISTINCT35=(IToken)Match(input,DISTINCT,Follow._DISTINCT_in_distinct_clause563);  
				stream_DISTINCT.Add(DISTINCT35);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 127:13: -> T_DISTINCT
				{
					DebugLocation(127, 16);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_DISTINCT, "T_DISTINCT"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:128:4: ALL
				{
				DebugLocation(128, 4);
				ALL36=(IToken)Match(input,ALL,Follow._ALL_in_distinct_clause572);  
				stream_ALL.Add(ALL36);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 128:8: -> T_ALL
				{
					DebugLocation(128, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_ALL, "T_ALL"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("distinct_clause", 5);
			LeaveRule("distinct_clause", 5);
			LeaveRule_distinct_clause();
	    }
	 	DebugLocation(129, 1);
		} finally { DebugExitRule(GrammarFileName, "distinct_clause"); }
		return retval;

	}
	// $ANTLR end "distinct_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_top_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_top_clause() {}

	// $ANTLR start "top_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:131:1: top_clause : TOP WS expression -> ^( T_TOP expression ) ;
	[GrammarRule("top_clause")]
	private AstParserRuleReturnScope<object, IToken> top_clause()
	{
		EnterRule_top_clause();
		EnterRule("top_clause", 6);
		TraceIn("top_clause", 6);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOP37 = default(IToken);
	    IToken WS38 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression39 = default(AstParserRuleReturnScope<object, IToken>);

	    object TOP37_tree = default(object);
	    object WS38_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_TOP=new RewriteRuleITokenStream(adaptor,"token TOP");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "top_clause");
		DebugLocation(131, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:132:2: ( TOP WS expression -> ^( T_TOP expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:132:4: TOP WS expression
			{
			DebugLocation(132, 4);
			TOP37=(IToken)Match(input,TOP,Follow._TOP_in_top_clause588);  
			stream_TOP.Add(TOP37);

			DebugLocation(132, 8);
			WS38=(IToken)Match(input,WS,Follow._WS_in_top_clause590);  
			stream_WS.Add(WS38);

			DebugLocation(132, 11);
			PushFollow(Follow._expression_in_top_clause592);
			expression39=expression();
			PopFollow();

			stream_expression.Add(expression39.Tree);


			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 133:2: -> ^( T_TOP expression )
			{
				DebugLocation(133, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:133:5: ^( T_TOP expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(133, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_TOP, "T_TOP"), root_1);

				DebugLocation(133, 13);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("top_clause", 6);
			LeaveRule("top_clause", 6);
			LeaveRule_top_clause();
	    }
	 	DebugLocation(134, 1);
		} finally { DebugExitRule(GrammarFileName, "top_clause"); }
		return retval;

	}
	// $ANTLR end "top_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_column_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_column_list() {}

	// $ANTLR start "column_list"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:136:1: column_list : column ( ( WS )? ',' ( WS )? column )* -> ^( T_COLUMNLIST ( column )* ) ;
	[GrammarRule("column_list")]
	private AstParserRuleReturnScope<object, IToken> column_list()
	{
		EnterRule_column_list();
		EnterRule("column_list", 7);
		TraceIn("column_list", 7);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS41 = default(IToken);
	    IToken char_literal42 = default(IToken);
	    IToken WS43 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> column40 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> column44 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS41_tree = default(object);
	    object char_literal42_tree = default(object);
	    object WS43_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_154=new RewriteRuleITokenStream(adaptor,"token 154");
	    RewriteRuleSubtreeStream stream_column=new RewriteRuleSubtreeStream(adaptor,"rule column");
		try { DebugEnterRule(GrammarFileName, "column_list");
		DebugLocation(136, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:137:2: ( column ( ( WS )? ',' ( WS )? column )* -> ^( T_COLUMNLIST ( column )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:137:4: column ( ( WS )? ',' ( WS )? column )*
			{
			DebugLocation(137, 4);
			PushFollow(Follow._column_in_column_list614);
			column40=column();
			PopFollow();

			stream_column.Add(column40.Tree);
			DebugLocation(137, 11);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:137:11: ( ( WS )? ',' ( WS )? column )*
			try { DebugEnterSubRule(21);
			while (true)
			{
				int alt21=2;
				try { DebugEnterDecision(21, decisionCanBacktrack[21]);
				int LA21_0 = input.LA(1);

				if ((LA21_0==WS))
				{
					int LA21_1 = input.LA(2);

					if ((LA21_1==154))
					{
						alt21 = 1;
					}


				}
				else if ((LA21_0==154))
				{
					alt21 = 1;
				}


				} finally { DebugExitDecision(21); }
				switch ( alt21 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:137:12: ( WS )? ',' ( WS )? column
					{
					DebugLocation(137, 12);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:137:12: ( WS )?
					int alt19=2;
					try { DebugEnterSubRule(19);
					try { DebugEnterDecision(19, decisionCanBacktrack[19]);
					int LA19_0 = input.LA(1);

					if ((LA19_0==WS))
					{
						alt19 = 1;
					}
					} finally { DebugExitDecision(19); }
					switch (alt19)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:137:12: WS
						{
						DebugLocation(137, 12);
						WS41=(IToken)Match(input,WS,Follow._WS_in_column_list617);  
						stream_WS.Add(WS41);


						}
						break;

					}
					} finally { DebugExitSubRule(19); }

					DebugLocation(137, 16);
					char_literal42=(IToken)Match(input,154,Follow._154_in_column_list620);  
					stream_154.Add(char_literal42);

					DebugLocation(137, 20);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:137:20: ( WS )?
					int alt20=2;
					try { DebugEnterSubRule(20);
					try { DebugEnterDecision(20, decisionCanBacktrack[20]);
					int LA20_0 = input.LA(1);

					if ((LA20_0==WS))
					{
						alt20 = 1;
					}
					} finally { DebugExitDecision(20); }
					switch (alt20)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:137:20: WS
						{
						DebugLocation(137, 20);
						WS43=(IToken)Match(input,WS,Follow._WS_in_column_list622);  
						stream_WS.Add(WS43);


						}
						break;

					}
					} finally { DebugExitSubRule(20); }

					DebugLocation(137, 24);
					PushFollow(Follow._column_in_column_list625);
					column44=column();
					PopFollow();

					stream_column.Add(column44.Tree);

					}
					break;

				default:
					goto loop21;
				}
			}

			loop21:
				;

			} finally { DebugExitSubRule(21); }



			{
			// AST REWRITE
			// elements: column
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 138:2: -> ^( T_COLUMNLIST ( column )* )
			{
				DebugLocation(138, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:138:5: ^( T_COLUMNLIST ( column )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(138, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_COLUMNLIST, "T_COLUMNLIST"), root_1);

				DebugLocation(138, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:138:20: ( column )*
				while ( stream_column.HasNext )
				{
					DebugLocation(138, 20);
					adaptor.AddChild(root_1, stream_column.NextTree());

				}
				stream_column.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("column_list", 7);
			LeaveRule("column_list", 7);
			LeaveRule_column_list();
	    }
	 	DebugLocation(139, 1);
		} finally { DebugExitRule(GrammarFileName, "column_list"); }
		return retval;

	}
	// $ANTLR end "column_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_column() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_column() {}

	// $ANTLR start "column"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:141:1: column : ( '*' -> ^( T_COLUMN '*' ) | expression ( WS SIMPLE_FILE )? -> ^( T_COLUMN expression ( SIMPLE_FILE )? ) );
	[GrammarRule("column")]
	private AstParserRuleReturnScope<object, IToken> column()
	{
		EnterRule_column();
		EnterRule("column", 8);
		TraceIn("column", 8);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal45 = default(IToken);
	    IToken WS47 = default(IToken);
	    IToken SIMPLE_FILE48 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression46 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal45_tree = default(object);
	    object WS47_tree = default(object);
	    object SIMPLE_FILE48_tree = default(object);
	    RewriteRuleITokenStream stream_152=new RewriteRuleITokenStream(adaptor,"token 152");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_SIMPLE_FILE=new RewriteRuleITokenStream(adaptor,"token SIMPLE_FILE");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "column");
		DebugLocation(141, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:142:2: ( '*' -> ^( T_COLUMN '*' ) | expression ( WS SIMPLE_FILE )? -> ^( T_COLUMN expression ( SIMPLE_FILE )? ) )
			int alt23=2;
			try { DebugEnterDecision(23, decisionCanBacktrack[23]);
			int LA23_0 = input.LA(1);

			if ((LA23_0==152))
			{
				alt23 = 1;
			}
			else if (((LA23_0>=CASE && LA23_0<=CAST)||LA23_0==CONVERT||LA23_0==EXISTS||(LA23_0>=NOT && LA23_0<=NUMBER)||LA23_0==SIMPLE_FILE||(LA23_0>=STRING && LA23_0<=SYSTEMVAR)||LA23_0==TOKEN||LA23_0==VARIABLE||LA23_0==150))
			{
				alt23 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 23, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:142:4: '*'
				{
				DebugLocation(142, 4);
				char_literal45=(IToken)Match(input,152,Follow._152_in_column649);  
				stream_152.Add(char_literal45);



				{
				// AST REWRITE
				// elements: 152
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 142:8: -> ^( T_COLUMN '*' )
				{
					DebugLocation(142, 11);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:142:11: ^( T_COLUMN '*' )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(142, 13);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_COLUMN, "T_COLUMN"), root_1);

					DebugLocation(142, 22);
					adaptor.AddChild(root_1, stream_152.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:143:4: expression ( WS SIMPLE_FILE )?
				{
				DebugLocation(143, 4);
				PushFollow(Follow._expression_in_column663);
				expression46=expression();
				PopFollow();

				stream_expression.Add(expression46.Tree);
				DebugLocation(143, 15);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:143:15: ( WS SIMPLE_FILE )?
				int alt22=2;
				try { DebugEnterSubRule(22);
				try { DebugEnterDecision(22, decisionCanBacktrack[22]);
				int LA22_0 = input.LA(1);

				if ((LA22_0==WS))
				{
					int LA22_1 = input.LA(2);

					if ((LA22_1==SIMPLE_FILE))
					{
						alt22 = 1;
					}
				}
				} finally { DebugExitDecision(22); }
				switch (alt22)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:143:16: WS SIMPLE_FILE
					{
					DebugLocation(143, 16);
					WS47=(IToken)Match(input,WS,Follow._WS_in_column666);  
					stream_WS.Add(WS47);

					DebugLocation(143, 19);
					SIMPLE_FILE48=(IToken)Match(input,SIMPLE_FILE,Follow._SIMPLE_FILE_in_column668);  
					stream_SIMPLE_FILE.Add(SIMPLE_FILE48);


					}
					break;

				}
				} finally { DebugExitSubRule(22); }



				{
				// AST REWRITE
				// elements: SIMPLE_FILE, expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 143:33: -> ^( T_COLUMN expression ( SIMPLE_FILE )? )
				{
					DebugLocation(143, 36);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:143:36: ^( T_COLUMN expression ( SIMPLE_FILE )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(143, 38);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_COLUMN, "T_COLUMN"), root_1);

					DebugLocation(143, 47);
					adaptor.AddChild(root_1, stream_expression.NextTree());
					DebugLocation(143, 58);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:143:58: ( SIMPLE_FILE )?
					if (stream_SIMPLE_FILE.HasNext)
					{
						DebugLocation(143, 58);
						adaptor.AddChild(root_1, stream_SIMPLE_FILE.NextNode());

					}
					stream_SIMPLE_FILE.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("column", 8);
			LeaveRule("column", 8);
			LeaveRule_column();
	    }
	 	DebugLocation(144, 1);
		} finally { DebugExitRule(GrammarFileName, "column"); }
		return retval;

	}
	// $ANTLR end "column"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_into_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_into_clause() {}

	// $ANTLR start "into_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:145:1: into_clause : INTO WS file -> ^( T_INTO file ) ;
	[GrammarRule("into_clause")]
	private AstParserRuleReturnScope<object, IToken> into_clause()
	{
		EnterRule_into_clause();
		EnterRule("into_clause", 9);
		TraceIn("into_clause", 9);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken INTO49 = default(IToken);
	    IToken WS50 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file51 = default(AstParserRuleReturnScope<object, IToken>);

	    object INTO49_tree = default(object);
	    object WS50_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_INTO=new RewriteRuleITokenStream(adaptor,"token INTO");
	    RewriteRuleSubtreeStream stream_file=new RewriteRuleSubtreeStream(adaptor,"rule file");
		try { DebugEnterRule(GrammarFileName, "into_clause");
		DebugLocation(145, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:146:2: ( INTO WS file -> ^( T_INTO file ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:146:4: INTO WS file
			{
			DebugLocation(146, 4);
			INTO49=(IToken)Match(input,INTO,Follow._INTO_in_into_clause691);  
			stream_INTO.Add(INTO49);

			DebugLocation(146, 9);
			WS50=(IToken)Match(input,WS,Follow._WS_in_into_clause693);  
			stream_WS.Add(WS50);

			DebugLocation(146, 12);
			PushFollow(Follow._file_in_into_clause695);
			file51=file();
			PopFollow();

			stream_file.Add(file51.Tree);


			{
			// AST REWRITE
			// elements: file
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 146:17: -> ^( T_INTO file )
			{
				DebugLocation(146, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:146:20: ^( T_INTO file )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(146, 22);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_INTO, "T_INTO"), root_1);

				DebugLocation(146, 29);
				adaptor.AddChild(root_1, stream_file.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("into_clause", 9);
			LeaveRule("into_clause", 9);
			LeaveRule_into_clause();
	    }
	 	DebugLocation(147, 1);
		} finally { DebugExitRule(GrammarFileName, "into_clause"); }
		return retval;

	}
	// $ANTLR end "into_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_from_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_from_clause() {}

	// $ANTLR start "from_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:149:1: from_clause : FROM WS from_clause_item ( ( WS )? ',' ( WS )? from_clause_item )* ( WS table_alias )? -> ^( T_FROM ( table_alias )? ( from_clause_item )* ) ;
	[GrammarRule("from_clause")]
	private AstParserRuleReturnScope<object, IToken> from_clause()
	{
		EnterRule_from_clause();
		EnterRule("from_clause", 10);
		TraceIn("from_clause", 10);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken FROM52 = default(IToken);
	    IToken WS53 = default(IToken);
	    IToken WS55 = default(IToken);
	    IToken char_literal56 = default(IToken);
	    IToken WS57 = default(IToken);
	    IToken WS59 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> from_clause_item54 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> from_clause_item58 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> table_alias60 = default(AstParserRuleReturnScope<object, IToken>);

	    object FROM52_tree = default(object);
	    object WS53_tree = default(object);
	    object WS55_tree = default(object);
	    object char_literal56_tree = default(object);
	    object WS57_tree = default(object);
	    object WS59_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_FROM=new RewriteRuleITokenStream(adaptor,"token FROM");
	    RewriteRuleITokenStream stream_154=new RewriteRuleITokenStream(adaptor,"token 154");
	    RewriteRuleSubtreeStream stream_from_clause_item=new RewriteRuleSubtreeStream(adaptor,"rule from_clause_item");
	    RewriteRuleSubtreeStream stream_table_alias=new RewriteRuleSubtreeStream(adaptor,"rule table_alias");
		try { DebugEnterRule(GrammarFileName, "from_clause");
		DebugLocation(149, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:150:2: ( FROM WS from_clause_item ( ( WS )? ',' ( WS )? from_clause_item )* ( WS table_alias )? -> ^( T_FROM ( table_alias )? ( from_clause_item )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:150:4: FROM WS from_clause_item ( ( WS )? ',' ( WS )? from_clause_item )* ( WS table_alias )?
			{
			DebugLocation(150, 4);
			FROM52=(IToken)Match(input,FROM,Follow._FROM_in_from_clause715);  
			stream_FROM.Add(FROM52);

			DebugLocation(150, 9);
			WS53=(IToken)Match(input,WS,Follow._WS_in_from_clause717);  
			stream_WS.Add(WS53);

			DebugLocation(150, 12);
			PushFollow(Follow._from_clause_item_in_from_clause719);
			from_clause_item54=from_clause_item();
			PopFollow();

			stream_from_clause_item.Add(from_clause_item54.Tree);
			DebugLocation(150, 29);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:150:29: ( ( WS )? ',' ( WS )? from_clause_item )*
			try { DebugEnterSubRule(26);
			while (true)
			{
				int alt26=2;
				try { DebugEnterDecision(26, decisionCanBacktrack[26]);
				int LA26_0 = input.LA(1);

				if ((LA26_0==WS))
				{
					int LA26_1 = input.LA(2);

					if ((LA26_1==154))
					{
						alt26 = 1;
					}


				}
				else if ((LA26_0==154))
				{
					alt26 = 1;
				}


				} finally { DebugExitDecision(26); }
				switch ( alt26 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:150:30: ( WS )? ',' ( WS )? from_clause_item
					{
					DebugLocation(150, 30);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:150:30: ( WS )?
					int alt24=2;
					try { DebugEnterSubRule(24);
					try { DebugEnterDecision(24, decisionCanBacktrack[24]);
					int LA24_0 = input.LA(1);

					if ((LA24_0==WS))
					{
						alt24 = 1;
					}
					} finally { DebugExitDecision(24); }
					switch (alt24)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:150:30: WS
						{
						DebugLocation(150, 30);
						WS55=(IToken)Match(input,WS,Follow._WS_in_from_clause722);  
						stream_WS.Add(WS55);


						}
						break;

					}
					} finally { DebugExitSubRule(24); }

					DebugLocation(150, 34);
					char_literal56=(IToken)Match(input,154,Follow._154_in_from_clause725);  
					stream_154.Add(char_literal56);

					DebugLocation(150, 38);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:150:38: ( WS )?
					int alt25=2;
					try { DebugEnterSubRule(25);
					try { DebugEnterDecision(25, decisionCanBacktrack[25]);
					int LA25_0 = input.LA(1);

					if ((LA25_0==WS))
					{
						alt25 = 1;
					}
					} finally { DebugExitDecision(25); }
					switch (alt25)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:150:38: WS
						{
						DebugLocation(150, 38);
						WS57=(IToken)Match(input,WS,Follow._WS_in_from_clause727);  
						stream_WS.Add(WS57);


						}
						break;

					}
					} finally { DebugExitSubRule(25); }

					DebugLocation(150, 42);
					PushFollow(Follow._from_clause_item_in_from_clause730);
					from_clause_item58=from_clause_item();
					PopFollow();

					stream_from_clause_item.Add(from_clause_item58.Tree);

					}
					break;

				default:
					goto loop26;
				}
			}

			loop26:
				;

			} finally { DebugExitSubRule(26); }

			DebugLocation(150, 61);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:150:61: ( WS table_alias )?
			int alt27=2;
			try { DebugEnterSubRule(27);
			try { DebugEnterDecision(27, decisionCanBacktrack[27]);
			int LA27_0 = input.LA(1);

			if ((LA27_0==WS))
			{
				int LA27_1 = input.LA(2);

				if ((LA27_1==SIMPLE_FILE))
				{
					alt27 = 1;
				}
			}
			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:150:62: WS table_alias
				{
				DebugLocation(150, 62);
				WS59=(IToken)Match(input,WS,Follow._WS_in_from_clause735);  
				stream_WS.Add(WS59);

				DebugLocation(150, 65);
				PushFollow(Follow._table_alias_in_from_clause737);
				table_alias60=table_alias();
				PopFollow();

				stream_table_alias.Add(table_alias60.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(27); }



			{
			// AST REWRITE
			// elements: from_clause_item, table_alias
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 150:79: -> ^( T_FROM ( table_alias )? ( from_clause_item )* )
			{
				DebugLocation(150, 82);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:150:82: ^( T_FROM ( table_alias )? ( from_clause_item )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(150, 84);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FROM, "T_FROM"), root_1);

				DebugLocation(150, 91);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:150:91: ( table_alias )?
				if (stream_table_alias.HasNext)
				{
					DebugLocation(150, 91);
					adaptor.AddChild(root_1, stream_table_alias.NextTree());

				}
				stream_table_alias.Reset();
				DebugLocation(150, 104);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:150:104: ( from_clause_item )*
				while ( stream_from_clause_item.HasNext )
				{
					DebugLocation(150, 104);
					adaptor.AddChild(root_1, stream_from_clause_item.NextTree());

				}
				stream_from_clause_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("from_clause", 10);
			LeaveRule("from_clause", 10);
			LeaveRule_from_clause();
	    }
	 	DebugLocation(152, 1);
		} finally { DebugExitRule(GrammarFileName, "from_clause"); }
		return retval;

	}
	// $ANTLR end "from_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_from_clause_item() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_from_clause_item() {}

	// $ANTLR start "from_clause_item"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:154:1: from_clause_item : ( STRING -> ^( T_FILE STRING ) | file | subquery | view_name );
	[GrammarRule("from_clause_item")]
	private AstParserRuleReturnScope<object, IToken> from_clause_item()
	{
		EnterRule_from_clause_item();
		EnterRule("from_clause_item", 11);
		TraceIn("from_clause_item", 11);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken STRING61 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file62 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> subquery63 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> view_name64 = default(AstParserRuleReturnScope<object, IToken>);

	    object STRING61_tree = default(object);
	    RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");

		try { DebugEnterRule(GrammarFileName, "from_clause_item");
		DebugLocation(154, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:155:2: ( STRING -> ^( T_FILE STRING ) | file | subquery | view_name )
			int alt28=4;
			try { DebugEnterDecision(28, decisionCanBacktrack[28]);
			switch (input.LA(1))
			{
			case STRING:
				{
				alt28 = 1;
				}
				break;
			case SIMPLE_FILE:
			case 165:
				{
				alt28 = 2;
				}
				break;
			case 150:
				{
				alt28 = 3;
				}
				break;
			case TOKEN:
				{
				alt28 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 28, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:155:4: STRING
				{
				DebugLocation(155, 4);
				STRING61=(IToken)Match(input,STRING,Follow._STRING_in_from_clause_item764);  
				stream_STRING.Add(STRING61);



				{
				// AST REWRITE
				// elements: STRING
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 155:11: -> ^( T_FILE STRING )
				{
					DebugLocation(155, 14);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:155:14: ^( T_FILE STRING )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(155, 16);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILE, "T_FILE"), root_1);

					DebugLocation(155, 23);
					adaptor.AddChild(root_1, stream_STRING.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:156:4: file
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(156, 4);
				PushFollow(Follow._file_in_from_clause_item777);
				file62=file();
				PopFollow();

				adaptor.AddChild(root_0, file62.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:157:4: subquery
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(157, 4);
				PushFollow(Follow._subquery_in_from_clause_item782);
				subquery63=subquery();
				PopFollow();

				adaptor.AddChild(root_0, subquery63.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:158:4: view_name
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(158, 4);
				PushFollow(Follow._view_name_in_from_clause_item787);
				view_name64=view_name();
				PopFollow();

				adaptor.AddChild(root_0, view_name64.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("from_clause_item", 11);
			LeaveRule("from_clause_item", 11);
			LeaveRule_from_clause_item();
	    }
	 	DebugLocation(159, 1);
		} finally { DebugExitRule(GrammarFileName, "from_clause_item"); }
		return retval;

	}
	// $ANTLR end "from_clause_item"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_subquery() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_subquery() {}

	// $ANTLR start "subquery"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:161:1: subquery : '(' ( WS )? select_command ( WS )? ')' -> ^( T_SUBQUERY select_command ) ;
	[GrammarRule("subquery")]
	private AstParserRuleReturnScope<object, IToken> subquery()
	{
		EnterRule_subquery();
		EnterRule("subquery", 12);
		TraceIn("subquery", 12);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal65 = default(IToken);
	    IToken WS66 = default(IToken);
	    IToken WS68 = default(IToken);
	    IToken char_literal69 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> select_command67 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal65_tree = default(object);
	    object WS66_tree = default(object);
	    object WS68_tree = default(object);
	    object char_literal69_tree = default(object);
	    RewriteRuleITokenStream stream_150=new RewriteRuleITokenStream(adaptor,"token 150");
	    RewriteRuleITokenStream stream_151=new RewriteRuleITokenStream(adaptor,"token 151");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_select_command=new RewriteRuleSubtreeStream(adaptor,"rule select_command");
		try { DebugEnterRule(GrammarFileName, "subquery");
		DebugLocation(161, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:162:2: ( '(' ( WS )? select_command ( WS )? ')' -> ^( T_SUBQUERY select_command ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:162:4: '(' ( WS )? select_command ( WS )? ')'
			{
			DebugLocation(162, 4);
			char_literal65=(IToken)Match(input,150,Follow._150_in_subquery799);  
			stream_150.Add(char_literal65);

			DebugLocation(162, 8);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:162:8: ( WS )?
			int alt29=2;
			try { DebugEnterSubRule(29);
			try { DebugEnterDecision(29, decisionCanBacktrack[29]);
			int LA29_0 = input.LA(1);

			if ((LA29_0==WS))
			{
				alt29 = 1;
			}
			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:162:8: WS
				{
				DebugLocation(162, 8);
				WS66=(IToken)Match(input,WS,Follow._WS_in_subquery801);  
				stream_WS.Add(WS66);


				}
				break;

			}
			} finally { DebugExitSubRule(29); }

			DebugLocation(162, 12);
			PushFollow(Follow._select_command_in_subquery804);
			select_command67=select_command();
			PopFollow();

			stream_select_command.Add(select_command67.Tree);
			DebugLocation(162, 27);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:162:27: ( WS )?
			int alt30=2;
			try { DebugEnterSubRule(30);
			try { DebugEnterDecision(30, decisionCanBacktrack[30]);
			int LA30_0 = input.LA(1);

			if ((LA30_0==WS))
			{
				alt30 = 1;
			}
			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:162:27: WS
				{
				DebugLocation(162, 27);
				WS68=(IToken)Match(input,WS,Follow._WS_in_subquery806);  
				stream_WS.Add(WS68);


				}
				break;

			}
			} finally { DebugExitSubRule(30); }

			DebugLocation(162, 31);
			char_literal69=(IToken)Match(input,151,Follow._151_in_subquery809);  
			stream_151.Add(char_literal69);



			{
			// AST REWRITE
			// elements: select_command
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 162:35: -> ^( T_SUBQUERY select_command )
			{
				DebugLocation(162, 38);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:162:38: ^( T_SUBQUERY select_command )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(162, 40);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SUBQUERY, "T_SUBQUERY"), root_1);

				DebugLocation(162, 51);
				adaptor.AddChild(root_1, stream_select_command.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("subquery", 12);
			LeaveRule("subquery", 12);
			LeaveRule_subquery();
	    }
	 	DebugLocation(163, 1);
		} finally { DebugExitRule(GrammarFileName, "subquery"); }
		return retval;

	}
	// $ANTLR end "subquery"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file() {}

	// $ANTLR start "file"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:165:1: file : ( '[' ( WS )? file_spec ( WS file_option )* ( WS )? ']' -> ^( T_FILE file_spec ( file_option )* ) | SIMPLE_FILE -> ^( T_FILE SIMPLE_FILE ) );
	[GrammarRule("file")]
	private AstParserRuleReturnScope<object, IToken> file()
	{
		EnterRule_file();
		EnterRule("file", 13);
		TraceIn("file", 13);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal70 = default(IToken);
	    IToken WS71 = default(IToken);
	    IToken WS73 = default(IToken);
	    IToken WS75 = default(IToken);
	    IToken char_literal76 = default(IToken);
	    IToken SIMPLE_FILE77 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file_spec72 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> file_option74 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal70_tree = default(object);
	    object WS71_tree = default(object);
	    object WS73_tree = default(object);
	    object WS75_tree = default(object);
	    object char_literal76_tree = default(object);
	    object SIMPLE_FILE77_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_SIMPLE_FILE=new RewriteRuleITokenStream(adaptor,"token SIMPLE_FILE");
	    RewriteRuleITokenStream stream_166=new RewriteRuleITokenStream(adaptor,"token 166");
	    RewriteRuleITokenStream stream_165=new RewriteRuleITokenStream(adaptor,"token 165");
	    RewriteRuleSubtreeStream stream_file_option=new RewriteRuleSubtreeStream(adaptor,"rule file_option");
	    RewriteRuleSubtreeStream stream_file_spec=new RewriteRuleSubtreeStream(adaptor,"rule file_spec");
		try { DebugEnterRule(GrammarFileName, "file");
		DebugLocation(165, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:166:2: ( '[' ( WS )? file_spec ( WS file_option )* ( WS )? ']' -> ^( T_FILE file_spec ( file_option )* ) | SIMPLE_FILE -> ^( T_FILE SIMPLE_FILE ) )
			int alt34=2;
			try { DebugEnterDecision(34, decisionCanBacktrack[34]);
			int LA34_0 = input.LA(1);

			if ((LA34_0==165))
			{
				alt34 = 1;
			}
			else if ((LA34_0==SIMPLE_FILE))
			{
				alt34 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 34, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(34); }
			switch (alt34)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:166:4: '[' ( WS )? file_spec ( WS file_option )* ( WS )? ']'
				{
				DebugLocation(166, 4);
				char_literal70=(IToken)Match(input,165,Follow._165_in_file828);  
				stream_165.Add(char_literal70);

				DebugLocation(166, 8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:166:8: ( WS )?
				int alt31=2;
				try { DebugEnterSubRule(31);
				try { DebugEnterDecision(31, decisionCanBacktrack[31]);
				int LA31_0 = input.LA(1);

				if ((LA31_0==WS))
				{
					alt31 = 1;
				}
				} finally { DebugExitDecision(31); }
				switch (alt31)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:166:8: WS
					{
					DebugLocation(166, 8);
					WS71=(IToken)Match(input,WS,Follow._WS_in_file830);  
					stream_WS.Add(WS71);


					}
					break;

				}
				} finally { DebugExitSubRule(31); }

				DebugLocation(166, 12);
				PushFollow(Follow._file_spec_in_file833);
				file_spec72=file_spec();
				PopFollow();

				stream_file_spec.Add(file_spec72.Tree);
				DebugLocation(166, 22);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:166:22: ( WS file_option )*
				try { DebugEnterSubRule(32);
				while (true)
				{
					int alt32=2;
					try { DebugEnterDecision(32, decisionCanBacktrack[32]);
					int LA32_0 = input.LA(1);

					if ((LA32_0==WS))
					{
						int LA32_1 = input.LA(2);

						if ((LA32_1==155))
						{
							alt32 = 1;
						}


					}


					} finally { DebugExitDecision(32); }
					switch ( alt32 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:166:23: WS file_option
						{
						DebugLocation(166, 23);
						WS73=(IToken)Match(input,WS,Follow._WS_in_file836);  
						stream_WS.Add(WS73);

						DebugLocation(166, 26);
						PushFollow(Follow._file_option_in_file838);
						file_option74=file_option();
						PopFollow();

						stream_file_option.Add(file_option74.Tree);

						}
						break;

					default:
						goto loop32;
					}
				}

				loop32:
					;

				} finally { DebugExitSubRule(32); }

				DebugLocation(166, 40);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:166:40: ( WS )?
				int alt33=2;
				try { DebugEnterSubRule(33);
				try { DebugEnterDecision(33, decisionCanBacktrack[33]);
				int LA33_0 = input.LA(1);

				if ((LA33_0==WS))
				{
					alt33 = 1;
				}
				} finally { DebugExitDecision(33); }
				switch (alt33)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:166:40: WS
					{
					DebugLocation(166, 40);
					WS75=(IToken)Match(input,WS,Follow._WS_in_file842);  
					stream_WS.Add(WS75);


					}
					break;

				}
				} finally { DebugExitSubRule(33); }

				DebugLocation(166, 44);
				char_literal76=(IToken)Match(input,166,Follow._166_in_file845);  
				stream_166.Add(char_literal76);



				{
				// AST REWRITE
				// elements: file_option, file_spec
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 166:48: -> ^( T_FILE file_spec ( file_option )* )
				{
					DebugLocation(166, 51);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:166:51: ^( T_FILE file_spec ( file_option )* )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(166, 53);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILE, "T_FILE"), root_1);

					DebugLocation(166, 60);
					adaptor.AddChild(root_1, stream_file_spec.NextTree());
					DebugLocation(166, 70);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:166:70: ( file_option )*
					while ( stream_file_option.HasNext )
					{
						DebugLocation(166, 70);
						adaptor.AddChild(root_1, stream_file_option.NextTree());

					}
					stream_file_option.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:167:4: SIMPLE_FILE
				{
				DebugLocation(167, 4);
				SIMPLE_FILE77=(IToken)Match(input,SIMPLE_FILE,Follow._SIMPLE_FILE_in_file862);  
				stream_SIMPLE_FILE.Add(SIMPLE_FILE77);



				{
				// AST REWRITE
				// elements: SIMPLE_FILE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 167:16: -> ^( T_FILE SIMPLE_FILE )
				{
					DebugLocation(167, 19);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:167:19: ^( T_FILE SIMPLE_FILE )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(167, 21);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILE, "T_FILE"), root_1);

					DebugLocation(167, 28);
					adaptor.AddChild(root_1, stream_SIMPLE_FILE.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file", 13);
			LeaveRule("file", 13);
			LeaveRule_file();
	    }
	 	DebugLocation(168, 1);
		} finally { DebugExitRule(GrammarFileName, "file"); }
		return retval;

	}
	// $ANTLR end "file"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_spec() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_spec() {}

	// $ANTLR start "file_spec"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:170:1: file_spec : ( string | variable );
	[GrammarRule("file_spec")]
	private AstParserRuleReturnScope<object, IToken> file_spec()
	{
		EnterRule_file_spec();
		EnterRule("file_spec", 14);
		TraceIn("file_spec", 14);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> string78 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> variable79 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "file_spec");
		DebugLocation(170, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:171:2: ( string | variable )
			int alt35=2;
			try { DebugEnterDecision(35, decisionCanBacktrack[35]);
			int LA35_0 = input.LA(1);

			if ((LA35_0==STRING))
			{
				alt35 = 1;
			}
			else if ((LA35_0==VARIABLE))
			{
				alt35 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 35, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(35); }
			switch (alt35)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:171:4: string
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(171, 4);
				PushFollow(Follow._string_in_file_spec881);
				string78=@string();
				PopFollow();

				adaptor.AddChild(root_0, string78.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:172:4: variable
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(172, 4);
				PushFollow(Follow._variable_in_file_spec886);
				variable79=variable();
				PopFollow();

				adaptor.AddChild(root_0, variable79.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_spec", 14);
			LeaveRule("file_spec", 14);
			LeaveRule_file_spec();
	    }
	 	DebugLocation(173, 1);
		} finally { DebugExitRule(GrammarFileName, "file_spec"); }
		return retval;

	}
	// $ANTLR end "file_spec"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_option() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_option() {}

	// $ANTLR start "file_option"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:175:1: file_option : '-' file_option_name ( ( WS )? '=' ( WS )? file_option_value )? -> ^( T_FILEOPTION file_option_name ( file_option_value )? ) ;
	[GrammarRule("file_option")]
	private AstParserRuleReturnScope<object, IToken> file_option()
	{
		EnterRule_file_option();
		EnterRule("file_option", 15);
		TraceIn("file_option", 15);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal80 = default(IToken);
	    IToken WS82 = default(IToken);
	    IToken char_literal83 = default(IToken);
	    IToken WS84 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file_option_name81 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> file_option_value85 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal80_tree = default(object);
	    object WS82_tree = default(object);
	    object char_literal83_tree = default(object);
	    object WS84_tree = default(object);
	    RewriteRuleITokenStream stream_162=new RewriteRuleITokenStream(adaptor,"token 162");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_155=new RewriteRuleITokenStream(adaptor,"token 155");
	    RewriteRuleSubtreeStream stream_file_option_name=new RewriteRuleSubtreeStream(adaptor,"rule file_option_name");
	    RewriteRuleSubtreeStream stream_file_option_value=new RewriteRuleSubtreeStream(adaptor,"rule file_option_value");
		try { DebugEnterRule(GrammarFileName, "file_option");
		DebugLocation(175, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:176:2: ( '-' file_option_name ( ( WS )? '=' ( WS )? file_option_value )? -> ^( T_FILEOPTION file_option_name ( file_option_value )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:176:4: '-' file_option_name ( ( WS )? '=' ( WS )? file_option_value )?
			{
			DebugLocation(176, 4);
			char_literal80=(IToken)Match(input,155,Follow._155_in_file_option898);  
			stream_155.Add(char_literal80);

			DebugLocation(176, 8);
			PushFollow(Follow._file_option_name_in_file_option900);
			file_option_name81=file_option_name();
			PopFollow();

			stream_file_option_name.Add(file_option_name81.Tree);
			DebugLocation(176, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:176:25: ( ( WS )? '=' ( WS )? file_option_value )?
			int alt38=2;
			try { DebugEnterSubRule(38);
			try { DebugEnterDecision(38, decisionCanBacktrack[38]);
			int LA38_0 = input.LA(1);

			if ((LA38_0==WS))
			{
				int LA38_1 = input.LA(2);

				if ((LA38_1==162))
				{
					alt38 = 1;
				}
			}
			else if ((LA38_0==162))
			{
				alt38 = 1;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:176:27: ( WS )? '=' ( WS )? file_option_value
				{
				DebugLocation(176, 27);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:176:27: ( WS )?
				int alt36=2;
				try { DebugEnterSubRule(36);
				try { DebugEnterDecision(36, decisionCanBacktrack[36]);
				int LA36_0 = input.LA(1);

				if ((LA36_0==WS))
				{
					alt36 = 1;
				}
				} finally { DebugExitDecision(36); }
				switch (alt36)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:176:27: WS
					{
					DebugLocation(176, 27);
					WS82=(IToken)Match(input,WS,Follow._WS_in_file_option904);  
					stream_WS.Add(WS82);


					}
					break;

				}
				} finally { DebugExitSubRule(36); }

				DebugLocation(176, 31);
				char_literal83=(IToken)Match(input,162,Follow._162_in_file_option907);  
				stream_162.Add(char_literal83);

				DebugLocation(176, 35);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:176:35: ( WS )?
				int alt37=2;
				try { DebugEnterSubRule(37);
				try { DebugEnterDecision(37, decisionCanBacktrack[37]);
				int LA37_0 = input.LA(1);

				if ((LA37_0==WS))
				{
					alt37 = 1;
				}
				} finally { DebugExitDecision(37); }
				switch (alt37)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:176:35: WS
					{
					DebugLocation(176, 35);
					WS84=(IToken)Match(input,WS,Follow._WS_in_file_option909);  
					stream_WS.Add(WS84);


					}
					break;

				}
				} finally { DebugExitSubRule(37); }

				DebugLocation(176, 39);
				PushFollow(Follow._file_option_value_in_file_option912);
				file_option_value85=file_option_value();
				PopFollow();

				stream_file_option_value.Add(file_option_value85.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(38); }



			{
			// AST REWRITE
			// elements: file_option_value, file_option_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 176:59: -> ^( T_FILEOPTION file_option_name ( file_option_value )? )
			{
				DebugLocation(176, 62);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:176:62: ^( T_FILEOPTION file_option_name ( file_option_value )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(176, 64);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILEOPTION, "T_FILEOPTION"), root_1);

				DebugLocation(176, 77);
				adaptor.AddChild(root_1, stream_file_option_name.NextTree());
				DebugLocation(176, 94);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:176:94: ( file_option_value )?
				if (stream_file_option_value.HasNext)
				{
					DebugLocation(176, 94);
					adaptor.AddChild(root_1, stream_file_option_value.NextTree());

				}
				stream_file_option_value.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_option", 15);
			LeaveRule("file_option", 15);
			LeaveRule_file_option();
	    }
	 	DebugLocation(177, 1);
		} finally { DebugExitRule(GrammarFileName, "file_option"); }
		return retval;

	}
	// $ANTLR end "file_option"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_option_name() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_option_name() {}

	// $ANTLR start "file_option_name"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:179:1: file_option_name : TOKEN ;
	[GrammarRule("file_option_name")]
	private AstParserRuleReturnScope<object, IToken> file_option_name()
	{
		EnterRule_file_option_name();
		EnterRule("file_option_name", 16);
		TraceIn("file_option_name", 16);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN86 = default(IToken);

	    object TOKEN86_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "file_option_name");
		DebugLocation(179, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:180:2: ( TOKEN )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:180:4: TOKEN
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(180, 4);
			TOKEN86=(IToken)Match(input,TOKEN,Follow._TOKEN_in_file_option_name936); 
			TOKEN86_tree = (object)adaptor.Create(TOKEN86);
			adaptor.AddChild(root_0, TOKEN86_tree);


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_option_name", 16);
			LeaveRule("file_option_name", 16);
			LeaveRule_file_option_name();
	    }
	 	DebugLocation(181, 1);
		} finally { DebugExitRule(GrammarFileName, "file_option_name"); }
		return retval;

	}
	// $ANTLR end "file_option_name"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_option_value() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_option_value() {}

	// $ANTLR start "file_option_value"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:183:1: file_option_value : ( TOKEN | STRING | NUMBER | variable );
	[GrammarRule("file_option_value")]
	private AstParserRuleReturnScope<object, IToken> file_option_value()
	{
		EnterRule_file_option_value();
		EnterRule("file_option_value", 17);
		TraceIn("file_option_value", 17);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN87 = default(IToken);
	    IToken STRING88 = default(IToken);
	    IToken NUMBER89 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> variable90 = default(AstParserRuleReturnScope<object, IToken>);

	    object TOKEN87_tree = default(object);
	    object STRING88_tree = default(object);
	    object NUMBER89_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "file_option_value");
		DebugLocation(183, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:184:2: ( TOKEN | STRING | NUMBER | variable )
			int alt39=4;
			try { DebugEnterDecision(39, decisionCanBacktrack[39]);
			switch (input.LA(1))
			{
			case TOKEN:
				{
				alt39 = 1;
				}
				break;
			case STRING:
				{
				alt39 = 2;
				}
				break;
			case NUMBER:
				{
				alt39 = 3;
				}
				break;
			case VARIABLE:
				{
				alt39 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 39, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:184:4: TOKEN
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(184, 4);
				TOKEN87=(IToken)Match(input,TOKEN,Follow._TOKEN_in_file_option_value948); 
				TOKEN87_tree = (object)adaptor.Create(TOKEN87);
				adaptor.AddChild(root_0, TOKEN87_tree);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:184:12: STRING
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(184, 12);
				STRING88=(IToken)Match(input,STRING,Follow._STRING_in_file_option_value952); 
				STRING88_tree = (object)adaptor.Create(STRING88);
				adaptor.AddChild(root_0, STRING88_tree);


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:184:21: NUMBER
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(184, 21);
				NUMBER89=(IToken)Match(input,NUMBER,Follow._NUMBER_in_file_option_value956); 
				NUMBER89_tree = (object)adaptor.Create(NUMBER89);
				adaptor.AddChild(root_0, NUMBER89_tree);


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:184:30: variable
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(184, 30);
				PushFollow(Follow._variable_in_file_option_value960);
				variable90=variable();
				PopFollow();

				adaptor.AddChild(root_0, variable90.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_option_value", 17);
			LeaveRule("file_option_value", 17);
			LeaveRule_file_option_value();
	    }
	 	DebugLocation(185, 1);
		} finally { DebugExitRule(GrammarFileName, "file_option_value"); }
		return retval;

	}
	// $ANTLR end "file_option_value"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_where_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_where_clause() {}

	// $ANTLR start "where_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:187:1: where_clause : WHERE WS expression -> ^( T_WHERE expression ) ;
	[GrammarRule("where_clause")]
	private AstParserRuleReturnScope<object, IToken> where_clause()
	{
		EnterRule_where_clause();
		EnterRule("where_clause", 18);
		TraceIn("where_clause", 18);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WHERE91 = default(IToken);
	    IToken WS92 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression93 = default(AstParserRuleReturnScope<object, IToken>);

	    object WHERE91_tree = default(object);
	    object WS92_tree = default(object);
	    RewriteRuleITokenStream stream_WHERE=new RewriteRuleITokenStream(adaptor,"token WHERE");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "where_clause");
		DebugLocation(187, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:188:2: ( WHERE WS expression -> ^( T_WHERE expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:188:4: WHERE WS expression
			{
			DebugLocation(188, 4);
			WHERE91=(IToken)Match(input,WHERE,Follow._WHERE_in_where_clause972);  
			stream_WHERE.Add(WHERE91);

			DebugLocation(188, 10);
			WS92=(IToken)Match(input,WS,Follow._WS_in_where_clause974);  
			stream_WS.Add(WS92);

			DebugLocation(188, 13);
			PushFollow(Follow._expression_in_where_clause976);
			expression93=expression();
			PopFollow();

			stream_expression.Add(expression93.Tree);


			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 189:2: -> ^( T_WHERE expression )
			{
				DebugLocation(189, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:189:5: ^( T_WHERE expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(189, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_WHERE, "T_WHERE"), root_1);

				DebugLocation(189, 15);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("where_clause", 18);
			LeaveRule("where_clause", 18);
			LeaveRule_where_clause();
	    }
	 	DebugLocation(190, 1);
		} finally { DebugExitRule(GrammarFileName, "where_clause"); }
		return retval;

	}
	// $ANTLR end "where_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_groupby_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_groupby_clause() {}

	// $ANTLR start "groupby_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:191:1: groupby_clause : GROUP WS BY WS orderby_column_list -> ^( T_GROUPBY orderby_column_list ) ;
	[GrammarRule("groupby_clause")]
	private AstParserRuleReturnScope<object, IToken> groupby_clause()
	{
		EnterRule_groupby_clause();
		EnterRule("groupby_clause", 19);
		TraceIn("groupby_clause", 19);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken GROUP94 = default(IToken);
	    IToken WS95 = default(IToken);
	    IToken BY96 = default(IToken);
	    IToken WS97 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> orderby_column_list98 = default(AstParserRuleReturnScope<object, IToken>);

	    object GROUP94_tree = default(object);
	    object WS95_tree = default(object);
	    object BY96_tree = default(object);
	    object WS97_tree = default(object);
	    RewriteRuleITokenStream stream_GROUP=new RewriteRuleITokenStream(adaptor,"token GROUP");
	    RewriteRuleITokenStream stream_BY=new RewriteRuleITokenStream(adaptor,"token BY");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_orderby_column_list=new RewriteRuleSubtreeStream(adaptor,"rule orderby_column_list");
		try { DebugEnterRule(GrammarFileName, "groupby_clause");
		DebugLocation(191, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:192:2: ( GROUP WS BY WS orderby_column_list -> ^( T_GROUPBY orderby_column_list ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:192:4: GROUP WS BY WS orderby_column_list
			{
			DebugLocation(192, 4);
			GROUP94=(IToken)Match(input,GROUP,Follow._GROUP_in_groupby_clause995);  
			stream_GROUP.Add(GROUP94);

			DebugLocation(192, 10);
			WS95=(IToken)Match(input,WS,Follow._WS_in_groupby_clause997);  
			stream_WS.Add(WS95);

			DebugLocation(192, 13);
			BY96=(IToken)Match(input,BY,Follow._BY_in_groupby_clause999);  
			stream_BY.Add(BY96);

			DebugLocation(192, 16);
			WS97=(IToken)Match(input,WS,Follow._WS_in_groupby_clause1001);  
			stream_WS.Add(WS97);

			DebugLocation(192, 19);
			PushFollow(Follow._orderby_column_list_in_groupby_clause1003);
			orderby_column_list98=orderby_column_list();
			PopFollow();

			stream_orderby_column_list.Add(orderby_column_list98.Tree);


			{
			// AST REWRITE
			// elements: orderby_column_list
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 193:2: -> ^( T_GROUPBY orderby_column_list )
			{
				DebugLocation(193, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:193:5: ^( T_GROUPBY orderby_column_list )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(193, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_GROUPBY, "T_GROUPBY"), root_1);

				DebugLocation(193, 17);
				adaptor.AddChild(root_1, stream_orderby_column_list.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("groupby_clause", 19);
			LeaveRule("groupby_clause", 19);
			LeaveRule_groupby_clause();
	    }
	 	DebugLocation(194, 1);
		} finally { DebugExitRule(GrammarFileName, "groupby_clause"); }
		return retval;

	}
	// $ANTLR end "groupby_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_clause() {}

	// $ANTLR start "orderby_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:196:1: orderby_clause : ORDER WS BY WS orderby_column_list -> ^( T_ORDERBY orderby_column_list ) ;
	[GrammarRule("orderby_clause")]
	private AstParserRuleReturnScope<object, IToken> orderby_clause()
	{
		EnterRule_orderby_clause();
		EnterRule("orderby_clause", 20);
		TraceIn("orderby_clause", 20);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken ORDER99 = default(IToken);
	    IToken WS100 = default(IToken);
	    IToken BY101 = default(IToken);
	    IToken WS102 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> orderby_column_list103 = default(AstParserRuleReturnScope<object, IToken>);

	    object ORDER99_tree = default(object);
	    object WS100_tree = default(object);
	    object BY101_tree = default(object);
	    object WS102_tree = default(object);
	    RewriteRuleITokenStream stream_BY=new RewriteRuleITokenStream(adaptor,"token BY");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_ORDER=new RewriteRuleITokenStream(adaptor,"token ORDER");
	    RewriteRuleSubtreeStream stream_orderby_column_list=new RewriteRuleSubtreeStream(adaptor,"rule orderby_column_list");
		try { DebugEnterRule(GrammarFileName, "orderby_clause");
		DebugLocation(196, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:197:2: ( ORDER WS BY WS orderby_column_list -> ^( T_ORDERBY orderby_column_list ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:197:4: ORDER WS BY WS orderby_column_list
			{
			DebugLocation(197, 4);
			ORDER99=(IToken)Match(input,ORDER,Follow._ORDER_in_orderby_clause1024);  
			stream_ORDER.Add(ORDER99);

			DebugLocation(197, 10);
			WS100=(IToken)Match(input,WS,Follow._WS_in_orderby_clause1026);  
			stream_WS.Add(WS100);

			DebugLocation(197, 13);
			BY101=(IToken)Match(input,BY,Follow._BY_in_orderby_clause1028);  
			stream_BY.Add(BY101);

			DebugLocation(197, 16);
			WS102=(IToken)Match(input,WS,Follow._WS_in_orderby_clause1030);  
			stream_WS.Add(WS102);

			DebugLocation(197, 19);
			PushFollow(Follow._orderby_column_list_in_orderby_clause1032);
			orderby_column_list103=orderby_column_list();
			PopFollow();

			stream_orderby_column_list.Add(orderby_column_list103.Tree);


			{
			// AST REWRITE
			// elements: orderby_column_list
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 198:2: -> ^( T_ORDERBY orderby_column_list )
			{
				DebugLocation(198, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:198:5: ^( T_ORDERBY orderby_column_list )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(198, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_ORDERBY, "T_ORDERBY"), root_1);

				DebugLocation(198, 17);
				adaptor.AddChild(root_1, stream_orderby_column_list.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_clause", 20);
			LeaveRule("orderby_clause", 20);
			LeaveRule_orderby_clause();
	    }
	 	DebugLocation(199, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_clause"); }
		return retval;

	}
	// $ANTLR end "orderby_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_column_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_column_list() {}

	// $ANTLR start "orderby_column_list"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:201:1: orderby_column_list : orderby_column ( ( WS )? ',' ( WS )? orderby_column )* -> ( orderby_column )* ;
	[GrammarRule("orderby_column_list")]
	private AstParserRuleReturnScope<object, IToken> orderby_column_list()
	{
		EnterRule_orderby_column_list();
		EnterRule("orderby_column_list", 21);
		TraceIn("orderby_column_list", 21);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS105 = default(IToken);
	    IToken char_literal106 = default(IToken);
	    IToken WS107 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> orderby_column104 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> orderby_column108 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS105_tree = default(object);
	    object char_literal106_tree = default(object);
	    object WS107_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_154=new RewriteRuleITokenStream(adaptor,"token 154");
	    RewriteRuleSubtreeStream stream_orderby_column=new RewriteRuleSubtreeStream(adaptor,"rule orderby_column");
		try { DebugEnterRule(GrammarFileName, "orderby_column_list");
		DebugLocation(201, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:202:2: ( orderby_column ( ( WS )? ',' ( WS )? orderby_column )* -> ( orderby_column )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:202:4: orderby_column ( ( WS )? ',' ( WS )? orderby_column )*
			{
			DebugLocation(202, 4);
			PushFollow(Follow._orderby_column_in_orderby_column_list1053);
			orderby_column104=orderby_column();
			PopFollow();

			stream_orderby_column.Add(orderby_column104.Tree);
			DebugLocation(202, 19);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:202:19: ( ( WS )? ',' ( WS )? orderby_column )*
			try { DebugEnterSubRule(42);
			while (true)
			{
				int alt42=2;
				try { DebugEnterDecision(42, decisionCanBacktrack[42]);
				int LA42_0 = input.LA(1);

				if ((LA42_0==WS))
				{
					int LA42_1 = input.LA(2);

					if ((LA42_1==154))
					{
						alt42 = 1;
					}


				}
				else if ((LA42_0==154))
				{
					alt42 = 1;
				}


				} finally { DebugExitDecision(42); }
				switch ( alt42 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:202:20: ( WS )? ',' ( WS )? orderby_column
					{
					DebugLocation(202, 20);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:202:20: ( WS )?
					int alt40=2;
					try { DebugEnterSubRule(40);
					try { DebugEnterDecision(40, decisionCanBacktrack[40]);
					int LA40_0 = input.LA(1);

					if ((LA40_0==WS))
					{
						alt40 = 1;
					}
					} finally { DebugExitDecision(40); }
					switch (alt40)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:202:20: WS
						{
						DebugLocation(202, 20);
						WS105=(IToken)Match(input,WS,Follow._WS_in_orderby_column_list1056);  
						stream_WS.Add(WS105);


						}
						break;

					}
					} finally { DebugExitSubRule(40); }

					DebugLocation(202, 24);
					char_literal106=(IToken)Match(input,154,Follow._154_in_orderby_column_list1059);  
					stream_154.Add(char_literal106);

					DebugLocation(202, 28);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:202:28: ( WS )?
					int alt41=2;
					try { DebugEnterSubRule(41);
					try { DebugEnterDecision(41, decisionCanBacktrack[41]);
					int LA41_0 = input.LA(1);

					if ((LA41_0==WS))
					{
						alt41 = 1;
					}
					} finally { DebugExitDecision(41); }
					switch (alt41)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:202:28: WS
						{
						DebugLocation(202, 28);
						WS107=(IToken)Match(input,WS,Follow._WS_in_orderby_column_list1061);  
						stream_WS.Add(WS107);


						}
						break;

					}
					} finally { DebugExitSubRule(41); }

					DebugLocation(202, 32);
					PushFollow(Follow._orderby_column_in_orderby_column_list1064);
					orderby_column108=orderby_column();
					PopFollow();

					stream_orderby_column.Add(orderby_column108.Tree);

					}
					break;

				default:
					goto loop42;
				}
			}

			loop42:
				;

			} finally { DebugExitSubRule(42); }



			{
			// AST REWRITE
			// elements: orderby_column
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 203:2: -> ( orderby_column )*
			{
				DebugLocation(203, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:203:5: ( orderby_column )*
				while ( stream_orderby_column.HasNext )
				{
					DebugLocation(203, 5);
					adaptor.AddChild(root_0, stream_orderby_column.NextTree());

				}
				stream_orderby_column.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_column_list", 21);
			LeaveRule("orderby_column_list", 21);
			LeaveRule_orderby_column_list();
	    }
	 	DebugLocation(204, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_column_list"); }
		return retval;

	}
	// $ANTLR end "orderby_column_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_column() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_column() {}

	// $ANTLR start "orderby_column"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:206:1: orderby_column : expression ( WS orderby_direction )? -> ^( T_ORDERBY_COLUMN expression ( orderby_direction )? ) ;
	[GrammarRule("orderby_column")]
	private AstParserRuleReturnScope<object, IToken> orderby_column()
	{
		EnterRule_orderby_column();
		EnterRule("orderby_column", 22);
		TraceIn("orderby_column", 22);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS110 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression109 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> orderby_direction111 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS110_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_orderby_direction=new RewriteRuleSubtreeStream(adaptor,"rule orderby_direction");
		try { DebugEnterRule(GrammarFileName, "orderby_column");
		DebugLocation(206, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:207:2: ( expression ( WS orderby_direction )? -> ^( T_ORDERBY_COLUMN expression ( orderby_direction )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:207:4: expression ( WS orderby_direction )?
			{
			DebugLocation(207, 4);
			PushFollow(Follow._expression_in_orderby_column1084);
			expression109=expression();
			PopFollow();

			stream_expression.Add(expression109.Tree);
			DebugLocation(207, 15);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:207:15: ( WS orderby_direction )?
			int alt43=2;
			try { DebugEnterSubRule(43);
			try { DebugEnterDecision(43, decisionCanBacktrack[43]);
			int LA43_0 = input.LA(1);

			if ((LA43_0==WS))
			{
				int LA43_1 = input.LA(2);

				if ((LA43_1==ASC||LA43_1==DESC||LA43_1==ORIG))
				{
					alt43 = 1;
				}
			}
			} finally { DebugExitDecision(43); }
			switch (alt43)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:207:16: WS orderby_direction
				{
				DebugLocation(207, 16);
				WS110=(IToken)Match(input,WS,Follow._WS_in_orderby_column1087);  
				stream_WS.Add(WS110);

				DebugLocation(207, 19);
				PushFollow(Follow._orderby_direction_in_orderby_column1089);
				orderby_direction111=orderby_direction();
				PopFollow();

				stream_orderby_direction.Add(orderby_direction111.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(43); }



			{
			// AST REWRITE
			// elements: expression, orderby_direction
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 207:39: -> ^( T_ORDERBY_COLUMN expression ( orderby_direction )? )
			{
				DebugLocation(207, 42);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:207:42: ^( T_ORDERBY_COLUMN expression ( orderby_direction )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(207, 44);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_ORDERBY_COLUMN, "T_ORDERBY_COLUMN"), root_1);

				DebugLocation(207, 61);
				adaptor.AddChild(root_1, stream_expression.NextTree());
				DebugLocation(207, 72);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:207:72: ( orderby_direction )?
				if (stream_orderby_direction.HasNext)
				{
					DebugLocation(207, 72);
					adaptor.AddChild(root_1, stream_orderby_direction.NextTree());

				}
				stream_orderby_direction.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_column", 22);
			LeaveRule("orderby_column", 22);
			LeaveRule_orderby_column();
	    }
	 	DebugLocation(208, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_column"); }
		return retval;

	}
	// $ANTLR end "orderby_column"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_direction() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_direction() {}

	// $ANTLR start "orderby_direction"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:210:1: orderby_direction : ( ASC -> T_ORDERBY_ASC | DESC -> T_ORDERBY_DESC | ORIG -> T_ORDERBY_ORIG );
	[GrammarRule("orderby_direction")]
	private AstParserRuleReturnScope<object, IToken> orderby_direction()
	{
		EnterRule_orderby_direction();
		EnterRule("orderby_direction", 23);
		TraceIn("orderby_direction", 23);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken ASC112 = default(IToken);
	    IToken DESC113 = default(IToken);
	    IToken ORIG114 = default(IToken);

	    object ASC112_tree = default(object);
	    object DESC113_tree = default(object);
	    object ORIG114_tree = default(object);
	    RewriteRuleITokenStream stream_DESC=new RewriteRuleITokenStream(adaptor,"token DESC");
	    RewriteRuleITokenStream stream_ASC=new RewriteRuleITokenStream(adaptor,"token ASC");
	    RewriteRuleITokenStream stream_ORIG=new RewriteRuleITokenStream(adaptor,"token ORIG");

		try { DebugEnterRule(GrammarFileName, "orderby_direction");
		DebugLocation(210, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:211:2: ( ASC -> T_ORDERBY_ASC | DESC -> T_ORDERBY_DESC | ORIG -> T_ORDERBY_ORIG )
			int alt44=3;
			try { DebugEnterDecision(44, decisionCanBacktrack[44]);
			switch (input.LA(1))
			{
			case ASC:
				{
				alt44 = 1;
				}
				break;
			case DESC:
				{
				alt44 = 2;
				}
				break;
			case ORIG:
				{
				alt44 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 44, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(44); }
			switch (alt44)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:211:4: ASC
				{
				DebugLocation(211, 4);
				ASC112=(IToken)Match(input,ASC,Follow._ASC_in_orderby_direction1114);  
				stream_ASC.Add(ASC112);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 211:8: -> T_ORDERBY_ASC
				{
					DebugLocation(211, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_ORDERBY_ASC, "T_ORDERBY_ASC"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:212:4: DESC
				{
				DebugLocation(212, 4);
				DESC113=(IToken)Match(input,DESC,Follow._DESC_in_orderby_direction1123);  
				stream_DESC.Add(DESC113);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 212:9: -> T_ORDERBY_DESC
				{
					DebugLocation(212, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_ORDERBY_DESC, "T_ORDERBY_DESC"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:213:4: ORIG
				{
				DebugLocation(213, 4);
				ORIG114=(IToken)Match(input,ORIG,Follow._ORIG_in_orderby_direction1132);  
				stream_ORIG.Add(ORIG114);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 213:9: -> T_ORDERBY_ORIG
				{
					DebugLocation(213, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_ORDERBY_ORIG, "T_ORDERBY_ORIG"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_direction", 23);
			LeaveRule("orderby_direction", 23);
			LeaveRule_orderby_direction();
	    }
	 	DebugLocation(214, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_direction"); }
		return retval;

	}
	// $ANTLR end "orderby_direction"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_use_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_use_command() {}

	// $ANTLR start "use_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:219:1: use_command : USE WS file -> ^( T_USE file ) ;
	[GrammarRule("use_command")]
	private AstParserRuleReturnScope<object, IToken> use_command()
	{
		EnterRule_use_command();
		EnterRule("use_command", 24);
		TraceIn("use_command", 24);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken USE115 = default(IToken);
	    IToken WS116 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file117 = default(AstParserRuleReturnScope<object, IToken>);

	    object USE115_tree = default(object);
	    object WS116_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_USE=new RewriteRuleITokenStream(adaptor,"token USE");
	    RewriteRuleSubtreeStream stream_file=new RewriteRuleSubtreeStream(adaptor,"rule file");
		try { DebugEnterRule(GrammarFileName, "use_command");
		DebugLocation(219, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:220:2: ( USE WS file -> ^( T_USE file ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:220:4: USE WS file
			{
			DebugLocation(220, 4);
			USE115=(IToken)Match(input,USE,Follow._USE_in_use_command1150);  
			stream_USE.Add(USE115);

			DebugLocation(220, 8);
			WS116=(IToken)Match(input,WS,Follow._WS_in_use_command1152);  
			stream_WS.Add(WS116);

			DebugLocation(220, 11);
			PushFollow(Follow._file_in_use_command1154);
			file117=file();
			PopFollow();

			stream_file.Add(file117.Tree);


			{
			// AST REWRITE
			// elements: file
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 220:16: -> ^( T_USE file )
			{
				DebugLocation(220, 19);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:220:19: ^( T_USE file )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(220, 21);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_USE, "T_USE"), root_1);

				DebugLocation(220, 27);
				adaptor.AddChild(root_1, stream_file.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("use_command", 24);
			LeaveRule("use_command", 24);
			LeaveRule_use_command();
	    }
	 	DebugLocation(221, 1);
		} finally { DebugExitRule(GrammarFileName, "use_command"); }
		return retval;

	}
	// $ANTLR end "use_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_declare_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_declare_command() {}

	// $ANTLR start "declare_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:226:1: declare_command : DECLARE WS declaration_list -> declaration_list ;
	[GrammarRule("declare_command")]
	private AstParserRuleReturnScope<object, IToken> declare_command()
	{
		EnterRule_declare_command();
		EnterRule("declare_command", 25);
		TraceIn("declare_command", 25);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken DECLARE118 = default(IToken);
	    IToken WS119 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> declaration_list120 = default(AstParserRuleReturnScope<object, IToken>);

	    object DECLARE118_tree = default(object);
	    object WS119_tree = default(object);
	    RewriteRuleITokenStream stream_DECLARE=new RewriteRuleITokenStream(adaptor,"token DECLARE");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_declaration_list=new RewriteRuleSubtreeStream(adaptor,"rule declaration_list");
		try { DebugEnterRule(GrammarFileName, "declare_command");
		DebugLocation(226, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:227:2: ( DECLARE WS declaration_list -> declaration_list )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:227:4: DECLARE WS declaration_list
			{
			DebugLocation(227, 4);
			DECLARE118=(IToken)Match(input,DECLARE,Follow._DECLARE_in_declare_command1176);  
			stream_DECLARE.Add(DECLARE118);

			DebugLocation(227, 12);
			WS119=(IToken)Match(input,WS,Follow._WS_in_declare_command1178);  
			stream_WS.Add(WS119);

			DebugLocation(227, 15);
			PushFollow(Follow._declaration_list_in_declare_command1180);
			declaration_list120=declaration_list();
			PopFollow();

			stream_declaration_list.Add(declaration_list120.Tree);


			{
			// AST REWRITE
			// elements: declaration_list
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 227:32: -> declaration_list
			{
				DebugLocation(227, 35);
				adaptor.AddChild(root_0, stream_declaration_list.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declare_command", 25);
			LeaveRule("declare_command", 25);
			LeaveRule_declare_command();
	    }
	 	DebugLocation(228, 1);
		} finally { DebugExitRule(GrammarFileName, "declare_command"); }
		return retval;

	}
	// $ANTLR end "declare_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_declaration_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_declaration_list() {}

	// $ANTLR start "declaration_list"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:230:1: declaration_list : declaration ( ( WS )? ',' ( WS )? declaration )* -> ^( T_DECLARE ( declaration )+ ) ;
	[GrammarRule("declaration_list")]
	private AstParserRuleReturnScope<object, IToken> declaration_list()
	{
		EnterRule_declaration_list();
		EnterRule("declaration_list", 26);
		TraceIn("declaration_list", 26);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS122 = default(IToken);
	    IToken char_literal123 = default(IToken);
	    IToken WS124 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> declaration121 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> declaration125 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS122_tree = default(object);
	    object char_literal123_tree = default(object);
	    object WS124_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_154=new RewriteRuleITokenStream(adaptor,"token 154");
	    RewriteRuleSubtreeStream stream_declaration=new RewriteRuleSubtreeStream(adaptor,"rule declaration");
		try { DebugEnterRule(GrammarFileName, "declaration_list");
		DebugLocation(230, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:231:2: ( declaration ( ( WS )? ',' ( WS )? declaration )* -> ^( T_DECLARE ( declaration )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:231:4: declaration ( ( WS )? ',' ( WS )? declaration )*
			{
			DebugLocation(231, 4);
			PushFollow(Follow._declaration_in_declaration_list1197);
			declaration121=declaration();
			PopFollow();

			stream_declaration.Add(declaration121.Tree);
			DebugLocation(231, 16);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:231:16: ( ( WS )? ',' ( WS )? declaration )*
			try { DebugEnterSubRule(47);
			while (true)
			{
				int alt47=2;
				try { DebugEnterDecision(47, decisionCanBacktrack[47]);
				int LA47_0 = input.LA(1);

				if ((LA47_0==WS))
				{
					int LA47_1 = input.LA(2);

					if ((LA47_1==154))
					{
						alt47 = 1;
					}


				}
				else if ((LA47_0==154))
				{
					alt47 = 1;
				}


				} finally { DebugExitDecision(47); }
				switch ( alt47 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:231:17: ( WS )? ',' ( WS )? declaration
					{
					DebugLocation(231, 17);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:231:17: ( WS )?
					int alt45=2;
					try { DebugEnterSubRule(45);
					try { DebugEnterDecision(45, decisionCanBacktrack[45]);
					int LA45_0 = input.LA(1);

					if ((LA45_0==WS))
					{
						alt45 = 1;
					}
					} finally { DebugExitDecision(45); }
					switch (alt45)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:231:17: WS
						{
						DebugLocation(231, 17);
						WS122=(IToken)Match(input,WS,Follow._WS_in_declaration_list1200);  
						stream_WS.Add(WS122);


						}
						break;

					}
					} finally { DebugExitSubRule(45); }

					DebugLocation(231, 21);
					char_literal123=(IToken)Match(input,154,Follow._154_in_declaration_list1203);  
					stream_154.Add(char_literal123);

					DebugLocation(231, 25);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:231:25: ( WS )?
					int alt46=2;
					try { DebugEnterSubRule(46);
					try { DebugEnterDecision(46, decisionCanBacktrack[46]);
					int LA46_0 = input.LA(1);

					if ((LA46_0==WS))
					{
						alt46 = 1;
					}
					} finally { DebugExitDecision(46); }
					switch (alt46)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:231:25: WS
						{
						DebugLocation(231, 25);
						WS124=(IToken)Match(input,WS,Follow._WS_in_declaration_list1205);  
						stream_WS.Add(WS124);


						}
						break;

					}
					} finally { DebugExitSubRule(46); }

					DebugLocation(231, 29);
					PushFollow(Follow._declaration_in_declaration_list1208);
					declaration125=declaration();
					PopFollow();

					stream_declaration.Add(declaration125.Tree);

					}
					break;

				default:
					goto loop47;
				}
			}

			loop47:
				;

			} finally { DebugExitSubRule(47); }



			{
			// AST REWRITE
			// elements: declaration
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 232:2: -> ^( T_DECLARE ( declaration )+ )
			{
				DebugLocation(232, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:232:5: ^( T_DECLARE ( declaration )+ )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(232, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_DECLARE, "T_DECLARE"), root_1);

				DebugLocation(232, 17);
				if (!(stream_declaration.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_declaration.HasNext )
				{
					DebugLocation(232, 17);
					adaptor.AddChild(root_1, stream_declaration.NextTree());

				}
				stream_declaration.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declaration_list", 26);
			LeaveRule("declaration_list", 26);
			LeaveRule_declaration_list();
	    }
	 	DebugLocation(233, 1);
		} finally { DebugExitRule(GrammarFileName, "declaration_list"); }
		return retval;

	}
	// $ANTLR end "declaration_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_declaration() {}

	// $ANTLR start "declaration"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:235:1: declaration : variable WS ( AS WS )? datatype -> ^( T_DECLARATION variable datatype ) ;
	[GrammarRule("declaration")]
	private AstParserRuleReturnScope<object, IToken> declaration()
	{
		EnterRule_declaration();
		EnterRule("declaration", 27);
		TraceIn("declaration", 27);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS127 = default(IToken);
	    IToken AS128 = default(IToken);
	    IToken WS129 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> variable126 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> datatype130 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS127_tree = default(object);
	    object AS128_tree = default(object);
	    object WS129_tree = default(object);
	    RewriteRuleITokenStream stream_AS=new RewriteRuleITokenStream(adaptor,"token AS");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_datatype=new RewriteRuleSubtreeStream(adaptor,"rule datatype");
	    RewriteRuleSubtreeStream stream_variable=new RewriteRuleSubtreeStream(adaptor,"rule variable");
		try { DebugEnterRule(GrammarFileName, "declaration");
		DebugLocation(235, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:236:2: ( variable WS ( AS WS )? datatype -> ^( T_DECLARATION variable datatype ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:236:4: variable WS ( AS WS )? datatype
			{
			DebugLocation(236, 4);
			PushFollow(Follow._variable_in_declaration1232);
			variable126=variable();
			PopFollow();

			stream_variable.Add(variable126.Tree);
			DebugLocation(236, 13);
			WS127=(IToken)Match(input,WS,Follow._WS_in_declaration1234);  
			stream_WS.Add(WS127);

			DebugLocation(236, 16);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:236:16: ( AS WS )?
			int alt48=2;
			try { DebugEnterSubRule(48);
			try { DebugEnterDecision(48, decisionCanBacktrack[48]);
			int LA48_0 = input.LA(1);

			if ((LA48_0==AS))
			{
				alt48 = 1;
			}
			} finally { DebugExitDecision(48); }
			switch (alt48)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:236:17: AS WS
				{
				DebugLocation(236, 17);
				AS128=(IToken)Match(input,AS,Follow._AS_in_declaration1237);  
				stream_AS.Add(AS128);

				DebugLocation(236, 20);
				WS129=(IToken)Match(input,WS,Follow._WS_in_declaration1239);  
				stream_WS.Add(WS129);


				}
				break;

			}
			} finally { DebugExitSubRule(48); }

			DebugLocation(236, 25);
			PushFollow(Follow._datatype_in_declaration1243);
			datatype130=datatype();
			PopFollow();

			stream_datatype.Add(datatype130.Tree);


			{
			// AST REWRITE
			// elements: variable, datatype
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 237:2: -> ^( T_DECLARATION variable datatype )
			{
				DebugLocation(237, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:237:5: ^( T_DECLARATION variable datatype )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(237, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_DECLARATION, "T_DECLARATION"), root_1);

				DebugLocation(237, 21);
				adaptor.AddChild(root_1, stream_variable.NextTree());
				DebugLocation(237, 30);
				adaptor.AddChild(root_1, stream_datatype.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declaration", 27);
			LeaveRule("declaration", 27);
			LeaveRule_declaration();
	    }
	 	DebugLocation(238, 1);
		} finally { DebugExitRule(GrammarFileName, "declaration"); }
		return retval;

	}
	// $ANTLR end "declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_create_view_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_create_view_command() {}

	// $ANTLR start "create_view_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:243:1: create_view_command : CREATE WS VIEW WS view_name ( ( WS )? '(' declaration_list ')' )? WS AS WS select_command -> ^( T_CREATE_VIEW view_name ( declaration_list )? select_command ) ;
	[GrammarRule("create_view_command")]
	private AstParserRuleReturnScope<object, IToken> create_view_command()
	{
		EnterRule_create_view_command();
		EnterRule("create_view_command", 28);
		TraceIn("create_view_command", 28);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken CREATE131 = default(IToken);
	    IToken WS132 = default(IToken);
	    IToken VIEW133 = default(IToken);
	    IToken WS134 = default(IToken);
	    IToken WS136 = default(IToken);
	    IToken char_literal137 = default(IToken);
	    IToken char_literal139 = default(IToken);
	    IToken WS140 = default(IToken);
	    IToken AS141 = default(IToken);
	    IToken WS142 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> view_name135 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> declaration_list138 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> select_command143 = default(AstParserRuleReturnScope<object, IToken>);

	    object CREATE131_tree = default(object);
	    object WS132_tree = default(object);
	    object VIEW133_tree = default(object);
	    object WS134_tree = default(object);
	    object WS136_tree = default(object);
	    object char_literal137_tree = default(object);
	    object char_literal139_tree = default(object);
	    object WS140_tree = default(object);
	    object AS141_tree = default(object);
	    object WS142_tree = default(object);
	    RewriteRuleITokenStream stream_AS=new RewriteRuleITokenStream(adaptor,"token AS");
	    RewriteRuleITokenStream stream_150=new RewriteRuleITokenStream(adaptor,"token 150");
	    RewriteRuleITokenStream stream_151=new RewriteRuleITokenStream(adaptor,"token 151");
	    RewriteRuleITokenStream stream_CREATE=new RewriteRuleITokenStream(adaptor,"token CREATE");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_VIEW=new RewriteRuleITokenStream(adaptor,"token VIEW");
	    RewriteRuleSubtreeStream stream_view_name=new RewriteRuleSubtreeStream(adaptor,"rule view_name");
	    RewriteRuleSubtreeStream stream_select_command=new RewriteRuleSubtreeStream(adaptor,"rule select_command");
	    RewriteRuleSubtreeStream stream_declaration_list=new RewriteRuleSubtreeStream(adaptor,"rule declaration_list");
		try { DebugEnterRule(GrammarFileName, "create_view_command");
		DebugLocation(243, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:244:2: ( CREATE WS VIEW WS view_name ( ( WS )? '(' declaration_list ')' )? WS AS WS select_command -> ^( T_CREATE_VIEW view_name ( declaration_list )? select_command ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:244:4: CREATE WS VIEW WS view_name ( ( WS )? '(' declaration_list ')' )? WS AS WS select_command
			{
			DebugLocation(244, 4);
			CREATE131=(IToken)Match(input,CREATE,Follow._CREATE_in_create_view_command1268);  
			stream_CREATE.Add(CREATE131);

			DebugLocation(244, 11);
			WS132=(IToken)Match(input,WS,Follow._WS_in_create_view_command1270);  
			stream_WS.Add(WS132);

			DebugLocation(244, 14);
			VIEW133=(IToken)Match(input,VIEW,Follow._VIEW_in_create_view_command1272);  
			stream_VIEW.Add(VIEW133);

			DebugLocation(244, 19);
			WS134=(IToken)Match(input,WS,Follow._WS_in_create_view_command1274);  
			stream_WS.Add(WS134);

			DebugLocation(244, 22);
			PushFollow(Follow._view_name_in_create_view_command1276);
			view_name135=view_name();
			PopFollow();

			stream_view_name.Add(view_name135.Tree);
			DebugLocation(244, 32);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:244:32: ( ( WS )? '(' declaration_list ')' )?
			int alt50=2;
			try { DebugEnterSubRule(50);
			try { DebugEnterDecision(50, decisionCanBacktrack[50]);
			int LA50_0 = input.LA(1);

			if ((LA50_0==WS))
			{
				int LA50_1 = input.LA(2);

				if ((LA50_1==150))
				{
					alt50 = 1;
				}
			}
			else if ((LA50_0==150))
			{
				alt50 = 1;
			}
			} finally { DebugExitDecision(50); }
			switch (alt50)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:244:33: ( WS )? '(' declaration_list ')'
				{
				DebugLocation(244, 33);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:244:33: ( WS )?
				int alt49=2;
				try { DebugEnterSubRule(49);
				try { DebugEnterDecision(49, decisionCanBacktrack[49]);
				int LA49_0 = input.LA(1);

				if ((LA49_0==WS))
				{
					alt49 = 1;
				}
				} finally { DebugExitDecision(49); }
				switch (alt49)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:244:33: WS
					{
					DebugLocation(244, 33);
					WS136=(IToken)Match(input,WS,Follow._WS_in_create_view_command1279);  
					stream_WS.Add(WS136);


					}
					break;

				}
				} finally { DebugExitSubRule(49); }

				DebugLocation(244, 37);
				char_literal137=(IToken)Match(input,150,Follow._150_in_create_view_command1282);  
				stream_150.Add(char_literal137);

				DebugLocation(244, 41);
				PushFollow(Follow._declaration_list_in_create_view_command1284);
				declaration_list138=declaration_list();
				PopFollow();

				stream_declaration_list.Add(declaration_list138.Tree);
				DebugLocation(244, 58);
				char_literal139=(IToken)Match(input,151,Follow._151_in_create_view_command1286);  
				stream_151.Add(char_literal139);


				}
				break;

			}
			} finally { DebugExitSubRule(50); }

			DebugLocation(244, 64);
			WS140=(IToken)Match(input,WS,Follow._WS_in_create_view_command1290);  
			stream_WS.Add(WS140);

			DebugLocation(244, 67);
			AS141=(IToken)Match(input,AS,Follow._AS_in_create_view_command1292);  
			stream_AS.Add(AS141);

			DebugLocation(244, 70);
			WS142=(IToken)Match(input,WS,Follow._WS_in_create_view_command1294);  
			stream_WS.Add(WS142);

			DebugLocation(244, 73);
			PushFollow(Follow._select_command_in_create_view_command1296);
			select_command143=select_command();
			PopFollow();

			stream_select_command.Add(select_command143.Tree);


			{
			// AST REWRITE
			// elements: declaration_list, select_command, view_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 245:2: -> ^( T_CREATE_VIEW view_name ( declaration_list )? select_command )
			{
				DebugLocation(245, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:245:5: ^( T_CREATE_VIEW view_name ( declaration_list )? select_command )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(245, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CREATE_VIEW, "T_CREATE_VIEW"), root_1);

				DebugLocation(245, 21);
				adaptor.AddChild(root_1, stream_view_name.NextTree());
				DebugLocation(245, 31);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:245:31: ( declaration_list )?
				if (stream_declaration_list.HasNext)
				{
					DebugLocation(245, 31);
					adaptor.AddChild(root_1, stream_declaration_list.NextTree());

				}
				stream_declaration_list.Reset();
				DebugLocation(245, 49);
				adaptor.AddChild(root_1, stream_select_command.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("create_view_command", 28);
			LeaveRule("create_view_command", 28);
			LeaveRule_create_view_command();
	    }
	 	DebugLocation(246, 1);
		} finally { DebugExitRule(GrammarFileName, "create_view_command"); }
		return retval;

	}
	// $ANTLR end "create_view_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_drop_view_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_drop_view_command() {}

	// $ANTLR start "drop_view_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:248:1: drop_view_command : DROP WS VIEW WS view_name -> ^( T_DROP_VIEW view_name ) ;
	[GrammarRule("drop_view_command")]
	private AstParserRuleReturnScope<object, IToken> drop_view_command()
	{
		EnterRule_drop_view_command();
		EnterRule("drop_view_command", 29);
		TraceIn("drop_view_command", 29);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken DROP144 = default(IToken);
	    IToken WS145 = default(IToken);
	    IToken VIEW146 = default(IToken);
	    IToken WS147 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> view_name148 = default(AstParserRuleReturnScope<object, IToken>);

	    object DROP144_tree = default(object);
	    object WS145_tree = default(object);
	    object VIEW146_tree = default(object);
	    object WS147_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_VIEW=new RewriteRuleITokenStream(adaptor,"token VIEW");
	    RewriteRuleITokenStream stream_DROP=new RewriteRuleITokenStream(adaptor,"token DROP");
	    RewriteRuleSubtreeStream stream_view_name=new RewriteRuleSubtreeStream(adaptor,"rule view_name");
		try { DebugEnterRule(GrammarFileName, "drop_view_command");
		DebugLocation(248, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:249:2: ( DROP WS VIEW WS view_name -> ^( T_DROP_VIEW view_name ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:249:4: DROP WS VIEW WS view_name
			{
			DebugLocation(249, 4);
			DROP144=(IToken)Match(input,DROP,Follow._DROP_in_drop_view_command1322);  
			stream_DROP.Add(DROP144);

			DebugLocation(249, 9);
			WS145=(IToken)Match(input,WS,Follow._WS_in_drop_view_command1324);  
			stream_WS.Add(WS145);

			DebugLocation(249, 12);
			VIEW146=(IToken)Match(input,VIEW,Follow._VIEW_in_drop_view_command1326);  
			stream_VIEW.Add(VIEW146);

			DebugLocation(249, 17);
			WS147=(IToken)Match(input,WS,Follow._WS_in_drop_view_command1328);  
			stream_WS.Add(WS147);

			DebugLocation(249, 20);
			PushFollow(Follow._view_name_in_drop_view_command1330);
			view_name148=view_name();
			PopFollow();

			stream_view_name.Add(view_name148.Tree);


			{
			// AST REWRITE
			// elements: view_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 250:2: -> ^( T_DROP_VIEW view_name )
			{
				DebugLocation(250, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:250:5: ^( T_DROP_VIEW view_name )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(250, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_DROP_VIEW, "T_DROP_VIEW"), root_1);

				DebugLocation(250, 19);
				adaptor.AddChild(root_1, stream_view_name.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("drop_view_command", 29);
			LeaveRule("drop_view_command", 29);
			LeaveRule_drop_view_command();
	    }
	 	DebugLocation(251, 1);
		} finally { DebugExitRule(GrammarFileName, "drop_view_command"); }
		return retval;

	}
	// $ANTLR end "drop_view_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_view_name() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_view_name() {}

	// $ANTLR start "view_name"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:253:1: view_name : TOKEN -> ^( T_VIEW_NAME TOKEN ) ;
	[GrammarRule("view_name")]
	private AstParserRuleReturnScope<object, IToken> view_name()
	{
		EnterRule_view_name();
		EnterRule("view_name", 30);
		TraceIn("view_name", 30);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN149 = default(IToken);

	    object TOKEN149_tree = default(object);
	    RewriteRuleITokenStream stream_TOKEN=new RewriteRuleITokenStream(adaptor,"token TOKEN");

		try { DebugEnterRule(GrammarFileName, "view_name");
		DebugLocation(253, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:254:2: ( TOKEN -> ^( T_VIEW_NAME TOKEN ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:254:4: TOKEN
			{
			DebugLocation(254, 4);
			TOKEN149=(IToken)Match(input,TOKEN,Follow._TOKEN_in_view_name1350);  
			stream_TOKEN.Add(TOKEN149);



			{
			// AST REWRITE
			// elements: TOKEN
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 254:10: -> ^( T_VIEW_NAME TOKEN )
			{
				DebugLocation(254, 13);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:254:13: ^( T_VIEW_NAME TOKEN )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(254, 15);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_VIEW_NAME, "T_VIEW_NAME"), root_1);

				DebugLocation(254, 27);
				adaptor.AddChild(root_1, stream_TOKEN.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("view_name", 30);
			LeaveRule("view_name", 30);
			LeaveRule_view_name();
	    }
	 	DebugLocation(255, 1);
		} finally { DebugExitRule(GrammarFileName, "view_name"); }
		return retval;

	}
	// $ANTLR end "view_name"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_set_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_set_command() {}

	// $ANTLR start "set_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:261:1: set_command : SET WS variable ( WS )? '=' ( WS )? expression -> ^( T_SET_VARIABLE variable expression ) ;
	[GrammarRule("set_command")]
	private AstParserRuleReturnScope<object, IToken> set_command()
	{
		EnterRule_set_command();
		EnterRule("set_command", 31);
		TraceIn("set_command", 31);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken SET150 = default(IToken);
	    IToken WS151 = default(IToken);
	    IToken WS153 = default(IToken);
	    IToken char_literal154 = default(IToken);
	    IToken WS155 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> variable152 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression156 = default(AstParserRuleReturnScope<object, IToken>);

	    object SET150_tree = default(object);
	    object WS151_tree = default(object);
	    object WS153_tree = default(object);
	    object char_literal154_tree = default(object);
	    object WS155_tree = default(object);
	    RewriteRuleITokenStream stream_162=new RewriteRuleITokenStream(adaptor,"token 162");
	    RewriteRuleITokenStream stream_SET=new RewriteRuleITokenStream(adaptor,"token SET");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_variable=new RewriteRuleSubtreeStream(adaptor,"rule variable");
		try { DebugEnterRule(GrammarFileName, "set_command");
		DebugLocation(261, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:262:2: ( SET WS variable ( WS )? '=' ( WS )? expression -> ^( T_SET_VARIABLE variable expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:262:4: SET WS variable ( WS )? '=' ( WS )? expression
			{
			DebugLocation(262, 4);
			SET150=(IToken)Match(input,SET,Follow._SET_in_set_command1374);  
			stream_SET.Add(SET150);

			DebugLocation(262, 8);
			WS151=(IToken)Match(input,WS,Follow._WS_in_set_command1376);  
			stream_WS.Add(WS151);

			DebugLocation(262, 11);
			PushFollow(Follow._variable_in_set_command1378);
			variable152=variable();
			PopFollow();

			stream_variable.Add(variable152.Tree);
			DebugLocation(262, 20);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:262:20: ( WS )?
			int alt51=2;
			try { DebugEnterSubRule(51);
			try { DebugEnterDecision(51, decisionCanBacktrack[51]);
			int LA51_0 = input.LA(1);

			if ((LA51_0==WS))
			{
				alt51 = 1;
			}
			} finally { DebugExitDecision(51); }
			switch (alt51)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:262:20: WS
				{
				DebugLocation(262, 20);
				WS153=(IToken)Match(input,WS,Follow._WS_in_set_command1380);  
				stream_WS.Add(WS153);


				}
				break;

			}
			} finally { DebugExitSubRule(51); }

			DebugLocation(262, 24);
			char_literal154=(IToken)Match(input,162,Follow._162_in_set_command1383);  
			stream_162.Add(char_literal154);

			DebugLocation(262, 28);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:262:28: ( WS )?
			int alt52=2;
			try { DebugEnterSubRule(52);
			try { DebugEnterDecision(52, decisionCanBacktrack[52]);
			int LA52_0 = input.LA(1);

			if ((LA52_0==WS))
			{
				alt52 = 1;
			}
			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:262:28: WS
				{
				DebugLocation(262, 28);
				WS155=(IToken)Match(input,WS,Follow._WS_in_set_command1385);  
				stream_WS.Add(WS155);


				}
				break;

			}
			} finally { DebugExitSubRule(52); }

			DebugLocation(262, 32);
			PushFollow(Follow._expression_in_set_command1388);
			expression156=expression();
			PopFollow();

			stream_expression.Add(expression156.Tree);


			{
			// AST REWRITE
			// elements: expression, variable
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 263:2: -> ^( T_SET_VARIABLE variable expression )
			{
				DebugLocation(263, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:263:5: ^( T_SET_VARIABLE variable expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(263, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SET_VARIABLE, "T_SET_VARIABLE"), root_1);

				DebugLocation(263, 22);
				adaptor.AddChild(root_1, stream_variable.NextTree());
				DebugLocation(263, 31);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("set_command", 31);
			LeaveRule("set_command", 31);
			LeaveRule_set_command();
	    }
	 	DebugLocation(264, 1);
		} finally { DebugExitRule(GrammarFileName, "set_command"); }
		return retval;

	}
	// $ANTLR end "set_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_list() {}

	// $ANTLR start "expression_list"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:269:1: expression_list : expression ( ( WS )? ',' ( WS )? expression )* -> ^( T_EXPRESSIONLIST ( expression )+ ) ;
	[GrammarRule("expression_list")]
	private AstParserRuleReturnScope<object, IToken> expression_list()
	{
		EnterRule_expression_list();
		EnterRule("expression_list", 32);
		TraceIn("expression_list", 32);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS158 = default(IToken);
	    IToken char_literal159 = default(IToken);
	    IToken WS160 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression157 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression161 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS158_tree = default(object);
	    object char_literal159_tree = default(object);
	    object WS160_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_154=new RewriteRuleITokenStream(adaptor,"token 154");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "expression_list");
		DebugLocation(269, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:270:2: ( expression ( ( WS )? ',' ( WS )? expression )* -> ^( T_EXPRESSIONLIST ( expression )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:270:4: expression ( ( WS )? ',' ( WS )? expression )*
			{
			DebugLocation(270, 4);
			PushFollow(Follow._expression_in_expression_list1413);
			expression157=expression();
			PopFollow();

			stream_expression.Add(expression157.Tree);
			DebugLocation(270, 15);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:270:15: ( ( WS )? ',' ( WS )? expression )*
			try { DebugEnterSubRule(55);
			while (true)
			{
				int alt55=2;
				try { DebugEnterDecision(55, decisionCanBacktrack[55]);
				int LA55_0 = input.LA(1);

				if ((LA55_0==WS))
				{
					int LA55_1 = input.LA(2);

					if ((LA55_1==154))
					{
						alt55 = 1;
					}


				}
				else if ((LA55_0==154))
				{
					alt55 = 1;
				}


				} finally { DebugExitDecision(55); }
				switch ( alt55 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:270:16: ( WS )? ',' ( WS )? expression
					{
					DebugLocation(270, 16);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:270:16: ( WS )?
					int alt53=2;
					try { DebugEnterSubRule(53);
					try { DebugEnterDecision(53, decisionCanBacktrack[53]);
					int LA53_0 = input.LA(1);

					if ((LA53_0==WS))
					{
						alt53 = 1;
					}
					} finally { DebugExitDecision(53); }
					switch (alt53)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:270:16: WS
						{
						DebugLocation(270, 16);
						WS158=(IToken)Match(input,WS,Follow._WS_in_expression_list1416);  
						stream_WS.Add(WS158);


						}
						break;

					}
					} finally { DebugExitSubRule(53); }

					DebugLocation(270, 20);
					char_literal159=(IToken)Match(input,154,Follow._154_in_expression_list1419);  
					stream_154.Add(char_literal159);

					DebugLocation(270, 24);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:270:24: ( WS )?
					int alt54=2;
					try { DebugEnterSubRule(54);
					try { DebugEnterDecision(54, decisionCanBacktrack[54]);
					int LA54_0 = input.LA(1);

					if ((LA54_0==WS))
					{
						alt54 = 1;
					}
					} finally { DebugExitDecision(54); }
					switch (alt54)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:270:24: WS
						{
						DebugLocation(270, 24);
						WS160=(IToken)Match(input,WS,Follow._WS_in_expression_list1421);  
						stream_WS.Add(WS160);


						}
						break;

					}
					} finally { DebugExitSubRule(54); }

					DebugLocation(270, 28);
					PushFollow(Follow._expression_in_expression_list1424);
					expression161=expression();
					PopFollow();

					stream_expression.Add(expression161.Tree);

					}
					break;

				default:
					goto loop55;
				}
			}

			loop55:
				;

			} finally { DebugExitSubRule(55); }



			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 270:41: -> ^( T_EXPRESSIONLIST ( expression )+ )
			{
				DebugLocation(270, 44);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:270:44: ^( T_EXPRESSIONLIST ( expression )+ )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(270, 46);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_EXPRESSIONLIST, "T_EXPRESSIONLIST"), root_1);

				DebugLocation(270, 63);
				if (!(stream_expression.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_expression.HasNext )
				{
					DebugLocation(270, 63);
					adaptor.AddChild(root_1, stream_expression.NextTree());

				}
				stream_expression.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_list", 32);
			LeaveRule("expression_list", 32);
			LeaveRule_expression_list();
	    }
	 	DebugLocation(271, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_list"); }
		return retval;

	}
	// $ANTLR end "expression_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_list_or_select_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_list_or_select_command() {}

	// $ANTLR start "expression_list_or_select_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:273:1: expression_list_or_select_command : ( expression_list | select_command );
	[GrammarRule("expression_list_or_select_command")]
	private AstParserRuleReturnScope<object, IToken> expression_list_or_select_command()
	{
		EnterRule_expression_list_or_select_command();
		EnterRule("expression_list_or_select_command", 33);
		TraceIn("expression_list_or_select_command", 33);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> expression_list162 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> select_command163 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "expression_list_or_select_command");
		DebugLocation(273, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:274:2: ( expression_list | select_command )
			int alt56=2;
			try { DebugEnterDecision(56, decisionCanBacktrack[56]);
			int LA56_0 = input.LA(1);

			if (((LA56_0>=CASE && LA56_0<=CAST)||LA56_0==CONVERT||LA56_0==EXISTS||(LA56_0>=NOT && LA56_0<=NUMBER)||LA56_0==SIMPLE_FILE||(LA56_0>=STRING && LA56_0<=SYSTEMVAR)||LA56_0==TOKEN||LA56_0==VARIABLE||LA56_0==150))
			{
				alt56 = 1;
			}
			else if ((LA56_0==SELECT))
			{
				alt56 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 56, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(56); }
			switch (alt56)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:274:4: expression_list
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(274, 4);
				PushFollow(Follow._expression_list_in_expression_list_or_select_command1447);
				expression_list162=expression_list();
				PopFollow();

				adaptor.AddChild(root_0, expression_list162.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:274:22: select_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(274, 22);
				PushFollow(Follow._select_command_in_expression_list_or_select_command1451);
				select_command163=select_command();
				PopFollow();

				adaptor.AddChild(root_0, select_command163.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_list_or_select_command", 33);
			LeaveRule("expression_list_or_select_command", 33);
			LeaveRule_expression_list_or_select_command();
	    }
	 	DebugLocation(275, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_list_or_select_command"); }
		return retval;

	}
	// $ANTLR end "expression_list_or_select_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression() {}

	// $ANTLR start "expression"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:277:1: expression : expression_7 ;
	[GrammarRule("expression")]
	private AstParserRuleReturnScope<object, IToken> expression()
	{
		EnterRule_expression();
		EnterRule("expression", 34);
		TraceIn("expression", 34);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> expression_7164 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(277, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:278:2: ( expression_7 )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:278:4: expression_7
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(278, 4);
			PushFollow(Follow._expression_7_in_expression1463);
			expression_7164=expression_7();
			PopFollow();

			adaptor.AddChild(root_0, expression_7164.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression", 34);
			LeaveRule("expression", 34);
			LeaveRule_expression();
	    }
	 	DebugLocation(279, 1);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return retval;

	}
	// $ANTLR end "expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_7() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_7() {}

	// $ANTLR start "expression_7"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:281:1: expression_7 : (a= expression_6 -> $a) ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )* ;
	[GrammarRule("expression_7")]
	private AstParserRuleReturnScope<object, IToken> expression_7()
	{
		EnterRule_expression_7();
		EnterRule("expression_7", 35);
		TraceIn("expression_7", 35);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS165 = default(IToken);
	    IToken WS167 = default(IToken);
	    IToken IN168 = default(IToken);
	    IToken WS169 = default(IToken);
	    IToken char_literal170 = default(IToken);
	    IToken WS171 = default(IToken);
	    IToken WS173 = default(IToken);
	    IToken char_literal174 = default(IToken);
	    IToken NOT175 = default(IToken);
	    IToken WS176 = default(IToken);
	    IToken IN177 = default(IToken);
	    IToken WS178 = default(IToken);
	    IToken char_literal179 = default(IToken);
	    IToken WS180 = default(IToken);
	    IToken WS182 = default(IToken);
	    IToken char_literal183 = default(IToken);
	    IToken WS185 = default(IToken);
	    IToken SOME186 = default(IToken);
	    IToken ANY187 = default(IToken);
	    IToken WS188 = default(IToken);
	    IToken char_literal189 = default(IToken);
	    IToken char_literal191 = default(IToken);
	    IToken WS193 = default(IToken);
	    IToken ALL194 = default(IToken);
	    IToken WS195 = default(IToken);
	    IToken char_literal196 = default(IToken);
	    IToken char_literal198 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_7166 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command172 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command181 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_4184 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command190 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_4192 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command197 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS165_tree = default(object);
	    object WS167_tree = default(object);
	    object IN168_tree = default(object);
	    object WS169_tree = default(object);
	    object char_literal170_tree = default(object);
	    object WS171_tree = default(object);
	    object WS173_tree = default(object);
	    object char_literal174_tree = default(object);
	    object NOT175_tree = default(object);
	    object WS176_tree = default(object);
	    object IN177_tree = default(object);
	    object WS178_tree = default(object);
	    object char_literal179_tree = default(object);
	    object WS180_tree = default(object);
	    object WS182_tree = default(object);
	    object char_literal183_tree = default(object);
	    object WS185_tree = default(object);
	    object SOME186_tree = default(object);
	    object ANY187_tree = default(object);
	    object WS188_tree = default(object);
	    object char_literal189_tree = default(object);
	    object char_literal191_tree = default(object);
	    object WS193_tree = default(object);
	    object ALL194_tree = default(object);
	    object WS195_tree = default(object);
	    object char_literal196_tree = default(object);
	    object char_literal198_tree = default(object);
	    RewriteRuleITokenStream stream_150=new RewriteRuleITokenStream(adaptor,"token 150");
	    RewriteRuleITokenStream stream_151=new RewriteRuleITokenStream(adaptor,"token 151");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_ANY=new RewriteRuleITokenStream(adaptor,"token ANY");
	    RewriteRuleITokenStream stream_IN=new RewriteRuleITokenStream(adaptor,"token IN");
	    RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");
	    RewriteRuleITokenStream stream_SOME=new RewriteRuleITokenStream(adaptor,"token SOME");
	    RewriteRuleITokenStream stream_ALL=new RewriteRuleITokenStream(adaptor,"token ALL");
	    RewriteRuleSubtreeStream stream_op_7=new RewriteRuleSubtreeStream(adaptor,"rule op_7");
	    RewriteRuleSubtreeStream stream_expression_6=new RewriteRuleSubtreeStream(adaptor,"rule expression_6");
	    RewriteRuleSubtreeStream stream_expression_list_or_select_command=new RewriteRuleSubtreeStream(adaptor,"rule expression_list_or_select_command");
	    RewriteRuleSubtreeStream stream_op_4=new RewriteRuleSubtreeStream(adaptor,"rule op_4");
		try { DebugEnterRule(GrammarFileName, "expression_7");
		DebugLocation(281, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:282:2: ( (a= expression_6 -> $a) ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:282:4: (a= expression_6 -> $a) ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )*
			{
			DebugLocation(282, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:282:4: (a= expression_6 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:282:5: a= expression_6
			{
			DebugLocation(282, 6);
			PushFollow(Follow._expression_6_in_expression_71479);
			a=expression_6();
			PopFollow();

			stream_expression_6.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 282:19: -> $a
			{
				DebugLocation(282, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(282, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:282:25: ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )*
			try { DebugEnterSubRule(69);
			while (true)
			{
				int alt69=2;
				try { DebugEnterDecision(69, decisionCanBacktrack[69]);
				int LA69_0 = input.LA(1);

				if ((LA69_0==WS))
				{
					int LA69_1 = input.LA(2);

					if ((LA69_1==NOT))
					{
						int LA69_3 = input.LA(3);

						if ((LA69_3==WS))
						{
							int LA69_5 = input.LA(4);

							if ((LA69_5==BETWEEN||LA69_5==IN||LA69_5==LIKE||LA69_5==MATCH))
							{
								alt69 = 1;
							}


						}


					}
					else if ((LA69_1==BETWEEN||LA69_1==IN||LA69_1==LIKE||LA69_1==MATCH||LA69_1==OR||(LA69_1>=145 && LA69_1<=147)||(LA69_1>=159 && LA69_1<=164)))
					{
						alt69 = 1;
					}


				}


				} finally { DebugExitDecision(69); }
				switch ( alt69 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:282:26: WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) )
					{
					DebugLocation(282, 26);
					WS165=(IToken)Match(input,WS,Follow._WS_in_expression_71486);  
					stream_WS.Add(WS165);

					DebugLocation(282, 29);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:282:29: ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) )
					int alt68=5;
					try { DebugEnterSubRule(68);
					try { DebugEnterDecision(68, decisionCanBacktrack[68]);
					switch (input.LA(1))
					{
					case BETWEEN:
					case LIKE:
					case MATCH:
					case OR:
						{
						alt68 = 1;
						}
						break;
					case NOT:
						{
						int LA68_2 = input.LA(2);

						if ((LA68_2==WS))
						{
							int LA68_13 = input.LA(3);

							if ((LA68_13==BETWEEN||LA68_13==LIKE||LA68_13==MATCH))
							{
								alt68 = 1;
							}
							else if ((LA68_13==IN))
							{
								alt68 = 3;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 68, 13, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 68, 2, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case IN:
						{
						alt68 = 2;
						}
						break;
					case 162:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA68_14 = input.LA(3);

							if ((LA68_14==ANY||LA68_14==SOME))
							{
								alt68 = 4;
							}
							else if ((LA68_14==ALL))
							{
								alt68 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 68, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt68 = 4;
							}
							break;
						case ALL:
							{
							alt68 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 68, 4, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 164:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA68_14 = input.LA(3);

							if ((LA68_14==ANY||LA68_14==SOME))
							{
								alt68 = 4;
							}
							else if ((LA68_14==ALL))
							{
								alt68 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 68, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt68 = 4;
							}
							break;
						case ALL:
							{
							alt68 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 68, 5, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 160:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA68_14 = input.LA(3);

							if ((LA68_14==ANY||LA68_14==SOME))
							{
								alt68 = 4;
							}
							else if ((LA68_14==ALL))
							{
								alt68 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 68, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt68 = 4;
							}
							break;
						case ALL:
							{
							alt68 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 68, 6, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 161:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA68_14 = input.LA(3);

							if ((LA68_14==ANY||LA68_14==SOME))
							{
								alt68 = 4;
							}
							else if ((LA68_14==ALL))
							{
								alt68 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 68, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt68 = 4;
							}
							break;
						case ALL:
							{
							alt68 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 68, 7, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 146:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA68_14 = input.LA(3);

							if ((LA68_14==ANY||LA68_14==SOME))
							{
								alt68 = 4;
							}
							else if ((LA68_14==ALL))
							{
								alt68 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 68, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt68 = 4;
							}
							break;
						case ALL:
							{
							alt68 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 68, 8, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 147:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA68_14 = input.LA(3);

							if ((LA68_14==ANY||LA68_14==SOME))
							{
								alt68 = 4;
							}
							else if ((LA68_14==ALL))
							{
								alt68 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 68, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt68 = 4;
							}
							break;
						case ALL:
							{
							alt68 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 68, 9, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 145:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA68_14 = input.LA(3);

							if ((LA68_14==ANY||LA68_14==SOME))
							{
								alt68 = 4;
							}
							else if ((LA68_14==ALL))
							{
								alt68 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 68, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt68 = 4;
							}
							break;
						case ALL:
							{
							alt68 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 68, 10, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 163:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA68_14 = input.LA(3);

							if ((LA68_14==ANY||LA68_14==SOME))
							{
								alt68 = 4;
							}
							else if ((LA68_14==ALL))
							{
								alt68 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 68, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt68 = 4;
							}
							break;
						case ALL:
							{
							alt68 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 68, 11, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 159:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA68_14 = input.LA(3);

							if ((LA68_14==ANY||LA68_14==SOME))
							{
								alt68 = 4;
							}
							else if ((LA68_14==ALL))
							{
								alt68 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 68, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt68 = 4;
							}
							break;
						case ALL:
							{
							alt68 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 68, 12, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 68, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(68); }
					switch (alt68)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:283:2: op_7 WS b= expression_6
						{
						DebugLocation(283, 2);
						PushFollow(Follow._op_7_in_expression_71491);
						op_7166=op_7();
						PopFollow();

						stream_op_7.Add(op_7166.Tree);
						DebugLocation(283, 7);
						WS167=(IToken)Match(input,WS,Follow._WS_in_expression_71493);  
						stream_WS.Add(WS167);

						DebugLocation(283, 11);
						PushFollow(Follow._expression_6_in_expression_71497);
						b=expression_6();
						PopFollow();

						stream_expression_6.Add(b.Tree);


						{
						// AST REWRITE
						// elements: expression_7, op_7, b
						// token labels: 
						// rule labels: retval, b
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 283:25: -> ^( T_OP_BINARY op_7 $expression_7 $b)
						{
							DebugLocation(283, 28);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:283:28: ^( T_OP_BINARY op_7 $expression_7 $b)
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(283, 30);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(283, 42);
							adaptor.AddChild(root_1, stream_op_7.NextTree());
							DebugLocation(283, 48);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(283, 62);
							adaptor.AddChild(root_1, stream_b.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:284:4: IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')'
						{
						DebugLocation(284, 4);
						IN168=(IToken)Match(input,IN,Follow._IN_in_expression_71516);  
						stream_IN.Add(IN168);

						DebugLocation(284, 7);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:284:7: ( WS )?
						int alt57=2;
						try { DebugEnterSubRule(57);
						try { DebugEnterDecision(57, decisionCanBacktrack[57]);
						int LA57_0 = input.LA(1);

						if ((LA57_0==WS))
						{
							alt57 = 1;
						}
						} finally { DebugExitDecision(57); }
						switch (alt57)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:284:7: WS
							{
							DebugLocation(284, 7);
							WS169=(IToken)Match(input,WS,Follow._WS_in_expression_71518);  
							stream_WS.Add(WS169);


							}
							break;

						}
						} finally { DebugExitSubRule(57); }

						DebugLocation(284, 11);
						char_literal170=(IToken)Match(input,150,Follow._150_in_expression_71521);  
						stream_150.Add(char_literal170);

						DebugLocation(284, 15);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:284:15: ( WS )?
						int alt58=2;
						try { DebugEnterSubRule(58);
						try { DebugEnterDecision(58, decisionCanBacktrack[58]);
						int LA58_0 = input.LA(1);

						if ((LA58_0==WS))
						{
							alt58 = 1;
						}
						} finally { DebugExitDecision(58); }
						switch (alt58)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:284:15: WS
							{
							DebugLocation(284, 15);
							WS171=(IToken)Match(input,WS,Follow._WS_in_expression_71523);  
							stream_WS.Add(WS171);


							}
							break;

						}
						} finally { DebugExitSubRule(58); }

						DebugLocation(284, 19);
						PushFollow(Follow._expression_list_or_select_command_in_expression_71526);
						expression_list_or_select_command172=expression_list_or_select_command();
						PopFollow();

						stream_expression_list_or_select_command.Add(expression_list_or_select_command172.Tree);
						DebugLocation(284, 53);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:284:53: ( WS )?
						int alt59=2;
						try { DebugEnterSubRule(59);
						try { DebugEnterDecision(59, decisionCanBacktrack[59]);
						int LA59_0 = input.LA(1);

						if ((LA59_0==WS))
						{
							alt59 = 1;
						}
						} finally { DebugExitDecision(59); }
						switch (alt59)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:284:53: WS
							{
							DebugLocation(284, 53);
							WS173=(IToken)Match(input,WS,Follow._WS_in_expression_71528);  
							stream_WS.Add(WS173);


							}
							break;

						}
						} finally { DebugExitSubRule(59); }

						DebugLocation(284, 57);
						char_literal174=(IToken)Match(input,151,Follow._151_in_expression_71531);  
						stream_151.Add(char_literal174);



						{
						// AST REWRITE
						// elements: expression_7, expression_list_or_select_command
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 284:61: -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command )
						{
							DebugLocation(284, 64);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:284:64: ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(284, 66);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(284, 78);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_IN, "T_IN"));
							DebugLocation(284, 84);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(284, 97);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:285:4: NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')'
						{
						DebugLocation(285, 4);
						NOT175=(IToken)Match(input,NOT,Follow._NOT_in_expression_71549);  
						stream_NOT.Add(NOT175);

						DebugLocation(285, 8);
						WS176=(IToken)Match(input,WS,Follow._WS_in_expression_71551);  
						stream_WS.Add(WS176);

						DebugLocation(285, 11);
						IN177=(IToken)Match(input,IN,Follow._IN_in_expression_71553);  
						stream_IN.Add(IN177);

						DebugLocation(285, 14);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:285:14: ( WS )?
						int alt60=2;
						try { DebugEnterSubRule(60);
						try { DebugEnterDecision(60, decisionCanBacktrack[60]);
						int LA60_0 = input.LA(1);

						if ((LA60_0==WS))
						{
							alt60 = 1;
						}
						} finally { DebugExitDecision(60); }
						switch (alt60)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:285:14: WS
							{
							DebugLocation(285, 14);
							WS178=(IToken)Match(input,WS,Follow._WS_in_expression_71555);  
							stream_WS.Add(WS178);


							}
							break;

						}
						} finally { DebugExitSubRule(60); }

						DebugLocation(285, 18);
						char_literal179=(IToken)Match(input,150,Follow._150_in_expression_71558);  
						stream_150.Add(char_literal179);

						DebugLocation(285, 22);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:285:22: ( WS )?
						int alt61=2;
						try { DebugEnterSubRule(61);
						try { DebugEnterDecision(61, decisionCanBacktrack[61]);
						int LA61_0 = input.LA(1);

						if ((LA61_0==WS))
						{
							alt61 = 1;
						}
						} finally { DebugExitDecision(61); }
						switch (alt61)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:285:22: WS
							{
							DebugLocation(285, 22);
							WS180=(IToken)Match(input,WS,Follow._WS_in_expression_71560);  
							stream_WS.Add(WS180);


							}
							break;

						}
						} finally { DebugExitSubRule(61); }

						DebugLocation(285, 26);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:285:26: ( expression_list_or_select_command )
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:285:27: expression_list_or_select_command
						{
						DebugLocation(285, 27);
						PushFollow(Follow._expression_list_or_select_command_in_expression_71564);
						expression_list_or_select_command181=expression_list_or_select_command();
						PopFollow();

						stream_expression_list_or_select_command.Add(expression_list_or_select_command181.Tree);

						}

						DebugLocation(285, 62);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:285:62: ( WS )?
						int alt62=2;
						try { DebugEnterSubRule(62);
						try { DebugEnterDecision(62, decisionCanBacktrack[62]);
						int LA62_0 = input.LA(1);

						if ((LA62_0==WS))
						{
							alt62 = 1;
						}
						} finally { DebugExitDecision(62); }
						switch (alt62)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:285:62: WS
							{
							DebugLocation(285, 62);
							WS182=(IToken)Match(input,WS,Follow._WS_in_expression_71567);  
							stream_WS.Add(WS182);


							}
							break;

						}
						} finally { DebugExitSubRule(62); }

						DebugLocation(285, 66);
						char_literal183=(IToken)Match(input,151,Follow._151_in_expression_71570);  
						stream_151.Add(char_literal183);



						{
						// AST REWRITE
						// elements: expression_list_or_select_command, expression_7
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 285:70: -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command )
						{
							DebugLocation(285, 73);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:285:73: ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(285, 75);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(285, 87);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_NOTIN, "T_NOTIN"));
							DebugLocation(285, 96);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(285, 109);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 4:
						DebugEnterAlt(4);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:286:4: op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')'
						{
						DebugLocation(286, 4);
						PushFollow(Follow._op_4_in_expression_71588);
						op_4184=op_4();
						PopFollow();

						stream_op_4.Add(op_4184.Tree);
						DebugLocation(286, 9);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:286:9: ( WS )?
						int alt63=2;
						try { DebugEnterSubRule(63);
						try { DebugEnterDecision(63, decisionCanBacktrack[63]);
						int LA63_0 = input.LA(1);

						if ((LA63_0==WS))
						{
							alt63 = 1;
						}
						} finally { DebugExitDecision(63); }
						switch (alt63)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:286:9: WS
							{
							DebugLocation(286, 9);
							WS185=(IToken)Match(input,WS,Follow._WS_in_expression_71590);  
							stream_WS.Add(WS185);


							}
							break;

						}
						} finally { DebugExitSubRule(63); }

						DebugLocation(286, 13);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:286:13: ( SOME | ANY )
						int alt64=2;
						try { DebugEnterSubRule(64);
						try { DebugEnterDecision(64, decisionCanBacktrack[64]);
						int LA64_0 = input.LA(1);

						if ((LA64_0==SOME))
						{
							alt64 = 1;
						}
						else if ((LA64_0==ANY))
						{
							alt64 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 64, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						} finally { DebugExitDecision(64); }
						switch (alt64)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:286:14: SOME
							{
							DebugLocation(286, 14);
							SOME186=(IToken)Match(input,SOME,Follow._SOME_in_expression_71594);  
							stream_SOME.Add(SOME186);


							}
							break;
						case 2:
							DebugEnterAlt(2);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:286:21: ANY
							{
							DebugLocation(286, 21);
							ANY187=(IToken)Match(input,ANY,Follow._ANY_in_expression_71598);  
							stream_ANY.Add(ANY187);


							}
							break;

						}
						} finally { DebugExitSubRule(64); }

						DebugLocation(286, 26);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:286:26: ( WS )?
						int alt65=2;
						try { DebugEnterSubRule(65);
						try { DebugEnterDecision(65, decisionCanBacktrack[65]);
						int LA65_0 = input.LA(1);

						if ((LA65_0==WS))
						{
							alt65 = 1;
						}
						} finally { DebugExitDecision(65); }
						switch (alt65)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:286:26: WS
							{
							DebugLocation(286, 26);
							WS188=(IToken)Match(input,WS,Follow._WS_in_expression_71601);  
							stream_WS.Add(WS188);


							}
							break;

						}
						} finally { DebugExitSubRule(65); }

						DebugLocation(286, 30);
						char_literal189=(IToken)Match(input,150,Follow._150_in_expression_71604);  
						stream_150.Add(char_literal189);

						DebugLocation(286, 34);
						PushFollow(Follow._expression_list_or_select_command_in_expression_71606);
						expression_list_or_select_command190=expression_list_or_select_command();
						PopFollow();

						stream_expression_list_or_select_command.Add(expression_list_or_select_command190.Tree);
						DebugLocation(286, 68);
						char_literal191=(IToken)Match(input,151,Follow._151_in_expression_71608);  
						stream_151.Add(char_literal191);



						{
						// AST REWRITE
						// elements: op_4, expression_list_or_select_command, expression_7
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 286:72: -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command )
						{
							DebugLocation(286, 75);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:286:75: ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(286, 77);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(286, 89);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_ANY, "T_ANY"));
							DebugLocation(286, 95);
							adaptor.AddChild(root_1, stream_op_4.NextTree());
							DebugLocation(286, 101);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(286, 114);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 5:
						DebugEnterAlt(5);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:287:4: op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')'
						{
						DebugLocation(287, 4);
						PushFollow(Follow._op_4_in_expression_71628);
						op_4192=op_4();
						PopFollow();

						stream_op_4.Add(op_4192.Tree);
						DebugLocation(287, 9);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:287:9: ( WS )?
						int alt66=2;
						try { DebugEnterSubRule(66);
						try { DebugEnterDecision(66, decisionCanBacktrack[66]);
						int LA66_0 = input.LA(1);

						if ((LA66_0==WS))
						{
							alt66 = 1;
						}
						} finally { DebugExitDecision(66); }
						switch (alt66)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:287:9: WS
							{
							DebugLocation(287, 9);
							WS193=(IToken)Match(input,WS,Follow._WS_in_expression_71630);  
							stream_WS.Add(WS193);


							}
							break;

						}
						} finally { DebugExitSubRule(66); }

						DebugLocation(287, 13);
						ALL194=(IToken)Match(input,ALL,Follow._ALL_in_expression_71633);  
						stream_ALL.Add(ALL194);

						DebugLocation(287, 17);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:287:17: ( WS )?
						int alt67=2;
						try { DebugEnterSubRule(67);
						try { DebugEnterDecision(67, decisionCanBacktrack[67]);
						int LA67_0 = input.LA(1);

						if ((LA67_0==WS))
						{
							alt67 = 1;
						}
						} finally { DebugExitDecision(67); }
						switch (alt67)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:287:17: WS
							{
							DebugLocation(287, 17);
							WS195=(IToken)Match(input,WS,Follow._WS_in_expression_71635);  
							stream_WS.Add(WS195);


							}
							break;

						}
						} finally { DebugExitSubRule(67); }

						DebugLocation(287, 21);
						char_literal196=(IToken)Match(input,150,Follow._150_in_expression_71638);  
						stream_150.Add(char_literal196);

						DebugLocation(287, 25);
						PushFollow(Follow._expression_list_or_select_command_in_expression_71640);
						expression_list_or_select_command197=expression_list_or_select_command();
						PopFollow();

						stream_expression_list_or_select_command.Add(expression_list_or_select_command197.Tree);
						DebugLocation(287, 59);
						char_literal198=(IToken)Match(input,151,Follow._151_in_expression_71642);  
						stream_151.Add(char_literal198);



						{
						// AST REWRITE
						// elements: expression_list_or_select_command, expression_7, op_4
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 287:63: -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command )
						{
							DebugLocation(287, 66);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:287:66: ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(287, 68);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(287, 80);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_ALL, "T_ALL"));
							DebugLocation(287, 86);
							adaptor.AddChild(root_1, stream_op_4.NextTree());
							DebugLocation(287, 92);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(287, 105);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					}
					} finally { DebugExitSubRule(68); }


					}
					break;

				default:
					goto loop69;
				}
			}

			loop69:
				;

			} finally { DebugExitSubRule(69); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_7", 35);
			LeaveRule("expression_7", 35);
			LeaveRule_expression_7();
	    }
	 	DebugLocation(289, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_7"); }
		return retval;

	}
	// $ANTLR end "expression_7"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_7() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_7() {}

	// $ANTLR start "op_7"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:291:1: op_7 : ( OR -> T_OR | LIKE -> T_LIKE | NOT WS LIKE -> T_NOTLIKE | MATCH -> T_MATCH | NOT WS MATCH -> T_NOTMATCH | BETWEEN -> T_BETWEEN | NOT WS BETWEEN -> T_NOTBETWEEN );
	[GrammarRule("op_7")]
	private AstParserRuleReturnScope<object, IToken> op_7()
	{
		EnterRule_op_7();
		EnterRule("op_7", 36);
		TraceIn("op_7", 36);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken OR199 = default(IToken);
	    IToken LIKE200 = default(IToken);
	    IToken NOT201 = default(IToken);
	    IToken WS202 = default(IToken);
	    IToken LIKE203 = default(IToken);
	    IToken MATCH204 = default(IToken);
	    IToken NOT205 = default(IToken);
	    IToken WS206 = default(IToken);
	    IToken MATCH207 = default(IToken);
	    IToken BETWEEN208 = default(IToken);
	    IToken NOT209 = default(IToken);
	    IToken WS210 = default(IToken);
	    IToken BETWEEN211 = default(IToken);

	    object OR199_tree = default(object);
	    object LIKE200_tree = default(object);
	    object NOT201_tree = default(object);
	    object WS202_tree = default(object);
	    object LIKE203_tree = default(object);
	    object MATCH204_tree = default(object);
	    object NOT205_tree = default(object);
	    object WS206_tree = default(object);
	    object MATCH207_tree = default(object);
	    object BETWEEN208_tree = default(object);
	    object NOT209_tree = default(object);
	    object WS210_tree = default(object);
	    object BETWEEN211_tree = default(object);
	    RewriteRuleITokenStream stream_MATCH=new RewriteRuleITokenStream(adaptor,"token MATCH");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");
	    RewriteRuleITokenStream stream_BETWEEN=new RewriteRuleITokenStream(adaptor,"token BETWEEN");
	    RewriteRuleITokenStream stream_LIKE=new RewriteRuleITokenStream(adaptor,"token LIKE");
	    RewriteRuleITokenStream stream_OR=new RewriteRuleITokenStream(adaptor,"token OR");

		try { DebugEnterRule(GrammarFileName, "op_7");
		DebugLocation(291, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:291:6: ( OR -> T_OR | LIKE -> T_LIKE | NOT WS LIKE -> T_NOTLIKE | MATCH -> T_MATCH | NOT WS MATCH -> T_NOTMATCH | BETWEEN -> T_BETWEEN | NOT WS BETWEEN -> T_NOTBETWEEN )
			int alt70=7;
			try { DebugEnterDecision(70, decisionCanBacktrack[70]);
			switch (input.LA(1))
			{
			case OR:
				{
				alt70 = 1;
				}
				break;
			case LIKE:
				{
				alt70 = 2;
				}
				break;
			case NOT:
				{
				int LA70_3 = input.LA(2);

				if ((LA70_3==WS))
				{
					switch (input.LA(3))
					{
					case LIKE:
						{
						alt70 = 3;
						}
						break;
					case MATCH:
						{
						alt70 = 5;
						}
						break;
					case BETWEEN:
						{
						alt70 = 7;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 70, 6, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 70, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case MATCH:
				{
				alt70 = 4;
				}
				break;
			case BETWEEN:
				{
				alt70 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 70, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(70); }
			switch (alt70)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:291:8: OR
				{
				DebugLocation(291, 8);
				OR199=(IToken)Match(input,OR,Follow._OR_in_op_71672);  
				stream_OR.Add(OR199);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 291:11: -> T_OR
				{
					DebugLocation(291, 14);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_OR, "T_OR"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:292:4: LIKE
				{
				DebugLocation(292, 4);
				LIKE200=(IToken)Match(input,LIKE,Follow._LIKE_in_op_71681);  
				stream_LIKE.Add(LIKE200);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 292:9: -> T_LIKE
				{
					DebugLocation(292, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_LIKE, "T_LIKE"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:293:4: NOT WS LIKE
				{
				DebugLocation(293, 4);
				NOT201=(IToken)Match(input,NOT,Follow._NOT_in_op_71690);  
				stream_NOT.Add(NOT201);

				DebugLocation(293, 8);
				WS202=(IToken)Match(input,WS,Follow._WS_in_op_71692);  
				stream_WS.Add(WS202);

				DebugLocation(293, 11);
				LIKE203=(IToken)Match(input,LIKE,Follow._LIKE_in_op_71694);  
				stream_LIKE.Add(LIKE203);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 293:16: -> T_NOTLIKE
				{
					DebugLocation(293, 19);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTLIKE, "T_NOTLIKE"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:294:4: MATCH
				{
				DebugLocation(294, 4);
				MATCH204=(IToken)Match(input,MATCH,Follow._MATCH_in_op_71703);  
				stream_MATCH.Add(MATCH204);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 294:10: -> T_MATCH
				{
					DebugLocation(294, 13);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MATCH, "T_MATCH"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:295:4: NOT WS MATCH
				{
				DebugLocation(295, 4);
				NOT205=(IToken)Match(input,NOT,Follow._NOT_in_op_71712);  
				stream_NOT.Add(NOT205);

				DebugLocation(295, 8);
				WS206=(IToken)Match(input,WS,Follow._WS_in_op_71714);  
				stream_WS.Add(WS206);

				DebugLocation(295, 11);
				MATCH207=(IToken)Match(input,MATCH,Follow._MATCH_in_op_71716);  
				stream_MATCH.Add(MATCH207);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 295:17: -> T_NOTMATCH
				{
					DebugLocation(295, 20);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTMATCH, "T_NOTMATCH"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:296:4: BETWEEN
				{
				DebugLocation(296, 4);
				BETWEEN208=(IToken)Match(input,BETWEEN,Follow._BETWEEN_in_op_71725);  
				stream_BETWEEN.Add(BETWEEN208);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 296:12: -> T_BETWEEN
				{
					DebugLocation(296, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BETWEEN, "T_BETWEEN"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:297:4: NOT WS BETWEEN
				{
				DebugLocation(297, 4);
				NOT209=(IToken)Match(input,NOT,Follow._NOT_in_op_71734);  
				stream_NOT.Add(NOT209);

				DebugLocation(297, 8);
				WS210=(IToken)Match(input,WS,Follow._WS_in_op_71736);  
				stream_WS.Add(WS210);

				DebugLocation(297, 11);
				BETWEEN211=(IToken)Match(input,BETWEEN,Follow._BETWEEN_in_op_71738);  
				stream_BETWEEN.Add(BETWEEN211);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 297:19: -> T_NOTBETWEEN
				{
					DebugLocation(297, 22);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTBETWEEN, "T_NOTBETWEEN"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_7", 36);
			LeaveRule("op_7", 36);
			LeaveRule_op_7();
	    }
	 	DebugLocation(298, 1);
		} finally { DebugExitRule(GrammarFileName, "op_7"); }
		return retval;

	}
	// $ANTLR end "op_7"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_6() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_6() {}

	// $ANTLR start "expression_6"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:300:1: expression_6 : (a= expression_5 -> $a) ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )* ;
	[GrammarRule("expression_6")]
	private AstParserRuleReturnScope<object, IToken> expression_6()
	{
		EnterRule_expression_6();
		EnterRule("expression_6", 37);
		TraceIn("expression_6", 37);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS212 = default(IToken);
	    IToken WS214 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_6213 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS212_tree = default(object);
	    object WS214_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_op_6=new RewriteRuleSubtreeStream(adaptor,"rule op_6");
	    RewriteRuleSubtreeStream stream_expression_5=new RewriteRuleSubtreeStream(adaptor,"rule expression_5");
		try { DebugEnterRule(GrammarFileName, "expression_6");
		DebugLocation(300, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:301:2: ( (a= expression_5 -> $a) ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:301:4: (a= expression_5 -> $a) ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )*
			{
			DebugLocation(301, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:301:4: (a= expression_5 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:301:5: a= expression_5
			{
			DebugLocation(301, 6);
			PushFollow(Follow._expression_5_in_expression_61757);
			a=expression_5();
			PopFollow();

			stream_expression_5.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 301:19: -> $a
			{
				DebugLocation(301, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(301, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:301:25: ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )*
			try { DebugEnterSubRule(71);
			while (true)
			{
				int alt71=2;
				try { DebugEnterDecision(71, decisionCanBacktrack[71]);
				int LA71_0 = input.LA(1);

				if ((LA71_0==WS))
				{
					int LA71_1 = input.LA(2);

					if ((LA71_1==AND))
					{
						alt71 = 1;
					}


				}


				} finally { DebugExitDecision(71); }
				switch ( alt71 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:301:26: WS op_6 WS b= expression_5
					{
					DebugLocation(301, 26);
					WS212=(IToken)Match(input,WS,Follow._WS_in_expression_61764);  
					stream_WS.Add(WS212);

					DebugLocation(301, 29);
					PushFollow(Follow._op_6_in_expression_61766);
					op_6213=op_6();
					PopFollow();

					stream_op_6.Add(op_6213.Tree);
					DebugLocation(301, 34);
					WS214=(IToken)Match(input,WS,Follow._WS_in_expression_61768);  
					stream_WS.Add(WS214);

					DebugLocation(301, 38);
					PushFollow(Follow._expression_5_in_expression_61772);
					b=expression_5();
					PopFollow();

					stream_expression_5.Add(b.Tree);


					{
					// AST REWRITE
					// elements: expression_6, b, op_6
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 301:52: -> ^( T_OP_BINARY op_6 $expression_6 $b)
					{
						DebugLocation(301, 55);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:301:55: ^( T_OP_BINARY op_6 $expression_6 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(301, 57);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(301, 69);
						adaptor.AddChild(root_1, stream_op_6.NextTree());
						DebugLocation(301, 75);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(301, 89);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop71;
				}
			}

			loop71:
				;

			} finally { DebugExitSubRule(71); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_6", 37);
			LeaveRule("expression_6", 37);
			LeaveRule_expression_6();
	    }
	 	DebugLocation(302, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_6"); }
		return retval;

	}
	// $ANTLR end "expression_6"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_6() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_6() {}

	// $ANTLR start "op_6"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:304:1: op_6 : AND -> T_AND ;
	[GrammarRule("op_6")]
	private AstParserRuleReturnScope<object, IToken> op_6()
	{
		EnterRule_op_6();
		EnterRule("op_6", 38);
		TraceIn("op_6", 38);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken AND215 = default(IToken);

	    object AND215_tree = default(object);
	    RewriteRuleITokenStream stream_AND=new RewriteRuleITokenStream(adaptor,"token AND");

		try { DebugEnterRule(GrammarFileName, "op_6");
		DebugLocation(304, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:304:6: ( AND -> T_AND )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:304:8: AND
			{
			DebugLocation(304, 8);
			AND215=(IToken)Match(input,AND,Follow._AND_in_op_61800);  
			stream_AND.Add(AND215);



			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 304:12: -> T_AND
			{
				DebugLocation(304, 15);
				adaptor.AddChild(root_0, (object)adaptor.Create(T_AND, "T_AND"));

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_6", 38);
			LeaveRule("op_6", 38);
			LeaveRule_op_6();
	    }
	 	DebugLocation(305, 1);
		} finally { DebugExitRule(GrammarFileName, "op_6"); }
		return retval;

	}
	// $ANTLR end "op_6"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_5() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_5() {}

	// $ANTLR start "expression_5"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:307:1: expression_5 : ( op_5 WS expression_5 -> ^( T_OP_UNARY op_5 expression_5 ) | expression_4 );
	[GrammarRule("expression_5")]
	private AstParserRuleReturnScope<object, IToken> expression_5()
	{
		EnterRule_expression_5();
		EnterRule("expression_5", 39);
		TraceIn("expression_5", 39);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS217 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> op_5216 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_5218 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_4219 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS217_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression_5=new RewriteRuleSubtreeStream(adaptor,"rule expression_5");
	    RewriteRuleSubtreeStream stream_op_5=new RewriteRuleSubtreeStream(adaptor,"rule op_5");
		try { DebugEnterRule(GrammarFileName, "expression_5");
		DebugLocation(307, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:308:2: ( op_5 WS expression_5 -> ^( T_OP_UNARY op_5 expression_5 ) | expression_4 )
			int alt72=2;
			try { DebugEnterDecision(72, decisionCanBacktrack[72]);
			int LA72_0 = input.LA(1);

			if ((LA72_0==NOT))
			{
				alt72 = 1;
			}
			else if (((LA72_0>=CASE && LA72_0<=CAST)||LA72_0==CONVERT||LA72_0==EXISTS||LA72_0==NUMBER||LA72_0==SIMPLE_FILE||(LA72_0>=STRING && LA72_0<=SYSTEMVAR)||LA72_0==TOKEN||LA72_0==VARIABLE||LA72_0==150))
			{
				alt72 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 72, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(72); }
			switch (alt72)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:308:4: op_5 WS expression_5
				{
				DebugLocation(308, 4);
				PushFollow(Follow._op_5_in_expression_51818);
				op_5216=op_5();
				PopFollow();

				stream_op_5.Add(op_5216.Tree);
				DebugLocation(308, 9);
				WS217=(IToken)Match(input,WS,Follow._WS_in_expression_51820);  
				stream_WS.Add(WS217);

				DebugLocation(308, 12);
				PushFollow(Follow._expression_5_in_expression_51822);
				expression_5218=expression_5();
				PopFollow();

				stream_expression_5.Add(expression_5218.Tree);


				{
				// AST REWRITE
				// elements: op_5, expression_5
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 308:25: -> ^( T_OP_UNARY op_5 expression_5 )
				{
					DebugLocation(308, 28);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:308:28: ^( T_OP_UNARY op_5 expression_5 )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(308, 30);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_UNARY, "T_OP_UNARY"), root_1);

					DebugLocation(308, 41);
					adaptor.AddChild(root_1, stream_op_5.NextTree());
					DebugLocation(308, 46);
					adaptor.AddChild(root_1, stream_expression_5.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:309:4: expression_4
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(309, 4);
				PushFollow(Follow._expression_4_in_expression_51837);
				expression_4219=expression_4();
				PopFollow();

				adaptor.AddChild(root_0, expression_4219.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_5", 39);
			LeaveRule("expression_5", 39);
			LeaveRule_expression_5();
	    }
	 	DebugLocation(310, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_5"); }
		return retval;

	}
	// $ANTLR end "expression_5"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_5() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_5() {}

	// $ANTLR start "op_5"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:312:1: op_5 : NOT -> T_NOT ;
	[GrammarRule("op_5")]
	private AstParserRuleReturnScope<object, IToken> op_5()
	{
		EnterRule_op_5();
		EnterRule("op_5", 40);
		TraceIn("op_5", 40);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken NOT220 = default(IToken);

	    object NOT220_tree = default(object);
	    RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");

		try { DebugEnterRule(GrammarFileName, "op_5");
		DebugLocation(312, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:312:7: ( NOT -> T_NOT )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:312:9: NOT
			{
			DebugLocation(312, 9);
			NOT220=(IToken)Match(input,NOT,Follow._NOT_in_op_51848);  
			stream_NOT.Add(NOT220);



			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 312:13: -> T_NOT
			{
				DebugLocation(312, 16);
				adaptor.AddChild(root_0, (object)adaptor.Create(T_NOT, "T_NOT"));

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_5", 40);
			LeaveRule("op_5", 40);
			LeaveRule_op_5();
	    }
	 	DebugLocation(313, 1);
		} finally { DebugExitRule(GrammarFileName, "op_5"); }
		return retval;

	}
	// $ANTLR end "op_5"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_4() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_4() {}

	// $ANTLR start "expression_4"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:315:1: expression_4 : (a= expression_3 -> $a) ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )* ;
	[GrammarRule("expression_4")]
	private AstParserRuleReturnScope<object, IToken> expression_4()
	{
		EnterRule_expression_4();
		EnterRule("expression_4", 41);
		TraceIn("expression_4", 41);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS221 = default(IToken);
	    IToken WS223 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_4222 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS221_tree = default(object);
	    object WS223_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression_3=new RewriteRuleSubtreeStream(adaptor,"rule expression_3");
	    RewriteRuleSubtreeStream stream_op_4=new RewriteRuleSubtreeStream(adaptor,"rule op_4");
		try { DebugEnterRule(GrammarFileName, "expression_4");
		DebugLocation(315, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:316:2: ( (a= expression_3 -> $a) ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:316:4: (a= expression_3 -> $a) ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )*
			{
			DebugLocation(316, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:316:4: (a= expression_3 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:316:5: a= expression_3
			{
			DebugLocation(316, 6);
			PushFollow(Follow._expression_3_in_expression_41867);
			a=expression_3();
			PopFollow();

			stream_expression_3.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 316:19: -> $a
			{
				DebugLocation(316, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(316, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:316:25: ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )*
			try { DebugEnterSubRule(75);
			while (true)
			{
				int alt75=2;
				try { DebugEnterDecision(75, decisionCanBacktrack[75]);
				int LA75_0 = input.LA(1);

				if ((LA75_0==WS))
				{
					switch (input.LA(2))
					{
					case 162:
						{
						int LA75_4 = input.LA(3);

						if ((LA75_4==WS))
						{
							int LA75_13 = input.LA(4);

							if (((LA75_13>=CASE && LA75_13<=CAST)||LA75_13==CONVERT||LA75_13==EXISTS||LA75_13==NUMBER||LA75_13==SIMPLE_FILE||(LA75_13>=STRING && LA75_13<=SYSTEMVAR)||LA75_13==TOKEN||LA75_13==VARIABLE||LA75_13==150))
							{
								alt75 = 1;
							}


						}
						else if (((LA75_4>=CASE && LA75_4<=CAST)||LA75_4==CONVERT||LA75_4==EXISTS||LA75_4==NUMBER||LA75_4==SIMPLE_FILE||(LA75_4>=STRING && LA75_4<=SYSTEMVAR)||LA75_4==TOKEN||LA75_4==VARIABLE||LA75_4==150))
						{
							alt75 = 1;
						}


						}
						break;
					case 164:
						{
						int LA75_5 = input.LA(3);

						if ((LA75_5==WS))
						{
							int LA75_13 = input.LA(4);

							if (((LA75_13>=CASE && LA75_13<=CAST)||LA75_13==CONVERT||LA75_13==EXISTS||LA75_13==NUMBER||LA75_13==SIMPLE_FILE||(LA75_13>=STRING && LA75_13<=SYSTEMVAR)||LA75_13==TOKEN||LA75_13==VARIABLE||LA75_13==150))
							{
								alt75 = 1;
							}


						}
						else if (((LA75_5>=CASE && LA75_5<=CAST)||LA75_5==CONVERT||LA75_5==EXISTS||LA75_5==NUMBER||LA75_5==SIMPLE_FILE||(LA75_5>=STRING && LA75_5<=SYSTEMVAR)||LA75_5==TOKEN||LA75_5==VARIABLE||LA75_5==150))
						{
							alt75 = 1;
						}


						}
						break;
					case 160:
						{
						int LA75_6 = input.LA(3);

						if ((LA75_6==WS))
						{
							int LA75_13 = input.LA(4);

							if (((LA75_13>=CASE && LA75_13<=CAST)||LA75_13==CONVERT||LA75_13==EXISTS||LA75_13==NUMBER||LA75_13==SIMPLE_FILE||(LA75_13>=STRING && LA75_13<=SYSTEMVAR)||LA75_13==TOKEN||LA75_13==VARIABLE||LA75_13==150))
							{
								alt75 = 1;
							}


						}
						else if (((LA75_6>=CASE && LA75_6<=CAST)||LA75_6==CONVERT||LA75_6==EXISTS||LA75_6==NUMBER||LA75_6==SIMPLE_FILE||(LA75_6>=STRING && LA75_6<=SYSTEMVAR)||LA75_6==TOKEN||LA75_6==VARIABLE||LA75_6==150))
						{
							alt75 = 1;
						}


						}
						break;
					case 161:
						{
						int LA75_7 = input.LA(3);

						if ((LA75_7==WS))
						{
							int LA75_13 = input.LA(4);

							if (((LA75_13>=CASE && LA75_13<=CAST)||LA75_13==CONVERT||LA75_13==EXISTS||LA75_13==NUMBER||LA75_13==SIMPLE_FILE||(LA75_13>=STRING && LA75_13<=SYSTEMVAR)||LA75_13==TOKEN||LA75_13==VARIABLE||LA75_13==150))
							{
								alt75 = 1;
							}


						}
						else if (((LA75_7>=CASE && LA75_7<=CAST)||LA75_7==CONVERT||LA75_7==EXISTS||LA75_7==NUMBER||LA75_7==SIMPLE_FILE||(LA75_7>=STRING && LA75_7<=SYSTEMVAR)||LA75_7==TOKEN||LA75_7==VARIABLE||LA75_7==150))
						{
							alt75 = 1;
						}


						}
						break;
					case 146:
						{
						int LA75_8 = input.LA(3);

						if ((LA75_8==WS))
						{
							int LA75_13 = input.LA(4);

							if (((LA75_13>=CASE && LA75_13<=CAST)||LA75_13==CONVERT||LA75_13==EXISTS||LA75_13==NUMBER||LA75_13==SIMPLE_FILE||(LA75_13>=STRING && LA75_13<=SYSTEMVAR)||LA75_13==TOKEN||LA75_13==VARIABLE||LA75_13==150))
							{
								alt75 = 1;
							}


						}
						else if (((LA75_8>=CASE && LA75_8<=CAST)||LA75_8==CONVERT||LA75_8==EXISTS||LA75_8==NUMBER||LA75_8==SIMPLE_FILE||(LA75_8>=STRING && LA75_8<=SYSTEMVAR)||LA75_8==TOKEN||LA75_8==VARIABLE||LA75_8==150))
						{
							alt75 = 1;
						}


						}
						break;
					case 147:
						{
						int LA75_9 = input.LA(3);

						if ((LA75_9==WS))
						{
							int LA75_13 = input.LA(4);

							if (((LA75_13>=CASE && LA75_13<=CAST)||LA75_13==CONVERT||LA75_13==EXISTS||LA75_13==NUMBER||LA75_13==SIMPLE_FILE||(LA75_13>=STRING && LA75_13<=SYSTEMVAR)||LA75_13==TOKEN||LA75_13==VARIABLE||LA75_13==150))
							{
								alt75 = 1;
							}


						}
						else if (((LA75_9>=CASE && LA75_9<=CAST)||LA75_9==CONVERT||LA75_9==EXISTS||LA75_9==NUMBER||LA75_9==SIMPLE_FILE||(LA75_9>=STRING && LA75_9<=SYSTEMVAR)||LA75_9==TOKEN||LA75_9==VARIABLE||LA75_9==150))
						{
							alt75 = 1;
						}


						}
						break;
					case 145:
						{
						int LA75_10 = input.LA(3);

						if ((LA75_10==WS))
						{
							int LA75_13 = input.LA(4);

							if (((LA75_13>=CASE && LA75_13<=CAST)||LA75_13==CONVERT||LA75_13==EXISTS||LA75_13==NUMBER||LA75_13==SIMPLE_FILE||(LA75_13>=STRING && LA75_13<=SYSTEMVAR)||LA75_13==TOKEN||LA75_13==VARIABLE||LA75_13==150))
							{
								alt75 = 1;
							}


						}
						else if (((LA75_10>=CASE && LA75_10<=CAST)||LA75_10==CONVERT||LA75_10==EXISTS||LA75_10==NUMBER||LA75_10==SIMPLE_FILE||(LA75_10>=STRING && LA75_10<=SYSTEMVAR)||LA75_10==TOKEN||LA75_10==VARIABLE||LA75_10==150))
						{
							alt75 = 1;
						}


						}
						break;
					case 163:
						{
						int LA75_11 = input.LA(3);

						if ((LA75_11==WS))
						{
							int LA75_13 = input.LA(4);

							if (((LA75_13>=CASE && LA75_13<=CAST)||LA75_13==CONVERT||LA75_13==EXISTS||LA75_13==NUMBER||LA75_13==SIMPLE_FILE||(LA75_13>=STRING && LA75_13<=SYSTEMVAR)||LA75_13==TOKEN||LA75_13==VARIABLE||LA75_13==150))
							{
								alt75 = 1;
							}


						}
						else if (((LA75_11>=CASE && LA75_11<=CAST)||LA75_11==CONVERT||LA75_11==EXISTS||LA75_11==NUMBER||LA75_11==SIMPLE_FILE||(LA75_11>=STRING && LA75_11<=SYSTEMVAR)||LA75_11==TOKEN||LA75_11==VARIABLE||LA75_11==150))
						{
							alt75 = 1;
						}


						}
						break;
					case 159:
						{
						int LA75_12 = input.LA(3);

						if ((LA75_12==WS))
						{
							int LA75_13 = input.LA(4);

							if (((LA75_13>=CASE && LA75_13<=CAST)||LA75_13==CONVERT||LA75_13==EXISTS||LA75_13==NUMBER||LA75_13==SIMPLE_FILE||(LA75_13>=STRING && LA75_13<=SYSTEMVAR)||LA75_13==TOKEN||LA75_13==VARIABLE||LA75_13==150))
							{
								alt75 = 1;
							}


						}
						else if (((LA75_12>=CASE && LA75_12<=CAST)||LA75_12==CONVERT||LA75_12==EXISTS||LA75_12==NUMBER||LA75_12==SIMPLE_FILE||(LA75_12>=STRING && LA75_12<=SYSTEMVAR)||LA75_12==TOKEN||LA75_12==VARIABLE||LA75_12==150))
						{
							alt75 = 1;
						}


						}
						break;
					}

				}
				else if (((LA75_0>=145 && LA75_0<=147)||(LA75_0>=159 && LA75_0<=164)))
				{
					alt75 = 1;
				}


				} finally { DebugExitDecision(75); }
				switch ( alt75 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:316:26: ( WS )? op_4 ( WS )? b= expression_3
					{
					DebugLocation(316, 26);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:316:26: ( WS )?
					int alt73=2;
					try { DebugEnterSubRule(73);
					try { DebugEnterDecision(73, decisionCanBacktrack[73]);
					int LA73_0 = input.LA(1);

					if ((LA73_0==WS))
					{
						alt73 = 1;
					}
					} finally { DebugExitDecision(73); }
					switch (alt73)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:316:26: WS
						{
						DebugLocation(316, 26);
						WS221=(IToken)Match(input,WS,Follow._WS_in_expression_41874);  
						stream_WS.Add(WS221);


						}
						break;

					}
					} finally { DebugExitSubRule(73); }

					DebugLocation(316, 30);
					PushFollow(Follow._op_4_in_expression_41877);
					op_4222=op_4();
					PopFollow();

					stream_op_4.Add(op_4222.Tree);
					DebugLocation(316, 35);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:316:35: ( WS )?
					int alt74=2;
					try { DebugEnterSubRule(74);
					try { DebugEnterDecision(74, decisionCanBacktrack[74]);
					int LA74_0 = input.LA(1);

					if ((LA74_0==WS))
					{
						alt74 = 1;
					}
					} finally { DebugExitDecision(74); }
					switch (alt74)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:316:35: WS
						{
						DebugLocation(316, 35);
						WS223=(IToken)Match(input,WS,Follow._WS_in_expression_41879);  
						stream_WS.Add(WS223);


						}
						break;

					}
					} finally { DebugExitSubRule(74); }

					DebugLocation(316, 40);
					PushFollow(Follow._expression_3_in_expression_41884);
					b=expression_3();
					PopFollow();

					stream_expression_3.Add(b.Tree);


					{
					// AST REWRITE
					// elements: expression_4, b, op_4
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 316:54: -> ^( T_OP_BINARY op_4 $expression_4 $b)
					{
						DebugLocation(316, 57);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:316:57: ^( T_OP_BINARY op_4 $expression_4 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(316, 59);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(316, 71);
						adaptor.AddChild(root_1, stream_op_4.NextTree());
						DebugLocation(316, 77);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(316, 91);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop75;
				}
			}

			loop75:
				;

			} finally { DebugExitSubRule(75); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_4", 41);
			LeaveRule("expression_4", 41);
			LeaveRule_expression_4();
	    }
	 	DebugLocation(317, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_4"); }
		return retval;

	}
	// $ANTLR end "expression_4"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_4() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_4() {}

	// $ANTLR start "op_4"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:319:1: op_4 : ( '=' -> T_EQUAL | '>=' -> T_NOTLESS | '<=' -> T_NOTGREATER | '<>' -> T_NOTEQUAL | '!=' -> T_NOTEQUAL | '!>' -> T_NOTGREATER | '!<' -> T_NOTLESS | '>' -> T_GREATER | '<' -> T_LESS );
	[GrammarRule("op_4")]
	private AstParserRuleReturnScope<object, IToken> op_4()
	{
		EnterRule_op_4();
		EnterRule("op_4", 42);
		TraceIn("op_4", 42);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal224 = default(IToken);
	    IToken string_literal225 = default(IToken);
	    IToken string_literal226 = default(IToken);
	    IToken string_literal227 = default(IToken);
	    IToken string_literal228 = default(IToken);
	    IToken string_literal229 = default(IToken);
	    IToken string_literal230 = default(IToken);
	    IToken char_literal231 = default(IToken);
	    IToken char_literal232 = default(IToken);

	    object char_literal224_tree = default(object);
	    object string_literal225_tree = default(object);
	    object string_literal226_tree = default(object);
	    object string_literal227_tree = default(object);
	    object string_literal228_tree = default(object);
	    object string_literal229_tree = default(object);
	    object string_literal230_tree = default(object);
	    object char_literal231_tree = default(object);
	    object char_literal232_tree = default(object);
	    RewriteRuleITokenStream stream_161=new RewriteRuleITokenStream(adaptor,"token 161");
	    RewriteRuleITokenStream stream_162=new RewriteRuleITokenStream(adaptor,"token 162");
	    RewriteRuleITokenStream stream_163=new RewriteRuleITokenStream(adaptor,"token 163");
	    RewriteRuleITokenStream stream_145=new RewriteRuleITokenStream(adaptor,"token 145");
	    RewriteRuleITokenStream stream_146=new RewriteRuleITokenStream(adaptor,"token 146");
	    RewriteRuleITokenStream stream_164=new RewriteRuleITokenStream(adaptor,"token 164");
	    RewriteRuleITokenStream stream_147=new RewriteRuleITokenStream(adaptor,"token 147");
	    RewriteRuleITokenStream stream_160=new RewriteRuleITokenStream(adaptor,"token 160");
	    RewriteRuleITokenStream stream_159=new RewriteRuleITokenStream(adaptor,"token 159");

		try { DebugEnterRule(GrammarFileName, "op_4");
		DebugLocation(319, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:319:6: ( '=' -> T_EQUAL | '>=' -> T_NOTLESS | '<=' -> T_NOTGREATER | '<>' -> T_NOTEQUAL | '!=' -> T_NOTEQUAL | '!>' -> T_NOTGREATER | '!<' -> T_NOTLESS | '>' -> T_GREATER | '<' -> T_LESS )
			int alt76=9;
			try { DebugEnterDecision(76, decisionCanBacktrack[76]);
			switch (input.LA(1))
			{
			case 162:
				{
				alt76 = 1;
				}
				break;
			case 164:
				{
				alt76 = 2;
				}
				break;
			case 160:
				{
				alt76 = 3;
				}
				break;
			case 161:
				{
				alt76 = 4;
				}
				break;
			case 146:
				{
				alt76 = 5;
				}
				break;
			case 147:
				{
				alt76 = 6;
				}
				break;
			case 145:
				{
				alt76 = 7;
				}
				break;
			case 163:
				{
				alt76 = 8;
				}
				break;
			case 159:
				{
				alt76 = 9;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 76, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(76); }
			switch (alt76)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:319:8: '='
				{
				DebugLocation(319, 8);
				char_literal224=(IToken)Match(input,162,Follow._162_in_op_41910);  
				stream_162.Add(char_literal224);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 319:12: -> T_EQUAL
				{
					DebugLocation(319, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_EQUAL, "T_EQUAL"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:320:4: '>='
				{
				DebugLocation(320, 4);
				string_literal225=(IToken)Match(input,164,Follow._164_in_op_41919);  
				stream_164.Add(string_literal225);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 320:9: -> T_NOTLESS
				{
					DebugLocation(320, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTLESS, "T_NOTLESS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:321:4: '<='
				{
				DebugLocation(321, 4);
				string_literal226=(IToken)Match(input,160,Follow._160_in_op_41929);  
				stream_160.Add(string_literal226);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 321:9: -> T_NOTGREATER
				{
					DebugLocation(321, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTGREATER, "T_NOTGREATER"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:322:4: '<>'
				{
				DebugLocation(322, 4);
				string_literal227=(IToken)Match(input,161,Follow._161_in_op_41939);  
				stream_161.Add(string_literal227);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 322:9: -> T_NOTEQUAL
				{
					DebugLocation(322, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTEQUAL, "T_NOTEQUAL"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:323:4: '!='
				{
				DebugLocation(323, 4);
				string_literal228=(IToken)Match(input,146,Follow._146_in_op_41948);  
				stream_146.Add(string_literal228);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 323:9: -> T_NOTEQUAL
				{
					DebugLocation(323, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTEQUAL, "T_NOTEQUAL"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:324:4: '!>'
				{
				DebugLocation(324, 4);
				string_literal229=(IToken)Match(input,147,Follow._147_in_op_41957);  
				stream_147.Add(string_literal229);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 324:9: -> T_NOTGREATER
				{
					DebugLocation(324, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTGREATER, "T_NOTGREATER"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:325:4: '!<'
				{
				DebugLocation(325, 4);
				string_literal230=(IToken)Match(input,145,Follow._145_in_op_41966);  
				stream_145.Add(string_literal230);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 325:9: -> T_NOTLESS
				{
					DebugLocation(325, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTLESS, "T_NOTLESS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:326:4: '>'
				{
				DebugLocation(326, 4);
				char_literal231=(IToken)Match(input,163,Follow._163_in_op_41975);  
				stream_163.Add(char_literal231);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 326:8: -> T_GREATER
				{
					DebugLocation(326, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_GREATER, "T_GREATER"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:327:4: '<'
				{
				DebugLocation(327, 4);
				char_literal232=(IToken)Match(input,159,Follow._159_in_op_41985);  
				stream_159.Add(char_literal232);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 327:8: -> T_LESS
				{
					DebugLocation(327, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_LESS, "T_LESS"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_4", 42);
			LeaveRule("op_4", 42);
			LeaveRule_op_4();
	    }
	 	DebugLocation(328, 1);
		} finally { DebugExitRule(GrammarFileName, "op_4"); }
		return retval;

	}
	// $ANTLR end "op_4"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_3() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_3() {}

	// $ANTLR start "expression_3"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:330:1: expression_3 : (a= expression_2 -> $a) ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )* ;
	[GrammarRule("expression_3")]
	private AstParserRuleReturnScope<object, IToken> expression_3()
	{
		EnterRule_expression_3();
		EnterRule("expression_3", 43);
		TraceIn("expression_3", 43);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS233 = default(IToken);
	    IToken WS235 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_3234 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS233_tree = default(object);
	    object WS235_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_op_3=new RewriteRuleSubtreeStream(adaptor,"rule op_3");
	    RewriteRuleSubtreeStream stream_expression_2=new RewriteRuleSubtreeStream(adaptor,"rule expression_2");
		try { DebugEnterRule(GrammarFileName, "expression_3");
		DebugLocation(330, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:331:2: ( (a= expression_2 -> $a) ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:331:4: (a= expression_2 -> $a) ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )*
			{
			DebugLocation(331, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:331:4: (a= expression_2 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:331:5: a= expression_2
			{
			DebugLocation(331, 6);
			PushFollow(Follow._expression_2_in_expression_32004);
			a=expression_2();
			PopFollow();

			stream_expression_2.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 331:19: -> $a
			{
				DebugLocation(331, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(331, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:331:25: ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )*
			try { DebugEnterSubRule(79);
			while (true)
			{
				int alt79=2;
				try { DebugEnterDecision(79, decisionCanBacktrack[79]);
				int LA79_0 = input.LA(1);

				if ((LA79_0==WS))
				{
					int LA79_1 = input.LA(2);

					if ((LA79_1==149||LA79_1==153||LA79_1==155||(LA79_1>=167 && LA79_1<=168)))
					{
						alt79 = 1;
					}


				}
				else if ((LA79_0==149||LA79_0==153||LA79_0==155||(LA79_0>=167 && LA79_0<=168)))
				{
					alt79 = 1;
				}


				} finally { DebugExitDecision(79); }
				switch ( alt79 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:331:26: ( WS )? op_3 ( WS )? b= expression_2
					{
					DebugLocation(331, 26);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:331:26: ( WS )?
					int alt77=2;
					try { DebugEnterSubRule(77);
					try { DebugEnterDecision(77, decisionCanBacktrack[77]);
					int LA77_0 = input.LA(1);

					if ((LA77_0==WS))
					{
						alt77 = 1;
					}
					} finally { DebugExitDecision(77); }
					switch (alt77)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:331:26: WS
						{
						DebugLocation(331, 26);
						WS233=(IToken)Match(input,WS,Follow._WS_in_expression_32011);  
						stream_WS.Add(WS233);


						}
						break;

					}
					} finally { DebugExitSubRule(77); }

					DebugLocation(331, 30);
					PushFollow(Follow._op_3_in_expression_32014);
					op_3234=op_3();
					PopFollow();

					stream_op_3.Add(op_3234.Tree);
					DebugLocation(331, 35);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:331:35: ( WS )?
					int alt78=2;
					try { DebugEnterSubRule(78);
					try { DebugEnterDecision(78, decisionCanBacktrack[78]);
					int LA78_0 = input.LA(1);

					if ((LA78_0==WS))
					{
						alt78 = 1;
					}
					} finally { DebugExitDecision(78); }
					switch (alt78)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:331:35: WS
						{
						DebugLocation(331, 35);
						WS235=(IToken)Match(input,WS,Follow._WS_in_expression_32016);  
						stream_WS.Add(WS235);


						}
						break;

					}
					} finally { DebugExitSubRule(78); }

					DebugLocation(331, 40);
					PushFollow(Follow._expression_2_in_expression_32021);
					b=expression_2();
					PopFollow();

					stream_expression_2.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, expression_3, op_3
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 331:54: -> ^( T_OP_BINARY op_3 $expression_3 $b)
					{
						DebugLocation(331, 57);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:331:57: ^( T_OP_BINARY op_3 $expression_3 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(331, 59);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(331, 71);
						adaptor.AddChild(root_1, stream_op_3.NextTree());
						DebugLocation(331, 77);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(331, 91);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop79;
				}
			}

			loop79:
				;

			} finally { DebugExitSubRule(79); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_3", 43);
			LeaveRule("expression_3", 43);
			LeaveRule_expression_3();
	    }
	 	DebugLocation(332, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_3"); }
		return retval;

	}
	// $ANTLR end "expression_3"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_3() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_3() {}

	// $ANTLR start "op_3"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:334:1: op_3 : ( '+' -> T_PLUS | '-' -> T_MINUS | '&' -> T_BITWISE_AND | '|' -> T_BITWISE_OR | '^' -> T_BITWISE_XOR );
	[GrammarRule("op_3")]
	private AstParserRuleReturnScope<object, IToken> op_3()
	{
		EnterRule_op_3();
		EnterRule("op_3", 44);
		TraceIn("op_3", 44);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal236 = default(IToken);
	    IToken char_literal237 = default(IToken);
	    IToken char_literal238 = default(IToken);
	    IToken char_literal239 = default(IToken);
	    IToken char_literal240 = default(IToken);

	    object char_literal236_tree = default(object);
	    object char_literal237_tree = default(object);
	    object char_literal238_tree = default(object);
	    object char_literal239_tree = default(object);
	    object char_literal240_tree = default(object);
	    RewriteRuleITokenStream stream_153=new RewriteRuleITokenStream(adaptor,"token 153");
	    RewriteRuleITokenStream stream_149=new RewriteRuleITokenStream(adaptor,"token 149");
	    RewriteRuleITokenStream stream_168=new RewriteRuleITokenStream(adaptor,"token 168");
	    RewriteRuleITokenStream stream_155=new RewriteRuleITokenStream(adaptor,"token 155");
	    RewriteRuleITokenStream stream_167=new RewriteRuleITokenStream(adaptor,"token 167");

		try { DebugEnterRule(GrammarFileName, "op_3");
		DebugLocation(334, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:334:6: ( '+' -> T_PLUS | '-' -> T_MINUS | '&' -> T_BITWISE_AND | '|' -> T_BITWISE_OR | '^' -> T_BITWISE_XOR )
			int alt80=5;
			try { DebugEnterDecision(80, decisionCanBacktrack[80]);
			switch (input.LA(1))
			{
			case 153:
				{
				alt80 = 1;
				}
				break;
			case 155:
				{
				alt80 = 2;
				}
				break;
			case 149:
				{
				alt80 = 3;
				}
				break;
			case 168:
				{
				alt80 = 4;
				}
				break;
			case 167:
				{
				alt80 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 80, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(80); }
			switch (alt80)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:334:8: '+'
				{
				DebugLocation(334, 8);
				char_literal236=(IToken)Match(input,153,Follow._153_in_op_32047);  
				stream_153.Add(char_literal236);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 334:12: -> T_PLUS
				{
					DebugLocation(334, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_PLUS, "T_PLUS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:335:4: '-'
				{
				DebugLocation(335, 4);
				char_literal237=(IToken)Match(input,155,Follow._155_in_op_32056);  
				stream_155.Add(char_literal237);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 335:8: -> T_MINUS
				{
					DebugLocation(335, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MINUS, "T_MINUS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:336:4: '&'
				{
				DebugLocation(336, 4);
				char_literal238=(IToken)Match(input,149,Follow._149_in_op_32065);  
				stream_149.Add(char_literal238);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 336:8: -> T_BITWISE_AND
				{
					DebugLocation(336, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_AND, "T_BITWISE_AND"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:337:4: '|'
				{
				DebugLocation(337, 4);
				char_literal239=(IToken)Match(input,168,Follow._168_in_op_32074);  
				stream_168.Add(char_literal239);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 337:8: -> T_BITWISE_OR
				{
					DebugLocation(337, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_OR, "T_BITWISE_OR"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:338:4: '^'
				{
				DebugLocation(338, 4);
				char_literal240=(IToken)Match(input,167,Follow._167_in_op_32083);  
				stream_167.Add(char_literal240);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 338:8: -> T_BITWISE_XOR
				{
					DebugLocation(338, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_XOR, "T_BITWISE_XOR"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_3", 44);
			LeaveRule("op_3", 44);
			LeaveRule_op_3();
	    }
	 	DebugLocation(339, 1);
		} finally { DebugExitRule(GrammarFileName, "op_3"); }
		return retval;

	}
	// $ANTLR end "op_3"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_2() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_2() {}

	// $ANTLR start "expression_2"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:347:1: expression_2 : (a= expression_1 -> $a) ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )* ;
	[GrammarRule("expression_2")]
	private AstParserRuleReturnScope<object, IToken> expression_2()
	{
		EnterRule_expression_2();
		EnterRule("expression_2", 45);
		TraceIn("expression_2", 45);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS241 = default(IToken);
	    IToken WS243 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_2242 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS241_tree = default(object);
	    object WS243_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_op_2=new RewriteRuleSubtreeStream(adaptor,"rule op_2");
	    RewriteRuleSubtreeStream stream_expression_1=new RewriteRuleSubtreeStream(adaptor,"rule expression_1");
		try { DebugEnterRule(GrammarFileName, "expression_2");
		DebugLocation(347, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:348:2: ( (a= expression_1 -> $a) ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:348:4: (a= expression_1 -> $a) ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )*
			{
			DebugLocation(348, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:348:4: (a= expression_1 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:348:5: a= expression_1
			{
			DebugLocation(348, 6);
			PushFollow(Follow._expression_1_in_expression_22105);
			a=expression_1();
			PopFollow();

			stream_expression_1.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 348:19: -> $a
			{
				DebugLocation(348, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(348, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:348:25: ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )*
			try { DebugEnterSubRule(83);
			while (true)
			{
				int alt83=2;
				try { DebugEnterDecision(83, decisionCanBacktrack[83]);
				int LA83_0 = input.LA(1);

				if ((LA83_0==WS))
				{
					int LA83_1 = input.LA(2);

					if ((LA83_1==152))
					{
						int LA83_4 = input.LA(3);

						if ((LA83_4==WS))
						{
							int LA83_5 = input.LA(4);

							if (((LA83_5>=CASE && LA83_5<=CAST)||LA83_5==CONVERT||LA83_5==EXISTS||LA83_5==NUMBER||LA83_5==SIMPLE_FILE||(LA83_5>=STRING && LA83_5<=SYSTEMVAR)||LA83_5==TOKEN||LA83_5==VARIABLE||LA83_5==150))
							{
								alt83 = 1;
							}


						}
						else if (((LA83_4>=CASE && LA83_4<=CAST)||LA83_4==CONVERT||LA83_4==EXISTS||LA83_4==NUMBER||LA83_4==SIMPLE_FILE||(LA83_4>=STRING && LA83_4<=SYSTEMVAR)||LA83_4==TOKEN||LA83_4==VARIABLE||LA83_4==150))
						{
							alt83 = 1;
						}


					}
					else if ((LA83_1==148||LA83_1==157))
					{
						alt83 = 1;
					}


				}
				else if ((LA83_0==148||LA83_0==152||LA83_0==157))
				{
					alt83 = 1;
				}


				} finally { DebugExitDecision(83); }
				switch ( alt83 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:348:26: ( WS )? op_2 ( WS )? b= expression_1
					{
					DebugLocation(348, 26);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:348:26: ( WS )?
					int alt81=2;
					try { DebugEnterSubRule(81);
					try { DebugEnterDecision(81, decisionCanBacktrack[81]);
					int LA81_0 = input.LA(1);

					if ((LA81_0==WS))
					{
						alt81 = 1;
					}
					} finally { DebugExitDecision(81); }
					switch (alt81)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:348:26: WS
						{
						DebugLocation(348, 26);
						WS241=(IToken)Match(input,WS,Follow._WS_in_expression_22112);  
						stream_WS.Add(WS241);


						}
						break;

					}
					} finally { DebugExitSubRule(81); }

					DebugLocation(348, 30);
					PushFollow(Follow._op_2_in_expression_22115);
					op_2242=op_2();
					PopFollow();

					stream_op_2.Add(op_2242.Tree);
					DebugLocation(348, 35);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:348:35: ( WS )?
					int alt82=2;
					try { DebugEnterSubRule(82);
					try { DebugEnterDecision(82, decisionCanBacktrack[82]);
					int LA82_0 = input.LA(1);

					if ((LA82_0==WS))
					{
						alt82 = 1;
					}
					} finally { DebugExitDecision(82); }
					switch (alt82)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:348:35: WS
						{
						DebugLocation(348, 35);
						WS243=(IToken)Match(input,WS,Follow._WS_in_expression_22117);  
						stream_WS.Add(WS243);


						}
						break;

					}
					} finally { DebugExitSubRule(82); }

					DebugLocation(348, 40);
					PushFollow(Follow._expression_1_in_expression_22122);
					b=expression_1();
					PopFollow();

					stream_expression_1.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, expression_2, op_2
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 348:54: -> ^( T_OP_BINARY op_2 $expression_2 $b)
					{
						DebugLocation(348, 57);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:348:57: ^( T_OP_BINARY op_2 $expression_2 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(348, 59);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(348, 71);
						adaptor.AddChild(root_1, stream_op_2.NextTree());
						DebugLocation(348, 77);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(348, 91);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop83;
				}
			}

			loop83:
				;

			} finally { DebugExitSubRule(83); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_2", 45);
			LeaveRule("expression_2", 45);
			LeaveRule_expression_2();
	    }
	 	DebugLocation(349, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_2"); }
		return retval;

	}
	// $ANTLR end "expression_2"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_2() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_2() {}

	// $ANTLR start "op_2"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:351:1: op_2 : ( '*' -> T_PRODUCT | '/' -> T_DIVIDE | '%' -> T_MODULO );
	[GrammarRule("op_2")]
	private AstParserRuleReturnScope<object, IToken> op_2()
	{
		EnterRule_op_2();
		EnterRule("op_2", 46);
		TraceIn("op_2", 46);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal244 = default(IToken);
	    IToken char_literal245 = default(IToken);
	    IToken char_literal246 = default(IToken);

	    object char_literal244_tree = default(object);
	    object char_literal245_tree = default(object);
	    object char_literal246_tree = default(object);
	    RewriteRuleITokenStream stream_152=new RewriteRuleITokenStream(adaptor,"token 152");
	    RewriteRuleITokenStream stream_148=new RewriteRuleITokenStream(adaptor,"token 148");
	    RewriteRuleITokenStream stream_157=new RewriteRuleITokenStream(adaptor,"token 157");

		try { DebugEnterRule(GrammarFileName, "op_2");
		DebugLocation(351, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:351:6: ( '*' -> T_PRODUCT | '/' -> T_DIVIDE | '%' -> T_MODULO )
			int alt84=3;
			try { DebugEnterDecision(84, decisionCanBacktrack[84]);
			switch (input.LA(1))
			{
			case 152:
				{
				alt84 = 1;
				}
				break;
			case 157:
				{
				alt84 = 2;
				}
				break;
			case 148:
				{
				alt84 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 84, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(84); }
			switch (alt84)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:351:8: '*'
				{
				DebugLocation(351, 8);
				char_literal244=(IToken)Match(input,152,Follow._152_in_op_22148);  
				stream_152.Add(char_literal244);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 351:12: -> T_PRODUCT
				{
					DebugLocation(351, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_PRODUCT, "T_PRODUCT"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:352:4: '/'
				{
				DebugLocation(352, 4);
				char_literal245=(IToken)Match(input,157,Follow._157_in_op_22157);  
				stream_157.Add(char_literal245);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 352:8: -> T_DIVIDE
				{
					DebugLocation(352, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_DIVIDE, "T_DIVIDE"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:353:4: '%'
				{
				DebugLocation(353, 4);
				char_literal246=(IToken)Match(input,148,Follow._148_in_op_22166);  
				stream_148.Add(char_literal246);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 353:8: -> T_MODULO
				{
					DebugLocation(353, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MODULO, "T_MODULO"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_2", 46);
			LeaveRule("op_2", 46);
			LeaveRule_op_2();
	    }
	 	DebugLocation(354, 1);
		} finally { DebugExitRule(GrammarFileName, "op_2"); }
		return retval;

	}
	// $ANTLR end "op_2"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_1() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_1() {}

	// $ANTLR start "expression_1"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:356:1: expression_1 : ( '(' ( WS )? op_1 ( WS )? expression_1 ( WS )? ')' -> ^( T_OP_UNARY op_1 expression_1 ) | expression_atom );
	[GrammarRule("expression_1")]
	private AstParserRuleReturnScope<object, IToken> expression_1()
	{
		EnterRule_expression_1();
		EnterRule("expression_1", 47);
		TraceIn("expression_1", 47);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal247 = default(IToken);
	    IToken WS248 = default(IToken);
	    IToken WS250 = default(IToken);
	    IToken WS252 = default(IToken);
	    IToken char_literal253 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> op_1249 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_1251 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_atom254 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal247_tree = default(object);
	    object WS248_tree = default(object);
	    object WS250_tree = default(object);
	    object WS252_tree = default(object);
	    object char_literal253_tree = default(object);
	    RewriteRuleITokenStream stream_150=new RewriteRuleITokenStream(adaptor,"token 150");
	    RewriteRuleITokenStream stream_151=new RewriteRuleITokenStream(adaptor,"token 151");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression_1=new RewriteRuleSubtreeStream(adaptor,"rule expression_1");
	    RewriteRuleSubtreeStream stream_op_1=new RewriteRuleSubtreeStream(adaptor,"rule op_1");
		try { DebugEnterRule(GrammarFileName, "expression_1");
		DebugLocation(356, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:358:2: ( '(' ( WS )? op_1 ( WS )? expression_1 ( WS )? ')' -> ^( T_OP_UNARY op_1 expression_1 ) | expression_atom )
			int alt88=2;
			try { DebugEnterDecision(88, decisionCanBacktrack[88]);
			int LA88_0 = input.LA(1);

			if ((LA88_0==150))
			{
				switch (input.LA(2))
				{
				case WS:
					{
					int LA88_3 = input.LA(3);

					if ((LA88_3==153||LA88_3==155||LA88_3==169))
					{
						alt88 = 1;
					}
					else if ((LA88_3==SELECT))
					{
						alt88 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 88, 3, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 153:
				case 155:
				case 169:
					{
					alt88 = 1;
					}
					break;
				case CASE:
				case CAST:
				case CONVERT:
				case EXISTS:
				case NOT:
				case NUMBER:
				case SELECT:
				case SIMPLE_FILE:
				case STRING:
				case SYSTEMVAR:
				case TOKEN:
				case VARIABLE:
				case 150:
					{
					alt88 = 2;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 88, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else if (((LA88_0>=CASE && LA88_0<=CAST)||LA88_0==CONVERT||LA88_0==EXISTS||LA88_0==NUMBER||LA88_0==SIMPLE_FILE||(LA88_0>=STRING && LA88_0<=SYSTEMVAR)||LA88_0==TOKEN||LA88_0==VARIABLE))
			{
				alt88 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 88, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(88); }
			switch (alt88)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:358:4: '(' ( WS )? op_1 ( WS )? expression_1 ( WS )? ')'
				{
				DebugLocation(358, 4);
				char_literal247=(IToken)Match(input,150,Follow._150_in_expression_12184);  
				stream_150.Add(char_literal247);

				DebugLocation(358, 8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:358:8: ( WS )?
				int alt85=2;
				try { DebugEnterSubRule(85);
				try { DebugEnterDecision(85, decisionCanBacktrack[85]);
				int LA85_0 = input.LA(1);

				if ((LA85_0==WS))
				{
					alt85 = 1;
				}
				} finally { DebugExitDecision(85); }
				switch (alt85)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:358:8: WS
					{
					DebugLocation(358, 8);
					WS248=(IToken)Match(input,WS,Follow._WS_in_expression_12186);  
					stream_WS.Add(WS248);


					}
					break;

				}
				} finally { DebugExitSubRule(85); }

				DebugLocation(358, 12);
				PushFollow(Follow._op_1_in_expression_12189);
				op_1249=op_1();
				PopFollow();

				stream_op_1.Add(op_1249.Tree);
				DebugLocation(358, 17);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:358:17: ( WS )?
				int alt86=2;
				try { DebugEnterSubRule(86);
				try { DebugEnterDecision(86, decisionCanBacktrack[86]);
				int LA86_0 = input.LA(1);

				if ((LA86_0==WS))
				{
					alt86 = 1;
				}
				} finally { DebugExitDecision(86); }
				switch (alt86)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:358:17: WS
					{
					DebugLocation(358, 17);
					WS250=(IToken)Match(input,WS,Follow._WS_in_expression_12191);  
					stream_WS.Add(WS250);


					}
					break;

				}
				} finally { DebugExitSubRule(86); }

				DebugLocation(358, 21);
				PushFollow(Follow._expression_1_in_expression_12194);
				expression_1251=expression_1();
				PopFollow();

				stream_expression_1.Add(expression_1251.Tree);
				DebugLocation(358, 34);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:358:34: ( WS )?
				int alt87=2;
				try { DebugEnterSubRule(87);
				try { DebugEnterDecision(87, decisionCanBacktrack[87]);
				int LA87_0 = input.LA(1);

				if ((LA87_0==WS))
				{
					alt87 = 1;
				}
				} finally { DebugExitDecision(87); }
				switch (alt87)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:358:34: WS
					{
					DebugLocation(358, 34);
					WS252=(IToken)Match(input,WS,Follow._WS_in_expression_12196);  
					stream_WS.Add(WS252);


					}
					break;

				}
				} finally { DebugExitSubRule(87); }

				DebugLocation(358, 38);
				char_literal253=(IToken)Match(input,151,Follow._151_in_expression_12199);  
				stream_151.Add(char_literal253);



				{
				// AST REWRITE
				// elements: op_1, expression_1
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 358:42: -> ^( T_OP_UNARY op_1 expression_1 )
				{
					DebugLocation(358, 45);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:358:45: ^( T_OP_UNARY op_1 expression_1 )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(358, 47);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_UNARY, "T_OP_UNARY"), root_1);

					DebugLocation(358, 58);
					adaptor.AddChild(root_1, stream_op_1.NextTree());
					DebugLocation(358, 63);
					adaptor.AddChild(root_1, stream_expression_1.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:360:4: expression_atom
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(360, 4);
				PushFollow(Follow._expression_atom_in_expression_12216);
				expression_atom254=expression_atom();
				PopFollow();

				adaptor.AddChild(root_0, expression_atom254.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_1", 47);
			LeaveRule("expression_1", 47);
			LeaveRule_expression_1();
	    }
	 	DebugLocation(361, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_1"); }
		return retval;

	}
	// $ANTLR end "expression_1"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_1() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_1() {}

	// $ANTLR start "op_1"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:363:1: op_1 : ( '~' -> T_BITWISE_NOT | '+' -> T_PLUS | '-' -> T_MINUS );
	[GrammarRule("op_1")]
	private AstParserRuleReturnScope<object, IToken> op_1()
	{
		EnterRule_op_1();
		EnterRule("op_1", 48);
		TraceIn("op_1", 48);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal255 = default(IToken);
	    IToken char_literal256 = default(IToken);
	    IToken char_literal257 = default(IToken);

	    object char_literal255_tree = default(object);
	    object char_literal256_tree = default(object);
	    object char_literal257_tree = default(object);
	    RewriteRuleITokenStream stream_153=new RewriteRuleITokenStream(adaptor,"token 153");
	    RewriteRuleITokenStream stream_169=new RewriteRuleITokenStream(adaptor,"token 169");
	    RewriteRuleITokenStream stream_155=new RewriteRuleITokenStream(adaptor,"token 155");

		try { DebugEnterRule(GrammarFileName, "op_1");
		DebugLocation(363, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:363:6: ( '~' -> T_BITWISE_NOT | '+' -> T_PLUS | '-' -> T_MINUS )
			int alt89=3;
			try { DebugEnterDecision(89, decisionCanBacktrack[89]);
			switch (input.LA(1))
			{
			case 169:
				{
				alt89 = 1;
				}
				break;
			case 153:
				{
				alt89 = 2;
				}
				break;
			case 155:
				{
				alt89 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 89, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(89); }
			switch (alt89)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:363:8: '~'
				{
				DebugLocation(363, 8);
				char_literal255=(IToken)Match(input,169,Follow._169_in_op_12226);  
				stream_169.Add(char_literal255);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 363:12: -> T_BITWISE_NOT
				{
					DebugLocation(363, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_NOT, "T_BITWISE_NOT"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:364:5: '+'
				{
				DebugLocation(364, 5);
				char_literal256=(IToken)Match(input,153,Follow._153_in_op_12236);  
				stream_153.Add(char_literal256);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 364:9: -> T_PLUS
				{
					DebugLocation(364, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_PLUS, "T_PLUS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:365:4: '-'
				{
				DebugLocation(365, 4);
				char_literal257=(IToken)Match(input,155,Follow._155_in_op_12245);  
				stream_155.Add(char_literal257);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 365:8: -> T_MINUS
				{
					DebugLocation(365, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MINUS, "T_MINUS"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_1", 48);
			LeaveRule("op_1", 48);
			LeaveRule_op_1();
	    }
	 	DebugLocation(366, 1);
		} finally { DebugExitRule(GrammarFileName, "op_1"); }
		return retval;

	}
	// $ANTLR end "op_1"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_atom() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_atom() {}

	// $ANTLR start "expression_atom"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:368:1: expression_atom : ( NUMBER -> ^( T_INTEGER NUMBER ) | string | SYSTEMVAR -> ^( T_SYSTEMVAR SYSTEMVAR ) | variable | subquery | '(' expression ')' -> expression | functioncall_or_column | conversion | case | EXISTS ( WS )? '(' ( WS )? select_command ( WS )? ')' -> ^( T_EXISTS select_command ) );
	[GrammarRule("expression_atom")]
	private AstParserRuleReturnScope<object, IToken> expression_atom()
	{
		EnterRule_expression_atom();
		EnterRule("expression_atom", 49);
		TraceIn("expression_atom", 49);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken NUMBER258 = default(IToken);
	    IToken SYSTEMVAR260 = default(IToken);
	    IToken char_literal263 = default(IToken);
	    IToken char_literal265 = default(IToken);
	    IToken EXISTS269 = default(IToken);
	    IToken WS270 = default(IToken);
	    IToken char_literal271 = default(IToken);
	    IToken WS272 = default(IToken);
	    IToken WS274 = default(IToken);
	    IToken char_literal275 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> string259 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> variable261 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> subquery262 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression264 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> functioncall_or_column266 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> conversion267 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> case268 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> select_command273 = default(AstParserRuleReturnScope<object, IToken>);

	    object NUMBER258_tree = default(object);
	    object SYSTEMVAR260_tree = default(object);
	    object char_literal263_tree = default(object);
	    object char_literal265_tree = default(object);
	    object EXISTS269_tree = default(object);
	    object WS270_tree = default(object);
	    object char_literal271_tree = default(object);
	    object WS272_tree = default(object);
	    object WS274_tree = default(object);
	    object char_literal275_tree = default(object);
	    RewriteRuleITokenStream stream_150=new RewriteRuleITokenStream(adaptor,"token 150");
	    RewriteRuleITokenStream stream_151=new RewriteRuleITokenStream(adaptor,"token 151");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_EXISTS=new RewriteRuleITokenStream(adaptor,"token EXISTS");
	    RewriteRuleITokenStream stream_SYSTEMVAR=new RewriteRuleITokenStream(adaptor,"token SYSTEMVAR");
	    RewriteRuleITokenStream stream_NUMBER=new RewriteRuleITokenStream(adaptor,"token NUMBER");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_select_command=new RewriteRuleSubtreeStream(adaptor,"rule select_command");
		try { DebugEnterRule(GrammarFileName, "expression_atom");
		DebugLocation(368, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:369:2: ( NUMBER -> ^( T_INTEGER NUMBER ) | string | SYSTEMVAR -> ^( T_SYSTEMVAR SYSTEMVAR ) | variable | subquery | '(' expression ')' -> expression | functioncall_or_column | conversion | case | EXISTS ( WS )? '(' ( WS )? select_command ( WS )? ')' -> ^( T_EXISTS select_command ) )
			int alt93=10;
			try { DebugEnterDecision(93, decisionCanBacktrack[93]);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt93 = 1;
				}
				break;
			case STRING:
				{
				alt93 = 2;
				}
				break;
			case SYSTEMVAR:
				{
				alt93 = 3;
				}
				break;
			case VARIABLE:
				{
				alt93 = 4;
				}
				break;
			case 150:
				{
				int LA93_5 = input.LA(2);

				if ((LA93_5==SELECT||LA93_5==WS))
				{
					alt93 = 5;
				}
				else if (((LA93_5>=CASE && LA93_5<=CAST)||LA93_5==CONVERT||LA93_5==EXISTS||(LA93_5>=NOT && LA93_5<=NUMBER)||LA93_5==SIMPLE_FILE||(LA93_5>=STRING && LA93_5<=SYSTEMVAR)||LA93_5==TOKEN||LA93_5==VARIABLE||LA93_5==150))
				{
					alt93 = 6;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 93, 5, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SIMPLE_FILE:
			case TOKEN:
				{
				alt93 = 7;
				}
				break;
			case CAST:
			case CONVERT:
				{
				alt93 = 8;
				}
				break;
			case CASE:
				{
				alt93 = 9;
				}
				break;
			case EXISTS:
				{
				alt93 = 10;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 93, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(93); }
			switch (alt93)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:369:4: NUMBER
				{
				DebugLocation(369, 4);
				NUMBER258=(IToken)Match(input,NUMBER,Follow._NUMBER_in_expression_atom2260);  
				stream_NUMBER.Add(NUMBER258);



				{
				// AST REWRITE
				// elements: NUMBER
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 369:11: -> ^( T_INTEGER NUMBER )
				{
					DebugLocation(369, 14);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:369:14: ^( T_INTEGER NUMBER )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(369, 16);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_INTEGER, "T_INTEGER"), root_1);

					DebugLocation(369, 26);
					adaptor.AddChild(root_1, stream_NUMBER.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:370:4: string
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(370, 4);
				PushFollow(Follow._string_in_expression_atom2273);
				string259=@string();
				PopFollow();

				adaptor.AddChild(root_0, string259.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:371:4: SYSTEMVAR
				{
				DebugLocation(371, 4);
				SYSTEMVAR260=(IToken)Match(input,SYSTEMVAR,Follow._SYSTEMVAR_in_expression_atom2278);  
				stream_SYSTEMVAR.Add(SYSTEMVAR260);



				{
				// AST REWRITE
				// elements: SYSTEMVAR
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 371:14: -> ^( T_SYSTEMVAR SYSTEMVAR )
				{
					DebugLocation(371, 17);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:371:17: ^( T_SYSTEMVAR SYSTEMVAR )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(371, 19);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SYSTEMVAR, "T_SYSTEMVAR"), root_1);

					DebugLocation(371, 31);
					adaptor.AddChild(root_1, stream_SYSTEMVAR.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:372:4: variable
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(372, 4);
				PushFollow(Follow._variable_in_expression_atom2291);
				variable261=variable();
				PopFollow();

				adaptor.AddChild(root_0, variable261.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:373:4: subquery
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(373, 4);
				PushFollow(Follow._subquery_in_expression_atom2296);
				subquery262=subquery();
				PopFollow();

				adaptor.AddChild(root_0, subquery262.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:374:4: '(' expression ')'
				{
				DebugLocation(374, 4);
				char_literal263=(IToken)Match(input,150,Follow._150_in_expression_atom2301);  
				stream_150.Add(char_literal263);

				DebugLocation(374, 8);
				PushFollow(Follow._expression_in_expression_atom2303);
				expression264=expression();
				PopFollow();

				stream_expression.Add(expression264.Tree);
				DebugLocation(374, 19);
				char_literal265=(IToken)Match(input,151,Follow._151_in_expression_atom2305);  
				stream_151.Add(char_literal265);



				{
				// AST REWRITE
				// elements: expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 374:23: -> expression
				{
					DebugLocation(374, 26);
					adaptor.AddChild(root_0, stream_expression.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:375:4: functioncall_or_column
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(375, 4);
				PushFollow(Follow._functioncall_or_column_in_expression_atom2314);
				functioncall_or_column266=functioncall_or_column();
				PopFollow();

				adaptor.AddChild(root_0, functioncall_or_column266.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:376:4: conversion
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(376, 4);
				PushFollow(Follow._conversion_in_expression_atom2319);
				conversion267=conversion();
				PopFollow();

				adaptor.AddChild(root_0, conversion267.Tree);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:377:4: case
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(377, 4);
				PushFollow(Follow._case_in_expression_atom2324);
				case268=@case();
				PopFollow();

				adaptor.AddChild(root_0, case268.Tree);

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:378:4: EXISTS ( WS )? '(' ( WS )? select_command ( WS )? ')'
				{
				DebugLocation(378, 4);
				EXISTS269=(IToken)Match(input,EXISTS,Follow._EXISTS_in_expression_atom2329);  
				stream_EXISTS.Add(EXISTS269);

				DebugLocation(378, 11);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:378:11: ( WS )?
				int alt90=2;
				try { DebugEnterSubRule(90);
				try { DebugEnterDecision(90, decisionCanBacktrack[90]);
				int LA90_0 = input.LA(1);

				if ((LA90_0==WS))
				{
					alt90 = 1;
				}
				} finally { DebugExitDecision(90); }
				switch (alt90)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:378:11: WS
					{
					DebugLocation(378, 11);
					WS270=(IToken)Match(input,WS,Follow._WS_in_expression_atom2331);  
					stream_WS.Add(WS270);


					}
					break;

				}
				} finally { DebugExitSubRule(90); }

				DebugLocation(378, 15);
				char_literal271=(IToken)Match(input,150,Follow._150_in_expression_atom2334);  
				stream_150.Add(char_literal271);

				DebugLocation(378, 19);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:378:19: ( WS )?
				int alt91=2;
				try { DebugEnterSubRule(91);
				try { DebugEnterDecision(91, decisionCanBacktrack[91]);
				int LA91_0 = input.LA(1);

				if ((LA91_0==WS))
				{
					alt91 = 1;
				}
				} finally { DebugExitDecision(91); }
				switch (alt91)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:378:19: WS
					{
					DebugLocation(378, 19);
					WS272=(IToken)Match(input,WS,Follow._WS_in_expression_atom2336);  
					stream_WS.Add(WS272);


					}
					break;

				}
				} finally { DebugExitSubRule(91); }

				DebugLocation(378, 23);
				PushFollow(Follow._select_command_in_expression_atom2339);
				select_command273=select_command();
				PopFollow();

				stream_select_command.Add(select_command273.Tree);
				DebugLocation(378, 38);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:378:38: ( WS )?
				int alt92=2;
				try { DebugEnterSubRule(92);
				try { DebugEnterDecision(92, decisionCanBacktrack[92]);
				int LA92_0 = input.LA(1);

				if ((LA92_0==WS))
				{
					alt92 = 1;
				}
				} finally { DebugExitDecision(92); }
				switch (alt92)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:378:38: WS
					{
					DebugLocation(378, 38);
					WS274=(IToken)Match(input,WS,Follow._WS_in_expression_atom2341);  
					stream_WS.Add(WS274);


					}
					break;

				}
				} finally { DebugExitSubRule(92); }

				DebugLocation(378, 42);
				char_literal275=(IToken)Match(input,151,Follow._151_in_expression_atom2344);  
				stream_151.Add(char_literal275);



				{
				// AST REWRITE
				// elements: select_command
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 378:46: -> ^( T_EXISTS select_command )
				{
					DebugLocation(378, 49);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:378:49: ^( T_EXISTS select_command )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(378, 51);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_EXISTS, "T_EXISTS"), root_1);

					DebugLocation(378, 60);
					adaptor.AddChild(root_1, stream_select_command.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_atom", 49);
			LeaveRule("expression_atom", 49);
			LeaveRule_expression_atom();
	    }
	 	DebugLocation(379, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_atom"); }
		return retval;

	}
	// $ANTLR end "expression_atom"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_functioncall_or_column() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_functioncall_or_column() {}

	// $ANTLR start "functioncall_or_column"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:382:1: functioncall_or_column : ( TOKEN ( WS )? '(' ( WS )? ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )? ')' -> ^( T_FUNCTIONCALL TOKEN ( expression )* ) | TOKEN ( WS )? '(' ( WS )? '*' ( WS )? ')' -> ^( T_FUNCTIONCALL TOKEN '*' ) | ( table_alias ( WS )? '.' ( WS )? )? column_name -> ^( T_COLUMN column_name ( table_alias )? ) );
	[GrammarRule("functioncall_or_column")]
	private AstParserRuleReturnScope<object, IToken> functioncall_or_column()
	{
		EnterRule_functioncall_or_column();
		EnterRule("functioncall_or_column", 50);
		TraceIn("functioncall_or_column", 50);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN276 = default(IToken);
	    IToken WS277 = default(IToken);
	    IToken char_literal278 = default(IToken);
	    IToken WS279 = default(IToken);
	    IToken WS281 = default(IToken);
	    IToken char_literal282 = default(IToken);
	    IToken WS283 = default(IToken);
	    IToken WS285 = default(IToken);
	    IToken char_literal286 = default(IToken);
	    IToken TOKEN287 = default(IToken);
	    IToken WS288 = default(IToken);
	    IToken char_literal289 = default(IToken);
	    IToken WS290 = default(IToken);
	    IToken char_literal291 = default(IToken);
	    IToken WS292 = default(IToken);
	    IToken char_literal293 = default(IToken);
	    IToken WS295 = default(IToken);
	    IToken char_literal296 = default(IToken);
	    IToken WS297 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression280 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression284 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> table_alias294 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> column_name298 = default(AstParserRuleReturnScope<object, IToken>);

	    object TOKEN276_tree = default(object);
	    object WS277_tree = default(object);
	    object char_literal278_tree = default(object);
	    object WS279_tree = default(object);
	    object WS281_tree = default(object);
	    object char_literal282_tree = default(object);
	    object WS283_tree = default(object);
	    object WS285_tree = default(object);
	    object char_literal286_tree = default(object);
	    object TOKEN287_tree = default(object);
	    object WS288_tree = default(object);
	    object char_literal289_tree = default(object);
	    object WS290_tree = default(object);
	    object char_literal291_tree = default(object);
	    object WS292_tree = default(object);
	    object char_literal293_tree = default(object);
	    object WS295_tree = default(object);
	    object char_literal296_tree = default(object);
	    object WS297_tree = default(object);
	    RewriteRuleITokenStream stream_152=new RewriteRuleITokenStream(adaptor,"token 152");
	    RewriteRuleITokenStream stream_150=new RewriteRuleITokenStream(adaptor,"token 150");
	    RewriteRuleITokenStream stream_151=new RewriteRuleITokenStream(adaptor,"token 151");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_156=new RewriteRuleITokenStream(adaptor,"token 156");
	    RewriteRuleITokenStream stream_TOKEN=new RewriteRuleITokenStream(adaptor,"token TOKEN");
	    RewriteRuleITokenStream stream_154=new RewriteRuleITokenStream(adaptor,"token 154");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_table_alias=new RewriteRuleSubtreeStream(adaptor,"rule table_alias");
	    RewriteRuleSubtreeStream stream_column_name=new RewriteRuleSubtreeStream(adaptor,"rule column_name");
		try { DebugEnterRule(GrammarFileName, "functioncall_or_column");
		DebugLocation(382, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:383:2: ( TOKEN ( WS )? '(' ( WS )? ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )? ')' -> ^( T_FUNCTIONCALL TOKEN ( expression )* ) | TOKEN ( WS )? '(' ( WS )? '*' ( WS )? ')' -> ^( T_FUNCTIONCALL TOKEN '*' ) | ( table_alias ( WS )? '.' ( WS )? )? column_name -> ^( T_COLUMN column_name ( table_alias )? ) )
			int alt107=3;
			try { DebugEnterDecision(107, decisionCanBacktrack[107]);
			int LA107_0 = input.LA(1);

			if ((LA107_0==TOKEN))
			{
				int LA107_1 = input.LA(2);

				if ((LA107_1==WS))
				{
					int LA107_3 = input.LA(3);

					if ((LA107_3==150))
					{
						switch (input.LA(4))
						{
						case WS:
							{
							int LA107_5 = input.LA(5);

							if (((LA107_5>=CASE && LA107_5<=CAST)||LA107_5==CONVERT||LA107_5==EXISTS||(LA107_5>=NOT && LA107_5<=NUMBER)||LA107_5==SIMPLE_FILE||(LA107_5>=STRING && LA107_5<=SYSTEMVAR)||LA107_5==TOKEN||LA107_5==VARIABLE||(LA107_5>=150 && LA107_5<=151)))
							{
								alt107 = 1;
							}
							else if ((LA107_5==152))
							{
								alt107 = 2;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 107, 5, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case CASE:
						case CAST:
						case CONVERT:
						case EXISTS:
						case NOT:
						case NUMBER:
						case SIMPLE_FILE:
						case STRING:
						case SYSTEMVAR:
						case TOKEN:
						case VARIABLE:
						case 150:
						case 151:
							{
							alt107 = 1;
							}
							break;
						case 152:
							{
							alt107 = 2;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 107, 4, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 107, 3, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA107_1==150))
				{
					switch (input.LA(3))
					{
					case WS:
						{
						int LA107_5 = input.LA(4);

						if (((LA107_5>=CASE && LA107_5<=CAST)||LA107_5==CONVERT||LA107_5==EXISTS||(LA107_5>=NOT && LA107_5<=NUMBER)||LA107_5==SIMPLE_FILE||(LA107_5>=STRING && LA107_5<=SYSTEMVAR)||LA107_5==TOKEN||LA107_5==VARIABLE||(LA107_5>=150 && LA107_5<=151)))
						{
							alt107 = 1;
						}
						else if ((LA107_5==152))
						{
							alt107 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 107, 5, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case CASE:
					case CAST:
					case CONVERT:
					case EXISTS:
					case NOT:
					case NUMBER:
					case SIMPLE_FILE:
					case STRING:
					case SYSTEMVAR:
					case TOKEN:
					case VARIABLE:
					case 150:
					case 151:
						{
						alt107 = 1;
						}
						break;
					case 152:
						{
						alt107 = 2;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 107, 4, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 107, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA107_0==SIMPLE_FILE))
			{
				alt107 = 3;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 107, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(107); }
			switch (alt107)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:383:4: TOKEN ( WS )? '(' ( WS )? ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )? ')'
				{
				DebugLocation(383, 4);
				TOKEN276=(IToken)Match(input,TOKEN,Follow._TOKEN_in_functioncall_or_column2364);  
				stream_TOKEN.Add(TOKEN276);

				DebugLocation(383, 10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:383:10: ( WS )?
				int alt94=2;
				try { DebugEnterSubRule(94);
				try { DebugEnterDecision(94, decisionCanBacktrack[94]);
				int LA94_0 = input.LA(1);

				if ((LA94_0==WS))
				{
					alt94 = 1;
				}
				} finally { DebugExitDecision(94); }
				switch (alt94)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:383:10: WS
					{
					DebugLocation(383, 10);
					WS277=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2366);  
					stream_WS.Add(WS277);


					}
					break;

				}
				} finally { DebugExitSubRule(94); }

				DebugLocation(383, 14);
				char_literal278=(IToken)Match(input,150,Follow._150_in_functioncall_or_column2369);  
				stream_150.Add(char_literal278);

				DebugLocation(383, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:383:18: ( WS )?
				int alt95=2;
				try { DebugEnterSubRule(95);
				try { DebugEnterDecision(95, decisionCanBacktrack[95]);
				int LA95_0 = input.LA(1);

				if ((LA95_0==WS))
				{
					alt95 = 1;
				}
				} finally { DebugExitDecision(95); }
				switch (alt95)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:383:18: WS
					{
					DebugLocation(383, 18);
					WS279=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2371);  
					stream_WS.Add(WS279);


					}
					break;

				}
				} finally { DebugExitSubRule(95); }

				DebugLocation(383, 22);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:383:22: ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )?
				int alt100=2;
				try { DebugEnterSubRule(100);
				try { DebugEnterDecision(100, decisionCanBacktrack[100]);
				int LA100_0 = input.LA(1);

				if (((LA100_0>=CASE && LA100_0<=CAST)||LA100_0==CONVERT||LA100_0==EXISTS||(LA100_0>=NOT && LA100_0<=NUMBER)||LA100_0==SIMPLE_FILE||(LA100_0>=STRING && LA100_0<=SYSTEMVAR)||LA100_0==TOKEN||LA100_0==VARIABLE||LA100_0==150))
				{
					alt100 = 1;
				}
				} finally { DebugExitDecision(100); }
				switch (alt100)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:383:23: expression ( WS )? ( ',' ( WS )? expression ( WS )? )*
					{
					DebugLocation(383, 23);
					PushFollow(Follow._expression_in_functioncall_or_column2375);
					expression280=expression();
					PopFollow();

					stream_expression.Add(expression280.Tree);
					DebugLocation(383, 34);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:383:34: ( WS )?
					int alt96=2;
					try { DebugEnterSubRule(96);
					try { DebugEnterDecision(96, decisionCanBacktrack[96]);
					int LA96_0 = input.LA(1);

					if ((LA96_0==WS))
					{
						alt96 = 1;
					}
					} finally { DebugExitDecision(96); }
					switch (alt96)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:383:34: WS
						{
						DebugLocation(383, 34);
						WS281=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2377);  
						stream_WS.Add(WS281);


						}
						break;

					}
					} finally { DebugExitSubRule(96); }

					DebugLocation(383, 38);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:383:38: ( ',' ( WS )? expression ( WS )? )*
					try { DebugEnterSubRule(99);
					while (true)
					{
						int alt99=2;
						try { DebugEnterDecision(99, decisionCanBacktrack[99]);
						int LA99_0 = input.LA(1);

						if ((LA99_0==154))
						{
							alt99 = 1;
						}


						} finally { DebugExitDecision(99); }
						switch ( alt99 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:383:39: ',' ( WS )? expression ( WS )?
							{
							DebugLocation(383, 39);
							char_literal282=(IToken)Match(input,154,Follow._154_in_functioncall_or_column2381);  
							stream_154.Add(char_literal282);

							DebugLocation(383, 43);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:383:43: ( WS )?
							int alt97=2;
							try { DebugEnterSubRule(97);
							try { DebugEnterDecision(97, decisionCanBacktrack[97]);
							int LA97_0 = input.LA(1);

							if ((LA97_0==WS))
							{
								alt97 = 1;
							}
							} finally { DebugExitDecision(97); }
							switch (alt97)
							{
							case 1:
								DebugEnterAlt(1);
								// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:383:43: WS
								{
								DebugLocation(383, 43);
								WS283=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2383);  
								stream_WS.Add(WS283);


								}
								break;

							}
							} finally { DebugExitSubRule(97); }

							DebugLocation(383, 47);
							PushFollow(Follow._expression_in_functioncall_or_column2386);
							expression284=expression();
							PopFollow();

							stream_expression.Add(expression284.Tree);
							DebugLocation(383, 58);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:383:58: ( WS )?
							int alt98=2;
							try { DebugEnterSubRule(98);
							try { DebugEnterDecision(98, decisionCanBacktrack[98]);
							int LA98_0 = input.LA(1);

							if ((LA98_0==WS))
							{
								alt98 = 1;
							}
							} finally { DebugExitDecision(98); }
							switch (alt98)
							{
							case 1:
								DebugEnterAlt(1);
								// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:383:58: WS
								{
								DebugLocation(383, 58);
								WS285=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2388);  
								stream_WS.Add(WS285);


								}
								break;

							}
							} finally { DebugExitSubRule(98); }


							}
							break;

						default:
							goto loop99;
						}
					}

					loop99:
						;

					} finally { DebugExitSubRule(99); }


					}
					break;

				}
				} finally { DebugExitSubRule(100); }

				DebugLocation(383, 66);
				char_literal286=(IToken)Match(input,151,Follow._151_in_functioncall_or_column2395);  
				stream_151.Add(char_literal286);



				{
				// AST REWRITE
				// elements: TOKEN, expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 383:70: -> ^( T_FUNCTIONCALL TOKEN ( expression )* )
				{
					DebugLocation(383, 73);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:383:73: ^( T_FUNCTIONCALL TOKEN ( expression )* )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(383, 75);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(383, 90);
					adaptor.AddChild(root_1, stream_TOKEN.NextNode());
					DebugLocation(383, 96);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:383:96: ( expression )*
					while ( stream_expression.HasNext )
					{
						DebugLocation(383, 96);
						adaptor.AddChild(root_1, stream_expression.NextTree());

					}
					stream_expression.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:384:4: TOKEN ( WS )? '(' ( WS )? '*' ( WS )? ')'
				{
				DebugLocation(384, 4);
				TOKEN287=(IToken)Match(input,TOKEN,Follow._TOKEN_in_functioncall_or_column2411);  
				stream_TOKEN.Add(TOKEN287);

				DebugLocation(384, 10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:384:10: ( WS )?
				int alt101=2;
				try { DebugEnterSubRule(101);
				try { DebugEnterDecision(101, decisionCanBacktrack[101]);
				int LA101_0 = input.LA(1);

				if ((LA101_0==WS))
				{
					alt101 = 1;
				}
				} finally { DebugExitDecision(101); }
				switch (alt101)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:384:10: WS
					{
					DebugLocation(384, 10);
					WS288=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2413);  
					stream_WS.Add(WS288);


					}
					break;

				}
				} finally { DebugExitSubRule(101); }

				DebugLocation(384, 14);
				char_literal289=(IToken)Match(input,150,Follow._150_in_functioncall_or_column2416);  
				stream_150.Add(char_literal289);

				DebugLocation(384, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:384:18: ( WS )?
				int alt102=2;
				try { DebugEnterSubRule(102);
				try { DebugEnterDecision(102, decisionCanBacktrack[102]);
				int LA102_0 = input.LA(1);

				if ((LA102_0==WS))
				{
					alt102 = 1;
				}
				} finally { DebugExitDecision(102); }
				switch (alt102)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:384:18: WS
					{
					DebugLocation(384, 18);
					WS290=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2418);  
					stream_WS.Add(WS290);


					}
					break;

				}
				} finally { DebugExitSubRule(102); }

				DebugLocation(384, 22);
				char_literal291=(IToken)Match(input,152,Follow._152_in_functioncall_or_column2421);  
				stream_152.Add(char_literal291);

				DebugLocation(384, 26);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:384:26: ( WS )?
				int alt103=2;
				try { DebugEnterSubRule(103);
				try { DebugEnterDecision(103, decisionCanBacktrack[103]);
				int LA103_0 = input.LA(1);

				if ((LA103_0==WS))
				{
					alt103 = 1;
				}
				} finally { DebugExitDecision(103); }
				switch (alt103)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:384:26: WS
					{
					DebugLocation(384, 26);
					WS292=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2423);  
					stream_WS.Add(WS292);


					}
					break;

				}
				} finally { DebugExitSubRule(103); }

				DebugLocation(384, 30);
				char_literal293=(IToken)Match(input,151,Follow._151_in_functioncall_or_column2426);  
				stream_151.Add(char_literal293);



				{
				// AST REWRITE
				// elements: TOKEN, 152
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 384:34: -> ^( T_FUNCTIONCALL TOKEN '*' )
				{
					DebugLocation(384, 37);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:384:37: ^( T_FUNCTIONCALL TOKEN '*' )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(384, 39);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(384, 54);
					adaptor.AddChild(root_1, stream_TOKEN.NextNode());
					DebugLocation(384, 60);
					adaptor.AddChild(root_1, stream_152.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:386:4: ( table_alias ( WS )? '.' ( WS )? )? column_name
				{
				DebugLocation(386, 4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:386:4: ( table_alias ( WS )? '.' ( WS )? )?
				int alt106=2;
				try { DebugEnterSubRule(106);
				try { DebugEnterDecision(106, decisionCanBacktrack[106]);
				int LA106_0 = input.LA(1);

				if ((LA106_0==SIMPLE_FILE))
				{
					int LA106_1 = input.LA(2);

					if ((LA106_1==WS))
					{
						int LA106_2 = input.LA(3);

						if ((LA106_2==156))
						{
							alt106 = 1;
						}
					}
					else if ((LA106_1==156))
					{
						alt106 = 1;
					}
				}
				} finally { DebugExitDecision(106); }
				switch (alt106)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:386:5: table_alias ( WS )? '.' ( WS )?
					{
					DebugLocation(386, 5);
					PushFollow(Follow._table_alias_in_functioncall_or_column2444);
					table_alias294=table_alias();
					PopFollow();

					stream_table_alias.Add(table_alias294.Tree);
					DebugLocation(386, 17);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:386:17: ( WS )?
					int alt104=2;
					try { DebugEnterSubRule(104);
					try { DebugEnterDecision(104, decisionCanBacktrack[104]);
					int LA104_0 = input.LA(1);

					if ((LA104_0==WS))
					{
						alt104 = 1;
					}
					} finally { DebugExitDecision(104); }
					switch (alt104)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:386:17: WS
						{
						DebugLocation(386, 17);
						WS295=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2446);  
						stream_WS.Add(WS295);


						}
						break;

					}
					} finally { DebugExitSubRule(104); }

					DebugLocation(386, 21);
					char_literal296=(IToken)Match(input,156,Follow._156_in_functioncall_or_column2449);  
					stream_156.Add(char_literal296);

					DebugLocation(386, 25);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:386:25: ( WS )?
					int alt105=2;
					try { DebugEnterSubRule(105);
					try { DebugEnterDecision(105, decisionCanBacktrack[105]);
					int LA105_0 = input.LA(1);

					if ((LA105_0==WS))
					{
						alt105 = 1;
					}
					} finally { DebugExitDecision(105); }
					switch (alt105)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:386:25: WS
						{
						DebugLocation(386, 25);
						WS297=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2451);  
						stream_WS.Add(WS297);


						}
						break;

					}
					} finally { DebugExitSubRule(105); }


					}
					break;

				}
				} finally { DebugExitSubRule(106); }

				DebugLocation(386, 31);
				PushFollow(Follow._column_name_in_functioncall_or_column2456);
				column_name298=column_name();
				PopFollow();

				stream_column_name.Add(column_name298.Tree);


				{
				// AST REWRITE
				// elements: column_name, table_alias
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 386:43: -> ^( T_COLUMN column_name ( table_alias )? )
				{
					DebugLocation(386, 46);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:386:46: ^( T_COLUMN column_name ( table_alias )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(386, 48);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_COLUMN, "T_COLUMN"), root_1);

					DebugLocation(386, 57);
					adaptor.AddChild(root_1, stream_column_name.NextTree());
					DebugLocation(386, 69);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:386:69: ( table_alias )?
					if (stream_table_alias.HasNext)
					{
						DebugLocation(386, 69);
						adaptor.AddChild(root_1, stream_table_alias.NextTree());

					}
					stream_table_alias.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("functioncall_or_column", 50);
			LeaveRule("functioncall_or_column", 50);
			LeaveRule_functioncall_or_column();
	    }
	 	DebugLocation(387, 1);
		} finally { DebugExitRule(GrammarFileName, "functioncall_or_column"); }
		return retval;

	}
	// $ANTLR end "functioncall_or_column"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_column_name() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_column_name() {}

	// $ANTLR start "column_name"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:389:1: column_name : SIMPLE_FILE ;
	[GrammarRule("column_name")]
	private AstParserRuleReturnScope<object, IToken> column_name()
	{
		EnterRule_column_name();
		EnterRule("column_name", 51);
		TraceIn("column_name", 51);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken SIMPLE_FILE299 = default(IToken);

	    object SIMPLE_FILE299_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "column_name");
		DebugLocation(389, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:390:2: ( SIMPLE_FILE )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:390:4: SIMPLE_FILE
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(390, 4);
			SIMPLE_FILE299=(IToken)Match(input,SIMPLE_FILE,Follow._SIMPLE_FILE_in_column_name2479); 
			SIMPLE_FILE299_tree = (object)adaptor.Create(SIMPLE_FILE299);
			adaptor.AddChild(root_0, SIMPLE_FILE299_tree);


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("column_name", 51);
			LeaveRule("column_name", 51);
			LeaveRule_column_name();
	    }
	 	DebugLocation(391, 1);
		} finally { DebugExitRule(GrammarFileName, "column_name"); }
		return retval;

	}
	// $ANTLR end "column_name"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_table_alias() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_table_alias() {}

	// $ANTLR start "table_alias"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:393:1: table_alias : SIMPLE_FILE -> ^( T_TABLE_ALIAS SIMPLE_FILE ) ;
	[GrammarRule("table_alias")]
	private AstParserRuleReturnScope<object, IToken> table_alias()
	{
		EnterRule_table_alias();
		EnterRule("table_alias", 52);
		TraceIn("table_alias", 52);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken SIMPLE_FILE300 = default(IToken);

	    object SIMPLE_FILE300_tree = default(object);
	    RewriteRuleITokenStream stream_SIMPLE_FILE=new RewriteRuleITokenStream(adaptor,"token SIMPLE_FILE");

		try { DebugEnterRule(GrammarFileName, "table_alias");
		DebugLocation(393, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:394:2: ( SIMPLE_FILE -> ^( T_TABLE_ALIAS SIMPLE_FILE ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:394:4: SIMPLE_FILE
			{
			DebugLocation(394, 4);
			SIMPLE_FILE300=(IToken)Match(input,SIMPLE_FILE,Follow._SIMPLE_FILE_in_table_alias2490);  
			stream_SIMPLE_FILE.Add(SIMPLE_FILE300);



			{
			// AST REWRITE
			// elements: SIMPLE_FILE
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 394:16: -> ^( T_TABLE_ALIAS SIMPLE_FILE )
			{
				DebugLocation(394, 19);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:394:19: ^( T_TABLE_ALIAS SIMPLE_FILE )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(394, 21);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_TABLE_ALIAS, "T_TABLE_ALIAS"), root_1);

				DebugLocation(394, 35);
				adaptor.AddChild(root_1, stream_SIMPLE_FILE.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("table_alias", 52);
			LeaveRule("table_alias", 52);
			LeaveRule_table_alias();
	    }
	 	DebugLocation(395, 1);
		} finally { DebugExitRule(GrammarFileName, "table_alias"); }
		return retval;

	}
	// $ANTLR end "table_alias"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_conversion() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_conversion() {}

	// $ANTLR start "conversion"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:397:1: conversion : ( CONVERT ( WS )? '(' ( WS )? TOKEN ( WS )? ',' ( WS )? expression ( WS )? ')' -> ^( T_CONVERT TOKEN expression ) | CAST ( WS )? '(' ( WS )? expression WS AS WS datatype ( WS )? ')' -> ^( T_CONVERT TOKEN expression ) );
	[GrammarRule("conversion")]
	private AstParserRuleReturnScope<object, IToken> conversion()
	{
		EnterRule_conversion();
		EnterRule("conversion", 53);
		TraceIn("conversion", 53);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken CONVERT301 = default(IToken);
	    IToken WS302 = default(IToken);
	    IToken char_literal303 = default(IToken);
	    IToken WS304 = default(IToken);
	    IToken TOKEN305 = default(IToken);
	    IToken WS306 = default(IToken);
	    IToken char_literal307 = default(IToken);
	    IToken WS308 = default(IToken);
	    IToken WS310 = default(IToken);
	    IToken char_literal311 = default(IToken);
	    IToken CAST312 = default(IToken);
	    IToken WS313 = default(IToken);
	    IToken char_literal314 = default(IToken);
	    IToken WS315 = default(IToken);
	    IToken WS317 = default(IToken);
	    IToken AS318 = default(IToken);
	    IToken WS319 = default(IToken);
	    IToken WS321 = default(IToken);
	    IToken char_literal322 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression309 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression316 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> datatype320 = default(AstParserRuleReturnScope<object, IToken>);

	    object CONVERT301_tree = default(object);
	    object WS302_tree = default(object);
	    object char_literal303_tree = default(object);
	    object WS304_tree = default(object);
	    object TOKEN305_tree = default(object);
	    object WS306_tree = default(object);
	    object char_literal307_tree = default(object);
	    object WS308_tree = default(object);
	    object WS310_tree = default(object);
	    object char_literal311_tree = default(object);
	    object CAST312_tree = default(object);
	    object WS313_tree = default(object);
	    object char_literal314_tree = default(object);
	    object WS315_tree = default(object);
	    object WS317_tree = default(object);
	    object AS318_tree = default(object);
	    object WS319_tree = default(object);
	    object WS321_tree = default(object);
	    object char_literal322_tree = default(object);
	    RewriteRuleITokenStream stream_CAST=new RewriteRuleITokenStream(adaptor,"token CAST");
	    RewriteRuleITokenStream stream_AS=new RewriteRuleITokenStream(adaptor,"token AS");
	    RewriteRuleITokenStream stream_150=new RewriteRuleITokenStream(adaptor,"token 150");
	    RewriteRuleITokenStream stream_151=new RewriteRuleITokenStream(adaptor,"token 151");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_CONVERT=new RewriteRuleITokenStream(adaptor,"token CONVERT");
	    RewriteRuleITokenStream stream_TOKEN=new RewriteRuleITokenStream(adaptor,"token TOKEN");
	    RewriteRuleITokenStream stream_154=new RewriteRuleITokenStream(adaptor,"token 154");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_datatype=new RewriteRuleSubtreeStream(adaptor,"rule datatype");
		try { DebugEnterRule(GrammarFileName, "conversion");
		DebugLocation(397, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:398:2: ( CONVERT ( WS )? '(' ( WS )? TOKEN ( WS )? ',' ( WS )? expression ( WS )? ')' -> ^( T_CONVERT TOKEN expression ) | CAST ( WS )? '(' ( WS )? expression WS AS WS datatype ( WS )? ')' -> ^( T_CONVERT TOKEN expression ) )
			int alt116=2;
			try { DebugEnterDecision(116, decisionCanBacktrack[116]);
			int LA116_0 = input.LA(1);

			if ((LA116_0==CONVERT))
			{
				alt116 = 1;
			}
			else if ((LA116_0==CAST))
			{
				alt116 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 116, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(116); }
			switch (alt116)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:398:4: CONVERT ( WS )? '(' ( WS )? TOKEN ( WS )? ',' ( WS )? expression ( WS )? ')'
				{
				DebugLocation(398, 4);
				CONVERT301=(IToken)Match(input,CONVERT,Follow._CONVERT_in_conversion2510);  
				stream_CONVERT.Add(CONVERT301);

				DebugLocation(398, 12);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:398:12: ( WS )?
				int alt108=2;
				try { DebugEnterSubRule(108);
				try { DebugEnterDecision(108, decisionCanBacktrack[108]);
				int LA108_0 = input.LA(1);

				if ((LA108_0==WS))
				{
					alt108 = 1;
				}
				} finally { DebugExitDecision(108); }
				switch (alt108)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:398:12: WS
					{
					DebugLocation(398, 12);
					WS302=(IToken)Match(input,WS,Follow._WS_in_conversion2512);  
					stream_WS.Add(WS302);


					}
					break;

				}
				} finally { DebugExitSubRule(108); }

				DebugLocation(398, 16);
				char_literal303=(IToken)Match(input,150,Follow._150_in_conversion2515);  
				stream_150.Add(char_literal303);

				DebugLocation(398, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:398:20: ( WS )?
				int alt109=2;
				try { DebugEnterSubRule(109);
				try { DebugEnterDecision(109, decisionCanBacktrack[109]);
				int LA109_0 = input.LA(1);

				if ((LA109_0==WS))
				{
					alt109 = 1;
				}
				} finally { DebugExitDecision(109); }
				switch (alt109)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:398:20: WS
					{
					DebugLocation(398, 20);
					WS304=(IToken)Match(input,WS,Follow._WS_in_conversion2517);  
					stream_WS.Add(WS304);


					}
					break;

				}
				} finally { DebugExitSubRule(109); }

				DebugLocation(398, 24);
				TOKEN305=(IToken)Match(input,TOKEN,Follow._TOKEN_in_conversion2520);  
				stream_TOKEN.Add(TOKEN305);

				DebugLocation(398, 30);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:398:30: ( WS )?
				int alt110=2;
				try { DebugEnterSubRule(110);
				try { DebugEnterDecision(110, decisionCanBacktrack[110]);
				int LA110_0 = input.LA(1);

				if ((LA110_0==WS))
				{
					alt110 = 1;
				}
				} finally { DebugExitDecision(110); }
				switch (alt110)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:398:30: WS
					{
					DebugLocation(398, 30);
					WS306=(IToken)Match(input,WS,Follow._WS_in_conversion2522);  
					stream_WS.Add(WS306);


					}
					break;

				}
				} finally { DebugExitSubRule(110); }

				DebugLocation(398, 34);
				char_literal307=(IToken)Match(input,154,Follow._154_in_conversion2525);  
				stream_154.Add(char_literal307);

				DebugLocation(398, 38);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:398:38: ( WS )?
				int alt111=2;
				try { DebugEnterSubRule(111);
				try { DebugEnterDecision(111, decisionCanBacktrack[111]);
				int LA111_0 = input.LA(1);

				if ((LA111_0==WS))
				{
					alt111 = 1;
				}
				} finally { DebugExitDecision(111); }
				switch (alt111)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:398:38: WS
					{
					DebugLocation(398, 38);
					WS308=(IToken)Match(input,WS,Follow._WS_in_conversion2527);  
					stream_WS.Add(WS308);


					}
					break;

				}
				} finally { DebugExitSubRule(111); }

				DebugLocation(398, 42);
				PushFollow(Follow._expression_in_conversion2530);
				expression309=expression();
				PopFollow();

				stream_expression.Add(expression309.Tree);
				DebugLocation(398, 53);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:398:53: ( WS )?
				int alt112=2;
				try { DebugEnterSubRule(112);
				try { DebugEnterDecision(112, decisionCanBacktrack[112]);
				int LA112_0 = input.LA(1);

				if ((LA112_0==WS))
				{
					alt112 = 1;
				}
				} finally { DebugExitDecision(112); }
				switch (alt112)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:398:53: WS
					{
					DebugLocation(398, 53);
					WS310=(IToken)Match(input,WS,Follow._WS_in_conversion2532);  
					stream_WS.Add(WS310);


					}
					break;

				}
				} finally { DebugExitSubRule(112); }

				DebugLocation(398, 57);
				char_literal311=(IToken)Match(input,151,Follow._151_in_conversion2535);  
				stream_151.Add(char_literal311);



				{
				// AST REWRITE
				// elements: TOKEN, expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 398:61: -> ^( T_CONVERT TOKEN expression )
				{
					DebugLocation(398, 64);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:398:64: ^( T_CONVERT TOKEN expression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(398, 66);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CONVERT, "T_CONVERT"), root_1);

					DebugLocation(398, 76);
					adaptor.AddChild(root_1, stream_TOKEN.NextNode());
					DebugLocation(398, 82);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:399:4: CAST ( WS )? '(' ( WS )? expression WS AS WS datatype ( WS )? ')'
				{
				DebugLocation(399, 4);
				CAST312=(IToken)Match(input,CAST,Follow._CAST_in_conversion2550);  
				stream_CAST.Add(CAST312);

				DebugLocation(399, 9);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:399:9: ( WS )?
				int alt113=2;
				try { DebugEnterSubRule(113);
				try { DebugEnterDecision(113, decisionCanBacktrack[113]);
				int LA113_0 = input.LA(1);

				if ((LA113_0==WS))
				{
					alt113 = 1;
				}
				} finally { DebugExitDecision(113); }
				switch (alt113)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:399:9: WS
					{
					DebugLocation(399, 9);
					WS313=(IToken)Match(input,WS,Follow._WS_in_conversion2552);  
					stream_WS.Add(WS313);


					}
					break;

				}
				} finally { DebugExitSubRule(113); }

				DebugLocation(399, 13);
				char_literal314=(IToken)Match(input,150,Follow._150_in_conversion2555);  
				stream_150.Add(char_literal314);

				DebugLocation(399, 17);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:399:17: ( WS )?
				int alt114=2;
				try { DebugEnterSubRule(114);
				try { DebugEnterDecision(114, decisionCanBacktrack[114]);
				int LA114_0 = input.LA(1);

				if ((LA114_0==WS))
				{
					alt114 = 1;
				}
				} finally { DebugExitDecision(114); }
				switch (alt114)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:399:17: WS
					{
					DebugLocation(399, 17);
					WS315=(IToken)Match(input,WS,Follow._WS_in_conversion2557);  
					stream_WS.Add(WS315);


					}
					break;

				}
				} finally { DebugExitSubRule(114); }

				DebugLocation(399, 21);
				PushFollow(Follow._expression_in_conversion2560);
				expression316=expression();
				PopFollow();

				stream_expression.Add(expression316.Tree);
				DebugLocation(399, 32);
				WS317=(IToken)Match(input,WS,Follow._WS_in_conversion2562);  
				stream_WS.Add(WS317);

				DebugLocation(399, 35);
				AS318=(IToken)Match(input,AS,Follow._AS_in_conversion2564);  
				stream_AS.Add(AS318);

				DebugLocation(399, 38);
				WS319=(IToken)Match(input,WS,Follow._WS_in_conversion2566);  
				stream_WS.Add(WS319);

				DebugLocation(399, 41);
				PushFollow(Follow._datatype_in_conversion2568);
				datatype320=datatype();
				PopFollow();

				stream_datatype.Add(datatype320.Tree);
				DebugLocation(399, 50);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:399:50: ( WS )?
				int alt115=2;
				try { DebugEnterSubRule(115);
				try { DebugEnterDecision(115, decisionCanBacktrack[115]);
				int LA115_0 = input.LA(1);

				if ((LA115_0==WS))
				{
					alt115 = 1;
				}
				} finally { DebugExitDecision(115); }
				switch (alt115)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:399:50: WS
					{
					DebugLocation(399, 50);
					WS321=(IToken)Match(input,WS,Follow._WS_in_conversion2570);  
					stream_WS.Add(WS321);


					}
					break;

				}
				} finally { DebugExitSubRule(115); }

				DebugLocation(399, 54);
				char_literal322=(IToken)Match(input,151,Follow._151_in_conversion2573);  
				stream_151.Add(char_literal322);



				{
				// AST REWRITE
				// elements: expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 399:58: -> ^( T_CONVERT TOKEN expression )
				{
					DebugLocation(399, 61);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:399:61: ^( T_CONVERT TOKEN expression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(399, 63);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CONVERT, "T_CONVERT"), root_1);

					DebugLocation(399, 73);
					adaptor.AddChild(root_1, (object)adaptor.Create(TOKEN, "TOKEN"));
					DebugLocation(399, 79);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conversion", 53);
			LeaveRule("conversion", 53);
			LeaveRule_conversion();
	    }
	 	DebugLocation(400, 1);
		} finally { DebugExitRule(GrammarFileName, "conversion"); }
		return retval;

	}
	// $ANTLR end "conversion"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_string() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_string() {}

	// $ANTLR start "string"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:402:1: string : STRING -> ^( T_STRING STRING ) ;
	[GrammarRule("string")]
	private AstParserRuleReturnScope<object, IToken> @string()
	{
		EnterRule_string();
		EnterRule("string", 54);
		TraceIn("string", 54);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken STRING323 = default(IToken);

	    object STRING323_tree = default(object);
	    RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");

		try { DebugEnterRule(GrammarFileName, "string");
		DebugLocation(402, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:402:8: ( STRING -> ^( T_STRING STRING ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:402:10: STRING
			{
			DebugLocation(402, 10);
			STRING323=(IToken)Match(input,STRING,Follow._STRING_in_string2593);  
			stream_STRING.Add(STRING323);



			{
			// AST REWRITE
			// elements: STRING
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 402:17: -> ^( T_STRING STRING )
			{
				DebugLocation(402, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:402:20: ^( T_STRING STRING )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(402, 22);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_STRING, "T_STRING"), root_1);

				DebugLocation(402, 31);
				adaptor.AddChild(root_1, stream_STRING.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("string", 54);
			LeaveRule("string", 54);
			LeaveRule_string();
	    }
	 	DebugLocation(403, 1);
		} finally { DebugExitRule(GrammarFileName, "string"); }
		return retval;

	}
	// $ANTLR end "string"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_datatype() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_datatype() {}

	// $ANTLR start "datatype"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:405:1: datatype : TOKEN ;
	[GrammarRule("datatype")]
	private AstParserRuleReturnScope<object, IToken> datatype()
	{
		EnterRule_datatype();
		EnterRule("datatype", 55);
		TraceIn("datatype", 55);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN324 = default(IToken);

	    object TOKEN324_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "datatype");
		DebugLocation(405, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:406:2: ( TOKEN )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:406:4: TOKEN
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(406, 4);
			TOKEN324=(IToken)Match(input,TOKEN,Follow._TOKEN_in_datatype2613); 
			TOKEN324_tree = (object)adaptor.Create(TOKEN324);
			adaptor.AddChild(root_0, TOKEN324_tree);


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("datatype", 55);
			LeaveRule("datatype", 55);
			LeaveRule_datatype();
	    }
	 	DebugLocation(407, 1);
		} finally { DebugExitRule(GrammarFileName, "datatype"); }
		return retval;

	}
	// $ANTLR end "datatype"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_variable() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_variable() {}

	// $ANTLR start "variable"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:409:1: variable : VARIABLE -> ^( T_VARIABLE VARIABLE ) ;
	[GrammarRule("variable")]
	private AstParserRuleReturnScope<object, IToken> variable()
	{
		EnterRule_variable();
		EnterRule("variable", 56);
		TraceIn("variable", 56);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken VARIABLE325 = default(IToken);

	    object VARIABLE325_tree = default(object);
	    RewriteRuleITokenStream stream_VARIABLE=new RewriteRuleITokenStream(adaptor,"token VARIABLE");

		try { DebugEnterRule(GrammarFileName, "variable");
		DebugLocation(409, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:410:2: ( VARIABLE -> ^( T_VARIABLE VARIABLE ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:410:4: VARIABLE
			{
			DebugLocation(410, 4);
			VARIABLE325=(IToken)Match(input,VARIABLE,Follow._VARIABLE_in_variable2625);  
			stream_VARIABLE.Add(VARIABLE325);



			{
			// AST REWRITE
			// elements: VARIABLE
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 410:13: -> ^( T_VARIABLE VARIABLE )
			{
				DebugLocation(410, 16);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:410:16: ^( T_VARIABLE VARIABLE )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(410, 18);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_VARIABLE, "T_VARIABLE"), root_1);

				DebugLocation(410, 29);
				adaptor.AddChild(root_1, stream_VARIABLE.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variable", 56);
			LeaveRule("variable", 56);
			LeaveRule_variable();
	    }
	 	DebugLocation(411, 1);
		} finally { DebugExitRule(GrammarFileName, "variable"); }
		return retval;

	}
	// $ANTLR end "variable"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_case() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_case() {}

	// $ANTLR start "case"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:413:1: case : CASE WS ( expression WS )? ( case_when WS )* ( case_else WS )? END -> ^( T_CASE ( expression )? ( case_when )* ( case_else )? ) ;
	[GrammarRule("case")]
	private AstParserRuleReturnScope<object, IToken> @case()
	{
		EnterRule_case();
		EnterRule("case", 57);
		TraceIn("case", 57);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken CASE326 = default(IToken);
	    IToken WS327 = default(IToken);
	    IToken WS329 = default(IToken);
	    IToken WS331 = default(IToken);
	    IToken WS333 = default(IToken);
	    IToken END334 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression328 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> case_when330 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> case_else332 = default(AstParserRuleReturnScope<object, IToken>);

	    object CASE326_tree = default(object);
	    object WS327_tree = default(object);
	    object WS329_tree = default(object);
	    object WS331_tree = default(object);
	    object WS333_tree = default(object);
	    object END334_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_END=new RewriteRuleITokenStream(adaptor,"token END");
	    RewriteRuleITokenStream stream_CASE=new RewriteRuleITokenStream(adaptor,"token CASE");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_case_when=new RewriteRuleSubtreeStream(adaptor,"rule case_when");
	    RewriteRuleSubtreeStream stream_case_else=new RewriteRuleSubtreeStream(adaptor,"rule case_else");
		try { DebugEnterRule(GrammarFileName, "case");
		DebugLocation(413, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:414:2: ( CASE WS ( expression WS )? ( case_when WS )* ( case_else WS )? END -> ^( T_CASE ( expression )? ( case_when )* ( case_else )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:414:4: CASE WS ( expression WS )? ( case_when WS )* ( case_else WS )? END
			{
			DebugLocation(414, 4);
			CASE326=(IToken)Match(input,CASE,Follow._CASE_in_case2645);  
			stream_CASE.Add(CASE326);

			DebugLocation(414, 9);
			WS327=(IToken)Match(input,WS,Follow._WS_in_case2647);  
			stream_WS.Add(WS327);

			DebugLocation(414, 12);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:414:12: ( expression WS )?
			int alt117=2;
			try { DebugEnterSubRule(117);
			try { DebugEnterDecision(117, decisionCanBacktrack[117]);
			int LA117_0 = input.LA(1);

			if (((LA117_0>=CASE && LA117_0<=CAST)||LA117_0==CONVERT||LA117_0==EXISTS||(LA117_0>=NOT && LA117_0<=NUMBER)||LA117_0==SIMPLE_FILE||(LA117_0>=STRING && LA117_0<=SYSTEMVAR)||LA117_0==TOKEN||LA117_0==VARIABLE||LA117_0==150))
			{
				alt117 = 1;
			}
			} finally { DebugExitDecision(117); }
			switch (alt117)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:414:13: expression WS
				{
				DebugLocation(414, 13);
				PushFollow(Follow._expression_in_case2650);
				expression328=expression();
				PopFollow();

				stream_expression.Add(expression328.Tree);
				DebugLocation(414, 24);
				WS329=(IToken)Match(input,WS,Follow._WS_in_case2652);  
				stream_WS.Add(WS329);


				}
				break;

			}
			} finally { DebugExitSubRule(117); }

			DebugLocation(414, 29);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:414:29: ( case_when WS )*
			try { DebugEnterSubRule(118);
			while (true)
			{
				int alt118=2;
				try { DebugEnterDecision(118, decisionCanBacktrack[118]);
				int LA118_0 = input.LA(1);

				if ((LA118_0==WHEN))
				{
					alt118 = 1;
				}


				} finally { DebugExitDecision(118); }
				switch ( alt118 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:414:30: case_when WS
					{
					DebugLocation(414, 30);
					PushFollow(Follow._case_when_in_case2657);
					case_when330=case_when();
					PopFollow();

					stream_case_when.Add(case_when330.Tree);
					DebugLocation(414, 40);
					WS331=(IToken)Match(input,WS,Follow._WS_in_case2659);  
					stream_WS.Add(WS331);


					}
					break;

				default:
					goto loop118;
				}
			}

			loop118:
				;

			} finally { DebugExitSubRule(118); }

			DebugLocation(414, 45);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:414:45: ( case_else WS )?
			int alt119=2;
			try { DebugEnterSubRule(119);
			try { DebugEnterDecision(119, decisionCanBacktrack[119]);
			int LA119_0 = input.LA(1);

			if ((LA119_0==ELSE))
			{
				alt119 = 1;
			}
			} finally { DebugExitDecision(119); }
			switch (alt119)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:414:46: case_else WS
				{
				DebugLocation(414, 46);
				PushFollow(Follow._case_else_in_case2664);
				case_else332=case_else();
				PopFollow();

				stream_case_else.Add(case_else332.Tree);
				DebugLocation(414, 56);
				WS333=(IToken)Match(input,WS,Follow._WS_in_case2666);  
				stream_WS.Add(WS333);


				}
				break;

			}
			} finally { DebugExitSubRule(119); }

			DebugLocation(414, 61);
			END334=(IToken)Match(input,END,Follow._END_in_case2670);  
			stream_END.Add(END334);



			{
			// AST REWRITE
			// elements: case_else, case_when, expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 415:2: -> ^( T_CASE ( expression )? ( case_when )* ( case_else )? )
			{
				DebugLocation(415, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:415:5: ^( T_CASE ( expression )? ( case_when )* ( case_else )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(415, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CASE, "T_CASE"), root_1);

				DebugLocation(415, 14);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:415:14: ( expression )?
				if (stream_expression.HasNext)
				{
					DebugLocation(415, 14);
					adaptor.AddChild(root_1, stream_expression.NextTree());

				}
				stream_expression.Reset();
				DebugLocation(415, 26);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:415:26: ( case_when )*
				while ( stream_case_when.HasNext )
				{
					DebugLocation(415, 26);
					adaptor.AddChild(root_1, stream_case_when.NextTree());

				}
				stream_case_when.Reset();
				DebugLocation(415, 37);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:415:37: ( case_else )?
				if (stream_case_else.HasNext)
				{
					DebugLocation(415, 37);
					adaptor.AddChild(root_1, stream_case_else.NextTree());

				}
				stream_case_else.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("case", 57);
			LeaveRule("case", 57);
			LeaveRule_case();
	    }
	 	DebugLocation(416, 1);
		} finally { DebugExitRule(GrammarFileName, "case"); }
		return retval;

	}
	// $ANTLR end "case"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_case_when() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_case_when() {}

	// $ANTLR start "case_when"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:418:1: case_when : WHEN WS a= expression WS THEN WS b= expression -> ^( T_CASE_WHEN $a $b) ;
	[GrammarRule("case_when")]
	private AstParserRuleReturnScope<object, IToken> case_when()
	{
		EnterRule_case_when();
		EnterRule("case_when", 58);
		TraceIn("case_when", 58);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WHEN335 = default(IToken);
	    IToken WS336 = default(IToken);
	    IToken WS337 = default(IToken);
	    IToken THEN338 = default(IToken);
	    IToken WS339 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);

	    object WHEN335_tree = default(object);
	    object WS336_tree = default(object);
	    object WS337_tree = default(object);
	    object THEN338_tree = default(object);
	    object WS339_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_THEN=new RewriteRuleITokenStream(adaptor,"token THEN");
	    RewriteRuleITokenStream stream_WHEN=new RewriteRuleITokenStream(adaptor,"token WHEN");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "case_when");
		DebugLocation(418, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:419:2: ( WHEN WS a= expression WS THEN WS b= expression -> ^( T_CASE_WHEN $a $b) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:419:4: WHEN WS a= expression WS THEN WS b= expression
			{
			DebugLocation(419, 4);
			WHEN335=(IToken)Match(input,WHEN,Follow._WHEN_in_case_when2698);  
			stream_WHEN.Add(WHEN335);

			DebugLocation(419, 9);
			WS336=(IToken)Match(input,WS,Follow._WS_in_case_when2700);  
			stream_WS.Add(WS336);

			DebugLocation(419, 13);
			PushFollow(Follow._expression_in_case_when2704);
			a=expression();
			PopFollow();

			stream_expression.Add(a.Tree);
			DebugLocation(419, 25);
			WS337=(IToken)Match(input,WS,Follow._WS_in_case_when2706);  
			stream_WS.Add(WS337);

			DebugLocation(419, 28);
			THEN338=(IToken)Match(input,THEN,Follow._THEN_in_case_when2708);  
			stream_THEN.Add(THEN338);

			DebugLocation(419, 33);
			WS339=(IToken)Match(input,WS,Follow._WS_in_case_when2710);  
			stream_WS.Add(WS339);

			DebugLocation(419, 37);
			PushFollow(Follow._expression_in_case_when2714);
			b=expression();
			PopFollow();

			stream_expression.Add(b.Tree);


			{
			// AST REWRITE
			// elements: a, b
			// token labels: 
			// rule labels: retval, b, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 420:2: -> ^( T_CASE_WHEN $a $b)
			{
				DebugLocation(420, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:420:5: ^( T_CASE_WHEN $a $b)
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(420, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CASE_WHEN, "T_CASE_WHEN"), root_1);

				DebugLocation(420, 20);
				adaptor.AddChild(root_1, stream_a.NextTree());
				DebugLocation(420, 23);
				adaptor.AddChild(root_1, stream_b.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("case_when", 58);
			LeaveRule("case_when", 58);
			LeaveRule_case_when();
	    }
	 	DebugLocation(421, 1);
		} finally { DebugExitRule(GrammarFileName, "case_when"); }
		return retval;

	}
	// $ANTLR end "case_when"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_case_else() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_case_else() {}

	// $ANTLR start "case_else"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:423:1: case_else : ELSE WS expression -> ^( T_CASE_ELSE expression ) ;
	[GrammarRule("case_else")]
	private AstParserRuleReturnScope<object, IToken> case_else()
	{
		EnterRule_case_else();
		EnterRule("case_else", 59);
		TraceIn("case_else", 59);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken ELSE340 = default(IToken);
	    IToken WS341 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression342 = default(AstParserRuleReturnScope<object, IToken>);

	    object ELSE340_tree = default(object);
	    object WS341_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_ELSE=new RewriteRuleITokenStream(adaptor,"token ELSE");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "case_else");
		DebugLocation(423, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:424:2: ( ELSE WS expression -> ^( T_CASE_ELSE expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:424:4: ELSE WS expression
			{
			DebugLocation(424, 4);
			ELSE340=(IToken)Match(input,ELSE,Follow._ELSE_in_case_else2739);  
			stream_ELSE.Add(ELSE340);

			DebugLocation(424, 9);
			WS341=(IToken)Match(input,WS,Follow._WS_in_case_else2741);  
			stream_WS.Add(WS341);

			DebugLocation(424, 12);
			PushFollow(Follow._expression_in_case_else2743);
			expression342=expression();
			PopFollow();

			stream_expression.Add(expression342.Tree);


			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 425:2: -> ^( T_CASE_ELSE expression )
			{
				DebugLocation(425, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:425:5: ^( T_CASE_ELSE expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(425, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CASE_ELSE, "T_CASE_ELSE"), root_1);

				DebugLocation(425, 19);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("case_else", 59);
			LeaveRule("case_else", 59);
			LeaveRule_case_else();
	    }
	 	DebugLocation(426, 1);
		} finally { DebugExitRule(GrammarFileName, "case_else"); }
		return retval;

	}
	// $ANTLR end "case_else"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _WS_in_parse352 = new BitSet(new ulong[]{0x180000002280000UL,0x0UL,0x40UL});
		public static readonly BitSet _commands_in_parse356 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _WS_in_parse358 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_parse363 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _command_in_commands386 = new BitSet(new ulong[]{0x180000002280002UL,0x0UL,0x40002040UL});
		public static readonly BitSet _WS_in_commands389 = new BitSet(new ulong[]{0x180000002280000UL,0x0UL,0x40000040UL});
		public static readonly BitSet _158_in_commands393 = new BitSet(new ulong[]{0x180000002280000UL,0x0UL,0x2040UL});
		public static readonly BitSet _WS_in_commands395 = new BitSet(new ulong[]{0x180000002280000UL,0x0UL,0x40UL});
		public static readonly BitSet _command_in_commands400 = new BitSet(new ulong[]{0x180000002280002UL,0x0UL,0x40002040UL});
		public static readonly BitSet _WS_in_commands405 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _158_in_commands408 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _select_command_in_command428 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _use_command_in_command433 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declare_command_in_command438 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_command_in_command443 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _create_view_command_in_command448 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _drop_view_command_in_command453 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SELECT_in_select_command467 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _WS_in_select_command470 = new BitSet(new ulong[]{0x1000020UL});
		public static readonly BitSet _distinct_clause_in_select_command472 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _WS_in_select_command477 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _top_clause_in_select_command479 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _WS_in_select_command483 = new BitSet(new ulong[]{0x9A0060002004C000UL,0x0UL,0x1400100UL});
		public static readonly BitSet _column_list_in_select_command485 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2000UL});
		public static readonly BitSet _WS_in_select_command488 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _into_clause_in_select_command490 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2000UL});
		public static readonly BitSet _WS_in_select_command495 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _from_clause_in_select_command497 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2000UL});
		public static readonly BitSet _WS_in_select_command502 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000UL});
		public static readonly BitSet _where_clause_in_select_command504 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2000UL});
		public static readonly BitSet _WS_in_select_command509 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _groupby_clause_in_select_command511 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2000UL});
		public static readonly BitSet _WS_in_select_command516 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _orderby_clause_in_select_command518 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DISTINCT_in_distinct_clause563 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ALL_in_distinct_clause572 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOP_in_top_clause588 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _WS_in_top_clause590 = new BitSet(new ulong[]{0x9A0060002004C000UL,0x0UL,0x400100UL});
		public static readonly BitSet _expression_in_top_clause592 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _column_in_column_list614 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4002000UL});
		public static readonly BitSet _WS_in_column_list617 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _154_in_column_list620 = new BitSet(new ulong[]{0x9A0060002004C000UL,0x0UL,0x1402100UL});
		public static readonly BitSet _WS_in_column_list622 = new BitSet(new ulong[]{0x9A0060002004C000UL,0x0UL,0x1400100UL});
		public static readonly BitSet _column_in_column_list625 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4002000UL});
		public static readonly BitSet _152_in_column649 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_column663 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2000UL});
		public static readonly BitSet _WS_in_column666 = new BitSet(new ulong[]{0x200000000000000UL});
		public static readonly BitSet _SIMPLE_FILE_in_column668 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INTO_in_into_clause691 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _WS_in_into_clause693 = new BitSet(new ulong[]{0x200000000000000UL,0x0UL,0x2000000000UL});
		public static readonly BitSet _file_in_into_clause695 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FROM_in_from_clause715 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _WS_in_from_clause717 = new BitSet(new ulong[]{0x8A00000000000000UL,0x0UL,0x2000400000UL});
		public static readonly BitSet _from_clause_item_in_from_clause719 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4002000UL});
		public static readonly BitSet _WS_in_from_clause722 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _154_in_from_clause725 = new BitSet(new ulong[]{0x8A00000000000000UL,0x0UL,0x2000402000UL});
		public static readonly BitSet _WS_in_from_clause727 = new BitSet(new ulong[]{0x8A00000000000000UL,0x0UL,0x2000400000UL});
		public static readonly BitSet _from_clause_item_in_from_clause730 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4002000UL});
		public static readonly BitSet _WS_in_from_clause735 = new BitSet(new ulong[]{0x200000000000000UL});
		public static readonly BitSet _table_alias_in_from_clause737 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_from_clause_item764 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _file_in_from_clause_item777 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _subquery_in_from_clause_item782 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _view_name_in_from_clause_item787 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _150_in_subquery799 = new BitSet(new ulong[]{0x80000000000000UL,0x0UL,0x2000UL});
		public static readonly BitSet _WS_in_subquery801 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _select_command_in_subquery804 = new BitSet(new ulong[]{0x0UL,0x0UL,0x802000UL});
		public static readonly BitSet _WS_in_subquery806 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000UL});
		public static readonly BitSet _151_in_subquery809 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _165_in_file828 = new BitSet(new ulong[]{0x800000000000000UL,0x0UL,0x2100UL});
		public static readonly BitSet _WS_in_file830 = new BitSet(new ulong[]{0x800000000000000UL,0x0UL,0x100UL});
		public static readonly BitSet _file_spec_in_file833 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000002000UL});
		public static readonly BitSet _WS_in_file836 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _file_option_in_file838 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000002000UL});
		public static readonly BitSet _WS_in_file842 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000000UL});
		public static readonly BitSet _166_in_file845 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SIMPLE_FILE_in_file862 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _string_in_file_spec881 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_in_file_spec886 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _155_in_file_option898 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _file_option_name_in_file_option900 = new BitSet(new ulong[]{0x2UL,0x0UL,0x400002000UL});
		public static readonly BitSet _WS_in_file_option904 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000000UL});
		public static readonly BitSet _162_in_file_option907 = new BitSet(new ulong[]{0x8800400000000000UL,0x0UL,0x2100UL});
		public static readonly BitSet _WS_in_file_option909 = new BitSet(new ulong[]{0x8800400000000000UL,0x0UL,0x100UL});
		public static readonly BitSet _file_option_value_in_file_option912 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_file_option_name936 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_file_option_value948 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_file_option_value952 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_file_option_value956 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_in_file_option_value960 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHERE_in_where_clause972 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _WS_in_where_clause974 = new BitSet(new ulong[]{0x9A0060002004C000UL,0x0UL,0x400100UL});
		public static readonly BitSet _expression_in_where_clause976 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GROUP_in_groupby_clause995 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _WS_in_groupby_clause997 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _BY_in_groupby_clause999 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _WS_in_groupby_clause1001 = new BitSet(new ulong[]{0x9A0060002004C000UL,0x0UL,0x400100UL});
		public static readonly BitSet _orderby_column_list_in_groupby_clause1003 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ORDER_in_orderby_clause1024 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _WS_in_orderby_clause1026 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _BY_in_orderby_clause1028 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _WS_in_orderby_clause1030 = new BitSet(new ulong[]{0x9A0060002004C000UL,0x0UL,0x400100UL});
		public static readonly BitSet _orderby_column_list_in_orderby_clause1032 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _orderby_column_in_orderby_column_list1053 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4002000UL});
		public static readonly BitSet _WS_in_orderby_column_list1056 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _154_in_orderby_column_list1059 = new BitSet(new ulong[]{0x9A0060002004C000UL,0x0UL,0x402100UL});
		public static readonly BitSet _WS_in_orderby_column_list1061 = new BitSet(new ulong[]{0x9A0060002004C000UL,0x0UL,0x400100UL});
		public static readonly BitSet _orderby_column_in_orderby_column_list1064 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4002000UL});
		public static readonly BitSet _expression_in_orderby_column1084 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2000UL});
		public static readonly BitSet _WS_in_orderby_column1087 = new BitSet(new ulong[]{0x4000000400200UL});
		public static readonly BitSet _orderby_direction_in_orderby_column1089 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASC_in_orderby_direction1114 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DESC_in_orderby_direction1123 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ORIG_in_orderby_direction1132 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _USE_in_use_command1150 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _WS_in_use_command1152 = new BitSet(new ulong[]{0x200000000000000UL,0x0UL,0x2000000000UL});
		public static readonly BitSet _file_in_use_command1154 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DECLARE_in_declare_command1176 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _WS_in_declare_command1178 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100UL});
		public static readonly BitSet _declaration_list_in_declare_command1180 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_in_declaration_list1197 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4002000UL});
		public static readonly BitSet _WS_in_declaration_list1200 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _154_in_declaration_list1203 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2100UL});
		public static readonly BitSet _WS_in_declaration_list1205 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100UL});
		public static readonly BitSet _declaration_in_declaration_list1208 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4002000UL});
		public static readonly BitSet _variable_in_declaration1232 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _WS_in_declaration1234 = new BitSet(new ulong[]{0x8000000000000100UL});
		public static readonly BitSet _AS_in_declaration1237 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _WS_in_declaration1239 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _datatype_in_declaration1243 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CREATE_in_create_view_command1268 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _WS_in_create_view_command1270 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _VIEW_in_create_view_command1272 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _WS_in_create_view_command1274 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _view_name_in_create_view_command1276 = new BitSet(new ulong[]{0x0UL,0x0UL,0x402000UL});
		public static readonly BitSet _WS_in_create_view_command1279 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000UL});
		public static readonly BitSet _150_in_create_view_command1282 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100UL});
		public static readonly BitSet _declaration_list_in_create_view_command1284 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000UL});
		public static readonly BitSet _151_in_create_view_command1286 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _WS_in_create_view_command1290 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _AS_in_create_view_command1292 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _WS_in_create_view_command1294 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _select_command_in_create_view_command1296 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DROP_in_drop_view_command1322 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _WS_in_drop_view_command1324 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _VIEW_in_drop_view_command1326 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _WS_in_drop_view_command1328 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _view_name_in_drop_view_command1330 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_view_name1350 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SET_in_set_command1374 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _WS_in_set_command1376 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100UL});
		public static readonly BitSet _variable_in_set_command1378 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400002000UL});
		public static readonly BitSet _WS_in_set_command1380 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000000UL});
		public static readonly BitSet _162_in_set_command1383 = new BitSet(new ulong[]{0x9A0060002004C000UL,0x0UL,0x402100UL});
		public static readonly BitSet _WS_in_set_command1385 = new BitSet(new ulong[]{0x9A0060002004C000UL,0x0UL,0x400100UL});
		public static readonly BitSet _expression_in_set_command1388 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_expression_list1413 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4002000UL});
		public static readonly BitSet _WS_in_expression_list1416 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _154_in_expression_list1419 = new BitSet(new ulong[]{0x9A0060002004C000UL,0x0UL,0x402100UL});
		public static readonly BitSet _WS_in_expression_list1421 = new BitSet(new ulong[]{0x9A0060002004C000UL,0x0UL,0x400100UL});
		public static readonly BitSet _expression_in_expression_list1424 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4002000UL});
		public static readonly BitSet _expression_list_in_expression_list_or_select_command1447 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _select_command_in_expression_list_or_select_command1451 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_7_in_expression1463 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_6_in_expression_71479 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2000UL});
		public static readonly BitSet _WS_in_expression_71486 = new BitSet(new ulong[]{0x12A1000000800UL,0x0UL,0x1F800E0000UL});
		public static readonly BitSet _op_7_in_expression_71491 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _WS_in_expression_71493 = new BitSet(new ulong[]{0x9A0060002004C000UL,0x0UL,0x400100UL});
		public static readonly BitSet _expression_6_in_expression_71497 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2000UL});
		public static readonly BitSet _IN_in_expression_71516 = new BitSet(new ulong[]{0x0UL,0x0UL,0x402000UL});
		public static readonly BitSet _WS_in_expression_71518 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000UL});
		public static readonly BitSet _150_in_expression_71521 = new BitSet(new ulong[]{0x9A8060002004C000UL,0x0UL,0x402100UL});
		public static readonly BitSet _WS_in_expression_71523 = new BitSet(new ulong[]{0x9A8060002004C000UL,0x0UL,0x400100UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_71526 = new BitSet(new ulong[]{0x0UL,0x0UL,0x802000UL});
		public static readonly BitSet _WS_in_expression_71528 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000UL});
		public static readonly BitSet _151_in_expression_71531 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2000UL});
		public static readonly BitSet _NOT_in_expression_71549 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _WS_in_expression_71551 = new BitSet(new ulong[]{0x1000000000UL});
		public static readonly BitSet _IN_in_expression_71553 = new BitSet(new ulong[]{0x0UL,0x0UL,0x402000UL});
		public static readonly BitSet _WS_in_expression_71555 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000UL});
		public static readonly BitSet _150_in_expression_71558 = new BitSet(new ulong[]{0x9A8060002004C000UL,0x0UL,0x402100UL});
		public static readonly BitSet _WS_in_expression_71560 = new BitSet(new ulong[]{0x9A8060002004C000UL,0x0UL,0x400100UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_71564 = new BitSet(new ulong[]{0x0UL,0x0UL,0x802000UL});
		public static readonly BitSet _WS_in_expression_71567 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000UL});
		public static readonly BitSet _151_in_expression_71570 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2000UL});
		public static readonly BitSet _op_4_in_expression_71588 = new BitSet(new ulong[]{0x400000000000080UL,0x0UL,0x2000UL});
		public static readonly BitSet _WS_in_expression_71590 = new BitSet(new ulong[]{0x400000000000080UL});
		public static readonly BitSet _SOME_in_expression_71594 = new BitSet(new ulong[]{0x0UL,0x0UL,0x402000UL});
		public static readonly BitSet _ANY_in_expression_71598 = new BitSet(new ulong[]{0x0UL,0x0UL,0x402000UL});
		public static readonly BitSet _WS_in_expression_71601 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000UL});
		public static readonly BitSet _150_in_expression_71604 = new BitSet(new ulong[]{0x9A8060002004C000UL,0x0UL,0x400100UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_71606 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000UL});
		public static readonly BitSet _151_in_expression_71608 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2000UL});
		public static readonly BitSet _op_4_in_expression_71628 = new BitSet(new ulong[]{0x20UL,0x0UL,0x2000UL});
		public static readonly BitSet _WS_in_expression_71630 = new BitSet(new ulong[]{0x20UL});
		public static readonly BitSet _ALL_in_expression_71633 = new BitSet(new ulong[]{0x0UL,0x0UL,0x402000UL});
		public static readonly BitSet _WS_in_expression_71635 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000UL});
		public static readonly BitSet _150_in_expression_71638 = new BitSet(new ulong[]{0x9A8060002004C000UL,0x0UL,0x400100UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_71640 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000UL});
		public static readonly BitSet _151_in_expression_71642 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2000UL});
		public static readonly BitSet _OR_in_op_71672 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LIKE_in_op_71681 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_71690 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _WS_in_op_71692 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _LIKE_in_op_71694 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MATCH_in_op_71703 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_71712 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _WS_in_op_71714 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _MATCH_in_op_71716 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BETWEEN_in_op_71725 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_71734 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _WS_in_op_71736 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _BETWEEN_in_op_71738 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_5_in_expression_61757 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2000UL});
		public static readonly BitSet _WS_in_expression_61764 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _op_6_in_expression_61766 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _WS_in_expression_61768 = new BitSet(new ulong[]{0x9A0060002004C000UL,0x0UL,0x400100UL});
		public static readonly BitSet _expression_5_in_expression_61772 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2000UL});
		public static readonly BitSet _AND_in_op_61800 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _op_5_in_expression_51818 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _WS_in_expression_51820 = new BitSet(new ulong[]{0x9A0060002004C000UL,0x0UL,0x400100UL});
		public static readonly BitSet _expression_5_in_expression_51822 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_4_in_expression_51837 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_51848 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_3_in_expression_41867 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1F800E2000UL});
		public static readonly BitSet _WS_in_expression_41874 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1F800E0000UL});
		public static readonly BitSet _op_4_in_expression_41877 = new BitSet(new ulong[]{0x9A0040002004C000UL,0x0UL,0x402100UL});
		public static readonly BitSet _WS_in_expression_41879 = new BitSet(new ulong[]{0x9A0040002004C000UL,0x0UL,0x400100UL});
		public static readonly BitSet _expression_3_in_expression_41884 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1F800E2000UL});
		public static readonly BitSet _162_in_op_41910 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _164_in_op_41919 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _160_in_op_41929 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _161_in_op_41939 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _146_in_op_41948 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _147_in_op_41957 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _145_in_op_41966 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _163_in_op_41975 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _159_in_op_41985 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_2_in_expression_32004 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1800A202000UL});
		public static readonly BitSet _WS_in_expression_32011 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1800A200000UL});
		public static readonly BitSet _op_3_in_expression_32014 = new BitSet(new ulong[]{0x9A0040002004C000UL,0x0UL,0x402100UL});
		public static readonly BitSet _WS_in_expression_32016 = new BitSet(new ulong[]{0x9A0040002004C000UL,0x0UL,0x400100UL});
		public static readonly BitSet _expression_2_in_expression_32021 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1800A202000UL});
		public static readonly BitSet _153_in_op_32047 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _155_in_op_32056 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _149_in_op_32065 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _168_in_op_32074 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _167_in_op_32083 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_1_in_expression_22105 = new BitSet(new ulong[]{0x2UL,0x0UL,0x21102000UL});
		public static readonly BitSet _WS_in_expression_22112 = new BitSet(new ulong[]{0x0UL,0x0UL,0x21100000UL});
		public static readonly BitSet _op_2_in_expression_22115 = new BitSet(new ulong[]{0x9A0040002004C000UL,0x0UL,0x402100UL});
		public static readonly BitSet _WS_in_expression_22117 = new BitSet(new ulong[]{0x9A0040002004C000UL,0x0UL,0x400100UL});
		public static readonly BitSet _expression_1_in_expression_22122 = new BitSet(new ulong[]{0x2UL,0x0UL,0x21102000UL});
		public static readonly BitSet _152_in_op_22148 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _157_in_op_22157 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _148_in_op_22166 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _150_in_expression_12184 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000A002000UL});
		public static readonly BitSet _WS_in_expression_12186 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000A000000UL});
		public static readonly BitSet _op_1_in_expression_12189 = new BitSet(new ulong[]{0x9A0040002004C000UL,0x0UL,0x402100UL});
		public static readonly BitSet _WS_in_expression_12191 = new BitSet(new ulong[]{0x9A0040002004C000UL,0x0UL,0x400100UL});
		public static readonly BitSet _expression_1_in_expression_12194 = new BitSet(new ulong[]{0x0UL,0x0UL,0x802000UL});
		public static readonly BitSet _WS_in_expression_12196 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000UL});
		public static readonly BitSet _151_in_expression_12199 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_atom_in_expression_12216 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _169_in_op_12226 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _153_in_op_12236 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _155_in_op_12245 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_expression_atom2260 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _string_in_expression_atom2273 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SYSTEMVAR_in_expression_atom2278 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_in_expression_atom2291 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _subquery_in_expression_atom2296 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _150_in_expression_atom2301 = new BitSet(new ulong[]{0x9A0060002004C000UL,0x0UL,0x400100UL});
		public static readonly BitSet _expression_in_expression_atom2303 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000UL});
		public static readonly BitSet _151_in_expression_atom2305 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functioncall_or_column_in_expression_atom2314 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conversion_in_expression_atom2319 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _case_in_expression_atom2324 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXISTS_in_expression_atom2329 = new BitSet(new ulong[]{0x0UL,0x0UL,0x402000UL});
		public static readonly BitSet _WS_in_expression_atom2331 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000UL});
		public static readonly BitSet _150_in_expression_atom2334 = new BitSet(new ulong[]{0x80000000000000UL,0x0UL,0x2000UL});
		public static readonly BitSet _WS_in_expression_atom2336 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _select_command_in_expression_atom2339 = new BitSet(new ulong[]{0x0UL,0x0UL,0x802000UL});
		public static readonly BitSet _WS_in_expression_atom2341 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000UL});
		public static readonly BitSet _151_in_expression_atom2344 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_functioncall_or_column2364 = new BitSet(new ulong[]{0x0UL,0x0UL,0x402000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2366 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000UL});
		public static readonly BitSet _150_in_functioncall_or_column2369 = new BitSet(new ulong[]{0x9A0060002004C000UL,0x0UL,0xC02100UL});
		public static readonly BitSet _WS_in_functioncall_or_column2371 = new BitSet(new ulong[]{0x9A0060002004C000UL,0x0UL,0xC00100UL});
		public static readonly BitSet _expression_in_functioncall_or_column2375 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4802000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2377 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4800000UL});
		public static readonly BitSet _154_in_functioncall_or_column2381 = new BitSet(new ulong[]{0x9A0060002004C000UL,0x0UL,0x402100UL});
		public static readonly BitSet _WS_in_functioncall_or_column2383 = new BitSet(new ulong[]{0x9A0060002004C000UL,0x0UL,0x400100UL});
		public static readonly BitSet _expression_in_functioncall_or_column2386 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4802000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2388 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4800000UL});
		public static readonly BitSet _151_in_functioncall_or_column2395 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_functioncall_or_column2411 = new BitSet(new ulong[]{0x0UL,0x0UL,0x402000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2413 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000UL});
		public static readonly BitSet _150_in_functioncall_or_column2416 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1002000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2418 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000UL});
		public static readonly BitSet _152_in_functioncall_or_column2421 = new BitSet(new ulong[]{0x0UL,0x0UL,0x802000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2423 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000UL});
		public static readonly BitSet _151_in_functioncall_or_column2426 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _table_alias_in_functioncall_or_column2444 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10002000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2446 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000UL});
		public static readonly BitSet _156_in_functioncall_or_column2449 = new BitSet(new ulong[]{0x200000000000000UL,0x0UL,0x2000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2451 = new BitSet(new ulong[]{0x200000000000000UL});
		public static readonly BitSet _column_name_in_functioncall_or_column2456 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SIMPLE_FILE_in_column_name2479 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SIMPLE_FILE_in_table_alias2490 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CONVERT_in_conversion2510 = new BitSet(new ulong[]{0x0UL,0x0UL,0x402000UL});
		public static readonly BitSet _WS_in_conversion2512 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000UL});
		public static readonly BitSet _150_in_conversion2515 = new BitSet(new ulong[]{0x8000000000000000UL,0x0UL,0x2000UL});
		public static readonly BitSet _WS_in_conversion2517 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _TOKEN_in_conversion2520 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4002000UL});
		public static readonly BitSet _WS_in_conversion2522 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _154_in_conversion2525 = new BitSet(new ulong[]{0x9A0060002004C000UL,0x0UL,0x402100UL});
		public static readonly BitSet _WS_in_conversion2527 = new BitSet(new ulong[]{0x9A0060002004C000UL,0x0UL,0x400100UL});
		public static readonly BitSet _expression_in_conversion2530 = new BitSet(new ulong[]{0x0UL,0x0UL,0x802000UL});
		public static readonly BitSet _WS_in_conversion2532 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000UL});
		public static readonly BitSet _151_in_conversion2535 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CAST_in_conversion2550 = new BitSet(new ulong[]{0x0UL,0x0UL,0x402000UL});
		public static readonly BitSet _WS_in_conversion2552 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000UL});
		public static readonly BitSet _150_in_conversion2555 = new BitSet(new ulong[]{0x9A0060002004C000UL,0x0UL,0x402100UL});
		public static readonly BitSet _WS_in_conversion2557 = new BitSet(new ulong[]{0x9A0060002004C000UL,0x0UL,0x400100UL});
		public static readonly BitSet _expression_in_conversion2560 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _WS_in_conversion2562 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _AS_in_conversion2564 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _WS_in_conversion2566 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _datatype_in_conversion2568 = new BitSet(new ulong[]{0x0UL,0x0UL,0x802000UL});
		public static readonly BitSet _WS_in_conversion2570 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000UL});
		public static readonly BitSet _151_in_conversion2573 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_string2593 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_datatype2613 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VARIABLE_in_variable2625 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CASE_in_case2645 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _WS_in_case2647 = new BitSet(new ulong[]{0x9A0060003804C000UL,0x0UL,0x400900UL});
		public static readonly BitSet _expression_in_case2650 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _WS_in_case2652 = new BitSet(new ulong[]{0x18000000UL,0x0UL,0x800UL});
		public static readonly BitSet _case_when_in_case2657 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _WS_in_case2659 = new BitSet(new ulong[]{0x18000000UL,0x0UL,0x800UL});
		public static readonly BitSet _case_else_in_case2664 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _WS_in_case2666 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _END_in_case2670 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHEN_in_case_when2698 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _WS_in_case_when2700 = new BitSet(new ulong[]{0x9A0060002004C000UL,0x0UL,0x400100UL});
		public static readonly BitSet _expression_in_case_when2704 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _WS_in_case_when2706 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _THEN_in_case_when2708 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _WS_in_case_when2710 = new BitSet(new ulong[]{0x9A0060002004C000UL,0x0UL,0x400100UL});
		public static readonly BitSet _expression_in_case_when2714 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ELSE_in_case_else2739 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _WS_in_case_else2741 = new BitSet(new ulong[]{0x9A0060002004C000UL,0x0UL,0x400100UL});
		public static readonly BitSet _expression_in_case_else2743 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  FxGqlLib 
