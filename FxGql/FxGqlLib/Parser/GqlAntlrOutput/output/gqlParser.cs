//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g 2012-03-09 16:22:53

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591


// `XXX' does not need a CLSCompliant attribute because the assembly is not marked as CLS-compliant (CS3021)
#pragma warning disable 3021
// The private field `XXX' is assigned but its value is never used (CS0414)
#pragma warning disable 414


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  FxGqlLib 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class gqlParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "A", "ALL", "AND", "ANY", "AS", "ASC", "B", "BETWEEN", "BY", "C", "CAST", "COMMENT_LINE", "CONVERT", "D", "DESC", "DIGIT", "DISTINCT", "E", "F", "FROM", "G", "H", "I", "IN", "INTO", "J", "K", "L", "LIKE", "M", "MATCH", "N", "NOT", "NUMBER", "O", "OR", "ORDER", "P", "Q", "R", "S", "SELECT", "SIMPLE_FILE", "SOME", "STRING", "SYSTEMVAR", "T", "TOKEN", "TOP", "T_ALL", "T_AND", "T_ANY", "T_BETWEEN", "T_BITWISE_AND", "T_BITWISE_NOT", "T_BITWISE_OR", "T_BITWISE_XOR", "T_COLUMNLIST", "T_CONVERT", "T_DISTINCT", "T_DIVIDE", "T_EQUAL", "T_EXPRESSIONLIST", "T_FILE", "T_FILEOPTION", "T_FROM", "T_FUNCTIONCALL", "T_GREATER", "T_IN", "T_INTEGER", "T_INTO", "T_LESS", "T_LIKE", "T_MATCH", "T_MINUS", "T_MODULO", "T_NOT", "T_NOTBETWEEN", "T_NOTEQUAL", "T_NOTGREATER", "T_NOTIN", "T_NOTLESS", "T_NOTLIKE", "T_NOTMATCH", "T_OP_BINARY", "T_OP_UNARY", "T_OR", "T_ORDERBY", "T_ORDERBY_ASC", "T_ORDERBY_COLUMN", "T_ORDERBY_DESC", "T_PLUS", "T_PRODUCT", "T_ROOT", "T_SELECT", "T_STRING", "T_SUBQUERY", "T_SYSTEMVAR", "T_TOP", "T_WHERE", "U", "V", "W", "WHERE", "WS", "X", "Y", "Z", "'!<'", "'!='", "'!>'", "'%'", "'&'", "'('", "')'", "'*'", "'+'", "','", "'-'", "'/'", "';'", "'<'", "'<='", "'<>'", "'='", "'>'", "'>='", "'['", "']'", "'^'", "'|'", "'~'"
	};
	public const int EOF=-1;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int T__115=115;
	public const int T__116=116;
	public const int T__117=117;
	public const int T__118=118;
	public const int T__119=119;
	public const int T__120=120;
	public const int T__121=121;
	public const int T__122=122;
	public const int T__123=123;
	public const int T__124=124;
	public const int T__125=125;
	public const int T__126=126;
	public const int T__127=127;
	public const int T__128=128;
	public const int T__129=129;
	public const int T__130=130;
	public const int T__131=131;
	public const int T__132=132;
	public const int T__133=133;
	public const int T__134=134;
	public const int T__135=135;
	public const int A=4;
	public const int ALL=5;
	public const int AND=6;
	public const int ANY=7;
	public const int AS=8;
	public const int ASC=9;
	public const int B=10;
	public const int BETWEEN=11;
	public const int BY=12;
	public const int C=13;
	public const int CAST=14;
	public const int COMMENT_LINE=15;
	public const int CONVERT=16;
	public const int D=17;
	public const int DESC=18;
	public const int DIGIT=19;
	public const int DISTINCT=20;
	public const int E=21;
	public const int F=22;
	public const int FROM=23;
	public const int G=24;
	public const int H=25;
	public const int I=26;
	public const int IN=27;
	public const int INTO=28;
	public const int J=29;
	public const int K=30;
	public const int L=31;
	public const int LIKE=32;
	public const int M=33;
	public const int MATCH=34;
	public const int N=35;
	public const int NOT=36;
	public const int NUMBER=37;
	public const int O=38;
	public const int OR=39;
	public const int ORDER=40;
	public const int P=41;
	public const int Q=42;
	public const int R=43;
	public const int S=44;
	public const int SELECT=45;
	public const int SIMPLE_FILE=46;
	public const int SOME=47;
	public const int STRING=48;
	public const int SYSTEMVAR=49;
	public const int T=50;
	public const int TOKEN=51;
	public const int TOP=52;
	public const int T_ALL=53;
	public const int T_AND=54;
	public const int T_ANY=55;
	public const int T_BETWEEN=56;
	public const int T_BITWISE_AND=57;
	public const int T_BITWISE_NOT=58;
	public const int T_BITWISE_OR=59;
	public const int T_BITWISE_XOR=60;
	public const int T_COLUMNLIST=61;
	public const int T_CONVERT=62;
	public const int T_DISTINCT=63;
	public const int T_DIVIDE=64;
	public const int T_EQUAL=65;
	public const int T_EXPRESSIONLIST=66;
	public const int T_FILE=67;
	public const int T_FILEOPTION=68;
	public const int T_FROM=69;
	public const int T_FUNCTIONCALL=70;
	public const int T_GREATER=71;
	public const int T_IN=72;
	public const int T_INTEGER=73;
	public const int T_INTO=74;
	public const int T_LESS=75;
	public const int T_LIKE=76;
	public const int T_MATCH=77;
	public const int T_MINUS=78;
	public const int T_MODULO=79;
	public const int T_NOT=80;
	public const int T_NOTBETWEEN=81;
	public const int T_NOTEQUAL=82;
	public const int T_NOTGREATER=83;
	public const int T_NOTIN=84;
	public const int T_NOTLESS=85;
	public const int T_NOTLIKE=86;
	public const int T_NOTMATCH=87;
	public const int T_OP_BINARY=88;
	public const int T_OP_UNARY=89;
	public const int T_OR=90;
	public const int T_ORDERBY=91;
	public const int T_ORDERBY_ASC=92;
	public const int T_ORDERBY_COLUMN=93;
	public const int T_ORDERBY_DESC=94;
	public const int T_PLUS=95;
	public const int T_PRODUCT=96;
	public const int T_ROOT=97;
	public const int T_SELECT=98;
	public const int T_STRING=99;
	public const int T_SUBQUERY=100;
	public const int T_SYSTEMVAR=101;
	public const int T_TOP=102;
	public const int T_WHERE=103;
	public const int U=104;
	public const int V=105;
	public const int W=106;
	public const int WHERE=107;
	public const int WS=108;
	public const int X=109;
	public const int Y=110;
	public const int Z=111;

	#if ANTLR_DEBUG
		private static readonly bool[] decisionCanBacktrack =
			new bool[]
			{
				false, // invalid decision
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false
			};
	#else
		private static readonly bool[] decisionCanBacktrack = new bool[0];
	#endif
	public gqlParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public gqlParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}
	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return gqlParser.tokenNames; } }
	public override string GrammarFileName { get { return "C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g"; } }


	[Conditional("ANTLR_TRACE")]
	protected virtual void OnCreated() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

	#region Rules

	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_parse() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_parse() {}

	// $ANTLR start "parse"
	// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:82:1: parse : ( WS )? ( commands ( WS )? )? EOF -> ^( T_ROOT ( commands )? ) ;
	[GrammarRule("parse")]
	private AstParserRuleReturnScope<object, IToken> parse()
	{
		EnterRule_parse();
		EnterRule("parse", 1);
		TraceIn("parse", 1);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS1 = default(IToken);
	    IToken WS3 = default(IToken);
	    IToken EOF4 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> commands2 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS1_tree = default(object);
	    object WS3_tree = default(object);
	    object EOF4_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
	    RewriteRuleSubtreeStream stream_commands=new RewriteRuleSubtreeStream(adaptor,"rule commands");
		try { DebugEnterRule(GrammarFileName, "parse");
		DebugLocation(82, 1);
		try
		{
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:83:2: ( ( WS )? ( commands ( WS )? )? EOF -> ^( T_ROOT ( commands )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:83:4: ( WS )? ( commands ( WS )? )? EOF
			{
			DebugLocation(83, 4);
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:83:4: ( WS )?
			int alt1=2;
			try { DebugEnterSubRule(1);
			try { DebugEnterDecision(1, decisionCanBacktrack[1]);
			int LA1_0 = input.LA(1);

			if ((LA1_0==WS))
			{
				alt1 = 1;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:83:4: WS
				{
				DebugLocation(83, 4);
				WS1=(IToken)Match(input,WS,Follow._WS_in_parse284);  
				stream_WS.Add(WS1);


				}
				break;

			}
			} finally { DebugExitSubRule(1); }

			DebugLocation(83, 8);
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:83:8: ( commands ( WS )? )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, decisionCanBacktrack[3]);
			int LA3_0 = input.LA(1);

			if ((LA3_0==SELECT))
			{
				alt3 = 1;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:83:9: commands ( WS )?
				{
				DebugLocation(83, 9);
				PushFollow(Follow._commands_in_parse288);
				commands2=commands();
				PopFollow();

				stream_commands.Add(commands2.Tree);
				DebugLocation(83, 18);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:83:18: ( WS )?
				int alt2=2;
				try { DebugEnterSubRule(2);
				try { DebugEnterDecision(2, decisionCanBacktrack[2]);
				int LA2_0 = input.LA(1);

				if ((LA2_0==WS))
				{
					alt2 = 1;
				}
				} finally { DebugExitDecision(2); }
				switch (alt2)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:83:18: WS
					{
					DebugLocation(83, 18);
					WS3=(IToken)Match(input,WS,Follow._WS_in_parse290);  
					stream_WS.Add(WS3);


					}
					break;

				}
				} finally { DebugExitSubRule(2); }


				}
				break;

			}
			} finally { DebugExitSubRule(3); }

			DebugLocation(83, 24);
			EOF4=(IToken)Match(input,EOF,Follow._EOF_in_parse295);  
			stream_EOF.Add(EOF4);



			{
			// AST REWRITE
			// elements: commands
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 84:2: -> ^( T_ROOT ( commands )? )
			{
				DebugLocation(84, 5);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:84:5: ^( T_ROOT ( commands )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(84, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_ROOT, "T_ROOT"), root_1);

				DebugLocation(84, 14);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:84:14: ( commands )?
				if (stream_commands.HasNext)
				{
					DebugLocation(84, 14);
					adaptor.AddChild(root_1, stream_commands.NextTree());

				}
				stream_commands.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parse", 1);
			LeaveRule("parse", 1);
			LeaveRule_parse();
	    }
	 	DebugLocation(85, 1);
		} finally { DebugExitRule(GrammarFileName, "parse"); }
		return retval;

	}
	// $ANTLR end "parse"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_commands() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_commands() {}

	// $ANTLR start "commands"
	// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:87:1: commands : command ( ( WS )? ( ';' ( WS )? )? command )* -> ( command )+ ;
	[GrammarRule("commands")]
	private AstParserRuleReturnScope<object, IToken> commands()
	{
		EnterRule_commands();
		EnterRule("commands", 2);
		TraceIn("commands", 2);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS6 = default(IToken);
	    IToken char_literal7 = default(IToken);
	    IToken WS8 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> command5 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> command9 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS6_tree = default(object);
	    object char_literal7_tree = default(object);
	    object WS8_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
	    RewriteRuleSubtreeStream stream_command=new RewriteRuleSubtreeStream(adaptor,"rule command");
		try { DebugEnterRule(GrammarFileName, "commands");
		DebugLocation(87, 1);
		try
		{
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:88:2: ( command ( ( WS )? ( ';' ( WS )? )? command )* -> ( command )+ )
			DebugEnterAlt(1);
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:88:4: command ( ( WS )? ( ';' ( WS )? )? command )*
			{
			DebugLocation(88, 4);
			PushFollow(Follow._command_in_commands318);
			command5=command();
			PopFollow();

			stream_command.Add(command5.Tree);
			DebugLocation(88, 12);
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:88:12: ( ( WS )? ( ';' ( WS )? )? command )*
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, decisionCanBacktrack[7]);
				int LA7_0 = input.LA(1);

				if ((LA7_0==WS))
				{
					int LA7_1 = input.LA(2);

					if ((LA7_1==SELECT||LA7_1==124))
					{
						alt7 = 1;
					}


				}
				else if ((LA7_0==SELECT||LA7_0==124))
				{
					alt7 = 1;
				}


				} finally { DebugExitDecision(7); }
				switch ( alt7 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:88:13: ( WS )? ( ';' ( WS )? )? command
					{
					DebugLocation(88, 13);
					// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:88:13: ( WS )?
					int alt4=2;
					try { DebugEnterSubRule(4);
					try { DebugEnterDecision(4, decisionCanBacktrack[4]);
					int LA4_0 = input.LA(1);

					if ((LA4_0==WS))
					{
						alt4 = 1;
					}
					} finally { DebugExitDecision(4); }
					switch (alt4)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:88:13: WS
						{
						DebugLocation(88, 13);
						WS6=(IToken)Match(input,WS,Follow._WS_in_commands321);  
						stream_WS.Add(WS6);


						}
						break;

					}
					} finally { DebugExitSubRule(4); }

					DebugLocation(88, 17);
					// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:88:17: ( ';' ( WS )? )?
					int alt6=2;
					try { DebugEnterSubRule(6);
					try { DebugEnterDecision(6, decisionCanBacktrack[6]);
					int LA6_0 = input.LA(1);

					if ((LA6_0==124))
					{
						alt6 = 1;
					}
					} finally { DebugExitDecision(6); }
					switch (alt6)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:88:18: ';' ( WS )?
						{
						DebugLocation(88, 18);
						char_literal7=(IToken)Match(input,124,Follow._124_in_commands325);  
						stream_124.Add(char_literal7);

						DebugLocation(88, 22);
						// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:88:22: ( WS )?
						int alt5=2;
						try { DebugEnterSubRule(5);
						try { DebugEnterDecision(5, decisionCanBacktrack[5]);
						int LA5_0 = input.LA(1);

						if ((LA5_0==WS))
						{
							alt5 = 1;
						}
						} finally { DebugExitDecision(5); }
						switch (alt5)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:88:22: WS
							{
							DebugLocation(88, 22);
							WS8=(IToken)Match(input,WS,Follow._WS_in_commands327);  
							stream_WS.Add(WS8);


							}
							break;

						}
						} finally { DebugExitSubRule(5); }


						}
						break;

					}
					} finally { DebugExitSubRule(6); }

					DebugLocation(88, 28);
					PushFollow(Follow._command_in_commands332);
					command9=command();
					PopFollow();

					stream_command.Add(command9.Tree);

					}
					break;

				default:
					goto loop7;
				}
			}

			loop7:
				;

			} finally { DebugExitSubRule(7); }



			{
			// AST REWRITE
			// elements: command
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 89:2: -> ( command )+
			{
				DebugLocation(89, 5);
				if (!(stream_command.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_command.HasNext )
				{
					DebugLocation(89, 5);
					adaptor.AddChild(root_0, stream_command.NextTree());

				}
				stream_command.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("commands", 2);
			LeaveRule("commands", 2);
			LeaveRule_commands();
	    }
	 	DebugLocation(90, 1);
		} finally { DebugExitRule(GrammarFileName, "commands"); }
		return retval;

	}
	// $ANTLR end "commands"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_command() {}

	// $ANTLR start "command"
	// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:92:1: command : select_command ;
	[GrammarRule("command")]
	private AstParserRuleReturnScope<object, IToken> command()
	{
		EnterRule_command();
		EnterRule("command", 3);
		TraceIn("command", 3);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> select_command10 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "command");
		DebugLocation(92, 1);
		try
		{
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:93:2: ( select_command )
			DebugEnterAlt(1);
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:93:4: select_command
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(93, 4);
			PushFollow(Follow._select_command_in_command352);
			select_command10=select_command();
			PopFollow();

			adaptor.AddChild(root_0, select_command10.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("command", 3);
			LeaveRule("command", 3);
			LeaveRule_command();
	    }
	 	DebugLocation(94, 1);
		} finally { DebugExitRule(GrammarFileName, "command"); }
		return retval;

	}
	// $ANTLR end "command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_select_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_select_command() {}

	// $ANTLR start "select_command"
	// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:96:1: select_command : SELECT ( WS distinct_clause )? ( WS top_clause )? WS column_list ( WS into_clause )? ( WS from_clause )? ( WS where_clause )? ( WS orderby_clause )? -> ^( T_SELECT ( distinct_clause )? ( top_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( orderby_clause )? ) ;
	[GrammarRule("select_command")]
	private AstParserRuleReturnScope<object, IToken> select_command()
	{
		EnterRule_select_command();
		EnterRule("select_command", 4);
		TraceIn("select_command", 4);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken SELECT11 = default(IToken);
	    IToken WS12 = default(IToken);
	    IToken WS14 = default(IToken);
	    IToken WS16 = default(IToken);
	    IToken WS18 = default(IToken);
	    IToken WS20 = default(IToken);
	    IToken WS22 = default(IToken);
	    IToken WS24 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> distinct_clause13 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> top_clause15 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> column_list17 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> into_clause19 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> from_clause21 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> where_clause23 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> orderby_clause25 = default(AstParserRuleReturnScope<object, IToken>);

	    object SELECT11_tree = default(object);
	    object WS12_tree = default(object);
	    object WS14_tree = default(object);
	    object WS16_tree = default(object);
	    object WS18_tree = default(object);
	    object WS20_tree = default(object);
	    object WS22_tree = default(object);
	    object WS24_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_SELECT=new RewriteRuleITokenStream(adaptor,"token SELECT");
	    RewriteRuleSubtreeStream stream_distinct_clause=new RewriteRuleSubtreeStream(adaptor,"rule distinct_clause");
	    RewriteRuleSubtreeStream stream_from_clause=new RewriteRuleSubtreeStream(adaptor,"rule from_clause");
	    RewriteRuleSubtreeStream stream_column_list=new RewriteRuleSubtreeStream(adaptor,"rule column_list");
	    RewriteRuleSubtreeStream stream_where_clause=new RewriteRuleSubtreeStream(adaptor,"rule where_clause");
	    RewriteRuleSubtreeStream stream_into_clause=new RewriteRuleSubtreeStream(adaptor,"rule into_clause");
	    RewriteRuleSubtreeStream stream_top_clause=new RewriteRuleSubtreeStream(adaptor,"rule top_clause");
	    RewriteRuleSubtreeStream stream_orderby_clause=new RewriteRuleSubtreeStream(adaptor,"rule orderby_clause");
		try { DebugEnterRule(GrammarFileName, "select_command");
		DebugLocation(96, 1);
		try
		{
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:97:2: ( SELECT ( WS distinct_clause )? ( WS top_clause )? WS column_list ( WS into_clause )? ( WS from_clause )? ( WS where_clause )? ( WS orderby_clause )? -> ^( T_SELECT ( distinct_clause )? ( top_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( orderby_clause )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:97:4: SELECT ( WS distinct_clause )? ( WS top_clause )? WS column_list ( WS into_clause )? ( WS from_clause )? ( WS where_clause )? ( WS orderby_clause )?
			{
			DebugLocation(97, 4);
			SELECT11=(IToken)Match(input,SELECT,Follow._SELECT_in_select_command363);  
			stream_SELECT.Add(SELECT11);

			DebugLocation(97, 11);
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:97:11: ( WS distinct_clause )?
			int alt8=2;
			try { DebugEnterSubRule(8);
			try { DebugEnterDecision(8, decisionCanBacktrack[8]);
			int LA8_0 = input.LA(1);

			if ((LA8_0==WS))
			{
				int LA8_1 = input.LA(2);

				if ((LA8_1==ALL||LA8_1==DISTINCT))
				{
					alt8 = 1;
				}
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:97:12: WS distinct_clause
				{
				DebugLocation(97, 12);
				WS12=(IToken)Match(input,WS,Follow._WS_in_select_command366);  
				stream_WS.Add(WS12);

				DebugLocation(97, 15);
				PushFollow(Follow._distinct_clause_in_select_command368);
				distinct_clause13=distinct_clause();
				PopFollow();

				stream_distinct_clause.Add(distinct_clause13.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(8); }

			DebugLocation(97, 33);
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:97:33: ( WS top_clause )?
			int alt9=2;
			try { DebugEnterSubRule(9);
			try { DebugEnterDecision(9, decisionCanBacktrack[9]);
			int LA9_0 = input.LA(1);

			if ((LA9_0==WS))
			{
				int LA9_1 = input.LA(2);

				if ((LA9_1==TOP))
				{
					alt9 = 1;
				}
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:97:34: WS top_clause
				{
				DebugLocation(97, 34);
				WS14=(IToken)Match(input,WS,Follow._WS_in_select_command373);  
				stream_WS.Add(WS14);

				DebugLocation(97, 37);
				PushFollow(Follow._top_clause_in_select_command375);
				top_clause15=top_clause();
				PopFollow();

				stream_top_clause.Add(top_clause15.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(9); }

			DebugLocation(97, 50);
			WS16=(IToken)Match(input,WS,Follow._WS_in_select_command379);  
			stream_WS.Add(WS16);

			DebugLocation(97, 53);
			PushFollow(Follow._column_list_in_select_command381);
			column_list17=column_list();
			PopFollow();

			stream_column_list.Add(column_list17.Tree);
			DebugLocation(97, 65);
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:97:65: ( WS into_clause )?
			int alt10=2;
			try { DebugEnterSubRule(10);
			try { DebugEnterDecision(10, decisionCanBacktrack[10]);
			int LA10_0 = input.LA(1);

			if ((LA10_0==WS))
			{
				int LA10_1 = input.LA(2);

				if ((LA10_1==INTO))
				{
					alt10 = 1;
				}
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:97:66: WS into_clause
				{
				DebugLocation(97, 66);
				WS18=(IToken)Match(input,WS,Follow._WS_in_select_command384);  
				stream_WS.Add(WS18);

				DebugLocation(97, 69);
				PushFollow(Follow._into_clause_in_select_command386);
				into_clause19=into_clause();
				PopFollow();

				stream_into_clause.Add(into_clause19.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(10); }

			DebugLocation(97, 83);
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:97:83: ( WS from_clause )?
			int alt11=2;
			try { DebugEnterSubRule(11);
			try { DebugEnterDecision(11, decisionCanBacktrack[11]);
			int LA11_0 = input.LA(1);

			if ((LA11_0==WS))
			{
				int LA11_1 = input.LA(2);

				if ((LA11_1==FROM))
				{
					alt11 = 1;
				}
			}
			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:97:84: WS from_clause
				{
				DebugLocation(97, 84);
				WS20=(IToken)Match(input,WS,Follow._WS_in_select_command391);  
				stream_WS.Add(WS20);

				DebugLocation(97, 87);
				PushFollow(Follow._from_clause_in_select_command393);
				from_clause21=from_clause();
				PopFollow();

				stream_from_clause.Add(from_clause21.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(11); }

			DebugLocation(97, 101);
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:97:101: ( WS where_clause )?
			int alt12=2;
			try { DebugEnterSubRule(12);
			try { DebugEnterDecision(12, decisionCanBacktrack[12]);
			int LA12_0 = input.LA(1);

			if ((LA12_0==WS))
			{
				int LA12_1 = input.LA(2);

				if ((LA12_1==WHERE))
				{
					alt12 = 1;
				}
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:97:102: WS where_clause
				{
				DebugLocation(97, 102);
				WS22=(IToken)Match(input,WS,Follow._WS_in_select_command398);  
				stream_WS.Add(WS22);

				DebugLocation(97, 105);
				PushFollow(Follow._where_clause_in_select_command400);
				where_clause23=where_clause();
				PopFollow();

				stream_where_clause.Add(where_clause23.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(12); }

			DebugLocation(97, 120);
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:97:120: ( WS orderby_clause )?
			int alt13=2;
			try { DebugEnterSubRule(13);
			try { DebugEnterDecision(13, decisionCanBacktrack[13]);
			int LA13_0 = input.LA(1);

			if ((LA13_0==WS))
			{
				int LA13_1 = input.LA(2);

				if ((LA13_1==ORDER))
				{
					alt13 = 1;
				}
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:97:121: WS orderby_clause
				{
				DebugLocation(97, 121);
				WS24=(IToken)Match(input,WS,Follow._WS_in_select_command405);  
				stream_WS.Add(WS24);

				DebugLocation(97, 124);
				PushFollow(Follow._orderby_clause_in_select_command407);
				orderby_clause25=orderby_clause();
				PopFollow();

				stream_orderby_clause.Add(orderby_clause25.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(13); }



			{
			// AST REWRITE
			// elements: top_clause, where_clause, from_clause, orderby_clause, distinct_clause, into_clause, column_list
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 98:3: -> ^( T_SELECT ( distinct_clause )? ( top_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( orderby_clause )? )
			{
				DebugLocation(98, 6);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:98:6: ^( T_SELECT ( distinct_clause )? ( top_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( orderby_clause )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(98, 8);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SELECT, "T_SELECT"), root_1);

				DebugLocation(98, 17);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:98:17: ( distinct_clause )?
				if (stream_distinct_clause.HasNext)
				{
					DebugLocation(98, 17);
					adaptor.AddChild(root_1, stream_distinct_clause.NextTree());

				}
				stream_distinct_clause.Reset();
				DebugLocation(98, 34);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:98:34: ( top_clause )?
				if (stream_top_clause.HasNext)
				{
					DebugLocation(98, 34);
					adaptor.AddChild(root_1, stream_top_clause.NextTree());

				}
				stream_top_clause.Reset();
				DebugLocation(98, 46);
				adaptor.AddChild(root_1, stream_column_list.NextTree());
				DebugLocation(98, 58);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:98:58: ( into_clause )?
				if (stream_into_clause.HasNext)
				{
					DebugLocation(98, 58);
					adaptor.AddChild(root_1, stream_into_clause.NextTree());

				}
				stream_into_clause.Reset();
				DebugLocation(98, 71);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:98:71: ( from_clause )?
				if (stream_from_clause.HasNext)
				{
					DebugLocation(98, 71);
					adaptor.AddChild(root_1, stream_from_clause.NextTree());

				}
				stream_from_clause.Reset();
				DebugLocation(98, 84);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:98:84: ( where_clause )?
				if (stream_where_clause.HasNext)
				{
					DebugLocation(98, 84);
					adaptor.AddChild(root_1, stream_where_clause.NextTree());

				}
				stream_where_clause.Reset();
				DebugLocation(98, 98);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:98:98: ( orderby_clause )?
				if (stream_orderby_clause.HasNext)
				{
					DebugLocation(98, 98);
					adaptor.AddChild(root_1, stream_orderby_clause.NextTree());

				}
				stream_orderby_clause.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("select_command", 4);
			LeaveRule("select_command", 4);
			LeaveRule_select_command();
	    }
	 	DebugLocation(99, 1);
		} finally { DebugExitRule(GrammarFileName, "select_command"); }
		return retval;

	}
	// $ANTLR end "select_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_distinct_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_distinct_clause() {}

	// $ANTLR start "distinct_clause"
	// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:101:1: distinct_clause : ( DISTINCT -> T_DISTINCT | ALL -> T_ALL );
	[GrammarRule("distinct_clause")]
	private AstParserRuleReturnScope<object, IToken> distinct_clause()
	{
		EnterRule_distinct_clause();
		EnterRule("distinct_clause", 5);
		TraceIn("distinct_clause", 5);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken DISTINCT26 = default(IToken);
	    IToken ALL27 = default(IToken);

	    object DISTINCT26_tree = default(object);
	    object ALL27_tree = default(object);
	    RewriteRuleITokenStream stream_DISTINCT=new RewriteRuleITokenStream(adaptor,"token DISTINCT");
	    RewriteRuleITokenStream stream_ALL=new RewriteRuleITokenStream(adaptor,"token ALL");

		try { DebugEnterRule(GrammarFileName, "distinct_clause");
		DebugLocation(101, 1);
		try
		{
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:102:2: ( DISTINCT -> T_DISTINCT | ALL -> T_ALL )
			int alt14=2;
			try { DebugEnterDecision(14, decisionCanBacktrack[14]);
			int LA14_0 = input.LA(1);

			if ((LA14_0==DISTINCT))
			{
				alt14 = 1;
			}
			else if ((LA14_0==ALL))
			{
				alt14 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 14, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:102:4: DISTINCT
				{
				DebugLocation(102, 4);
				DISTINCT26=(IToken)Match(input,DISTINCT,Follow._DISTINCT_in_distinct_clause449);  
				stream_DISTINCT.Add(DISTINCT26);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 102:13: -> T_DISTINCT
				{
					DebugLocation(102, 16);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_DISTINCT, "T_DISTINCT"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:103:4: ALL
				{
				DebugLocation(103, 4);
				ALL27=(IToken)Match(input,ALL,Follow._ALL_in_distinct_clause458);  
				stream_ALL.Add(ALL27);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 103:8: -> T_ALL
				{
					DebugLocation(103, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_ALL, "T_ALL"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("distinct_clause", 5);
			LeaveRule("distinct_clause", 5);
			LeaveRule_distinct_clause();
	    }
	 	DebugLocation(104, 1);
		} finally { DebugExitRule(GrammarFileName, "distinct_clause"); }
		return retval;

	}
	// $ANTLR end "distinct_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_top_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_top_clause() {}

	// $ANTLR start "top_clause"
	// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:106:1: top_clause : TOP WS expression -> ^( T_TOP expression ) ;
	[GrammarRule("top_clause")]
	private AstParserRuleReturnScope<object, IToken> top_clause()
	{
		EnterRule_top_clause();
		EnterRule("top_clause", 6);
		TraceIn("top_clause", 6);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOP28 = default(IToken);
	    IToken WS29 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression30 = default(AstParserRuleReturnScope<object, IToken>);

	    object TOP28_tree = default(object);
	    object WS29_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_TOP=new RewriteRuleITokenStream(adaptor,"token TOP");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "top_clause");
		DebugLocation(106, 1);
		try
		{
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:107:2: ( TOP WS expression -> ^( T_TOP expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:107:4: TOP WS expression
			{
			DebugLocation(107, 4);
			TOP28=(IToken)Match(input,TOP,Follow._TOP_in_top_clause474);  
			stream_TOP.Add(TOP28);

			DebugLocation(107, 8);
			WS29=(IToken)Match(input,WS,Follow._WS_in_top_clause476);  
			stream_WS.Add(WS29);

			DebugLocation(107, 11);
			PushFollow(Follow._expression_in_top_clause478);
			expression30=expression();
			PopFollow();

			stream_expression.Add(expression30.Tree);


			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 108:2: -> ^( T_TOP expression )
			{
				DebugLocation(108, 5);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:108:5: ^( T_TOP expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(108, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_TOP, "T_TOP"), root_1);

				DebugLocation(108, 13);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("top_clause", 6);
			LeaveRule("top_clause", 6);
			LeaveRule_top_clause();
	    }
	 	DebugLocation(109, 1);
		} finally { DebugExitRule(GrammarFileName, "top_clause"); }
		return retval;

	}
	// $ANTLR end "top_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_column_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_column_list() {}

	// $ANTLR start "column_list"
	// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:111:1: column_list : column ( ( WS )? ',' ( WS )? column )* -> ^( T_COLUMNLIST ( column )* ) ;
	[GrammarRule("column_list")]
	private AstParserRuleReturnScope<object, IToken> column_list()
	{
		EnterRule_column_list();
		EnterRule("column_list", 7);
		TraceIn("column_list", 7);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS32 = default(IToken);
	    IToken char_literal33 = default(IToken);
	    IToken WS34 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> column31 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> column35 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS32_tree = default(object);
	    object char_literal33_tree = default(object);
	    object WS34_tree = default(object);
	    RewriteRuleITokenStream stream_121=new RewriteRuleITokenStream(adaptor,"token 121");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_column=new RewriteRuleSubtreeStream(adaptor,"rule column");
		try { DebugEnterRule(GrammarFileName, "column_list");
		DebugLocation(111, 1);
		try
		{
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:112:2: ( column ( ( WS )? ',' ( WS )? column )* -> ^( T_COLUMNLIST ( column )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:112:4: column ( ( WS )? ',' ( WS )? column )*
			{
			DebugLocation(112, 4);
			PushFollow(Follow._column_in_column_list500);
			column31=column();
			PopFollow();

			stream_column.Add(column31.Tree);
			DebugLocation(112, 11);
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:112:11: ( ( WS )? ',' ( WS )? column )*
			try { DebugEnterSubRule(17);
			while (true)
			{
				int alt17=2;
				try { DebugEnterDecision(17, decisionCanBacktrack[17]);
				int LA17_0 = input.LA(1);

				if ((LA17_0==WS))
				{
					int LA17_1 = input.LA(2);

					if ((LA17_1==121))
					{
						alt17 = 1;
					}


				}
				else if ((LA17_0==121))
				{
					alt17 = 1;
				}


				} finally { DebugExitDecision(17); }
				switch ( alt17 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:112:12: ( WS )? ',' ( WS )? column
					{
					DebugLocation(112, 12);
					// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:112:12: ( WS )?
					int alt15=2;
					try { DebugEnterSubRule(15);
					try { DebugEnterDecision(15, decisionCanBacktrack[15]);
					int LA15_0 = input.LA(1);

					if ((LA15_0==WS))
					{
						alt15 = 1;
					}
					} finally { DebugExitDecision(15); }
					switch (alt15)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:112:12: WS
						{
						DebugLocation(112, 12);
						WS32=(IToken)Match(input,WS,Follow._WS_in_column_list503);  
						stream_WS.Add(WS32);


						}
						break;

					}
					} finally { DebugExitSubRule(15); }

					DebugLocation(112, 16);
					char_literal33=(IToken)Match(input,121,Follow._121_in_column_list506);  
					stream_121.Add(char_literal33);

					DebugLocation(112, 20);
					// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:112:20: ( WS )?
					int alt16=2;
					try { DebugEnterSubRule(16);
					try { DebugEnterDecision(16, decisionCanBacktrack[16]);
					int LA16_0 = input.LA(1);

					if ((LA16_0==WS))
					{
						alt16 = 1;
					}
					} finally { DebugExitDecision(16); }
					switch (alt16)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:112:20: WS
						{
						DebugLocation(112, 20);
						WS34=(IToken)Match(input,WS,Follow._WS_in_column_list508);  
						stream_WS.Add(WS34);


						}
						break;

					}
					} finally { DebugExitSubRule(16); }

					DebugLocation(112, 24);
					PushFollow(Follow._column_in_column_list511);
					column35=column();
					PopFollow();

					stream_column.Add(column35.Tree);

					}
					break;

				default:
					goto loop17;
				}
			}

			loop17:
				;

			} finally { DebugExitSubRule(17); }



			{
			// AST REWRITE
			// elements: column
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 113:2: -> ^( T_COLUMNLIST ( column )* )
			{
				DebugLocation(113, 5);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:113:5: ^( T_COLUMNLIST ( column )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(113, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_COLUMNLIST, "T_COLUMNLIST"), root_1);

				DebugLocation(113, 20);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:113:20: ( column )*
				while ( stream_column.HasNext )
				{
					DebugLocation(113, 20);
					adaptor.AddChild(root_1, stream_column.NextTree());

				}
				stream_column.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("column_list", 7);
			LeaveRule("column_list", 7);
			LeaveRule_column_list();
	    }
	 	DebugLocation(114, 1);
		} finally { DebugExitRule(GrammarFileName, "column_list"); }
		return retval;

	}
	// $ANTLR end "column_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_column() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_column() {}

	// $ANTLR start "column"
	// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:116:1: column : ( '*' | expression );
	[GrammarRule("column")]
	private AstParserRuleReturnScope<object, IToken> column()
	{
		EnterRule_column();
		EnterRule("column", 8);
		TraceIn("column", 8);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal36 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression37 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal36_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "column");
		DebugLocation(116, 1);
		try
		{
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:117:2: ( '*' | expression )
			int alt18=2;
			try { DebugEnterDecision(18, decisionCanBacktrack[18]);
			int LA18_0 = input.LA(1);

			if ((LA18_0==119))
			{
				alt18 = 1;
			}
			else if ((LA18_0==CAST||LA18_0==CONVERT||(LA18_0>=NOT && LA18_0<=NUMBER)||(LA18_0>=STRING && LA18_0<=SYSTEMVAR)||LA18_0==TOKEN||LA18_0==117))
			{
				alt18 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 18, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:117:4: '*'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(117, 4);
				char_literal36=(IToken)Match(input,119,Follow._119_in_column535); 
				char_literal36_tree = (object)adaptor.Create(char_literal36);
				adaptor.AddChild(root_0, char_literal36_tree);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:117:10: expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(117, 10);
				PushFollow(Follow._expression_in_column539);
				expression37=expression();
				PopFollow();

				adaptor.AddChild(root_0, expression37.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("column", 8);
			LeaveRule("column", 8);
			LeaveRule_column();
	    }
	 	DebugLocation(118, 1);
		} finally { DebugExitRule(GrammarFileName, "column"); }
		return retval;

	}
	// $ANTLR end "column"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_into_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_into_clause() {}

	// $ANTLR start "into_clause"
	// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:119:1: into_clause : INTO WS file -> ^( T_INTO file ) ;
	[GrammarRule("into_clause")]
	private AstParserRuleReturnScope<object, IToken> into_clause()
	{
		EnterRule_into_clause();
		EnterRule("into_clause", 9);
		TraceIn("into_clause", 9);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken INTO38 = default(IToken);
	    IToken WS39 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file40 = default(AstParserRuleReturnScope<object, IToken>);

	    object INTO38_tree = default(object);
	    object WS39_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_INTO=new RewriteRuleITokenStream(adaptor,"token INTO");
	    RewriteRuleSubtreeStream stream_file=new RewriteRuleSubtreeStream(adaptor,"rule file");
		try { DebugEnterRule(GrammarFileName, "into_clause");
		DebugLocation(119, 1);
		try
		{
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:120:2: ( INTO WS file -> ^( T_INTO file ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:120:4: INTO WS file
			{
			DebugLocation(120, 4);
			INTO38=(IToken)Match(input,INTO,Follow._INTO_in_into_clause549);  
			stream_INTO.Add(INTO38);

			DebugLocation(120, 9);
			WS39=(IToken)Match(input,WS,Follow._WS_in_into_clause551);  
			stream_WS.Add(WS39);

			DebugLocation(120, 12);
			PushFollow(Follow._file_in_into_clause553);
			file40=file();
			PopFollow();

			stream_file.Add(file40.Tree);


			{
			// AST REWRITE
			// elements: file
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 120:17: -> ^( T_INTO file )
			{
				DebugLocation(120, 20);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:120:20: ^( T_INTO file )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(120, 22);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_INTO, "T_INTO"), root_1);

				DebugLocation(120, 29);
				adaptor.AddChild(root_1, stream_file.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("into_clause", 9);
			LeaveRule("into_clause", 9);
			LeaveRule_into_clause();
	    }
	 	DebugLocation(121, 1);
		} finally { DebugExitRule(GrammarFileName, "into_clause"); }
		return retval;

	}
	// $ANTLR end "into_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_from_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_from_clause() {}

	// $ANTLR start "from_clause"
	// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:123:1: from_clause : FROM WS from_clause_item ( ( WS )? ',' ( WS )? from_clause_item )* -> ^( T_FROM ( from_clause_item )* ) ;
	[GrammarRule("from_clause")]
	private AstParserRuleReturnScope<object, IToken> from_clause()
	{
		EnterRule_from_clause();
		EnterRule("from_clause", 10);
		TraceIn("from_clause", 10);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken FROM41 = default(IToken);
	    IToken WS42 = default(IToken);
	    IToken WS44 = default(IToken);
	    IToken char_literal45 = default(IToken);
	    IToken WS46 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> from_clause_item43 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> from_clause_item47 = default(AstParserRuleReturnScope<object, IToken>);

	    object FROM41_tree = default(object);
	    object WS42_tree = default(object);
	    object WS44_tree = default(object);
	    object char_literal45_tree = default(object);
	    object WS46_tree = default(object);
	    RewriteRuleITokenStream stream_121=new RewriteRuleITokenStream(adaptor,"token 121");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_FROM=new RewriteRuleITokenStream(adaptor,"token FROM");
	    RewriteRuleSubtreeStream stream_from_clause_item=new RewriteRuleSubtreeStream(adaptor,"rule from_clause_item");
		try { DebugEnterRule(GrammarFileName, "from_clause");
		DebugLocation(123, 1);
		try
		{
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:124:2: ( FROM WS from_clause_item ( ( WS )? ',' ( WS )? from_clause_item )* -> ^( T_FROM ( from_clause_item )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:124:4: FROM WS from_clause_item ( ( WS )? ',' ( WS )? from_clause_item )*
			{
			DebugLocation(124, 4);
			FROM41=(IToken)Match(input,FROM,Follow._FROM_in_from_clause573);  
			stream_FROM.Add(FROM41);

			DebugLocation(124, 9);
			WS42=(IToken)Match(input,WS,Follow._WS_in_from_clause575);  
			stream_WS.Add(WS42);

			DebugLocation(124, 12);
			PushFollow(Follow._from_clause_item_in_from_clause577);
			from_clause_item43=from_clause_item();
			PopFollow();

			stream_from_clause_item.Add(from_clause_item43.Tree);
			DebugLocation(124, 29);
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:124:29: ( ( WS )? ',' ( WS )? from_clause_item )*
			try { DebugEnterSubRule(21);
			while (true)
			{
				int alt21=2;
				try { DebugEnterDecision(21, decisionCanBacktrack[21]);
				int LA21_0 = input.LA(1);

				if ((LA21_0==WS))
				{
					int LA21_1 = input.LA(2);

					if ((LA21_1==121))
					{
						alt21 = 1;
					}


				}
				else if ((LA21_0==121))
				{
					alt21 = 1;
				}


				} finally { DebugExitDecision(21); }
				switch ( alt21 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:124:30: ( WS )? ',' ( WS )? from_clause_item
					{
					DebugLocation(124, 30);
					// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:124:30: ( WS )?
					int alt19=2;
					try { DebugEnterSubRule(19);
					try { DebugEnterDecision(19, decisionCanBacktrack[19]);
					int LA19_0 = input.LA(1);

					if ((LA19_0==WS))
					{
						alt19 = 1;
					}
					} finally { DebugExitDecision(19); }
					switch (alt19)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:124:30: WS
						{
						DebugLocation(124, 30);
						WS44=(IToken)Match(input,WS,Follow._WS_in_from_clause580);  
						stream_WS.Add(WS44);


						}
						break;

					}
					} finally { DebugExitSubRule(19); }

					DebugLocation(124, 34);
					char_literal45=(IToken)Match(input,121,Follow._121_in_from_clause583);  
					stream_121.Add(char_literal45);

					DebugLocation(124, 38);
					// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:124:38: ( WS )?
					int alt20=2;
					try { DebugEnterSubRule(20);
					try { DebugEnterDecision(20, decisionCanBacktrack[20]);
					int LA20_0 = input.LA(1);

					if ((LA20_0==WS))
					{
						alt20 = 1;
					}
					} finally { DebugExitDecision(20); }
					switch (alt20)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:124:38: WS
						{
						DebugLocation(124, 38);
						WS46=(IToken)Match(input,WS,Follow._WS_in_from_clause585);  
						stream_WS.Add(WS46);


						}
						break;

					}
					} finally { DebugExitSubRule(20); }

					DebugLocation(124, 42);
					PushFollow(Follow._from_clause_item_in_from_clause588);
					from_clause_item47=from_clause_item();
					PopFollow();

					stream_from_clause_item.Add(from_clause_item47.Tree);

					}
					break;

				default:
					goto loop21;
				}
			}

			loop21:
				;

			} finally { DebugExitSubRule(21); }



			{
			// AST REWRITE
			// elements: from_clause_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 124:61: -> ^( T_FROM ( from_clause_item )* )
			{
				DebugLocation(124, 64);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:124:64: ^( T_FROM ( from_clause_item )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(124, 66);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FROM, "T_FROM"), root_1);

				DebugLocation(124, 73);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:124:73: ( from_clause_item )*
				while ( stream_from_clause_item.HasNext )
				{
					DebugLocation(124, 73);
					adaptor.AddChild(root_1, stream_from_clause_item.NextTree());

				}
				stream_from_clause_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("from_clause", 10);
			LeaveRule("from_clause", 10);
			LeaveRule_from_clause();
	    }
	 	DebugLocation(125, 1);
		} finally { DebugExitRule(GrammarFileName, "from_clause"); }
		return retval;

	}
	// $ANTLR end "from_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_from_clause_item() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_from_clause_item() {}

	// $ANTLR start "from_clause_item"
	// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:127:1: from_clause_item : ( STRING -> ^( T_FILE STRING ) | file | '(' ( WS )? select_command ( WS )? ')' -> ^( T_SUBQUERY select_command ) );
	[GrammarRule("from_clause_item")]
	private AstParserRuleReturnScope<object, IToken> from_clause_item()
	{
		EnterRule_from_clause_item();
		EnterRule("from_clause_item", 11);
		TraceIn("from_clause_item", 11);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken STRING48 = default(IToken);
	    IToken char_literal50 = default(IToken);
	    IToken WS51 = default(IToken);
	    IToken WS53 = default(IToken);
	    IToken char_literal54 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file49 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> select_command52 = default(AstParserRuleReturnScope<object, IToken>);

	    object STRING48_tree = default(object);
	    object char_literal50_tree = default(object);
	    object WS51_tree = default(object);
	    object WS53_tree = default(object);
	    object char_literal54_tree = default(object);
	    RewriteRuleITokenStream stream_117=new RewriteRuleITokenStream(adaptor,"token 117");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_118=new RewriteRuleITokenStream(adaptor,"token 118");
	    RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
	    RewriteRuleSubtreeStream stream_select_command=new RewriteRuleSubtreeStream(adaptor,"rule select_command");
		try { DebugEnterRule(GrammarFileName, "from_clause_item");
		DebugLocation(127, 1);
		try
		{
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:128:2: ( STRING -> ^( T_FILE STRING ) | file | '(' ( WS )? select_command ( WS )? ')' -> ^( T_SUBQUERY select_command ) )
			int alt24=3;
			try { DebugEnterDecision(24, decisionCanBacktrack[24]);
			switch (input.LA(1))
			{
			case STRING:
				{
				alt24 = 1;
				}
				break;
			case SIMPLE_FILE:
			case 131:
				{
				alt24 = 2;
				}
				break;
			case 117:
				{
				alt24 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 24, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:128:4: STRING
				{
				DebugLocation(128, 4);
				STRING48=(IToken)Match(input,STRING,Follow._STRING_in_from_clause_item611);  
				stream_STRING.Add(STRING48);



				{
				// AST REWRITE
				// elements: STRING
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 128:11: -> ^( T_FILE STRING )
				{
					DebugLocation(128, 14);
					// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:128:14: ^( T_FILE STRING )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(128, 16);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILE, "T_FILE"), root_1);

					DebugLocation(128, 23);
					adaptor.AddChild(root_1, stream_STRING.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:129:4: file
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(129, 4);
				PushFollow(Follow._file_in_from_clause_item624);
				file49=file();
				PopFollow();

				adaptor.AddChild(root_0, file49.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:130:4: '(' ( WS )? select_command ( WS )? ')'
				{
				DebugLocation(130, 4);
				char_literal50=(IToken)Match(input,117,Follow._117_in_from_clause_item629);  
				stream_117.Add(char_literal50);

				DebugLocation(130, 8);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:130:8: ( WS )?
				int alt22=2;
				try { DebugEnterSubRule(22);
				try { DebugEnterDecision(22, decisionCanBacktrack[22]);
				int LA22_0 = input.LA(1);

				if ((LA22_0==WS))
				{
					alt22 = 1;
				}
				} finally { DebugExitDecision(22); }
				switch (alt22)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:130:8: WS
					{
					DebugLocation(130, 8);
					WS51=(IToken)Match(input,WS,Follow._WS_in_from_clause_item631);  
					stream_WS.Add(WS51);


					}
					break;

				}
				} finally { DebugExitSubRule(22); }

				DebugLocation(130, 12);
				PushFollow(Follow._select_command_in_from_clause_item634);
				select_command52=select_command();
				PopFollow();

				stream_select_command.Add(select_command52.Tree);
				DebugLocation(130, 27);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:130:27: ( WS )?
				int alt23=2;
				try { DebugEnterSubRule(23);
				try { DebugEnterDecision(23, decisionCanBacktrack[23]);
				int LA23_0 = input.LA(1);

				if ((LA23_0==WS))
				{
					alt23 = 1;
				}
				} finally { DebugExitDecision(23); }
				switch (alt23)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:130:27: WS
					{
					DebugLocation(130, 27);
					WS53=(IToken)Match(input,WS,Follow._WS_in_from_clause_item636);  
					stream_WS.Add(WS53);


					}
					break;

				}
				} finally { DebugExitSubRule(23); }

				DebugLocation(130, 31);
				char_literal54=(IToken)Match(input,118,Follow._118_in_from_clause_item639);  
				stream_118.Add(char_literal54);



				{
				// AST REWRITE
				// elements: select_command
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 130:35: -> ^( T_SUBQUERY select_command )
				{
					DebugLocation(130, 38);
					// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:130:38: ^( T_SUBQUERY select_command )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(130, 40);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SUBQUERY, "T_SUBQUERY"), root_1);

					DebugLocation(130, 51);
					adaptor.AddChild(root_1, stream_select_command.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("from_clause_item", 11);
			LeaveRule("from_clause_item", 11);
			LeaveRule_from_clause_item();
	    }
	 	DebugLocation(131, 1);
		} finally { DebugExitRule(GrammarFileName, "from_clause_item"); }
		return retval;

	}
	// $ANTLR end "from_clause_item"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file() {}

	// $ANTLR start "file"
	// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:133:1: file : ( '[' ( WS )? STRING ( WS file_option )* ( WS )? ']' -> ^( T_FILE STRING ( file_option )* ) | SIMPLE_FILE -> ^( T_FILE SIMPLE_FILE ) );
	[GrammarRule("file")]
	private AstParserRuleReturnScope<object, IToken> file()
	{
		EnterRule_file();
		EnterRule("file", 12);
		TraceIn("file", 12);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal55 = default(IToken);
	    IToken WS56 = default(IToken);
	    IToken STRING57 = default(IToken);
	    IToken WS58 = default(IToken);
	    IToken WS60 = default(IToken);
	    IToken char_literal61 = default(IToken);
	    IToken SIMPLE_FILE62 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file_option59 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal55_tree = default(object);
	    object WS56_tree = default(object);
	    object STRING57_tree = default(object);
	    object WS58_tree = default(object);
	    object WS60_tree = default(object);
	    object char_literal61_tree = default(object);
	    object SIMPLE_FILE62_tree = default(object);
	    RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_SIMPLE_FILE=new RewriteRuleITokenStream(adaptor,"token SIMPLE_FILE");
	    RewriteRuleITokenStream stream_131=new RewriteRuleITokenStream(adaptor,"token 131");
	    RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
	    RewriteRuleSubtreeStream stream_file_option=new RewriteRuleSubtreeStream(adaptor,"rule file_option");
		try { DebugEnterRule(GrammarFileName, "file");
		DebugLocation(133, 39);
		try
		{
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:134:2: ( '[' ( WS )? STRING ( WS file_option )* ( WS )? ']' -> ^( T_FILE STRING ( file_option )* ) | SIMPLE_FILE -> ^( T_FILE SIMPLE_FILE ) )
			int alt28=2;
			try { DebugEnterDecision(28, decisionCanBacktrack[28]);
			int LA28_0 = input.LA(1);

			if ((LA28_0==131))
			{
				alt28 = 1;
			}
			else if ((LA28_0==SIMPLE_FILE))
			{
				alt28 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 28, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:134:4: '[' ( WS )? STRING ( WS file_option )* ( WS )? ']'
				{
				DebugLocation(134, 4);
				char_literal55=(IToken)Match(input,131,Follow._131_in_file658);  
				stream_131.Add(char_literal55);

				DebugLocation(134, 8);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:134:8: ( WS )?
				int alt25=2;
				try { DebugEnterSubRule(25);
				try { DebugEnterDecision(25, decisionCanBacktrack[25]);
				int LA25_0 = input.LA(1);

				if ((LA25_0==WS))
				{
					alt25 = 1;
				}
				} finally { DebugExitDecision(25); }
				switch (alt25)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:134:8: WS
					{
					DebugLocation(134, 8);
					WS56=(IToken)Match(input,WS,Follow._WS_in_file660);  
					stream_WS.Add(WS56);


					}
					break;

				}
				} finally { DebugExitSubRule(25); }

				DebugLocation(134, 12);
				STRING57=(IToken)Match(input,STRING,Follow._STRING_in_file663);  
				stream_STRING.Add(STRING57);

				DebugLocation(134, 19);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:134:19: ( WS file_option )*
				try { DebugEnterSubRule(26);
				while (true)
				{
					int alt26=2;
					try { DebugEnterDecision(26, decisionCanBacktrack[26]);
					int LA26_0 = input.LA(1);

					if ((LA26_0==WS))
					{
						int LA26_1 = input.LA(2);

						if ((LA26_1==122))
						{
							alt26 = 1;
						}


					}


					} finally { DebugExitDecision(26); }
					switch ( alt26 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:134:20: WS file_option
						{
						DebugLocation(134, 20);
						WS58=(IToken)Match(input,WS,Follow._WS_in_file666);  
						stream_WS.Add(WS58);

						DebugLocation(134, 23);
						PushFollow(Follow._file_option_in_file668);
						file_option59=file_option();
						PopFollow();

						stream_file_option.Add(file_option59.Tree);

						}
						break;

					default:
						goto loop26;
					}
				}

				loop26:
					;

				} finally { DebugExitSubRule(26); }

				DebugLocation(134, 37);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:134:37: ( WS )?
				int alt27=2;
				try { DebugEnterSubRule(27);
				try { DebugEnterDecision(27, decisionCanBacktrack[27]);
				int LA27_0 = input.LA(1);

				if ((LA27_0==WS))
				{
					alt27 = 1;
				}
				} finally { DebugExitDecision(27); }
				switch (alt27)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:134:37: WS
					{
					DebugLocation(134, 37);
					WS60=(IToken)Match(input,WS,Follow._WS_in_file672);  
					stream_WS.Add(WS60);


					}
					break;

				}
				} finally { DebugExitSubRule(27); }

				DebugLocation(134, 41);
				char_literal61=(IToken)Match(input,132,Follow._132_in_file675);  
				stream_132.Add(char_literal61);



				{
				// AST REWRITE
				// elements: file_option, STRING
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 134:45: -> ^( T_FILE STRING ( file_option )* )
				{
					DebugLocation(134, 48);
					// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:134:48: ^( T_FILE STRING ( file_option )* )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(134, 50);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILE, "T_FILE"), root_1);

					DebugLocation(134, 57);
					adaptor.AddChild(root_1, stream_STRING.NextNode());
					DebugLocation(134, 64);
					// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:134:64: ( file_option )*
					while ( stream_file_option.HasNext )
					{
						DebugLocation(134, 64);
						adaptor.AddChild(root_1, stream_file_option.NextTree());

					}
					stream_file_option.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:135:4: SIMPLE_FILE
				{
				DebugLocation(135, 4);
				SIMPLE_FILE62=(IToken)Match(input,SIMPLE_FILE,Follow._SIMPLE_FILE_in_file692);  
				stream_SIMPLE_FILE.Add(SIMPLE_FILE62);



				{
				// AST REWRITE
				// elements: SIMPLE_FILE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 135:16: -> ^( T_FILE SIMPLE_FILE )
				{
					DebugLocation(135, 19);
					// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:135:19: ^( T_FILE SIMPLE_FILE )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(135, 21);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILE, "T_FILE"), root_1);

					DebugLocation(135, 28);
					adaptor.AddChild(root_1, stream_SIMPLE_FILE.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file", 12);
			LeaveRule("file", 12);
			LeaveRule_file();
	    }
	 	DebugLocation(135, 39);
		} finally { DebugExitRule(GrammarFileName, "file"); }
		return retval;

	}
	// $ANTLR end "file"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_option() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_option() {}

	// $ANTLR start "file_option"
	// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:137:1: file_option : '-' file_option_name ( ( WS )? '=' ( WS )? file_option_value )? -> ^( T_FILEOPTION file_option_name ( file_option_value )? ) ;
	[GrammarRule("file_option")]
	private AstParserRuleReturnScope<object, IToken> file_option()
	{
		EnterRule_file_option();
		EnterRule("file_option", 13);
		TraceIn("file_option", 13);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal63 = default(IToken);
	    IToken WS65 = default(IToken);
	    IToken char_literal66 = default(IToken);
	    IToken WS67 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file_option_name64 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> file_option_value68 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal63_tree = default(object);
	    object WS65_tree = default(object);
	    object char_literal66_tree = default(object);
	    object WS67_tree = default(object);
	    RewriteRuleITokenStream stream_128=new RewriteRuleITokenStream(adaptor,"token 128");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_122=new RewriteRuleITokenStream(adaptor,"token 122");
	    RewriteRuleSubtreeStream stream_file_option_name=new RewriteRuleSubtreeStream(adaptor,"rule file_option_name");
	    RewriteRuleSubtreeStream stream_file_option_value=new RewriteRuleSubtreeStream(adaptor,"rule file_option_value");
		try { DebugEnterRule(GrammarFileName, "file_option");
		DebugLocation(137, 1);
		try
		{
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:138:2: ( '-' file_option_name ( ( WS )? '=' ( WS )? file_option_value )? -> ^( T_FILEOPTION file_option_name ( file_option_value )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:138:4: '-' file_option_name ( ( WS )? '=' ( WS )? file_option_value )?
			{
			DebugLocation(138, 4);
			char_literal63=(IToken)Match(input,122,Follow._122_in_file_option709);  
			stream_122.Add(char_literal63);

			DebugLocation(138, 8);
			PushFollow(Follow._file_option_name_in_file_option711);
			file_option_name64=file_option_name();
			PopFollow();

			stream_file_option_name.Add(file_option_name64.Tree);
			DebugLocation(138, 25);
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:138:25: ( ( WS )? '=' ( WS )? file_option_value )?
			int alt31=2;
			try { DebugEnterSubRule(31);
			try { DebugEnterDecision(31, decisionCanBacktrack[31]);
			int LA31_0 = input.LA(1);

			if ((LA31_0==WS))
			{
				int LA31_1 = input.LA(2);

				if ((LA31_1==128))
				{
					alt31 = 1;
				}
			}
			else if ((LA31_0==128))
			{
				alt31 = 1;
			}
			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:138:27: ( WS )? '=' ( WS )? file_option_value
				{
				DebugLocation(138, 27);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:138:27: ( WS )?
				int alt29=2;
				try { DebugEnterSubRule(29);
				try { DebugEnterDecision(29, decisionCanBacktrack[29]);
				int LA29_0 = input.LA(1);

				if ((LA29_0==WS))
				{
					alt29 = 1;
				}
				} finally { DebugExitDecision(29); }
				switch (alt29)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:138:27: WS
					{
					DebugLocation(138, 27);
					WS65=(IToken)Match(input,WS,Follow._WS_in_file_option715);  
					stream_WS.Add(WS65);


					}
					break;

				}
				} finally { DebugExitSubRule(29); }

				DebugLocation(138, 31);
				char_literal66=(IToken)Match(input,128,Follow._128_in_file_option718);  
				stream_128.Add(char_literal66);

				DebugLocation(138, 35);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:138:35: ( WS )?
				int alt30=2;
				try { DebugEnterSubRule(30);
				try { DebugEnterDecision(30, decisionCanBacktrack[30]);
				int LA30_0 = input.LA(1);

				if ((LA30_0==WS))
				{
					alt30 = 1;
				}
				} finally { DebugExitDecision(30); }
				switch (alt30)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:138:35: WS
					{
					DebugLocation(138, 35);
					WS67=(IToken)Match(input,WS,Follow._WS_in_file_option720);  
					stream_WS.Add(WS67);


					}
					break;

				}
				} finally { DebugExitSubRule(30); }

				DebugLocation(138, 39);
				PushFollow(Follow._file_option_value_in_file_option723);
				file_option_value68=file_option_value();
				PopFollow();

				stream_file_option_value.Add(file_option_value68.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(31); }



			{
			// AST REWRITE
			// elements: file_option_value, file_option_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 138:59: -> ^( T_FILEOPTION file_option_name ( file_option_value )? )
			{
				DebugLocation(138, 62);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:138:62: ^( T_FILEOPTION file_option_name ( file_option_value )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(138, 64);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILEOPTION, "T_FILEOPTION"), root_1);

				DebugLocation(138, 77);
				adaptor.AddChild(root_1, stream_file_option_name.NextTree());
				DebugLocation(138, 94);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:138:94: ( file_option_value )?
				if (stream_file_option_value.HasNext)
				{
					DebugLocation(138, 94);
					adaptor.AddChild(root_1, stream_file_option_value.NextTree());

				}
				stream_file_option_value.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_option", 13);
			LeaveRule("file_option", 13);
			LeaveRule_file_option();
	    }
	 	DebugLocation(139, 1);
		} finally { DebugExitRule(GrammarFileName, "file_option"); }
		return retval;

	}
	// $ANTLR end "file_option"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_option_name() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_option_name() {}

	// $ANTLR start "file_option_name"
	// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:141:1: file_option_name : TOKEN ;
	[GrammarRule("file_option_name")]
	private AstParserRuleReturnScope<object, IToken> file_option_name()
	{
		EnterRule_file_option_name();
		EnterRule("file_option_name", 14);
		TraceIn("file_option_name", 14);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN69 = default(IToken);

	    object TOKEN69_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "file_option_name");
		DebugLocation(141, 1);
		try
		{
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:142:2: ( TOKEN )
			DebugEnterAlt(1);
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:142:4: TOKEN
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(142, 4);
			TOKEN69=(IToken)Match(input,TOKEN,Follow._TOKEN_in_file_option_name747); 
			TOKEN69_tree = (object)adaptor.Create(TOKEN69);
			adaptor.AddChild(root_0, TOKEN69_tree);


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_option_name", 14);
			LeaveRule("file_option_name", 14);
			LeaveRule_file_option_name();
	    }
	 	DebugLocation(143, 1);
		} finally { DebugExitRule(GrammarFileName, "file_option_name"); }
		return retval;

	}
	// $ANTLR end "file_option_name"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_option_value() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_option_value() {}

	// $ANTLR start "file_option_value"
	// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:145:1: file_option_value : ( TOKEN | STRING | NUMBER );
	[GrammarRule("file_option_value")]
	private AstParserRuleReturnScope<object, IToken> file_option_value()
	{
		EnterRule_file_option_value();
		EnterRule("file_option_value", 15);
		TraceIn("file_option_value", 15);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken set70 = default(IToken);

	    object set70_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "file_option_value");
		DebugLocation(145, 1);
		try
		{
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:146:2: ( TOKEN | STRING | NUMBER )
			DebugEnterAlt(1);
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(146, 2);

			set70=(IToken)input.LT(1);
			if (input.LA(1)==NUMBER||input.LA(1)==STRING||input.LA(1)==TOKEN)
			{
				input.Consume();
				adaptor.AddChild(root_0, (object)adaptor.Create(set70));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_option_value", 15);
			LeaveRule("file_option_value", 15);
			LeaveRule_file_option_value();
	    }
	 	DebugLocation(147, 1);
		} finally { DebugExitRule(GrammarFileName, "file_option_value"); }
		return retval;

	}
	// $ANTLR end "file_option_value"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_where_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_where_clause() {}

	// $ANTLR start "where_clause"
	// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:149:1: where_clause : WHERE WS expression -> ^( T_WHERE expression ) ;
	[GrammarRule("where_clause")]
	private AstParserRuleReturnScope<object, IToken> where_clause()
	{
		EnterRule_where_clause();
		EnterRule("where_clause", 16);
		TraceIn("where_clause", 16);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WHERE71 = default(IToken);
	    IToken WS72 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression73 = default(AstParserRuleReturnScope<object, IToken>);

	    object WHERE71_tree = default(object);
	    object WS72_tree = default(object);
	    RewriteRuleITokenStream stream_WHERE=new RewriteRuleITokenStream(adaptor,"token WHERE");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "where_clause");
		DebugLocation(149, 1);
		try
		{
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:150:2: ( WHERE WS expression -> ^( T_WHERE expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:150:4: WHERE WS expression
			{
			DebugLocation(150, 4);
			WHERE71=(IToken)Match(input,WHERE,Follow._WHERE_in_where_clause779);  
			stream_WHERE.Add(WHERE71);

			DebugLocation(150, 10);
			WS72=(IToken)Match(input,WS,Follow._WS_in_where_clause781);  
			stream_WS.Add(WS72);

			DebugLocation(150, 13);
			PushFollow(Follow._expression_in_where_clause783);
			expression73=expression();
			PopFollow();

			stream_expression.Add(expression73.Tree);


			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 151:2: -> ^( T_WHERE expression )
			{
				DebugLocation(151, 5);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:151:5: ^( T_WHERE expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(151, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_WHERE, "T_WHERE"), root_1);

				DebugLocation(151, 15);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("where_clause", 16);
			LeaveRule("where_clause", 16);
			LeaveRule_where_clause();
	    }
	 	DebugLocation(152, 1);
		} finally { DebugExitRule(GrammarFileName, "where_clause"); }
		return retval;

	}
	// $ANTLR end "where_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_clause() {}

	// $ANTLR start "orderby_clause"
	// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:154:1: orderby_clause : ORDER WS BY WS orderby_column_list -> ^( T_ORDERBY orderby_column_list ) ;
	[GrammarRule("orderby_clause")]
	private AstParserRuleReturnScope<object, IToken> orderby_clause()
	{
		EnterRule_orderby_clause();
		EnterRule("orderby_clause", 17);
		TraceIn("orderby_clause", 17);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken ORDER74 = default(IToken);
	    IToken WS75 = default(IToken);
	    IToken BY76 = default(IToken);
	    IToken WS77 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> orderby_column_list78 = default(AstParserRuleReturnScope<object, IToken>);

	    object ORDER74_tree = default(object);
	    object WS75_tree = default(object);
	    object BY76_tree = default(object);
	    object WS77_tree = default(object);
	    RewriteRuleITokenStream stream_BY=new RewriteRuleITokenStream(adaptor,"token BY");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_ORDER=new RewriteRuleITokenStream(adaptor,"token ORDER");
	    RewriteRuleSubtreeStream stream_orderby_column_list=new RewriteRuleSubtreeStream(adaptor,"rule orderby_column_list");
		try { DebugEnterRule(GrammarFileName, "orderby_clause");
		DebugLocation(154, 1);
		try
		{
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:155:2: ( ORDER WS BY WS orderby_column_list -> ^( T_ORDERBY orderby_column_list ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:155:4: ORDER WS BY WS orderby_column_list
			{
			DebugLocation(155, 4);
			ORDER74=(IToken)Match(input,ORDER,Follow._ORDER_in_orderby_clause804);  
			stream_ORDER.Add(ORDER74);

			DebugLocation(155, 10);
			WS75=(IToken)Match(input,WS,Follow._WS_in_orderby_clause806);  
			stream_WS.Add(WS75);

			DebugLocation(155, 13);
			BY76=(IToken)Match(input,BY,Follow._BY_in_orderby_clause808);  
			stream_BY.Add(BY76);

			DebugLocation(155, 16);
			WS77=(IToken)Match(input,WS,Follow._WS_in_orderby_clause810);  
			stream_WS.Add(WS77);

			DebugLocation(155, 19);
			PushFollow(Follow._orderby_column_list_in_orderby_clause812);
			orderby_column_list78=orderby_column_list();
			PopFollow();

			stream_orderby_column_list.Add(orderby_column_list78.Tree);


			{
			// AST REWRITE
			// elements: orderby_column_list
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 156:2: -> ^( T_ORDERBY orderby_column_list )
			{
				DebugLocation(156, 5);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:156:5: ^( T_ORDERBY orderby_column_list )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(156, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_ORDERBY, "T_ORDERBY"), root_1);

				DebugLocation(156, 17);
				adaptor.AddChild(root_1, stream_orderby_column_list.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_clause", 17);
			LeaveRule("orderby_clause", 17);
			LeaveRule_orderby_clause();
	    }
	 	DebugLocation(157, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_clause"); }
		return retval;

	}
	// $ANTLR end "orderby_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_column_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_column_list() {}

	// $ANTLR start "orderby_column_list"
	// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:159:1: orderby_column_list : orderby_column ( ( WS )? ',' ( WS )? orderby_column )* -> ( orderby_column )* ;
	[GrammarRule("orderby_column_list")]
	private AstParserRuleReturnScope<object, IToken> orderby_column_list()
	{
		EnterRule_orderby_column_list();
		EnterRule("orderby_column_list", 18);
		TraceIn("orderby_column_list", 18);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS80 = default(IToken);
	    IToken char_literal81 = default(IToken);
	    IToken WS82 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> orderby_column79 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> orderby_column83 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS80_tree = default(object);
	    object char_literal81_tree = default(object);
	    object WS82_tree = default(object);
	    RewriteRuleITokenStream stream_121=new RewriteRuleITokenStream(adaptor,"token 121");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_orderby_column=new RewriteRuleSubtreeStream(adaptor,"rule orderby_column");
		try { DebugEnterRule(GrammarFileName, "orderby_column_list");
		DebugLocation(159, 1);
		try
		{
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:160:2: ( orderby_column ( ( WS )? ',' ( WS )? orderby_column )* -> ( orderby_column )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:160:4: orderby_column ( ( WS )? ',' ( WS )? orderby_column )*
			{
			DebugLocation(160, 4);
			PushFollow(Follow._orderby_column_in_orderby_column_list833);
			orderby_column79=orderby_column();
			PopFollow();

			stream_orderby_column.Add(orderby_column79.Tree);
			DebugLocation(160, 19);
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:160:19: ( ( WS )? ',' ( WS )? orderby_column )*
			try { DebugEnterSubRule(34);
			while (true)
			{
				int alt34=2;
				try { DebugEnterDecision(34, decisionCanBacktrack[34]);
				int LA34_0 = input.LA(1);

				if ((LA34_0==WS))
				{
					int LA34_1 = input.LA(2);

					if ((LA34_1==121))
					{
						alt34 = 1;
					}


				}
				else if ((LA34_0==121))
				{
					alt34 = 1;
				}


				} finally { DebugExitDecision(34); }
				switch ( alt34 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:160:20: ( WS )? ',' ( WS )? orderby_column
					{
					DebugLocation(160, 20);
					// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:160:20: ( WS )?
					int alt32=2;
					try { DebugEnterSubRule(32);
					try { DebugEnterDecision(32, decisionCanBacktrack[32]);
					int LA32_0 = input.LA(1);

					if ((LA32_0==WS))
					{
						alt32 = 1;
					}
					} finally { DebugExitDecision(32); }
					switch (alt32)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:160:20: WS
						{
						DebugLocation(160, 20);
						WS80=(IToken)Match(input,WS,Follow._WS_in_orderby_column_list836);  
						stream_WS.Add(WS80);


						}
						break;

					}
					} finally { DebugExitSubRule(32); }

					DebugLocation(160, 24);
					char_literal81=(IToken)Match(input,121,Follow._121_in_orderby_column_list839);  
					stream_121.Add(char_literal81);

					DebugLocation(160, 28);
					// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:160:28: ( WS )?
					int alt33=2;
					try { DebugEnterSubRule(33);
					try { DebugEnterDecision(33, decisionCanBacktrack[33]);
					int LA33_0 = input.LA(1);

					if ((LA33_0==WS))
					{
						alt33 = 1;
					}
					} finally { DebugExitDecision(33); }
					switch (alt33)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:160:28: WS
						{
						DebugLocation(160, 28);
						WS82=(IToken)Match(input,WS,Follow._WS_in_orderby_column_list841);  
						stream_WS.Add(WS82);


						}
						break;

					}
					} finally { DebugExitSubRule(33); }

					DebugLocation(160, 32);
					PushFollow(Follow._orderby_column_in_orderby_column_list844);
					orderby_column83=orderby_column();
					PopFollow();

					stream_orderby_column.Add(orderby_column83.Tree);

					}
					break;

				default:
					goto loop34;
				}
			}

			loop34:
				;

			} finally { DebugExitSubRule(34); }



			{
			// AST REWRITE
			// elements: orderby_column
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 161:2: -> ( orderby_column )*
			{
				DebugLocation(161, 5);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:161:5: ( orderby_column )*
				while ( stream_orderby_column.HasNext )
				{
					DebugLocation(161, 5);
					adaptor.AddChild(root_0, stream_orderby_column.NextTree());

				}
				stream_orderby_column.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_column_list", 18);
			LeaveRule("orderby_column_list", 18);
			LeaveRule_orderby_column_list();
	    }
	 	DebugLocation(162, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_column_list"); }
		return retval;

	}
	// $ANTLR end "orderby_column_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_column() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_column() {}

	// $ANTLR start "orderby_column"
	// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:164:1: orderby_column : expression ( WS orderby_direction )? -> ^( T_ORDERBY_COLUMN expression ( orderby_direction )? ) ;
	[GrammarRule("orderby_column")]
	private AstParserRuleReturnScope<object, IToken> orderby_column()
	{
		EnterRule_orderby_column();
		EnterRule("orderby_column", 19);
		TraceIn("orderby_column", 19);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS85 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression84 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> orderby_direction86 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS85_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_orderby_direction=new RewriteRuleSubtreeStream(adaptor,"rule orderby_direction");
		try { DebugEnterRule(GrammarFileName, "orderby_column");
		DebugLocation(164, 1);
		try
		{
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:165:2: ( expression ( WS orderby_direction )? -> ^( T_ORDERBY_COLUMN expression ( orderby_direction )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:165:4: expression ( WS orderby_direction )?
			{
			DebugLocation(165, 4);
			PushFollow(Follow._expression_in_orderby_column864);
			expression84=expression();
			PopFollow();

			stream_expression.Add(expression84.Tree);
			DebugLocation(165, 15);
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:165:15: ( WS orderby_direction )?
			int alt35=2;
			try { DebugEnterSubRule(35);
			try { DebugEnterDecision(35, decisionCanBacktrack[35]);
			int LA35_0 = input.LA(1);

			if ((LA35_0==WS))
			{
				int LA35_1 = input.LA(2);

				if ((LA35_1==ASC||LA35_1==DESC))
				{
					alt35 = 1;
				}
			}
			} finally { DebugExitDecision(35); }
			switch (alt35)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:165:16: WS orderby_direction
				{
				DebugLocation(165, 16);
				WS85=(IToken)Match(input,WS,Follow._WS_in_orderby_column867);  
				stream_WS.Add(WS85);

				DebugLocation(165, 19);
				PushFollow(Follow._orderby_direction_in_orderby_column869);
				orderby_direction86=orderby_direction();
				PopFollow();

				stream_orderby_direction.Add(orderby_direction86.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(35); }



			{
			// AST REWRITE
			// elements: expression, orderby_direction
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 165:39: -> ^( T_ORDERBY_COLUMN expression ( orderby_direction )? )
			{
				DebugLocation(165, 42);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:165:42: ^( T_ORDERBY_COLUMN expression ( orderby_direction )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(165, 44);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_ORDERBY_COLUMN, "T_ORDERBY_COLUMN"), root_1);

				DebugLocation(165, 61);
				adaptor.AddChild(root_1, stream_expression.NextTree());
				DebugLocation(165, 72);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:165:72: ( orderby_direction )?
				if (stream_orderby_direction.HasNext)
				{
					DebugLocation(165, 72);
					adaptor.AddChild(root_1, stream_orderby_direction.NextTree());

				}
				stream_orderby_direction.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_column", 19);
			LeaveRule("orderby_column", 19);
			LeaveRule_orderby_column();
	    }
	 	DebugLocation(166, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_column"); }
		return retval;

	}
	// $ANTLR end "orderby_column"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_direction() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_direction() {}

	// $ANTLR start "orderby_direction"
	// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:168:1: orderby_direction : ( ASC -> T_ORDERBY_ASC | DESC -> T_ORDERBY_DESC );
	[GrammarRule("orderby_direction")]
	private AstParserRuleReturnScope<object, IToken> orderby_direction()
	{
		EnterRule_orderby_direction();
		EnterRule("orderby_direction", 20);
		TraceIn("orderby_direction", 20);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken ASC87 = default(IToken);
	    IToken DESC88 = default(IToken);

	    object ASC87_tree = default(object);
	    object DESC88_tree = default(object);
	    RewriteRuleITokenStream stream_DESC=new RewriteRuleITokenStream(adaptor,"token DESC");
	    RewriteRuleITokenStream stream_ASC=new RewriteRuleITokenStream(adaptor,"token ASC");

		try { DebugEnterRule(GrammarFileName, "orderby_direction");
		DebugLocation(168, 1);
		try
		{
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:169:2: ( ASC -> T_ORDERBY_ASC | DESC -> T_ORDERBY_DESC )
			int alt36=2;
			try { DebugEnterDecision(36, decisionCanBacktrack[36]);
			int LA36_0 = input.LA(1);

			if ((LA36_0==ASC))
			{
				alt36 = 1;
			}
			else if ((LA36_0==DESC))
			{
				alt36 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 36, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:169:4: ASC
				{
				DebugLocation(169, 4);
				ASC87=(IToken)Match(input,ASC,Follow._ASC_in_orderby_direction894);  
				stream_ASC.Add(ASC87);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 169:8: -> T_ORDERBY_ASC
				{
					DebugLocation(169, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_ORDERBY_ASC, "T_ORDERBY_ASC"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:170:4: DESC
				{
				DebugLocation(170, 4);
				DESC88=(IToken)Match(input,DESC,Follow._DESC_in_orderby_direction903);  
				stream_DESC.Add(DESC88);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 170:9: -> T_ORDERBY_DESC
				{
					DebugLocation(170, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_ORDERBY_DESC, "T_ORDERBY_DESC"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_direction", 20);
			LeaveRule("orderby_direction", 20);
			LeaveRule_orderby_direction();
	    }
	 	DebugLocation(171, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_direction"); }
		return retval;

	}
	// $ANTLR end "orderby_direction"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_list() {}

	// $ANTLR start "expression_list"
	// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:176:1: expression_list : expression ( ( WS )? ',' ( WS )? expression )+ -> ^( T_EXPRESSIONLIST ( expression )* ) ;
	[GrammarRule("expression_list")]
	private AstParserRuleReturnScope<object, IToken> expression_list()
	{
		EnterRule_expression_list();
		EnterRule("expression_list", 21);
		TraceIn("expression_list", 21);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS90 = default(IToken);
	    IToken char_literal91 = default(IToken);
	    IToken WS92 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression89 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression93 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS90_tree = default(object);
	    object char_literal91_tree = default(object);
	    object WS92_tree = default(object);
	    RewriteRuleITokenStream stream_121=new RewriteRuleITokenStream(adaptor,"token 121");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "expression_list");
		DebugLocation(176, 1);
		try
		{
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:177:2: ( expression ( ( WS )? ',' ( WS )? expression )+ -> ^( T_EXPRESSIONLIST ( expression )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:177:4: expression ( ( WS )? ',' ( WS )? expression )+
			{
			DebugLocation(177, 4);
			PushFollow(Follow._expression_in_expression_list921);
			expression89=expression();
			PopFollow();

			stream_expression.Add(expression89.Tree);
			DebugLocation(177, 15);
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:177:15: ( ( WS )? ',' ( WS )? expression )+
			int cnt39=0;
			try { DebugEnterSubRule(39);
			while (true)
			{
				int alt39=2;
				try { DebugEnterDecision(39, decisionCanBacktrack[39]);
				int LA39_0 = input.LA(1);

				if ((LA39_0==WS))
				{
					int LA39_1 = input.LA(2);

					if ((LA39_1==121))
					{
						alt39 = 1;
					}


				}
				else if ((LA39_0==121))
				{
					alt39 = 1;
				}


				} finally { DebugExitDecision(39); }
				switch (alt39)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:177:16: ( WS )? ',' ( WS )? expression
					{
					DebugLocation(177, 16);
					// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:177:16: ( WS )?
					int alt37=2;
					try { DebugEnterSubRule(37);
					try { DebugEnterDecision(37, decisionCanBacktrack[37]);
					int LA37_0 = input.LA(1);

					if ((LA37_0==WS))
					{
						alt37 = 1;
					}
					} finally { DebugExitDecision(37); }
					switch (alt37)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:177:16: WS
						{
						DebugLocation(177, 16);
						WS90=(IToken)Match(input,WS,Follow._WS_in_expression_list924);  
						stream_WS.Add(WS90);


						}
						break;

					}
					} finally { DebugExitSubRule(37); }

					DebugLocation(177, 20);
					char_literal91=(IToken)Match(input,121,Follow._121_in_expression_list927);  
					stream_121.Add(char_literal91);

					DebugLocation(177, 24);
					// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:177:24: ( WS )?
					int alt38=2;
					try { DebugEnterSubRule(38);
					try { DebugEnterDecision(38, decisionCanBacktrack[38]);
					int LA38_0 = input.LA(1);

					if ((LA38_0==WS))
					{
						alt38 = 1;
					}
					} finally { DebugExitDecision(38); }
					switch (alt38)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:177:24: WS
						{
						DebugLocation(177, 24);
						WS92=(IToken)Match(input,WS,Follow._WS_in_expression_list929);  
						stream_WS.Add(WS92);


						}
						break;

					}
					} finally { DebugExitSubRule(38); }

					DebugLocation(177, 28);
					PushFollow(Follow._expression_in_expression_list932);
					expression93=expression();
					PopFollow();

					stream_expression.Add(expression93.Tree);

					}
					break;

				default:
					if (cnt39 >= 1)
						goto loop39;

					EarlyExitException eee39 = new EarlyExitException( 39, input );
					DebugRecognitionException(eee39);
					throw eee39;
				}
				cnt39++;
			}
			loop39:
				;

			} finally { DebugExitSubRule(39); }



			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 177:41: -> ^( T_EXPRESSIONLIST ( expression )* )
			{
				DebugLocation(177, 44);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:177:44: ^( T_EXPRESSIONLIST ( expression )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(177, 46);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_EXPRESSIONLIST, "T_EXPRESSIONLIST"), root_1);

				DebugLocation(177, 63);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:177:63: ( expression )*
				while ( stream_expression.HasNext )
				{
					DebugLocation(177, 63);
					adaptor.AddChild(root_1, stream_expression.NextTree());

				}
				stream_expression.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_list", 21);
			LeaveRule("expression_list", 21);
			LeaveRule_expression_list();
	    }
	 	DebugLocation(178, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_list"); }
		return retval;

	}
	// $ANTLR end "expression_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_list_or_select_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_list_or_select_command() {}

	// $ANTLR start "expression_list_or_select_command"
	// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:180:1: expression_list_or_select_command : ( expression_list | select_command );
	[GrammarRule("expression_list_or_select_command")]
	private AstParserRuleReturnScope<object, IToken> expression_list_or_select_command()
	{
		EnterRule_expression_list_or_select_command();
		EnterRule("expression_list_or_select_command", 22);
		TraceIn("expression_list_or_select_command", 22);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> expression_list94 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> select_command95 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "expression_list_or_select_command");
		DebugLocation(180, 1);
		try
		{
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:181:2: ( expression_list | select_command )
			int alt40=2;
			try { DebugEnterDecision(40, decisionCanBacktrack[40]);
			int LA40_0 = input.LA(1);

			if ((LA40_0==CAST||LA40_0==CONVERT||(LA40_0>=NOT && LA40_0<=NUMBER)||(LA40_0>=STRING && LA40_0<=SYSTEMVAR)||LA40_0==TOKEN||LA40_0==117))
			{
				alt40 = 1;
			}
			else if ((LA40_0==SELECT))
			{
				alt40 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 40, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(40); }
			switch (alt40)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:181:4: expression_list
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(181, 4);
				PushFollow(Follow._expression_list_in_expression_list_or_select_command955);
				expression_list94=expression_list();
				PopFollow();

				adaptor.AddChild(root_0, expression_list94.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:181:22: select_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(181, 22);
				PushFollow(Follow._select_command_in_expression_list_or_select_command959);
				select_command95=select_command();
				PopFollow();

				adaptor.AddChild(root_0, select_command95.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_list_or_select_command", 22);
			LeaveRule("expression_list_or_select_command", 22);
			LeaveRule_expression_list_or_select_command();
	    }
	 	DebugLocation(182, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_list_or_select_command"); }
		return retval;

	}
	// $ANTLR end "expression_list_or_select_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression() {}

	// $ANTLR start "expression"
	// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:184:1: expression : expression_7 ;
	[GrammarRule("expression")]
	private AstParserRuleReturnScope<object, IToken> expression()
	{
		EnterRule_expression();
		EnterRule("expression", 23);
		TraceIn("expression", 23);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> expression_796 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(184, 1);
		try
		{
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:185:2: ( expression_7 )
			DebugEnterAlt(1);
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:185:4: expression_7
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(185, 4);
			PushFollow(Follow._expression_7_in_expression971);
			expression_796=expression_7();
			PopFollow();

			adaptor.AddChild(root_0, expression_796.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression", 23);
			LeaveRule("expression", 23);
			LeaveRule_expression();
	    }
	 	DebugLocation(186, 1);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return retval;

	}
	// $ANTLR end "expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_7() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_7() {}

	// $ANTLR start "expression_7"
	// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:188:1: expression_7 : (a= expression_6 -> $a) ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' select_command ')' -> ^( T_OP_BINARY T_ANY $expression_7 select_command ) | op_4 ( WS )? ALL ( WS )? '(' select_command ')' -> ^( T_OP_BINARY T_ALL $expression_7 select_command ) ) )* ;
	[GrammarRule("expression_7")]
	private AstParserRuleReturnScope<object, IToken> expression_7()
	{
		EnterRule_expression_7();
		EnterRule("expression_7", 24);
		TraceIn("expression_7", 24);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS97 = default(IToken);
	    IToken WS99 = default(IToken);
	    IToken IN100 = default(IToken);
	    IToken WS101 = default(IToken);
	    IToken char_literal102 = default(IToken);
	    IToken WS103 = default(IToken);
	    IToken WS105 = default(IToken);
	    IToken char_literal106 = default(IToken);
	    IToken NOT107 = default(IToken);
	    IToken WS108 = default(IToken);
	    IToken IN109 = default(IToken);
	    IToken WS110 = default(IToken);
	    IToken char_literal111 = default(IToken);
	    IToken WS112 = default(IToken);
	    IToken WS114 = default(IToken);
	    IToken char_literal115 = default(IToken);
	    IToken WS117 = default(IToken);
	    IToken SOME118 = default(IToken);
	    IToken ANY119 = default(IToken);
	    IToken WS120 = default(IToken);
	    IToken char_literal121 = default(IToken);
	    IToken char_literal123 = default(IToken);
	    IToken WS125 = default(IToken);
	    IToken ALL126 = default(IToken);
	    IToken WS127 = default(IToken);
	    IToken char_literal128 = default(IToken);
	    IToken char_literal130 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_798 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command104 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command113 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_4116 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> select_command122 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_4124 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> select_command129 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS97_tree = default(object);
	    object WS99_tree = default(object);
	    object IN100_tree = default(object);
	    object WS101_tree = default(object);
	    object char_literal102_tree = default(object);
	    object WS103_tree = default(object);
	    object WS105_tree = default(object);
	    object char_literal106_tree = default(object);
	    object NOT107_tree = default(object);
	    object WS108_tree = default(object);
	    object IN109_tree = default(object);
	    object WS110_tree = default(object);
	    object char_literal111_tree = default(object);
	    object WS112_tree = default(object);
	    object WS114_tree = default(object);
	    object char_literal115_tree = default(object);
	    object WS117_tree = default(object);
	    object SOME118_tree = default(object);
	    object ANY119_tree = default(object);
	    object WS120_tree = default(object);
	    object char_literal121_tree = default(object);
	    object char_literal123_tree = default(object);
	    object WS125_tree = default(object);
	    object ALL126_tree = default(object);
	    object WS127_tree = default(object);
	    object char_literal128_tree = default(object);
	    object char_literal130_tree = default(object);
	    RewriteRuleITokenStream stream_117=new RewriteRuleITokenStream(adaptor,"token 117");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_ANY=new RewriteRuleITokenStream(adaptor,"token ANY");
	    RewriteRuleITokenStream stream_IN=new RewriteRuleITokenStream(adaptor,"token IN");
	    RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");
	    RewriteRuleITokenStream stream_SOME=new RewriteRuleITokenStream(adaptor,"token SOME");
	    RewriteRuleITokenStream stream_ALL=new RewriteRuleITokenStream(adaptor,"token ALL");
	    RewriteRuleITokenStream stream_118=new RewriteRuleITokenStream(adaptor,"token 118");
	    RewriteRuleSubtreeStream stream_select_command=new RewriteRuleSubtreeStream(adaptor,"rule select_command");
	    RewriteRuleSubtreeStream stream_op_7=new RewriteRuleSubtreeStream(adaptor,"rule op_7");
	    RewriteRuleSubtreeStream stream_expression_6=new RewriteRuleSubtreeStream(adaptor,"rule expression_6");
	    RewriteRuleSubtreeStream stream_expression_list_or_select_command=new RewriteRuleSubtreeStream(adaptor,"rule expression_list_or_select_command");
	    RewriteRuleSubtreeStream stream_op_4=new RewriteRuleSubtreeStream(adaptor,"rule op_4");
		try { DebugEnterRule(GrammarFileName, "expression_7");
		DebugLocation(188, 1);
		try
		{
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:189:2: ( (a= expression_6 -> $a) ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' select_command ')' -> ^( T_OP_BINARY T_ANY $expression_7 select_command ) | op_4 ( WS )? ALL ( WS )? '(' select_command ')' -> ^( T_OP_BINARY T_ALL $expression_7 select_command ) ) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:189:4: (a= expression_6 -> $a) ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' select_command ')' -> ^( T_OP_BINARY T_ANY $expression_7 select_command ) | op_4 ( WS )? ALL ( WS )? '(' select_command ')' -> ^( T_OP_BINARY T_ALL $expression_7 select_command ) ) )*
			{
			DebugLocation(189, 4);
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:189:4: (a= expression_6 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:189:5: a= expression_6
			{
			DebugLocation(189, 6);
			PushFollow(Follow._expression_6_in_expression_7987);
			a=expression_6();
			PopFollow();

			stream_expression_6.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 189:19: -> $a
			{
				DebugLocation(189, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(189, 25);
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:189:25: ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' select_command ')' -> ^( T_OP_BINARY T_ANY $expression_7 select_command ) | op_4 ( WS )? ALL ( WS )? '(' select_command ')' -> ^( T_OP_BINARY T_ALL $expression_7 select_command ) ) )*
			try { DebugEnterSubRule(53);
			while (true)
			{
				int alt53=2;
				try { DebugEnterDecision(53, decisionCanBacktrack[53]);
				int LA53_0 = input.LA(1);

				if ((LA53_0==WS))
				{
					int LA53_1 = input.LA(2);

					if ((LA53_1==NOT))
					{
						int LA53_3 = input.LA(3);

						if ((LA53_3==WS))
						{
							int LA53_5 = input.LA(4);

							if ((LA53_5==BETWEEN||LA53_5==IN||LA53_5==LIKE||LA53_5==MATCH))
							{
								alt53 = 1;
							}


						}


					}
					else if ((LA53_1==BETWEEN||LA53_1==IN||LA53_1==LIKE||LA53_1==MATCH||LA53_1==OR||(LA53_1>=112 && LA53_1<=114)||(LA53_1>=125 && LA53_1<=130)))
					{
						alt53 = 1;
					}


				}


				} finally { DebugExitDecision(53); }
				switch ( alt53 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:189:26: WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' select_command ')' -> ^( T_OP_BINARY T_ANY $expression_7 select_command ) | op_4 ( WS )? ALL ( WS )? '(' select_command ')' -> ^( T_OP_BINARY T_ALL $expression_7 select_command ) )
					{
					DebugLocation(189, 26);
					WS97=(IToken)Match(input,WS,Follow._WS_in_expression_7994);  
					stream_WS.Add(WS97);

					DebugLocation(189, 29);
					// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:189:29: ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' select_command ')' -> ^( T_OP_BINARY T_ANY $expression_7 select_command ) | op_4 ( WS )? ALL ( WS )? '(' select_command ')' -> ^( T_OP_BINARY T_ALL $expression_7 select_command ) )
					int alt52=5;
					try { DebugEnterSubRule(52);
					try { DebugEnterDecision(52, decisionCanBacktrack[52]);
					switch (input.LA(1))
					{
					case BETWEEN:
					case LIKE:
					case MATCH:
					case OR:
						{
						alt52 = 1;
						}
						break;
					case NOT:
						{
						int LA52_2 = input.LA(2);

						if ((LA52_2==WS))
						{
							int LA52_13 = input.LA(3);

							if ((LA52_13==BETWEEN||LA52_13==LIKE||LA52_13==MATCH))
							{
								alt52 = 1;
							}
							else if ((LA52_13==IN))
							{
								alt52 = 3;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 52, 13, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 52, 2, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case IN:
						{
						alt52 = 2;
						}
						break;
					case 128:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA52_14 = input.LA(3);

							if ((LA52_14==ANY||LA52_14==SOME))
							{
								alt52 = 4;
							}
							else if ((LA52_14==ALL))
							{
								alt52 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 52, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt52 = 4;
							}
							break;
						case ALL:
							{
							alt52 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 52, 4, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 130:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA52_14 = input.LA(3);

							if ((LA52_14==ANY||LA52_14==SOME))
							{
								alt52 = 4;
							}
							else if ((LA52_14==ALL))
							{
								alt52 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 52, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt52 = 4;
							}
							break;
						case ALL:
							{
							alt52 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 52, 5, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 126:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA52_14 = input.LA(3);

							if ((LA52_14==ANY||LA52_14==SOME))
							{
								alt52 = 4;
							}
							else if ((LA52_14==ALL))
							{
								alt52 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 52, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt52 = 4;
							}
							break;
						case ALL:
							{
							alt52 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 52, 6, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 127:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA52_14 = input.LA(3);

							if ((LA52_14==ANY||LA52_14==SOME))
							{
								alt52 = 4;
							}
							else if ((LA52_14==ALL))
							{
								alt52 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 52, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt52 = 4;
							}
							break;
						case ALL:
							{
							alt52 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 52, 7, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 113:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA52_14 = input.LA(3);

							if ((LA52_14==ANY||LA52_14==SOME))
							{
								alt52 = 4;
							}
							else if ((LA52_14==ALL))
							{
								alt52 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 52, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt52 = 4;
							}
							break;
						case ALL:
							{
							alt52 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 52, 8, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 114:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA52_14 = input.LA(3);

							if ((LA52_14==ANY||LA52_14==SOME))
							{
								alt52 = 4;
							}
							else if ((LA52_14==ALL))
							{
								alt52 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 52, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt52 = 4;
							}
							break;
						case ALL:
							{
							alt52 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 52, 9, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 112:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA52_14 = input.LA(3);

							if ((LA52_14==ANY||LA52_14==SOME))
							{
								alt52 = 4;
							}
							else if ((LA52_14==ALL))
							{
								alt52 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 52, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt52 = 4;
							}
							break;
						case ALL:
							{
							alt52 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 52, 10, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 129:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA52_14 = input.LA(3);

							if ((LA52_14==ANY||LA52_14==SOME))
							{
								alt52 = 4;
							}
							else if ((LA52_14==ALL))
							{
								alt52 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 52, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt52 = 4;
							}
							break;
						case ALL:
							{
							alt52 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 52, 11, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 125:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA52_14 = input.LA(3);

							if ((LA52_14==ANY||LA52_14==SOME))
							{
								alt52 = 4;
							}
							else if ((LA52_14==ALL))
							{
								alt52 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 52, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt52 = 4;
							}
							break;
						case ALL:
							{
							alt52 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 52, 12, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 52, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(52); }
					switch (alt52)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:190:2: op_7 WS b= expression_6
						{
						DebugLocation(190, 2);
						PushFollow(Follow._op_7_in_expression_7999);
						op_798=op_7();
						PopFollow();

						stream_op_7.Add(op_798.Tree);
						DebugLocation(190, 7);
						WS99=(IToken)Match(input,WS,Follow._WS_in_expression_71001);  
						stream_WS.Add(WS99);

						DebugLocation(190, 11);
						PushFollow(Follow._expression_6_in_expression_71005);
						b=expression_6();
						PopFollow();

						stream_expression_6.Add(b.Tree);


						{
						// AST REWRITE
						// elements: op_7, b, expression_7
						// token labels: 
						// rule labels: retval, b
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 190:25: -> ^( T_OP_BINARY op_7 $expression_7 $b)
						{
							DebugLocation(190, 28);
							// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:190:28: ^( T_OP_BINARY op_7 $expression_7 $b)
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(190, 30);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(190, 42);
							adaptor.AddChild(root_1, stream_op_7.NextTree());
							DebugLocation(190, 48);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(190, 62);
							adaptor.AddChild(root_1, stream_b.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:191:4: IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')'
						{
						DebugLocation(191, 4);
						IN100=(IToken)Match(input,IN,Follow._IN_in_expression_71024);  
						stream_IN.Add(IN100);

						DebugLocation(191, 7);
						// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:191:7: ( WS )?
						int alt41=2;
						try { DebugEnterSubRule(41);
						try { DebugEnterDecision(41, decisionCanBacktrack[41]);
						int LA41_0 = input.LA(1);

						if ((LA41_0==WS))
						{
							alt41 = 1;
						}
						} finally { DebugExitDecision(41); }
						switch (alt41)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:191:7: WS
							{
							DebugLocation(191, 7);
							WS101=(IToken)Match(input,WS,Follow._WS_in_expression_71026);  
							stream_WS.Add(WS101);


							}
							break;

						}
						} finally { DebugExitSubRule(41); }

						DebugLocation(191, 11);
						char_literal102=(IToken)Match(input,117,Follow._117_in_expression_71029);  
						stream_117.Add(char_literal102);

						DebugLocation(191, 15);
						// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:191:15: ( WS )?
						int alt42=2;
						try { DebugEnterSubRule(42);
						try { DebugEnterDecision(42, decisionCanBacktrack[42]);
						int LA42_0 = input.LA(1);

						if ((LA42_0==WS))
						{
							alt42 = 1;
						}
						} finally { DebugExitDecision(42); }
						switch (alt42)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:191:15: WS
							{
							DebugLocation(191, 15);
							WS103=(IToken)Match(input,WS,Follow._WS_in_expression_71031);  
							stream_WS.Add(WS103);


							}
							break;

						}
						} finally { DebugExitSubRule(42); }

						DebugLocation(191, 19);
						PushFollow(Follow._expression_list_or_select_command_in_expression_71034);
						expression_list_or_select_command104=expression_list_or_select_command();
						PopFollow();

						stream_expression_list_or_select_command.Add(expression_list_or_select_command104.Tree);
						DebugLocation(191, 53);
						// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:191:53: ( WS )?
						int alt43=2;
						try { DebugEnterSubRule(43);
						try { DebugEnterDecision(43, decisionCanBacktrack[43]);
						int LA43_0 = input.LA(1);

						if ((LA43_0==WS))
						{
							alt43 = 1;
						}
						} finally { DebugExitDecision(43); }
						switch (alt43)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:191:53: WS
							{
							DebugLocation(191, 53);
							WS105=(IToken)Match(input,WS,Follow._WS_in_expression_71036);  
							stream_WS.Add(WS105);


							}
							break;

						}
						} finally { DebugExitSubRule(43); }

						DebugLocation(191, 57);
						char_literal106=(IToken)Match(input,118,Follow._118_in_expression_71039);  
						stream_118.Add(char_literal106);



						{
						// AST REWRITE
						// elements: expression_list_or_select_command, expression_7
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 191:61: -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command )
						{
							DebugLocation(191, 64);
							// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:191:64: ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(191, 66);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(191, 78);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_IN, "T_IN"));
							DebugLocation(191, 84);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(191, 97);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:192:4: NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')'
						{
						DebugLocation(192, 4);
						NOT107=(IToken)Match(input,NOT,Follow._NOT_in_expression_71057);  
						stream_NOT.Add(NOT107);

						DebugLocation(192, 8);
						WS108=(IToken)Match(input,WS,Follow._WS_in_expression_71059);  
						stream_WS.Add(WS108);

						DebugLocation(192, 11);
						IN109=(IToken)Match(input,IN,Follow._IN_in_expression_71061);  
						stream_IN.Add(IN109);

						DebugLocation(192, 14);
						// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:192:14: ( WS )?
						int alt44=2;
						try { DebugEnterSubRule(44);
						try { DebugEnterDecision(44, decisionCanBacktrack[44]);
						int LA44_0 = input.LA(1);

						if ((LA44_0==WS))
						{
							alt44 = 1;
						}
						} finally { DebugExitDecision(44); }
						switch (alt44)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:192:14: WS
							{
							DebugLocation(192, 14);
							WS110=(IToken)Match(input,WS,Follow._WS_in_expression_71063);  
							stream_WS.Add(WS110);


							}
							break;

						}
						} finally { DebugExitSubRule(44); }

						DebugLocation(192, 18);
						char_literal111=(IToken)Match(input,117,Follow._117_in_expression_71066);  
						stream_117.Add(char_literal111);

						DebugLocation(192, 22);
						// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:192:22: ( WS )?
						int alt45=2;
						try { DebugEnterSubRule(45);
						try { DebugEnterDecision(45, decisionCanBacktrack[45]);
						int LA45_0 = input.LA(1);

						if ((LA45_0==WS))
						{
							alt45 = 1;
						}
						} finally { DebugExitDecision(45); }
						switch (alt45)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:192:22: WS
							{
							DebugLocation(192, 22);
							WS112=(IToken)Match(input,WS,Follow._WS_in_expression_71068);  
							stream_WS.Add(WS112);


							}
							break;

						}
						} finally { DebugExitSubRule(45); }

						DebugLocation(192, 26);
						// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:192:26: ( expression_list_or_select_command )
						DebugEnterAlt(1);
						// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:192:27: expression_list_or_select_command
						{
						DebugLocation(192, 27);
						PushFollow(Follow._expression_list_or_select_command_in_expression_71072);
						expression_list_or_select_command113=expression_list_or_select_command();
						PopFollow();

						stream_expression_list_or_select_command.Add(expression_list_or_select_command113.Tree);

						}

						DebugLocation(192, 62);
						// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:192:62: ( WS )?
						int alt46=2;
						try { DebugEnterSubRule(46);
						try { DebugEnterDecision(46, decisionCanBacktrack[46]);
						int LA46_0 = input.LA(1);

						if ((LA46_0==WS))
						{
							alt46 = 1;
						}
						} finally { DebugExitDecision(46); }
						switch (alt46)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:192:62: WS
							{
							DebugLocation(192, 62);
							WS114=(IToken)Match(input,WS,Follow._WS_in_expression_71075);  
							stream_WS.Add(WS114);


							}
							break;

						}
						} finally { DebugExitSubRule(46); }

						DebugLocation(192, 66);
						char_literal115=(IToken)Match(input,118,Follow._118_in_expression_71078);  
						stream_118.Add(char_literal115);



						{
						// AST REWRITE
						// elements: expression_list_or_select_command, expression_7
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 192:70: -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command )
						{
							DebugLocation(192, 73);
							// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:192:73: ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(192, 75);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(192, 87);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_NOTIN, "T_NOTIN"));
							DebugLocation(192, 96);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(192, 109);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 4:
						DebugEnterAlt(4);
						// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:193:4: op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' select_command ')'
						{
						DebugLocation(193, 4);
						PushFollow(Follow._op_4_in_expression_71096);
						op_4116=op_4();
						PopFollow();

						stream_op_4.Add(op_4116.Tree);
						DebugLocation(193, 9);
						// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:193:9: ( WS )?
						int alt47=2;
						try { DebugEnterSubRule(47);
						try { DebugEnterDecision(47, decisionCanBacktrack[47]);
						int LA47_0 = input.LA(1);

						if ((LA47_0==WS))
						{
							alt47 = 1;
						}
						} finally { DebugExitDecision(47); }
						switch (alt47)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:193:9: WS
							{
							DebugLocation(193, 9);
							WS117=(IToken)Match(input,WS,Follow._WS_in_expression_71098);  
							stream_WS.Add(WS117);


							}
							break;

						}
						} finally { DebugExitSubRule(47); }

						DebugLocation(193, 13);
						// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:193:13: ( SOME | ANY )
						int alt48=2;
						try { DebugEnterSubRule(48);
						try { DebugEnterDecision(48, decisionCanBacktrack[48]);
						int LA48_0 = input.LA(1);

						if ((LA48_0==SOME))
						{
							alt48 = 1;
						}
						else if ((LA48_0==ANY))
						{
							alt48 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 48, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						} finally { DebugExitDecision(48); }
						switch (alt48)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:193:14: SOME
							{
							DebugLocation(193, 14);
							SOME118=(IToken)Match(input,SOME,Follow._SOME_in_expression_71102);  
							stream_SOME.Add(SOME118);


							}
							break;
						case 2:
							DebugEnterAlt(2);
							// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:193:21: ANY
							{
							DebugLocation(193, 21);
							ANY119=(IToken)Match(input,ANY,Follow._ANY_in_expression_71106);  
							stream_ANY.Add(ANY119);


							}
							break;

						}
						} finally { DebugExitSubRule(48); }

						DebugLocation(193, 26);
						// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:193:26: ( WS )?
						int alt49=2;
						try { DebugEnterSubRule(49);
						try { DebugEnterDecision(49, decisionCanBacktrack[49]);
						int LA49_0 = input.LA(1);

						if ((LA49_0==WS))
						{
							alt49 = 1;
						}
						} finally { DebugExitDecision(49); }
						switch (alt49)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:193:26: WS
							{
							DebugLocation(193, 26);
							WS120=(IToken)Match(input,WS,Follow._WS_in_expression_71109);  
							stream_WS.Add(WS120);


							}
							break;

						}
						} finally { DebugExitSubRule(49); }

						DebugLocation(193, 30);
						char_literal121=(IToken)Match(input,117,Follow._117_in_expression_71112);  
						stream_117.Add(char_literal121);

						DebugLocation(193, 34);
						PushFollow(Follow._select_command_in_expression_71114);
						select_command122=select_command();
						PopFollow();

						stream_select_command.Add(select_command122.Tree);
						DebugLocation(193, 49);
						char_literal123=(IToken)Match(input,118,Follow._118_in_expression_71116);  
						stream_118.Add(char_literal123);



						{
						// AST REWRITE
						// elements: expression_7, select_command
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 193:53: -> ^( T_OP_BINARY T_ANY $expression_7 select_command )
						{
							DebugLocation(193, 56);
							// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:193:56: ^( T_OP_BINARY T_ANY $expression_7 select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(193, 58);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(193, 70);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_ANY, "T_ANY"));
							DebugLocation(193, 77);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(193, 90);
							adaptor.AddChild(root_1, stream_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 5:
						DebugEnterAlt(5);
						// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:194:4: op_4 ( WS )? ALL ( WS )? '(' select_command ')'
						{
						DebugLocation(194, 4);
						PushFollow(Follow._op_4_in_expression_71134);
						op_4124=op_4();
						PopFollow();

						stream_op_4.Add(op_4124.Tree);
						DebugLocation(194, 9);
						// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:194:9: ( WS )?
						int alt50=2;
						try { DebugEnterSubRule(50);
						try { DebugEnterDecision(50, decisionCanBacktrack[50]);
						int LA50_0 = input.LA(1);

						if ((LA50_0==WS))
						{
							alt50 = 1;
						}
						} finally { DebugExitDecision(50); }
						switch (alt50)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:194:9: WS
							{
							DebugLocation(194, 9);
							WS125=(IToken)Match(input,WS,Follow._WS_in_expression_71136);  
							stream_WS.Add(WS125);


							}
							break;

						}
						} finally { DebugExitSubRule(50); }

						DebugLocation(194, 13);
						ALL126=(IToken)Match(input,ALL,Follow._ALL_in_expression_71139);  
						stream_ALL.Add(ALL126);

						DebugLocation(194, 17);
						// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:194:17: ( WS )?
						int alt51=2;
						try { DebugEnterSubRule(51);
						try { DebugEnterDecision(51, decisionCanBacktrack[51]);
						int LA51_0 = input.LA(1);

						if ((LA51_0==WS))
						{
							alt51 = 1;
						}
						} finally { DebugExitDecision(51); }
						switch (alt51)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:194:17: WS
							{
							DebugLocation(194, 17);
							WS127=(IToken)Match(input,WS,Follow._WS_in_expression_71141);  
							stream_WS.Add(WS127);


							}
							break;

						}
						} finally { DebugExitSubRule(51); }

						DebugLocation(194, 21);
						char_literal128=(IToken)Match(input,117,Follow._117_in_expression_71144);  
						stream_117.Add(char_literal128);

						DebugLocation(194, 25);
						PushFollow(Follow._select_command_in_expression_71146);
						select_command129=select_command();
						PopFollow();

						stream_select_command.Add(select_command129.Tree);
						DebugLocation(194, 40);
						char_literal130=(IToken)Match(input,118,Follow._118_in_expression_71148);  
						stream_118.Add(char_literal130);



						{
						// AST REWRITE
						// elements: expression_7, select_command
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 194:44: -> ^( T_OP_BINARY T_ALL $expression_7 select_command )
						{
							DebugLocation(194, 47);
							// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:194:47: ^( T_OP_BINARY T_ALL $expression_7 select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(194, 49);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(194, 61);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_ALL, "T_ALL"));
							DebugLocation(194, 68);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(194, 81);
							adaptor.AddChild(root_1, stream_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					}
					} finally { DebugExitSubRule(52); }


					}
					break;

				default:
					goto loop53;
				}
			}

			loop53:
				;

			} finally { DebugExitSubRule(53); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_7", 24);
			LeaveRule("expression_7", 24);
			LeaveRule_expression_7();
	    }
	 	DebugLocation(196, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_7"); }
		return retval;

	}
	// $ANTLR end "expression_7"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_7() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_7() {}

	// $ANTLR start "op_7"
	// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:198:1: op_7 : ( OR -> T_OR | LIKE -> T_LIKE | NOT WS LIKE -> T_NOTLIKE | MATCH -> T_MATCH | NOT WS MATCH -> T_NOTMATCH | BETWEEN -> T_BETWEEN | NOT WS BETWEEN -> T_NOTBETWEEN );
	[GrammarRule("op_7")]
	private AstParserRuleReturnScope<object, IToken> op_7()
	{
		EnterRule_op_7();
		EnterRule("op_7", 25);
		TraceIn("op_7", 25);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken OR131 = default(IToken);
	    IToken LIKE132 = default(IToken);
	    IToken NOT133 = default(IToken);
	    IToken WS134 = default(IToken);
	    IToken LIKE135 = default(IToken);
	    IToken MATCH136 = default(IToken);
	    IToken NOT137 = default(IToken);
	    IToken WS138 = default(IToken);
	    IToken MATCH139 = default(IToken);
	    IToken BETWEEN140 = default(IToken);
	    IToken NOT141 = default(IToken);
	    IToken WS142 = default(IToken);
	    IToken BETWEEN143 = default(IToken);

	    object OR131_tree = default(object);
	    object LIKE132_tree = default(object);
	    object NOT133_tree = default(object);
	    object WS134_tree = default(object);
	    object LIKE135_tree = default(object);
	    object MATCH136_tree = default(object);
	    object NOT137_tree = default(object);
	    object WS138_tree = default(object);
	    object MATCH139_tree = default(object);
	    object BETWEEN140_tree = default(object);
	    object NOT141_tree = default(object);
	    object WS142_tree = default(object);
	    object BETWEEN143_tree = default(object);
	    RewriteRuleITokenStream stream_MATCH=new RewriteRuleITokenStream(adaptor,"token MATCH");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");
	    RewriteRuleITokenStream stream_BETWEEN=new RewriteRuleITokenStream(adaptor,"token BETWEEN");
	    RewriteRuleITokenStream stream_LIKE=new RewriteRuleITokenStream(adaptor,"token LIKE");
	    RewriteRuleITokenStream stream_OR=new RewriteRuleITokenStream(adaptor,"token OR");

		try { DebugEnterRule(GrammarFileName, "op_7");
		DebugLocation(198, 1);
		try
		{
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:198:6: ( OR -> T_OR | LIKE -> T_LIKE | NOT WS LIKE -> T_NOTLIKE | MATCH -> T_MATCH | NOT WS MATCH -> T_NOTMATCH | BETWEEN -> T_BETWEEN | NOT WS BETWEEN -> T_NOTBETWEEN )
			int alt54=7;
			try { DebugEnterDecision(54, decisionCanBacktrack[54]);
			switch (input.LA(1))
			{
			case OR:
				{
				alt54 = 1;
				}
				break;
			case LIKE:
				{
				alt54 = 2;
				}
				break;
			case NOT:
				{
				int LA54_3 = input.LA(2);

				if ((LA54_3==WS))
				{
					switch (input.LA(3))
					{
					case LIKE:
						{
						alt54 = 3;
						}
						break;
					case MATCH:
						{
						alt54 = 5;
						}
						break;
					case BETWEEN:
						{
						alt54 = 7;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 54, 6, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 54, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case MATCH:
				{
				alt54 = 4;
				}
				break;
			case BETWEEN:
				{
				alt54 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 54, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:198:8: OR
				{
				DebugLocation(198, 8);
				OR131=(IToken)Match(input,OR,Follow._OR_in_op_71176);  
				stream_OR.Add(OR131);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 198:11: -> T_OR
				{
					DebugLocation(198, 14);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_OR, "T_OR"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:199:4: LIKE
				{
				DebugLocation(199, 4);
				LIKE132=(IToken)Match(input,LIKE,Follow._LIKE_in_op_71185);  
				stream_LIKE.Add(LIKE132);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 199:9: -> T_LIKE
				{
					DebugLocation(199, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_LIKE, "T_LIKE"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:200:4: NOT WS LIKE
				{
				DebugLocation(200, 4);
				NOT133=(IToken)Match(input,NOT,Follow._NOT_in_op_71194);  
				stream_NOT.Add(NOT133);

				DebugLocation(200, 8);
				WS134=(IToken)Match(input,WS,Follow._WS_in_op_71196);  
				stream_WS.Add(WS134);

				DebugLocation(200, 11);
				LIKE135=(IToken)Match(input,LIKE,Follow._LIKE_in_op_71198);  
				stream_LIKE.Add(LIKE135);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 200:16: -> T_NOTLIKE
				{
					DebugLocation(200, 19);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTLIKE, "T_NOTLIKE"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:201:4: MATCH
				{
				DebugLocation(201, 4);
				MATCH136=(IToken)Match(input,MATCH,Follow._MATCH_in_op_71207);  
				stream_MATCH.Add(MATCH136);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 201:10: -> T_MATCH
				{
					DebugLocation(201, 13);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MATCH, "T_MATCH"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:202:4: NOT WS MATCH
				{
				DebugLocation(202, 4);
				NOT137=(IToken)Match(input,NOT,Follow._NOT_in_op_71216);  
				stream_NOT.Add(NOT137);

				DebugLocation(202, 8);
				WS138=(IToken)Match(input,WS,Follow._WS_in_op_71218);  
				stream_WS.Add(WS138);

				DebugLocation(202, 11);
				MATCH139=(IToken)Match(input,MATCH,Follow._MATCH_in_op_71220);  
				stream_MATCH.Add(MATCH139);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 202:17: -> T_NOTMATCH
				{
					DebugLocation(202, 20);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTMATCH, "T_NOTMATCH"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:203:4: BETWEEN
				{
				DebugLocation(203, 4);
				BETWEEN140=(IToken)Match(input,BETWEEN,Follow._BETWEEN_in_op_71229);  
				stream_BETWEEN.Add(BETWEEN140);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 203:12: -> T_BETWEEN
				{
					DebugLocation(203, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BETWEEN, "T_BETWEEN"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:204:4: NOT WS BETWEEN
				{
				DebugLocation(204, 4);
				NOT141=(IToken)Match(input,NOT,Follow._NOT_in_op_71238);  
				stream_NOT.Add(NOT141);

				DebugLocation(204, 8);
				WS142=(IToken)Match(input,WS,Follow._WS_in_op_71240);  
				stream_WS.Add(WS142);

				DebugLocation(204, 11);
				BETWEEN143=(IToken)Match(input,BETWEEN,Follow._BETWEEN_in_op_71242);  
				stream_BETWEEN.Add(BETWEEN143);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 204:19: -> T_NOTBETWEEN
				{
					DebugLocation(204, 22);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTBETWEEN, "T_NOTBETWEEN"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_7", 25);
			LeaveRule("op_7", 25);
			LeaveRule_op_7();
	    }
	 	DebugLocation(205, 1);
		} finally { DebugExitRule(GrammarFileName, "op_7"); }
		return retval;

	}
	// $ANTLR end "op_7"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_6() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_6() {}

	// $ANTLR start "expression_6"
	// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:207:1: expression_6 : (a= expression_5 -> $a) ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )* ;
	[GrammarRule("expression_6")]
	private AstParserRuleReturnScope<object, IToken> expression_6()
	{
		EnterRule_expression_6();
		EnterRule("expression_6", 26);
		TraceIn("expression_6", 26);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS144 = default(IToken);
	    IToken WS146 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_6145 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS144_tree = default(object);
	    object WS146_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_op_6=new RewriteRuleSubtreeStream(adaptor,"rule op_6");
	    RewriteRuleSubtreeStream stream_expression_5=new RewriteRuleSubtreeStream(adaptor,"rule expression_5");
		try { DebugEnterRule(GrammarFileName, "expression_6");
		DebugLocation(207, 1);
		try
		{
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:208:2: ( (a= expression_5 -> $a) ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:208:4: (a= expression_5 -> $a) ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )*
			{
			DebugLocation(208, 4);
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:208:4: (a= expression_5 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:208:5: a= expression_5
			{
			DebugLocation(208, 6);
			PushFollow(Follow._expression_5_in_expression_61261);
			a=expression_5();
			PopFollow();

			stream_expression_5.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 208:19: -> $a
			{
				DebugLocation(208, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(208, 25);
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:208:25: ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )*
			try { DebugEnterSubRule(55);
			while (true)
			{
				int alt55=2;
				try { DebugEnterDecision(55, decisionCanBacktrack[55]);
				int LA55_0 = input.LA(1);

				if ((LA55_0==WS))
				{
					int LA55_1 = input.LA(2);

					if ((LA55_1==AND))
					{
						alt55 = 1;
					}


				}


				} finally { DebugExitDecision(55); }
				switch ( alt55 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:208:26: WS op_6 WS b= expression_5
					{
					DebugLocation(208, 26);
					WS144=(IToken)Match(input,WS,Follow._WS_in_expression_61268);  
					stream_WS.Add(WS144);

					DebugLocation(208, 29);
					PushFollow(Follow._op_6_in_expression_61270);
					op_6145=op_6();
					PopFollow();

					stream_op_6.Add(op_6145.Tree);
					DebugLocation(208, 34);
					WS146=(IToken)Match(input,WS,Follow._WS_in_expression_61272);  
					stream_WS.Add(WS146);

					DebugLocation(208, 38);
					PushFollow(Follow._expression_5_in_expression_61276);
					b=expression_5();
					PopFollow();

					stream_expression_5.Add(b.Tree);


					{
					// AST REWRITE
					// elements: expression_6, b, op_6
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 208:52: -> ^( T_OP_BINARY op_6 $expression_6 $b)
					{
						DebugLocation(208, 55);
						// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:208:55: ^( T_OP_BINARY op_6 $expression_6 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(208, 57);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(208, 69);
						adaptor.AddChild(root_1, stream_op_6.NextTree());
						DebugLocation(208, 75);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(208, 89);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop55;
				}
			}

			loop55:
				;

			} finally { DebugExitSubRule(55); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_6", 26);
			LeaveRule("expression_6", 26);
			LeaveRule_expression_6();
	    }
	 	DebugLocation(209, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_6"); }
		return retval;

	}
	// $ANTLR end "expression_6"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_6() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_6() {}

	// $ANTLR start "op_6"
	// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:211:1: op_6 : AND -> T_AND ;
	[GrammarRule("op_6")]
	private AstParserRuleReturnScope<object, IToken> op_6()
	{
		EnterRule_op_6();
		EnterRule("op_6", 27);
		TraceIn("op_6", 27);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken AND147 = default(IToken);

	    object AND147_tree = default(object);
	    RewriteRuleITokenStream stream_AND=new RewriteRuleITokenStream(adaptor,"token AND");

		try { DebugEnterRule(GrammarFileName, "op_6");
		DebugLocation(211, 1);
		try
		{
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:211:6: ( AND -> T_AND )
			DebugEnterAlt(1);
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:211:8: AND
			{
			DebugLocation(211, 8);
			AND147=(IToken)Match(input,AND,Follow._AND_in_op_61304);  
			stream_AND.Add(AND147);



			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 211:12: -> T_AND
			{
				DebugLocation(211, 15);
				adaptor.AddChild(root_0, (object)adaptor.Create(T_AND, "T_AND"));

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_6", 27);
			LeaveRule("op_6", 27);
			LeaveRule_op_6();
	    }
	 	DebugLocation(212, 1);
		} finally { DebugExitRule(GrammarFileName, "op_6"); }
		return retval;

	}
	// $ANTLR end "op_6"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_5() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_5() {}

	// $ANTLR start "expression_5"
	// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:214:1: expression_5 : ( op_5 WS expression_5 -> ^( T_OP_UNARY op_5 expression_5 ) | expression_4 );
	[GrammarRule("expression_5")]
	private AstParserRuleReturnScope<object, IToken> expression_5()
	{
		EnterRule_expression_5();
		EnterRule("expression_5", 28);
		TraceIn("expression_5", 28);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS149 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> op_5148 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_5150 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_4151 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS149_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression_5=new RewriteRuleSubtreeStream(adaptor,"rule expression_5");
	    RewriteRuleSubtreeStream stream_op_5=new RewriteRuleSubtreeStream(adaptor,"rule op_5");
		try { DebugEnterRule(GrammarFileName, "expression_5");
		DebugLocation(214, 1);
		try
		{
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:215:2: ( op_5 WS expression_5 -> ^( T_OP_UNARY op_5 expression_5 ) | expression_4 )
			int alt56=2;
			try { DebugEnterDecision(56, decisionCanBacktrack[56]);
			int LA56_0 = input.LA(1);

			if ((LA56_0==NOT))
			{
				alt56 = 1;
			}
			else if ((LA56_0==CAST||LA56_0==CONVERT||LA56_0==NUMBER||(LA56_0>=STRING && LA56_0<=SYSTEMVAR)||LA56_0==TOKEN||LA56_0==117))
			{
				alt56 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 56, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(56); }
			switch (alt56)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:215:4: op_5 WS expression_5
				{
				DebugLocation(215, 4);
				PushFollow(Follow._op_5_in_expression_51322);
				op_5148=op_5();
				PopFollow();

				stream_op_5.Add(op_5148.Tree);
				DebugLocation(215, 9);
				WS149=(IToken)Match(input,WS,Follow._WS_in_expression_51324);  
				stream_WS.Add(WS149);

				DebugLocation(215, 12);
				PushFollow(Follow._expression_5_in_expression_51326);
				expression_5150=expression_5();
				PopFollow();

				stream_expression_5.Add(expression_5150.Tree);


				{
				// AST REWRITE
				// elements: expression_5, op_5
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 215:25: -> ^( T_OP_UNARY op_5 expression_5 )
				{
					DebugLocation(215, 28);
					// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:215:28: ^( T_OP_UNARY op_5 expression_5 )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(215, 30);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_UNARY, "T_OP_UNARY"), root_1);

					DebugLocation(215, 41);
					adaptor.AddChild(root_1, stream_op_5.NextTree());
					DebugLocation(215, 46);
					adaptor.AddChild(root_1, stream_expression_5.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:216:4: expression_4
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(216, 4);
				PushFollow(Follow._expression_4_in_expression_51341);
				expression_4151=expression_4();
				PopFollow();

				adaptor.AddChild(root_0, expression_4151.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_5", 28);
			LeaveRule("expression_5", 28);
			LeaveRule_expression_5();
	    }
	 	DebugLocation(217, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_5"); }
		return retval;

	}
	// $ANTLR end "expression_5"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_5() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_5() {}

	// $ANTLR start "op_5"
	// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:219:1: op_5 : NOT -> T_NOT ;
	[GrammarRule("op_5")]
	private AstParserRuleReturnScope<object, IToken> op_5()
	{
		EnterRule_op_5();
		EnterRule("op_5", 29);
		TraceIn("op_5", 29);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken NOT152 = default(IToken);

	    object NOT152_tree = default(object);
	    RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");

		try { DebugEnterRule(GrammarFileName, "op_5");
		DebugLocation(219, 1);
		try
		{
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:219:7: ( NOT -> T_NOT )
			DebugEnterAlt(1);
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:219:9: NOT
			{
			DebugLocation(219, 9);
			NOT152=(IToken)Match(input,NOT,Follow._NOT_in_op_51352);  
			stream_NOT.Add(NOT152);



			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 219:13: -> T_NOT
			{
				DebugLocation(219, 16);
				adaptor.AddChild(root_0, (object)adaptor.Create(T_NOT, "T_NOT"));

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_5", 29);
			LeaveRule("op_5", 29);
			LeaveRule_op_5();
	    }
	 	DebugLocation(220, 1);
		} finally { DebugExitRule(GrammarFileName, "op_5"); }
		return retval;

	}
	// $ANTLR end "op_5"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_4() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_4() {}

	// $ANTLR start "expression_4"
	// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:222:1: expression_4 : (a= expression_3 -> $a) ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )* ;
	[GrammarRule("expression_4")]
	private AstParserRuleReturnScope<object, IToken> expression_4()
	{
		EnterRule_expression_4();
		EnterRule("expression_4", 30);
		TraceIn("expression_4", 30);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS153 = default(IToken);
	    IToken WS155 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_4154 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS153_tree = default(object);
	    object WS155_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression_3=new RewriteRuleSubtreeStream(adaptor,"rule expression_3");
	    RewriteRuleSubtreeStream stream_op_4=new RewriteRuleSubtreeStream(adaptor,"rule op_4");
		try { DebugEnterRule(GrammarFileName, "expression_4");
		DebugLocation(222, 1);
		try
		{
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:223:2: ( (a= expression_3 -> $a) ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:223:4: (a= expression_3 -> $a) ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )*
			{
			DebugLocation(223, 4);
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:223:4: (a= expression_3 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:223:5: a= expression_3
			{
			DebugLocation(223, 6);
			PushFollow(Follow._expression_3_in_expression_41371);
			a=expression_3();
			PopFollow();

			stream_expression_3.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 223:19: -> $a
			{
				DebugLocation(223, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(223, 25);
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:223:25: ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )*
			try { DebugEnterSubRule(59);
			while (true)
			{
				int alt59=2;
				try { DebugEnterDecision(59, decisionCanBacktrack[59]);
				int LA59_0 = input.LA(1);

				if ((LA59_0==WS))
				{
					switch (input.LA(2))
					{
					case 128:
						{
						int LA59_4 = input.LA(3);

						if ((LA59_4==WS))
						{
							int LA59_13 = input.LA(4);

							if ((LA59_13==CAST||LA59_13==CONVERT||LA59_13==NUMBER||(LA59_13>=STRING && LA59_13<=SYSTEMVAR)||LA59_13==TOKEN||LA59_13==117))
							{
								alt59 = 1;
							}


						}
						else if ((LA59_4==CAST||LA59_4==CONVERT||LA59_4==NUMBER||(LA59_4>=STRING && LA59_4<=SYSTEMVAR)||LA59_4==TOKEN||LA59_4==117))
						{
							alt59 = 1;
						}


						}
						break;
					case 130:
						{
						int LA59_5 = input.LA(3);

						if ((LA59_5==WS))
						{
							int LA59_13 = input.LA(4);

							if ((LA59_13==CAST||LA59_13==CONVERT||LA59_13==NUMBER||(LA59_13>=STRING && LA59_13<=SYSTEMVAR)||LA59_13==TOKEN||LA59_13==117))
							{
								alt59 = 1;
							}


						}
						else if ((LA59_5==CAST||LA59_5==CONVERT||LA59_5==NUMBER||(LA59_5>=STRING && LA59_5<=SYSTEMVAR)||LA59_5==TOKEN||LA59_5==117))
						{
							alt59 = 1;
						}


						}
						break;
					case 126:
						{
						int LA59_6 = input.LA(3);

						if ((LA59_6==WS))
						{
							int LA59_13 = input.LA(4);

							if ((LA59_13==CAST||LA59_13==CONVERT||LA59_13==NUMBER||(LA59_13>=STRING && LA59_13<=SYSTEMVAR)||LA59_13==TOKEN||LA59_13==117))
							{
								alt59 = 1;
							}


						}
						else if ((LA59_6==CAST||LA59_6==CONVERT||LA59_6==NUMBER||(LA59_6>=STRING && LA59_6<=SYSTEMVAR)||LA59_6==TOKEN||LA59_6==117))
						{
							alt59 = 1;
						}


						}
						break;
					case 127:
						{
						int LA59_7 = input.LA(3);

						if ((LA59_7==WS))
						{
							int LA59_13 = input.LA(4);

							if ((LA59_13==CAST||LA59_13==CONVERT||LA59_13==NUMBER||(LA59_13>=STRING && LA59_13<=SYSTEMVAR)||LA59_13==TOKEN||LA59_13==117))
							{
								alt59 = 1;
							}


						}
						else if ((LA59_7==CAST||LA59_7==CONVERT||LA59_7==NUMBER||(LA59_7>=STRING && LA59_7<=SYSTEMVAR)||LA59_7==TOKEN||LA59_7==117))
						{
							alt59 = 1;
						}


						}
						break;
					case 113:
						{
						int LA59_8 = input.LA(3);

						if ((LA59_8==WS))
						{
							int LA59_13 = input.LA(4);

							if ((LA59_13==CAST||LA59_13==CONVERT||LA59_13==NUMBER||(LA59_13>=STRING && LA59_13<=SYSTEMVAR)||LA59_13==TOKEN||LA59_13==117))
							{
								alt59 = 1;
							}


						}
						else if ((LA59_8==CAST||LA59_8==CONVERT||LA59_8==NUMBER||(LA59_8>=STRING && LA59_8<=SYSTEMVAR)||LA59_8==TOKEN||LA59_8==117))
						{
							alt59 = 1;
						}


						}
						break;
					case 114:
						{
						int LA59_9 = input.LA(3);

						if ((LA59_9==WS))
						{
							int LA59_13 = input.LA(4);

							if ((LA59_13==CAST||LA59_13==CONVERT||LA59_13==NUMBER||(LA59_13>=STRING && LA59_13<=SYSTEMVAR)||LA59_13==TOKEN||LA59_13==117))
							{
								alt59 = 1;
							}


						}
						else if ((LA59_9==CAST||LA59_9==CONVERT||LA59_9==NUMBER||(LA59_9>=STRING && LA59_9<=SYSTEMVAR)||LA59_9==TOKEN||LA59_9==117))
						{
							alt59 = 1;
						}


						}
						break;
					case 112:
						{
						int LA59_10 = input.LA(3);

						if ((LA59_10==WS))
						{
							int LA59_13 = input.LA(4);

							if ((LA59_13==CAST||LA59_13==CONVERT||LA59_13==NUMBER||(LA59_13>=STRING && LA59_13<=SYSTEMVAR)||LA59_13==TOKEN||LA59_13==117))
							{
								alt59 = 1;
							}


						}
						else if ((LA59_10==CAST||LA59_10==CONVERT||LA59_10==NUMBER||(LA59_10>=STRING && LA59_10<=SYSTEMVAR)||LA59_10==TOKEN||LA59_10==117))
						{
							alt59 = 1;
						}


						}
						break;
					case 129:
						{
						int LA59_11 = input.LA(3);

						if ((LA59_11==WS))
						{
							int LA59_13 = input.LA(4);

							if ((LA59_13==CAST||LA59_13==CONVERT||LA59_13==NUMBER||(LA59_13>=STRING && LA59_13<=SYSTEMVAR)||LA59_13==TOKEN||LA59_13==117))
							{
								alt59 = 1;
							}


						}
						else if ((LA59_11==CAST||LA59_11==CONVERT||LA59_11==NUMBER||(LA59_11>=STRING && LA59_11<=SYSTEMVAR)||LA59_11==TOKEN||LA59_11==117))
						{
							alt59 = 1;
						}


						}
						break;
					case 125:
						{
						int LA59_12 = input.LA(3);

						if ((LA59_12==WS))
						{
							int LA59_13 = input.LA(4);

							if ((LA59_13==CAST||LA59_13==CONVERT||LA59_13==NUMBER||(LA59_13>=STRING && LA59_13<=SYSTEMVAR)||LA59_13==TOKEN||LA59_13==117))
							{
								alt59 = 1;
							}


						}
						else if ((LA59_12==CAST||LA59_12==CONVERT||LA59_12==NUMBER||(LA59_12>=STRING && LA59_12<=SYSTEMVAR)||LA59_12==TOKEN||LA59_12==117))
						{
							alt59 = 1;
						}


						}
						break;
					}

				}
				else if (((LA59_0>=112 && LA59_0<=114)||(LA59_0>=125 && LA59_0<=130)))
				{
					alt59 = 1;
				}


				} finally { DebugExitDecision(59); }
				switch ( alt59 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:223:26: ( WS )? op_4 ( WS )? b= expression_3
					{
					DebugLocation(223, 26);
					// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:223:26: ( WS )?
					int alt57=2;
					try { DebugEnterSubRule(57);
					try { DebugEnterDecision(57, decisionCanBacktrack[57]);
					int LA57_0 = input.LA(1);

					if ((LA57_0==WS))
					{
						alt57 = 1;
					}
					} finally { DebugExitDecision(57); }
					switch (alt57)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:223:26: WS
						{
						DebugLocation(223, 26);
						WS153=(IToken)Match(input,WS,Follow._WS_in_expression_41378);  
						stream_WS.Add(WS153);


						}
						break;

					}
					} finally { DebugExitSubRule(57); }

					DebugLocation(223, 30);
					PushFollow(Follow._op_4_in_expression_41381);
					op_4154=op_4();
					PopFollow();

					stream_op_4.Add(op_4154.Tree);
					DebugLocation(223, 35);
					// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:223:35: ( WS )?
					int alt58=2;
					try { DebugEnterSubRule(58);
					try { DebugEnterDecision(58, decisionCanBacktrack[58]);
					int LA58_0 = input.LA(1);

					if ((LA58_0==WS))
					{
						alt58 = 1;
					}
					} finally { DebugExitDecision(58); }
					switch (alt58)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:223:35: WS
						{
						DebugLocation(223, 35);
						WS155=(IToken)Match(input,WS,Follow._WS_in_expression_41383);  
						stream_WS.Add(WS155);


						}
						break;

					}
					} finally { DebugExitSubRule(58); }

					DebugLocation(223, 40);
					PushFollow(Follow._expression_3_in_expression_41388);
					b=expression_3();
					PopFollow();

					stream_expression_3.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, op_4, expression_4
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 223:54: -> ^( T_OP_BINARY op_4 $expression_4 $b)
					{
						DebugLocation(223, 57);
						// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:223:57: ^( T_OP_BINARY op_4 $expression_4 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(223, 59);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(223, 71);
						adaptor.AddChild(root_1, stream_op_4.NextTree());
						DebugLocation(223, 77);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(223, 91);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop59;
				}
			}

			loop59:
				;

			} finally { DebugExitSubRule(59); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_4", 30);
			LeaveRule("expression_4", 30);
			LeaveRule_expression_4();
	    }
	 	DebugLocation(224, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_4"); }
		return retval;

	}
	// $ANTLR end "expression_4"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_4() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_4() {}

	// $ANTLR start "op_4"
	// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:226:1: op_4 : ( '=' -> T_EQUAL | '>=' -> T_NOTLESS | '<=' -> T_NOTGREATER | '<>' -> T_NOTEQUAL | '!=' -> T_NOTEQUAL | '!>' -> T_NOTGREATER | '!<' -> T_NOTLESS | '>' -> T_GREATER | '<' -> T_LESS );
	[GrammarRule("op_4")]
	private AstParserRuleReturnScope<object, IToken> op_4()
	{
		EnterRule_op_4();
		EnterRule("op_4", 31);
		TraceIn("op_4", 31);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal156 = default(IToken);
	    IToken string_literal157 = default(IToken);
	    IToken string_literal158 = default(IToken);
	    IToken string_literal159 = default(IToken);
	    IToken string_literal160 = default(IToken);
	    IToken string_literal161 = default(IToken);
	    IToken string_literal162 = default(IToken);
	    IToken char_literal163 = default(IToken);
	    IToken char_literal164 = default(IToken);

	    object char_literal156_tree = default(object);
	    object string_literal157_tree = default(object);
	    object string_literal158_tree = default(object);
	    object string_literal159_tree = default(object);
	    object string_literal160_tree = default(object);
	    object string_literal161_tree = default(object);
	    object string_literal162_tree = default(object);
	    object char_literal163_tree = default(object);
	    object char_literal164_tree = default(object);
	    RewriteRuleITokenStream stream_125=new RewriteRuleITokenStream(adaptor,"token 125");
	    RewriteRuleITokenStream stream_126=new RewriteRuleITokenStream(adaptor,"token 126");
	    RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
	    RewriteRuleITokenStream stream_127=new RewriteRuleITokenStream(adaptor,"token 127");
	    RewriteRuleITokenStream stream_128=new RewriteRuleITokenStream(adaptor,"token 128");
	    RewriteRuleITokenStream stream_112=new RewriteRuleITokenStream(adaptor,"token 112");
	    RewriteRuleITokenStream stream_113=new RewriteRuleITokenStream(adaptor,"token 113");
	    RewriteRuleITokenStream stream_129=new RewriteRuleITokenStream(adaptor,"token 129");
	    RewriteRuleITokenStream stream_130=new RewriteRuleITokenStream(adaptor,"token 130");

		try { DebugEnterRule(GrammarFileName, "op_4");
		DebugLocation(226, 1);
		try
		{
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:226:6: ( '=' -> T_EQUAL | '>=' -> T_NOTLESS | '<=' -> T_NOTGREATER | '<>' -> T_NOTEQUAL | '!=' -> T_NOTEQUAL | '!>' -> T_NOTGREATER | '!<' -> T_NOTLESS | '>' -> T_GREATER | '<' -> T_LESS )
			int alt60=9;
			try { DebugEnterDecision(60, decisionCanBacktrack[60]);
			switch (input.LA(1))
			{
			case 128:
				{
				alt60 = 1;
				}
				break;
			case 130:
				{
				alt60 = 2;
				}
				break;
			case 126:
				{
				alt60 = 3;
				}
				break;
			case 127:
				{
				alt60 = 4;
				}
				break;
			case 113:
				{
				alt60 = 5;
				}
				break;
			case 114:
				{
				alt60 = 6;
				}
				break;
			case 112:
				{
				alt60 = 7;
				}
				break;
			case 129:
				{
				alt60 = 8;
				}
				break;
			case 125:
				{
				alt60 = 9;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 60, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(60); }
			switch (alt60)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:226:8: '='
				{
				DebugLocation(226, 8);
				char_literal156=(IToken)Match(input,128,Follow._128_in_op_41414);  
				stream_128.Add(char_literal156);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 226:12: -> T_EQUAL
				{
					DebugLocation(226, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_EQUAL, "T_EQUAL"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:227:4: '>='
				{
				DebugLocation(227, 4);
				string_literal157=(IToken)Match(input,130,Follow._130_in_op_41423);  
				stream_130.Add(string_literal157);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 227:9: -> T_NOTLESS
				{
					DebugLocation(227, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTLESS, "T_NOTLESS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:228:4: '<='
				{
				DebugLocation(228, 4);
				string_literal158=(IToken)Match(input,126,Follow._126_in_op_41433);  
				stream_126.Add(string_literal158);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 228:9: -> T_NOTGREATER
				{
					DebugLocation(228, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTGREATER, "T_NOTGREATER"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:229:4: '<>'
				{
				DebugLocation(229, 4);
				string_literal159=(IToken)Match(input,127,Follow._127_in_op_41443);  
				stream_127.Add(string_literal159);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 229:9: -> T_NOTEQUAL
				{
					DebugLocation(229, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTEQUAL, "T_NOTEQUAL"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:230:4: '!='
				{
				DebugLocation(230, 4);
				string_literal160=(IToken)Match(input,113,Follow._113_in_op_41452);  
				stream_113.Add(string_literal160);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 230:9: -> T_NOTEQUAL
				{
					DebugLocation(230, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTEQUAL, "T_NOTEQUAL"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:231:4: '!>'
				{
				DebugLocation(231, 4);
				string_literal161=(IToken)Match(input,114,Follow._114_in_op_41461);  
				stream_114.Add(string_literal161);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 231:9: -> T_NOTGREATER
				{
					DebugLocation(231, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTGREATER, "T_NOTGREATER"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:232:4: '!<'
				{
				DebugLocation(232, 4);
				string_literal162=(IToken)Match(input,112,Follow._112_in_op_41470);  
				stream_112.Add(string_literal162);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 232:9: -> T_NOTLESS
				{
					DebugLocation(232, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTLESS, "T_NOTLESS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:233:4: '>'
				{
				DebugLocation(233, 4);
				char_literal163=(IToken)Match(input,129,Follow._129_in_op_41479);  
				stream_129.Add(char_literal163);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 233:8: -> T_GREATER
				{
					DebugLocation(233, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_GREATER, "T_GREATER"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:234:4: '<'
				{
				DebugLocation(234, 4);
				char_literal164=(IToken)Match(input,125,Follow._125_in_op_41489);  
				stream_125.Add(char_literal164);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 234:8: -> T_LESS
				{
					DebugLocation(234, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_LESS, "T_LESS"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_4", 31);
			LeaveRule("op_4", 31);
			LeaveRule_op_4();
	    }
	 	DebugLocation(235, 1);
		} finally { DebugExitRule(GrammarFileName, "op_4"); }
		return retval;

	}
	// $ANTLR end "op_4"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_3() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_3() {}

	// $ANTLR start "expression_3"
	// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:237:1: expression_3 : (a= expression_2 -> $a) ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )* ;
	[GrammarRule("expression_3")]
	private AstParserRuleReturnScope<object, IToken> expression_3()
	{
		EnterRule_expression_3();
		EnterRule("expression_3", 32);
		TraceIn("expression_3", 32);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS165 = default(IToken);
	    IToken WS167 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_3166 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS165_tree = default(object);
	    object WS167_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_op_3=new RewriteRuleSubtreeStream(adaptor,"rule op_3");
	    RewriteRuleSubtreeStream stream_expression_2=new RewriteRuleSubtreeStream(adaptor,"rule expression_2");
		try { DebugEnterRule(GrammarFileName, "expression_3");
		DebugLocation(237, 1);
		try
		{
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:238:2: ( (a= expression_2 -> $a) ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:238:4: (a= expression_2 -> $a) ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )*
			{
			DebugLocation(238, 4);
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:238:4: (a= expression_2 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:238:5: a= expression_2
			{
			DebugLocation(238, 6);
			PushFollow(Follow._expression_2_in_expression_31508);
			a=expression_2();
			PopFollow();

			stream_expression_2.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 238:19: -> $a
			{
				DebugLocation(238, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(238, 25);
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:238:25: ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )*
			try { DebugEnterSubRule(63);
			while (true)
			{
				int alt63=2;
				try { DebugEnterDecision(63, decisionCanBacktrack[63]);
				int LA63_0 = input.LA(1);

				if ((LA63_0==WS))
				{
					int LA63_1 = input.LA(2);

					if ((LA63_1==116||LA63_1==120||LA63_1==122||(LA63_1>=133 && LA63_1<=134)))
					{
						alt63 = 1;
					}


				}
				else if ((LA63_0==116||LA63_0==120||LA63_0==122||(LA63_0>=133 && LA63_0<=134)))
				{
					alt63 = 1;
				}


				} finally { DebugExitDecision(63); }
				switch ( alt63 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:238:26: ( WS )? op_3 ( WS )? b= expression_2
					{
					DebugLocation(238, 26);
					// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:238:26: ( WS )?
					int alt61=2;
					try { DebugEnterSubRule(61);
					try { DebugEnterDecision(61, decisionCanBacktrack[61]);
					int LA61_0 = input.LA(1);

					if ((LA61_0==WS))
					{
						alt61 = 1;
					}
					} finally { DebugExitDecision(61); }
					switch (alt61)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:238:26: WS
						{
						DebugLocation(238, 26);
						WS165=(IToken)Match(input,WS,Follow._WS_in_expression_31515);  
						stream_WS.Add(WS165);


						}
						break;

					}
					} finally { DebugExitSubRule(61); }

					DebugLocation(238, 30);
					PushFollow(Follow._op_3_in_expression_31518);
					op_3166=op_3();
					PopFollow();

					stream_op_3.Add(op_3166.Tree);
					DebugLocation(238, 35);
					// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:238:35: ( WS )?
					int alt62=2;
					try { DebugEnterSubRule(62);
					try { DebugEnterDecision(62, decisionCanBacktrack[62]);
					int LA62_0 = input.LA(1);

					if ((LA62_0==WS))
					{
						alt62 = 1;
					}
					} finally { DebugExitDecision(62); }
					switch (alt62)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:238:35: WS
						{
						DebugLocation(238, 35);
						WS167=(IToken)Match(input,WS,Follow._WS_in_expression_31520);  
						stream_WS.Add(WS167);


						}
						break;

					}
					} finally { DebugExitSubRule(62); }

					DebugLocation(238, 40);
					PushFollow(Follow._expression_2_in_expression_31525);
					b=expression_2();
					PopFollow();

					stream_expression_2.Add(b.Tree);


					{
					// AST REWRITE
					// elements: expression_3, op_3, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 238:54: -> ^( T_OP_BINARY op_3 $expression_3 $b)
					{
						DebugLocation(238, 57);
						// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:238:57: ^( T_OP_BINARY op_3 $expression_3 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(238, 59);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(238, 71);
						adaptor.AddChild(root_1, stream_op_3.NextTree());
						DebugLocation(238, 77);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(238, 91);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop63;
				}
			}

			loop63:
				;

			} finally { DebugExitSubRule(63); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_3", 32);
			LeaveRule("expression_3", 32);
			LeaveRule_expression_3();
	    }
	 	DebugLocation(239, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_3"); }
		return retval;

	}
	// $ANTLR end "expression_3"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_3() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_3() {}

	// $ANTLR start "op_3"
	// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:241:1: op_3 : ( '+' -> T_PLUS | '-' -> T_MINUS | '&' -> T_BITWISE_AND | '|' -> T_BITWISE_OR | '^' -> T_BITWISE_XOR );
	[GrammarRule("op_3")]
	private AstParserRuleReturnScope<object, IToken> op_3()
	{
		EnterRule_op_3();
		EnterRule("op_3", 33);
		TraceIn("op_3", 33);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal168 = default(IToken);
	    IToken char_literal169 = default(IToken);
	    IToken char_literal170 = default(IToken);
	    IToken char_literal171 = default(IToken);
	    IToken char_literal172 = default(IToken);

	    object char_literal168_tree = default(object);
	    object char_literal169_tree = default(object);
	    object char_literal170_tree = default(object);
	    object char_literal171_tree = default(object);
	    object char_literal172_tree = default(object);
	    RewriteRuleITokenStream stream_134=new RewriteRuleITokenStream(adaptor,"token 134");
	    RewriteRuleITokenStream stream_116=new RewriteRuleITokenStream(adaptor,"token 116");
	    RewriteRuleITokenStream stream_133=new RewriteRuleITokenStream(adaptor,"token 133");
	    RewriteRuleITokenStream stream_122=new RewriteRuleITokenStream(adaptor,"token 122");
	    RewriteRuleITokenStream stream_120=new RewriteRuleITokenStream(adaptor,"token 120");

		try { DebugEnterRule(GrammarFileName, "op_3");
		DebugLocation(241, 1);
		try
		{
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:241:6: ( '+' -> T_PLUS | '-' -> T_MINUS | '&' -> T_BITWISE_AND | '|' -> T_BITWISE_OR | '^' -> T_BITWISE_XOR )
			int alt64=5;
			try { DebugEnterDecision(64, decisionCanBacktrack[64]);
			switch (input.LA(1))
			{
			case 120:
				{
				alt64 = 1;
				}
				break;
			case 122:
				{
				alt64 = 2;
				}
				break;
			case 116:
				{
				alt64 = 3;
				}
				break;
			case 134:
				{
				alt64 = 4;
				}
				break;
			case 133:
				{
				alt64 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 64, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(64); }
			switch (alt64)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:241:8: '+'
				{
				DebugLocation(241, 8);
				char_literal168=(IToken)Match(input,120,Follow._120_in_op_31551);  
				stream_120.Add(char_literal168);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 241:12: -> T_PLUS
				{
					DebugLocation(241, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_PLUS, "T_PLUS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:242:4: '-'
				{
				DebugLocation(242, 4);
				char_literal169=(IToken)Match(input,122,Follow._122_in_op_31560);  
				stream_122.Add(char_literal169);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 242:8: -> T_MINUS
				{
					DebugLocation(242, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MINUS, "T_MINUS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:243:4: '&'
				{
				DebugLocation(243, 4);
				char_literal170=(IToken)Match(input,116,Follow._116_in_op_31569);  
				stream_116.Add(char_literal170);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 243:8: -> T_BITWISE_AND
				{
					DebugLocation(243, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_AND, "T_BITWISE_AND"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:244:4: '|'
				{
				DebugLocation(244, 4);
				char_literal171=(IToken)Match(input,134,Follow._134_in_op_31578);  
				stream_134.Add(char_literal171);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 244:8: -> T_BITWISE_OR
				{
					DebugLocation(244, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_OR, "T_BITWISE_OR"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:245:4: '^'
				{
				DebugLocation(245, 4);
				char_literal172=(IToken)Match(input,133,Follow._133_in_op_31587);  
				stream_133.Add(char_literal172);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 245:8: -> T_BITWISE_XOR
				{
					DebugLocation(245, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_XOR, "T_BITWISE_XOR"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_3", 33);
			LeaveRule("op_3", 33);
			LeaveRule_op_3();
	    }
	 	DebugLocation(246, 1);
		} finally { DebugExitRule(GrammarFileName, "op_3"); }
		return retval;

	}
	// $ANTLR end "op_3"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_2() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_2() {}

	// $ANTLR start "expression_2"
	// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:254:1: expression_2 : (a= expression_1 -> $a) ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )* ;
	[GrammarRule("expression_2")]
	private AstParserRuleReturnScope<object, IToken> expression_2()
	{
		EnterRule_expression_2();
		EnterRule("expression_2", 34);
		TraceIn("expression_2", 34);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS173 = default(IToken);
	    IToken WS175 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_2174 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS173_tree = default(object);
	    object WS175_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_op_2=new RewriteRuleSubtreeStream(adaptor,"rule op_2");
	    RewriteRuleSubtreeStream stream_expression_1=new RewriteRuleSubtreeStream(adaptor,"rule expression_1");
		try { DebugEnterRule(GrammarFileName, "expression_2");
		DebugLocation(254, 1);
		try
		{
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:255:2: ( (a= expression_1 -> $a) ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:255:4: (a= expression_1 -> $a) ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )*
			{
			DebugLocation(255, 4);
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:255:4: (a= expression_1 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:255:5: a= expression_1
			{
			DebugLocation(255, 6);
			PushFollow(Follow._expression_1_in_expression_21609);
			a=expression_1();
			PopFollow();

			stream_expression_1.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 255:19: -> $a
			{
				DebugLocation(255, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(255, 25);
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:255:25: ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )*
			try { DebugEnterSubRule(67);
			while (true)
			{
				int alt67=2;
				try { DebugEnterDecision(67, decisionCanBacktrack[67]);
				int LA67_0 = input.LA(1);

				if ((LA67_0==WS))
				{
					int LA67_1 = input.LA(2);

					if ((LA67_1==119))
					{
						int LA67_4 = input.LA(3);

						if ((LA67_4==WS))
						{
							int LA67_5 = input.LA(4);

							if ((LA67_5==CAST||LA67_5==CONVERT||LA67_5==NUMBER||(LA67_5>=STRING && LA67_5<=SYSTEMVAR)||LA67_5==TOKEN||LA67_5==117))
							{
								alt67 = 1;
							}


						}
						else if ((LA67_4==CAST||LA67_4==CONVERT||LA67_4==NUMBER||(LA67_4>=STRING && LA67_4<=SYSTEMVAR)||LA67_4==TOKEN||LA67_4==117))
						{
							alt67 = 1;
						}


					}
					else if ((LA67_1==115||LA67_1==123))
					{
						alt67 = 1;
					}


				}
				else if ((LA67_0==115||LA67_0==119||LA67_0==123))
				{
					alt67 = 1;
				}


				} finally { DebugExitDecision(67); }
				switch ( alt67 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:255:26: ( WS )? op_2 ( WS )? b= expression_1
					{
					DebugLocation(255, 26);
					// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:255:26: ( WS )?
					int alt65=2;
					try { DebugEnterSubRule(65);
					try { DebugEnterDecision(65, decisionCanBacktrack[65]);
					int LA65_0 = input.LA(1);

					if ((LA65_0==WS))
					{
						alt65 = 1;
					}
					} finally { DebugExitDecision(65); }
					switch (alt65)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:255:26: WS
						{
						DebugLocation(255, 26);
						WS173=(IToken)Match(input,WS,Follow._WS_in_expression_21616);  
						stream_WS.Add(WS173);


						}
						break;

					}
					} finally { DebugExitSubRule(65); }

					DebugLocation(255, 30);
					PushFollow(Follow._op_2_in_expression_21619);
					op_2174=op_2();
					PopFollow();

					stream_op_2.Add(op_2174.Tree);
					DebugLocation(255, 35);
					// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:255:35: ( WS )?
					int alt66=2;
					try { DebugEnterSubRule(66);
					try { DebugEnterDecision(66, decisionCanBacktrack[66]);
					int LA66_0 = input.LA(1);

					if ((LA66_0==WS))
					{
						alt66 = 1;
					}
					} finally { DebugExitDecision(66); }
					switch (alt66)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:255:35: WS
						{
						DebugLocation(255, 35);
						WS175=(IToken)Match(input,WS,Follow._WS_in_expression_21621);  
						stream_WS.Add(WS175);


						}
						break;

					}
					} finally { DebugExitSubRule(66); }

					DebugLocation(255, 40);
					PushFollow(Follow._expression_1_in_expression_21626);
					b=expression_1();
					PopFollow();

					stream_expression_1.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, op_2, expression_2
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 255:54: -> ^( T_OP_BINARY op_2 $expression_2 $b)
					{
						DebugLocation(255, 57);
						// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:255:57: ^( T_OP_BINARY op_2 $expression_2 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(255, 59);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(255, 71);
						adaptor.AddChild(root_1, stream_op_2.NextTree());
						DebugLocation(255, 77);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(255, 91);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop67;
				}
			}

			loop67:
				;

			} finally { DebugExitSubRule(67); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_2", 34);
			LeaveRule("expression_2", 34);
			LeaveRule_expression_2();
	    }
	 	DebugLocation(256, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_2"); }
		return retval;

	}
	// $ANTLR end "expression_2"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_2() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_2() {}

	// $ANTLR start "op_2"
	// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:258:1: op_2 : ( '*' -> T_PRODUCT | '/' -> T_DIVIDE | '%' -> T_MODULO );
	[GrammarRule("op_2")]
	private AstParserRuleReturnScope<object, IToken> op_2()
	{
		EnterRule_op_2();
		EnterRule("op_2", 35);
		TraceIn("op_2", 35);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal176 = default(IToken);
	    IToken char_literal177 = default(IToken);
	    IToken char_literal178 = default(IToken);

	    object char_literal176_tree = default(object);
	    object char_literal177_tree = default(object);
	    object char_literal178_tree = default(object);
	    RewriteRuleITokenStream stream_115=new RewriteRuleITokenStream(adaptor,"token 115");
	    RewriteRuleITokenStream stream_123=new RewriteRuleITokenStream(adaptor,"token 123");
	    RewriteRuleITokenStream stream_119=new RewriteRuleITokenStream(adaptor,"token 119");

		try { DebugEnterRule(GrammarFileName, "op_2");
		DebugLocation(258, 1);
		try
		{
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:258:6: ( '*' -> T_PRODUCT | '/' -> T_DIVIDE | '%' -> T_MODULO )
			int alt68=3;
			try { DebugEnterDecision(68, decisionCanBacktrack[68]);
			switch (input.LA(1))
			{
			case 119:
				{
				alt68 = 1;
				}
				break;
			case 123:
				{
				alt68 = 2;
				}
				break;
			case 115:
				{
				alt68 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 68, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(68); }
			switch (alt68)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:258:8: '*'
				{
				DebugLocation(258, 8);
				char_literal176=(IToken)Match(input,119,Follow._119_in_op_21652);  
				stream_119.Add(char_literal176);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 258:12: -> T_PRODUCT
				{
					DebugLocation(258, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_PRODUCT, "T_PRODUCT"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:259:4: '/'
				{
				DebugLocation(259, 4);
				char_literal177=(IToken)Match(input,123,Follow._123_in_op_21661);  
				stream_123.Add(char_literal177);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 259:8: -> T_DIVIDE
				{
					DebugLocation(259, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_DIVIDE, "T_DIVIDE"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:260:4: '%'
				{
				DebugLocation(260, 4);
				char_literal178=(IToken)Match(input,115,Follow._115_in_op_21670);  
				stream_115.Add(char_literal178);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 260:8: -> T_MODULO
				{
					DebugLocation(260, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MODULO, "T_MODULO"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_2", 35);
			LeaveRule("op_2", 35);
			LeaveRule_op_2();
	    }
	 	DebugLocation(261, 1);
		} finally { DebugExitRule(GrammarFileName, "op_2"); }
		return retval;

	}
	// $ANTLR end "op_2"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_1() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_1() {}

	// $ANTLR start "expression_1"
	// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:263:1: expression_1 : ( '(' ( WS )? op_1 ( WS )? expression_1 ( WS )? ')' -> ^( T_OP_UNARY op_1 expression_1 ) | expression_atom );
	[GrammarRule("expression_1")]
	private AstParserRuleReturnScope<object, IToken> expression_1()
	{
		EnterRule_expression_1();
		EnterRule("expression_1", 36);
		TraceIn("expression_1", 36);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal179 = default(IToken);
	    IToken WS180 = default(IToken);
	    IToken WS182 = default(IToken);
	    IToken WS184 = default(IToken);
	    IToken char_literal185 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> op_1181 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_1183 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_atom186 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal179_tree = default(object);
	    object WS180_tree = default(object);
	    object WS182_tree = default(object);
	    object WS184_tree = default(object);
	    object char_literal185_tree = default(object);
	    RewriteRuleITokenStream stream_117=new RewriteRuleITokenStream(adaptor,"token 117");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_118=new RewriteRuleITokenStream(adaptor,"token 118");
	    RewriteRuleSubtreeStream stream_expression_1=new RewriteRuleSubtreeStream(adaptor,"rule expression_1");
	    RewriteRuleSubtreeStream stream_op_1=new RewriteRuleSubtreeStream(adaptor,"rule op_1");
		try { DebugEnterRule(GrammarFileName, "expression_1");
		DebugLocation(263, 1);
		try
		{
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:265:2: ( '(' ( WS )? op_1 ( WS )? expression_1 ( WS )? ')' -> ^( T_OP_UNARY op_1 expression_1 ) | expression_atom )
			int alt72=2;
			try { DebugEnterDecision(72, decisionCanBacktrack[72]);
			int LA72_0 = input.LA(1);

			if ((LA72_0==117))
			{
				int LA72_1 = input.LA(2);

				if ((LA72_1==WS||LA72_1==120||LA72_1==122||LA72_1==135))
				{
					alt72 = 1;
				}
				else if ((LA72_1==CAST||LA72_1==CONVERT||(LA72_1>=NOT && LA72_1<=NUMBER)||(LA72_1>=STRING && LA72_1<=SYSTEMVAR)||LA72_1==TOKEN||LA72_1==117))
				{
					alt72 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 72, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA72_0==CAST||LA72_0==CONVERT||LA72_0==NUMBER||(LA72_0>=STRING && LA72_0<=SYSTEMVAR)||LA72_0==TOKEN))
			{
				alt72 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 72, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(72); }
			switch (alt72)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:265:4: '(' ( WS )? op_1 ( WS )? expression_1 ( WS )? ')'
				{
				DebugLocation(265, 4);
				char_literal179=(IToken)Match(input,117,Follow._117_in_expression_11688);  
				stream_117.Add(char_literal179);

				DebugLocation(265, 8);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:265:8: ( WS )?
				int alt69=2;
				try { DebugEnterSubRule(69);
				try { DebugEnterDecision(69, decisionCanBacktrack[69]);
				int LA69_0 = input.LA(1);

				if ((LA69_0==WS))
				{
					alt69 = 1;
				}
				} finally { DebugExitDecision(69); }
				switch (alt69)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:265:8: WS
					{
					DebugLocation(265, 8);
					WS180=(IToken)Match(input,WS,Follow._WS_in_expression_11690);  
					stream_WS.Add(WS180);


					}
					break;

				}
				} finally { DebugExitSubRule(69); }

				DebugLocation(265, 12);
				PushFollow(Follow._op_1_in_expression_11693);
				op_1181=op_1();
				PopFollow();

				stream_op_1.Add(op_1181.Tree);
				DebugLocation(265, 17);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:265:17: ( WS )?
				int alt70=2;
				try { DebugEnterSubRule(70);
				try { DebugEnterDecision(70, decisionCanBacktrack[70]);
				int LA70_0 = input.LA(1);

				if ((LA70_0==WS))
				{
					alt70 = 1;
				}
				} finally { DebugExitDecision(70); }
				switch (alt70)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:265:17: WS
					{
					DebugLocation(265, 17);
					WS182=(IToken)Match(input,WS,Follow._WS_in_expression_11695);  
					stream_WS.Add(WS182);


					}
					break;

				}
				} finally { DebugExitSubRule(70); }

				DebugLocation(265, 21);
				PushFollow(Follow._expression_1_in_expression_11698);
				expression_1183=expression_1();
				PopFollow();

				stream_expression_1.Add(expression_1183.Tree);
				DebugLocation(265, 34);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:265:34: ( WS )?
				int alt71=2;
				try { DebugEnterSubRule(71);
				try { DebugEnterDecision(71, decisionCanBacktrack[71]);
				int LA71_0 = input.LA(1);

				if ((LA71_0==WS))
				{
					alt71 = 1;
				}
				} finally { DebugExitDecision(71); }
				switch (alt71)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:265:34: WS
					{
					DebugLocation(265, 34);
					WS184=(IToken)Match(input,WS,Follow._WS_in_expression_11700);  
					stream_WS.Add(WS184);


					}
					break;

				}
				} finally { DebugExitSubRule(71); }

				DebugLocation(265, 38);
				char_literal185=(IToken)Match(input,118,Follow._118_in_expression_11703);  
				stream_118.Add(char_literal185);



				{
				// AST REWRITE
				// elements: expression_1, op_1
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 265:42: -> ^( T_OP_UNARY op_1 expression_1 )
				{
					DebugLocation(265, 45);
					// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:265:45: ^( T_OP_UNARY op_1 expression_1 )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(265, 47);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_UNARY, "T_OP_UNARY"), root_1);

					DebugLocation(265, 58);
					adaptor.AddChild(root_1, stream_op_1.NextTree());
					DebugLocation(265, 63);
					adaptor.AddChild(root_1, stream_expression_1.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:267:4: expression_atom
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(267, 4);
				PushFollow(Follow._expression_atom_in_expression_11720);
				expression_atom186=expression_atom();
				PopFollow();

				adaptor.AddChild(root_0, expression_atom186.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_1", 36);
			LeaveRule("expression_1", 36);
			LeaveRule_expression_1();
	    }
	 	DebugLocation(268, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_1"); }
		return retval;

	}
	// $ANTLR end "expression_1"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_1() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_1() {}

	// $ANTLR start "op_1"
	// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:270:1: op_1 : ( '~' -> T_BITWISE_NOT | '+' -> T_PLUS | '-' -> T_MINUS );
	[GrammarRule("op_1")]
	private AstParserRuleReturnScope<object, IToken> op_1()
	{
		EnterRule_op_1();
		EnterRule("op_1", 37);
		TraceIn("op_1", 37);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal187 = default(IToken);
	    IToken char_literal188 = default(IToken);
	    IToken char_literal189 = default(IToken);

	    object char_literal187_tree = default(object);
	    object char_literal188_tree = default(object);
	    object char_literal189_tree = default(object);
	    RewriteRuleITokenStream stream_135=new RewriteRuleITokenStream(adaptor,"token 135");
	    RewriteRuleITokenStream stream_122=new RewriteRuleITokenStream(adaptor,"token 122");
	    RewriteRuleITokenStream stream_120=new RewriteRuleITokenStream(adaptor,"token 120");

		try { DebugEnterRule(GrammarFileName, "op_1");
		DebugLocation(270, 1);
		try
		{
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:270:6: ( '~' -> T_BITWISE_NOT | '+' -> T_PLUS | '-' -> T_MINUS )
			int alt73=3;
			try { DebugEnterDecision(73, decisionCanBacktrack[73]);
			switch (input.LA(1))
			{
			case 135:
				{
				alt73 = 1;
				}
				break;
			case 120:
				{
				alt73 = 2;
				}
				break;
			case 122:
				{
				alt73 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 73, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(73); }
			switch (alt73)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:270:8: '~'
				{
				DebugLocation(270, 8);
				char_literal187=(IToken)Match(input,135,Follow._135_in_op_11730);  
				stream_135.Add(char_literal187);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 270:12: -> T_BITWISE_NOT
				{
					DebugLocation(270, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_NOT, "T_BITWISE_NOT"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:271:5: '+'
				{
				DebugLocation(271, 5);
				char_literal188=(IToken)Match(input,120,Follow._120_in_op_11740);  
				stream_120.Add(char_literal188);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 271:9: -> T_PLUS
				{
					DebugLocation(271, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_PLUS, "T_PLUS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:272:4: '-'
				{
				DebugLocation(272, 4);
				char_literal189=(IToken)Match(input,122,Follow._122_in_op_11749);  
				stream_122.Add(char_literal189);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 272:8: -> T_MINUS
				{
					DebugLocation(272, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MINUS, "T_MINUS"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_1", 37);
			LeaveRule("op_1", 37);
			LeaveRule_op_1();
	    }
	 	DebugLocation(273, 1);
		} finally { DebugExitRule(GrammarFileName, "op_1"); }
		return retval;

	}
	// $ANTLR end "op_1"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_atom() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_atom() {}

	// $ANTLR start "expression_atom"
	// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:275:1: expression_atom : ( NUMBER -> ^( T_INTEGER NUMBER ) | STRING -> ^( T_STRING STRING ) | SYSTEMVAR -> ^( T_SYSTEMVAR SYSTEMVAR ) | '(' expression ')' -> expression | functioncall | conversion );
	[GrammarRule("expression_atom")]
	private AstParserRuleReturnScope<object, IToken> expression_atom()
	{
		EnterRule_expression_atom();
		EnterRule("expression_atom", 38);
		TraceIn("expression_atom", 38);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken NUMBER190 = default(IToken);
	    IToken STRING191 = default(IToken);
	    IToken SYSTEMVAR192 = default(IToken);
	    IToken char_literal193 = default(IToken);
	    IToken char_literal195 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression194 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> functioncall196 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> conversion197 = default(AstParserRuleReturnScope<object, IToken>);

	    object NUMBER190_tree = default(object);
	    object STRING191_tree = default(object);
	    object SYSTEMVAR192_tree = default(object);
	    object char_literal193_tree = default(object);
	    object char_literal195_tree = default(object);
	    RewriteRuleITokenStream stream_117=new RewriteRuleITokenStream(adaptor,"token 117");
	    RewriteRuleITokenStream stream_SYSTEMVAR=new RewriteRuleITokenStream(adaptor,"token SYSTEMVAR");
	    RewriteRuleITokenStream stream_118=new RewriteRuleITokenStream(adaptor,"token 118");
	    RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
	    RewriteRuleITokenStream stream_NUMBER=new RewriteRuleITokenStream(adaptor,"token NUMBER");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "expression_atom");
		DebugLocation(275, 1);
		try
		{
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:276:2: ( NUMBER -> ^( T_INTEGER NUMBER ) | STRING -> ^( T_STRING STRING ) | SYSTEMVAR -> ^( T_SYSTEMVAR SYSTEMVAR ) | '(' expression ')' -> expression | functioncall | conversion )
			int alt74=6;
			try { DebugEnterDecision(74, decisionCanBacktrack[74]);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt74 = 1;
				}
				break;
			case STRING:
				{
				alt74 = 2;
				}
				break;
			case SYSTEMVAR:
				{
				alt74 = 3;
				}
				break;
			case 117:
				{
				alt74 = 4;
				}
				break;
			case TOKEN:
				{
				alt74 = 5;
				}
				break;
			case CAST:
			case CONVERT:
				{
				alt74 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 74, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(74); }
			switch (alt74)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:276:4: NUMBER
				{
				DebugLocation(276, 4);
				NUMBER190=(IToken)Match(input,NUMBER,Follow._NUMBER_in_expression_atom1764);  
				stream_NUMBER.Add(NUMBER190);



				{
				// AST REWRITE
				// elements: NUMBER
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 276:11: -> ^( T_INTEGER NUMBER )
				{
					DebugLocation(276, 14);
					// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:276:14: ^( T_INTEGER NUMBER )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(276, 16);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_INTEGER, "T_INTEGER"), root_1);

					DebugLocation(276, 26);
					adaptor.AddChild(root_1, stream_NUMBER.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:277:4: STRING
				{
				DebugLocation(277, 4);
				STRING191=(IToken)Match(input,STRING,Follow._STRING_in_expression_atom1777);  
				stream_STRING.Add(STRING191);



				{
				// AST REWRITE
				// elements: STRING
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 277:11: -> ^( T_STRING STRING )
				{
					DebugLocation(277, 14);
					// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:277:14: ^( T_STRING STRING )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(277, 16);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_STRING, "T_STRING"), root_1);

					DebugLocation(277, 25);
					adaptor.AddChild(root_1, stream_STRING.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:278:4: SYSTEMVAR
				{
				DebugLocation(278, 4);
				SYSTEMVAR192=(IToken)Match(input,SYSTEMVAR,Follow._SYSTEMVAR_in_expression_atom1790);  
				stream_SYSTEMVAR.Add(SYSTEMVAR192);



				{
				// AST REWRITE
				// elements: SYSTEMVAR
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 278:14: -> ^( T_SYSTEMVAR SYSTEMVAR )
				{
					DebugLocation(278, 17);
					// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:278:17: ^( T_SYSTEMVAR SYSTEMVAR )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(278, 19);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SYSTEMVAR, "T_SYSTEMVAR"), root_1);

					DebugLocation(278, 31);
					adaptor.AddChild(root_1, stream_SYSTEMVAR.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:279:4: '(' expression ')'
				{
				DebugLocation(279, 4);
				char_literal193=(IToken)Match(input,117,Follow._117_in_expression_atom1803);  
				stream_117.Add(char_literal193);

				DebugLocation(279, 8);
				PushFollow(Follow._expression_in_expression_atom1805);
				expression194=expression();
				PopFollow();

				stream_expression.Add(expression194.Tree);
				DebugLocation(279, 19);
				char_literal195=(IToken)Match(input,118,Follow._118_in_expression_atom1807);  
				stream_118.Add(char_literal195);



				{
				// AST REWRITE
				// elements: expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 279:23: -> expression
				{
					DebugLocation(279, 26);
					adaptor.AddChild(root_0, stream_expression.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:280:4: functioncall
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(280, 4);
				PushFollow(Follow._functioncall_in_expression_atom1816);
				functioncall196=functioncall();
				PopFollow();

				adaptor.AddChild(root_0, functioncall196.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:281:4: conversion
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(281, 4);
				PushFollow(Follow._conversion_in_expression_atom1822);
				conversion197=conversion();
				PopFollow();

				adaptor.AddChild(root_0, conversion197.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_atom", 38);
			LeaveRule("expression_atom", 38);
			LeaveRule_expression_atom();
	    }
	 	DebugLocation(282, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_atom"); }
		return retval;

	}
	// $ANTLR end "expression_atom"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_functioncall() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_functioncall() {}

	// $ANTLR start "functioncall"
	// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:285:1: functioncall : TOKEN ( WS )? '(' ( WS )? ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )? ')' -> ^( T_FUNCTIONCALL TOKEN ( expression )* ) ;
	[GrammarRule("functioncall")]
	private AstParserRuleReturnScope<object, IToken> functioncall()
	{
		EnterRule_functioncall();
		EnterRule("functioncall", 39);
		TraceIn("functioncall", 39);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN198 = default(IToken);
	    IToken WS199 = default(IToken);
	    IToken char_literal200 = default(IToken);
	    IToken WS201 = default(IToken);
	    IToken WS203 = default(IToken);
	    IToken char_literal204 = default(IToken);
	    IToken WS205 = default(IToken);
	    IToken WS207 = default(IToken);
	    IToken char_literal208 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression202 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression206 = default(AstParserRuleReturnScope<object, IToken>);

	    object TOKEN198_tree = default(object);
	    object WS199_tree = default(object);
	    object char_literal200_tree = default(object);
	    object WS201_tree = default(object);
	    object WS203_tree = default(object);
	    object char_literal204_tree = default(object);
	    object WS205_tree = default(object);
	    object WS207_tree = default(object);
	    object char_literal208_tree = default(object);
	    RewriteRuleITokenStream stream_117=new RewriteRuleITokenStream(adaptor,"token 117");
	    RewriteRuleITokenStream stream_121=new RewriteRuleITokenStream(adaptor,"token 121");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_118=new RewriteRuleITokenStream(adaptor,"token 118");
	    RewriteRuleITokenStream stream_TOKEN=new RewriteRuleITokenStream(adaptor,"token TOKEN");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "functioncall");
		DebugLocation(285, 1);
		try
		{
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:286:2: ( TOKEN ( WS )? '(' ( WS )? ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )? ')' -> ^( T_FUNCTIONCALL TOKEN ( expression )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:286:4: TOKEN ( WS )? '(' ( WS )? ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )? ')'
			{
			DebugLocation(286, 4);
			TOKEN198=(IToken)Match(input,TOKEN,Follow._TOKEN_in_functioncall1834);  
			stream_TOKEN.Add(TOKEN198);

			DebugLocation(286, 10);
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:286:10: ( WS )?
			int alt75=2;
			try { DebugEnterSubRule(75);
			try { DebugEnterDecision(75, decisionCanBacktrack[75]);
			int LA75_0 = input.LA(1);

			if ((LA75_0==WS))
			{
				alt75 = 1;
			}
			} finally { DebugExitDecision(75); }
			switch (alt75)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:286:10: WS
				{
				DebugLocation(286, 10);
				WS199=(IToken)Match(input,WS,Follow._WS_in_functioncall1836);  
				stream_WS.Add(WS199);


				}
				break;

			}
			} finally { DebugExitSubRule(75); }

			DebugLocation(286, 14);
			char_literal200=(IToken)Match(input,117,Follow._117_in_functioncall1839);  
			stream_117.Add(char_literal200);

			DebugLocation(286, 18);
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:286:18: ( WS )?
			int alt76=2;
			try { DebugEnterSubRule(76);
			try { DebugEnterDecision(76, decisionCanBacktrack[76]);
			int LA76_0 = input.LA(1);

			if ((LA76_0==WS))
			{
				alt76 = 1;
			}
			} finally { DebugExitDecision(76); }
			switch (alt76)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:286:18: WS
				{
				DebugLocation(286, 18);
				WS201=(IToken)Match(input,WS,Follow._WS_in_functioncall1841);  
				stream_WS.Add(WS201);


				}
				break;

			}
			} finally { DebugExitSubRule(76); }

			DebugLocation(286, 22);
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:286:22: ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )?
			int alt81=2;
			try { DebugEnterSubRule(81);
			try { DebugEnterDecision(81, decisionCanBacktrack[81]);
			int LA81_0 = input.LA(1);

			if ((LA81_0==CAST||LA81_0==CONVERT||(LA81_0>=NOT && LA81_0<=NUMBER)||(LA81_0>=STRING && LA81_0<=SYSTEMVAR)||LA81_0==TOKEN||LA81_0==117))
			{
				alt81 = 1;
			}
			} finally { DebugExitDecision(81); }
			switch (alt81)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:286:23: expression ( WS )? ( ',' ( WS )? expression ( WS )? )*
				{
				DebugLocation(286, 23);
				PushFollow(Follow._expression_in_functioncall1845);
				expression202=expression();
				PopFollow();

				stream_expression.Add(expression202.Tree);
				DebugLocation(286, 34);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:286:34: ( WS )?
				int alt77=2;
				try { DebugEnterSubRule(77);
				try { DebugEnterDecision(77, decisionCanBacktrack[77]);
				int LA77_0 = input.LA(1);

				if ((LA77_0==WS))
				{
					alt77 = 1;
				}
				} finally { DebugExitDecision(77); }
				switch (alt77)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:286:34: WS
					{
					DebugLocation(286, 34);
					WS203=(IToken)Match(input,WS,Follow._WS_in_functioncall1847);  
					stream_WS.Add(WS203);


					}
					break;

				}
				} finally { DebugExitSubRule(77); }

				DebugLocation(286, 38);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:286:38: ( ',' ( WS )? expression ( WS )? )*
				try { DebugEnterSubRule(80);
				while (true)
				{
					int alt80=2;
					try { DebugEnterDecision(80, decisionCanBacktrack[80]);
					int LA80_0 = input.LA(1);

					if ((LA80_0==121))
					{
						alt80 = 1;
					}


					} finally { DebugExitDecision(80); }
					switch ( alt80 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:286:39: ',' ( WS )? expression ( WS )?
						{
						DebugLocation(286, 39);
						char_literal204=(IToken)Match(input,121,Follow._121_in_functioncall1851);  
						stream_121.Add(char_literal204);

						DebugLocation(286, 43);
						// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:286:43: ( WS )?
						int alt78=2;
						try { DebugEnterSubRule(78);
						try { DebugEnterDecision(78, decisionCanBacktrack[78]);
						int LA78_0 = input.LA(1);

						if ((LA78_0==WS))
						{
							alt78 = 1;
						}
						} finally { DebugExitDecision(78); }
						switch (alt78)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:286:43: WS
							{
							DebugLocation(286, 43);
							WS205=(IToken)Match(input,WS,Follow._WS_in_functioncall1853);  
							stream_WS.Add(WS205);


							}
							break;

						}
						} finally { DebugExitSubRule(78); }

						DebugLocation(286, 47);
						PushFollow(Follow._expression_in_functioncall1856);
						expression206=expression();
						PopFollow();

						stream_expression.Add(expression206.Tree);
						DebugLocation(286, 58);
						// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:286:58: ( WS )?
						int alt79=2;
						try { DebugEnterSubRule(79);
						try { DebugEnterDecision(79, decisionCanBacktrack[79]);
						int LA79_0 = input.LA(1);

						if ((LA79_0==WS))
						{
							alt79 = 1;
						}
						} finally { DebugExitDecision(79); }
						switch (alt79)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:286:58: WS
							{
							DebugLocation(286, 58);
							WS207=(IToken)Match(input,WS,Follow._WS_in_functioncall1858);  
							stream_WS.Add(WS207);


							}
							break;

						}
						} finally { DebugExitSubRule(79); }


						}
						break;

					default:
						goto loop80;
					}
				}

				loop80:
					;

				} finally { DebugExitSubRule(80); }


				}
				break;

			}
			} finally { DebugExitSubRule(81); }

			DebugLocation(286, 66);
			char_literal208=(IToken)Match(input,118,Follow._118_in_functioncall1865);  
			stream_118.Add(char_literal208);



			{
			// AST REWRITE
			// elements: expression, TOKEN
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 287:2: -> ^( T_FUNCTIONCALL TOKEN ( expression )* )
			{
				DebugLocation(287, 5);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:287:5: ^( T_FUNCTIONCALL TOKEN ( expression )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(287, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

				DebugLocation(287, 22);
				adaptor.AddChild(root_1, stream_TOKEN.NextNode());
				DebugLocation(287, 28);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:287:28: ( expression )*
				while ( stream_expression.HasNext )
				{
					DebugLocation(287, 28);
					adaptor.AddChild(root_1, stream_expression.NextTree());

				}
				stream_expression.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("functioncall", 39);
			LeaveRule("functioncall", 39);
			LeaveRule_functioncall();
	    }
	 	DebugLocation(288, 1);
		} finally { DebugExitRule(GrammarFileName, "functioncall"); }
		return retval;

	}
	// $ANTLR end "functioncall"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_conversion() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_conversion() {}

	// $ANTLR start "conversion"
	// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:290:1: conversion : ( CONVERT ( WS )? '(' ( WS )? TOKEN ( WS )? ',' ( WS )? expression ( WS )? ')' -> ^( T_CONVERT TOKEN expression ) | CAST ( WS )? '(' ( WS )? expression WS AS WS TOKEN ( WS )? ')' -> ^( T_CONVERT TOKEN expression ) );
	[GrammarRule("conversion")]
	private AstParserRuleReturnScope<object, IToken> conversion()
	{
		EnterRule_conversion();
		EnterRule("conversion", 40);
		TraceIn("conversion", 40);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken CONVERT209 = default(IToken);
	    IToken WS210 = default(IToken);
	    IToken char_literal211 = default(IToken);
	    IToken WS212 = default(IToken);
	    IToken TOKEN213 = default(IToken);
	    IToken WS214 = default(IToken);
	    IToken char_literal215 = default(IToken);
	    IToken WS216 = default(IToken);
	    IToken WS218 = default(IToken);
	    IToken char_literal219 = default(IToken);
	    IToken CAST220 = default(IToken);
	    IToken WS221 = default(IToken);
	    IToken char_literal222 = default(IToken);
	    IToken WS223 = default(IToken);
	    IToken WS225 = default(IToken);
	    IToken AS226 = default(IToken);
	    IToken WS227 = default(IToken);
	    IToken TOKEN228 = default(IToken);
	    IToken WS229 = default(IToken);
	    IToken char_literal230 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression217 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression224 = default(AstParserRuleReturnScope<object, IToken>);

	    object CONVERT209_tree = default(object);
	    object WS210_tree = default(object);
	    object char_literal211_tree = default(object);
	    object WS212_tree = default(object);
	    object TOKEN213_tree = default(object);
	    object WS214_tree = default(object);
	    object char_literal215_tree = default(object);
	    object WS216_tree = default(object);
	    object WS218_tree = default(object);
	    object char_literal219_tree = default(object);
	    object CAST220_tree = default(object);
	    object WS221_tree = default(object);
	    object char_literal222_tree = default(object);
	    object WS223_tree = default(object);
	    object WS225_tree = default(object);
	    object AS226_tree = default(object);
	    object WS227_tree = default(object);
	    object TOKEN228_tree = default(object);
	    object WS229_tree = default(object);
	    object char_literal230_tree = default(object);
	    RewriteRuleITokenStream stream_CAST=new RewriteRuleITokenStream(adaptor,"token CAST");
	    RewriteRuleITokenStream stream_AS=new RewriteRuleITokenStream(adaptor,"token AS");
	    RewriteRuleITokenStream stream_117=new RewriteRuleITokenStream(adaptor,"token 117");
	    RewriteRuleITokenStream stream_121=new RewriteRuleITokenStream(adaptor,"token 121");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_CONVERT=new RewriteRuleITokenStream(adaptor,"token CONVERT");
	    RewriteRuleITokenStream stream_118=new RewriteRuleITokenStream(adaptor,"token 118");
	    RewriteRuleITokenStream stream_TOKEN=new RewriteRuleITokenStream(adaptor,"token TOKEN");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "conversion");
		DebugLocation(290, 1);
		try
		{
			// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:291:2: ( CONVERT ( WS )? '(' ( WS )? TOKEN ( WS )? ',' ( WS )? expression ( WS )? ')' -> ^( T_CONVERT TOKEN expression ) | CAST ( WS )? '(' ( WS )? expression WS AS WS TOKEN ( WS )? ')' -> ^( T_CONVERT TOKEN expression ) )
			int alt90=2;
			try { DebugEnterDecision(90, decisionCanBacktrack[90]);
			int LA90_0 = input.LA(1);

			if ((LA90_0==CONVERT))
			{
				alt90 = 1;
			}
			else if ((LA90_0==CAST))
			{
				alt90 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 90, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(90); }
			switch (alt90)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:291:4: CONVERT ( WS )? '(' ( WS )? TOKEN ( WS )? ',' ( WS )? expression ( WS )? ')'
				{
				DebugLocation(291, 4);
				CONVERT209=(IToken)Match(input,CONVERT,Follow._CONVERT_in_conversion1889);  
				stream_CONVERT.Add(CONVERT209);

				DebugLocation(291, 12);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:291:12: ( WS )?
				int alt82=2;
				try { DebugEnterSubRule(82);
				try { DebugEnterDecision(82, decisionCanBacktrack[82]);
				int LA82_0 = input.LA(1);

				if ((LA82_0==WS))
				{
					alt82 = 1;
				}
				} finally { DebugExitDecision(82); }
				switch (alt82)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:291:12: WS
					{
					DebugLocation(291, 12);
					WS210=(IToken)Match(input,WS,Follow._WS_in_conversion1891);  
					stream_WS.Add(WS210);


					}
					break;

				}
				} finally { DebugExitSubRule(82); }

				DebugLocation(291, 16);
				char_literal211=(IToken)Match(input,117,Follow._117_in_conversion1894);  
				stream_117.Add(char_literal211);

				DebugLocation(291, 20);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:291:20: ( WS )?
				int alt83=2;
				try { DebugEnterSubRule(83);
				try { DebugEnterDecision(83, decisionCanBacktrack[83]);
				int LA83_0 = input.LA(1);

				if ((LA83_0==WS))
				{
					alt83 = 1;
				}
				} finally { DebugExitDecision(83); }
				switch (alt83)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:291:20: WS
					{
					DebugLocation(291, 20);
					WS212=(IToken)Match(input,WS,Follow._WS_in_conversion1896);  
					stream_WS.Add(WS212);


					}
					break;

				}
				} finally { DebugExitSubRule(83); }

				DebugLocation(291, 24);
				TOKEN213=(IToken)Match(input,TOKEN,Follow._TOKEN_in_conversion1899);  
				stream_TOKEN.Add(TOKEN213);

				DebugLocation(291, 30);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:291:30: ( WS )?
				int alt84=2;
				try { DebugEnterSubRule(84);
				try { DebugEnterDecision(84, decisionCanBacktrack[84]);
				int LA84_0 = input.LA(1);

				if ((LA84_0==WS))
				{
					alt84 = 1;
				}
				} finally { DebugExitDecision(84); }
				switch (alt84)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:291:30: WS
					{
					DebugLocation(291, 30);
					WS214=(IToken)Match(input,WS,Follow._WS_in_conversion1901);  
					stream_WS.Add(WS214);


					}
					break;

				}
				} finally { DebugExitSubRule(84); }

				DebugLocation(291, 34);
				char_literal215=(IToken)Match(input,121,Follow._121_in_conversion1904);  
				stream_121.Add(char_literal215);

				DebugLocation(291, 38);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:291:38: ( WS )?
				int alt85=2;
				try { DebugEnterSubRule(85);
				try { DebugEnterDecision(85, decisionCanBacktrack[85]);
				int LA85_0 = input.LA(1);

				if ((LA85_0==WS))
				{
					alt85 = 1;
				}
				} finally { DebugExitDecision(85); }
				switch (alt85)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:291:38: WS
					{
					DebugLocation(291, 38);
					WS216=(IToken)Match(input,WS,Follow._WS_in_conversion1906);  
					stream_WS.Add(WS216);


					}
					break;

				}
				} finally { DebugExitSubRule(85); }

				DebugLocation(291, 42);
				PushFollow(Follow._expression_in_conversion1909);
				expression217=expression();
				PopFollow();

				stream_expression.Add(expression217.Tree);
				DebugLocation(291, 53);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:291:53: ( WS )?
				int alt86=2;
				try { DebugEnterSubRule(86);
				try { DebugEnterDecision(86, decisionCanBacktrack[86]);
				int LA86_0 = input.LA(1);

				if ((LA86_0==WS))
				{
					alt86 = 1;
				}
				} finally { DebugExitDecision(86); }
				switch (alt86)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:291:53: WS
					{
					DebugLocation(291, 53);
					WS218=(IToken)Match(input,WS,Follow._WS_in_conversion1911);  
					stream_WS.Add(WS218);


					}
					break;

				}
				} finally { DebugExitSubRule(86); }

				DebugLocation(291, 57);
				char_literal219=(IToken)Match(input,118,Follow._118_in_conversion1914);  
				stream_118.Add(char_literal219);



				{
				// AST REWRITE
				// elements: expression, TOKEN
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 291:61: -> ^( T_CONVERT TOKEN expression )
				{
					DebugLocation(291, 64);
					// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:291:64: ^( T_CONVERT TOKEN expression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(291, 66);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CONVERT, "T_CONVERT"), root_1);

					DebugLocation(291, 76);
					adaptor.AddChild(root_1, stream_TOKEN.NextNode());
					DebugLocation(291, 82);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:292:4: CAST ( WS )? '(' ( WS )? expression WS AS WS TOKEN ( WS )? ')'
				{
				DebugLocation(292, 4);
				CAST220=(IToken)Match(input,CAST,Follow._CAST_in_conversion1929);  
				stream_CAST.Add(CAST220);

				DebugLocation(292, 9);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:292:9: ( WS )?
				int alt87=2;
				try { DebugEnterSubRule(87);
				try { DebugEnterDecision(87, decisionCanBacktrack[87]);
				int LA87_0 = input.LA(1);

				if ((LA87_0==WS))
				{
					alt87 = 1;
				}
				} finally { DebugExitDecision(87); }
				switch (alt87)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:292:9: WS
					{
					DebugLocation(292, 9);
					WS221=(IToken)Match(input,WS,Follow._WS_in_conversion1931);  
					stream_WS.Add(WS221);


					}
					break;

				}
				} finally { DebugExitSubRule(87); }

				DebugLocation(292, 13);
				char_literal222=(IToken)Match(input,117,Follow._117_in_conversion1934);  
				stream_117.Add(char_literal222);

				DebugLocation(292, 17);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:292:17: ( WS )?
				int alt88=2;
				try { DebugEnterSubRule(88);
				try { DebugEnterDecision(88, decisionCanBacktrack[88]);
				int LA88_0 = input.LA(1);

				if ((LA88_0==WS))
				{
					alt88 = 1;
				}
				} finally { DebugExitDecision(88); }
				switch (alt88)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:292:17: WS
					{
					DebugLocation(292, 17);
					WS223=(IToken)Match(input,WS,Follow._WS_in_conversion1936);  
					stream_WS.Add(WS223);


					}
					break;

				}
				} finally { DebugExitSubRule(88); }

				DebugLocation(292, 21);
				PushFollow(Follow._expression_in_conversion1939);
				expression224=expression();
				PopFollow();

				stream_expression.Add(expression224.Tree);
				DebugLocation(292, 32);
				WS225=(IToken)Match(input,WS,Follow._WS_in_conversion1941);  
				stream_WS.Add(WS225);

				DebugLocation(292, 35);
				AS226=(IToken)Match(input,AS,Follow._AS_in_conversion1943);  
				stream_AS.Add(AS226);

				DebugLocation(292, 38);
				WS227=(IToken)Match(input,WS,Follow._WS_in_conversion1945);  
				stream_WS.Add(WS227);

				DebugLocation(292, 41);
				TOKEN228=(IToken)Match(input,TOKEN,Follow._TOKEN_in_conversion1947);  
				stream_TOKEN.Add(TOKEN228);

				DebugLocation(292, 47);
				// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:292:47: ( WS )?
				int alt89=2;
				try { DebugEnterSubRule(89);
				try { DebugEnterDecision(89, decisionCanBacktrack[89]);
				int LA89_0 = input.LA(1);

				if ((LA89_0==WS))
				{
					alt89 = 1;
				}
				} finally { DebugExitDecision(89); }
				switch (alt89)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:292:47: WS
					{
					DebugLocation(292, 47);
					WS229=(IToken)Match(input,WS,Follow._WS_in_conversion1949);  
					stream_WS.Add(WS229);


					}
					break;

				}
				} finally { DebugExitSubRule(89); }

				DebugLocation(292, 51);
				char_literal230=(IToken)Match(input,118,Follow._118_in_conversion1952);  
				stream_118.Add(char_literal230);



				{
				// AST REWRITE
				// elements: TOKEN, expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 292:55: -> ^( T_CONVERT TOKEN expression )
				{
					DebugLocation(292, 58);
					// C:\\Users\\wim.devos\\Documents\\MonoDevelop\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:292:58: ^( T_CONVERT TOKEN expression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(292, 60);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CONVERT, "T_CONVERT"), root_1);

					DebugLocation(292, 70);
					adaptor.AddChild(root_1, stream_TOKEN.NextNode());
					DebugLocation(292, 76);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conversion", 40);
			LeaveRule("conversion", 40);
			LeaveRule_conversion();
	    }
	 	DebugLocation(293, 1);
		} finally { DebugExitRule(GrammarFileName, "conversion"); }
		return retval;

	}
	// $ANTLR end "conversion"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _WS_in_parse284 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _commands_in_parse288 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _WS_in_parse290 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_parse295 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _command_in_commands318 = new BitSet(new ulong[]{0x200000000002UL,0x1000100000000000UL});
		public static readonly BitSet _WS_in_commands321 = new BitSet(new ulong[]{0x200000000000UL,0x1000000000000000UL});
		public static readonly BitSet _124_in_commands325 = new BitSet(new ulong[]{0x200000000000UL,0x100000000000UL});
		public static readonly BitSet _WS_in_commands327 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _command_in_commands332 = new BitSet(new ulong[]{0x200000000002UL,0x1000100000000000UL});
		public static readonly BitSet _select_command_in_command352 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SELECT_in_select_command363 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _WS_in_select_command366 = new BitSet(new ulong[]{0x100020UL});
		public static readonly BitSet _distinct_clause_in_select_command368 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _WS_in_select_command373 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _top_clause_in_select_command375 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _WS_in_select_command379 = new BitSet(new ulong[]{0xB003000014000UL,0xA0000000000000UL});
		public static readonly BitSet _column_list_in_select_command381 = new BitSet(new ulong[]{0x2UL,0x100000000000UL});
		public static readonly BitSet _WS_in_select_command384 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _into_clause_in_select_command386 = new BitSet(new ulong[]{0x2UL,0x100000000000UL});
		public static readonly BitSet _WS_in_select_command391 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _from_clause_in_select_command393 = new BitSet(new ulong[]{0x2UL,0x100000000000UL});
		public static readonly BitSet _WS_in_select_command398 = new BitSet(new ulong[]{0x0UL,0x80000000000UL});
		public static readonly BitSet _where_clause_in_select_command400 = new BitSet(new ulong[]{0x2UL,0x100000000000UL});
		public static readonly BitSet _WS_in_select_command405 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _orderby_clause_in_select_command407 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DISTINCT_in_distinct_clause449 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ALL_in_distinct_clause458 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOP_in_top_clause474 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _WS_in_top_clause476 = new BitSet(new ulong[]{0xB003000014000UL,0x20000000000000UL});
		public static readonly BitSet _expression_in_top_clause478 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _column_in_column_list500 = new BitSet(new ulong[]{0x2UL,0x200100000000000UL});
		public static readonly BitSet _WS_in_column_list503 = new BitSet(new ulong[]{0x0UL,0x200000000000000UL});
		public static readonly BitSet _121_in_column_list506 = new BitSet(new ulong[]{0xB003000014000UL,0xA0100000000000UL});
		public static readonly BitSet _WS_in_column_list508 = new BitSet(new ulong[]{0xB003000014000UL,0xA0000000000000UL});
		public static readonly BitSet _column_in_column_list511 = new BitSet(new ulong[]{0x2UL,0x200100000000000UL});
		public static readonly BitSet _119_in_column535 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_column539 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INTO_in_into_clause549 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _WS_in_into_clause551 = new BitSet(new ulong[]{0x400000000000UL,0x0UL,0x8UL});
		public static readonly BitSet _file_in_into_clause553 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FROM_in_from_clause573 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _WS_in_from_clause575 = new BitSet(new ulong[]{0x1400000000000UL,0x20000000000000UL,0x8UL});
		public static readonly BitSet _from_clause_item_in_from_clause577 = new BitSet(new ulong[]{0x2UL,0x200100000000000UL});
		public static readonly BitSet _WS_in_from_clause580 = new BitSet(new ulong[]{0x0UL,0x200000000000000UL});
		public static readonly BitSet _121_in_from_clause583 = new BitSet(new ulong[]{0x1400000000000UL,0x20100000000000UL,0x8UL});
		public static readonly BitSet _WS_in_from_clause585 = new BitSet(new ulong[]{0x1400000000000UL,0x20000000000000UL,0x8UL});
		public static readonly BitSet _from_clause_item_in_from_clause588 = new BitSet(new ulong[]{0x2UL,0x200100000000000UL});
		public static readonly BitSet _STRING_in_from_clause_item611 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _file_in_from_clause_item624 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _117_in_from_clause_item629 = new BitSet(new ulong[]{0x200000000000UL,0x100000000000UL});
		public static readonly BitSet _WS_in_from_clause_item631 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _select_command_in_from_clause_item634 = new BitSet(new ulong[]{0x0UL,0x40100000000000UL});
		public static readonly BitSet _WS_in_from_clause_item636 = new BitSet(new ulong[]{0x0UL,0x40000000000000UL});
		public static readonly BitSet _118_in_from_clause_item639 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _131_in_file658 = new BitSet(new ulong[]{0x1000000000000UL,0x100000000000UL});
		public static readonly BitSet _WS_in_file660 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _STRING_in_file663 = new BitSet(new ulong[]{0x0UL,0x100000000000UL,0x10UL});
		public static readonly BitSet _WS_in_file666 = new BitSet(new ulong[]{0x0UL,0x400000000000000UL});
		public static readonly BitSet _file_option_in_file668 = new BitSet(new ulong[]{0x0UL,0x100000000000UL,0x10UL});
		public static readonly BitSet _WS_in_file672 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10UL});
		public static readonly BitSet _132_in_file675 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SIMPLE_FILE_in_file692 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _122_in_file_option709 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _file_option_name_in_file_option711 = new BitSet(new ulong[]{0x2UL,0x100000000000UL,0x1UL});
		public static readonly BitSet _WS_in_file_option715 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1UL});
		public static readonly BitSet _128_in_file_option718 = new BitSet(new ulong[]{0x9002000000000UL,0x100000000000UL});
		public static readonly BitSet _WS_in_file_option720 = new BitSet(new ulong[]{0x9002000000000UL});
		public static readonly BitSet _file_option_value_in_file_option723 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_file_option_name747 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHERE_in_where_clause779 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _WS_in_where_clause781 = new BitSet(new ulong[]{0xB003000014000UL,0x20000000000000UL});
		public static readonly BitSet _expression_in_where_clause783 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ORDER_in_orderby_clause804 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _WS_in_orderby_clause806 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _BY_in_orderby_clause808 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _WS_in_orderby_clause810 = new BitSet(new ulong[]{0xB003000014000UL,0x20000000000000UL});
		public static readonly BitSet _orderby_column_list_in_orderby_clause812 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _orderby_column_in_orderby_column_list833 = new BitSet(new ulong[]{0x2UL,0x200100000000000UL});
		public static readonly BitSet _WS_in_orderby_column_list836 = new BitSet(new ulong[]{0x0UL,0x200000000000000UL});
		public static readonly BitSet _121_in_orderby_column_list839 = new BitSet(new ulong[]{0xB003000014000UL,0x20100000000000UL});
		public static readonly BitSet _WS_in_orderby_column_list841 = new BitSet(new ulong[]{0xB003000014000UL,0x20000000000000UL});
		public static readonly BitSet _orderby_column_in_orderby_column_list844 = new BitSet(new ulong[]{0x2UL,0x200100000000000UL});
		public static readonly BitSet _expression_in_orderby_column864 = new BitSet(new ulong[]{0x2UL,0x100000000000UL});
		public static readonly BitSet _WS_in_orderby_column867 = new BitSet(new ulong[]{0x40200UL});
		public static readonly BitSet _orderby_direction_in_orderby_column869 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASC_in_orderby_direction894 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DESC_in_orderby_direction903 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_expression_list921 = new BitSet(new ulong[]{0x0UL,0x200100000000000UL});
		public static readonly BitSet _WS_in_expression_list924 = new BitSet(new ulong[]{0x0UL,0x200000000000000UL});
		public static readonly BitSet _121_in_expression_list927 = new BitSet(new ulong[]{0xB003000014000UL,0x20100000000000UL});
		public static readonly BitSet _WS_in_expression_list929 = new BitSet(new ulong[]{0xB003000014000UL,0x20000000000000UL});
		public static readonly BitSet _expression_in_expression_list932 = new BitSet(new ulong[]{0x2UL,0x200100000000000UL});
		public static readonly BitSet _expression_list_in_expression_list_or_select_command955 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _select_command_in_expression_list_or_select_command959 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_7_in_expression971 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_6_in_expression_7987 = new BitSet(new ulong[]{0x2UL,0x100000000000UL});
		public static readonly BitSet _WS_in_expression_7994 = new BitSet(new ulong[]{0x9508000800UL,0xE007000000000000UL,0x7UL});
		public static readonly BitSet _op_7_in_expression_7999 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _WS_in_expression_71001 = new BitSet(new ulong[]{0xB003000014000UL,0x20000000000000UL});
		public static readonly BitSet _expression_6_in_expression_71005 = new BitSet(new ulong[]{0x2UL,0x100000000000UL});
		public static readonly BitSet _IN_in_expression_71024 = new BitSet(new ulong[]{0x0UL,0x20100000000000UL});
		public static readonly BitSet _WS_in_expression_71026 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _117_in_expression_71029 = new BitSet(new ulong[]{0xB203000014000UL,0x20100000000000UL});
		public static readonly BitSet _WS_in_expression_71031 = new BitSet(new ulong[]{0xB203000014000UL,0x20000000000000UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_71034 = new BitSet(new ulong[]{0x0UL,0x40100000000000UL});
		public static readonly BitSet _WS_in_expression_71036 = new BitSet(new ulong[]{0x0UL,0x40000000000000UL});
		public static readonly BitSet _118_in_expression_71039 = new BitSet(new ulong[]{0x2UL,0x100000000000UL});
		public static readonly BitSet _NOT_in_expression_71057 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _WS_in_expression_71059 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _IN_in_expression_71061 = new BitSet(new ulong[]{0x0UL,0x20100000000000UL});
		public static readonly BitSet _WS_in_expression_71063 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _117_in_expression_71066 = new BitSet(new ulong[]{0xB203000014000UL,0x20100000000000UL});
		public static readonly BitSet _WS_in_expression_71068 = new BitSet(new ulong[]{0xB203000014000UL,0x20000000000000UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_71072 = new BitSet(new ulong[]{0x0UL,0x40100000000000UL});
		public static readonly BitSet _WS_in_expression_71075 = new BitSet(new ulong[]{0x0UL,0x40000000000000UL});
		public static readonly BitSet _118_in_expression_71078 = new BitSet(new ulong[]{0x2UL,0x100000000000UL});
		public static readonly BitSet _op_4_in_expression_71096 = new BitSet(new ulong[]{0x800000000080UL,0x100000000000UL});
		public static readonly BitSet _WS_in_expression_71098 = new BitSet(new ulong[]{0x800000000080UL});
		public static readonly BitSet _SOME_in_expression_71102 = new BitSet(new ulong[]{0x0UL,0x20100000000000UL});
		public static readonly BitSet _ANY_in_expression_71106 = new BitSet(new ulong[]{0x0UL,0x20100000000000UL});
		public static readonly BitSet _WS_in_expression_71109 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _117_in_expression_71112 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _select_command_in_expression_71114 = new BitSet(new ulong[]{0x0UL,0x40000000000000UL});
		public static readonly BitSet _118_in_expression_71116 = new BitSet(new ulong[]{0x2UL,0x100000000000UL});
		public static readonly BitSet _op_4_in_expression_71134 = new BitSet(new ulong[]{0x20UL,0x100000000000UL});
		public static readonly BitSet _WS_in_expression_71136 = new BitSet(new ulong[]{0x20UL});
		public static readonly BitSet _ALL_in_expression_71139 = new BitSet(new ulong[]{0x0UL,0x20100000000000UL});
		public static readonly BitSet _WS_in_expression_71141 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _117_in_expression_71144 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _select_command_in_expression_71146 = new BitSet(new ulong[]{0x0UL,0x40000000000000UL});
		public static readonly BitSet _118_in_expression_71148 = new BitSet(new ulong[]{0x2UL,0x100000000000UL});
		public static readonly BitSet _OR_in_op_71176 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LIKE_in_op_71185 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_71194 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _WS_in_op_71196 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _LIKE_in_op_71198 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MATCH_in_op_71207 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_71216 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _WS_in_op_71218 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _MATCH_in_op_71220 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BETWEEN_in_op_71229 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_71238 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _WS_in_op_71240 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _BETWEEN_in_op_71242 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_5_in_expression_61261 = new BitSet(new ulong[]{0x2UL,0x100000000000UL});
		public static readonly BitSet _WS_in_expression_61268 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _op_6_in_expression_61270 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _WS_in_expression_61272 = new BitSet(new ulong[]{0xB003000014000UL,0x20000000000000UL});
		public static readonly BitSet _expression_5_in_expression_61276 = new BitSet(new ulong[]{0x2UL,0x100000000000UL});
		public static readonly BitSet _AND_in_op_61304 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _op_5_in_expression_51322 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _WS_in_expression_51324 = new BitSet(new ulong[]{0xB003000014000UL,0x20000000000000UL});
		public static readonly BitSet _expression_5_in_expression_51326 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_4_in_expression_51341 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_51352 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_3_in_expression_41371 = new BitSet(new ulong[]{0x2UL,0xE007100000000000UL,0x7UL});
		public static readonly BitSet _WS_in_expression_41378 = new BitSet(new ulong[]{0x0UL,0xE007000000000000UL,0x7UL});
		public static readonly BitSet _op_4_in_expression_41381 = new BitSet(new ulong[]{0xB002000014000UL,0x20100000000000UL});
		public static readonly BitSet _WS_in_expression_41383 = new BitSet(new ulong[]{0xB002000014000UL,0x20000000000000UL});
		public static readonly BitSet _expression_3_in_expression_41388 = new BitSet(new ulong[]{0x2UL,0xE007100000000000UL,0x7UL});
		public static readonly BitSet _128_in_op_41414 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _130_in_op_41423 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _126_in_op_41433 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _127_in_op_41443 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _113_in_op_41452 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _114_in_op_41461 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _112_in_op_41470 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _129_in_op_41479 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _125_in_op_41489 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_2_in_expression_31508 = new BitSet(new ulong[]{0x2UL,0x510100000000000UL,0x60UL});
		public static readonly BitSet _WS_in_expression_31515 = new BitSet(new ulong[]{0x0UL,0x510000000000000UL,0x60UL});
		public static readonly BitSet _op_3_in_expression_31518 = new BitSet(new ulong[]{0xB002000014000UL,0x20100000000000UL});
		public static readonly BitSet _WS_in_expression_31520 = new BitSet(new ulong[]{0xB002000014000UL,0x20000000000000UL});
		public static readonly BitSet _expression_2_in_expression_31525 = new BitSet(new ulong[]{0x2UL,0x510100000000000UL,0x60UL});
		public static readonly BitSet _120_in_op_31551 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _122_in_op_31560 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _116_in_op_31569 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _134_in_op_31578 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _133_in_op_31587 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_1_in_expression_21609 = new BitSet(new ulong[]{0x2UL,0x888100000000000UL});
		public static readonly BitSet _WS_in_expression_21616 = new BitSet(new ulong[]{0x0UL,0x888000000000000UL});
		public static readonly BitSet _op_2_in_expression_21619 = new BitSet(new ulong[]{0xB002000014000UL,0x20100000000000UL});
		public static readonly BitSet _WS_in_expression_21621 = new BitSet(new ulong[]{0xB002000014000UL,0x20000000000000UL});
		public static readonly BitSet _expression_1_in_expression_21626 = new BitSet(new ulong[]{0x2UL,0x888100000000000UL});
		public static readonly BitSet _119_in_op_21652 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _123_in_op_21661 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _115_in_op_21670 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _117_in_expression_11688 = new BitSet(new ulong[]{0x0UL,0x500100000000000UL,0x80UL});
		public static readonly BitSet _WS_in_expression_11690 = new BitSet(new ulong[]{0x0UL,0x500000000000000UL,0x80UL});
		public static readonly BitSet _op_1_in_expression_11693 = new BitSet(new ulong[]{0xB002000014000UL,0x20100000000000UL});
		public static readonly BitSet _WS_in_expression_11695 = new BitSet(new ulong[]{0xB002000014000UL,0x20000000000000UL});
		public static readonly BitSet _expression_1_in_expression_11698 = new BitSet(new ulong[]{0x0UL,0x40100000000000UL});
		public static readonly BitSet _WS_in_expression_11700 = new BitSet(new ulong[]{0x0UL,0x40000000000000UL});
		public static readonly BitSet _118_in_expression_11703 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_atom_in_expression_11720 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _135_in_op_11730 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _120_in_op_11740 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _122_in_op_11749 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_expression_atom1764 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_expression_atom1777 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SYSTEMVAR_in_expression_atom1790 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _117_in_expression_atom1803 = new BitSet(new ulong[]{0xB003000014000UL,0x20000000000000UL});
		public static readonly BitSet _expression_in_expression_atom1805 = new BitSet(new ulong[]{0x0UL,0x40000000000000UL});
		public static readonly BitSet _118_in_expression_atom1807 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functioncall_in_expression_atom1816 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conversion_in_expression_atom1822 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_functioncall1834 = new BitSet(new ulong[]{0x0UL,0x20100000000000UL});
		public static readonly BitSet _WS_in_functioncall1836 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _117_in_functioncall1839 = new BitSet(new ulong[]{0xB003000014000UL,0x60100000000000UL});
		public static readonly BitSet _WS_in_functioncall1841 = new BitSet(new ulong[]{0xB003000014000UL,0x60000000000000UL});
		public static readonly BitSet _expression_in_functioncall1845 = new BitSet(new ulong[]{0x0UL,0x240100000000000UL});
		public static readonly BitSet _WS_in_functioncall1847 = new BitSet(new ulong[]{0x0UL,0x240000000000000UL});
		public static readonly BitSet _121_in_functioncall1851 = new BitSet(new ulong[]{0xB003000014000UL,0x20100000000000UL});
		public static readonly BitSet _WS_in_functioncall1853 = new BitSet(new ulong[]{0xB003000014000UL,0x20000000000000UL});
		public static readonly BitSet _expression_in_functioncall1856 = new BitSet(new ulong[]{0x0UL,0x240100000000000UL});
		public static readonly BitSet _WS_in_functioncall1858 = new BitSet(new ulong[]{0x0UL,0x240000000000000UL});
		public static readonly BitSet _118_in_functioncall1865 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CONVERT_in_conversion1889 = new BitSet(new ulong[]{0x0UL,0x20100000000000UL});
		public static readonly BitSet _WS_in_conversion1891 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _117_in_conversion1894 = new BitSet(new ulong[]{0x8000000000000UL,0x100000000000UL});
		public static readonly BitSet _WS_in_conversion1896 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _TOKEN_in_conversion1899 = new BitSet(new ulong[]{0x0UL,0x200100000000000UL});
		public static readonly BitSet _WS_in_conversion1901 = new BitSet(new ulong[]{0x0UL,0x200000000000000UL});
		public static readonly BitSet _121_in_conversion1904 = new BitSet(new ulong[]{0xB003000014000UL,0x20100000000000UL});
		public static readonly BitSet _WS_in_conversion1906 = new BitSet(new ulong[]{0xB003000014000UL,0x20000000000000UL});
		public static readonly BitSet _expression_in_conversion1909 = new BitSet(new ulong[]{0x0UL,0x40100000000000UL});
		public static readonly BitSet _WS_in_conversion1911 = new BitSet(new ulong[]{0x0UL,0x40000000000000UL});
		public static readonly BitSet _118_in_conversion1914 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CAST_in_conversion1929 = new BitSet(new ulong[]{0x0UL,0x20100000000000UL});
		public static readonly BitSet _WS_in_conversion1931 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _117_in_conversion1934 = new BitSet(new ulong[]{0xB003000014000UL,0x20100000000000UL});
		public static readonly BitSet _WS_in_conversion1936 = new BitSet(new ulong[]{0xB003000014000UL,0x20000000000000UL});
		public static readonly BitSet _expression_in_conversion1939 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _WS_in_conversion1941 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _AS_in_conversion1943 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _WS_in_conversion1945 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _TOKEN_in_conversion1947 = new BitSet(new ulong[]{0x0UL,0x40100000000000UL});
		public static readonly BitSet _WS_in_conversion1949 = new BitSet(new ulong[]{0x0UL,0x40000000000000UL});
		public static readonly BitSet _118_in_conversion1952 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  FxGqlLib 
