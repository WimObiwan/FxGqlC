//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g 2013-03-15 14:47:58

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591


// `XXX' does not need a CLSCompliant attribute because the assembly is not marked as CLS-compliant (CS3021)
#pragma warning disable 3021
// The private field `XXX' is assigned but its value is never used (CS0414)
#pragma warning disable 414


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  FxGqlLib 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class gqlParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "A", "ALL", "ALTER", "AND", "ANY", "AS", "ASC", "B", "BETWEEN", "BOTTOM", "BY", "C", "CASE", "CAST", "COMMENT_BLOCK", "COMMENT_LINE", "CONVERT", "COUNT", "CREATE", "D", "DATEADD", "DATEDIFF", "DATEPART", "DECLARE", "DESC", "DIGIT", "DISTINCT", "DROP", "E", "ELSE", "END", "EXISTS", "F", "FROM", "G", "GROUP", "H", "HAVING", "I", "IN", "INTO", "J", "K", "L", "LIKE", "M", "MATCH", "N", "NOT", "NUMBER", "O", "OR", "ORDER", "ORIG", "P", "Q", "R", "S", "SELECT", "SET", "SIMPLE_FILE", "SOME", "STRING", "SYSTEMVAR", "T", "TABLE", "THEN", "TOKEN", "TOP", "T_ALL", "T_ALLCOLUMNS", "T_ALTER_VIEW", "T_AND", "T_ANY", "T_BETWEEN", "T_BITWISE_AND", "T_BITWISE_NOT", "T_BITWISE_OR", "T_BITWISE_XOR", "T_BOTTOM", "T_CASE", "T_CASE_ELSE", "T_CASE_WHEN", "T_COLUMN", "T_COLUMNLIST", "T_CONVERT", "T_COUNT", "T_CREATE_VIEW", "T_DATEPART", "T_DECLARATION", "T_DECLARE", "T_DISTINCT", "T_DISTINCTCOUNT", "T_DIVIDE", "T_DROP_TABLE", "T_DROP_VIEW", "T_EQUAL", "T_EXISTS", "T_EXPRESSIONLIST", "T_FILE", "T_FILEOPTION", "T_FILESUBQUERY", "T_FROM", "T_FUNCTIONCALL", "T_GREATER", "T_GROUPBY", "T_GROUPBY_ORIG", "T_HAVING", "T_IN", "T_INTO", "T_LESS", "T_LIKE", "T_MATCH", "T_MINUS", "T_MODULO", "T_NOT", "T_NOTBETWEEN", "T_NOTEQUAL", "T_NOTGREATER", "T_NOTIN", "T_NOTLESS", "T_NOTLIKE", "T_NOTMATCH", "T_NUMBER", "T_OP_BINARY", "T_OP_UNARY", "T_OR", "T_ORDERBY", "T_ORDERBY_ASC", "T_ORDERBY_COLUMN", "T_ORDERBY_DESC", "T_ORDERBY_ORIG", "T_PLUS", "T_PRODUCT", "T_ROOT", "T_SELECT", "T_SELECT_SIMPLE", "T_SELECT_UNION", "T_SET_COMMAND", "T_SET_VARIABLE", "T_STRING", "T_SUBQUERY", "T_SYSTEMVAR", "T_TABLE_ALIAS", "T_TOP", "T_USE", "T_VARIABLE", "T_VIEW", "T_VIEW_NAME", "T_WHERE", "U", "UNION", "USE", "V", "VARIABLE", "VIEW", "W", "WHEN", "WHERE", "WS", "X", "Y", "Z", "'!<'", "'!='", "'!>'", "'%'", "'&'", "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", "';'", "'<'", "'<='", "'<>'", "'='", "'>'", "'>='", "'['", "']'", "'^'", "'|'", "'~'"
	};
	public const int EOF=-1;
	public const int T__167=167;
	public const int T__168=168;
	public const int T__169=169;
	public const int T__170=170;
	public const int T__171=171;
	public const int T__172=172;
	public const int T__173=173;
	public const int T__174=174;
	public const int T__175=175;
	public const int T__176=176;
	public const int T__177=177;
	public const int T__178=178;
	public const int T__179=179;
	public const int T__180=180;
	public const int T__181=181;
	public const int T__182=182;
	public const int T__183=183;
	public const int T__184=184;
	public const int T__185=185;
	public const int T__186=186;
	public const int T__187=187;
	public const int T__188=188;
	public const int T__189=189;
	public const int T__190=190;
	public const int T__191=191;
	public const int A=4;
	public const int ALL=5;
	public const int ALTER=6;
	public const int AND=7;
	public const int ANY=8;
	public const int AS=9;
	public const int ASC=10;
	public const int B=11;
	public const int BETWEEN=12;
	public const int BOTTOM=13;
	public const int BY=14;
	public const int C=15;
	public const int CASE=16;
	public const int CAST=17;
	public const int COMMENT_BLOCK=18;
	public const int COMMENT_LINE=19;
	public const int CONVERT=20;
	public const int COUNT=21;
	public const int CREATE=22;
	public const int D=23;
	public const int DATEADD=24;
	public const int DATEDIFF=25;
	public const int DATEPART=26;
	public const int DECLARE=27;
	public const int DESC=28;
	public const int DIGIT=29;
	public const int DISTINCT=30;
	public const int DROP=31;
	public const int E=32;
	public const int ELSE=33;
	public const int END=34;
	public const int EXISTS=35;
	public const int F=36;
	public const int FROM=37;
	public const int G=38;
	public const int GROUP=39;
	public const int H=40;
	public const int HAVING=41;
	public const int I=42;
	public const int IN=43;
	public const int INTO=44;
	public const int J=45;
	public const int K=46;
	public const int L=47;
	public const int LIKE=48;
	public const int M=49;
	public const int MATCH=50;
	public const int N=51;
	public const int NOT=52;
	public const int NUMBER=53;
	public const int O=54;
	public const int OR=55;
	public const int ORDER=56;
	public const int ORIG=57;
	public const int P=58;
	public const int Q=59;
	public const int R=60;
	public const int S=61;
	public const int SELECT=62;
	public const int SET=63;
	public const int SIMPLE_FILE=64;
	public const int SOME=65;
	public const int STRING=66;
	public const int SYSTEMVAR=67;
	public const int T=68;
	public const int TABLE=69;
	public const int THEN=70;
	public const int TOKEN=71;
	public const int TOP=72;
	public const int T_ALL=73;
	public const int T_ALLCOLUMNS=74;
	public const int T_ALTER_VIEW=75;
	public const int T_AND=76;
	public const int T_ANY=77;
	public const int T_BETWEEN=78;
	public const int T_BITWISE_AND=79;
	public const int T_BITWISE_NOT=80;
	public const int T_BITWISE_OR=81;
	public const int T_BITWISE_XOR=82;
	public const int T_BOTTOM=83;
	public const int T_CASE=84;
	public const int T_CASE_ELSE=85;
	public const int T_CASE_WHEN=86;
	public const int T_COLUMN=87;
	public const int T_COLUMNLIST=88;
	public const int T_CONVERT=89;
	public const int T_COUNT=90;
	public const int T_CREATE_VIEW=91;
	public const int T_DATEPART=92;
	public const int T_DECLARATION=93;
	public const int T_DECLARE=94;
	public const int T_DISTINCT=95;
	public const int T_DISTINCTCOUNT=96;
	public const int T_DIVIDE=97;
	public const int T_DROP_TABLE=98;
	public const int T_DROP_VIEW=99;
	public const int T_EQUAL=100;
	public const int T_EXISTS=101;
	public const int T_EXPRESSIONLIST=102;
	public const int T_FILE=103;
	public const int T_FILEOPTION=104;
	public const int T_FILESUBQUERY=105;
	public const int T_FROM=106;
	public const int T_FUNCTIONCALL=107;
	public const int T_GREATER=108;
	public const int T_GROUPBY=109;
	public const int T_GROUPBY_ORIG=110;
	public const int T_HAVING=111;
	public const int T_IN=112;
	public const int T_INTO=113;
	public const int T_LESS=114;
	public const int T_LIKE=115;
	public const int T_MATCH=116;
	public const int T_MINUS=117;
	public const int T_MODULO=118;
	public const int T_NOT=119;
	public const int T_NOTBETWEEN=120;
	public const int T_NOTEQUAL=121;
	public const int T_NOTGREATER=122;
	public const int T_NOTIN=123;
	public const int T_NOTLESS=124;
	public const int T_NOTLIKE=125;
	public const int T_NOTMATCH=126;
	public const int T_NUMBER=127;
	public const int T_OP_BINARY=128;
	public const int T_OP_UNARY=129;
	public const int T_OR=130;
	public const int T_ORDERBY=131;
	public const int T_ORDERBY_ASC=132;
	public const int T_ORDERBY_COLUMN=133;
	public const int T_ORDERBY_DESC=134;
	public const int T_ORDERBY_ORIG=135;
	public const int T_PLUS=136;
	public const int T_PRODUCT=137;
	public const int T_ROOT=138;
	public const int T_SELECT=139;
	public const int T_SELECT_SIMPLE=140;
	public const int T_SELECT_UNION=141;
	public const int T_SET_COMMAND=142;
	public const int T_SET_VARIABLE=143;
	public const int T_STRING=144;
	public const int T_SUBQUERY=145;
	public const int T_SYSTEMVAR=146;
	public const int T_TABLE_ALIAS=147;
	public const int T_TOP=148;
	public const int T_USE=149;
	public const int T_VARIABLE=150;
	public const int T_VIEW=151;
	public const int T_VIEW_NAME=152;
	public const int T_WHERE=153;
	public const int U=154;
	public const int UNION=155;
	public const int USE=156;
	public const int V=157;
	public const int VARIABLE=158;
	public const int VIEW=159;
	public const int W=160;
	public const int WHEN=161;
	public const int WHERE=162;
	public const int WS=163;
	public const int X=164;
	public const int Y=165;
	public const int Z=166;

	#if ANTLR_DEBUG
		private static readonly bool[] decisionCanBacktrack =
			new bool[]
			{
				false, // invalid decision
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, true, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, true, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false
			};
	#else
		private static readonly bool[] decisionCanBacktrack = new bool[0];
	#endif
	public gqlParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public gqlParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}
	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return gqlParser.tokenNames; } }
	public override string GrammarFileName { get { return "C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g"; } }


	[Conditional("ANTLR_TRACE")]
	protected virtual void OnCreated() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

	#region Rules

	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_parse() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_parse() {}

	// $ANTLR start "parse"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:113:1: parse : ( WS )? ( commands ( WS )? )? EOF -> ^( T_ROOT ( commands )? ) ;
	[GrammarRule("parse")]
	private AstParserRuleReturnScope<object, IToken> parse()
	{
		EnterRule_parse();
		EnterRule("parse", 1);
		TraceIn("parse", 1);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS1 = default(IToken);
	    IToken WS3 = default(IToken);
	    IToken EOF4 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> commands2 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS1_tree = default(object);
	    object WS3_tree = default(object);
	    object EOF4_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
	    RewriteRuleSubtreeStream stream_commands=new RewriteRuleSubtreeStream(adaptor,"rule commands");
		try { DebugEnterRule(GrammarFileName, "parse");
		DebugLocation(113, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:114:2: ( ( WS )? ( commands ( WS )? )? EOF -> ^( T_ROOT ( commands )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:114:4: ( WS )? ( commands ( WS )? )? EOF
			{
			DebugLocation(114, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:114:4: ( WS )?
			int alt1=2;
			try { DebugEnterSubRule(1);
			try { DebugEnterDecision(1, decisionCanBacktrack[1]);
			int LA1_0 = input.LA(1);

			if ((LA1_0==WS))
			{
				alt1 = 1;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:114:4: WS
				{
				DebugLocation(114, 4);
				WS1=(IToken)Match(input,WS,Follow._WS_in_parse406); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS1);


				}
				break;

			}
			} finally { DebugExitSubRule(1); }

			DebugLocation(114, 8);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:114:8: ( commands ( WS )? )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, decisionCanBacktrack[3]);
			int LA3_0 = input.LA(1);

			if ((LA3_0==ALTER||LA3_0==CREATE||LA3_0==DECLARE||LA3_0==DROP||(LA3_0>=SELECT && LA3_0<=SET)||LA3_0==USE||LA3_0==172))
			{
				alt3 = 1;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:114:9: commands ( WS )?
				{
				DebugLocation(114, 9);
				PushFollow(Follow._commands_in_parse410);
				commands2=commands();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_commands.Add(commands2.Tree);
				DebugLocation(114, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:114:18: ( WS )?
				int alt2=2;
				try { DebugEnterSubRule(2);
				try { DebugEnterDecision(2, decisionCanBacktrack[2]);
				int LA2_0 = input.LA(1);

				if ((LA2_0==WS))
				{
					alt2 = 1;
				}
				} finally { DebugExitDecision(2); }
				switch (alt2)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:114:18: WS
					{
					DebugLocation(114, 18);
					WS3=(IToken)Match(input,WS,Follow._WS_in_parse412); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS3);


					}
					break;

				}
				} finally { DebugExitSubRule(2); }


				}
				break;

			}
			} finally { DebugExitSubRule(3); }

			DebugLocation(114, 24);
			EOF4=(IToken)Match(input,EOF,Follow._EOF_in_parse417); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EOF.Add(EOF4);



			{
			// AST REWRITE
			// elements: commands
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 115:2: -> ^( T_ROOT ( commands )? )
			{
				DebugLocation(115, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:115:5: ^( T_ROOT ( commands )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(115, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_ROOT, "T_ROOT"), root_1);

				DebugLocation(115, 14);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:115:14: ( commands )?
				if (stream_commands.HasNext)
				{
					DebugLocation(115, 14);
					adaptor.AddChild(root_1, stream_commands.NextTree());

				}
				stream_commands.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parse", 1);
			LeaveRule("parse", 1);
			LeaveRule_parse();
	    }
	 	DebugLocation(116, 1);
		} finally { DebugExitRule(GrammarFileName, "parse"); }
		return retval;

	}
	// $ANTLR end "parse"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_commands() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_commands() {}

	// $ANTLR start "commands"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:118:1: commands : command ( ( WS )? ';' ( WS )? command )* ( ( WS )? ';' )? -> ( command )+ ;
	[GrammarRule("commands")]
	private AstParserRuleReturnScope<object, IToken> commands()
	{
		EnterRule_commands();
		EnterRule("commands", 2);
		TraceIn("commands", 2);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS6 = default(IToken);
	    IToken char_literal7 = default(IToken);
	    IToken WS8 = default(IToken);
	    IToken WS10 = default(IToken);
	    IToken char_literal11 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> command5 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> command9 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS6_tree = default(object);
	    object char_literal7_tree = default(object);
	    object WS8_tree = default(object);
	    object WS10_tree = default(object);
	    object char_literal11_tree = default(object);
	    RewriteRuleITokenStream stream_180=new RewriteRuleITokenStream(adaptor,"token 180");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_command=new RewriteRuleSubtreeStream(adaptor,"rule command");
		try { DebugEnterRule(GrammarFileName, "commands");
		DebugLocation(118, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:119:2: ( command ( ( WS )? ';' ( WS )? command )* ( ( WS )? ';' )? -> ( command )+ )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:119:4: command ( ( WS )? ';' ( WS )? command )* ( ( WS )? ';' )?
			{
			DebugLocation(119, 4);
			PushFollow(Follow._command_in_commands440);
			command5=command();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_command.Add(command5.Tree);
			DebugLocation(119, 12);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:119:12: ( ( WS )? ';' ( WS )? command )*
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, decisionCanBacktrack[6]);
				int LA6_0 = input.LA(1);

				if ((LA6_0==WS))
				{
					int LA6_1 = input.LA(2);

					if ((LA6_1==180))
					{
						int LA6_2 = input.LA(3);

						if ((LA6_2==WS))
						{
							int LA6_4 = input.LA(4);

							if ((LA6_4==ALTER||LA6_4==CREATE||LA6_4==DECLARE||LA6_4==DROP||(LA6_4>=SELECT && LA6_4<=SET)||LA6_4==USE||LA6_4==172))
							{
								alt6 = 1;
							}


						}
						else if ((LA6_2==ALTER||LA6_2==CREATE||LA6_2==DECLARE||LA6_2==DROP||(LA6_2>=SELECT && LA6_2<=SET)||LA6_2==USE||LA6_2==172))
						{
							alt6 = 1;
						}


					}


				}
				else if ((LA6_0==180))
				{
					int LA6_2 = input.LA(2);

					if ((LA6_2==WS))
					{
						int LA6_4 = input.LA(3);

						if ((LA6_4==ALTER||LA6_4==CREATE||LA6_4==DECLARE||LA6_4==DROP||(LA6_4>=SELECT && LA6_4<=SET)||LA6_4==USE||LA6_4==172))
						{
							alt6 = 1;
						}


					}
					else if ((LA6_2==ALTER||LA6_2==CREATE||LA6_2==DECLARE||LA6_2==DROP||(LA6_2>=SELECT && LA6_2<=SET)||LA6_2==USE||LA6_2==172))
					{
						alt6 = 1;
					}


				}


				} finally { DebugExitDecision(6); }
				switch ( alt6 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:119:13: ( WS )? ';' ( WS )? command
					{
					DebugLocation(119, 13);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:119:13: ( WS )?
					int alt4=2;
					try { DebugEnterSubRule(4);
					try { DebugEnterDecision(4, decisionCanBacktrack[4]);
					int LA4_0 = input.LA(1);

					if ((LA4_0==WS))
					{
						alt4 = 1;
					}
					} finally { DebugExitDecision(4); }
					switch (alt4)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:119:13: WS
						{
						DebugLocation(119, 13);
						WS6=(IToken)Match(input,WS,Follow._WS_in_commands443); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS6);


						}
						break;

					}
					} finally { DebugExitSubRule(4); }

					DebugLocation(119, 17);
					char_literal7=(IToken)Match(input,180,Follow._180_in_commands446); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_180.Add(char_literal7);

					DebugLocation(119, 21);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:119:21: ( WS )?
					int alt5=2;
					try { DebugEnterSubRule(5);
					try { DebugEnterDecision(5, decisionCanBacktrack[5]);
					int LA5_0 = input.LA(1);

					if ((LA5_0==WS))
					{
						alt5 = 1;
					}
					} finally { DebugExitDecision(5); }
					switch (alt5)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:119:21: WS
						{
						DebugLocation(119, 21);
						WS8=(IToken)Match(input,WS,Follow._WS_in_commands448); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS8);


						}
						break;

					}
					} finally { DebugExitSubRule(5); }

					DebugLocation(119, 25);
					PushFollow(Follow._command_in_commands451);
					command9=command();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_command.Add(command9.Tree);

					}
					break;

				default:
					goto loop6;
				}
			}

			loop6:
				;

			} finally { DebugExitSubRule(6); }

			DebugLocation(119, 35);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:119:35: ( ( WS )? ';' )?
			int alt8=2;
			try { DebugEnterSubRule(8);
			try { DebugEnterDecision(8, decisionCanBacktrack[8]);
			int LA8_0 = input.LA(1);

			if ((LA8_0==WS))
			{
				int LA8_1 = input.LA(2);

				if ((LA8_1==180))
				{
					alt8 = 1;
				}
			}
			else if ((LA8_0==180))
			{
				alt8 = 1;
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:119:36: ( WS )? ';'
				{
				DebugLocation(119, 36);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:119:36: ( WS )?
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, decisionCanBacktrack[7]);
				int LA7_0 = input.LA(1);

				if ((LA7_0==WS))
				{
					alt7 = 1;
				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:119:36: WS
					{
					DebugLocation(119, 36);
					WS10=(IToken)Match(input,WS,Follow._WS_in_commands456); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS10);


					}
					break;

				}
				} finally { DebugExitSubRule(7); }

				DebugLocation(119, 40);
				char_literal11=(IToken)Match(input,180,Follow._180_in_commands459); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_180.Add(char_literal11);


				}
				break;

			}
			} finally { DebugExitSubRule(8); }



			{
			// AST REWRITE
			// elements: command
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 120:2: -> ( command )+
			{
				DebugLocation(120, 5);
				if (!(stream_command.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_command.HasNext )
				{
					DebugLocation(120, 5);
					adaptor.AddChild(root_0, stream_command.NextTree());

				}
				stream_command.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("commands", 2);
			LeaveRule("commands", 2);
			LeaveRule_commands();
	    }
	 	DebugLocation(121, 1);
		} finally { DebugExitRule(GrammarFileName, "commands"); }
		return retval;

	}
	// $ANTLR end "commands"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_command() {}

	// $ANTLR start "command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:123:1: command : ( select_command | use_command | declare_command | set_command | create_view_command | alter_view_command | drop_view_command | drop_table_command );
	[GrammarRule("command")]
	private AstParserRuleReturnScope<object, IToken> command()
	{
		EnterRule_command();
		EnterRule("command", 3);
		TraceIn("command", 3);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> select_command12 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> use_command13 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> declare_command14 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> set_command15 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> create_view_command16 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> alter_view_command17 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> drop_view_command18 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> drop_table_command19 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "command");
		DebugLocation(123, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:124:2: ( select_command | use_command | declare_command | set_command | create_view_command | alter_view_command | drop_view_command | drop_table_command )
			int alt9=8;
			try { DebugEnterDecision(9, decisionCanBacktrack[9]);
			switch (input.LA(1))
			{
			case SELECT:
			case 172:
				{
				alt9 = 1;
				}
				break;
			case USE:
				{
				alt9 = 2;
				}
				break;
			case DECLARE:
				{
				alt9 = 3;
				}
				break;
			case SET:
				{
				alt9 = 4;
				}
				break;
			case CREATE:
				{
				alt9 = 5;
				}
				break;
			case ALTER:
				{
				alt9 = 6;
				}
				break;
			case DROP:
				{
				int LA9_7 = input.LA(2);

				if ((LA9_7==WS))
				{
					int LA9_8 = input.LA(3);

					if ((LA9_8==VIEW))
					{
						alt9 = 7;
					}
					else if ((LA9_8==TABLE))
					{
						alt9 = 8;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 9, 8, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 7, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:124:4: select_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(124, 4);
				PushFollow(Follow._select_command_in_command479);
				select_command12=select_command();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, select_command12.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:125:4: use_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(125, 4);
				PushFollow(Follow._use_command_in_command484);
				use_command13=use_command();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, use_command13.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:126:4: declare_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(126, 4);
				PushFollow(Follow._declare_command_in_command489);
				declare_command14=declare_command();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, declare_command14.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:127:4: set_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(127, 4);
				PushFollow(Follow._set_command_in_command494);
				set_command15=set_command();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, set_command15.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:128:4: create_view_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(128, 4);
				PushFollow(Follow._create_view_command_in_command499);
				create_view_command16=create_view_command();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, create_view_command16.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:129:4: alter_view_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(129, 4);
				PushFollow(Follow._alter_view_command_in_command504);
				alter_view_command17=alter_view_command();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, alter_view_command17.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:130:4: drop_view_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(130, 4);
				PushFollow(Follow._drop_view_command_in_command509);
				drop_view_command18=drop_view_command();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, drop_view_command18.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:131:4: drop_table_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(131, 4);
				PushFollow(Follow._drop_table_command_in_command514);
				drop_table_command19=drop_table_command();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, drop_table_command19.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("command", 3);
			LeaveRule("command", 3);
			LeaveRule_command();
	    }
	 	DebugLocation(132, 1);
		} finally { DebugExitRule(GrammarFileName, "command"); }
		return retval;

	}
	// $ANTLR end "command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_select_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_select_command() {}

	// $ANTLR start "select_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:137:1: select_command : select_command_union ( WS orderby_clause )? -> ^( T_SELECT select_command_union ( orderby_clause )? ) ;
	[GrammarRule("select_command")]
	private AstParserRuleReturnScope<object, IToken> select_command()
	{
		EnterRule_select_command();
		EnterRule("select_command", 4);
		TraceIn("select_command", 4);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS21 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> select_command_union20 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> orderby_clause22 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS21_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_select_command_union=new RewriteRuleSubtreeStream(adaptor,"rule select_command_union");
	    RewriteRuleSubtreeStream stream_orderby_clause=new RewriteRuleSubtreeStream(adaptor,"rule orderby_clause");
		try { DebugEnterRule(GrammarFileName, "select_command");
		DebugLocation(137, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:138:2: ( select_command_union ( WS orderby_clause )? -> ^( T_SELECT select_command_union ( orderby_clause )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:138:4: select_command_union ( WS orderby_clause )?
			{
			DebugLocation(138, 4);
			PushFollow(Follow._select_command_union_in_select_command528);
			select_command_union20=select_command_union();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_select_command_union.Add(select_command_union20.Tree);
			DebugLocation(138, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:138:25: ( WS orderby_clause )?
			int alt10=2;
			try { DebugEnterSubRule(10);
			try { DebugEnterDecision(10, decisionCanBacktrack[10]);
			int LA10_0 = input.LA(1);

			if ((LA10_0==WS))
			{
				int LA10_1 = input.LA(2);

				if ((LA10_1==ORDER))
				{
					alt10 = 1;
				}
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:138:26: WS orderby_clause
				{
				DebugLocation(138, 26);
				WS21=(IToken)Match(input,WS,Follow._WS_in_select_command531); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS21);

				DebugLocation(138, 29);
				PushFollow(Follow._orderby_clause_in_select_command533);
				orderby_clause22=orderby_clause();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_orderby_clause.Add(orderby_clause22.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(10); }



			{
			// AST REWRITE
			// elements: orderby_clause, select_command_union
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 139:3: -> ^( T_SELECT select_command_union ( orderby_clause )? )
			{
				DebugLocation(139, 6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:139:6: ^( T_SELECT select_command_union ( orderby_clause )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(139, 8);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SELECT, "T_SELECT"), root_1);

				DebugLocation(139, 17);
				adaptor.AddChild(root_1, stream_select_command_union.NextTree());
				DebugLocation(139, 38);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:139:38: ( orderby_clause )?
				if (stream_orderby_clause.HasNext)
				{
					DebugLocation(139, 38);
					adaptor.AddChild(root_1, stream_orderby_clause.NextTree());

				}
				stream_orderby_clause.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("select_command", 4);
			LeaveRule("select_command", 4);
			LeaveRule_select_command();
	    }
	 	DebugLocation(140, 1);
		} finally { DebugExitRule(GrammarFileName, "select_command"); }
		return retval;

	}
	// $ANTLR end "select_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_select_command_union() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_select_command_union() {}

	// $ANTLR start "select_command_union"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:145:1: select_command_union : (a= select_command_simple -> $a) ( WS UNION WS b= select_command_simple -> ^( T_SELECT_UNION $select_command_union $b) )* ;
	[GrammarRule("select_command_union")]
	private AstParserRuleReturnScope<object, IToken> select_command_union()
	{
		EnterRule_select_command_union();
		EnterRule("select_command_union", 5);
		TraceIn("select_command_union", 5);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS23 = default(IToken);
	    IToken UNION24 = default(IToken);
	    IToken WS25 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);

	    object WS23_tree = default(object);
	    object UNION24_tree = default(object);
	    object WS25_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_UNION=new RewriteRuleITokenStream(adaptor,"token UNION");
	    RewriteRuleSubtreeStream stream_select_command_simple=new RewriteRuleSubtreeStream(adaptor,"rule select_command_simple");
		try { DebugEnterRule(GrammarFileName, "select_command_union");
		DebugLocation(145, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:146:2: ( (a= select_command_simple -> $a) ( WS UNION WS b= select_command_simple -> ^( T_SELECT_UNION $select_command_union $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:146:4: (a= select_command_simple -> $a) ( WS UNION WS b= select_command_simple -> ^( T_SELECT_UNION $select_command_union $b) )*
			{
			DebugLocation(146, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:146:4: (a= select_command_simple -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:146:5: a= select_command_simple
			{
			DebugLocation(146, 6);
			PushFollow(Follow._select_command_simple_in_select_command_union565);
			a=select_command_simple();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_select_command_simple.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 146:28: -> $a
			{
				DebugLocation(146, 31);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(146, 34);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:146:34: ( WS UNION WS b= select_command_simple -> ^( T_SELECT_UNION $select_command_union $b) )*
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, decisionCanBacktrack[11]);
				int LA11_0 = input.LA(1);

				if ((LA11_0==WS))
				{
					int LA11_1 = input.LA(2);

					if ((LA11_1==UNION))
					{
						alt11 = 1;
					}


				}


				} finally { DebugExitDecision(11); }
				switch ( alt11 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:146:35: WS UNION WS b= select_command_simple
					{
					DebugLocation(146, 35);
					WS23=(IToken)Match(input,WS,Follow._WS_in_select_command_union572); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS23);

					DebugLocation(146, 38);
					UNION24=(IToken)Match(input,UNION,Follow._UNION_in_select_command_union574); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_UNION.Add(UNION24);

					DebugLocation(146, 44);
					WS25=(IToken)Match(input,WS,Follow._WS_in_select_command_union576); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS25);

					DebugLocation(146, 48);
					PushFollow(Follow._select_command_simple_in_select_command_union580);
					b=select_command_simple();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_select_command_simple.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, select_command_union
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 146:71: -> ^( T_SELECT_UNION $select_command_union $b)
					{
						DebugLocation(146, 74);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:146:74: ^( T_SELECT_UNION $select_command_union $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(146, 76);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SELECT_UNION, "T_SELECT_UNION"), root_1);

						DebugLocation(146, 92);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(146, 114);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop11;
				}
			}

			loop11:
				;

			} finally { DebugExitSubRule(11); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("select_command_union", 5);
			LeaveRule("select_command_union", 5);
			LeaveRule_select_command_union();
	    }
	 	DebugLocation(147, 1);
		} finally { DebugExitRule(GrammarFileName, "select_command_union"); }
		return retval;

	}
	// $ANTLR end "select_command_union"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_select_command_simple() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_select_command_simple() {}

	// $ANTLR start "select_command_simple"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:149:1: select_command_simple : ( ( '(' )=> subquery | SELECT ( WS distinct_clause )? ( WS top_clause )? ( WS bottom_clause )? WS column_list ( WS into_clause )? ( WS from_clause )? ( WS where_clause )? ( WS groupby_clause )? ( WS having_clause )? -> ^( T_SELECT_SIMPLE ( distinct_clause )? ( top_clause )? ( bottom_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( having_clause )? ) );
	[GrammarRule("select_command_simple")]
	private AstParserRuleReturnScope<object, IToken> select_command_simple()
	{
		EnterRule_select_command_simple();
		EnterRule("select_command_simple", 6);
		TraceIn("select_command_simple", 6);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken SELECT27 = default(IToken);
	    IToken WS28 = default(IToken);
	    IToken WS30 = default(IToken);
	    IToken WS32 = default(IToken);
	    IToken WS34 = default(IToken);
	    IToken WS36 = default(IToken);
	    IToken WS38 = default(IToken);
	    IToken WS40 = default(IToken);
	    IToken WS42 = default(IToken);
	    IToken WS44 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> subquery26 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> distinct_clause29 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> top_clause31 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> bottom_clause33 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> column_list35 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> into_clause37 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> from_clause39 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> where_clause41 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> groupby_clause43 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> having_clause45 = default(AstParserRuleReturnScope<object, IToken>);

	    object SELECT27_tree = default(object);
	    object WS28_tree = default(object);
	    object WS30_tree = default(object);
	    object WS32_tree = default(object);
	    object WS34_tree = default(object);
	    object WS36_tree = default(object);
	    object WS38_tree = default(object);
	    object WS40_tree = default(object);
	    object WS42_tree = default(object);
	    object WS44_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_SELECT=new RewriteRuleITokenStream(adaptor,"token SELECT");
	    RewriteRuleSubtreeStream stream_groupby_clause=new RewriteRuleSubtreeStream(adaptor,"rule groupby_clause");
	    RewriteRuleSubtreeStream stream_distinct_clause=new RewriteRuleSubtreeStream(adaptor,"rule distinct_clause");
	    RewriteRuleSubtreeStream stream_from_clause=new RewriteRuleSubtreeStream(adaptor,"rule from_clause");
	    RewriteRuleSubtreeStream stream_having_clause=new RewriteRuleSubtreeStream(adaptor,"rule having_clause");
	    RewriteRuleSubtreeStream stream_column_list=new RewriteRuleSubtreeStream(adaptor,"rule column_list");
	    RewriteRuleSubtreeStream stream_where_clause=new RewriteRuleSubtreeStream(adaptor,"rule where_clause");
	    RewriteRuleSubtreeStream stream_into_clause=new RewriteRuleSubtreeStream(adaptor,"rule into_clause");
	    RewriteRuleSubtreeStream stream_bottom_clause=new RewriteRuleSubtreeStream(adaptor,"rule bottom_clause");
	    RewriteRuleSubtreeStream stream_top_clause=new RewriteRuleSubtreeStream(adaptor,"rule top_clause");
		try { DebugEnterRule(GrammarFileName, "select_command_simple");
		DebugLocation(149, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:150:2: ( ( '(' )=> subquery | SELECT ( WS distinct_clause )? ( WS top_clause )? ( WS bottom_clause )? WS column_list ( WS into_clause )? ( WS from_clause )? ( WS where_clause )? ( WS groupby_clause )? ( WS having_clause )? -> ^( T_SELECT_SIMPLE ( distinct_clause )? ( top_clause )? ( bottom_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( having_clause )? ) )
			int alt20=2;
			try { DebugEnterDecision(20, decisionCanBacktrack[20]);
			int LA20_0 = input.LA(1);

			if ((LA20_0==172) && (EvaluatePredicate(synpred1_gql_fragment)))
			{
				alt20 = 1;
			}
			else if ((LA20_0==SELECT))
			{
				alt20 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 20, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:150:4: ( '(' )=> subquery
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(150, 13);
				PushFollow(Follow._subquery_in_select_command_simple612);
				subquery26=subquery();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, subquery26.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:151:4: SELECT ( WS distinct_clause )? ( WS top_clause )? ( WS bottom_clause )? WS column_list ( WS into_clause )? ( WS from_clause )? ( WS where_clause )? ( WS groupby_clause )? ( WS having_clause )?
				{
				DebugLocation(151, 4);
				SELECT27=(IToken)Match(input,SELECT,Follow._SELECT_in_select_command_simple617); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SELECT.Add(SELECT27);

				DebugLocation(151, 11);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:151:11: ( WS distinct_clause )?
				int alt12=2;
				try { DebugEnterSubRule(12);
				try { DebugEnterDecision(12, decisionCanBacktrack[12]);
				int LA12_0 = input.LA(1);

				if ((LA12_0==WS))
				{
					int LA12_1 = input.LA(2);

					if ((LA12_1==ALL||LA12_1==DISTINCT))
					{
						alt12 = 1;
					}
				}
				} finally { DebugExitDecision(12); }
				switch (alt12)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:151:12: WS distinct_clause
					{
					DebugLocation(151, 12);
					WS28=(IToken)Match(input,WS,Follow._WS_in_select_command_simple620); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS28);

					DebugLocation(151, 15);
					PushFollow(Follow._distinct_clause_in_select_command_simple622);
					distinct_clause29=distinct_clause();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_distinct_clause.Add(distinct_clause29.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(12); }

				DebugLocation(151, 33);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:151:33: ( WS top_clause )?
				int alt13=2;
				try { DebugEnterSubRule(13);
				try { DebugEnterDecision(13, decisionCanBacktrack[13]);
				int LA13_0 = input.LA(1);

				if ((LA13_0==WS))
				{
					int LA13_1 = input.LA(2);

					if ((LA13_1==TOP))
					{
						alt13 = 1;
					}
				}
				} finally { DebugExitDecision(13); }
				switch (alt13)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:151:34: WS top_clause
					{
					DebugLocation(151, 34);
					WS30=(IToken)Match(input,WS,Follow._WS_in_select_command_simple627); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS30);

					DebugLocation(151, 37);
					PushFollow(Follow._top_clause_in_select_command_simple629);
					top_clause31=top_clause();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_top_clause.Add(top_clause31.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(13); }

				DebugLocation(151, 50);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:151:50: ( WS bottom_clause )?
				int alt14=2;
				try { DebugEnterSubRule(14);
				try { DebugEnterDecision(14, decisionCanBacktrack[14]);
				int LA14_0 = input.LA(1);

				if ((LA14_0==WS))
				{
					int LA14_1 = input.LA(2);

					if ((LA14_1==BOTTOM))
					{
						alt14 = 1;
					}
				}
				} finally { DebugExitDecision(14); }
				switch (alt14)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:151:51: WS bottom_clause
					{
					DebugLocation(151, 51);
					WS32=(IToken)Match(input,WS,Follow._WS_in_select_command_simple634); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS32);

					DebugLocation(151, 54);
					PushFollow(Follow._bottom_clause_in_select_command_simple636);
					bottom_clause33=bottom_clause();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bottom_clause.Add(bottom_clause33.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(14); }

				DebugLocation(151, 70);
				WS34=(IToken)Match(input,WS,Follow._WS_in_select_command_simple640); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS34);

				DebugLocation(151, 73);
				PushFollow(Follow._column_list_in_select_command_simple642);
				column_list35=column_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_column_list.Add(column_list35.Tree);
				DebugLocation(151, 85);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:151:85: ( WS into_clause )?
				int alt15=2;
				try { DebugEnterSubRule(15);
				try { DebugEnterDecision(15, decisionCanBacktrack[15]);
				int LA15_0 = input.LA(1);

				if ((LA15_0==WS))
				{
					int LA15_1 = input.LA(2);

					if ((LA15_1==INTO))
					{
						alt15 = 1;
					}
				}
				} finally { DebugExitDecision(15); }
				switch (alt15)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:151:86: WS into_clause
					{
					DebugLocation(151, 86);
					WS36=(IToken)Match(input,WS,Follow._WS_in_select_command_simple645); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS36);

					DebugLocation(151, 89);
					PushFollow(Follow._into_clause_in_select_command_simple647);
					into_clause37=into_clause();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_into_clause.Add(into_clause37.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(15); }

				DebugLocation(151, 103);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:151:103: ( WS from_clause )?
				int alt16=2;
				try { DebugEnterSubRule(16);
				try { DebugEnterDecision(16, decisionCanBacktrack[16]);
				int LA16_0 = input.LA(1);

				if ((LA16_0==WS))
				{
					int LA16_1 = input.LA(2);

					if ((LA16_1==FROM))
					{
						alt16 = 1;
					}
				}
				} finally { DebugExitDecision(16); }
				switch (alt16)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:151:104: WS from_clause
					{
					DebugLocation(151, 104);
					WS38=(IToken)Match(input,WS,Follow._WS_in_select_command_simple652); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS38);

					DebugLocation(151, 107);
					PushFollow(Follow._from_clause_in_select_command_simple654);
					from_clause39=from_clause();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_from_clause.Add(from_clause39.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(16); }

				DebugLocation(151, 121);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:151:121: ( WS where_clause )?
				int alt17=2;
				try { DebugEnterSubRule(17);
				try { DebugEnterDecision(17, decisionCanBacktrack[17]);
				int LA17_0 = input.LA(1);

				if ((LA17_0==WS))
				{
					int LA17_1 = input.LA(2);

					if ((LA17_1==WHERE))
					{
						alt17 = 1;
					}
				}
				} finally { DebugExitDecision(17); }
				switch (alt17)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:151:122: WS where_clause
					{
					DebugLocation(151, 122);
					WS40=(IToken)Match(input,WS,Follow._WS_in_select_command_simple659); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS40);

					DebugLocation(151, 125);
					PushFollow(Follow._where_clause_in_select_command_simple661);
					where_clause41=where_clause();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_where_clause.Add(where_clause41.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(17); }

				DebugLocation(151, 140);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:151:140: ( WS groupby_clause )?
				int alt18=2;
				try { DebugEnterSubRule(18);
				try { DebugEnterDecision(18, decisionCanBacktrack[18]);
				int LA18_0 = input.LA(1);

				if ((LA18_0==WS))
				{
					int LA18_1 = input.LA(2);

					if ((LA18_1==GROUP))
					{
						alt18 = 1;
					}
				}
				} finally { DebugExitDecision(18); }
				switch (alt18)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:151:141: WS groupby_clause
					{
					DebugLocation(151, 141);
					WS42=(IToken)Match(input,WS,Follow._WS_in_select_command_simple666); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS42);

					DebugLocation(151, 144);
					PushFollow(Follow._groupby_clause_in_select_command_simple668);
					groupby_clause43=groupby_clause();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_groupby_clause.Add(groupby_clause43.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(18); }

				DebugLocation(151, 161);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:151:161: ( WS having_clause )?
				int alt19=2;
				try { DebugEnterSubRule(19);
				try { DebugEnterDecision(19, decisionCanBacktrack[19]);
				int LA19_0 = input.LA(1);

				if ((LA19_0==WS))
				{
					int LA19_1 = input.LA(2);

					if ((LA19_1==HAVING))
					{
						alt19 = 1;
					}
				}
				} finally { DebugExitDecision(19); }
				switch (alt19)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:151:162: WS having_clause
					{
					DebugLocation(151, 162);
					WS44=(IToken)Match(input,WS,Follow._WS_in_select_command_simple673); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS44);

					DebugLocation(151, 165);
					PushFollow(Follow._having_clause_in_select_command_simple675);
					having_clause45=having_clause();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_having_clause.Add(having_clause45.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(19); }



				{
				// AST REWRITE
				// elements: top_clause, distinct_clause, groupby_clause, from_clause, where_clause, into_clause, column_list, having_clause, bottom_clause
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 152:3: -> ^( T_SELECT_SIMPLE ( distinct_clause )? ( top_clause )? ( bottom_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( having_clause )? )
				{
					DebugLocation(152, 6);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:152:6: ^( T_SELECT_SIMPLE ( distinct_clause )? ( top_clause )? ( bottom_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( having_clause )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(152, 8);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SELECT_SIMPLE, "T_SELECT_SIMPLE"), root_1);

					DebugLocation(152, 24);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:152:24: ( distinct_clause )?
					if (stream_distinct_clause.HasNext)
					{
						DebugLocation(152, 24);
						adaptor.AddChild(root_1, stream_distinct_clause.NextTree());

					}
					stream_distinct_clause.Reset();
					DebugLocation(152, 41);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:152:41: ( top_clause )?
					if (stream_top_clause.HasNext)
					{
						DebugLocation(152, 41);
						adaptor.AddChild(root_1, stream_top_clause.NextTree());

					}
					stream_top_clause.Reset();
					DebugLocation(152, 53);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:152:53: ( bottom_clause )?
					if (stream_bottom_clause.HasNext)
					{
						DebugLocation(152, 53);
						adaptor.AddChild(root_1, stream_bottom_clause.NextTree());

					}
					stream_bottom_clause.Reset();
					DebugLocation(152, 68);
					adaptor.AddChild(root_1, stream_column_list.NextTree());
					DebugLocation(152, 80);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:152:80: ( into_clause )?
					if (stream_into_clause.HasNext)
					{
						DebugLocation(152, 80);
						adaptor.AddChild(root_1, stream_into_clause.NextTree());

					}
					stream_into_clause.Reset();
					DebugLocation(152, 93);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:152:93: ( from_clause )?
					if (stream_from_clause.HasNext)
					{
						DebugLocation(152, 93);
						adaptor.AddChild(root_1, stream_from_clause.NextTree());

					}
					stream_from_clause.Reset();
					DebugLocation(152, 106);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:152:106: ( where_clause )?
					if (stream_where_clause.HasNext)
					{
						DebugLocation(152, 106);
						adaptor.AddChild(root_1, stream_where_clause.NextTree());

					}
					stream_where_clause.Reset();
					DebugLocation(152, 120);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:152:120: ( groupby_clause )?
					if (stream_groupby_clause.HasNext)
					{
						DebugLocation(152, 120);
						adaptor.AddChild(root_1, stream_groupby_clause.NextTree());

					}
					stream_groupby_clause.Reset();
					DebugLocation(152, 136);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:152:136: ( having_clause )?
					if (stream_having_clause.HasNext)
					{
						DebugLocation(152, 136);
						adaptor.AddChild(root_1, stream_having_clause.NextTree());

					}
					stream_having_clause.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("select_command_simple", 6);
			LeaveRule("select_command_simple", 6);
			LeaveRule_select_command_simple();
	    }
	 	DebugLocation(153, 1);
		} finally { DebugExitRule(GrammarFileName, "select_command_simple"); }
		return retval;

	}
	// $ANTLR end "select_command_simple"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_distinct_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_distinct_clause() {}

	// $ANTLR start "distinct_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:155:1: distinct_clause : ( DISTINCT -> T_DISTINCT | ALL -> T_ALL );
	[GrammarRule("distinct_clause")]
	private AstParserRuleReturnScope<object, IToken> distinct_clause()
	{
		EnterRule_distinct_clause();
		EnterRule("distinct_clause", 7);
		TraceIn("distinct_clause", 7);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken DISTINCT46 = default(IToken);
	    IToken ALL47 = default(IToken);

	    object DISTINCT46_tree = default(object);
	    object ALL47_tree = default(object);
	    RewriteRuleITokenStream stream_DISTINCT=new RewriteRuleITokenStream(adaptor,"token DISTINCT");
	    RewriteRuleITokenStream stream_ALL=new RewriteRuleITokenStream(adaptor,"token ALL");

		try { DebugEnterRule(GrammarFileName, "distinct_clause");
		DebugLocation(155, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:156:2: ( DISTINCT -> T_DISTINCT | ALL -> T_ALL )
			int alt21=2;
			try { DebugEnterDecision(21, decisionCanBacktrack[21]);
			int LA21_0 = input.LA(1);

			if ((LA21_0==DISTINCT))
			{
				alt21 = 1;
			}
			else if ((LA21_0==ALL))
			{
				alt21 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 21, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:156:4: DISTINCT
				{
				DebugLocation(156, 4);
				DISTINCT46=(IToken)Match(input,DISTINCT,Follow._DISTINCT_in_distinct_clause723); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DISTINCT.Add(DISTINCT46);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 156:13: -> T_DISTINCT
				{
					DebugLocation(156, 16);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_DISTINCT, "T_DISTINCT"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:157:4: ALL
				{
				DebugLocation(157, 4);
				ALL47=(IToken)Match(input,ALL,Follow._ALL_in_distinct_clause732); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ALL.Add(ALL47);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 157:8: -> T_ALL
				{
					DebugLocation(157, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_ALL, "T_ALL"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("distinct_clause", 7);
			LeaveRule("distinct_clause", 7);
			LeaveRule_distinct_clause();
	    }
	 	DebugLocation(158, 1);
		} finally { DebugExitRule(GrammarFileName, "distinct_clause"); }
		return retval;

	}
	// $ANTLR end "distinct_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_top_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_top_clause() {}

	// $ANTLR start "top_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:160:1: top_clause : TOP WS expression_atom -> ^( T_TOP expression_atom ) ;
	[GrammarRule("top_clause")]
	private AstParserRuleReturnScope<object, IToken> top_clause()
	{
		EnterRule_top_clause();
		EnterRule("top_clause", 8);
		TraceIn("top_clause", 8);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOP48 = default(IToken);
	    IToken WS49 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression_atom50 = default(AstParserRuleReturnScope<object, IToken>);

	    object TOP48_tree = default(object);
	    object WS49_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_TOP=new RewriteRuleITokenStream(adaptor,"token TOP");
	    RewriteRuleSubtreeStream stream_expression_atom=new RewriteRuleSubtreeStream(adaptor,"rule expression_atom");
		try { DebugEnterRule(GrammarFileName, "top_clause");
		DebugLocation(160, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:161:2: ( TOP WS expression_atom -> ^( T_TOP expression_atom ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:161:4: TOP WS expression_atom
			{
			DebugLocation(161, 4);
			TOP48=(IToken)Match(input,TOP,Follow._TOP_in_top_clause748); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_TOP.Add(TOP48);

			DebugLocation(161, 8);
			WS49=(IToken)Match(input,WS,Follow._WS_in_top_clause750); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS49);

			DebugLocation(161, 11);
			PushFollow(Follow._expression_atom_in_top_clause752);
			expression_atom50=expression_atom();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression_atom.Add(expression_atom50.Tree);


			{
			// AST REWRITE
			// elements: expression_atom
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 161:27: -> ^( T_TOP expression_atom )
			{
				DebugLocation(161, 30);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:161:30: ^( T_TOP expression_atom )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(161, 32);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_TOP, "T_TOP"), root_1);

				DebugLocation(161, 38);
				adaptor.AddChild(root_1, stream_expression_atom.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("top_clause", 8);
			LeaveRule("top_clause", 8);
			LeaveRule_top_clause();
	    }
	 	DebugLocation(162, 1);
		} finally { DebugExitRule(GrammarFileName, "top_clause"); }
		return retval;

	}
	// $ANTLR end "top_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_bottom_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_bottom_clause() {}

	// $ANTLR start "bottom_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:164:1: bottom_clause : BOTTOM WS expression_atom -> ^( T_BOTTOM expression_atom ) ;
	[GrammarRule("bottom_clause")]
	private AstParserRuleReturnScope<object, IToken> bottom_clause()
	{
		EnterRule_bottom_clause();
		EnterRule("bottom_clause", 9);
		TraceIn("bottom_clause", 9);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken BOTTOM51 = default(IToken);
	    IToken WS52 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression_atom53 = default(AstParserRuleReturnScope<object, IToken>);

	    object BOTTOM51_tree = default(object);
	    object WS52_tree = default(object);
	    RewriteRuleITokenStream stream_BOTTOM=new RewriteRuleITokenStream(adaptor,"token BOTTOM");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression_atom=new RewriteRuleSubtreeStream(adaptor,"rule expression_atom");
		try { DebugEnterRule(GrammarFileName, "bottom_clause");
		DebugLocation(164, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:165:2: ( BOTTOM WS expression_atom -> ^( T_BOTTOM expression_atom ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:165:4: BOTTOM WS expression_atom
			{
			DebugLocation(165, 4);
			BOTTOM51=(IToken)Match(input,BOTTOM,Follow._BOTTOM_in_bottom_clause773); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_BOTTOM.Add(BOTTOM51);

			DebugLocation(165, 11);
			WS52=(IToken)Match(input,WS,Follow._WS_in_bottom_clause775); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS52);

			DebugLocation(165, 14);
			PushFollow(Follow._expression_atom_in_bottom_clause777);
			expression_atom53=expression_atom();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression_atom.Add(expression_atom53.Tree);


			{
			// AST REWRITE
			// elements: expression_atom
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 165:30: -> ^( T_BOTTOM expression_atom )
			{
				DebugLocation(165, 33);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:165:33: ^( T_BOTTOM expression_atom )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(165, 35);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_BOTTOM, "T_BOTTOM"), root_1);

				DebugLocation(165, 44);
				adaptor.AddChild(root_1, stream_expression_atom.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bottom_clause", 9);
			LeaveRule("bottom_clause", 9);
			LeaveRule_bottom_clause();
	    }
	 	DebugLocation(166, 1);
		} finally { DebugExitRule(GrammarFileName, "bottom_clause"); }
		return retval;

	}
	// $ANTLR end "bottom_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_column_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_column_list() {}

	// $ANTLR start "column_list"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:168:1: column_list : column ( ( WS )? ',' ( WS )? column )* -> ^( T_COLUMNLIST ( column )* ) ;
	[GrammarRule("column_list")]
	private AstParserRuleReturnScope<object, IToken> column_list()
	{
		EnterRule_column_list();
		EnterRule("column_list", 10);
		TraceIn("column_list", 10);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS55 = default(IToken);
	    IToken char_literal56 = default(IToken);
	    IToken WS57 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> column54 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> column58 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS55_tree = default(object);
	    object char_literal56_tree = default(object);
	    object WS57_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_176=new RewriteRuleITokenStream(adaptor,"token 176");
	    RewriteRuleSubtreeStream stream_column=new RewriteRuleSubtreeStream(adaptor,"rule column");
		try { DebugEnterRule(GrammarFileName, "column_list");
		DebugLocation(168, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:169:2: ( column ( ( WS )? ',' ( WS )? column )* -> ^( T_COLUMNLIST ( column )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:169:4: column ( ( WS )? ',' ( WS )? column )*
			{
			DebugLocation(169, 4);
			PushFollow(Follow._column_in_column_list798);
			column54=column();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_column.Add(column54.Tree);
			DebugLocation(169, 11);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:169:11: ( ( WS )? ',' ( WS )? column )*
			try { DebugEnterSubRule(24);
			while (true)
			{
				int alt24=2;
				try { DebugEnterDecision(24, decisionCanBacktrack[24]);
				int LA24_0 = input.LA(1);

				if ((LA24_0==WS))
				{
					int LA24_1 = input.LA(2);

					if ((LA24_1==176))
					{
						alt24 = 1;
					}


				}
				else if ((LA24_0==176))
				{
					alt24 = 1;
				}


				} finally { DebugExitDecision(24); }
				switch ( alt24 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:169:12: ( WS )? ',' ( WS )? column
					{
					DebugLocation(169, 12);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:169:12: ( WS )?
					int alt22=2;
					try { DebugEnterSubRule(22);
					try { DebugEnterDecision(22, decisionCanBacktrack[22]);
					int LA22_0 = input.LA(1);

					if ((LA22_0==WS))
					{
						alt22 = 1;
					}
					} finally { DebugExitDecision(22); }
					switch (alt22)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:169:12: WS
						{
						DebugLocation(169, 12);
						WS55=(IToken)Match(input,WS,Follow._WS_in_column_list801); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS55);


						}
						break;

					}
					} finally { DebugExitSubRule(22); }

					DebugLocation(169, 16);
					char_literal56=(IToken)Match(input,176,Follow._176_in_column_list804); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_176.Add(char_literal56);

					DebugLocation(169, 20);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:169:20: ( WS )?
					int alt23=2;
					try { DebugEnterSubRule(23);
					try { DebugEnterDecision(23, decisionCanBacktrack[23]);
					int LA23_0 = input.LA(1);

					if ((LA23_0==WS))
					{
						alt23 = 1;
					}
					} finally { DebugExitDecision(23); }
					switch (alt23)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:169:20: WS
						{
						DebugLocation(169, 20);
						WS57=(IToken)Match(input,WS,Follow._WS_in_column_list806); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS57);


						}
						break;

					}
					} finally { DebugExitSubRule(23); }

					DebugLocation(169, 24);
					PushFollow(Follow._column_in_column_list809);
					column58=column();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_column.Add(column58.Tree);

					}
					break;

				default:
					goto loop24;
				}
			}

			loop24:
				;

			} finally { DebugExitSubRule(24); }



			{
			// AST REWRITE
			// elements: column
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 170:2: -> ^( T_COLUMNLIST ( column )* )
			{
				DebugLocation(170, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:170:5: ^( T_COLUMNLIST ( column )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(170, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_COLUMNLIST, "T_COLUMNLIST"), root_1);

				DebugLocation(170, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:170:20: ( column )*
				while ( stream_column.HasNext )
				{
					DebugLocation(170, 20);
					adaptor.AddChild(root_1, stream_column.NextTree());

				}
				stream_column.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("column_list", 10);
			LeaveRule("column_list", 10);
			LeaveRule_column_list();
	    }
	 	DebugLocation(171, 1);
		} finally { DebugExitRule(GrammarFileName, "column_list"); }
		return retval;

	}
	// $ANTLR end "column_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_column() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_column() {}

	// $ANTLR start "column"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:173:1: column : ( all_columns | expression ( WS SIMPLE_FILE )? -> ^( T_COLUMN expression ( SIMPLE_FILE )? ) );
	[GrammarRule("column")]
	private AstParserRuleReturnScope<object, IToken> column()
	{
		EnterRule_column();
		EnterRule("column", 11);
		TraceIn("column", 11);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS61 = default(IToken);
	    IToken SIMPLE_FILE62 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> all_columns59 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression60 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS61_tree = default(object);
	    object SIMPLE_FILE62_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_SIMPLE_FILE=new RewriteRuleITokenStream(adaptor,"token SIMPLE_FILE");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "column");
		DebugLocation(173, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:174:2: ( all_columns | expression ( WS SIMPLE_FILE )? -> ^( T_COLUMN expression ( SIMPLE_FILE )? ) )
			int alt26=2;
			try { DebugEnterDecision(26, decisionCanBacktrack[26]);
			switch (input.LA(1))
			{
			case SIMPLE_FILE:
				{
				switch (input.LA(2))
				{
				case WS:
					{
					int LA26_4 = input.LA(3);

					if ((LA26_4==EOF||LA26_4==AND||LA26_4==BETWEEN||LA26_4==FROM||LA26_4==GROUP||LA26_4==HAVING||(LA26_4>=IN && LA26_4<=INTO)||LA26_4==LIKE||LA26_4==MATCH||LA26_4==NOT||(LA26_4>=OR && LA26_4<=ORDER)||LA26_4==SIMPLE_FILE||LA26_4==UNION||LA26_4==WHERE||(LA26_4>=167 && LA26_4<=171)||(LA26_4>=173 && LA26_4<=177)||(LA26_4>=179 && LA26_4<=186)||(LA26_4>=189 && LA26_4<=190)))
					{
						alt26 = 2;
					}
					else if ((LA26_4==178))
					{
						switch (input.LA(4))
						{
						case WS:
							{
							int LA26_6 = input.LA(5);

							if ((LA26_6==174))
							{
								alt26 = 1;
							}
							else if ((LA26_6==SIMPLE_FILE))
							{
								alt26 = 2;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 26, 6, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case 174:
							{
							alt26 = 1;
							}
							break;
						case SIMPLE_FILE:
							{
							alt26 = 2;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 26, 5, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 26, 4, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 178:
					{
					switch (input.LA(3))
					{
					case WS:
						{
						int LA26_6 = input.LA(4);

						if ((LA26_6==174))
						{
							alt26 = 1;
						}
						else if ((LA26_6==SIMPLE_FILE))
						{
							alt26 = 2;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 26, 6, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case 174:
						{
						alt26 = 1;
						}
						break;
					case SIMPLE_FILE:
						{
						alt26 = 2;
						}
						break;
					default:
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 26, 5, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					}
					break;
				case EOF:
				case LIKE:
				case MATCH:
				case NOT:
				case 167:
				case 168:
				case 169:
				case 170:
				case 171:
				case 173:
				case 174:
				case 175:
				case 176:
				case 177:
				case 179:
				case 180:
				case 181:
				case 182:
				case 183:
				case 184:
				case 185:
				case 186:
				case 189:
				case 190:
					{
					alt26 = 2;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 26, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				}
				break;
			case 174:
				{
				alt26 = 1;
				}
				break;
			case CASE:
			case CAST:
			case CONVERT:
			case COUNT:
			case DATEADD:
			case DATEDIFF:
			case DATEPART:
			case EXISTS:
			case NOT:
			case NUMBER:
			case STRING:
			case SYSTEMVAR:
			case TOKEN:
			case VARIABLE:
			case 172:
			case 175:
			case 177:
			case 191:
				{
				alt26 = 2;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 26, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:174:4: all_columns
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(174, 4);
				PushFollow(Follow._all_columns_in_column833);
				all_columns59=all_columns();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, all_columns59.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:175:4: expression ( WS SIMPLE_FILE )?
				{
				DebugLocation(175, 4);
				PushFollow(Follow._expression_in_column838);
				expression60=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression60.Tree);
				DebugLocation(175, 15);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:175:15: ( WS SIMPLE_FILE )?
				int alt25=2;
				try { DebugEnterSubRule(25);
				try { DebugEnterDecision(25, decisionCanBacktrack[25]);
				int LA25_0 = input.LA(1);

				if ((LA25_0==WS))
				{
					int LA25_1 = input.LA(2);

					if ((LA25_1==SIMPLE_FILE))
					{
						alt25 = 1;
					}
				}
				} finally { DebugExitDecision(25); }
				switch (alt25)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:175:16: WS SIMPLE_FILE
					{
					DebugLocation(175, 16);
					WS61=(IToken)Match(input,WS,Follow._WS_in_column841); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS61);

					DebugLocation(175, 19);
					SIMPLE_FILE62=(IToken)Match(input,SIMPLE_FILE,Follow._SIMPLE_FILE_in_column843); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SIMPLE_FILE.Add(SIMPLE_FILE62);


					}
					break;

				}
				} finally { DebugExitSubRule(25); }



				{
				// AST REWRITE
				// elements: expression, SIMPLE_FILE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 175:33: -> ^( T_COLUMN expression ( SIMPLE_FILE )? )
				{
					DebugLocation(175, 36);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:175:36: ^( T_COLUMN expression ( SIMPLE_FILE )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(175, 38);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_COLUMN, "T_COLUMN"), root_1);

					DebugLocation(175, 47);
					adaptor.AddChild(root_1, stream_expression.NextTree());
					DebugLocation(175, 58);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:175:58: ( SIMPLE_FILE )?
					if (stream_SIMPLE_FILE.HasNext)
					{
						DebugLocation(175, 58);
						adaptor.AddChild(root_1, stream_SIMPLE_FILE.NextNode());

					}
					stream_SIMPLE_FILE.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("column", 11);
			LeaveRule("column", 11);
			LeaveRule_column();
	    }
	 	DebugLocation(176, 1);
		} finally { DebugExitRule(GrammarFileName, "column"); }
		return retval;

	}
	// $ANTLR end "column"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_all_columns() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_all_columns() {}

	// $ANTLR start "all_columns"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:178:1: all_columns : ( table_alias ( WS )? '.' ( WS )? )? '*' -> ^( T_ALLCOLUMNS ( table_alias )? ) ;
	[GrammarRule("all_columns")]
	private AstParserRuleReturnScope<object, IToken> all_columns()
	{
		EnterRule_all_columns();
		EnterRule("all_columns", 12);
		TraceIn("all_columns", 12);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS64 = default(IToken);
	    IToken char_literal65 = default(IToken);
	    IToken WS66 = default(IToken);
	    IToken char_literal67 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> table_alias63 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS64_tree = default(object);
	    object char_literal65_tree = default(object);
	    object WS66_tree = default(object);
	    object char_literal67_tree = default(object);
	    RewriteRuleITokenStream stream_174=new RewriteRuleITokenStream(adaptor,"token 174");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_178=new RewriteRuleITokenStream(adaptor,"token 178");
	    RewriteRuleSubtreeStream stream_table_alias=new RewriteRuleSubtreeStream(adaptor,"rule table_alias");
		try { DebugEnterRule(GrammarFileName, "all_columns");
		DebugLocation(178, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:179:2: ( ( table_alias ( WS )? '.' ( WS )? )? '*' -> ^( T_ALLCOLUMNS ( table_alias )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:179:4: ( table_alias ( WS )? '.' ( WS )? )? '*'
			{
			DebugLocation(179, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:179:4: ( table_alias ( WS )? '.' ( WS )? )?
			int alt29=2;
			try { DebugEnterSubRule(29);
			try { DebugEnterDecision(29, decisionCanBacktrack[29]);
			int LA29_0 = input.LA(1);

			if ((LA29_0==SIMPLE_FILE))
			{
				alt29 = 1;
			}
			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:179:5: table_alias ( WS )? '.' ( WS )?
				{
				DebugLocation(179, 5);
				PushFollow(Follow._table_alias_in_all_columns868);
				table_alias63=table_alias();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_table_alias.Add(table_alias63.Tree);
				DebugLocation(179, 17);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:179:17: ( WS )?
				int alt27=2;
				try { DebugEnterSubRule(27);
				try { DebugEnterDecision(27, decisionCanBacktrack[27]);
				int LA27_0 = input.LA(1);

				if ((LA27_0==WS))
				{
					alt27 = 1;
				}
				} finally { DebugExitDecision(27); }
				switch (alt27)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:179:17: WS
					{
					DebugLocation(179, 17);
					WS64=(IToken)Match(input,WS,Follow._WS_in_all_columns870); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS64);


					}
					break;

				}
				} finally { DebugExitSubRule(27); }

				DebugLocation(179, 21);
				char_literal65=(IToken)Match(input,178,Follow._178_in_all_columns873); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_178.Add(char_literal65);

				DebugLocation(179, 25);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:179:25: ( WS )?
				int alt28=2;
				try { DebugEnterSubRule(28);
				try { DebugEnterDecision(28, decisionCanBacktrack[28]);
				int LA28_0 = input.LA(1);

				if ((LA28_0==WS))
				{
					alt28 = 1;
				}
				} finally { DebugExitDecision(28); }
				switch (alt28)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:179:25: WS
					{
					DebugLocation(179, 25);
					WS66=(IToken)Match(input,WS,Follow._WS_in_all_columns875); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS66);


					}
					break;

				}
				} finally { DebugExitSubRule(28); }


				}
				break;

			}
			} finally { DebugExitSubRule(29); }

			DebugLocation(179, 31);
			char_literal67=(IToken)Match(input,174,Follow._174_in_all_columns880); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_174.Add(char_literal67);



			{
			// AST REWRITE
			// elements: table_alias
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 179:35: -> ^( T_ALLCOLUMNS ( table_alias )? )
			{
				DebugLocation(179, 38);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:179:38: ^( T_ALLCOLUMNS ( table_alias )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(179, 40);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_ALLCOLUMNS, "T_ALLCOLUMNS"), root_1);

				DebugLocation(179, 53);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:179:53: ( table_alias )?
				if (stream_table_alias.HasNext)
				{
					DebugLocation(179, 53);
					adaptor.AddChild(root_1, stream_table_alias.NextTree());

				}
				stream_table_alias.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("all_columns", 12);
			LeaveRule("all_columns", 12);
			LeaveRule_all_columns();
	    }
	 	DebugLocation(180, 1);
		} finally { DebugExitRule(GrammarFileName, "all_columns"); }
		return retval;

	}
	// $ANTLR end "all_columns"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_into_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_into_clause() {}

	// $ANTLR start "into_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:182:1: into_clause : INTO WS file -> ^( T_INTO file ) ;
	[GrammarRule("into_clause")]
	private AstParserRuleReturnScope<object, IToken> into_clause()
	{
		EnterRule_into_clause();
		EnterRule("into_clause", 13);
		TraceIn("into_clause", 13);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken INTO68 = default(IToken);
	    IToken WS69 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file70 = default(AstParserRuleReturnScope<object, IToken>);

	    object INTO68_tree = default(object);
	    object WS69_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_INTO=new RewriteRuleITokenStream(adaptor,"token INTO");
	    RewriteRuleSubtreeStream stream_file=new RewriteRuleSubtreeStream(adaptor,"rule file");
		try { DebugEnterRule(GrammarFileName, "into_clause");
		DebugLocation(182, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:183:2: ( INTO WS file -> ^( T_INTO file ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:183:4: INTO WS file
			{
			DebugLocation(183, 4);
			INTO68=(IToken)Match(input,INTO,Follow._INTO_in_into_clause900); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INTO.Add(INTO68);

			DebugLocation(183, 9);
			WS69=(IToken)Match(input,WS,Follow._WS_in_into_clause902); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS69);

			DebugLocation(183, 12);
			PushFollow(Follow._file_in_into_clause904);
			file70=file();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_file.Add(file70.Tree);


			{
			// AST REWRITE
			// elements: file
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 183:17: -> ^( T_INTO file )
			{
				DebugLocation(183, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:183:20: ^( T_INTO file )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(183, 22);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_INTO, "T_INTO"), root_1);

				DebugLocation(183, 29);
				adaptor.AddChild(root_1, stream_file.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("into_clause", 13);
			LeaveRule("into_clause", 13);
			LeaveRule_into_clause();
	    }
	 	DebugLocation(184, 1);
		} finally { DebugExitRule(GrammarFileName, "into_clause"); }
		return retval;

	}
	// $ANTLR end "into_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_from_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_from_clause() {}

	// $ANTLR start "from_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:186:1: from_clause : FROM WS from_clause_item ( ( WS )? ',' ( WS )? from_clause_item )* ( WS table_alias )? -> ^( T_FROM ( table_alias )? ( from_clause_item )* ) ;
	[GrammarRule("from_clause")]
	private AstParserRuleReturnScope<object, IToken> from_clause()
	{
		EnterRule_from_clause();
		EnterRule("from_clause", 14);
		TraceIn("from_clause", 14);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken FROM71 = default(IToken);
	    IToken WS72 = default(IToken);
	    IToken WS74 = default(IToken);
	    IToken char_literal75 = default(IToken);
	    IToken WS76 = default(IToken);
	    IToken WS78 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> from_clause_item73 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> from_clause_item77 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> table_alias79 = default(AstParserRuleReturnScope<object, IToken>);

	    object FROM71_tree = default(object);
	    object WS72_tree = default(object);
	    object WS74_tree = default(object);
	    object char_literal75_tree = default(object);
	    object WS76_tree = default(object);
	    object WS78_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_FROM=new RewriteRuleITokenStream(adaptor,"token FROM");
	    RewriteRuleITokenStream stream_176=new RewriteRuleITokenStream(adaptor,"token 176");
	    RewriteRuleSubtreeStream stream_from_clause_item=new RewriteRuleSubtreeStream(adaptor,"rule from_clause_item");
	    RewriteRuleSubtreeStream stream_table_alias=new RewriteRuleSubtreeStream(adaptor,"rule table_alias");
		try { DebugEnterRule(GrammarFileName, "from_clause");
		DebugLocation(186, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:187:2: ( FROM WS from_clause_item ( ( WS )? ',' ( WS )? from_clause_item )* ( WS table_alias )? -> ^( T_FROM ( table_alias )? ( from_clause_item )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:187:4: FROM WS from_clause_item ( ( WS )? ',' ( WS )? from_clause_item )* ( WS table_alias )?
			{
			DebugLocation(187, 4);
			FROM71=(IToken)Match(input,FROM,Follow._FROM_in_from_clause924); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_FROM.Add(FROM71);

			DebugLocation(187, 9);
			WS72=(IToken)Match(input,WS,Follow._WS_in_from_clause926); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS72);

			DebugLocation(187, 12);
			PushFollow(Follow._from_clause_item_in_from_clause928);
			from_clause_item73=from_clause_item();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_from_clause_item.Add(from_clause_item73.Tree);
			DebugLocation(187, 29);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:187:29: ( ( WS )? ',' ( WS )? from_clause_item )*
			try { DebugEnterSubRule(32);
			while (true)
			{
				int alt32=2;
				try { DebugEnterDecision(32, decisionCanBacktrack[32]);
				int LA32_0 = input.LA(1);

				if ((LA32_0==WS))
				{
					int LA32_1 = input.LA(2);

					if ((LA32_1==176))
					{
						alt32 = 1;
					}


				}
				else if ((LA32_0==176))
				{
					alt32 = 1;
				}


				} finally { DebugExitDecision(32); }
				switch ( alt32 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:187:30: ( WS )? ',' ( WS )? from_clause_item
					{
					DebugLocation(187, 30);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:187:30: ( WS )?
					int alt30=2;
					try { DebugEnterSubRule(30);
					try { DebugEnterDecision(30, decisionCanBacktrack[30]);
					int LA30_0 = input.LA(1);

					if ((LA30_0==WS))
					{
						alt30 = 1;
					}
					} finally { DebugExitDecision(30); }
					switch (alt30)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:187:30: WS
						{
						DebugLocation(187, 30);
						WS74=(IToken)Match(input,WS,Follow._WS_in_from_clause931); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS74);


						}
						break;

					}
					} finally { DebugExitSubRule(30); }

					DebugLocation(187, 34);
					char_literal75=(IToken)Match(input,176,Follow._176_in_from_clause934); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_176.Add(char_literal75);

					DebugLocation(187, 38);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:187:38: ( WS )?
					int alt31=2;
					try { DebugEnterSubRule(31);
					try { DebugEnterDecision(31, decisionCanBacktrack[31]);
					int LA31_0 = input.LA(1);

					if ((LA31_0==WS))
					{
						alt31 = 1;
					}
					} finally { DebugExitDecision(31); }
					switch (alt31)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:187:38: WS
						{
						DebugLocation(187, 38);
						WS76=(IToken)Match(input,WS,Follow._WS_in_from_clause936); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS76);


						}
						break;

					}
					} finally { DebugExitSubRule(31); }

					DebugLocation(187, 42);
					PushFollow(Follow._from_clause_item_in_from_clause939);
					from_clause_item77=from_clause_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_from_clause_item.Add(from_clause_item77.Tree);

					}
					break;

				default:
					goto loop32;
				}
			}

			loop32:
				;

			} finally { DebugExitSubRule(32); }

			DebugLocation(187, 61);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:187:61: ( WS table_alias )?
			int alt33=2;
			try { DebugEnterSubRule(33);
			try { DebugEnterDecision(33, decisionCanBacktrack[33]);
			int LA33_0 = input.LA(1);

			if ((LA33_0==WS))
			{
				int LA33_1 = input.LA(2);

				if ((LA33_1==SIMPLE_FILE))
				{
					alt33 = 1;
				}
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:187:62: WS table_alias
				{
				DebugLocation(187, 62);
				WS78=(IToken)Match(input,WS,Follow._WS_in_from_clause944); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS78);

				DebugLocation(187, 65);
				PushFollow(Follow._table_alias_in_from_clause946);
				table_alias79=table_alias();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_table_alias.Add(table_alias79.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(33); }



			{
			// AST REWRITE
			// elements: from_clause_item, table_alias
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 187:79: -> ^( T_FROM ( table_alias )? ( from_clause_item )* )
			{
				DebugLocation(187, 82);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:187:82: ^( T_FROM ( table_alias )? ( from_clause_item )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(187, 84);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FROM, "T_FROM"), root_1);

				DebugLocation(187, 91);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:187:91: ( table_alias )?
				if (stream_table_alias.HasNext)
				{
					DebugLocation(187, 91);
					adaptor.AddChild(root_1, stream_table_alias.NextTree());

				}
				stream_table_alias.Reset();
				DebugLocation(187, 104);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:187:104: ( from_clause_item )*
				while ( stream_from_clause_item.HasNext )
				{
					DebugLocation(187, 104);
					adaptor.AddChild(root_1, stream_from_clause_item.NextTree());

				}
				stream_from_clause_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("from_clause", 14);
			LeaveRule("from_clause", 14);
			LeaveRule_from_clause();
	    }
	 	DebugLocation(189, 1);
		} finally { DebugExitRule(GrammarFileName, "from_clause"); }
		return retval;

	}
	// $ANTLR end "from_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_from_clause_item() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_from_clause_item() {}

	// $ANTLR start "from_clause_item"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:191:1: from_clause_item : ( STRING -> ^( T_FILE STRING ) | file | subquery | view_name ( ( WS )? '(' ( expression_list )? ')' )? -> ^( T_VIEW view_name ( expression_list )? ) );
	[GrammarRule("from_clause_item")]
	private AstParserRuleReturnScope<object, IToken> from_clause_item()
	{
		EnterRule_from_clause_item();
		EnterRule("from_clause_item", 15);
		TraceIn("from_clause_item", 15);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken STRING80 = default(IToken);
	    IToken WS84 = default(IToken);
	    IToken char_literal85 = default(IToken);
	    IToken char_literal87 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file81 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> subquery82 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> view_name83 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list86 = default(AstParserRuleReturnScope<object, IToken>);

	    object STRING80_tree = default(object);
	    object WS84_tree = default(object);
	    object char_literal85_tree = default(object);
	    object char_literal87_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_172=new RewriteRuleITokenStream(adaptor,"token 172");
	    RewriteRuleITokenStream stream_173=new RewriteRuleITokenStream(adaptor,"token 173");
	    RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
	    RewriteRuleSubtreeStream stream_view_name=new RewriteRuleSubtreeStream(adaptor,"rule view_name");
	    RewriteRuleSubtreeStream stream_expression_list=new RewriteRuleSubtreeStream(adaptor,"rule expression_list");
		try { DebugEnterRule(GrammarFileName, "from_clause_item");
		DebugLocation(191, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:192:2: ( STRING -> ^( T_FILE STRING ) | file | subquery | view_name ( ( WS )? '(' ( expression_list )? ')' )? -> ^( T_VIEW view_name ( expression_list )? ) )
			int alt37=4;
			try { DebugEnterDecision(37, decisionCanBacktrack[37]);
			switch (input.LA(1))
			{
			case STRING:
				{
				alt37 = 1;
				}
				break;
			case SIMPLE_FILE:
			case 187:
				{
				alt37 = 2;
				}
				break;
			case 172:
				{
				alt37 = 3;
				}
				break;
			case TOKEN:
				{
				alt37 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 37, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:192:4: STRING
				{
				DebugLocation(192, 4);
				STRING80=(IToken)Match(input,STRING,Follow._STRING_in_from_clause_item973); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_STRING.Add(STRING80);



				{
				// AST REWRITE
				// elements: STRING
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 192:11: -> ^( T_FILE STRING )
				{
					DebugLocation(192, 14);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:192:14: ^( T_FILE STRING )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(192, 16);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILE, "T_FILE"), root_1);

					DebugLocation(192, 23);
					adaptor.AddChild(root_1, stream_STRING.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:193:4: file
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(193, 4);
				PushFollow(Follow._file_in_from_clause_item986);
				file81=file();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, file81.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:194:4: subquery
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(194, 4);
				PushFollow(Follow._subquery_in_from_clause_item991);
				subquery82=subquery();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, subquery82.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:195:4: view_name ( ( WS )? '(' ( expression_list )? ')' )?
				{
				DebugLocation(195, 4);
				PushFollow(Follow._view_name_in_from_clause_item996);
				view_name83=view_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_view_name.Add(view_name83.Tree);
				DebugLocation(195, 14);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:195:14: ( ( WS )? '(' ( expression_list )? ')' )?
				int alt36=2;
				try { DebugEnterSubRule(36);
				try { DebugEnterDecision(36, decisionCanBacktrack[36]);
				int LA36_0 = input.LA(1);

				if ((LA36_0==WS))
				{
					int LA36_1 = input.LA(2);

					if ((LA36_1==172))
					{
						alt36 = 1;
					}
				}
				else if ((LA36_0==172))
				{
					alt36 = 1;
				}
				} finally { DebugExitDecision(36); }
				switch (alt36)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:195:15: ( WS )? '(' ( expression_list )? ')'
					{
					DebugLocation(195, 15);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:195:15: ( WS )?
					int alt34=2;
					try { DebugEnterSubRule(34);
					try { DebugEnterDecision(34, decisionCanBacktrack[34]);
					int LA34_0 = input.LA(1);

					if ((LA34_0==WS))
					{
						alt34 = 1;
					}
					} finally { DebugExitDecision(34); }
					switch (alt34)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:195:15: WS
						{
						DebugLocation(195, 15);
						WS84=(IToken)Match(input,WS,Follow._WS_in_from_clause_item999); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS84);


						}
						break;

					}
					} finally { DebugExitSubRule(34); }

					DebugLocation(195, 19);
					char_literal85=(IToken)Match(input,172,Follow._172_in_from_clause_item1002); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_172.Add(char_literal85);

					DebugLocation(195, 23);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:195:23: ( expression_list )?
					int alt35=2;
					try { DebugEnterSubRule(35);
					try { DebugEnterDecision(35, decisionCanBacktrack[35]);
					int LA35_0 = input.LA(1);

					if (((LA35_0>=CASE && LA35_0<=CAST)||(LA35_0>=CONVERT && LA35_0<=COUNT)||(LA35_0>=DATEADD && LA35_0<=DATEPART)||LA35_0==EXISTS||(LA35_0>=NOT && LA35_0<=NUMBER)||LA35_0==SIMPLE_FILE||(LA35_0>=STRING && LA35_0<=SYSTEMVAR)||LA35_0==TOKEN||LA35_0==VARIABLE||LA35_0==172||LA35_0==175||LA35_0==177||LA35_0==191))
					{
						alt35 = 1;
					}
					} finally { DebugExitDecision(35); }
					switch (alt35)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:195:23: expression_list
						{
						DebugLocation(195, 23);
						PushFollow(Follow._expression_list_in_from_clause_item1004);
						expression_list86=expression_list();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expression_list.Add(expression_list86.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(35); }

					DebugLocation(195, 40);
					char_literal87=(IToken)Match(input,173,Follow._173_in_from_clause_item1007); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_173.Add(char_literal87);


					}
					break;

				}
				} finally { DebugExitSubRule(36); }



				{
				// AST REWRITE
				// elements: expression_list, view_name
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 195:46: -> ^( T_VIEW view_name ( expression_list )? )
				{
					DebugLocation(195, 49);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:195:49: ^( T_VIEW view_name ( expression_list )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(195, 51);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_VIEW, "T_VIEW"), root_1);

					DebugLocation(195, 58);
					adaptor.AddChild(root_1, stream_view_name.NextTree());
					DebugLocation(195, 68);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:195:68: ( expression_list )?
					if (stream_expression_list.HasNext)
					{
						DebugLocation(195, 68);
						adaptor.AddChild(root_1, stream_expression_list.NextTree());

					}
					stream_expression_list.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("from_clause_item", 15);
			LeaveRule("from_clause_item", 15);
			LeaveRule_from_clause_item();
	    }
	 	DebugLocation(196, 1);
		} finally { DebugExitRule(GrammarFileName, "from_clause_item"); }
		return retval;

	}
	// $ANTLR end "from_clause_item"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_subquery() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_subquery() {}

	// $ANTLR start "subquery"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:198:1: subquery : '(' ( WS )? select_command ( WS )? ')' -> ^( T_SUBQUERY select_command ) ;
	[GrammarRule("subquery")]
	private AstParserRuleReturnScope<object, IToken> subquery()
	{
		EnterRule_subquery();
		EnterRule("subquery", 16);
		TraceIn("subquery", 16);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal88 = default(IToken);
	    IToken WS89 = default(IToken);
	    IToken WS91 = default(IToken);
	    IToken char_literal92 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> select_command90 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal88_tree = default(object);
	    object WS89_tree = default(object);
	    object WS91_tree = default(object);
	    object char_literal92_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_172=new RewriteRuleITokenStream(adaptor,"token 172");
	    RewriteRuleITokenStream stream_173=new RewriteRuleITokenStream(adaptor,"token 173");
	    RewriteRuleSubtreeStream stream_select_command=new RewriteRuleSubtreeStream(adaptor,"rule select_command");
		try { DebugEnterRule(GrammarFileName, "subquery");
		DebugLocation(198, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:199:2: ( '(' ( WS )? select_command ( WS )? ')' -> ^( T_SUBQUERY select_command ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:199:4: '(' ( WS )? select_command ( WS )? ')'
			{
			DebugLocation(199, 4);
			char_literal88=(IToken)Match(input,172,Follow._172_in_subquery1032); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_172.Add(char_literal88);

			DebugLocation(199, 8);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:199:8: ( WS )?
			int alt38=2;
			try { DebugEnterSubRule(38);
			try { DebugEnterDecision(38, decisionCanBacktrack[38]);
			int LA38_0 = input.LA(1);

			if ((LA38_0==WS))
			{
				alt38 = 1;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:199:8: WS
				{
				DebugLocation(199, 8);
				WS89=(IToken)Match(input,WS,Follow._WS_in_subquery1034); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS89);


				}
				break;

			}
			} finally { DebugExitSubRule(38); }

			DebugLocation(199, 12);
			PushFollow(Follow._select_command_in_subquery1037);
			select_command90=select_command();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_select_command.Add(select_command90.Tree);
			DebugLocation(199, 27);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:199:27: ( WS )?
			int alt39=2;
			try { DebugEnterSubRule(39);
			try { DebugEnterDecision(39, decisionCanBacktrack[39]);
			int LA39_0 = input.LA(1);

			if ((LA39_0==WS))
			{
				alt39 = 1;
			}
			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:199:27: WS
				{
				DebugLocation(199, 27);
				WS91=(IToken)Match(input,WS,Follow._WS_in_subquery1039); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS91);


				}
				break;

			}
			} finally { DebugExitSubRule(39); }

			DebugLocation(199, 31);
			char_literal92=(IToken)Match(input,173,Follow._173_in_subquery1042); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_173.Add(char_literal92);



			{
			// AST REWRITE
			// elements: select_command
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 199:35: -> ^( T_SUBQUERY select_command )
			{
				DebugLocation(199, 38);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:199:38: ^( T_SUBQUERY select_command )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(199, 40);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SUBQUERY, "T_SUBQUERY"), root_1);

				DebugLocation(199, 51);
				adaptor.AddChild(root_1, stream_select_command.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("subquery", 16);
			LeaveRule("subquery", 16);
			LeaveRule_subquery();
	    }
	 	DebugLocation(200, 1);
		} finally { DebugExitRule(GrammarFileName, "subquery"); }
		return retval;

	}
	// $ANTLR end "subquery"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file() {}

	// $ANTLR start "file"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:202:1: file : ( '[' ( WS )? file_spec ( WS file_option )* ( WS )? ']' -> ^( T_FILE file_spec ( file_option )* ) | '[' ( WS )? subquery ( WS )? ']' -> ^( T_FILESUBQUERY subquery ) | SIMPLE_FILE -> ^( T_FILE SIMPLE_FILE ) );
	[GrammarRule("file")]
	private AstParserRuleReturnScope<object, IToken> file()
	{
		EnterRule_file();
		EnterRule("file", 17);
		TraceIn("file", 17);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal93 = default(IToken);
	    IToken WS94 = default(IToken);
	    IToken WS96 = default(IToken);
	    IToken WS98 = default(IToken);
	    IToken char_literal99 = default(IToken);
	    IToken char_literal100 = default(IToken);
	    IToken WS101 = default(IToken);
	    IToken WS103 = default(IToken);
	    IToken char_literal104 = default(IToken);
	    IToken SIMPLE_FILE105 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file_spec95 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> file_option97 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> subquery102 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal93_tree = default(object);
	    object WS94_tree = default(object);
	    object WS96_tree = default(object);
	    object WS98_tree = default(object);
	    object char_literal99_tree = default(object);
	    object char_literal100_tree = default(object);
	    object WS101_tree = default(object);
	    object WS103_tree = default(object);
	    object char_literal104_tree = default(object);
	    object SIMPLE_FILE105_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_SIMPLE_FILE=new RewriteRuleITokenStream(adaptor,"token SIMPLE_FILE");
	    RewriteRuleITokenStream stream_188=new RewriteRuleITokenStream(adaptor,"token 188");
	    RewriteRuleITokenStream stream_187=new RewriteRuleITokenStream(adaptor,"token 187");
	    RewriteRuleSubtreeStream stream_file_option=new RewriteRuleSubtreeStream(adaptor,"rule file_option");
	    RewriteRuleSubtreeStream stream_file_spec=new RewriteRuleSubtreeStream(adaptor,"rule file_spec");
	    RewriteRuleSubtreeStream stream_subquery=new RewriteRuleSubtreeStream(adaptor,"rule subquery");
		try { DebugEnterRule(GrammarFileName, "file");
		DebugLocation(202, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:203:2: ( '[' ( WS )? file_spec ( WS file_option )* ( WS )? ']' -> ^( T_FILE file_spec ( file_option )* ) | '[' ( WS )? subquery ( WS )? ']' -> ^( T_FILESUBQUERY subquery ) | SIMPLE_FILE -> ^( T_FILE SIMPLE_FILE ) )
			int alt45=3;
			try { DebugEnterDecision(45, decisionCanBacktrack[45]);
			int LA45_0 = input.LA(1);

			if ((LA45_0==187))
			{
				switch (input.LA(2))
				{
				case WS:
					{
					int LA45_3 = input.LA(3);

					if ((LA45_3==STRING||LA45_3==VARIABLE))
					{
						alt45 = 1;
					}
					else if ((LA45_3==172))
					{
						alt45 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 45, 3, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case STRING:
				case VARIABLE:
					{
					alt45 = 1;
					}
					break;
				case 172:
					{
					alt45 = 2;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 45, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else if ((LA45_0==SIMPLE_FILE))
			{
				alt45 = 3;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 45, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(45); }
			switch (alt45)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:203:4: '[' ( WS )? file_spec ( WS file_option )* ( WS )? ']'
				{
				DebugLocation(203, 4);
				char_literal93=(IToken)Match(input,187,Follow._187_in_file1061); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_187.Add(char_literal93);

				DebugLocation(203, 8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:203:8: ( WS )?
				int alt40=2;
				try { DebugEnterSubRule(40);
				try { DebugEnterDecision(40, decisionCanBacktrack[40]);
				int LA40_0 = input.LA(1);

				if ((LA40_0==WS))
				{
					alt40 = 1;
				}
				} finally { DebugExitDecision(40); }
				switch (alt40)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:203:8: WS
					{
					DebugLocation(203, 8);
					WS94=(IToken)Match(input,WS,Follow._WS_in_file1063); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS94);


					}
					break;

				}
				} finally { DebugExitSubRule(40); }

				DebugLocation(203, 12);
				PushFollow(Follow._file_spec_in_file1066);
				file_spec95=file_spec();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_file_spec.Add(file_spec95.Tree);
				DebugLocation(203, 22);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:203:22: ( WS file_option )*
				try { DebugEnterSubRule(41);
				while (true)
				{
					int alt41=2;
					try { DebugEnterDecision(41, decisionCanBacktrack[41]);
					int LA41_0 = input.LA(1);

					if ((LA41_0==WS))
					{
						int LA41_1 = input.LA(2);

						if ((LA41_1==177))
						{
							alt41 = 1;
						}


					}


					} finally { DebugExitDecision(41); }
					switch ( alt41 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:203:23: WS file_option
						{
						DebugLocation(203, 23);
						WS96=(IToken)Match(input,WS,Follow._WS_in_file1069); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS96);

						DebugLocation(203, 26);
						PushFollow(Follow._file_option_in_file1071);
						file_option97=file_option();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_file_option.Add(file_option97.Tree);

						}
						break;

					default:
						goto loop41;
					}
				}

				loop41:
					;

				} finally { DebugExitSubRule(41); }

				DebugLocation(203, 40);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:203:40: ( WS )?
				int alt42=2;
				try { DebugEnterSubRule(42);
				try { DebugEnterDecision(42, decisionCanBacktrack[42]);
				int LA42_0 = input.LA(1);

				if ((LA42_0==WS))
				{
					alt42 = 1;
				}
				} finally { DebugExitDecision(42); }
				switch (alt42)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:203:40: WS
					{
					DebugLocation(203, 40);
					WS98=(IToken)Match(input,WS,Follow._WS_in_file1075); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS98);


					}
					break;

				}
				} finally { DebugExitSubRule(42); }

				DebugLocation(203, 44);
				char_literal99=(IToken)Match(input,188,Follow._188_in_file1078); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_188.Add(char_literal99);



				{
				// AST REWRITE
				// elements: file_option, file_spec
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 203:48: -> ^( T_FILE file_spec ( file_option )* )
				{
					DebugLocation(203, 51);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:203:51: ^( T_FILE file_spec ( file_option )* )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(203, 53);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILE, "T_FILE"), root_1);

					DebugLocation(203, 60);
					adaptor.AddChild(root_1, stream_file_spec.NextTree());
					DebugLocation(203, 70);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:203:70: ( file_option )*
					while ( stream_file_option.HasNext )
					{
						DebugLocation(203, 70);
						adaptor.AddChild(root_1, stream_file_option.NextTree());

					}
					stream_file_option.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:204:4: '[' ( WS )? subquery ( WS )? ']'
				{
				DebugLocation(204, 4);
				char_literal100=(IToken)Match(input,187,Follow._187_in_file1095); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_187.Add(char_literal100);

				DebugLocation(204, 8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:204:8: ( WS )?
				int alt43=2;
				try { DebugEnterSubRule(43);
				try { DebugEnterDecision(43, decisionCanBacktrack[43]);
				int LA43_0 = input.LA(1);

				if ((LA43_0==WS))
				{
					alt43 = 1;
				}
				} finally { DebugExitDecision(43); }
				switch (alt43)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:204:8: WS
					{
					DebugLocation(204, 8);
					WS101=(IToken)Match(input,WS,Follow._WS_in_file1097); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS101);


					}
					break;

				}
				} finally { DebugExitSubRule(43); }

				DebugLocation(204, 12);
				PushFollow(Follow._subquery_in_file1100);
				subquery102=subquery();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_subquery.Add(subquery102.Tree);
				DebugLocation(204, 21);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:204:21: ( WS )?
				int alt44=2;
				try { DebugEnterSubRule(44);
				try { DebugEnterDecision(44, decisionCanBacktrack[44]);
				int LA44_0 = input.LA(1);

				if ((LA44_0==WS))
				{
					alt44 = 1;
				}
				} finally { DebugExitDecision(44); }
				switch (alt44)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:204:21: WS
					{
					DebugLocation(204, 21);
					WS103=(IToken)Match(input,WS,Follow._WS_in_file1102); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS103);


					}
					break;

				}
				} finally { DebugExitSubRule(44); }

				DebugLocation(204, 25);
				char_literal104=(IToken)Match(input,188,Follow._188_in_file1105); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_188.Add(char_literal104);



				{
				// AST REWRITE
				// elements: subquery
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 204:29: -> ^( T_FILESUBQUERY subquery )
				{
					DebugLocation(204, 32);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:204:32: ^( T_FILESUBQUERY subquery )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(204, 34);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILESUBQUERY, "T_FILESUBQUERY"), root_1);

					DebugLocation(204, 49);
					adaptor.AddChild(root_1, stream_subquery.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:205:4: SIMPLE_FILE
				{
				DebugLocation(205, 4);
				SIMPLE_FILE105=(IToken)Match(input,SIMPLE_FILE,Follow._SIMPLE_FILE_in_file1118); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SIMPLE_FILE.Add(SIMPLE_FILE105);



				{
				// AST REWRITE
				// elements: SIMPLE_FILE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 205:16: -> ^( T_FILE SIMPLE_FILE )
				{
					DebugLocation(205, 19);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:205:19: ^( T_FILE SIMPLE_FILE )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(205, 21);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILE, "T_FILE"), root_1);

					DebugLocation(205, 28);
					adaptor.AddChild(root_1, stream_SIMPLE_FILE.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file", 17);
			LeaveRule("file", 17);
			LeaveRule_file();
	    }
	 	DebugLocation(206, 1);
		} finally { DebugExitRule(GrammarFileName, "file"); }
		return retval;

	}
	// $ANTLR end "file"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_spec() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_spec() {}

	// $ANTLR start "file_spec"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:208:1: file_spec : ( string | variable );
	[GrammarRule("file_spec")]
	private AstParserRuleReturnScope<object, IToken> file_spec()
	{
		EnterRule_file_spec();
		EnterRule("file_spec", 18);
		TraceIn("file_spec", 18);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> string106 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> variable107 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "file_spec");
		DebugLocation(208, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:209:2: ( string | variable )
			int alt46=2;
			try { DebugEnterDecision(46, decisionCanBacktrack[46]);
			int LA46_0 = input.LA(1);

			if ((LA46_0==STRING))
			{
				alt46 = 1;
			}
			else if ((LA46_0==VARIABLE))
			{
				alt46 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 46, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(46); }
			switch (alt46)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:209:4: string
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(209, 4);
				PushFollow(Follow._string_in_file_spec1137);
				string106=@string();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, string106.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:210:4: variable
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(210, 4);
				PushFollow(Follow._variable_in_file_spec1142);
				variable107=variable();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variable107.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_spec", 18);
			LeaveRule("file_spec", 18);
			LeaveRule_file_spec();
	    }
	 	DebugLocation(211, 1);
		} finally { DebugExitRule(GrammarFileName, "file_spec"); }
		return retval;

	}
	// $ANTLR end "file_spec"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_option() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_option() {}

	// $ANTLR start "file_option"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:213:1: file_option : '-' file_option_name ( ( WS )? '=' ( WS )? file_option_value )? -> ^( T_FILEOPTION file_option_name ( file_option_value )? ) ;
	[GrammarRule("file_option")]
	private AstParserRuleReturnScope<object, IToken> file_option()
	{
		EnterRule_file_option();
		EnterRule("file_option", 19);
		TraceIn("file_option", 19);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal108 = default(IToken);
	    IToken WS110 = default(IToken);
	    IToken char_literal111 = default(IToken);
	    IToken WS112 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file_option_name109 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> file_option_value113 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal108_tree = default(object);
	    object WS110_tree = default(object);
	    object char_literal111_tree = default(object);
	    object WS112_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_184=new RewriteRuleITokenStream(adaptor,"token 184");
	    RewriteRuleITokenStream stream_177=new RewriteRuleITokenStream(adaptor,"token 177");
	    RewriteRuleSubtreeStream stream_file_option_name=new RewriteRuleSubtreeStream(adaptor,"rule file_option_name");
	    RewriteRuleSubtreeStream stream_file_option_value=new RewriteRuleSubtreeStream(adaptor,"rule file_option_value");
		try { DebugEnterRule(GrammarFileName, "file_option");
		DebugLocation(213, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:214:2: ( '-' file_option_name ( ( WS )? '=' ( WS )? file_option_value )? -> ^( T_FILEOPTION file_option_name ( file_option_value )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:214:4: '-' file_option_name ( ( WS )? '=' ( WS )? file_option_value )?
			{
			DebugLocation(214, 4);
			char_literal108=(IToken)Match(input,177,Follow._177_in_file_option1154); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_177.Add(char_literal108);

			DebugLocation(214, 8);
			PushFollow(Follow._file_option_name_in_file_option1156);
			file_option_name109=file_option_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_file_option_name.Add(file_option_name109.Tree);
			DebugLocation(214, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:214:25: ( ( WS )? '=' ( WS )? file_option_value )?
			int alt49=2;
			try { DebugEnterSubRule(49);
			try { DebugEnterDecision(49, decisionCanBacktrack[49]);
			int LA49_0 = input.LA(1);

			if ((LA49_0==WS))
			{
				int LA49_1 = input.LA(2);

				if ((LA49_1==184))
				{
					alt49 = 1;
				}
			}
			else if ((LA49_0==184))
			{
				alt49 = 1;
			}
			} finally { DebugExitDecision(49); }
			switch (alt49)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:214:27: ( WS )? '=' ( WS )? file_option_value
				{
				DebugLocation(214, 27);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:214:27: ( WS )?
				int alt47=2;
				try { DebugEnterSubRule(47);
				try { DebugEnterDecision(47, decisionCanBacktrack[47]);
				int LA47_0 = input.LA(1);

				if ((LA47_0==WS))
				{
					alt47 = 1;
				}
				} finally { DebugExitDecision(47); }
				switch (alt47)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:214:27: WS
					{
					DebugLocation(214, 27);
					WS110=(IToken)Match(input,WS,Follow._WS_in_file_option1160); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS110);


					}
					break;

				}
				} finally { DebugExitSubRule(47); }

				DebugLocation(214, 31);
				char_literal111=(IToken)Match(input,184,Follow._184_in_file_option1163); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_184.Add(char_literal111);

				DebugLocation(214, 35);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:214:35: ( WS )?
				int alt48=2;
				try { DebugEnterSubRule(48);
				try { DebugEnterDecision(48, decisionCanBacktrack[48]);
				int LA48_0 = input.LA(1);

				if ((LA48_0==WS))
				{
					alt48 = 1;
				}
				} finally { DebugExitDecision(48); }
				switch (alt48)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:214:35: WS
					{
					DebugLocation(214, 35);
					WS112=(IToken)Match(input,WS,Follow._WS_in_file_option1165); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS112);


					}
					break;

				}
				} finally { DebugExitSubRule(48); }

				DebugLocation(214, 39);
				PushFollow(Follow._file_option_value_in_file_option1168);
				file_option_value113=file_option_value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_file_option_value.Add(file_option_value113.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(49); }



			{
			// AST REWRITE
			// elements: file_option_name, file_option_value
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 214:59: -> ^( T_FILEOPTION file_option_name ( file_option_value )? )
			{
				DebugLocation(214, 62);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:214:62: ^( T_FILEOPTION file_option_name ( file_option_value )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(214, 64);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILEOPTION, "T_FILEOPTION"), root_1);

				DebugLocation(214, 77);
				adaptor.AddChild(root_1, stream_file_option_name.NextTree());
				DebugLocation(214, 94);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:214:94: ( file_option_value )?
				if (stream_file_option_value.HasNext)
				{
					DebugLocation(214, 94);
					adaptor.AddChild(root_1, stream_file_option_value.NextTree());

				}
				stream_file_option_value.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_option", 19);
			LeaveRule("file_option", 19);
			LeaveRule_file_option();
	    }
	 	DebugLocation(215, 1);
		} finally { DebugExitRule(GrammarFileName, "file_option"); }
		return retval;

	}
	// $ANTLR end "file_option"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_option_name() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_option_name() {}

	// $ANTLR start "file_option_name"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:217:1: file_option_name : TOKEN ;
	[GrammarRule("file_option_name")]
	private AstParserRuleReturnScope<object, IToken> file_option_name()
	{
		EnterRule_file_option_name();
		EnterRule("file_option_name", 20);
		TraceIn("file_option_name", 20);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN114 = default(IToken);

	    object TOKEN114_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "file_option_name");
		DebugLocation(217, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:218:2: ( TOKEN )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:218:4: TOKEN
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(218, 4);
			TOKEN114=(IToken)Match(input,TOKEN,Follow._TOKEN_in_file_option_name1192); if (state.failed) return retval;
			if (state.backtracking == 0) {
			TOKEN114_tree = (object)adaptor.Create(TOKEN114);
			adaptor.AddChild(root_0, TOKEN114_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_option_name", 20);
			LeaveRule("file_option_name", 20);
			LeaveRule_file_option_name();
	    }
	 	DebugLocation(219, 1);
		} finally { DebugExitRule(GrammarFileName, "file_option_name"); }
		return retval;

	}
	// $ANTLR end "file_option_name"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_option_value() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_option_value() {}

	// $ANTLR start "file_option_value"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:221:1: file_option_value : ( TOKEN | STRING | NUMBER | variable );
	[GrammarRule("file_option_value")]
	private AstParserRuleReturnScope<object, IToken> file_option_value()
	{
		EnterRule_file_option_value();
		EnterRule("file_option_value", 21);
		TraceIn("file_option_value", 21);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN115 = default(IToken);
	    IToken STRING116 = default(IToken);
	    IToken NUMBER117 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> variable118 = default(AstParserRuleReturnScope<object, IToken>);

	    object TOKEN115_tree = default(object);
	    object STRING116_tree = default(object);
	    object NUMBER117_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "file_option_value");
		DebugLocation(221, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:222:2: ( TOKEN | STRING | NUMBER | variable )
			int alt50=4;
			try { DebugEnterDecision(50, decisionCanBacktrack[50]);
			switch (input.LA(1))
			{
			case TOKEN:
				{
				alt50 = 1;
				}
				break;
			case STRING:
				{
				alt50 = 2;
				}
				break;
			case NUMBER:
				{
				alt50 = 3;
				}
				break;
			case VARIABLE:
				{
				alt50 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 50, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(50); }
			switch (alt50)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:222:4: TOKEN
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(222, 4);
				TOKEN115=(IToken)Match(input,TOKEN,Follow._TOKEN_in_file_option_value1204); if (state.failed) return retval;
				if (state.backtracking == 0) {
				TOKEN115_tree = (object)adaptor.Create(TOKEN115);
				adaptor.AddChild(root_0, TOKEN115_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:222:12: STRING
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(222, 12);
				STRING116=(IToken)Match(input,STRING,Follow._STRING_in_file_option_value1208); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRING116_tree = (object)adaptor.Create(STRING116);
				adaptor.AddChild(root_0, STRING116_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:222:21: NUMBER
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(222, 21);
				NUMBER117=(IToken)Match(input,NUMBER,Follow._NUMBER_in_file_option_value1212); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NUMBER117_tree = (object)adaptor.Create(NUMBER117);
				adaptor.AddChild(root_0, NUMBER117_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:222:30: variable
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(222, 30);
				PushFollow(Follow._variable_in_file_option_value1216);
				variable118=variable();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variable118.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_option_value", 21);
			LeaveRule("file_option_value", 21);
			LeaveRule_file_option_value();
	    }
	 	DebugLocation(223, 1);
		} finally { DebugExitRule(GrammarFileName, "file_option_value"); }
		return retval;

	}
	// $ANTLR end "file_option_value"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_where_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_where_clause() {}

	// $ANTLR start "where_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:225:1: where_clause : WHERE WS expression -> ^( T_WHERE expression ) ;
	[GrammarRule("where_clause")]
	private AstParserRuleReturnScope<object, IToken> where_clause()
	{
		EnterRule_where_clause();
		EnterRule("where_clause", 22);
		TraceIn("where_clause", 22);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WHERE119 = default(IToken);
	    IToken WS120 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression121 = default(AstParserRuleReturnScope<object, IToken>);

	    object WHERE119_tree = default(object);
	    object WS120_tree = default(object);
	    RewriteRuleITokenStream stream_WHERE=new RewriteRuleITokenStream(adaptor,"token WHERE");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "where_clause");
		DebugLocation(225, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:226:2: ( WHERE WS expression -> ^( T_WHERE expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:226:4: WHERE WS expression
			{
			DebugLocation(226, 4);
			WHERE119=(IToken)Match(input,WHERE,Follow._WHERE_in_where_clause1228); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WHERE.Add(WHERE119);

			DebugLocation(226, 10);
			WS120=(IToken)Match(input,WS,Follow._WS_in_where_clause1230); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS120);

			DebugLocation(226, 13);
			PushFollow(Follow._expression_in_where_clause1232);
			expression121=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression.Add(expression121.Tree);


			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 227:2: -> ^( T_WHERE expression )
			{
				DebugLocation(227, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:227:5: ^( T_WHERE expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(227, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_WHERE, "T_WHERE"), root_1);

				DebugLocation(227, 15);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("where_clause", 22);
			LeaveRule("where_clause", 22);
			LeaveRule_where_clause();
	    }
	 	DebugLocation(228, 1);
		} finally { DebugExitRule(GrammarFileName, "where_clause"); }
		return retval;

	}
	// $ANTLR end "where_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_groupby_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_groupby_clause() {}

	// $ANTLR start "groupby_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:229:1: groupby_clause : GROUP WS BY WS orderby_column_list -> ^( T_GROUPBY orderby_column_list ) ;
	[GrammarRule("groupby_clause")]
	private AstParserRuleReturnScope<object, IToken> groupby_clause()
	{
		EnterRule_groupby_clause();
		EnterRule("groupby_clause", 23);
		TraceIn("groupby_clause", 23);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken GROUP122 = default(IToken);
	    IToken WS123 = default(IToken);
	    IToken BY124 = default(IToken);
	    IToken WS125 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> orderby_column_list126 = default(AstParserRuleReturnScope<object, IToken>);

	    object GROUP122_tree = default(object);
	    object WS123_tree = default(object);
	    object BY124_tree = default(object);
	    object WS125_tree = default(object);
	    RewriteRuleITokenStream stream_GROUP=new RewriteRuleITokenStream(adaptor,"token GROUP");
	    RewriteRuleITokenStream stream_BY=new RewriteRuleITokenStream(adaptor,"token BY");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_orderby_column_list=new RewriteRuleSubtreeStream(adaptor,"rule orderby_column_list");
		try { DebugEnterRule(GrammarFileName, "groupby_clause");
		DebugLocation(229, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:230:2: ( GROUP WS BY WS orderby_column_list -> ^( T_GROUPBY orderby_column_list ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:230:4: GROUP WS BY WS orderby_column_list
			{
			DebugLocation(230, 4);
			GROUP122=(IToken)Match(input,GROUP,Follow._GROUP_in_groupby_clause1251); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_GROUP.Add(GROUP122);

			DebugLocation(230, 10);
			WS123=(IToken)Match(input,WS,Follow._WS_in_groupby_clause1253); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS123);

			DebugLocation(230, 13);
			BY124=(IToken)Match(input,BY,Follow._BY_in_groupby_clause1255); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_BY.Add(BY124);

			DebugLocation(230, 16);
			WS125=(IToken)Match(input,WS,Follow._WS_in_groupby_clause1257); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS125);

			DebugLocation(230, 19);
			PushFollow(Follow._orderby_column_list_in_groupby_clause1259);
			orderby_column_list126=orderby_column_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_orderby_column_list.Add(orderby_column_list126.Tree);


			{
			// AST REWRITE
			// elements: orderby_column_list
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 231:2: -> ^( T_GROUPBY orderby_column_list )
			{
				DebugLocation(231, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:231:5: ^( T_GROUPBY orderby_column_list )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(231, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_GROUPBY, "T_GROUPBY"), root_1);

				DebugLocation(231, 17);
				adaptor.AddChild(root_1, stream_orderby_column_list.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("groupby_clause", 23);
			LeaveRule("groupby_clause", 23);
			LeaveRule_groupby_clause();
	    }
	 	DebugLocation(232, 1);
		} finally { DebugExitRule(GrammarFileName, "groupby_clause"); }
		return retval;

	}
	// $ANTLR end "groupby_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_having_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_having_clause() {}

	// $ANTLR start "having_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:234:1: having_clause : HAVING WS expression -> ^( T_HAVING expression ) ;
	[GrammarRule("having_clause")]
	private AstParserRuleReturnScope<object, IToken> having_clause()
	{
		EnterRule_having_clause();
		EnterRule("having_clause", 24);
		TraceIn("having_clause", 24);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken HAVING127 = default(IToken);
	    IToken WS128 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression129 = default(AstParserRuleReturnScope<object, IToken>);

	    object HAVING127_tree = default(object);
	    object WS128_tree = default(object);
	    RewriteRuleITokenStream stream_HAVING=new RewriteRuleITokenStream(adaptor,"token HAVING");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "having_clause");
		DebugLocation(234, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:235:2: ( HAVING WS expression -> ^( T_HAVING expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:235:4: HAVING WS expression
			{
			DebugLocation(235, 4);
			HAVING127=(IToken)Match(input,HAVING,Follow._HAVING_in_having_clause1280); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_HAVING.Add(HAVING127);

			DebugLocation(235, 11);
			WS128=(IToken)Match(input,WS,Follow._WS_in_having_clause1282); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS128);

			DebugLocation(235, 14);
			PushFollow(Follow._expression_in_having_clause1284);
			expression129=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression.Add(expression129.Tree);


			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 236:2: -> ^( T_HAVING expression )
			{
				DebugLocation(236, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:236:5: ^( T_HAVING expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(236, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_HAVING, "T_HAVING"), root_1);

				DebugLocation(236, 16);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("having_clause", 24);
			LeaveRule("having_clause", 24);
			LeaveRule_having_clause();
	    }
	 	DebugLocation(237, 1);
		} finally { DebugExitRule(GrammarFileName, "having_clause"); }
		return retval;

	}
	// $ANTLR end "having_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_clause() {}

	// $ANTLR start "orderby_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:239:1: orderby_clause : ORDER WS BY WS orderby_column_list -> ^( T_ORDERBY orderby_column_list ) ;
	[GrammarRule("orderby_clause")]
	private AstParserRuleReturnScope<object, IToken> orderby_clause()
	{
		EnterRule_orderby_clause();
		EnterRule("orderby_clause", 25);
		TraceIn("orderby_clause", 25);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken ORDER130 = default(IToken);
	    IToken WS131 = default(IToken);
	    IToken BY132 = default(IToken);
	    IToken WS133 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> orderby_column_list134 = default(AstParserRuleReturnScope<object, IToken>);

	    object ORDER130_tree = default(object);
	    object WS131_tree = default(object);
	    object BY132_tree = default(object);
	    object WS133_tree = default(object);
	    RewriteRuleITokenStream stream_BY=new RewriteRuleITokenStream(adaptor,"token BY");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_ORDER=new RewriteRuleITokenStream(adaptor,"token ORDER");
	    RewriteRuleSubtreeStream stream_orderby_column_list=new RewriteRuleSubtreeStream(adaptor,"rule orderby_column_list");
		try { DebugEnterRule(GrammarFileName, "orderby_clause");
		DebugLocation(239, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:240:2: ( ORDER WS BY WS orderby_column_list -> ^( T_ORDERBY orderby_column_list ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:240:4: ORDER WS BY WS orderby_column_list
			{
			DebugLocation(240, 4);
			ORDER130=(IToken)Match(input,ORDER,Follow._ORDER_in_orderby_clause1305); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ORDER.Add(ORDER130);

			DebugLocation(240, 10);
			WS131=(IToken)Match(input,WS,Follow._WS_in_orderby_clause1307); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS131);

			DebugLocation(240, 13);
			BY132=(IToken)Match(input,BY,Follow._BY_in_orderby_clause1309); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_BY.Add(BY132);

			DebugLocation(240, 16);
			WS133=(IToken)Match(input,WS,Follow._WS_in_orderby_clause1311); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS133);

			DebugLocation(240, 19);
			PushFollow(Follow._orderby_column_list_in_orderby_clause1313);
			orderby_column_list134=orderby_column_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_orderby_column_list.Add(orderby_column_list134.Tree);


			{
			// AST REWRITE
			// elements: orderby_column_list
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 241:2: -> ^( T_ORDERBY orderby_column_list )
			{
				DebugLocation(241, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:241:5: ^( T_ORDERBY orderby_column_list )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(241, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_ORDERBY, "T_ORDERBY"), root_1);

				DebugLocation(241, 17);
				adaptor.AddChild(root_1, stream_orderby_column_list.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_clause", 25);
			LeaveRule("orderby_clause", 25);
			LeaveRule_orderby_clause();
	    }
	 	DebugLocation(242, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_clause"); }
		return retval;

	}
	// $ANTLR end "orderby_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_column_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_column_list() {}

	// $ANTLR start "orderby_column_list"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:244:1: orderby_column_list : orderby_column ( ( WS )? ',' ( WS )? orderby_column )* -> ( orderby_column )* ;
	[GrammarRule("orderby_column_list")]
	private AstParserRuleReturnScope<object, IToken> orderby_column_list()
	{
		EnterRule_orderby_column_list();
		EnterRule("orderby_column_list", 26);
		TraceIn("orderby_column_list", 26);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS136 = default(IToken);
	    IToken char_literal137 = default(IToken);
	    IToken WS138 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> orderby_column135 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> orderby_column139 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS136_tree = default(object);
	    object char_literal137_tree = default(object);
	    object WS138_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_176=new RewriteRuleITokenStream(adaptor,"token 176");
	    RewriteRuleSubtreeStream stream_orderby_column=new RewriteRuleSubtreeStream(adaptor,"rule orderby_column");
		try { DebugEnterRule(GrammarFileName, "orderby_column_list");
		DebugLocation(244, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:245:2: ( orderby_column ( ( WS )? ',' ( WS )? orderby_column )* -> ( orderby_column )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:245:4: orderby_column ( ( WS )? ',' ( WS )? orderby_column )*
			{
			DebugLocation(245, 4);
			PushFollow(Follow._orderby_column_in_orderby_column_list1334);
			orderby_column135=orderby_column();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_orderby_column.Add(orderby_column135.Tree);
			DebugLocation(245, 19);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:245:19: ( ( WS )? ',' ( WS )? orderby_column )*
			try { DebugEnterSubRule(53);
			while (true)
			{
				int alt53=2;
				try { DebugEnterDecision(53, decisionCanBacktrack[53]);
				int LA53_0 = input.LA(1);

				if ((LA53_0==WS))
				{
					int LA53_1 = input.LA(2);

					if ((LA53_1==176))
					{
						alt53 = 1;
					}


				}
				else if ((LA53_0==176))
				{
					alt53 = 1;
				}


				} finally { DebugExitDecision(53); }
				switch ( alt53 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:245:20: ( WS )? ',' ( WS )? orderby_column
					{
					DebugLocation(245, 20);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:245:20: ( WS )?
					int alt51=2;
					try { DebugEnterSubRule(51);
					try { DebugEnterDecision(51, decisionCanBacktrack[51]);
					int LA51_0 = input.LA(1);

					if ((LA51_0==WS))
					{
						alt51 = 1;
					}
					} finally { DebugExitDecision(51); }
					switch (alt51)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:245:20: WS
						{
						DebugLocation(245, 20);
						WS136=(IToken)Match(input,WS,Follow._WS_in_orderby_column_list1337); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS136);


						}
						break;

					}
					} finally { DebugExitSubRule(51); }

					DebugLocation(245, 24);
					char_literal137=(IToken)Match(input,176,Follow._176_in_orderby_column_list1340); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_176.Add(char_literal137);

					DebugLocation(245, 28);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:245:28: ( WS )?
					int alt52=2;
					try { DebugEnterSubRule(52);
					try { DebugEnterDecision(52, decisionCanBacktrack[52]);
					int LA52_0 = input.LA(1);

					if ((LA52_0==WS))
					{
						alt52 = 1;
					}
					} finally { DebugExitDecision(52); }
					switch (alt52)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:245:28: WS
						{
						DebugLocation(245, 28);
						WS138=(IToken)Match(input,WS,Follow._WS_in_orderby_column_list1342); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS138);


						}
						break;

					}
					} finally { DebugExitSubRule(52); }

					DebugLocation(245, 32);
					PushFollow(Follow._orderby_column_in_orderby_column_list1345);
					orderby_column139=orderby_column();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_orderby_column.Add(orderby_column139.Tree);

					}
					break;

				default:
					goto loop53;
				}
			}

			loop53:
				;

			} finally { DebugExitSubRule(53); }



			{
			// AST REWRITE
			// elements: orderby_column
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 246:2: -> ( orderby_column )*
			{
				DebugLocation(246, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:246:5: ( orderby_column )*
				while ( stream_orderby_column.HasNext )
				{
					DebugLocation(246, 5);
					adaptor.AddChild(root_0, stream_orderby_column.NextTree());

				}
				stream_orderby_column.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_column_list", 26);
			LeaveRule("orderby_column_list", 26);
			LeaveRule_orderby_column_list();
	    }
	 	DebugLocation(247, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_column_list"); }
		return retval;

	}
	// $ANTLR end "orderby_column_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_column() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_column() {}

	// $ANTLR start "orderby_column"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:249:1: orderby_column : expression ( WS orderby_direction )? -> ^( T_ORDERBY_COLUMN expression ( orderby_direction )? ) ;
	[GrammarRule("orderby_column")]
	private AstParserRuleReturnScope<object, IToken> orderby_column()
	{
		EnterRule_orderby_column();
		EnterRule("orderby_column", 27);
		TraceIn("orderby_column", 27);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS141 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression140 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> orderby_direction142 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS141_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_orderby_direction=new RewriteRuleSubtreeStream(adaptor,"rule orderby_direction");
		try { DebugEnterRule(GrammarFileName, "orderby_column");
		DebugLocation(249, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:250:2: ( expression ( WS orderby_direction )? -> ^( T_ORDERBY_COLUMN expression ( orderby_direction )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:250:4: expression ( WS orderby_direction )?
			{
			DebugLocation(250, 4);
			PushFollow(Follow._expression_in_orderby_column1365);
			expression140=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression.Add(expression140.Tree);
			DebugLocation(250, 15);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:250:15: ( WS orderby_direction )?
			int alt54=2;
			try { DebugEnterSubRule(54);
			try { DebugEnterDecision(54, decisionCanBacktrack[54]);
			int LA54_0 = input.LA(1);

			if ((LA54_0==WS))
			{
				int LA54_1 = input.LA(2);

				if ((LA54_1==ASC||LA54_1==DESC||LA54_1==ORIG))
				{
					alt54 = 1;
				}
			}
			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:250:16: WS orderby_direction
				{
				DebugLocation(250, 16);
				WS141=(IToken)Match(input,WS,Follow._WS_in_orderby_column1368); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS141);

				DebugLocation(250, 19);
				PushFollow(Follow._orderby_direction_in_orderby_column1370);
				orderby_direction142=orderby_direction();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_orderby_direction.Add(orderby_direction142.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(54); }



			{
			// AST REWRITE
			// elements: expression, orderby_direction
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 250:39: -> ^( T_ORDERBY_COLUMN expression ( orderby_direction )? )
			{
				DebugLocation(250, 42);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:250:42: ^( T_ORDERBY_COLUMN expression ( orderby_direction )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(250, 44);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_ORDERBY_COLUMN, "T_ORDERBY_COLUMN"), root_1);

				DebugLocation(250, 61);
				adaptor.AddChild(root_1, stream_expression.NextTree());
				DebugLocation(250, 72);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:250:72: ( orderby_direction )?
				if (stream_orderby_direction.HasNext)
				{
					DebugLocation(250, 72);
					adaptor.AddChild(root_1, stream_orderby_direction.NextTree());

				}
				stream_orderby_direction.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_column", 27);
			LeaveRule("orderby_column", 27);
			LeaveRule_orderby_column();
	    }
	 	DebugLocation(251, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_column"); }
		return retval;

	}
	// $ANTLR end "orderby_column"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_direction() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_direction() {}

	// $ANTLR start "orderby_direction"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:253:1: orderby_direction : ( ASC -> T_ORDERBY_ASC | DESC -> T_ORDERBY_DESC | ORIG -> T_ORDERBY_ORIG );
	[GrammarRule("orderby_direction")]
	private AstParserRuleReturnScope<object, IToken> orderby_direction()
	{
		EnterRule_orderby_direction();
		EnterRule("orderby_direction", 28);
		TraceIn("orderby_direction", 28);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken ASC143 = default(IToken);
	    IToken DESC144 = default(IToken);
	    IToken ORIG145 = default(IToken);

	    object ASC143_tree = default(object);
	    object DESC144_tree = default(object);
	    object ORIG145_tree = default(object);
	    RewriteRuleITokenStream stream_DESC=new RewriteRuleITokenStream(adaptor,"token DESC");
	    RewriteRuleITokenStream stream_ASC=new RewriteRuleITokenStream(adaptor,"token ASC");
	    RewriteRuleITokenStream stream_ORIG=new RewriteRuleITokenStream(adaptor,"token ORIG");

		try { DebugEnterRule(GrammarFileName, "orderby_direction");
		DebugLocation(253, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:254:2: ( ASC -> T_ORDERBY_ASC | DESC -> T_ORDERBY_DESC | ORIG -> T_ORDERBY_ORIG )
			int alt55=3;
			try { DebugEnterDecision(55, decisionCanBacktrack[55]);
			switch (input.LA(1))
			{
			case ASC:
				{
				alt55 = 1;
				}
				break;
			case DESC:
				{
				alt55 = 2;
				}
				break;
			case ORIG:
				{
				alt55 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 55, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(55); }
			switch (alt55)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:254:4: ASC
				{
				DebugLocation(254, 4);
				ASC143=(IToken)Match(input,ASC,Follow._ASC_in_orderby_direction1395); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ASC.Add(ASC143);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 254:8: -> T_ORDERBY_ASC
				{
					DebugLocation(254, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_ORDERBY_ASC, "T_ORDERBY_ASC"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:255:4: DESC
				{
				DebugLocation(255, 4);
				DESC144=(IToken)Match(input,DESC,Follow._DESC_in_orderby_direction1404); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DESC.Add(DESC144);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 255:9: -> T_ORDERBY_DESC
				{
					DebugLocation(255, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_ORDERBY_DESC, "T_ORDERBY_DESC"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:256:4: ORIG
				{
				DebugLocation(256, 4);
				ORIG145=(IToken)Match(input,ORIG,Follow._ORIG_in_orderby_direction1413); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ORIG.Add(ORIG145);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 256:9: -> T_ORDERBY_ORIG
				{
					DebugLocation(256, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_ORDERBY_ORIG, "T_ORDERBY_ORIG"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_direction", 28);
			LeaveRule("orderby_direction", 28);
			LeaveRule_orderby_direction();
	    }
	 	DebugLocation(257, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_direction"); }
		return retval;

	}
	// $ANTLR end "orderby_direction"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_use_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_use_command() {}

	// $ANTLR start "use_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:262:1: use_command : USE WS file -> ^( T_USE file ) ;
	[GrammarRule("use_command")]
	private AstParserRuleReturnScope<object, IToken> use_command()
	{
		EnterRule_use_command();
		EnterRule("use_command", 29);
		TraceIn("use_command", 29);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken USE146 = default(IToken);
	    IToken WS147 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file148 = default(AstParserRuleReturnScope<object, IToken>);

	    object USE146_tree = default(object);
	    object WS147_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_USE=new RewriteRuleITokenStream(adaptor,"token USE");
	    RewriteRuleSubtreeStream stream_file=new RewriteRuleSubtreeStream(adaptor,"rule file");
		try { DebugEnterRule(GrammarFileName, "use_command");
		DebugLocation(262, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:263:2: ( USE WS file -> ^( T_USE file ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:263:4: USE WS file
			{
			DebugLocation(263, 4);
			USE146=(IToken)Match(input,USE,Follow._USE_in_use_command1431); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_USE.Add(USE146);

			DebugLocation(263, 8);
			WS147=(IToken)Match(input,WS,Follow._WS_in_use_command1433); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS147);

			DebugLocation(263, 11);
			PushFollow(Follow._file_in_use_command1435);
			file148=file();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_file.Add(file148.Tree);


			{
			// AST REWRITE
			// elements: file
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 263:16: -> ^( T_USE file )
			{
				DebugLocation(263, 19);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:263:19: ^( T_USE file )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(263, 21);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_USE, "T_USE"), root_1);

				DebugLocation(263, 27);
				adaptor.AddChild(root_1, stream_file.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("use_command", 29);
			LeaveRule("use_command", 29);
			LeaveRule_use_command();
	    }
	 	DebugLocation(264, 1);
		} finally { DebugExitRule(GrammarFileName, "use_command"); }
		return retval;

	}
	// $ANTLR end "use_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_declare_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_declare_command() {}

	// $ANTLR start "declare_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:269:1: declare_command : DECLARE WS declaration_list -> declaration_list ;
	[GrammarRule("declare_command")]
	private AstParserRuleReturnScope<object, IToken> declare_command()
	{
		EnterRule_declare_command();
		EnterRule("declare_command", 30);
		TraceIn("declare_command", 30);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken DECLARE149 = default(IToken);
	    IToken WS150 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> declaration_list151 = default(AstParserRuleReturnScope<object, IToken>);

	    object DECLARE149_tree = default(object);
	    object WS150_tree = default(object);
	    RewriteRuleITokenStream stream_DECLARE=new RewriteRuleITokenStream(adaptor,"token DECLARE");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_declaration_list=new RewriteRuleSubtreeStream(adaptor,"rule declaration_list");
		try { DebugEnterRule(GrammarFileName, "declare_command");
		DebugLocation(269, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:270:2: ( DECLARE WS declaration_list -> declaration_list )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:270:4: DECLARE WS declaration_list
			{
			DebugLocation(270, 4);
			DECLARE149=(IToken)Match(input,DECLARE,Follow._DECLARE_in_declare_command1457); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DECLARE.Add(DECLARE149);

			DebugLocation(270, 12);
			WS150=(IToken)Match(input,WS,Follow._WS_in_declare_command1459); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS150);

			DebugLocation(270, 15);
			PushFollow(Follow._declaration_list_in_declare_command1461);
			declaration_list151=declaration_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_declaration_list.Add(declaration_list151.Tree);


			{
			// AST REWRITE
			// elements: declaration_list
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 270:32: -> declaration_list
			{
				DebugLocation(270, 35);
				adaptor.AddChild(root_0, stream_declaration_list.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declare_command", 30);
			LeaveRule("declare_command", 30);
			LeaveRule_declare_command();
	    }
	 	DebugLocation(271, 1);
		} finally { DebugExitRule(GrammarFileName, "declare_command"); }
		return retval;

	}
	// $ANTLR end "declare_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_declaration_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_declaration_list() {}

	// $ANTLR start "declaration_list"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:273:1: declaration_list : declaration ( ( WS )? ',' ( WS )? declaration )* -> ^( T_DECLARE ( declaration )+ ) ;
	[GrammarRule("declaration_list")]
	private AstParserRuleReturnScope<object, IToken> declaration_list()
	{
		EnterRule_declaration_list();
		EnterRule("declaration_list", 31);
		TraceIn("declaration_list", 31);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS153 = default(IToken);
	    IToken char_literal154 = default(IToken);
	    IToken WS155 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> declaration152 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> declaration156 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS153_tree = default(object);
	    object char_literal154_tree = default(object);
	    object WS155_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_176=new RewriteRuleITokenStream(adaptor,"token 176");
	    RewriteRuleSubtreeStream stream_declaration=new RewriteRuleSubtreeStream(adaptor,"rule declaration");
		try { DebugEnterRule(GrammarFileName, "declaration_list");
		DebugLocation(273, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:274:2: ( declaration ( ( WS )? ',' ( WS )? declaration )* -> ^( T_DECLARE ( declaration )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:274:4: declaration ( ( WS )? ',' ( WS )? declaration )*
			{
			DebugLocation(274, 4);
			PushFollow(Follow._declaration_in_declaration_list1478);
			declaration152=declaration();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_declaration.Add(declaration152.Tree);
			DebugLocation(274, 16);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:274:16: ( ( WS )? ',' ( WS )? declaration )*
			try { DebugEnterSubRule(58);
			while (true)
			{
				int alt58=2;
				try { DebugEnterDecision(58, decisionCanBacktrack[58]);
				int LA58_0 = input.LA(1);

				if ((LA58_0==WS))
				{
					int LA58_1 = input.LA(2);

					if ((LA58_1==176))
					{
						alt58 = 1;
					}


				}
				else if ((LA58_0==176))
				{
					alt58 = 1;
				}


				} finally { DebugExitDecision(58); }
				switch ( alt58 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:274:17: ( WS )? ',' ( WS )? declaration
					{
					DebugLocation(274, 17);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:274:17: ( WS )?
					int alt56=2;
					try { DebugEnterSubRule(56);
					try { DebugEnterDecision(56, decisionCanBacktrack[56]);
					int LA56_0 = input.LA(1);

					if ((LA56_0==WS))
					{
						alt56 = 1;
					}
					} finally { DebugExitDecision(56); }
					switch (alt56)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:274:17: WS
						{
						DebugLocation(274, 17);
						WS153=(IToken)Match(input,WS,Follow._WS_in_declaration_list1481); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS153);


						}
						break;

					}
					} finally { DebugExitSubRule(56); }

					DebugLocation(274, 21);
					char_literal154=(IToken)Match(input,176,Follow._176_in_declaration_list1484); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_176.Add(char_literal154);

					DebugLocation(274, 25);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:274:25: ( WS )?
					int alt57=2;
					try { DebugEnterSubRule(57);
					try { DebugEnterDecision(57, decisionCanBacktrack[57]);
					int LA57_0 = input.LA(1);

					if ((LA57_0==WS))
					{
						alt57 = 1;
					}
					} finally { DebugExitDecision(57); }
					switch (alt57)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:274:25: WS
						{
						DebugLocation(274, 25);
						WS155=(IToken)Match(input,WS,Follow._WS_in_declaration_list1486); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS155);


						}
						break;

					}
					} finally { DebugExitSubRule(57); }

					DebugLocation(274, 29);
					PushFollow(Follow._declaration_in_declaration_list1489);
					declaration156=declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_declaration.Add(declaration156.Tree);

					}
					break;

				default:
					goto loop58;
				}
			}

			loop58:
				;

			} finally { DebugExitSubRule(58); }



			{
			// AST REWRITE
			// elements: declaration
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 275:2: -> ^( T_DECLARE ( declaration )+ )
			{
				DebugLocation(275, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:275:5: ^( T_DECLARE ( declaration )+ )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(275, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_DECLARE, "T_DECLARE"), root_1);

				DebugLocation(275, 17);
				if (!(stream_declaration.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_declaration.HasNext )
				{
					DebugLocation(275, 17);
					adaptor.AddChild(root_1, stream_declaration.NextTree());

				}
				stream_declaration.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declaration_list", 31);
			LeaveRule("declaration_list", 31);
			LeaveRule_declaration_list();
	    }
	 	DebugLocation(276, 1);
		} finally { DebugExitRule(GrammarFileName, "declaration_list"); }
		return retval;

	}
	// $ANTLR end "declaration_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_declaration() {}

	// $ANTLR start "declaration"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:278:1: declaration : variable WS ( AS WS )? datatype -> ^( T_DECLARATION variable datatype ) ;
	[GrammarRule("declaration")]
	private AstParserRuleReturnScope<object, IToken> declaration()
	{
		EnterRule_declaration();
		EnterRule("declaration", 32);
		TraceIn("declaration", 32);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS158 = default(IToken);
	    IToken AS159 = default(IToken);
	    IToken WS160 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> variable157 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> datatype161 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS158_tree = default(object);
	    object AS159_tree = default(object);
	    object WS160_tree = default(object);
	    RewriteRuleITokenStream stream_AS=new RewriteRuleITokenStream(adaptor,"token AS");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_datatype=new RewriteRuleSubtreeStream(adaptor,"rule datatype");
	    RewriteRuleSubtreeStream stream_variable=new RewriteRuleSubtreeStream(adaptor,"rule variable");
		try { DebugEnterRule(GrammarFileName, "declaration");
		DebugLocation(278, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:279:2: ( variable WS ( AS WS )? datatype -> ^( T_DECLARATION variable datatype ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:279:4: variable WS ( AS WS )? datatype
			{
			DebugLocation(279, 4);
			PushFollow(Follow._variable_in_declaration1513);
			variable157=variable();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_variable.Add(variable157.Tree);
			DebugLocation(279, 13);
			WS158=(IToken)Match(input,WS,Follow._WS_in_declaration1515); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS158);

			DebugLocation(279, 16);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:279:16: ( AS WS )?
			int alt59=2;
			try { DebugEnterSubRule(59);
			try { DebugEnterDecision(59, decisionCanBacktrack[59]);
			int LA59_0 = input.LA(1);

			if ((LA59_0==AS))
			{
				alt59 = 1;
			}
			} finally { DebugExitDecision(59); }
			switch (alt59)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:279:17: AS WS
				{
				DebugLocation(279, 17);
				AS159=(IToken)Match(input,AS,Follow._AS_in_declaration1518); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_AS.Add(AS159);

				DebugLocation(279, 20);
				WS160=(IToken)Match(input,WS,Follow._WS_in_declaration1520); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS160);


				}
				break;

			}
			} finally { DebugExitSubRule(59); }

			DebugLocation(279, 25);
			PushFollow(Follow._datatype_in_declaration1524);
			datatype161=datatype();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_datatype.Add(datatype161.Tree);


			{
			// AST REWRITE
			// elements: variable, datatype
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 280:2: -> ^( T_DECLARATION variable datatype )
			{
				DebugLocation(280, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:280:5: ^( T_DECLARATION variable datatype )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(280, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_DECLARATION, "T_DECLARATION"), root_1);

				DebugLocation(280, 21);
				adaptor.AddChild(root_1, stream_variable.NextTree());
				DebugLocation(280, 30);
				adaptor.AddChild(root_1, stream_datatype.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declaration", 32);
			LeaveRule("declaration", 32);
			LeaveRule_declaration();
	    }
	 	DebugLocation(281, 1);
		} finally { DebugExitRule(GrammarFileName, "declaration"); }
		return retval;

	}
	// $ANTLR end "declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_create_view_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_create_view_command() {}

	// $ANTLR start "create_view_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:286:1: create_view_command : CREATE WS VIEW WS view_name ( ( WS )? '(' declaration_list ')' )? WS AS WS select_command -> ^( T_CREATE_VIEW view_name ( declaration_list )? select_command ) ;
	[GrammarRule("create_view_command")]
	private AstParserRuleReturnScope<object, IToken> create_view_command()
	{
		EnterRule_create_view_command();
		EnterRule("create_view_command", 33);
		TraceIn("create_view_command", 33);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken CREATE162 = default(IToken);
	    IToken WS163 = default(IToken);
	    IToken VIEW164 = default(IToken);
	    IToken WS165 = default(IToken);
	    IToken WS167 = default(IToken);
	    IToken char_literal168 = default(IToken);
	    IToken char_literal170 = default(IToken);
	    IToken WS171 = default(IToken);
	    IToken AS172 = default(IToken);
	    IToken WS173 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> view_name166 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> declaration_list169 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> select_command174 = default(AstParserRuleReturnScope<object, IToken>);

	    object CREATE162_tree = default(object);
	    object WS163_tree = default(object);
	    object VIEW164_tree = default(object);
	    object WS165_tree = default(object);
	    object WS167_tree = default(object);
	    object char_literal168_tree = default(object);
	    object char_literal170_tree = default(object);
	    object WS171_tree = default(object);
	    object AS172_tree = default(object);
	    object WS173_tree = default(object);
	    RewriteRuleITokenStream stream_AS=new RewriteRuleITokenStream(adaptor,"token AS");
	    RewriteRuleITokenStream stream_CREATE=new RewriteRuleITokenStream(adaptor,"token CREATE");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_172=new RewriteRuleITokenStream(adaptor,"token 172");
	    RewriteRuleITokenStream stream_VIEW=new RewriteRuleITokenStream(adaptor,"token VIEW");
	    RewriteRuleITokenStream stream_173=new RewriteRuleITokenStream(adaptor,"token 173");
	    RewriteRuleSubtreeStream stream_view_name=new RewriteRuleSubtreeStream(adaptor,"rule view_name");
	    RewriteRuleSubtreeStream stream_select_command=new RewriteRuleSubtreeStream(adaptor,"rule select_command");
	    RewriteRuleSubtreeStream stream_declaration_list=new RewriteRuleSubtreeStream(adaptor,"rule declaration_list");
		try { DebugEnterRule(GrammarFileName, "create_view_command");
		DebugLocation(286, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:287:2: ( CREATE WS VIEW WS view_name ( ( WS )? '(' declaration_list ')' )? WS AS WS select_command -> ^( T_CREATE_VIEW view_name ( declaration_list )? select_command ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:287:4: CREATE WS VIEW WS view_name ( ( WS )? '(' declaration_list ')' )? WS AS WS select_command
			{
			DebugLocation(287, 4);
			CREATE162=(IToken)Match(input,CREATE,Follow._CREATE_in_create_view_command1549); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CREATE.Add(CREATE162);

			DebugLocation(287, 11);
			WS163=(IToken)Match(input,WS,Follow._WS_in_create_view_command1551); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS163);

			DebugLocation(287, 14);
			VIEW164=(IToken)Match(input,VIEW,Follow._VIEW_in_create_view_command1553); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_VIEW.Add(VIEW164);

			DebugLocation(287, 19);
			WS165=(IToken)Match(input,WS,Follow._WS_in_create_view_command1555); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS165);

			DebugLocation(287, 22);
			PushFollow(Follow._view_name_in_create_view_command1557);
			view_name166=view_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_view_name.Add(view_name166.Tree);
			DebugLocation(287, 32);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:287:32: ( ( WS )? '(' declaration_list ')' )?
			int alt61=2;
			try { DebugEnterSubRule(61);
			try { DebugEnterDecision(61, decisionCanBacktrack[61]);
			int LA61_0 = input.LA(1);

			if ((LA61_0==WS))
			{
				int LA61_1 = input.LA(2);

				if ((LA61_1==172))
				{
					alt61 = 1;
				}
			}
			else if ((LA61_0==172))
			{
				alt61 = 1;
			}
			} finally { DebugExitDecision(61); }
			switch (alt61)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:287:33: ( WS )? '(' declaration_list ')'
				{
				DebugLocation(287, 33);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:287:33: ( WS )?
				int alt60=2;
				try { DebugEnterSubRule(60);
				try { DebugEnterDecision(60, decisionCanBacktrack[60]);
				int LA60_0 = input.LA(1);

				if ((LA60_0==WS))
				{
					alt60 = 1;
				}
				} finally { DebugExitDecision(60); }
				switch (alt60)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:287:33: WS
					{
					DebugLocation(287, 33);
					WS167=(IToken)Match(input,WS,Follow._WS_in_create_view_command1560); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS167);


					}
					break;

				}
				} finally { DebugExitSubRule(60); }

				DebugLocation(287, 37);
				char_literal168=(IToken)Match(input,172,Follow._172_in_create_view_command1563); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_172.Add(char_literal168);

				DebugLocation(287, 41);
				PushFollow(Follow._declaration_list_in_create_view_command1565);
				declaration_list169=declaration_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_declaration_list.Add(declaration_list169.Tree);
				DebugLocation(287, 58);
				char_literal170=(IToken)Match(input,173,Follow._173_in_create_view_command1567); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_173.Add(char_literal170);


				}
				break;

			}
			} finally { DebugExitSubRule(61); }

			DebugLocation(287, 64);
			WS171=(IToken)Match(input,WS,Follow._WS_in_create_view_command1571); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS171);

			DebugLocation(287, 67);
			AS172=(IToken)Match(input,AS,Follow._AS_in_create_view_command1573); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_AS.Add(AS172);

			DebugLocation(287, 70);
			WS173=(IToken)Match(input,WS,Follow._WS_in_create_view_command1575); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS173);

			DebugLocation(287, 73);
			PushFollow(Follow._select_command_in_create_view_command1577);
			select_command174=select_command();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_select_command.Add(select_command174.Tree);


			{
			// AST REWRITE
			// elements: select_command, view_name, declaration_list
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 288:2: -> ^( T_CREATE_VIEW view_name ( declaration_list )? select_command )
			{
				DebugLocation(288, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:288:5: ^( T_CREATE_VIEW view_name ( declaration_list )? select_command )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(288, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CREATE_VIEW, "T_CREATE_VIEW"), root_1);

				DebugLocation(288, 21);
				adaptor.AddChild(root_1, stream_view_name.NextTree());
				DebugLocation(288, 31);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:288:31: ( declaration_list )?
				if (stream_declaration_list.HasNext)
				{
					DebugLocation(288, 31);
					adaptor.AddChild(root_1, stream_declaration_list.NextTree());

				}
				stream_declaration_list.Reset();
				DebugLocation(288, 49);
				adaptor.AddChild(root_1, stream_select_command.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("create_view_command", 33);
			LeaveRule("create_view_command", 33);
			LeaveRule_create_view_command();
	    }
	 	DebugLocation(289, 1);
		} finally { DebugExitRule(GrammarFileName, "create_view_command"); }
		return retval;

	}
	// $ANTLR end "create_view_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_alter_view_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_alter_view_command() {}

	// $ANTLR start "alter_view_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:291:1: alter_view_command : ALTER WS VIEW WS view_name ( ( WS )? '(' declaration_list ')' )? WS AS WS select_command -> ^( T_ALTER_VIEW view_name ( declaration_list )? select_command ) ;
	[GrammarRule("alter_view_command")]
	private AstParserRuleReturnScope<object, IToken> alter_view_command()
	{
		EnterRule_alter_view_command();
		EnterRule("alter_view_command", 34);
		TraceIn("alter_view_command", 34);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken ALTER175 = default(IToken);
	    IToken WS176 = default(IToken);
	    IToken VIEW177 = default(IToken);
	    IToken WS178 = default(IToken);
	    IToken WS180 = default(IToken);
	    IToken char_literal181 = default(IToken);
	    IToken char_literal183 = default(IToken);
	    IToken WS184 = default(IToken);
	    IToken AS185 = default(IToken);
	    IToken WS186 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> view_name179 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> declaration_list182 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> select_command187 = default(AstParserRuleReturnScope<object, IToken>);

	    object ALTER175_tree = default(object);
	    object WS176_tree = default(object);
	    object VIEW177_tree = default(object);
	    object WS178_tree = default(object);
	    object WS180_tree = default(object);
	    object char_literal181_tree = default(object);
	    object char_literal183_tree = default(object);
	    object WS184_tree = default(object);
	    object AS185_tree = default(object);
	    object WS186_tree = default(object);
	    RewriteRuleITokenStream stream_AS=new RewriteRuleITokenStream(adaptor,"token AS");
	    RewriteRuleITokenStream stream_ALTER=new RewriteRuleITokenStream(adaptor,"token ALTER");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_172=new RewriteRuleITokenStream(adaptor,"token 172");
	    RewriteRuleITokenStream stream_VIEW=new RewriteRuleITokenStream(adaptor,"token VIEW");
	    RewriteRuleITokenStream stream_173=new RewriteRuleITokenStream(adaptor,"token 173");
	    RewriteRuleSubtreeStream stream_view_name=new RewriteRuleSubtreeStream(adaptor,"rule view_name");
	    RewriteRuleSubtreeStream stream_select_command=new RewriteRuleSubtreeStream(adaptor,"rule select_command");
	    RewriteRuleSubtreeStream stream_declaration_list=new RewriteRuleSubtreeStream(adaptor,"rule declaration_list");
		try { DebugEnterRule(GrammarFileName, "alter_view_command");
		DebugLocation(291, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:292:2: ( ALTER WS VIEW WS view_name ( ( WS )? '(' declaration_list ')' )? WS AS WS select_command -> ^( T_ALTER_VIEW view_name ( declaration_list )? select_command ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:292:4: ALTER WS VIEW WS view_name ( ( WS )? '(' declaration_list ')' )? WS AS WS select_command
			{
			DebugLocation(292, 4);
			ALTER175=(IToken)Match(input,ALTER,Follow._ALTER_in_alter_view_command1603); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ALTER.Add(ALTER175);

			DebugLocation(292, 10);
			WS176=(IToken)Match(input,WS,Follow._WS_in_alter_view_command1605); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS176);

			DebugLocation(292, 13);
			VIEW177=(IToken)Match(input,VIEW,Follow._VIEW_in_alter_view_command1607); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_VIEW.Add(VIEW177);

			DebugLocation(292, 18);
			WS178=(IToken)Match(input,WS,Follow._WS_in_alter_view_command1609); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS178);

			DebugLocation(292, 21);
			PushFollow(Follow._view_name_in_alter_view_command1611);
			view_name179=view_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_view_name.Add(view_name179.Tree);
			DebugLocation(292, 31);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:292:31: ( ( WS )? '(' declaration_list ')' )?
			int alt63=2;
			try { DebugEnterSubRule(63);
			try { DebugEnterDecision(63, decisionCanBacktrack[63]);
			int LA63_0 = input.LA(1);

			if ((LA63_0==WS))
			{
				int LA63_1 = input.LA(2);

				if ((LA63_1==172))
				{
					alt63 = 1;
				}
			}
			else if ((LA63_0==172))
			{
				alt63 = 1;
			}
			} finally { DebugExitDecision(63); }
			switch (alt63)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:292:32: ( WS )? '(' declaration_list ')'
				{
				DebugLocation(292, 32);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:292:32: ( WS )?
				int alt62=2;
				try { DebugEnterSubRule(62);
				try { DebugEnterDecision(62, decisionCanBacktrack[62]);
				int LA62_0 = input.LA(1);

				if ((LA62_0==WS))
				{
					alt62 = 1;
				}
				} finally { DebugExitDecision(62); }
				switch (alt62)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:292:32: WS
					{
					DebugLocation(292, 32);
					WS180=(IToken)Match(input,WS,Follow._WS_in_alter_view_command1614); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS180);


					}
					break;

				}
				} finally { DebugExitSubRule(62); }

				DebugLocation(292, 36);
				char_literal181=(IToken)Match(input,172,Follow._172_in_alter_view_command1617); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_172.Add(char_literal181);

				DebugLocation(292, 40);
				PushFollow(Follow._declaration_list_in_alter_view_command1619);
				declaration_list182=declaration_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_declaration_list.Add(declaration_list182.Tree);
				DebugLocation(292, 57);
				char_literal183=(IToken)Match(input,173,Follow._173_in_alter_view_command1621); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_173.Add(char_literal183);


				}
				break;

			}
			} finally { DebugExitSubRule(63); }

			DebugLocation(292, 63);
			WS184=(IToken)Match(input,WS,Follow._WS_in_alter_view_command1625); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS184);

			DebugLocation(292, 66);
			AS185=(IToken)Match(input,AS,Follow._AS_in_alter_view_command1627); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_AS.Add(AS185);

			DebugLocation(292, 69);
			WS186=(IToken)Match(input,WS,Follow._WS_in_alter_view_command1629); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS186);

			DebugLocation(292, 72);
			PushFollow(Follow._select_command_in_alter_view_command1631);
			select_command187=select_command();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_select_command.Add(select_command187.Tree);


			{
			// AST REWRITE
			// elements: select_command, declaration_list, view_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 293:2: -> ^( T_ALTER_VIEW view_name ( declaration_list )? select_command )
			{
				DebugLocation(293, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:293:5: ^( T_ALTER_VIEW view_name ( declaration_list )? select_command )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(293, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_ALTER_VIEW, "T_ALTER_VIEW"), root_1);

				DebugLocation(293, 20);
				adaptor.AddChild(root_1, stream_view_name.NextTree());
				DebugLocation(293, 30);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:293:30: ( declaration_list )?
				if (stream_declaration_list.HasNext)
				{
					DebugLocation(293, 30);
					adaptor.AddChild(root_1, stream_declaration_list.NextTree());

				}
				stream_declaration_list.Reset();
				DebugLocation(293, 48);
				adaptor.AddChild(root_1, stream_select_command.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("alter_view_command", 34);
			LeaveRule("alter_view_command", 34);
			LeaveRule_alter_view_command();
	    }
	 	DebugLocation(294, 1);
		} finally { DebugExitRule(GrammarFileName, "alter_view_command"); }
		return retval;

	}
	// $ANTLR end "alter_view_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_drop_view_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_drop_view_command() {}

	// $ANTLR start "drop_view_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:296:1: drop_view_command : DROP WS VIEW WS view_name -> ^( T_DROP_VIEW view_name ) ;
	[GrammarRule("drop_view_command")]
	private AstParserRuleReturnScope<object, IToken> drop_view_command()
	{
		EnterRule_drop_view_command();
		EnterRule("drop_view_command", 35);
		TraceIn("drop_view_command", 35);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken DROP188 = default(IToken);
	    IToken WS189 = default(IToken);
	    IToken VIEW190 = default(IToken);
	    IToken WS191 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> view_name192 = default(AstParserRuleReturnScope<object, IToken>);

	    object DROP188_tree = default(object);
	    object WS189_tree = default(object);
	    object VIEW190_tree = default(object);
	    object WS191_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_VIEW=new RewriteRuleITokenStream(adaptor,"token VIEW");
	    RewriteRuleITokenStream stream_DROP=new RewriteRuleITokenStream(adaptor,"token DROP");
	    RewriteRuleSubtreeStream stream_view_name=new RewriteRuleSubtreeStream(adaptor,"rule view_name");
		try { DebugEnterRule(GrammarFileName, "drop_view_command");
		DebugLocation(296, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:297:2: ( DROP WS VIEW WS view_name -> ^( T_DROP_VIEW view_name ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:297:4: DROP WS VIEW WS view_name
			{
			DebugLocation(297, 4);
			DROP188=(IToken)Match(input,DROP,Follow._DROP_in_drop_view_command1656); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DROP.Add(DROP188);

			DebugLocation(297, 9);
			WS189=(IToken)Match(input,WS,Follow._WS_in_drop_view_command1658); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS189);

			DebugLocation(297, 12);
			VIEW190=(IToken)Match(input,VIEW,Follow._VIEW_in_drop_view_command1660); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_VIEW.Add(VIEW190);

			DebugLocation(297, 17);
			WS191=(IToken)Match(input,WS,Follow._WS_in_drop_view_command1662); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS191);

			DebugLocation(297, 20);
			PushFollow(Follow._view_name_in_drop_view_command1664);
			view_name192=view_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_view_name.Add(view_name192.Tree);


			{
			// AST REWRITE
			// elements: view_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 298:2: -> ^( T_DROP_VIEW view_name )
			{
				DebugLocation(298, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:298:5: ^( T_DROP_VIEW view_name )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(298, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_DROP_VIEW, "T_DROP_VIEW"), root_1);

				DebugLocation(298, 19);
				adaptor.AddChild(root_1, stream_view_name.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("drop_view_command", 35);
			LeaveRule("drop_view_command", 35);
			LeaveRule_drop_view_command();
	    }
	 	DebugLocation(299, 1);
		} finally { DebugExitRule(GrammarFileName, "drop_view_command"); }
		return retval;

	}
	// $ANTLR end "drop_view_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_view_name() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_view_name() {}

	// $ANTLR start "view_name"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:301:1: view_name : TOKEN -> ^( T_VIEW_NAME TOKEN ) ;
	[GrammarRule("view_name")]
	private AstParserRuleReturnScope<object, IToken> view_name()
	{
		EnterRule_view_name();
		EnterRule("view_name", 36);
		TraceIn("view_name", 36);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN193 = default(IToken);

	    object TOKEN193_tree = default(object);
	    RewriteRuleITokenStream stream_TOKEN=new RewriteRuleITokenStream(adaptor,"token TOKEN");

		try { DebugEnterRule(GrammarFileName, "view_name");
		DebugLocation(301, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:302:2: ( TOKEN -> ^( T_VIEW_NAME TOKEN ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:302:4: TOKEN
			{
			DebugLocation(302, 4);
			TOKEN193=(IToken)Match(input,TOKEN,Follow._TOKEN_in_view_name1684); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_TOKEN.Add(TOKEN193);



			{
			// AST REWRITE
			// elements: TOKEN
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 302:10: -> ^( T_VIEW_NAME TOKEN )
			{
				DebugLocation(302, 13);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:302:13: ^( T_VIEW_NAME TOKEN )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(302, 15);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_VIEW_NAME, "T_VIEW_NAME"), root_1);

				DebugLocation(302, 27);
				adaptor.AddChild(root_1, stream_TOKEN.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("view_name", 36);
			LeaveRule("view_name", 36);
			LeaveRule_view_name();
	    }
	 	DebugLocation(303, 1);
		} finally { DebugExitRule(GrammarFileName, "view_name"); }
		return retval;

	}
	// $ANTLR end "view_name"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_drop_table_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_drop_table_command() {}

	// $ANTLR start "drop_table_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:307:1: drop_table_command : DROP WS TABLE WS file -> ^( T_DROP_TABLE file ) ;
	[GrammarRule("drop_table_command")]
	private AstParserRuleReturnScope<object, IToken> drop_table_command()
	{
		EnterRule_drop_table_command();
		EnterRule("drop_table_command", 37);
		TraceIn("drop_table_command", 37);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken DROP194 = default(IToken);
	    IToken WS195 = default(IToken);
	    IToken TABLE196 = default(IToken);
	    IToken WS197 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file198 = default(AstParserRuleReturnScope<object, IToken>);

	    object DROP194_tree = default(object);
	    object WS195_tree = default(object);
	    object TABLE196_tree = default(object);
	    object WS197_tree = default(object);
	    RewriteRuleITokenStream stream_TABLE=new RewriteRuleITokenStream(adaptor,"token TABLE");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_DROP=new RewriteRuleITokenStream(adaptor,"token DROP");
	    RewriteRuleSubtreeStream stream_file=new RewriteRuleSubtreeStream(adaptor,"rule file");
		try { DebugEnterRule(GrammarFileName, "drop_table_command");
		DebugLocation(307, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:308:2: ( DROP WS TABLE WS file -> ^( T_DROP_TABLE file ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:308:4: DROP WS TABLE WS file
			{
			DebugLocation(308, 4);
			DROP194=(IToken)Match(input,DROP,Follow._DROP_in_drop_table_command1706); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DROP.Add(DROP194);

			DebugLocation(308, 9);
			WS195=(IToken)Match(input,WS,Follow._WS_in_drop_table_command1708); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS195);

			DebugLocation(308, 12);
			TABLE196=(IToken)Match(input,TABLE,Follow._TABLE_in_drop_table_command1710); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_TABLE.Add(TABLE196);

			DebugLocation(308, 18);
			WS197=(IToken)Match(input,WS,Follow._WS_in_drop_table_command1712); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS197);

			DebugLocation(308, 21);
			PushFollow(Follow._file_in_drop_table_command1714);
			file198=file();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_file.Add(file198.Tree);


			{
			// AST REWRITE
			// elements: file
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 309:2: -> ^( T_DROP_TABLE file )
			{
				DebugLocation(309, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:309:5: ^( T_DROP_TABLE file )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(309, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_DROP_TABLE, "T_DROP_TABLE"), root_1);

				DebugLocation(309, 20);
				adaptor.AddChild(root_1, stream_file.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("drop_table_command", 37);
			LeaveRule("drop_table_command", 37);
			LeaveRule_drop_table_command();
	    }
	 	DebugLocation(310, 1);
		} finally { DebugExitRule(GrammarFileName, "drop_table_command"); }
		return retval;

	}
	// $ANTLR end "drop_table_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_set_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_set_command() {}

	// $ANTLR start "set_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:316:1: set_command : ( SET WS variable ( WS )? '=' ( WS )? expression -> ^( T_SET_VARIABLE variable expression ) | SET WS TOKEN WS expression -> ^( T_SET_COMMAND TOKEN expression ) );
	[GrammarRule("set_command")]
	private AstParserRuleReturnScope<object, IToken> set_command()
	{
		EnterRule_set_command();
		EnterRule("set_command", 38);
		TraceIn("set_command", 38);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken SET199 = default(IToken);
	    IToken WS200 = default(IToken);
	    IToken WS202 = default(IToken);
	    IToken char_literal203 = default(IToken);
	    IToken WS204 = default(IToken);
	    IToken SET206 = default(IToken);
	    IToken WS207 = default(IToken);
	    IToken TOKEN208 = default(IToken);
	    IToken WS209 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> variable201 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression205 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression210 = default(AstParserRuleReturnScope<object, IToken>);

	    object SET199_tree = default(object);
	    object WS200_tree = default(object);
	    object WS202_tree = default(object);
	    object char_literal203_tree = default(object);
	    object WS204_tree = default(object);
	    object SET206_tree = default(object);
	    object WS207_tree = default(object);
	    object TOKEN208_tree = default(object);
	    object WS209_tree = default(object);
	    RewriteRuleITokenStream stream_SET=new RewriteRuleITokenStream(adaptor,"token SET");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_184=new RewriteRuleITokenStream(adaptor,"token 184");
	    RewriteRuleITokenStream stream_TOKEN=new RewriteRuleITokenStream(adaptor,"token TOKEN");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_variable=new RewriteRuleSubtreeStream(adaptor,"rule variable");
		try { DebugEnterRule(GrammarFileName, "set_command");
		DebugLocation(316, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:317:2: ( SET WS variable ( WS )? '=' ( WS )? expression -> ^( T_SET_VARIABLE variable expression ) | SET WS TOKEN WS expression -> ^( T_SET_COMMAND TOKEN expression ) )
			int alt66=2;
			try { DebugEnterDecision(66, decisionCanBacktrack[66]);
			int LA66_0 = input.LA(1);

			if ((LA66_0==SET))
			{
				int LA66_1 = input.LA(2);

				if ((LA66_1==WS))
				{
					int LA66_2 = input.LA(3);

					if ((LA66_2==TOKEN))
					{
						alt66 = 2;
					}
					else if ((LA66_2==VARIABLE))
					{
						alt66 = 1;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 66, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 66, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 66, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(66); }
			switch (alt66)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:317:4: SET WS variable ( WS )? '=' ( WS )? expression
				{
				DebugLocation(317, 4);
				SET199=(IToken)Match(input,SET,Follow._SET_in_set_command1738); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SET.Add(SET199);

				DebugLocation(317, 8);
				WS200=(IToken)Match(input,WS,Follow._WS_in_set_command1740); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS200);

				DebugLocation(317, 11);
				PushFollow(Follow._variable_in_set_command1742);
				variable201=variable();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_variable.Add(variable201.Tree);
				DebugLocation(317, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:317:20: ( WS )?
				int alt64=2;
				try { DebugEnterSubRule(64);
				try { DebugEnterDecision(64, decisionCanBacktrack[64]);
				int LA64_0 = input.LA(1);

				if ((LA64_0==WS))
				{
					alt64 = 1;
				}
				} finally { DebugExitDecision(64); }
				switch (alt64)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:317:20: WS
					{
					DebugLocation(317, 20);
					WS202=(IToken)Match(input,WS,Follow._WS_in_set_command1744); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS202);


					}
					break;

				}
				} finally { DebugExitSubRule(64); }

				DebugLocation(317, 24);
				char_literal203=(IToken)Match(input,184,Follow._184_in_set_command1747); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_184.Add(char_literal203);

				DebugLocation(317, 28);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:317:28: ( WS )?
				int alt65=2;
				try { DebugEnterSubRule(65);
				try { DebugEnterDecision(65, decisionCanBacktrack[65]);
				int LA65_0 = input.LA(1);

				if ((LA65_0==WS))
				{
					alt65 = 1;
				}
				} finally { DebugExitDecision(65); }
				switch (alt65)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:317:28: WS
					{
					DebugLocation(317, 28);
					WS204=(IToken)Match(input,WS,Follow._WS_in_set_command1749); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS204);


					}
					break;

				}
				} finally { DebugExitSubRule(65); }

				DebugLocation(317, 32);
				PushFollow(Follow._expression_in_set_command1752);
				expression205=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression205.Tree);


				{
				// AST REWRITE
				// elements: variable, expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 317:43: -> ^( T_SET_VARIABLE variable expression )
				{
					DebugLocation(317, 46);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:317:46: ^( T_SET_VARIABLE variable expression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(317, 48);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SET_VARIABLE, "T_SET_VARIABLE"), root_1);

					DebugLocation(317, 63);
					adaptor.AddChild(root_1, stream_variable.NextTree());
					DebugLocation(317, 72);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:318:4: SET WS TOKEN WS expression
				{
				DebugLocation(318, 4);
				SET206=(IToken)Match(input,SET,Follow._SET_in_set_command1767); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SET.Add(SET206);

				DebugLocation(318, 8);
				WS207=(IToken)Match(input,WS,Follow._WS_in_set_command1769); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS207);

				DebugLocation(318, 11);
				TOKEN208=(IToken)Match(input,TOKEN,Follow._TOKEN_in_set_command1771); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TOKEN.Add(TOKEN208);

				DebugLocation(318, 17);
				WS209=(IToken)Match(input,WS,Follow._WS_in_set_command1773); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS209);

				DebugLocation(318, 20);
				PushFollow(Follow._expression_in_set_command1775);
				expression210=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression210.Tree);


				{
				// AST REWRITE
				// elements: TOKEN, expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 318:31: -> ^( T_SET_COMMAND TOKEN expression )
				{
					DebugLocation(318, 34);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:318:34: ^( T_SET_COMMAND TOKEN expression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(318, 36);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SET_COMMAND, "T_SET_COMMAND"), root_1);

					DebugLocation(318, 50);
					adaptor.AddChild(root_1, stream_TOKEN.NextNode());
					DebugLocation(318, 56);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("set_command", 38);
			LeaveRule("set_command", 38);
			LeaveRule_set_command();
	    }
	 	DebugLocation(319, 1);
		} finally { DebugExitRule(GrammarFileName, "set_command"); }
		return retval;

	}
	// $ANTLR end "set_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_list() {}

	// $ANTLR start "expression_list"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:324:1: expression_list : expression ( ( WS )? ',' ( WS )? expression )* -> ^( T_EXPRESSIONLIST ( expression )+ ) ;
	[GrammarRule("expression_list")]
	private AstParserRuleReturnScope<object, IToken> expression_list()
	{
		EnterRule_expression_list();
		EnterRule("expression_list", 39);
		TraceIn("expression_list", 39);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS212 = default(IToken);
	    IToken char_literal213 = default(IToken);
	    IToken WS214 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression211 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression215 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS212_tree = default(object);
	    object char_literal213_tree = default(object);
	    object WS214_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_176=new RewriteRuleITokenStream(adaptor,"token 176");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "expression_list");
		DebugLocation(324, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:325:2: ( expression ( ( WS )? ',' ( WS )? expression )* -> ^( T_EXPRESSIONLIST ( expression )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:325:4: expression ( ( WS )? ',' ( WS )? expression )*
			{
			DebugLocation(325, 4);
			PushFollow(Follow._expression_in_expression_list1799);
			expression211=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression.Add(expression211.Tree);
			DebugLocation(325, 15);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:325:15: ( ( WS )? ',' ( WS )? expression )*
			try { DebugEnterSubRule(69);
			while (true)
			{
				int alt69=2;
				try { DebugEnterDecision(69, decisionCanBacktrack[69]);
				int LA69_0 = input.LA(1);

				if ((LA69_0==WS))
				{
					int LA69_2 = input.LA(2);

					if ((LA69_2==176))
					{
						alt69 = 1;
					}


				}
				else if ((LA69_0==176))
				{
					alt69 = 1;
				}


				} finally { DebugExitDecision(69); }
				switch ( alt69 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:325:16: ( WS )? ',' ( WS )? expression
					{
					DebugLocation(325, 16);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:325:16: ( WS )?
					int alt67=2;
					try { DebugEnterSubRule(67);
					try { DebugEnterDecision(67, decisionCanBacktrack[67]);
					int LA67_0 = input.LA(1);

					if ((LA67_0==WS))
					{
						alt67 = 1;
					}
					} finally { DebugExitDecision(67); }
					switch (alt67)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:325:16: WS
						{
						DebugLocation(325, 16);
						WS212=(IToken)Match(input,WS,Follow._WS_in_expression_list1802); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS212);


						}
						break;

					}
					} finally { DebugExitSubRule(67); }

					DebugLocation(325, 20);
					char_literal213=(IToken)Match(input,176,Follow._176_in_expression_list1805); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_176.Add(char_literal213);

					DebugLocation(325, 24);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:325:24: ( WS )?
					int alt68=2;
					try { DebugEnterSubRule(68);
					try { DebugEnterDecision(68, decisionCanBacktrack[68]);
					int LA68_0 = input.LA(1);

					if ((LA68_0==WS))
					{
						alt68 = 1;
					}
					} finally { DebugExitDecision(68); }
					switch (alt68)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:325:24: WS
						{
						DebugLocation(325, 24);
						WS214=(IToken)Match(input,WS,Follow._WS_in_expression_list1807); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS214);


						}
						break;

					}
					} finally { DebugExitSubRule(68); }

					DebugLocation(325, 28);
					PushFollow(Follow._expression_in_expression_list1810);
					expression215=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expression.Add(expression215.Tree);

					}
					break;

				default:
					goto loop69;
				}
			}

			loop69:
				;

			} finally { DebugExitSubRule(69); }



			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 325:41: -> ^( T_EXPRESSIONLIST ( expression )+ )
			{
				DebugLocation(325, 44);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:325:44: ^( T_EXPRESSIONLIST ( expression )+ )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(325, 46);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_EXPRESSIONLIST, "T_EXPRESSIONLIST"), root_1);

				DebugLocation(325, 63);
				if (!(stream_expression.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_expression.HasNext )
				{
					DebugLocation(325, 63);
					adaptor.AddChild(root_1, stream_expression.NextTree());

				}
				stream_expression.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_list", 39);
			LeaveRule("expression_list", 39);
			LeaveRule_expression_list();
	    }
	 	DebugLocation(326, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_list"); }
		return retval;

	}
	// $ANTLR end "expression_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_list_or_select_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_list_or_select_command() {}

	// $ANTLR start "expression_list_or_select_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:328:1: expression_list_or_select_command : ( ( SELECT )=> select_command | expression_list );
	[GrammarRule("expression_list_or_select_command")]
	private AstParserRuleReturnScope<object, IToken> expression_list_or_select_command()
	{
		EnterRule_expression_list_or_select_command();
		EnterRule("expression_list_or_select_command", 40);
		TraceIn("expression_list_or_select_command", 40);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> select_command216 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list217 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "expression_list_or_select_command");
		DebugLocation(328, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:329:2: ( ( SELECT )=> select_command | expression_list )
			int alt70=2;
			try { DebugEnterDecision(70, decisionCanBacktrack[70]);
			int LA70_0 = input.LA(1);

			if ((LA70_0==172))
			{
				int LA70_1 = input.LA(2);

				if ((EvaluatePredicate(synpred2_gql_fragment)))
				{
					alt70 = 1;
				}
				else if ((true))
				{
					alt70 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 70, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA70_0==SELECT) && (EvaluatePredicate(synpred2_gql_fragment)))
			{
				alt70 = 1;
			}
			else if (((LA70_0>=CASE && LA70_0<=CAST)||(LA70_0>=CONVERT && LA70_0<=COUNT)||(LA70_0>=DATEADD && LA70_0<=DATEPART)||LA70_0==EXISTS||(LA70_0>=NOT && LA70_0<=NUMBER)||LA70_0==SIMPLE_FILE||(LA70_0>=STRING && LA70_0<=SYSTEMVAR)||LA70_0==TOKEN||LA70_0==VARIABLE||LA70_0==175||LA70_0==177||LA70_0==191))
			{
				alt70 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 70, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(70); }
			switch (alt70)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:329:4: ( SELECT )=> select_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(329, 16);
				PushFollow(Follow._select_command_in_expression_list_or_select_command1839);
				select_command216=select_command();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, select_command216.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:330:4: expression_list
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(330, 4);
				PushFollow(Follow._expression_list_in_expression_list_or_select_command1844);
				expression_list217=expression_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression_list217.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_list_or_select_command", 40);
			LeaveRule("expression_list_or_select_command", 40);
			LeaveRule_expression_list_or_select_command();
	    }
	 	DebugLocation(331, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_list_or_select_command"); }
		return retval;

	}
	// $ANTLR end "expression_list_or_select_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression() {}

	// $ANTLR start "expression"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:333:1: expression : expression_7 ;
	[GrammarRule("expression")]
	private AstParserRuleReturnScope<object, IToken> expression()
	{
		EnterRule_expression();
		EnterRule("expression", 41);
		TraceIn("expression", 41);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> expression_7218 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(333, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:334:2: ( expression_7 )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:334:4: expression_7
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(334, 4);
			PushFollow(Follow._expression_7_in_expression1857);
			expression_7218=expression_7();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression_7218.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression", 41);
			LeaveRule("expression", 41);
			LeaveRule_expression();
	    }
	 	DebugLocation(335, 1);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return retval;

	}
	// $ANTLR end "expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_7() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_7() {}

	// $ANTLR start "expression_7"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:337:1: expression_7 : (a= expression_6 -> $a) ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )* ;
	[GrammarRule("expression_7")]
	private AstParserRuleReturnScope<object, IToken> expression_7()
	{
		EnterRule_expression_7();
		EnterRule("expression_7", 42);
		TraceIn("expression_7", 42);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS219 = default(IToken);
	    IToken WS221 = default(IToken);
	    IToken IN222 = default(IToken);
	    IToken WS223 = default(IToken);
	    IToken char_literal224 = default(IToken);
	    IToken WS225 = default(IToken);
	    IToken WS227 = default(IToken);
	    IToken char_literal228 = default(IToken);
	    IToken NOT229 = default(IToken);
	    IToken WS230 = default(IToken);
	    IToken IN231 = default(IToken);
	    IToken WS232 = default(IToken);
	    IToken char_literal233 = default(IToken);
	    IToken WS234 = default(IToken);
	    IToken WS236 = default(IToken);
	    IToken char_literal237 = default(IToken);
	    IToken WS239 = default(IToken);
	    IToken SOME240 = default(IToken);
	    IToken ANY241 = default(IToken);
	    IToken WS242 = default(IToken);
	    IToken char_literal243 = default(IToken);
	    IToken char_literal245 = default(IToken);
	    IToken WS247 = default(IToken);
	    IToken ALL248 = default(IToken);
	    IToken WS249 = default(IToken);
	    IToken char_literal250 = default(IToken);
	    IToken char_literal252 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_7220 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command226 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command235 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_4238 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command244 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_4246 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command251 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS219_tree = default(object);
	    object WS221_tree = default(object);
	    object IN222_tree = default(object);
	    object WS223_tree = default(object);
	    object char_literal224_tree = default(object);
	    object WS225_tree = default(object);
	    object WS227_tree = default(object);
	    object char_literal228_tree = default(object);
	    object NOT229_tree = default(object);
	    object WS230_tree = default(object);
	    object IN231_tree = default(object);
	    object WS232_tree = default(object);
	    object char_literal233_tree = default(object);
	    object WS234_tree = default(object);
	    object WS236_tree = default(object);
	    object char_literal237_tree = default(object);
	    object WS239_tree = default(object);
	    object SOME240_tree = default(object);
	    object ANY241_tree = default(object);
	    object WS242_tree = default(object);
	    object char_literal243_tree = default(object);
	    object char_literal245_tree = default(object);
	    object WS247_tree = default(object);
	    object ALL248_tree = default(object);
	    object WS249_tree = default(object);
	    object char_literal250_tree = default(object);
	    object char_literal252_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_ANY=new RewriteRuleITokenStream(adaptor,"token ANY");
	    RewriteRuleITokenStream stream_IN=new RewriteRuleITokenStream(adaptor,"token IN");
	    RewriteRuleITokenStream stream_172=new RewriteRuleITokenStream(adaptor,"token 172");
	    RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");
	    RewriteRuleITokenStream stream_173=new RewriteRuleITokenStream(adaptor,"token 173");
	    RewriteRuleITokenStream stream_SOME=new RewriteRuleITokenStream(adaptor,"token SOME");
	    RewriteRuleITokenStream stream_ALL=new RewriteRuleITokenStream(adaptor,"token ALL");
	    RewriteRuleSubtreeStream stream_op_7=new RewriteRuleSubtreeStream(adaptor,"rule op_7");
	    RewriteRuleSubtreeStream stream_expression_6=new RewriteRuleSubtreeStream(adaptor,"rule expression_6");
	    RewriteRuleSubtreeStream stream_expression_list_or_select_command=new RewriteRuleSubtreeStream(adaptor,"rule expression_list_or_select_command");
	    RewriteRuleSubtreeStream stream_op_4=new RewriteRuleSubtreeStream(adaptor,"rule op_4");
		try { DebugEnterRule(GrammarFileName, "expression_7");
		DebugLocation(337, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:338:2: ( (a= expression_6 -> $a) ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:338:4: (a= expression_6 -> $a) ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )*
			{
			DebugLocation(338, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:338:4: (a= expression_6 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:338:5: a= expression_6
			{
			DebugLocation(338, 6);
			PushFollow(Follow._expression_6_in_expression_71873);
			a=expression_6();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression_6.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 338:19: -> $a
			{
				DebugLocation(338, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(338, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:338:25: ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )*
			try { DebugEnterSubRule(83);
			while (true)
			{
				int alt83=2;
				try { DebugEnterDecision(83, decisionCanBacktrack[83]);
				int LA83_0 = input.LA(1);

				if ((LA83_0==WS))
				{
					int LA83_1 = input.LA(2);

					if ((LA83_1==BETWEEN||LA83_1==IN||LA83_1==LIKE||LA83_1==MATCH||LA83_1==NOT||LA83_1==OR||(LA83_1>=167 && LA83_1<=169)||(LA83_1>=181 && LA83_1<=186)))
					{
						alt83 = 1;
					}


				}


				} finally { DebugExitDecision(83); }
				switch ( alt83 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:338:26: WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) )
					{
					DebugLocation(338, 26);
					WS219=(IToken)Match(input,WS,Follow._WS_in_expression_71880); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS219);

					DebugLocation(338, 29);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:338:29: ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) )
					int alt82=5;
					try { DebugEnterSubRule(82);
					try { DebugEnterDecision(82, decisionCanBacktrack[82]);
					switch (input.LA(1))
					{
					case BETWEEN:
					case OR:
						{
						alt82 = 1;
						}
						break;
					case NOT:
						{
						int LA82_2 = input.LA(2);

						if ((LA82_2==WS))
						{
							switch (input.LA(3))
							{
							case BETWEEN:
								{
								alt82 = 1;
								}
								break;
							case IN:
								{
								alt82 = 3;
								}
								break;
							case LIKE:
								{
								switch (input.LA(4))
								{
								case WS:
									{
									int LA82_16 = input.LA(5);

									if ((LA82_16==ANY||LA82_16==SOME))
									{
										alt82 = 4;
									}
									else if ((LA82_16==ALL))
									{
										alt82 = 5;
									}
									else
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 82, 16, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
									}
									break;
								case ANY:
								case SOME:
									{
									alt82 = 4;
									}
									break;
								case ALL:
									{
									alt82 = 5;
									}
									break;
								default:
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 82, 20, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

								}
								break;
							case MATCH:
								{
								switch (input.LA(4))
								{
								case WS:
									{
									int LA82_16 = input.LA(5);

									if ((LA82_16==ANY||LA82_16==SOME))
									{
										alt82 = 4;
									}
									else if ((LA82_16==ALL))
									{
										alt82 = 5;
									}
									else
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 82, 16, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
									}
									break;
								case ANY:
								case SOME:
									{
									alt82 = 4;
									}
									break;
								case ALL:
									{
									alt82 = 5;
									}
									break;
								default:
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 82, 21, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

								}
								break;
							default:
								{
									if (state.backtracking>0) {state.failed=true; return retval;}
									NoViableAltException nvae = new NoViableAltException("", 82, 15, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}

						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 82, 2, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case IN:
						{
						alt82 = 2;
						}
						break;
					case 184:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA82_16 = input.LA(3);

							if ((LA82_16==ANY||LA82_16==SOME))
							{
								alt82 = 4;
							}
							else if ((LA82_16==ALL))
							{
								alt82 = 5;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 82, 16, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt82 = 4;
							}
							break;
						case ALL:
							{
							alt82 = 5;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 82, 4, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 186:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA82_16 = input.LA(3);

							if ((LA82_16==ANY||LA82_16==SOME))
							{
								alt82 = 4;
							}
							else if ((LA82_16==ALL))
							{
								alt82 = 5;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 82, 16, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt82 = 4;
							}
							break;
						case ALL:
							{
							alt82 = 5;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 82, 5, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 182:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA82_16 = input.LA(3);

							if ((LA82_16==ANY||LA82_16==SOME))
							{
								alt82 = 4;
							}
							else if ((LA82_16==ALL))
							{
								alt82 = 5;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 82, 16, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt82 = 4;
							}
							break;
						case ALL:
							{
							alt82 = 5;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 82, 6, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 183:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA82_16 = input.LA(3);

							if ((LA82_16==ANY||LA82_16==SOME))
							{
								alt82 = 4;
							}
							else if ((LA82_16==ALL))
							{
								alt82 = 5;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 82, 16, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt82 = 4;
							}
							break;
						case ALL:
							{
							alt82 = 5;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 82, 7, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 168:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA82_16 = input.LA(3);

							if ((LA82_16==ANY||LA82_16==SOME))
							{
								alt82 = 4;
							}
							else if ((LA82_16==ALL))
							{
								alt82 = 5;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 82, 16, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt82 = 4;
							}
							break;
						case ALL:
							{
							alt82 = 5;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 82, 8, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 169:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA82_16 = input.LA(3);

							if ((LA82_16==ANY||LA82_16==SOME))
							{
								alt82 = 4;
							}
							else if ((LA82_16==ALL))
							{
								alt82 = 5;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 82, 16, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt82 = 4;
							}
							break;
						case ALL:
							{
							alt82 = 5;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 82, 9, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 167:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA82_16 = input.LA(3);

							if ((LA82_16==ANY||LA82_16==SOME))
							{
								alt82 = 4;
							}
							else if ((LA82_16==ALL))
							{
								alt82 = 5;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 82, 16, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt82 = 4;
							}
							break;
						case ALL:
							{
							alt82 = 5;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 82, 10, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 185:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA82_16 = input.LA(3);

							if ((LA82_16==ANY||LA82_16==SOME))
							{
								alt82 = 4;
							}
							else if ((LA82_16==ALL))
							{
								alt82 = 5;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 82, 16, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt82 = 4;
							}
							break;
						case ALL:
							{
							alt82 = 5;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 82, 11, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 181:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA82_16 = input.LA(3);

							if ((LA82_16==ANY||LA82_16==SOME))
							{
								alt82 = 4;
							}
							else if ((LA82_16==ALL))
							{
								alt82 = 5;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 82, 16, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt82 = 4;
							}
							break;
						case ALL:
							{
							alt82 = 5;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 82, 12, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case LIKE:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA82_16 = input.LA(3);

							if ((LA82_16==ANY||LA82_16==SOME))
							{
								alt82 = 4;
							}
							else if ((LA82_16==ALL))
							{
								alt82 = 5;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 82, 16, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt82 = 4;
							}
							break;
						case ALL:
							{
							alt82 = 5;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 82, 13, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case MATCH:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA82_16 = input.LA(3);

							if ((LA82_16==ANY||LA82_16==SOME))
							{
								alt82 = 4;
							}
							else if ((LA82_16==ALL))
							{
								alt82 = 5;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 82, 16, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt82 = 4;
							}
							break;
						case ALL:
							{
							alt82 = 5;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 82, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					default:
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 82, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(82); }
					switch (alt82)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:339:2: op_7 WS b= expression_6
						{
						DebugLocation(339, 2);
						PushFollow(Follow._op_7_in_expression_71885);
						op_7220=op_7();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_op_7.Add(op_7220.Tree);
						DebugLocation(339, 7);
						WS221=(IToken)Match(input,WS,Follow._WS_in_expression_71887); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS221);

						DebugLocation(339, 11);
						PushFollow(Follow._expression_6_in_expression_71891);
						b=expression_6();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expression_6.Add(b.Tree);


						{
						// AST REWRITE
						// elements: b, op_7, expression_7
						// token labels: 
						// rule labels: retval, b
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 339:25: -> ^( T_OP_BINARY op_7 $expression_7 $b)
						{
							DebugLocation(339, 28);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:339:28: ^( T_OP_BINARY op_7 $expression_7 $b)
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(339, 30);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(339, 42);
							adaptor.AddChild(root_1, stream_op_7.NextTree());
							DebugLocation(339, 48);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(339, 62);
							adaptor.AddChild(root_1, stream_b.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:340:4: IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')'
						{
						DebugLocation(340, 4);
						IN222=(IToken)Match(input,IN,Follow._IN_in_expression_71910); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_IN.Add(IN222);

						DebugLocation(340, 7);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:340:7: ( WS )?
						int alt71=2;
						try { DebugEnterSubRule(71);
						try { DebugEnterDecision(71, decisionCanBacktrack[71]);
						int LA71_0 = input.LA(1);

						if ((LA71_0==WS))
						{
							alt71 = 1;
						}
						} finally { DebugExitDecision(71); }
						switch (alt71)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:340:7: WS
							{
							DebugLocation(340, 7);
							WS223=(IToken)Match(input,WS,Follow._WS_in_expression_71912); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS223);


							}
							break;

						}
						} finally { DebugExitSubRule(71); }

						DebugLocation(340, 11);
						char_literal224=(IToken)Match(input,172,Follow._172_in_expression_71915); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_172.Add(char_literal224);

						DebugLocation(340, 15);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:340:15: ( WS )?
						int alt72=2;
						try { DebugEnterSubRule(72);
						try { DebugEnterDecision(72, decisionCanBacktrack[72]);
						int LA72_0 = input.LA(1);

						if ((LA72_0==WS))
						{
							alt72 = 1;
						}
						} finally { DebugExitDecision(72); }
						switch (alt72)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:340:15: WS
							{
							DebugLocation(340, 15);
							WS225=(IToken)Match(input,WS,Follow._WS_in_expression_71917); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS225);


							}
							break;

						}
						} finally { DebugExitSubRule(72); }

						DebugLocation(340, 19);
						PushFollow(Follow._expression_list_or_select_command_in_expression_71920);
						expression_list_or_select_command226=expression_list_or_select_command();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expression_list_or_select_command.Add(expression_list_or_select_command226.Tree);
						DebugLocation(340, 53);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:340:53: ( WS )?
						int alt73=2;
						try { DebugEnterSubRule(73);
						try { DebugEnterDecision(73, decisionCanBacktrack[73]);
						int LA73_0 = input.LA(1);

						if ((LA73_0==WS))
						{
							alt73 = 1;
						}
						} finally { DebugExitDecision(73); }
						switch (alt73)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:340:53: WS
							{
							DebugLocation(340, 53);
							WS227=(IToken)Match(input,WS,Follow._WS_in_expression_71922); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS227);


							}
							break;

						}
						} finally { DebugExitSubRule(73); }

						DebugLocation(340, 57);
						char_literal228=(IToken)Match(input,173,Follow._173_in_expression_71925); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_173.Add(char_literal228);



						{
						// AST REWRITE
						// elements: expression_7, expression_list_or_select_command
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 340:61: -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command )
						{
							DebugLocation(340, 64);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:340:64: ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(340, 66);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(340, 78);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_IN, "T_IN"));
							DebugLocation(340, 84);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(340, 97);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:341:4: NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')'
						{
						DebugLocation(341, 4);
						NOT229=(IToken)Match(input,NOT,Follow._NOT_in_expression_71943); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NOT.Add(NOT229);

						DebugLocation(341, 8);
						WS230=(IToken)Match(input,WS,Follow._WS_in_expression_71945); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS230);

						DebugLocation(341, 11);
						IN231=(IToken)Match(input,IN,Follow._IN_in_expression_71947); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_IN.Add(IN231);

						DebugLocation(341, 14);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:341:14: ( WS )?
						int alt74=2;
						try { DebugEnterSubRule(74);
						try { DebugEnterDecision(74, decisionCanBacktrack[74]);
						int LA74_0 = input.LA(1);

						if ((LA74_0==WS))
						{
							alt74 = 1;
						}
						} finally { DebugExitDecision(74); }
						switch (alt74)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:341:14: WS
							{
							DebugLocation(341, 14);
							WS232=(IToken)Match(input,WS,Follow._WS_in_expression_71949); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS232);


							}
							break;

						}
						} finally { DebugExitSubRule(74); }

						DebugLocation(341, 18);
						char_literal233=(IToken)Match(input,172,Follow._172_in_expression_71952); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_172.Add(char_literal233);

						DebugLocation(341, 22);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:341:22: ( WS )?
						int alt75=2;
						try { DebugEnterSubRule(75);
						try { DebugEnterDecision(75, decisionCanBacktrack[75]);
						int LA75_0 = input.LA(1);

						if ((LA75_0==WS))
						{
							alt75 = 1;
						}
						} finally { DebugExitDecision(75); }
						switch (alt75)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:341:22: WS
							{
							DebugLocation(341, 22);
							WS234=(IToken)Match(input,WS,Follow._WS_in_expression_71954); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS234);


							}
							break;

						}
						} finally { DebugExitSubRule(75); }

						DebugLocation(341, 26);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:341:26: ( expression_list_or_select_command )
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:341:27: expression_list_or_select_command
						{
						DebugLocation(341, 27);
						PushFollow(Follow._expression_list_or_select_command_in_expression_71958);
						expression_list_or_select_command235=expression_list_or_select_command();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expression_list_or_select_command.Add(expression_list_or_select_command235.Tree);

						}

						DebugLocation(341, 62);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:341:62: ( WS )?
						int alt76=2;
						try { DebugEnterSubRule(76);
						try { DebugEnterDecision(76, decisionCanBacktrack[76]);
						int LA76_0 = input.LA(1);

						if ((LA76_0==WS))
						{
							alt76 = 1;
						}
						} finally { DebugExitDecision(76); }
						switch (alt76)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:341:62: WS
							{
							DebugLocation(341, 62);
							WS236=(IToken)Match(input,WS,Follow._WS_in_expression_71961); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS236);


							}
							break;

						}
						} finally { DebugExitSubRule(76); }

						DebugLocation(341, 66);
						char_literal237=(IToken)Match(input,173,Follow._173_in_expression_71964); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_173.Add(char_literal237);



						{
						// AST REWRITE
						// elements: expression_7, expression_list_or_select_command
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 341:70: -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command )
						{
							DebugLocation(341, 73);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:341:73: ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(341, 75);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(341, 87);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_NOTIN, "T_NOTIN"));
							DebugLocation(341, 96);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(341, 109);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 4:
						DebugEnterAlt(4);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:342:4: op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')'
						{
						DebugLocation(342, 4);
						PushFollow(Follow._op_4_in_expression_71982);
						op_4238=op_4();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_op_4.Add(op_4238.Tree);
						DebugLocation(342, 9);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:342:9: ( WS )?
						int alt77=2;
						try { DebugEnterSubRule(77);
						try { DebugEnterDecision(77, decisionCanBacktrack[77]);
						int LA77_0 = input.LA(1);

						if ((LA77_0==WS))
						{
							alt77 = 1;
						}
						} finally { DebugExitDecision(77); }
						switch (alt77)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:342:9: WS
							{
							DebugLocation(342, 9);
							WS239=(IToken)Match(input,WS,Follow._WS_in_expression_71984); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS239);


							}
							break;

						}
						} finally { DebugExitSubRule(77); }

						DebugLocation(342, 13);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:342:13: ( SOME | ANY )
						int alt78=2;
						try { DebugEnterSubRule(78);
						try { DebugEnterDecision(78, decisionCanBacktrack[78]);
						int LA78_0 = input.LA(1);

						if ((LA78_0==SOME))
						{
							alt78 = 1;
						}
						else if ((LA78_0==ANY))
						{
							alt78 = 2;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 78, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						} finally { DebugExitDecision(78); }
						switch (alt78)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:342:14: SOME
							{
							DebugLocation(342, 14);
							SOME240=(IToken)Match(input,SOME,Follow._SOME_in_expression_71988); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_SOME.Add(SOME240);


							}
							break;
						case 2:
							DebugEnterAlt(2);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:342:21: ANY
							{
							DebugLocation(342, 21);
							ANY241=(IToken)Match(input,ANY,Follow._ANY_in_expression_71992); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_ANY.Add(ANY241);


							}
							break;

						}
						} finally { DebugExitSubRule(78); }

						DebugLocation(342, 26);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:342:26: ( WS )?
						int alt79=2;
						try { DebugEnterSubRule(79);
						try { DebugEnterDecision(79, decisionCanBacktrack[79]);
						int LA79_0 = input.LA(1);

						if ((LA79_0==WS))
						{
							alt79 = 1;
						}
						} finally { DebugExitDecision(79); }
						switch (alt79)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:342:26: WS
							{
							DebugLocation(342, 26);
							WS242=(IToken)Match(input,WS,Follow._WS_in_expression_71995); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS242);


							}
							break;

						}
						} finally { DebugExitSubRule(79); }

						DebugLocation(342, 30);
						char_literal243=(IToken)Match(input,172,Follow._172_in_expression_71998); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_172.Add(char_literal243);

						DebugLocation(342, 34);
						PushFollow(Follow._expression_list_or_select_command_in_expression_72000);
						expression_list_or_select_command244=expression_list_or_select_command();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expression_list_or_select_command.Add(expression_list_or_select_command244.Tree);
						DebugLocation(342, 68);
						char_literal245=(IToken)Match(input,173,Follow._173_in_expression_72002); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_173.Add(char_literal245);



						{
						// AST REWRITE
						// elements: expression_list_or_select_command, op_4, expression_7
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 342:72: -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command )
						{
							DebugLocation(342, 75);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:342:75: ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(342, 77);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(342, 89);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_ANY, "T_ANY"));
							DebugLocation(342, 95);
							adaptor.AddChild(root_1, stream_op_4.NextTree());
							DebugLocation(342, 101);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(342, 114);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 5:
						DebugEnterAlt(5);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:343:4: op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')'
						{
						DebugLocation(343, 4);
						PushFollow(Follow._op_4_in_expression_72022);
						op_4246=op_4();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_op_4.Add(op_4246.Tree);
						DebugLocation(343, 9);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:343:9: ( WS )?
						int alt80=2;
						try { DebugEnterSubRule(80);
						try { DebugEnterDecision(80, decisionCanBacktrack[80]);
						int LA80_0 = input.LA(1);

						if ((LA80_0==WS))
						{
							alt80 = 1;
						}
						} finally { DebugExitDecision(80); }
						switch (alt80)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:343:9: WS
							{
							DebugLocation(343, 9);
							WS247=(IToken)Match(input,WS,Follow._WS_in_expression_72024); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS247);


							}
							break;

						}
						} finally { DebugExitSubRule(80); }

						DebugLocation(343, 13);
						ALL248=(IToken)Match(input,ALL,Follow._ALL_in_expression_72027); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_ALL.Add(ALL248);

						DebugLocation(343, 17);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:343:17: ( WS )?
						int alt81=2;
						try { DebugEnterSubRule(81);
						try { DebugEnterDecision(81, decisionCanBacktrack[81]);
						int LA81_0 = input.LA(1);

						if ((LA81_0==WS))
						{
							alt81 = 1;
						}
						} finally { DebugExitDecision(81); }
						switch (alt81)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:343:17: WS
							{
							DebugLocation(343, 17);
							WS249=(IToken)Match(input,WS,Follow._WS_in_expression_72029); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_WS.Add(WS249);


							}
							break;

						}
						} finally { DebugExitSubRule(81); }

						DebugLocation(343, 21);
						char_literal250=(IToken)Match(input,172,Follow._172_in_expression_72032); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_172.Add(char_literal250);

						DebugLocation(343, 25);
						PushFollow(Follow._expression_list_or_select_command_in_expression_72034);
						expression_list_or_select_command251=expression_list_or_select_command();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expression_list_or_select_command.Add(expression_list_or_select_command251.Tree);
						DebugLocation(343, 59);
						char_literal252=(IToken)Match(input,173,Follow._173_in_expression_72036); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_173.Add(char_literal252);



						{
						// AST REWRITE
						// elements: expression_list_or_select_command, expression_7, op_4
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 343:63: -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command )
						{
							DebugLocation(343, 66);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:343:66: ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(343, 68);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(343, 80);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_ALL, "T_ALL"));
							DebugLocation(343, 86);
							adaptor.AddChild(root_1, stream_op_4.NextTree());
							DebugLocation(343, 92);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(343, 105);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;

					}
					} finally { DebugExitSubRule(82); }


					}
					break;

				default:
					goto loop83;
				}
			}

			loop83:
				;

			} finally { DebugExitSubRule(83); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_7", 42);
			LeaveRule("expression_7", 42);
			LeaveRule_expression_7();
	    }
	 	DebugLocation(345, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_7"); }
		return retval;

	}
	// $ANTLR end "expression_7"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_7() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_7() {}

	// $ANTLR start "op_7"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:347:1: op_7 : ( OR -> T_OR | BETWEEN -> T_BETWEEN | NOT WS BETWEEN -> T_NOTBETWEEN );
	[GrammarRule("op_7")]
	private AstParserRuleReturnScope<object, IToken> op_7()
	{
		EnterRule_op_7();
		EnterRule("op_7", 43);
		TraceIn("op_7", 43);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken OR253 = default(IToken);
	    IToken BETWEEN254 = default(IToken);
	    IToken NOT255 = default(IToken);
	    IToken WS256 = default(IToken);
	    IToken BETWEEN257 = default(IToken);

	    object OR253_tree = default(object);
	    object BETWEEN254_tree = default(object);
	    object NOT255_tree = default(object);
	    object WS256_tree = default(object);
	    object BETWEEN257_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");
	    RewriteRuleITokenStream stream_BETWEEN=new RewriteRuleITokenStream(adaptor,"token BETWEEN");
	    RewriteRuleITokenStream stream_OR=new RewriteRuleITokenStream(adaptor,"token OR");

		try { DebugEnterRule(GrammarFileName, "op_7");
		DebugLocation(347, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:347:6: ( OR -> T_OR | BETWEEN -> T_BETWEEN | NOT WS BETWEEN -> T_NOTBETWEEN )
			int alt84=3;
			try { DebugEnterDecision(84, decisionCanBacktrack[84]);
			switch (input.LA(1))
			{
			case OR:
				{
				alt84 = 1;
				}
				break;
			case BETWEEN:
				{
				alt84 = 2;
				}
				break;
			case NOT:
				{
				alt84 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 84, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(84); }
			switch (alt84)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:347:8: OR
				{
				DebugLocation(347, 8);
				OR253=(IToken)Match(input,OR,Follow._OR_in_op_72066); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_OR.Add(OR253);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 347:11: -> T_OR
				{
					DebugLocation(347, 14);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_OR, "T_OR"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:348:4: BETWEEN
				{
				DebugLocation(348, 4);
				BETWEEN254=(IToken)Match(input,BETWEEN,Follow._BETWEEN_in_op_72075); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_BETWEEN.Add(BETWEEN254);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 348:12: -> T_BETWEEN
				{
					DebugLocation(348, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BETWEEN, "T_BETWEEN"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:349:4: NOT WS BETWEEN
				{
				DebugLocation(349, 4);
				NOT255=(IToken)Match(input,NOT,Follow._NOT_in_op_72084); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_NOT.Add(NOT255);

				DebugLocation(349, 8);
				WS256=(IToken)Match(input,WS,Follow._WS_in_op_72086); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS256);

				DebugLocation(349, 11);
				BETWEEN257=(IToken)Match(input,BETWEEN,Follow._BETWEEN_in_op_72088); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_BETWEEN.Add(BETWEEN257);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 349:19: -> T_NOTBETWEEN
				{
					DebugLocation(349, 22);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTBETWEEN, "T_NOTBETWEEN"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_7", 43);
			LeaveRule("op_7", 43);
			LeaveRule_op_7();
	    }
	 	DebugLocation(350, 1);
		} finally { DebugExitRule(GrammarFileName, "op_7"); }
		return retval;

	}
	// $ANTLR end "op_7"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_6() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_6() {}

	// $ANTLR start "expression_6"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:352:1: expression_6 : (a= expression_5 -> $a) ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )* ;
	[GrammarRule("expression_6")]
	private AstParserRuleReturnScope<object, IToken> expression_6()
	{
		EnterRule_expression_6();
		EnterRule("expression_6", 44);
		TraceIn("expression_6", 44);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS258 = default(IToken);
	    IToken WS260 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_6259 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS258_tree = default(object);
	    object WS260_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_op_6=new RewriteRuleSubtreeStream(adaptor,"rule op_6");
	    RewriteRuleSubtreeStream stream_expression_5=new RewriteRuleSubtreeStream(adaptor,"rule expression_5");
		try { DebugEnterRule(GrammarFileName, "expression_6");
		DebugLocation(352, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:353:2: ( (a= expression_5 -> $a) ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:353:4: (a= expression_5 -> $a) ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )*
			{
			DebugLocation(353, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:353:4: (a= expression_5 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:353:5: a= expression_5
			{
			DebugLocation(353, 6);
			PushFollow(Follow._expression_5_in_expression_62107);
			a=expression_5();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression_5.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 353:19: -> $a
			{
				DebugLocation(353, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(353, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:353:25: ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )*
			try { DebugEnterSubRule(85);
			while (true)
			{
				int alt85=2;
				try { DebugEnterDecision(85, decisionCanBacktrack[85]);
				int LA85_0 = input.LA(1);

				if ((LA85_0==WS))
				{
					int LA85_1 = input.LA(2);

					if ((LA85_1==AND))
					{
						alt85 = 1;
					}


				}


				} finally { DebugExitDecision(85); }
				switch ( alt85 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:353:26: WS op_6 WS b= expression_5
					{
					DebugLocation(353, 26);
					WS258=(IToken)Match(input,WS,Follow._WS_in_expression_62114); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS258);

					DebugLocation(353, 29);
					PushFollow(Follow._op_6_in_expression_62116);
					op_6259=op_6();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_op_6.Add(op_6259.Tree);
					DebugLocation(353, 34);
					WS260=(IToken)Match(input,WS,Follow._WS_in_expression_62118); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS260);

					DebugLocation(353, 38);
					PushFollow(Follow._expression_5_in_expression_62122);
					b=expression_5();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expression_5.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, op_6, expression_6
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 353:52: -> ^( T_OP_BINARY op_6 $expression_6 $b)
					{
						DebugLocation(353, 55);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:353:55: ^( T_OP_BINARY op_6 $expression_6 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(353, 57);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(353, 69);
						adaptor.AddChild(root_1, stream_op_6.NextTree());
						DebugLocation(353, 75);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(353, 89);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop85;
				}
			}

			loop85:
				;

			} finally { DebugExitSubRule(85); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_6", 44);
			LeaveRule("expression_6", 44);
			LeaveRule_expression_6();
	    }
	 	DebugLocation(354, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_6"); }
		return retval;

	}
	// $ANTLR end "expression_6"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_6() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_6() {}

	// $ANTLR start "op_6"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:356:1: op_6 : AND -> T_AND ;
	[GrammarRule("op_6")]
	private AstParserRuleReturnScope<object, IToken> op_6()
	{
		EnterRule_op_6();
		EnterRule("op_6", 45);
		TraceIn("op_6", 45);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken AND261 = default(IToken);

	    object AND261_tree = default(object);
	    RewriteRuleITokenStream stream_AND=new RewriteRuleITokenStream(adaptor,"token AND");

		try { DebugEnterRule(GrammarFileName, "op_6");
		DebugLocation(356, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:356:6: ( AND -> T_AND )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:356:8: AND
			{
			DebugLocation(356, 8);
			AND261=(IToken)Match(input,AND,Follow._AND_in_op_62150); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_AND.Add(AND261);



			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 356:12: -> T_AND
			{
				DebugLocation(356, 15);
				adaptor.AddChild(root_0, (object)adaptor.Create(T_AND, "T_AND"));

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_6", 45);
			LeaveRule("op_6", 45);
			LeaveRule_op_6();
	    }
	 	DebugLocation(357, 1);
		} finally { DebugExitRule(GrammarFileName, "op_6"); }
		return retval;

	}
	// $ANTLR end "op_6"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_5() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_5() {}

	// $ANTLR start "expression_5"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:359:1: expression_5 : ( op_5 WS expression_5 -> ^( T_OP_UNARY op_5 expression_5 ) | expression_4 );
	[GrammarRule("expression_5")]
	private AstParserRuleReturnScope<object, IToken> expression_5()
	{
		EnterRule_expression_5();
		EnterRule("expression_5", 46);
		TraceIn("expression_5", 46);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS263 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> op_5262 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_5264 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_4265 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS263_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression_5=new RewriteRuleSubtreeStream(adaptor,"rule expression_5");
	    RewriteRuleSubtreeStream stream_op_5=new RewriteRuleSubtreeStream(adaptor,"rule op_5");
		try { DebugEnterRule(GrammarFileName, "expression_5");
		DebugLocation(359, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:360:2: ( op_5 WS expression_5 -> ^( T_OP_UNARY op_5 expression_5 ) | expression_4 )
			int alt86=2;
			try { DebugEnterDecision(86, decisionCanBacktrack[86]);
			int LA86_0 = input.LA(1);

			if ((LA86_0==NOT))
			{
				alt86 = 1;
			}
			else if (((LA86_0>=CASE && LA86_0<=CAST)||(LA86_0>=CONVERT && LA86_0<=COUNT)||(LA86_0>=DATEADD && LA86_0<=DATEPART)||LA86_0==EXISTS||LA86_0==NUMBER||LA86_0==SIMPLE_FILE||(LA86_0>=STRING && LA86_0<=SYSTEMVAR)||LA86_0==TOKEN||LA86_0==VARIABLE||LA86_0==172||LA86_0==175||LA86_0==177||LA86_0==191))
			{
				alt86 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 86, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(86); }
			switch (alt86)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:360:4: op_5 WS expression_5
				{
				DebugLocation(360, 4);
				PushFollow(Follow._op_5_in_expression_52168);
				op_5262=op_5();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_op_5.Add(op_5262.Tree);
				DebugLocation(360, 9);
				WS263=(IToken)Match(input,WS,Follow._WS_in_expression_52170); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS263);

				DebugLocation(360, 12);
				PushFollow(Follow._expression_5_in_expression_52172);
				expression_5264=expression_5();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression_5.Add(expression_5264.Tree);


				{
				// AST REWRITE
				// elements: expression_5, op_5
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 360:25: -> ^( T_OP_UNARY op_5 expression_5 )
				{
					DebugLocation(360, 28);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:360:28: ^( T_OP_UNARY op_5 expression_5 )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(360, 30);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_UNARY, "T_OP_UNARY"), root_1);

					DebugLocation(360, 41);
					adaptor.AddChild(root_1, stream_op_5.NextTree());
					DebugLocation(360, 46);
					adaptor.AddChild(root_1, stream_expression_5.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:361:4: expression_4
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(361, 4);
				PushFollow(Follow._expression_4_in_expression_52187);
				expression_4265=expression_4();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression_4265.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_5", 46);
			LeaveRule("expression_5", 46);
			LeaveRule_expression_5();
	    }
	 	DebugLocation(362, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_5"); }
		return retval;

	}
	// $ANTLR end "expression_5"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_5() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_5() {}

	// $ANTLR start "op_5"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:364:1: op_5 : NOT -> T_NOT ;
	[GrammarRule("op_5")]
	private AstParserRuleReturnScope<object, IToken> op_5()
	{
		EnterRule_op_5();
		EnterRule("op_5", 47);
		TraceIn("op_5", 47);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken NOT266 = default(IToken);

	    object NOT266_tree = default(object);
	    RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");

		try { DebugEnterRule(GrammarFileName, "op_5");
		DebugLocation(364, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:364:7: ( NOT -> T_NOT )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:364:9: NOT
			{
			DebugLocation(364, 9);
			NOT266=(IToken)Match(input,NOT,Follow._NOT_in_op_52198); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_NOT.Add(NOT266);



			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 364:13: -> T_NOT
			{
				DebugLocation(364, 16);
				adaptor.AddChild(root_0, (object)adaptor.Create(T_NOT, "T_NOT"));

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_5", 47);
			LeaveRule("op_5", 47);
			LeaveRule_op_5();
	    }
	 	DebugLocation(365, 1);
		} finally { DebugExitRule(GrammarFileName, "op_5"); }
		return retval;

	}
	// $ANTLR end "op_5"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_4() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_4() {}

	// $ANTLR start "expression_4"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:367:1: expression_4 : (a= expression_3 -> $a) ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )* ;
	[GrammarRule("expression_4")]
	private AstParserRuleReturnScope<object, IToken> expression_4()
	{
		EnterRule_expression_4();
		EnterRule("expression_4", 48);
		TraceIn("expression_4", 48);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS267 = default(IToken);
	    IToken WS269 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_4268 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS267_tree = default(object);
	    object WS269_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression_3=new RewriteRuleSubtreeStream(adaptor,"rule expression_3");
	    RewriteRuleSubtreeStream stream_op_4=new RewriteRuleSubtreeStream(adaptor,"rule op_4");
		try { DebugEnterRule(GrammarFileName, "expression_4");
		DebugLocation(367, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:368:2: ( (a= expression_3 -> $a) ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:368:4: (a= expression_3 -> $a) ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )*
			{
			DebugLocation(368, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:368:4: (a= expression_3 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:368:5: a= expression_3
			{
			DebugLocation(368, 6);
			PushFollow(Follow._expression_3_in_expression_42217);
			a=expression_3();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression_3.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 368:19: -> $a
			{
				DebugLocation(368, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(368, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:368:25: ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )*
			try { DebugEnterSubRule(89);
			while (true)
			{
				int alt89=2;
				try { DebugEnterDecision(89, decisionCanBacktrack[89]);
				int LA89_0 = input.LA(1);

				if ((LA89_0==WS))
				{
					switch (input.LA(2))
					{
					case NOT:
						{
						int LA89_4 = input.LA(3);

						if ((LA89_4==WS))
						{
							int LA89_16 = input.LA(4);

							if ((LA89_16==LIKE))
							{
								int LA89_18 = input.LA(5);

								if ((LA89_18==WS))
								{
									int LA89_17 = input.LA(6);

									if (((LA89_17>=CASE && LA89_17<=CAST)||(LA89_17>=CONVERT && LA89_17<=COUNT)||(LA89_17>=DATEADD && LA89_17<=DATEPART)||LA89_17==EXISTS||LA89_17==NUMBER||LA89_17==SIMPLE_FILE||(LA89_17>=STRING && LA89_17<=SYSTEMVAR)||LA89_17==TOKEN||LA89_17==VARIABLE||LA89_17==172||LA89_17==175||LA89_17==177||LA89_17==191))
									{
										alt89 = 1;
									}


								}
								else if (((LA89_18>=CASE && LA89_18<=CAST)||(LA89_18>=CONVERT && LA89_18<=COUNT)||(LA89_18>=DATEADD && LA89_18<=DATEPART)||LA89_18==EXISTS||LA89_18==NUMBER||LA89_18==SIMPLE_FILE||(LA89_18>=STRING && LA89_18<=SYSTEMVAR)||LA89_18==TOKEN||LA89_18==VARIABLE||LA89_18==172||LA89_18==175||LA89_18==177||LA89_18==191))
								{
									alt89 = 1;
								}


							}
							else if ((LA89_16==MATCH))
							{
								int LA89_19 = input.LA(5);

								if ((LA89_19==WS))
								{
									int LA89_17 = input.LA(6);

									if (((LA89_17>=CASE && LA89_17<=CAST)||(LA89_17>=CONVERT && LA89_17<=COUNT)||(LA89_17>=DATEADD && LA89_17<=DATEPART)||LA89_17==EXISTS||LA89_17==NUMBER||LA89_17==SIMPLE_FILE||(LA89_17>=STRING && LA89_17<=SYSTEMVAR)||LA89_17==TOKEN||LA89_17==VARIABLE||LA89_17==172||LA89_17==175||LA89_17==177||LA89_17==191))
									{
										alt89 = 1;
									}


								}
								else if (((LA89_19>=CASE && LA89_19<=CAST)||(LA89_19>=CONVERT && LA89_19<=COUNT)||(LA89_19>=DATEADD && LA89_19<=DATEPART)||LA89_19==EXISTS||LA89_19==NUMBER||LA89_19==SIMPLE_FILE||(LA89_19>=STRING && LA89_19<=SYSTEMVAR)||LA89_19==TOKEN||LA89_19==VARIABLE||LA89_19==172||LA89_19==175||LA89_19==177||LA89_19==191))
								{
									alt89 = 1;
								}


							}


						}


						}
						break;
					case 184:
						{
						int LA89_5 = input.LA(3);

						if ((LA89_5==WS))
						{
							int LA89_17 = input.LA(4);

							if (((LA89_17>=CASE && LA89_17<=CAST)||(LA89_17>=CONVERT && LA89_17<=COUNT)||(LA89_17>=DATEADD && LA89_17<=DATEPART)||LA89_17==EXISTS||LA89_17==NUMBER||LA89_17==SIMPLE_FILE||(LA89_17>=STRING && LA89_17<=SYSTEMVAR)||LA89_17==TOKEN||LA89_17==VARIABLE||LA89_17==172||LA89_17==175||LA89_17==177||LA89_17==191))
							{
								alt89 = 1;
							}


						}
						else if (((LA89_5>=CASE && LA89_5<=CAST)||(LA89_5>=CONVERT && LA89_5<=COUNT)||(LA89_5>=DATEADD && LA89_5<=DATEPART)||LA89_5==EXISTS||LA89_5==NUMBER||LA89_5==SIMPLE_FILE||(LA89_5>=STRING && LA89_5<=SYSTEMVAR)||LA89_5==TOKEN||LA89_5==VARIABLE||LA89_5==172||LA89_5==175||LA89_5==177||LA89_5==191))
						{
							alt89 = 1;
						}


						}
						break;
					case 186:
						{
						int LA89_6 = input.LA(3);

						if ((LA89_6==WS))
						{
							int LA89_17 = input.LA(4);

							if (((LA89_17>=CASE && LA89_17<=CAST)||(LA89_17>=CONVERT && LA89_17<=COUNT)||(LA89_17>=DATEADD && LA89_17<=DATEPART)||LA89_17==EXISTS||LA89_17==NUMBER||LA89_17==SIMPLE_FILE||(LA89_17>=STRING && LA89_17<=SYSTEMVAR)||LA89_17==TOKEN||LA89_17==VARIABLE||LA89_17==172||LA89_17==175||LA89_17==177||LA89_17==191))
							{
								alt89 = 1;
							}


						}
						else if (((LA89_6>=CASE && LA89_6<=CAST)||(LA89_6>=CONVERT && LA89_6<=COUNT)||(LA89_6>=DATEADD && LA89_6<=DATEPART)||LA89_6==EXISTS||LA89_6==NUMBER||LA89_6==SIMPLE_FILE||(LA89_6>=STRING && LA89_6<=SYSTEMVAR)||LA89_6==TOKEN||LA89_6==VARIABLE||LA89_6==172||LA89_6==175||LA89_6==177||LA89_6==191))
						{
							alt89 = 1;
						}


						}
						break;
					case 182:
						{
						int LA89_7 = input.LA(3);

						if ((LA89_7==WS))
						{
							int LA89_17 = input.LA(4);

							if (((LA89_17>=CASE && LA89_17<=CAST)||(LA89_17>=CONVERT && LA89_17<=COUNT)||(LA89_17>=DATEADD && LA89_17<=DATEPART)||LA89_17==EXISTS||LA89_17==NUMBER||LA89_17==SIMPLE_FILE||(LA89_17>=STRING && LA89_17<=SYSTEMVAR)||LA89_17==TOKEN||LA89_17==VARIABLE||LA89_17==172||LA89_17==175||LA89_17==177||LA89_17==191))
							{
								alt89 = 1;
							}


						}
						else if (((LA89_7>=CASE && LA89_7<=CAST)||(LA89_7>=CONVERT && LA89_7<=COUNT)||(LA89_7>=DATEADD && LA89_7<=DATEPART)||LA89_7==EXISTS||LA89_7==NUMBER||LA89_7==SIMPLE_FILE||(LA89_7>=STRING && LA89_7<=SYSTEMVAR)||LA89_7==TOKEN||LA89_7==VARIABLE||LA89_7==172||LA89_7==175||LA89_7==177||LA89_7==191))
						{
							alt89 = 1;
						}


						}
						break;
					case 183:
						{
						int LA89_8 = input.LA(3);

						if ((LA89_8==WS))
						{
							int LA89_17 = input.LA(4);

							if (((LA89_17>=CASE && LA89_17<=CAST)||(LA89_17>=CONVERT && LA89_17<=COUNT)||(LA89_17>=DATEADD && LA89_17<=DATEPART)||LA89_17==EXISTS||LA89_17==NUMBER||LA89_17==SIMPLE_FILE||(LA89_17>=STRING && LA89_17<=SYSTEMVAR)||LA89_17==TOKEN||LA89_17==VARIABLE||LA89_17==172||LA89_17==175||LA89_17==177||LA89_17==191))
							{
								alt89 = 1;
							}


						}
						else if (((LA89_8>=CASE && LA89_8<=CAST)||(LA89_8>=CONVERT && LA89_8<=COUNT)||(LA89_8>=DATEADD && LA89_8<=DATEPART)||LA89_8==EXISTS||LA89_8==NUMBER||LA89_8==SIMPLE_FILE||(LA89_8>=STRING && LA89_8<=SYSTEMVAR)||LA89_8==TOKEN||LA89_8==VARIABLE||LA89_8==172||LA89_8==175||LA89_8==177||LA89_8==191))
						{
							alt89 = 1;
						}


						}
						break;
					case 168:
						{
						int LA89_9 = input.LA(3);

						if ((LA89_9==WS))
						{
							int LA89_17 = input.LA(4);

							if (((LA89_17>=CASE && LA89_17<=CAST)||(LA89_17>=CONVERT && LA89_17<=COUNT)||(LA89_17>=DATEADD && LA89_17<=DATEPART)||LA89_17==EXISTS||LA89_17==NUMBER||LA89_17==SIMPLE_FILE||(LA89_17>=STRING && LA89_17<=SYSTEMVAR)||LA89_17==TOKEN||LA89_17==VARIABLE||LA89_17==172||LA89_17==175||LA89_17==177||LA89_17==191))
							{
								alt89 = 1;
							}


						}
						else if (((LA89_9>=CASE && LA89_9<=CAST)||(LA89_9>=CONVERT && LA89_9<=COUNT)||(LA89_9>=DATEADD && LA89_9<=DATEPART)||LA89_9==EXISTS||LA89_9==NUMBER||LA89_9==SIMPLE_FILE||(LA89_9>=STRING && LA89_9<=SYSTEMVAR)||LA89_9==TOKEN||LA89_9==VARIABLE||LA89_9==172||LA89_9==175||LA89_9==177||LA89_9==191))
						{
							alt89 = 1;
						}


						}
						break;
					case 169:
						{
						int LA89_10 = input.LA(3);

						if ((LA89_10==WS))
						{
							int LA89_17 = input.LA(4);

							if (((LA89_17>=CASE && LA89_17<=CAST)||(LA89_17>=CONVERT && LA89_17<=COUNT)||(LA89_17>=DATEADD && LA89_17<=DATEPART)||LA89_17==EXISTS||LA89_17==NUMBER||LA89_17==SIMPLE_FILE||(LA89_17>=STRING && LA89_17<=SYSTEMVAR)||LA89_17==TOKEN||LA89_17==VARIABLE||LA89_17==172||LA89_17==175||LA89_17==177||LA89_17==191))
							{
								alt89 = 1;
							}


						}
						else if (((LA89_10>=CASE && LA89_10<=CAST)||(LA89_10>=CONVERT && LA89_10<=COUNT)||(LA89_10>=DATEADD && LA89_10<=DATEPART)||LA89_10==EXISTS||LA89_10==NUMBER||LA89_10==SIMPLE_FILE||(LA89_10>=STRING && LA89_10<=SYSTEMVAR)||LA89_10==TOKEN||LA89_10==VARIABLE||LA89_10==172||LA89_10==175||LA89_10==177||LA89_10==191))
						{
							alt89 = 1;
						}


						}
						break;
					case 167:
						{
						int LA89_11 = input.LA(3);

						if ((LA89_11==WS))
						{
							int LA89_17 = input.LA(4);

							if (((LA89_17>=CASE && LA89_17<=CAST)||(LA89_17>=CONVERT && LA89_17<=COUNT)||(LA89_17>=DATEADD && LA89_17<=DATEPART)||LA89_17==EXISTS||LA89_17==NUMBER||LA89_17==SIMPLE_FILE||(LA89_17>=STRING && LA89_17<=SYSTEMVAR)||LA89_17==TOKEN||LA89_17==VARIABLE||LA89_17==172||LA89_17==175||LA89_17==177||LA89_17==191))
							{
								alt89 = 1;
							}


						}
						else if (((LA89_11>=CASE && LA89_11<=CAST)||(LA89_11>=CONVERT && LA89_11<=COUNT)||(LA89_11>=DATEADD && LA89_11<=DATEPART)||LA89_11==EXISTS||LA89_11==NUMBER||LA89_11==SIMPLE_FILE||(LA89_11>=STRING && LA89_11<=SYSTEMVAR)||LA89_11==TOKEN||LA89_11==VARIABLE||LA89_11==172||LA89_11==175||LA89_11==177||LA89_11==191))
						{
							alt89 = 1;
						}


						}
						break;
					case 185:
						{
						int LA89_12 = input.LA(3);

						if ((LA89_12==WS))
						{
							int LA89_17 = input.LA(4);

							if (((LA89_17>=CASE && LA89_17<=CAST)||(LA89_17>=CONVERT && LA89_17<=COUNT)||(LA89_17>=DATEADD && LA89_17<=DATEPART)||LA89_17==EXISTS||LA89_17==NUMBER||LA89_17==SIMPLE_FILE||(LA89_17>=STRING && LA89_17<=SYSTEMVAR)||LA89_17==TOKEN||LA89_17==VARIABLE||LA89_17==172||LA89_17==175||LA89_17==177||LA89_17==191))
							{
								alt89 = 1;
							}


						}
						else if (((LA89_12>=CASE && LA89_12<=CAST)||(LA89_12>=CONVERT && LA89_12<=COUNT)||(LA89_12>=DATEADD && LA89_12<=DATEPART)||LA89_12==EXISTS||LA89_12==NUMBER||LA89_12==SIMPLE_FILE||(LA89_12>=STRING && LA89_12<=SYSTEMVAR)||LA89_12==TOKEN||LA89_12==VARIABLE||LA89_12==172||LA89_12==175||LA89_12==177||LA89_12==191))
						{
							alt89 = 1;
						}


						}
						break;
					case 181:
						{
						int LA89_13 = input.LA(3);

						if ((LA89_13==WS))
						{
							int LA89_17 = input.LA(4);

							if (((LA89_17>=CASE && LA89_17<=CAST)||(LA89_17>=CONVERT && LA89_17<=COUNT)||(LA89_17>=DATEADD && LA89_17<=DATEPART)||LA89_17==EXISTS||LA89_17==NUMBER||LA89_17==SIMPLE_FILE||(LA89_17>=STRING && LA89_17<=SYSTEMVAR)||LA89_17==TOKEN||LA89_17==VARIABLE||LA89_17==172||LA89_17==175||LA89_17==177||LA89_17==191))
							{
								alt89 = 1;
							}


						}
						else if (((LA89_13>=CASE && LA89_13<=CAST)||(LA89_13>=CONVERT && LA89_13<=COUNT)||(LA89_13>=DATEADD && LA89_13<=DATEPART)||LA89_13==EXISTS||LA89_13==NUMBER||LA89_13==SIMPLE_FILE||(LA89_13>=STRING && LA89_13<=SYSTEMVAR)||LA89_13==TOKEN||LA89_13==VARIABLE||LA89_13==172||LA89_13==175||LA89_13==177||LA89_13==191))
						{
							alt89 = 1;
						}


						}
						break;
					case LIKE:
						{
						int LA89_14 = input.LA(3);

						if ((LA89_14==WS))
						{
							int LA89_17 = input.LA(4);

							if (((LA89_17>=CASE && LA89_17<=CAST)||(LA89_17>=CONVERT && LA89_17<=COUNT)||(LA89_17>=DATEADD && LA89_17<=DATEPART)||LA89_17==EXISTS||LA89_17==NUMBER||LA89_17==SIMPLE_FILE||(LA89_17>=STRING && LA89_17<=SYSTEMVAR)||LA89_17==TOKEN||LA89_17==VARIABLE||LA89_17==172||LA89_17==175||LA89_17==177||LA89_17==191))
							{
								alt89 = 1;
							}


						}
						else if (((LA89_14>=CASE && LA89_14<=CAST)||(LA89_14>=CONVERT && LA89_14<=COUNT)||(LA89_14>=DATEADD && LA89_14<=DATEPART)||LA89_14==EXISTS||LA89_14==NUMBER||LA89_14==SIMPLE_FILE||(LA89_14>=STRING && LA89_14<=SYSTEMVAR)||LA89_14==TOKEN||LA89_14==VARIABLE||LA89_14==172||LA89_14==175||LA89_14==177||LA89_14==191))
						{
							alt89 = 1;
						}


						}
						break;
					case MATCH:
						{
						int LA89_15 = input.LA(3);

						if ((LA89_15==WS))
						{
							int LA89_17 = input.LA(4);

							if (((LA89_17>=CASE && LA89_17<=CAST)||(LA89_17>=CONVERT && LA89_17<=COUNT)||(LA89_17>=DATEADD && LA89_17<=DATEPART)||LA89_17==EXISTS||LA89_17==NUMBER||LA89_17==SIMPLE_FILE||(LA89_17>=STRING && LA89_17<=SYSTEMVAR)||LA89_17==TOKEN||LA89_17==VARIABLE||LA89_17==172||LA89_17==175||LA89_17==177||LA89_17==191))
							{
								alt89 = 1;
							}


						}
						else if (((LA89_15>=CASE && LA89_15<=CAST)||(LA89_15>=CONVERT && LA89_15<=COUNT)||(LA89_15>=DATEADD && LA89_15<=DATEPART)||LA89_15==EXISTS||LA89_15==NUMBER||LA89_15==SIMPLE_FILE||(LA89_15>=STRING && LA89_15<=SYSTEMVAR)||LA89_15==TOKEN||LA89_15==VARIABLE||LA89_15==172||LA89_15==175||LA89_15==177||LA89_15==191))
						{
							alt89 = 1;
						}


						}
						break;
					}

				}
				else if ((LA89_0==LIKE||LA89_0==MATCH||LA89_0==NOT||(LA89_0>=167 && LA89_0<=169)||(LA89_0>=181 && LA89_0<=186)))
				{
					alt89 = 1;
				}


				} finally { DebugExitDecision(89); }
				switch ( alt89 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:368:26: ( WS )? op_4 ( WS )? b= expression_3
					{
					DebugLocation(368, 26);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:368:26: ( WS )?
					int alt87=2;
					try { DebugEnterSubRule(87);
					try { DebugEnterDecision(87, decisionCanBacktrack[87]);
					int LA87_0 = input.LA(1);

					if ((LA87_0==WS))
					{
						alt87 = 1;
					}
					} finally { DebugExitDecision(87); }
					switch (alt87)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:368:26: WS
						{
						DebugLocation(368, 26);
						WS267=(IToken)Match(input,WS,Follow._WS_in_expression_42224); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS267);


						}
						break;

					}
					} finally { DebugExitSubRule(87); }

					DebugLocation(368, 30);
					PushFollow(Follow._op_4_in_expression_42227);
					op_4268=op_4();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_op_4.Add(op_4268.Tree);
					DebugLocation(368, 35);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:368:35: ( WS )?
					int alt88=2;
					try { DebugEnterSubRule(88);
					try { DebugEnterDecision(88, decisionCanBacktrack[88]);
					int LA88_0 = input.LA(1);

					if ((LA88_0==WS))
					{
						alt88 = 1;
					}
					} finally { DebugExitDecision(88); }
					switch (alt88)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:368:35: WS
						{
						DebugLocation(368, 35);
						WS269=(IToken)Match(input,WS,Follow._WS_in_expression_42229); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS269);


						}
						break;

					}
					} finally { DebugExitSubRule(88); }

					DebugLocation(368, 40);
					PushFollow(Follow._expression_3_in_expression_42234);
					b=expression_3();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expression_3.Add(b.Tree);


					{
					// AST REWRITE
					// elements: expression_4, b, op_4
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 368:54: -> ^( T_OP_BINARY op_4 $expression_4 $b)
					{
						DebugLocation(368, 57);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:368:57: ^( T_OP_BINARY op_4 $expression_4 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(368, 59);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(368, 71);
						adaptor.AddChild(root_1, stream_op_4.NextTree());
						DebugLocation(368, 77);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(368, 91);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop89;
				}
			}

			loop89:
				;

			} finally { DebugExitSubRule(89); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_4", 48);
			LeaveRule("expression_4", 48);
			LeaveRule_expression_4();
	    }
	 	DebugLocation(369, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_4"); }
		return retval;

	}
	// $ANTLR end "expression_4"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_4() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_4() {}

	// $ANTLR start "op_4"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:371:1: op_4 : ( '=' -> T_EQUAL | '>=' -> T_NOTLESS | '<=' -> T_NOTGREATER | '<>' -> T_NOTEQUAL | '!=' -> T_NOTEQUAL | '!>' -> T_NOTGREATER | '!<' -> T_NOTLESS | '>' -> T_GREATER | '<' -> T_LESS | LIKE -> T_LIKE | NOT WS LIKE -> T_NOTLIKE | MATCH -> T_MATCH | NOT WS MATCH -> T_NOTMATCH );
	[GrammarRule("op_4")]
	private AstParserRuleReturnScope<object, IToken> op_4()
	{
		EnterRule_op_4();
		EnterRule("op_4", 49);
		TraceIn("op_4", 49);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal270 = default(IToken);
	    IToken string_literal271 = default(IToken);
	    IToken string_literal272 = default(IToken);
	    IToken string_literal273 = default(IToken);
	    IToken string_literal274 = default(IToken);
	    IToken string_literal275 = default(IToken);
	    IToken string_literal276 = default(IToken);
	    IToken char_literal277 = default(IToken);
	    IToken char_literal278 = default(IToken);
	    IToken LIKE279 = default(IToken);
	    IToken NOT280 = default(IToken);
	    IToken WS281 = default(IToken);
	    IToken LIKE282 = default(IToken);
	    IToken MATCH283 = default(IToken);
	    IToken NOT284 = default(IToken);
	    IToken WS285 = default(IToken);
	    IToken MATCH286 = default(IToken);

	    object char_literal270_tree = default(object);
	    object string_literal271_tree = default(object);
	    object string_literal272_tree = default(object);
	    object string_literal273_tree = default(object);
	    object string_literal274_tree = default(object);
	    object string_literal275_tree = default(object);
	    object string_literal276_tree = default(object);
	    object char_literal277_tree = default(object);
	    object char_literal278_tree = default(object);
	    object LIKE279_tree = default(object);
	    object NOT280_tree = default(object);
	    object WS281_tree = default(object);
	    object LIKE282_tree = default(object);
	    object MATCH283_tree = default(object);
	    object NOT284_tree = default(object);
	    object WS285_tree = default(object);
	    object MATCH286_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_169=new RewriteRuleITokenStream(adaptor,"token 169");
	    RewriteRuleITokenStream stream_168=new RewriteRuleITokenStream(adaptor,"token 168");
	    RewriteRuleITokenStream stream_167=new RewriteRuleITokenStream(adaptor,"token 167");
	    RewriteRuleITokenStream stream_181=new RewriteRuleITokenStream(adaptor,"token 181");
	    RewriteRuleITokenStream stream_MATCH=new RewriteRuleITokenStream(adaptor,"token MATCH");
	    RewriteRuleITokenStream stream_182=new RewriteRuleITokenStream(adaptor,"token 182");
	    RewriteRuleITokenStream stream_183=new RewriteRuleITokenStream(adaptor,"token 183");
	    RewriteRuleITokenStream stream_184=new RewriteRuleITokenStream(adaptor,"token 184");
	    RewriteRuleITokenStream stream_185=new RewriteRuleITokenStream(adaptor,"token 185");
	    RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");
	    RewriteRuleITokenStream stream_186=new RewriteRuleITokenStream(adaptor,"token 186");
	    RewriteRuleITokenStream stream_LIKE=new RewriteRuleITokenStream(adaptor,"token LIKE");

		try { DebugEnterRule(GrammarFileName, "op_4");
		DebugLocation(371, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:371:6: ( '=' -> T_EQUAL | '>=' -> T_NOTLESS | '<=' -> T_NOTGREATER | '<>' -> T_NOTEQUAL | '!=' -> T_NOTEQUAL | '!>' -> T_NOTGREATER | '!<' -> T_NOTLESS | '>' -> T_GREATER | '<' -> T_LESS | LIKE -> T_LIKE | NOT WS LIKE -> T_NOTLIKE | MATCH -> T_MATCH | NOT WS MATCH -> T_NOTMATCH )
			int alt90=13;
			try { DebugEnterDecision(90, decisionCanBacktrack[90]);
			switch (input.LA(1))
			{
			case 184:
				{
				alt90 = 1;
				}
				break;
			case 186:
				{
				alt90 = 2;
				}
				break;
			case 182:
				{
				alt90 = 3;
				}
				break;
			case 183:
				{
				alt90 = 4;
				}
				break;
			case 168:
				{
				alt90 = 5;
				}
				break;
			case 169:
				{
				alt90 = 6;
				}
				break;
			case 167:
				{
				alt90 = 7;
				}
				break;
			case 185:
				{
				alt90 = 8;
				}
				break;
			case 181:
				{
				alt90 = 9;
				}
				break;
			case LIKE:
				{
				alt90 = 10;
				}
				break;
			case NOT:
				{
				int LA90_11 = input.LA(2);

				if ((LA90_11==WS))
				{
					int LA90_13 = input.LA(3);

					if ((LA90_13==LIKE))
					{
						alt90 = 11;
					}
					else if ((LA90_13==MATCH))
					{
						alt90 = 13;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 90, 13, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 90, 11, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case MATCH:
				{
				alt90 = 12;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 90, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(90); }
			switch (alt90)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:371:8: '='
				{
				DebugLocation(371, 8);
				char_literal270=(IToken)Match(input,184,Follow._184_in_op_42260); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_184.Add(char_literal270);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 371:12: -> T_EQUAL
				{
					DebugLocation(371, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_EQUAL, "T_EQUAL"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:372:4: '>='
				{
				DebugLocation(372, 4);
				string_literal271=(IToken)Match(input,186,Follow._186_in_op_42269); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_186.Add(string_literal271);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 372:9: -> T_NOTLESS
				{
					DebugLocation(372, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTLESS, "T_NOTLESS"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:373:4: '<='
				{
				DebugLocation(373, 4);
				string_literal272=(IToken)Match(input,182,Follow._182_in_op_42279); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_182.Add(string_literal272);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 373:9: -> T_NOTGREATER
				{
					DebugLocation(373, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTGREATER, "T_NOTGREATER"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:374:4: '<>'
				{
				DebugLocation(374, 4);
				string_literal273=(IToken)Match(input,183,Follow._183_in_op_42289); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_183.Add(string_literal273);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 374:9: -> T_NOTEQUAL
				{
					DebugLocation(374, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTEQUAL, "T_NOTEQUAL"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:375:4: '!='
				{
				DebugLocation(375, 4);
				string_literal274=(IToken)Match(input,168,Follow._168_in_op_42298); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_168.Add(string_literal274);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 375:9: -> T_NOTEQUAL
				{
					DebugLocation(375, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTEQUAL, "T_NOTEQUAL"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:376:4: '!>'
				{
				DebugLocation(376, 4);
				string_literal275=(IToken)Match(input,169,Follow._169_in_op_42307); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_169.Add(string_literal275);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 376:9: -> T_NOTGREATER
				{
					DebugLocation(376, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTGREATER, "T_NOTGREATER"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:377:4: '!<'
				{
				DebugLocation(377, 4);
				string_literal276=(IToken)Match(input,167,Follow._167_in_op_42316); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_167.Add(string_literal276);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 377:9: -> T_NOTLESS
				{
					DebugLocation(377, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTLESS, "T_NOTLESS"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:378:4: '>'
				{
				DebugLocation(378, 4);
				char_literal277=(IToken)Match(input,185,Follow._185_in_op_42325); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_185.Add(char_literal277);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 378:8: -> T_GREATER
				{
					DebugLocation(378, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_GREATER, "T_GREATER"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:379:4: '<'
				{
				DebugLocation(379, 4);
				char_literal278=(IToken)Match(input,181,Follow._181_in_op_42335); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_181.Add(char_literal278);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 379:8: -> T_LESS
				{
					DebugLocation(379, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_LESS, "T_LESS"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:380:4: LIKE
				{
				DebugLocation(380, 4);
				LIKE279=(IToken)Match(input,LIKE,Follow._LIKE_in_op_42344); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LIKE.Add(LIKE279);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 380:9: -> T_LIKE
				{
					DebugLocation(380, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_LIKE, "T_LIKE"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:381:4: NOT WS LIKE
				{
				DebugLocation(381, 4);
				NOT280=(IToken)Match(input,NOT,Follow._NOT_in_op_42353); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_NOT.Add(NOT280);

				DebugLocation(381, 8);
				WS281=(IToken)Match(input,WS,Follow._WS_in_op_42355); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS281);

				DebugLocation(381, 11);
				LIKE282=(IToken)Match(input,LIKE,Follow._LIKE_in_op_42357); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_LIKE.Add(LIKE282);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 381:16: -> T_NOTLIKE
				{
					DebugLocation(381, 19);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTLIKE, "T_NOTLIKE"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:382:4: MATCH
				{
				DebugLocation(382, 4);
				MATCH283=(IToken)Match(input,MATCH,Follow._MATCH_in_op_42366); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_MATCH.Add(MATCH283);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 382:10: -> T_MATCH
				{
					DebugLocation(382, 13);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MATCH, "T_MATCH"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:383:4: NOT WS MATCH
				{
				DebugLocation(383, 4);
				NOT284=(IToken)Match(input,NOT,Follow._NOT_in_op_42375); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_NOT.Add(NOT284);

				DebugLocation(383, 8);
				WS285=(IToken)Match(input,WS,Follow._WS_in_op_42377); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS285);

				DebugLocation(383, 11);
				MATCH286=(IToken)Match(input,MATCH,Follow._MATCH_in_op_42379); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_MATCH.Add(MATCH286);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 383:17: -> T_NOTMATCH
				{
					DebugLocation(383, 20);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTMATCH, "T_NOTMATCH"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_4", 49);
			LeaveRule("op_4", 49);
			LeaveRule_op_4();
	    }
	 	DebugLocation(384, 1);
		} finally { DebugExitRule(GrammarFileName, "op_4"); }
		return retval;

	}
	// $ANTLR end "op_4"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_3() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_3() {}

	// $ANTLR start "expression_3"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:386:1: expression_3 : (a= expression_2 -> $a) ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )* ;
	[GrammarRule("expression_3")]
	private AstParserRuleReturnScope<object, IToken> expression_3()
	{
		EnterRule_expression_3();
		EnterRule("expression_3", 50);
		TraceIn("expression_3", 50);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS287 = default(IToken);
	    IToken WS289 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_3288 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS287_tree = default(object);
	    object WS289_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_op_3=new RewriteRuleSubtreeStream(adaptor,"rule op_3");
	    RewriteRuleSubtreeStream stream_expression_2=new RewriteRuleSubtreeStream(adaptor,"rule expression_2");
		try { DebugEnterRule(GrammarFileName, "expression_3");
		DebugLocation(386, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:387:2: ( (a= expression_2 -> $a) ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:387:4: (a= expression_2 -> $a) ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )*
			{
			DebugLocation(387, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:387:4: (a= expression_2 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:387:5: a= expression_2
			{
			DebugLocation(387, 6);
			PushFollow(Follow._expression_2_in_expression_32398);
			a=expression_2();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression_2.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 387:19: -> $a
			{
				DebugLocation(387, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(387, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:387:25: ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )*
			try { DebugEnterSubRule(93);
			while (true)
			{
				int alt93=2;
				try { DebugEnterDecision(93, decisionCanBacktrack[93]);
				int LA93_0 = input.LA(1);

				if ((LA93_0==WS))
				{
					int LA93_1 = input.LA(2);

					if ((LA93_1==171||LA93_1==175||LA93_1==177||(LA93_1>=189 && LA93_1<=190)))
					{
						alt93 = 1;
					}


				}
				else if ((LA93_0==171||LA93_0==175||LA93_0==177||(LA93_0>=189 && LA93_0<=190)))
				{
					alt93 = 1;
				}


				} finally { DebugExitDecision(93); }
				switch ( alt93 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:387:26: ( WS )? op_3 ( WS )? b= expression_2
					{
					DebugLocation(387, 26);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:387:26: ( WS )?
					int alt91=2;
					try { DebugEnterSubRule(91);
					try { DebugEnterDecision(91, decisionCanBacktrack[91]);
					int LA91_0 = input.LA(1);

					if ((LA91_0==WS))
					{
						alt91 = 1;
					}
					} finally { DebugExitDecision(91); }
					switch (alt91)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:387:26: WS
						{
						DebugLocation(387, 26);
						WS287=(IToken)Match(input,WS,Follow._WS_in_expression_32405); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS287);


						}
						break;

					}
					} finally { DebugExitSubRule(91); }

					DebugLocation(387, 30);
					PushFollow(Follow._op_3_in_expression_32408);
					op_3288=op_3();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_op_3.Add(op_3288.Tree);
					DebugLocation(387, 35);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:387:35: ( WS )?
					int alt92=2;
					try { DebugEnterSubRule(92);
					try { DebugEnterDecision(92, decisionCanBacktrack[92]);
					int LA92_0 = input.LA(1);

					if ((LA92_0==WS))
					{
						alt92 = 1;
					}
					} finally { DebugExitDecision(92); }
					switch (alt92)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:387:35: WS
						{
						DebugLocation(387, 35);
						WS289=(IToken)Match(input,WS,Follow._WS_in_expression_32410); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS289);


						}
						break;

					}
					} finally { DebugExitSubRule(92); }

					DebugLocation(387, 40);
					PushFollow(Follow._expression_2_in_expression_32415);
					b=expression_2();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expression_2.Add(b.Tree);


					{
					// AST REWRITE
					// elements: expression_3, op_3, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 387:54: -> ^( T_OP_BINARY op_3 $expression_3 $b)
					{
						DebugLocation(387, 57);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:387:57: ^( T_OP_BINARY op_3 $expression_3 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(387, 59);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(387, 71);
						adaptor.AddChild(root_1, stream_op_3.NextTree());
						DebugLocation(387, 77);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(387, 91);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop93;
				}
			}

			loop93:
				;

			} finally { DebugExitSubRule(93); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_3", 50);
			LeaveRule("expression_3", 50);
			LeaveRule_expression_3();
	    }
	 	DebugLocation(388, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_3"); }
		return retval;

	}
	// $ANTLR end "expression_3"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_3() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_3() {}

	// $ANTLR start "op_3"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:390:1: op_3 : ( '+' -> T_PLUS | '-' -> T_MINUS | '&' -> T_BITWISE_AND | '|' -> T_BITWISE_OR | '^' -> T_BITWISE_XOR );
	[GrammarRule("op_3")]
	private AstParserRuleReturnScope<object, IToken> op_3()
	{
		EnterRule_op_3();
		EnterRule("op_3", 51);
		TraceIn("op_3", 51);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal290 = default(IToken);
	    IToken char_literal291 = default(IToken);
	    IToken char_literal292 = default(IToken);
	    IToken char_literal293 = default(IToken);
	    IToken char_literal294 = default(IToken);

	    object char_literal290_tree = default(object);
	    object char_literal291_tree = default(object);
	    object char_literal292_tree = default(object);
	    object char_literal293_tree = default(object);
	    object char_literal294_tree = default(object);
	    RewriteRuleITokenStream stream_171=new RewriteRuleITokenStream(adaptor,"token 171");
	    RewriteRuleITokenStream stream_175=new RewriteRuleITokenStream(adaptor,"token 175");
	    RewriteRuleITokenStream stream_177=new RewriteRuleITokenStream(adaptor,"token 177");
	    RewriteRuleITokenStream stream_189=new RewriteRuleITokenStream(adaptor,"token 189");
	    RewriteRuleITokenStream stream_190=new RewriteRuleITokenStream(adaptor,"token 190");

		try { DebugEnterRule(GrammarFileName, "op_3");
		DebugLocation(390, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:390:6: ( '+' -> T_PLUS | '-' -> T_MINUS | '&' -> T_BITWISE_AND | '|' -> T_BITWISE_OR | '^' -> T_BITWISE_XOR )
			int alt94=5;
			try { DebugEnterDecision(94, decisionCanBacktrack[94]);
			switch (input.LA(1))
			{
			case 175:
				{
				alt94 = 1;
				}
				break;
			case 177:
				{
				alt94 = 2;
				}
				break;
			case 171:
				{
				alt94 = 3;
				}
				break;
			case 190:
				{
				alt94 = 4;
				}
				break;
			case 189:
				{
				alt94 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 94, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(94); }
			switch (alt94)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:390:8: '+'
				{
				DebugLocation(390, 8);
				char_literal290=(IToken)Match(input,175,Follow._175_in_op_32441); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_175.Add(char_literal290);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 390:12: -> T_PLUS
				{
					DebugLocation(390, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_PLUS, "T_PLUS"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:391:4: '-'
				{
				DebugLocation(391, 4);
				char_literal291=(IToken)Match(input,177,Follow._177_in_op_32450); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_177.Add(char_literal291);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 391:8: -> T_MINUS
				{
					DebugLocation(391, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MINUS, "T_MINUS"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:392:4: '&'
				{
				DebugLocation(392, 4);
				char_literal292=(IToken)Match(input,171,Follow._171_in_op_32459); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_171.Add(char_literal292);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 392:8: -> T_BITWISE_AND
				{
					DebugLocation(392, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_AND, "T_BITWISE_AND"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:393:4: '|'
				{
				DebugLocation(393, 4);
				char_literal293=(IToken)Match(input,190,Follow._190_in_op_32468); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_190.Add(char_literal293);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 393:8: -> T_BITWISE_OR
				{
					DebugLocation(393, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_OR, "T_BITWISE_OR"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:394:4: '^'
				{
				DebugLocation(394, 4);
				char_literal294=(IToken)Match(input,189,Follow._189_in_op_32477); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_189.Add(char_literal294);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 394:8: -> T_BITWISE_XOR
				{
					DebugLocation(394, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_XOR, "T_BITWISE_XOR"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_3", 51);
			LeaveRule("op_3", 51);
			LeaveRule_op_3();
	    }
	 	DebugLocation(395, 1);
		} finally { DebugExitRule(GrammarFileName, "op_3"); }
		return retval;

	}
	// $ANTLR end "op_3"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_2() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_2() {}

	// $ANTLR start "expression_2"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:397:1: expression_2 : (a= expression_1 -> $a) ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )* ;
	[GrammarRule("expression_2")]
	private AstParserRuleReturnScope<object, IToken> expression_2()
	{
		EnterRule_expression_2();
		EnterRule("expression_2", 52);
		TraceIn("expression_2", 52);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS295 = default(IToken);
	    IToken WS297 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_2296 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS295_tree = default(object);
	    object WS297_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_op_2=new RewriteRuleSubtreeStream(adaptor,"rule op_2");
	    RewriteRuleSubtreeStream stream_expression_1=new RewriteRuleSubtreeStream(adaptor,"rule expression_1");
		try { DebugEnterRule(GrammarFileName, "expression_2");
		DebugLocation(397, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:398:2: ( (a= expression_1 -> $a) ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:398:4: (a= expression_1 -> $a) ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )*
			{
			DebugLocation(398, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:398:4: (a= expression_1 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:398:5: a= expression_1
			{
			DebugLocation(398, 6);
			PushFollow(Follow._expression_1_in_expression_22497);
			a=expression_1();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression_1.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 398:19: -> $a
			{
				DebugLocation(398, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(398, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:398:25: ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )*
			try { DebugEnterSubRule(97);
			while (true)
			{
				int alt97=2;
				try { DebugEnterDecision(97, decisionCanBacktrack[97]);
				int LA97_0 = input.LA(1);

				if ((LA97_0==WS))
				{
					int LA97_1 = input.LA(2);

					if ((LA97_1==170||LA97_1==174||LA97_1==179))
					{
						alt97 = 1;
					}


				}
				else if ((LA97_0==170||LA97_0==174||LA97_0==179))
				{
					alt97 = 1;
				}


				} finally { DebugExitDecision(97); }
				switch ( alt97 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:398:26: ( WS )? op_2 ( WS )? b= expression_1
					{
					DebugLocation(398, 26);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:398:26: ( WS )?
					int alt95=2;
					try { DebugEnterSubRule(95);
					try { DebugEnterDecision(95, decisionCanBacktrack[95]);
					int LA95_0 = input.LA(1);

					if ((LA95_0==WS))
					{
						alt95 = 1;
					}
					} finally { DebugExitDecision(95); }
					switch (alt95)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:398:26: WS
						{
						DebugLocation(398, 26);
						WS295=(IToken)Match(input,WS,Follow._WS_in_expression_22504); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS295);


						}
						break;

					}
					} finally { DebugExitSubRule(95); }

					DebugLocation(398, 30);
					PushFollow(Follow._op_2_in_expression_22507);
					op_2296=op_2();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_op_2.Add(op_2296.Tree);
					DebugLocation(398, 35);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:398:35: ( WS )?
					int alt96=2;
					try { DebugEnterSubRule(96);
					try { DebugEnterDecision(96, decisionCanBacktrack[96]);
					int LA96_0 = input.LA(1);

					if ((LA96_0==WS))
					{
						alt96 = 1;
					}
					} finally { DebugExitDecision(96); }
					switch (alt96)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:398:35: WS
						{
						DebugLocation(398, 35);
						WS297=(IToken)Match(input,WS,Follow._WS_in_expression_22509); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS297);


						}
						break;

					}
					} finally { DebugExitSubRule(96); }

					DebugLocation(398, 40);
					PushFollow(Follow._expression_1_in_expression_22514);
					b=expression_1();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expression_1.Add(b.Tree);


					{
					// AST REWRITE
					// elements: op_2, expression_2, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 398:54: -> ^( T_OP_BINARY op_2 $expression_2 $b)
					{
						DebugLocation(398, 57);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:398:57: ^( T_OP_BINARY op_2 $expression_2 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(398, 59);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(398, 71);
						adaptor.AddChild(root_1, stream_op_2.NextTree());
						DebugLocation(398, 77);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(398, 91);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop97;
				}
			}

			loop97:
				;

			} finally { DebugExitSubRule(97); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_2", 52);
			LeaveRule("expression_2", 52);
			LeaveRule_expression_2();
	    }
	 	DebugLocation(399, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_2"); }
		return retval;

	}
	// $ANTLR end "expression_2"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_2() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_2() {}

	// $ANTLR start "op_2"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:401:1: op_2 : ( '*' -> T_PRODUCT | '/' -> T_DIVIDE | '%' -> T_MODULO );
	[GrammarRule("op_2")]
	private AstParserRuleReturnScope<object, IToken> op_2()
	{
		EnterRule_op_2();
		EnterRule("op_2", 53);
		TraceIn("op_2", 53);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal298 = default(IToken);
	    IToken char_literal299 = default(IToken);
	    IToken char_literal300 = default(IToken);

	    object char_literal298_tree = default(object);
	    object char_literal299_tree = default(object);
	    object char_literal300_tree = default(object);
	    RewriteRuleITokenStream stream_170=new RewriteRuleITokenStream(adaptor,"token 170");
	    RewriteRuleITokenStream stream_174=new RewriteRuleITokenStream(adaptor,"token 174");
	    RewriteRuleITokenStream stream_179=new RewriteRuleITokenStream(adaptor,"token 179");

		try { DebugEnterRule(GrammarFileName, "op_2");
		DebugLocation(401, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:401:6: ( '*' -> T_PRODUCT | '/' -> T_DIVIDE | '%' -> T_MODULO )
			int alt98=3;
			try { DebugEnterDecision(98, decisionCanBacktrack[98]);
			switch (input.LA(1))
			{
			case 174:
				{
				alt98 = 1;
				}
				break;
			case 179:
				{
				alt98 = 2;
				}
				break;
			case 170:
				{
				alt98 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 98, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(98); }
			switch (alt98)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:401:8: '*'
				{
				DebugLocation(401, 8);
				char_literal298=(IToken)Match(input,174,Follow._174_in_op_22540); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_174.Add(char_literal298);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 401:12: -> T_PRODUCT
				{
					DebugLocation(401, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_PRODUCT, "T_PRODUCT"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:402:4: '/'
				{
				DebugLocation(402, 4);
				char_literal299=(IToken)Match(input,179,Follow._179_in_op_22549); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_179.Add(char_literal299);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 402:8: -> T_DIVIDE
				{
					DebugLocation(402, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_DIVIDE, "T_DIVIDE"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:403:4: '%'
				{
				DebugLocation(403, 4);
				char_literal300=(IToken)Match(input,170,Follow._170_in_op_22558); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_170.Add(char_literal300);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 403:8: -> T_MODULO
				{
					DebugLocation(403, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MODULO, "T_MODULO"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_2", 53);
			LeaveRule("op_2", 53);
			LeaveRule_op_2();
	    }
	 	DebugLocation(404, 1);
		} finally { DebugExitRule(GrammarFileName, "op_2"); }
		return retval;

	}
	// $ANTLR end "op_2"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_1() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_1() {}

	// $ANTLR start "expression_1"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:406:1: expression_1 : ( op_1 ( WS )? expression_1 -> ^( T_OP_UNARY op_1 expression_1 ) | expression_atom );
	[GrammarRule("expression_1")]
	private AstParserRuleReturnScope<object, IToken> expression_1()
	{
		EnterRule_expression_1();
		EnterRule("expression_1", 54);
		TraceIn("expression_1", 54);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS302 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> op_1301 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_1303 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_atom304 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS302_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression_1=new RewriteRuleSubtreeStream(adaptor,"rule expression_1");
	    RewriteRuleSubtreeStream stream_op_1=new RewriteRuleSubtreeStream(adaptor,"rule op_1");
		try { DebugEnterRule(GrammarFileName, "expression_1");
		DebugLocation(406, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:407:2: ( op_1 ( WS )? expression_1 -> ^( T_OP_UNARY op_1 expression_1 ) | expression_atom )
			int alt100=2;
			try { DebugEnterDecision(100, decisionCanBacktrack[100]);
			int LA100_0 = input.LA(1);

			if ((LA100_0==175||LA100_0==177||LA100_0==191))
			{
				alt100 = 1;
			}
			else if (((LA100_0>=CASE && LA100_0<=CAST)||(LA100_0>=CONVERT && LA100_0<=COUNT)||(LA100_0>=DATEADD && LA100_0<=DATEPART)||LA100_0==EXISTS||LA100_0==NUMBER||LA100_0==SIMPLE_FILE||(LA100_0>=STRING && LA100_0<=SYSTEMVAR)||LA100_0==TOKEN||LA100_0==VARIABLE||LA100_0==172))
			{
				alt100 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 100, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(100); }
			switch (alt100)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:407:4: op_1 ( WS )? expression_1
				{
				DebugLocation(407, 4);
				PushFollow(Follow._op_1_in_expression_12574);
				op_1301=op_1();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_op_1.Add(op_1301.Tree);
				DebugLocation(407, 9);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:407:9: ( WS )?
				int alt99=2;
				try { DebugEnterSubRule(99);
				try { DebugEnterDecision(99, decisionCanBacktrack[99]);
				int LA99_0 = input.LA(1);

				if ((LA99_0==WS))
				{
					alt99 = 1;
				}
				} finally { DebugExitDecision(99); }
				switch (alt99)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:407:9: WS
					{
					DebugLocation(407, 9);
					WS302=(IToken)Match(input,WS,Follow._WS_in_expression_12576); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS302);


					}
					break;

				}
				} finally { DebugExitSubRule(99); }

				DebugLocation(407, 13);
				PushFollow(Follow._expression_1_in_expression_12579);
				expression_1303=expression_1();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression_1.Add(expression_1303.Tree);


				{
				// AST REWRITE
				// elements: op_1, expression_1
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 407:26: -> ^( T_OP_UNARY op_1 expression_1 )
				{
					DebugLocation(407, 29);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:407:29: ^( T_OP_UNARY op_1 expression_1 )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(407, 31);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_UNARY, "T_OP_UNARY"), root_1);

					DebugLocation(407, 42);
					adaptor.AddChild(root_1, stream_op_1.NextTree());
					DebugLocation(407, 47);
					adaptor.AddChild(root_1, stream_expression_1.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:408:4: expression_atom
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(408, 4);
				PushFollow(Follow._expression_atom_in_expression_12594);
				expression_atom304=expression_atom();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression_atom304.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_1", 54);
			LeaveRule("expression_1", 54);
			LeaveRule_expression_1();
	    }
	 	DebugLocation(409, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_1"); }
		return retval;

	}
	// $ANTLR end "expression_1"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_1() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_1() {}

	// $ANTLR start "op_1"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:411:1: op_1 : ( '~' -> T_BITWISE_NOT | '+' -> T_PLUS | '-' -> T_MINUS );
	[GrammarRule("op_1")]
	private AstParserRuleReturnScope<object, IToken> op_1()
	{
		EnterRule_op_1();
		EnterRule("op_1", 55);
		TraceIn("op_1", 55);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal305 = default(IToken);
	    IToken char_literal306 = default(IToken);
	    IToken char_literal307 = default(IToken);

	    object char_literal305_tree = default(object);
	    object char_literal306_tree = default(object);
	    object char_literal307_tree = default(object);
	    RewriteRuleITokenStream stream_175=new RewriteRuleITokenStream(adaptor,"token 175");
	    RewriteRuleITokenStream stream_177=new RewriteRuleITokenStream(adaptor,"token 177");
	    RewriteRuleITokenStream stream_191=new RewriteRuleITokenStream(adaptor,"token 191");

		try { DebugEnterRule(GrammarFileName, "op_1");
		DebugLocation(411, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:411:6: ( '~' -> T_BITWISE_NOT | '+' -> T_PLUS | '-' -> T_MINUS )
			int alt101=3;
			try { DebugEnterDecision(101, decisionCanBacktrack[101]);
			switch (input.LA(1))
			{
			case 191:
				{
				alt101 = 1;
				}
				break;
			case 175:
				{
				alt101 = 2;
				}
				break;
			case 177:
				{
				alt101 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(101); }
			switch (alt101)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:411:8: '~'
				{
				DebugLocation(411, 8);
				char_literal305=(IToken)Match(input,191,Follow._191_in_op_12604); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_191.Add(char_literal305);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 411:12: -> T_BITWISE_NOT
				{
					DebugLocation(411, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_NOT, "T_BITWISE_NOT"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:412:5: '+'
				{
				DebugLocation(412, 5);
				char_literal306=(IToken)Match(input,175,Follow._175_in_op_12614); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_175.Add(char_literal306);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 412:9: -> T_PLUS
				{
					DebugLocation(412, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_PLUS, "T_PLUS"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:413:4: '-'
				{
				DebugLocation(413, 4);
				char_literal307=(IToken)Match(input,177,Follow._177_in_op_12623); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_177.Add(char_literal307);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 413:8: -> T_MINUS
				{
					DebugLocation(413, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MINUS, "T_MINUS"));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_1", 55);
			LeaveRule("op_1", 55);
			LeaveRule_op_1();
	    }
	 	DebugLocation(414, 1);
		} finally { DebugExitRule(GrammarFileName, "op_1"); }
		return retval;

	}
	// $ANTLR end "op_1"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_atom() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_atom() {}

	// $ANTLR start "expression_atom"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:416:1: expression_atom : ( number -> ^( T_NUMBER number ) | string | SYSTEMVAR -> ^( T_SYSTEMVAR SYSTEMVAR ) | variable | ( subquery )=> subquery | '(' expression ')' -> expression | functioncall_or_column | specialfunctioncall | case | EXISTS ( WS )? '(' ( WS )? select_command ( WS )? ')' -> ^( T_EXISTS select_command ) );
	[GrammarRule("expression_atom")]
	private AstParserRuleReturnScope<object, IToken> expression_atom()
	{
		EnterRule_expression_atom();
		EnterRule("expression_atom", 56);
		TraceIn("expression_atom", 56);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken SYSTEMVAR310 = default(IToken);
	    IToken char_literal313 = default(IToken);
	    IToken char_literal315 = default(IToken);
	    IToken EXISTS319 = default(IToken);
	    IToken WS320 = default(IToken);
	    IToken char_literal321 = default(IToken);
	    IToken WS322 = default(IToken);
	    IToken WS324 = default(IToken);
	    IToken char_literal325 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> number308 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> string309 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> variable311 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> subquery312 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression314 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> functioncall_or_column316 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> specialfunctioncall317 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> case318 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> select_command323 = default(AstParserRuleReturnScope<object, IToken>);

	    object SYSTEMVAR310_tree = default(object);
	    object char_literal313_tree = default(object);
	    object char_literal315_tree = default(object);
	    object EXISTS319_tree = default(object);
	    object WS320_tree = default(object);
	    object char_literal321_tree = default(object);
	    object WS322_tree = default(object);
	    object WS324_tree = default(object);
	    object char_literal325_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_EXISTS=new RewriteRuleITokenStream(adaptor,"token EXISTS");
	    RewriteRuleITokenStream stream_172=new RewriteRuleITokenStream(adaptor,"token 172");
	    RewriteRuleITokenStream stream_173=new RewriteRuleITokenStream(adaptor,"token 173");
	    RewriteRuleITokenStream stream_SYSTEMVAR=new RewriteRuleITokenStream(adaptor,"token SYSTEMVAR");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_select_command=new RewriteRuleSubtreeStream(adaptor,"rule select_command");
	    RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
		try { DebugEnterRule(GrammarFileName, "expression_atom");
		DebugLocation(416, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:417:2: ( number -> ^( T_NUMBER number ) | string | SYSTEMVAR -> ^( T_SYSTEMVAR SYSTEMVAR ) | variable | ( subquery )=> subquery | '(' expression ')' -> expression | functioncall_or_column | specialfunctioncall | case | EXISTS ( WS )? '(' ( WS )? select_command ( WS )? ')' -> ^( T_EXISTS select_command ) )
			int alt105=10;
			try { DebugEnterDecision(105, decisionCanBacktrack[105]);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt105 = 1;
				}
				break;
			case STRING:
				{
				alt105 = 2;
				}
				break;
			case SYSTEMVAR:
				{
				alt105 = 3;
				}
				break;
			case VARIABLE:
				{
				alt105 = 4;
				}
				break;
			case 172:
				{
				int LA105_5 = input.LA(2);

				if ((EvaluatePredicate(synpred3_gql_fragment)))
				{
					alt105 = 5;
				}
				else if ((true))
				{
					alt105 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 105, 5, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case COUNT:
			case SIMPLE_FILE:
			case TOKEN:
				{
				alt105 = 7;
				}
				break;
			case CAST:
			case CONVERT:
			case DATEADD:
			case DATEDIFF:
			case DATEPART:
				{
				alt105 = 8;
				}
				break;
			case CASE:
				{
				alt105 = 9;
				}
				break;
			case EXISTS:
				{
				alt105 = 10;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 105, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(105); }
			switch (alt105)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:417:4: number
				{
				DebugLocation(417, 4);
				PushFollow(Follow._number_in_expression_atom2638);
				number308=number();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_number.Add(number308.Tree);


				{
				// AST REWRITE
				// elements: number
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 417:11: -> ^( T_NUMBER number )
				{
					DebugLocation(417, 14);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:417:14: ^( T_NUMBER number )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(417, 16);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_NUMBER, "T_NUMBER"), root_1);

					DebugLocation(417, 25);
					adaptor.AddChild(root_1, stream_number.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:418:4: string
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(418, 4);
				PushFollow(Follow._string_in_expression_atom2651);
				string309=@string();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, string309.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:419:4: SYSTEMVAR
				{
				DebugLocation(419, 4);
				SYSTEMVAR310=(IToken)Match(input,SYSTEMVAR,Follow._SYSTEMVAR_in_expression_atom2656); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SYSTEMVAR.Add(SYSTEMVAR310);



				{
				// AST REWRITE
				// elements: SYSTEMVAR
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 419:14: -> ^( T_SYSTEMVAR SYSTEMVAR )
				{
					DebugLocation(419, 17);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:419:17: ^( T_SYSTEMVAR SYSTEMVAR )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(419, 19);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SYSTEMVAR, "T_SYSTEMVAR"), root_1);

					DebugLocation(419, 31);
					adaptor.AddChild(root_1, stream_SYSTEMVAR.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:420:4: variable
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(420, 4);
				PushFollow(Follow._variable_in_expression_atom2669);
				variable311=variable();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variable311.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:421:4: ( subquery )=> subquery
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(421, 18);
				PushFollow(Follow._subquery_in_expression_atom2680);
				subquery312=subquery();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, subquery312.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:422:4: '(' expression ')'
				{
				DebugLocation(422, 4);
				char_literal313=(IToken)Match(input,172,Follow._172_in_expression_atom2685); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_172.Add(char_literal313);

				DebugLocation(422, 8);
				PushFollow(Follow._expression_in_expression_atom2687);
				expression314=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression314.Tree);
				DebugLocation(422, 19);
				char_literal315=(IToken)Match(input,173,Follow._173_in_expression_atom2689); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_173.Add(char_literal315);



				{
				// AST REWRITE
				// elements: expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 422:23: -> expression
				{
					DebugLocation(422, 26);
					adaptor.AddChild(root_0, stream_expression.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:423:4: functioncall_or_column
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(423, 4);
				PushFollow(Follow._functioncall_or_column_in_expression_atom2698);
				functioncall_or_column316=functioncall_or_column();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, functioncall_or_column316.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:424:4: specialfunctioncall
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(424, 4);
				PushFollow(Follow._specialfunctioncall_in_expression_atom2703);
				specialfunctioncall317=specialfunctioncall();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, specialfunctioncall317.Tree);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:425:4: case
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(425, 4);
				PushFollow(Follow._case_in_expression_atom2708);
				case318=@case();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, case318.Tree);

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:426:4: EXISTS ( WS )? '(' ( WS )? select_command ( WS )? ')'
				{
				DebugLocation(426, 4);
				EXISTS319=(IToken)Match(input,EXISTS,Follow._EXISTS_in_expression_atom2713); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_EXISTS.Add(EXISTS319);

				DebugLocation(426, 11);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:426:11: ( WS )?
				int alt102=2;
				try { DebugEnterSubRule(102);
				try { DebugEnterDecision(102, decisionCanBacktrack[102]);
				int LA102_0 = input.LA(1);

				if ((LA102_0==WS))
				{
					alt102 = 1;
				}
				} finally { DebugExitDecision(102); }
				switch (alt102)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:426:11: WS
					{
					DebugLocation(426, 11);
					WS320=(IToken)Match(input,WS,Follow._WS_in_expression_atom2715); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS320);


					}
					break;

				}
				} finally { DebugExitSubRule(102); }

				DebugLocation(426, 15);
				char_literal321=(IToken)Match(input,172,Follow._172_in_expression_atom2718); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_172.Add(char_literal321);

				DebugLocation(426, 19);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:426:19: ( WS )?
				int alt103=2;
				try { DebugEnterSubRule(103);
				try { DebugEnterDecision(103, decisionCanBacktrack[103]);
				int LA103_0 = input.LA(1);

				if ((LA103_0==WS))
				{
					alt103 = 1;
				}
				} finally { DebugExitDecision(103); }
				switch (alt103)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:426:19: WS
					{
					DebugLocation(426, 19);
					WS322=(IToken)Match(input,WS,Follow._WS_in_expression_atom2720); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS322);


					}
					break;

				}
				} finally { DebugExitSubRule(103); }

				DebugLocation(426, 23);
				PushFollow(Follow._select_command_in_expression_atom2723);
				select_command323=select_command();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_select_command.Add(select_command323.Tree);
				DebugLocation(426, 38);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:426:38: ( WS )?
				int alt104=2;
				try { DebugEnterSubRule(104);
				try { DebugEnterDecision(104, decisionCanBacktrack[104]);
				int LA104_0 = input.LA(1);

				if ((LA104_0==WS))
				{
					alt104 = 1;
				}
				} finally { DebugExitDecision(104); }
				switch (alt104)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:426:38: WS
					{
					DebugLocation(426, 38);
					WS324=(IToken)Match(input,WS,Follow._WS_in_expression_atom2725); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS324);


					}
					break;

				}
				} finally { DebugExitSubRule(104); }

				DebugLocation(426, 42);
				char_literal325=(IToken)Match(input,173,Follow._173_in_expression_atom2728); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_173.Add(char_literal325);



				{
				// AST REWRITE
				// elements: select_command
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 426:46: -> ^( T_EXISTS select_command )
				{
					DebugLocation(426, 49);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:426:49: ^( T_EXISTS select_command )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(426, 51);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_EXISTS, "T_EXISTS"), root_1);

					DebugLocation(426, 60);
					adaptor.AddChild(root_1, stream_select_command.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_atom", 56);
			LeaveRule("expression_atom", 56);
			LeaveRule_expression_atom();
	    }
	 	DebugLocation(427, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_atom"); }
		return retval;

	}
	// $ANTLR end "expression_atom"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_functioncall_or_column() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_functioncall_or_column() {}

	// $ANTLR start "functioncall_or_column"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:430:1: functioncall_or_column : ( TOKEN ( WS )? '(' ( WS )? ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )? ')' -> ^( T_FUNCTIONCALL TOKEN ( expression )* ) | COUNT ( WS )? '(' ( WS )? expression ( WS )? ')' -> ^( T_FUNCTIONCALL T_COUNT expression ) | COUNT ( WS )? '(' ( WS )? DISTINCT WS expression ( WS )? ')' -> ^( T_FUNCTIONCALL T_DISTINCTCOUNT expression ) | COUNT ( WS )? '(' ( WS )? all_columns ( WS )? ')' -> ^( T_FUNCTIONCALL T_COUNT all_columns ) | COUNT ( WS )? '(' ( WS )? DISTINCT WS all_columns ( WS )? ')' -> ^( T_FUNCTIONCALL T_DISTINCTCOUNT all_columns ) | ( table_alias ( WS )? '.' ( WS )? )? column_name -> ^( T_COLUMN column_name ( table_alias )? ) );
	[GrammarRule("functioncall_or_column")]
	private AstParserRuleReturnScope<object, IToken> functioncall_or_column()
	{
		EnterRule_functioncall_or_column();
		EnterRule("functioncall_or_column", 57);
		TraceIn("functioncall_or_column", 57);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN326 = default(IToken);
	    IToken WS327 = default(IToken);
	    IToken char_literal328 = default(IToken);
	    IToken WS329 = default(IToken);
	    IToken WS331 = default(IToken);
	    IToken char_literal332 = default(IToken);
	    IToken WS333 = default(IToken);
	    IToken WS335 = default(IToken);
	    IToken char_literal336 = default(IToken);
	    IToken COUNT337 = default(IToken);
	    IToken WS338 = default(IToken);
	    IToken char_literal339 = default(IToken);
	    IToken WS340 = default(IToken);
	    IToken WS342 = default(IToken);
	    IToken char_literal343 = default(IToken);
	    IToken COUNT344 = default(IToken);
	    IToken WS345 = default(IToken);
	    IToken char_literal346 = default(IToken);
	    IToken WS347 = default(IToken);
	    IToken DISTINCT348 = default(IToken);
	    IToken WS349 = default(IToken);
	    IToken WS351 = default(IToken);
	    IToken char_literal352 = default(IToken);
	    IToken COUNT353 = default(IToken);
	    IToken WS354 = default(IToken);
	    IToken char_literal355 = default(IToken);
	    IToken WS356 = default(IToken);
	    IToken WS358 = default(IToken);
	    IToken char_literal359 = default(IToken);
	    IToken COUNT360 = default(IToken);
	    IToken WS361 = default(IToken);
	    IToken char_literal362 = default(IToken);
	    IToken WS363 = default(IToken);
	    IToken DISTINCT364 = default(IToken);
	    IToken WS365 = default(IToken);
	    IToken WS367 = default(IToken);
	    IToken char_literal368 = default(IToken);
	    IToken WS370 = default(IToken);
	    IToken char_literal371 = default(IToken);
	    IToken WS372 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression330 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression334 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression341 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression350 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> all_columns357 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> all_columns366 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> table_alias369 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> column_name373 = default(AstParserRuleReturnScope<object, IToken>);

	    object TOKEN326_tree = default(object);
	    object WS327_tree = default(object);
	    object char_literal328_tree = default(object);
	    object WS329_tree = default(object);
	    object WS331_tree = default(object);
	    object char_literal332_tree = default(object);
	    object WS333_tree = default(object);
	    object WS335_tree = default(object);
	    object char_literal336_tree = default(object);
	    object COUNT337_tree = default(object);
	    object WS338_tree = default(object);
	    object char_literal339_tree = default(object);
	    object WS340_tree = default(object);
	    object WS342_tree = default(object);
	    object char_literal343_tree = default(object);
	    object COUNT344_tree = default(object);
	    object WS345_tree = default(object);
	    object char_literal346_tree = default(object);
	    object WS347_tree = default(object);
	    object DISTINCT348_tree = default(object);
	    object WS349_tree = default(object);
	    object WS351_tree = default(object);
	    object char_literal352_tree = default(object);
	    object COUNT353_tree = default(object);
	    object WS354_tree = default(object);
	    object char_literal355_tree = default(object);
	    object WS356_tree = default(object);
	    object WS358_tree = default(object);
	    object char_literal359_tree = default(object);
	    object COUNT360_tree = default(object);
	    object WS361_tree = default(object);
	    object char_literal362_tree = default(object);
	    object WS363_tree = default(object);
	    object DISTINCT364_tree = default(object);
	    object WS365_tree = default(object);
	    object WS367_tree = default(object);
	    object char_literal368_tree = default(object);
	    object WS370_tree = default(object);
	    object char_literal371_tree = default(object);
	    object WS372_tree = default(object);
	    RewriteRuleITokenStream stream_COUNT=new RewriteRuleITokenStream(adaptor,"token COUNT");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_172=new RewriteRuleITokenStream(adaptor,"token 172");
	    RewriteRuleITokenStream stream_173=new RewriteRuleITokenStream(adaptor,"token 173");
	    RewriteRuleITokenStream stream_178=new RewriteRuleITokenStream(adaptor,"token 178");
	    RewriteRuleITokenStream stream_DISTINCT=new RewriteRuleITokenStream(adaptor,"token DISTINCT");
	    RewriteRuleITokenStream stream_176=new RewriteRuleITokenStream(adaptor,"token 176");
	    RewriteRuleITokenStream stream_TOKEN=new RewriteRuleITokenStream(adaptor,"token TOKEN");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_table_alias=new RewriteRuleSubtreeStream(adaptor,"rule table_alias");
	    RewriteRuleSubtreeStream stream_all_columns=new RewriteRuleSubtreeStream(adaptor,"rule all_columns");
	    RewriteRuleSubtreeStream stream_column_name=new RewriteRuleSubtreeStream(adaptor,"rule column_name");
		try { DebugEnterRule(GrammarFileName, "functioncall_or_column");
		DebugLocation(430, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:431:2: ( TOKEN ( WS )? '(' ( WS )? ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )? ')' -> ^( T_FUNCTIONCALL TOKEN ( expression )* ) | COUNT ( WS )? '(' ( WS )? expression ( WS )? ')' -> ^( T_FUNCTIONCALL T_COUNT expression ) | COUNT ( WS )? '(' ( WS )? DISTINCT WS expression ( WS )? ')' -> ^( T_FUNCTIONCALL T_DISTINCTCOUNT expression ) | COUNT ( WS )? '(' ( WS )? all_columns ( WS )? ')' -> ^( T_FUNCTIONCALL T_COUNT all_columns ) | COUNT ( WS )? '(' ( WS )? DISTINCT WS all_columns ( WS )? ')' -> ^( T_FUNCTIONCALL T_DISTINCTCOUNT all_columns ) | ( table_alias ( WS )? '.' ( WS )? )? column_name -> ^( T_COLUMN column_name ( table_alias )? ) )
			int alt128=6;
			try { DebugEnterDecision(128, decisionCanBacktrack[128]);
			switch (input.LA(1))
			{
			case TOKEN:
				{
				alt128 = 1;
				}
				break;
			case COUNT:
				{
				int LA128_2 = input.LA(2);

				if ((LA128_2==WS))
				{
					int LA128_4 = input.LA(3);

					if ((LA128_4==172))
					{
						switch (input.LA(4))
						{
						case WS:
							{
							switch (input.LA(5))
							{
							case CASE:
							case CAST:
							case CONVERT:
							case COUNT:
							case DATEADD:
							case DATEDIFF:
							case DATEPART:
							case EXISTS:
							case NOT:
							case NUMBER:
							case STRING:
							case SYSTEMVAR:
							case TOKEN:
							case VARIABLE:
							case 172:
							case 175:
							case 177:
							case 191:
								{
								alt128 = 2;
								}
								break;
							case SIMPLE_FILE:
								{
								switch (input.LA(6))
								{
								case WS:
									{
									int LA128_11 = input.LA(7);

									if ((LA128_11==178))
									{
										switch (input.LA(8))
										{
										case WS:
											{
											int LA128_14 = input.LA(9);

											if ((LA128_14==SIMPLE_FILE))
											{
												alt128 = 2;
											}
											else if ((LA128_14==174))
											{
												alt128 = 4;
											}
											else
											{
												if (state.backtracking>0) {state.failed=true; return retval;}
												NoViableAltException nvae = new NoViableAltException("", 128, 14, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
											}
											break;
										case SIMPLE_FILE:
											{
											alt128 = 2;
											}
											break;
										case 174:
											{
											alt128 = 4;
											}
											break;
										default:
											{
												if (state.backtracking>0) {state.failed=true; return retval;}
												NoViableAltException nvae = new NoViableAltException("", 128, 12, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
										}

									}
									else if ((LA128_11==AND||LA128_11==BETWEEN||LA128_11==IN||LA128_11==LIKE||LA128_11==MATCH||LA128_11==NOT||LA128_11==OR||(LA128_11>=167 && LA128_11<=171)||(LA128_11>=173 && LA128_11<=175)||LA128_11==177||LA128_11==179||(LA128_11>=181 && LA128_11<=186)||(LA128_11>=189 && LA128_11<=190)))
									{
										alt128 = 2;
									}
									else
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 128, 11, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
									}
									break;
								case 178:
									{
									switch (input.LA(7))
									{
									case WS:
										{
										int LA128_14 = input.LA(8);

										if ((LA128_14==SIMPLE_FILE))
										{
											alt128 = 2;
										}
										else if ((LA128_14==174))
										{
											alt128 = 4;
										}
										else
										{
											if (state.backtracking>0) {state.failed=true; return retval;}
											NoViableAltException nvae = new NoViableAltException("", 128, 14, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
										}
										break;
									case SIMPLE_FILE:
										{
										alt128 = 2;
										}
										break;
									case 174:
										{
										alt128 = 4;
										}
										break;
									default:
										{
											if (state.backtracking>0) {state.failed=true; return retval;}
											NoViableAltException nvae = new NoViableAltException("", 128, 12, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}

									}
									break;
								case LIKE:
								case MATCH:
								case NOT:
								case 167:
								case 168:
								case 169:
								case 170:
								case 171:
								case 173:
								case 174:
								case 175:
								case 177:
								case 179:
								case 181:
								case 182:
								case 183:
								case 184:
								case 185:
								case 186:
								case 189:
								case 190:
									{
									alt128 = 2;
									}
									break;
								default:
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 128, 8, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

								}
								break;
							case DISTINCT:
								{
								int LA128_9 = input.LA(6);

								if ((LA128_9==WS))
								{
									switch (input.LA(7))
									{
									case CASE:
									case CAST:
									case CONVERT:
									case COUNT:
									case DATEADD:
									case DATEDIFF:
									case DATEPART:
									case EXISTS:
									case NOT:
									case NUMBER:
									case STRING:
									case SYSTEMVAR:
									case TOKEN:
									case VARIABLE:
									case 172:
									case 175:
									case 177:
									case 191:
										{
										alt128 = 3;
										}
										break;
									case SIMPLE_FILE:
										{
										switch (input.LA(8))
										{
										case WS:
											{
											int LA128_18 = input.LA(9);

											if ((LA128_18==178))
											{
												switch (input.LA(10))
												{
												case WS:
													{
													int LA128_20 = input.LA(11);

													if ((LA128_20==SIMPLE_FILE))
													{
														alt128 = 3;
													}
													else if ((LA128_20==174))
													{
														alt128 = 5;
													}
													else
													{
														if (state.backtracking>0) {state.failed=true; return retval;}
														NoViableAltException nvae = new NoViableAltException("", 128, 20, input);
														DebugRecognitionException(nvae);
														throw nvae;
													}
													}
													break;
												case SIMPLE_FILE:
													{
													alt128 = 3;
													}
													break;
												case 174:
													{
													alt128 = 5;
													}
													break;
												default:
													{
														if (state.backtracking>0) {state.failed=true; return retval;}
														NoViableAltException nvae = new NoViableAltException("", 128, 19, input);
														DebugRecognitionException(nvae);
														throw nvae;
													}
												}

											}
											else if ((LA128_18==AND||LA128_18==BETWEEN||LA128_18==IN||LA128_18==LIKE||LA128_18==MATCH||LA128_18==NOT||LA128_18==OR||(LA128_18>=167 && LA128_18<=171)||(LA128_18>=173 && LA128_18<=175)||LA128_18==177||LA128_18==179||(LA128_18>=181 && LA128_18<=186)||(LA128_18>=189 && LA128_18<=190)))
											{
												alt128 = 3;
											}
											else
											{
												if (state.backtracking>0) {state.failed=true; return retval;}
												NoViableAltException nvae = new NoViableAltException("", 128, 18, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
											}
											break;
										case 178:
											{
											switch (input.LA(9))
											{
											case WS:
												{
												int LA128_20 = input.LA(10);

												if ((LA128_20==SIMPLE_FILE))
												{
													alt128 = 3;
												}
												else if ((LA128_20==174))
												{
													alt128 = 5;
												}
												else
												{
													if (state.backtracking>0) {state.failed=true; return retval;}
													NoViableAltException nvae = new NoViableAltException("", 128, 20, input);
													DebugRecognitionException(nvae);
													throw nvae;
												}
												}
												break;
											case SIMPLE_FILE:
												{
												alt128 = 3;
												}
												break;
											case 174:
												{
												alt128 = 5;
												}
												break;
											default:
												{
													if (state.backtracking>0) {state.failed=true; return retval;}
													NoViableAltException nvae = new NoViableAltException("", 128, 19, input);
													DebugRecognitionException(nvae);
													throw nvae;
												}
											}

											}
											break;
										case LIKE:
										case MATCH:
										case NOT:
										case 167:
										case 168:
										case 169:
										case 170:
										case 171:
										case 173:
										case 174:
										case 175:
										case 177:
										case 179:
										case 181:
										case 182:
										case 183:
										case 184:
										case 185:
										case 186:
										case 189:
										case 190:
											{
											alt128 = 3;
											}
											break;
										default:
											{
												if (state.backtracking>0) {state.failed=true; return retval;}
												NoViableAltException nvae = new NoViableAltException("", 128, 16, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
										}

										}
										break;
									case 174:
										{
										alt128 = 5;
										}
										break;
									default:
										{
											if (state.backtracking>0) {state.failed=true; return retval;}
											NoViableAltException nvae = new NoViableAltException("", 128, 13, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}

								}
								else
								{
									if (state.backtracking>0) {state.failed=true; return retval;}
									NoViableAltException nvae = new NoViableAltException("", 128, 9, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
								}
								break;
							case 174:
								{
								alt128 = 4;
								}
								break;
							default:
								{
									if (state.backtracking>0) {state.failed=true; return retval;}
									NoViableAltException nvae = new NoViableAltException("", 128, 6, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}

							}
							break;
						case CASE:
						case CAST:
						case CONVERT:
						case COUNT:
						case DATEADD:
						case DATEDIFF:
						case DATEPART:
						case EXISTS:
						case NOT:
						case NUMBER:
						case STRING:
						case SYSTEMVAR:
						case TOKEN:
						case VARIABLE:
						case 172:
						case 175:
						case 177:
						case 191:
							{
							alt128 = 2;
							}
							break;
						case SIMPLE_FILE:
							{
							switch (input.LA(5))
							{
							case WS:
								{
								int LA128_11 = input.LA(6);

								if ((LA128_11==178))
								{
									switch (input.LA(7))
									{
									case WS:
										{
										int LA128_14 = input.LA(8);

										if ((LA128_14==SIMPLE_FILE))
										{
											alt128 = 2;
										}
										else if ((LA128_14==174))
										{
											alt128 = 4;
										}
										else
										{
											if (state.backtracking>0) {state.failed=true; return retval;}
											NoViableAltException nvae = new NoViableAltException("", 128, 14, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
										}
										break;
									case SIMPLE_FILE:
										{
										alt128 = 2;
										}
										break;
									case 174:
										{
										alt128 = 4;
										}
										break;
									default:
										{
											if (state.backtracking>0) {state.failed=true; return retval;}
											NoViableAltException nvae = new NoViableAltException("", 128, 12, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}

								}
								else if ((LA128_11==AND||LA128_11==BETWEEN||LA128_11==IN||LA128_11==LIKE||LA128_11==MATCH||LA128_11==NOT||LA128_11==OR||(LA128_11>=167 && LA128_11<=171)||(LA128_11>=173 && LA128_11<=175)||LA128_11==177||LA128_11==179||(LA128_11>=181 && LA128_11<=186)||(LA128_11>=189 && LA128_11<=190)))
								{
									alt128 = 2;
								}
								else
								{
									if (state.backtracking>0) {state.failed=true; return retval;}
									NoViableAltException nvae = new NoViableAltException("", 128, 11, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
								}
								break;
							case 178:
								{
								switch (input.LA(6))
								{
								case WS:
									{
									int LA128_14 = input.LA(7);

									if ((LA128_14==SIMPLE_FILE))
									{
										alt128 = 2;
									}
									else if ((LA128_14==174))
									{
										alt128 = 4;
									}
									else
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 128, 14, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
									}
									break;
								case SIMPLE_FILE:
									{
									alt128 = 2;
									}
									break;
								case 174:
									{
									alt128 = 4;
									}
									break;
								default:
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 128, 12, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

								}
								break;
							case LIKE:
							case MATCH:
							case NOT:
							case 167:
							case 168:
							case 169:
							case 170:
							case 171:
							case 173:
							case 174:
							case 175:
							case 177:
							case 179:
							case 181:
							case 182:
							case 183:
							case 184:
							case 185:
							case 186:
							case 189:
							case 190:
								{
								alt128 = 2;
								}
								break;
							default:
								{
									if (state.backtracking>0) {state.failed=true; return retval;}
									NoViableAltException nvae = new NoViableAltException("", 128, 8, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}

							}
							break;
						case DISTINCT:
							{
							int LA128_9 = input.LA(5);

							if ((LA128_9==WS))
							{
								switch (input.LA(6))
								{
								case CASE:
								case CAST:
								case CONVERT:
								case COUNT:
								case DATEADD:
								case DATEDIFF:
								case DATEPART:
								case EXISTS:
								case NOT:
								case NUMBER:
								case STRING:
								case SYSTEMVAR:
								case TOKEN:
								case VARIABLE:
								case 172:
								case 175:
								case 177:
								case 191:
									{
									alt128 = 3;
									}
									break;
								case SIMPLE_FILE:
									{
									switch (input.LA(7))
									{
									case WS:
										{
										int LA128_18 = input.LA(8);

										if ((LA128_18==178))
										{
											switch (input.LA(9))
											{
											case WS:
												{
												int LA128_20 = input.LA(10);

												if ((LA128_20==SIMPLE_FILE))
												{
													alt128 = 3;
												}
												else if ((LA128_20==174))
												{
													alt128 = 5;
												}
												else
												{
													if (state.backtracking>0) {state.failed=true; return retval;}
													NoViableAltException nvae = new NoViableAltException("", 128, 20, input);
													DebugRecognitionException(nvae);
													throw nvae;
												}
												}
												break;
											case SIMPLE_FILE:
												{
												alt128 = 3;
												}
												break;
											case 174:
												{
												alt128 = 5;
												}
												break;
											default:
												{
													if (state.backtracking>0) {state.failed=true; return retval;}
													NoViableAltException nvae = new NoViableAltException("", 128, 19, input);
													DebugRecognitionException(nvae);
													throw nvae;
												}
											}

										}
										else if ((LA128_18==AND||LA128_18==BETWEEN||LA128_18==IN||LA128_18==LIKE||LA128_18==MATCH||LA128_18==NOT||LA128_18==OR||(LA128_18>=167 && LA128_18<=171)||(LA128_18>=173 && LA128_18<=175)||LA128_18==177||LA128_18==179||(LA128_18>=181 && LA128_18<=186)||(LA128_18>=189 && LA128_18<=190)))
										{
											alt128 = 3;
										}
										else
										{
											if (state.backtracking>0) {state.failed=true; return retval;}
											NoViableAltException nvae = new NoViableAltException("", 128, 18, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
										}
										break;
									case 178:
										{
										switch (input.LA(8))
										{
										case WS:
											{
											int LA128_20 = input.LA(9);

											if ((LA128_20==SIMPLE_FILE))
											{
												alt128 = 3;
											}
											else if ((LA128_20==174))
											{
												alt128 = 5;
											}
											else
											{
												if (state.backtracking>0) {state.failed=true; return retval;}
												NoViableAltException nvae = new NoViableAltException("", 128, 20, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
											}
											break;
										case SIMPLE_FILE:
											{
											alt128 = 3;
											}
											break;
										case 174:
											{
											alt128 = 5;
											}
											break;
										default:
											{
												if (state.backtracking>0) {state.failed=true; return retval;}
												NoViableAltException nvae = new NoViableAltException("", 128, 19, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
										}

										}
										break;
									case LIKE:
									case MATCH:
									case NOT:
									case 167:
									case 168:
									case 169:
									case 170:
									case 171:
									case 173:
									case 174:
									case 175:
									case 177:
									case 179:
									case 181:
									case 182:
									case 183:
									case 184:
									case 185:
									case 186:
									case 189:
									case 190:
										{
										alt128 = 3;
										}
										break;
									default:
										{
											if (state.backtracking>0) {state.failed=true; return retval;}
											NoViableAltException nvae = new NoViableAltException("", 128, 16, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}

									}
									break;
								case 174:
									{
									alt128 = 5;
									}
									break;
								default:
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 128, 13, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 128, 9, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case 174:
							{
							alt128 = 4;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 128, 5, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 128, 4, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA128_2==172))
				{
					switch (input.LA(3))
					{
					case WS:
						{
						switch (input.LA(4))
						{
						case CASE:
						case CAST:
						case CONVERT:
						case COUNT:
						case DATEADD:
						case DATEDIFF:
						case DATEPART:
						case EXISTS:
						case NOT:
						case NUMBER:
						case STRING:
						case SYSTEMVAR:
						case TOKEN:
						case VARIABLE:
						case 172:
						case 175:
						case 177:
						case 191:
							{
							alt128 = 2;
							}
							break;
						case SIMPLE_FILE:
							{
							switch (input.LA(5))
							{
							case WS:
								{
								int LA128_11 = input.LA(6);

								if ((LA128_11==178))
								{
									switch (input.LA(7))
									{
									case WS:
										{
										int LA128_14 = input.LA(8);

										if ((LA128_14==SIMPLE_FILE))
										{
											alt128 = 2;
										}
										else if ((LA128_14==174))
										{
											alt128 = 4;
										}
										else
										{
											if (state.backtracking>0) {state.failed=true; return retval;}
											NoViableAltException nvae = new NoViableAltException("", 128, 14, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
										}
										break;
									case SIMPLE_FILE:
										{
										alt128 = 2;
										}
										break;
									case 174:
										{
										alt128 = 4;
										}
										break;
									default:
										{
											if (state.backtracking>0) {state.failed=true; return retval;}
											NoViableAltException nvae = new NoViableAltException("", 128, 12, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}

								}
								else if ((LA128_11==AND||LA128_11==BETWEEN||LA128_11==IN||LA128_11==LIKE||LA128_11==MATCH||LA128_11==NOT||LA128_11==OR||(LA128_11>=167 && LA128_11<=171)||(LA128_11>=173 && LA128_11<=175)||LA128_11==177||LA128_11==179||(LA128_11>=181 && LA128_11<=186)||(LA128_11>=189 && LA128_11<=190)))
								{
									alt128 = 2;
								}
								else
								{
									if (state.backtracking>0) {state.failed=true; return retval;}
									NoViableAltException nvae = new NoViableAltException("", 128, 11, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
								}
								break;
							case 178:
								{
								switch (input.LA(6))
								{
								case WS:
									{
									int LA128_14 = input.LA(7);

									if ((LA128_14==SIMPLE_FILE))
									{
										alt128 = 2;
									}
									else if ((LA128_14==174))
									{
										alt128 = 4;
									}
									else
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 128, 14, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
									}
									break;
								case SIMPLE_FILE:
									{
									alt128 = 2;
									}
									break;
								case 174:
									{
									alt128 = 4;
									}
									break;
								default:
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 128, 12, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

								}
								break;
							case LIKE:
							case MATCH:
							case NOT:
							case 167:
							case 168:
							case 169:
							case 170:
							case 171:
							case 173:
							case 174:
							case 175:
							case 177:
							case 179:
							case 181:
							case 182:
							case 183:
							case 184:
							case 185:
							case 186:
							case 189:
							case 190:
								{
								alt128 = 2;
								}
								break;
							default:
								{
									if (state.backtracking>0) {state.failed=true; return retval;}
									NoViableAltException nvae = new NoViableAltException("", 128, 8, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}

							}
							break;
						case DISTINCT:
							{
							int LA128_9 = input.LA(5);

							if ((LA128_9==WS))
							{
								switch (input.LA(6))
								{
								case CASE:
								case CAST:
								case CONVERT:
								case COUNT:
								case DATEADD:
								case DATEDIFF:
								case DATEPART:
								case EXISTS:
								case NOT:
								case NUMBER:
								case STRING:
								case SYSTEMVAR:
								case TOKEN:
								case VARIABLE:
								case 172:
								case 175:
								case 177:
								case 191:
									{
									alt128 = 3;
									}
									break;
								case SIMPLE_FILE:
									{
									switch (input.LA(7))
									{
									case WS:
										{
										int LA128_18 = input.LA(8);

										if ((LA128_18==178))
										{
											switch (input.LA(9))
											{
											case WS:
												{
												int LA128_20 = input.LA(10);

												if ((LA128_20==SIMPLE_FILE))
												{
													alt128 = 3;
												}
												else if ((LA128_20==174))
												{
													alt128 = 5;
												}
												else
												{
													if (state.backtracking>0) {state.failed=true; return retval;}
													NoViableAltException nvae = new NoViableAltException("", 128, 20, input);
													DebugRecognitionException(nvae);
													throw nvae;
												}
												}
												break;
											case SIMPLE_FILE:
												{
												alt128 = 3;
												}
												break;
											case 174:
												{
												alt128 = 5;
												}
												break;
											default:
												{
													if (state.backtracking>0) {state.failed=true; return retval;}
													NoViableAltException nvae = new NoViableAltException("", 128, 19, input);
													DebugRecognitionException(nvae);
													throw nvae;
												}
											}

										}
										else if ((LA128_18==AND||LA128_18==BETWEEN||LA128_18==IN||LA128_18==LIKE||LA128_18==MATCH||LA128_18==NOT||LA128_18==OR||(LA128_18>=167 && LA128_18<=171)||(LA128_18>=173 && LA128_18<=175)||LA128_18==177||LA128_18==179||(LA128_18>=181 && LA128_18<=186)||(LA128_18>=189 && LA128_18<=190)))
										{
											alt128 = 3;
										}
										else
										{
											if (state.backtracking>0) {state.failed=true; return retval;}
											NoViableAltException nvae = new NoViableAltException("", 128, 18, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
										}
										break;
									case 178:
										{
										switch (input.LA(8))
										{
										case WS:
											{
											int LA128_20 = input.LA(9);

											if ((LA128_20==SIMPLE_FILE))
											{
												alt128 = 3;
											}
											else if ((LA128_20==174))
											{
												alt128 = 5;
											}
											else
											{
												if (state.backtracking>0) {state.failed=true; return retval;}
												NoViableAltException nvae = new NoViableAltException("", 128, 20, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
											}
											break;
										case SIMPLE_FILE:
											{
											alt128 = 3;
											}
											break;
										case 174:
											{
											alt128 = 5;
											}
											break;
										default:
											{
												if (state.backtracking>0) {state.failed=true; return retval;}
												NoViableAltException nvae = new NoViableAltException("", 128, 19, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
										}

										}
										break;
									case LIKE:
									case MATCH:
									case NOT:
									case 167:
									case 168:
									case 169:
									case 170:
									case 171:
									case 173:
									case 174:
									case 175:
									case 177:
									case 179:
									case 181:
									case 182:
									case 183:
									case 184:
									case 185:
									case 186:
									case 189:
									case 190:
										{
										alt128 = 3;
										}
										break;
									default:
										{
											if (state.backtracking>0) {state.failed=true; return retval;}
											NoViableAltException nvae = new NoViableAltException("", 128, 16, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}

									}
									break;
								case 174:
									{
									alt128 = 5;
									}
									break;
								default:
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 128, 13, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 128, 9, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case 174:
							{
							alt128 = 4;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 128, 6, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case CASE:
					case CAST:
					case CONVERT:
					case COUNT:
					case DATEADD:
					case DATEDIFF:
					case DATEPART:
					case EXISTS:
					case NOT:
					case NUMBER:
					case STRING:
					case SYSTEMVAR:
					case TOKEN:
					case VARIABLE:
					case 172:
					case 175:
					case 177:
					case 191:
						{
						alt128 = 2;
						}
						break;
					case SIMPLE_FILE:
						{
						switch (input.LA(4))
						{
						case WS:
							{
							int LA128_11 = input.LA(5);

							if ((LA128_11==178))
							{
								switch (input.LA(6))
								{
								case WS:
									{
									int LA128_14 = input.LA(7);

									if ((LA128_14==SIMPLE_FILE))
									{
										alt128 = 2;
									}
									else if ((LA128_14==174))
									{
										alt128 = 4;
									}
									else
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 128, 14, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
									}
									break;
								case SIMPLE_FILE:
									{
									alt128 = 2;
									}
									break;
								case 174:
									{
									alt128 = 4;
									}
									break;
								default:
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 128, 12, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

							}
							else if ((LA128_11==AND||LA128_11==BETWEEN||LA128_11==IN||LA128_11==LIKE||LA128_11==MATCH||LA128_11==NOT||LA128_11==OR||(LA128_11>=167 && LA128_11<=171)||(LA128_11>=173 && LA128_11<=175)||LA128_11==177||LA128_11==179||(LA128_11>=181 && LA128_11<=186)||(LA128_11>=189 && LA128_11<=190)))
							{
								alt128 = 2;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 128, 11, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case 178:
							{
							switch (input.LA(5))
							{
							case WS:
								{
								int LA128_14 = input.LA(6);

								if ((LA128_14==SIMPLE_FILE))
								{
									alt128 = 2;
								}
								else if ((LA128_14==174))
								{
									alt128 = 4;
								}
								else
								{
									if (state.backtracking>0) {state.failed=true; return retval;}
									NoViableAltException nvae = new NoViableAltException("", 128, 14, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
								}
								break;
							case SIMPLE_FILE:
								{
								alt128 = 2;
								}
								break;
							case 174:
								{
								alt128 = 4;
								}
								break;
							default:
								{
									if (state.backtracking>0) {state.failed=true; return retval;}
									NoViableAltException nvae = new NoViableAltException("", 128, 12, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}

							}
							break;
						case LIKE:
						case MATCH:
						case NOT:
						case 167:
						case 168:
						case 169:
						case 170:
						case 171:
						case 173:
						case 174:
						case 175:
						case 177:
						case 179:
						case 181:
						case 182:
						case 183:
						case 184:
						case 185:
						case 186:
						case 189:
						case 190:
							{
							alt128 = 2;
							}
							break;
						default:
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 128, 8, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case DISTINCT:
						{
						int LA128_9 = input.LA(4);

						if ((LA128_9==WS))
						{
							switch (input.LA(5))
							{
							case CASE:
							case CAST:
							case CONVERT:
							case COUNT:
							case DATEADD:
							case DATEDIFF:
							case DATEPART:
							case EXISTS:
							case NOT:
							case NUMBER:
							case STRING:
							case SYSTEMVAR:
							case TOKEN:
							case VARIABLE:
							case 172:
							case 175:
							case 177:
							case 191:
								{
								alt128 = 3;
								}
								break;
							case SIMPLE_FILE:
								{
								switch (input.LA(6))
								{
								case WS:
									{
									int LA128_18 = input.LA(7);

									if ((LA128_18==178))
									{
										switch (input.LA(8))
										{
										case WS:
											{
											int LA128_20 = input.LA(9);

											if ((LA128_20==SIMPLE_FILE))
											{
												alt128 = 3;
											}
											else if ((LA128_20==174))
											{
												alt128 = 5;
											}
											else
											{
												if (state.backtracking>0) {state.failed=true; return retval;}
												NoViableAltException nvae = new NoViableAltException("", 128, 20, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
											}
											break;
										case SIMPLE_FILE:
											{
											alt128 = 3;
											}
											break;
										case 174:
											{
											alt128 = 5;
											}
											break;
										default:
											{
												if (state.backtracking>0) {state.failed=true; return retval;}
												NoViableAltException nvae = new NoViableAltException("", 128, 19, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
										}

									}
									else if ((LA128_18==AND||LA128_18==BETWEEN||LA128_18==IN||LA128_18==LIKE||LA128_18==MATCH||LA128_18==NOT||LA128_18==OR||(LA128_18>=167 && LA128_18<=171)||(LA128_18>=173 && LA128_18<=175)||LA128_18==177||LA128_18==179||(LA128_18>=181 && LA128_18<=186)||(LA128_18>=189 && LA128_18<=190)))
									{
										alt128 = 3;
									}
									else
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 128, 18, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
									}
									break;
								case 178:
									{
									switch (input.LA(7))
									{
									case WS:
										{
										int LA128_20 = input.LA(8);

										if ((LA128_20==SIMPLE_FILE))
										{
											alt128 = 3;
										}
										else if ((LA128_20==174))
										{
											alt128 = 5;
										}
										else
										{
											if (state.backtracking>0) {state.failed=true; return retval;}
											NoViableAltException nvae = new NoViableAltException("", 128, 20, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
										}
										break;
									case SIMPLE_FILE:
										{
										alt128 = 3;
										}
										break;
									case 174:
										{
										alt128 = 5;
										}
										break;
									default:
										{
											if (state.backtracking>0) {state.failed=true; return retval;}
											NoViableAltException nvae = new NoViableAltException("", 128, 19, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}

									}
									break;
								case LIKE:
								case MATCH:
								case NOT:
								case 167:
								case 168:
								case 169:
								case 170:
								case 171:
								case 173:
								case 174:
								case 175:
								case 177:
								case 179:
								case 181:
								case 182:
								case 183:
								case 184:
								case 185:
								case 186:
								case 189:
								case 190:
									{
									alt128 = 3;
									}
									break;
								default:
									{
										if (state.backtracking>0) {state.failed=true; return retval;}
										NoViableAltException nvae = new NoViableAltException("", 128, 16, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

								}
								break;
							case 174:
								{
								alt128 = 5;
								}
								break;
							default:
								{
									if (state.backtracking>0) {state.failed=true; return retval;}
									NoViableAltException nvae = new NoViableAltException("", 128, 13, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}

						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 128, 9, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case 174:
						{
						alt128 = 4;
						}
						break;
					default:
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 128, 5, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 128, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SIMPLE_FILE:
				{
				alt128 = 6;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 128, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(128); }
			switch (alt128)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:431:4: TOKEN ( WS )? '(' ( WS )? ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )? ')'
				{
				DebugLocation(431, 4);
				TOKEN326=(IToken)Match(input,TOKEN,Follow._TOKEN_in_functioncall_or_column2748); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TOKEN.Add(TOKEN326);

				DebugLocation(431, 10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:431:10: ( WS )?
				int alt106=2;
				try { DebugEnterSubRule(106);
				try { DebugEnterDecision(106, decisionCanBacktrack[106]);
				int LA106_0 = input.LA(1);

				if ((LA106_0==WS))
				{
					alt106 = 1;
				}
				} finally { DebugExitDecision(106); }
				switch (alt106)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:431:10: WS
					{
					DebugLocation(431, 10);
					WS327=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2750); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS327);


					}
					break;

				}
				} finally { DebugExitSubRule(106); }

				DebugLocation(431, 14);
				char_literal328=(IToken)Match(input,172,Follow._172_in_functioncall_or_column2753); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_172.Add(char_literal328);

				DebugLocation(431, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:431:18: ( WS )?
				int alt107=2;
				try { DebugEnterSubRule(107);
				try { DebugEnterDecision(107, decisionCanBacktrack[107]);
				int LA107_0 = input.LA(1);

				if ((LA107_0==WS))
				{
					alt107 = 1;
				}
				} finally { DebugExitDecision(107); }
				switch (alt107)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:431:18: WS
					{
					DebugLocation(431, 18);
					WS329=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2755); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS329);


					}
					break;

				}
				} finally { DebugExitSubRule(107); }

				DebugLocation(431, 22);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:431:22: ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )?
				int alt112=2;
				try { DebugEnterSubRule(112);
				try { DebugEnterDecision(112, decisionCanBacktrack[112]);
				int LA112_0 = input.LA(1);

				if (((LA112_0>=CASE && LA112_0<=CAST)||(LA112_0>=CONVERT && LA112_0<=COUNT)||(LA112_0>=DATEADD && LA112_0<=DATEPART)||LA112_0==EXISTS||(LA112_0>=NOT && LA112_0<=NUMBER)||LA112_0==SIMPLE_FILE||(LA112_0>=STRING && LA112_0<=SYSTEMVAR)||LA112_0==TOKEN||LA112_0==VARIABLE||LA112_0==172||LA112_0==175||LA112_0==177||LA112_0==191))
				{
					alt112 = 1;
				}
				} finally { DebugExitDecision(112); }
				switch (alt112)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:431:23: expression ( WS )? ( ',' ( WS )? expression ( WS )? )*
					{
					DebugLocation(431, 23);
					PushFollow(Follow._expression_in_functioncall_or_column2759);
					expression330=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expression.Add(expression330.Tree);
					DebugLocation(431, 34);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:431:34: ( WS )?
					int alt108=2;
					try { DebugEnterSubRule(108);
					try { DebugEnterDecision(108, decisionCanBacktrack[108]);
					int LA108_0 = input.LA(1);

					if ((LA108_0==WS))
					{
						alt108 = 1;
					}
					} finally { DebugExitDecision(108); }
					switch (alt108)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:431:34: WS
						{
						DebugLocation(431, 34);
						WS331=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2761); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS331);


						}
						break;

					}
					} finally { DebugExitSubRule(108); }

					DebugLocation(431, 38);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:431:38: ( ',' ( WS )? expression ( WS )? )*
					try { DebugEnterSubRule(111);
					while (true)
					{
						int alt111=2;
						try { DebugEnterDecision(111, decisionCanBacktrack[111]);
						int LA111_0 = input.LA(1);

						if ((LA111_0==176))
						{
							alt111 = 1;
						}


						} finally { DebugExitDecision(111); }
						switch ( alt111 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:431:39: ',' ( WS )? expression ( WS )?
							{
							DebugLocation(431, 39);
							char_literal332=(IToken)Match(input,176,Follow._176_in_functioncall_or_column2765); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_176.Add(char_literal332);

							DebugLocation(431, 43);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:431:43: ( WS )?
							int alt109=2;
							try { DebugEnterSubRule(109);
							try { DebugEnterDecision(109, decisionCanBacktrack[109]);
							int LA109_0 = input.LA(1);

							if ((LA109_0==WS))
							{
								alt109 = 1;
							}
							} finally { DebugExitDecision(109); }
							switch (alt109)
							{
							case 1:
								DebugEnterAlt(1);
								// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:431:43: WS
								{
								DebugLocation(431, 43);
								WS333=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2767); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_WS.Add(WS333);


								}
								break;

							}
							} finally { DebugExitSubRule(109); }

							DebugLocation(431, 47);
							PushFollow(Follow._expression_in_functioncall_or_column2770);
							expression334=expression();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_expression.Add(expression334.Tree);
							DebugLocation(431, 58);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:431:58: ( WS )?
							int alt110=2;
							try { DebugEnterSubRule(110);
							try { DebugEnterDecision(110, decisionCanBacktrack[110]);
							int LA110_0 = input.LA(1);

							if ((LA110_0==WS))
							{
								alt110 = 1;
							}
							} finally { DebugExitDecision(110); }
							switch (alt110)
							{
							case 1:
								DebugEnterAlt(1);
								// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:431:58: WS
								{
								DebugLocation(431, 58);
								WS335=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2772); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_WS.Add(WS335);


								}
								break;

							}
							} finally { DebugExitSubRule(110); }


							}
							break;

						default:
							goto loop111;
						}
					}

					loop111:
						;

					} finally { DebugExitSubRule(111); }


					}
					break;

				}
				} finally { DebugExitSubRule(112); }

				DebugLocation(431, 66);
				char_literal336=(IToken)Match(input,173,Follow._173_in_functioncall_or_column2779); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_173.Add(char_literal336);



				{
				// AST REWRITE
				// elements: expression, TOKEN
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 431:70: -> ^( T_FUNCTIONCALL TOKEN ( expression )* )
				{
					DebugLocation(431, 73);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:431:73: ^( T_FUNCTIONCALL TOKEN ( expression )* )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(431, 75);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(431, 90);
					adaptor.AddChild(root_1, stream_TOKEN.NextNode());
					DebugLocation(431, 96);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:431:96: ( expression )*
					while ( stream_expression.HasNext )
					{
						DebugLocation(431, 96);
						adaptor.AddChild(root_1, stream_expression.NextTree());

					}
					stream_expression.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:432:4: COUNT ( WS )? '(' ( WS )? expression ( WS )? ')'
				{
				DebugLocation(432, 4);
				COUNT337=(IToken)Match(input,COUNT,Follow._COUNT_in_functioncall_or_column2795); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COUNT.Add(COUNT337);

				DebugLocation(432, 10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:432:10: ( WS )?
				int alt113=2;
				try { DebugEnterSubRule(113);
				try { DebugEnterDecision(113, decisionCanBacktrack[113]);
				int LA113_0 = input.LA(1);

				if ((LA113_0==WS))
				{
					alt113 = 1;
				}
				} finally { DebugExitDecision(113); }
				switch (alt113)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:432:10: WS
					{
					DebugLocation(432, 10);
					WS338=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2797); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS338);


					}
					break;

				}
				} finally { DebugExitSubRule(113); }

				DebugLocation(432, 14);
				char_literal339=(IToken)Match(input,172,Follow._172_in_functioncall_or_column2800); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_172.Add(char_literal339);

				DebugLocation(432, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:432:18: ( WS )?
				int alt114=2;
				try { DebugEnterSubRule(114);
				try { DebugEnterDecision(114, decisionCanBacktrack[114]);
				int LA114_0 = input.LA(1);

				if ((LA114_0==WS))
				{
					alt114 = 1;
				}
				} finally { DebugExitDecision(114); }
				switch (alt114)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:432:18: WS
					{
					DebugLocation(432, 18);
					WS340=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2802); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS340);


					}
					break;

				}
				} finally { DebugExitSubRule(114); }

				DebugLocation(432, 22);
				PushFollow(Follow._expression_in_functioncall_or_column2805);
				expression341=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression341.Tree);
				DebugLocation(432, 33);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:432:33: ( WS )?
				int alt115=2;
				try { DebugEnterSubRule(115);
				try { DebugEnterDecision(115, decisionCanBacktrack[115]);
				int LA115_0 = input.LA(1);

				if ((LA115_0==WS))
				{
					alt115 = 1;
				}
				} finally { DebugExitDecision(115); }
				switch (alt115)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:432:33: WS
					{
					DebugLocation(432, 33);
					WS342=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2807); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS342);


					}
					break;

				}
				} finally { DebugExitSubRule(115); }

				DebugLocation(432, 37);
				char_literal343=(IToken)Match(input,173,Follow._173_in_functioncall_or_column2810); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_173.Add(char_literal343);



				{
				// AST REWRITE
				// elements: expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 432:41: -> ^( T_FUNCTIONCALL T_COUNT expression )
				{
					DebugLocation(432, 44);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:432:44: ^( T_FUNCTIONCALL T_COUNT expression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(432, 46);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(432, 61);
					adaptor.AddChild(root_1, (object)adaptor.Create(T_COUNT, "T_COUNT"));
					DebugLocation(432, 69);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:433:4: COUNT ( WS )? '(' ( WS )? DISTINCT WS expression ( WS )? ')'
				{
				DebugLocation(433, 4);
				COUNT344=(IToken)Match(input,COUNT,Follow._COUNT_in_functioncall_or_column2825); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COUNT.Add(COUNT344);

				DebugLocation(433, 10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:433:10: ( WS )?
				int alt116=2;
				try { DebugEnterSubRule(116);
				try { DebugEnterDecision(116, decisionCanBacktrack[116]);
				int LA116_0 = input.LA(1);

				if ((LA116_0==WS))
				{
					alt116 = 1;
				}
				} finally { DebugExitDecision(116); }
				switch (alt116)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:433:10: WS
					{
					DebugLocation(433, 10);
					WS345=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2827); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS345);


					}
					break;

				}
				} finally { DebugExitSubRule(116); }

				DebugLocation(433, 14);
				char_literal346=(IToken)Match(input,172,Follow._172_in_functioncall_or_column2830); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_172.Add(char_literal346);

				DebugLocation(433, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:433:18: ( WS )?
				int alt117=2;
				try { DebugEnterSubRule(117);
				try { DebugEnterDecision(117, decisionCanBacktrack[117]);
				int LA117_0 = input.LA(1);

				if ((LA117_0==WS))
				{
					alt117 = 1;
				}
				} finally { DebugExitDecision(117); }
				switch (alt117)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:433:18: WS
					{
					DebugLocation(433, 18);
					WS347=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2832); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS347);


					}
					break;

				}
				} finally { DebugExitSubRule(117); }

				DebugLocation(433, 22);
				DISTINCT348=(IToken)Match(input,DISTINCT,Follow._DISTINCT_in_functioncall_or_column2835); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DISTINCT.Add(DISTINCT348);

				DebugLocation(433, 31);
				WS349=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2837); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS349);

				DebugLocation(433, 34);
				PushFollow(Follow._expression_in_functioncall_or_column2839);
				expression350=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression350.Tree);
				DebugLocation(433, 45);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:433:45: ( WS )?
				int alt118=2;
				try { DebugEnterSubRule(118);
				try { DebugEnterDecision(118, decisionCanBacktrack[118]);
				int LA118_0 = input.LA(1);

				if ((LA118_0==WS))
				{
					alt118 = 1;
				}
				} finally { DebugExitDecision(118); }
				switch (alt118)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:433:45: WS
					{
					DebugLocation(433, 45);
					WS351=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2841); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS351);


					}
					break;

				}
				} finally { DebugExitSubRule(118); }

				DebugLocation(433, 49);
				char_literal352=(IToken)Match(input,173,Follow._173_in_functioncall_or_column2844); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_173.Add(char_literal352);



				{
				// AST REWRITE
				// elements: expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 433:53: -> ^( T_FUNCTIONCALL T_DISTINCTCOUNT expression )
				{
					DebugLocation(433, 56);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:433:56: ^( T_FUNCTIONCALL T_DISTINCTCOUNT expression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(433, 58);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(433, 73);
					adaptor.AddChild(root_1, (object)adaptor.Create(T_DISTINCTCOUNT, "T_DISTINCTCOUNT"));
					DebugLocation(433, 89);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:434:4: COUNT ( WS )? '(' ( WS )? all_columns ( WS )? ')'
				{
				DebugLocation(434, 4);
				COUNT353=(IToken)Match(input,COUNT,Follow._COUNT_in_functioncall_or_column2859); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COUNT.Add(COUNT353);

				DebugLocation(434, 10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:434:10: ( WS )?
				int alt119=2;
				try { DebugEnterSubRule(119);
				try { DebugEnterDecision(119, decisionCanBacktrack[119]);
				int LA119_0 = input.LA(1);

				if ((LA119_0==WS))
				{
					alt119 = 1;
				}
				} finally { DebugExitDecision(119); }
				switch (alt119)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:434:10: WS
					{
					DebugLocation(434, 10);
					WS354=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2861); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS354);


					}
					break;

				}
				} finally { DebugExitSubRule(119); }

				DebugLocation(434, 14);
				char_literal355=(IToken)Match(input,172,Follow._172_in_functioncall_or_column2864); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_172.Add(char_literal355);

				DebugLocation(434, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:434:18: ( WS )?
				int alt120=2;
				try { DebugEnterSubRule(120);
				try { DebugEnterDecision(120, decisionCanBacktrack[120]);
				int LA120_0 = input.LA(1);

				if ((LA120_0==WS))
				{
					alt120 = 1;
				}
				} finally { DebugExitDecision(120); }
				switch (alt120)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:434:18: WS
					{
					DebugLocation(434, 18);
					WS356=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2866); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS356);


					}
					break;

				}
				} finally { DebugExitSubRule(120); }

				DebugLocation(434, 22);
				PushFollow(Follow._all_columns_in_functioncall_or_column2869);
				all_columns357=all_columns();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_all_columns.Add(all_columns357.Tree);
				DebugLocation(434, 34);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:434:34: ( WS )?
				int alt121=2;
				try { DebugEnterSubRule(121);
				try { DebugEnterDecision(121, decisionCanBacktrack[121]);
				int LA121_0 = input.LA(1);

				if ((LA121_0==WS))
				{
					alt121 = 1;
				}
				} finally { DebugExitDecision(121); }
				switch (alt121)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:434:34: WS
					{
					DebugLocation(434, 34);
					WS358=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2871); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS358);


					}
					break;

				}
				} finally { DebugExitSubRule(121); }

				DebugLocation(434, 38);
				char_literal359=(IToken)Match(input,173,Follow._173_in_functioncall_or_column2874); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_173.Add(char_literal359);



				{
				// AST REWRITE
				// elements: all_columns
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 434:42: -> ^( T_FUNCTIONCALL T_COUNT all_columns )
				{
					DebugLocation(434, 45);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:434:45: ^( T_FUNCTIONCALL T_COUNT all_columns )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(434, 47);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(434, 62);
					adaptor.AddChild(root_1, (object)adaptor.Create(T_COUNT, "T_COUNT"));
					DebugLocation(434, 70);
					adaptor.AddChild(root_1, stream_all_columns.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:435:4: COUNT ( WS )? '(' ( WS )? DISTINCT WS all_columns ( WS )? ')'
				{
				DebugLocation(435, 4);
				COUNT360=(IToken)Match(input,COUNT,Follow._COUNT_in_functioncall_or_column2889); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_COUNT.Add(COUNT360);

				DebugLocation(435, 10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:435:10: ( WS )?
				int alt122=2;
				try { DebugEnterSubRule(122);
				try { DebugEnterDecision(122, decisionCanBacktrack[122]);
				int LA122_0 = input.LA(1);

				if ((LA122_0==WS))
				{
					alt122 = 1;
				}
				} finally { DebugExitDecision(122); }
				switch (alt122)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:435:10: WS
					{
					DebugLocation(435, 10);
					WS361=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2891); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS361);


					}
					break;

				}
				} finally { DebugExitSubRule(122); }

				DebugLocation(435, 14);
				char_literal362=(IToken)Match(input,172,Follow._172_in_functioncall_or_column2894); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_172.Add(char_literal362);

				DebugLocation(435, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:435:18: ( WS )?
				int alt123=2;
				try { DebugEnterSubRule(123);
				try { DebugEnterDecision(123, decisionCanBacktrack[123]);
				int LA123_0 = input.LA(1);

				if ((LA123_0==WS))
				{
					alt123 = 1;
				}
				} finally { DebugExitDecision(123); }
				switch (alt123)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:435:18: WS
					{
					DebugLocation(435, 18);
					WS363=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2896); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS363);


					}
					break;

				}
				} finally { DebugExitSubRule(123); }

				DebugLocation(435, 22);
				DISTINCT364=(IToken)Match(input,DISTINCT,Follow._DISTINCT_in_functioncall_or_column2899); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DISTINCT.Add(DISTINCT364);

				DebugLocation(435, 31);
				WS365=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2901); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS365);

				DebugLocation(435, 34);
				PushFollow(Follow._all_columns_in_functioncall_or_column2903);
				all_columns366=all_columns();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_all_columns.Add(all_columns366.Tree);
				DebugLocation(435, 46);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:435:46: ( WS )?
				int alt124=2;
				try { DebugEnterSubRule(124);
				try { DebugEnterDecision(124, decisionCanBacktrack[124]);
				int LA124_0 = input.LA(1);

				if ((LA124_0==WS))
				{
					alt124 = 1;
				}
				} finally { DebugExitDecision(124); }
				switch (alt124)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:435:46: WS
					{
					DebugLocation(435, 46);
					WS367=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2905); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS367);


					}
					break;

				}
				} finally { DebugExitSubRule(124); }

				DebugLocation(435, 50);
				char_literal368=(IToken)Match(input,173,Follow._173_in_functioncall_or_column2908); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_173.Add(char_literal368);



				{
				// AST REWRITE
				// elements: all_columns
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 435:54: -> ^( T_FUNCTIONCALL T_DISTINCTCOUNT all_columns )
				{
					DebugLocation(435, 57);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:435:57: ^( T_FUNCTIONCALL T_DISTINCTCOUNT all_columns )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(435, 59);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(435, 74);
					adaptor.AddChild(root_1, (object)adaptor.Create(T_DISTINCTCOUNT, "T_DISTINCTCOUNT"));
					DebugLocation(435, 90);
					adaptor.AddChild(root_1, stream_all_columns.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:437:4: ( table_alias ( WS )? '.' ( WS )? )? column_name
				{
				DebugLocation(437, 4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:437:4: ( table_alias ( WS )? '.' ( WS )? )?
				int alt127=2;
				try { DebugEnterSubRule(127);
				try { DebugEnterDecision(127, decisionCanBacktrack[127]);
				int LA127_0 = input.LA(1);

				if ((LA127_0==SIMPLE_FILE))
				{
					int LA127_1 = input.LA(2);

					if ((LA127_1==WS))
					{
						int LA127_2 = input.LA(3);

						if ((LA127_2==178))
						{
							alt127 = 1;
						}
					}
					else if ((LA127_1==178))
					{
						alt127 = 1;
					}
				}
				} finally { DebugExitDecision(127); }
				switch (alt127)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:437:5: table_alias ( WS )? '.' ( WS )?
					{
					DebugLocation(437, 5);
					PushFollow(Follow._table_alias_in_functioncall_or_column2926);
					table_alias369=table_alias();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_table_alias.Add(table_alias369.Tree);
					DebugLocation(437, 17);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:437:17: ( WS )?
					int alt125=2;
					try { DebugEnterSubRule(125);
					try { DebugEnterDecision(125, decisionCanBacktrack[125]);
					int LA125_0 = input.LA(1);

					if ((LA125_0==WS))
					{
						alt125 = 1;
					}
					} finally { DebugExitDecision(125); }
					switch (alt125)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:437:17: WS
						{
						DebugLocation(437, 17);
						WS370=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2928); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS370);


						}
						break;

					}
					} finally { DebugExitSubRule(125); }

					DebugLocation(437, 21);
					char_literal371=(IToken)Match(input,178,Follow._178_in_functioncall_or_column2931); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_178.Add(char_literal371);

					DebugLocation(437, 25);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:437:25: ( WS )?
					int alt126=2;
					try { DebugEnterSubRule(126);
					try { DebugEnterDecision(126, decisionCanBacktrack[126]);
					int LA126_0 = input.LA(1);

					if ((LA126_0==WS))
					{
						alt126 = 1;
					}
					} finally { DebugExitDecision(126); }
					switch (alt126)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:437:25: WS
						{
						DebugLocation(437, 25);
						WS372=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2933); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS372);


						}
						break;

					}
					} finally { DebugExitSubRule(126); }


					}
					break;

				}
				} finally { DebugExitSubRule(127); }

				DebugLocation(437, 31);
				PushFollow(Follow._column_name_in_functioncall_or_column2938);
				column_name373=column_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_column_name.Add(column_name373.Tree);


				{
				// AST REWRITE
				// elements: table_alias, column_name
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 437:43: -> ^( T_COLUMN column_name ( table_alias )? )
				{
					DebugLocation(437, 46);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:437:46: ^( T_COLUMN column_name ( table_alias )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(437, 48);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_COLUMN, "T_COLUMN"), root_1);

					DebugLocation(437, 57);
					adaptor.AddChild(root_1, stream_column_name.NextTree());
					DebugLocation(437, 69);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:437:69: ( table_alias )?
					if (stream_table_alias.HasNext)
					{
						DebugLocation(437, 69);
						adaptor.AddChild(root_1, stream_table_alias.NextTree());

					}
					stream_table_alias.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("functioncall_or_column", 57);
			LeaveRule("functioncall_or_column", 57);
			LeaveRule_functioncall_or_column();
	    }
	 	DebugLocation(438, 1);
		} finally { DebugExitRule(GrammarFileName, "functioncall_or_column"); }
		return retval;

	}
	// $ANTLR end "functioncall_or_column"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_column_name() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_column_name() {}

	// $ANTLR start "column_name"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:440:1: column_name : SIMPLE_FILE ;
	[GrammarRule("column_name")]
	private AstParserRuleReturnScope<object, IToken> column_name()
	{
		EnterRule_column_name();
		EnterRule("column_name", 58);
		TraceIn("column_name", 58);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken SIMPLE_FILE374 = default(IToken);

	    object SIMPLE_FILE374_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "column_name");
		DebugLocation(440, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:441:2: ( SIMPLE_FILE )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:441:4: SIMPLE_FILE
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(441, 4);
			SIMPLE_FILE374=(IToken)Match(input,SIMPLE_FILE,Follow._SIMPLE_FILE_in_column_name2961); if (state.failed) return retval;
			if (state.backtracking == 0) {
			SIMPLE_FILE374_tree = (object)adaptor.Create(SIMPLE_FILE374);
			adaptor.AddChild(root_0, SIMPLE_FILE374_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("column_name", 58);
			LeaveRule("column_name", 58);
			LeaveRule_column_name();
	    }
	 	DebugLocation(442, 1);
		} finally { DebugExitRule(GrammarFileName, "column_name"); }
		return retval;

	}
	// $ANTLR end "column_name"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_table_alias() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_table_alias() {}

	// $ANTLR start "table_alias"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:444:1: table_alias : SIMPLE_FILE -> ^( T_TABLE_ALIAS SIMPLE_FILE ) ;
	[GrammarRule("table_alias")]
	private AstParserRuleReturnScope<object, IToken> table_alias()
	{
		EnterRule_table_alias();
		EnterRule("table_alias", 59);
		TraceIn("table_alias", 59);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken SIMPLE_FILE375 = default(IToken);

	    object SIMPLE_FILE375_tree = default(object);
	    RewriteRuleITokenStream stream_SIMPLE_FILE=new RewriteRuleITokenStream(adaptor,"token SIMPLE_FILE");

		try { DebugEnterRule(GrammarFileName, "table_alias");
		DebugLocation(444, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:445:2: ( SIMPLE_FILE -> ^( T_TABLE_ALIAS SIMPLE_FILE ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:445:4: SIMPLE_FILE
			{
			DebugLocation(445, 4);
			SIMPLE_FILE375=(IToken)Match(input,SIMPLE_FILE,Follow._SIMPLE_FILE_in_table_alias2972); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_SIMPLE_FILE.Add(SIMPLE_FILE375);



			{
			// AST REWRITE
			// elements: SIMPLE_FILE
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 445:16: -> ^( T_TABLE_ALIAS SIMPLE_FILE )
			{
				DebugLocation(445, 19);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:445:19: ^( T_TABLE_ALIAS SIMPLE_FILE )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(445, 21);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_TABLE_ALIAS, "T_TABLE_ALIAS"), root_1);

				DebugLocation(445, 35);
				adaptor.AddChild(root_1, stream_SIMPLE_FILE.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("table_alias", 59);
			LeaveRule("table_alias", 59);
			LeaveRule_table_alias();
	    }
	 	DebugLocation(446, 1);
		} finally { DebugExitRule(GrammarFileName, "table_alias"); }
		return retval;

	}
	// $ANTLR end "table_alias"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_specialfunctioncall() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_specialfunctioncall() {}

	// $ANTLR start "specialfunctioncall"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:448:1: specialfunctioncall : ( CONVERT ( WS )? '(' ( WS )? TOKEN ( WS )? ',' ( WS )? expression ( WS )? ( ',' ( WS )? STRING ( WS )? )? ')' -> ^( T_CONVERT TOKEN expression ( STRING )? ) | CAST ( WS )? '(' ( WS )? expression WS AS WS datatype ( WS )? ')' -> ^( T_CONVERT TOKEN expression ) | DATEADD ( WS )? '(' ( WS )? datepart ( WS )? ',' ( WS )? expression ( WS )? ',' ( WS )? expression ( WS )? ')' -> ^( T_FUNCTIONCALL DATEADD datepart ( expression )+ ) | DATEDIFF ( WS )? '(' ( WS )? datepart ( WS )? ',' ( WS )? expression ( WS )? ',' ( WS )? expression ( WS )? ')' -> ^( T_FUNCTIONCALL DATEDIFF datepart ( expression )+ ) | DATEPART ( WS )? '(' ( WS )? datepart ( WS )? ',' ( WS )? expression ( WS )? ')' -> ^( T_FUNCTIONCALL DATEPART datepart expression ) );
	[GrammarRule("specialfunctioncall")]
	private AstParserRuleReturnScope<object, IToken> specialfunctioncall()
	{
		EnterRule_specialfunctioncall();
		EnterRule("specialfunctioncall", 60);
		TraceIn("specialfunctioncall", 60);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken CONVERT376 = default(IToken);
	    IToken WS377 = default(IToken);
	    IToken char_literal378 = default(IToken);
	    IToken WS379 = default(IToken);
	    IToken TOKEN380 = default(IToken);
	    IToken WS381 = default(IToken);
	    IToken char_literal382 = default(IToken);
	    IToken WS383 = default(IToken);
	    IToken WS385 = default(IToken);
	    IToken char_literal386 = default(IToken);
	    IToken WS387 = default(IToken);
	    IToken STRING388 = default(IToken);
	    IToken WS389 = default(IToken);
	    IToken char_literal390 = default(IToken);
	    IToken CAST391 = default(IToken);
	    IToken WS392 = default(IToken);
	    IToken char_literal393 = default(IToken);
	    IToken WS394 = default(IToken);
	    IToken WS396 = default(IToken);
	    IToken AS397 = default(IToken);
	    IToken WS398 = default(IToken);
	    IToken WS400 = default(IToken);
	    IToken char_literal401 = default(IToken);
	    IToken DATEADD402 = default(IToken);
	    IToken WS403 = default(IToken);
	    IToken char_literal404 = default(IToken);
	    IToken WS405 = default(IToken);
	    IToken WS407 = default(IToken);
	    IToken char_literal408 = default(IToken);
	    IToken WS409 = default(IToken);
	    IToken WS411 = default(IToken);
	    IToken char_literal412 = default(IToken);
	    IToken WS413 = default(IToken);
	    IToken WS415 = default(IToken);
	    IToken char_literal416 = default(IToken);
	    IToken DATEDIFF417 = default(IToken);
	    IToken WS418 = default(IToken);
	    IToken char_literal419 = default(IToken);
	    IToken WS420 = default(IToken);
	    IToken WS422 = default(IToken);
	    IToken char_literal423 = default(IToken);
	    IToken WS424 = default(IToken);
	    IToken WS426 = default(IToken);
	    IToken char_literal427 = default(IToken);
	    IToken WS428 = default(IToken);
	    IToken WS430 = default(IToken);
	    IToken char_literal431 = default(IToken);
	    IToken DATEPART432 = default(IToken);
	    IToken WS433 = default(IToken);
	    IToken char_literal434 = default(IToken);
	    IToken WS435 = default(IToken);
	    IToken WS437 = default(IToken);
	    IToken char_literal438 = default(IToken);
	    IToken WS439 = default(IToken);
	    IToken WS441 = default(IToken);
	    IToken char_literal442 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression384 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression395 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> datatype399 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> datepart406 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression410 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression414 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> datepart421 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression425 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression429 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> datepart436 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression440 = default(AstParserRuleReturnScope<object, IToken>);

	    object CONVERT376_tree = default(object);
	    object WS377_tree = default(object);
	    object char_literal378_tree = default(object);
	    object WS379_tree = default(object);
	    object TOKEN380_tree = default(object);
	    object WS381_tree = default(object);
	    object char_literal382_tree = default(object);
	    object WS383_tree = default(object);
	    object WS385_tree = default(object);
	    object char_literal386_tree = default(object);
	    object WS387_tree = default(object);
	    object STRING388_tree = default(object);
	    object WS389_tree = default(object);
	    object char_literal390_tree = default(object);
	    object CAST391_tree = default(object);
	    object WS392_tree = default(object);
	    object char_literal393_tree = default(object);
	    object WS394_tree = default(object);
	    object WS396_tree = default(object);
	    object AS397_tree = default(object);
	    object WS398_tree = default(object);
	    object WS400_tree = default(object);
	    object char_literal401_tree = default(object);
	    object DATEADD402_tree = default(object);
	    object WS403_tree = default(object);
	    object char_literal404_tree = default(object);
	    object WS405_tree = default(object);
	    object WS407_tree = default(object);
	    object char_literal408_tree = default(object);
	    object WS409_tree = default(object);
	    object WS411_tree = default(object);
	    object char_literal412_tree = default(object);
	    object WS413_tree = default(object);
	    object WS415_tree = default(object);
	    object char_literal416_tree = default(object);
	    object DATEDIFF417_tree = default(object);
	    object WS418_tree = default(object);
	    object char_literal419_tree = default(object);
	    object WS420_tree = default(object);
	    object WS422_tree = default(object);
	    object char_literal423_tree = default(object);
	    object WS424_tree = default(object);
	    object WS426_tree = default(object);
	    object char_literal427_tree = default(object);
	    object WS428_tree = default(object);
	    object WS430_tree = default(object);
	    object char_literal431_tree = default(object);
	    object DATEPART432_tree = default(object);
	    object WS433_tree = default(object);
	    object char_literal434_tree = default(object);
	    object WS435_tree = default(object);
	    object WS437_tree = default(object);
	    object char_literal438_tree = default(object);
	    object WS439_tree = default(object);
	    object WS441_tree = default(object);
	    object char_literal442_tree = default(object);
	    RewriteRuleITokenStream stream_CAST=new RewriteRuleITokenStream(adaptor,"token CAST");
	    RewriteRuleITokenStream stream_AS=new RewriteRuleITokenStream(adaptor,"token AS");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_172=new RewriteRuleITokenStream(adaptor,"token 172");
	    RewriteRuleITokenStream stream_DATEPART=new RewriteRuleITokenStream(adaptor,"token DATEPART");
	    RewriteRuleITokenStream stream_DATEADD=new RewriteRuleITokenStream(adaptor,"token DATEADD");
	    RewriteRuleITokenStream stream_173=new RewriteRuleITokenStream(adaptor,"token 173");
	    RewriteRuleITokenStream stream_CONVERT=new RewriteRuleITokenStream(adaptor,"token CONVERT");
	    RewriteRuleITokenStream stream_176=new RewriteRuleITokenStream(adaptor,"token 176");
	    RewriteRuleITokenStream stream_DATEDIFF=new RewriteRuleITokenStream(adaptor,"token DATEDIFF");
	    RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
	    RewriteRuleITokenStream stream_TOKEN=new RewriteRuleITokenStream(adaptor,"token TOKEN");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_datatype=new RewriteRuleSubtreeStream(adaptor,"rule datatype");
	    RewriteRuleSubtreeStream stream_datepart=new RewriteRuleSubtreeStream(adaptor,"rule datepart");
		try { DebugEnterRule(GrammarFileName, "specialfunctioncall");
		DebugLocation(448, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:449:2: ( CONVERT ( WS )? '(' ( WS )? TOKEN ( WS )? ',' ( WS )? expression ( WS )? ( ',' ( WS )? STRING ( WS )? )? ')' -> ^( T_CONVERT TOKEN expression ( STRING )? ) | CAST ( WS )? '(' ( WS )? expression WS AS WS datatype ( WS )? ')' -> ^( T_CONVERT TOKEN expression ) | DATEADD ( WS )? '(' ( WS )? datepart ( WS )? ',' ( WS )? expression ( WS )? ',' ( WS )? expression ( WS )? ')' -> ^( T_FUNCTIONCALL DATEADD datepart ( expression )+ ) | DATEDIFF ( WS )? '(' ( WS )? datepart ( WS )? ',' ( WS )? expression ( WS )? ',' ( WS )? expression ( WS )? ')' -> ^( T_FUNCTIONCALL DATEDIFF datepart ( expression )+ ) | DATEPART ( WS )? '(' ( WS )? datepart ( WS )? ',' ( WS )? expression ( WS )? ')' -> ^( T_FUNCTIONCALL DATEPART datepart expression ) )
			int alt159=5;
			try { DebugEnterDecision(159, decisionCanBacktrack[159]);
			switch (input.LA(1))
			{
			case CONVERT:
				{
				alt159 = 1;
				}
				break;
			case CAST:
				{
				alt159 = 2;
				}
				break;
			case DATEADD:
				{
				alt159 = 3;
				}
				break;
			case DATEDIFF:
				{
				alt159 = 4;
				}
				break;
			case DATEPART:
				{
				alt159 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 159, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(159); }
			switch (alt159)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:449:4: CONVERT ( WS )? '(' ( WS )? TOKEN ( WS )? ',' ( WS )? expression ( WS )? ( ',' ( WS )? STRING ( WS )? )? ')'
				{
				DebugLocation(449, 4);
				CONVERT376=(IToken)Match(input,CONVERT,Follow._CONVERT_in_specialfunctioncall2992); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CONVERT.Add(CONVERT376);

				DebugLocation(449, 12);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:449:12: ( WS )?
				int alt129=2;
				try { DebugEnterSubRule(129);
				try { DebugEnterDecision(129, decisionCanBacktrack[129]);
				int LA129_0 = input.LA(1);

				if ((LA129_0==WS))
				{
					alt129 = 1;
				}
				} finally { DebugExitDecision(129); }
				switch (alt129)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:449:12: WS
					{
					DebugLocation(449, 12);
					WS377=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2994); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS377);


					}
					break;

				}
				} finally { DebugExitSubRule(129); }

				DebugLocation(449, 16);
				char_literal378=(IToken)Match(input,172,Follow._172_in_specialfunctioncall2997); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_172.Add(char_literal378);

				DebugLocation(449, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:449:20: ( WS )?
				int alt130=2;
				try { DebugEnterSubRule(130);
				try { DebugEnterDecision(130, decisionCanBacktrack[130]);
				int LA130_0 = input.LA(1);

				if ((LA130_0==WS))
				{
					alt130 = 1;
				}
				} finally { DebugExitDecision(130); }
				switch (alt130)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:449:20: WS
					{
					DebugLocation(449, 20);
					WS379=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2999); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS379);


					}
					break;

				}
				} finally { DebugExitSubRule(130); }

				DebugLocation(449, 24);
				TOKEN380=(IToken)Match(input,TOKEN,Follow._TOKEN_in_specialfunctioncall3002); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TOKEN.Add(TOKEN380);

				DebugLocation(449, 30);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:449:30: ( WS )?
				int alt131=2;
				try { DebugEnterSubRule(131);
				try { DebugEnterDecision(131, decisionCanBacktrack[131]);
				int LA131_0 = input.LA(1);

				if ((LA131_0==WS))
				{
					alt131 = 1;
				}
				} finally { DebugExitDecision(131); }
				switch (alt131)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:449:30: WS
					{
					DebugLocation(449, 30);
					WS381=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3004); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS381);


					}
					break;

				}
				} finally { DebugExitSubRule(131); }

				DebugLocation(449, 34);
				char_literal382=(IToken)Match(input,176,Follow._176_in_specialfunctioncall3007); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_176.Add(char_literal382);

				DebugLocation(449, 38);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:449:38: ( WS )?
				int alt132=2;
				try { DebugEnterSubRule(132);
				try { DebugEnterDecision(132, decisionCanBacktrack[132]);
				int LA132_0 = input.LA(1);

				if ((LA132_0==WS))
				{
					alt132 = 1;
				}
				} finally { DebugExitDecision(132); }
				switch (alt132)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:449:38: WS
					{
					DebugLocation(449, 38);
					WS383=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3009); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS383);


					}
					break;

				}
				} finally { DebugExitSubRule(132); }

				DebugLocation(449, 42);
				PushFollow(Follow._expression_in_specialfunctioncall3012);
				expression384=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression384.Tree);
				DebugLocation(449, 53);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:449:53: ( WS )?
				int alt133=2;
				try { DebugEnterSubRule(133);
				try { DebugEnterDecision(133, decisionCanBacktrack[133]);
				int LA133_0 = input.LA(1);

				if ((LA133_0==WS))
				{
					alt133 = 1;
				}
				} finally { DebugExitDecision(133); }
				switch (alt133)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:449:53: WS
					{
					DebugLocation(449, 53);
					WS385=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3014); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS385);


					}
					break;

				}
				} finally { DebugExitSubRule(133); }

				DebugLocation(449, 57);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:449:57: ( ',' ( WS )? STRING ( WS )? )?
				int alt136=2;
				try { DebugEnterSubRule(136);
				try { DebugEnterDecision(136, decisionCanBacktrack[136]);
				int LA136_0 = input.LA(1);

				if ((LA136_0==176))
				{
					alt136 = 1;
				}
				} finally { DebugExitDecision(136); }
				switch (alt136)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:449:58: ',' ( WS )? STRING ( WS )?
					{
					DebugLocation(449, 58);
					char_literal386=(IToken)Match(input,176,Follow._176_in_specialfunctioncall3018); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_176.Add(char_literal386);

					DebugLocation(449, 62);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:449:62: ( WS )?
					int alt134=2;
					try { DebugEnterSubRule(134);
					try { DebugEnterDecision(134, decisionCanBacktrack[134]);
					int LA134_0 = input.LA(1);

					if ((LA134_0==WS))
					{
						alt134 = 1;
					}
					} finally { DebugExitDecision(134); }
					switch (alt134)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:449:62: WS
						{
						DebugLocation(449, 62);
						WS387=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3020); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS387);


						}
						break;

					}
					} finally { DebugExitSubRule(134); }

					DebugLocation(449, 66);
					STRING388=(IToken)Match(input,STRING,Follow._STRING_in_specialfunctioncall3023); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_STRING.Add(STRING388);

					DebugLocation(449, 73);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:449:73: ( WS )?
					int alt135=2;
					try { DebugEnterSubRule(135);
					try { DebugEnterDecision(135, decisionCanBacktrack[135]);
					int LA135_0 = input.LA(1);

					if ((LA135_0==WS))
					{
						alt135 = 1;
					}
					} finally { DebugExitDecision(135); }
					switch (alt135)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:449:73: WS
						{
						DebugLocation(449, 73);
						WS389=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3025); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_WS.Add(WS389);


						}
						break;

					}
					} finally { DebugExitSubRule(135); }


					}
					break;

				}
				} finally { DebugExitSubRule(136); }

				DebugLocation(449, 79);
				char_literal390=(IToken)Match(input,173,Follow._173_in_specialfunctioncall3030); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_173.Add(char_literal390);



				{
				// AST REWRITE
				// elements: expression, STRING, TOKEN
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 449:83: -> ^( T_CONVERT TOKEN expression ( STRING )? )
				{
					DebugLocation(449, 86);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:449:86: ^( T_CONVERT TOKEN expression ( STRING )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(449, 88);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CONVERT, "T_CONVERT"), root_1);

					DebugLocation(449, 98);
					adaptor.AddChild(root_1, stream_TOKEN.NextNode());
					DebugLocation(449, 104);
					adaptor.AddChild(root_1, stream_expression.NextTree());
					DebugLocation(449, 115);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:449:115: ( STRING )?
					if (stream_STRING.HasNext)
					{
						DebugLocation(449, 115);
						adaptor.AddChild(root_1, stream_STRING.NextNode());

					}
					stream_STRING.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:450:4: CAST ( WS )? '(' ( WS )? expression WS AS WS datatype ( WS )? ')'
				{
				DebugLocation(450, 4);
				CAST391=(IToken)Match(input,CAST,Follow._CAST_in_specialfunctioncall3048); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CAST.Add(CAST391);

				DebugLocation(450, 9);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:450:9: ( WS )?
				int alt137=2;
				try { DebugEnterSubRule(137);
				try { DebugEnterDecision(137, decisionCanBacktrack[137]);
				int LA137_0 = input.LA(1);

				if ((LA137_0==WS))
				{
					alt137 = 1;
				}
				} finally { DebugExitDecision(137); }
				switch (alt137)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:450:9: WS
					{
					DebugLocation(450, 9);
					WS392=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3050); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS392);


					}
					break;

				}
				} finally { DebugExitSubRule(137); }

				DebugLocation(450, 13);
				char_literal393=(IToken)Match(input,172,Follow._172_in_specialfunctioncall3053); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_172.Add(char_literal393);

				DebugLocation(450, 17);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:450:17: ( WS )?
				int alt138=2;
				try { DebugEnterSubRule(138);
				try { DebugEnterDecision(138, decisionCanBacktrack[138]);
				int LA138_0 = input.LA(1);

				if ((LA138_0==WS))
				{
					alt138 = 1;
				}
				} finally { DebugExitDecision(138); }
				switch (alt138)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:450:17: WS
					{
					DebugLocation(450, 17);
					WS394=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3055); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS394);


					}
					break;

				}
				} finally { DebugExitSubRule(138); }

				DebugLocation(450, 21);
				PushFollow(Follow._expression_in_specialfunctioncall3058);
				expression395=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression395.Tree);
				DebugLocation(450, 32);
				WS396=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3060); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS396);

				DebugLocation(450, 35);
				AS397=(IToken)Match(input,AS,Follow._AS_in_specialfunctioncall3062); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_AS.Add(AS397);

				DebugLocation(450, 38);
				WS398=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3064); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS398);

				DebugLocation(450, 41);
				PushFollow(Follow._datatype_in_specialfunctioncall3066);
				datatype399=datatype();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_datatype.Add(datatype399.Tree);
				DebugLocation(450, 50);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:450:50: ( WS )?
				int alt139=2;
				try { DebugEnterSubRule(139);
				try { DebugEnterDecision(139, decisionCanBacktrack[139]);
				int LA139_0 = input.LA(1);

				if ((LA139_0==WS))
				{
					alt139 = 1;
				}
				} finally { DebugExitDecision(139); }
				switch (alt139)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:450:50: WS
					{
					DebugLocation(450, 50);
					WS400=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3068); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS400);


					}
					break;

				}
				} finally { DebugExitSubRule(139); }

				DebugLocation(450, 54);
				char_literal401=(IToken)Match(input,173,Follow._173_in_specialfunctioncall3071); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_173.Add(char_literal401);



				{
				// AST REWRITE
				// elements: expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 450:58: -> ^( T_CONVERT TOKEN expression )
				{
					DebugLocation(450, 61);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:450:61: ^( T_CONVERT TOKEN expression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(450, 63);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CONVERT, "T_CONVERT"), root_1);

					DebugLocation(450, 73);
					adaptor.AddChild(root_1, (object)adaptor.Create(TOKEN, "TOKEN"));
					DebugLocation(450, 79);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:451:4: DATEADD ( WS )? '(' ( WS )? datepart ( WS )? ',' ( WS )? expression ( WS )? ',' ( WS )? expression ( WS )? ')'
				{
				DebugLocation(451, 4);
				DATEADD402=(IToken)Match(input,DATEADD,Follow._DATEADD_in_specialfunctioncall3086); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DATEADD.Add(DATEADD402);

				DebugLocation(451, 12);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:451:12: ( WS )?
				int alt140=2;
				try { DebugEnterSubRule(140);
				try { DebugEnterDecision(140, decisionCanBacktrack[140]);
				int LA140_0 = input.LA(1);

				if ((LA140_0==WS))
				{
					alt140 = 1;
				}
				} finally { DebugExitDecision(140); }
				switch (alt140)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:451:12: WS
					{
					DebugLocation(451, 12);
					WS403=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3088); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS403);


					}
					break;

				}
				} finally { DebugExitSubRule(140); }

				DebugLocation(451, 16);
				char_literal404=(IToken)Match(input,172,Follow._172_in_specialfunctioncall3091); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_172.Add(char_literal404);

				DebugLocation(451, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:451:20: ( WS )?
				int alt141=2;
				try { DebugEnterSubRule(141);
				try { DebugEnterDecision(141, decisionCanBacktrack[141]);
				int LA141_0 = input.LA(1);

				if ((LA141_0==WS))
				{
					alt141 = 1;
				}
				} finally { DebugExitDecision(141); }
				switch (alt141)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:451:20: WS
					{
					DebugLocation(451, 20);
					WS405=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3093); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS405);


					}
					break;

				}
				} finally { DebugExitSubRule(141); }

				DebugLocation(451, 24);
				PushFollow(Follow._datepart_in_specialfunctioncall3096);
				datepart406=datepart();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_datepart.Add(datepart406.Tree);
				DebugLocation(451, 33);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:451:33: ( WS )?
				int alt142=2;
				try { DebugEnterSubRule(142);
				try { DebugEnterDecision(142, decisionCanBacktrack[142]);
				int LA142_0 = input.LA(1);

				if ((LA142_0==WS))
				{
					alt142 = 1;
				}
				} finally { DebugExitDecision(142); }
				switch (alt142)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:451:33: WS
					{
					DebugLocation(451, 33);
					WS407=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3098); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS407);


					}
					break;

				}
				} finally { DebugExitSubRule(142); }

				DebugLocation(451, 37);
				char_literal408=(IToken)Match(input,176,Follow._176_in_specialfunctioncall3101); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_176.Add(char_literal408);

				DebugLocation(451, 41);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:451:41: ( WS )?
				int alt143=2;
				try { DebugEnterSubRule(143);
				try { DebugEnterDecision(143, decisionCanBacktrack[143]);
				int LA143_0 = input.LA(1);

				if ((LA143_0==WS))
				{
					alt143 = 1;
				}
				} finally { DebugExitDecision(143); }
				switch (alt143)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:451:41: WS
					{
					DebugLocation(451, 41);
					WS409=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3103); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS409);


					}
					break;

				}
				} finally { DebugExitSubRule(143); }

				DebugLocation(451, 45);
				PushFollow(Follow._expression_in_specialfunctioncall3106);
				expression410=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression410.Tree);
				DebugLocation(451, 56);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:451:56: ( WS )?
				int alt144=2;
				try { DebugEnterSubRule(144);
				try { DebugEnterDecision(144, decisionCanBacktrack[144]);
				int LA144_0 = input.LA(1);

				if ((LA144_0==WS))
				{
					alt144 = 1;
				}
				} finally { DebugExitDecision(144); }
				switch (alt144)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:451:56: WS
					{
					DebugLocation(451, 56);
					WS411=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3108); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS411);


					}
					break;

				}
				} finally { DebugExitSubRule(144); }

				DebugLocation(451, 60);
				char_literal412=(IToken)Match(input,176,Follow._176_in_specialfunctioncall3111); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_176.Add(char_literal412);

				DebugLocation(451, 64);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:451:64: ( WS )?
				int alt145=2;
				try { DebugEnterSubRule(145);
				try { DebugEnterDecision(145, decisionCanBacktrack[145]);
				int LA145_0 = input.LA(1);

				if ((LA145_0==WS))
				{
					alt145 = 1;
				}
				} finally { DebugExitDecision(145); }
				switch (alt145)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:451:64: WS
					{
					DebugLocation(451, 64);
					WS413=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3113); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS413);


					}
					break;

				}
				} finally { DebugExitSubRule(145); }

				DebugLocation(451, 68);
				PushFollow(Follow._expression_in_specialfunctioncall3116);
				expression414=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression414.Tree);
				DebugLocation(451, 79);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:451:79: ( WS )?
				int alt146=2;
				try { DebugEnterSubRule(146);
				try { DebugEnterDecision(146, decisionCanBacktrack[146]);
				int LA146_0 = input.LA(1);

				if ((LA146_0==WS))
				{
					alt146 = 1;
				}
				} finally { DebugExitDecision(146); }
				switch (alt146)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:451:79: WS
					{
					DebugLocation(451, 79);
					WS415=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3118); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS415);


					}
					break;

				}
				} finally { DebugExitSubRule(146); }

				DebugLocation(451, 83);
				char_literal416=(IToken)Match(input,173,Follow._173_in_specialfunctioncall3121); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_173.Add(char_literal416);



				{
				// AST REWRITE
				// elements: DATEADD, datepart, expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 451:87: -> ^( T_FUNCTIONCALL DATEADD datepart ( expression )+ )
				{
					DebugLocation(451, 90);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:451:90: ^( T_FUNCTIONCALL DATEADD datepart ( expression )+ )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(451, 92);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(451, 107);
					adaptor.AddChild(root_1, stream_DATEADD.NextNode());
					DebugLocation(451, 115);
					adaptor.AddChild(root_1, stream_datepart.NextTree());
					DebugLocation(451, 124);
					if (!(stream_expression.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expression.HasNext )
					{
						DebugLocation(451, 124);
						adaptor.AddChild(root_1, stream_expression.NextTree());

					}
					stream_expression.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:452:4: DATEDIFF ( WS )? '(' ( WS )? datepart ( WS )? ',' ( WS )? expression ( WS )? ',' ( WS )? expression ( WS )? ')'
				{
				DebugLocation(452, 4);
				DATEDIFF417=(IToken)Match(input,DATEDIFF,Follow._DATEDIFF_in_specialfunctioncall3139); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DATEDIFF.Add(DATEDIFF417);

				DebugLocation(452, 13);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:452:13: ( WS )?
				int alt147=2;
				try { DebugEnterSubRule(147);
				try { DebugEnterDecision(147, decisionCanBacktrack[147]);
				int LA147_0 = input.LA(1);

				if ((LA147_0==WS))
				{
					alt147 = 1;
				}
				} finally { DebugExitDecision(147); }
				switch (alt147)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:452:13: WS
					{
					DebugLocation(452, 13);
					WS418=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3141); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS418);


					}
					break;

				}
				} finally { DebugExitSubRule(147); }

				DebugLocation(452, 17);
				char_literal419=(IToken)Match(input,172,Follow._172_in_specialfunctioncall3144); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_172.Add(char_literal419);

				DebugLocation(452, 21);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:452:21: ( WS )?
				int alt148=2;
				try { DebugEnterSubRule(148);
				try { DebugEnterDecision(148, decisionCanBacktrack[148]);
				int LA148_0 = input.LA(1);

				if ((LA148_0==WS))
				{
					alt148 = 1;
				}
				} finally { DebugExitDecision(148); }
				switch (alt148)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:452:21: WS
					{
					DebugLocation(452, 21);
					WS420=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3146); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS420);


					}
					break;

				}
				} finally { DebugExitSubRule(148); }

				DebugLocation(452, 25);
				PushFollow(Follow._datepart_in_specialfunctioncall3149);
				datepart421=datepart();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_datepart.Add(datepart421.Tree);
				DebugLocation(452, 34);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:452:34: ( WS )?
				int alt149=2;
				try { DebugEnterSubRule(149);
				try { DebugEnterDecision(149, decisionCanBacktrack[149]);
				int LA149_0 = input.LA(1);

				if ((LA149_0==WS))
				{
					alt149 = 1;
				}
				} finally { DebugExitDecision(149); }
				switch (alt149)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:452:34: WS
					{
					DebugLocation(452, 34);
					WS422=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3151); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS422);


					}
					break;

				}
				} finally { DebugExitSubRule(149); }

				DebugLocation(452, 38);
				char_literal423=(IToken)Match(input,176,Follow._176_in_specialfunctioncall3154); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_176.Add(char_literal423);

				DebugLocation(452, 42);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:452:42: ( WS )?
				int alt150=2;
				try { DebugEnterSubRule(150);
				try { DebugEnterDecision(150, decisionCanBacktrack[150]);
				int LA150_0 = input.LA(1);

				if ((LA150_0==WS))
				{
					alt150 = 1;
				}
				} finally { DebugExitDecision(150); }
				switch (alt150)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:452:42: WS
					{
					DebugLocation(452, 42);
					WS424=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3156); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS424);


					}
					break;

				}
				} finally { DebugExitSubRule(150); }

				DebugLocation(452, 46);
				PushFollow(Follow._expression_in_specialfunctioncall3159);
				expression425=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression425.Tree);
				DebugLocation(452, 57);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:452:57: ( WS )?
				int alt151=2;
				try { DebugEnterSubRule(151);
				try { DebugEnterDecision(151, decisionCanBacktrack[151]);
				int LA151_0 = input.LA(1);

				if ((LA151_0==WS))
				{
					alt151 = 1;
				}
				} finally { DebugExitDecision(151); }
				switch (alt151)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:452:57: WS
					{
					DebugLocation(452, 57);
					WS426=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3161); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS426);


					}
					break;

				}
				} finally { DebugExitSubRule(151); }

				DebugLocation(452, 61);
				char_literal427=(IToken)Match(input,176,Follow._176_in_specialfunctioncall3164); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_176.Add(char_literal427);

				DebugLocation(452, 65);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:452:65: ( WS )?
				int alt152=2;
				try { DebugEnterSubRule(152);
				try { DebugEnterDecision(152, decisionCanBacktrack[152]);
				int LA152_0 = input.LA(1);

				if ((LA152_0==WS))
				{
					alt152 = 1;
				}
				} finally { DebugExitDecision(152); }
				switch (alt152)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:452:65: WS
					{
					DebugLocation(452, 65);
					WS428=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3166); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS428);


					}
					break;

				}
				} finally { DebugExitSubRule(152); }

				DebugLocation(452, 69);
				PushFollow(Follow._expression_in_specialfunctioncall3169);
				expression429=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression429.Tree);
				DebugLocation(452, 80);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:452:80: ( WS )?
				int alt153=2;
				try { DebugEnterSubRule(153);
				try { DebugEnterDecision(153, decisionCanBacktrack[153]);
				int LA153_0 = input.LA(1);

				if ((LA153_0==WS))
				{
					alt153 = 1;
				}
				} finally { DebugExitDecision(153); }
				switch (alt153)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:452:80: WS
					{
					DebugLocation(452, 80);
					WS430=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3171); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS430);


					}
					break;

				}
				} finally { DebugExitSubRule(153); }

				DebugLocation(452, 84);
				char_literal431=(IToken)Match(input,173,Follow._173_in_specialfunctioncall3174); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_173.Add(char_literal431);



				{
				// AST REWRITE
				// elements: datepart, expression, DATEDIFF
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 452:88: -> ^( T_FUNCTIONCALL DATEDIFF datepart ( expression )+ )
				{
					DebugLocation(452, 91);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:452:91: ^( T_FUNCTIONCALL DATEDIFF datepart ( expression )+ )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(452, 93);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(452, 108);
					adaptor.AddChild(root_1, stream_DATEDIFF.NextNode());
					DebugLocation(452, 117);
					adaptor.AddChild(root_1, stream_datepart.NextTree());
					DebugLocation(452, 126);
					if (!(stream_expression.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expression.HasNext )
					{
						DebugLocation(452, 126);
						adaptor.AddChild(root_1, stream_expression.NextTree());

					}
					stream_expression.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:453:4: DATEPART ( WS )? '(' ( WS )? datepart ( WS )? ',' ( WS )? expression ( WS )? ')'
				{
				DebugLocation(453, 4);
				DATEPART432=(IToken)Match(input,DATEPART,Follow._DATEPART_in_specialfunctioncall3192); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DATEPART.Add(DATEPART432);

				DebugLocation(453, 13);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:453:13: ( WS )?
				int alt154=2;
				try { DebugEnterSubRule(154);
				try { DebugEnterDecision(154, decisionCanBacktrack[154]);
				int LA154_0 = input.LA(1);

				if ((LA154_0==WS))
				{
					alt154 = 1;
				}
				} finally { DebugExitDecision(154); }
				switch (alt154)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:453:13: WS
					{
					DebugLocation(453, 13);
					WS433=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3194); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS433);


					}
					break;

				}
				} finally { DebugExitSubRule(154); }

				DebugLocation(453, 17);
				char_literal434=(IToken)Match(input,172,Follow._172_in_specialfunctioncall3197); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_172.Add(char_literal434);

				DebugLocation(453, 21);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:453:21: ( WS )?
				int alt155=2;
				try { DebugEnterSubRule(155);
				try { DebugEnterDecision(155, decisionCanBacktrack[155]);
				int LA155_0 = input.LA(1);

				if ((LA155_0==WS))
				{
					alt155 = 1;
				}
				} finally { DebugExitDecision(155); }
				switch (alt155)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:453:21: WS
					{
					DebugLocation(453, 21);
					WS435=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3199); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS435);


					}
					break;

				}
				} finally { DebugExitSubRule(155); }

				DebugLocation(453, 25);
				PushFollow(Follow._datepart_in_specialfunctioncall3202);
				datepart436=datepart();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_datepart.Add(datepart436.Tree);
				DebugLocation(453, 34);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:453:34: ( WS )?
				int alt156=2;
				try { DebugEnterSubRule(156);
				try { DebugEnterDecision(156, decisionCanBacktrack[156]);
				int LA156_0 = input.LA(1);

				if ((LA156_0==WS))
				{
					alt156 = 1;
				}
				} finally { DebugExitDecision(156); }
				switch (alt156)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:453:34: WS
					{
					DebugLocation(453, 34);
					WS437=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3204); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS437);


					}
					break;

				}
				} finally { DebugExitSubRule(156); }

				DebugLocation(453, 38);
				char_literal438=(IToken)Match(input,176,Follow._176_in_specialfunctioncall3207); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_176.Add(char_literal438);

				DebugLocation(453, 42);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:453:42: ( WS )?
				int alt157=2;
				try { DebugEnterSubRule(157);
				try { DebugEnterDecision(157, decisionCanBacktrack[157]);
				int LA157_0 = input.LA(1);

				if ((LA157_0==WS))
				{
					alt157 = 1;
				}
				} finally { DebugExitDecision(157); }
				switch (alt157)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:453:42: WS
					{
					DebugLocation(453, 42);
					WS439=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3209); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS439);


					}
					break;

				}
				} finally { DebugExitSubRule(157); }

				DebugLocation(453, 46);
				PushFollow(Follow._expression_in_specialfunctioncall3212);
				expression440=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression440.Tree);
				DebugLocation(453, 57);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:453:57: ( WS )?
				int alt158=2;
				try { DebugEnterSubRule(158);
				try { DebugEnterDecision(158, decisionCanBacktrack[158]);
				int LA158_0 = input.LA(1);

				if ((LA158_0==WS))
				{
					alt158 = 1;
				}
				} finally { DebugExitDecision(158); }
				switch (alt158)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:453:57: WS
					{
					DebugLocation(453, 57);
					WS441=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall3214); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS441);


					}
					break;

				}
				} finally { DebugExitSubRule(158); }

				DebugLocation(453, 61);
				char_literal442=(IToken)Match(input,173,Follow._173_in_specialfunctioncall3217); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_173.Add(char_literal442);



				{
				// AST REWRITE
				// elements: datepart, expression, DATEPART
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 453:65: -> ^( T_FUNCTIONCALL DATEPART datepart expression )
				{
					DebugLocation(453, 68);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:453:68: ^( T_FUNCTIONCALL DATEPART datepart expression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(453, 70);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(453, 85);
					adaptor.AddChild(root_1, stream_DATEPART.NextNode());
					DebugLocation(453, 94);
					adaptor.AddChild(root_1, stream_datepart.NextTree());
					DebugLocation(453, 103);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("specialfunctioncall", 60);
			LeaveRule("specialfunctioncall", 60);
			LeaveRule_specialfunctioncall();
	    }
	 	DebugLocation(454, 1);
		} finally { DebugExitRule(GrammarFileName, "specialfunctioncall"); }
		return retval;

	}
	// $ANTLR end "specialfunctioncall"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_datepart() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_datepart() {}

	// $ANTLR start "datepart"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:456:1: datepart : TOKEN -> ^( T_DATEPART TOKEN ) ;
	[GrammarRule("datepart")]
	private AstParserRuleReturnScope<object, IToken> datepart()
	{
		EnterRule_datepart();
		EnterRule("datepart", 61);
		TraceIn("datepart", 61);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN443 = default(IToken);

	    object TOKEN443_tree = default(object);
	    RewriteRuleITokenStream stream_TOKEN=new RewriteRuleITokenStream(adaptor,"token TOKEN");

		try { DebugEnterRule(GrammarFileName, "datepart");
		DebugLocation(456, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:457:2: ( TOKEN -> ^( T_DATEPART TOKEN ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:457:4: TOKEN
			{
			DebugLocation(457, 4);
			TOKEN443=(IToken)Match(input,TOKEN,Follow._TOKEN_in_datepart3241); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_TOKEN.Add(TOKEN443);



			{
			// AST REWRITE
			// elements: TOKEN
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 457:10: -> ^( T_DATEPART TOKEN )
			{
				DebugLocation(457, 13);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:457:13: ^( T_DATEPART TOKEN )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(457, 15);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_DATEPART, "T_DATEPART"), root_1);

				DebugLocation(457, 26);
				adaptor.AddChild(root_1, stream_TOKEN.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("datepart", 61);
			LeaveRule("datepart", 61);
			LeaveRule_datepart();
	    }
	 	DebugLocation(458, 1);
		} finally { DebugExitRule(GrammarFileName, "datepart"); }
		return retval;

	}
	// $ANTLR end "datepart"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_number() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_number() {}

	// $ANTLR start "number"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:460:1: number : NUMBER ;
	[GrammarRule("number")]
	private AstParserRuleReturnScope<object, IToken> number()
	{
		EnterRule_number();
		EnterRule("number", 62);
		TraceIn("number", 62);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken NUMBER444 = default(IToken);

	    object NUMBER444_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "number");
		DebugLocation(460, 16);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:460:9: ( NUMBER )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:460:11: NUMBER
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(460, 11);
			NUMBER444=(IToken)Match(input,NUMBER,Follow._NUMBER_in_number3261); if (state.failed) return retval;
			if (state.backtracking == 0) {
			NUMBER444_tree = (object)adaptor.Create(NUMBER444);
			adaptor.AddChild(root_0, NUMBER444_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("number", 62);
			LeaveRule("number", 62);
			LeaveRule_number();
	    }
	 	DebugLocation(460, 16);
		} finally { DebugExitRule(GrammarFileName, "number"); }
		return retval;

	}
	// $ANTLR end "number"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_string() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_string() {}

	// $ANTLR start "string"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:462:1: string : STRING -> ^( T_STRING STRING ) ;
	[GrammarRule("string")]
	private AstParserRuleReturnScope<object, IToken> @string()
	{
		EnterRule_string();
		EnterRule("string", 63);
		TraceIn("string", 63);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken STRING445 = default(IToken);

	    object STRING445_tree = default(object);
	    RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");

		try { DebugEnterRule(GrammarFileName, "string");
		DebugLocation(462, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:462:8: ( STRING -> ^( T_STRING STRING ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:462:10: STRING
			{
			DebugLocation(462, 10);
			STRING445=(IToken)Match(input,STRING,Follow._STRING_in_string3269); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_STRING.Add(STRING445);



			{
			// AST REWRITE
			// elements: STRING
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 462:17: -> ^( T_STRING STRING )
			{
				DebugLocation(462, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:462:20: ^( T_STRING STRING )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(462, 22);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_STRING, "T_STRING"), root_1);

				DebugLocation(462, 31);
				adaptor.AddChild(root_1, stream_STRING.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("string", 63);
			LeaveRule("string", 63);
			LeaveRule_string();
	    }
	 	DebugLocation(463, 1);
		} finally { DebugExitRule(GrammarFileName, "string"); }
		return retval;

	}
	// $ANTLR end "string"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_datatype() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_datatype() {}

	// $ANTLR start "datatype"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:465:1: datatype : TOKEN ;
	[GrammarRule("datatype")]
	private AstParserRuleReturnScope<object, IToken> datatype()
	{
		EnterRule_datatype();
		EnterRule("datatype", 64);
		TraceIn("datatype", 64);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN446 = default(IToken);

	    object TOKEN446_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "datatype");
		DebugLocation(465, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:466:2: ( TOKEN )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:466:4: TOKEN
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(466, 4);
			TOKEN446=(IToken)Match(input,TOKEN,Follow._TOKEN_in_datatype3289); if (state.failed) return retval;
			if (state.backtracking == 0) {
			TOKEN446_tree = (object)adaptor.Create(TOKEN446);
			adaptor.AddChild(root_0, TOKEN446_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("datatype", 64);
			LeaveRule("datatype", 64);
			LeaveRule_datatype();
	    }
	 	DebugLocation(467, 1);
		} finally { DebugExitRule(GrammarFileName, "datatype"); }
		return retval;

	}
	// $ANTLR end "datatype"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_variable() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_variable() {}

	// $ANTLR start "variable"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:469:1: variable : VARIABLE -> ^( T_VARIABLE VARIABLE ) ;
	[GrammarRule("variable")]
	private AstParserRuleReturnScope<object, IToken> variable()
	{
		EnterRule_variable();
		EnterRule("variable", 65);
		TraceIn("variable", 65);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken VARIABLE447 = default(IToken);

	    object VARIABLE447_tree = default(object);
	    RewriteRuleITokenStream stream_VARIABLE=new RewriteRuleITokenStream(adaptor,"token VARIABLE");

		try { DebugEnterRule(GrammarFileName, "variable");
		DebugLocation(469, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:470:2: ( VARIABLE -> ^( T_VARIABLE VARIABLE ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:470:4: VARIABLE
			{
			DebugLocation(470, 4);
			VARIABLE447=(IToken)Match(input,VARIABLE,Follow._VARIABLE_in_variable3301); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_VARIABLE.Add(VARIABLE447);



			{
			// AST REWRITE
			// elements: VARIABLE
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 470:13: -> ^( T_VARIABLE VARIABLE )
			{
				DebugLocation(470, 16);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:470:16: ^( T_VARIABLE VARIABLE )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(470, 18);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_VARIABLE, "T_VARIABLE"), root_1);

				DebugLocation(470, 29);
				adaptor.AddChild(root_1, stream_VARIABLE.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variable", 65);
			LeaveRule("variable", 65);
			LeaveRule_variable();
	    }
	 	DebugLocation(471, 1);
		} finally { DebugExitRule(GrammarFileName, "variable"); }
		return retval;

	}
	// $ANTLR end "variable"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_case() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_case() {}

	// $ANTLR start "case"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:473:1: case : CASE WS ( expression WS )? ( case_when WS )* ( case_else WS )? END -> ^( T_CASE ( expression )? ( case_when )* ( case_else )? ) ;
	[GrammarRule("case")]
	private AstParserRuleReturnScope<object, IToken> @case()
	{
		EnterRule_case();
		EnterRule("case", 66);
		TraceIn("case", 66);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken CASE448 = default(IToken);
	    IToken WS449 = default(IToken);
	    IToken WS451 = default(IToken);
	    IToken WS453 = default(IToken);
	    IToken WS455 = default(IToken);
	    IToken END456 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression450 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> case_when452 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> case_else454 = default(AstParserRuleReturnScope<object, IToken>);

	    object CASE448_tree = default(object);
	    object WS449_tree = default(object);
	    object WS451_tree = default(object);
	    object WS453_tree = default(object);
	    object WS455_tree = default(object);
	    object END456_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_END=new RewriteRuleITokenStream(adaptor,"token END");
	    RewriteRuleITokenStream stream_CASE=new RewriteRuleITokenStream(adaptor,"token CASE");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_case_when=new RewriteRuleSubtreeStream(adaptor,"rule case_when");
	    RewriteRuleSubtreeStream stream_case_else=new RewriteRuleSubtreeStream(adaptor,"rule case_else");
		try { DebugEnterRule(GrammarFileName, "case");
		DebugLocation(473, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:474:2: ( CASE WS ( expression WS )? ( case_when WS )* ( case_else WS )? END -> ^( T_CASE ( expression )? ( case_when )* ( case_else )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:474:4: CASE WS ( expression WS )? ( case_when WS )* ( case_else WS )? END
			{
			DebugLocation(474, 4);
			CASE448=(IToken)Match(input,CASE,Follow._CASE_in_case3321); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CASE.Add(CASE448);

			DebugLocation(474, 9);
			WS449=(IToken)Match(input,WS,Follow._WS_in_case3323); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS449);

			DebugLocation(474, 12);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:474:12: ( expression WS )?
			int alt160=2;
			try { DebugEnterSubRule(160);
			try { DebugEnterDecision(160, decisionCanBacktrack[160]);
			int LA160_0 = input.LA(1);

			if (((LA160_0>=CASE && LA160_0<=CAST)||(LA160_0>=CONVERT && LA160_0<=COUNT)||(LA160_0>=DATEADD && LA160_0<=DATEPART)||LA160_0==EXISTS||(LA160_0>=NOT && LA160_0<=NUMBER)||LA160_0==SIMPLE_FILE||(LA160_0>=STRING && LA160_0<=SYSTEMVAR)||LA160_0==TOKEN||LA160_0==VARIABLE||LA160_0==172||LA160_0==175||LA160_0==177||LA160_0==191))
			{
				alt160 = 1;
			}
			} finally { DebugExitDecision(160); }
			switch (alt160)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:474:13: expression WS
				{
				DebugLocation(474, 13);
				PushFollow(Follow._expression_in_case3326);
				expression450=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression450.Tree);
				DebugLocation(474, 24);
				WS451=(IToken)Match(input,WS,Follow._WS_in_case3328); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS451);


				}
				break;

			}
			} finally { DebugExitSubRule(160); }

			DebugLocation(474, 29);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:474:29: ( case_when WS )*
			try { DebugEnterSubRule(161);
			while (true)
			{
				int alt161=2;
				try { DebugEnterDecision(161, decisionCanBacktrack[161]);
				int LA161_0 = input.LA(1);

				if ((LA161_0==WHEN))
				{
					alt161 = 1;
				}


				} finally { DebugExitDecision(161); }
				switch ( alt161 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:474:30: case_when WS
					{
					DebugLocation(474, 30);
					PushFollow(Follow._case_when_in_case3333);
					case_when452=case_when();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_case_when.Add(case_when452.Tree);
					DebugLocation(474, 40);
					WS453=(IToken)Match(input,WS,Follow._WS_in_case3335); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_WS.Add(WS453);


					}
					break;

				default:
					goto loop161;
				}
			}

			loop161:
				;

			} finally { DebugExitSubRule(161); }

			DebugLocation(474, 45);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:474:45: ( case_else WS )?
			int alt162=2;
			try { DebugEnterSubRule(162);
			try { DebugEnterDecision(162, decisionCanBacktrack[162]);
			int LA162_0 = input.LA(1);

			if ((LA162_0==ELSE))
			{
				alt162 = 1;
			}
			} finally { DebugExitDecision(162); }
			switch (alt162)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:474:46: case_else WS
				{
				DebugLocation(474, 46);
				PushFollow(Follow._case_else_in_case3340);
				case_else454=case_else();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_case_else.Add(case_else454.Tree);
				DebugLocation(474, 56);
				WS455=(IToken)Match(input,WS,Follow._WS_in_case3342); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_WS.Add(WS455);


				}
				break;

			}
			} finally { DebugExitSubRule(162); }

			DebugLocation(474, 61);
			END456=(IToken)Match(input,END,Follow._END_in_case3346); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_END.Add(END456);



			{
			// AST REWRITE
			// elements: case_when, case_else, expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 475:2: -> ^( T_CASE ( expression )? ( case_when )* ( case_else )? )
			{
				DebugLocation(475, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:475:5: ^( T_CASE ( expression )? ( case_when )* ( case_else )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(475, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CASE, "T_CASE"), root_1);

				DebugLocation(475, 14);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:475:14: ( expression )?
				if (stream_expression.HasNext)
				{
					DebugLocation(475, 14);
					adaptor.AddChild(root_1, stream_expression.NextTree());

				}
				stream_expression.Reset();
				DebugLocation(475, 26);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:475:26: ( case_when )*
				while ( stream_case_when.HasNext )
				{
					DebugLocation(475, 26);
					adaptor.AddChild(root_1, stream_case_when.NextTree());

				}
				stream_case_when.Reset();
				DebugLocation(475, 37);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:475:37: ( case_else )?
				if (stream_case_else.HasNext)
				{
					DebugLocation(475, 37);
					adaptor.AddChild(root_1, stream_case_else.NextTree());

				}
				stream_case_else.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("case", 66);
			LeaveRule("case", 66);
			LeaveRule_case();
	    }
	 	DebugLocation(476, 1);
		} finally { DebugExitRule(GrammarFileName, "case"); }
		return retval;

	}
	// $ANTLR end "case"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_case_when() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_case_when() {}

	// $ANTLR start "case_when"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:478:1: case_when : WHEN WS a= expression WS THEN WS b= expression -> ^( T_CASE_WHEN $a $b) ;
	[GrammarRule("case_when")]
	private AstParserRuleReturnScope<object, IToken> case_when()
	{
		EnterRule_case_when();
		EnterRule("case_when", 67);
		TraceIn("case_when", 67);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WHEN457 = default(IToken);
	    IToken WS458 = default(IToken);
	    IToken WS459 = default(IToken);
	    IToken THEN460 = default(IToken);
	    IToken WS461 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);

	    object WHEN457_tree = default(object);
	    object WS458_tree = default(object);
	    object WS459_tree = default(object);
	    object THEN460_tree = default(object);
	    object WS461_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_THEN=new RewriteRuleITokenStream(adaptor,"token THEN");
	    RewriteRuleITokenStream stream_WHEN=new RewriteRuleITokenStream(adaptor,"token WHEN");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "case_when");
		DebugLocation(478, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:479:2: ( WHEN WS a= expression WS THEN WS b= expression -> ^( T_CASE_WHEN $a $b) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:479:4: WHEN WS a= expression WS THEN WS b= expression
			{
			DebugLocation(479, 4);
			WHEN457=(IToken)Match(input,WHEN,Follow._WHEN_in_case_when3374); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WHEN.Add(WHEN457);

			DebugLocation(479, 9);
			WS458=(IToken)Match(input,WS,Follow._WS_in_case_when3376); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS458);

			DebugLocation(479, 13);
			PushFollow(Follow._expression_in_case_when3380);
			a=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression.Add(a.Tree);
			DebugLocation(479, 25);
			WS459=(IToken)Match(input,WS,Follow._WS_in_case_when3382); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS459);

			DebugLocation(479, 28);
			THEN460=(IToken)Match(input,THEN,Follow._THEN_in_case_when3384); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_THEN.Add(THEN460);

			DebugLocation(479, 33);
			WS461=(IToken)Match(input,WS,Follow._WS_in_case_when3386); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS461);

			DebugLocation(479, 37);
			PushFollow(Follow._expression_in_case_when3390);
			b=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression.Add(b.Tree);


			{
			// AST REWRITE
			// elements: a, b
			// token labels: 
			// rule labels: retval, b, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 480:2: -> ^( T_CASE_WHEN $a $b)
			{
				DebugLocation(480, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:480:5: ^( T_CASE_WHEN $a $b)
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(480, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CASE_WHEN, "T_CASE_WHEN"), root_1);

				DebugLocation(480, 20);
				adaptor.AddChild(root_1, stream_a.NextTree());
				DebugLocation(480, 23);
				adaptor.AddChild(root_1, stream_b.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("case_when", 67);
			LeaveRule("case_when", 67);
			LeaveRule_case_when();
	    }
	 	DebugLocation(481, 1);
		} finally { DebugExitRule(GrammarFileName, "case_when"); }
		return retval;

	}
	// $ANTLR end "case_when"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_case_else() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_case_else() {}

	// $ANTLR start "case_else"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:483:1: case_else : ELSE WS expression -> ^( T_CASE_ELSE expression ) ;
	[GrammarRule("case_else")]
	private AstParserRuleReturnScope<object, IToken> case_else()
	{
		EnterRule_case_else();
		EnterRule("case_else", 68);
		TraceIn("case_else", 68);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken ELSE462 = default(IToken);
	    IToken WS463 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression464 = default(AstParserRuleReturnScope<object, IToken>);

	    object ELSE462_tree = default(object);
	    object WS463_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_ELSE=new RewriteRuleITokenStream(adaptor,"token ELSE");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "case_else");
		DebugLocation(483, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:484:2: ( ELSE WS expression -> ^( T_CASE_ELSE expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:484:4: ELSE WS expression
			{
			DebugLocation(484, 4);
			ELSE462=(IToken)Match(input,ELSE,Follow._ELSE_in_case_else3415); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ELSE.Add(ELSE462);

			DebugLocation(484, 9);
			WS463=(IToken)Match(input,WS,Follow._WS_in_case_else3417); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WS.Add(WS463);

			DebugLocation(484, 12);
			PushFollow(Follow._expression_in_case_else3419);
			expression464=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression.Add(expression464.Tree);


			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 485:2: -> ^( T_CASE_ELSE expression )
			{
				DebugLocation(485, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:485:5: ^( T_CASE_ELSE expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(485, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CASE_ELSE, "T_CASE_ELSE"), root_1);

				DebugLocation(485, 19);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("case_else", 68);
			LeaveRule("case_else", 68);
			LeaveRule_case_else();
	    }
	 	DebugLocation(486, 1);
		} finally { DebugExitRule(GrammarFileName, "case_else"); }
		return retval;

	}
	// $ANTLR end "case_else"
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred1_gql_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred1_gql_fragment() {}

	// $ANTLR start synpred1_gql
	public void synpred1_gql_fragment()
	{
		EnterRule_synpred1_gql_fragment();
		EnterRule("synpred1_gql_fragment", 69);
		TraceIn("synpred1_gql_fragment", 69);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:150:4: ( '(' )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:150:5: '('
			{
			DebugLocation(150, 5);
			Match(input,172,Follow._172_in_synpred1_gql607); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred1_gql_fragment", 69);
			LeaveRule("synpred1_gql_fragment", 69);
			LeaveRule_synpred1_gql_fragment();
		}
	}
	// $ANTLR end synpred1_gql
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred2_gql_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred2_gql_fragment() {}

	// $ANTLR start synpred2_gql
	public void synpred2_gql_fragment()
	{
		EnterRule_synpred2_gql_fragment();
		EnterRule("synpred2_gql_fragment", 70);
		TraceIn("synpred2_gql_fragment", 70);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:329:4: ( SELECT )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:329:5: SELECT
			{
			DebugLocation(329, 5);
			Match(input,SELECT,Follow._SELECT_in_synpred2_gql1834); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred2_gql_fragment", 70);
			LeaveRule("synpred2_gql_fragment", 70);
			LeaveRule_synpred2_gql_fragment();
		}
	}
	// $ANTLR end synpred2_gql
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_synpred3_gql_fragment() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_synpred3_gql_fragment() {}

	// $ANTLR start synpred3_gql
	public void synpred3_gql_fragment()
	{
		EnterRule_synpred3_gql_fragment();
		EnterRule("synpred3_gql_fragment", 71);
		TraceIn("synpred3_gql_fragment", 71);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:421:4: ( subquery )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:421:5: subquery
			{
			DebugLocation(421, 5);
			PushFollow(Follow._subquery_in_synpred3_gql2675);
			subquery();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred3_gql_fragment", 71);
			LeaveRule("synpred3_gql_fragment", 71);
			LeaveRule_synpred3_gql_fragment();
		}
	}
	// $ANTLR end synpred3_gql
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _WS_in_parse406 = new BitSet(new ulong[]{0xC000000088400040UL,0x0UL,0x100010000000UL});
		public static readonly BitSet _commands_in_parse410 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_parse412 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_parse417 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _command_in_commands440 = new BitSet(new ulong[]{0x2UL,0x0UL,0x10000800000000UL});
		public static readonly BitSet _WS_in_commands443 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000000000UL});
		public static readonly BitSet _180_in_commands446 = new BitSet(new ulong[]{0xC000000088400040UL,0x0UL,0x100810000000UL});
		public static readonly BitSet _WS_in_commands448 = new BitSet(new ulong[]{0xC000000088400040UL,0x0UL,0x100010000000UL});
		public static readonly BitSet _command_in_commands451 = new BitSet(new ulong[]{0x2UL,0x0UL,0x10000800000000UL});
		public static readonly BitSet _WS_in_commands456 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000000000UL});
		public static readonly BitSet _180_in_commands459 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _select_command_in_command479 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _use_command_in_command484 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declare_command_in_command489 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_command_in_command494 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _create_view_command_in_command499 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _alter_view_command_in_command504 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _drop_view_command_in_command509 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _drop_table_command_in_command514 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _select_command_union_in_select_command528 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_select_command531 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _orderby_clause_in_select_command533 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _select_command_simple_in_select_command_union565 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_select_command_union572 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _UNION_in_select_command_union574 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_select_command_union576 = new BitSet(new ulong[]{0x4000000000000000UL,0x0UL,0x100000000000UL});
		public static readonly BitSet _select_command_simple_in_select_command_union580 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800000000UL});
		public static readonly BitSet _subquery_in_select_command_simple612 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SELECT_in_select_command_simple617 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_select_command_simple620 = new BitSet(new ulong[]{0x40000020UL});
		public static readonly BitSet _distinct_clause_in_select_command_simple622 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_select_command_simple627 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _top_clause_in_select_command_simple629 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_select_command_simple634 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _bottom_clause_in_select_command_simple636 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_select_command_simple640 = new BitSet(new ulong[]{0x30000807330000UL,0x8DUL,0x8002D00040000000UL});
		public static readonly BitSet _column_list_in_select_command_simple642 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_select_command_simple645 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _into_clause_in_select_command_simple647 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_select_command_simple652 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _from_clause_in_select_command_simple654 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_select_command_simple659 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000000UL});
		public static readonly BitSet _where_clause_in_select_command_simple661 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_select_command_simple666 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _groupby_clause_in_select_command_simple668 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_select_command_simple673 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _having_clause_in_select_command_simple675 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DISTINCT_in_distinct_clause723 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ALL_in_distinct_clause732 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOP_in_top_clause748 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_top_clause750 = new BitSet(new ulong[]{0x20000807330000UL,0x8DUL,0x100040000000UL});
		public static readonly BitSet _expression_atom_in_top_clause752 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BOTTOM_in_bottom_clause773 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_bottom_clause775 = new BitSet(new ulong[]{0x20000807330000UL,0x8DUL,0x100040000000UL});
		public static readonly BitSet _expression_atom_in_bottom_clause777 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _column_in_column_list798 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1000800000000UL});
		public static readonly BitSet _WS_in_column_list801 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000000UL});
		public static readonly BitSet _176_in_column_list804 = new BitSet(new ulong[]{0x30000807330000UL,0x8DUL,0x8002D00840000000UL});
		public static readonly BitSet _WS_in_column_list806 = new BitSet(new ulong[]{0x30000807330000UL,0x8DUL,0x8002D00040000000UL});
		public static readonly BitSet _column_in_column_list809 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1000800000000UL});
		public static readonly BitSet _all_columns_in_column833 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_column838 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_column841 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _SIMPLE_FILE_in_column843 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _table_alias_in_all_columns868 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000800000000UL});
		public static readonly BitSet _WS_in_all_columns870 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000000000UL});
		public static readonly BitSet _178_in_all_columns873 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400800000000UL});
		public static readonly BitSet _WS_in_all_columns875 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000000000UL});
		public static readonly BitSet _174_in_all_columns880 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INTO_in_into_clause900 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_into_clause902 = new BitSet(new ulong[]{0x0UL,0x1UL,0x800000000000000UL});
		public static readonly BitSet _file_in_into_clause904 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FROM_in_from_clause924 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_from_clause926 = new BitSet(new ulong[]{0x0UL,0x85UL,0x800100000000000UL});
		public static readonly BitSet _from_clause_item_in_from_clause928 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1000800000000UL});
		public static readonly BitSet _WS_in_from_clause931 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000000UL});
		public static readonly BitSet _176_in_from_clause934 = new BitSet(new ulong[]{0x0UL,0x85UL,0x800100800000000UL});
		public static readonly BitSet _WS_in_from_clause936 = new BitSet(new ulong[]{0x0UL,0x85UL,0x800100000000000UL});
		public static readonly BitSet _from_clause_item_in_from_clause939 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1000800000000UL});
		public static readonly BitSet _WS_in_from_clause944 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _table_alias_in_from_clause946 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_from_clause_item973 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _file_in_from_clause_item986 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _subquery_in_from_clause_item991 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _view_name_in_from_clause_item996 = new BitSet(new ulong[]{0x2UL,0x0UL,0x100800000000UL});
		public static readonly BitSet _WS_in_from_clause_item999 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000UL});
		public static readonly BitSet _172_in_from_clause_item1002 = new BitSet(new ulong[]{0x30000807330000UL,0x8DUL,0x8002B00040000000UL});
		public static readonly BitSet _expression_list_in_from_clause_item1004 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _173_in_from_clause_item1007 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _172_in_subquery1032 = new BitSet(new ulong[]{0x4000000000000000UL,0x0UL,0x100800000000UL});
		public static readonly BitSet _WS_in_subquery1034 = new BitSet(new ulong[]{0x4000000000000000UL,0x0UL,0x100000000000UL});
		public static readonly BitSet _select_command_in_subquery1037 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200800000000UL});
		public static readonly BitSet _WS_in_subquery1039 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _173_in_subquery1042 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _187_in_file1061 = new BitSet(new ulong[]{0x0UL,0x4UL,0x840000000UL});
		public static readonly BitSet _WS_in_file1063 = new BitSet(new ulong[]{0x0UL,0x4UL,0x40000000UL});
		public static readonly BitSet _file_spec_in_file1066 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000800000000UL});
		public static readonly BitSet _WS_in_file1069 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _file_option_in_file1071 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000800000000UL});
		public static readonly BitSet _WS_in_file1075 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000000000UL});
		public static readonly BitSet _188_in_file1078 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _187_in_file1095 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100800000000UL});
		public static readonly BitSet _WS_in_file1097 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000UL});
		public static readonly BitSet _subquery_in_file1100 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000800000000UL});
		public static readonly BitSet _WS_in_file1102 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000000000UL});
		public static readonly BitSet _188_in_file1105 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SIMPLE_FILE_in_file1118 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _string_in_file_spec1137 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_in_file_spec1142 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _177_in_file_option1154 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _file_option_name_in_file_option1156 = new BitSet(new ulong[]{0x2UL,0x0UL,0x100000800000000UL});
		public static readonly BitSet _WS_in_file_option1160 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000000UL});
		public static readonly BitSet _184_in_file_option1163 = new BitSet(new ulong[]{0x20000000000000UL,0x84UL,0x840000000UL});
		public static readonly BitSet _WS_in_file_option1165 = new BitSet(new ulong[]{0x20000000000000UL,0x84UL,0x40000000UL});
		public static readonly BitSet _file_option_value_in_file_option1168 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_file_option_name1192 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_file_option_value1204 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_file_option_value1208 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_file_option_value1212 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_in_file_option_value1216 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHERE_in_where_clause1228 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_where_clause1230 = new BitSet(new ulong[]{0x30000807330000UL,0x8DUL,0x8002900040000000UL});
		public static readonly BitSet _expression_in_where_clause1232 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GROUP_in_groupby_clause1251 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_groupby_clause1253 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _BY_in_groupby_clause1255 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_groupby_clause1257 = new BitSet(new ulong[]{0x30000807330000UL,0x8DUL,0x8002900040000000UL});
		public static readonly BitSet _orderby_column_list_in_groupby_clause1259 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _HAVING_in_having_clause1280 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_having_clause1282 = new BitSet(new ulong[]{0x30000807330000UL,0x8DUL,0x8002900040000000UL});
		public static readonly BitSet _expression_in_having_clause1284 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ORDER_in_orderby_clause1305 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_orderby_clause1307 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _BY_in_orderby_clause1309 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_orderby_clause1311 = new BitSet(new ulong[]{0x30000807330000UL,0x8DUL,0x8002900040000000UL});
		public static readonly BitSet _orderby_column_list_in_orderby_clause1313 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _orderby_column_in_orderby_column_list1334 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1000800000000UL});
		public static readonly BitSet _WS_in_orderby_column_list1337 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000000UL});
		public static readonly BitSet _176_in_orderby_column_list1340 = new BitSet(new ulong[]{0x30000807330000UL,0x8DUL,0x8002900840000000UL});
		public static readonly BitSet _WS_in_orderby_column_list1342 = new BitSet(new ulong[]{0x30000807330000UL,0x8DUL,0x8002900040000000UL});
		public static readonly BitSet _orderby_column_in_orderby_column_list1345 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1000800000000UL});
		public static readonly BitSet _expression_in_orderby_column1365 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_orderby_column1368 = new BitSet(new ulong[]{0x200000010000400UL});
		public static readonly BitSet _orderby_direction_in_orderby_column1370 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASC_in_orderby_direction1395 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DESC_in_orderby_direction1404 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ORIG_in_orderby_direction1413 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _USE_in_use_command1431 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_use_command1433 = new BitSet(new ulong[]{0x0UL,0x1UL,0x800000000000000UL});
		public static readonly BitSet _file_in_use_command1435 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DECLARE_in_declare_command1457 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_declare_command1459 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _declaration_list_in_declare_command1461 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_in_declaration_list1478 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1000800000000UL});
		public static readonly BitSet _WS_in_declaration_list1481 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000000UL});
		public static readonly BitSet _176_in_declaration_list1484 = new BitSet(new ulong[]{0x0UL,0x0UL,0x840000000UL});
		public static readonly BitSet _WS_in_declaration_list1486 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _declaration_in_declaration_list1489 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1000800000000UL});
		public static readonly BitSet _variable_in_declaration1513 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_declaration1515 = new BitSet(new ulong[]{0x200UL,0x80UL});
		public static readonly BitSet _AS_in_declaration1518 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_declaration1520 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _datatype_in_declaration1524 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CREATE_in_create_view_command1549 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_create_view_command1551 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _VIEW_in_create_view_command1553 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_create_view_command1555 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _view_name_in_create_view_command1557 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100800000000UL});
		public static readonly BitSet _WS_in_create_view_command1560 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000UL});
		public static readonly BitSet _172_in_create_view_command1563 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _declaration_list_in_create_view_command1565 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _173_in_create_view_command1567 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_create_view_command1571 = new BitSet(new ulong[]{0x200UL});
		public static readonly BitSet _AS_in_create_view_command1573 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_create_view_command1575 = new BitSet(new ulong[]{0x4000000000000000UL,0x0UL,0x100000000000UL});
		public static readonly BitSet _select_command_in_create_view_command1577 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ALTER_in_alter_view_command1603 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_alter_view_command1605 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _VIEW_in_alter_view_command1607 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_alter_view_command1609 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _view_name_in_alter_view_command1611 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100800000000UL});
		public static readonly BitSet _WS_in_alter_view_command1614 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000UL});
		public static readonly BitSet _172_in_alter_view_command1617 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _declaration_list_in_alter_view_command1619 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _173_in_alter_view_command1621 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_alter_view_command1625 = new BitSet(new ulong[]{0x200UL});
		public static readonly BitSet _AS_in_alter_view_command1627 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_alter_view_command1629 = new BitSet(new ulong[]{0x4000000000000000UL,0x0UL,0x100000000000UL});
		public static readonly BitSet _select_command_in_alter_view_command1631 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DROP_in_drop_view_command1656 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_drop_view_command1658 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _VIEW_in_drop_view_command1660 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_drop_view_command1662 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _view_name_in_drop_view_command1664 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_view_name1684 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DROP_in_drop_table_command1706 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_drop_table_command1708 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _TABLE_in_drop_table_command1710 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_drop_table_command1712 = new BitSet(new ulong[]{0x0UL,0x1UL,0x800000000000000UL});
		public static readonly BitSet _file_in_drop_table_command1714 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SET_in_set_command1738 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_set_command1740 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _variable_in_set_command1742 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000800000000UL});
		public static readonly BitSet _WS_in_set_command1744 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000000UL});
		public static readonly BitSet _184_in_set_command1747 = new BitSet(new ulong[]{0x30000807330000UL,0x8DUL,0x8002900840000000UL});
		public static readonly BitSet _WS_in_set_command1749 = new BitSet(new ulong[]{0x30000807330000UL,0x8DUL,0x8002900040000000UL});
		public static readonly BitSet _expression_in_set_command1752 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SET_in_set_command1767 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_set_command1769 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _TOKEN_in_set_command1771 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_set_command1773 = new BitSet(new ulong[]{0x30000807330000UL,0x8DUL,0x8002900040000000UL});
		public static readonly BitSet _expression_in_set_command1775 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_expression_list1799 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1000800000000UL});
		public static readonly BitSet _WS_in_expression_list1802 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000000UL});
		public static readonly BitSet _176_in_expression_list1805 = new BitSet(new ulong[]{0x30000807330000UL,0x8DUL,0x8002900840000000UL});
		public static readonly BitSet _WS_in_expression_list1807 = new BitSet(new ulong[]{0x30000807330000UL,0x8DUL,0x8002900040000000UL});
		public static readonly BitSet _expression_in_expression_list1810 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1000800000000UL});
		public static readonly BitSet _select_command_in_expression_list_or_select_command1839 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_list_in_expression_list_or_select_command1844 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_7_in_expression1857 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_6_in_expression_71873 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_expression_71880 = new BitSet(new ulong[]{0x95080000001000UL,0x0UL,0x7E0038000000000UL});
		public static readonly BitSet _op_7_in_expression_71885 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_expression_71887 = new BitSet(new ulong[]{0x30000807330000UL,0x8DUL,0x8002900040000000UL});
		public static readonly BitSet _expression_6_in_expression_71891 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800000000UL});
		public static readonly BitSet _IN_in_expression_71910 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100800000000UL});
		public static readonly BitSet _WS_in_expression_71912 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000UL});
		public static readonly BitSet _172_in_expression_71915 = new BitSet(new ulong[]{0x4030000807330000UL,0x8DUL,0x8002900840000000UL});
		public static readonly BitSet _WS_in_expression_71917 = new BitSet(new ulong[]{0x4030000807330000UL,0x8DUL,0x8002900040000000UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_71920 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200800000000UL});
		public static readonly BitSet _WS_in_expression_71922 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _173_in_expression_71925 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800000000UL});
		public static readonly BitSet _NOT_in_expression_71943 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_expression_71945 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _IN_in_expression_71947 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100800000000UL});
		public static readonly BitSet _WS_in_expression_71949 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000UL});
		public static readonly BitSet _172_in_expression_71952 = new BitSet(new ulong[]{0x4030000807330000UL,0x8DUL,0x8002900840000000UL});
		public static readonly BitSet _WS_in_expression_71954 = new BitSet(new ulong[]{0x4030000807330000UL,0x8DUL,0x8002900040000000UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_71958 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200800000000UL});
		public static readonly BitSet _WS_in_expression_71961 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _173_in_expression_71964 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800000000UL});
		public static readonly BitSet _op_4_in_expression_71982 = new BitSet(new ulong[]{0x100UL,0x2UL,0x800000000UL});
		public static readonly BitSet _WS_in_expression_71984 = new BitSet(new ulong[]{0x100UL,0x2UL});
		public static readonly BitSet _SOME_in_expression_71988 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100800000000UL});
		public static readonly BitSet _ANY_in_expression_71992 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100800000000UL});
		public static readonly BitSet _WS_in_expression_71995 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000UL});
		public static readonly BitSet _172_in_expression_71998 = new BitSet(new ulong[]{0x4030000807330000UL,0x8DUL,0x8002900040000000UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_72000 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _173_in_expression_72002 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800000000UL});
		public static readonly BitSet _op_4_in_expression_72022 = new BitSet(new ulong[]{0x20UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_expression_72024 = new BitSet(new ulong[]{0x20UL});
		public static readonly BitSet _ALL_in_expression_72027 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100800000000UL});
		public static readonly BitSet _WS_in_expression_72029 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000UL});
		public static readonly BitSet _172_in_expression_72032 = new BitSet(new ulong[]{0x4030000807330000UL,0x8DUL,0x8002900040000000UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_72034 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _173_in_expression_72036 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800000000UL});
		public static readonly BitSet _OR_in_op_72066 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BETWEEN_in_op_72075 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_72084 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_op_72086 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _BETWEEN_in_op_72088 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_5_in_expression_62107 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_expression_62114 = new BitSet(new ulong[]{0x80UL});
		public static readonly BitSet _op_6_in_expression_62116 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_expression_62118 = new BitSet(new ulong[]{0x30000807330000UL,0x8DUL,0x8002900040000000UL});
		public static readonly BitSet _expression_5_in_expression_62122 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800000000UL});
		public static readonly BitSet _AND_in_op_62150 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _op_5_in_expression_52168 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_expression_52170 = new BitSet(new ulong[]{0x30000807330000UL,0x8DUL,0x8002900040000000UL});
		public static readonly BitSet _expression_5_in_expression_52172 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_4_in_expression_52187 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_52198 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_3_in_expression_42217 = new BitSet(new ulong[]{0x15000000000002UL,0x0UL,0x7E0038800000000UL});
		public static readonly BitSet _WS_in_expression_42224 = new BitSet(new ulong[]{0x15000000000000UL,0x0UL,0x7E0038000000000UL});
		public static readonly BitSet _op_4_in_expression_42227 = new BitSet(new ulong[]{0x20000807330000UL,0x8DUL,0x8002900840000000UL});
		public static readonly BitSet _WS_in_expression_42229 = new BitSet(new ulong[]{0x20000807330000UL,0x8DUL,0x8002900040000000UL});
		public static readonly BitSet _expression_3_in_expression_42234 = new BitSet(new ulong[]{0x15000000000002UL,0x0UL,0x7E0038800000000UL});
		public static readonly BitSet _184_in_op_42260 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _186_in_op_42269 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _182_in_op_42279 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _183_in_op_42289 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _168_in_op_42298 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _169_in_op_42307 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _167_in_op_42316 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _185_in_op_42325 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _181_in_op_42335 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LIKE_in_op_42344 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_42353 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_op_42355 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _LIKE_in_op_42357 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MATCH_in_op_42366 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_42375 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_op_42377 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _MATCH_in_op_42379 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_2_in_expression_32398 = new BitSet(new ulong[]{0x2UL,0x0UL,0x6002880800000000UL});
		public static readonly BitSet _WS_in_expression_32405 = new BitSet(new ulong[]{0x0UL,0x0UL,0x6002880000000000UL});
		public static readonly BitSet _op_3_in_expression_32408 = new BitSet(new ulong[]{0x20000807330000UL,0x8DUL,0x8002900840000000UL});
		public static readonly BitSet _WS_in_expression_32410 = new BitSet(new ulong[]{0x20000807330000UL,0x8DUL,0x8002900040000000UL});
		public static readonly BitSet _expression_2_in_expression_32415 = new BitSet(new ulong[]{0x2UL,0x0UL,0x6002880800000000UL});
		public static readonly BitSet _175_in_op_32441 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _177_in_op_32450 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _171_in_op_32459 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _190_in_op_32468 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _189_in_op_32477 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_1_in_expression_22497 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8440800000000UL});
		public static readonly BitSet _WS_in_expression_22504 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8440000000000UL});
		public static readonly BitSet _op_2_in_expression_22507 = new BitSet(new ulong[]{0x20000807330000UL,0x8DUL,0x8002900840000000UL});
		public static readonly BitSet _WS_in_expression_22509 = new BitSet(new ulong[]{0x20000807330000UL,0x8DUL,0x8002900040000000UL});
		public static readonly BitSet _expression_1_in_expression_22514 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8440800000000UL});
		public static readonly BitSet _174_in_op_22540 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _179_in_op_22549 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _170_in_op_22558 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _op_1_in_expression_12574 = new BitSet(new ulong[]{0x20000807330000UL,0x8DUL,0x8002900840000000UL});
		public static readonly BitSet _WS_in_expression_12576 = new BitSet(new ulong[]{0x20000807330000UL,0x8DUL,0x8002900040000000UL});
		public static readonly BitSet _expression_1_in_expression_12579 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_atom_in_expression_12594 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _191_in_op_12604 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _175_in_op_12614 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _177_in_op_12623 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _number_in_expression_atom2638 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _string_in_expression_atom2651 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SYSTEMVAR_in_expression_atom2656 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_in_expression_atom2669 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _subquery_in_expression_atom2680 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _172_in_expression_atom2685 = new BitSet(new ulong[]{0x30000807330000UL,0x8DUL,0x8002900040000000UL});
		public static readonly BitSet _expression_in_expression_atom2687 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _173_in_expression_atom2689 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functioncall_or_column_in_expression_atom2698 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _specialfunctioncall_in_expression_atom2703 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _case_in_expression_atom2708 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXISTS_in_expression_atom2713 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100800000000UL});
		public static readonly BitSet _WS_in_expression_atom2715 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000UL});
		public static readonly BitSet _172_in_expression_atom2718 = new BitSet(new ulong[]{0x4000000000000000UL,0x0UL,0x100800000000UL});
		public static readonly BitSet _WS_in_expression_atom2720 = new BitSet(new ulong[]{0x4000000000000000UL,0x0UL,0x100000000000UL});
		public static readonly BitSet _select_command_in_expression_atom2723 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200800000000UL});
		public static readonly BitSet _WS_in_expression_atom2725 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _173_in_expression_atom2728 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_functioncall_or_column2748 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100800000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2750 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000UL});
		public static readonly BitSet _172_in_functioncall_or_column2753 = new BitSet(new ulong[]{0x30000807330000UL,0x8DUL,0x8002B00840000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2755 = new BitSet(new ulong[]{0x30000807330000UL,0x8DUL,0x8002B00040000000UL});
		public static readonly BitSet _expression_in_functioncall_or_column2759 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1200800000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2761 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1200000000000UL});
		public static readonly BitSet _176_in_functioncall_or_column2765 = new BitSet(new ulong[]{0x30000807330000UL,0x8DUL,0x8002900840000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2767 = new BitSet(new ulong[]{0x30000807330000UL,0x8DUL,0x8002900040000000UL});
		public static readonly BitSet _expression_in_functioncall_or_column2770 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1200800000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2772 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1200000000000UL});
		public static readonly BitSet _173_in_functioncall_or_column2779 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COUNT_in_functioncall_or_column2795 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100800000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2797 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000UL});
		public static readonly BitSet _172_in_functioncall_or_column2800 = new BitSet(new ulong[]{0x30000807330000UL,0x8DUL,0x8002900840000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2802 = new BitSet(new ulong[]{0x30000807330000UL,0x8DUL,0x8002900040000000UL});
		public static readonly BitSet _expression_in_functioncall_or_column2805 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200800000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2807 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _173_in_functioncall_or_column2810 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COUNT_in_functioncall_or_column2825 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100800000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2827 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000UL});
		public static readonly BitSet _172_in_functioncall_or_column2830 = new BitSet(new ulong[]{0x40000000UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2832 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _DISTINCT_in_functioncall_or_column2835 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2837 = new BitSet(new ulong[]{0x30000807330000UL,0x8DUL,0x8002900040000000UL});
		public static readonly BitSet _expression_in_functioncall_or_column2839 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200800000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2841 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _173_in_functioncall_or_column2844 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COUNT_in_functioncall_or_column2859 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100800000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2861 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000UL});
		public static readonly BitSet _172_in_functioncall_or_column2864 = new BitSet(new ulong[]{0x0UL,0x1UL,0x400800000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2866 = new BitSet(new ulong[]{0x0UL,0x1UL,0x400000000000UL});
		public static readonly BitSet _all_columns_in_functioncall_or_column2869 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200800000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2871 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _173_in_functioncall_or_column2874 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COUNT_in_functioncall_or_column2889 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100800000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2891 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000UL});
		public static readonly BitSet _172_in_functioncall_or_column2894 = new BitSet(new ulong[]{0x40000000UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2896 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _DISTINCT_in_functioncall_or_column2899 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2901 = new BitSet(new ulong[]{0x0UL,0x1UL,0x400000000000UL});
		public static readonly BitSet _all_columns_in_functioncall_or_column2903 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200800000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2905 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _173_in_functioncall_or_column2908 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _table_alias_in_functioncall_or_column2926 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000800000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2928 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000000000UL});
		public static readonly BitSet _178_in_functioncall_or_column2931 = new BitSet(new ulong[]{0x0UL,0x1UL,0x800000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2933 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _column_name_in_functioncall_or_column2938 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SIMPLE_FILE_in_column_name2961 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SIMPLE_FILE_in_table_alias2972 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CONVERT_in_specialfunctioncall2992 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100800000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2994 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000UL});
		public static readonly BitSet _172_in_specialfunctioncall2997 = new BitSet(new ulong[]{0x0UL,0x80UL,0x800000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2999 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _TOKEN_in_specialfunctioncall3002 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000800000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3004 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000000UL});
		public static readonly BitSet _176_in_specialfunctioncall3007 = new BitSet(new ulong[]{0x30000807330000UL,0x8DUL,0x8002900840000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3009 = new BitSet(new ulong[]{0x30000807330000UL,0x8DUL,0x8002900040000000UL});
		public static readonly BitSet _expression_in_specialfunctioncall3012 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1200800000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3014 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1200000000000UL});
		public static readonly BitSet _176_in_specialfunctioncall3018 = new BitSet(new ulong[]{0x0UL,0x4UL,0x800000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3020 = new BitSet(new ulong[]{0x0UL,0x4UL});
		public static readonly BitSet _STRING_in_specialfunctioncall3023 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200800000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3025 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _173_in_specialfunctioncall3030 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CAST_in_specialfunctioncall3048 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100800000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3050 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000UL});
		public static readonly BitSet _172_in_specialfunctioncall3053 = new BitSet(new ulong[]{0x30000807330000UL,0x8DUL,0x8002900840000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3055 = new BitSet(new ulong[]{0x30000807330000UL,0x8DUL,0x8002900040000000UL});
		public static readonly BitSet _expression_in_specialfunctioncall3058 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3060 = new BitSet(new ulong[]{0x200UL});
		public static readonly BitSet _AS_in_specialfunctioncall3062 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3064 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _datatype_in_specialfunctioncall3066 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200800000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3068 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _173_in_specialfunctioncall3071 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DATEADD_in_specialfunctioncall3086 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100800000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3088 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000UL});
		public static readonly BitSet _172_in_specialfunctioncall3091 = new BitSet(new ulong[]{0x0UL,0x80UL,0x800000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3093 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _datepart_in_specialfunctioncall3096 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000800000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3098 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000000UL});
		public static readonly BitSet _176_in_specialfunctioncall3101 = new BitSet(new ulong[]{0x30000807330000UL,0x8DUL,0x8002900840000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3103 = new BitSet(new ulong[]{0x30000807330000UL,0x8DUL,0x8002900040000000UL});
		public static readonly BitSet _expression_in_specialfunctioncall3106 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000800000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3108 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000000UL});
		public static readonly BitSet _176_in_specialfunctioncall3111 = new BitSet(new ulong[]{0x30000807330000UL,0x8DUL,0x8002900840000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3113 = new BitSet(new ulong[]{0x30000807330000UL,0x8DUL,0x8002900040000000UL});
		public static readonly BitSet _expression_in_specialfunctioncall3116 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200800000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3118 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _173_in_specialfunctioncall3121 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DATEDIFF_in_specialfunctioncall3139 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100800000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3141 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000UL});
		public static readonly BitSet _172_in_specialfunctioncall3144 = new BitSet(new ulong[]{0x0UL,0x80UL,0x800000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3146 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _datepart_in_specialfunctioncall3149 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000800000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3151 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000000UL});
		public static readonly BitSet _176_in_specialfunctioncall3154 = new BitSet(new ulong[]{0x30000807330000UL,0x8DUL,0x8002900840000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3156 = new BitSet(new ulong[]{0x30000807330000UL,0x8DUL,0x8002900040000000UL});
		public static readonly BitSet _expression_in_specialfunctioncall3159 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000800000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3161 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000000UL});
		public static readonly BitSet _176_in_specialfunctioncall3164 = new BitSet(new ulong[]{0x30000807330000UL,0x8DUL,0x8002900840000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3166 = new BitSet(new ulong[]{0x30000807330000UL,0x8DUL,0x8002900040000000UL});
		public static readonly BitSet _expression_in_specialfunctioncall3169 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200800000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3171 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _173_in_specialfunctioncall3174 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DATEPART_in_specialfunctioncall3192 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100800000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3194 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000UL});
		public static readonly BitSet _172_in_specialfunctioncall3197 = new BitSet(new ulong[]{0x0UL,0x80UL,0x800000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3199 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _datepart_in_specialfunctioncall3202 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000800000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3204 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000000UL});
		public static readonly BitSet _176_in_specialfunctioncall3207 = new BitSet(new ulong[]{0x30000807330000UL,0x8DUL,0x8002900840000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3209 = new BitSet(new ulong[]{0x30000807330000UL,0x8DUL,0x8002900040000000UL});
		public static readonly BitSet _expression_in_specialfunctioncall3212 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200800000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall3214 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _173_in_specialfunctioncall3217 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_datepart3241 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_number3261 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_string3269 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_datatype3289 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VARIABLE_in_variable3301 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CASE_in_case3321 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_case3323 = new BitSet(new ulong[]{0x30000E07330000UL,0x8DUL,0x8002900240000000UL});
		public static readonly BitSet _expression_in_case3326 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_case3328 = new BitSet(new ulong[]{0x600000000UL,0x0UL,0x200000000UL});
		public static readonly BitSet _case_when_in_case3333 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_case3335 = new BitSet(new ulong[]{0x600000000UL,0x0UL,0x200000000UL});
		public static readonly BitSet _case_else_in_case3340 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_case3342 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _END_in_case3346 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHEN_in_case_when3374 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_case_when3376 = new BitSet(new ulong[]{0x30000807330000UL,0x8DUL,0x8002900040000000UL});
		public static readonly BitSet _expression_in_case_when3380 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_case_when3382 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _THEN_in_case_when3384 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_case_when3386 = new BitSet(new ulong[]{0x30000807330000UL,0x8DUL,0x8002900040000000UL});
		public static readonly BitSet _expression_in_case_when3390 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ELSE_in_case_else3415 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _WS_in_case_else3417 = new BitSet(new ulong[]{0x30000807330000UL,0x8DUL,0x8002900040000000UL});
		public static readonly BitSet _expression_in_case_else3419 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _172_in_synpred1_gql607 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SELECT_in_synpred2_gql1834 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _subquery_in_synpred3_gql2675 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  FxGqlLib 
