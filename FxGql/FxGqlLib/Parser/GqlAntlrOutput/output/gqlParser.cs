//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g 2012-07-11 14:09:57

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591


// `XXX' does not need a CLSCompliant attribute because the assembly is not marked as CLS-compliant (CS3021)
#pragma warning disable 3021
// The private field `XXX' is assigned but its value is never used (CS0414)
#pragma warning disable 414


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  FxGqlLib 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class gqlParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "A", "ALL", "AND", "ANY", "AS", "ASC", "B", "BETWEEN", "BY", "C", "CASE", "CAST", "COMMENT_BLOCK", "COMMENT_LINE", "CONVERT", "CREATE", "D", "DECLARE", "DESC", "DIGIT", "DISTINCT", "DROP", "E", "ELSE", "END", "EXISTS", "F", "FROM", "G", "GROUP", "H", "HAVING", "I", "IN", "INTO", "J", "K", "L", "LIKE", "M", "MATCH", "N", "NOT", "NUMBER", "O", "OR", "ORDER", "ORIG", "P", "Q", "R", "S", "SELECT", "SET", "SIMPLE_FILE", "SOME", "STRING", "SYSTEMVAR", "T", "TABLE", "THEN", "TOKEN", "TOP", "T_ALL", "T_ALLCOLUMNS", "T_AND", "T_ANY", "T_BETWEEN", "T_BITWISE_AND", "T_BITWISE_NOT", "T_BITWISE_OR", "T_BITWISE_XOR", "T_CASE", "T_CASE_ELSE", "T_CASE_WHEN", "T_COLUMN", "T_COLUMNLIST", "T_CONVERT", "T_CREATE_VIEW", "T_DECLARATION", "T_DECLARE", "T_DISTINCT", "T_DIVIDE", "T_DROP_TABLE", "T_DROP_VIEW", "T_EQUAL", "T_EXISTS", "T_EXPRESSIONLIST", "T_FILE", "T_FILEOPTION", "T_FROM", "T_FUNCTIONCALL", "T_GREATER", "T_GROUPBY", "T_GROUPBY_ORIG", "T_HAVING", "T_IN", "T_INTEGER", "T_INTO", "T_LESS", "T_LIKE", "T_MATCH", "T_MINUS", "T_MODULO", "T_NOT", "T_NOTBETWEEN", "T_NOTEQUAL", "T_NOTGREATER", "T_NOTIN", "T_NOTLESS", "T_NOTLIKE", "T_NOTMATCH", "T_OP_BINARY", "T_OP_UNARY", "T_OR", "T_ORDERBY", "T_ORDERBY_ASC", "T_ORDERBY_COLUMN", "T_ORDERBY_DESC", "T_ORDERBY_ORIG", "T_PLUS", "T_PRODUCT", "T_ROOT", "T_SELECT", "T_SET_VARIABLE", "T_STRING", "T_SUBQUERY", "T_SYSTEMVAR", "T_TABLE_ALIAS", "T_TOP", "T_USE", "T_VARIABLE", "T_VIEW_NAME", "T_WHERE", "U", "USE", "V", "VARIABLE", "VIEW", "W", "WHEN", "WHERE", "WS", "X", "Y", "Z", "'!<'", "'!='", "'!>'", "'%'", "'&'", "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", "';'", "'<'", "'<='", "'<>'", "'='", "'>'", "'>='", "'['", "']'", "'^'", "'|'", "'~'"
	};
	public const int EOF=-1;
	public const int T__150=150;
	public const int T__151=151;
	public const int T__152=152;
	public const int T__153=153;
	public const int T__154=154;
	public const int T__155=155;
	public const int T__156=156;
	public const int T__157=157;
	public const int T__158=158;
	public const int T__159=159;
	public const int T__160=160;
	public const int T__161=161;
	public const int T__162=162;
	public const int T__163=163;
	public const int T__164=164;
	public const int T__165=165;
	public const int T__166=166;
	public const int T__167=167;
	public const int T__168=168;
	public const int T__169=169;
	public const int T__170=170;
	public const int T__171=171;
	public const int T__172=172;
	public const int T__173=173;
	public const int T__174=174;
	public const int A=4;
	public const int ALL=5;
	public const int AND=6;
	public const int ANY=7;
	public const int AS=8;
	public const int ASC=9;
	public const int B=10;
	public const int BETWEEN=11;
	public const int BY=12;
	public const int C=13;
	public const int CASE=14;
	public const int CAST=15;
	public const int COMMENT_BLOCK=16;
	public const int COMMENT_LINE=17;
	public const int CONVERT=18;
	public const int CREATE=19;
	public const int D=20;
	public const int DECLARE=21;
	public const int DESC=22;
	public const int DIGIT=23;
	public const int DISTINCT=24;
	public const int DROP=25;
	public const int E=26;
	public const int ELSE=27;
	public const int END=28;
	public const int EXISTS=29;
	public const int F=30;
	public const int FROM=31;
	public const int G=32;
	public const int GROUP=33;
	public const int H=34;
	public const int HAVING=35;
	public const int I=36;
	public const int IN=37;
	public const int INTO=38;
	public const int J=39;
	public const int K=40;
	public const int L=41;
	public const int LIKE=42;
	public const int M=43;
	public const int MATCH=44;
	public const int N=45;
	public const int NOT=46;
	public const int NUMBER=47;
	public const int O=48;
	public const int OR=49;
	public const int ORDER=50;
	public const int ORIG=51;
	public const int P=52;
	public const int Q=53;
	public const int R=54;
	public const int S=55;
	public const int SELECT=56;
	public const int SET=57;
	public const int SIMPLE_FILE=58;
	public const int SOME=59;
	public const int STRING=60;
	public const int SYSTEMVAR=61;
	public const int T=62;
	public const int TABLE=63;
	public const int THEN=64;
	public const int TOKEN=65;
	public const int TOP=66;
	public const int T_ALL=67;
	public const int T_ALLCOLUMNS=68;
	public const int T_AND=69;
	public const int T_ANY=70;
	public const int T_BETWEEN=71;
	public const int T_BITWISE_AND=72;
	public const int T_BITWISE_NOT=73;
	public const int T_BITWISE_OR=74;
	public const int T_BITWISE_XOR=75;
	public const int T_CASE=76;
	public const int T_CASE_ELSE=77;
	public const int T_CASE_WHEN=78;
	public const int T_COLUMN=79;
	public const int T_COLUMNLIST=80;
	public const int T_CONVERT=81;
	public const int T_CREATE_VIEW=82;
	public const int T_DECLARATION=83;
	public const int T_DECLARE=84;
	public const int T_DISTINCT=85;
	public const int T_DIVIDE=86;
	public const int T_DROP_TABLE=87;
	public const int T_DROP_VIEW=88;
	public const int T_EQUAL=89;
	public const int T_EXISTS=90;
	public const int T_EXPRESSIONLIST=91;
	public const int T_FILE=92;
	public const int T_FILEOPTION=93;
	public const int T_FROM=94;
	public const int T_FUNCTIONCALL=95;
	public const int T_GREATER=96;
	public const int T_GROUPBY=97;
	public const int T_GROUPBY_ORIG=98;
	public const int T_HAVING=99;
	public const int T_IN=100;
	public const int T_INTEGER=101;
	public const int T_INTO=102;
	public const int T_LESS=103;
	public const int T_LIKE=104;
	public const int T_MATCH=105;
	public const int T_MINUS=106;
	public const int T_MODULO=107;
	public const int T_NOT=108;
	public const int T_NOTBETWEEN=109;
	public const int T_NOTEQUAL=110;
	public const int T_NOTGREATER=111;
	public const int T_NOTIN=112;
	public const int T_NOTLESS=113;
	public const int T_NOTLIKE=114;
	public const int T_NOTMATCH=115;
	public const int T_OP_BINARY=116;
	public const int T_OP_UNARY=117;
	public const int T_OR=118;
	public const int T_ORDERBY=119;
	public const int T_ORDERBY_ASC=120;
	public const int T_ORDERBY_COLUMN=121;
	public const int T_ORDERBY_DESC=122;
	public const int T_ORDERBY_ORIG=123;
	public const int T_PLUS=124;
	public const int T_PRODUCT=125;
	public const int T_ROOT=126;
	public const int T_SELECT=127;
	public const int T_SET_VARIABLE=128;
	public const int T_STRING=129;
	public const int T_SUBQUERY=130;
	public const int T_SYSTEMVAR=131;
	public const int T_TABLE_ALIAS=132;
	public const int T_TOP=133;
	public const int T_USE=134;
	public const int T_VARIABLE=135;
	public const int T_VIEW_NAME=136;
	public const int T_WHERE=137;
	public const int U=138;
	public const int USE=139;
	public const int V=140;
	public const int VARIABLE=141;
	public const int VIEW=142;
	public const int W=143;
	public const int WHEN=144;
	public const int WHERE=145;
	public const int WS=146;
	public const int X=147;
	public const int Y=148;
	public const int Z=149;

	#if ANTLR_DEBUG
		private static readonly bool[] decisionCanBacktrack =
			new bool[]
			{
				false, // invalid decision
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false
			};
	#else
		private static readonly bool[] decisionCanBacktrack = new bool[0];
	#endif
	public gqlParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public gqlParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}
	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return gqlParser.tokenNames; } }
	public override string GrammarFileName { get { return "C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g"; } }


	[Conditional("ANTLR_TRACE")]
	protected virtual void OnCreated() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

	#region Rules

	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_parse() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_parse() {}

	// $ANTLR start "parse"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:102:1: parse : ( WS )? ( commands ( WS )? )? EOF -> ^( T_ROOT ( commands )? ) ;
	[GrammarRule("parse")]
	private AstParserRuleReturnScope<object, IToken> parse()
	{
		EnterRule_parse();
		EnterRule("parse", 1);
		TraceIn("parse", 1);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS1 = default(IToken);
	    IToken WS3 = default(IToken);
	    IToken EOF4 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> commands2 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS1_tree = default(object);
	    object WS3_tree = default(object);
	    object EOF4_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
	    RewriteRuleSubtreeStream stream_commands=new RewriteRuleSubtreeStream(adaptor,"rule commands");
		try { DebugEnterRule(GrammarFileName, "parse");
		DebugLocation(102, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:103:2: ( ( WS )? ( commands ( WS )? )? EOF -> ^( T_ROOT ( commands )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:103:4: ( WS )? ( commands ( WS )? )? EOF
			{
			DebugLocation(103, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:103:4: ( WS )?
			int alt1=2;
			try { DebugEnterSubRule(1);
			try { DebugEnterDecision(1, decisionCanBacktrack[1]);
			int LA1_0 = input.LA(1);

			if ((LA1_0==WS))
			{
				alt1 = 1;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:103:4: WS
				{
				DebugLocation(103, 4);
				WS1=(IToken)Match(input,WS,Follow._WS_in_parse364);  
				stream_WS.Add(WS1);


				}
				break;

			}
			} finally { DebugExitSubRule(1); }

			DebugLocation(103, 8);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:103:8: ( commands ( WS )? )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, decisionCanBacktrack[3]);
			int LA3_0 = input.LA(1);

			if ((LA3_0==CREATE||LA3_0==DECLARE||LA3_0==DROP||(LA3_0>=SELECT && LA3_0<=SET)||LA3_0==USE))
			{
				alt3 = 1;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:103:9: commands ( WS )?
				{
				DebugLocation(103, 9);
				PushFollow(Follow._commands_in_parse368);
				commands2=commands();
				PopFollow();

				stream_commands.Add(commands2.Tree);
				DebugLocation(103, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:103:18: ( WS )?
				int alt2=2;
				try { DebugEnterSubRule(2);
				try { DebugEnterDecision(2, decisionCanBacktrack[2]);
				int LA2_0 = input.LA(1);

				if ((LA2_0==WS))
				{
					alt2 = 1;
				}
				} finally { DebugExitDecision(2); }
				switch (alt2)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:103:18: WS
					{
					DebugLocation(103, 18);
					WS3=(IToken)Match(input,WS,Follow._WS_in_parse370);  
					stream_WS.Add(WS3);


					}
					break;

				}
				} finally { DebugExitSubRule(2); }


				}
				break;

			}
			} finally { DebugExitSubRule(3); }

			DebugLocation(103, 24);
			EOF4=(IToken)Match(input,EOF,Follow._EOF_in_parse375);  
			stream_EOF.Add(EOF4);



			{
			// AST REWRITE
			// elements: commands
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 104:2: -> ^( T_ROOT ( commands )? )
			{
				DebugLocation(104, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:104:5: ^( T_ROOT ( commands )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(104, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_ROOT, "T_ROOT"), root_1);

				DebugLocation(104, 14);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:104:14: ( commands )?
				if (stream_commands.HasNext)
				{
					DebugLocation(104, 14);
					adaptor.AddChild(root_1, stream_commands.NextTree());

				}
				stream_commands.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parse", 1);
			LeaveRule("parse", 1);
			LeaveRule_parse();
	    }
	 	DebugLocation(105, 1);
		} finally { DebugExitRule(GrammarFileName, "parse"); }
		return retval;

	}
	// $ANTLR end "parse"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_commands() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_commands() {}

	// $ANTLR start "commands"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:107:1: commands : command ( ( WS )? ( ';' ( WS )? )? command )* ( ( WS )? ';' )? -> ( command )+ ;
	[GrammarRule("commands")]
	private AstParserRuleReturnScope<object, IToken> commands()
	{
		EnterRule_commands();
		EnterRule("commands", 2);
		TraceIn("commands", 2);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS6 = default(IToken);
	    IToken char_literal7 = default(IToken);
	    IToken WS8 = default(IToken);
	    IToken WS10 = default(IToken);
	    IToken char_literal11 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> command5 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> command9 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS6_tree = default(object);
	    object char_literal7_tree = default(object);
	    object WS8_tree = default(object);
	    object WS10_tree = default(object);
	    object char_literal11_tree = default(object);
	    RewriteRuleITokenStream stream_163=new RewriteRuleITokenStream(adaptor,"token 163");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_command=new RewriteRuleSubtreeStream(adaptor,"rule command");
		try { DebugEnterRule(GrammarFileName, "commands");
		DebugLocation(107, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:108:2: ( command ( ( WS )? ( ';' ( WS )? )? command )* ( ( WS )? ';' )? -> ( command )+ )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:108:4: command ( ( WS )? ( ';' ( WS )? )? command )* ( ( WS )? ';' )?
			{
			DebugLocation(108, 4);
			PushFollow(Follow._command_in_commands398);
			command5=command();
			PopFollow();

			stream_command.Add(command5.Tree);
			DebugLocation(108, 12);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:108:12: ( ( WS )? ( ';' ( WS )? )? command )*
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, decisionCanBacktrack[7]);
				switch (input.LA(1))
				{
				case WS:
					{
					int LA7_1 = input.LA(2);

					if ((LA7_1==163))
					{
						int LA7_2 = input.LA(3);

						if ((LA7_2==WS))
						{
							int LA7_5 = input.LA(4);

							if ((LA7_5==CREATE||LA7_5==DECLARE||LA7_5==DROP||(LA7_5>=SELECT && LA7_5<=SET)||LA7_5==USE))
							{
								alt7 = 1;
							}


						}
						else if ((LA7_2==CREATE||LA7_2==DECLARE||LA7_2==DROP||(LA7_2>=SELECT && LA7_2<=SET)||LA7_2==USE))
						{
							alt7 = 1;
						}


					}
					else if ((LA7_1==CREATE||LA7_1==DECLARE||LA7_1==DROP||(LA7_1>=SELECT && LA7_1<=SET)||LA7_1==USE))
					{
						alt7 = 1;
					}


					}
					break;
				case 163:
					{
					int LA7_2 = input.LA(2);

					if ((LA7_2==WS))
					{
						int LA7_5 = input.LA(3);

						if ((LA7_5==CREATE||LA7_5==DECLARE||LA7_5==DROP||(LA7_5>=SELECT && LA7_5<=SET)||LA7_5==USE))
						{
							alt7 = 1;
						}


					}
					else if ((LA7_2==CREATE||LA7_2==DECLARE||LA7_2==DROP||(LA7_2>=SELECT && LA7_2<=SET)||LA7_2==USE))
					{
						alt7 = 1;
					}


					}
					break;
				case CREATE:
				case DECLARE:
				case DROP:
				case SELECT:
				case SET:
				case USE:
					{
					alt7 = 1;
					}
					break;
				}

				} finally { DebugExitDecision(7); }
				switch ( alt7 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:108:13: ( WS )? ( ';' ( WS )? )? command
					{
					DebugLocation(108, 13);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:108:13: ( WS )?
					int alt4=2;
					try { DebugEnterSubRule(4);
					try { DebugEnterDecision(4, decisionCanBacktrack[4]);
					int LA4_0 = input.LA(1);

					if ((LA4_0==WS))
					{
						alt4 = 1;
					}
					} finally { DebugExitDecision(4); }
					switch (alt4)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:108:13: WS
						{
						DebugLocation(108, 13);
						WS6=(IToken)Match(input,WS,Follow._WS_in_commands401);  
						stream_WS.Add(WS6);


						}
						break;

					}
					} finally { DebugExitSubRule(4); }

					DebugLocation(108, 17);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:108:17: ( ';' ( WS )? )?
					int alt6=2;
					try { DebugEnterSubRule(6);
					try { DebugEnterDecision(6, decisionCanBacktrack[6]);
					int LA6_0 = input.LA(1);

					if ((LA6_0==163))
					{
						alt6 = 1;
					}
					} finally { DebugExitDecision(6); }
					switch (alt6)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:108:18: ';' ( WS )?
						{
						DebugLocation(108, 18);
						char_literal7=(IToken)Match(input,163,Follow._163_in_commands405);  
						stream_163.Add(char_literal7);

						DebugLocation(108, 22);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:108:22: ( WS )?
						int alt5=2;
						try { DebugEnterSubRule(5);
						try { DebugEnterDecision(5, decisionCanBacktrack[5]);
						int LA5_0 = input.LA(1);

						if ((LA5_0==WS))
						{
							alt5 = 1;
						}
						} finally { DebugExitDecision(5); }
						switch (alt5)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:108:22: WS
							{
							DebugLocation(108, 22);
							WS8=(IToken)Match(input,WS,Follow._WS_in_commands407);  
							stream_WS.Add(WS8);


							}
							break;

						}
						} finally { DebugExitSubRule(5); }


						}
						break;

					}
					} finally { DebugExitSubRule(6); }

					DebugLocation(108, 28);
					PushFollow(Follow._command_in_commands412);
					command9=command();
					PopFollow();

					stream_command.Add(command9.Tree);

					}
					break;

				default:
					goto loop7;
				}
			}

			loop7:
				;

			} finally { DebugExitSubRule(7); }

			DebugLocation(108, 38);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:108:38: ( ( WS )? ';' )?
			int alt9=2;
			try { DebugEnterSubRule(9);
			try { DebugEnterDecision(9, decisionCanBacktrack[9]);
			int LA9_0 = input.LA(1);

			if ((LA9_0==WS))
			{
				int LA9_1 = input.LA(2);

				if ((LA9_1==163))
				{
					alt9 = 1;
				}
			}
			else if ((LA9_0==163))
			{
				alt9 = 1;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:108:39: ( WS )? ';'
				{
				DebugLocation(108, 39);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:108:39: ( WS )?
				int alt8=2;
				try { DebugEnterSubRule(8);
				try { DebugEnterDecision(8, decisionCanBacktrack[8]);
				int LA8_0 = input.LA(1);

				if ((LA8_0==WS))
				{
					alt8 = 1;
				}
				} finally { DebugExitDecision(8); }
				switch (alt8)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:108:39: WS
					{
					DebugLocation(108, 39);
					WS10=(IToken)Match(input,WS,Follow._WS_in_commands417);  
					stream_WS.Add(WS10);


					}
					break;

				}
				} finally { DebugExitSubRule(8); }

				DebugLocation(108, 43);
				char_literal11=(IToken)Match(input,163,Follow._163_in_commands420);  
				stream_163.Add(char_literal11);


				}
				break;

			}
			} finally { DebugExitSubRule(9); }



			{
			// AST REWRITE
			// elements: command
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 109:2: -> ( command )+
			{
				DebugLocation(109, 5);
				if (!(stream_command.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_command.HasNext )
				{
					DebugLocation(109, 5);
					adaptor.AddChild(root_0, stream_command.NextTree());

				}
				stream_command.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("commands", 2);
			LeaveRule("commands", 2);
			LeaveRule_commands();
	    }
	 	DebugLocation(110, 1);
		} finally { DebugExitRule(GrammarFileName, "commands"); }
		return retval;

	}
	// $ANTLR end "commands"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_command() {}

	// $ANTLR start "command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:112:1: command : ( select_command | use_command | declare_command | set_command | create_view_command | drop_view_command | drop_table_command );
	[GrammarRule("command")]
	private AstParserRuleReturnScope<object, IToken> command()
	{
		EnterRule_command();
		EnterRule("command", 3);
		TraceIn("command", 3);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> select_command12 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> use_command13 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> declare_command14 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> set_command15 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> create_view_command16 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> drop_view_command17 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> drop_table_command18 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "command");
		DebugLocation(112, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:113:2: ( select_command | use_command | declare_command | set_command | create_view_command | drop_view_command | drop_table_command )
			int alt10=7;
			try { DebugEnterDecision(10, decisionCanBacktrack[10]);
			switch (input.LA(1))
			{
			case SELECT:
				{
				alt10 = 1;
				}
				break;
			case USE:
				{
				alt10 = 2;
				}
				break;
			case DECLARE:
				{
				alt10 = 3;
				}
				break;
			case SET:
				{
				alt10 = 4;
				}
				break;
			case CREATE:
				{
				alt10 = 5;
				}
				break;
			case DROP:
				{
				int LA10_6 = input.LA(2);

				if ((LA10_6==WS))
				{
					int LA10_7 = input.LA(3);

					if ((LA10_7==VIEW))
					{
						alt10 = 6;
					}
					else if ((LA10_7==TABLE))
					{
						alt10 = 7;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 10, 7, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 10, 6, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 10, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:113:4: select_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(113, 4);
				PushFollow(Follow._select_command_in_command440);
				select_command12=select_command();
				PopFollow();

				adaptor.AddChild(root_0, select_command12.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:114:4: use_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(114, 4);
				PushFollow(Follow._use_command_in_command445);
				use_command13=use_command();
				PopFollow();

				adaptor.AddChild(root_0, use_command13.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:115:4: declare_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(115, 4);
				PushFollow(Follow._declare_command_in_command450);
				declare_command14=declare_command();
				PopFollow();

				adaptor.AddChild(root_0, declare_command14.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:116:4: set_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(116, 4);
				PushFollow(Follow._set_command_in_command455);
				set_command15=set_command();
				PopFollow();

				adaptor.AddChild(root_0, set_command15.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:117:4: create_view_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(117, 4);
				PushFollow(Follow._create_view_command_in_command460);
				create_view_command16=create_view_command();
				PopFollow();

				adaptor.AddChild(root_0, create_view_command16.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:118:4: drop_view_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(118, 4);
				PushFollow(Follow._drop_view_command_in_command465);
				drop_view_command17=drop_view_command();
				PopFollow();

				adaptor.AddChild(root_0, drop_view_command17.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:119:4: drop_table_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(119, 4);
				PushFollow(Follow._drop_table_command_in_command470);
				drop_table_command18=drop_table_command();
				PopFollow();

				adaptor.AddChild(root_0, drop_table_command18.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("command", 3);
			LeaveRule("command", 3);
			LeaveRule_command();
	    }
	 	DebugLocation(120, 1);
		} finally { DebugExitRule(GrammarFileName, "command"); }
		return retval;

	}
	// $ANTLR end "command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_select_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_select_command() {}

	// $ANTLR start "select_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:125:1: select_command : SELECT ( WS distinct_clause )? ( WS top_clause )? WS column_list ( WS into_clause )? ( WS from_clause )? ( WS where_clause )? ( WS groupby_clause )? ( WS having_clause )? ( WS orderby_clause )? -> ^( T_SELECT ( distinct_clause )? ( top_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( having_clause )? ( orderby_clause )? ) ;
	[GrammarRule("select_command")]
	private AstParserRuleReturnScope<object, IToken> select_command()
	{
		EnterRule_select_command();
		EnterRule("select_command", 4);
		TraceIn("select_command", 4);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken SELECT19 = default(IToken);
	    IToken WS20 = default(IToken);
	    IToken WS22 = default(IToken);
	    IToken WS24 = default(IToken);
	    IToken WS26 = default(IToken);
	    IToken WS28 = default(IToken);
	    IToken WS30 = default(IToken);
	    IToken WS32 = default(IToken);
	    IToken WS34 = default(IToken);
	    IToken WS36 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> distinct_clause21 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> top_clause23 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> column_list25 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> into_clause27 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> from_clause29 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> where_clause31 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> groupby_clause33 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> having_clause35 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> orderby_clause37 = default(AstParserRuleReturnScope<object, IToken>);

	    object SELECT19_tree = default(object);
	    object WS20_tree = default(object);
	    object WS22_tree = default(object);
	    object WS24_tree = default(object);
	    object WS26_tree = default(object);
	    object WS28_tree = default(object);
	    object WS30_tree = default(object);
	    object WS32_tree = default(object);
	    object WS34_tree = default(object);
	    object WS36_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_SELECT=new RewriteRuleITokenStream(adaptor,"token SELECT");
	    RewriteRuleSubtreeStream stream_groupby_clause=new RewriteRuleSubtreeStream(adaptor,"rule groupby_clause");
	    RewriteRuleSubtreeStream stream_distinct_clause=new RewriteRuleSubtreeStream(adaptor,"rule distinct_clause");
	    RewriteRuleSubtreeStream stream_from_clause=new RewriteRuleSubtreeStream(adaptor,"rule from_clause");
	    RewriteRuleSubtreeStream stream_having_clause=new RewriteRuleSubtreeStream(adaptor,"rule having_clause");
	    RewriteRuleSubtreeStream stream_column_list=new RewriteRuleSubtreeStream(adaptor,"rule column_list");
	    RewriteRuleSubtreeStream stream_where_clause=new RewriteRuleSubtreeStream(adaptor,"rule where_clause");
	    RewriteRuleSubtreeStream stream_into_clause=new RewriteRuleSubtreeStream(adaptor,"rule into_clause");
	    RewriteRuleSubtreeStream stream_top_clause=new RewriteRuleSubtreeStream(adaptor,"rule top_clause");
	    RewriteRuleSubtreeStream stream_orderby_clause=new RewriteRuleSubtreeStream(adaptor,"rule orderby_clause");
		try { DebugEnterRule(GrammarFileName, "select_command");
		DebugLocation(125, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:126:2: ( SELECT ( WS distinct_clause )? ( WS top_clause )? WS column_list ( WS into_clause )? ( WS from_clause )? ( WS where_clause )? ( WS groupby_clause )? ( WS having_clause )? ( WS orderby_clause )? -> ^( T_SELECT ( distinct_clause )? ( top_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( having_clause )? ( orderby_clause )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:126:4: SELECT ( WS distinct_clause )? ( WS top_clause )? WS column_list ( WS into_clause )? ( WS from_clause )? ( WS where_clause )? ( WS groupby_clause )? ( WS having_clause )? ( WS orderby_clause )?
			{
			DebugLocation(126, 4);
			SELECT19=(IToken)Match(input,SELECT,Follow._SELECT_in_select_command484);  
			stream_SELECT.Add(SELECT19);

			DebugLocation(126, 11);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:126:11: ( WS distinct_clause )?
			int alt11=2;
			try { DebugEnterSubRule(11);
			try { DebugEnterDecision(11, decisionCanBacktrack[11]);
			int LA11_0 = input.LA(1);

			if ((LA11_0==WS))
			{
				int LA11_1 = input.LA(2);

				if ((LA11_1==ALL||LA11_1==DISTINCT))
				{
					alt11 = 1;
				}
			}
			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:126:12: WS distinct_clause
				{
				DebugLocation(126, 12);
				WS20=(IToken)Match(input,WS,Follow._WS_in_select_command487);  
				stream_WS.Add(WS20);

				DebugLocation(126, 15);
				PushFollow(Follow._distinct_clause_in_select_command489);
				distinct_clause21=distinct_clause();
				PopFollow();

				stream_distinct_clause.Add(distinct_clause21.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(11); }

			DebugLocation(126, 33);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:126:33: ( WS top_clause )?
			int alt12=2;
			try { DebugEnterSubRule(12);
			try { DebugEnterDecision(12, decisionCanBacktrack[12]);
			int LA12_0 = input.LA(1);

			if ((LA12_0==WS))
			{
				int LA12_1 = input.LA(2);

				if ((LA12_1==TOP))
				{
					alt12 = 1;
				}
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:126:34: WS top_clause
				{
				DebugLocation(126, 34);
				WS22=(IToken)Match(input,WS,Follow._WS_in_select_command494);  
				stream_WS.Add(WS22);

				DebugLocation(126, 37);
				PushFollow(Follow._top_clause_in_select_command496);
				top_clause23=top_clause();
				PopFollow();

				stream_top_clause.Add(top_clause23.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(12); }

			DebugLocation(126, 50);
			WS24=(IToken)Match(input,WS,Follow._WS_in_select_command500);  
			stream_WS.Add(WS24);

			DebugLocation(126, 53);
			PushFollow(Follow._column_list_in_select_command502);
			column_list25=column_list();
			PopFollow();

			stream_column_list.Add(column_list25.Tree);
			DebugLocation(126, 65);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:126:65: ( WS into_clause )?
			int alt13=2;
			try { DebugEnterSubRule(13);
			try { DebugEnterDecision(13, decisionCanBacktrack[13]);
			int LA13_0 = input.LA(1);

			if ((LA13_0==WS))
			{
				int LA13_1 = input.LA(2);

				if ((LA13_1==INTO))
				{
					alt13 = 1;
				}
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:126:66: WS into_clause
				{
				DebugLocation(126, 66);
				WS26=(IToken)Match(input,WS,Follow._WS_in_select_command505);  
				stream_WS.Add(WS26);

				DebugLocation(126, 69);
				PushFollow(Follow._into_clause_in_select_command507);
				into_clause27=into_clause();
				PopFollow();

				stream_into_clause.Add(into_clause27.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(13); }

			DebugLocation(126, 83);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:126:83: ( WS from_clause )?
			int alt14=2;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, decisionCanBacktrack[14]);
			int LA14_0 = input.LA(1);

			if ((LA14_0==WS))
			{
				int LA14_1 = input.LA(2);

				if ((LA14_1==FROM))
				{
					alt14 = 1;
				}
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:126:84: WS from_clause
				{
				DebugLocation(126, 84);
				WS28=(IToken)Match(input,WS,Follow._WS_in_select_command512);  
				stream_WS.Add(WS28);

				DebugLocation(126, 87);
				PushFollow(Follow._from_clause_in_select_command514);
				from_clause29=from_clause();
				PopFollow();

				stream_from_clause.Add(from_clause29.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(14); }

			DebugLocation(126, 101);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:126:101: ( WS where_clause )?
			int alt15=2;
			try { DebugEnterSubRule(15);
			try { DebugEnterDecision(15, decisionCanBacktrack[15]);
			int LA15_0 = input.LA(1);

			if ((LA15_0==WS))
			{
				int LA15_1 = input.LA(2);

				if ((LA15_1==WHERE))
				{
					alt15 = 1;
				}
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:126:102: WS where_clause
				{
				DebugLocation(126, 102);
				WS30=(IToken)Match(input,WS,Follow._WS_in_select_command519);  
				stream_WS.Add(WS30);

				DebugLocation(126, 105);
				PushFollow(Follow._where_clause_in_select_command521);
				where_clause31=where_clause();
				PopFollow();

				stream_where_clause.Add(where_clause31.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(15); }

			DebugLocation(126, 120);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:126:120: ( WS groupby_clause )?
			int alt16=2;
			try { DebugEnterSubRule(16);
			try { DebugEnterDecision(16, decisionCanBacktrack[16]);
			int LA16_0 = input.LA(1);

			if ((LA16_0==WS))
			{
				int LA16_1 = input.LA(2);

				if ((LA16_1==GROUP))
				{
					alt16 = 1;
				}
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:126:121: WS groupby_clause
				{
				DebugLocation(126, 121);
				WS32=(IToken)Match(input,WS,Follow._WS_in_select_command526);  
				stream_WS.Add(WS32);

				DebugLocation(126, 124);
				PushFollow(Follow._groupby_clause_in_select_command528);
				groupby_clause33=groupby_clause();
				PopFollow();

				stream_groupby_clause.Add(groupby_clause33.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(16); }

			DebugLocation(126, 141);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:126:141: ( WS having_clause )?
			int alt17=2;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, decisionCanBacktrack[17]);
			int LA17_0 = input.LA(1);

			if ((LA17_0==WS))
			{
				int LA17_1 = input.LA(2);

				if ((LA17_1==HAVING))
				{
					alt17 = 1;
				}
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:126:142: WS having_clause
				{
				DebugLocation(126, 142);
				WS34=(IToken)Match(input,WS,Follow._WS_in_select_command533);  
				stream_WS.Add(WS34);

				DebugLocation(126, 145);
				PushFollow(Follow._having_clause_in_select_command535);
				having_clause35=having_clause();
				PopFollow();

				stream_having_clause.Add(having_clause35.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(17); }

			DebugLocation(126, 161);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:126:161: ( WS orderby_clause )?
			int alt18=2;
			try { DebugEnterSubRule(18);
			try { DebugEnterDecision(18, decisionCanBacktrack[18]);
			int LA18_0 = input.LA(1);

			if ((LA18_0==WS))
			{
				int LA18_1 = input.LA(2);

				if ((LA18_1==ORDER))
				{
					alt18 = 1;
				}
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:126:162: WS orderby_clause
				{
				DebugLocation(126, 162);
				WS36=(IToken)Match(input,WS,Follow._WS_in_select_command540);  
				stream_WS.Add(WS36);

				DebugLocation(126, 165);
				PushFollow(Follow._orderby_clause_in_select_command542);
				orderby_clause37=orderby_clause();
				PopFollow();

				stream_orderby_clause.Add(orderby_clause37.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(18); }



			{
			// AST REWRITE
			// elements: into_clause, top_clause, orderby_clause, where_clause, column_list, from_clause, having_clause, groupby_clause, distinct_clause
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 127:3: -> ^( T_SELECT ( distinct_clause )? ( top_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( having_clause )? ( orderby_clause )? )
			{
				DebugLocation(127, 6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:127:6: ^( T_SELECT ( distinct_clause )? ( top_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( having_clause )? ( orderby_clause )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(127, 8);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SELECT, "T_SELECT"), root_1);

				DebugLocation(127, 17);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:127:17: ( distinct_clause )?
				if (stream_distinct_clause.HasNext)
				{
					DebugLocation(127, 17);
					adaptor.AddChild(root_1, stream_distinct_clause.NextTree());

				}
				stream_distinct_clause.Reset();
				DebugLocation(127, 34);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:127:34: ( top_clause )?
				if (stream_top_clause.HasNext)
				{
					DebugLocation(127, 34);
					adaptor.AddChild(root_1, stream_top_clause.NextTree());

				}
				stream_top_clause.Reset();
				DebugLocation(127, 46);
				adaptor.AddChild(root_1, stream_column_list.NextTree());
				DebugLocation(127, 58);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:127:58: ( into_clause )?
				if (stream_into_clause.HasNext)
				{
					DebugLocation(127, 58);
					adaptor.AddChild(root_1, stream_into_clause.NextTree());

				}
				stream_into_clause.Reset();
				DebugLocation(127, 71);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:127:71: ( from_clause )?
				if (stream_from_clause.HasNext)
				{
					DebugLocation(127, 71);
					adaptor.AddChild(root_1, stream_from_clause.NextTree());

				}
				stream_from_clause.Reset();
				DebugLocation(127, 84);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:127:84: ( where_clause )?
				if (stream_where_clause.HasNext)
				{
					DebugLocation(127, 84);
					adaptor.AddChild(root_1, stream_where_clause.NextTree());

				}
				stream_where_clause.Reset();
				DebugLocation(127, 98);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:127:98: ( groupby_clause )?
				if (stream_groupby_clause.HasNext)
				{
					DebugLocation(127, 98);
					adaptor.AddChild(root_1, stream_groupby_clause.NextTree());

				}
				stream_groupby_clause.Reset();
				DebugLocation(127, 114);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:127:114: ( having_clause )?
				if (stream_having_clause.HasNext)
				{
					DebugLocation(127, 114);
					adaptor.AddChild(root_1, stream_having_clause.NextTree());

				}
				stream_having_clause.Reset();
				DebugLocation(127, 129);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:127:129: ( orderby_clause )?
				if (stream_orderby_clause.HasNext)
				{
					DebugLocation(127, 129);
					adaptor.AddChild(root_1, stream_orderby_clause.NextTree());

				}
				stream_orderby_clause.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("select_command", 4);
			LeaveRule("select_command", 4);
			LeaveRule_select_command();
	    }
	 	DebugLocation(128, 1);
		} finally { DebugExitRule(GrammarFileName, "select_command"); }
		return retval;

	}
	// $ANTLR end "select_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_distinct_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_distinct_clause() {}

	// $ANTLR start "distinct_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:130:1: distinct_clause : ( DISTINCT -> T_DISTINCT | ALL -> T_ALL );
	[GrammarRule("distinct_clause")]
	private AstParserRuleReturnScope<object, IToken> distinct_clause()
	{
		EnterRule_distinct_clause();
		EnterRule("distinct_clause", 5);
		TraceIn("distinct_clause", 5);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken DISTINCT38 = default(IToken);
	    IToken ALL39 = default(IToken);

	    object DISTINCT38_tree = default(object);
	    object ALL39_tree = default(object);
	    RewriteRuleITokenStream stream_DISTINCT=new RewriteRuleITokenStream(adaptor,"token DISTINCT");
	    RewriteRuleITokenStream stream_ALL=new RewriteRuleITokenStream(adaptor,"token ALL");

		try { DebugEnterRule(GrammarFileName, "distinct_clause");
		DebugLocation(130, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:131:2: ( DISTINCT -> T_DISTINCT | ALL -> T_ALL )
			int alt19=2;
			try { DebugEnterDecision(19, decisionCanBacktrack[19]);
			int LA19_0 = input.LA(1);

			if ((LA19_0==DISTINCT))
			{
				alt19 = 1;
			}
			else if ((LA19_0==ALL))
			{
				alt19 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 19, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:131:4: DISTINCT
				{
				DebugLocation(131, 4);
				DISTINCT38=(IToken)Match(input,DISTINCT,Follow._DISTINCT_in_distinct_clause590);  
				stream_DISTINCT.Add(DISTINCT38);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 131:13: -> T_DISTINCT
				{
					DebugLocation(131, 16);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_DISTINCT, "T_DISTINCT"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:132:4: ALL
				{
				DebugLocation(132, 4);
				ALL39=(IToken)Match(input,ALL,Follow._ALL_in_distinct_clause599);  
				stream_ALL.Add(ALL39);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 132:8: -> T_ALL
				{
					DebugLocation(132, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_ALL, "T_ALL"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("distinct_clause", 5);
			LeaveRule("distinct_clause", 5);
			LeaveRule_distinct_clause();
	    }
	 	DebugLocation(133, 1);
		} finally { DebugExitRule(GrammarFileName, "distinct_clause"); }
		return retval;

	}
	// $ANTLR end "distinct_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_top_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_top_clause() {}

	// $ANTLR start "top_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:135:1: top_clause : TOP WS expression -> ^( T_TOP expression ) ;
	[GrammarRule("top_clause")]
	private AstParserRuleReturnScope<object, IToken> top_clause()
	{
		EnterRule_top_clause();
		EnterRule("top_clause", 6);
		TraceIn("top_clause", 6);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOP40 = default(IToken);
	    IToken WS41 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression42 = default(AstParserRuleReturnScope<object, IToken>);

	    object TOP40_tree = default(object);
	    object WS41_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_TOP=new RewriteRuleITokenStream(adaptor,"token TOP");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "top_clause");
		DebugLocation(135, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:136:2: ( TOP WS expression -> ^( T_TOP expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:136:4: TOP WS expression
			{
			DebugLocation(136, 4);
			TOP40=(IToken)Match(input,TOP,Follow._TOP_in_top_clause615);  
			stream_TOP.Add(TOP40);

			DebugLocation(136, 8);
			WS41=(IToken)Match(input,WS,Follow._WS_in_top_clause617);  
			stream_WS.Add(WS41);

			DebugLocation(136, 11);
			PushFollow(Follow._expression_in_top_clause619);
			expression42=expression();
			PopFollow();

			stream_expression.Add(expression42.Tree);


			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 137:2: -> ^( T_TOP expression )
			{
				DebugLocation(137, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:137:5: ^( T_TOP expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(137, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_TOP, "T_TOP"), root_1);

				DebugLocation(137, 13);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("top_clause", 6);
			LeaveRule("top_clause", 6);
			LeaveRule_top_clause();
	    }
	 	DebugLocation(138, 1);
		} finally { DebugExitRule(GrammarFileName, "top_clause"); }
		return retval;

	}
	// $ANTLR end "top_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_column_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_column_list() {}

	// $ANTLR start "column_list"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:140:1: column_list : column ( ( WS )? ',' ( WS )? column )* -> ^( T_COLUMNLIST ( column )* ) ;
	[GrammarRule("column_list")]
	private AstParserRuleReturnScope<object, IToken> column_list()
	{
		EnterRule_column_list();
		EnterRule("column_list", 7);
		TraceIn("column_list", 7);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS44 = default(IToken);
	    IToken char_literal45 = default(IToken);
	    IToken WS46 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> column43 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> column47 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS44_tree = default(object);
	    object char_literal45_tree = default(object);
	    object WS46_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_159=new RewriteRuleITokenStream(adaptor,"token 159");
	    RewriteRuleSubtreeStream stream_column=new RewriteRuleSubtreeStream(adaptor,"rule column");
		try { DebugEnterRule(GrammarFileName, "column_list");
		DebugLocation(140, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:141:2: ( column ( ( WS )? ',' ( WS )? column )* -> ^( T_COLUMNLIST ( column )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:141:4: column ( ( WS )? ',' ( WS )? column )*
			{
			DebugLocation(141, 4);
			PushFollow(Follow._column_in_column_list641);
			column43=column();
			PopFollow();

			stream_column.Add(column43.Tree);
			DebugLocation(141, 11);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:141:11: ( ( WS )? ',' ( WS )? column )*
			try { DebugEnterSubRule(22);
			while (true)
			{
				int alt22=2;
				try { DebugEnterDecision(22, decisionCanBacktrack[22]);
				int LA22_0 = input.LA(1);

				if ((LA22_0==WS))
				{
					int LA22_1 = input.LA(2);

					if ((LA22_1==159))
					{
						alt22 = 1;
					}


				}
				else if ((LA22_0==159))
				{
					alt22 = 1;
				}


				} finally { DebugExitDecision(22); }
				switch ( alt22 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:141:12: ( WS )? ',' ( WS )? column
					{
					DebugLocation(141, 12);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:141:12: ( WS )?
					int alt20=2;
					try { DebugEnterSubRule(20);
					try { DebugEnterDecision(20, decisionCanBacktrack[20]);
					int LA20_0 = input.LA(1);

					if ((LA20_0==WS))
					{
						alt20 = 1;
					}
					} finally { DebugExitDecision(20); }
					switch (alt20)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:141:12: WS
						{
						DebugLocation(141, 12);
						WS44=(IToken)Match(input,WS,Follow._WS_in_column_list644);  
						stream_WS.Add(WS44);


						}
						break;

					}
					} finally { DebugExitSubRule(20); }

					DebugLocation(141, 16);
					char_literal45=(IToken)Match(input,159,Follow._159_in_column_list647);  
					stream_159.Add(char_literal45);

					DebugLocation(141, 20);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:141:20: ( WS )?
					int alt21=2;
					try { DebugEnterSubRule(21);
					try { DebugEnterDecision(21, decisionCanBacktrack[21]);
					int LA21_0 = input.LA(1);

					if ((LA21_0==WS))
					{
						alt21 = 1;
					}
					} finally { DebugExitDecision(21); }
					switch (alt21)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:141:20: WS
						{
						DebugLocation(141, 20);
						WS46=(IToken)Match(input,WS,Follow._WS_in_column_list649);  
						stream_WS.Add(WS46);


						}
						break;

					}
					} finally { DebugExitSubRule(21); }

					DebugLocation(141, 24);
					PushFollow(Follow._column_in_column_list652);
					column47=column();
					PopFollow();

					stream_column.Add(column47.Tree);

					}
					break;

				default:
					goto loop22;
				}
			}

			loop22:
				;

			} finally { DebugExitSubRule(22); }



			{
			// AST REWRITE
			// elements: column
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 142:2: -> ^( T_COLUMNLIST ( column )* )
			{
				DebugLocation(142, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:142:5: ^( T_COLUMNLIST ( column )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(142, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_COLUMNLIST, "T_COLUMNLIST"), root_1);

				DebugLocation(142, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:142:20: ( column )*
				while ( stream_column.HasNext )
				{
					DebugLocation(142, 20);
					adaptor.AddChild(root_1, stream_column.NextTree());

				}
				stream_column.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("column_list", 7);
			LeaveRule("column_list", 7);
			LeaveRule_column_list();
	    }
	 	DebugLocation(143, 1);
		} finally { DebugExitRule(GrammarFileName, "column_list"); }
		return retval;

	}
	// $ANTLR end "column_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_column() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_column() {}

	// $ANTLR start "column"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:145:1: column : ( all_columns | expression ( WS SIMPLE_FILE )? -> ^( T_COLUMN expression ( SIMPLE_FILE )? ) );
	[GrammarRule("column")]
	private AstParserRuleReturnScope<object, IToken> column()
	{
		EnterRule_column();
		EnterRule("column", 8);
		TraceIn("column", 8);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS50 = default(IToken);
	    IToken SIMPLE_FILE51 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> all_columns48 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression49 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS50_tree = default(object);
	    object SIMPLE_FILE51_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_SIMPLE_FILE=new RewriteRuleITokenStream(adaptor,"token SIMPLE_FILE");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "column");
		DebugLocation(145, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:146:2: ( all_columns | expression ( WS SIMPLE_FILE )? -> ^( T_COLUMN expression ( SIMPLE_FILE )? ) )
			int alt24=2;
			try { DebugEnterDecision(24, decisionCanBacktrack[24]);
			switch (input.LA(1))
			{
			case SIMPLE_FILE:
				{
				switch (input.LA(2))
				{
				case WS:
					{
					int LA24_4 = input.LA(3);

					if ((LA24_4==EOF||LA24_4==AND||LA24_4==BETWEEN||LA24_4==CREATE||LA24_4==DECLARE||LA24_4==DROP||LA24_4==FROM||LA24_4==GROUP||LA24_4==HAVING||(LA24_4>=IN && LA24_4<=INTO)||LA24_4==LIKE||LA24_4==MATCH||LA24_4==NOT||(LA24_4>=OR && LA24_4<=ORDER)||(LA24_4>=SELECT && LA24_4<=SIMPLE_FILE)||LA24_4==USE||LA24_4==WHERE||(LA24_4>=150 && LA24_4<=154)||(LA24_4>=156 && LA24_4<=160)||(LA24_4>=162 && LA24_4<=169)||(LA24_4>=172 && LA24_4<=173)))
					{
						alt24 = 2;
					}
					else if ((LA24_4==161))
					{
						switch (input.LA(4))
						{
						case WS:
							{
							int LA24_6 = input.LA(5);

							if ((LA24_6==157))
							{
								alt24 = 1;
							}
							else if ((LA24_6==SIMPLE_FILE))
							{
								alt24 = 2;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 24, 6, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case 157:
							{
							alt24 = 1;
							}
							break;
						case SIMPLE_FILE:
							{
							alt24 = 2;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 24, 5, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 24, 4, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 161:
					{
					switch (input.LA(3))
					{
					case WS:
						{
						int LA24_6 = input.LA(4);

						if ((LA24_6==157))
						{
							alt24 = 1;
						}
						else if ((LA24_6==SIMPLE_FILE))
						{
							alt24 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 24, 6, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case 157:
						{
						alt24 = 1;
						}
						break;
					case SIMPLE_FILE:
						{
						alt24 = 2;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 24, 5, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					}
					break;
				case EOF:
				case CREATE:
				case DECLARE:
				case DROP:
				case SELECT:
				case SET:
				case USE:
				case 150:
				case 151:
				case 152:
				case 153:
				case 154:
				case 156:
				case 157:
				case 158:
				case 159:
				case 160:
				case 162:
				case 163:
				case 164:
				case 165:
				case 166:
				case 167:
				case 168:
				case 169:
				case 172:
				case 173:
					{
					alt24 = 2;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 24, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				}
				break;
			case 157:
				{
				alt24 = 1;
				}
				break;
			case CASE:
			case CAST:
			case CONVERT:
			case EXISTS:
			case NOT:
			case NUMBER:
			case STRING:
			case SYSTEMVAR:
			case TOKEN:
			case VARIABLE:
			case 155:
				{
				alt24 = 2;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 24, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:146:4: all_columns
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(146, 4);
				PushFollow(Follow._all_columns_in_column676);
				all_columns48=all_columns();
				PopFollow();

				adaptor.AddChild(root_0, all_columns48.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:147:4: expression ( WS SIMPLE_FILE )?
				{
				DebugLocation(147, 4);
				PushFollow(Follow._expression_in_column681);
				expression49=expression();
				PopFollow();

				stream_expression.Add(expression49.Tree);
				DebugLocation(147, 15);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:147:15: ( WS SIMPLE_FILE )?
				int alt23=2;
				try { DebugEnterSubRule(23);
				try { DebugEnterDecision(23, decisionCanBacktrack[23]);
				int LA23_0 = input.LA(1);

				if ((LA23_0==WS))
				{
					int LA23_1 = input.LA(2);

					if ((LA23_1==SIMPLE_FILE))
					{
						alt23 = 1;
					}
				}
				} finally { DebugExitDecision(23); }
				switch (alt23)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:147:16: WS SIMPLE_FILE
					{
					DebugLocation(147, 16);
					WS50=(IToken)Match(input,WS,Follow._WS_in_column684);  
					stream_WS.Add(WS50);

					DebugLocation(147, 19);
					SIMPLE_FILE51=(IToken)Match(input,SIMPLE_FILE,Follow._SIMPLE_FILE_in_column686);  
					stream_SIMPLE_FILE.Add(SIMPLE_FILE51);


					}
					break;

				}
				} finally { DebugExitSubRule(23); }



				{
				// AST REWRITE
				// elements: SIMPLE_FILE, expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 147:33: -> ^( T_COLUMN expression ( SIMPLE_FILE )? )
				{
					DebugLocation(147, 36);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:147:36: ^( T_COLUMN expression ( SIMPLE_FILE )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(147, 38);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_COLUMN, "T_COLUMN"), root_1);

					DebugLocation(147, 47);
					adaptor.AddChild(root_1, stream_expression.NextTree());
					DebugLocation(147, 58);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:147:58: ( SIMPLE_FILE )?
					if (stream_SIMPLE_FILE.HasNext)
					{
						DebugLocation(147, 58);
						adaptor.AddChild(root_1, stream_SIMPLE_FILE.NextNode());

					}
					stream_SIMPLE_FILE.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("column", 8);
			LeaveRule("column", 8);
			LeaveRule_column();
	    }
	 	DebugLocation(148, 1);
		} finally { DebugExitRule(GrammarFileName, "column"); }
		return retval;

	}
	// $ANTLR end "column"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_all_columns() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_all_columns() {}

	// $ANTLR start "all_columns"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:150:1: all_columns : ( table_alias ( WS )? '.' ( WS )? )? '*' -> ^( T_ALLCOLUMNS ( table_alias )? ) ;
	[GrammarRule("all_columns")]
	private AstParserRuleReturnScope<object, IToken> all_columns()
	{
		EnterRule_all_columns();
		EnterRule("all_columns", 9);
		TraceIn("all_columns", 9);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS53 = default(IToken);
	    IToken char_literal54 = default(IToken);
	    IToken WS55 = default(IToken);
	    IToken char_literal56 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> table_alias52 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS53_tree = default(object);
	    object char_literal54_tree = default(object);
	    object WS55_tree = default(object);
	    object char_literal56_tree = default(object);
	    RewriteRuleITokenStream stream_161=new RewriteRuleITokenStream(adaptor,"token 161");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_157=new RewriteRuleITokenStream(adaptor,"token 157");
	    RewriteRuleSubtreeStream stream_table_alias=new RewriteRuleSubtreeStream(adaptor,"rule table_alias");
		try { DebugEnterRule(GrammarFileName, "all_columns");
		DebugLocation(150, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:151:2: ( ( table_alias ( WS )? '.' ( WS )? )? '*' -> ^( T_ALLCOLUMNS ( table_alias )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:151:4: ( table_alias ( WS )? '.' ( WS )? )? '*'
			{
			DebugLocation(151, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:151:4: ( table_alias ( WS )? '.' ( WS )? )?
			int alt27=2;
			try { DebugEnterSubRule(27);
			try { DebugEnterDecision(27, decisionCanBacktrack[27]);
			int LA27_0 = input.LA(1);

			if ((LA27_0==SIMPLE_FILE))
			{
				alt27 = 1;
			}
			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:151:5: table_alias ( WS )? '.' ( WS )?
				{
				DebugLocation(151, 5);
				PushFollow(Follow._table_alias_in_all_columns711);
				table_alias52=table_alias();
				PopFollow();

				stream_table_alias.Add(table_alias52.Tree);
				DebugLocation(151, 17);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:151:17: ( WS )?
				int alt25=2;
				try { DebugEnterSubRule(25);
				try { DebugEnterDecision(25, decisionCanBacktrack[25]);
				int LA25_0 = input.LA(1);

				if ((LA25_0==WS))
				{
					alt25 = 1;
				}
				} finally { DebugExitDecision(25); }
				switch (alt25)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:151:17: WS
					{
					DebugLocation(151, 17);
					WS53=(IToken)Match(input,WS,Follow._WS_in_all_columns713);  
					stream_WS.Add(WS53);


					}
					break;

				}
				} finally { DebugExitSubRule(25); }

				DebugLocation(151, 21);
				char_literal54=(IToken)Match(input,161,Follow._161_in_all_columns716);  
				stream_161.Add(char_literal54);

				DebugLocation(151, 25);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:151:25: ( WS )?
				int alt26=2;
				try { DebugEnterSubRule(26);
				try { DebugEnterDecision(26, decisionCanBacktrack[26]);
				int LA26_0 = input.LA(1);

				if ((LA26_0==WS))
				{
					alt26 = 1;
				}
				} finally { DebugExitDecision(26); }
				switch (alt26)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:151:25: WS
					{
					DebugLocation(151, 25);
					WS55=(IToken)Match(input,WS,Follow._WS_in_all_columns718);  
					stream_WS.Add(WS55);


					}
					break;

				}
				} finally { DebugExitSubRule(26); }


				}
				break;

			}
			} finally { DebugExitSubRule(27); }

			DebugLocation(151, 31);
			char_literal56=(IToken)Match(input,157,Follow._157_in_all_columns723);  
			stream_157.Add(char_literal56);



			{
			// AST REWRITE
			// elements: table_alias
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 151:35: -> ^( T_ALLCOLUMNS ( table_alias )? )
			{
				DebugLocation(151, 38);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:151:38: ^( T_ALLCOLUMNS ( table_alias )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(151, 40);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_ALLCOLUMNS, "T_ALLCOLUMNS"), root_1);

				DebugLocation(151, 53);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:151:53: ( table_alias )?
				if (stream_table_alias.HasNext)
				{
					DebugLocation(151, 53);
					adaptor.AddChild(root_1, stream_table_alias.NextTree());

				}
				stream_table_alias.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("all_columns", 9);
			LeaveRule("all_columns", 9);
			LeaveRule_all_columns();
	    }
	 	DebugLocation(152, 1);
		} finally { DebugExitRule(GrammarFileName, "all_columns"); }
		return retval;

	}
	// $ANTLR end "all_columns"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_into_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_into_clause() {}

	// $ANTLR start "into_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:154:1: into_clause : INTO WS file -> ^( T_INTO file ) ;
	[GrammarRule("into_clause")]
	private AstParserRuleReturnScope<object, IToken> into_clause()
	{
		EnterRule_into_clause();
		EnterRule("into_clause", 10);
		TraceIn("into_clause", 10);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken INTO57 = default(IToken);
	    IToken WS58 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file59 = default(AstParserRuleReturnScope<object, IToken>);

	    object INTO57_tree = default(object);
	    object WS58_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_INTO=new RewriteRuleITokenStream(adaptor,"token INTO");
	    RewriteRuleSubtreeStream stream_file=new RewriteRuleSubtreeStream(adaptor,"rule file");
		try { DebugEnterRule(GrammarFileName, "into_clause");
		DebugLocation(154, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:155:2: ( INTO WS file -> ^( T_INTO file ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:155:4: INTO WS file
			{
			DebugLocation(155, 4);
			INTO57=(IToken)Match(input,INTO,Follow._INTO_in_into_clause743);  
			stream_INTO.Add(INTO57);

			DebugLocation(155, 9);
			WS58=(IToken)Match(input,WS,Follow._WS_in_into_clause745);  
			stream_WS.Add(WS58);

			DebugLocation(155, 12);
			PushFollow(Follow._file_in_into_clause747);
			file59=file();
			PopFollow();

			stream_file.Add(file59.Tree);


			{
			// AST REWRITE
			// elements: file
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 155:17: -> ^( T_INTO file )
			{
				DebugLocation(155, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:155:20: ^( T_INTO file )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(155, 22);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_INTO, "T_INTO"), root_1);

				DebugLocation(155, 29);
				adaptor.AddChild(root_1, stream_file.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("into_clause", 10);
			LeaveRule("into_clause", 10);
			LeaveRule_into_clause();
	    }
	 	DebugLocation(156, 1);
		} finally { DebugExitRule(GrammarFileName, "into_clause"); }
		return retval;

	}
	// $ANTLR end "into_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_from_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_from_clause() {}

	// $ANTLR start "from_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:158:1: from_clause : FROM WS from_clause_item ( ( WS )? ',' ( WS )? from_clause_item )* ( WS table_alias )? -> ^( T_FROM ( table_alias )? ( from_clause_item )* ) ;
	[GrammarRule("from_clause")]
	private AstParserRuleReturnScope<object, IToken> from_clause()
	{
		EnterRule_from_clause();
		EnterRule("from_clause", 11);
		TraceIn("from_clause", 11);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken FROM60 = default(IToken);
	    IToken WS61 = default(IToken);
	    IToken WS63 = default(IToken);
	    IToken char_literal64 = default(IToken);
	    IToken WS65 = default(IToken);
	    IToken WS67 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> from_clause_item62 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> from_clause_item66 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> table_alias68 = default(AstParserRuleReturnScope<object, IToken>);

	    object FROM60_tree = default(object);
	    object WS61_tree = default(object);
	    object WS63_tree = default(object);
	    object char_literal64_tree = default(object);
	    object WS65_tree = default(object);
	    object WS67_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_FROM=new RewriteRuleITokenStream(adaptor,"token FROM");
	    RewriteRuleITokenStream stream_159=new RewriteRuleITokenStream(adaptor,"token 159");
	    RewriteRuleSubtreeStream stream_from_clause_item=new RewriteRuleSubtreeStream(adaptor,"rule from_clause_item");
	    RewriteRuleSubtreeStream stream_table_alias=new RewriteRuleSubtreeStream(adaptor,"rule table_alias");
		try { DebugEnterRule(GrammarFileName, "from_clause");
		DebugLocation(158, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:159:2: ( FROM WS from_clause_item ( ( WS )? ',' ( WS )? from_clause_item )* ( WS table_alias )? -> ^( T_FROM ( table_alias )? ( from_clause_item )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:159:4: FROM WS from_clause_item ( ( WS )? ',' ( WS )? from_clause_item )* ( WS table_alias )?
			{
			DebugLocation(159, 4);
			FROM60=(IToken)Match(input,FROM,Follow._FROM_in_from_clause767);  
			stream_FROM.Add(FROM60);

			DebugLocation(159, 9);
			WS61=(IToken)Match(input,WS,Follow._WS_in_from_clause769);  
			stream_WS.Add(WS61);

			DebugLocation(159, 12);
			PushFollow(Follow._from_clause_item_in_from_clause771);
			from_clause_item62=from_clause_item();
			PopFollow();

			stream_from_clause_item.Add(from_clause_item62.Tree);
			DebugLocation(159, 29);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:159:29: ( ( WS )? ',' ( WS )? from_clause_item )*
			try { DebugEnterSubRule(30);
			while (true)
			{
				int alt30=2;
				try { DebugEnterDecision(30, decisionCanBacktrack[30]);
				int LA30_0 = input.LA(1);

				if ((LA30_0==WS))
				{
					int LA30_1 = input.LA(2);

					if ((LA30_1==159))
					{
						alt30 = 1;
					}


				}
				else if ((LA30_0==159))
				{
					alt30 = 1;
				}


				} finally { DebugExitDecision(30); }
				switch ( alt30 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:159:30: ( WS )? ',' ( WS )? from_clause_item
					{
					DebugLocation(159, 30);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:159:30: ( WS )?
					int alt28=2;
					try { DebugEnterSubRule(28);
					try { DebugEnterDecision(28, decisionCanBacktrack[28]);
					int LA28_0 = input.LA(1);

					if ((LA28_0==WS))
					{
						alt28 = 1;
					}
					} finally { DebugExitDecision(28); }
					switch (alt28)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:159:30: WS
						{
						DebugLocation(159, 30);
						WS63=(IToken)Match(input,WS,Follow._WS_in_from_clause774);  
						stream_WS.Add(WS63);


						}
						break;

					}
					} finally { DebugExitSubRule(28); }

					DebugLocation(159, 34);
					char_literal64=(IToken)Match(input,159,Follow._159_in_from_clause777);  
					stream_159.Add(char_literal64);

					DebugLocation(159, 38);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:159:38: ( WS )?
					int alt29=2;
					try { DebugEnterSubRule(29);
					try { DebugEnterDecision(29, decisionCanBacktrack[29]);
					int LA29_0 = input.LA(1);

					if ((LA29_0==WS))
					{
						alt29 = 1;
					}
					} finally { DebugExitDecision(29); }
					switch (alt29)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:159:38: WS
						{
						DebugLocation(159, 38);
						WS65=(IToken)Match(input,WS,Follow._WS_in_from_clause779);  
						stream_WS.Add(WS65);


						}
						break;

					}
					} finally { DebugExitSubRule(29); }

					DebugLocation(159, 42);
					PushFollow(Follow._from_clause_item_in_from_clause782);
					from_clause_item66=from_clause_item();
					PopFollow();

					stream_from_clause_item.Add(from_clause_item66.Tree);

					}
					break;

				default:
					goto loop30;
				}
			}

			loop30:
				;

			} finally { DebugExitSubRule(30); }

			DebugLocation(159, 61);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:159:61: ( WS table_alias )?
			int alt31=2;
			try { DebugEnterSubRule(31);
			try { DebugEnterDecision(31, decisionCanBacktrack[31]);
			int LA31_0 = input.LA(1);

			if ((LA31_0==WS))
			{
				int LA31_1 = input.LA(2);

				if ((LA31_1==SIMPLE_FILE))
				{
					alt31 = 1;
				}
			}
			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:159:62: WS table_alias
				{
				DebugLocation(159, 62);
				WS67=(IToken)Match(input,WS,Follow._WS_in_from_clause787);  
				stream_WS.Add(WS67);

				DebugLocation(159, 65);
				PushFollow(Follow._table_alias_in_from_clause789);
				table_alias68=table_alias();
				PopFollow();

				stream_table_alias.Add(table_alias68.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(31); }



			{
			// AST REWRITE
			// elements: table_alias, from_clause_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 159:79: -> ^( T_FROM ( table_alias )? ( from_clause_item )* )
			{
				DebugLocation(159, 82);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:159:82: ^( T_FROM ( table_alias )? ( from_clause_item )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(159, 84);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FROM, "T_FROM"), root_1);

				DebugLocation(159, 91);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:159:91: ( table_alias )?
				if (stream_table_alias.HasNext)
				{
					DebugLocation(159, 91);
					adaptor.AddChild(root_1, stream_table_alias.NextTree());

				}
				stream_table_alias.Reset();
				DebugLocation(159, 104);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:159:104: ( from_clause_item )*
				while ( stream_from_clause_item.HasNext )
				{
					DebugLocation(159, 104);
					adaptor.AddChild(root_1, stream_from_clause_item.NextTree());

				}
				stream_from_clause_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("from_clause", 11);
			LeaveRule("from_clause", 11);
			LeaveRule_from_clause();
	    }
	 	DebugLocation(161, 1);
		} finally { DebugExitRule(GrammarFileName, "from_clause"); }
		return retval;

	}
	// $ANTLR end "from_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_from_clause_item() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_from_clause_item() {}

	// $ANTLR start "from_clause_item"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:163:1: from_clause_item : ( STRING -> ^( T_FILE STRING ) | file | subquery | view_name );
	[GrammarRule("from_clause_item")]
	private AstParserRuleReturnScope<object, IToken> from_clause_item()
	{
		EnterRule_from_clause_item();
		EnterRule("from_clause_item", 12);
		TraceIn("from_clause_item", 12);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken STRING69 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file70 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> subquery71 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> view_name72 = default(AstParserRuleReturnScope<object, IToken>);

	    object STRING69_tree = default(object);
	    RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");

		try { DebugEnterRule(GrammarFileName, "from_clause_item");
		DebugLocation(163, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:164:2: ( STRING -> ^( T_FILE STRING ) | file | subquery | view_name )
			int alt32=4;
			try { DebugEnterDecision(32, decisionCanBacktrack[32]);
			switch (input.LA(1))
			{
			case STRING:
				{
				alt32 = 1;
				}
				break;
			case SIMPLE_FILE:
			case 170:
				{
				alt32 = 2;
				}
				break;
			case 155:
				{
				alt32 = 3;
				}
				break;
			case TOKEN:
				{
				alt32 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 32, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:164:4: STRING
				{
				DebugLocation(164, 4);
				STRING69=(IToken)Match(input,STRING,Follow._STRING_in_from_clause_item816);  
				stream_STRING.Add(STRING69);



				{
				// AST REWRITE
				// elements: STRING
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 164:11: -> ^( T_FILE STRING )
				{
					DebugLocation(164, 14);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:164:14: ^( T_FILE STRING )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(164, 16);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILE, "T_FILE"), root_1);

					DebugLocation(164, 23);
					adaptor.AddChild(root_1, stream_STRING.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:165:4: file
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(165, 4);
				PushFollow(Follow._file_in_from_clause_item829);
				file70=file();
				PopFollow();

				adaptor.AddChild(root_0, file70.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:166:4: subquery
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(166, 4);
				PushFollow(Follow._subquery_in_from_clause_item834);
				subquery71=subquery();
				PopFollow();

				adaptor.AddChild(root_0, subquery71.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:167:4: view_name
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(167, 4);
				PushFollow(Follow._view_name_in_from_clause_item839);
				view_name72=view_name();
				PopFollow();

				adaptor.AddChild(root_0, view_name72.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("from_clause_item", 12);
			LeaveRule("from_clause_item", 12);
			LeaveRule_from_clause_item();
	    }
	 	DebugLocation(168, 1);
		} finally { DebugExitRule(GrammarFileName, "from_clause_item"); }
		return retval;

	}
	// $ANTLR end "from_clause_item"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_subquery() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_subquery() {}

	// $ANTLR start "subquery"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:170:1: subquery : '(' ( WS )? select_command ( WS )? ')' -> ^( T_SUBQUERY select_command ) ;
	[GrammarRule("subquery")]
	private AstParserRuleReturnScope<object, IToken> subquery()
	{
		EnterRule_subquery();
		EnterRule("subquery", 13);
		TraceIn("subquery", 13);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal73 = default(IToken);
	    IToken WS74 = default(IToken);
	    IToken WS76 = default(IToken);
	    IToken char_literal77 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> select_command75 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal73_tree = default(object);
	    object WS74_tree = default(object);
	    object WS76_tree = default(object);
	    object char_literal77_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_156=new RewriteRuleITokenStream(adaptor,"token 156");
	    RewriteRuleITokenStream stream_155=new RewriteRuleITokenStream(adaptor,"token 155");
	    RewriteRuleSubtreeStream stream_select_command=new RewriteRuleSubtreeStream(adaptor,"rule select_command");
		try { DebugEnterRule(GrammarFileName, "subquery");
		DebugLocation(170, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:171:2: ( '(' ( WS )? select_command ( WS )? ')' -> ^( T_SUBQUERY select_command ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:171:4: '(' ( WS )? select_command ( WS )? ')'
			{
			DebugLocation(171, 4);
			char_literal73=(IToken)Match(input,155,Follow._155_in_subquery851);  
			stream_155.Add(char_literal73);

			DebugLocation(171, 8);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:171:8: ( WS )?
			int alt33=2;
			try { DebugEnterSubRule(33);
			try { DebugEnterDecision(33, decisionCanBacktrack[33]);
			int LA33_0 = input.LA(1);

			if ((LA33_0==WS))
			{
				alt33 = 1;
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:171:8: WS
				{
				DebugLocation(171, 8);
				WS74=(IToken)Match(input,WS,Follow._WS_in_subquery853);  
				stream_WS.Add(WS74);


				}
				break;

			}
			} finally { DebugExitSubRule(33); }

			DebugLocation(171, 12);
			PushFollow(Follow._select_command_in_subquery856);
			select_command75=select_command();
			PopFollow();

			stream_select_command.Add(select_command75.Tree);
			DebugLocation(171, 27);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:171:27: ( WS )?
			int alt34=2;
			try { DebugEnterSubRule(34);
			try { DebugEnterDecision(34, decisionCanBacktrack[34]);
			int LA34_0 = input.LA(1);

			if ((LA34_0==WS))
			{
				alt34 = 1;
			}
			} finally { DebugExitDecision(34); }
			switch (alt34)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:171:27: WS
				{
				DebugLocation(171, 27);
				WS76=(IToken)Match(input,WS,Follow._WS_in_subquery858);  
				stream_WS.Add(WS76);


				}
				break;

			}
			} finally { DebugExitSubRule(34); }

			DebugLocation(171, 31);
			char_literal77=(IToken)Match(input,156,Follow._156_in_subquery861);  
			stream_156.Add(char_literal77);



			{
			// AST REWRITE
			// elements: select_command
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 171:35: -> ^( T_SUBQUERY select_command )
			{
				DebugLocation(171, 38);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:171:38: ^( T_SUBQUERY select_command )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(171, 40);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SUBQUERY, "T_SUBQUERY"), root_1);

				DebugLocation(171, 51);
				adaptor.AddChild(root_1, stream_select_command.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("subquery", 13);
			LeaveRule("subquery", 13);
			LeaveRule_subquery();
	    }
	 	DebugLocation(172, 1);
		} finally { DebugExitRule(GrammarFileName, "subquery"); }
		return retval;

	}
	// $ANTLR end "subquery"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file() {}

	// $ANTLR start "file"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:174:1: file : ( '[' ( WS )? file_spec ( WS file_option )* ( WS )? ']' -> ^( T_FILE file_spec ( file_option )* ) | SIMPLE_FILE -> ^( T_FILE SIMPLE_FILE ) );
	[GrammarRule("file")]
	private AstParserRuleReturnScope<object, IToken> file()
	{
		EnterRule_file();
		EnterRule("file", 14);
		TraceIn("file", 14);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal78 = default(IToken);
	    IToken WS79 = default(IToken);
	    IToken WS81 = default(IToken);
	    IToken WS83 = default(IToken);
	    IToken char_literal84 = default(IToken);
	    IToken SIMPLE_FILE85 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file_spec80 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> file_option82 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal78_tree = default(object);
	    object WS79_tree = default(object);
	    object WS81_tree = default(object);
	    object WS83_tree = default(object);
	    object char_literal84_tree = default(object);
	    object SIMPLE_FILE85_tree = default(object);
	    RewriteRuleITokenStream stream_170=new RewriteRuleITokenStream(adaptor,"token 170");
	    RewriteRuleITokenStream stream_171=new RewriteRuleITokenStream(adaptor,"token 171");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_SIMPLE_FILE=new RewriteRuleITokenStream(adaptor,"token SIMPLE_FILE");
	    RewriteRuleSubtreeStream stream_file_option=new RewriteRuleSubtreeStream(adaptor,"rule file_option");
	    RewriteRuleSubtreeStream stream_file_spec=new RewriteRuleSubtreeStream(adaptor,"rule file_spec");
		try { DebugEnterRule(GrammarFileName, "file");
		DebugLocation(174, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:175:2: ( '[' ( WS )? file_spec ( WS file_option )* ( WS )? ']' -> ^( T_FILE file_spec ( file_option )* ) | SIMPLE_FILE -> ^( T_FILE SIMPLE_FILE ) )
			int alt38=2;
			try { DebugEnterDecision(38, decisionCanBacktrack[38]);
			int LA38_0 = input.LA(1);

			if ((LA38_0==170))
			{
				alt38 = 1;
			}
			else if ((LA38_0==SIMPLE_FILE))
			{
				alt38 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 38, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:175:4: '[' ( WS )? file_spec ( WS file_option )* ( WS )? ']'
				{
				DebugLocation(175, 4);
				char_literal78=(IToken)Match(input,170,Follow._170_in_file880);  
				stream_170.Add(char_literal78);

				DebugLocation(175, 8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:175:8: ( WS )?
				int alt35=2;
				try { DebugEnterSubRule(35);
				try { DebugEnterDecision(35, decisionCanBacktrack[35]);
				int LA35_0 = input.LA(1);

				if ((LA35_0==WS))
				{
					alt35 = 1;
				}
				} finally { DebugExitDecision(35); }
				switch (alt35)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:175:8: WS
					{
					DebugLocation(175, 8);
					WS79=(IToken)Match(input,WS,Follow._WS_in_file882);  
					stream_WS.Add(WS79);


					}
					break;

				}
				} finally { DebugExitSubRule(35); }

				DebugLocation(175, 12);
				PushFollow(Follow._file_spec_in_file885);
				file_spec80=file_spec();
				PopFollow();

				stream_file_spec.Add(file_spec80.Tree);
				DebugLocation(175, 22);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:175:22: ( WS file_option )*
				try { DebugEnterSubRule(36);
				while (true)
				{
					int alt36=2;
					try { DebugEnterDecision(36, decisionCanBacktrack[36]);
					int LA36_0 = input.LA(1);

					if ((LA36_0==WS))
					{
						int LA36_1 = input.LA(2);

						if ((LA36_1==160))
						{
							alt36 = 1;
						}


					}


					} finally { DebugExitDecision(36); }
					switch ( alt36 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:175:23: WS file_option
						{
						DebugLocation(175, 23);
						WS81=(IToken)Match(input,WS,Follow._WS_in_file888);  
						stream_WS.Add(WS81);

						DebugLocation(175, 26);
						PushFollow(Follow._file_option_in_file890);
						file_option82=file_option();
						PopFollow();

						stream_file_option.Add(file_option82.Tree);

						}
						break;

					default:
						goto loop36;
					}
				}

				loop36:
					;

				} finally { DebugExitSubRule(36); }

				DebugLocation(175, 40);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:175:40: ( WS )?
				int alt37=2;
				try { DebugEnterSubRule(37);
				try { DebugEnterDecision(37, decisionCanBacktrack[37]);
				int LA37_0 = input.LA(1);

				if ((LA37_0==WS))
				{
					alt37 = 1;
				}
				} finally { DebugExitDecision(37); }
				switch (alt37)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:175:40: WS
					{
					DebugLocation(175, 40);
					WS83=(IToken)Match(input,WS,Follow._WS_in_file894);  
					stream_WS.Add(WS83);


					}
					break;

				}
				} finally { DebugExitSubRule(37); }

				DebugLocation(175, 44);
				char_literal84=(IToken)Match(input,171,Follow._171_in_file897);  
				stream_171.Add(char_literal84);



				{
				// AST REWRITE
				// elements: file_option, file_spec
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 175:48: -> ^( T_FILE file_spec ( file_option )* )
				{
					DebugLocation(175, 51);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:175:51: ^( T_FILE file_spec ( file_option )* )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(175, 53);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILE, "T_FILE"), root_1);

					DebugLocation(175, 60);
					adaptor.AddChild(root_1, stream_file_spec.NextTree());
					DebugLocation(175, 70);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:175:70: ( file_option )*
					while ( stream_file_option.HasNext )
					{
						DebugLocation(175, 70);
						adaptor.AddChild(root_1, stream_file_option.NextTree());

					}
					stream_file_option.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:176:4: SIMPLE_FILE
				{
				DebugLocation(176, 4);
				SIMPLE_FILE85=(IToken)Match(input,SIMPLE_FILE,Follow._SIMPLE_FILE_in_file914);  
				stream_SIMPLE_FILE.Add(SIMPLE_FILE85);



				{
				// AST REWRITE
				// elements: SIMPLE_FILE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 176:16: -> ^( T_FILE SIMPLE_FILE )
				{
					DebugLocation(176, 19);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:176:19: ^( T_FILE SIMPLE_FILE )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(176, 21);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILE, "T_FILE"), root_1);

					DebugLocation(176, 28);
					adaptor.AddChild(root_1, stream_SIMPLE_FILE.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file", 14);
			LeaveRule("file", 14);
			LeaveRule_file();
	    }
	 	DebugLocation(177, 1);
		} finally { DebugExitRule(GrammarFileName, "file"); }
		return retval;

	}
	// $ANTLR end "file"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_spec() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_spec() {}

	// $ANTLR start "file_spec"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:179:1: file_spec : ( string | variable );
	[GrammarRule("file_spec")]
	private AstParserRuleReturnScope<object, IToken> file_spec()
	{
		EnterRule_file_spec();
		EnterRule("file_spec", 15);
		TraceIn("file_spec", 15);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> string86 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> variable87 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "file_spec");
		DebugLocation(179, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:180:2: ( string | variable )
			int alt39=2;
			try { DebugEnterDecision(39, decisionCanBacktrack[39]);
			int LA39_0 = input.LA(1);

			if ((LA39_0==STRING))
			{
				alt39 = 1;
			}
			else if ((LA39_0==VARIABLE))
			{
				alt39 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 39, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:180:4: string
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(180, 4);
				PushFollow(Follow._string_in_file_spec933);
				string86=@string();
				PopFollow();

				adaptor.AddChild(root_0, string86.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:181:4: variable
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(181, 4);
				PushFollow(Follow._variable_in_file_spec938);
				variable87=variable();
				PopFollow();

				adaptor.AddChild(root_0, variable87.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_spec", 15);
			LeaveRule("file_spec", 15);
			LeaveRule_file_spec();
	    }
	 	DebugLocation(182, 1);
		} finally { DebugExitRule(GrammarFileName, "file_spec"); }
		return retval;

	}
	// $ANTLR end "file_spec"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_option() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_option() {}

	// $ANTLR start "file_option"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:184:1: file_option : '-' file_option_name ( ( WS )? '=' ( WS )? file_option_value )? -> ^( T_FILEOPTION file_option_name ( file_option_value )? ) ;
	[GrammarRule("file_option")]
	private AstParserRuleReturnScope<object, IToken> file_option()
	{
		EnterRule_file_option();
		EnterRule("file_option", 16);
		TraceIn("file_option", 16);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal88 = default(IToken);
	    IToken WS90 = default(IToken);
	    IToken char_literal91 = default(IToken);
	    IToken WS92 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file_option_name89 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> file_option_value93 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal88_tree = default(object);
	    object WS90_tree = default(object);
	    object char_literal91_tree = default(object);
	    object WS92_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_160=new RewriteRuleITokenStream(adaptor,"token 160");
	    RewriteRuleITokenStream stream_167=new RewriteRuleITokenStream(adaptor,"token 167");
	    RewriteRuleSubtreeStream stream_file_option_name=new RewriteRuleSubtreeStream(adaptor,"rule file_option_name");
	    RewriteRuleSubtreeStream stream_file_option_value=new RewriteRuleSubtreeStream(adaptor,"rule file_option_value");
		try { DebugEnterRule(GrammarFileName, "file_option");
		DebugLocation(184, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:185:2: ( '-' file_option_name ( ( WS )? '=' ( WS )? file_option_value )? -> ^( T_FILEOPTION file_option_name ( file_option_value )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:185:4: '-' file_option_name ( ( WS )? '=' ( WS )? file_option_value )?
			{
			DebugLocation(185, 4);
			char_literal88=(IToken)Match(input,160,Follow._160_in_file_option950);  
			stream_160.Add(char_literal88);

			DebugLocation(185, 8);
			PushFollow(Follow._file_option_name_in_file_option952);
			file_option_name89=file_option_name();
			PopFollow();

			stream_file_option_name.Add(file_option_name89.Tree);
			DebugLocation(185, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:185:25: ( ( WS )? '=' ( WS )? file_option_value )?
			int alt42=2;
			try { DebugEnterSubRule(42);
			try { DebugEnterDecision(42, decisionCanBacktrack[42]);
			int LA42_0 = input.LA(1);

			if ((LA42_0==WS))
			{
				int LA42_1 = input.LA(2);

				if ((LA42_1==167))
				{
					alt42 = 1;
				}
			}
			else if ((LA42_0==167))
			{
				alt42 = 1;
			}
			} finally { DebugExitDecision(42); }
			switch (alt42)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:185:27: ( WS )? '=' ( WS )? file_option_value
				{
				DebugLocation(185, 27);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:185:27: ( WS )?
				int alt40=2;
				try { DebugEnterSubRule(40);
				try { DebugEnterDecision(40, decisionCanBacktrack[40]);
				int LA40_0 = input.LA(1);

				if ((LA40_0==WS))
				{
					alt40 = 1;
				}
				} finally { DebugExitDecision(40); }
				switch (alt40)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:185:27: WS
					{
					DebugLocation(185, 27);
					WS90=(IToken)Match(input,WS,Follow._WS_in_file_option956);  
					stream_WS.Add(WS90);


					}
					break;

				}
				} finally { DebugExitSubRule(40); }

				DebugLocation(185, 31);
				char_literal91=(IToken)Match(input,167,Follow._167_in_file_option959);  
				stream_167.Add(char_literal91);

				DebugLocation(185, 35);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:185:35: ( WS )?
				int alt41=2;
				try { DebugEnterSubRule(41);
				try { DebugEnterDecision(41, decisionCanBacktrack[41]);
				int LA41_0 = input.LA(1);

				if ((LA41_0==WS))
				{
					alt41 = 1;
				}
				} finally { DebugExitDecision(41); }
				switch (alt41)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:185:35: WS
					{
					DebugLocation(185, 35);
					WS92=(IToken)Match(input,WS,Follow._WS_in_file_option961);  
					stream_WS.Add(WS92);


					}
					break;

				}
				} finally { DebugExitSubRule(41); }

				DebugLocation(185, 39);
				PushFollow(Follow._file_option_value_in_file_option964);
				file_option_value93=file_option_value();
				PopFollow();

				stream_file_option_value.Add(file_option_value93.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(42); }



			{
			// AST REWRITE
			// elements: file_option_value, file_option_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 185:59: -> ^( T_FILEOPTION file_option_name ( file_option_value )? )
			{
				DebugLocation(185, 62);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:185:62: ^( T_FILEOPTION file_option_name ( file_option_value )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(185, 64);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILEOPTION, "T_FILEOPTION"), root_1);

				DebugLocation(185, 77);
				adaptor.AddChild(root_1, stream_file_option_name.NextTree());
				DebugLocation(185, 94);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:185:94: ( file_option_value )?
				if (stream_file_option_value.HasNext)
				{
					DebugLocation(185, 94);
					adaptor.AddChild(root_1, stream_file_option_value.NextTree());

				}
				stream_file_option_value.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_option", 16);
			LeaveRule("file_option", 16);
			LeaveRule_file_option();
	    }
	 	DebugLocation(186, 1);
		} finally { DebugExitRule(GrammarFileName, "file_option"); }
		return retval;

	}
	// $ANTLR end "file_option"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_option_name() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_option_name() {}

	// $ANTLR start "file_option_name"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:188:1: file_option_name : TOKEN ;
	[GrammarRule("file_option_name")]
	private AstParserRuleReturnScope<object, IToken> file_option_name()
	{
		EnterRule_file_option_name();
		EnterRule("file_option_name", 17);
		TraceIn("file_option_name", 17);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN94 = default(IToken);

	    object TOKEN94_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "file_option_name");
		DebugLocation(188, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:189:2: ( TOKEN )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:189:4: TOKEN
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(189, 4);
			TOKEN94=(IToken)Match(input,TOKEN,Follow._TOKEN_in_file_option_name988); 
			TOKEN94_tree = (object)adaptor.Create(TOKEN94);
			adaptor.AddChild(root_0, TOKEN94_tree);


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_option_name", 17);
			LeaveRule("file_option_name", 17);
			LeaveRule_file_option_name();
	    }
	 	DebugLocation(190, 1);
		} finally { DebugExitRule(GrammarFileName, "file_option_name"); }
		return retval;

	}
	// $ANTLR end "file_option_name"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_option_value() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_option_value() {}

	// $ANTLR start "file_option_value"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:192:1: file_option_value : ( TOKEN | STRING | NUMBER | variable );
	[GrammarRule("file_option_value")]
	private AstParserRuleReturnScope<object, IToken> file_option_value()
	{
		EnterRule_file_option_value();
		EnterRule("file_option_value", 18);
		TraceIn("file_option_value", 18);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN95 = default(IToken);
	    IToken STRING96 = default(IToken);
	    IToken NUMBER97 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> variable98 = default(AstParserRuleReturnScope<object, IToken>);

	    object TOKEN95_tree = default(object);
	    object STRING96_tree = default(object);
	    object NUMBER97_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "file_option_value");
		DebugLocation(192, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:193:2: ( TOKEN | STRING | NUMBER | variable )
			int alt43=4;
			try { DebugEnterDecision(43, decisionCanBacktrack[43]);
			switch (input.LA(1))
			{
			case TOKEN:
				{
				alt43 = 1;
				}
				break;
			case STRING:
				{
				alt43 = 2;
				}
				break;
			case NUMBER:
				{
				alt43 = 3;
				}
				break;
			case VARIABLE:
				{
				alt43 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 43, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(43); }
			switch (alt43)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:193:4: TOKEN
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(193, 4);
				TOKEN95=(IToken)Match(input,TOKEN,Follow._TOKEN_in_file_option_value1000); 
				TOKEN95_tree = (object)adaptor.Create(TOKEN95);
				adaptor.AddChild(root_0, TOKEN95_tree);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:193:12: STRING
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(193, 12);
				STRING96=(IToken)Match(input,STRING,Follow._STRING_in_file_option_value1004); 
				STRING96_tree = (object)adaptor.Create(STRING96);
				adaptor.AddChild(root_0, STRING96_tree);


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:193:21: NUMBER
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(193, 21);
				NUMBER97=(IToken)Match(input,NUMBER,Follow._NUMBER_in_file_option_value1008); 
				NUMBER97_tree = (object)adaptor.Create(NUMBER97);
				adaptor.AddChild(root_0, NUMBER97_tree);


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:193:30: variable
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(193, 30);
				PushFollow(Follow._variable_in_file_option_value1012);
				variable98=variable();
				PopFollow();

				adaptor.AddChild(root_0, variable98.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_option_value", 18);
			LeaveRule("file_option_value", 18);
			LeaveRule_file_option_value();
	    }
	 	DebugLocation(194, 1);
		} finally { DebugExitRule(GrammarFileName, "file_option_value"); }
		return retval;

	}
	// $ANTLR end "file_option_value"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_where_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_where_clause() {}

	// $ANTLR start "where_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:196:1: where_clause : WHERE WS expression -> ^( T_WHERE expression ) ;
	[GrammarRule("where_clause")]
	private AstParserRuleReturnScope<object, IToken> where_clause()
	{
		EnterRule_where_clause();
		EnterRule("where_clause", 19);
		TraceIn("where_clause", 19);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WHERE99 = default(IToken);
	    IToken WS100 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression101 = default(AstParserRuleReturnScope<object, IToken>);

	    object WHERE99_tree = default(object);
	    object WS100_tree = default(object);
	    RewriteRuleITokenStream stream_WHERE=new RewriteRuleITokenStream(adaptor,"token WHERE");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "where_clause");
		DebugLocation(196, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:197:2: ( WHERE WS expression -> ^( T_WHERE expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:197:4: WHERE WS expression
			{
			DebugLocation(197, 4);
			WHERE99=(IToken)Match(input,WHERE,Follow._WHERE_in_where_clause1024);  
			stream_WHERE.Add(WHERE99);

			DebugLocation(197, 10);
			WS100=(IToken)Match(input,WS,Follow._WS_in_where_clause1026);  
			stream_WS.Add(WS100);

			DebugLocation(197, 13);
			PushFollow(Follow._expression_in_where_clause1028);
			expression101=expression();
			PopFollow();

			stream_expression.Add(expression101.Tree);


			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 198:2: -> ^( T_WHERE expression )
			{
				DebugLocation(198, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:198:5: ^( T_WHERE expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(198, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_WHERE, "T_WHERE"), root_1);

				DebugLocation(198, 15);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("where_clause", 19);
			LeaveRule("where_clause", 19);
			LeaveRule_where_clause();
	    }
	 	DebugLocation(199, 1);
		} finally { DebugExitRule(GrammarFileName, "where_clause"); }
		return retval;

	}
	// $ANTLR end "where_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_groupby_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_groupby_clause() {}

	// $ANTLR start "groupby_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:200:1: groupby_clause : GROUP WS BY WS orderby_column_list -> ^( T_GROUPBY orderby_column_list ) ;
	[GrammarRule("groupby_clause")]
	private AstParserRuleReturnScope<object, IToken> groupby_clause()
	{
		EnterRule_groupby_clause();
		EnterRule("groupby_clause", 20);
		TraceIn("groupby_clause", 20);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken GROUP102 = default(IToken);
	    IToken WS103 = default(IToken);
	    IToken BY104 = default(IToken);
	    IToken WS105 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> orderby_column_list106 = default(AstParserRuleReturnScope<object, IToken>);

	    object GROUP102_tree = default(object);
	    object WS103_tree = default(object);
	    object BY104_tree = default(object);
	    object WS105_tree = default(object);
	    RewriteRuleITokenStream stream_GROUP=new RewriteRuleITokenStream(adaptor,"token GROUP");
	    RewriteRuleITokenStream stream_BY=new RewriteRuleITokenStream(adaptor,"token BY");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_orderby_column_list=new RewriteRuleSubtreeStream(adaptor,"rule orderby_column_list");
		try { DebugEnterRule(GrammarFileName, "groupby_clause");
		DebugLocation(200, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:201:2: ( GROUP WS BY WS orderby_column_list -> ^( T_GROUPBY orderby_column_list ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:201:4: GROUP WS BY WS orderby_column_list
			{
			DebugLocation(201, 4);
			GROUP102=(IToken)Match(input,GROUP,Follow._GROUP_in_groupby_clause1047);  
			stream_GROUP.Add(GROUP102);

			DebugLocation(201, 10);
			WS103=(IToken)Match(input,WS,Follow._WS_in_groupby_clause1049);  
			stream_WS.Add(WS103);

			DebugLocation(201, 13);
			BY104=(IToken)Match(input,BY,Follow._BY_in_groupby_clause1051);  
			stream_BY.Add(BY104);

			DebugLocation(201, 16);
			WS105=(IToken)Match(input,WS,Follow._WS_in_groupby_clause1053);  
			stream_WS.Add(WS105);

			DebugLocation(201, 19);
			PushFollow(Follow._orderby_column_list_in_groupby_clause1055);
			orderby_column_list106=orderby_column_list();
			PopFollow();

			stream_orderby_column_list.Add(orderby_column_list106.Tree);


			{
			// AST REWRITE
			// elements: orderby_column_list
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 202:2: -> ^( T_GROUPBY orderby_column_list )
			{
				DebugLocation(202, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:202:5: ^( T_GROUPBY orderby_column_list )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(202, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_GROUPBY, "T_GROUPBY"), root_1);

				DebugLocation(202, 17);
				adaptor.AddChild(root_1, stream_orderby_column_list.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("groupby_clause", 20);
			LeaveRule("groupby_clause", 20);
			LeaveRule_groupby_clause();
	    }
	 	DebugLocation(203, 1);
		} finally { DebugExitRule(GrammarFileName, "groupby_clause"); }
		return retval;

	}
	// $ANTLR end "groupby_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_having_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_having_clause() {}

	// $ANTLR start "having_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:205:1: having_clause : HAVING WS expression -> ^( T_HAVING expression ) ;
	[GrammarRule("having_clause")]
	private AstParserRuleReturnScope<object, IToken> having_clause()
	{
		EnterRule_having_clause();
		EnterRule("having_clause", 21);
		TraceIn("having_clause", 21);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken HAVING107 = default(IToken);
	    IToken WS108 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression109 = default(AstParserRuleReturnScope<object, IToken>);

	    object HAVING107_tree = default(object);
	    object WS108_tree = default(object);
	    RewriteRuleITokenStream stream_HAVING=new RewriteRuleITokenStream(adaptor,"token HAVING");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "having_clause");
		DebugLocation(205, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:206:2: ( HAVING WS expression -> ^( T_HAVING expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:206:4: HAVING WS expression
			{
			DebugLocation(206, 4);
			HAVING107=(IToken)Match(input,HAVING,Follow._HAVING_in_having_clause1076);  
			stream_HAVING.Add(HAVING107);

			DebugLocation(206, 11);
			WS108=(IToken)Match(input,WS,Follow._WS_in_having_clause1078);  
			stream_WS.Add(WS108);

			DebugLocation(206, 14);
			PushFollow(Follow._expression_in_having_clause1080);
			expression109=expression();
			PopFollow();

			stream_expression.Add(expression109.Tree);


			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 207:2: -> ^( T_HAVING expression )
			{
				DebugLocation(207, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:207:5: ^( T_HAVING expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(207, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_HAVING, "T_HAVING"), root_1);

				DebugLocation(207, 16);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("having_clause", 21);
			LeaveRule("having_clause", 21);
			LeaveRule_having_clause();
	    }
	 	DebugLocation(208, 1);
		} finally { DebugExitRule(GrammarFileName, "having_clause"); }
		return retval;

	}
	// $ANTLR end "having_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_clause() {}

	// $ANTLR start "orderby_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:210:1: orderby_clause : ORDER WS BY WS orderby_column_list -> ^( T_ORDERBY orderby_column_list ) ;
	[GrammarRule("orderby_clause")]
	private AstParserRuleReturnScope<object, IToken> orderby_clause()
	{
		EnterRule_orderby_clause();
		EnterRule("orderby_clause", 22);
		TraceIn("orderby_clause", 22);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken ORDER110 = default(IToken);
	    IToken WS111 = default(IToken);
	    IToken BY112 = default(IToken);
	    IToken WS113 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> orderby_column_list114 = default(AstParserRuleReturnScope<object, IToken>);

	    object ORDER110_tree = default(object);
	    object WS111_tree = default(object);
	    object BY112_tree = default(object);
	    object WS113_tree = default(object);
	    RewriteRuleITokenStream stream_BY=new RewriteRuleITokenStream(adaptor,"token BY");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_ORDER=new RewriteRuleITokenStream(adaptor,"token ORDER");
	    RewriteRuleSubtreeStream stream_orderby_column_list=new RewriteRuleSubtreeStream(adaptor,"rule orderby_column_list");
		try { DebugEnterRule(GrammarFileName, "orderby_clause");
		DebugLocation(210, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:211:2: ( ORDER WS BY WS orderby_column_list -> ^( T_ORDERBY orderby_column_list ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:211:4: ORDER WS BY WS orderby_column_list
			{
			DebugLocation(211, 4);
			ORDER110=(IToken)Match(input,ORDER,Follow._ORDER_in_orderby_clause1101);  
			stream_ORDER.Add(ORDER110);

			DebugLocation(211, 10);
			WS111=(IToken)Match(input,WS,Follow._WS_in_orderby_clause1103);  
			stream_WS.Add(WS111);

			DebugLocation(211, 13);
			BY112=(IToken)Match(input,BY,Follow._BY_in_orderby_clause1105);  
			stream_BY.Add(BY112);

			DebugLocation(211, 16);
			WS113=(IToken)Match(input,WS,Follow._WS_in_orderby_clause1107);  
			stream_WS.Add(WS113);

			DebugLocation(211, 19);
			PushFollow(Follow._orderby_column_list_in_orderby_clause1109);
			orderby_column_list114=orderby_column_list();
			PopFollow();

			stream_orderby_column_list.Add(orderby_column_list114.Tree);


			{
			// AST REWRITE
			// elements: orderby_column_list
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 212:2: -> ^( T_ORDERBY orderby_column_list )
			{
				DebugLocation(212, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:212:5: ^( T_ORDERBY orderby_column_list )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(212, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_ORDERBY, "T_ORDERBY"), root_1);

				DebugLocation(212, 17);
				adaptor.AddChild(root_1, stream_orderby_column_list.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_clause", 22);
			LeaveRule("orderby_clause", 22);
			LeaveRule_orderby_clause();
	    }
	 	DebugLocation(213, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_clause"); }
		return retval;

	}
	// $ANTLR end "orderby_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_column_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_column_list() {}

	// $ANTLR start "orderby_column_list"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:215:1: orderby_column_list : orderby_column ( ( WS )? ',' ( WS )? orderby_column )* -> ( orderby_column )* ;
	[GrammarRule("orderby_column_list")]
	private AstParserRuleReturnScope<object, IToken> orderby_column_list()
	{
		EnterRule_orderby_column_list();
		EnterRule("orderby_column_list", 23);
		TraceIn("orderby_column_list", 23);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS116 = default(IToken);
	    IToken char_literal117 = default(IToken);
	    IToken WS118 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> orderby_column115 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> orderby_column119 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS116_tree = default(object);
	    object char_literal117_tree = default(object);
	    object WS118_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_159=new RewriteRuleITokenStream(adaptor,"token 159");
	    RewriteRuleSubtreeStream stream_orderby_column=new RewriteRuleSubtreeStream(adaptor,"rule orderby_column");
		try { DebugEnterRule(GrammarFileName, "orderby_column_list");
		DebugLocation(215, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:216:2: ( orderby_column ( ( WS )? ',' ( WS )? orderby_column )* -> ( orderby_column )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:216:4: orderby_column ( ( WS )? ',' ( WS )? orderby_column )*
			{
			DebugLocation(216, 4);
			PushFollow(Follow._orderby_column_in_orderby_column_list1130);
			orderby_column115=orderby_column();
			PopFollow();

			stream_orderby_column.Add(orderby_column115.Tree);
			DebugLocation(216, 19);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:216:19: ( ( WS )? ',' ( WS )? orderby_column )*
			try { DebugEnterSubRule(46);
			while (true)
			{
				int alt46=2;
				try { DebugEnterDecision(46, decisionCanBacktrack[46]);
				int LA46_0 = input.LA(1);

				if ((LA46_0==WS))
				{
					int LA46_1 = input.LA(2);

					if ((LA46_1==159))
					{
						alt46 = 1;
					}


				}
				else if ((LA46_0==159))
				{
					alt46 = 1;
				}


				} finally { DebugExitDecision(46); }
				switch ( alt46 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:216:20: ( WS )? ',' ( WS )? orderby_column
					{
					DebugLocation(216, 20);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:216:20: ( WS )?
					int alt44=2;
					try { DebugEnterSubRule(44);
					try { DebugEnterDecision(44, decisionCanBacktrack[44]);
					int LA44_0 = input.LA(1);

					if ((LA44_0==WS))
					{
						alt44 = 1;
					}
					} finally { DebugExitDecision(44); }
					switch (alt44)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:216:20: WS
						{
						DebugLocation(216, 20);
						WS116=(IToken)Match(input,WS,Follow._WS_in_orderby_column_list1133);  
						stream_WS.Add(WS116);


						}
						break;

					}
					} finally { DebugExitSubRule(44); }

					DebugLocation(216, 24);
					char_literal117=(IToken)Match(input,159,Follow._159_in_orderby_column_list1136);  
					stream_159.Add(char_literal117);

					DebugLocation(216, 28);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:216:28: ( WS )?
					int alt45=2;
					try { DebugEnterSubRule(45);
					try { DebugEnterDecision(45, decisionCanBacktrack[45]);
					int LA45_0 = input.LA(1);

					if ((LA45_0==WS))
					{
						alt45 = 1;
					}
					} finally { DebugExitDecision(45); }
					switch (alt45)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:216:28: WS
						{
						DebugLocation(216, 28);
						WS118=(IToken)Match(input,WS,Follow._WS_in_orderby_column_list1138);  
						stream_WS.Add(WS118);


						}
						break;

					}
					} finally { DebugExitSubRule(45); }

					DebugLocation(216, 32);
					PushFollow(Follow._orderby_column_in_orderby_column_list1141);
					orderby_column119=orderby_column();
					PopFollow();

					stream_orderby_column.Add(orderby_column119.Tree);

					}
					break;

				default:
					goto loop46;
				}
			}

			loop46:
				;

			} finally { DebugExitSubRule(46); }



			{
			// AST REWRITE
			// elements: orderby_column
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 217:2: -> ( orderby_column )*
			{
				DebugLocation(217, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:217:5: ( orderby_column )*
				while ( stream_orderby_column.HasNext )
				{
					DebugLocation(217, 5);
					adaptor.AddChild(root_0, stream_orderby_column.NextTree());

				}
				stream_orderby_column.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_column_list", 23);
			LeaveRule("orderby_column_list", 23);
			LeaveRule_orderby_column_list();
	    }
	 	DebugLocation(218, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_column_list"); }
		return retval;

	}
	// $ANTLR end "orderby_column_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_column() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_column() {}

	// $ANTLR start "orderby_column"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:220:1: orderby_column : expression ( WS orderby_direction )? -> ^( T_ORDERBY_COLUMN expression ( orderby_direction )? ) ;
	[GrammarRule("orderby_column")]
	private AstParserRuleReturnScope<object, IToken> orderby_column()
	{
		EnterRule_orderby_column();
		EnterRule("orderby_column", 24);
		TraceIn("orderby_column", 24);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS121 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression120 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> orderby_direction122 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS121_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_orderby_direction=new RewriteRuleSubtreeStream(adaptor,"rule orderby_direction");
		try { DebugEnterRule(GrammarFileName, "orderby_column");
		DebugLocation(220, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:221:2: ( expression ( WS orderby_direction )? -> ^( T_ORDERBY_COLUMN expression ( orderby_direction )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:221:4: expression ( WS orderby_direction )?
			{
			DebugLocation(221, 4);
			PushFollow(Follow._expression_in_orderby_column1161);
			expression120=expression();
			PopFollow();

			stream_expression.Add(expression120.Tree);
			DebugLocation(221, 15);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:221:15: ( WS orderby_direction )?
			int alt47=2;
			try { DebugEnterSubRule(47);
			try { DebugEnterDecision(47, decisionCanBacktrack[47]);
			int LA47_0 = input.LA(1);

			if ((LA47_0==WS))
			{
				int LA47_1 = input.LA(2);

				if ((LA47_1==ASC||LA47_1==DESC||LA47_1==ORIG))
				{
					alt47 = 1;
				}
			}
			} finally { DebugExitDecision(47); }
			switch (alt47)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:221:16: WS orderby_direction
				{
				DebugLocation(221, 16);
				WS121=(IToken)Match(input,WS,Follow._WS_in_orderby_column1164);  
				stream_WS.Add(WS121);

				DebugLocation(221, 19);
				PushFollow(Follow._orderby_direction_in_orderby_column1166);
				orderby_direction122=orderby_direction();
				PopFollow();

				stream_orderby_direction.Add(orderby_direction122.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(47); }



			{
			// AST REWRITE
			// elements: expression, orderby_direction
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 221:39: -> ^( T_ORDERBY_COLUMN expression ( orderby_direction )? )
			{
				DebugLocation(221, 42);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:221:42: ^( T_ORDERBY_COLUMN expression ( orderby_direction )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(221, 44);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_ORDERBY_COLUMN, "T_ORDERBY_COLUMN"), root_1);

				DebugLocation(221, 61);
				adaptor.AddChild(root_1, stream_expression.NextTree());
				DebugLocation(221, 72);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:221:72: ( orderby_direction )?
				if (stream_orderby_direction.HasNext)
				{
					DebugLocation(221, 72);
					adaptor.AddChild(root_1, stream_orderby_direction.NextTree());

				}
				stream_orderby_direction.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_column", 24);
			LeaveRule("orderby_column", 24);
			LeaveRule_orderby_column();
	    }
	 	DebugLocation(222, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_column"); }
		return retval;

	}
	// $ANTLR end "orderby_column"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_direction() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_direction() {}

	// $ANTLR start "orderby_direction"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:224:1: orderby_direction : ( ASC -> T_ORDERBY_ASC | DESC -> T_ORDERBY_DESC | ORIG -> T_ORDERBY_ORIG );
	[GrammarRule("orderby_direction")]
	private AstParserRuleReturnScope<object, IToken> orderby_direction()
	{
		EnterRule_orderby_direction();
		EnterRule("orderby_direction", 25);
		TraceIn("orderby_direction", 25);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken ASC123 = default(IToken);
	    IToken DESC124 = default(IToken);
	    IToken ORIG125 = default(IToken);

	    object ASC123_tree = default(object);
	    object DESC124_tree = default(object);
	    object ORIG125_tree = default(object);
	    RewriteRuleITokenStream stream_DESC=new RewriteRuleITokenStream(adaptor,"token DESC");
	    RewriteRuleITokenStream stream_ASC=new RewriteRuleITokenStream(adaptor,"token ASC");
	    RewriteRuleITokenStream stream_ORIG=new RewriteRuleITokenStream(adaptor,"token ORIG");

		try { DebugEnterRule(GrammarFileName, "orderby_direction");
		DebugLocation(224, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:225:2: ( ASC -> T_ORDERBY_ASC | DESC -> T_ORDERBY_DESC | ORIG -> T_ORDERBY_ORIG )
			int alt48=3;
			try { DebugEnterDecision(48, decisionCanBacktrack[48]);
			switch (input.LA(1))
			{
			case ASC:
				{
				alt48 = 1;
				}
				break;
			case DESC:
				{
				alt48 = 2;
				}
				break;
			case ORIG:
				{
				alt48 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 48, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(48); }
			switch (alt48)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:225:4: ASC
				{
				DebugLocation(225, 4);
				ASC123=(IToken)Match(input,ASC,Follow._ASC_in_orderby_direction1191);  
				stream_ASC.Add(ASC123);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 225:8: -> T_ORDERBY_ASC
				{
					DebugLocation(225, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_ORDERBY_ASC, "T_ORDERBY_ASC"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:226:4: DESC
				{
				DebugLocation(226, 4);
				DESC124=(IToken)Match(input,DESC,Follow._DESC_in_orderby_direction1200);  
				stream_DESC.Add(DESC124);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 226:9: -> T_ORDERBY_DESC
				{
					DebugLocation(226, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_ORDERBY_DESC, "T_ORDERBY_DESC"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:227:4: ORIG
				{
				DebugLocation(227, 4);
				ORIG125=(IToken)Match(input,ORIG,Follow._ORIG_in_orderby_direction1209);  
				stream_ORIG.Add(ORIG125);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 227:9: -> T_ORDERBY_ORIG
				{
					DebugLocation(227, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_ORDERBY_ORIG, "T_ORDERBY_ORIG"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_direction", 25);
			LeaveRule("orderby_direction", 25);
			LeaveRule_orderby_direction();
	    }
	 	DebugLocation(228, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_direction"); }
		return retval;

	}
	// $ANTLR end "orderby_direction"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_use_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_use_command() {}

	// $ANTLR start "use_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:233:1: use_command : USE WS file -> ^( T_USE file ) ;
	[GrammarRule("use_command")]
	private AstParserRuleReturnScope<object, IToken> use_command()
	{
		EnterRule_use_command();
		EnterRule("use_command", 26);
		TraceIn("use_command", 26);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken USE126 = default(IToken);
	    IToken WS127 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file128 = default(AstParserRuleReturnScope<object, IToken>);

	    object USE126_tree = default(object);
	    object WS127_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_USE=new RewriteRuleITokenStream(adaptor,"token USE");
	    RewriteRuleSubtreeStream stream_file=new RewriteRuleSubtreeStream(adaptor,"rule file");
		try { DebugEnterRule(GrammarFileName, "use_command");
		DebugLocation(233, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:234:2: ( USE WS file -> ^( T_USE file ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:234:4: USE WS file
			{
			DebugLocation(234, 4);
			USE126=(IToken)Match(input,USE,Follow._USE_in_use_command1227);  
			stream_USE.Add(USE126);

			DebugLocation(234, 8);
			WS127=(IToken)Match(input,WS,Follow._WS_in_use_command1229);  
			stream_WS.Add(WS127);

			DebugLocation(234, 11);
			PushFollow(Follow._file_in_use_command1231);
			file128=file();
			PopFollow();

			stream_file.Add(file128.Tree);


			{
			// AST REWRITE
			// elements: file
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 234:16: -> ^( T_USE file )
			{
				DebugLocation(234, 19);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:234:19: ^( T_USE file )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(234, 21);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_USE, "T_USE"), root_1);

				DebugLocation(234, 27);
				adaptor.AddChild(root_1, stream_file.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("use_command", 26);
			LeaveRule("use_command", 26);
			LeaveRule_use_command();
	    }
	 	DebugLocation(235, 1);
		} finally { DebugExitRule(GrammarFileName, "use_command"); }
		return retval;

	}
	// $ANTLR end "use_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_declare_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_declare_command() {}

	// $ANTLR start "declare_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:240:1: declare_command : DECLARE WS declaration_list -> declaration_list ;
	[GrammarRule("declare_command")]
	private AstParserRuleReturnScope<object, IToken> declare_command()
	{
		EnterRule_declare_command();
		EnterRule("declare_command", 27);
		TraceIn("declare_command", 27);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken DECLARE129 = default(IToken);
	    IToken WS130 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> declaration_list131 = default(AstParserRuleReturnScope<object, IToken>);

	    object DECLARE129_tree = default(object);
	    object WS130_tree = default(object);
	    RewriteRuleITokenStream stream_DECLARE=new RewriteRuleITokenStream(adaptor,"token DECLARE");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_declaration_list=new RewriteRuleSubtreeStream(adaptor,"rule declaration_list");
		try { DebugEnterRule(GrammarFileName, "declare_command");
		DebugLocation(240, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:241:2: ( DECLARE WS declaration_list -> declaration_list )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:241:4: DECLARE WS declaration_list
			{
			DebugLocation(241, 4);
			DECLARE129=(IToken)Match(input,DECLARE,Follow._DECLARE_in_declare_command1253);  
			stream_DECLARE.Add(DECLARE129);

			DebugLocation(241, 12);
			WS130=(IToken)Match(input,WS,Follow._WS_in_declare_command1255);  
			stream_WS.Add(WS130);

			DebugLocation(241, 15);
			PushFollow(Follow._declaration_list_in_declare_command1257);
			declaration_list131=declaration_list();
			PopFollow();

			stream_declaration_list.Add(declaration_list131.Tree);


			{
			// AST REWRITE
			// elements: declaration_list
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 241:32: -> declaration_list
			{
				DebugLocation(241, 35);
				adaptor.AddChild(root_0, stream_declaration_list.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declare_command", 27);
			LeaveRule("declare_command", 27);
			LeaveRule_declare_command();
	    }
	 	DebugLocation(242, 1);
		} finally { DebugExitRule(GrammarFileName, "declare_command"); }
		return retval;

	}
	// $ANTLR end "declare_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_declaration_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_declaration_list() {}

	// $ANTLR start "declaration_list"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:244:1: declaration_list : declaration ( ( WS )? ',' ( WS )? declaration )* -> ^( T_DECLARE ( declaration )+ ) ;
	[GrammarRule("declaration_list")]
	private AstParserRuleReturnScope<object, IToken> declaration_list()
	{
		EnterRule_declaration_list();
		EnterRule("declaration_list", 28);
		TraceIn("declaration_list", 28);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS133 = default(IToken);
	    IToken char_literal134 = default(IToken);
	    IToken WS135 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> declaration132 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> declaration136 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS133_tree = default(object);
	    object char_literal134_tree = default(object);
	    object WS135_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_159=new RewriteRuleITokenStream(adaptor,"token 159");
	    RewriteRuleSubtreeStream stream_declaration=new RewriteRuleSubtreeStream(adaptor,"rule declaration");
		try { DebugEnterRule(GrammarFileName, "declaration_list");
		DebugLocation(244, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:245:2: ( declaration ( ( WS )? ',' ( WS )? declaration )* -> ^( T_DECLARE ( declaration )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:245:4: declaration ( ( WS )? ',' ( WS )? declaration )*
			{
			DebugLocation(245, 4);
			PushFollow(Follow._declaration_in_declaration_list1274);
			declaration132=declaration();
			PopFollow();

			stream_declaration.Add(declaration132.Tree);
			DebugLocation(245, 16);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:245:16: ( ( WS )? ',' ( WS )? declaration )*
			try { DebugEnterSubRule(51);
			while (true)
			{
				int alt51=2;
				try { DebugEnterDecision(51, decisionCanBacktrack[51]);
				int LA51_0 = input.LA(1);

				if ((LA51_0==WS))
				{
					int LA51_1 = input.LA(2);

					if ((LA51_1==159))
					{
						alt51 = 1;
					}


				}
				else if ((LA51_0==159))
				{
					alt51 = 1;
				}


				} finally { DebugExitDecision(51); }
				switch ( alt51 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:245:17: ( WS )? ',' ( WS )? declaration
					{
					DebugLocation(245, 17);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:245:17: ( WS )?
					int alt49=2;
					try { DebugEnterSubRule(49);
					try { DebugEnterDecision(49, decisionCanBacktrack[49]);
					int LA49_0 = input.LA(1);

					if ((LA49_0==WS))
					{
						alt49 = 1;
					}
					} finally { DebugExitDecision(49); }
					switch (alt49)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:245:17: WS
						{
						DebugLocation(245, 17);
						WS133=(IToken)Match(input,WS,Follow._WS_in_declaration_list1277);  
						stream_WS.Add(WS133);


						}
						break;

					}
					} finally { DebugExitSubRule(49); }

					DebugLocation(245, 21);
					char_literal134=(IToken)Match(input,159,Follow._159_in_declaration_list1280);  
					stream_159.Add(char_literal134);

					DebugLocation(245, 25);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:245:25: ( WS )?
					int alt50=2;
					try { DebugEnterSubRule(50);
					try { DebugEnterDecision(50, decisionCanBacktrack[50]);
					int LA50_0 = input.LA(1);

					if ((LA50_0==WS))
					{
						alt50 = 1;
					}
					} finally { DebugExitDecision(50); }
					switch (alt50)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:245:25: WS
						{
						DebugLocation(245, 25);
						WS135=(IToken)Match(input,WS,Follow._WS_in_declaration_list1282);  
						stream_WS.Add(WS135);


						}
						break;

					}
					} finally { DebugExitSubRule(50); }

					DebugLocation(245, 29);
					PushFollow(Follow._declaration_in_declaration_list1285);
					declaration136=declaration();
					PopFollow();

					stream_declaration.Add(declaration136.Tree);

					}
					break;

				default:
					goto loop51;
				}
			}

			loop51:
				;

			} finally { DebugExitSubRule(51); }



			{
			// AST REWRITE
			// elements: declaration
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 246:2: -> ^( T_DECLARE ( declaration )+ )
			{
				DebugLocation(246, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:246:5: ^( T_DECLARE ( declaration )+ )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(246, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_DECLARE, "T_DECLARE"), root_1);

				DebugLocation(246, 17);
				if (!(stream_declaration.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_declaration.HasNext )
				{
					DebugLocation(246, 17);
					adaptor.AddChild(root_1, stream_declaration.NextTree());

				}
				stream_declaration.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declaration_list", 28);
			LeaveRule("declaration_list", 28);
			LeaveRule_declaration_list();
	    }
	 	DebugLocation(247, 1);
		} finally { DebugExitRule(GrammarFileName, "declaration_list"); }
		return retval;

	}
	// $ANTLR end "declaration_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_declaration() {}

	// $ANTLR start "declaration"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:249:1: declaration : variable WS ( AS WS )? datatype -> ^( T_DECLARATION variable datatype ) ;
	[GrammarRule("declaration")]
	private AstParserRuleReturnScope<object, IToken> declaration()
	{
		EnterRule_declaration();
		EnterRule("declaration", 29);
		TraceIn("declaration", 29);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS138 = default(IToken);
	    IToken AS139 = default(IToken);
	    IToken WS140 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> variable137 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> datatype141 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS138_tree = default(object);
	    object AS139_tree = default(object);
	    object WS140_tree = default(object);
	    RewriteRuleITokenStream stream_AS=new RewriteRuleITokenStream(adaptor,"token AS");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_datatype=new RewriteRuleSubtreeStream(adaptor,"rule datatype");
	    RewriteRuleSubtreeStream stream_variable=new RewriteRuleSubtreeStream(adaptor,"rule variable");
		try { DebugEnterRule(GrammarFileName, "declaration");
		DebugLocation(249, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:250:2: ( variable WS ( AS WS )? datatype -> ^( T_DECLARATION variable datatype ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:250:4: variable WS ( AS WS )? datatype
			{
			DebugLocation(250, 4);
			PushFollow(Follow._variable_in_declaration1309);
			variable137=variable();
			PopFollow();

			stream_variable.Add(variable137.Tree);
			DebugLocation(250, 13);
			WS138=(IToken)Match(input,WS,Follow._WS_in_declaration1311);  
			stream_WS.Add(WS138);

			DebugLocation(250, 16);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:250:16: ( AS WS )?
			int alt52=2;
			try { DebugEnterSubRule(52);
			try { DebugEnterDecision(52, decisionCanBacktrack[52]);
			int LA52_0 = input.LA(1);

			if ((LA52_0==AS))
			{
				alt52 = 1;
			}
			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:250:17: AS WS
				{
				DebugLocation(250, 17);
				AS139=(IToken)Match(input,AS,Follow._AS_in_declaration1314);  
				stream_AS.Add(AS139);

				DebugLocation(250, 20);
				WS140=(IToken)Match(input,WS,Follow._WS_in_declaration1316);  
				stream_WS.Add(WS140);


				}
				break;

			}
			} finally { DebugExitSubRule(52); }

			DebugLocation(250, 25);
			PushFollow(Follow._datatype_in_declaration1320);
			datatype141=datatype();
			PopFollow();

			stream_datatype.Add(datatype141.Tree);


			{
			// AST REWRITE
			// elements: datatype, variable
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 251:2: -> ^( T_DECLARATION variable datatype )
			{
				DebugLocation(251, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:251:5: ^( T_DECLARATION variable datatype )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(251, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_DECLARATION, "T_DECLARATION"), root_1);

				DebugLocation(251, 21);
				adaptor.AddChild(root_1, stream_variable.NextTree());
				DebugLocation(251, 30);
				adaptor.AddChild(root_1, stream_datatype.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declaration", 29);
			LeaveRule("declaration", 29);
			LeaveRule_declaration();
	    }
	 	DebugLocation(252, 1);
		} finally { DebugExitRule(GrammarFileName, "declaration"); }
		return retval;

	}
	// $ANTLR end "declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_create_view_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_create_view_command() {}

	// $ANTLR start "create_view_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:257:1: create_view_command : CREATE WS VIEW WS view_name ( ( WS )? '(' declaration_list ')' )? WS AS WS select_command -> ^( T_CREATE_VIEW view_name ( declaration_list )? select_command ) ;
	[GrammarRule("create_view_command")]
	private AstParserRuleReturnScope<object, IToken> create_view_command()
	{
		EnterRule_create_view_command();
		EnterRule("create_view_command", 30);
		TraceIn("create_view_command", 30);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken CREATE142 = default(IToken);
	    IToken WS143 = default(IToken);
	    IToken VIEW144 = default(IToken);
	    IToken WS145 = default(IToken);
	    IToken WS147 = default(IToken);
	    IToken char_literal148 = default(IToken);
	    IToken char_literal150 = default(IToken);
	    IToken WS151 = default(IToken);
	    IToken AS152 = default(IToken);
	    IToken WS153 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> view_name146 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> declaration_list149 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> select_command154 = default(AstParserRuleReturnScope<object, IToken>);

	    object CREATE142_tree = default(object);
	    object WS143_tree = default(object);
	    object VIEW144_tree = default(object);
	    object WS145_tree = default(object);
	    object WS147_tree = default(object);
	    object char_literal148_tree = default(object);
	    object char_literal150_tree = default(object);
	    object WS151_tree = default(object);
	    object AS152_tree = default(object);
	    object WS153_tree = default(object);
	    RewriteRuleITokenStream stream_AS=new RewriteRuleITokenStream(adaptor,"token AS");
	    RewriteRuleITokenStream stream_CREATE=new RewriteRuleITokenStream(adaptor,"token CREATE");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_VIEW=new RewriteRuleITokenStream(adaptor,"token VIEW");
	    RewriteRuleITokenStream stream_156=new RewriteRuleITokenStream(adaptor,"token 156");
	    RewriteRuleITokenStream stream_155=new RewriteRuleITokenStream(adaptor,"token 155");
	    RewriteRuleSubtreeStream stream_view_name=new RewriteRuleSubtreeStream(adaptor,"rule view_name");
	    RewriteRuleSubtreeStream stream_select_command=new RewriteRuleSubtreeStream(adaptor,"rule select_command");
	    RewriteRuleSubtreeStream stream_declaration_list=new RewriteRuleSubtreeStream(adaptor,"rule declaration_list");
		try { DebugEnterRule(GrammarFileName, "create_view_command");
		DebugLocation(257, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:258:2: ( CREATE WS VIEW WS view_name ( ( WS )? '(' declaration_list ')' )? WS AS WS select_command -> ^( T_CREATE_VIEW view_name ( declaration_list )? select_command ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:258:4: CREATE WS VIEW WS view_name ( ( WS )? '(' declaration_list ')' )? WS AS WS select_command
			{
			DebugLocation(258, 4);
			CREATE142=(IToken)Match(input,CREATE,Follow._CREATE_in_create_view_command1345);  
			stream_CREATE.Add(CREATE142);

			DebugLocation(258, 11);
			WS143=(IToken)Match(input,WS,Follow._WS_in_create_view_command1347);  
			stream_WS.Add(WS143);

			DebugLocation(258, 14);
			VIEW144=(IToken)Match(input,VIEW,Follow._VIEW_in_create_view_command1349);  
			stream_VIEW.Add(VIEW144);

			DebugLocation(258, 19);
			WS145=(IToken)Match(input,WS,Follow._WS_in_create_view_command1351);  
			stream_WS.Add(WS145);

			DebugLocation(258, 22);
			PushFollow(Follow._view_name_in_create_view_command1353);
			view_name146=view_name();
			PopFollow();

			stream_view_name.Add(view_name146.Tree);
			DebugLocation(258, 32);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:258:32: ( ( WS )? '(' declaration_list ')' )?
			int alt54=2;
			try { DebugEnterSubRule(54);
			try { DebugEnterDecision(54, decisionCanBacktrack[54]);
			int LA54_0 = input.LA(1);

			if ((LA54_0==WS))
			{
				int LA54_1 = input.LA(2);

				if ((LA54_1==155))
				{
					alt54 = 1;
				}
			}
			else if ((LA54_0==155))
			{
				alt54 = 1;
			}
			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:258:33: ( WS )? '(' declaration_list ')'
				{
				DebugLocation(258, 33);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:258:33: ( WS )?
				int alt53=2;
				try { DebugEnterSubRule(53);
				try { DebugEnterDecision(53, decisionCanBacktrack[53]);
				int LA53_0 = input.LA(1);

				if ((LA53_0==WS))
				{
					alt53 = 1;
				}
				} finally { DebugExitDecision(53); }
				switch (alt53)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:258:33: WS
					{
					DebugLocation(258, 33);
					WS147=(IToken)Match(input,WS,Follow._WS_in_create_view_command1356);  
					stream_WS.Add(WS147);


					}
					break;

				}
				} finally { DebugExitSubRule(53); }

				DebugLocation(258, 37);
				char_literal148=(IToken)Match(input,155,Follow._155_in_create_view_command1359);  
				stream_155.Add(char_literal148);

				DebugLocation(258, 41);
				PushFollow(Follow._declaration_list_in_create_view_command1361);
				declaration_list149=declaration_list();
				PopFollow();

				stream_declaration_list.Add(declaration_list149.Tree);
				DebugLocation(258, 58);
				char_literal150=(IToken)Match(input,156,Follow._156_in_create_view_command1363);  
				stream_156.Add(char_literal150);


				}
				break;

			}
			} finally { DebugExitSubRule(54); }

			DebugLocation(258, 64);
			WS151=(IToken)Match(input,WS,Follow._WS_in_create_view_command1367);  
			stream_WS.Add(WS151);

			DebugLocation(258, 67);
			AS152=(IToken)Match(input,AS,Follow._AS_in_create_view_command1369);  
			stream_AS.Add(AS152);

			DebugLocation(258, 70);
			WS153=(IToken)Match(input,WS,Follow._WS_in_create_view_command1371);  
			stream_WS.Add(WS153);

			DebugLocation(258, 73);
			PushFollow(Follow._select_command_in_create_view_command1373);
			select_command154=select_command();
			PopFollow();

			stream_select_command.Add(select_command154.Tree);


			{
			// AST REWRITE
			// elements: view_name, declaration_list, select_command
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 259:2: -> ^( T_CREATE_VIEW view_name ( declaration_list )? select_command )
			{
				DebugLocation(259, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:259:5: ^( T_CREATE_VIEW view_name ( declaration_list )? select_command )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(259, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CREATE_VIEW, "T_CREATE_VIEW"), root_1);

				DebugLocation(259, 21);
				adaptor.AddChild(root_1, stream_view_name.NextTree());
				DebugLocation(259, 31);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:259:31: ( declaration_list )?
				if (stream_declaration_list.HasNext)
				{
					DebugLocation(259, 31);
					adaptor.AddChild(root_1, stream_declaration_list.NextTree());

				}
				stream_declaration_list.Reset();
				DebugLocation(259, 49);
				adaptor.AddChild(root_1, stream_select_command.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("create_view_command", 30);
			LeaveRule("create_view_command", 30);
			LeaveRule_create_view_command();
	    }
	 	DebugLocation(260, 1);
		} finally { DebugExitRule(GrammarFileName, "create_view_command"); }
		return retval;

	}
	// $ANTLR end "create_view_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_drop_view_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_drop_view_command() {}

	// $ANTLR start "drop_view_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:262:1: drop_view_command : DROP WS VIEW WS view_name -> ^( T_DROP_VIEW view_name ) ;
	[GrammarRule("drop_view_command")]
	private AstParserRuleReturnScope<object, IToken> drop_view_command()
	{
		EnterRule_drop_view_command();
		EnterRule("drop_view_command", 31);
		TraceIn("drop_view_command", 31);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken DROP155 = default(IToken);
	    IToken WS156 = default(IToken);
	    IToken VIEW157 = default(IToken);
	    IToken WS158 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> view_name159 = default(AstParserRuleReturnScope<object, IToken>);

	    object DROP155_tree = default(object);
	    object WS156_tree = default(object);
	    object VIEW157_tree = default(object);
	    object WS158_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_VIEW=new RewriteRuleITokenStream(adaptor,"token VIEW");
	    RewriteRuleITokenStream stream_DROP=new RewriteRuleITokenStream(adaptor,"token DROP");
	    RewriteRuleSubtreeStream stream_view_name=new RewriteRuleSubtreeStream(adaptor,"rule view_name");
		try { DebugEnterRule(GrammarFileName, "drop_view_command");
		DebugLocation(262, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:263:2: ( DROP WS VIEW WS view_name -> ^( T_DROP_VIEW view_name ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:263:4: DROP WS VIEW WS view_name
			{
			DebugLocation(263, 4);
			DROP155=(IToken)Match(input,DROP,Follow._DROP_in_drop_view_command1399);  
			stream_DROP.Add(DROP155);

			DebugLocation(263, 9);
			WS156=(IToken)Match(input,WS,Follow._WS_in_drop_view_command1401);  
			stream_WS.Add(WS156);

			DebugLocation(263, 12);
			VIEW157=(IToken)Match(input,VIEW,Follow._VIEW_in_drop_view_command1403);  
			stream_VIEW.Add(VIEW157);

			DebugLocation(263, 17);
			WS158=(IToken)Match(input,WS,Follow._WS_in_drop_view_command1405);  
			stream_WS.Add(WS158);

			DebugLocation(263, 20);
			PushFollow(Follow._view_name_in_drop_view_command1407);
			view_name159=view_name();
			PopFollow();

			stream_view_name.Add(view_name159.Tree);


			{
			// AST REWRITE
			// elements: view_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 264:2: -> ^( T_DROP_VIEW view_name )
			{
				DebugLocation(264, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:264:5: ^( T_DROP_VIEW view_name )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(264, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_DROP_VIEW, "T_DROP_VIEW"), root_1);

				DebugLocation(264, 19);
				adaptor.AddChild(root_1, stream_view_name.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("drop_view_command", 31);
			LeaveRule("drop_view_command", 31);
			LeaveRule_drop_view_command();
	    }
	 	DebugLocation(265, 1);
		} finally { DebugExitRule(GrammarFileName, "drop_view_command"); }
		return retval;

	}
	// $ANTLR end "drop_view_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_view_name() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_view_name() {}

	// $ANTLR start "view_name"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:267:1: view_name : TOKEN -> ^( T_VIEW_NAME TOKEN ) ;
	[GrammarRule("view_name")]
	private AstParserRuleReturnScope<object, IToken> view_name()
	{
		EnterRule_view_name();
		EnterRule("view_name", 32);
		TraceIn("view_name", 32);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN160 = default(IToken);

	    object TOKEN160_tree = default(object);
	    RewriteRuleITokenStream stream_TOKEN=new RewriteRuleITokenStream(adaptor,"token TOKEN");

		try { DebugEnterRule(GrammarFileName, "view_name");
		DebugLocation(267, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:268:2: ( TOKEN -> ^( T_VIEW_NAME TOKEN ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:268:4: TOKEN
			{
			DebugLocation(268, 4);
			TOKEN160=(IToken)Match(input,TOKEN,Follow._TOKEN_in_view_name1427);  
			stream_TOKEN.Add(TOKEN160);



			{
			// AST REWRITE
			// elements: TOKEN
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 268:10: -> ^( T_VIEW_NAME TOKEN )
			{
				DebugLocation(268, 13);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:268:13: ^( T_VIEW_NAME TOKEN )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(268, 15);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_VIEW_NAME, "T_VIEW_NAME"), root_1);

				DebugLocation(268, 27);
				adaptor.AddChild(root_1, stream_TOKEN.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("view_name", 32);
			LeaveRule("view_name", 32);
			LeaveRule_view_name();
	    }
	 	DebugLocation(269, 1);
		} finally { DebugExitRule(GrammarFileName, "view_name"); }
		return retval;

	}
	// $ANTLR end "view_name"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_drop_table_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_drop_table_command() {}

	// $ANTLR start "drop_table_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:273:1: drop_table_command : DROP WS TABLE WS file -> ^( T_DROP_TABLE file ) ;
	[GrammarRule("drop_table_command")]
	private AstParserRuleReturnScope<object, IToken> drop_table_command()
	{
		EnterRule_drop_table_command();
		EnterRule("drop_table_command", 33);
		TraceIn("drop_table_command", 33);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken DROP161 = default(IToken);
	    IToken WS162 = default(IToken);
	    IToken TABLE163 = default(IToken);
	    IToken WS164 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file165 = default(AstParserRuleReturnScope<object, IToken>);

	    object DROP161_tree = default(object);
	    object WS162_tree = default(object);
	    object TABLE163_tree = default(object);
	    object WS164_tree = default(object);
	    RewriteRuleITokenStream stream_TABLE=new RewriteRuleITokenStream(adaptor,"token TABLE");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_DROP=new RewriteRuleITokenStream(adaptor,"token DROP");
	    RewriteRuleSubtreeStream stream_file=new RewriteRuleSubtreeStream(adaptor,"rule file");
		try { DebugEnterRule(GrammarFileName, "drop_table_command");
		DebugLocation(273, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:274:2: ( DROP WS TABLE WS file -> ^( T_DROP_TABLE file ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:274:4: DROP WS TABLE WS file
			{
			DebugLocation(274, 4);
			DROP161=(IToken)Match(input,DROP,Follow._DROP_in_drop_table_command1449);  
			stream_DROP.Add(DROP161);

			DebugLocation(274, 9);
			WS162=(IToken)Match(input,WS,Follow._WS_in_drop_table_command1451);  
			stream_WS.Add(WS162);

			DebugLocation(274, 12);
			TABLE163=(IToken)Match(input,TABLE,Follow._TABLE_in_drop_table_command1453);  
			stream_TABLE.Add(TABLE163);

			DebugLocation(274, 18);
			WS164=(IToken)Match(input,WS,Follow._WS_in_drop_table_command1455);  
			stream_WS.Add(WS164);

			DebugLocation(274, 21);
			PushFollow(Follow._file_in_drop_table_command1457);
			file165=file();
			PopFollow();

			stream_file.Add(file165.Tree);


			{
			// AST REWRITE
			// elements: file
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 275:2: -> ^( T_DROP_TABLE file )
			{
				DebugLocation(275, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:275:5: ^( T_DROP_TABLE file )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(275, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_DROP_TABLE, "T_DROP_TABLE"), root_1);

				DebugLocation(275, 20);
				adaptor.AddChild(root_1, stream_file.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("drop_table_command", 33);
			LeaveRule("drop_table_command", 33);
			LeaveRule_drop_table_command();
	    }
	 	DebugLocation(276, 1);
		} finally { DebugExitRule(GrammarFileName, "drop_table_command"); }
		return retval;

	}
	// $ANTLR end "drop_table_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_set_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_set_command() {}

	// $ANTLR start "set_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:282:1: set_command : SET WS variable ( WS )? '=' ( WS )? expression -> ^( T_SET_VARIABLE variable expression ) ;
	[GrammarRule("set_command")]
	private AstParserRuleReturnScope<object, IToken> set_command()
	{
		EnterRule_set_command();
		EnterRule("set_command", 34);
		TraceIn("set_command", 34);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken SET166 = default(IToken);
	    IToken WS167 = default(IToken);
	    IToken WS169 = default(IToken);
	    IToken char_literal170 = default(IToken);
	    IToken WS171 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> variable168 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression172 = default(AstParserRuleReturnScope<object, IToken>);

	    object SET166_tree = default(object);
	    object WS167_tree = default(object);
	    object WS169_tree = default(object);
	    object char_literal170_tree = default(object);
	    object WS171_tree = default(object);
	    RewriteRuleITokenStream stream_SET=new RewriteRuleITokenStream(adaptor,"token SET");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_167=new RewriteRuleITokenStream(adaptor,"token 167");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_variable=new RewriteRuleSubtreeStream(adaptor,"rule variable");
		try { DebugEnterRule(GrammarFileName, "set_command");
		DebugLocation(282, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:283:2: ( SET WS variable ( WS )? '=' ( WS )? expression -> ^( T_SET_VARIABLE variable expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:283:4: SET WS variable ( WS )? '=' ( WS )? expression
			{
			DebugLocation(283, 4);
			SET166=(IToken)Match(input,SET,Follow._SET_in_set_command1481);  
			stream_SET.Add(SET166);

			DebugLocation(283, 8);
			WS167=(IToken)Match(input,WS,Follow._WS_in_set_command1483);  
			stream_WS.Add(WS167);

			DebugLocation(283, 11);
			PushFollow(Follow._variable_in_set_command1485);
			variable168=variable();
			PopFollow();

			stream_variable.Add(variable168.Tree);
			DebugLocation(283, 20);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:283:20: ( WS )?
			int alt55=2;
			try { DebugEnterSubRule(55);
			try { DebugEnterDecision(55, decisionCanBacktrack[55]);
			int LA55_0 = input.LA(1);

			if ((LA55_0==WS))
			{
				alt55 = 1;
			}
			} finally { DebugExitDecision(55); }
			switch (alt55)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:283:20: WS
				{
				DebugLocation(283, 20);
				WS169=(IToken)Match(input,WS,Follow._WS_in_set_command1487);  
				stream_WS.Add(WS169);


				}
				break;

			}
			} finally { DebugExitSubRule(55); }

			DebugLocation(283, 24);
			char_literal170=(IToken)Match(input,167,Follow._167_in_set_command1490);  
			stream_167.Add(char_literal170);

			DebugLocation(283, 28);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:283:28: ( WS )?
			int alt56=2;
			try { DebugEnterSubRule(56);
			try { DebugEnterDecision(56, decisionCanBacktrack[56]);
			int LA56_0 = input.LA(1);

			if ((LA56_0==WS))
			{
				alt56 = 1;
			}
			} finally { DebugExitDecision(56); }
			switch (alt56)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:283:28: WS
				{
				DebugLocation(283, 28);
				WS171=(IToken)Match(input,WS,Follow._WS_in_set_command1492);  
				stream_WS.Add(WS171);


				}
				break;

			}
			} finally { DebugExitSubRule(56); }

			DebugLocation(283, 32);
			PushFollow(Follow._expression_in_set_command1495);
			expression172=expression();
			PopFollow();

			stream_expression.Add(expression172.Tree);


			{
			// AST REWRITE
			// elements: expression, variable
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 284:2: -> ^( T_SET_VARIABLE variable expression )
			{
				DebugLocation(284, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:284:5: ^( T_SET_VARIABLE variable expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(284, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SET_VARIABLE, "T_SET_VARIABLE"), root_1);

				DebugLocation(284, 22);
				adaptor.AddChild(root_1, stream_variable.NextTree());
				DebugLocation(284, 31);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("set_command", 34);
			LeaveRule("set_command", 34);
			LeaveRule_set_command();
	    }
	 	DebugLocation(285, 1);
		} finally { DebugExitRule(GrammarFileName, "set_command"); }
		return retval;

	}
	// $ANTLR end "set_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_list() {}

	// $ANTLR start "expression_list"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:290:1: expression_list : expression ( ( WS )? ',' ( WS )? expression )* -> ^( T_EXPRESSIONLIST ( expression )+ ) ;
	[GrammarRule("expression_list")]
	private AstParserRuleReturnScope<object, IToken> expression_list()
	{
		EnterRule_expression_list();
		EnterRule("expression_list", 35);
		TraceIn("expression_list", 35);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS174 = default(IToken);
	    IToken char_literal175 = default(IToken);
	    IToken WS176 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression173 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression177 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS174_tree = default(object);
	    object char_literal175_tree = default(object);
	    object WS176_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_159=new RewriteRuleITokenStream(adaptor,"token 159");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "expression_list");
		DebugLocation(290, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:291:2: ( expression ( ( WS )? ',' ( WS )? expression )* -> ^( T_EXPRESSIONLIST ( expression )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:291:4: expression ( ( WS )? ',' ( WS )? expression )*
			{
			DebugLocation(291, 4);
			PushFollow(Follow._expression_in_expression_list1520);
			expression173=expression();
			PopFollow();

			stream_expression.Add(expression173.Tree);
			DebugLocation(291, 15);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:291:15: ( ( WS )? ',' ( WS )? expression )*
			try { DebugEnterSubRule(59);
			while (true)
			{
				int alt59=2;
				try { DebugEnterDecision(59, decisionCanBacktrack[59]);
				int LA59_0 = input.LA(1);

				if ((LA59_0==WS))
				{
					int LA59_1 = input.LA(2);

					if ((LA59_1==159))
					{
						alt59 = 1;
					}


				}
				else if ((LA59_0==159))
				{
					alt59 = 1;
				}


				} finally { DebugExitDecision(59); }
				switch ( alt59 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:291:16: ( WS )? ',' ( WS )? expression
					{
					DebugLocation(291, 16);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:291:16: ( WS )?
					int alt57=2;
					try { DebugEnterSubRule(57);
					try { DebugEnterDecision(57, decisionCanBacktrack[57]);
					int LA57_0 = input.LA(1);

					if ((LA57_0==WS))
					{
						alt57 = 1;
					}
					} finally { DebugExitDecision(57); }
					switch (alt57)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:291:16: WS
						{
						DebugLocation(291, 16);
						WS174=(IToken)Match(input,WS,Follow._WS_in_expression_list1523);  
						stream_WS.Add(WS174);


						}
						break;

					}
					} finally { DebugExitSubRule(57); }

					DebugLocation(291, 20);
					char_literal175=(IToken)Match(input,159,Follow._159_in_expression_list1526);  
					stream_159.Add(char_literal175);

					DebugLocation(291, 24);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:291:24: ( WS )?
					int alt58=2;
					try { DebugEnterSubRule(58);
					try { DebugEnterDecision(58, decisionCanBacktrack[58]);
					int LA58_0 = input.LA(1);

					if ((LA58_0==WS))
					{
						alt58 = 1;
					}
					} finally { DebugExitDecision(58); }
					switch (alt58)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:291:24: WS
						{
						DebugLocation(291, 24);
						WS176=(IToken)Match(input,WS,Follow._WS_in_expression_list1528);  
						stream_WS.Add(WS176);


						}
						break;

					}
					} finally { DebugExitSubRule(58); }

					DebugLocation(291, 28);
					PushFollow(Follow._expression_in_expression_list1531);
					expression177=expression();
					PopFollow();

					stream_expression.Add(expression177.Tree);

					}
					break;

				default:
					goto loop59;
				}
			}

			loop59:
				;

			} finally { DebugExitSubRule(59); }



			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 291:41: -> ^( T_EXPRESSIONLIST ( expression )+ )
			{
				DebugLocation(291, 44);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:291:44: ^( T_EXPRESSIONLIST ( expression )+ )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(291, 46);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_EXPRESSIONLIST, "T_EXPRESSIONLIST"), root_1);

				DebugLocation(291, 63);
				if (!(stream_expression.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_expression.HasNext )
				{
					DebugLocation(291, 63);
					adaptor.AddChild(root_1, stream_expression.NextTree());

				}
				stream_expression.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_list", 35);
			LeaveRule("expression_list", 35);
			LeaveRule_expression_list();
	    }
	 	DebugLocation(292, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_list"); }
		return retval;

	}
	// $ANTLR end "expression_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_list_or_select_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_list_or_select_command() {}

	// $ANTLR start "expression_list_or_select_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:294:1: expression_list_or_select_command : ( expression_list | select_command );
	[GrammarRule("expression_list_or_select_command")]
	private AstParserRuleReturnScope<object, IToken> expression_list_or_select_command()
	{
		EnterRule_expression_list_or_select_command();
		EnterRule("expression_list_or_select_command", 36);
		TraceIn("expression_list_or_select_command", 36);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> expression_list178 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> select_command179 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "expression_list_or_select_command");
		DebugLocation(294, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:295:2: ( expression_list | select_command )
			int alt60=2;
			try { DebugEnterDecision(60, decisionCanBacktrack[60]);
			int LA60_0 = input.LA(1);

			if (((LA60_0>=CASE && LA60_0<=CAST)||LA60_0==CONVERT||LA60_0==EXISTS||(LA60_0>=NOT && LA60_0<=NUMBER)||LA60_0==SIMPLE_FILE||(LA60_0>=STRING && LA60_0<=SYSTEMVAR)||LA60_0==TOKEN||LA60_0==VARIABLE||LA60_0==155))
			{
				alt60 = 1;
			}
			else if ((LA60_0==SELECT))
			{
				alt60 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 60, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(60); }
			switch (alt60)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:295:4: expression_list
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(295, 4);
				PushFollow(Follow._expression_list_in_expression_list_or_select_command1554);
				expression_list178=expression_list();
				PopFollow();

				adaptor.AddChild(root_0, expression_list178.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:295:22: select_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(295, 22);
				PushFollow(Follow._select_command_in_expression_list_or_select_command1558);
				select_command179=select_command();
				PopFollow();

				adaptor.AddChild(root_0, select_command179.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_list_or_select_command", 36);
			LeaveRule("expression_list_or_select_command", 36);
			LeaveRule_expression_list_or_select_command();
	    }
	 	DebugLocation(296, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_list_or_select_command"); }
		return retval;

	}
	// $ANTLR end "expression_list_or_select_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression() {}

	// $ANTLR start "expression"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:298:1: expression : expression_7 ;
	[GrammarRule("expression")]
	private AstParserRuleReturnScope<object, IToken> expression()
	{
		EnterRule_expression();
		EnterRule("expression", 37);
		TraceIn("expression", 37);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> expression_7180 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(298, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:299:2: ( expression_7 )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:299:4: expression_7
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(299, 4);
			PushFollow(Follow._expression_7_in_expression1570);
			expression_7180=expression_7();
			PopFollow();

			adaptor.AddChild(root_0, expression_7180.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression", 37);
			LeaveRule("expression", 37);
			LeaveRule_expression();
	    }
	 	DebugLocation(300, 1);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return retval;

	}
	// $ANTLR end "expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_7() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_7() {}

	// $ANTLR start "expression_7"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:302:1: expression_7 : (a= expression_6 -> $a) ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )* ;
	[GrammarRule("expression_7")]
	private AstParserRuleReturnScope<object, IToken> expression_7()
	{
		EnterRule_expression_7();
		EnterRule("expression_7", 38);
		TraceIn("expression_7", 38);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS181 = default(IToken);
	    IToken WS183 = default(IToken);
	    IToken IN184 = default(IToken);
	    IToken WS185 = default(IToken);
	    IToken char_literal186 = default(IToken);
	    IToken WS187 = default(IToken);
	    IToken WS189 = default(IToken);
	    IToken char_literal190 = default(IToken);
	    IToken NOT191 = default(IToken);
	    IToken WS192 = default(IToken);
	    IToken IN193 = default(IToken);
	    IToken WS194 = default(IToken);
	    IToken char_literal195 = default(IToken);
	    IToken WS196 = default(IToken);
	    IToken WS198 = default(IToken);
	    IToken char_literal199 = default(IToken);
	    IToken WS201 = default(IToken);
	    IToken SOME202 = default(IToken);
	    IToken ANY203 = default(IToken);
	    IToken WS204 = default(IToken);
	    IToken char_literal205 = default(IToken);
	    IToken char_literal207 = default(IToken);
	    IToken WS209 = default(IToken);
	    IToken ALL210 = default(IToken);
	    IToken WS211 = default(IToken);
	    IToken char_literal212 = default(IToken);
	    IToken char_literal214 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_7182 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command188 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command197 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_4200 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command206 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_4208 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command213 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS181_tree = default(object);
	    object WS183_tree = default(object);
	    object IN184_tree = default(object);
	    object WS185_tree = default(object);
	    object char_literal186_tree = default(object);
	    object WS187_tree = default(object);
	    object WS189_tree = default(object);
	    object char_literal190_tree = default(object);
	    object NOT191_tree = default(object);
	    object WS192_tree = default(object);
	    object IN193_tree = default(object);
	    object WS194_tree = default(object);
	    object char_literal195_tree = default(object);
	    object WS196_tree = default(object);
	    object WS198_tree = default(object);
	    object char_literal199_tree = default(object);
	    object WS201_tree = default(object);
	    object SOME202_tree = default(object);
	    object ANY203_tree = default(object);
	    object WS204_tree = default(object);
	    object char_literal205_tree = default(object);
	    object char_literal207_tree = default(object);
	    object WS209_tree = default(object);
	    object ALL210_tree = default(object);
	    object WS211_tree = default(object);
	    object char_literal212_tree = default(object);
	    object char_literal214_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_ANY=new RewriteRuleITokenStream(adaptor,"token ANY");
	    RewriteRuleITokenStream stream_IN=new RewriteRuleITokenStream(adaptor,"token IN");
	    RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");
	    RewriteRuleITokenStream stream_SOME=new RewriteRuleITokenStream(adaptor,"token SOME");
	    RewriteRuleITokenStream stream_ALL=new RewriteRuleITokenStream(adaptor,"token ALL");
	    RewriteRuleITokenStream stream_156=new RewriteRuleITokenStream(adaptor,"token 156");
	    RewriteRuleITokenStream stream_155=new RewriteRuleITokenStream(adaptor,"token 155");
	    RewriteRuleSubtreeStream stream_op_7=new RewriteRuleSubtreeStream(adaptor,"rule op_7");
	    RewriteRuleSubtreeStream stream_expression_6=new RewriteRuleSubtreeStream(adaptor,"rule expression_6");
	    RewriteRuleSubtreeStream stream_expression_list_or_select_command=new RewriteRuleSubtreeStream(adaptor,"rule expression_list_or_select_command");
	    RewriteRuleSubtreeStream stream_op_4=new RewriteRuleSubtreeStream(adaptor,"rule op_4");
		try { DebugEnterRule(GrammarFileName, "expression_7");
		DebugLocation(302, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:303:2: ( (a= expression_6 -> $a) ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:303:4: (a= expression_6 -> $a) ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )*
			{
			DebugLocation(303, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:303:4: (a= expression_6 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:303:5: a= expression_6
			{
			DebugLocation(303, 6);
			PushFollow(Follow._expression_6_in_expression_71586);
			a=expression_6();
			PopFollow();

			stream_expression_6.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 303:19: -> $a
			{
				DebugLocation(303, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(303, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:303:25: ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )*
			try { DebugEnterSubRule(73);
			while (true)
			{
				int alt73=2;
				try { DebugEnterDecision(73, decisionCanBacktrack[73]);
				int LA73_0 = input.LA(1);

				if ((LA73_0==WS))
				{
					int LA73_1 = input.LA(2);

					if ((LA73_1==NOT))
					{
						int LA73_3 = input.LA(3);

						if ((LA73_3==WS))
						{
							int LA73_5 = input.LA(4);

							if ((LA73_5==BETWEEN||LA73_5==IN||LA73_5==LIKE||LA73_5==MATCH))
							{
								alt73 = 1;
							}


						}


					}
					else if ((LA73_1==BETWEEN||LA73_1==IN||LA73_1==LIKE||LA73_1==MATCH||LA73_1==OR||(LA73_1>=150 && LA73_1<=152)||(LA73_1>=164 && LA73_1<=169)))
					{
						alt73 = 1;
					}


				}


				} finally { DebugExitDecision(73); }
				switch ( alt73 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:303:26: WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) )
					{
					DebugLocation(303, 26);
					WS181=(IToken)Match(input,WS,Follow._WS_in_expression_71593);  
					stream_WS.Add(WS181);

					DebugLocation(303, 29);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:303:29: ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) )
					int alt72=5;
					try { DebugEnterSubRule(72);
					try { DebugEnterDecision(72, decisionCanBacktrack[72]);
					switch (input.LA(1))
					{
					case BETWEEN:
					case LIKE:
					case MATCH:
					case OR:
						{
						alt72 = 1;
						}
						break;
					case NOT:
						{
						int LA72_2 = input.LA(2);

						if ((LA72_2==WS))
						{
							int LA72_13 = input.LA(3);

							if ((LA72_13==BETWEEN||LA72_13==LIKE||LA72_13==MATCH))
							{
								alt72 = 1;
							}
							else if ((LA72_13==IN))
							{
								alt72 = 3;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 72, 13, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 72, 2, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case IN:
						{
						alt72 = 2;
						}
						break;
					case 167:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA72_14 = input.LA(3);

							if ((LA72_14==ANY||LA72_14==SOME))
							{
								alt72 = 4;
							}
							else if ((LA72_14==ALL))
							{
								alt72 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 72, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt72 = 4;
							}
							break;
						case ALL:
							{
							alt72 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 72, 4, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 169:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA72_14 = input.LA(3);

							if ((LA72_14==ANY||LA72_14==SOME))
							{
								alt72 = 4;
							}
							else if ((LA72_14==ALL))
							{
								alt72 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 72, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt72 = 4;
							}
							break;
						case ALL:
							{
							alt72 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 72, 5, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 165:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA72_14 = input.LA(3);

							if ((LA72_14==ANY||LA72_14==SOME))
							{
								alt72 = 4;
							}
							else if ((LA72_14==ALL))
							{
								alt72 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 72, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt72 = 4;
							}
							break;
						case ALL:
							{
							alt72 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 72, 6, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 166:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA72_14 = input.LA(3);

							if ((LA72_14==ANY||LA72_14==SOME))
							{
								alt72 = 4;
							}
							else if ((LA72_14==ALL))
							{
								alt72 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 72, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt72 = 4;
							}
							break;
						case ALL:
							{
							alt72 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 72, 7, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 151:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA72_14 = input.LA(3);

							if ((LA72_14==ANY||LA72_14==SOME))
							{
								alt72 = 4;
							}
							else if ((LA72_14==ALL))
							{
								alt72 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 72, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt72 = 4;
							}
							break;
						case ALL:
							{
							alt72 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 72, 8, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 152:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA72_14 = input.LA(3);

							if ((LA72_14==ANY||LA72_14==SOME))
							{
								alt72 = 4;
							}
							else if ((LA72_14==ALL))
							{
								alt72 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 72, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt72 = 4;
							}
							break;
						case ALL:
							{
							alt72 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 72, 9, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 150:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA72_14 = input.LA(3);

							if ((LA72_14==ANY||LA72_14==SOME))
							{
								alt72 = 4;
							}
							else if ((LA72_14==ALL))
							{
								alt72 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 72, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt72 = 4;
							}
							break;
						case ALL:
							{
							alt72 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 72, 10, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 168:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA72_14 = input.LA(3);

							if ((LA72_14==ANY||LA72_14==SOME))
							{
								alt72 = 4;
							}
							else if ((LA72_14==ALL))
							{
								alt72 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 72, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt72 = 4;
							}
							break;
						case ALL:
							{
							alt72 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 72, 11, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 164:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA72_14 = input.LA(3);

							if ((LA72_14==ANY||LA72_14==SOME))
							{
								alt72 = 4;
							}
							else if ((LA72_14==ALL))
							{
								alt72 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 72, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt72 = 4;
							}
							break;
						case ALL:
							{
							alt72 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 72, 12, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 72, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(72); }
					switch (alt72)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:304:2: op_7 WS b= expression_6
						{
						DebugLocation(304, 2);
						PushFollow(Follow._op_7_in_expression_71598);
						op_7182=op_7();
						PopFollow();

						stream_op_7.Add(op_7182.Tree);
						DebugLocation(304, 7);
						WS183=(IToken)Match(input,WS,Follow._WS_in_expression_71600);  
						stream_WS.Add(WS183);

						DebugLocation(304, 11);
						PushFollow(Follow._expression_6_in_expression_71604);
						b=expression_6();
						PopFollow();

						stream_expression_6.Add(b.Tree);


						{
						// AST REWRITE
						// elements: op_7, expression_7, b
						// token labels: 
						// rule labels: retval, b
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 304:25: -> ^( T_OP_BINARY op_7 $expression_7 $b)
						{
							DebugLocation(304, 28);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:304:28: ^( T_OP_BINARY op_7 $expression_7 $b)
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(304, 30);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(304, 42);
							adaptor.AddChild(root_1, stream_op_7.NextTree());
							DebugLocation(304, 48);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(304, 62);
							adaptor.AddChild(root_1, stream_b.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:305:4: IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')'
						{
						DebugLocation(305, 4);
						IN184=(IToken)Match(input,IN,Follow._IN_in_expression_71623);  
						stream_IN.Add(IN184);

						DebugLocation(305, 7);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:305:7: ( WS )?
						int alt61=2;
						try { DebugEnterSubRule(61);
						try { DebugEnterDecision(61, decisionCanBacktrack[61]);
						int LA61_0 = input.LA(1);

						if ((LA61_0==WS))
						{
							alt61 = 1;
						}
						} finally { DebugExitDecision(61); }
						switch (alt61)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:305:7: WS
							{
							DebugLocation(305, 7);
							WS185=(IToken)Match(input,WS,Follow._WS_in_expression_71625);  
							stream_WS.Add(WS185);


							}
							break;

						}
						} finally { DebugExitSubRule(61); }

						DebugLocation(305, 11);
						char_literal186=(IToken)Match(input,155,Follow._155_in_expression_71628);  
						stream_155.Add(char_literal186);

						DebugLocation(305, 15);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:305:15: ( WS )?
						int alt62=2;
						try { DebugEnterSubRule(62);
						try { DebugEnterDecision(62, decisionCanBacktrack[62]);
						int LA62_0 = input.LA(1);

						if ((LA62_0==WS))
						{
							alt62 = 1;
						}
						} finally { DebugExitDecision(62); }
						switch (alt62)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:305:15: WS
							{
							DebugLocation(305, 15);
							WS187=(IToken)Match(input,WS,Follow._WS_in_expression_71630);  
							stream_WS.Add(WS187);


							}
							break;

						}
						} finally { DebugExitSubRule(62); }

						DebugLocation(305, 19);
						PushFollow(Follow._expression_list_or_select_command_in_expression_71633);
						expression_list_or_select_command188=expression_list_or_select_command();
						PopFollow();

						stream_expression_list_or_select_command.Add(expression_list_or_select_command188.Tree);
						DebugLocation(305, 53);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:305:53: ( WS )?
						int alt63=2;
						try { DebugEnterSubRule(63);
						try { DebugEnterDecision(63, decisionCanBacktrack[63]);
						int LA63_0 = input.LA(1);

						if ((LA63_0==WS))
						{
							alt63 = 1;
						}
						} finally { DebugExitDecision(63); }
						switch (alt63)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:305:53: WS
							{
							DebugLocation(305, 53);
							WS189=(IToken)Match(input,WS,Follow._WS_in_expression_71635);  
							stream_WS.Add(WS189);


							}
							break;

						}
						} finally { DebugExitSubRule(63); }

						DebugLocation(305, 57);
						char_literal190=(IToken)Match(input,156,Follow._156_in_expression_71638);  
						stream_156.Add(char_literal190);



						{
						// AST REWRITE
						// elements: expression_7, expression_list_or_select_command
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 305:61: -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command )
						{
							DebugLocation(305, 64);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:305:64: ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(305, 66);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(305, 78);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_IN, "T_IN"));
							DebugLocation(305, 84);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(305, 97);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:306:4: NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')'
						{
						DebugLocation(306, 4);
						NOT191=(IToken)Match(input,NOT,Follow._NOT_in_expression_71656);  
						stream_NOT.Add(NOT191);

						DebugLocation(306, 8);
						WS192=(IToken)Match(input,WS,Follow._WS_in_expression_71658);  
						stream_WS.Add(WS192);

						DebugLocation(306, 11);
						IN193=(IToken)Match(input,IN,Follow._IN_in_expression_71660);  
						stream_IN.Add(IN193);

						DebugLocation(306, 14);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:306:14: ( WS )?
						int alt64=2;
						try { DebugEnterSubRule(64);
						try { DebugEnterDecision(64, decisionCanBacktrack[64]);
						int LA64_0 = input.LA(1);

						if ((LA64_0==WS))
						{
							alt64 = 1;
						}
						} finally { DebugExitDecision(64); }
						switch (alt64)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:306:14: WS
							{
							DebugLocation(306, 14);
							WS194=(IToken)Match(input,WS,Follow._WS_in_expression_71662);  
							stream_WS.Add(WS194);


							}
							break;

						}
						} finally { DebugExitSubRule(64); }

						DebugLocation(306, 18);
						char_literal195=(IToken)Match(input,155,Follow._155_in_expression_71665);  
						stream_155.Add(char_literal195);

						DebugLocation(306, 22);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:306:22: ( WS )?
						int alt65=2;
						try { DebugEnterSubRule(65);
						try { DebugEnterDecision(65, decisionCanBacktrack[65]);
						int LA65_0 = input.LA(1);

						if ((LA65_0==WS))
						{
							alt65 = 1;
						}
						} finally { DebugExitDecision(65); }
						switch (alt65)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:306:22: WS
							{
							DebugLocation(306, 22);
							WS196=(IToken)Match(input,WS,Follow._WS_in_expression_71667);  
							stream_WS.Add(WS196);


							}
							break;

						}
						} finally { DebugExitSubRule(65); }

						DebugLocation(306, 26);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:306:26: ( expression_list_or_select_command )
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:306:27: expression_list_or_select_command
						{
						DebugLocation(306, 27);
						PushFollow(Follow._expression_list_or_select_command_in_expression_71671);
						expression_list_or_select_command197=expression_list_or_select_command();
						PopFollow();

						stream_expression_list_or_select_command.Add(expression_list_or_select_command197.Tree);

						}

						DebugLocation(306, 62);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:306:62: ( WS )?
						int alt66=2;
						try { DebugEnterSubRule(66);
						try { DebugEnterDecision(66, decisionCanBacktrack[66]);
						int LA66_0 = input.LA(1);

						if ((LA66_0==WS))
						{
							alt66 = 1;
						}
						} finally { DebugExitDecision(66); }
						switch (alt66)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:306:62: WS
							{
							DebugLocation(306, 62);
							WS198=(IToken)Match(input,WS,Follow._WS_in_expression_71674);  
							stream_WS.Add(WS198);


							}
							break;

						}
						} finally { DebugExitSubRule(66); }

						DebugLocation(306, 66);
						char_literal199=(IToken)Match(input,156,Follow._156_in_expression_71677);  
						stream_156.Add(char_literal199);



						{
						// AST REWRITE
						// elements: expression_list_or_select_command, expression_7
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 306:70: -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command )
						{
							DebugLocation(306, 73);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:306:73: ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(306, 75);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(306, 87);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_NOTIN, "T_NOTIN"));
							DebugLocation(306, 96);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(306, 109);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 4:
						DebugEnterAlt(4);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:307:4: op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')'
						{
						DebugLocation(307, 4);
						PushFollow(Follow._op_4_in_expression_71695);
						op_4200=op_4();
						PopFollow();

						stream_op_4.Add(op_4200.Tree);
						DebugLocation(307, 9);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:307:9: ( WS )?
						int alt67=2;
						try { DebugEnterSubRule(67);
						try { DebugEnterDecision(67, decisionCanBacktrack[67]);
						int LA67_0 = input.LA(1);

						if ((LA67_0==WS))
						{
							alt67 = 1;
						}
						} finally { DebugExitDecision(67); }
						switch (alt67)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:307:9: WS
							{
							DebugLocation(307, 9);
							WS201=(IToken)Match(input,WS,Follow._WS_in_expression_71697);  
							stream_WS.Add(WS201);


							}
							break;

						}
						} finally { DebugExitSubRule(67); }

						DebugLocation(307, 13);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:307:13: ( SOME | ANY )
						int alt68=2;
						try { DebugEnterSubRule(68);
						try { DebugEnterDecision(68, decisionCanBacktrack[68]);
						int LA68_0 = input.LA(1);

						if ((LA68_0==SOME))
						{
							alt68 = 1;
						}
						else if ((LA68_0==ANY))
						{
							alt68 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 68, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						} finally { DebugExitDecision(68); }
						switch (alt68)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:307:14: SOME
							{
							DebugLocation(307, 14);
							SOME202=(IToken)Match(input,SOME,Follow._SOME_in_expression_71701);  
							stream_SOME.Add(SOME202);


							}
							break;
						case 2:
							DebugEnterAlt(2);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:307:21: ANY
							{
							DebugLocation(307, 21);
							ANY203=(IToken)Match(input,ANY,Follow._ANY_in_expression_71705);  
							stream_ANY.Add(ANY203);


							}
							break;

						}
						} finally { DebugExitSubRule(68); }

						DebugLocation(307, 26);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:307:26: ( WS )?
						int alt69=2;
						try { DebugEnterSubRule(69);
						try { DebugEnterDecision(69, decisionCanBacktrack[69]);
						int LA69_0 = input.LA(1);

						if ((LA69_0==WS))
						{
							alt69 = 1;
						}
						} finally { DebugExitDecision(69); }
						switch (alt69)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:307:26: WS
							{
							DebugLocation(307, 26);
							WS204=(IToken)Match(input,WS,Follow._WS_in_expression_71708);  
							stream_WS.Add(WS204);


							}
							break;

						}
						} finally { DebugExitSubRule(69); }

						DebugLocation(307, 30);
						char_literal205=(IToken)Match(input,155,Follow._155_in_expression_71711);  
						stream_155.Add(char_literal205);

						DebugLocation(307, 34);
						PushFollow(Follow._expression_list_or_select_command_in_expression_71713);
						expression_list_or_select_command206=expression_list_or_select_command();
						PopFollow();

						stream_expression_list_or_select_command.Add(expression_list_or_select_command206.Tree);
						DebugLocation(307, 68);
						char_literal207=(IToken)Match(input,156,Follow._156_in_expression_71715);  
						stream_156.Add(char_literal207);



						{
						// AST REWRITE
						// elements: op_4, expression_7, expression_list_or_select_command
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 307:72: -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command )
						{
							DebugLocation(307, 75);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:307:75: ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(307, 77);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(307, 89);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_ANY, "T_ANY"));
							DebugLocation(307, 95);
							adaptor.AddChild(root_1, stream_op_4.NextTree());
							DebugLocation(307, 101);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(307, 114);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 5:
						DebugEnterAlt(5);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:308:4: op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')'
						{
						DebugLocation(308, 4);
						PushFollow(Follow._op_4_in_expression_71735);
						op_4208=op_4();
						PopFollow();

						stream_op_4.Add(op_4208.Tree);
						DebugLocation(308, 9);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:308:9: ( WS )?
						int alt70=2;
						try { DebugEnterSubRule(70);
						try { DebugEnterDecision(70, decisionCanBacktrack[70]);
						int LA70_0 = input.LA(1);

						if ((LA70_0==WS))
						{
							alt70 = 1;
						}
						} finally { DebugExitDecision(70); }
						switch (alt70)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:308:9: WS
							{
							DebugLocation(308, 9);
							WS209=(IToken)Match(input,WS,Follow._WS_in_expression_71737);  
							stream_WS.Add(WS209);


							}
							break;

						}
						} finally { DebugExitSubRule(70); }

						DebugLocation(308, 13);
						ALL210=(IToken)Match(input,ALL,Follow._ALL_in_expression_71740);  
						stream_ALL.Add(ALL210);

						DebugLocation(308, 17);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:308:17: ( WS )?
						int alt71=2;
						try { DebugEnterSubRule(71);
						try { DebugEnterDecision(71, decisionCanBacktrack[71]);
						int LA71_0 = input.LA(1);

						if ((LA71_0==WS))
						{
							alt71 = 1;
						}
						} finally { DebugExitDecision(71); }
						switch (alt71)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:308:17: WS
							{
							DebugLocation(308, 17);
							WS211=(IToken)Match(input,WS,Follow._WS_in_expression_71742);  
							stream_WS.Add(WS211);


							}
							break;

						}
						} finally { DebugExitSubRule(71); }

						DebugLocation(308, 21);
						char_literal212=(IToken)Match(input,155,Follow._155_in_expression_71745);  
						stream_155.Add(char_literal212);

						DebugLocation(308, 25);
						PushFollow(Follow._expression_list_or_select_command_in_expression_71747);
						expression_list_or_select_command213=expression_list_or_select_command();
						PopFollow();

						stream_expression_list_or_select_command.Add(expression_list_or_select_command213.Tree);
						DebugLocation(308, 59);
						char_literal214=(IToken)Match(input,156,Follow._156_in_expression_71749);  
						stream_156.Add(char_literal214);



						{
						// AST REWRITE
						// elements: expression_list_or_select_command, expression_7, op_4
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 308:63: -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command )
						{
							DebugLocation(308, 66);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:308:66: ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(308, 68);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(308, 80);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_ALL, "T_ALL"));
							DebugLocation(308, 86);
							adaptor.AddChild(root_1, stream_op_4.NextTree());
							DebugLocation(308, 92);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(308, 105);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					}
					} finally { DebugExitSubRule(72); }


					}
					break;

				default:
					goto loop73;
				}
			}

			loop73:
				;

			} finally { DebugExitSubRule(73); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_7", 38);
			LeaveRule("expression_7", 38);
			LeaveRule_expression_7();
	    }
	 	DebugLocation(310, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_7"); }
		return retval;

	}
	// $ANTLR end "expression_7"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_7() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_7() {}

	// $ANTLR start "op_7"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:312:1: op_7 : ( OR -> T_OR | LIKE -> T_LIKE | NOT WS LIKE -> T_NOTLIKE | MATCH -> T_MATCH | NOT WS MATCH -> T_NOTMATCH | BETWEEN -> T_BETWEEN | NOT WS BETWEEN -> T_NOTBETWEEN );
	[GrammarRule("op_7")]
	private AstParserRuleReturnScope<object, IToken> op_7()
	{
		EnterRule_op_7();
		EnterRule("op_7", 39);
		TraceIn("op_7", 39);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken OR215 = default(IToken);
	    IToken LIKE216 = default(IToken);
	    IToken NOT217 = default(IToken);
	    IToken WS218 = default(IToken);
	    IToken LIKE219 = default(IToken);
	    IToken MATCH220 = default(IToken);
	    IToken NOT221 = default(IToken);
	    IToken WS222 = default(IToken);
	    IToken MATCH223 = default(IToken);
	    IToken BETWEEN224 = default(IToken);
	    IToken NOT225 = default(IToken);
	    IToken WS226 = default(IToken);
	    IToken BETWEEN227 = default(IToken);

	    object OR215_tree = default(object);
	    object LIKE216_tree = default(object);
	    object NOT217_tree = default(object);
	    object WS218_tree = default(object);
	    object LIKE219_tree = default(object);
	    object MATCH220_tree = default(object);
	    object NOT221_tree = default(object);
	    object WS222_tree = default(object);
	    object MATCH223_tree = default(object);
	    object BETWEEN224_tree = default(object);
	    object NOT225_tree = default(object);
	    object WS226_tree = default(object);
	    object BETWEEN227_tree = default(object);
	    RewriteRuleITokenStream stream_MATCH=new RewriteRuleITokenStream(adaptor,"token MATCH");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");
	    RewriteRuleITokenStream stream_BETWEEN=new RewriteRuleITokenStream(adaptor,"token BETWEEN");
	    RewriteRuleITokenStream stream_LIKE=new RewriteRuleITokenStream(adaptor,"token LIKE");
	    RewriteRuleITokenStream stream_OR=new RewriteRuleITokenStream(adaptor,"token OR");

		try { DebugEnterRule(GrammarFileName, "op_7");
		DebugLocation(312, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:312:6: ( OR -> T_OR | LIKE -> T_LIKE | NOT WS LIKE -> T_NOTLIKE | MATCH -> T_MATCH | NOT WS MATCH -> T_NOTMATCH | BETWEEN -> T_BETWEEN | NOT WS BETWEEN -> T_NOTBETWEEN )
			int alt74=7;
			try { DebugEnterDecision(74, decisionCanBacktrack[74]);
			switch (input.LA(1))
			{
			case OR:
				{
				alt74 = 1;
				}
				break;
			case LIKE:
				{
				alt74 = 2;
				}
				break;
			case NOT:
				{
				int LA74_3 = input.LA(2);

				if ((LA74_3==WS))
				{
					switch (input.LA(3))
					{
					case LIKE:
						{
						alt74 = 3;
						}
						break;
					case MATCH:
						{
						alt74 = 5;
						}
						break;
					case BETWEEN:
						{
						alt74 = 7;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 74, 6, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 74, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case MATCH:
				{
				alt74 = 4;
				}
				break;
			case BETWEEN:
				{
				alt74 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 74, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(74); }
			switch (alt74)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:312:8: OR
				{
				DebugLocation(312, 8);
				OR215=(IToken)Match(input,OR,Follow._OR_in_op_71779);  
				stream_OR.Add(OR215);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 312:11: -> T_OR
				{
					DebugLocation(312, 14);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_OR, "T_OR"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:313:4: LIKE
				{
				DebugLocation(313, 4);
				LIKE216=(IToken)Match(input,LIKE,Follow._LIKE_in_op_71788);  
				stream_LIKE.Add(LIKE216);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 313:9: -> T_LIKE
				{
					DebugLocation(313, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_LIKE, "T_LIKE"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:314:4: NOT WS LIKE
				{
				DebugLocation(314, 4);
				NOT217=(IToken)Match(input,NOT,Follow._NOT_in_op_71797);  
				stream_NOT.Add(NOT217);

				DebugLocation(314, 8);
				WS218=(IToken)Match(input,WS,Follow._WS_in_op_71799);  
				stream_WS.Add(WS218);

				DebugLocation(314, 11);
				LIKE219=(IToken)Match(input,LIKE,Follow._LIKE_in_op_71801);  
				stream_LIKE.Add(LIKE219);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 314:16: -> T_NOTLIKE
				{
					DebugLocation(314, 19);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTLIKE, "T_NOTLIKE"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:315:4: MATCH
				{
				DebugLocation(315, 4);
				MATCH220=(IToken)Match(input,MATCH,Follow._MATCH_in_op_71810);  
				stream_MATCH.Add(MATCH220);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 315:10: -> T_MATCH
				{
					DebugLocation(315, 13);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MATCH, "T_MATCH"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:316:4: NOT WS MATCH
				{
				DebugLocation(316, 4);
				NOT221=(IToken)Match(input,NOT,Follow._NOT_in_op_71819);  
				stream_NOT.Add(NOT221);

				DebugLocation(316, 8);
				WS222=(IToken)Match(input,WS,Follow._WS_in_op_71821);  
				stream_WS.Add(WS222);

				DebugLocation(316, 11);
				MATCH223=(IToken)Match(input,MATCH,Follow._MATCH_in_op_71823);  
				stream_MATCH.Add(MATCH223);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 316:17: -> T_NOTMATCH
				{
					DebugLocation(316, 20);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTMATCH, "T_NOTMATCH"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:317:4: BETWEEN
				{
				DebugLocation(317, 4);
				BETWEEN224=(IToken)Match(input,BETWEEN,Follow._BETWEEN_in_op_71832);  
				stream_BETWEEN.Add(BETWEEN224);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 317:12: -> T_BETWEEN
				{
					DebugLocation(317, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BETWEEN, "T_BETWEEN"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:318:4: NOT WS BETWEEN
				{
				DebugLocation(318, 4);
				NOT225=(IToken)Match(input,NOT,Follow._NOT_in_op_71841);  
				stream_NOT.Add(NOT225);

				DebugLocation(318, 8);
				WS226=(IToken)Match(input,WS,Follow._WS_in_op_71843);  
				stream_WS.Add(WS226);

				DebugLocation(318, 11);
				BETWEEN227=(IToken)Match(input,BETWEEN,Follow._BETWEEN_in_op_71845);  
				stream_BETWEEN.Add(BETWEEN227);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 318:19: -> T_NOTBETWEEN
				{
					DebugLocation(318, 22);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTBETWEEN, "T_NOTBETWEEN"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_7", 39);
			LeaveRule("op_7", 39);
			LeaveRule_op_7();
	    }
	 	DebugLocation(319, 1);
		} finally { DebugExitRule(GrammarFileName, "op_7"); }
		return retval;

	}
	// $ANTLR end "op_7"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_6() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_6() {}

	// $ANTLR start "expression_6"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:321:1: expression_6 : (a= expression_5 -> $a) ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )* ;
	[GrammarRule("expression_6")]
	private AstParserRuleReturnScope<object, IToken> expression_6()
	{
		EnterRule_expression_6();
		EnterRule("expression_6", 40);
		TraceIn("expression_6", 40);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS228 = default(IToken);
	    IToken WS230 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_6229 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS228_tree = default(object);
	    object WS230_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_op_6=new RewriteRuleSubtreeStream(adaptor,"rule op_6");
	    RewriteRuleSubtreeStream stream_expression_5=new RewriteRuleSubtreeStream(adaptor,"rule expression_5");
		try { DebugEnterRule(GrammarFileName, "expression_6");
		DebugLocation(321, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:322:2: ( (a= expression_5 -> $a) ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:322:4: (a= expression_5 -> $a) ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )*
			{
			DebugLocation(322, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:322:4: (a= expression_5 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:322:5: a= expression_5
			{
			DebugLocation(322, 6);
			PushFollow(Follow._expression_5_in_expression_61864);
			a=expression_5();
			PopFollow();

			stream_expression_5.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 322:19: -> $a
			{
				DebugLocation(322, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(322, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:322:25: ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )*
			try { DebugEnterSubRule(75);
			while (true)
			{
				int alt75=2;
				try { DebugEnterDecision(75, decisionCanBacktrack[75]);
				int LA75_0 = input.LA(1);

				if ((LA75_0==WS))
				{
					int LA75_1 = input.LA(2);

					if ((LA75_1==AND))
					{
						alt75 = 1;
					}


				}


				} finally { DebugExitDecision(75); }
				switch ( alt75 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:322:26: WS op_6 WS b= expression_5
					{
					DebugLocation(322, 26);
					WS228=(IToken)Match(input,WS,Follow._WS_in_expression_61871);  
					stream_WS.Add(WS228);

					DebugLocation(322, 29);
					PushFollow(Follow._op_6_in_expression_61873);
					op_6229=op_6();
					PopFollow();

					stream_op_6.Add(op_6229.Tree);
					DebugLocation(322, 34);
					WS230=(IToken)Match(input,WS,Follow._WS_in_expression_61875);  
					stream_WS.Add(WS230);

					DebugLocation(322, 38);
					PushFollow(Follow._expression_5_in_expression_61879);
					b=expression_5();
					PopFollow();

					stream_expression_5.Add(b.Tree);


					{
					// AST REWRITE
					// elements: expression_6, op_6, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 322:52: -> ^( T_OP_BINARY op_6 $expression_6 $b)
					{
						DebugLocation(322, 55);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:322:55: ^( T_OP_BINARY op_6 $expression_6 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(322, 57);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(322, 69);
						adaptor.AddChild(root_1, stream_op_6.NextTree());
						DebugLocation(322, 75);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(322, 89);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop75;
				}
			}

			loop75:
				;

			} finally { DebugExitSubRule(75); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_6", 40);
			LeaveRule("expression_6", 40);
			LeaveRule_expression_6();
	    }
	 	DebugLocation(323, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_6"); }
		return retval;

	}
	// $ANTLR end "expression_6"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_6() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_6() {}

	// $ANTLR start "op_6"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:325:1: op_6 : AND -> T_AND ;
	[GrammarRule("op_6")]
	private AstParserRuleReturnScope<object, IToken> op_6()
	{
		EnterRule_op_6();
		EnterRule("op_6", 41);
		TraceIn("op_6", 41);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken AND231 = default(IToken);

	    object AND231_tree = default(object);
	    RewriteRuleITokenStream stream_AND=new RewriteRuleITokenStream(adaptor,"token AND");

		try { DebugEnterRule(GrammarFileName, "op_6");
		DebugLocation(325, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:325:6: ( AND -> T_AND )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:325:8: AND
			{
			DebugLocation(325, 8);
			AND231=(IToken)Match(input,AND,Follow._AND_in_op_61907);  
			stream_AND.Add(AND231);



			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 325:12: -> T_AND
			{
				DebugLocation(325, 15);
				adaptor.AddChild(root_0, (object)adaptor.Create(T_AND, "T_AND"));

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_6", 41);
			LeaveRule("op_6", 41);
			LeaveRule_op_6();
	    }
	 	DebugLocation(326, 1);
		} finally { DebugExitRule(GrammarFileName, "op_6"); }
		return retval;

	}
	// $ANTLR end "op_6"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_5() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_5() {}

	// $ANTLR start "expression_5"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:328:1: expression_5 : ( op_5 WS expression_5 -> ^( T_OP_UNARY op_5 expression_5 ) | expression_4 );
	[GrammarRule("expression_5")]
	private AstParserRuleReturnScope<object, IToken> expression_5()
	{
		EnterRule_expression_5();
		EnterRule("expression_5", 42);
		TraceIn("expression_5", 42);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS233 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> op_5232 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_5234 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_4235 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS233_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression_5=new RewriteRuleSubtreeStream(adaptor,"rule expression_5");
	    RewriteRuleSubtreeStream stream_op_5=new RewriteRuleSubtreeStream(adaptor,"rule op_5");
		try { DebugEnterRule(GrammarFileName, "expression_5");
		DebugLocation(328, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:329:2: ( op_5 WS expression_5 -> ^( T_OP_UNARY op_5 expression_5 ) | expression_4 )
			int alt76=2;
			try { DebugEnterDecision(76, decisionCanBacktrack[76]);
			int LA76_0 = input.LA(1);

			if ((LA76_0==NOT))
			{
				alt76 = 1;
			}
			else if (((LA76_0>=CASE && LA76_0<=CAST)||LA76_0==CONVERT||LA76_0==EXISTS||LA76_0==NUMBER||LA76_0==SIMPLE_FILE||(LA76_0>=STRING && LA76_0<=SYSTEMVAR)||LA76_0==TOKEN||LA76_0==VARIABLE||LA76_0==155))
			{
				alt76 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 76, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(76); }
			switch (alt76)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:329:4: op_5 WS expression_5
				{
				DebugLocation(329, 4);
				PushFollow(Follow._op_5_in_expression_51925);
				op_5232=op_5();
				PopFollow();

				stream_op_5.Add(op_5232.Tree);
				DebugLocation(329, 9);
				WS233=(IToken)Match(input,WS,Follow._WS_in_expression_51927);  
				stream_WS.Add(WS233);

				DebugLocation(329, 12);
				PushFollow(Follow._expression_5_in_expression_51929);
				expression_5234=expression_5();
				PopFollow();

				stream_expression_5.Add(expression_5234.Tree);


				{
				// AST REWRITE
				// elements: expression_5, op_5
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 329:25: -> ^( T_OP_UNARY op_5 expression_5 )
				{
					DebugLocation(329, 28);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:329:28: ^( T_OP_UNARY op_5 expression_5 )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(329, 30);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_UNARY, "T_OP_UNARY"), root_1);

					DebugLocation(329, 41);
					adaptor.AddChild(root_1, stream_op_5.NextTree());
					DebugLocation(329, 46);
					adaptor.AddChild(root_1, stream_expression_5.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:330:4: expression_4
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(330, 4);
				PushFollow(Follow._expression_4_in_expression_51944);
				expression_4235=expression_4();
				PopFollow();

				adaptor.AddChild(root_0, expression_4235.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_5", 42);
			LeaveRule("expression_5", 42);
			LeaveRule_expression_5();
	    }
	 	DebugLocation(331, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_5"); }
		return retval;

	}
	// $ANTLR end "expression_5"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_5() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_5() {}

	// $ANTLR start "op_5"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:333:1: op_5 : NOT -> T_NOT ;
	[GrammarRule("op_5")]
	private AstParserRuleReturnScope<object, IToken> op_5()
	{
		EnterRule_op_5();
		EnterRule("op_5", 43);
		TraceIn("op_5", 43);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken NOT236 = default(IToken);

	    object NOT236_tree = default(object);
	    RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");

		try { DebugEnterRule(GrammarFileName, "op_5");
		DebugLocation(333, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:333:7: ( NOT -> T_NOT )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:333:9: NOT
			{
			DebugLocation(333, 9);
			NOT236=(IToken)Match(input,NOT,Follow._NOT_in_op_51955);  
			stream_NOT.Add(NOT236);



			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 333:13: -> T_NOT
			{
				DebugLocation(333, 16);
				adaptor.AddChild(root_0, (object)adaptor.Create(T_NOT, "T_NOT"));

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_5", 43);
			LeaveRule("op_5", 43);
			LeaveRule_op_5();
	    }
	 	DebugLocation(334, 1);
		} finally { DebugExitRule(GrammarFileName, "op_5"); }
		return retval;

	}
	// $ANTLR end "op_5"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_4() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_4() {}

	// $ANTLR start "expression_4"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:336:1: expression_4 : (a= expression_3 -> $a) ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )* ;
	[GrammarRule("expression_4")]
	private AstParserRuleReturnScope<object, IToken> expression_4()
	{
		EnterRule_expression_4();
		EnterRule("expression_4", 44);
		TraceIn("expression_4", 44);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS237 = default(IToken);
	    IToken WS239 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_4238 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS237_tree = default(object);
	    object WS239_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression_3=new RewriteRuleSubtreeStream(adaptor,"rule expression_3");
	    RewriteRuleSubtreeStream stream_op_4=new RewriteRuleSubtreeStream(adaptor,"rule op_4");
		try { DebugEnterRule(GrammarFileName, "expression_4");
		DebugLocation(336, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:337:2: ( (a= expression_3 -> $a) ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:337:4: (a= expression_3 -> $a) ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )*
			{
			DebugLocation(337, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:337:4: (a= expression_3 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:337:5: a= expression_3
			{
			DebugLocation(337, 6);
			PushFollow(Follow._expression_3_in_expression_41974);
			a=expression_3();
			PopFollow();

			stream_expression_3.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 337:19: -> $a
			{
				DebugLocation(337, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(337, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:337:25: ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )*
			try { DebugEnterSubRule(79);
			while (true)
			{
				int alt79=2;
				try { DebugEnterDecision(79, decisionCanBacktrack[79]);
				int LA79_0 = input.LA(1);

				if ((LA79_0==WS))
				{
					switch (input.LA(2))
					{
					case 167:
						{
						int LA79_4 = input.LA(3);

						if ((LA79_4==WS))
						{
							int LA79_13 = input.LA(4);

							if (((LA79_13>=CASE && LA79_13<=CAST)||LA79_13==CONVERT||LA79_13==EXISTS||LA79_13==NUMBER||LA79_13==SIMPLE_FILE||(LA79_13>=STRING && LA79_13<=SYSTEMVAR)||LA79_13==TOKEN||LA79_13==VARIABLE||LA79_13==155))
							{
								alt79 = 1;
							}


						}
						else if (((LA79_4>=CASE && LA79_4<=CAST)||LA79_4==CONVERT||LA79_4==EXISTS||LA79_4==NUMBER||LA79_4==SIMPLE_FILE||(LA79_4>=STRING && LA79_4<=SYSTEMVAR)||LA79_4==TOKEN||LA79_4==VARIABLE||LA79_4==155))
						{
							alt79 = 1;
						}


						}
						break;
					case 169:
						{
						int LA79_5 = input.LA(3);

						if ((LA79_5==WS))
						{
							int LA79_13 = input.LA(4);

							if (((LA79_13>=CASE && LA79_13<=CAST)||LA79_13==CONVERT||LA79_13==EXISTS||LA79_13==NUMBER||LA79_13==SIMPLE_FILE||(LA79_13>=STRING && LA79_13<=SYSTEMVAR)||LA79_13==TOKEN||LA79_13==VARIABLE||LA79_13==155))
							{
								alt79 = 1;
							}


						}
						else if (((LA79_5>=CASE && LA79_5<=CAST)||LA79_5==CONVERT||LA79_5==EXISTS||LA79_5==NUMBER||LA79_5==SIMPLE_FILE||(LA79_5>=STRING && LA79_5<=SYSTEMVAR)||LA79_5==TOKEN||LA79_5==VARIABLE||LA79_5==155))
						{
							alt79 = 1;
						}


						}
						break;
					case 165:
						{
						int LA79_6 = input.LA(3);

						if ((LA79_6==WS))
						{
							int LA79_13 = input.LA(4);

							if (((LA79_13>=CASE && LA79_13<=CAST)||LA79_13==CONVERT||LA79_13==EXISTS||LA79_13==NUMBER||LA79_13==SIMPLE_FILE||(LA79_13>=STRING && LA79_13<=SYSTEMVAR)||LA79_13==TOKEN||LA79_13==VARIABLE||LA79_13==155))
							{
								alt79 = 1;
							}


						}
						else if (((LA79_6>=CASE && LA79_6<=CAST)||LA79_6==CONVERT||LA79_6==EXISTS||LA79_6==NUMBER||LA79_6==SIMPLE_FILE||(LA79_6>=STRING && LA79_6<=SYSTEMVAR)||LA79_6==TOKEN||LA79_6==VARIABLE||LA79_6==155))
						{
							alt79 = 1;
						}


						}
						break;
					case 166:
						{
						int LA79_7 = input.LA(3);

						if ((LA79_7==WS))
						{
							int LA79_13 = input.LA(4);

							if (((LA79_13>=CASE && LA79_13<=CAST)||LA79_13==CONVERT||LA79_13==EXISTS||LA79_13==NUMBER||LA79_13==SIMPLE_FILE||(LA79_13>=STRING && LA79_13<=SYSTEMVAR)||LA79_13==TOKEN||LA79_13==VARIABLE||LA79_13==155))
							{
								alt79 = 1;
							}


						}
						else if (((LA79_7>=CASE && LA79_7<=CAST)||LA79_7==CONVERT||LA79_7==EXISTS||LA79_7==NUMBER||LA79_7==SIMPLE_FILE||(LA79_7>=STRING && LA79_7<=SYSTEMVAR)||LA79_7==TOKEN||LA79_7==VARIABLE||LA79_7==155))
						{
							alt79 = 1;
						}


						}
						break;
					case 151:
						{
						int LA79_8 = input.LA(3);

						if ((LA79_8==WS))
						{
							int LA79_13 = input.LA(4);

							if (((LA79_13>=CASE && LA79_13<=CAST)||LA79_13==CONVERT||LA79_13==EXISTS||LA79_13==NUMBER||LA79_13==SIMPLE_FILE||(LA79_13>=STRING && LA79_13<=SYSTEMVAR)||LA79_13==TOKEN||LA79_13==VARIABLE||LA79_13==155))
							{
								alt79 = 1;
							}


						}
						else if (((LA79_8>=CASE && LA79_8<=CAST)||LA79_8==CONVERT||LA79_8==EXISTS||LA79_8==NUMBER||LA79_8==SIMPLE_FILE||(LA79_8>=STRING && LA79_8<=SYSTEMVAR)||LA79_8==TOKEN||LA79_8==VARIABLE||LA79_8==155))
						{
							alt79 = 1;
						}


						}
						break;
					case 152:
						{
						int LA79_9 = input.LA(3);

						if ((LA79_9==WS))
						{
							int LA79_13 = input.LA(4);

							if (((LA79_13>=CASE && LA79_13<=CAST)||LA79_13==CONVERT||LA79_13==EXISTS||LA79_13==NUMBER||LA79_13==SIMPLE_FILE||(LA79_13>=STRING && LA79_13<=SYSTEMVAR)||LA79_13==TOKEN||LA79_13==VARIABLE||LA79_13==155))
							{
								alt79 = 1;
							}


						}
						else if (((LA79_9>=CASE && LA79_9<=CAST)||LA79_9==CONVERT||LA79_9==EXISTS||LA79_9==NUMBER||LA79_9==SIMPLE_FILE||(LA79_9>=STRING && LA79_9<=SYSTEMVAR)||LA79_9==TOKEN||LA79_9==VARIABLE||LA79_9==155))
						{
							alt79 = 1;
						}


						}
						break;
					case 150:
						{
						int LA79_10 = input.LA(3);

						if ((LA79_10==WS))
						{
							int LA79_13 = input.LA(4);

							if (((LA79_13>=CASE && LA79_13<=CAST)||LA79_13==CONVERT||LA79_13==EXISTS||LA79_13==NUMBER||LA79_13==SIMPLE_FILE||(LA79_13>=STRING && LA79_13<=SYSTEMVAR)||LA79_13==TOKEN||LA79_13==VARIABLE||LA79_13==155))
							{
								alt79 = 1;
							}


						}
						else if (((LA79_10>=CASE && LA79_10<=CAST)||LA79_10==CONVERT||LA79_10==EXISTS||LA79_10==NUMBER||LA79_10==SIMPLE_FILE||(LA79_10>=STRING && LA79_10<=SYSTEMVAR)||LA79_10==TOKEN||LA79_10==VARIABLE||LA79_10==155))
						{
							alt79 = 1;
						}


						}
						break;
					case 168:
						{
						int LA79_11 = input.LA(3);

						if ((LA79_11==WS))
						{
							int LA79_13 = input.LA(4);

							if (((LA79_13>=CASE && LA79_13<=CAST)||LA79_13==CONVERT||LA79_13==EXISTS||LA79_13==NUMBER||LA79_13==SIMPLE_FILE||(LA79_13>=STRING && LA79_13<=SYSTEMVAR)||LA79_13==TOKEN||LA79_13==VARIABLE||LA79_13==155))
							{
								alt79 = 1;
							}


						}
						else if (((LA79_11>=CASE && LA79_11<=CAST)||LA79_11==CONVERT||LA79_11==EXISTS||LA79_11==NUMBER||LA79_11==SIMPLE_FILE||(LA79_11>=STRING && LA79_11<=SYSTEMVAR)||LA79_11==TOKEN||LA79_11==VARIABLE||LA79_11==155))
						{
							alt79 = 1;
						}


						}
						break;
					case 164:
						{
						int LA79_12 = input.LA(3);

						if ((LA79_12==WS))
						{
							int LA79_13 = input.LA(4);

							if (((LA79_13>=CASE && LA79_13<=CAST)||LA79_13==CONVERT||LA79_13==EXISTS||LA79_13==NUMBER||LA79_13==SIMPLE_FILE||(LA79_13>=STRING && LA79_13<=SYSTEMVAR)||LA79_13==TOKEN||LA79_13==VARIABLE||LA79_13==155))
							{
								alt79 = 1;
							}


						}
						else if (((LA79_12>=CASE && LA79_12<=CAST)||LA79_12==CONVERT||LA79_12==EXISTS||LA79_12==NUMBER||LA79_12==SIMPLE_FILE||(LA79_12>=STRING && LA79_12<=SYSTEMVAR)||LA79_12==TOKEN||LA79_12==VARIABLE||LA79_12==155))
						{
							alt79 = 1;
						}


						}
						break;
					}

				}
				else if (((LA79_0>=150 && LA79_0<=152)||(LA79_0>=164 && LA79_0<=169)))
				{
					alt79 = 1;
				}


				} finally { DebugExitDecision(79); }
				switch ( alt79 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:337:26: ( WS )? op_4 ( WS )? b= expression_3
					{
					DebugLocation(337, 26);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:337:26: ( WS )?
					int alt77=2;
					try { DebugEnterSubRule(77);
					try { DebugEnterDecision(77, decisionCanBacktrack[77]);
					int LA77_0 = input.LA(1);

					if ((LA77_0==WS))
					{
						alt77 = 1;
					}
					} finally { DebugExitDecision(77); }
					switch (alt77)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:337:26: WS
						{
						DebugLocation(337, 26);
						WS237=(IToken)Match(input,WS,Follow._WS_in_expression_41981);  
						stream_WS.Add(WS237);


						}
						break;

					}
					} finally { DebugExitSubRule(77); }

					DebugLocation(337, 30);
					PushFollow(Follow._op_4_in_expression_41984);
					op_4238=op_4();
					PopFollow();

					stream_op_4.Add(op_4238.Tree);
					DebugLocation(337, 35);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:337:35: ( WS )?
					int alt78=2;
					try { DebugEnterSubRule(78);
					try { DebugEnterDecision(78, decisionCanBacktrack[78]);
					int LA78_0 = input.LA(1);

					if ((LA78_0==WS))
					{
						alt78 = 1;
					}
					} finally { DebugExitDecision(78); }
					switch (alt78)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:337:35: WS
						{
						DebugLocation(337, 35);
						WS239=(IToken)Match(input,WS,Follow._WS_in_expression_41986);  
						stream_WS.Add(WS239);


						}
						break;

					}
					} finally { DebugExitSubRule(78); }

					DebugLocation(337, 40);
					PushFollow(Follow._expression_3_in_expression_41991);
					b=expression_3();
					PopFollow();

					stream_expression_3.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, op_4, expression_4
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 337:54: -> ^( T_OP_BINARY op_4 $expression_4 $b)
					{
						DebugLocation(337, 57);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:337:57: ^( T_OP_BINARY op_4 $expression_4 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(337, 59);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(337, 71);
						adaptor.AddChild(root_1, stream_op_4.NextTree());
						DebugLocation(337, 77);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(337, 91);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop79;
				}
			}

			loop79:
				;

			} finally { DebugExitSubRule(79); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_4", 44);
			LeaveRule("expression_4", 44);
			LeaveRule_expression_4();
	    }
	 	DebugLocation(338, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_4"); }
		return retval;

	}
	// $ANTLR end "expression_4"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_4() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_4() {}

	// $ANTLR start "op_4"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:340:1: op_4 : ( '=' -> T_EQUAL | '>=' -> T_NOTLESS | '<=' -> T_NOTGREATER | '<>' -> T_NOTEQUAL | '!=' -> T_NOTEQUAL | '!>' -> T_NOTGREATER | '!<' -> T_NOTLESS | '>' -> T_GREATER | '<' -> T_LESS );
	[GrammarRule("op_4")]
	private AstParserRuleReturnScope<object, IToken> op_4()
	{
		EnterRule_op_4();
		EnterRule("op_4", 45);
		TraceIn("op_4", 45);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal240 = default(IToken);
	    IToken string_literal241 = default(IToken);
	    IToken string_literal242 = default(IToken);
	    IToken string_literal243 = default(IToken);
	    IToken string_literal244 = default(IToken);
	    IToken string_literal245 = default(IToken);
	    IToken string_literal246 = default(IToken);
	    IToken char_literal247 = default(IToken);
	    IToken char_literal248 = default(IToken);

	    object char_literal240_tree = default(object);
	    object string_literal241_tree = default(object);
	    object string_literal242_tree = default(object);
	    object string_literal243_tree = default(object);
	    object string_literal244_tree = default(object);
	    object string_literal245_tree = default(object);
	    object string_literal246_tree = default(object);
	    object char_literal247_tree = default(object);
	    object char_literal248_tree = default(object);
	    RewriteRuleITokenStream stream_152=new RewriteRuleITokenStream(adaptor,"token 152");
	    RewriteRuleITokenStream stream_150=new RewriteRuleITokenStream(adaptor,"token 150");
	    RewriteRuleITokenStream stream_164=new RewriteRuleITokenStream(adaptor,"token 164");
	    RewriteRuleITokenStream stream_151=new RewriteRuleITokenStream(adaptor,"token 151");
	    RewriteRuleITokenStream stream_169=new RewriteRuleITokenStream(adaptor,"token 169");
	    RewriteRuleITokenStream stream_166=new RewriteRuleITokenStream(adaptor,"token 166");
	    RewriteRuleITokenStream stream_165=new RewriteRuleITokenStream(adaptor,"token 165");
	    RewriteRuleITokenStream stream_168=new RewriteRuleITokenStream(adaptor,"token 168");
	    RewriteRuleITokenStream stream_167=new RewriteRuleITokenStream(adaptor,"token 167");

		try { DebugEnterRule(GrammarFileName, "op_4");
		DebugLocation(340, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:340:6: ( '=' -> T_EQUAL | '>=' -> T_NOTLESS | '<=' -> T_NOTGREATER | '<>' -> T_NOTEQUAL | '!=' -> T_NOTEQUAL | '!>' -> T_NOTGREATER | '!<' -> T_NOTLESS | '>' -> T_GREATER | '<' -> T_LESS )
			int alt80=9;
			try { DebugEnterDecision(80, decisionCanBacktrack[80]);
			switch (input.LA(1))
			{
			case 167:
				{
				alt80 = 1;
				}
				break;
			case 169:
				{
				alt80 = 2;
				}
				break;
			case 165:
				{
				alt80 = 3;
				}
				break;
			case 166:
				{
				alt80 = 4;
				}
				break;
			case 151:
				{
				alt80 = 5;
				}
				break;
			case 152:
				{
				alt80 = 6;
				}
				break;
			case 150:
				{
				alt80 = 7;
				}
				break;
			case 168:
				{
				alt80 = 8;
				}
				break;
			case 164:
				{
				alt80 = 9;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 80, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(80); }
			switch (alt80)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:340:8: '='
				{
				DebugLocation(340, 8);
				char_literal240=(IToken)Match(input,167,Follow._167_in_op_42017);  
				stream_167.Add(char_literal240);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 340:12: -> T_EQUAL
				{
					DebugLocation(340, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_EQUAL, "T_EQUAL"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:341:4: '>='
				{
				DebugLocation(341, 4);
				string_literal241=(IToken)Match(input,169,Follow._169_in_op_42026);  
				stream_169.Add(string_literal241);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 341:9: -> T_NOTLESS
				{
					DebugLocation(341, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTLESS, "T_NOTLESS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:342:4: '<='
				{
				DebugLocation(342, 4);
				string_literal242=(IToken)Match(input,165,Follow._165_in_op_42036);  
				stream_165.Add(string_literal242);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 342:9: -> T_NOTGREATER
				{
					DebugLocation(342, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTGREATER, "T_NOTGREATER"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:343:4: '<>'
				{
				DebugLocation(343, 4);
				string_literal243=(IToken)Match(input,166,Follow._166_in_op_42046);  
				stream_166.Add(string_literal243);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 343:9: -> T_NOTEQUAL
				{
					DebugLocation(343, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTEQUAL, "T_NOTEQUAL"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:344:4: '!='
				{
				DebugLocation(344, 4);
				string_literal244=(IToken)Match(input,151,Follow._151_in_op_42055);  
				stream_151.Add(string_literal244);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 344:9: -> T_NOTEQUAL
				{
					DebugLocation(344, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTEQUAL, "T_NOTEQUAL"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:345:4: '!>'
				{
				DebugLocation(345, 4);
				string_literal245=(IToken)Match(input,152,Follow._152_in_op_42064);  
				stream_152.Add(string_literal245);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 345:9: -> T_NOTGREATER
				{
					DebugLocation(345, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTGREATER, "T_NOTGREATER"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:346:4: '!<'
				{
				DebugLocation(346, 4);
				string_literal246=(IToken)Match(input,150,Follow._150_in_op_42073);  
				stream_150.Add(string_literal246);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 346:9: -> T_NOTLESS
				{
					DebugLocation(346, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTLESS, "T_NOTLESS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:347:4: '>'
				{
				DebugLocation(347, 4);
				char_literal247=(IToken)Match(input,168,Follow._168_in_op_42082);  
				stream_168.Add(char_literal247);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 347:8: -> T_GREATER
				{
					DebugLocation(347, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_GREATER, "T_GREATER"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:348:4: '<'
				{
				DebugLocation(348, 4);
				char_literal248=(IToken)Match(input,164,Follow._164_in_op_42092);  
				stream_164.Add(char_literal248);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 348:8: -> T_LESS
				{
					DebugLocation(348, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_LESS, "T_LESS"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_4", 45);
			LeaveRule("op_4", 45);
			LeaveRule_op_4();
	    }
	 	DebugLocation(349, 1);
		} finally { DebugExitRule(GrammarFileName, "op_4"); }
		return retval;

	}
	// $ANTLR end "op_4"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_3() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_3() {}

	// $ANTLR start "expression_3"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:351:1: expression_3 : (a= expression_2 -> $a) ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )* ;
	[GrammarRule("expression_3")]
	private AstParserRuleReturnScope<object, IToken> expression_3()
	{
		EnterRule_expression_3();
		EnterRule("expression_3", 46);
		TraceIn("expression_3", 46);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS249 = default(IToken);
	    IToken WS251 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_3250 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS249_tree = default(object);
	    object WS251_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_op_3=new RewriteRuleSubtreeStream(adaptor,"rule op_3");
	    RewriteRuleSubtreeStream stream_expression_2=new RewriteRuleSubtreeStream(adaptor,"rule expression_2");
		try { DebugEnterRule(GrammarFileName, "expression_3");
		DebugLocation(351, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:352:2: ( (a= expression_2 -> $a) ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:352:4: (a= expression_2 -> $a) ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )*
			{
			DebugLocation(352, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:352:4: (a= expression_2 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:352:5: a= expression_2
			{
			DebugLocation(352, 6);
			PushFollow(Follow._expression_2_in_expression_32111);
			a=expression_2();
			PopFollow();

			stream_expression_2.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 352:19: -> $a
			{
				DebugLocation(352, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(352, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:352:25: ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )*
			try { DebugEnterSubRule(83);
			while (true)
			{
				int alt83=2;
				try { DebugEnterDecision(83, decisionCanBacktrack[83]);
				int LA83_0 = input.LA(1);

				if ((LA83_0==WS))
				{
					int LA83_1 = input.LA(2);

					if ((LA83_1==154||LA83_1==158||LA83_1==160||(LA83_1>=172 && LA83_1<=173)))
					{
						alt83 = 1;
					}


				}
				else if ((LA83_0==154||LA83_0==158||LA83_0==160||(LA83_0>=172 && LA83_0<=173)))
				{
					alt83 = 1;
				}


				} finally { DebugExitDecision(83); }
				switch ( alt83 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:352:26: ( WS )? op_3 ( WS )? b= expression_2
					{
					DebugLocation(352, 26);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:352:26: ( WS )?
					int alt81=2;
					try { DebugEnterSubRule(81);
					try { DebugEnterDecision(81, decisionCanBacktrack[81]);
					int LA81_0 = input.LA(1);

					if ((LA81_0==WS))
					{
						alt81 = 1;
					}
					} finally { DebugExitDecision(81); }
					switch (alt81)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:352:26: WS
						{
						DebugLocation(352, 26);
						WS249=(IToken)Match(input,WS,Follow._WS_in_expression_32118);  
						stream_WS.Add(WS249);


						}
						break;

					}
					} finally { DebugExitSubRule(81); }

					DebugLocation(352, 30);
					PushFollow(Follow._op_3_in_expression_32121);
					op_3250=op_3();
					PopFollow();

					stream_op_3.Add(op_3250.Tree);
					DebugLocation(352, 35);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:352:35: ( WS )?
					int alt82=2;
					try { DebugEnterSubRule(82);
					try { DebugEnterDecision(82, decisionCanBacktrack[82]);
					int LA82_0 = input.LA(1);

					if ((LA82_0==WS))
					{
						alt82 = 1;
					}
					} finally { DebugExitDecision(82); }
					switch (alt82)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:352:35: WS
						{
						DebugLocation(352, 35);
						WS251=(IToken)Match(input,WS,Follow._WS_in_expression_32123);  
						stream_WS.Add(WS251);


						}
						break;

					}
					} finally { DebugExitSubRule(82); }

					DebugLocation(352, 40);
					PushFollow(Follow._expression_2_in_expression_32128);
					b=expression_2();
					PopFollow();

					stream_expression_2.Add(b.Tree);


					{
					// AST REWRITE
					// elements: op_3, b, expression_3
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 352:54: -> ^( T_OP_BINARY op_3 $expression_3 $b)
					{
						DebugLocation(352, 57);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:352:57: ^( T_OP_BINARY op_3 $expression_3 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(352, 59);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(352, 71);
						adaptor.AddChild(root_1, stream_op_3.NextTree());
						DebugLocation(352, 77);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(352, 91);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop83;
				}
			}

			loop83:
				;

			} finally { DebugExitSubRule(83); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_3", 46);
			LeaveRule("expression_3", 46);
			LeaveRule_expression_3();
	    }
	 	DebugLocation(353, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_3"); }
		return retval;

	}
	// $ANTLR end "expression_3"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_3() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_3() {}

	// $ANTLR start "op_3"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:355:1: op_3 : ( '+' -> T_PLUS | '-' -> T_MINUS | '&' -> T_BITWISE_AND | '|' -> T_BITWISE_OR | '^' -> T_BITWISE_XOR );
	[GrammarRule("op_3")]
	private AstParserRuleReturnScope<object, IToken> op_3()
	{
		EnterRule_op_3();
		EnterRule("op_3", 47);
		TraceIn("op_3", 47);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal252 = default(IToken);
	    IToken char_literal253 = default(IToken);
	    IToken char_literal254 = default(IToken);
	    IToken char_literal255 = default(IToken);
	    IToken char_literal256 = default(IToken);

	    object char_literal252_tree = default(object);
	    object char_literal253_tree = default(object);
	    object char_literal254_tree = default(object);
	    object char_literal255_tree = default(object);
	    object char_literal256_tree = default(object);
	    RewriteRuleITokenStream stream_172=new RewriteRuleITokenStream(adaptor,"token 172");
	    RewriteRuleITokenStream stream_173=new RewriteRuleITokenStream(adaptor,"token 173");
	    RewriteRuleITokenStream stream_160=new RewriteRuleITokenStream(adaptor,"token 160");
	    RewriteRuleITokenStream stream_158=new RewriteRuleITokenStream(adaptor,"token 158");
	    RewriteRuleITokenStream stream_154=new RewriteRuleITokenStream(adaptor,"token 154");

		try { DebugEnterRule(GrammarFileName, "op_3");
		DebugLocation(355, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:355:6: ( '+' -> T_PLUS | '-' -> T_MINUS | '&' -> T_BITWISE_AND | '|' -> T_BITWISE_OR | '^' -> T_BITWISE_XOR )
			int alt84=5;
			try { DebugEnterDecision(84, decisionCanBacktrack[84]);
			switch (input.LA(1))
			{
			case 158:
				{
				alt84 = 1;
				}
				break;
			case 160:
				{
				alt84 = 2;
				}
				break;
			case 154:
				{
				alt84 = 3;
				}
				break;
			case 173:
				{
				alt84 = 4;
				}
				break;
			case 172:
				{
				alt84 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 84, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(84); }
			switch (alt84)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:355:8: '+'
				{
				DebugLocation(355, 8);
				char_literal252=(IToken)Match(input,158,Follow._158_in_op_32154);  
				stream_158.Add(char_literal252);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 355:12: -> T_PLUS
				{
					DebugLocation(355, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_PLUS, "T_PLUS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:356:4: '-'
				{
				DebugLocation(356, 4);
				char_literal253=(IToken)Match(input,160,Follow._160_in_op_32163);  
				stream_160.Add(char_literal253);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 356:8: -> T_MINUS
				{
					DebugLocation(356, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MINUS, "T_MINUS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:357:4: '&'
				{
				DebugLocation(357, 4);
				char_literal254=(IToken)Match(input,154,Follow._154_in_op_32172);  
				stream_154.Add(char_literal254);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 357:8: -> T_BITWISE_AND
				{
					DebugLocation(357, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_AND, "T_BITWISE_AND"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:358:4: '|'
				{
				DebugLocation(358, 4);
				char_literal255=(IToken)Match(input,173,Follow._173_in_op_32181);  
				stream_173.Add(char_literal255);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 358:8: -> T_BITWISE_OR
				{
					DebugLocation(358, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_OR, "T_BITWISE_OR"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:359:4: '^'
				{
				DebugLocation(359, 4);
				char_literal256=(IToken)Match(input,172,Follow._172_in_op_32190);  
				stream_172.Add(char_literal256);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 359:8: -> T_BITWISE_XOR
				{
					DebugLocation(359, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_XOR, "T_BITWISE_XOR"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_3", 47);
			LeaveRule("op_3", 47);
			LeaveRule_op_3();
	    }
	 	DebugLocation(360, 1);
		} finally { DebugExitRule(GrammarFileName, "op_3"); }
		return retval;

	}
	// $ANTLR end "op_3"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_2() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_2() {}

	// $ANTLR start "expression_2"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:368:1: expression_2 : (a= expression_1 -> $a) ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )* ;
	[GrammarRule("expression_2")]
	private AstParserRuleReturnScope<object, IToken> expression_2()
	{
		EnterRule_expression_2();
		EnterRule("expression_2", 48);
		TraceIn("expression_2", 48);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS257 = default(IToken);
	    IToken WS259 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_2258 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS257_tree = default(object);
	    object WS259_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_op_2=new RewriteRuleSubtreeStream(adaptor,"rule op_2");
	    RewriteRuleSubtreeStream stream_expression_1=new RewriteRuleSubtreeStream(adaptor,"rule expression_1");
		try { DebugEnterRule(GrammarFileName, "expression_2");
		DebugLocation(368, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:369:2: ( (a= expression_1 -> $a) ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:369:4: (a= expression_1 -> $a) ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )*
			{
			DebugLocation(369, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:369:4: (a= expression_1 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:369:5: a= expression_1
			{
			DebugLocation(369, 6);
			PushFollow(Follow._expression_1_in_expression_22212);
			a=expression_1();
			PopFollow();

			stream_expression_1.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 369:19: -> $a
			{
				DebugLocation(369, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(369, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:369:25: ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )*
			try { DebugEnterSubRule(87);
			while (true)
			{
				int alt87=2;
				try { DebugEnterDecision(87, decisionCanBacktrack[87]);
				int LA87_0 = input.LA(1);

				if ((LA87_0==WS))
				{
					int LA87_1 = input.LA(2);

					if ((LA87_1==157))
					{
						int LA87_4 = input.LA(3);

						if ((LA87_4==WS))
						{
							int LA87_5 = input.LA(4);

							if (((LA87_5>=CASE && LA87_5<=CAST)||LA87_5==CONVERT||LA87_5==EXISTS||LA87_5==NUMBER||LA87_5==SIMPLE_FILE||(LA87_5>=STRING && LA87_5<=SYSTEMVAR)||LA87_5==TOKEN||LA87_5==VARIABLE||LA87_5==155))
							{
								alt87 = 1;
							}


						}
						else if (((LA87_4>=CASE && LA87_4<=CAST)||LA87_4==CONVERT||LA87_4==EXISTS||LA87_4==NUMBER||LA87_4==SIMPLE_FILE||(LA87_4>=STRING && LA87_4<=SYSTEMVAR)||LA87_4==TOKEN||LA87_4==VARIABLE||LA87_4==155))
						{
							alt87 = 1;
						}


					}
					else if ((LA87_1==153||LA87_1==162))
					{
						alt87 = 1;
					}


				}
				else if ((LA87_0==153||LA87_0==157||LA87_0==162))
				{
					alt87 = 1;
				}


				} finally { DebugExitDecision(87); }
				switch ( alt87 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:369:26: ( WS )? op_2 ( WS )? b= expression_1
					{
					DebugLocation(369, 26);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:369:26: ( WS )?
					int alt85=2;
					try { DebugEnterSubRule(85);
					try { DebugEnterDecision(85, decisionCanBacktrack[85]);
					int LA85_0 = input.LA(1);

					if ((LA85_0==WS))
					{
						alt85 = 1;
					}
					} finally { DebugExitDecision(85); }
					switch (alt85)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:369:26: WS
						{
						DebugLocation(369, 26);
						WS257=(IToken)Match(input,WS,Follow._WS_in_expression_22219);  
						stream_WS.Add(WS257);


						}
						break;

					}
					} finally { DebugExitSubRule(85); }

					DebugLocation(369, 30);
					PushFollow(Follow._op_2_in_expression_22222);
					op_2258=op_2();
					PopFollow();

					stream_op_2.Add(op_2258.Tree);
					DebugLocation(369, 35);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:369:35: ( WS )?
					int alt86=2;
					try { DebugEnterSubRule(86);
					try { DebugEnterDecision(86, decisionCanBacktrack[86]);
					int LA86_0 = input.LA(1);

					if ((LA86_0==WS))
					{
						alt86 = 1;
					}
					} finally { DebugExitDecision(86); }
					switch (alt86)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:369:35: WS
						{
						DebugLocation(369, 35);
						WS259=(IToken)Match(input,WS,Follow._WS_in_expression_22224);  
						stream_WS.Add(WS259);


						}
						break;

					}
					} finally { DebugExitSubRule(86); }

					DebugLocation(369, 40);
					PushFollow(Follow._expression_1_in_expression_22229);
					b=expression_1();
					PopFollow();

					stream_expression_1.Add(b.Tree);


					{
					// AST REWRITE
					// elements: expression_2, b, op_2
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 369:54: -> ^( T_OP_BINARY op_2 $expression_2 $b)
					{
						DebugLocation(369, 57);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:369:57: ^( T_OP_BINARY op_2 $expression_2 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(369, 59);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(369, 71);
						adaptor.AddChild(root_1, stream_op_2.NextTree());
						DebugLocation(369, 77);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(369, 91);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop87;
				}
			}

			loop87:
				;

			} finally { DebugExitSubRule(87); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_2", 48);
			LeaveRule("expression_2", 48);
			LeaveRule_expression_2();
	    }
	 	DebugLocation(370, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_2"); }
		return retval;

	}
	// $ANTLR end "expression_2"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_2() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_2() {}

	// $ANTLR start "op_2"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:372:1: op_2 : ( '*' -> T_PRODUCT | '/' -> T_DIVIDE | '%' -> T_MODULO );
	[GrammarRule("op_2")]
	private AstParserRuleReturnScope<object, IToken> op_2()
	{
		EnterRule_op_2();
		EnterRule("op_2", 49);
		TraceIn("op_2", 49);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal260 = default(IToken);
	    IToken char_literal261 = default(IToken);
	    IToken char_literal262 = default(IToken);

	    object char_literal260_tree = default(object);
	    object char_literal261_tree = default(object);
	    object char_literal262_tree = default(object);
	    RewriteRuleITokenStream stream_153=new RewriteRuleITokenStream(adaptor,"token 153");
	    RewriteRuleITokenStream stream_162=new RewriteRuleITokenStream(adaptor,"token 162");
	    RewriteRuleITokenStream stream_157=new RewriteRuleITokenStream(adaptor,"token 157");

		try { DebugEnterRule(GrammarFileName, "op_2");
		DebugLocation(372, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:372:6: ( '*' -> T_PRODUCT | '/' -> T_DIVIDE | '%' -> T_MODULO )
			int alt88=3;
			try { DebugEnterDecision(88, decisionCanBacktrack[88]);
			switch (input.LA(1))
			{
			case 157:
				{
				alt88 = 1;
				}
				break;
			case 162:
				{
				alt88 = 2;
				}
				break;
			case 153:
				{
				alt88 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 88, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(88); }
			switch (alt88)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:372:8: '*'
				{
				DebugLocation(372, 8);
				char_literal260=(IToken)Match(input,157,Follow._157_in_op_22255);  
				stream_157.Add(char_literal260);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 372:12: -> T_PRODUCT
				{
					DebugLocation(372, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_PRODUCT, "T_PRODUCT"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:373:4: '/'
				{
				DebugLocation(373, 4);
				char_literal261=(IToken)Match(input,162,Follow._162_in_op_22264);  
				stream_162.Add(char_literal261);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 373:8: -> T_DIVIDE
				{
					DebugLocation(373, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_DIVIDE, "T_DIVIDE"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:374:4: '%'
				{
				DebugLocation(374, 4);
				char_literal262=(IToken)Match(input,153,Follow._153_in_op_22273);  
				stream_153.Add(char_literal262);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 374:8: -> T_MODULO
				{
					DebugLocation(374, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MODULO, "T_MODULO"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_2", 49);
			LeaveRule("op_2", 49);
			LeaveRule_op_2();
	    }
	 	DebugLocation(375, 1);
		} finally { DebugExitRule(GrammarFileName, "op_2"); }
		return retval;

	}
	// $ANTLR end "op_2"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_1() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_1() {}

	// $ANTLR start "expression_1"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:377:1: expression_1 : ( '(' ( WS )? op_1 ( WS )? expression_1 ( WS )? ')' -> ^( T_OP_UNARY op_1 expression_1 ) | expression_atom );
	[GrammarRule("expression_1")]
	private AstParserRuleReturnScope<object, IToken> expression_1()
	{
		EnterRule_expression_1();
		EnterRule("expression_1", 50);
		TraceIn("expression_1", 50);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal263 = default(IToken);
	    IToken WS264 = default(IToken);
	    IToken WS266 = default(IToken);
	    IToken WS268 = default(IToken);
	    IToken char_literal269 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> op_1265 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_1267 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_atom270 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal263_tree = default(object);
	    object WS264_tree = default(object);
	    object WS266_tree = default(object);
	    object WS268_tree = default(object);
	    object char_literal269_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_156=new RewriteRuleITokenStream(adaptor,"token 156");
	    RewriteRuleITokenStream stream_155=new RewriteRuleITokenStream(adaptor,"token 155");
	    RewriteRuleSubtreeStream stream_expression_1=new RewriteRuleSubtreeStream(adaptor,"rule expression_1");
	    RewriteRuleSubtreeStream stream_op_1=new RewriteRuleSubtreeStream(adaptor,"rule op_1");
		try { DebugEnterRule(GrammarFileName, "expression_1");
		DebugLocation(377, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:379:2: ( '(' ( WS )? op_1 ( WS )? expression_1 ( WS )? ')' -> ^( T_OP_UNARY op_1 expression_1 ) | expression_atom )
			int alt92=2;
			try { DebugEnterDecision(92, decisionCanBacktrack[92]);
			int LA92_0 = input.LA(1);

			if ((LA92_0==155))
			{
				switch (input.LA(2))
				{
				case WS:
					{
					int LA92_3 = input.LA(3);

					if ((LA92_3==158||LA92_3==160||LA92_3==174))
					{
						alt92 = 1;
					}
					else if ((LA92_3==SELECT))
					{
						alt92 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 92, 3, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 158:
				case 160:
				case 174:
					{
					alt92 = 1;
					}
					break;
				case CASE:
				case CAST:
				case CONVERT:
				case EXISTS:
				case NOT:
				case NUMBER:
				case SELECT:
				case SIMPLE_FILE:
				case STRING:
				case SYSTEMVAR:
				case TOKEN:
				case VARIABLE:
				case 155:
					{
					alt92 = 2;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 92, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else if (((LA92_0>=CASE && LA92_0<=CAST)||LA92_0==CONVERT||LA92_0==EXISTS||LA92_0==NUMBER||LA92_0==SIMPLE_FILE||(LA92_0>=STRING && LA92_0<=SYSTEMVAR)||LA92_0==TOKEN||LA92_0==VARIABLE))
			{
				alt92 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 92, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(92); }
			switch (alt92)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:379:4: '(' ( WS )? op_1 ( WS )? expression_1 ( WS )? ')'
				{
				DebugLocation(379, 4);
				char_literal263=(IToken)Match(input,155,Follow._155_in_expression_12291);  
				stream_155.Add(char_literal263);

				DebugLocation(379, 8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:379:8: ( WS )?
				int alt89=2;
				try { DebugEnterSubRule(89);
				try { DebugEnterDecision(89, decisionCanBacktrack[89]);
				int LA89_0 = input.LA(1);

				if ((LA89_0==WS))
				{
					alt89 = 1;
				}
				} finally { DebugExitDecision(89); }
				switch (alt89)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:379:8: WS
					{
					DebugLocation(379, 8);
					WS264=(IToken)Match(input,WS,Follow._WS_in_expression_12293);  
					stream_WS.Add(WS264);


					}
					break;

				}
				} finally { DebugExitSubRule(89); }

				DebugLocation(379, 12);
				PushFollow(Follow._op_1_in_expression_12296);
				op_1265=op_1();
				PopFollow();

				stream_op_1.Add(op_1265.Tree);
				DebugLocation(379, 17);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:379:17: ( WS )?
				int alt90=2;
				try { DebugEnterSubRule(90);
				try { DebugEnterDecision(90, decisionCanBacktrack[90]);
				int LA90_0 = input.LA(1);

				if ((LA90_0==WS))
				{
					alt90 = 1;
				}
				} finally { DebugExitDecision(90); }
				switch (alt90)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:379:17: WS
					{
					DebugLocation(379, 17);
					WS266=(IToken)Match(input,WS,Follow._WS_in_expression_12298);  
					stream_WS.Add(WS266);


					}
					break;

				}
				} finally { DebugExitSubRule(90); }

				DebugLocation(379, 21);
				PushFollow(Follow._expression_1_in_expression_12301);
				expression_1267=expression_1();
				PopFollow();

				stream_expression_1.Add(expression_1267.Tree);
				DebugLocation(379, 34);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:379:34: ( WS )?
				int alt91=2;
				try { DebugEnterSubRule(91);
				try { DebugEnterDecision(91, decisionCanBacktrack[91]);
				int LA91_0 = input.LA(1);

				if ((LA91_0==WS))
				{
					alt91 = 1;
				}
				} finally { DebugExitDecision(91); }
				switch (alt91)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:379:34: WS
					{
					DebugLocation(379, 34);
					WS268=(IToken)Match(input,WS,Follow._WS_in_expression_12303);  
					stream_WS.Add(WS268);


					}
					break;

				}
				} finally { DebugExitSubRule(91); }

				DebugLocation(379, 38);
				char_literal269=(IToken)Match(input,156,Follow._156_in_expression_12306);  
				stream_156.Add(char_literal269);



				{
				// AST REWRITE
				// elements: expression_1, op_1
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 379:42: -> ^( T_OP_UNARY op_1 expression_1 )
				{
					DebugLocation(379, 45);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:379:45: ^( T_OP_UNARY op_1 expression_1 )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(379, 47);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_UNARY, "T_OP_UNARY"), root_1);

					DebugLocation(379, 58);
					adaptor.AddChild(root_1, stream_op_1.NextTree());
					DebugLocation(379, 63);
					adaptor.AddChild(root_1, stream_expression_1.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:381:4: expression_atom
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(381, 4);
				PushFollow(Follow._expression_atom_in_expression_12323);
				expression_atom270=expression_atom();
				PopFollow();

				adaptor.AddChild(root_0, expression_atom270.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_1", 50);
			LeaveRule("expression_1", 50);
			LeaveRule_expression_1();
	    }
	 	DebugLocation(382, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_1"); }
		return retval;

	}
	// $ANTLR end "expression_1"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_1() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_1() {}

	// $ANTLR start "op_1"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:384:1: op_1 : ( '~' -> T_BITWISE_NOT | '+' -> T_PLUS | '-' -> T_MINUS );
	[GrammarRule("op_1")]
	private AstParserRuleReturnScope<object, IToken> op_1()
	{
		EnterRule_op_1();
		EnterRule("op_1", 51);
		TraceIn("op_1", 51);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal271 = default(IToken);
	    IToken char_literal272 = default(IToken);
	    IToken char_literal273 = default(IToken);

	    object char_literal271_tree = default(object);
	    object char_literal272_tree = default(object);
	    object char_literal273_tree = default(object);
	    RewriteRuleITokenStream stream_174=new RewriteRuleITokenStream(adaptor,"token 174");
	    RewriteRuleITokenStream stream_160=new RewriteRuleITokenStream(adaptor,"token 160");
	    RewriteRuleITokenStream stream_158=new RewriteRuleITokenStream(adaptor,"token 158");

		try { DebugEnterRule(GrammarFileName, "op_1");
		DebugLocation(384, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:384:6: ( '~' -> T_BITWISE_NOT | '+' -> T_PLUS | '-' -> T_MINUS )
			int alt93=3;
			try { DebugEnterDecision(93, decisionCanBacktrack[93]);
			switch (input.LA(1))
			{
			case 174:
				{
				alt93 = 1;
				}
				break;
			case 158:
				{
				alt93 = 2;
				}
				break;
			case 160:
				{
				alt93 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 93, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(93); }
			switch (alt93)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:384:8: '~'
				{
				DebugLocation(384, 8);
				char_literal271=(IToken)Match(input,174,Follow._174_in_op_12333);  
				stream_174.Add(char_literal271);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 384:12: -> T_BITWISE_NOT
				{
					DebugLocation(384, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_NOT, "T_BITWISE_NOT"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:385:5: '+'
				{
				DebugLocation(385, 5);
				char_literal272=(IToken)Match(input,158,Follow._158_in_op_12343);  
				stream_158.Add(char_literal272);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 385:9: -> T_PLUS
				{
					DebugLocation(385, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_PLUS, "T_PLUS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:386:4: '-'
				{
				DebugLocation(386, 4);
				char_literal273=(IToken)Match(input,160,Follow._160_in_op_12352);  
				stream_160.Add(char_literal273);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 386:8: -> T_MINUS
				{
					DebugLocation(386, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MINUS, "T_MINUS"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_1", 51);
			LeaveRule("op_1", 51);
			LeaveRule_op_1();
	    }
	 	DebugLocation(387, 1);
		} finally { DebugExitRule(GrammarFileName, "op_1"); }
		return retval;

	}
	// $ANTLR end "op_1"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_atom() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_atom() {}

	// $ANTLR start "expression_atom"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:389:1: expression_atom : ( NUMBER -> ^( T_INTEGER NUMBER ) | string | SYSTEMVAR -> ^( T_SYSTEMVAR SYSTEMVAR ) | variable | subquery | '(' expression ')' -> expression | functioncall_or_column | conversion | case | EXISTS ( WS )? '(' ( WS )? select_command ( WS )? ')' -> ^( T_EXISTS select_command ) );
	[GrammarRule("expression_atom")]
	private AstParserRuleReturnScope<object, IToken> expression_atom()
	{
		EnterRule_expression_atom();
		EnterRule("expression_atom", 52);
		TraceIn("expression_atom", 52);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken NUMBER274 = default(IToken);
	    IToken SYSTEMVAR276 = default(IToken);
	    IToken char_literal279 = default(IToken);
	    IToken char_literal281 = default(IToken);
	    IToken EXISTS285 = default(IToken);
	    IToken WS286 = default(IToken);
	    IToken char_literal287 = default(IToken);
	    IToken WS288 = default(IToken);
	    IToken WS290 = default(IToken);
	    IToken char_literal291 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> string275 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> variable277 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> subquery278 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression280 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> functioncall_or_column282 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> conversion283 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> case284 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> select_command289 = default(AstParserRuleReturnScope<object, IToken>);

	    object NUMBER274_tree = default(object);
	    object SYSTEMVAR276_tree = default(object);
	    object char_literal279_tree = default(object);
	    object char_literal281_tree = default(object);
	    object EXISTS285_tree = default(object);
	    object WS286_tree = default(object);
	    object char_literal287_tree = default(object);
	    object WS288_tree = default(object);
	    object WS290_tree = default(object);
	    object char_literal291_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_EXISTS=new RewriteRuleITokenStream(adaptor,"token EXISTS");
	    RewriteRuleITokenStream stream_SYSTEMVAR=new RewriteRuleITokenStream(adaptor,"token SYSTEMVAR");
	    RewriteRuleITokenStream stream_156=new RewriteRuleITokenStream(adaptor,"token 156");
	    RewriteRuleITokenStream stream_155=new RewriteRuleITokenStream(adaptor,"token 155");
	    RewriteRuleITokenStream stream_NUMBER=new RewriteRuleITokenStream(adaptor,"token NUMBER");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_select_command=new RewriteRuleSubtreeStream(adaptor,"rule select_command");
		try { DebugEnterRule(GrammarFileName, "expression_atom");
		DebugLocation(389, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:390:2: ( NUMBER -> ^( T_INTEGER NUMBER ) | string | SYSTEMVAR -> ^( T_SYSTEMVAR SYSTEMVAR ) | variable | subquery | '(' expression ')' -> expression | functioncall_or_column | conversion | case | EXISTS ( WS )? '(' ( WS )? select_command ( WS )? ')' -> ^( T_EXISTS select_command ) )
			int alt97=10;
			try { DebugEnterDecision(97, decisionCanBacktrack[97]);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt97 = 1;
				}
				break;
			case STRING:
				{
				alt97 = 2;
				}
				break;
			case SYSTEMVAR:
				{
				alt97 = 3;
				}
				break;
			case VARIABLE:
				{
				alt97 = 4;
				}
				break;
			case 155:
				{
				int LA97_5 = input.LA(2);

				if ((LA97_5==SELECT||LA97_5==WS))
				{
					alt97 = 5;
				}
				else if (((LA97_5>=CASE && LA97_5<=CAST)||LA97_5==CONVERT||LA97_5==EXISTS||(LA97_5>=NOT && LA97_5<=NUMBER)||LA97_5==SIMPLE_FILE||(LA97_5>=STRING && LA97_5<=SYSTEMVAR)||LA97_5==TOKEN||LA97_5==VARIABLE||LA97_5==155))
				{
					alt97 = 6;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 97, 5, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SIMPLE_FILE:
			case TOKEN:
				{
				alt97 = 7;
				}
				break;
			case CAST:
			case CONVERT:
				{
				alt97 = 8;
				}
				break;
			case CASE:
				{
				alt97 = 9;
				}
				break;
			case EXISTS:
				{
				alt97 = 10;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 97, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(97); }
			switch (alt97)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:390:4: NUMBER
				{
				DebugLocation(390, 4);
				NUMBER274=(IToken)Match(input,NUMBER,Follow._NUMBER_in_expression_atom2367);  
				stream_NUMBER.Add(NUMBER274);



				{
				// AST REWRITE
				// elements: NUMBER
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 390:11: -> ^( T_INTEGER NUMBER )
				{
					DebugLocation(390, 14);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:390:14: ^( T_INTEGER NUMBER )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(390, 16);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_INTEGER, "T_INTEGER"), root_1);

					DebugLocation(390, 26);
					adaptor.AddChild(root_1, stream_NUMBER.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:391:4: string
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(391, 4);
				PushFollow(Follow._string_in_expression_atom2380);
				string275=@string();
				PopFollow();

				adaptor.AddChild(root_0, string275.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:392:4: SYSTEMVAR
				{
				DebugLocation(392, 4);
				SYSTEMVAR276=(IToken)Match(input,SYSTEMVAR,Follow._SYSTEMVAR_in_expression_atom2385);  
				stream_SYSTEMVAR.Add(SYSTEMVAR276);



				{
				// AST REWRITE
				// elements: SYSTEMVAR
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 392:14: -> ^( T_SYSTEMVAR SYSTEMVAR )
				{
					DebugLocation(392, 17);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:392:17: ^( T_SYSTEMVAR SYSTEMVAR )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(392, 19);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SYSTEMVAR, "T_SYSTEMVAR"), root_1);

					DebugLocation(392, 31);
					adaptor.AddChild(root_1, stream_SYSTEMVAR.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:393:4: variable
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(393, 4);
				PushFollow(Follow._variable_in_expression_atom2398);
				variable277=variable();
				PopFollow();

				adaptor.AddChild(root_0, variable277.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:394:4: subquery
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(394, 4);
				PushFollow(Follow._subquery_in_expression_atom2403);
				subquery278=subquery();
				PopFollow();

				adaptor.AddChild(root_0, subquery278.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:395:4: '(' expression ')'
				{
				DebugLocation(395, 4);
				char_literal279=(IToken)Match(input,155,Follow._155_in_expression_atom2408);  
				stream_155.Add(char_literal279);

				DebugLocation(395, 8);
				PushFollow(Follow._expression_in_expression_atom2410);
				expression280=expression();
				PopFollow();

				stream_expression.Add(expression280.Tree);
				DebugLocation(395, 19);
				char_literal281=(IToken)Match(input,156,Follow._156_in_expression_atom2412);  
				stream_156.Add(char_literal281);



				{
				// AST REWRITE
				// elements: expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 395:23: -> expression
				{
					DebugLocation(395, 26);
					adaptor.AddChild(root_0, stream_expression.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:396:4: functioncall_or_column
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(396, 4);
				PushFollow(Follow._functioncall_or_column_in_expression_atom2421);
				functioncall_or_column282=functioncall_or_column();
				PopFollow();

				adaptor.AddChild(root_0, functioncall_or_column282.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:397:4: conversion
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(397, 4);
				PushFollow(Follow._conversion_in_expression_atom2426);
				conversion283=conversion();
				PopFollow();

				adaptor.AddChild(root_0, conversion283.Tree);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:398:4: case
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(398, 4);
				PushFollow(Follow._case_in_expression_atom2431);
				case284=@case();
				PopFollow();

				adaptor.AddChild(root_0, case284.Tree);

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:399:4: EXISTS ( WS )? '(' ( WS )? select_command ( WS )? ')'
				{
				DebugLocation(399, 4);
				EXISTS285=(IToken)Match(input,EXISTS,Follow._EXISTS_in_expression_atom2436);  
				stream_EXISTS.Add(EXISTS285);

				DebugLocation(399, 11);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:399:11: ( WS )?
				int alt94=2;
				try { DebugEnterSubRule(94);
				try { DebugEnterDecision(94, decisionCanBacktrack[94]);
				int LA94_0 = input.LA(1);

				if ((LA94_0==WS))
				{
					alt94 = 1;
				}
				} finally { DebugExitDecision(94); }
				switch (alt94)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:399:11: WS
					{
					DebugLocation(399, 11);
					WS286=(IToken)Match(input,WS,Follow._WS_in_expression_atom2438);  
					stream_WS.Add(WS286);


					}
					break;

				}
				} finally { DebugExitSubRule(94); }

				DebugLocation(399, 15);
				char_literal287=(IToken)Match(input,155,Follow._155_in_expression_atom2441);  
				stream_155.Add(char_literal287);

				DebugLocation(399, 19);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:399:19: ( WS )?
				int alt95=2;
				try { DebugEnterSubRule(95);
				try { DebugEnterDecision(95, decisionCanBacktrack[95]);
				int LA95_0 = input.LA(1);

				if ((LA95_0==WS))
				{
					alt95 = 1;
				}
				} finally { DebugExitDecision(95); }
				switch (alt95)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:399:19: WS
					{
					DebugLocation(399, 19);
					WS288=(IToken)Match(input,WS,Follow._WS_in_expression_atom2443);  
					stream_WS.Add(WS288);


					}
					break;

				}
				} finally { DebugExitSubRule(95); }

				DebugLocation(399, 23);
				PushFollow(Follow._select_command_in_expression_atom2446);
				select_command289=select_command();
				PopFollow();

				stream_select_command.Add(select_command289.Tree);
				DebugLocation(399, 38);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:399:38: ( WS )?
				int alt96=2;
				try { DebugEnterSubRule(96);
				try { DebugEnterDecision(96, decisionCanBacktrack[96]);
				int LA96_0 = input.LA(1);

				if ((LA96_0==WS))
				{
					alt96 = 1;
				}
				} finally { DebugExitDecision(96); }
				switch (alt96)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:399:38: WS
					{
					DebugLocation(399, 38);
					WS290=(IToken)Match(input,WS,Follow._WS_in_expression_atom2448);  
					stream_WS.Add(WS290);


					}
					break;

				}
				} finally { DebugExitSubRule(96); }

				DebugLocation(399, 42);
				char_literal291=(IToken)Match(input,156,Follow._156_in_expression_atom2451);  
				stream_156.Add(char_literal291);



				{
				// AST REWRITE
				// elements: select_command
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 399:46: -> ^( T_EXISTS select_command )
				{
					DebugLocation(399, 49);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:399:49: ^( T_EXISTS select_command )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(399, 51);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_EXISTS, "T_EXISTS"), root_1);

					DebugLocation(399, 60);
					adaptor.AddChild(root_1, stream_select_command.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_atom", 52);
			LeaveRule("expression_atom", 52);
			LeaveRule_expression_atom();
	    }
	 	DebugLocation(400, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_atom"); }
		return retval;

	}
	// $ANTLR end "expression_atom"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_functioncall_or_column() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_functioncall_or_column() {}

	// $ANTLR start "functioncall_or_column"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:403:1: functioncall_or_column : ( TOKEN ( WS )? '(' ( WS )? ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )? ')' -> ^( T_FUNCTIONCALL TOKEN ( expression )* ) | TOKEN ( WS )? '(' ( WS )? all_columns ( WS )? ')' -> ^( T_FUNCTIONCALL TOKEN all_columns ) | ( table_alias ( WS )? '.' ( WS )? )? column_name -> ^( T_COLUMN column_name ( table_alias )? ) );
	[GrammarRule("functioncall_or_column")]
	private AstParserRuleReturnScope<object, IToken> functioncall_or_column()
	{
		EnterRule_functioncall_or_column();
		EnterRule("functioncall_or_column", 53);
		TraceIn("functioncall_or_column", 53);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN292 = default(IToken);
	    IToken WS293 = default(IToken);
	    IToken char_literal294 = default(IToken);
	    IToken WS295 = default(IToken);
	    IToken WS297 = default(IToken);
	    IToken char_literal298 = default(IToken);
	    IToken WS299 = default(IToken);
	    IToken WS301 = default(IToken);
	    IToken char_literal302 = default(IToken);
	    IToken TOKEN303 = default(IToken);
	    IToken WS304 = default(IToken);
	    IToken char_literal305 = default(IToken);
	    IToken WS306 = default(IToken);
	    IToken WS308 = default(IToken);
	    IToken char_literal309 = default(IToken);
	    IToken WS311 = default(IToken);
	    IToken char_literal312 = default(IToken);
	    IToken WS313 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression296 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression300 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> all_columns307 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> table_alias310 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> column_name314 = default(AstParserRuleReturnScope<object, IToken>);

	    object TOKEN292_tree = default(object);
	    object WS293_tree = default(object);
	    object char_literal294_tree = default(object);
	    object WS295_tree = default(object);
	    object WS297_tree = default(object);
	    object char_literal298_tree = default(object);
	    object WS299_tree = default(object);
	    object WS301_tree = default(object);
	    object char_literal302_tree = default(object);
	    object TOKEN303_tree = default(object);
	    object WS304_tree = default(object);
	    object char_literal305_tree = default(object);
	    object WS306_tree = default(object);
	    object WS308_tree = default(object);
	    object char_literal309_tree = default(object);
	    object WS311_tree = default(object);
	    object char_literal312_tree = default(object);
	    object WS313_tree = default(object);
	    RewriteRuleITokenStream stream_161=new RewriteRuleITokenStream(adaptor,"token 161");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_159=new RewriteRuleITokenStream(adaptor,"token 159");
	    RewriteRuleITokenStream stream_156=new RewriteRuleITokenStream(adaptor,"token 156");
	    RewriteRuleITokenStream stream_155=new RewriteRuleITokenStream(adaptor,"token 155");
	    RewriteRuleITokenStream stream_TOKEN=new RewriteRuleITokenStream(adaptor,"token TOKEN");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_table_alias=new RewriteRuleSubtreeStream(adaptor,"rule table_alias");
	    RewriteRuleSubtreeStream stream_all_columns=new RewriteRuleSubtreeStream(adaptor,"rule all_columns");
	    RewriteRuleSubtreeStream stream_column_name=new RewriteRuleSubtreeStream(adaptor,"rule column_name");
		try { DebugEnterRule(GrammarFileName, "functioncall_or_column");
		DebugLocation(403, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:404:2: ( TOKEN ( WS )? '(' ( WS )? ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )? ')' -> ^( T_FUNCTIONCALL TOKEN ( expression )* ) | TOKEN ( WS )? '(' ( WS )? all_columns ( WS )? ')' -> ^( T_FUNCTIONCALL TOKEN all_columns ) | ( table_alias ( WS )? '.' ( WS )? )? column_name -> ^( T_COLUMN column_name ( table_alias )? ) )
			int alt111=3;
			try { DebugEnterDecision(111, decisionCanBacktrack[111]);
			int LA111_0 = input.LA(1);

			if ((LA111_0==TOKEN))
			{
				int LA111_1 = input.LA(2);

				if ((LA111_1==WS))
				{
					int LA111_3 = input.LA(3);

					if ((LA111_3==155))
					{
						switch (input.LA(4))
						{
						case WS:
							{
							switch (input.LA(5))
							{
							case CASE:
							case CAST:
							case CONVERT:
							case EXISTS:
							case NOT:
							case NUMBER:
							case STRING:
							case SYSTEMVAR:
							case TOKEN:
							case VARIABLE:
							case 155:
							case 156:
								{
								alt111 = 1;
								}
								break;
							case SIMPLE_FILE:
								{
								switch (input.LA(6))
								{
								case WS:
									{
									int LA111_9 = input.LA(7);

									if ((LA111_9==161))
									{
										switch (input.LA(8))
										{
										case WS:
											{
											int LA111_11 = input.LA(9);

											if ((LA111_11==SIMPLE_FILE))
											{
												alt111 = 1;
											}
											else if ((LA111_11==157))
											{
												alt111 = 2;
											}
											else
											{
												NoViableAltException nvae = new NoViableAltException("", 111, 11, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
											}
											break;
										case SIMPLE_FILE:
											{
											alt111 = 1;
											}
											break;
										case 157:
											{
											alt111 = 2;
											}
											break;
										default:
											{
												NoViableAltException nvae = new NoViableAltException("", 111, 10, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
										}

									}
									else if ((LA111_9==AND||LA111_9==BETWEEN||LA111_9==IN||LA111_9==LIKE||LA111_9==MATCH||LA111_9==NOT||LA111_9==OR||(LA111_9>=150 && LA111_9<=154)||(LA111_9>=156 && LA111_9<=160)||LA111_9==162||(LA111_9>=164 && LA111_9<=169)||(LA111_9>=172 && LA111_9<=173)))
									{
										alt111 = 1;
									}
									else
									{
										NoViableAltException nvae = new NoViableAltException("", 111, 9, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
									}
									break;
								case 161:
									{
									switch (input.LA(7))
									{
									case WS:
										{
										int LA111_11 = input.LA(8);

										if ((LA111_11==SIMPLE_FILE))
										{
											alt111 = 1;
										}
										else if ((LA111_11==157))
										{
											alt111 = 2;
										}
										else
										{
											NoViableAltException nvae = new NoViableAltException("", 111, 11, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
										}
										break;
									case SIMPLE_FILE:
										{
										alt111 = 1;
										}
										break;
									case 157:
										{
										alt111 = 2;
										}
										break;
									default:
										{
											NoViableAltException nvae = new NoViableAltException("", 111, 10, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}

									}
									break;
								case 150:
								case 151:
								case 152:
								case 153:
								case 154:
								case 156:
								case 157:
								case 158:
								case 159:
								case 160:
								case 162:
								case 164:
								case 165:
								case 166:
								case 167:
								case 168:
								case 169:
								case 172:
								case 173:
									{
									alt111 = 1;
									}
									break;
								default:
									{
										NoViableAltException nvae = new NoViableAltException("", 111, 7, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

								}
								break;
							case 157:
								{
								alt111 = 2;
								}
								break;
							default:
								{
									NoViableAltException nvae = new NoViableAltException("", 111, 5, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}

							}
							break;
						case CASE:
						case CAST:
						case CONVERT:
						case EXISTS:
						case NOT:
						case NUMBER:
						case STRING:
						case SYSTEMVAR:
						case TOKEN:
						case VARIABLE:
						case 155:
						case 156:
							{
							alt111 = 1;
							}
							break;
						case SIMPLE_FILE:
							{
							switch (input.LA(5))
							{
							case WS:
								{
								int LA111_9 = input.LA(6);

								if ((LA111_9==161))
								{
									switch (input.LA(7))
									{
									case WS:
										{
										int LA111_11 = input.LA(8);

										if ((LA111_11==SIMPLE_FILE))
										{
											alt111 = 1;
										}
										else if ((LA111_11==157))
										{
											alt111 = 2;
										}
										else
										{
											NoViableAltException nvae = new NoViableAltException("", 111, 11, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
										}
										break;
									case SIMPLE_FILE:
										{
										alt111 = 1;
										}
										break;
									case 157:
										{
										alt111 = 2;
										}
										break;
									default:
										{
											NoViableAltException nvae = new NoViableAltException("", 111, 10, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}

								}
								else if ((LA111_9==AND||LA111_9==BETWEEN||LA111_9==IN||LA111_9==LIKE||LA111_9==MATCH||LA111_9==NOT||LA111_9==OR||(LA111_9>=150 && LA111_9<=154)||(LA111_9>=156 && LA111_9<=160)||LA111_9==162||(LA111_9>=164 && LA111_9<=169)||(LA111_9>=172 && LA111_9<=173)))
								{
									alt111 = 1;
								}
								else
								{
									NoViableAltException nvae = new NoViableAltException("", 111, 9, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
								}
								break;
							case 161:
								{
								switch (input.LA(6))
								{
								case WS:
									{
									int LA111_11 = input.LA(7);

									if ((LA111_11==SIMPLE_FILE))
									{
										alt111 = 1;
									}
									else if ((LA111_11==157))
									{
										alt111 = 2;
									}
									else
									{
										NoViableAltException nvae = new NoViableAltException("", 111, 11, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
									}
									break;
								case SIMPLE_FILE:
									{
									alt111 = 1;
									}
									break;
								case 157:
									{
									alt111 = 2;
									}
									break;
								default:
									{
										NoViableAltException nvae = new NoViableAltException("", 111, 10, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

								}
								break;
							case 150:
							case 151:
							case 152:
							case 153:
							case 154:
							case 156:
							case 157:
							case 158:
							case 159:
							case 160:
							case 162:
							case 164:
							case 165:
							case 166:
							case 167:
							case 168:
							case 169:
							case 172:
							case 173:
								{
								alt111 = 1;
								}
								break;
							default:
								{
									NoViableAltException nvae = new NoViableAltException("", 111, 7, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}

							}
							break;
						case 157:
							{
							alt111 = 2;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 111, 4, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 111, 3, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA111_1==155))
				{
					switch (input.LA(3))
					{
					case WS:
						{
						switch (input.LA(4))
						{
						case CASE:
						case CAST:
						case CONVERT:
						case EXISTS:
						case NOT:
						case NUMBER:
						case STRING:
						case SYSTEMVAR:
						case TOKEN:
						case VARIABLE:
						case 155:
						case 156:
							{
							alt111 = 1;
							}
							break;
						case SIMPLE_FILE:
							{
							switch (input.LA(5))
							{
							case WS:
								{
								int LA111_9 = input.LA(6);

								if ((LA111_9==161))
								{
									switch (input.LA(7))
									{
									case WS:
										{
										int LA111_11 = input.LA(8);

										if ((LA111_11==SIMPLE_FILE))
										{
											alt111 = 1;
										}
										else if ((LA111_11==157))
										{
											alt111 = 2;
										}
										else
										{
											NoViableAltException nvae = new NoViableAltException("", 111, 11, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
										}
										break;
									case SIMPLE_FILE:
										{
										alt111 = 1;
										}
										break;
									case 157:
										{
										alt111 = 2;
										}
										break;
									default:
										{
											NoViableAltException nvae = new NoViableAltException("", 111, 10, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}

								}
								else if ((LA111_9==AND||LA111_9==BETWEEN||LA111_9==IN||LA111_9==LIKE||LA111_9==MATCH||LA111_9==NOT||LA111_9==OR||(LA111_9>=150 && LA111_9<=154)||(LA111_9>=156 && LA111_9<=160)||LA111_9==162||(LA111_9>=164 && LA111_9<=169)||(LA111_9>=172 && LA111_9<=173)))
								{
									alt111 = 1;
								}
								else
								{
									NoViableAltException nvae = new NoViableAltException("", 111, 9, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
								}
								break;
							case 161:
								{
								switch (input.LA(6))
								{
								case WS:
									{
									int LA111_11 = input.LA(7);

									if ((LA111_11==SIMPLE_FILE))
									{
										alt111 = 1;
									}
									else if ((LA111_11==157))
									{
										alt111 = 2;
									}
									else
									{
										NoViableAltException nvae = new NoViableAltException("", 111, 11, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
									}
									break;
								case SIMPLE_FILE:
									{
									alt111 = 1;
									}
									break;
								case 157:
									{
									alt111 = 2;
									}
									break;
								default:
									{
										NoViableAltException nvae = new NoViableAltException("", 111, 10, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

								}
								break;
							case 150:
							case 151:
							case 152:
							case 153:
							case 154:
							case 156:
							case 157:
							case 158:
							case 159:
							case 160:
							case 162:
							case 164:
							case 165:
							case 166:
							case 167:
							case 168:
							case 169:
							case 172:
							case 173:
								{
								alt111 = 1;
								}
								break;
							default:
								{
									NoViableAltException nvae = new NoViableAltException("", 111, 7, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}

							}
							break;
						case 157:
							{
							alt111 = 2;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 111, 5, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case CASE:
					case CAST:
					case CONVERT:
					case EXISTS:
					case NOT:
					case NUMBER:
					case STRING:
					case SYSTEMVAR:
					case TOKEN:
					case VARIABLE:
					case 155:
					case 156:
						{
						alt111 = 1;
						}
						break;
					case SIMPLE_FILE:
						{
						switch (input.LA(4))
						{
						case WS:
							{
							int LA111_9 = input.LA(5);

							if ((LA111_9==161))
							{
								switch (input.LA(6))
								{
								case WS:
									{
									int LA111_11 = input.LA(7);

									if ((LA111_11==SIMPLE_FILE))
									{
										alt111 = 1;
									}
									else if ((LA111_11==157))
									{
										alt111 = 2;
									}
									else
									{
										NoViableAltException nvae = new NoViableAltException("", 111, 11, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
									}
									break;
								case SIMPLE_FILE:
									{
									alt111 = 1;
									}
									break;
								case 157:
									{
									alt111 = 2;
									}
									break;
								default:
									{
										NoViableAltException nvae = new NoViableAltException("", 111, 10, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

							}
							else if ((LA111_9==AND||LA111_9==BETWEEN||LA111_9==IN||LA111_9==LIKE||LA111_9==MATCH||LA111_9==NOT||LA111_9==OR||(LA111_9>=150 && LA111_9<=154)||(LA111_9>=156 && LA111_9<=160)||LA111_9==162||(LA111_9>=164 && LA111_9<=169)||(LA111_9>=172 && LA111_9<=173)))
							{
								alt111 = 1;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 111, 9, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case 161:
							{
							switch (input.LA(5))
							{
							case WS:
								{
								int LA111_11 = input.LA(6);

								if ((LA111_11==SIMPLE_FILE))
								{
									alt111 = 1;
								}
								else if ((LA111_11==157))
								{
									alt111 = 2;
								}
								else
								{
									NoViableAltException nvae = new NoViableAltException("", 111, 11, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
								}
								break;
							case SIMPLE_FILE:
								{
								alt111 = 1;
								}
								break;
							case 157:
								{
								alt111 = 2;
								}
								break;
							default:
								{
									NoViableAltException nvae = new NoViableAltException("", 111, 10, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}

							}
							break;
						case 150:
						case 151:
						case 152:
						case 153:
						case 154:
						case 156:
						case 157:
						case 158:
						case 159:
						case 160:
						case 162:
						case 164:
						case 165:
						case 166:
						case 167:
						case 168:
						case 169:
						case 172:
						case 173:
							{
							alt111 = 1;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 111, 7, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 157:
						{
						alt111 = 2;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 111, 4, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 111, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA111_0==SIMPLE_FILE))
			{
				alt111 = 3;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 111, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(111); }
			switch (alt111)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:404:4: TOKEN ( WS )? '(' ( WS )? ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )? ')'
				{
				DebugLocation(404, 4);
				TOKEN292=(IToken)Match(input,TOKEN,Follow._TOKEN_in_functioncall_or_column2471);  
				stream_TOKEN.Add(TOKEN292);

				DebugLocation(404, 10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:404:10: ( WS )?
				int alt98=2;
				try { DebugEnterSubRule(98);
				try { DebugEnterDecision(98, decisionCanBacktrack[98]);
				int LA98_0 = input.LA(1);

				if ((LA98_0==WS))
				{
					alt98 = 1;
				}
				} finally { DebugExitDecision(98); }
				switch (alt98)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:404:10: WS
					{
					DebugLocation(404, 10);
					WS293=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2473);  
					stream_WS.Add(WS293);


					}
					break;

				}
				} finally { DebugExitSubRule(98); }

				DebugLocation(404, 14);
				char_literal294=(IToken)Match(input,155,Follow._155_in_functioncall_or_column2476);  
				stream_155.Add(char_literal294);

				DebugLocation(404, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:404:18: ( WS )?
				int alt99=2;
				try { DebugEnterSubRule(99);
				try { DebugEnterDecision(99, decisionCanBacktrack[99]);
				int LA99_0 = input.LA(1);

				if ((LA99_0==WS))
				{
					alt99 = 1;
				}
				} finally { DebugExitDecision(99); }
				switch (alt99)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:404:18: WS
					{
					DebugLocation(404, 18);
					WS295=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2478);  
					stream_WS.Add(WS295);


					}
					break;

				}
				} finally { DebugExitSubRule(99); }

				DebugLocation(404, 22);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:404:22: ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )?
				int alt104=2;
				try { DebugEnterSubRule(104);
				try { DebugEnterDecision(104, decisionCanBacktrack[104]);
				int LA104_0 = input.LA(1);

				if (((LA104_0>=CASE && LA104_0<=CAST)||LA104_0==CONVERT||LA104_0==EXISTS||(LA104_0>=NOT && LA104_0<=NUMBER)||LA104_0==SIMPLE_FILE||(LA104_0>=STRING && LA104_0<=SYSTEMVAR)||LA104_0==TOKEN||LA104_0==VARIABLE||LA104_0==155))
				{
					alt104 = 1;
				}
				} finally { DebugExitDecision(104); }
				switch (alt104)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:404:23: expression ( WS )? ( ',' ( WS )? expression ( WS )? )*
					{
					DebugLocation(404, 23);
					PushFollow(Follow._expression_in_functioncall_or_column2482);
					expression296=expression();
					PopFollow();

					stream_expression.Add(expression296.Tree);
					DebugLocation(404, 34);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:404:34: ( WS )?
					int alt100=2;
					try { DebugEnterSubRule(100);
					try { DebugEnterDecision(100, decisionCanBacktrack[100]);
					int LA100_0 = input.LA(1);

					if ((LA100_0==WS))
					{
						alt100 = 1;
					}
					} finally { DebugExitDecision(100); }
					switch (alt100)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:404:34: WS
						{
						DebugLocation(404, 34);
						WS297=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2484);  
						stream_WS.Add(WS297);


						}
						break;

					}
					} finally { DebugExitSubRule(100); }

					DebugLocation(404, 38);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:404:38: ( ',' ( WS )? expression ( WS )? )*
					try { DebugEnterSubRule(103);
					while (true)
					{
						int alt103=2;
						try { DebugEnterDecision(103, decisionCanBacktrack[103]);
						int LA103_0 = input.LA(1);

						if ((LA103_0==159))
						{
							alt103 = 1;
						}


						} finally { DebugExitDecision(103); }
						switch ( alt103 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:404:39: ',' ( WS )? expression ( WS )?
							{
							DebugLocation(404, 39);
							char_literal298=(IToken)Match(input,159,Follow._159_in_functioncall_or_column2488);  
							stream_159.Add(char_literal298);

							DebugLocation(404, 43);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:404:43: ( WS )?
							int alt101=2;
							try { DebugEnterSubRule(101);
							try { DebugEnterDecision(101, decisionCanBacktrack[101]);
							int LA101_0 = input.LA(1);

							if ((LA101_0==WS))
							{
								alt101 = 1;
							}
							} finally { DebugExitDecision(101); }
							switch (alt101)
							{
							case 1:
								DebugEnterAlt(1);
								// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:404:43: WS
								{
								DebugLocation(404, 43);
								WS299=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2490);  
								stream_WS.Add(WS299);


								}
								break;

							}
							} finally { DebugExitSubRule(101); }

							DebugLocation(404, 47);
							PushFollow(Follow._expression_in_functioncall_or_column2493);
							expression300=expression();
							PopFollow();

							stream_expression.Add(expression300.Tree);
							DebugLocation(404, 58);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:404:58: ( WS )?
							int alt102=2;
							try { DebugEnterSubRule(102);
							try { DebugEnterDecision(102, decisionCanBacktrack[102]);
							int LA102_0 = input.LA(1);

							if ((LA102_0==WS))
							{
								alt102 = 1;
							}
							} finally { DebugExitDecision(102); }
							switch (alt102)
							{
							case 1:
								DebugEnterAlt(1);
								// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:404:58: WS
								{
								DebugLocation(404, 58);
								WS301=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2495);  
								stream_WS.Add(WS301);


								}
								break;

							}
							} finally { DebugExitSubRule(102); }


							}
							break;

						default:
							goto loop103;
						}
					}

					loop103:
						;

					} finally { DebugExitSubRule(103); }


					}
					break;

				}
				} finally { DebugExitSubRule(104); }

				DebugLocation(404, 66);
				char_literal302=(IToken)Match(input,156,Follow._156_in_functioncall_or_column2502);  
				stream_156.Add(char_literal302);



				{
				// AST REWRITE
				// elements: TOKEN, expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 404:70: -> ^( T_FUNCTIONCALL TOKEN ( expression )* )
				{
					DebugLocation(404, 73);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:404:73: ^( T_FUNCTIONCALL TOKEN ( expression )* )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(404, 75);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(404, 90);
					adaptor.AddChild(root_1, stream_TOKEN.NextNode());
					DebugLocation(404, 96);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:404:96: ( expression )*
					while ( stream_expression.HasNext )
					{
						DebugLocation(404, 96);
						adaptor.AddChild(root_1, stream_expression.NextTree());

					}
					stream_expression.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:405:4: TOKEN ( WS )? '(' ( WS )? all_columns ( WS )? ')'
				{
				DebugLocation(405, 4);
				TOKEN303=(IToken)Match(input,TOKEN,Follow._TOKEN_in_functioncall_or_column2518);  
				stream_TOKEN.Add(TOKEN303);

				DebugLocation(405, 10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:405:10: ( WS )?
				int alt105=2;
				try { DebugEnterSubRule(105);
				try { DebugEnterDecision(105, decisionCanBacktrack[105]);
				int LA105_0 = input.LA(1);

				if ((LA105_0==WS))
				{
					alt105 = 1;
				}
				} finally { DebugExitDecision(105); }
				switch (alt105)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:405:10: WS
					{
					DebugLocation(405, 10);
					WS304=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2520);  
					stream_WS.Add(WS304);


					}
					break;

				}
				} finally { DebugExitSubRule(105); }

				DebugLocation(405, 14);
				char_literal305=(IToken)Match(input,155,Follow._155_in_functioncall_or_column2523);  
				stream_155.Add(char_literal305);

				DebugLocation(405, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:405:18: ( WS )?
				int alt106=2;
				try { DebugEnterSubRule(106);
				try { DebugEnterDecision(106, decisionCanBacktrack[106]);
				int LA106_0 = input.LA(1);

				if ((LA106_0==WS))
				{
					alt106 = 1;
				}
				} finally { DebugExitDecision(106); }
				switch (alt106)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:405:18: WS
					{
					DebugLocation(405, 18);
					WS306=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2525);  
					stream_WS.Add(WS306);


					}
					break;

				}
				} finally { DebugExitSubRule(106); }

				DebugLocation(405, 22);
				PushFollow(Follow._all_columns_in_functioncall_or_column2528);
				all_columns307=all_columns();
				PopFollow();

				stream_all_columns.Add(all_columns307.Tree);
				DebugLocation(405, 34);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:405:34: ( WS )?
				int alt107=2;
				try { DebugEnterSubRule(107);
				try { DebugEnterDecision(107, decisionCanBacktrack[107]);
				int LA107_0 = input.LA(1);

				if ((LA107_0==WS))
				{
					alt107 = 1;
				}
				} finally { DebugExitDecision(107); }
				switch (alt107)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:405:34: WS
					{
					DebugLocation(405, 34);
					WS308=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2530);  
					stream_WS.Add(WS308);


					}
					break;

				}
				} finally { DebugExitSubRule(107); }

				DebugLocation(405, 38);
				char_literal309=(IToken)Match(input,156,Follow._156_in_functioncall_or_column2533);  
				stream_156.Add(char_literal309);



				{
				// AST REWRITE
				// elements: all_columns, TOKEN
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 405:42: -> ^( T_FUNCTIONCALL TOKEN all_columns )
				{
					DebugLocation(405, 45);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:405:45: ^( T_FUNCTIONCALL TOKEN all_columns )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(405, 47);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(405, 62);
					adaptor.AddChild(root_1, stream_TOKEN.NextNode());
					DebugLocation(405, 68);
					adaptor.AddChild(root_1, stream_all_columns.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:407:4: ( table_alias ( WS )? '.' ( WS )? )? column_name
				{
				DebugLocation(407, 4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:407:4: ( table_alias ( WS )? '.' ( WS )? )?
				int alt110=2;
				try { DebugEnterSubRule(110);
				try { DebugEnterDecision(110, decisionCanBacktrack[110]);
				int LA110_0 = input.LA(1);

				if ((LA110_0==SIMPLE_FILE))
				{
					int LA110_1 = input.LA(2);

					if ((LA110_1==WS))
					{
						int LA110_2 = input.LA(3);

						if ((LA110_2==161))
						{
							alt110 = 1;
						}
					}
					else if ((LA110_1==161))
					{
						alt110 = 1;
					}
				}
				} finally { DebugExitDecision(110); }
				switch (alt110)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:407:5: table_alias ( WS )? '.' ( WS )?
					{
					DebugLocation(407, 5);
					PushFollow(Follow._table_alias_in_functioncall_or_column2551);
					table_alias310=table_alias();
					PopFollow();

					stream_table_alias.Add(table_alias310.Tree);
					DebugLocation(407, 17);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:407:17: ( WS )?
					int alt108=2;
					try { DebugEnterSubRule(108);
					try { DebugEnterDecision(108, decisionCanBacktrack[108]);
					int LA108_0 = input.LA(1);

					if ((LA108_0==WS))
					{
						alt108 = 1;
					}
					} finally { DebugExitDecision(108); }
					switch (alt108)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:407:17: WS
						{
						DebugLocation(407, 17);
						WS311=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2553);  
						stream_WS.Add(WS311);


						}
						break;

					}
					} finally { DebugExitSubRule(108); }

					DebugLocation(407, 21);
					char_literal312=(IToken)Match(input,161,Follow._161_in_functioncall_or_column2556);  
					stream_161.Add(char_literal312);

					DebugLocation(407, 25);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:407:25: ( WS )?
					int alt109=2;
					try { DebugEnterSubRule(109);
					try { DebugEnterDecision(109, decisionCanBacktrack[109]);
					int LA109_0 = input.LA(1);

					if ((LA109_0==WS))
					{
						alt109 = 1;
					}
					} finally { DebugExitDecision(109); }
					switch (alt109)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:407:25: WS
						{
						DebugLocation(407, 25);
						WS313=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2558);  
						stream_WS.Add(WS313);


						}
						break;

					}
					} finally { DebugExitSubRule(109); }


					}
					break;

				}
				} finally { DebugExitSubRule(110); }

				DebugLocation(407, 31);
				PushFollow(Follow._column_name_in_functioncall_or_column2563);
				column_name314=column_name();
				PopFollow();

				stream_column_name.Add(column_name314.Tree);


				{
				// AST REWRITE
				// elements: table_alias, column_name
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 407:43: -> ^( T_COLUMN column_name ( table_alias )? )
				{
					DebugLocation(407, 46);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:407:46: ^( T_COLUMN column_name ( table_alias )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(407, 48);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_COLUMN, "T_COLUMN"), root_1);

					DebugLocation(407, 57);
					adaptor.AddChild(root_1, stream_column_name.NextTree());
					DebugLocation(407, 69);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:407:69: ( table_alias )?
					if (stream_table_alias.HasNext)
					{
						DebugLocation(407, 69);
						adaptor.AddChild(root_1, stream_table_alias.NextTree());

					}
					stream_table_alias.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("functioncall_or_column", 53);
			LeaveRule("functioncall_or_column", 53);
			LeaveRule_functioncall_or_column();
	    }
	 	DebugLocation(408, 1);
		} finally { DebugExitRule(GrammarFileName, "functioncall_or_column"); }
		return retval;

	}
	// $ANTLR end "functioncall_or_column"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_column_name() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_column_name() {}

	// $ANTLR start "column_name"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:410:1: column_name : SIMPLE_FILE ;
	[GrammarRule("column_name")]
	private AstParserRuleReturnScope<object, IToken> column_name()
	{
		EnterRule_column_name();
		EnterRule("column_name", 54);
		TraceIn("column_name", 54);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken SIMPLE_FILE315 = default(IToken);

	    object SIMPLE_FILE315_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "column_name");
		DebugLocation(410, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:411:2: ( SIMPLE_FILE )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:411:4: SIMPLE_FILE
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(411, 4);
			SIMPLE_FILE315=(IToken)Match(input,SIMPLE_FILE,Follow._SIMPLE_FILE_in_column_name2586); 
			SIMPLE_FILE315_tree = (object)adaptor.Create(SIMPLE_FILE315);
			adaptor.AddChild(root_0, SIMPLE_FILE315_tree);


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("column_name", 54);
			LeaveRule("column_name", 54);
			LeaveRule_column_name();
	    }
	 	DebugLocation(412, 1);
		} finally { DebugExitRule(GrammarFileName, "column_name"); }
		return retval;

	}
	// $ANTLR end "column_name"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_table_alias() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_table_alias() {}

	// $ANTLR start "table_alias"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:414:1: table_alias : SIMPLE_FILE -> ^( T_TABLE_ALIAS SIMPLE_FILE ) ;
	[GrammarRule("table_alias")]
	private AstParserRuleReturnScope<object, IToken> table_alias()
	{
		EnterRule_table_alias();
		EnterRule("table_alias", 55);
		TraceIn("table_alias", 55);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken SIMPLE_FILE316 = default(IToken);

	    object SIMPLE_FILE316_tree = default(object);
	    RewriteRuleITokenStream stream_SIMPLE_FILE=new RewriteRuleITokenStream(adaptor,"token SIMPLE_FILE");

		try { DebugEnterRule(GrammarFileName, "table_alias");
		DebugLocation(414, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:415:2: ( SIMPLE_FILE -> ^( T_TABLE_ALIAS SIMPLE_FILE ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:415:4: SIMPLE_FILE
			{
			DebugLocation(415, 4);
			SIMPLE_FILE316=(IToken)Match(input,SIMPLE_FILE,Follow._SIMPLE_FILE_in_table_alias2597);  
			stream_SIMPLE_FILE.Add(SIMPLE_FILE316);



			{
			// AST REWRITE
			// elements: SIMPLE_FILE
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 415:16: -> ^( T_TABLE_ALIAS SIMPLE_FILE )
			{
				DebugLocation(415, 19);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:415:19: ^( T_TABLE_ALIAS SIMPLE_FILE )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(415, 21);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_TABLE_ALIAS, "T_TABLE_ALIAS"), root_1);

				DebugLocation(415, 35);
				adaptor.AddChild(root_1, stream_SIMPLE_FILE.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("table_alias", 55);
			LeaveRule("table_alias", 55);
			LeaveRule_table_alias();
	    }
	 	DebugLocation(416, 1);
		} finally { DebugExitRule(GrammarFileName, "table_alias"); }
		return retval;

	}
	// $ANTLR end "table_alias"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_conversion() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_conversion() {}

	// $ANTLR start "conversion"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:418:1: conversion : ( CONVERT ( WS )? '(' ( WS )? TOKEN ( WS )? ',' ( WS )? expression ( WS )? ')' -> ^( T_CONVERT TOKEN expression ) | CAST ( WS )? '(' ( WS )? expression WS AS WS datatype ( WS )? ')' -> ^( T_CONVERT TOKEN expression ) );
	[GrammarRule("conversion")]
	private AstParserRuleReturnScope<object, IToken> conversion()
	{
		EnterRule_conversion();
		EnterRule("conversion", 56);
		TraceIn("conversion", 56);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken CONVERT317 = default(IToken);
	    IToken WS318 = default(IToken);
	    IToken char_literal319 = default(IToken);
	    IToken WS320 = default(IToken);
	    IToken TOKEN321 = default(IToken);
	    IToken WS322 = default(IToken);
	    IToken char_literal323 = default(IToken);
	    IToken WS324 = default(IToken);
	    IToken WS326 = default(IToken);
	    IToken char_literal327 = default(IToken);
	    IToken CAST328 = default(IToken);
	    IToken WS329 = default(IToken);
	    IToken char_literal330 = default(IToken);
	    IToken WS331 = default(IToken);
	    IToken WS333 = default(IToken);
	    IToken AS334 = default(IToken);
	    IToken WS335 = default(IToken);
	    IToken WS337 = default(IToken);
	    IToken char_literal338 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression325 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression332 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> datatype336 = default(AstParserRuleReturnScope<object, IToken>);

	    object CONVERT317_tree = default(object);
	    object WS318_tree = default(object);
	    object char_literal319_tree = default(object);
	    object WS320_tree = default(object);
	    object TOKEN321_tree = default(object);
	    object WS322_tree = default(object);
	    object char_literal323_tree = default(object);
	    object WS324_tree = default(object);
	    object WS326_tree = default(object);
	    object char_literal327_tree = default(object);
	    object CAST328_tree = default(object);
	    object WS329_tree = default(object);
	    object char_literal330_tree = default(object);
	    object WS331_tree = default(object);
	    object WS333_tree = default(object);
	    object AS334_tree = default(object);
	    object WS335_tree = default(object);
	    object WS337_tree = default(object);
	    object char_literal338_tree = default(object);
	    RewriteRuleITokenStream stream_CAST=new RewriteRuleITokenStream(adaptor,"token CAST");
	    RewriteRuleITokenStream stream_AS=new RewriteRuleITokenStream(adaptor,"token AS");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_CONVERT=new RewriteRuleITokenStream(adaptor,"token CONVERT");
	    RewriteRuleITokenStream stream_159=new RewriteRuleITokenStream(adaptor,"token 159");
	    RewriteRuleITokenStream stream_156=new RewriteRuleITokenStream(adaptor,"token 156");
	    RewriteRuleITokenStream stream_155=new RewriteRuleITokenStream(adaptor,"token 155");
	    RewriteRuleITokenStream stream_TOKEN=new RewriteRuleITokenStream(adaptor,"token TOKEN");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_datatype=new RewriteRuleSubtreeStream(adaptor,"rule datatype");
		try { DebugEnterRule(GrammarFileName, "conversion");
		DebugLocation(418, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:419:2: ( CONVERT ( WS )? '(' ( WS )? TOKEN ( WS )? ',' ( WS )? expression ( WS )? ')' -> ^( T_CONVERT TOKEN expression ) | CAST ( WS )? '(' ( WS )? expression WS AS WS datatype ( WS )? ')' -> ^( T_CONVERT TOKEN expression ) )
			int alt120=2;
			try { DebugEnterDecision(120, decisionCanBacktrack[120]);
			int LA120_0 = input.LA(1);

			if ((LA120_0==CONVERT))
			{
				alt120 = 1;
			}
			else if ((LA120_0==CAST))
			{
				alt120 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 120, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(120); }
			switch (alt120)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:419:4: CONVERT ( WS )? '(' ( WS )? TOKEN ( WS )? ',' ( WS )? expression ( WS )? ')'
				{
				DebugLocation(419, 4);
				CONVERT317=(IToken)Match(input,CONVERT,Follow._CONVERT_in_conversion2617);  
				stream_CONVERT.Add(CONVERT317);

				DebugLocation(419, 12);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:419:12: ( WS )?
				int alt112=2;
				try { DebugEnterSubRule(112);
				try { DebugEnterDecision(112, decisionCanBacktrack[112]);
				int LA112_0 = input.LA(1);

				if ((LA112_0==WS))
				{
					alt112 = 1;
				}
				} finally { DebugExitDecision(112); }
				switch (alt112)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:419:12: WS
					{
					DebugLocation(419, 12);
					WS318=(IToken)Match(input,WS,Follow._WS_in_conversion2619);  
					stream_WS.Add(WS318);


					}
					break;

				}
				} finally { DebugExitSubRule(112); }

				DebugLocation(419, 16);
				char_literal319=(IToken)Match(input,155,Follow._155_in_conversion2622);  
				stream_155.Add(char_literal319);

				DebugLocation(419, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:419:20: ( WS )?
				int alt113=2;
				try { DebugEnterSubRule(113);
				try { DebugEnterDecision(113, decisionCanBacktrack[113]);
				int LA113_0 = input.LA(1);

				if ((LA113_0==WS))
				{
					alt113 = 1;
				}
				} finally { DebugExitDecision(113); }
				switch (alt113)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:419:20: WS
					{
					DebugLocation(419, 20);
					WS320=(IToken)Match(input,WS,Follow._WS_in_conversion2624);  
					stream_WS.Add(WS320);


					}
					break;

				}
				} finally { DebugExitSubRule(113); }

				DebugLocation(419, 24);
				TOKEN321=(IToken)Match(input,TOKEN,Follow._TOKEN_in_conversion2627);  
				stream_TOKEN.Add(TOKEN321);

				DebugLocation(419, 30);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:419:30: ( WS )?
				int alt114=2;
				try { DebugEnterSubRule(114);
				try { DebugEnterDecision(114, decisionCanBacktrack[114]);
				int LA114_0 = input.LA(1);

				if ((LA114_0==WS))
				{
					alt114 = 1;
				}
				} finally { DebugExitDecision(114); }
				switch (alt114)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:419:30: WS
					{
					DebugLocation(419, 30);
					WS322=(IToken)Match(input,WS,Follow._WS_in_conversion2629);  
					stream_WS.Add(WS322);


					}
					break;

				}
				} finally { DebugExitSubRule(114); }

				DebugLocation(419, 34);
				char_literal323=(IToken)Match(input,159,Follow._159_in_conversion2632);  
				stream_159.Add(char_literal323);

				DebugLocation(419, 38);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:419:38: ( WS )?
				int alt115=2;
				try { DebugEnterSubRule(115);
				try { DebugEnterDecision(115, decisionCanBacktrack[115]);
				int LA115_0 = input.LA(1);

				if ((LA115_0==WS))
				{
					alt115 = 1;
				}
				} finally { DebugExitDecision(115); }
				switch (alt115)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:419:38: WS
					{
					DebugLocation(419, 38);
					WS324=(IToken)Match(input,WS,Follow._WS_in_conversion2634);  
					stream_WS.Add(WS324);


					}
					break;

				}
				} finally { DebugExitSubRule(115); }

				DebugLocation(419, 42);
				PushFollow(Follow._expression_in_conversion2637);
				expression325=expression();
				PopFollow();

				stream_expression.Add(expression325.Tree);
				DebugLocation(419, 53);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:419:53: ( WS )?
				int alt116=2;
				try { DebugEnterSubRule(116);
				try { DebugEnterDecision(116, decisionCanBacktrack[116]);
				int LA116_0 = input.LA(1);

				if ((LA116_0==WS))
				{
					alt116 = 1;
				}
				} finally { DebugExitDecision(116); }
				switch (alt116)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:419:53: WS
					{
					DebugLocation(419, 53);
					WS326=(IToken)Match(input,WS,Follow._WS_in_conversion2639);  
					stream_WS.Add(WS326);


					}
					break;

				}
				} finally { DebugExitSubRule(116); }

				DebugLocation(419, 57);
				char_literal327=(IToken)Match(input,156,Follow._156_in_conversion2642);  
				stream_156.Add(char_literal327);



				{
				// AST REWRITE
				// elements: expression, TOKEN
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 419:61: -> ^( T_CONVERT TOKEN expression )
				{
					DebugLocation(419, 64);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:419:64: ^( T_CONVERT TOKEN expression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(419, 66);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CONVERT, "T_CONVERT"), root_1);

					DebugLocation(419, 76);
					adaptor.AddChild(root_1, stream_TOKEN.NextNode());
					DebugLocation(419, 82);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:420:4: CAST ( WS )? '(' ( WS )? expression WS AS WS datatype ( WS )? ')'
				{
				DebugLocation(420, 4);
				CAST328=(IToken)Match(input,CAST,Follow._CAST_in_conversion2657);  
				stream_CAST.Add(CAST328);

				DebugLocation(420, 9);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:420:9: ( WS )?
				int alt117=2;
				try { DebugEnterSubRule(117);
				try { DebugEnterDecision(117, decisionCanBacktrack[117]);
				int LA117_0 = input.LA(1);

				if ((LA117_0==WS))
				{
					alt117 = 1;
				}
				} finally { DebugExitDecision(117); }
				switch (alt117)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:420:9: WS
					{
					DebugLocation(420, 9);
					WS329=(IToken)Match(input,WS,Follow._WS_in_conversion2659);  
					stream_WS.Add(WS329);


					}
					break;

				}
				} finally { DebugExitSubRule(117); }

				DebugLocation(420, 13);
				char_literal330=(IToken)Match(input,155,Follow._155_in_conversion2662);  
				stream_155.Add(char_literal330);

				DebugLocation(420, 17);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:420:17: ( WS )?
				int alt118=2;
				try { DebugEnterSubRule(118);
				try { DebugEnterDecision(118, decisionCanBacktrack[118]);
				int LA118_0 = input.LA(1);

				if ((LA118_0==WS))
				{
					alt118 = 1;
				}
				} finally { DebugExitDecision(118); }
				switch (alt118)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:420:17: WS
					{
					DebugLocation(420, 17);
					WS331=(IToken)Match(input,WS,Follow._WS_in_conversion2664);  
					stream_WS.Add(WS331);


					}
					break;

				}
				} finally { DebugExitSubRule(118); }

				DebugLocation(420, 21);
				PushFollow(Follow._expression_in_conversion2667);
				expression332=expression();
				PopFollow();

				stream_expression.Add(expression332.Tree);
				DebugLocation(420, 32);
				WS333=(IToken)Match(input,WS,Follow._WS_in_conversion2669);  
				stream_WS.Add(WS333);

				DebugLocation(420, 35);
				AS334=(IToken)Match(input,AS,Follow._AS_in_conversion2671);  
				stream_AS.Add(AS334);

				DebugLocation(420, 38);
				WS335=(IToken)Match(input,WS,Follow._WS_in_conversion2673);  
				stream_WS.Add(WS335);

				DebugLocation(420, 41);
				PushFollow(Follow._datatype_in_conversion2675);
				datatype336=datatype();
				PopFollow();

				stream_datatype.Add(datatype336.Tree);
				DebugLocation(420, 50);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:420:50: ( WS )?
				int alt119=2;
				try { DebugEnterSubRule(119);
				try { DebugEnterDecision(119, decisionCanBacktrack[119]);
				int LA119_0 = input.LA(1);

				if ((LA119_0==WS))
				{
					alt119 = 1;
				}
				} finally { DebugExitDecision(119); }
				switch (alt119)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:420:50: WS
					{
					DebugLocation(420, 50);
					WS337=(IToken)Match(input,WS,Follow._WS_in_conversion2677);  
					stream_WS.Add(WS337);


					}
					break;

				}
				} finally { DebugExitSubRule(119); }

				DebugLocation(420, 54);
				char_literal338=(IToken)Match(input,156,Follow._156_in_conversion2680);  
				stream_156.Add(char_literal338);



				{
				// AST REWRITE
				// elements: expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 420:58: -> ^( T_CONVERT TOKEN expression )
				{
					DebugLocation(420, 61);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:420:61: ^( T_CONVERT TOKEN expression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(420, 63);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CONVERT, "T_CONVERT"), root_1);

					DebugLocation(420, 73);
					adaptor.AddChild(root_1, (object)adaptor.Create(TOKEN, "TOKEN"));
					DebugLocation(420, 79);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conversion", 56);
			LeaveRule("conversion", 56);
			LeaveRule_conversion();
	    }
	 	DebugLocation(421, 1);
		} finally { DebugExitRule(GrammarFileName, "conversion"); }
		return retval;

	}
	// $ANTLR end "conversion"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_string() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_string() {}

	// $ANTLR start "string"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:423:1: string : STRING -> ^( T_STRING STRING ) ;
	[GrammarRule("string")]
	private AstParserRuleReturnScope<object, IToken> @string()
	{
		EnterRule_string();
		EnterRule("string", 57);
		TraceIn("string", 57);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken STRING339 = default(IToken);

	    object STRING339_tree = default(object);
	    RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");

		try { DebugEnterRule(GrammarFileName, "string");
		DebugLocation(423, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:423:8: ( STRING -> ^( T_STRING STRING ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:423:10: STRING
			{
			DebugLocation(423, 10);
			STRING339=(IToken)Match(input,STRING,Follow._STRING_in_string2700);  
			stream_STRING.Add(STRING339);



			{
			// AST REWRITE
			// elements: STRING
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 423:17: -> ^( T_STRING STRING )
			{
				DebugLocation(423, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:423:20: ^( T_STRING STRING )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(423, 22);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_STRING, "T_STRING"), root_1);

				DebugLocation(423, 31);
				adaptor.AddChild(root_1, stream_STRING.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("string", 57);
			LeaveRule("string", 57);
			LeaveRule_string();
	    }
	 	DebugLocation(424, 1);
		} finally { DebugExitRule(GrammarFileName, "string"); }
		return retval;

	}
	// $ANTLR end "string"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_datatype() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_datatype() {}

	// $ANTLR start "datatype"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:426:1: datatype : TOKEN ;
	[GrammarRule("datatype")]
	private AstParserRuleReturnScope<object, IToken> datatype()
	{
		EnterRule_datatype();
		EnterRule("datatype", 58);
		TraceIn("datatype", 58);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN340 = default(IToken);

	    object TOKEN340_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "datatype");
		DebugLocation(426, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:427:2: ( TOKEN )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:427:4: TOKEN
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(427, 4);
			TOKEN340=(IToken)Match(input,TOKEN,Follow._TOKEN_in_datatype2720); 
			TOKEN340_tree = (object)adaptor.Create(TOKEN340);
			adaptor.AddChild(root_0, TOKEN340_tree);


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("datatype", 58);
			LeaveRule("datatype", 58);
			LeaveRule_datatype();
	    }
	 	DebugLocation(428, 1);
		} finally { DebugExitRule(GrammarFileName, "datatype"); }
		return retval;

	}
	// $ANTLR end "datatype"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_variable() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_variable() {}

	// $ANTLR start "variable"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:430:1: variable : VARIABLE -> ^( T_VARIABLE VARIABLE ) ;
	[GrammarRule("variable")]
	private AstParserRuleReturnScope<object, IToken> variable()
	{
		EnterRule_variable();
		EnterRule("variable", 59);
		TraceIn("variable", 59);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken VARIABLE341 = default(IToken);

	    object VARIABLE341_tree = default(object);
	    RewriteRuleITokenStream stream_VARIABLE=new RewriteRuleITokenStream(adaptor,"token VARIABLE");

		try { DebugEnterRule(GrammarFileName, "variable");
		DebugLocation(430, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:431:2: ( VARIABLE -> ^( T_VARIABLE VARIABLE ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:431:4: VARIABLE
			{
			DebugLocation(431, 4);
			VARIABLE341=(IToken)Match(input,VARIABLE,Follow._VARIABLE_in_variable2732);  
			stream_VARIABLE.Add(VARIABLE341);



			{
			// AST REWRITE
			// elements: VARIABLE
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 431:13: -> ^( T_VARIABLE VARIABLE )
			{
				DebugLocation(431, 16);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:431:16: ^( T_VARIABLE VARIABLE )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(431, 18);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_VARIABLE, "T_VARIABLE"), root_1);

				DebugLocation(431, 29);
				adaptor.AddChild(root_1, stream_VARIABLE.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variable", 59);
			LeaveRule("variable", 59);
			LeaveRule_variable();
	    }
	 	DebugLocation(432, 1);
		} finally { DebugExitRule(GrammarFileName, "variable"); }
		return retval;

	}
	// $ANTLR end "variable"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_case() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_case() {}

	// $ANTLR start "case"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:434:1: case : CASE WS ( expression WS )? ( case_when WS )* ( case_else WS )? END -> ^( T_CASE ( expression )? ( case_when )* ( case_else )? ) ;
	[GrammarRule("case")]
	private AstParserRuleReturnScope<object, IToken> @case()
	{
		EnterRule_case();
		EnterRule("case", 60);
		TraceIn("case", 60);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken CASE342 = default(IToken);
	    IToken WS343 = default(IToken);
	    IToken WS345 = default(IToken);
	    IToken WS347 = default(IToken);
	    IToken WS349 = default(IToken);
	    IToken END350 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression344 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> case_when346 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> case_else348 = default(AstParserRuleReturnScope<object, IToken>);

	    object CASE342_tree = default(object);
	    object WS343_tree = default(object);
	    object WS345_tree = default(object);
	    object WS347_tree = default(object);
	    object WS349_tree = default(object);
	    object END350_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_END=new RewriteRuleITokenStream(adaptor,"token END");
	    RewriteRuleITokenStream stream_CASE=new RewriteRuleITokenStream(adaptor,"token CASE");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_case_when=new RewriteRuleSubtreeStream(adaptor,"rule case_when");
	    RewriteRuleSubtreeStream stream_case_else=new RewriteRuleSubtreeStream(adaptor,"rule case_else");
		try { DebugEnterRule(GrammarFileName, "case");
		DebugLocation(434, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:435:2: ( CASE WS ( expression WS )? ( case_when WS )* ( case_else WS )? END -> ^( T_CASE ( expression )? ( case_when )* ( case_else )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:435:4: CASE WS ( expression WS )? ( case_when WS )* ( case_else WS )? END
			{
			DebugLocation(435, 4);
			CASE342=(IToken)Match(input,CASE,Follow._CASE_in_case2752);  
			stream_CASE.Add(CASE342);

			DebugLocation(435, 9);
			WS343=(IToken)Match(input,WS,Follow._WS_in_case2754);  
			stream_WS.Add(WS343);

			DebugLocation(435, 12);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:435:12: ( expression WS )?
			int alt121=2;
			try { DebugEnterSubRule(121);
			try { DebugEnterDecision(121, decisionCanBacktrack[121]);
			int LA121_0 = input.LA(1);

			if (((LA121_0>=CASE && LA121_0<=CAST)||LA121_0==CONVERT||LA121_0==EXISTS||(LA121_0>=NOT && LA121_0<=NUMBER)||LA121_0==SIMPLE_FILE||(LA121_0>=STRING && LA121_0<=SYSTEMVAR)||LA121_0==TOKEN||LA121_0==VARIABLE||LA121_0==155))
			{
				alt121 = 1;
			}
			} finally { DebugExitDecision(121); }
			switch (alt121)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:435:13: expression WS
				{
				DebugLocation(435, 13);
				PushFollow(Follow._expression_in_case2757);
				expression344=expression();
				PopFollow();

				stream_expression.Add(expression344.Tree);
				DebugLocation(435, 24);
				WS345=(IToken)Match(input,WS,Follow._WS_in_case2759);  
				stream_WS.Add(WS345);


				}
				break;

			}
			} finally { DebugExitSubRule(121); }

			DebugLocation(435, 29);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:435:29: ( case_when WS )*
			try { DebugEnterSubRule(122);
			while (true)
			{
				int alt122=2;
				try { DebugEnterDecision(122, decisionCanBacktrack[122]);
				int LA122_0 = input.LA(1);

				if ((LA122_0==WHEN))
				{
					alt122 = 1;
				}


				} finally { DebugExitDecision(122); }
				switch ( alt122 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:435:30: case_when WS
					{
					DebugLocation(435, 30);
					PushFollow(Follow._case_when_in_case2764);
					case_when346=case_when();
					PopFollow();

					stream_case_when.Add(case_when346.Tree);
					DebugLocation(435, 40);
					WS347=(IToken)Match(input,WS,Follow._WS_in_case2766);  
					stream_WS.Add(WS347);


					}
					break;

				default:
					goto loop122;
				}
			}

			loop122:
				;

			} finally { DebugExitSubRule(122); }

			DebugLocation(435, 45);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:435:45: ( case_else WS )?
			int alt123=2;
			try { DebugEnterSubRule(123);
			try { DebugEnterDecision(123, decisionCanBacktrack[123]);
			int LA123_0 = input.LA(1);

			if ((LA123_0==ELSE))
			{
				alt123 = 1;
			}
			} finally { DebugExitDecision(123); }
			switch (alt123)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:435:46: case_else WS
				{
				DebugLocation(435, 46);
				PushFollow(Follow._case_else_in_case2771);
				case_else348=case_else();
				PopFollow();

				stream_case_else.Add(case_else348.Tree);
				DebugLocation(435, 56);
				WS349=(IToken)Match(input,WS,Follow._WS_in_case2773);  
				stream_WS.Add(WS349);


				}
				break;

			}
			} finally { DebugExitSubRule(123); }

			DebugLocation(435, 61);
			END350=(IToken)Match(input,END,Follow._END_in_case2777);  
			stream_END.Add(END350);



			{
			// AST REWRITE
			// elements: expression, case_else, case_when
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 436:2: -> ^( T_CASE ( expression )? ( case_when )* ( case_else )? )
			{
				DebugLocation(436, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:436:5: ^( T_CASE ( expression )? ( case_when )* ( case_else )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(436, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CASE, "T_CASE"), root_1);

				DebugLocation(436, 14);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:436:14: ( expression )?
				if (stream_expression.HasNext)
				{
					DebugLocation(436, 14);
					adaptor.AddChild(root_1, stream_expression.NextTree());

				}
				stream_expression.Reset();
				DebugLocation(436, 26);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:436:26: ( case_when )*
				while ( stream_case_when.HasNext )
				{
					DebugLocation(436, 26);
					adaptor.AddChild(root_1, stream_case_when.NextTree());

				}
				stream_case_when.Reset();
				DebugLocation(436, 37);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:436:37: ( case_else )?
				if (stream_case_else.HasNext)
				{
					DebugLocation(436, 37);
					adaptor.AddChild(root_1, stream_case_else.NextTree());

				}
				stream_case_else.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("case", 60);
			LeaveRule("case", 60);
			LeaveRule_case();
	    }
	 	DebugLocation(437, 1);
		} finally { DebugExitRule(GrammarFileName, "case"); }
		return retval;

	}
	// $ANTLR end "case"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_case_when() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_case_when() {}

	// $ANTLR start "case_when"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:439:1: case_when : WHEN WS a= expression WS THEN WS b= expression -> ^( T_CASE_WHEN $a $b) ;
	[GrammarRule("case_when")]
	private AstParserRuleReturnScope<object, IToken> case_when()
	{
		EnterRule_case_when();
		EnterRule("case_when", 61);
		TraceIn("case_when", 61);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WHEN351 = default(IToken);
	    IToken WS352 = default(IToken);
	    IToken WS353 = default(IToken);
	    IToken THEN354 = default(IToken);
	    IToken WS355 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);

	    object WHEN351_tree = default(object);
	    object WS352_tree = default(object);
	    object WS353_tree = default(object);
	    object THEN354_tree = default(object);
	    object WS355_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_THEN=new RewriteRuleITokenStream(adaptor,"token THEN");
	    RewriteRuleITokenStream stream_WHEN=new RewriteRuleITokenStream(adaptor,"token WHEN");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "case_when");
		DebugLocation(439, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:440:2: ( WHEN WS a= expression WS THEN WS b= expression -> ^( T_CASE_WHEN $a $b) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:440:4: WHEN WS a= expression WS THEN WS b= expression
			{
			DebugLocation(440, 4);
			WHEN351=(IToken)Match(input,WHEN,Follow._WHEN_in_case_when2805);  
			stream_WHEN.Add(WHEN351);

			DebugLocation(440, 9);
			WS352=(IToken)Match(input,WS,Follow._WS_in_case_when2807);  
			stream_WS.Add(WS352);

			DebugLocation(440, 13);
			PushFollow(Follow._expression_in_case_when2811);
			a=expression();
			PopFollow();

			stream_expression.Add(a.Tree);
			DebugLocation(440, 25);
			WS353=(IToken)Match(input,WS,Follow._WS_in_case_when2813);  
			stream_WS.Add(WS353);

			DebugLocation(440, 28);
			THEN354=(IToken)Match(input,THEN,Follow._THEN_in_case_when2815);  
			stream_THEN.Add(THEN354);

			DebugLocation(440, 33);
			WS355=(IToken)Match(input,WS,Follow._WS_in_case_when2817);  
			stream_WS.Add(WS355);

			DebugLocation(440, 37);
			PushFollow(Follow._expression_in_case_when2821);
			b=expression();
			PopFollow();

			stream_expression.Add(b.Tree);


			{
			// AST REWRITE
			// elements: a, b
			// token labels: 
			// rule labels: retval, b, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 441:2: -> ^( T_CASE_WHEN $a $b)
			{
				DebugLocation(441, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:441:5: ^( T_CASE_WHEN $a $b)
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(441, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CASE_WHEN, "T_CASE_WHEN"), root_1);

				DebugLocation(441, 20);
				adaptor.AddChild(root_1, stream_a.NextTree());
				DebugLocation(441, 23);
				adaptor.AddChild(root_1, stream_b.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("case_when", 61);
			LeaveRule("case_when", 61);
			LeaveRule_case_when();
	    }
	 	DebugLocation(442, 1);
		} finally { DebugExitRule(GrammarFileName, "case_when"); }
		return retval;

	}
	// $ANTLR end "case_when"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_case_else() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_case_else() {}

	// $ANTLR start "case_else"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:444:1: case_else : ELSE WS expression -> ^( T_CASE_ELSE expression ) ;
	[GrammarRule("case_else")]
	private AstParserRuleReturnScope<object, IToken> case_else()
	{
		EnterRule_case_else();
		EnterRule("case_else", 62);
		TraceIn("case_else", 62);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken ELSE356 = default(IToken);
	    IToken WS357 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression358 = default(AstParserRuleReturnScope<object, IToken>);

	    object ELSE356_tree = default(object);
	    object WS357_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_ELSE=new RewriteRuleITokenStream(adaptor,"token ELSE");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "case_else");
		DebugLocation(444, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:445:2: ( ELSE WS expression -> ^( T_CASE_ELSE expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:445:4: ELSE WS expression
			{
			DebugLocation(445, 4);
			ELSE356=(IToken)Match(input,ELSE,Follow._ELSE_in_case_else2846);  
			stream_ELSE.Add(ELSE356);

			DebugLocation(445, 9);
			WS357=(IToken)Match(input,WS,Follow._WS_in_case_else2848);  
			stream_WS.Add(WS357);

			DebugLocation(445, 12);
			PushFollow(Follow._expression_in_case_else2850);
			expression358=expression();
			PopFollow();

			stream_expression.Add(expression358.Tree);


			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 446:2: -> ^( T_CASE_ELSE expression )
			{
				DebugLocation(446, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:446:5: ^( T_CASE_ELSE expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(446, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CASE_ELSE, "T_CASE_ELSE"), root_1);

				DebugLocation(446, 19);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("case_else", 62);
			LeaveRule("case_else", 62);
			LeaveRule_case_else();
	    }
	 	DebugLocation(447, 1);
		} finally { DebugExitRule(GrammarFileName, "case_else"); }
		return retval;

	}
	// $ANTLR end "case_else"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _WS_in_parse364 = new BitSet(new ulong[]{0x300000002280000UL,0x0UL,0x800UL});
		public static readonly BitSet _commands_in_parse368 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _WS_in_parse370 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_parse375 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _command_in_commands398 = new BitSet(new ulong[]{0x300000002280002UL,0x0UL,0x800040800UL});
		public static readonly BitSet _WS_in_commands401 = new BitSet(new ulong[]{0x300000002280000UL,0x0UL,0x800000800UL});
		public static readonly BitSet _163_in_commands405 = new BitSet(new ulong[]{0x300000002280000UL,0x0UL,0x40800UL});
		public static readonly BitSet _WS_in_commands407 = new BitSet(new ulong[]{0x300000002280000UL,0x0UL,0x800UL});
		public static readonly BitSet _command_in_commands412 = new BitSet(new ulong[]{0x300000002280002UL,0x0UL,0x800040800UL});
		public static readonly BitSet _WS_in_commands417 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _163_in_commands420 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _select_command_in_command440 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _use_command_in_command445 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declare_command_in_command450 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_command_in_command455 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _create_view_command_in_command460 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _drop_view_command_in_command465 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _drop_table_command_in_command470 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SELECT_in_select_command484 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _WS_in_select_command487 = new BitSet(new ulong[]{0x1000020UL});
		public static readonly BitSet _distinct_clause_in_select_command489 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _WS_in_select_command494 = new BitSet(new ulong[]{0x0UL,0x4UL});
		public static readonly BitSet _top_clause_in_select_command496 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _WS_in_select_command500 = new BitSet(new ulong[]{0x3400C0002004C000UL,0x2UL,0x28002000UL});
		public static readonly BitSet _column_list_in_select_command502 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40000UL});
		public static readonly BitSet _WS_in_select_command505 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _into_clause_in_select_command507 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40000UL});
		public static readonly BitSet _WS_in_select_command512 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _from_clause_in_select_command514 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40000UL});
		public static readonly BitSet _WS_in_select_command519 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20000UL});
		public static readonly BitSet _where_clause_in_select_command521 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40000UL});
		public static readonly BitSet _WS_in_select_command526 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _groupby_clause_in_select_command528 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40000UL});
		public static readonly BitSet _WS_in_select_command533 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _having_clause_in_select_command535 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40000UL});
		public static readonly BitSet _WS_in_select_command540 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _orderby_clause_in_select_command542 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DISTINCT_in_distinct_clause590 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ALL_in_distinct_clause599 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOP_in_top_clause615 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _WS_in_top_clause617 = new BitSet(new ulong[]{0x3400C0002004C000UL,0x2UL,0x8002000UL});
		public static readonly BitSet _expression_in_top_clause619 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _column_in_column_list641 = new BitSet(new ulong[]{0x2UL,0x0UL,0x80040000UL});
		public static readonly BitSet _WS_in_column_list644 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _159_in_column_list647 = new BitSet(new ulong[]{0x3400C0002004C000UL,0x2UL,0x28042000UL});
		public static readonly BitSet _WS_in_column_list649 = new BitSet(new ulong[]{0x3400C0002004C000UL,0x2UL,0x28002000UL});
		public static readonly BitSet _column_in_column_list652 = new BitSet(new ulong[]{0x2UL,0x0UL,0x80040000UL});
		public static readonly BitSet _all_columns_in_column676 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_column681 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40000UL});
		public static readonly BitSet _WS_in_column684 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _SIMPLE_FILE_in_column686 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _table_alias_in_all_columns711 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200040000UL});
		public static readonly BitSet _WS_in_all_columns713 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000UL});
		public static readonly BitSet _161_in_all_columns716 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20040000UL});
		public static readonly BitSet _WS_in_all_columns718 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20000000UL});
		public static readonly BitSet _157_in_all_columns723 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INTO_in_into_clause743 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _WS_in_into_clause745 = new BitSet(new ulong[]{0x400000000000000UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _file_in_into_clause747 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FROM_in_from_clause767 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _WS_in_from_clause769 = new BitSet(new ulong[]{0x1400000000000000UL,0x2UL,0x40008000000UL});
		public static readonly BitSet _from_clause_item_in_from_clause771 = new BitSet(new ulong[]{0x2UL,0x0UL,0x80040000UL});
		public static readonly BitSet _WS_in_from_clause774 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _159_in_from_clause777 = new BitSet(new ulong[]{0x1400000000000000UL,0x2UL,0x40008040000UL});
		public static readonly BitSet _WS_in_from_clause779 = new BitSet(new ulong[]{0x1400000000000000UL,0x2UL,0x40008000000UL});
		public static readonly BitSet _from_clause_item_in_from_clause782 = new BitSet(new ulong[]{0x2UL,0x0UL,0x80040000UL});
		public static readonly BitSet _WS_in_from_clause787 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _table_alias_in_from_clause789 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_from_clause_item816 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _file_in_from_clause_item829 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _subquery_in_from_clause_item834 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _view_name_in_from_clause_item839 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _155_in_subquery851 = new BitSet(new ulong[]{0x100000000000000UL,0x0UL,0x40000UL});
		public static readonly BitSet _WS_in_subquery853 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _select_command_in_subquery856 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10040000UL});
		public static readonly BitSet _WS_in_subquery858 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000UL});
		public static readonly BitSet _156_in_subquery861 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _170_in_file880 = new BitSet(new ulong[]{0x1000000000000000UL,0x0UL,0x42000UL});
		public static readonly BitSet _WS_in_file882 = new BitSet(new ulong[]{0x1000000000000000UL,0x0UL,0x2000UL});
		public static readonly BitSet _file_spec_in_file885 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000040000UL});
		public static readonly BitSet _WS_in_file888 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000UL});
		public static readonly BitSet _file_option_in_file890 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000040000UL});
		public static readonly BitSet _WS_in_file894 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000000UL});
		public static readonly BitSet _171_in_file897 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SIMPLE_FILE_in_file914 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _string_in_file_spec933 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_in_file_spec938 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _160_in_file_option950 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _file_option_name_in_file_option952 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8000040000UL});
		public static readonly BitSet _WS_in_file_option956 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000000UL});
		public static readonly BitSet _167_in_file_option959 = new BitSet(new ulong[]{0x1000800000000000UL,0x2UL,0x42000UL});
		public static readonly BitSet _WS_in_file_option961 = new BitSet(new ulong[]{0x1000800000000000UL,0x2UL,0x2000UL});
		public static readonly BitSet _file_option_value_in_file_option964 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_file_option_name988 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_file_option_value1000 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_file_option_value1004 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_file_option_value1008 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_in_file_option_value1012 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHERE_in_where_clause1024 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _WS_in_where_clause1026 = new BitSet(new ulong[]{0x3400C0002004C000UL,0x2UL,0x8002000UL});
		public static readonly BitSet _expression_in_where_clause1028 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GROUP_in_groupby_clause1047 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _WS_in_groupby_clause1049 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _BY_in_groupby_clause1051 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _WS_in_groupby_clause1053 = new BitSet(new ulong[]{0x3400C0002004C000UL,0x2UL,0x8002000UL});
		public static readonly BitSet _orderby_column_list_in_groupby_clause1055 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _HAVING_in_having_clause1076 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _WS_in_having_clause1078 = new BitSet(new ulong[]{0x3400C0002004C000UL,0x2UL,0x8002000UL});
		public static readonly BitSet _expression_in_having_clause1080 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ORDER_in_orderby_clause1101 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _WS_in_orderby_clause1103 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _BY_in_orderby_clause1105 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _WS_in_orderby_clause1107 = new BitSet(new ulong[]{0x3400C0002004C000UL,0x2UL,0x8002000UL});
		public static readonly BitSet _orderby_column_list_in_orderby_clause1109 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _orderby_column_in_orderby_column_list1130 = new BitSet(new ulong[]{0x2UL,0x0UL,0x80040000UL});
		public static readonly BitSet _WS_in_orderby_column_list1133 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _159_in_orderby_column_list1136 = new BitSet(new ulong[]{0x3400C0002004C000UL,0x2UL,0x8042000UL});
		public static readonly BitSet _WS_in_orderby_column_list1138 = new BitSet(new ulong[]{0x3400C0002004C000UL,0x2UL,0x8002000UL});
		public static readonly BitSet _orderby_column_in_orderby_column_list1141 = new BitSet(new ulong[]{0x2UL,0x0UL,0x80040000UL});
		public static readonly BitSet _expression_in_orderby_column1161 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40000UL});
		public static readonly BitSet _WS_in_orderby_column1164 = new BitSet(new ulong[]{0x8000000400200UL});
		public static readonly BitSet _orderby_direction_in_orderby_column1166 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASC_in_orderby_direction1191 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DESC_in_orderby_direction1200 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ORIG_in_orderby_direction1209 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _USE_in_use_command1227 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _WS_in_use_command1229 = new BitSet(new ulong[]{0x400000000000000UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _file_in_use_command1231 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DECLARE_in_declare_command1253 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _WS_in_declare_command1255 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _declaration_list_in_declare_command1257 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_in_declaration_list1274 = new BitSet(new ulong[]{0x2UL,0x0UL,0x80040000UL});
		public static readonly BitSet _WS_in_declaration_list1277 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _159_in_declaration_list1280 = new BitSet(new ulong[]{0x0UL,0x0UL,0x42000UL});
		public static readonly BitSet _WS_in_declaration_list1282 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _declaration_in_declaration_list1285 = new BitSet(new ulong[]{0x2UL,0x0UL,0x80040000UL});
		public static readonly BitSet _variable_in_declaration1309 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _WS_in_declaration1311 = new BitSet(new ulong[]{0x100UL,0x2UL});
		public static readonly BitSet _AS_in_declaration1314 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _WS_in_declaration1316 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _datatype_in_declaration1320 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CREATE_in_create_view_command1345 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _WS_in_create_view_command1347 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000UL});
		public static readonly BitSet _VIEW_in_create_view_command1349 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _WS_in_create_view_command1351 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _view_name_in_create_view_command1353 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8040000UL});
		public static readonly BitSet _WS_in_create_view_command1356 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _155_in_create_view_command1359 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _declaration_list_in_create_view_command1361 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000UL});
		public static readonly BitSet _156_in_create_view_command1363 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _WS_in_create_view_command1367 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _AS_in_create_view_command1369 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _WS_in_create_view_command1371 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _select_command_in_create_view_command1373 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DROP_in_drop_view_command1399 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _WS_in_drop_view_command1401 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000UL});
		public static readonly BitSet _VIEW_in_drop_view_command1403 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _WS_in_drop_view_command1405 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _view_name_in_drop_view_command1407 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_view_name1427 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DROP_in_drop_table_command1449 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _WS_in_drop_table_command1451 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _TABLE_in_drop_table_command1453 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _WS_in_drop_table_command1455 = new BitSet(new ulong[]{0x400000000000000UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _file_in_drop_table_command1457 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SET_in_set_command1481 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _WS_in_set_command1483 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _variable_in_set_command1485 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000040000UL});
		public static readonly BitSet _WS_in_set_command1487 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000000UL});
		public static readonly BitSet _167_in_set_command1490 = new BitSet(new ulong[]{0x3400C0002004C000UL,0x2UL,0x8042000UL});
		public static readonly BitSet _WS_in_set_command1492 = new BitSet(new ulong[]{0x3400C0002004C000UL,0x2UL,0x8002000UL});
		public static readonly BitSet _expression_in_set_command1495 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_expression_list1520 = new BitSet(new ulong[]{0x2UL,0x0UL,0x80040000UL});
		public static readonly BitSet _WS_in_expression_list1523 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _159_in_expression_list1526 = new BitSet(new ulong[]{0x3400C0002004C000UL,0x2UL,0x8042000UL});
		public static readonly BitSet _WS_in_expression_list1528 = new BitSet(new ulong[]{0x3400C0002004C000UL,0x2UL,0x8002000UL});
		public static readonly BitSet _expression_in_expression_list1531 = new BitSet(new ulong[]{0x2UL,0x0UL,0x80040000UL});
		public static readonly BitSet _expression_list_in_expression_list_or_select_command1554 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _select_command_in_expression_list_or_select_command1558 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_7_in_expression1570 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_6_in_expression_71586 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40000UL});
		public static readonly BitSet _WS_in_expression_71593 = new BitSet(new ulong[]{0x2542000000800UL,0x0UL,0x3F001C00000UL});
		public static readonly BitSet _op_7_in_expression_71598 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _WS_in_expression_71600 = new BitSet(new ulong[]{0x3400C0002004C000UL,0x2UL,0x8002000UL});
		public static readonly BitSet _expression_6_in_expression_71604 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40000UL});
		public static readonly BitSet _IN_in_expression_71623 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8040000UL});
		public static readonly BitSet _WS_in_expression_71625 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _155_in_expression_71628 = new BitSet(new ulong[]{0x3500C0002004C000UL,0x2UL,0x8042000UL});
		public static readonly BitSet _WS_in_expression_71630 = new BitSet(new ulong[]{0x3500C0002004C000UL,0x2UL,0x8002000UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_71633 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10040000UL});
		public static readonly BitSet _WS_in_expression_71635 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000UL});
		public static readonly BitSet _156_in_expression_71638 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40000UL});
		public static readonly BitSet _NOT_in_expression_71656 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _WS_in_expression_71658 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _IN_in_expression_71660 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8040000UL});
		public static readonly BitSet _WS_in_expression_71662 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _155_in_expression_71665 = new BitSet(new ulong[]{0x3500C0002004C000UL,0x2UL,0x8042000UL});
		public static readonly BitSet _WS_in_expression_71667 = new BitSet(new ulong[]{0x3500C0002004C000UL,0x2UL,0x8002000UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_71671 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10040000UL});
		public static readonly BitSet _WS_in_expression_71674 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000UL});
		public static readonly BitSet _156_in_expression_71677 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40000UL});
		public static readonly BitSet _op_4_in_expression_71695 = new BitSet(new ulong[]{0x800000000000080UL,0x0UL,0x40000UL});
		public static readonly BitSet _WS_in_expression_71697 = new BitSet(new ulong[]{0x800000000000080UL});
		public static readonly BitSet _SOME_in_expression_71701 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8040000UL});
		public static readonly BitSet _ANY_in_expression_71705 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8040000UL});
		public static readonly BitSet _WS_in_expression_71708 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _155_in_expression_71711 = new BitSet(new ulong[]{0x3500C0002004C000UL,0x2UL,0x8002000UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_71713 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000UL});
		public static readonly BitSet _156_in_expression_71715 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40000UL});
		public static readonly BitSet _op_4_in_expression_71735 = new BitSet(new ulong[]{0x20UL,0x0UL,0x40000UL});
		public static readonly BitSet _WS_in_expression_71737 = new BitSet(new ulong[]{0x20UL});
		public static readonly BitSet _ALL_in_expression_71740 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8040000UL});
		public static readonly BitSet _WS_in_expression_71742 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _155_in_expression_71745 = new BitSet(new ulong[]{0x3500C0002004C000UL,0x2UL,0x8002000UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_71747 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000UL});
		public static readonly BitSet _156_in_expression_71749 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40000UL});
		public static readonly BitSet _OR_in_op_71779 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LIKE_in_op_71788 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_71797 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _WS_in_op_71799 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _LIKE_in_op_71801 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MATCH_in_op_71810 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_71819 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _WS_in_op_71821 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _MATCH_in_op_71823 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BETWEEN_in_op_71832 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_71841 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _WS_in_op_71843 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _BETWEEN_in_op_71845 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_5_in_expression_61864 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40000UL});
		public static readonly BitSet _WS_in_expression_61871 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _op_6_in_expression_61873 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _WS_in_expression_61875 = new BitSet(new ulong[]{0x3400C0002004C000UL,0x2UL,0x8002000UL});
		public static readonly BitSet _expression_5_in_expression_61879 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40000UL});
		public static readonly BitSet _AND_in_op_61907 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _op_5_in_expression_51925 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _WS_in_expression_51927 = new BitSet(new ulong[]{0x3400C0002004C000UL,0x2UL,0x8002000UL});
		public static readonly BitSet _expression_5_in_expression_51929 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_4_in_expression_51944 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_51955 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_3_in_expression_41974 = new BitSet(new ulong[]{0x2UL,0x0UL,0x3F001C40000UL});
		public static readonly BitSet _WS_in_expression_41981 = new BitSet(new ulong[]{0x0UL,0x0UL,0x3F001C00000UL});
		public static readonly BitSet _op_4_in_expression_41984 = new BitSet(new ulong[]{0x340080002004C000UL,0x2UL,0x8042000UL});
		public static readonly BitSet _WS_in_expression_41986 = new BitSet(new ulong[]{0x340080002004C000UL,0x2UL,0x8002000UL});
		public static readonly BitSet _expression_3_in_expression_41991 = new BitSet(new ulong[]{0x2UL,0x0UL,0x3F001C40000UL});
		public static readonly BitSet _167_in_op_42017 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _169_in_op_42026 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _165_in_op_42036 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _166_in_op_42046 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _151_in_op_42055 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _152_in_op_42064 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _150_in_op_42073 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _168_in_op_42082 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _164_in_op_42092 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_2_in_expression_32111 = new BitSet(new ulong[]{0x2UL,0x0UL,0x300144040000UL});
		public static readonly BitSet _WS_in_expression_32118 = new BitSet(new ulong[]{0x0UL,0x0UL,0x300144000000UL});
		public static readonly BitSet _op_3_in_expression_32121 = new BitSet(new ulong[]{0x340080002004C000UL,0x2UL,0x8042000UL});
		public static readonly BitSet _WS_in_expression_32123 = new BitSet(new ulong[]{0x340080002004C000UL,0x2UL,0x8002000UL});
		public static readonly BitSet _expression_2_in_expression_32128 = new BitSet(new ulong[]{0x2UL,0x0UL,0x300144040000UL});
		public static readonly BitSet _158_in_op_32154 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _160_in_op_32163 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _154_in_op_32172 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _173_in_op_32181 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _172_in_op_32190 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_1_in_expression_22212 = new BitSet(new ulong[]{0x2UL,0x0UL,0x422040000UL});
		public static readonly BitSet _WS_in_expression_22219 = new BitSet(new ulong[]{0x0UL,0x0UL,0x422000000UL});
		public static readonly BitSet _op_2_in_expression_22222 = new BitSet(new ulong[]{0x340080002004C000UL,0x2UL,0x8042000UL});
		public static readonly BitSet _WS_in_expression_22224 = new BitSet(new ulong[]{0x340080002004C000UL,0x2UL,0x8002000UL});
		public static readonly BitSet _expression_1_in_expression_22229 = new BitSet(new ulong[]{0x2UL,0x0UL,0x422040000UL});
		public static readonly BitSet _157_in_op_22255 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _162_in_op_22264 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _153_in_op_22273 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _155_in_expression_12291 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400140040000UL});
		public static readonly BitSet _WS_in_expression_12293 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400140000000UL});
		public static readonly BitSet _op_1_in_expression_12296 = new BitSet(new ulong[]{0x340080002004C000UL,0x2UL,0x8042000UL});
		public static readonly BitSet _WS_in_expression_12298 = new BitSet(new ulong[]{0x340080002004C000UL,0x2UL,0x8002000UL});
		public static readonly BitSet _expression_1_in_expression_12301 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10040000UL});
		public static readonly BitSet _WS_in_expression_12303 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000UL});
		public static readonly BitSet _156_in_expression_12306 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_atom_in_expression_12323 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _174_in_op_12333 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _158_in_op_12343 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _160_in_op_12352 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_expression_atom2367 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _string_in_expression_atom2380 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SYSTEMVAR_in_expression_atom2385 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_in_expression_atom2398 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _subquery_in_expression_atom2403 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _155_in_expression_atom2408 = new BitSet(new ulong[]{0x3400C0002004C000UL,0x2UL,0x8002000UL});
		public static readonly BitSet _expression_in_expression_atom2410 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000UL});
		public static readonly BitSet _156_in_expression_atom2412 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functioncall_or_column_in_expression_atom2421 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conversion_in_expression_atom2426 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _case_in_expression_atom2431 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXISTS_in_expression_atom2436 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8040000UL});
		public static readonly BitSet _WS_in_expression_atom2438 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _155_in_expression_atom2441 = new BitSet(new ulong[]{0x100000000000000UL,0x0UL,0x40000UL});
		public static readonly BitSet _WS_in_expression_atom2443 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _select_command_in_expression_atom2446 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10040000UL});
		public static readonly BitSet _WS_in_expression_atom2448 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000UL});
		public static readonly BitSet _156_in_expression_atom2451 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_functioncall_or_column2471 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8040000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2473 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _155_in_functioncall_or_column2476 = new BitSet(new ulong[]{0x3400C0002004C000UL,0x2UL,0x18042000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2478 = new BitSet(new ulong[]{0x3400C0002004C000UL,0x2UL,0x18002000UL});
		public static readonly BitSet _expression_in_functioncall_or_column2482 = new BitSet(new ulong[]{0x0UL,0x0UL,0x90040000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2484 = new BitSet(new ulong[]{0x0UL,0x0UL,0x90000000UL});
		public static readonly BitSet _159_in_functioncall_or_column2488 = new BitSet(new ulong[]{0x3400C0002004C000UL,0x2UL,0x8042000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2490 = new BitSet(new ulong[]{0x3400C0002004C000UL,0x2UL,0x8002000UL});
		public static readonly BitSet _expression_in_functioncall_or_column2493 = new BitSet(new ulong[]{0x0UL,0x0UL,0x90040000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2495 = new BitSet(new ulong[]{0x0UL,0x0UL,0x90000000UL});
		public static readonly BitSet _156_in_functioncall_or_column2502 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_functioncall_or_column2518 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8040000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2520 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _155_in_functioncall_or_column2523 = new BitSet(new ulong[]{0x400000000000000UL,0x0UL,0x20040000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2525 = new BitSet(new ulong[]{0x400000000000000UL,0x0UL,0x20000000UL});
		public static readonly BitSet _all_columns_in_functioncall_or_column2528 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10040000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2530 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000UL});
		public static readonly BitSet _156_in_functioncall_or_column2533 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _table_alias_in_functioncall_or_column2551 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200040000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2553 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000UL});
		public static readonly BitSet _161_in_functioncall_or_column2556 = new BitSet(new ulong[]{0x400000000000000UL,0x0UL,0x40000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2558 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _column_name_in_functioncall_or_column2563 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SIMPLE_FILE_in_column_name2586 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SIMPLE_FILE_in_table_alias2597 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CONVERT_in_conversion2617 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8040000UL});
		public static readonly BitSet _WS_in_conversion2619 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _155_in_conversion2622 = new BitSet(new ulong[]{0x0UL,0x2UL,0x40000UL});
		public static readonly BitSet _WS_in_conversion2624 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _TOKEN_in_conversion2627 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80040000UL});
		public static readonly BitSet _WS_in_conversion2629 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _159_in_conversion2632 = new BitSet(new ulong[]{0x3400C0002004C000UL,0x2UL,0x8042000UL});
		public static readonly BitSet _WS_in_conversion2634 = new BitSet(new ulong[]{0x3400C0002004C000UL,0x2UL,0x8002000UL});
		public static readonly BitSet _expression_in_conversion2637 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10040000UL});
		public static readonly BitSet _WS_in_conversion2639 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000UL});
		public static readonly BitSet _156_in_conversion2642 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CAST_in_conversion2657 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8040000UL});
		public static readonly BitSet _WS_in_conversion2659 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _155_in_conversion2662 = new BitSet(new ulong[]{0x3400C0002004C000UL,0x2UL,0x8042000UL});
		public static readonly BitSet _WS_in_conversion2664 = new BitSet(new ulong[]{0x3400C0002004C000UL,0x2UL,0x8002000UL});
		public static readonly BitSet _expression_in_conversion2667 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _WS_in_conversion2669 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _AS_in_conversion2671 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _WS_in_conversion2673 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _datatype_in_conversion2675 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10040000UL});
		public static readonly BitSet _WS_in_conversion2677 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000UL});
		public static readonly BitSet _156_in_conversion2680 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_string2700 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_datatype2720 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VARIABLE_in_variable2732 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CASE_in_case2752 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _WS_in_case2754 = new BitSet(new ulong[]{0x3400C0003804C000UL,0x2UL,0x8012000UL});
		public static readonly BitSet _expression_in_case2757 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _WS_in_case2759 = new BitSet(new ulong[]{0x18000000UL,0x0UL,0x10000UL});
		public static readonly BitSet _case_when_in_case2764 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _WS_in_case2766 = new BitSet(new ulong[]{0x18000000UL,0x0UL,0x10000UL});
		public static readonly BitSet _case_else_in_case2771 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _WS_in_case2773 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _END_in_case2777 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHEN_in_case_when2805 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _WS_in_case_when2807 = new BitSet(new ulong[]{0x3400C0002004C000UL,0x2UL,0x8002000UL});
		public static readonly BitSet _expression_in_case_when2811 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _WS_in_case_when2813 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _THEN_in_case_when2815 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _WS_in_case_when2817 = new BitSet(new ulong[]{0x3400C0002004C000UL,0x2UL,0x8002000UL});
		public static readonly BitSet _expression_in_case_when2821 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ELSE_in_case_else2846 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _WS_in_case_else2848 = new BitSet(new ulong[]{0x3400C0002004C000UL,0x2UL,0x8002000UL});
		public static readonly BitSet _expression_in_case_else2850 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  FxGqlLib 
