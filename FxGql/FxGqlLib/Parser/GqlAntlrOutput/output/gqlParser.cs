//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g 2012-06-19 13:18:45

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591


// `XXX' does not need a CLSCompliant attribute because the assembly is not marked as CLS-compliant (CS3021)
#pragma warning disable 3021
// The private field `XXX' is assigned but its value is never used (CS0414)
#pragma warning disable 414


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  FxGqlLib 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class gqlParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "A", "ALL", "AND", "ANY", "AS", "ASC", "B", "BETWEEN", "BY", "C", "CASE", "CAST", "COMMENT_LINE", "CONVERT", "D", "DECLARE", "DESC", "DIGIT", "DISTINCT", "E", "ELSE", "END", "EXISTS", "F", "FROM", "G", "GROUP", "H", "I", "IN", "INTO", "J", "K", "L", "LIKE", "M", "MATCH", "N", "NOT", "NUMBER", "O", "OR", "ORDER", "P", "Q", "R", "S", "SELECT", "SET", "SIMPLE_FILE", "SOME", "STRING", "SYSTEMVAR", "T", "THEN", "TOKEN", "TOP", "T_ALL", "T_AND", "T_ANY", "T_BETWEEN", "T_BITWISE_AND", "T_BITWISE_NOT", "T_BITWISE_OR", "T_BITWISE_XOR", "T_CASE", "T_CASE_ELSE", "T_CASE_WHEN", "T_COLUMN", "T_COLUMNLIST", "T_CONVERT", "T_DECLARATION", "T_DECLARE", "T_DISTINCT", "T_DIVIDE", "T_EQUAL", "T_EXISTS", "T_EXPRESSIONLIST", "T_FILE", "T_FILEOPTION", "T_FROM", "T_FUNCTIONCALL", "T_GREATER", "T_GROUPBY", "T_IN", "T_INTEGER", "T_INTO", "T_LESS", "T_LIKE", "T_MATCH", "T_MINUS", "T_MODULO", "T_NOT", "T_NOTBETWEEN", "T_NOTEQUAL", "T_NOTGREATER", "T_NOTIN", "T_NOTLESS", "T_NOTLIKE", "T_NOTMATCH", "T_OP_BINARY", "T_OP_UNARY", "T_OR", "T_ORDERBY", "T_ORDERBY_ASC", "T_ORDERBY_COLUMN", "T_ORDERBY_DESC", "T_PLUS", "T_PRODUCT", "T_ROOT", "T_SELECT", "T_SET_VARIABLE", "T_STRING", "T_SUBQUERY", "T_SYSTEMVAR", "T_TOP", "T_USE", "T_VARIABLE", "T_WHERE", "U", "USE", "V", "VARIABLE", "W", "WHEN", "WHERE", "WS", "X", "Y", "Z", "'!<'", "'!='", "'!>'", "'%'", "'&'", "'('", "')'", "'*'", "'+'", "','", "'-'", "'/'", "';'", "'<'", "'<='", "'<>'", "'='", "'>'", "'>='", "'['", "']'", "'^'", "'|'", "'~'"
	};
	public const int EOF=-1;
	public const int T__134=134;
	public const int T__135=135;
	public const int T__136=136;
	public const int T__137=137;
	public const int T__138=138;
	public const int T__139=139;
	public const int T__140=140;
	public const int T__141=141;
	public const int T__142=142;
	public const int T__143=143;
	public const int T__144=144;
	public const int T__145=145;
	public const int T__146=146;
	public const int T__147=147;
	public const int T__148=148;
	public const int T__149=149;
	public const int T__150=150;
	public const int T__151=151;
	public const int T__152=152;
	public const int T__153=153;
	public const int T__154=154;
	public const int T__155=155;
	public const int T__156=156;
	public const int T__157=157;
	public const int A=4;
	public const int ALL=5;
	public const int AND=6;
	public const int ANY=7;
	public const int AS=8;
	public const int ASC=9;
	public const int B=10;
	public const int BETWEEN=11;
	public const int BY=12;
	public const int C=13;
	public const int CASE=14;
	public const int CAST=15;
	public const int COMMENT_LINE=16;
	public const int CONVERT=17;
	public const int D=18;
	public const int DECLARE=19;
	public const int DESC=20;
	public const int DIGIT=21;
	public const int DISTINCT=22;
	public const int E=23;
	public const int ELSE=24;
	public const int END=25;
	public const int EXISTS=26;
	public const int F=27;
	public const int FROM=28;
	public const int G=29;
	public const int GROUP=30;
	public const int H=31;
	public const int I=32;
	public const int IN=33;
	public const int INTO=34;
	public const int J=35;
	public const int K=36;
	public const int L=37;
	public const int LIKE=38;
	public const int M=39;
	public const int MATCH=40;
	public const int N=41;
	public const int NOT=42;
	public const int NUMBER=43;
	public const int O=44;
	public const int OR=45;
	public const int ORDER=46;
	public const int P=47;
	public const int Q=48;
	public const int R=49;
	public const int S=50;
	public const int SELECT=51;
	public const int SET=52;
	public const int SIMPLE_FILE=53;
	public const int SOME=54;
	public const int STRING=55;
	public const int SYSTEMVAR=56;
	public const int T=57;
	public const int THEN=58;
	public const int TOKEN=59;
	public const int TOP=60;
	public const int T_ALL=61;
	public const int T_AND=62;
	public const int T_ANY=63;
	public const int T_BETWEEN=64;
	public const int T_BITWISE_AND=65;
	public const int T_BITWISE_NOT=66;
	public const int T_BITWISE_OR=67;
	public const int T_BITWISE_XOR=68;
	public const int T_CASE=69;
	public const int T_CASE_ELSE=70;
	public const int T_CASE_WHEN=71;
	public const int T_COLUMN=72;
	public const int T_COLUMNLIST=73;
	public const int T_CONVERT=74;
	public const int T_DECLARATION=75;
	public const int T_DECLARE=76;
	public const int T_DISTINCT=77;
	public const int T_DIVIDE=78;
	public const int T_EQUAL=79;
	public const int T_EXISTS=80;
	public const int T_EXPRESSIONLIST=81;
	public const int T_FILE=82;
	public const int T_FILEOPTION=83;
	public const int T_FROM=84;
	public const int T_FUNCTIONCALL=85;
	public const int T_GREATER=86;
	public const int T_GROUPBY=87;
	public const int T_IN=88;
	public const int T_INTEGER=89;
	public const int T_INTO=90;
	public const int T_LESS=91;
	public const int T_LIKE=92;
	public const int T_MATCH=93;
	public const int T_MINUS=94;
	public const int T_MODULO=95;
	public const int T_NOT=96;
	public const int T_NOTBETWEEN=97;
	public const int T_NOTEQUAL=98;
	public const int T_NOTGREATER=99;
	public const int T_NOTIN=100;
	public const int T_NOTLESS=101;
	public const int T_NOTLIKE=102;
	public const int T_NOTMATCH=103;
	public const int T_OP_BINARY=104;
	public const int T_OP_UNARY=105;
	public const int T_OR=106;
	public const int T_ORDERBY=107;
	public const int T_ORDERBY_ASC=108;
	public const int T_ORDERBY_COLUMN=109;
	public const int T_ORDERBY_DESC=110;
	public const int T_PLUS=111;
	public const int T_PRODUCT=112;
	public const int T_ROOT=113;
	public const int T_SELECT=114;
	public const int T_SET_VARIABLE=115;
	public const int T_STRING=116;
	public const int T_SUBQUERY=117;
	public const int T_SYSTEMVAR=118;
	public const int T_TOP=119;
	public const int T_USE=120;
	public const int T_VARIABLE=121;
	public const int T_WHERE=122;
	public const int U=123;
	public const int USE=124;
	public const int V=125;
	public const int VARIABLE=126;
	public const int W=127;
	public const int WHEN=128;
	public const int WHERE=129;
	public const int WS=130;
	public const int X=131;
	public const int Y=132;
	public const int Z=133;

	#if ANTLR_DEBUG
		private static readonly bool[] decisionCanBacktrack =
			new bool[]
			{
				false, // invalid decision
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false
			};
	#else
		private static readonly bool[] decisionCanBacktrack = new bool[0];
	#endif
	public gqlParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public gqlParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}
	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return gqlParser.tokenNames; } }
	public override string GrammarFileName { get { return "C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g"; } }


	[Conditional("ANTLR_TRACE")]
	protected virtual void OnCreated() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

	#region Rules

	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_parse() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_parse() {}

	// $ANTLR start "parse"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:93:1: parse : ( WS )? ( commands ( WS )? )? EOF -> ^( T_ROOT ( commands )? ) ;
	[GrammarRule("parse")]
	private AstParserRuleReturnScope<object, IToken> parse()
	{
		EnterRule_parse();
		EnterRule("parse", 1);
		TraceIn("parse", 1);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS1 = default(IToken);
	    IToken WS3 = default(IToken);
	    IToken EOF4 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> commands2 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS1_tree = default(object);
	    object WS3_tree = default(object);
	    object EOF4_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
	    RewriteRuleSubtreeStream stream_commands=new RewriteRuleSubtreeStream(adaptor,"rule commands");
		try { DebugEnterRule(GrammarFileName, "parse");
		DebugLocation(93, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:94:2: ( ( WS )? ( commands ( WS )? )? EOF -> ^( T_ROOT ( commands )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:94:4: ( WS )? ( commands ( WS )? )? EOF
			{
			DebugLocation(94, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:94:4: ( WS )?
			int alt1=2;
			try { DebugEnterSubRule(1);
			try { DebugEnterDecision(1, decisionCanBacktrack[1]);
			int LA1_0 = input.LA(1);

			if ((LA1_0==WS))
			{
				alt1 = 1;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:94:4: WS
				{
				DebugLocation(94, 4);
				WS1=(IToken)Match(input,WS,Follow._WS_in_parse328);  
				stream_WS.Add(WS1);


				}
				break;

			}
			} finally { DebugExitSubRule(1); }

			DebugLocation(94, 8);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:94:8: ( commands ( WS )? )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, decisionCanBacktrack[3]);
			int LA3_0 = input.LA(1);

			if ((LA3_0==DECLARE||(LA3_0>=SELECT && LA3_0<=SET)||LA3_0==USE))
			{
				alt3 = 1;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:94:9: commands ( WS )?
				{
				DebugLocation(94, 9);
				PushFollow(Follow._commands_in_parse332);
				commands2=commands();
				PopFollow();

				stream_commands.Add(commands2.Tree);
				DebugLocation(94, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:94:18: ( WS )?
				int alt2=2;
				try { DebugEnterSubRule(2);
				try { DebugEnterDecision(2, decisionCanBacktrack[2]);
				int LA2_0 = input.LA(1);

				if ((LA2_0==WS))
				{
					alt2 = 1;
				}
				} finally { DebugExitDecision(2); }
				switch (alt2)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:94:18: WS
					{
					DebugLocation(94, 18);
					WS3=(IToken)Match(input,WS,Follow._WS_in_parse334);  
					stream_WS.Add(WS3);


					}
					break;

				}
				} finally { DebugExitSubRule(2); }


				}
				break;

			}
			} finally { DebugExitSubRule(3); }

			DebugLocation(94, 24);
			EOF4=(IToken)Match(input,EOF,Follow._EOF_in_parse339);  
			stream_EOF.Add(EOF4);



			{
			// AST REWRITE
			// elements: commands
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 95:2: -> ^( T_ROOT ( commands )? )
			{
				DebugLocation(95, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:95:5: ^( T_ROOT ( commands )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(95, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_ROOT, "T_ROOT"), root_1);

				DebugLocation(95, 14);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:95:14: ( commands )?
				if (stream_commands.HasNext)
				{
					DebugLocation(95, 14);
					adaptor.AddChild(root_1, stream_commands.NextTree());

				}
				stream_commands.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parse", 1);
			LeaveRule("parse", 1);
			LeaveRule_parse();
	    }
	 	DebugLocation(96, 1);
		} finally { DebugExitRule(GrammarFileName, "parse"); }
		return retval;

	}
	// $ANTLR end "parse"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_commands() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_commands() {}

	// $ANTLR start "commands"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:98:1: commands : command ( ( WS )? ( ';' ( WS )? )? command )* ( ( WS )? ';' )? -> ( command )+ ;
	[GrammarRule("commands")]
	private AstParserRuleReturnScope<object, IToken> commands()
	{
		EnterRule_commands();
		EnterRule("commands", 2);
		TraceIn("commands", 2);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS6 = default(IToken);
	    IToken char_literal7 = default(IToken);
	    IToken WS8 = default(IToken);
	    IToken WS10 = default(IToken);
	    IToken char_literal11 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> command5 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> command9 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS6_tree = default(object);
	    object char_literal7_tree = default(object);
	    object WS8_tree = default(object);
	    object WS10_tree = default(object);
	    object char_literal11_tree = default(object);
	    RewriteRuleITokenStream stream_146=new RewriteRuleITokenStream(adaptor,"token 146");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_command=new RewriteRuleSubtreeStream(adaptor,"rule command");
		try { DebugEnterRule(GrammarFileName, "commands");
		DebugLocation(98, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:99:2: ( command ( ( WS )? ( ';' ( WS )? )? command )* ( ( WS )? ';' )? -> ( command )+ )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:99:4: command ( ( WS )? ( ';' ( WS )? )? command )* ( ( WS )? ';' )?
			{
			DebugLocation(99, 4);
			PushFollow(Follow._command_in_commands362);
			command5=command();
			PopFollow();

			stream_command.Add(command5.Tree);
			DebugLocation(99, 12);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:99:12: ( ( WS )? ( ';' ( WS )? )? command )*
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, decisionCanBacktrack[7]);
				switch (input.LA(1))
				{
				case WS:
					{
					int LA7_1 = input.LA(2);

					if ((LA7_1==146))
					{
						int LA7_2 = input.LA(3);

						if ((LA7_2==WS))
						{
							int LA7_5 = input.LA(4);

							if ((LA7_5==DECLARE||(LA7_5>=SELECT && LA7_5<=SET)||LA7_5==USE))
							{
								alt7 = 1;
							}


						}
						else if ((LA7_2==DECLARE||(LA7_2>=SELECT && LA7_2<=SET)||LA7_2==USE))
						{
							alt7 = 1;
						}


					}
					else if ((LA7_1==DECLARE||(LA7_1>=SELECT && LA7_1<=SET)||LA7_1==USE))
					{
						alt7 = 1;
					}


					}
					break;
				case 146:
					{
					int LA7_2 = input.LA(2);

					if ((LA7_2==WS))
					{
						int LA7_5 = input.LA(3);

						if ((LA7_5==DECLARE||(LA7_5>=SELECT && LA7_5<=SET)||LA7_5==USE))
						{
							alt7 = 1;
						}


					}
					else if ((LA7_2==DECLARE||(LA7_2>=SELECT && LA7_2<=SET)||LA7_2==USE))
					{
						alt7 = 1;
					}


					}
					break;
				case DECLARE:
				case SELECT:
				case SET:
				case USE:
					{
					alt7 = 1;
					}
					break;
				}

				} finally { DebugExitDecision(7); }
				switch ( alt7 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:99:13: ( WS )? ( ';' ( WS )? )? command
					{
					DebugLocation(99, 13);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:99:13: ( WS )?
					int alt4=2;
					try { DebugEnterSubRule(4);
					try { DebugEnterDecision(4, decisionCanBacktrack[4]);
					int LA4_0 = input.LA(1);

					if ((LA4_0==WS))
					{
						alt4 = 1;
					}
					} finally { DebugExitDecision(4); }
					switch (alt4)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:99:13: WS
						{
						DebugLocation(99, 13);
						WS6=(IToken)Match(input,WS,Follow._WS_in_commands365);  
						stream_WS.Add(WS6);


						}
						break;

					}
					} finally { DebugExitSubRule(4); }

					DebugLocation(99, 17);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:99:17: ( ';' ( WS )? )?
					int alt6=2;
					try { DebugEnterSubRule(6);
					try { DebugEnterDecision(6, decisionCanBacktrack[6]);
					int LA6_0 = input.LA(1);

					if ((LA6_0==146))
					{
						alt6 = 1;
					}
					} finally { DebugExitDecision(6); }
					switch (alt6)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:99:18: ';' ( WS )?
						{
						DebugLocation(99, 18);
						char_literal7=(IToken)Match(input,146,Follow._146_in_commands369);  
						stream_146.Add(char_literal7);

						DebugLocation(99, 22);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:99:22: ( WS )?
						int alt5=2;
						try { DebugEnterSubRule(5);
						try { DebugEnterDecision(5, decisionCanBacktrack[5]);
						int LA5_0 = input.LA(1);

						if ((LA5_0==WS))
						{
							alt5 = 1;
						}
						} finally { DebugExitDecision(5); }
						switch (alt5)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:99:22: WS
							{
							DebugLocation(99, 22);
							WS8=(IToken)Match(input,WS,Follow._WS_in_commands371);  
							stream_WS.Add(WS8);


							}
							break;

						}
						} finally { DebugExitSubRule(5); }


						}
						break;

					}
					} finally { DebugExitSubRule(6); }

					DebugLocation(99, 28);
					PushFollow(Follow._command_in_commands376);
					command9=command();
					PopFollow();

					stream_command.Add(command9.Tree);

					}
					break;

				default:
					goto loop7;
				}
			}

			loop7:
				;

			} finally { DebugExitSubRule(7); }

			DebugLocation(99, 38);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:99:38: ( ( WS )? ';' )?
			int alt9=2;
			try { DebugEnterSubRule(9);
			try { DebugEnterDecision(9, decisionCanBacktrack[9]);
			int LA9_0 = input.LA(1);

			if ((LA9_0==WS))
			{
				int LA9_1 = input.LA(2);

				if ((LA9_1==146))
				{
					alt9 = 1;
				}
			}
			else if ((LA9_0==146))
			{
				alt9 = 1;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:99:39: ( WS )? ';'
				{
				DebugLocation(99, 39);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:99:39: ( WS )?
				int alt8=2;
				try { DebugEnterSubRule(8);
				try { DebugEnterDecision(8, decisionCanBacktrack[8]);
				int LA8_0 = input.LA(1);

				if ((LA8_0==WS))
				{
					alt8 = 1;
				}
				} finally { DebugExitDecision(8); }
				switch (alt8)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:99:39: WS
					{
					DebugLocation(99, 39);
					WS10=(IToken)Match(input,WS,Follow._WS_in_commands381);  
					stream_WS.Add(WS10);


					}
					break;

				}
				} finally { DebugExitSubRule(8); }

				DebugLocation(99, 43);
				char_literal11=(IToken)Match(input,146,Follow._146_in_commands384);  
				stream_146.Add(char_literal11);


				}
				break;

			}
			} finally { DebugExitSubRule(9); }



			{
			// AST REWRITE
			// elements: command
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 100:2: -> ( command )+
			{
				DebugLocation(100, 5);
				if (!(stream_command.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_command.HasNext )
				{
					DebugLocation(100, 5);
					adaptor.AddChild(root_0, stream_command.NextTree());

				}
				stream_command.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("commands", 2);
			LeaveRule("commands", 2);
			LeaveRule_commands();
	    }
	 	DebugLocation(101, 1);
		} finally { DebugExitRule(GrammarFileName, "commands"); }
		return retval;

	}
	// $ANTLR end "commands"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_command() {}

	// $ANTLR start "command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:103:1: command : ( select_command | use_command | declare_command | set_command );
	[GrammarRule("command")]
	private AstParserRuleReturnScope<object, IToken> command()
	{
		EnterRule_command();
		EnterRule("command", 3);
		TraceIn("command", 3);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> select_command12 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> use_command13 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> declare_command14 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> set_command15 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "command");
		DebugLocation(103, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:104:2: ( select_command | use_command | declare_command | set_command )
			int alt10=4;
			try { DebugEnterDecision(10, decisionCanBacktrack[10]);
			switch (input.LA(1))
			{
			case SELECT:
				{
				alt10 = 1;
				}
				break;
			case USE:
				{
				alt10 = 2;
				}
				break;
			case DECLARE:
				{
				alt10 = 3;
				}
				break;
			case SET:
				{
				alt10 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 10, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:104:4: select_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(104, 4);
				PushFollow(Follow._select_command_in_command404);
				select_command12=select_command();
				PopFollow();

				adaptor.AddChild(root_0, select_command12.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:105:4: use_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(105, 4);
				PushFollow(Follow._use_command_in_command409);
				use_command13=use_command();
				PopFollow();

				adaptor.AddChild(root_0, use_command13.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:106:4: declare_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(106, 4);
				PushFollow(Follow._declare_command_in_command414);
				declare_command14=declare_command();
				PopFollow();

				adaptor.AddChild(root_0, declare_command14.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:107:4: set_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(107, 4);
				PushFollow(Follow._set_command_in_command419);
				set_command15=set_command();
				PopFollow();

				adaptor.AddChild(root_0, set_command15.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("command", 3);
			LeaveRule("command", 3);
			LeaveRule_command();
	    }
	 	DebugLocation(108, 1);
		} finally { DebugExitRule(GrammarFileName, "command"); }
		return retval;

	}
	// $ANTLR end "command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_select_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_select_command() {}

	// $ANTLR start "select_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:113:1: select_command : SELECT ( WS distinct_clause )? ( WS top_clause )? WS column_list ( WS into_clause )? ( WS from_clause )? ( WS where_clause )? ( WS groupby_clause )? ( WS orderby_clause )? -> ^( T_SELECT ( distinct_clause )? ( top_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( orderby_clause )? ) ;
	[GrammarRule("select_command")]
	private AstParserRuleReturnScope<object, IToken> select_command()
	{
		EnterRule_select_command();
		EnterRule("select_command", 4);
		TraceIn("select_command", 4);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken SELECT16 = default(IToken);
	    IToken WS17 = default(IToken);
	    IToken WS19 = default(IToken);
	    IToken WS21 = default(IToken);
	    IToken WS23 = default(IToken);
	    IToken WS25 = default(IToken);
	    IToken WS27 = default(IToken);
	    IToken WS29 = default(IToken);
	    IToken WS31 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> distinct_clause18 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> top_clause20 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> column_list22 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> into_clause24 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> from_clause26 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> where_clause28 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> groupby_clause30 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> orderby_clause32 = default(AstParserRuleReturnScope<object, IToken>);

	    object SELECT16_tree = default(object);
	    object WS17_tree = default(object);
	    object WS19_tree = default(object);
	    object WS21_tree = default(object);
	    object WS23_tree = default(object);
	    object WS25_tree = default(object);
	    object WS27_tree = default(object);
	    object WS29_tree = default(object);
	    object WS31_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_SELECT=new RewriteRuleITokenStream(adaptor,"token SELECT");
	    RewriteRuleSubtreeStream stream_groupby_clause=new RewriteRuleSubtreeStream(adaptor,"rule groupby_clause");
	    RewriteRuleSubtreeStream stream_distinct_clause=new RewriteRuleSubtreeStream(adaptor,"rule distinct_clause");
	    RewriteRuleSubtreeStream stream_from_clause=new RewriteRuleSubtreeStream(adaptor,"rule from_clause");
	    RewriteRuleSubtreeStream stream_column_list=new RewriteRuleSubtreeStream(adaptor,"rule column_list");
	    RewriteRuleSubtreeStream stream_where_clause=new RewriteRuleSubtreeStream(adaptor,"rule where_clause");
	    RewriteRuleSubtreeStream stream_into_clause=new RewriteRuleSubtreeStream(adaptor,"rule into_clause");
	    RewriteRuleSubtreeStream stream_top_clause=new RewriteRuleSubtreeStream(adaptor,"rule top_clause");
	    RewriteRuleSubtreeStream stream_orderby_clause=new RewriteRuleSubtreeStream(adaptor,"rule orderby_clause");
		try { DebugEnterRule(GrammarFileName, "select_command");
		DebugLocation(113, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:114:2: ( SELECT ( WS distinct_clause )? ( WS top_clause )? WS column_list ( WS into_clause )? ( WS from_clause )? ( WS where_clause )? ( WS groupby_clause )? ( WS orderby_clause )? -> ^( T_SELECT ( distinct_clause )? ( top_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( orderby_clause )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:114:4: SELECT ( WS distinct_clause )? ( WS top_clause )? WS column_list ( WS into_clause )? ( WS from_clause )? ( WS where_clause )? ( WS groupby_clause )? ( WS orderby_clause )?
			{
			DebugLocation(114, 4);
			SELECT16=(IToken)Match(input,SELECT,Follow._SELECT_in_select_command433);  
			stream_SELECT.Add(SELECT16);

			DebugLocation(114, 11);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:114:11: ( WS distinct_clause )?
			int alt11=2;
			try { DebugEnterSubRule(11);
			try { DebugEnterDecision(11, decisionCanBacktrack[11]);
			int LA11_0 = input.LA(1);

			if ((LA11_0==WS))
			{
				int LA11_1 = input.LA(2);

				if ((LA11_1==ALL||LA11_1==DISTINCT))
				{
					alt11 = 1;
				}
			}
			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:114:12: WS distinct_clause
				{
				DebugLocation(114, 12);
				WS17=(IToken)Match(input,WS,Follow._WS_in_select_command436);  
				stream_WS.Add(WS17);

				DebugLocation(114, 15);
				PushFollow(Follow._distinct_clause_in_select_command438);
				distinct_clause18=distinct_clause();
				PopFollow();

				stream_distinct_clause.Add(distinct_clause18.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(11); }

			DebugLocation(114, 33);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:114:33: ( WS top_clause )?
			int alt12=2;
			try { DebugEnterSubRule(12);
			try { DebugEnterDecision(12, decisionCanBacktrack[12]);
			int LA12_0 = input.LA(1);

			if ((LA12_0==WS))
			{
				int LA12_1 = input.LA(2);

				if ((LA12_1==TOP))
				{
					alt12 = 1;
				}
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:114:34: WS top_clause
				{
				DebugLocation(114, 34);
				WS19=(IToken)Match(input,WS,Follow._WS_in_select_command443);  
				stream_WS.Add(WS19);

				DebugLocation(114, 37);
				PushFollow(Follow._top_clause_in_select_command445);
				top_clause20=top_clause();
				PopFollow();

				stream_top_clause.Add(top_clause20.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(12); }

			DebugLocation(114, 50);
			WS21=(IToken)Match(input,WS,Follow._WS_in_select_command449);  
			stream_WS.Add(WS21);

			DebugLocation(114, 53);
			PushFollow(Follow._column_list_in_select_command451);
			column_list22=column_list();
			PopFollow();

			stream_column_list.Add(column_list22.Tree);
			DebugLocation(114, 65);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:114:65: ( WS into_clause )?
			int alt13=2;
			try { DebugEnterSubRule(13);
			try { DebugEnterDecision(13, decisionCanBacktrack[13]);
			int LA13_0 = input.LA(1);

			if ((LA13_0==WS))
			{
				int LA13_1 = input.LA(2);

				if ((LA13_1==INTO))
				{
					alt13 = 1;
				}
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:114:66: WS into_clause
				{
				DebugLocation(114, 66);
				WS23=(IToken)Match(input,WS,Follow._WS_in_select_command454);  
				stream_WS.Add(WS23);

				DebugLocation(114, 69);
				PushFollow(Follow._into_clause_in_select_command456);
				into_clause24=into_clause();
				PopFollow();

				stream_into_clause.Add(into_clause24.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(13); }

			DebugLocation(114, 83);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:114:83: ( WS from_clause )?
			int alt14=2;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, decisionCanBacktrack[14]);
			int LA14_0 = input.LA(1);

			if ((LA14_0==WS))
			{
				int LA14_1 = input.LA(2);

				if ((LA14_1==FROM))
				{
					alt14 = 1;
				}
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:114:84: WS from_clause
				{
				DebugLocation(114, 84);
				WS25=(IToken)Match(input,WS,Follow._WS_in_select_command461);  
				stream_WS.Add(WS25);

				DebugLocation(114, 87);
				PushFollow(Follow._from_clause_in_select_command463);
				from_clause26=from_clause();
				PopFollow();

				stream_from_clause.Add(from_clause26.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(14); }

			DebugLocation(114, 101);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:114:101: ( WS where_clause )?
			int alt15=2;
			try { DebugEnterSubRule(15);
			try { DebugEnterDecision(15, decisionCanBacktrack[15]);
			int LA15_0 = input.LA(1);

			if ((LA15_0==WS))
			{
				int LA15_1 = input.LA(2);

				if ((LA15_1==WHERE))
				{
					alt15 = 1;
				}
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:114:102: WS where_clause
				{
				DebugLocation(114, 102);
				WS27=(IToken)Match(input,WS,Follow._WS_in_select_command468);  
				stream_WS.Add(WS27);

				DebugLocation(114, 105);
				PushFollow(Follow._where_clause_in_select_command470);
				where_clause28=where_clause();
				PopFollow();

				stream_where_clause.Add(where_clause28.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(15); }

			DebugLocation(114, 120);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:114:120: ( WS groupby_clause )?
			int alt16=2;
			try { DebugEnterSubRule(16);
			try { DebugEnterDecision(16, decisionCanBacktrack[16]);
			int LA16_0 = input.LA(1);

			if ((LA16_0==WS))
			{
				int LA16_1 = input.LA(2);

				if ((LA16_1==GROUP))
				{
					alt16 = 1;
				}
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:114:121: WS groupby_clause
				{
				DebugLocation(114, 121);
				WS29=(IToken)Match(input,WS,Follow._WS_in_select_command475);  
				stream_WS.Add(WS29);

				DebugLocation(114, 124);
				PushFollow(Follow._groupby_clause_in_select_command477);
				groupby_clause30=groupby_clause();
				PopFollow();

				stream_groupby_clause.Add(groupby_clause30.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(16); }

			DebugLocation(114, 141);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:114:141: ( WS orderby_clause )?
			int alt17=2;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, decisionCanBacktrack[17]);
			int LA17_0 = input.LA(1);

			if ((LA17_0==WS))
			{
				int LA17_1 = input.LA(2);

				if ((LA17_1==ORDER))
				{
					alt17 = 1;
				}
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:114:142: WS orderby_clause
				{
				DebugLocation(114, 142);
				WS31=(IToken)Match(input,WS,Follow._WS_in_select_command482);  
				stream_WS.Add(WS31);

				DebugLocation(114, 145);
				PushFollow(Follow._orderby_clause_in_select_command484);
				orderby_clause32=orderby_clause();
				PopFollow();

				stream_orderby_clause.Add(orderby_clause32.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(17); }



			{
			// AST REWRITE
			// elements: orderby_clause, distinct_clause, column_list, where_clause, from_clause, into_clause, top_clause, groupby_clause
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 115:3: -> ^( T_SELECT ( distinct_clause )? ( top_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( orderby_clause )? )
			{
				DebugLocation(115, 6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:115:6: ^( T_SELECT ( distinct_clause )? ( top_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( orderby_clause )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(115, 8);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SELECT, "T_SELECT"), root_1);

				DebugLocation(115, 17);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:115:17: ( distinct_clause )?
				if (stream_distinct_clause.HasNext)
				{
					DebugLocation(115, 17);
					adaptor.AddChild(root_1, stream_distinct_clause.NextTree());

				}
				stream_distinct_clause.Reset();
				DebugLocation(115, 34);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:115:34: ( top_clause )?
				if (stream_top_clause.HasNext)
				{
					DebugLocation(115, 34);
					adaptor.AddChild(root_1, stream_top_clause.NextTree());

				}
				stream_top_clause.Reset();
				DebugLocation(115, 46);
				adaptor.AddChild(root_1, stream_column_list.NextTree());
				DebugLocation(115, 58);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:115:58: ( into_clause )?
				if (stream_into_clause.HasNext)
				{
					DebugLocation(115, 58);
					adaptor.AddChild(root_1, stream_into_clause.NextTree());

				}
				stream_into_clause.Reset();
				DebugLocation(115, 71);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:115:71: ( from_clause )?
				if (stream_from_clause.HasNext)
				{
					DebugLocation(115, 71);
					adaptor.AddChild(root_1, stream_from_clause.NextTree());

				}
				stream_from_clause.Reset();
				DebugLocation(115, 84);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:115:84: ( where_clause )?
				if (stream_where_clause.HasNext)
				{
					DebugLocation(115, 84);
					adaptor.AddChild(root_1, stream_where_clause.NextTree());

				}
				stream_where_clause.Reset();
				DebugLocation(115, 98);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:115:98: ( groupby_clause )?
				if (stream_groupby_clause.HasNext)
				{
					DebugLocation(115, 98);
					adaptor.AddChild(root_1, stream_groupby_clause.NextTree());

				}
				stream_groupby_clause.Reset();
				DebugLocation(115, 114);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:115:114: ( orderby_clause )?
				if (stream_orderby_clause.HasNext)
				{
					DebugLocation(115, 114);
					adaptor.AddChild(root_1, stream_orderby_clause.NextTree());

				}
				stream_orderby_clause.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("select_command", 4);
			LeaveRule("select_command", 4);
			LeaveRule_select_command();
	    }
	 	DebugLocation(116, 1);
		} finally { DebugExitRule(GrammarFileName, "select_command"); }
		return retval;

	}
	// $ANTLR end "select_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_distinct_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_distinct_clause() {}

	// $ANTLR start "distinct_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:118:1: distinct_clause : ( DISTINCT -> T_DISTINCT | ALL -> T_ALL );
	[GrammarRule("distinct_clause")]
	private AstParserRuleReturnScope<object, IToken> distinct_clause()
	{
		EnterRule_distinct_clause();
		EnterRule("distinct_clause", 5);
		TraceIn("distinct_clause", 5);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken DISTINCT33 = default(IToken);
	    IToken ALL34 = default(IToken);

	    object DISTINCT33_tree = default(object);
	    object ALL34_tree = default(object);
	    RewriteRuleITokenStream stream_DISTINCT=new RewriteRuleITokenStream(adaptor,"token DISTINCT");
	    RewriteRuleITokenStream stream_ALL=new RewriteRuleITokenStream(adaptor,"token ALL");

		try { DebugEnterRule(GrammarFileName, "distinct_clause");
		DebugLocation(118, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:119:2: ( DISTINCT -> T_DISTINCT | ALL -> T_ALL )
			int alt18=2;
			try { DebugEnterDecision(18, decisionCanBacktrack[18]);
			int LA18_0 = input.LA(1);

			if ((LA18_0==DISTINCT))
			{
				alt18 = 1;
			}
			else if ((LA18_0==ALL))
			{
				alt18 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 18, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:119:4: DISTINCT
				{
				DebugLocation(119, 4);
				DISTINCT33=(IToken)Match(input,DISTINCT,Follow._DISTINCT_in_distinct_clause529);  
				stream_DISTINCT.Add(DISTINCT33);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 119:13: -> T_DISTINCT
				{
					DebugLocation(119, 16);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_DISTINCT, "T_DISTINCT"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:120:4: ALL
				{
				DebugLocation(120, 4);
				ALL34=(IToken)Match(input,ALL,Follow._ALL_in_distinct_clause538);  
				stream_ALL.Add(ALL34);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 120:8: -> T_ALL
				{
					DebugLocation(120, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_ALL, "T_ALL"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("distinct_clause", 5);
			LeaveRule("distinct_clause", 5);
			LeaveRule_distinct_clause();
	    }
	 	DebugLocation(121, 1);
		} finally { DebugExitRule(GrammarFileName, "distinct_clause"); }
		return retval;

	}
	// $ANTLR end "distinct_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_top_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_top_clause() {}

	// $ANTLR start "top_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:123:1: top_clause : TOP WS expression -> ^( T_TOP expression ) ;
	[GrammarRule("top_clause")]
	private AstParserRuleReturnScope<object, IToken> top_clause()
	{
		EnterRule_top_clause();
		EnterRule("top_clause", 6);
		TraceIn("top_clause", 6);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOP35 = default(IToken);
	    IToken WS36 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression37 = default(AstParserRuleReturnScope<object, IToken>);

	    object TOP35_tree = default(object);
	    object WS36_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_TOP=new RewriteRuleITokenStream(adaptor,"token TOP");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "top_clause");
		DebugLocation(123, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:124:2: ( TOP WS expression -> ^( T_TOP expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:124:4: TOP WS expression
			{
			DebugLocation(124, 4);
			TOP35=(IToken)Match(input,TOP,Follow._TOP_in_top_clause554);  
			stream_TOP.Add(TOP35);

			DebugLocation(124, 8);
			WS36=(IToken)Match(input,WS,Follow._WS_in_top_clause556);  
			stream_WS.Add(WS36);

			DebugLocation(124, 11);
			PushFollow(Follow._expression_in_top_clause558);
			expression37=expression();
			PopFollow();

			stream_expression.Add(expression37.Tree);


			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 125:2: -> ^( T_TOP expression )
			{
				DebugLocation(125, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:125:5: ^( T_TOP expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(125, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_TOP, "T_TOP"), root_1);

				DebugLocation(125, 13);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("top_clause", 6);
			LeaveRule("top_clause", 6);
			LeaveRule_top_clause();
	    }
	 	DebugLocation(126, 1);
		} finally { DebugExitRule(GrammarFileName, "top_clause"); }
		return retval;

	}
	// $ANTLR end "top_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_column_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_column_list() {}

	// $ANTLR start "column_list"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:128:1: column_list : column ( ( WS )? ',' ( WS )? column )* -> ^( T_COLUMNLIST ( column )* ) ;
	[GrammarRule("column_list")]
	private AstParserRuleReturnScope<object, IToken> column_list()
	{
		EnterRule_column_list();
		EnterRule("column_list", 7);
		TraceIn("column_list", 7);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS39 = default(IToken);
	    IToken char_literal40 = default(IToken);
	    IToken WS41 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> column38 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> column42 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS39_tree = default(object);
	    object char_literal40_tree = default(object);
	    object WS41_tree = default(object);
	    RewriteRuleITokenStream stream_143=new RewriteRuleITokenStream(adaptor,"token 143");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_column=new RewriteRuleSubtreeStream(adaptor,"rule column");
		try { DebugEnterRule(GrammarFileName, "column_list");
		DebugLocation(128, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:129:2: ( column ( ( WS )? ',' ( WS )? column )* -> ^( T_COLUMNLIST ( column )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:129:4: column ( ( WS )? ',' ( WS )? column )*
			{
			DebugLocation(129, 4);
			PushFollow(Follow._column_in_column_list580);
			column38=column();
			PopFollow();

			stream_column.Add(column38.Tree);
			DebugLocation(129, 11);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:129:11: ( ( WS )? ',' ( WS )? column )*
			try { DebugEnterSubRule(21);
			while (true)
			{
				int alt21=2;
				try { DebugEnterDecision(21, decisionCanBacktrack[21]);
				int LA21_0 = input.LA(1);

				if ((LA21_0==WS))
				{
					int LA21_1 = input.LA(2);

					if ((LA21_1==143))
					{
						alt21 = 1;
					}


				}
				else if ((LA21_0==143))
				{
					alt21 = 1;
				}


				} finally { DebugExitDecision(21); }
				switch ( alt21 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:129:12: ( WS )? ',' ( WS )? column
					{
					DebugLocation(129, 12);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:129:12: ( WS )?
					int alt19=2;
					try { DebugEnterSubRule(19);
					try { DebugEnterDecision(19, decisionCanBacktrack[19]);
					int LA19_0 = input.LA(1);

					if ((LA19_0==WS))
					{
						alt19 = 1;
					}
					} finally { DebugExitDecision(19); }
					switch (alt19)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:129:12: WS
						{
						DebugLocation(129, 12);
						WS39=(IToken)Match(input,WS,Follow._WS_in_column_list583);  
						stream_WS.Add(WS39);


						}
						break;

					}
					} finally { DebugExitSubRule(19); }

					DebugLocation(129, 16);
					char_literal40=(IToken)Match(input,143,Follow._143_in_column_list586);  
					stream_143.Add(char_literal40);

					DebugLocation(129, 20);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:129:20: ( WS )?
					int alt20=2;
					try { DebugEnterSubRule(20);
					try { DebugEnterDecision(20, decisionCanBacktrack[20]);
					int LA20_0 = input.LA(1);

					if ((LA20_0==WS))
					{
						alt20 = 1;
					}
					} finally { DebugExitDecision(20); }
					switch (alt20)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:129:20: WS
						{
						DebugLocation(129, 20);
						WS41=(IToken)Match(input,WS,Follow._WS_in_column_list588);  
						stream_WS.Add(WS41);


						}
						break;

					}
					} finally { DebugExitSubRule(20); }

					DebugLocation(129, 24);
					PushFollow(Follow._column_in_column_list591);
					column42=column();
					PopFollow();

					stream_column.Add(column42.Tree);

					}
					break;

				default:
					goto loop21;
				}
			}

			loop21:
				;

			} finally { DebugExitSubRule(21); }



			{
			// AST REWRITE
			// elements: column
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 130:2: -> ^( T_COLUMNLIST ( column )* )
			{
				DebugLocation(130, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:130:5: ^( T_COLUMNLIST ( column )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(130, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_COLUMNLIST, "T_COLUMNLIST"), root_1);

				DebugLocation(130, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:130:20: ( column )*
				while ( stream_column.HasNext )
				{
					DebugLocation(130, 20);
					adaptor.AddChild(root_1, stream_column.NextTree());

				}
				stream_column.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("column_list", 7);
			LeaveRule("column_list", 7);
			LeaveRule_column_list();
	    }
	 	DebugLocation(131, 1);
		} finally { DebugExitRule(GrammarFileName, "column_list"); }
		return retval;

	}
	// $ANTLR end "column_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_column() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_column() {}

	// $ANTLR start "column"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:133:1: column : ( '*' -> ^( T_COLUMN '*' ) | expression ( WS SIMPLE_FILE )? -> ^( T_COLUMN expression ( SIMPLE_FILE )? ) );
	[GrammarRule("column")]
	private AstParserRuleReturnScope<object, IToken> column()
	{
		EnterRule_column();
		EnterRule("column", 8);
		TraceIn("column", 8);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal43 = default(IToken);
	    IToken WS45 = default(IToken);
	    IToken SIMPLE_FILE46 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression44 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal43_tree = default(object);
	    object WS45_tree = default(object);
	    object SIMPLE_FILE46_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_SIMPLE_FILE=new RewriteRuleITokenStream(adaptor,"token SIMPLE_FILE");
	    RewriteRuleITokenStream stream_141=new RewriteRuleITokenStream(adaptor,"token 141");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "column");
		DebugLocation(133, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:134:2: ( '*' -> ^( T_COLUMN '*' ) | expression ( WS SIMPLE_FILE )? -> ^( T_COLUMN expression ( SIMPLE_FILE )? ) )
			int alt23=2;
			try { DebugEnterDecision(23, decisionCanBacktrack[23]);
			int LA23_0 = input.LA(1);

			if ((LA23_0==141))
			{
				alt23 = 1;
			}
			else if (((LA23_0>=CASE && LA23_0<=CAST)||LA23_0==CONVERT||LA23_0==EXISTS||(LA23_0>=NOT && LA23_0<=NUMBER)||LA23_0==SIMPLE_FILE||(LA23_0>=STRING && LA23_0<=SYSTEMVAR)||LA23_0==TOKEN||LA23_0==VARIABLE||LA23_0==139))
			{
				alt23 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 23, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:134:4: '*'
				{
				DebugLocation(134, 4);
				char_literal43=(IToken)Match(input,141,Follow._141_in_column615);  
				stream_141.Add(char_literal43);



				{
				// AST REWRITE
				// elements: 141
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 134:8: -> ^( T_COLUMN '*' )
				{
					DebugLocation(134, 11);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:134:11: ^( T_COLUMN '*' )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(134, 13);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_COLUMN, "T_COLUMN"), root_1);

					DebugLocation(134, 22);
					adaptor.AddChild(root_1, stream_141.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:135:4: expression ( WS SIMPLE_FILE )?
				{
				DebugLocation(135, 4);
				PushFollow(Follow._expression_in_column629);
				expression44=expression();
				PopFollow();

				stream_expression.Add(expression44.Tree);
				DebugLocation(135, 15);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:135:15: ( WS SIMPLE_FILE )?
				int alt22=2;
				try { DebugEnterSubRule(22);
				try { DebugEnterDecision(22, decisionCanBacktrack[22]);
				int LA22_0 = input.LA(1);

				if ((LA22_0==WS))
				{
					int LA22_1 = input.LA(2);

					if ((LA22_1==SIMPLE_FILE))
					{
						alt22 = 1;
					}
				}
				} finally { DebugExitDecision(22); }
				switch (alt22)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:135:16: WS SIMPLE_FILE
					{
					DebugLocation(135, 16);
					WS45=(IToken)Match(input,WS,Follow._WS_in_column632);  
					stream_WS.Add(WS45);

					DebugLocation(135, 19);
					SIMPLE_FILE46=(IToken)Match(input,SIMPLE_FILE,Follow._SIMPLE_FILE_in_column634);  
					stream_SIMPLE_FILE.Add(SIMPLE_FILE46);


					}
					break;

				}
				} finally { DebugExitSubRule(22); }



				{
				// AST REWRITE
				// elements: expression, SIMPLE_FILE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 135:33: -> ^( T_COLUMN expression ( SIMPLE_FILE )? )
				{
					DebugLocation(135, 36);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:135:36: ^( T_COLUMN expression ( SIMPLE_FILE )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(135, 38);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_COLUMN, "T_COLUMN"), root_1);

					DebugLocation(135, 47);
					adaptor.AddChild(root_1, stream_expression.NextTree());
					DebugLocation(135, 58);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:135:58: ( SIMPLE_FILE )?
					if (stream_SIMPLE_FILE.HasNext)
					{
						DebugLocation(135, 58);
						adaptor.AddChild(root_1, stream_SIMPLE_FILE.NextNode());

					}
					stream_SIMPLE_FILE.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("column", 8);
			LeaveRule("column", 8);
			LeaveRule_column();
	    }
	 	DebugLocation(136, 1);
		} finally { DebugExitRule(GrammarFileName, "column"); }
		return retval;

	}
	// $ANTLR end "column"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_into_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_into_clause() {}

	// $ANTLR start "into_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:137:1: into_clause : INTO WS file -> ^( T_INTO file ) ;
	[GrammarRule("into_clause")]
	private AstParserRuleReturnScope<object, IToken> into_clause()
	{
		EnterRule_into_clause();
		EnterRule("into_clause", 9);
		TraceIn("into_clause", 9);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken INTO47 = default(IToken);
	    IToken WS48 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file49 = default(AstParserRuleReturnScope<object, IToken>);

	    object INTO47_tree = default(object);
	    object WS48_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_INTO=new RewriteRuleITokenStream(adaptor,"token INTO");
	    RewriteRuleSubtreeStream stream_file=new RewriteRuleSubtreeStream(adaptor,"rule file");
		try { DebugEnterRule(GrammarFileName, "into_clause");
		DebugLocation(137, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:138:2: ( INTO WS file -> ^( T_INTO file ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:138:4: INTO WS file
			{
			DebugLocation(138, 4);
			INTO47=(IToken)Match(input,INTO,Follow._INTO_in_into_clause657);  
			stream_INTO.Add(INTO47);

			DebugLocation(138, 9);
			WS48=(IToken)Match(input,WS,Follow._WS_in_into_clause659);  
			stream_WS.Add(WS48);

			DebugLocation(138, 12);
			PushFollow(Follow._file_in_into_clause661);
			file49=file();
			PopFollow();

			stream_file.Add(file49.Tree);


			{
			// AST REWRITE
			// elements: file
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 138:17: -> ^( T_INTO file )
			{
				DebugLocation(138, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:138:20: ^( T_INTO file )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(138, 22);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_INTO, "T_INTO"), root_1);

				DebugLocation(138, 29);
				adaptor.AddChild(root_1, stream_file.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("into_clause", 9);
			LeaveRule("into_clause", 9);
			LeaveRule_into_clause();
	    }
	 	DebugLocation(139, 1);
		} finally { DebugExitRule(GrammarFileName, "into_clause"); }
		return retval;

	}
	// $ANTLR end "into_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_from_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_from_clause() {}

	// $ANTLR start "from_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:141:1: from_clause : FROM WS from_clause_item ( ( WS )? ',' ( WS )? from_clause_item )* -> ^( T_FROM ( from_clause_item )* ) ;
	[GrammarRule("from_clause")]
	private AstParserRuleReturnScope<object, IToken> from_clause()
	{
		EnterRule_from_clause();
		EnterRule("from_clause", 10);
		TraceIn("from_clause", 10);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken FROM50 = default(IToken);
	    IToken WS51 = default(IToken);
	    IToken WS53 = default(IToken);
	    IToken char_literal54 = default(IToken);
	    IToken WS55 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> from_clause_item52 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> from_clause_item56 = default(AstParserRuleReturnScope<object, IToken>);

	    object FROM50_tree = default(object);
	    object WS51_tree = default(object);
	    object WS53_tree = default(object);
	    object char_literal54_tree = default(object);
	    object WS55_tree = default(object);
	    RewriteRuleITokenStream stream_143=new RewriteRuleITokenStream(adaptor,"token 143");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_FROM=new RewriteRuleITokenStream(adaptor,"token FROM");
	    RewriteRuleSubtreeStream stream_from_clause_item=new RewriteRuleSubtreeStream(adaptor,"rule from_clause_item");
		try { DebugEnterRule(GrammarFileName, "from_clause");
		DebugLocation(141, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:142:2: ( FROM WS from_clause_item ( ( WS )? ',' ( WS )? from_clause_item )* -> ^( T_FROM ( from_clause_item )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:142:4: FROM WS from_clause_item ( ( WS )? ',' ( WS )? from_clause_item )*
			{
			DebugLocation(142, 4);
			FROM50=(IToken)Match(input,FROM,Follow._FROM_in_from_clause681);  
			stream_FROM.Add(FROM50);

			DebugLocation(142, 9);
			WS51=(IToken)Match(input,WS,Follow._WS_in_from_clause683);  
			stream_WS.Add(WS51);

			DebugLocation(142, 12);
			PushFollow(Follow._from_clause_item_in_from_clause685);
			from_clause_item52=from_clause_item();
			PopFollow();

			stream_from_clause_item.Add(from_clause_item52.Tree);
			DebugLocation(142, 29);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:142:29: ( ( WS )? ',' ( WS )? from_clause_item )*
			try { DebugEnterSubRule(26);
			while (true)
			{
				int alt26=2;
				try { DebugEnterDecision(26, decisionCanBacktrack[26]);
				int LA26_0 = input.LA(1);

				if ((LA26_0==WS))
				{
					int LA26_1 = input.LA(2);

					if ((LA26_1==143))
					{
						alt26 = 1;
					}


				}
				else if ((LA26_0==143))
				{
					alt26 = 1;
				}


				} finally { DebugExitDecision(26); }
				switch ( alt26 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:142:30: ( WS )? ',' ( WS )? from_clause_item
					{
					DebugLocation(142, 30);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:142:30: ( WS )?
					int alt24=2;
					try { DebugEnterSubRule(24);
					try { DebugEnterDecision(24, decisionCanBacktrack[24]);
					int LA24_0 = input.LA(1);

					if ((LA24_0==WS))
					{
						alt24 = 1;
					}
					} finally { DebugExitDecision(24); }
					switch (alt24)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:142:30: WS
						{
						DebugLocation(142, 30);
						WS53=(IToken)Match(input,WS,Follow._WS_in_from_clause688);  
						stream_WS.Add(WS53);


						}
						break;

					}
					} finally { DebugExitSubRule(24); }

					DebugLocation(142, 34);
					char_literal54=(IToken)Match(input,143,Follow._143_in_from_clause691);  
					stream_143.Add(char_literal54);

					DebugLocation(142, 38);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:142:38: ( WS )?
					int alt25=2;
					try { DebugEnterSubRule(25);
					try { DebugEnterDecision(25, decisionCanBacktrack[25]);
					int LA25_0 = input.LA(1);

					if ((LA25_0==WS))
					{
						alt25 = 1;
					}
					} finally { DebugExitDecision(25); }
					switch (alt25)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:142:38: WS
						{
						DebugLocation(142, 38);
						WS55=(IToken)Match(input,WS,Follow._WS_in_from_clause693);  
						stream_WS.Add(WS55);


						}
						break;

					}
					} finally { DebugExitSubRule(25); }

					DebugLocation(142, 42);
					PushFollow(Follow._from_clause_item_in_from_clause696);
					from_clause_item56=from_clause_item();
					PopFollow();

					stream_from_clause_item.Add(from_clause_item56.Tree);

					}
					break;

				default:
					goto loop26;
				}
			}

			loop26:
				;

			} finally { DebugExitSubRule(26); }



			{
			// AST REWRITE
			// elements: from_clause_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 142:61: -> ^( T_FROM ( from_clause_item )* )
			{
				DebugLocation(142, 64);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:142:64: ^( T_FROM ( from_clause_item )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(142, 66);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FROM, "T_FROM"), root_1);

				DebugLocation(142, 73);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:142:73: ( from_clause_item )*
				while ( stream_from_clause_item.HasNext )
				{
					DebugLocation(142, 73);
					adaptor.AddChild(root_1, stream_from_clause_item.NextTree());

				}
				stream_from_clause_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("from_clause", 10);
			LeaveRule("from_clause", 10);
			LeaveRule_from_clause();
	    }
	 	DebugLocation(143, 1);
		} finally { DebugExitRule(GrammarFileName, "from_clause"); }
		return retval;

	}
	// $ANTLR end "from_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_from_clause_item() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_from_clause_item() {}

	// $ANTLR start "from_clause_item"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:145:1: from_clause_item : ( STRING -> ^( T_FILE STRING ) | file | subquery );
	[GrammarRule("from_clause_item")]
	private AstParserRuleReturnScope<object, IToken> from_clause_item()
	{
		EnterRule_from_clause_item();
		EnterRule("from_clause_item", 11);
		TraceIn("from_clause_item", 11);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken STRING57 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file58 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> subquery59 = default(AstParserRuleReturnScope<object, IToken>);

	    object STRING57_tree = default(object);
	    RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");

		try { DebugEnterRule(GrammarFileName, "from_clause_item");
		DebugLocation(145, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:146:2: ( STRING -> ^( T_FILE STRING ) | file | subquery )
			int alt27=3;
			try { DebugEnterDecision(27, decisionCanBacktrack[27]);
			switch (input.LA(1))
			{
			case STRING:
				{
				alt27 = 1;
				}
				break;
			case SIMPLE_FILE:
			case 153:
				{
				alt27 = 2;
				}
				break;
			case 139:
				{
				alt27 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 27, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:146:4: STRING
				{
				DebugLocation(146, 4);
				STRING57=(IToken)Match(input,STRING,Follow._STRING_in_from_clause_item719);  
				stream_STRING.Add(STRING57);



				{
				// AST REWRITE
				// elements: STRING
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 146:11: -> ^( T_FILE STRING )
				{
					DebugLocation(146, 14);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:146:14: ^( T_FILE STRING )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(146, 16);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILE, "T_FILE"), root_1);

					DebugLocation(146, 23);
					adaptor.AddChild(root_1, stream_STRING.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:147:4: file
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(147, 4);
				PushFollow(Follow._file_in_from_clause_item732);
				file58=file();
				PopFollow();

				adaptor.AddChild(root_0, file58.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:148:4: subquery
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(148, 4);
				PushFollow(Follow._subquery_in_from_clause_item737);
				subquery59=subquery();
				PopFollow();

				adaptor.AddChild(root_0, subquery59.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("from_clause_item", 11);
			LeaveRule("from_clause_item", 11);
			LeaveRule_from_clause_item();
	    }
	 	DebugLocation(149, 1);
		} finally { DebugExitRule(GrammarFileName, "from_clause_item"); }
		return retval;

	}
	// $ANTLR end "from_clause_item"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_subquery() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_subquery() {}

	// $ANTLR start "subquery"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:151:1: subquery : '(' ( WS )? select_command ( WS )? ')' -> ^( T_SUBQUERY select_command ) ;
	[GrammarRule("subquery")]
	private AstParserRuleReturnScope<object, IToken> subquery()
	{
		EnterRule_subquery();
		EnterRule("subquery", 12);
		TraceIn("subquery", 12);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal60 = default(IToken);
	    IToken WS61 = default(IToken);
	    IToken WS63 = default(IToken);
	    IToken char_literal64 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> select_command62 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal60_tree = default(object);
	    object WS61_tree = default(object);
	    object WS63_tree = default(object);
	    object char_literal64_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_139=new RewriteRuleITokenStream(adaptor,"token 139");
	    RewriteRuleITokenStream stream_140=new RewriteRuleITokenStream(adaptor,"token 140");
	    RewriteRuleSubtreeStream stream_select_command=new RewriteRuleSubtreeStream(adaptor,"rule select_command");
		try { DebugEnterRule(GrammarFileName, "subquery");
		DebugLocation(151, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:152:2: ( '(' ( WS )? select_command ( WS )? ')' -> ^( T_SUBQUERY select_command ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:152:4: '(' ( WS )? select_command ( WS )? ')'
			{
			DebugLocation(152, 4);
			char_literal60=(IToken)Match(input,139,Follow._139_in_subquery749);  
			stream_139.Add(char_literal60);

			DebugLocation(152, 8);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:152:8: ( WS )?
			int alt28=2;
			try { DebugEnterSubRule(28);
			try { DebugEnterDecision(28, decisionCanBacktrack[28]);
			int LA28_0 = input.LA(1);

			if ((LA28_0==WS))
			{
				alt28 = 1;
			}
			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:152:8: WS
				{
				DebugLocation(152, 8);
				WS61=(IToken)Match(input,WS,Follow._WS_in_subquery751);  
				stream_WS.Add(WS61);


				}
				break;

			}
			} finally { DebugExitSubRule(28); }

			DebugLocation(152, 12);
			PushFollow(Follow._select_command_in_subquery754);
			select_command62=select_command();
			PopFollow();

			stream_select_command.Add(select_command62.Tree);
			DebugLocation(152, 27);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:152:27: ( WS )?
			int alt29=2;
			try { DebugEnterSubRule(29);
			try { DebugEnterDecision(29, decisionCanBacktrack[29]);
			int LA29_0 = input.LA(1);

			if ((LA29_0==WS))
			{
				alt29 = 1;
			}
			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:152:27: WS
				{
				DebugLocation(152, 27);
				WS63=(IToken)Match(input,WS,Follow._WS_in_subquery756);  
				stream_WS.Add(WS63);


				}
				break;

			}
			} finally { DebugExitSubRule(29); }

			DebugLocation(152, 31);
			char_literal64=(IToken)Match(input,140,Follow._140_in_subquery759);  
			stream_140.Add(char_literal64);



			{
			// AST REWRITE
			// elements: select_command
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 152:35: -> ^( T_SUBQUERY select_command )
			{
				DebugLocation(152, 38);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:152:38: ^( T_SUBQUERY select_command )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(152, 40);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SUBQUERY, "T_SUBQUERY"), root_1);

				DebugLocation(152, 51);
				adaptor.AddChild(root_1, stream_select_command.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("subquery", 12);
			LeaveRule("subquery", 12);
			LeaveRule_subquery();
	    }
	 	DebugLocation(153, 1);
		} finally { DebugExitRule(GrammarFileName, "subquery"); }
		return retval;

	}
	// $ANTLR end "subquery"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file() {}

	// $ANTLR start "file"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:155:1: file : ( '[' ( WS )? STRING ( WS file_option )* ( WS )? ']' -> ^( T_FILE STRING ( file_option )* ) | SIMPLE_FILE -> ^( T_FILE SIMPLE_FILE ) );
	[GrammarRule("file")]
	private AstParserRuleReturnScope<object, IToken> file()
	{
		EnterRule_file();
		EnterRule("file", 13);
		TraceIn("file", 13);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal65 = default(IToken);
	    IToken WS66 = default(IToken);
	    IToken STRING67 = default(IToken);
	    IToken WS68 = default(IToken);
	    IToken WS70 = default(IToken);
	    IToken char_literal71 = default(IToken);
	    IToken SIMPLE_FILE72 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file_option69 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal65_tree = default(object);
	    object WS66_tree = default(object);
	    object STRING67_tree = default(object);
	    object WS68_tree = default(object);
	    object WS70_tree = default(object);
	    object char_literal71_tree = default(object);
	    object SIMPLE_FILE72_tree = default(object);
	    RewriteRuleITokenStream stream_153=new RewriteRuleITokenStream(adaptor,"token 153");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_SIMPLE_FILE=new RewriteRuleITokenStream(adaptor,"token SIMPLE_FILE");
	    RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
	    RewriteRuleITokenStream stream_154=new RewriteRuleITokenStream(adaptor,"token 154");
	    RewriteRuleSubtreeStream stream_file_option=new RewriteRuleSubtreeStream(adaptor,"rule file_option");
		try { DebugEnterRule(GrammarFileName, "file");
		DebugLocation(155, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:156:2: ( '[' ( WS )? STRING ( WS file_option )* ( WS )? ']' -> ^( T_FILE STRING ( file_option )* ) | SIMPLE_FILE -> ^( T_FILE SIMPLE_FILE ) )
			int alt33=2;
			try { DebugEnterDecision(33, decisionCanBacktrack[33]);
			int LA33_0 = input.LA(1);

			if ((LA33_0==153))
			{
				alt33 = 1;
			}
			else if ((LA33_0==SIMPLE_FILE))
			{
				alt33 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 33, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:156:4: '[' ( WS )? STRING ( WS file_option )* ( WS )? ']'
				{
				DebugLocation(156, 4);
				char_literal65=(IToken)Match(input,153,Follow._153_in_file778);  
				stream_153.Add(char_literal65);

				DebugLocation(156, 8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:156:8: ( WS )?
				int alt30=2;
				try { DebugEnterSubRule(30);
				try { DebugEnterDecision(30, decisionCanBacktrack[30]);
				int LA30_0 = input.LA(1);

				if ((LA30_0==WS))
				{
					alt30 = 1;
				}
				} finally { DebugExitDecision(30); }
				switch (alt30)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:156:8: WS
					{
					DebugLocation(156, 8);
					WS66=(IToken)Match(input,WS,Follow._WS_in_file780);  
					stream_WS.Add(WS66);


					}
					break;

				}
				} finally { DebugExitSubRule(30); }

				DebugLocation(156, 12);
				STRING67=(IToken)Match(input,STRING,Follow._STRING_in_file783);  
				stream_STRING.Add(STRING67);

				DebugLocation(156, 19);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:156:19: ( WS file_option )*
				try { DebugEnterSubRule(31);
				while (true)
				{
					int alt31=2;
					try { DebugEnterDecision(31, decisionCanBacktrack[31]);
					int LA31_0 = input.LA(1);

					if ((LA31_0==WS))
					{
						int LA31_1 = input.LA(2);

						if ((LA31_1==144))
						{
							alt31 = 1;
						}


					}


					} finally { DebugExitDecision(31); }
					switch ( alt31 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:156:20: WS file_option
						{
						DebugLocation(156, 20);
						WS68=(IToken)Match(input,WS,Follow._WS_in_file786);  
						stream_WS.Add(WS68);

						DebugLocation(156, 23);
						PushFollow(Follow._file_option_in_file788);
						file_option69=file_option();
						PopFollow();

						stream_file_option.Add(file_option69.Tree);

						}
						break;

					default:
						goto loop31;
					}
				}

				loop31:
					;

				} finally { DebugExitSubRule(31); }

				DebugLocation(156, 37);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:156:37: ( WS )?
				int alt32=2;
				try { DebugEnterSubRule(32);
				try { DebugEnterDecision(32, decisionCanBacktrack[32]);
				int LA32_0 = input.LA(1);

				if ((LA32_0==WS))
				{
					alt32 = 1;
				}
				} finally { DebugExitDecision(32); }
				switch (alt32)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:156:37: WS
					{
					DebugLocation(156, 37);
					WS70=(IToken)Match(input,WS,Follow._WS_in_file792);  
					stream_WS.Add(WS70);


					}
					break;

				}
				} finally { DebugExitSubRule(32); }

				DebugLocation(156, 41);
				char_literal71=(IToken)Match(input,154,Follow._154_in_file795);  
				stream_154.Add(char_literal71);



				{
				// AST REWRITE
				// elements: STRING, file_option
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 156:45: -> ^( T_FILE STRING ( file_option )* )
				{
					DebugLocation(156, 48);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:156:48: ^( T_FILE STRING ( file_option )* )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(156, 50);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILE, "T_FILE"), root_1);

					DebugLocation(156, 57);
					adaptor.AddChild(root_1, stream_STRING.NextNode());
					DebugLocation(156, 64);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:156:64: ( file_option )*
					while ( stream_file_option.HasNext )
					{
						DebugLocation(156, 64);
						adaptor.AddChild(root_1, stream_file_option.NextTree());

					}
					stream_file_option.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:157:4: SIMPLE_FILE
				{
				DebugLocation(157, 4);
				SIMPLE_FILE72=(IToken)Match(input,SIMPLE_FILE,Follow._SIMPLE_FILE_in_file812);  
				stream_SIMPLE_FILE.Add(SIMPLE_FILE72);



				{
				// AST REWRITE
				// elements: SIMPLE_FILE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 157:16: -> ^( T_FILE SIMPLE_FILE )
				{
					DebugLocation(157, 19);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:157:19: ^( T_FILE SIMPLE_FILE )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(157, 21);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILE, "T_FILE"), root_1);

					DebugLocation(157, 28);
					adaptor.AddChild(root_1, stream_SIMPLE_FILE.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file", 13);
			LeaveRule("file", 13);
			LeaveRule_file();
	    }
	 	DebugLocation(158, 1);
		} finally { DebugExitRule(GrammarFileName, "file"); }
		return retval;

	}
	// $ANTLR end "file"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_option() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_option() {}

	// $ANTLR start "file_option"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:160:1: file_option : '-' file_option_name ( ( WS )? '=' ( WS )? file_option_value )? -> ^( T_FILEOPTION file_option_name ( file_option_value )? ) ;
	[GrammarRule("file_option")]
	private AstParserRuleReturnScope<object, IToken> file_option()
	{
		EnterRule_file_option();
		EnterRule("file_option", 14);
		TraceIn("file_option", 14);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal73 = default(IToken);
	    IToken WS75 = default(IToken);
	    IToken char_literal76 = default(IToken);
	    IToken WS77 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file_option_name74 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> file_option_value78 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal73_tree = default(object);
	    object WS75_tree = default(object);
	    object char_literal76_tree = default(object);
	    object WS77_tree = default(object);
	    RewriteRuleITokenStream stream_144=new RewriteRuleITokenStream(adaptor,"token 144");
	    RewriteRuleITokenStream stream_150=new RewriteRuleITokenStream(adaptor,"token 150");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_file_option_name=new RewriteRuleSubtreeStream(adaptor,"rule file_option_name");
	    RewriteRuleSubtreeStream stream_file_option_value=new RewriteRuleSubtreeStream(adaptor,"rule file_option_value");
		try { DebugEnterRule(GrammarFileName, "file_option");
		DebugLocation(160, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:161:2: ( '-' file_option_name ( ( WS )? '=' ( WS )? file_option_value )? -> ^( T_FILEOPTION file_option_name ( file_option_value )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:161:4: '-' file_option_name ( ( WS )? '=' ( WS )? file_option_value )?
			{
			DebugLocation(161, 4);
			char_literal73=(IToken)Match(input,144,Follow._144_in_file_option831);  
			stream_144.Add(char_literal73);

			DebugLocation(161, 8);
			PushFollow(Follow._file_option_name_in_file_option833);
			file_option_name74=file_option_name();
			PopFollow();

			stream_file_option_name.Add(file_option_name74.Tree);
			DebugLocation(161, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:161:25: ( ( WS )? '=' ( WS )? file_option_value )?
			int alt36=2;
			try { DebugEnterSubRule(36);
			try { DebugEnterDecision(36, decisionCanBacktrack[36]);
			int LA36_0 = input.LA(1);

			if ((LA36_0==WS))
			{
				int LA36_1 = input.LA(2);

				if ((LA36_1==150))
				{
					alt36 = 1;
				}
			}
			else if ((LA36_0==150))
			{
				alt36 = 1;
			}
			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:161:27: ( WS )? '=' ( WS )? file_option_value
				{
				DebugLocation(161, 27);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:161:27: ( WS )?
				int alt34=2;
				try { DebugEnterSubRule(34);
				try { DebugEnterDecision(34, decisionCanBacktrack[34]);
				int LA34_0 = input.LA(1);

				if ((LA34_0==WS))
				{
					alt34 = 1;
				}
				} finally { DebugExitDecision(34); }
				switch (alt34)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:161:27: WS
					{
					DebugLocation(161, 27);
					WS75=(IToken)Match(input,WS,Follow._WS_in_file_option837);  
					stream_WS.Add(WS75);


					}
					break;

				}
				} finally { DebugExitSubRule(34); }

				DebugLocation(161, 31);
				char_literal76=(IToken)Match(input,150,Follow._150_in_file_option840);  
				stream_150.Add(char_literal76);

				DebugLocation(161, 35);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:161:35: ( WS )?
				int alt35=2;
				try { DebugEnterSubRule(35);
				try { DebugEnterDecision(35, decisionCanBacktrack[35]);
				int LA35_0 = input.LA(1);

				if ((LA35_0==WS))
				{
					alt35 = 1;
				}
				} finally { DebugExitDecision(35); }
				switch (alt35)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:161:35: WS
					{
					DebugLocation(161, 35);
					WS77=(IToken)Match(input,WS,Follow._WS_in_file_option842);  
					stream_WS.Add(WS77);


					}
					break;

				}
				} finally { DebugExitSubRule(35); }

				DebugLocation(161, 39);
				PushFollow(Follow._file_option_value_in_file_option845);
				file_option_value78=file_option_value();
				PopFollow();

				stream_file_option_value.Add(file_option_value78.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(36); }



			{
			// AST REWRITE
			// elements: file_option_name, file_option_value
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 161:59: -> ^( T_FILEOPTION file_option_name ( file_option_value )? )
			{
				DebugLocation(161, 62);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:161:62: ^( T_FILEOPTION file_option_name ( file_option_value )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(161, 64);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILEOPTION, "T_FILEOPTION"), root_1);

				DebugLocation(161, 77);
				adaptor.AddChild(root_1, stream_file_option_name.NextTree());
				DebugLocation(161, 94);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:161:94: ( file_option_value )?
				if (stream_file_option_value.HasNext)
				{
					DebugLocation(161, 94);
					adaptor.AddChild(root_1, stream_file_option_value.NextTree());

				}
				stream_file_option_value.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_option", 14);
			LeaveRule("file_option", 14);
			LeaveRule_file_option();
	    }
	 	DebugLocation(162, 1);
		} finally { DebugExitRule(GrammarFileName, "file_option"); }
		return retval;

	}
	// $ANTLR end "file_option"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_option_name() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_option_name() {}

	// $ANTLR start "file_option_name"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:164:1: file_option_name : TOKEN ;
	[GrammarRule("file_option_name")]
	private AstParserRuleReturnScope<object, IToken> file_option_name()
	{
		EnterRule_file_option_name();
		EnterRule("file_option_name", 15);
		TraceIn("file_option_name", 15);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN79 = default(IToken);

	    object TOKEN79_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "file_option_name");
		DebugLocation(164, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:165:2: ( TOKEN )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:165:4: TOKEN
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(165, 4);
			TOKEN79=(IToken)Match(input,TOKEN,Follow._TOKEN_in_file_option_name869); 
			TOKEN79_tree = (object)adaptor.Create(TOKEN79);
			adaptor.AddChild(root_0, TOKEN79_tree);


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_option_name", 15);
			LeaveRule("file_option_name", 15);
			LeaveRule_file_option_name();
	    }
	 	DebugLocation(166, 1);
		} finally { DebugExitRule(GrammarFileName, "file_option_name"); }
		return retval;

	}
	// $ANTLR end "file_option_name"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_option_value() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_option_value() {}

	// $ANTLR start "file_option_value"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:168:1: file_option_value : ( TOKEN | STRING | NUMBER );
	[GrammarRule("file_option_value")]
	private AstParserRuleReturnScope<object, IToken> file_option_value()
	{
		EnterRule_file_option_value();
		EnterRule("file_option_value", 16);
		TraceIn("file_option_value", 16);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken set80 = default(IToken);

	    object set80_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "file_option_value");
		DebugLocation(168, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:169:2: ( TOKEN | STRING | NUMBER )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(169, 2);

			set80=(IToken)input.LT(1);
			if (input.LA(1)==NUMBER||input.LA(1)==STRING||input.LA(1)==TOKEN)
			{
				input.Consume();
				adaptor.AddChild(root_0, (object)adaptor.Create(set80));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_option_value", 16);
			LeaveRule("file_option_value", 16);
			LeaveRule_file_option_value();
	    }
	 	DebugLocation(170, 1);
		} finally { DebugExitRule(GrammarFileName, "file_option_value"); }
		return retval;

	}
	// $ANTLR end "file_option_value"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_where_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_where_clause() {}

	// $ANTLR start "where_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:172:1: where_clause : WHERE WS expression -> ^( T_WHERE expression ) ;
	[GrammarRule("where_clause")]
	private AstParserRuleReturnScope<object, IToken> where_clause()
	{
		EnterRule_where_clause();
		EnterRule("where_clause", 17);
		TraceIn("where_clause", 17);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WHERE81 = default(IToken);
	    IToken WS82 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression83 = default(AstParserRuleReturnScope<object, IToken>);

	    object WHERE81_tree = default(object);
	    object WS82_tree = default(object);
	    RewriteRuleITokenStream stream_WHERE=new RewriteRuleITokenStream(adaptor,"token WHERE");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "where_clause");
		DebugLocation(172, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:173:2: ( WHERE WS expression -> ^( T_WHERE expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:173:4: WHERE WS expression
			{
			DebugLocation(173, 4);
			WHERE81=(IToken)Match(input,WHERE,Follow._WHERE_in_where_clause901);  
			stream_WHERE.Add(WHERE81);

			DebugLocation(173, 10);
			WS82=(IToken)Match(input,WS,Follow._WS_in_where_clause903);  
			stream_WS.Add(WS82);

			DebugLocation(173, 13);
			PushFollow(Follow._expression_in_where_clause905);
			expression83=expression();
			PopFollow();

			stream_expression.Add(expression83.Tree);


			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 174:2: -> ^( T_WHERE expression )
			{
				DebugLocation(174, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:174:5: ^( T_WHERE expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(174, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_WHERE, "T_WHERE"), root_1);

				DebugLocation(174, 15);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("where_clause", 17);
			LeaveRule("where_clause", 17);
			LeaveRule_where_clause();
	    }
	 	DebugLocation(175, 1);
		} finally { DebugExitRule(GrammarFileName, "where_clause"); }
		return retval;

	}
	// $ANTLR end "where_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_groupby_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_groupby_clause() {}

	// $ANTLR start "groupby_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:176:1: groupby_clause : GROUP WS BY WS expression_list -> ^( T_GROUPBY expression_list ) ;
	[GrammarRule("groupby_clause")]
	private AstParserRuleReturnScope<object, IToken> groupby_clause()
	{
		EnterRule_groupby_clause();
		EnterRule("groupby_clause", 18);
		TraceIn("groupby_clause", 18);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken GROUP84 = default(IToken);
	    IToken WS85 = default(IToken);
	    IToken BY86 = default(IToken);
	    IToken WS87 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression_list88 = default(AstParserRuleReturnScope<object, IToken>);

	    object GROUP84_tree = default(object);
	    object WS85_tree = default(object);
	    object BY86_tree = default(object);
	    object WS87_tree = default(object);
	    RewriteRuleITokenStream stream_GROUP=new RewriteRuleITokenStream(adaptor,"token GROUP");
	    RewriteRuleITokenStream stream_BY=new RewriteRuleITokenStream(adaptor,"token BY");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression_list=new RewriteRuleSubtreeStream(adaptor,"rule expression_list");
		try { DebugEnterRule(GrammarFileName, "groupby_clause");
		DebugLocation(176, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:177:2: ( GROUP WS BY WS expression_list -> ^( T_GROUPBY expression_list ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:177:4: GROUP WS BY WS expression_list
			{
			DebugLocation(177, 4);
			GROUP84=(IToken)Match(input,GROUP,Follow._GROUP_in_groupby_clause924);  
			stream_GROUP.Add(GROUP84);

			DebugLocation(177, 10);
			WS85=(IToken)Match(input,WS,Follow._WS_in_groupby_clause926);  
			stream_WS.Add(WS85);

			DebugLocation(177, 13);
			BY86=(IToken)Match(input,BY,Follow._BY_in_groupby_clause928);  
			stream_BY.Add(BY86);

			DebugLocation(177, 16);
			WS87=(IToken)Match(input,WS,Follow._WS_in_groupby_clause930);  
			stream_WS.Add(WS87);

			DebugLocation(177, 19);
			PushFollow(Follow._expression_list_in_groupby_clause932);
			expression_list88=expression_list();
			PopFollow();

			stream_expression_list.Add(expression_list88.Tree);


			{
			// AST REWRITE
			// elements: expression_list
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 178:2: -> ^( T_GROUPBY expression_list )
			{
				DebugLocation(178, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:178:5: ^( T_GROUPBY expression_list )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(178, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_GROUPBY, "T_GROUPBY"), root_1);

				DebugLocation(178, 17);
				adaptor.AddChild(root_1, stream_expression_list.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("groupby_clause", 18);
			LeaveRule("groupby_clause", 18);
			LeaveRule_groupby_clause();
	    }
	 	DebugLocation(179, 1);
		} finally { DebugExitRule(GrammarFileName, "groupby_clause"); }
		return retval;

	}
	// $ANTLR end "groupby_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_clause() {}

	// $ANTLR start "orderby_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:181:1: orderby_clause : ORDER WS BY WS orderby_column_list -> ^( T_ORDERBY orderby_column_list ) ;
	[GrammarRule("orderby_clause")]
	private AstParserRuleReturnScope<object, IToken> orderby_clause()
	{
		EnterRule_orderby_clause();
		EnterRule("orderby_clause", 19);
		TraceIn("orderby_clause", 19);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken ORDER89 = default(IToken);
	    IToken WS90 = default(IToken);
	    IToken BY91 = default(IToken);
	    IToken WS92 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> orderby_column_list93 = default(AstParserRuleReturnScope<object, IToken>);

	    object ORDER89_tree = default(object);
	    object WS90_tree = default(object);
	    object BY91_tree = default(object);
	    object WS92_tree = default(object);
	    RewriteRuleITokenStream stream_BY=new RewriteRuleITokenStream(adaptor,"token BY");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_ORDER=new RewriteRuleITokenStream(adaptor,"token ORDER");
	    RewriteRuleSubtreeStream stream_orderby_column_list=new RewriteRuleSubtreeStream(adaptor,"rule orderby_column_list");
		try { DebugEnterRule(GrammarFileName, "orderby_clause");
		DebugLocation(181, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:182:2: ( ORDER WS BY WS orderby_column_list -> ^( T_ORDERBY orderby_column_list ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:182:4: ORDER WS BY WS orderby_column_list
			{
			DebugLocation(182, 4);
			ORDER89=(IToken)Match(input,ORDER,Follow._ORDER_in_orderby_clause953);  
			stream_ORDER.Add(ORDER89);

			DebugLocation(182, 10);
			WS90=(IToken)Match(input,WS,Follow._WS_in_orderby_clause955);  
			stream_WS.Add(WS90);

			DebugLocation(182, 13);
			BY91=(IToken)Match(input,BY,Follow._BY_in_orderby_clause957);  
			stream_BY.Add(BY91);

			DebugLocation(182, 16);
			WS92=(IToken)Match(input,WS,Follow._WS_in_orderby_clause959);  
			stream_WS.Add(WS92);

			DebugLocation(182, 19);
			PushFollow(Follow._orderby_column_list_in_orderby_clause961);
			orderby_column_list93=orderby_column_list();
			PopFollow();

			stream_orderby_column_list.Add(orderby_column_list93.Tree);


			{
			// AST REWRITE
			// elements: orderby_column_list
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 183:2: -> ^( T_ORDERBY orderby_column_list )
			{
				DebugLocation(183, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:183:5: ^( T_ORDERBY orderby_column_list )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(183, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_ORDERBY, "T_ORDERBY"), root_1);

				DebugLocation(183, 17);
				adaptor.AddChild(root_1, stream_orderby_column_list.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_clause", 19);
			LeaveRule("orderby_clause", 19);
			LeaveRule_orderby_clause();
	    }
	 	DebugLocation(184, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_clause"); }
		return retval;

	}
	// $ANTLR end "orderby_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_column_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_column_list() {}

	// $ANTLR start "orderby_column_list"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:186:1: orderby_column_list : orderby_column ( ( WS )? ',' ( WS )? orderby_column )* -> ( orderby_column )* ;
	[GrammarRule("orderby_column_list")]
	private AstParserRuleReturnScope<object, IToken> orderby_column_list()
	{
		EnterRule_orderby_column_list();
		EnterRule("orderby_column_list", 20);
		TraceIn("orderby_column_list", 20);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS95 = default(IToken);
	    IToken char_literal96 = default(IToken);
	    IToken WS97 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> orderby_column94 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> orderby_column98 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS95_tree = default(object);
	    object char_literal96_tree = default(object);
	    object WS97_tree = default(object);
	    RewriteRuleITokenStream stream_143=new RewriteRuleITokenStream(adaptor,"token 143");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_orderby_column=new RewriteRuleSubtreeStream(adaptor,"rule orderby_column");
		try { DebugEnterRule(GrammarFileName, "orderby_column_list");
		DebugLocation(186, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:187:2: ( orderby_column ( ( WS )? ',' ( WS )? orderby_column )* -> ( orderby_column )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:187:4: orderby_column ( ( WS )? ',' ( WS )? orderby_column )*
			{
			DebugLocation(187, 4);
			PushFollow(Follow._orderby_column_in_orderby_column_list982);
			orderby_column94=orderby_column();
			PopFollow();

			stream_orderby_column.Add(orderby_column94.Tree);
			DebugLocation(187, 19);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:187:19: ( ( WS )? ',' ( WS )? orderby_column )*
			try { DebugEnterSubRule(39);
			while (true)
			{
				int alt39=2;
				try { DebugEnterDecision(39, decisionCanBacktrack[39]);
				int LA39_0 = input.LA(1);

				if ((LA39_0==WS))
				{
					int LA39_1 = input.LA(2);

					if ((LA39_1==143))
					{
						alt39 = 1;
					}


				}
				else if ((LA39_0==143))
				{
					alt39 = 1;
				}


				} finally { DebugExitDecision(39); }
				switch ( alt39 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:187:20: ( WS )? ',' ( WS )? orderby_column
					{
					DebugLocation(187, 20);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:187:20: ( WS )?
					int alt37=2;
					try { DebugEnterSubRule(37);
					try { DebugEnterDecision(37, decisionCanBacktrack[37]);
					int LA37_0 = input.LA(1);

					if ((LA37_0==WS))
					{
						alt37 = 1;
					}
					} finally { DebugExitDecision(37); }
					switch (alt37)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:187:20: WS
						{
						DebugLocation(187, 20);
						WS95=(IToken)Match(input,WS,Follow._WS_in_orderby_column_list985);  
						stream_WS.Add(WS95);


						}
						break;

					}
					} finally { DebugExitSubRule(37); }

					DebugLocation(187, 24);
					char_literal96=(IToken)Match(input,143,Follow._143_in_orderby_column_list988);  
					stream_143.Add(char_literal96);

					DebugLocation(187, 28);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:187:28: ( WS )?
					int alt38=2;
					try { DebugEnterSubRule(38);
					try { DebugEnterDecision(38, decisionCanBacktrack[38]);
					int LA38_0 = input.LA(1);

					if ((LA38_0==WS))
					{
						alt38 = 1;
					}
					} finally { DebugExitDecision(38); }
					switch (alt38)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:187:28: WS
						{
						DebugLocation(187, 28);
						WS97=(IToken)Match(input,WS,Follow._WS_in_orderby_column_list990);  
						stream_WS.Add(WS97);


						}
						break;

					}
					} finally { DebugExitSubRule(38); }

					DebugLocation(187, 32);
					PushFollow(Follow._orderby_column_in_orderby_column_list993);
					orderby_column98=orderby_column();
					PopFollow();

					stream_orderby_column.Add(orderby_column98.Tree);

					}
					break;

				default:
					goto loop39;
				}
			}

			loop39:
				;

			} finally { DebugExitSubRule(39); }



			{
			// AST REWRITE
			// elements: orderby_column
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 188:2: -> ( orderby_column )*
			{
				DebugLocation(188, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:188:5: ( orderby_column )*
				while ( stream_orderby_column.HasNext )
				{
					DebugLocation(188, 5);
					adaptor.AddChild(root_0, stream_orderby_column.NextTree());

				}
				stream_orderby_column.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_column_list", 20);
			LeaveRule("orderby_column_list", 20);
			LeaveRule_orderby_column_list();
	    }
	 	DebugLocation(189, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_column_list"); }
		return retval;

	}
	// $ANTLR end "orderby_column_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_column() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_column() {}

	// $ANTLR start "orderby_column"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:191:1: orderby_column : expression ( WS orderby_direction )? -> ^( T_ORDERBY_COLUMN expression ( orderby_direction )? ) ;
	[GrammarRule("orderby_column")]
	private AstParserRuleReturnScope<object, IToken> orderby_column()
	{
		EnterRule_orderby_column();
		EnterRule("orderby_column", 21);
		TraceIn("orderby_column", 21);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS100 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression99 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> orderby_direction101 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS100_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_orderby_direction=new RewriteRuleSubtreeStream(adaptor,"rule orderby_direction");
		try { DebugEnterRule(GrammarFileName, "orderby_column");
		DebugLocation(191, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:192:2: ( expression ( WS orderby_direction )? -> ^( T_ORDERBY_COLUMN expression ( orderby_direction )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:192:4: expression ( WS orderby_direction )?
			{
			DebugLocation(192, 4);
			PushFollow(Follow._expression_in_orderby_column1013);
			expression99=expression();
			PopFollow();

			stream_expression.Add(expression99.Tree);
			DebugLocation(192, 15);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:192:15: ( WS orderby_direction )?
			int alt40=2;
			try { DebugEnterSubRule(40);
			try { DebugEnterDecision(40, decisionCanBacktrack[40]);
			int LA40_0 = input.LA(1);

			if ((LA40_0==WS))
			{
				int LA40_1 = input.LA(2);

				if ((LA40_1==ASC||LA40_1==DESC))
				{
					alt40 = 1;
				}
			}
			} finally { DebugExitDecision(40); }
			switch (alt40)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:192:16: WS orderby_direction
				{
				DebugLocation(192, 16);
				WS100=(IToken)Match(input,WS,Follow._WS_in_orderby_column1016);  
				stream_WS.Add(WS100);

				DebugLocation(192, 19);
				PushFollow(Follow._orderby_direction_in_orderby_column1018);
				orderby_direction101=orderby_direction();
				PopFollow();

				stream_orderby_direction.Add(orderby_direction101.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(40); }



			{
			// AST REWRITE
			// elements: orderby_direction, expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 192:39: -> ^( T_ORDERBY_COLUMN expression ( orderby_direction )? )
			{
				DebugLocation(192, 42);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:192:42: ^( T_ORDERBY_COLUMN expression ( orderby_direction )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(192, 44);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_ORDERBY_COLUMN, "T_ORDERBY_COLUMN"), root_1);

				DebugLocation(192, 61);
				adaptor.AddChild(root_1, stream_expression.NextTree());
				DebugLocation(192, 72);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:192:72: ( orderby_direction )?
				if (stream_orderby_direction.HasNext)
				{
					DebugLocation(192, 72);
					adaptor.AddChild(root_1, stream_orderby_direction.NextTree());

				}
				stream_orderby_direction.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_column", 21);
			LeaveRule("orderby_column", 21);
			LeaveRule_orderby_column();
	    }
	 	DebugLocation(193, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_column"); }
		return retval;

	}
	// $ANTLR end "orderby_column"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_direction() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_direction() {}

	// $ANTLR start "orderby_direction"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:195:1: orderby_direction : ( ASC -> T_ORDERBY_ASC | DESC -> T_ORDERBY_DESC );
	[GrammarRule("orderby_direction")]
	private AstParserRuleReturnScope<object, IToken> orderby_direction()
	{
		EnterRule_orderby_direction();
		EnterRule("orderby_direction", 22);
		TraceIn("orderby_direction", 22);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken ASC102 = default(IToken);
	    IToken DESC103 = default(IToken);

	    object ASC102_tree = default(object);
	    object DESC103_tree = default(object);
	    RewriteRuleITokenStream stream_DESC=new RewriteRuleITokenStream(adaptor,"token DESC");
	    RewriteRuleITokenStream stream_ASC=new RewriteRuleITokenStream(adaptor,"token ASC");

		try { DebugEnterRule(GrammarFileName, "orderby_direction");
		DebugLocation(195, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:196:2: ( ASC -> T_ORDERBY_ASC | DESC -> T_ORDERBY_DESC )
			int alt41=2;
			try { DebugEnterDecision(41, decisionCanBacktrack[41]);
			int LA41_0 = input.LA(1);

			if ((LA41_0==ASC))
			{
				alt41 = 1;
			}
			else if ((LA41_0==DESC))
			{
				alt41 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 41, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(41); }
			switch (alt41)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:196:4: ASC
				{
				DebugLocation(196, 4);
				ASC102=(IToken)Match(input,ASC,Follow._ASC_in_orderby_direction1043);  
				stream_ASC.Add(ASC102);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 196:8: -> T_ORDERBY_ASC
				{
					DebugLocation(196, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_ORDERBY_ASC, "T_ORDERBY_ASC"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:197:4: DESC
				{
				DebugLocation(197, 4);
				DESC103=(IToken)Match(input,DESC,Follow._DESC_in_orderby_direction1052);  
				stream_DESC.Add(DESC103);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 197:9: -> T_ORDERBY_DESC
				{
					DebugLocation(197, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_ORDERBY_DESC, "T_ORDERBY_DESC"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_direction", 22);
			LeaveRule("orderby_direction", 22);
			LeaveRule_orderby_direction();
	    }
	 	DebugLocation(198, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_direction"); }
		return retval;

	}
	// $ANTLR end "orderby_direction"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_use_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_use_command() {}

	// $ANTLR start "use_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:203:1: use_command : USE WS file -> ^( T_USE file ) ;
	[GrammarRule("use_command")]
	private AstParserRuleReturnScope<object, IToken> use_command()
	{
		EnterRule_use_command();
		EnterRule("use_command", 23);
		TraceIn("use_command", 23);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken USE104 = default(IToken);
	    IToken WS105 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file106 = default(AstParserRuleReturnScope<object, IToken>);

	    object USE104_tree = default(object);
	    object WS105_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_USE=new RewriteRuleITokenStream(adaptor,"token USE");
	    RewriteRuleSubtreeStream stream_file=new RewriteRuleSubtreeStream(adaptor,"rule file");
		try { DebugEnterRule(GrammarFileName, "use_command");
		DebugLocation(203, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:204:2: ( USE WS file -> ^( T_USE file ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:204:4: USE WS file
			{
			DebugLocation(204, 4);
			USE104=(IToken)Match(input,USE,Follow._USE_in_use_command1070);  
			stream_USE.Add(USE104);

			DebugLocation(204, 8);
			WS105=(IToken)Match(input,WS,Follow._WS_in_use_command1072);  
			stream_WS.Add(WS105);

			DebugLocation(204, 11);
			PushFollow(Follow._file_in_use_command1074);
			file106=file();
			PopFollow();

			stream_file.Add(file106.Tree);


			{
			// AST REWRITE
			// elements: file
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 204:16: -> ^( T_USE file )
			{
				DebugLocation(204, 19);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:204:19: ^( T_USE file )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(204, 21);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_USE, "T_USE"), root_1);

				DebugLocation(204, 27);
				adaptor.AddChild(root_1, stream_file.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("use_command", 23);
			LeaveRule("use_command", 23);
			LeaveRule_use_command();
	    }
	 	DebugLocation(205, 1);
		} finally { DebugExitRule(GrammarFileName, "use_command"); }
		return retval;

	}
	// $ANTLR end "use_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_declare_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_declare_command() {}

	// $ANTLR start "declare_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:210:1: declare_command : DECLARE WS declaration ( ( WS )? ',' ( WS )? declaration )* -> ^( T_DECLARE ( declaration )+ ) ;
	[GrammarRule("declare_command")]
	private AstParserRuleReturnScope<object, IToken> declare_command()
	{
		EnterRule_declare_command();
		EnterRule("declare_command", 24);
		TraceIn("declare_command", 24);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken DECLARE107 = default(IToken);
	    IToken WS108 = default(IToken);
	    IToken WS110 = default(IToken);
	    IToken char_literal111 = default(IToken);
	    IToken WS112 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> declaration109 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> declaration113 = default(AstParserRuleReturnScope<object, IToken>);

	    object DECLARE107_tree = default(object);
	    object WS108_tree = default(object);
	    object WS110_tree = default(object);
	    object char_literal111_tree = default(object);
	    object WS112_tree = default(object);
	    RewriteRuleITokenStream stream_143=new RewriteRuleITokenStream(adaptor,"token 143");
	    RewriteRuleITokenStream stream_DECLARE=new RewriteRuleITokenStream(adaptor,"token DECLARE");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_declaration=new RewriteRuleSubtreeStream(adaptor,"rule declaration");
		try { DebugEnterRule(GrammarFileName, "declare_command");
		DebugLocation(210, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:211:2: ( DECLARE WS declaration ( ( WS )? ',' ( WS )? declaration )* -> ^( T_DECLARE ( declaration )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:211:4: DECLARE WS declaration ( ( WS )? ',' ( WS )? declaration )*
			{
			DebugLocation(211, 4);
			DECLARE107=(IToken)Match(input,DECLARE,Follow._DECLARE_in_declare_command1096);  
			stream_DECLARE.Add(DECLARE107);

			DebugLocation(211, 12);
			WS108=(IToken)Match(input,WS,Follow._WS_in_declare_command1098);  
			stream_WS.Add(WS108);

			DebugLocation(211, 15);
			PushFollow(Follow._declaration_in_declare_command1100);
			declaration109=declaration();
			PopFollow();

			stream_declaration.Add(declaration109.Tree);
			DebugLocation(211, 27);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:211:27: ( ( WS )? ',' ( WS )? declaration )*
			try { DebugEnterSubRule(44);
			while (true)
			{
				int alt44=2;
				try { DebugEnterDecision(44, decisionCanBacktrack[44]);
				int LA44_0 = input.LA(1);

				if ((LA44_0==WS))
				{
					int LA44_1 = input.LA(2);

					if ((LA44_1==143))
					{
						alt44 = 1;
					}


				}
				else if ((LA44_0==143))
				{
					alt44 = 1;
				}


				} finally { DebugExitDecision(44); }
				switch ( alt44 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:211:28: ( WS )? ',' ( WS )? declaration
					{
					DebugLocation(211, 28);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:211:28: ( WS )?
					int alt42=2;
					try { DebugEnterSubRule(42);
					try { DebugEnterDecision(42, decisionCanBacktrack[42]);
					int LA42_0 = input.LA(1);

					if ((LA42_0==WS))
					{
						alt42 = 1;
					}
					} finally { DebugExitDecision(42); }
					switch (alt42)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:211:28: WS
						{
						DebugLocation(211, 28);
						WS110=(IToken)Match(input,WS,Follow._WS_in_declare_command1103);  
						stream_WS.Add(WS110);


						}
						break;

					}
					} finally { DebugExitSubRule(42); }

					DebugLocation(211, 32);
					char_literal111=(IToken)Match(input,143,Follow._143_in_declare_command1106);  
					stream_143.Add(char_literal111);

					DebugLocation(211, 36);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:211:36: ( WS )?
					int alt43=2;
					try { DebugEnterSubRule(43);
					try { DebugEnterDecision(43, decisionCanBacktrack[43]);
					int LA43_0 = input.LA(1);

					if ((LA43_0==WS))
					{
						alt43 = 1;
					}
					} finally { DebugExitDecision(43); }
					switch (alt43)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:211:36: WS
						{
						DebugLocation(211, 36);
						WS112=(IToken)Match(input,WS,Follow._WS_in_declare_command1108);  
						stream_WS.Add(WS112);


						}
						break;

					}
					} finally { DebugExitSubRule(43); }

					DebugLocation(211, 40);
					PushFollow(Follow._declaration_in_declare_command1111);
					declaration113=declaration();
					PopFollow();

					stream_declaration.Add(declaration113.Tree);

					}
					break;

				default:
					goto loop44;
				}
			}

			loop44:
				;

			} finally { DebugExitSubRule(44); }



			{
			// AST REWRITE
			// elements: declaration
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 212:2: -> ^( T_DECLARE ( declaration )+ )
			{
				DebugLocation(212, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:212:5: ^( T_DECLARE ( declaration )+ )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(212, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_DECLARE, "T_DECLARE"), root_1);

				DebugLocation(212, 17);
				if (!(stream_declaration.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_declaration.HasNext )
				{
					DebugLocation(212, 17);
					adaptor.AddChild(root_1, stream_declaration.NextTree());

				}
				stream_declaration.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declare_command", 24);
			LeaveRule("declare_command", 24);
			LeaveRule_declare_command();
	    }
	 	DebugLocation(213, 1);
		} finally { DebugExitRule(GrammarFileName, "declare_command"); }
		return retval;

	}
	// $ANTLR end "declare_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_declaration() {}

	// $ANTLR start "declaration"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:215:1: declaration : variable WS ( AS WS )? datatype -> ^( T_DECLARATION variable datatype ) ;
	[GrammarRule("declaration")]
	private AstParserRuleReturnScope<object, IToken> declaration()
	{
		EnterRule_declaration();
		EnterRule("declaration", 25);
		TraceIn("declaration", 25);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS115 = default(IToken);
	    IToken AS116 = default(IToken);
	    IToken WS117 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> variable114 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> datatype118 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS115_tree = default(object);
	    object AS116_tree = default(object);
	    object WS117_tree = default(object);
	    RewriteRuleITokenStream stream_AS=new RewriteRuleITokenStream(adaptor,"token AS");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_datatype=new RewriteRuleSubtreeStream(adaptor,"rule datatype");
	    RewriteRuleSubtreeStream stream_variable=new RewriteRuleSubtreeStream(adaptor,"rule variable");
		try { DebugEnterRule(GrammarFileName, "declaration");
		DebugLocation(215, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:216:2: ( variable WS ( AS WS )? datatype -> ^( T_DECLARATION variable datatype ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:216:4: variable WS ( AS WS )? datatype
			{
			DebugLocation(216, 4);
			PushFollow(Follow._variable_in_declaration1135);
			variable114=variable();
			PopFollow();

			stream_variable.Add(variable114.Tree);
			DebugLocation(216, 13);
			WS115=(IToken)Match(input,WS,Follow._WS_in_declaration1137);  
			stream_WS.Add(WS115);

			DebugLocation(216, 16);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:216:16: ( AS WS )?
			int alt45=2;
			try { DebugEnterSubRule(45);
			try { DebugEnterDecision(45, decisionCanBacktrack[45]);
			int LA45_0 = input.LA(1);

			if ((LA45_0==AS))
			{
				alt45 = 1;
			}
			} finally { DebugExitDecision(45); }
			switch (alt45)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:216:17: AS WS
				{
				DebugLocation(216, 17);
				AS116=(IToken)Match(input,AS,Follow._AS_in_declaration1140);  
				stream_AS.Add(AS116);

				DebugLocation(216, 20);
				WS117=(IToken)Match(input,WS,Follow._WS_in_declaration1142);  
				stream_WS.Add(WS117);


				}
				break;

			}
			} finally { DebugExitSubRule(45); }

			DebugLocation(216, 25);
			PushFollow(Follow._datatype_in_declaration1146);
			datatype118=datatype();
			PopFollow();

			stream_datatype.Add(datatype118.Tree);


			{
			// AST REWRITE
			// elements: datatype, variable
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 217:2: -> ^( T_DECLARATION variable datatype )
			{
				DebugLocation(217, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:217:5: ^( T_DECLARATION variable datatype )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(217, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_DECLARATION, "T_DECLARATION"), root_1);

				DebugLocation(217, 21);
				adaptor.AddChild(root_1, stream_variable.NextTree());
				DebugLocation(217, 30);
				adaptor.AddChild(root_1, stream_datatype.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declaration", 25);
			LeaveRule("declaration", 25);
			LeaveRule_declaration();
	    }
	 	DebugLocation(218, 1);
		} finally { DebugExitRule(GrammarFileName, "declaration"); }
		return retval;

	}
	// $ANTLR end "declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_set_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_set_command() {}

	// $ANTLR start "set_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:223:1: set_command : SET WS variable ( WS )? '=' ( WS )? expression -> ^( T_SET_VARIABLE variable expression ) ;
	[GrammarRule("set_command")]
	private AstParserRuleReturnScope<object, IToken> set_command()
	{
		EnterRule_set_command();
		EnterRule("set_command", 26);
		TraceIn("set_command", 26);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken SET119 = default(IToken);
	    IToken WS120 = default(IToken);
	    IToken WS122 = default(IToken);
	    IToken char_literal123 = default(IToken);
	    IToken WS124 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> variable121 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression125 = default(AstParserRuleReturnScope<object, IToken>);

	    object SET119_tree = default(object);
	    object WS120_tree = default(object);
	    object WS122_tree = default(object);
	    object char_literal123_tree = default(object);
	    object WS124_tree = default(object);
	    RewriteRuleITokenStream stream_150=new RewriteRuleITokenStream(adaptor,"token 150");
	    RewriteRuleITokenStream stream_SET=new RewriteRuleITokenStream(adaptor,"token SET");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_variable=new RewriteRuleSubtreeStream(adaptor,"rule variable");
		try { DebugEnterRule(GrammarFileName, "set_command");
		DebugLocation(223, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:224:2: ( SET WS variable ( WS )? '=' ( WS )? expression -> ^( T_SET_VARIABLE variable expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:224:4: SET WS variable ( WS )? '=' ( WS )? expression
			{
			DebugLocation(224, 4);
			SET119=(IToken)Match(input,SET,Follow._SET_in_set_command1171);  
			stream_SET.Add(SET119);

			DebugLocation(224, 8);
			WS120=(IToken)Match(input,WS,Follow._WS_in_set_command1173);  
			stream_WS.Add(WS120);

			DebugLocation(224, 11);
			PushFollow(Follow._variable_in_set_command1175);
			variable121=variable();
			PopFollow();

			stream_variable.Add(variable121.Tree);
			DebugLocation(224, 20);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:224:20: ( WS )?
			int alt46=2;
			try { DebugEnterSubRule(46);
			try { DebugEnterDecision(46, decisionCanBacktrack[46]);
			int LA46_0 = input.LA(1);

			if ((LA46_0==WS))
			{
				alt46 = 1;
			}
			} finally { DebugExitDecision(46); }
			switch (alt46)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:224:20: WS
				{
				DebugLocation(224, 20);
				WS122=(IToken)Match(input,WS,Follow._WS_in_set_command1177);  
				stream_WS.Add(WS122);


				}
				break;

			}
			} finally { DebugExitSubRule(46); }

			DebugLocation(224, 24);
			char_literal123=(IToken)Match(input,150,Follow._150_in_set_command1180);  
			stream_150.Add(char_literal123);

			DebugLocation(224, 28);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:224:28: ( WS )?
			int alt47=2;
			try { DebugEnterSubRule(47);
			try { DebugEnterDecision(47, decisionCanBacktrack[47]);
			int LA47_0 = input.LA(1);

			if ((LA47_0==WS))
			{
				alt47 = 1;
			}
			} finally { DebugExitDecision(47); }
			switch (alt47)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:224:28: WS
				{
				DebugLocation(224, 28);
				WS124=(IToken)Match(input,WS,Follow._WS_in_set_command1182);  
				stream_WS.Add(WS124);


				}
				break;

			}
			} finally { DebugExitSubRule(47); }

			DebugLocation(224, 32);
			PushFollow(Follow._expression_in_set_command1185);
			expression125=expression();
			PopFollow();

			stream_expression.Add(expression125.Tree);


			{
			// AST REWRITE
			// elements: variable, expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 225:2: -> ^( T_SET_VARIABLE variable expression )
			{
				DebugLocation(225, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:225:5: ^( T_SET_VARIABLE variable expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(225, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SET_VARIABLE, "T_SET_VARIABLE"), root_1);

				DebugLocation(225, 22);
				adaptor.AddChild(root_1, stream_variable.NextTree());
				DebugLocation(225, 31);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("set_command", 26);
			LeaveRule("set_command", 26);
			LeaveRule_set_command();
	    }
	 	DebugLocation(226, 1);
		} finally { DebugExitRule(GrammarFileName, "set_command"); }
		return retval;

	}
	// $ANTLR end "set_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_list() {}

	// $ANTLR start "expression_list"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:231:1: expression_list : expression ( ( WS )? ',' ( WS )? expression )* -> ^( T_EXPRESSIONLIST ( expression )+ ) ;
	[GrammarRule("expression_list")]
	private AstParserRuleReturnScope<object, IToken> expression_list()
	{
		EnterRule_expression_list();
		EnterRule("expression_list", 27);
		TraceIn("expression_list", 27);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS127 = default(IToken);
	    IToken char_literal128 = default(IToken);
	    IToken WS129 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression126 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression130 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS127_tree = default(object);
	    object char_literal128_tree = default(object);
	    object WS129_tree = default(object);
	    RewriteRuleITokenStream stream_143=new RewriteRuleITokenStream(adaptor,"token 143");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "expression_list");
		DebugLocation(231, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:232:2: ( expression ( ( WS )? ',' ( WS )? expression )* -> ^( T_EXPRESSIONLIST ( expression )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:232:4: expression ( ( WS )? ',' ( WS )? expression )*
			{
			DebugLocation(232, 4);
			PushFollow(Follow._expression_in_expression_list1210);
			expression126=expression();
			PopFollow();

			stream_expression.Add(expression126.Tree);
			DebugLocation(232, 15);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:232:15: ( ( WS )? ',' ( WS )? expression )*
			try { DebugEnterSubRule(50);
			while (true)
			{
				int alt50=2;
				try { DebugEnterDecision(50, decisionCanBacktrack[50]);
				int LA50_0 = input.LA(1);

				if ((LA50_0==WS))
				{
					int LA50_1 = input.LA(2);

					if ((LA50_1==143))
					{
						alt50 = 1;
					}


				}
				else if ((LA50_0==143))
				{
					alt50 = 1;
				}


				} finally { DebugExitDecision(50); }
				switch ( alt50 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:232:16: ( WS )? ',' ( WS )? expression
					{
					DebugLocation(232, 16);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:232:16: ( WS )?
					int alt48=2;
					try { DebugEnterSubRule(48);
					try { DebugEnterDecision(48, decisionCanBacktrack[48]);
					int LA48_0 = input.LA(1);

					if ((LA48_0==WS))
					{
						alt48 = 1;
					}
					} finally { DebugExitDecision(48); }
					switch (alt48)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:232:16: WS
						{
						DebugLocation(232, 16);
						WS127=(IToken)Match(input,WS,Follow._WS_in_expression_list1213);  
						stream_WS.Add(WS127);


						}
						break;

					}
					} finally { DebugExitSubRule(48); }

					DebugLocation(232, 20);
					char_literal128=(IToken)Match(input,143,Follow._143_in_expression_list1216);  
					stream_143.Add(char_literal128);

					DebugLocation(232, 24);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:232:24: ( WS )?
					int alt49=2;
					try { DebugEnterSubRule(49);
					try { DebugEnterDecision(49, decisionCanBacktrack[49]);
					int LA49_0 = input.LA(1);

					if ((LA49_0==WS))
					{
						alt49 = 1;
					}
					} finally { DebugExitDecision(49); }
					switch (alt49)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:232:24: WS
						{
						DebugLocation(232, 24);
						WS129=(IToken)Match(input,WS,Follow._WS_in_expression_list1218);  
						stream_WS.Add(WS129);


						}
						break;

					}
					} finally { DebugExitSubRule(49); }

					DebugLocation(232, 28);
					PushFollow(Follow._expression_in_expression_list1221);
					expression130=expression();
					PopFollow();

					stream_expression.Add(expression130.Tree);

					}
					break;

				default:
					goto loop50;
				}
			}

			loop50:
				;

			} finally { DebugExitSubRule(50); }



			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 232:41: -> ^( T_EXPRESSIONLIST ( expression )+ )
			{
				DebugLocation(232, 44);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:232:44: ^( T_EXPRESSIONLIST ( expression )+ )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(232, 46);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_EXPRESSIONLIST, "T_EXPRESSIONLIST"), root_1);

				DebugLocation(232, 63);
				if (!(stream_expression.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_expression.HasNext )
				{
					DebugLocation(232, 63);
					adaptor.AddChild(root_1, stream_expression.NextTree());

				}
				stream_expression.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_list", 27);
			LeaveRule("expression_list", 27);
			LeaveRule_expression_list();
	    }
	 	DebugLocation(233, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_list"); }
		return retval;

	}
	// $ANTLR end "expression_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_list_or_select_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_list_or_select_command() {}

	// $ANTLR start "expression_list_or_select_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:235:1: expression_list_or_select_command : ( expression_list | select_command );
	[GrammarRule("expression_list_or_select_command")]
	private AstParserRuleReturnScope<object, IToken> expression_list_or_select_command()
	{
		EnterRule_expression_list_or_select_command();
		EnterRule("expression_list_or_select_command", 28);
		TraceIn("expression_list_or_select_command", 28);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> expression_list131 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> select_command132 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "expression_list_or_select_command");
		DebugLocation(235, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:236:2: ( expression_list | select_command )
			int alt51=2;
			try { DebugEnterDecision(51, decisionCanBacktrack[51]);
			int LA51_0 = input.LA(1);

			if (((LA51_0>=CASE && LA51_0<=CAST)||LA51_0==CONVERT||LA51_0==EXISTS||(LA51_0>=NOT && LA51_0<=NUMBER)||LA51_0==SIMPLE_FILE||(LA51_0>=STRING && LA51_0<=SYSTEMVAR)||LA51_0==TOKEN||LA51_0==VARIABLE||LA51_0==139))
			{
				alt51 = 1;
			}
			else if ((LA51_0==SELECT))
			{
				alt51 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 51, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(51); }
			switch (alt51)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:236:4: expression_list
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(236, 4);
				PushFollow(Follow._expression_list_in_expression_list_or_select_command1244);
				expression_list131=expression_list();
				PopFollow();

				adaptor.AddChild(root_0, expression_list131.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:236:22: select_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(236, 22);
				PushFollow(Follow._select_command_in_expression_list_or_select_command1248);
				select_command132=select_command();
				PopFollow();

				adaptor.AddChild(root_0, select_command132.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_list_or_select_command", 28);
			LeaveRule("expression_list_or_select_command", 28);
			LeaveRule_expression_list_or_select_command();
	    }
	 	DebugLocation(237, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_list_or_select_command"); }
		return retval;

	}
	// $ANTLR end "expression_list_or_select_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression() {}

	// $ANTLR start "expression"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:239:1: expression : expression_7 ;
	[GrammarRule("expression")]
	private AstParserRuleReturnScope<object, IToken> expression()
	{
		EnterRule_expression();
		EnterRule("expression", 29);
		TraceIn("expression", 29);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> expression_7133 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(239, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:240:2: ( expression_7 )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:240:4: expression_7
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(240, 4);
			PushFollow(Follow._expression_7_in_expression1260);
			expression_7133=expression_7();
			PopFollow();

			adaptor.AddChild(root_0, expression_7133.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression", 29);
			LeaveRule("expression", 29);
			LeaveRule_expression();
	    }
	 	DebugLocation(241, 1);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return retval;

	}
	// $ANTLR end "expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_7() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_7() {}

	// $ANTLR start "expression_7"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:243:1: expression_7 : (a= expression_6 -> $a) ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )* ;
	[GrammarRule("expression_7")]
	private AstParserRuleReturnScope<object, IToken> expression_7()
	{
		EnterRule_expression_7();
		EnterRule("expression_7", 30);
		TraceIn("expression_7", 30);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS134 = default(IToken);
	    IToken WS136 = default(IToken);
	    IToken IN137 = default(IToken);
	    IToken WS138 = default(IToken);
	    IToken char_literal139 = default(IToken);
	    IToken WS140 = default(IToken);
	    IToken WS142 = default(IToken);
	    IToken char_literal143 = default(IToken);
	    IToken NOT144 = default(IToken);
	    IToken WS145 = default(IToken);
	    IToken IN146 = default(IToken);
	    IToken WS147 = default(IToken);
	    IToken char_literal148 = default(IToken);
	    IToken WS149 = default(IToken);
	    IToken WS151 = default(IToken);
	    IToken char_literal152 = default(IToken);
	    IToken WS154 = default(IToken);
	    IToken SOME155 = default(IToken);
	    IToken ANY156 = default(IToken);
	    IToken WS157 = default(IToken);
	    IToken char_literal158 = default(IToken);
	    IToken char_literal160 = default(IToken);
	    IToken WS162 = default(IToken);
	    IToken ALL163 = default(IToken);
	    IToken WS164 = default(IToken);
	    IToken char_literal165 = default(IToken);
	    IToken char_literal167 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_7135 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command141 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command150 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_4153 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command159 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_4161 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command166 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS134_tree = default(object);
	    object WS136_tree = default(object);
	    object IN137_tree = default(object);
	    object WS138_tree = default(object);
	    object char_literal139_tree = default(object);
	    object WS140_tree = default(object);
	    object WS142_tree = default(object);
	    object char_literal143_tree = default(object);
	    object NOT144_tree = default(object);
	    object WS145_tree = default(object);
	    object IN146_tree = default(object);
	    object WS147_tree = default(object);
	    object char_literal148_tree = default(object);
	    object WS149_tree = default(object);
	    object WS151_tree = default(object);
	    object char_literal152_tree = default(object);
	    object WS154_tree = default(object);
	    object SOME155_tree = default(object);
	    object ANY156_tree = default(object);
	    object WS157_tree = default(object);
	    object char_literal158_tree = default(object);
	    object char_literal160_tree = default(object);
	    object WS162_tree = default(object);
	    object ALL163_tree = default(object);
	    object WS164_tree = default(object);
	    object char_literal165_tree = default(object);
	    object char_literal167_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_ANY=new RewriteRuleITokenStream(adaptor,"token ANY");
	    RewriteRuleITokenStream stream_139=new RewriteRuleITokenStream(adaptor,"token 139");
	    RewriteRuleITokenStream stream_IN=new RewriteRuleITokenStream(adaptor,"token IN");
	    RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");
	    RewriteRuleITokenStream stream_SOME=new RewriteRuleITokenStream(adaptor,"token SOME");
	    RewriteRuleITokenStream stream_140=new RewriteRuleITokenStream(adaptor,"token 140");
	    RewriteRuleITokenStream stream_ALL=new RewriteRuleITokenStream(adaptor,"token ALL");
	    RewriteRuleSubtreeStream stream_op_7=new RewriteRuleSubtreeStream(adaptor,"rule op_7");
	    RewriteRuleSubtreeStream stream_expression_6=new RewriteRuleSubtreeStream(adaptor,"rule expression_6");
	    RewriteRuleSubtreeStream stream_expression_list_or_select_command=new RewriteRuleSubtreeStream(adaptor,"rule expression_list_or_select_command");
	    RewriteRuleSubtreeStream stream_op_4=new RewriteRuleSubtreeStream(adaptor,"rule op_4");
		try { DebugEnterRule(GrammarFileName, "expression_7");
		DebugLocation(243, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:244:2: ( (a= expression_6 -> $a) ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:244:4: (a= expression_6 -> $a) ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )*
			{
			DebugLocation(244, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:244:4: (a= expression_6 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:244:5: a= expression_6
			{
			DebugLocation(244, 6);
			PushFollow(Follow._expression_6_in_expression_71276);
			a=expression_6();
			PopFollow();

			stream_expression_6.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 244:19: -> $a
			{
				DebugLocation(244, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(244, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:244:25: ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )*
			try { DebugEnterSubRule(64);
			while (true)
			{
				int alt64=2;
				try { DebugEnterDecision(64, decisionCanBacktrack[64]);
				int LA64_0 = input.LA(1);

				if ((LA64_0==WS))
				{
					int LA64_1 = input.LA(2);

					if ((LA64_1==NOT))
					{
						int LA64_3 = input.LA(3);

						if ((LA64_3==WS))
						{
							int LA64_5 = input.LA(4);

							if ((LA64_5==BETWEEN||LA64_5==IN||LA64_5==LIKE||LA64_5==MATCH))
							{
								alt64 = 1;
							}


						}


					}
					else if ((LA64_1==BETWEEN||LA64_1==IN||LA64_1==LIKE||LA64_1==MATCH||LA64_1==OR||(LA64_1>=134 && LA64_1<=136)||(LA64_1>=147 && LA64_1<=152)))
					{
						alt64 = 1;
					}


				}


				} finally { DebugExitDecision(64); }
				switch ( alt64 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:244:26: WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) )
					{
					DebugLocation(244, 26);
					WS134=(IToken)Match(input,WS,Follow._WS_in_expression_71283);  
					stream_WS.Add(WS134);

					DebugLocation(244, 29);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:244:29: ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) )
					int alt63=5;
					try { DebugEnterSubRule(63);
					try { DebugEnterDecision(63, decisionCanBacktrack[63]);
					switch (input.LA(1))
					{
					case BETWEEN:
					case LIKE:
					case MATCH:
					case OR:
						{
						alt63 = 1;
						}
						break;
					case NOT:
						{
						int LA63_2 = input.LA(2);

						if ((LA63_2==WS))
						{
							int LA63_13 = input.LA(3);

							if ((LA63_13==BETWEEN||LA63_13==LIKE||LA63_13==MATCH))
							{
								alt63 = 1;
							}
							else if ((LA63_13==IN))
							{
								alt63 = 3;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 63, 13, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 63, 2, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case IN:
						{
						alt63 = 2;
						}
						break;
					case 150:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA63_14 = input.LA(3);

							if ((LA63_14==ANY||LA63_14==SOME))
							{
								alt63 = 4;
							}
							else if ((LA63_14==ALL))
							{
								alt63 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 63, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt63 = 4;
							}
							break;
						case ALL:
							{
							alt63 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 63, 4, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 152:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA63_14 = input.LA(3);

							if ((LA63_14==ANY||LA63_14==SOME))
							{
								alt63 = 4;
							}
							else if ((LA63_14==ALL))
							{
								alt63 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 63, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt63 = 4;
							}
							break;
						case ALL:
							{
							alt63 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 63, 5, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 148:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA63_14 = input.LA(3);

							if ((LA63_14==ANY||LA63_14==SOME))
							{
								alt63 = 4;
							}
							else if ((LA63_14==ALL))
							{
								alt63 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 63, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt63 = 4;
							}
							break;
						case ALL:
							{
							alt63 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 63, 6, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 149:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA63_14 = input.LA(3);

							if ((LA63_14==ANY||LA63_14==SOME))
							{
								alt63 = 4;
							}
							else if ((LA63_14==ALL))
							{
								alt63 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 63, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt63 = 4;
							}
							break;
						case ALL:
							{
							alt63 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 63, 7, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 135:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA63_14 = input.LA(3);

							if ((LA63_14==ANY||LA63_14==SOME))
							{
								alt63 = 4;
							}
							else if ((LA63_14==ALL))
							{
								alt63 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 63, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt63 = 4;
							}
							break;
						case ALL:
							{
							alt63 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 63, 8, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 136:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA63_14 = input.LA(3);

							if ((LA63_14==ANY||LA63_14==SOME))
							{
								alt63 = 4;
							}
							else if ((LA63_14==ALL))
							{
								alt63 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 63, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt63 = 4;
							}
							break;
						case ALL:
							{
							alt63 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 63, 9, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 134:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA63_14 = input.LA(3);

							if ((LA63_14==ANY||LA63_14==SOME))
							{
								alt63 = 4;
							}
							else if ((LA63_14==ALL))
							{
								alt63 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 63, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt63 = 4;
							}
							break;
						case ALL:
							{
							alt63 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 63, 10, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 151:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA63_14 = input.LA(3);

							if ((LA63_14==ANY||LA63_14==SOME))
							{
								alt63 = 4;
							}
							else if ((LA63_14==ALL))
							{
								alt63 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 63, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt63 = 4;
							}
							break;
						case ALL:
							{
							alt63 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 63, 11, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 147:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA63_14 = input.LA(3);

							if ((LA63_14==ANY||LA63_14==SOME))
							{
								alt63 = 4;
							}
							else if ((LA63_14==ALL))
							{
								alt63 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 63, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt63 = 4;
							}
							break;
						case ALL:
							{
							alt63 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 63, 12, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 63, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(63); }
					switch (alt63)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:245:2: op_7 WS b= expression_6
						{
						DebugLocation(245, 2);
						PushFollow(Follow._op_7_in_expression_71288);
						op_7135=op_7();
						PopFollow();

						stream_op_7.Add(op_7135.Tree);
						DebugLocation(245, 7);
						WS136=(IToken)Match(input,WS,Follow._WS_in_expression_71290);  
						stream_WS.Add(WS136);

						DebugLocation(245, 11);
						PushFollow(Follow._expression_6_in_expression_71294);
						b=expression_6();
						PopFollow();

						stream_expression_6.Add(b.Tree);


						{
						// AST REWRITE
						// elements: op_7, expression_7, b
						// token labels: 
						// rule labels: retval, b
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 245:25: -> ^( T_OP_BINARY op_7 $expression_7 $b)
						{
							DebugLocation(245, 28);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:245:28: ^( T_OP_BINARY op_7 $expression_7 $b)
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(245, 30);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(245, 42);
							adaptor.AddChild(root_1, stream_op_7.NextTree());
							DebugLocation(245, 48);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(245, 62);
							adaptor.AddChild(root_1, stream_b.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:246:4: IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')'
						{
						DebugLocation(246, 4);
						IN137=(IToken)Match(input,IN,Follow._IN_in_expression_71313);  
						stream_IN.Add(IN137);

						DebugLocation(246, 7);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:246:7: ( WS )?
						int alt52=2;
						try { DebugEnterSubRule(52);
						try { DebugEnterDecision(52, decisionCanBacktrack[52]);
						int LA52_0 = input.LA(1);

						if ((LA52_0==WS))
						{
							alt52 = 1;
						}
						} finally { DebugExitDecision(52); }
						switch (alt52)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:246:7: WS
							{
							DebugLocation(246, 7);
							WS138=(IToken)Match(input,WS,Follow._WS_in_expression_71315);  
							stream_WS.Add(WS138);


							}
							break;

						}
						} finally { DebugExitSubRule(52); }

						DebugLocation(246, 11);
						char_literal139=(IToken)Match(input,139,Follow._139_in_expression_71318);  
						stream_139.Add(char_literal139);

						DebugLocation(246, 15);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:246:15: ( WS )?
						int alt53=2;
						try { DebugEnterSubRule(53);
						try { DebugEnterDecision(53, decisionCanBacktrack[53]);
						int LA53_0 = input.LA(1);

						if ((LA53_0==WS))
						{
							alt53 = 1;
						}
						} finally { DebugExitDecision(53); }
						switch (alt53)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:246:15: WS
							{
							DebugLocation(246, 15);
							WS140=(IToken)Match(input,WS,Follow._WS_in_expression_71320);  
							stream_WS.Add(WS140);


							}
							break;

						}
						} finally { DebugExitSubRule(53); }

						DebugLocation(246, 19);
						PushFollow(Follow._expression_list_or_select_command_in_expression_71323);
						expression_list_or_select_command141=expression_list_or_select_command();
						PopFollow();

						stream_expression_list_or_select_command.Add(expression_list_or_select_command141.Tree);
						DebugLocation(246, 53);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:246:53: ( WS )?
						int alt54=2;
						try { DebugEnterSubRule(54);
						try { DebugEnterDecision(54, decisionCanBacktrack[54]);
						int LA54_0 = input.LA(1);

						if ((LA54_0==WS))
						{
							alt54 = 1;
						}
						} finally { DebugExitDecision(54); }
						switch (alt54)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:246:53: WS
							{
							DebugLocation(246, 53);
							WS142=(IToken)Match(input,WS,Follow._WS_in_expression_71325);  
							stream_WS.Add(WS142);


							}
							break;

						}
						} finally { DebugExitSubRule(54); }

						DebugLocation(246, 57);
						char_literal143=(IToken)Match(input,140,Follow._140_in_expression_71328);  
						stream_140.Add(char_literal143);



						{
						// AST REWRITE
						// elements: expression_list_or_select_command, expression_7
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 246:61: -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command )
						{
							DebugLocation(246, 64);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:246:64: ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(246, 66);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(246, 78);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_IN, "T_IN"));
							DebugLocation(246, 84);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(246, 97);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:247:4: NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')'
						{
						DebugLocation(247, 4);
						NOT144=(IToken)Match(input,NOT,Follow._NOT_in_expression_71346);  
						stream_NOT.Add(NOT144);

						DebugLocation(247, 8);
						WS145=(IToken)Match(input,WS,Follow._WS_in_expression_71348);  
						stream_WS.Add(WS145);

						DebugLocation(247, 11);
						IN146=(IToken)Match(input,IN,Follow._IN_in_expression_71350);  
						stream_IN.Add(IN146);

						DebugLocation(247, 14);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:247:14: ( WS )?
						int alt55=2;
						try { DebugEnterSubRule(55);
						try { DebugEnterDecision(55, decisionCanBacktrack[55]);
						int LA55_0 = input.LA(1);

						if ((LA55_0==WS))
						{
							alt55 = 1;
						}
						} finally { DebugExitDecision(55); }
						switch (alt55)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:247:14: WS
							{
							DebugLocation(247, 14);
							WS147=(IToken)Match(input,WS,Follow._WS_in_expression_71352);  
							stream_WS.Add(WS147);


							}
							break;

						}
						} finally { DebugExitSubRule(55); }

						DebugLocation(247, 18);
						char_literal148=(IToken)Match(input,139,Follow._139_in_expression_71355);  
						stream_139.Add(char_literal148);

						DebugLocation(247, 22);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:247:22: ( WS )?
						int alt56=2;
						try { DebugEnterSubRule(56);
						try { DebugEnterDecision(56, decisionCanBacktrack[56]);
						int LA56_0 = input.LA(1);

						if ((LA56_0==WS))
						{
							alt56 = 1;
						}
						} finally { DebugExitDecision(56); }
						switch (alt56)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:247:22: WS
							{
							DebugLocation(247, 22);
							WS149=(IToken)Match(input,WS,Follow._WS_in_expression_71357);  
							stream_WS.Add(WS149);


							}
							break;

						}
						} finally { DebugExitSubRule(56); }

						DebugLocation(247, 26);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:247:26: ( expression_list_or_select_command )
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:247:27: expression_list_or_select_command
						{
						DebugLocation(247, 27);
						PushFollow(Follow._expression_list_or_select_command_in_expression_71361);
						expression_list_or_select_command150=expression_list_or_select_command();
						PopFollow();

						stream_expression_list_or_select_command.Add(expression_list_or_select_command150.Tree);

						}

						DebugLocation(247, 62);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:247:62: ( WS )?
						int alt57=2;
						try { DebugEnterSubRule(57);
						try { DebugEnterDecision(57, decisionCanBacktrack[57]);
						int LA57_0 = input.LA(1);

						if ((LA57_0==WS))
						{
							alt57 = 1;
						}
						} finally { DebugExitDecision(57); }
						switch (alt57)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:247:62: WS
							{
							DebugLocation(247, 62);
							WS151=(IToken)Match(input,WS,Follow._WS_in_expression_71364);  
							stream_WS.Add(WS151);


							}
							break;

						}
						} finally { DebugExitSubRule(57); }

						DebugLocation(247, 66);
						char_literal152=(IToken)Match(input,140,Follow._140_in_expression_71367);  
						stream_140.Add(char_literal152);



						{
						// AST REWRITE
						// elements: expression_list_or_select_command, expression_7
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 247:70: -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command )
						{
							DebugLocation(247, 73);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:247:73: ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(247, 75);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(247, 87);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_NOTIN, "T_NOTIN"));
							DebugLocation(247, 96);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(247, 109);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 4:
						DebugEnterAlt(4);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:248:4: op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')'
						{
						DebugLocation(248, 4);
						PushFollow(Follow._op_4_in_expression_71385);
						op_4153=op_4();
						PopFollow();

						stream_op_4.Add(op_4153.Tree);
						DebugLocation(248, 9);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:248:9: ( WS )?
						int alt58=2;
						try { DebugEnterSubRule(58);
						try { DebugEnterDecision(58, decisionCanBacktrack[58]);
						int LA58_0 = input.LA(1);

						if ((LA58_0==WS))
						{
							alt58 = 1;
						}
						} finally { DebugExitDecision(58); }
						switch (alt58)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:248:9: WS
							{
							DebugLocation(248, 9);
							WS154=(IToken)Match(input,WS,Follow._WS_in_expression_71387);  
							stream_WS.Add(WS154);


							}
							break;

						}
						} finally { DebugExitSubRule(58); }

						DebugLocation(248, 13);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:248:13: ( SOME | ANY )
						int alt59=2;
						try { DebugEnterSubRule(59);
						try { DebugEnterDecision(59, decisionCanBacktrack[59]);
						int LA59_0 = input.LA(1);

						if ((LA59_0==SOME))
						{
							alt59 = 1;
						}
						else if ((LA59_0==ANY))
						{
							alt59 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 59, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						} finally { DebugExitDecision(59); }
						switch (alt59)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:248:14: SOME
							{
							DebugLocation(248, 14);
							SOME155=(IToken)Match(input,SOME,Follow._SOME_in_expression_71391);  
							stream_SOME.Add(SOME155);


							}
							break;
						case 2:
							DebugEnterAlt(2);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:248:21: ANY
							{
							DebugLocation(248, 21);
							ANY156=(IToken)Match(input,ANY,Follow._ANY_in_expression_71395);  
							stream_ANY.Add(ANY156);


							}
							break;

						}
						} finally { DebugExitSubRule(59); }

						DebugLocation(248, 26);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:248:26: ( WS )?
						int alt60=2;
						try { DebugEnterSubRule(60);
						try { DebugEnterDecision(60, decisionCanBacktrack[60]);
						int LA60_0 = input.LA(1);

						if ((LA60_0==WS))
						{
							alt60 = 1;
						}
						} finally { DebugExitDecision(60); }
						switch (alt60)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:248:26: WS
							{
							DebugLocation(248, 26);
							WS157=(IToken)Match(input,WS,Follow._WS_in_expression_71398);  
							stream_WS.Add(WS157);


							}
							break;

						}
						} finally { DebugExitSubRule(60); }

						DebugLocation(248, 30);
						char_literal158=(IToken)Match(input,139,Follow._139_in_expression_71401);  
						stream_139.Add(char_literal158);

						DebugLocation(248, 34);
						PushFollow(Follow._expression_list_or_select_command_in_expression_71403);
						expression_list_or_select_command159=expression_list_or_select_command();
						PopFollow();

						stream_expression_list_or_select_command.Add(expression_list_or_select_command159.Tree);
						DebugLocation(248, 68);
						char_literal160=(IToken)Match(input,140,Follow._140_in_expression_71405);  
						stream_140.Add(char_literal160);



						{
						// AST REWRITE
						// elements: expression_list_or_select_command, expression_7, op_4
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 248:72: -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command )
						{
							DebugLocation(248, 75);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:248:75: ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(248, 77);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(248, 89);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_ANY, "T_ANY"));
							DebugLocation(248, 95);
							adaptor.AddChild(root_1, stream_op_4.NextTree());
							DebugLocation(248, 101);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(248, 114);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 5:
						DebugEnterAlt(5);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:249:4: op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')'
						{
						DebugLocation(249, 4);
						PushFollow(Follow._op_4_in_expression_71425);
						op_4161=op_4();
						PopFollow();

						stream_op_4.Add(op_4161.Tree);
						DebugLocation(249, 9);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:249:9: ( WS )?
						int alt61=2;
						try { DebugEnterSubRule(61);
						try { DebugEnterDecision(61, decisionCanBacktrack[61]);
						int LA61_0 = input.LA(1);

						if ((LA61_0==WS))
						{
							alt61 = 1;
						}
						} finally { DebugExitDecision(61); }
						switch (alt61)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:249:9: WS
							{
							DebugLocation(249, 9);
							WS162=(IToken)Match(input,WS,Follow._WS_in_expression_71427);  
							stream_WS.Add(WS162);


							}
							break;

						}
						} finally { DebugExitSubRule(61); }

						DebugLocation(249, 13);
						ALL163=(IToken)Match(input,ALL,Follow._ALL_in_expression_71430);  
						stream_ALL.Add(ALL163);

						DebugLocation(249, 17);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:249:17: ( WS )?
						int alt62=2;
						try { DebugEnterSubRule(62);
						try { DebugEnterDecision(62, decisionCanBacktrack[62]);
						int LA62_0 = input.LA(1);

						if ((LA62_0==WS))
						{
							alt62 = 1;
						}
						} finally { DebugExitDecision(62); }
						switch (alt62)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:249:17: WS
							{
							DebugLocation(249, 17);
							WS164=(IToken)Match(input,WS,Follow._WS_in_expression_71432);  
							stream_WS.Add(WS164);


							}
							break;

						}
						} finally { DebugExitSubRule(62); }

						DebugLocation(249, 21);
						char_literal165=(IToken)Match(input,139,Follow._139_in_expression_71435);  
						stream_139.Add(char_literal165);

						DebugLocation(249, 25);
						PushFollow(Follow._expression_list_or_select_command_in_expression_71437);
						expression_list_or_select_command166=expression_list_or_select_command();
						PopFollow();

						stream_expression_list_or_select_command.Add(expression_list_or_select_command166.Tree);
						DebugLocation(249, 59);
						char_literal167=(IToken)Match(input,140,Follow._140_in_expression_71439);  
						stream_140.Add(char_literal167);



						{
						// AST REWRITE
						// elements: op_4, expression_7, expression_list_or_select_command
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 249:63: -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command )
						{
							DebugLocation(249, 66);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:249:66: ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(249, 68);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(249, 80);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_ALL, "T_ALL"));
							DebugLocation(249, 86);
							adaptor.AddChild(root_1, stream_op_4.NextTree());
							DebugLocation(249, 92);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(249, 105);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					}
					} finally { DebugExitSubRule(63); }


					}
					break;

				default:
					goto loop64;
				}
			}

			loop64:
				;

			} finally { DebugExitSubRule(64); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_7", 30);
			LeaveRule("expression_7", 30);
			LeaveRule_expression_7();
	    }
	 	DebugLocation(251, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_7"); }
		return retval;

	}
	// $ANTLR end "expression_7"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_7() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_7() {}

	// $ANTLR start "op_7"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:253:1: op_7 : ( OR -> T_OR | LIKE -> T_LIKE | NOT WS LIKE -> T_NOTLIKE | MATCH -> T_MATCH | NOT WS MATCH -> T_NOTMATCH | BETWEEN -> T_BETWEEN | NOT WS BETWEEN -> T_NOTBETWEEN );
	[GrammarRule("op_7")]
	private AstParserRuleReturnScope<object, IToken> op_7()
	{
		EnterRule_op_7();
		EnterRule("op_7", 31);
		TraceIn("op_7", 31);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken OR168 = default(IToken);
	    IToken LIKE169 = default(IToken);
	    IToken NOT170 = default(IToken);
	    IToken WS171 = default(IToken);
	    IToken LIKE172 = default(IToken);
	    IToken MATCH173 = default(IToken);
	    IToken NOT174 = default(IToken);
	    IToken WS175 = default(IToken);
	    IToken MATCH176 = default(IToken);
	    IToken BETWEEN177 = default(IToken);
	    IToken NOT178 = default(IToken);
	    IToken WS179 = default(IToken);
	    IToken BETWEEN180 = default(IToken);

	    object OR168_tree = default(object);
	    object LIKE169_tree = default(object);
	    object NOT170_tree = default(object);
	    object WS171_tree = default(object);
	    object LIKE172_tree = default(object);
	    object MATCH173_tree = default(object);
	    object NOT174_tree = default(object);
	    object WS175_tree = default(object);
	    object MATCH176_tree = default(object);
	    object BETWEEN177_tree = default(object);
	    object NOT178_tree = default(object);
	    object WS179_tree = default(object);
	    object BETWEEN180_tree = default(object);
	    RewriteRuleITokenStream stream_MATCH=new RewriteRuleITokenStream(adaptor,"token MATCH");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");
	    RewriteRuleITokenStream stream_BETWEEN=new RewriteRuleITokenStream(adaptor,"token BETWEEN");
	    RewriteRuleITokenStream stream_LIKE=new RewriteRuleITokenStream(adaptor,"token LIKE");
	    RewriteRuleITokenStream stream_OR=new RewriteRuleITokenStream(adaptor,"token OR");

		try { DebugEnterRule(GrammarFileName, "op_7");
		DebugLocation(253, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:253:6: ( OR -> T_OR | LIKE -> T_LIKE | NOT WS LIKE -> T_NOTLIKE | MATCH -> T_MATCH | NOT WS MATCH -> T_NOTMATCH | BETWEEN -> T_BETWEEN | NOT WS BETWEEN -> T_NOTBETWEEN )
			int alt65=7;
			try { DebugEnterDecision(65, decisionCanBacktrack[65]);
			switch (input.LA(1))
			{
			case OR:
				{
				alt65 = 1;
				}
				break;
			case LIKE:
				{
				alt65 = 2;
				}
				break;
			case NOT:
				{
				int LA65_3 = input.LA(2);

				if ((LA65_3==WS))
				{
					switch (input.LA(3))
					{
					case LIKE:
						{
						alt65 = 3;
						}
						break;
					case MATCH:
						{
						alt65 = 5;
						}
						break;
					case BETWEEN:
						{
						alt65 = 7;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 65, 6, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 65, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case MATCH:
				{
				alt65 = 4;
				}
				break;
			case BETWEEN:
				{
				alt65 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 65, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(65); }
			switch (alt65)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:253:8: OR
				{
				DebugLocation(253, 8);
				OR168=(IToken)Match(input,OR,Follow._OR_in_op_71469);  
				stream_OR.Add(OR168);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 253:11: -> T_OR
				{
					DebugLocation(253, 14);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_OR, "T_OR"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:254:4: LIKE
				{
				DebugLocation(254, 4);
				LIKE169=(IToken)Match(input,LIKE,Follow._LIKE_in_op_71478);  
				stream_LIKE.Add(LIKE169);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 254:9: -> T_LIKE
				{
					DebugLocation(254, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_LIKE, "T_LIKE"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:255:4: NOT WS LIKE
				{
				DebugLocation(255, 4);
				NOT170=(IToken)Match(input,NOT,Follow._NOT_in_op_71487);  
				stream_NOT.Add(NOT170);

				DebugLocation(255, 8);
				WS171=(IToken)Match(input,WS,Follow._WS_in_op_71489);  
				stream_WS.Add(WS171);

				DebugLocation(255, 11);
				LIKE172=(IToken)Match(input,LIKE,Follow._LIKE_in_op_71491);  
				stream_LIKE.Add(LIKE172);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 255:16: -> T_NOTLIKE
				{
					DebugLocation(255, 19);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTLIKE, "T_NOTLIKE"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:256:4: MATCH
				{
				DebugLocation(256, 4);
				MATCH173=(IToken)Match(input,MATCH,Follow._MATCH_in_op_71500);  
				stream_MATCH.Add(MATCH173);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 256:10: -> T_MATCH
				{
					DebugLocation(256, 13);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MATCH, "T_MATCH"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:257:4: NOT WS MATCH
				{
				DebugLocation(257, 4);
				NOT174=(IToken)Match(input,NOT,Follow._NOT_in_op_71509);  
				stream_NOT.Add(NOT174);

				DebugLocation(257, 8);
				WS175=(IToken)Match(input,WS,Follow._WS_in_op_71511);  
				stream_WS.Add(WS175);

				DebugLocation(257, 11);
				MATCH176=(IToken)Match(input,MATCH,Follow._MATCH_in_op_71513);  
				stream_MATCH.Add(MATCH176);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 257:17: -> T_NOTMATCH
				{
					DebugLocation(257, 20);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTMATCH, "T_NOTMATCH"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:258:4: BETWEEN
				{
				DebugLocation(258, 4);
				BETWEEN177=(IToken)Match(input,BETWEEN,Follow._BETWEEN_in_op_71522);  
				stream_BETWEEN.Add(BETWEEN177);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 258:12: -> T_BETWEEN
				{
					DebugLocation(258, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BETWEEN, "T_BETWEEN"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:259:4: NOT WS BETWEEN
				{
				DebugLocation(259, 4);
				NOT178=(IToken)Match(input,NOT,Follow._NOT_in_op_71531);  
				stream_NOT.Add(NOT178);

				DebugLocation(259, 8);
				WS179=(IToken)Match(input,WS,Follow._WS_in_op_71533);  
				stream_WS.Add(WS179);

				DebugLocation(259, 11);
				BETWEEN180=(IToken)Match(input,BETWEEN,Follow._BETWEEN_in_op_71535);  
				stream_BETWEEN.Add(BETWEEN180);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 259:19: -> T_NOTBETWEEN
				{
					DebugLocation(259, 22);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTBETWEEN, "T_NOTBETWEEN"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_7", 31);
			LeaveRule("op_7", 31);
			LeaveRule_op_7();
	    }
	 	DebugLocation(260, 1);
		} finally { DebugExitRule(GrammarFileName, "op_7"); }
		return retval;

	}
	// $ANTLR end "op_7"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_6() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_6() {}

	// $ANTLR start "expression_6"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:262:1: expression_6 : (a= expression_5 -> $a) ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )* ;
	[GrammarRule("expression_6")]
	private AstParserRuleReturnScope<object, IToken> expression_6()
	{
		EnterRule_expression_6();
		EnterRule("expression_6", 32);
		TraceIn("expression_6", 32);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS181 = default(IToken);
	    IToken WS183 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_6182 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS181_tree = default(object);
	    object WS183_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_op_6=new RewriteRuleSubtreeStream(adaptor,"rule op_6");
	    RewriteRuleSubtreeStream stream_expression_5=new RewriteRuleSubtreeStream(adaptor,"rule expression_5");
		try { DebugEnterRule(GrammarFileName, "expression_6");
		DebugLocation(262, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:263:2: ( (a= expression_5 -> $a) ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:263:4: (a= expression_5 -> $a) ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )*
			{
			DebugLocation(263, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:263:4: (a= expression_5 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:263:5: a= expression_5
			{
			DebugLocation(263, 6);
			PushFollow(Follow._expression_5_in_expression_61554);
			a=expression_5();
			PopFollow();

			stream_expression_5.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 263:19: -> $a
			{
				DebugLocation(263, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(263, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:263:25: ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )*
			try { DebugEnterSubRule(66);
			while (true)
			{
				int alt66=2;
				try { DebugEnterDecision(66, decisionCanBacktrack[66]);
				int LA66_0 = input.LA(1);

				if ((LA66_0==WS))
				{
					int LA66_1 = input.LA(2);

					if ((LA66_1==AND))
					{
						alt66 = 1;
					}


				}


				} finally { DebugExitDecision(66); }
				switch ( alt66 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:263:26: WS op_6 WS b= expression_5
					{
					DebugLocation(263, 26);
					WS181=(IToken)Match(input,WS,Follow._WS_in_expression_61561);  
					stream_WS.Add(WS181);

					DebugLocation(263, 29);
					PushFollow(Follow._op_6_in_expression_61563);
					op_6182=op_6();
					PopFollow();

					stream_op_6.Add(op_6182.Tree);
					DebugLocation(263, 34);
					WS183=(IToken)Match(input,WS,Follow._WS_in_expression_61565);  
					stream_WS.Add(WS183);

					DebugLocation(263, 38);
					PushFollow(Follow._expression_5_in_expression_61569);
					b=expression_5();
					PopFollow();

					stream_expression_5.Add(b.Tree);


					{
					// AST REWRITE
					// elements: op_6, b, expression_6
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 263:52: -> ^( T_OP_BINARY op_6 $expression_6 $b)
					{
						DebugLocation(263, 55);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:263:55: ^( T_OP_BINARY op_6 $expression_6 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(263, 57);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(263, 69);
						adaptor.AddChild(root_1, stream_op_6.NextTree());
						DebugLocation(263, 75);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(263, 89);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop66;
				}
			}

			loop66:
				;

			} finally { DebugExitSubRule(66); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_6", 32);
			LeaveRule("expression_6", 32);
			LeaveRule_expression_6();
	    }
	 	DebugLocation(264, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_6"); }
		return retval;

	}
	// $ANTLR end "expression_6"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_6() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_6() {}

	// $ANTLR start "op_6"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:266:1: op_6 : AND -> T_AND ;
	[GrammarRule("op_6")]
	private AstParserRuleReturnScope<object, IToken> op_6()
	{
		EnterRule_op_6();
		EnterRule("op_6", 33);
		TraceIn("op_6", 33);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken AND184 = default(IToken);

	    object AND184_tree = default(object);
	    RewriteRuleITokenStream stream_AND=new RewriteRuleITokenStream(adaptor,"token AND");

		try { DebugEnterRule(GrammarFileName, "op_6");
		DebugLocation(266, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:266:6: ( AND -> T_AND )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:266:8: AND
			{
			DebugLocation(266, 8);
			AND184=(IToken)Match(input,AND,Follow._AND_in_op_61597);  
			stream_AND.Add(AND184);



			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 266:12: -> T_AND
			{
				DebugLocation(266, 15);
				adaptor.AddChild(root_0, (object)adaptor.Create(T_AND, "T_AND"));

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_6", 33);
			LeaveRule("op_6", 33);
			LeaveRule_op_6();
	    }
	 	DebugLocation(267, 1);
		} finally { DebugExitRule(GrammarFileName, "op_6"); }
		return retval;

	}
	// $ANTLR end "op_6"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_5() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_5() {}

	// $ANTLR start "expression_5"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:269:1: expression_5 : ( op_5 WS expression_5 -> ^( T_OP_UNARY op_5 expression_5 ) | expression_4 );
	[GrammarRule("expression_5")]
	private AstParserRuleReturnScope<object, IToken> expression_5()
	{
		EnterRule_expression_5();
		EnterRule("expression_5", 34);
		TraceIn("expression_5", 34);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS186 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> op_5185 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_5187 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_4188 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS186_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression_5=new RewriteRuleSubtreeStream(adaptor,"rule expression_5");
	    RewriteRuleSubtreeStream stream_op_5=new RewriteRuleSubtreeStream(adaptor,"rule op_5");
		try { DebugEnterRule(GrammarFileName, "expression_5");
		DebugLocation(269, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:270:2: ( op_5 WS expression_5 -> ^( T_OP_UNARY op_5 expression_5 ) | expression_4 )
			int alt67=2;
			try { DebugEnterDecision(67, decisionCanBacktrack[67]);
			int LA67_0 = input.LA(1);

			if ((LA67_0==NOT))
			{
				alt67 = 1;
			}
			else if (((LA67_0>=CASE && LA67_0<=CAST)||LA67_0==CONVERT||LA67_0==EXISTS||LA67_0==NUMBER||LA67_0==SIMPLE_FILE||(LA67_0>=STRING && LA67_0<=SYSTEMVAR)||LA67_0==TOKEN||LA67_0==VARIABLE||LA67_0==139))
			{
				alt67 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 67, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(67); }
			switch (alt67)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:270:4: op_5 WS expression_5
				{
				DebugLocation(270, 4);
				PushFollow(Follow._op_5_in_expression_51615);
				op_5185=op_5();
				PopFollow();

				stream_op_5.Add(op_5185.Tree);
				DebugLocation(270, 9);
				WS186=(IToken)Match(input,WS,Follow._WS_in_expression_51617);  
				stream_WS.Add(WS186);

				DebugLocation(270, 12);
				PushFollow(Follow._expression_5_in_expression_51619);
				expression_5187=expression_5();
				PopFollow();

				stream_expression_5.Add(expression_5187.Tree);


				{
				// AST REWRITE
				// elements: expression_5, op_5
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 270:25: -> ^( T_OP_UNARY op_5 expression_5 )
				{
					DebugLocation(270, 28);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:270:28: ^( T_OP_UNARY op_5 expression_5 )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(270, 30);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_UNARY, "T_OP_UNARY"), root_1);

					DebugLocation(270, 41);
					adaptor.AddChild(root_1, stream_op_5.NextTree());
					DebugLocation(270, 46);
					adaptor.AddChild(root_1, stream_expression_5.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:271:4: expression_4
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(271, 4);
				PushFollow(Follow._expression_4_in_expression_51634);
				expression_4188=expression_4();
				PopFollow();

				adaptor.AddChild(root_0, expression_4188.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_5", 34);
			LeaveRule("expression_5", 34);
			LeaveRule_expression_5();
	    }
	 	DebugLocation(272, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_5"); }
		return retval;

	}
	// $ANTLR end "expression_5"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_5() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_5() {}

	// $ANTLR start "op_5"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:274:1: op_5 : NOT -> T_NOT ;
	[GrammarRule("op_5")]
	private AstParserRuleReturnScope<object, IToken> op_5()
	{
		EnterRule_op_5();
		EnterRule("op_5", 35);
		TraceIn("op_5", 35);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken NOT189 = default(IToken);

	    object NOT189_tree = default(object);
	    RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");

		try { DebugEnterRule(GrammarFileName, "op_5");
		DebugLocation(274, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:274:7: ( NOT -> T_NOT )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:274:9: NOT
			{
			DebugLocation(274, 9);
			NOT189=(IToken)Match(input,NOT,Follow._NOT_in_op_51645);  
			stream_NOT.Add(NOT189);



			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 274:13: -> T_NOT
			{
				DebugLocation(274, 16);
				adaptor.AddChild(root_0, (object)adaptor.Create(T_NOT, "T_NOT"));

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_5", 35);
			LeaveRule("op_5", 35);
			LeaveRule_op_5();
	    }
	 	DebugLocation(275, 1);
		} finally { DebugExitRule(GrammarFileName, "op_5"); }
		return retval;

	}
	// $ANTLR end "op_5"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_4() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_4() {}

	// $ANTLR start "expression_4"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:277:1: expression_4 : (a= expression_3 -> $a) ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )* ;
	[GrammarRule("expression_4")]
	private AstParserRuleReturnScope<object, IToken> expression_4()
	{
		EnterRule_expression_4();
		EnterRule("expression_4", 36);
		TraceIn("expression_4", 36);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS190 = default(IToken);
	    IToken WS192 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_4191 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS190_tree = default(object);
	    object WS192_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression_3=new RewriteRuleSubtreeStream(adaptor,"rule expression_3");
	    RewriteRuleSubtreeStream stream_op_4=new RewriteRuleSubtreeStream(adaptor,"rule op_4");
		try { DebugEnterRule(GrammarFileName, "expression_4");
		DebugLocation(277, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:278:2: ( (a= expression_3 -> $a) ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:278:4: (a= expression_3 -> $a) ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )*
			{
			DebugLocation(278, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:278:4: (a= expression_3 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:278:5: a= expression_3
			{
			DebugLocation(278, 6);
			PushFollow(Follow._expression_3_in_expression_41664);
			a=expression_3();
			PopFollow();

			stream_expression_3.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 278:19: -> $a
			{
				DebugLocation(278, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(278, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:278:25: ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )*
			try { DebugEnterSubRule(70);
			while (true)
			{
				int alt70=2;
				try { DebugEnterDecision(70, decisionCanBacktrack[70]);
				int LA70_0 = input.LA(1);

				if ((LA70_0==WS))
				{
					switch (input.LA(2))
					{
					case 150:
						{
						int LA70_4 = input.LA(3);

						if ((LA70_4==WS))
						{
							int LA70_13 = input.LA(4);

							if (((LA70_13>=CASE && LA70_13<=CAST)||LA70_13==CONVERT||LA70_13==EXISTS||LA70_13==NUMBER||LA70_13==SIMPLE_FILE||(LA70_13>=STRING && LA70_13<=SYSTEMVAR)||LA70_13==TOKEN||LA70_13==VARIABLE||LA70_13==139))
							{
								alt70 = 1;
							}


						}
						else if (((LA70_4>=CASE && LA70_4<=CAST)||LA70_4==CONVERT||LA70_4==EXISTS||LA70_4==NUMBER||LA70_4==SIMPLE_FILE||(LA70_4>=STRING && LA70_4<=SYSTEMVAR)||LA70_4==TOKEN||LA70_4==VARIABLE||LA70_4==139))
						{
							alt70 = 1;
						}


						}
						break;
					case 152:
						{
						int LA70_5 = input.LA(3);

						if ((LA70_5==WS))
						{
							int LA70_13 = input.LA(4);

							if (((LA70_13>=CASE && LA70_13<=CAST)||LA70_13==CONVERT||LA70_13==EXISTS||LA70_13==NUMBER||LA70_13==SIMPLE_FILE||(LA70_13>=STRING && LA70_13<=SYSTEMVAR)||LA70_13==TOKEN||LA70_13==VARIABLE||LA70_13==139))
							{
								alt70 = 1;
							}


						}
						else if (((LA70_5>=CASE && LA70_5<=CAST)||LA70_5==CONVERT||LA70_5==EXISTS||LA70_5==NUMBER||LA70_5==SIMPLE_FILE||(LA70_5>=STRING && LA70_5<=SYSTEMVAR)||LA70_5==TOKEN||LA70_5==VARIABLE||LA70_5==139))
						{
							alt70 = 1;
						}


						}
						break;
					case 148:
						{
						int LA70_6 = input.LA(3);

						if ((LA70_6==WS))
						{
							int LA70_13 = input.LA(4);

							if (((LA70_13>=CASE && LA70_13<=CAST)||LA70_13==CONVERT||LA70_13==EXISTS||LA70_13==NUMBER||LA70_13==SIMPLE_FILE||(LA70_13>=STRING && LA70_13<=SYSTEMVAR)||LA70_13==TOKEN||LA70_13==VARIABLE||LA70_13==139))
							{
								alt70 = 1;
							}


						}
						else if (((LA70_6>=CASE && LA70_6<=CAST)||LA70_6==CONVERT||LA70_6==EXISTS||LA70_6==NUMBER||LA70_6==SIMPLE_FILE||(LA70_6>=STRING && LA70_6<=SYSTEMVAR)||LA70_6==TOKEN||LA70_6==VARIABLE||LA70_6==139))
						{
							alt70 = 1;
						}


						}
						break;
					case 149:
						{
						int LA70_7 = input.LA(3);

						if ((LA70_7==WS))
						{
							int LA70_13 = input.LA(4);

							if (((LA70_13>=CASE && LA70_13<=CAST)||LA70_13==CONVERT||LA70_13==EXISTS||LA70_13==NUMBER||LA70_13==SIMPLE_FILE||(LA70_13>=STRING && LA70_13<=SYSTEMVAR)||LA70_13==TOKEN||LA70_13==VARIABLE||LA70_13==139))
							{
								alt70 = 1;
							}


						}
						else if (((LA70_7>=CASE && LA70_7<=CAST)||LA70_7==CONVERT||LA70_7==EXISTS||LA70_7==NUMBER||LA70_7==SIMPLE_FILE||(LA70_7>=STRING && LA70_7<=SYSTEMVAR)||LA70_7==TOKEN||LA70_7==VARIABLE||LA70_7==139))
						{
							alt70 = 1;
						}


						}
						break;
					case 135:
						{
						int LA70_8 = input.LA(3);

						if ((LA70_8==WS))
						{
							int LA70_13 = input.LA(4);

							if (((LA70_13>=CASE && LA70_13<=CAST)||LA70_13==CONVERT||LA70_13==EXISTS||LA70_13==NUMBER||LA70_13==SIMPLE_FILE||(LA70_13>=STRING && LA70_13<=SYSTEMVAR)||LA70_13==TOKEN||LA70_13==VARIABLE||LA70_13==139))
							{
								alt70 = 1;
							}


						}
						else if (((LA70_8>=CASE && LA70_8<=CAST)||LA70_8==CONVERT||LA70_8==EXISTS||LA70_8==NUMBER||LA70_8==SIMPLE_FILE||(LA70_8>=STRING && LA70_8<=SYSTEMVAR)||LA70_8==TOKEN||LA70_8==VARIABLE||LA70_8==139))
						{
							alt70 = 1;
						}


						}
						break;
					case 136:
						{
						int LA70_9 = input.LA(3);

						if ((LA70_9==WS))
						{
							int LA70_13 = input.LA(4);

							if (((LA70_13>=CASE && LA70_13<=CAST)||LA70_13==CONVERT||LA70_13==EXISTS||LA70_13==NUMBER||LA70_13==SIMPLE_FILE||(LA70_13>=STRING && LA70_13<=SYSTEMVAR)||LA70_13==TOKEN||LA70_13==VARIABLE||LA70_13==139))
							{
								alt70 = 1;
							}


						}
						else if (((LA70_9>=CASE && LA70_9<=CAST)||LA70_9==CONVERT||LA70_9==EXISTS||LA70_9==NUMBER||LA70_9==SIMPLE_FILE||(LA70_9>=STRING && LA70_9<=SYSTEMVAR)||LA70_9==TOKEN||LA70_9==VARIABLE||LA70_9==139))
						{
							alt70 = 1;
						}


						}
						break;
					case 134:
						{
						int LA70_10 = input.LA(3);

						if ((LA70_10==WS))
						{
							int LA70_13 = input.LA(4);

							if (((LA70_13>=CASE && LA70_13<=CAST)||LA70_13==CONVERT||LA70_13==EXISTS||LA70_13==NUMBER||LA70_13==SIMPLE_FILE||(LA70_13>=STRING && LA70_13<=SYSTEMVAR)||LA70_13==TOKEN||LA70_13==VARIABLE||LA70_13==139))
							{
								alt70 = 1;
							}


						}
						else if (((LA70_10>=CASE && LA70_10<=CAST)||LA70_10==CONVERT||LA70_10==EXISTS||LA70_10==NUMBER||LA70_10==SIMPLE_FILE||(LA70_10>=STRING && LA70_10<=SYSTEMVAR)||LA70_10==TOKEN||LA70_10==VARIABLE||LA70_10==139))
						{
							alt70 = 1;
						}


						}
						break;
					case 151:
						{
						int LA70_11 = input.LA(3);

						if ((LA70_11==WS))
						{
							int LA70_13 = input.LA(4);

							if (((LA70_13>=CASE && LA70_13<=CAST)||LA70_13==CONVERT||LA70_13==EXISTS||LA70_13==NUMBER||LA70_13==SIMPLE_FILE||(LA70_13>=STRING && LA70_13<=SYSTEMVAR)||LA70_13==TOKEN||LA70_13==VARIABLE||LA70_13==139))
							{
								alt70 = 1;
							}


						}
						else if (((LA70_11>=CASE && LA70_11<=CAST)||LA70_11==CONVERT||LA70_11==EXISTS||LA70_11==NUMBER||LA70_11==SIMPLE_FILE||(LA70_11>=STRING && LA70_11<=SYSTEMVAR)||LA70_11==TOKEN||LA70_11==VARIABLE||LA70_11==139))
						{
							alt70 = 1;
						}


						}
						break;
					case 147:
						{
						int LA70_12 = input.LA(3);

						if ((LA70_12==WS))
						{
							int LA70_13 = input.LA(4);

							if (((LA70_13>=CASE && LA70_13<=CAST)||LA70_13==CONVERT||LA70_13==EXISTS||LA70_13==NUMBER||LA70_13==SIMPLE_FILE||(LA70_13>=STRING && LA70_13<=SYSTEMVAR)||LA70_13==TOKEN||LA70_13==VARIABLE||LA70_13==139))
							{
								alt70 = 1;
							}


						}
						else if (((LA70_12>=CASE && LA70_12<=CAST)||LA70_12==CONVERT||LA70_12==EXISTS||LA70_12==NUMBER||LA70_12==SIMPLE_FILE||(LA70_12>=STRING && LA70_12<=SYSTEMVAR)||LA70_12==TOKEN||LA70_12==VARIABLE||LA70_12==139))
						{
							alt70 = 1;
						}


						}
						break;
					}

				}
				else if (((LA70_0>=134 && LA70_0<=136)||(LA70_0>=147 && LA70_0<=152)))
				{
					alt70 = 1;
				}


				} finally { DebugExitDecision(70); }
				switch ( alt70 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:278:26: ( WS )? op_4 ( WS )? b= expression_3
					{
					DebugLocation(278, 26);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:278:26: ( WS )?
					int alt68=2;
					try { DebugEnterSubRule(68);
					try { DebugEnterDecision(68, decisionCanBacktrack[68]);
					int LA68_0 = input.LA(1);

					if ((LA68_0==WS))
					{
						alt68 = 1;
					}
					} finally { DebugExitDecision(68); }
					switch (alt68)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:278:26: WS
						{
						DebugLocation(278, 26);
						WS190=(IToken)Match(input,WS,Follow._WS_in_expression_41671);  
						stream_WS.Add(WS190);


						}
						break;

					}
					} finally { DebugExitSubRule(68); }

					DebugLocation(278, 30);
					PushFollow(Follow._op_4_in_expression_41674);
					op_4191=op_4();
					PopFollow();

					stream_op_4.Add(op_4191.Tree);
					DebugLocation(278, 35);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:278:35: ( WS )?
					int alt69=2;
					try { DebugEnterSubRule(69);
					try { DebugEnterDecision(69, decisionCanBacktrack[69]);
					int LA69_0 = input.LA(1);

					if ((LA69_0==WS))
					{
						alt69 = 1;
					}
					} finally { DebugExitDecision(69); }
					switch (alt69)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:278:35: WS
						{
						DebugLocation(278, 35);
						WS192=(IToken)Match(input,WS,Follow._WS_in_expression_41676);  
						stream_WS.Add(WS192);


						}
						break;

					}
					} finally { DebugExitSubRule(69); }

					DebugLocation(278, 40);
					PushFollow(Follow._expression_3_in_expression_41681);
					b=expression_3();
					PopFollow();

					stream_expression_3.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, op_4, expression_4
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 278:54: -> ^( T_OP_BINARY op_4 $expression_4 $b)
					{
						DebugLocation(278, 57);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:278:57: ^( T_OP_BINARY op_4 $expression_4 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(278, 59);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(278, 71);
						adaptor.AddChild(root_1, stream_op_4.NextTree());
						DebugLocation(278, 77);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(278, 91);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop70;
				}
			}

			loop70:
				;

			} finally { DebugExitSubRule(70); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_4", 36);
			LeaveRule("expression_4", 36);
			LeaveRule_expression_4();
	    }
	 	DebugLocation(279, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_4"); }
		return retval;

	}
	// $ANTLR end "expression_4"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_4() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_4() {}

	// $ANTLR start "op_4"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:281:1: op_4 : ( '=' -> T_EQUAL | '>=' -> T_NOTLESS | '<=' -> T_NOTGREATER | '<>' -> T_NOTEQUAL | '!=' -> T_NOTEQUAL | '!>' -> T_NOTGREATER | '!<' -> T_NOTLESS | '>' -> T_GREATER | '<' -> T_LESS );
	[GrammarRule("op_4")]
	private AstParserRuleReturnScope<object, IToken> op_4()
	{
		EnterRule_op_4();
		EnterRule("op_4", 37);
		TraceIn("op_4", 37);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal193 = default(IToken);
	    IToken string_literal194 = default(IToken);
	    IToken string_literal195 = default(IToken);
	    IToken string_literal196 = default(IToken);
	    IToken string_literal197 = default(IToken);
	    IToken string_literal198 = default(IToken);
	    IToken string_literal199 = default(IToken);
	    IToken char_literal200 = default(IToken);
	    IToken char_literal201 = default(IToken);

	    object char_literal193_tree = default(object);
	    object string_literal194_tree = default(object);
	    object string_literal195_tree = default(object);
	    object string_literal196_tree = default(object);
	    object string_literal197_tree = default(object);
	    object string_literal198_tree = default(object);
	    object string_literal199_tree = default(object);
	    object char_literal200_tree = default(object);
	    object char_literal201_tree = default(object);
	    RewriteRuleITokenStream stream_134=new RewriteRuleITokenStream(adaptor,"token 134");
	    RewriteRuleITokenStream stream_152=new RewriteRuleITokenStream(adaptor,"token 152");
	    RewriteRuleITokenStream stream_135=new RewriteRuleITokenStream(adaptor,"token 135");
	    RewriteRuleITokenStream stream_150=new RewriteRuleITokenStream(adaptor,"token 150");
	    RewriteRuleITokenStream stream_151=new RewriteRuleITokenStream(adaptor,"token 151");
	    RewriteRuleITokenStream stream_147=new RewriteRuleITokenStream(adaptor,"token 147");
	    RewriteRuleITokenStream stream_148=new RewriteRuleITokenStream(adaptor,"token 148");
	    RewriteRuleITokenStream stream_136=new RewriteRuleITokenStream(adaptor,"token 136");
	    RewriteRuleITokenStream stream_149=new RewriteRuleITokenStream(adaptor,"token 149");

		try { DebugEnterRule(GrammarFileName, "op_4");
		DebugLocation(281, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:281:6: ( '=' -> T_EQUAL | '>=' -> T_NOTLESS | '<=' -> T_NOTGREATER | '<>' -> T_NOTEQUAL | '!=' -> T_NOTEQUAL | '!>' -> T_NOTGREATER | '!<' -> T_NOTLESS | '>' -> T_GREATER | '<' -> T_LESS )
			int alt71=9;
			try { DebugEnterDecision(71, decisionCanBacktrack[71]);
			switch (input.LA(1))
			{
			case 150:
				{
				alt71 = 1;
				}
				break;
			case 152:
				{
				alt71 = 2;
				}
				break;
			case 148:
				{
				alt71 = 3;
				}
				break;
			case 149:
				{
				alt71 = 4;
				}
				break;
			case 135:
				{
				alt71 = 5;
				}
				break;
			case 136:
				{
				alt71 = 6;
				}
				break;
			case 134:
				{
				alt71 = 7;
				}
				break;
			case 151:
				{
				alt71 = 8;
				}
				break;
			case 147:
				{
				alt71 = 9;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 71, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(71); }
			switch (alt71)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:281:8: '='
				{
				DebugLocation(281, 8);
				char_literal193=(IToken)Match(input,150,Follow._150_in_op_41707);  
				stream_150.Add(char_literal193);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 281:12: -> T_EQUAL
				{
					DebugLocation(281, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_EQUAL, "T_EQUAL"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:282:4: '>='
				{
				DebugLocation(282, 4);
				string_literal194=(IToken)Match(input,152,Follow._152_in_op_41716);  
				stream_152.Add(string_literal194);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 282:9: -> T_NOTLESS
				{
					DebugLocation(282, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTLESS, "T_NOTLESS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:283:4: '<='
				{
				DebugLocation(283, 4);
				string_literal195=(IToken)Match(input,148,Follow._148_in_op_41726);  
				stream_148.Add(string_literal195);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 283:9: -> T_NOTGREATER
				{
					DebugLocation(283, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTGREATER, "T_NOTGREATER"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:284:4: '<>'
				{
				DebugLocation(284, 4);
				string_literal196=(IToken)Match(input,149,Follow._149_in_op_41736);  
				stream_149.Add(string_literal196);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 284:9: -> T_NOTEQUAL
				{
					DebugLocation(284, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTEQUAL, "T_NOTEQUAL"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:285:4: '!='
				{
				DebugLocation(285, 4);
				string_literal197=(IToken)Match(input,135,Follow._135_in_op_41745);  
				stream_135.Add(string_literal197);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 285:9: -> T_NOTEQUAL
				{
					DebugLocation(285, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTEQUAL, "T_NOTEQUAL"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:286:4: '!>'
				{
				DebugLocation(286, 4);
				string_literal198=(IToken)Match(input,136,Follow._136_in_op_41754);  
				stream_136.Add(string_literal198);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 286:9: -> T_NOTGREATER
				{
					DebugLocation(286, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTGREATER, "T_NOTGREATER"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:287:4: '!<'
				{
				DebugLocation(287, 4);
				string_literal199=(IToken)Match(input,134,Follow._134_in_op_41763);  
				stream_134.Add(string_literal199);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 287:9: -> T_NOTLESS
				{
					DebugLocation(287, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTLESS, "T_NOTLESS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:288:4: '>'
				{
				DebugLocation(288, 4);
				char_literal200=(IToken)Match(input,151,Follow._151_in_op_41772);  
				stream_151.Add(char_literal200);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 288:8: -> T_GREATER
				{
					DebugLocation(288, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_GREATER, "T_GREATER"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:289:4: '<'
				{
				DebugLocation(289, 4);
				char_literal201=(IToken)Match(input,147,Follow._147_in_op_41782);  
				stream_147.Add(char_literal201);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 289:8: -> T_LESS
				{
					DebugLocation(289, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_LESS, "T_LESS"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_4", 37);
			LeaveRule("op_4", 37);
			LeaveRule_op_4();
	    }
	 	DebugLocation(290, 1);
		} finally { DebugExitRule(GrammarFileName, "op_4"); }
		return retval;

	}
	// $ANTLR end "op_4"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_3() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_3() {}

	// $ANTLR start "expression_3"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:292:1: expression_3 : (a= expression_2 -> $a) ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )* ;
	[GrammarRule("expression_3")]
	private AstParserRuleReturnScope<object, IToken> expression_3()
	{
		EnterRule_expression_3();
		EnterRule("expression_3", 38);
		TraceIn("expression_3", 38);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS202 = default(IToken);
	    IToken WS204 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_3203 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS202_tree = default(object);
	    object WS204_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_op_3=new RewriteRuleSubtreeStream(adaptor,"rule op_3");
	    RewriteRuleSubtreeStream stream_expression_2=new RewriteRuleSubtreeStream(adaptor,"rule expression_2");
		try { DebugEnterRule(GrammarFileName, "expression_3");
		DebugLocation(292, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:293:2: ( (a= expression_2 -> $a) ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:293:4: (a= expression_2 -> $a) ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )*
			{
			DebugLocation(293, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:293:4: (a= expression_2 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:293:5: a= expression_2
			{
			DebugLocation(293, 6);
			PushFollow(Follow._expression_2_in_expression_31801);
			a=expression_2();
			PopFollow();

			stream_expression_2.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 293:19: -> $a
			{
				DebugLocation(293, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(293, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:293:25: ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )*
			try { DebugEnterSubRule(74);
			while (true)
			{
				int alt74=2;
				try { DebugEnterDecision(74, decisionCanBacktrack[74]);
				int LA74_0 = input.LA(1);

				if ((LA74_0==WS))
				{
					int LA74_1 = input.LA(2);

					if ((LA74_1==138||LA74_1==142||LA74_1==144||(LA74_1>=155 && LA74_1<=156)))
					{
						alt74 = 1;
					}


				}
				else if ((LA74_0==138||LA74_0==142||LA74_0==144||(LA74_0>=155 && LA74_0<=156)))
				{
					alt74 = 1;
				}


				} finally { DebugExitDecision(74); }
				switch ( alt74 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:293:26: ( WS )? op_3 ( WS )? b= expression_2
					{
					DebugLocation(293, 26);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:293:26: ( WS )?
					int alt72=2;
					try { DebugEnterSubRule(72);
					try { DebugEnterDecision(72, decisionCanBacktrack[72]);
					int LA72_0 = input.LA(1);

					if ((LA72_0==WS))
					{
						alt72 = 1;
					}
					} finally { DebugExitDecision(72); }
					switch (alt72)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:293:26: WS
						{
						DebugLocation(293, 26);
						WS202=(IToken)Match(input,WS,Follow._WS_in_expression_31808);  
						stream_WS.Add(WS202);


						}
						break;

					}
					} finally { DebugExitSubRule(72); }

					DebugLocation(293, 30);
					PushFollow(Follow._op_3_in_expression_31811);
					op_3203=op_3();
					PopFollow();

					stream_op_3.Add(op_3203.Tree);
					DebugLocation(293, 35);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:293:35: ( WS )?
					int alt73=2;
					try { DebugEnterSubRule(73);
					try { DebugEnterDecision(73, decisionCanBacktrack[73]);
					int LA73_0 = input.LA(1);

					if ((LA73_0==WS))
					{
						alt73 = 1;
					}
					} finally { DebugExitDecision(73); }
					switch (alt73)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:293:35: WS
						{
						DebugLocation(293, 35);
						WS204=(IToken)Match(input,WS,Follow._WS_in_expression_31813);  
						stream_WS.Add(WS204);


						}
						break;

					}
					} finally { DebugExitSubRule(73); }

					DebugLocation(293, 40);
					PushFollow(Follow._expression_2_in_expression_31818);
					b=expression_2();
					PopFollow();

					stream_expression_2.Add(b.Tree);


					{
					// AST REWRITE
					// elements: expression_3, op_3, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 293:54: -> ^( T_OP_BINARY op_3 $expression_3 $b)
					{
						DebugLocation(293, 57);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:293:57: ^( T_OP_BINARY op_3 $expression_3 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(293, 59);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(293, 71);
						adaptor.AddChild(root_1, stream_op_3.NextTree());
						DebugLocation(293, 77);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(293, 91);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop74;
				}
			}

			loop74:
				;

			} finally { DebugExitSubRule(74); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_3", 38);
			LeaveRule("expression_3", 38);
			LeaveRule_expression_3();
	    }
	 	DebugLocation(294, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_3"); }
		return retval;

	}
	// $ANTLR end "expression_3"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_3() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_3() {}

	// $ANTLR start "op_3"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:296:1: op_3 : ( '+' -> T_PLUS | '-' -> T_MINUS | '&' -> T_BITWISE_AND | '|' -> T_BITWISE_OR | '^' -> T_BITWISE_XOR );
	[GrammarRule("op_3")]
	private AstParserRuleReturnScope<object, IToken> op_3()
	{
		EnterRule_op_3();
		EnterRule("op_3", 39);
		TraceIn("op_3", 39);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal205 = default(IToken);
	    IToken char_literal206 = default(IToken);
	    IToken char_literal207 = default(IToken);
	    IToken char_literal208 = default(IToken);
	    IToken char_literal209 = default(IToken);

	    object char_literal205_tree = default(object);
	    object char_literal206_tree = default(object);
	    object char_literal207_tree = default(object);
	    object char_literal208_tree = default(object);
	    object char_literal209_tree = default(object);
	    RewriteRuleITokenStream stream_144=new RewriteRuleITokenStream(adaptor,"token 144");
	    RewriteRuleITokenStream stream_138=new RewriteRuleITokenStream(adaptor,"token 138");
	    RewriteRuleITokenStream stream_156=new RewriteRuleITokenStream(adaptor,"token 156");
	    RewriteRuleITokenStream stream_155=new RewriteRuleITokenStream(adaptor,"token 155");
	    RewriteRuleITokenStream stream_142=new RewriteRuleITokenStream(adaptor,"token 142");

		try { DebugEnterRule(GrammarFileName, "op_3");
		DebugLocation(296, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:296:6: ( '+' -> T_PLUS | '-' -> T_MINUS | '&' -> T_BITWISE_AND | '|' -> T_BITWISE_OR | '^' -> T_BITWISE_XOR )
			int alt75=5;
			try { DebugEnterDecision(75, decisionCanBacktrack[75]);
			switch (input.LA(1))
			{
			case 142:
				{
				alt75 = 1;
				}
				break;
			case 144:
				{
				alt75 = 2;
				}
				break;
			case 138:
				{
				alt75 = 3;
				}
				break;
			case 156:
				{
				alt75 = 4;
				}
				break;
			case 155:
				{
				alt75 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 75, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(75); }
			switch (alt75)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:296:8: '+'
				{
				DebugLocation(296, 8);
				char_literal205=(IToken)Match(input,142,Follow._142_in_op_31844);  
				stream_142.Add(char_literal205);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 296:12: -> T_PLUS
				{
					DebugLocation(296, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_PLUS, "T_PLUS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:297:4: '-'
				{
				DebugLocation(297, 4);
				char_literal206=(IToken)Match(input,144,Follow._144_in_op_31853);  
				stream_144.Add(char_literal206);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 297:8: -> T_MINUS
				{
					DebugLocation(297, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MINUS, "T_MINUS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:298:4: '&'
				{
				DebugLocation(298, 4);
				char_literal207=(IToken)Match(input,138,Follow._138_in_op_31862);  
				stream_138.Add(char_literal207);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 298:8: -> T_BITWISE_AND
				{
					DebugLocation(298, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_AND, "T_BITWISE_AND"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:299:4: '|'
				{
				DebugLocation(299, 4);
				char_literal208=(IToken)Match(input,156,Follow._156_in_op_31871);  
				stream_156.Add(char_literal208);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 299:8: -> T_BITWISE_OR
				{
					DebugLocation(299, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_OR, "T_BITWISE_OR"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:300:4: '^'
				{
				DebugLocation(300, 4);
				char_literal209=(IToken)Match(input,155,Follow._155_in_op_31880);  
				stream_155.Add(char_literal209);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 300:8: -> T_BITWISE_XOR
				{
					DebugLocation(300, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_XOR, "T_BITWISE_XOR"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_3", 39);
			LeaveRule("op_3", 39);
			LeaveRule_op_3();
	    }
	 	DebugLocation(301, 1);
		} finally { DebugExitRule(GrammarFileName, "op_3"); }
		return retval;

	}
	// $ANTLR end "op_3"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_2() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_2() {}

	// $ANTLR start "expression_2"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:309:1: expression_2 : (a= expression_1 -> $a) ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )* ;
	[GrammarRule("expression_2")]
	private AstParserRuleReturnScope<object, IToken> expression_2()
	{
		EnterRule_expression_2();
		EnterRule("expression_2", 40);
		TraceIn("expression_2", 40);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS210 = default(IToken);
	    IToken WS212 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_2211 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS210_tree = default(object);
	    object WS212_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_op_2=new RewriteRuleSubtreeStream(adaptor,"rule op_2");
	    RewriteRuleSubtreeStream stream_expression_1=new RewriteRuleSubtreeStream(adaptor,"rule expression_1");
		try { DebugEnterRule(GrammarFileName, "expression_2");
		DebugLocation(309, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:310:2: ( (a= expression_1 -> $a) ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:310:4: (a= expression_1 -> $a) ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )*
			{
			DebugLocation(310, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:310:4: (a= expression_1 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:310:5: a= expression_1
			{
			DebugLocation(310, 6);
			PushFollow(Follow._expression_1_in_expression_21902);
			a=expression_1();
			PopFollow();

			stream_expression_1.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 310:19: -> $a
			{
				DebugLocation(310, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(310, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:310:25: ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )*
			try { DebugEnterSubRule(78);
			while (true)
			{
				int alt78=2;
				try { DebugEnterDecision(78, decisionCanBacktrack[78]);
				int LA78_0 = input.LA(1);

				if ((LA78_0==WS))
				{
					int LA78_1 = input.LA(2);

					if ((LA78_1==141))
					{
						int LA78_4 = input.LA(3);

						if ((LA78_4==WS))
						{
							int LA78_5 = input.LA(4);

							if (((LA78_5>=CASE && LA78_5<=CAST)||LA78_5==CONVERT||LA78_5==EXISTS||LA78_5==NUMBER||LA78_5==SIMPLE_FILE||(LA78_5>=STRING && LA78_5<=SYSTEMVAR)||LA78_5==TOKEN||LA78_5==VARIABLE||LA78_5==139))
							{
								alt78 = 1;
							}


						}
						else if (((LA78_4>=CASE && LA78_4<=CAST)||LA78_4==CONVERT||LA78_4==EXISTS||LA78_4==NUMBER||LA78_4==SIMPLE_FILE||(LA78_4>=STRING && LA78_4<=SYSTEMVAR)||LA78_4==TOKEN||LA78_4==VARIABLE||LA78_4==139))
						{
							alt78 = 1;
						}


					}
					else if ((LA78_1==137||LA78_1==145))
					{
						alt78 = 1;
					}


				}
				else if ((LA78_0==137||LA78_0==141||LA78_0==145))
				{
					alt78 = 1;
				}


				} finally { DebugExitDecision(78); }
				switch ( alt78 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:310:26: ( WS )? op_2 ( WS )? b= expression_1
					{
					DebugLocation(310, 26);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:310:26: ( WS )?
					int alt76=2;
					try { DebugEnterSubRule(76);
					try { DebugEnterDecision(76, decisionCanBacktrack[76]);
					int LA76_0 = input.LA(1);

					if ((LA76_0==WS))
					{
						alt76 = 1;
					}
					} finally { DebugExitDecision(76); }
					switch (alt76)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:310:26: WS
						{
						DebugLocation(310, 26);
						WS210=(IToken)Match(input,WS,Follow._WS_in_expression_21909);  
						stream_WS.Add(WS210);


						}
						break;

					}
					} finally { DebugExitSubRule(76); }

					DebugLocation(310, 30);
					PushFollow(Follow._op_2_in_expression_21912);
					op_2211=op_2();
					PopFollow();

					stream_op_2.Add(op_2211.Tree);
					DebugLocation(310, 35);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:310:35: ( WS )?
					int alt77=2;
					try { DebugEnterSubRule(77);
					try { DebugEnterDecision(77, decisionCanBacktrack[77]);
					int LA77_0 = input.LA(1);

					if ((LA77_0==WS))
					{
						alt77 = 1;
					}
					} finally { DebugExitDecision(77); }
					switch (alt77)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:310:35: WS
						{
						DebugLocation(310, 35);
						WS212=(IToken)Match(input,WS,Follow._WS_in_expression_21914);  
						stream_WS.Add(WS212);


						}
						break;

					}
					} finally { DebugExitSubRule(77); }

					DebugLocation(310, 40);
					PushFollow(Follow._expression_1_in_expression_21919);
					b=expression_1();
					PopFollow();

					stream_expression_1.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, expression_2, op_2
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 310:54: -> ^( T_OP_BINARY op_2 $expression_2 $b)
					{
						DebugLocation(310, 57);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:310:57: ^( T_OP_BINARY op_2 $expression_2 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(310, 59);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(310, 71);
						adaptor.AddChild(root_1, stream_op_2.NextTree());
						DebugLocation(310, 77);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(310, 91);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop78;
				}
			}

			loop78:
				;

			} finally { DebugExitSubRule(78); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_2", 40);
			LeaveRule("expression_2", 40);
			LeaveRule_expression_2();
	    }
	 	DebugLocation(311, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_2"); }
		return retval;

	}
	// $ANTLR end "expression_2"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_2() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_2() {}

	// $ANTLR start "op_2"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:313:1: op_2 : ( '*' -> T_PRODUCT | '/' -> T_DIVIDE | '%' -> T_MODULO );
	[GrammarRule("op_2")]
	private AstParserRuleReturnScope<object, IToken> op_2()
	{
		EnterRule_op_2();
		EnterRule("op_2", 41);
		TraceIn("op_2", 41);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal213 = default(IToken);
	    IToken char_literal214 = default(IToken);
	    IToken char_literal215 = default(IToken);

	    object char_literal213_tree = default(object);
	    object char_literal214_tree = default(object);
	    object char_literal215_tree = default(object);
	    RewriteRuleITokenStream stream_145=new RewriteRuleITokenStream(adaptor,"token 145");
	    RewriteRuleITokenStream stream_137=new RewriteRuleITokenStream(adaptor,"token 137");
	    RewriteRuleITokenStream stream_141=new RewriteRuleITokenStream(adaptor,"token 141");

		try { DebugEnterRule(GrammarFileName, "op_2");
		DebugLocation(313, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:313:6: ( '*' -> T_PRODUCT | '/' -> T_DIVIDE | '%' -> T_MODULO )
			int alt79=3;
			try { DebugEnterDecision(79, decisionCanBacktrack[79]);
			switch (input.LA(1))
			{
			case 141:
				{
				alt79 = 1;
				}
				break;
			case 145:
				{
				alt79 = 2;
				}
				break;
			case 137:
				{
				alt79 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 79, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(79); }
			switch (alt79)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:313:8: '*'
				{
				DebugLocation(313, 8);
				char_literal213=(IToken)Match(input,141,Follow._141_in_op_21945);  
				stream_141.Add(char_literal213);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 313:12: -> T_PRODUCT
				{
					DebugLocation(313, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_PRODUCT, "T_PRODUCT"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:314:4: '/'
				{
				DebugLocation(314, 4);
				char_literal214=(IToken)Match(input,145,Follow._145_in_op_21954);  
				stream_145.Add(char_literal214);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 314:8: -> T_DIVIDE
				{
					DebugLocation(314, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_DIVIDE, "T_DIVIDE"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:315:4: '%'
				{
				DebugLocation(315, 4);
				char_literal215=(IToken)Match(input,137,Follow._137_in_op_21963);  
				stream_137.Add(char_literal215);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 315:8: -> T_MODULO
				{
					DebugLocation(315, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MODULO, "T_MODULO"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_2", 41);
			LeaveRule("op_2", 41);
			LeaveRule_op_2();
	    }
	 	DebugLocation(316, 1);
		} finally { DebugExitRule(GrammarFileName, "op_2"); }
		return retval;

	}
	// $ANTLR end "op_2"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_1() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_1() {}

	// $ANTLR start "expression_1"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:318:1: expression_1 : ( '(' ( WS )? op_1 ( WS )? expression_1 ( WS )? ')' -> ^( T_OP_UNARY op_1 expression_1 ) | expression_atom );
	[GrammarRule("expression_1")]
	private AstParserRuleReturnScope<object, IToken> expression_1()
	{
		EnterRule_expression_1();
		EnterRule("expression_1", 42);
		TraceIn("expression_1", 42);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal216 = default(IToken);
	    IToken WS217 = default(IToken);
	    IToken WS219 = default(IToken);
	    IToken WS221 = default(IToken);
	    IToken char_literal222 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> op_1218 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_1220 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_atom223 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal216_tree = default(object);
	    object WS217_tree = default(object);
	    object WS219_tree = default(object);
	    object WS221_tree = default(object);
	    object char_literal222_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_139=new RewriteRuleITokenStream(adaptor,"token 139");
	    RewriteRuleITokenStream stream_140=new RewriteRuleITokenStream(adaptor,"token 140");
	    RewriteRuleSubtreeStream stream_expression_1=new RewriteRuleSubtreeStream(adaptor,"rule expression_1");
	    RewriteRuleSubtreeStream stream_op_1=new RewriteRuleSubtreeStream(adaptor,"rule op_1");
		try { DebugEnterRule(GrammarFileName, "expression_1");
		DebugLocation(318, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:320:2: ( '(' ( WS )? op_1 ( WS )? expression_1 ( WS )? ')' -> ^( T_OP_UNARY op_1 expression_1 ) | expression_atom )
			int alt83=2;
			try { DebugEnterDecision(83, decisionCanBacktrack[83]);
			int LA83_0 = input.LA(1);

			if ((LA83_0==139))
			{
				switch (input.LA(2))
				{
				case WS:
					{
					int LA83_3 = input.LA(3);

					if ((LA83_3==142||LA83_3==144||LA83_3==157))
					{
						alt83 = 1;
					}
					else if ((LA83_3==SELECT))
					{
						alt83 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 83, 3, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 142:
				case 144:
				case 157:
					{
					alt83 = 1;
					}
					break;
				case CASE:
				case CAST:
				case CONVERT:
				case EXISTS:
				case NOT:
				case NUMBER:
				case SELECT:
				case SIMPLE_FILE:
				case STRING:
				case SYSTEMVAR:
				case TOKEN:
				case VARIABLE:
				case 139:
					{
					alt83 = 2;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 83, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else if (((LA83_0>=CASE && LA83_0<=CAST)||LA83_0==CONVERT||LA83_0==EXISTS||LA83_0==NUMBER||LA83_0==SIMPLE_FILE||(LA83_0>=STRING && LA83_0<=SYSTEMVAR)||LA83_0==TOKEN||LA83_0==VARIABLE))
			{
				alt83 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 83, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(83); }
			switch (alt83)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:320:4: '(' ( WS )? op_1 ( WS )? expression_1 ( WS )? ')'
				{
				DebugLocation(320, 4);
				char_literal216=(IToken)Match(input,139,Follow._139_in_expression_11981);  
				stream_139.Add(char_literal216);

				DebugLocation(320, 8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:320:8: ( WS )?
				int alt80=2;
				try { DebugEnterSubRule(80);
				try { DebugEnterDecision(80, decisionCanBacktrack[80]);
				int LA80_0 = input.LA(1);

				if ((LA80_0==WS))
				{
					alt80 = 1;
				}
				} finally { DebugExitDecision(80); }
				switch (alt80)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:320:8: WS
					{
					DebugLocation(320, 8);
					WS217=(IToken)Match(input,WS,Follow._WS_in_expression_11983);  
					stream_WS.Add(WS217);


					}
					break;

				}
				} finally { DebugExitSubRule(80); }

				DebugLocation(320, 12);
				PushFollow(Follow._op_1_in_expression_11986);
				op_1218=op_1();
				PopFollow();

				stream_op_1.Add(op_1218.Tree);
				DebugLocation(320, 17);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:320:17: ( WS )?
				int alt81=2;
				try { DebugEnterSubRule(81);
				try { DebugEnterDecision(81, decisionCanBacktrack[81]);
				int LA81_0 = input.LA(1);

				if ((LA81_0==WS))
				{
					alt81 = 1;
				}
				} finally { DebugExitDecision(81); }
				switch (alt81)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:320:17: WS
					{
					DebugLocation(320, 17);
					WS219=(IToken)Match(input,WS,Follow._WS_in_expression_11988);  
					stream_WS.Add(WS219);


					}
					break;

				}
				} finally { DebugExitSubRule(81); }

				DebugLocation(320, 21);
				PushFollow(Follow._expression_1_in_expression_11991);
				expression_1220=expression_1();
				PopFollow();

				stream_expression_1.Add(expression_1220.Tree);
				DebugLocation(320, 34);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:320:34: ( WS )?
				int alt82=2;
				try { DebugEnterSubRule(82);
				try { DebugEnterDecision(82, decisionCanBacktrack[82]);
				int LA82_0 = input.LA(1);

				if ((LA82_0==WS))
				{
					alt82 = 1;
				}
				} finally { DebugExitDecision(82); }
				switch (alt82)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:320:34: WS
					{
					DebugLocation(320, 34);
					WS221=(IToken)Match(input,WS,Follow._WS_in_expression_11993);  
					stream_WS.Add(WS221);


					}
					break;

				}
				} finally { DebugExitSubRule(82); }

				DebugLocation(320, 38);
				char_literal222=(IToken)Match(input,140,Follow._140_in_expression_11996);  
				stream_140.Add(char_literal222);



				{
				// AST REWRITE
				// elements: op_1, expression_1
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 320:42: -> ^( T_OP_UNARY op_1 expression_1 )
				{
					DebugLocation(320, 45);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:320:45: ^( T_OP_UNARY op_1 expression_1 )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(320, 47);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_UNARY, "T_OP_UNARY"), root_1);

					DebugLocation(320, 58);
					adaptor.AddChild(root_1, stream_op_1.NextTree());
					DebugLocation(320, 63);
					adaptor.AddChild(root_1, stream_expression_1.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:322:4: expression_atom
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(322, 4);
				PushFollow(Follow._expression_atom_in_expression_12013);
				expression_atom223=expression_atom();
				PopFollow();

				adaptor.AddChild(root_0, expression_atom223.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_1", 42);
			LeaveRule("expression_1", 42);
			LeaveRule_expression_1();
	    }
	 	DebugLocation(323, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_1"); }
		return retval;

	}
	// $ANTLR end "expression_1"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_1() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_1() {}

	// $ANTLR start "op_1"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:325:1: op_1 : ( '~' -> T_BITWISE_NOT | '+' -> T_PLUS | '-' -> T_MINUS );
	[GrammarRule("op_1")]
	private AstParserRuleReturnScope<object, IToken> op_1()
	{
		EnterRule_op_1();
		EnterRule("op_1", 43);
		TraceIn("op_1", 43);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal224 = default(IToken);
	    IToken char_literal225 = default(IToken);
	    IToken char_literal226 = default(IToken);

	    object char_literal224_tree = default(object);
	    object char_literal225_tree = default(object);
	    object char_literal226_tree = default(object);
	    RewriteRuleITokenStream stream_144=new RewriteRuleITokenStream(adaptor,"token 144");
	    RewriteRuleITokenStream stream_157=new RewriteRuleITokenStream(adaptor,"token 157");
	    RewriteRuleITokenStream stream_142=new RewriteRuleITokenStream(adaptor,"token 142");

		try { DebugEnterRule(GrammarFileName, "op_1");
		DebugLocation(325, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:325:6: ( '~' -> T_BITWISE_NOT | '+' -> T_PLUS | '-' -> T_MINUS )
			int alt84=3;
			try { DebugEnterDecision(84, decisionCanBacktrack[84]);
			switch (input.LA(1))
			{
			case 157:
				{
				alt84 = 1;
				}
				break;
			case 142:
				{
				alt84 = 2;
				}
				break;
			case 144:
				{
				alt84 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 84, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(84); }
			switch (alt84)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:325:8: '~'
				{
				DebugLocation(325, 8);
				char_literal224=(IToken)Match(input,157,Follow._157_in_op_12023);  
				stream_157.Add(char_literal224);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 325:12: -> T_BITWISE_NOT
				{
					DebugLocation(325, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_NOT, "T_BITWISE_NOT"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:326:5: '+'
				{
				DebugLocation(326, 5);
				char_literal225=(IToken)Match(input,142,Follow._142_in_op_12033);  
				stream_142.Add(char_literal225);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 326:9: -> T_PLUS
				{
					DebugLocation(326, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_PLUS, "T_PLUS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:327:4: '-'
				{
				DebugLocation(327, 4);
				char_literal226=(IToken)Match(input,144,Follow._144_in_op_12042);  
				stream_144.Add(char_literal226);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 327:8: -> T_MINUS
				{
					DebugLocation(327, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MINUS, "T_MINUS"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_1", 43);
			LeaveRule("op_1", 43);
			LeaveRule_op_1();
	    }
	 	DebugLocation(328, 1);
		} finally { DebugExitRule(GrammarFileName, "op_1"); }
		return retval;

	}
	// $ANTLR end "op_1"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_atom() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_atom() {}

	// $ANTLR start "expression_atom"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:330:1: expression_atom : ( NUMBER -> ^( T_INTEGER NUMBER ) | STRING -> ^( T_STRING STRING ) | SYSTEMVAR -> ^( T_SYSTEMVAR SYSTEMVAR ) | VARIABLE -> ^( T_VARIABLE VARIABLE ) | subquery | '(' expression ')' -> expression | functioncall_or_column | conversion | case | EXISTS ( WS )? '(' ( WS )? select_command ( WS )? ')' -> ^( T_EXISTS select_command ) );
	[GrammarRule("expression_atom")]
	private AstParserRuleReturnScope<object, IToken> expression_atom()
	{
		EnterRule_expression_atom();
		EnterRule("expression_atom", 44);
		TraceIn("expression_atom", 44);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken NUMBER227 = default(IToken);
	    IToken STRING228 = default(IToken);
	    IToken SYSTEMVAR229 = default(IToken);
	    IToken VARIABLE230 = default(IToken);
	    IToken char_literal232 = default(IToken);
	    IToken char_literal234 = default(IToken);
	    IToken EXISTS238 = default(IToken);
	    IToken WS239 = default(IToken);
	    IToken char_literal240 = default(IToken);
	    IToken WS241 = default(IToken);
	    IToken WS243 = default(IToken);
	    IToken char_literal244 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> subquery231 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression233 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> functioncall_or_column235 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> conversion236 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> case237 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> select_command242 = default(AstParserRuleReturnScope<object, IToken>);

	    object NUMBER227_tree = default(object);
	    object STRING228_tree = default(object);
	    object SYSTEMVAR229_tree = default(object);
	    object VARIABLE230_tree = default(object);
	    object char_literal232_tree = default(object);
	    object char_literal234_tree = default(object);
	    object EXISTS238_tree = default(object);
	    object WS239_tree = default(object);
	    object char_literal240_tree = default(object);
	    object WS241_tree = default(object);
	    object WS243_tree = default(object);
	    object char_literal244_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_139=new RewriteRuleITokenStream(adaptor,"token 139");
	    RewriteRuleITokenStream stream_EXISTS=new RewriteRuleITokenStream(adaptor,"token EXISTS");
	    RewriteRuleITokenStream stream_VARIABLE=new RewriteRuleITokenStream(adaptor,"token VARIABLE");
	    RewriteRuleITokenStream stream_SYSTEMVAR=new RewriteRuleITokenStream(adaptor,"token SYSTEMVAR");
	    RewriteRuleITokenStream stream_140=new RewriteRuleITokenStream(adaptor,"token 140");
	    RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
	    RewriteRuleITokenStream stream_NUMBER=new RewriteRuleITokenStream(adaptor,"token NUMBER");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_select_command=new RewriteRuleSubtreeStream(adaptor,"rule select_command");
		try { DebugEnterRule(GrammarFileName, "expression_atom");
		DebugLocation(330, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:331:2: ( NUMBER -> ^( T_INTEGER NUMBER ) | STRING -> ^( T_STRING STRING ) | SYSTEMVAR -> ^( T_SYSTEMVAR SYSTEMVAR ) | VARIABLE -> ^( T_VARIABLE VARIABLE ) | subquery | '(' expression ')' -> expression | functioncall_or_column | conversion | case | EXISTS ( WS )? '(' ( WS )? select_command ( WS )? ')' -> ^( T_EXISTS select_command ) )
			int alt88=10;
			try { DebugEnterDecision(88, decisionCanBacktrack[88]);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt88 = 1;
				}
				break;
			case STRING:
				{
				alt88 = 2;
				}
				break;
			case SYSTEMVAR:
				{
				alt88 = 3;
				}
				break;
			case VARIABLE:
				{
				alt88 = 4;
				}
				break;
			case 139:
				{
				int LA88_5 = input.LA(2);

				if ((LA88_5==SELECT||LA88_5==WS))
				{
					alt88 = 5;
				}
				else if (((LA88_5>=CASE && LA88_5<=CAST)||LA88_5==CONVERT||LA88_5==EXISTS||(LA88_5>=NOT && LA88_5<=NUMBER)||LA88_5==SIMPLE_FILE||(LA88_5>=STRING && LA88_5<=SYSTEMVAR)||LA88_5==TOKEN||LA88_5==VARIABLE||LA88_5==139))
				{
					alt88 = 6;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 88, 5, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SIMPLE_FILE:
			case TOKEN:
				{
				alt88 = 7;
				}
				break;
			case CAST:
			case CONVERT:
				{
				alt88 = 8;
				}
				break;
			case CASE:
				{
				alt88 = 9;
				}
				break;
			case EXISTS:
				{
				alt88 = 10;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 88, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(88); }
			switch (alt88)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:331:4: NUMBER
				{
				DebugLocation(331, 4);
				NUMBER227=(IToken)Match(input,NUMBER,Follow._NUMBER_in_expression_atom2057);  
				stream_NUMBER.Add(NUMBER227);



				{
				// AST REWRITE
				// elements: NUMBER
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 331:11: -> ^( T_INTEGER NUMBER )
				{
					DebugLocation(331, 14);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:331:14: ^( T_INTEGER NUMBER )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(331, 16);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_INTEGER, "T_INTEGER"), root_1);

					DebugLocation(331, 26);
					adaptor.AddChild(root_1, stream_NUMBER.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:332:4: STRING
				{
				DebugLocation(332, 4);
				STRING228=(IToken)Match(input,STRING,Follow._STRING_in_expression_atom2070);  
				stream_STRING.Add(STRING228);



				{
				// AST REWRITE
				// elements: STRING
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 332:11: -> ^( T_STRING STRING )
				{
					DebugLocation(332, 14);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:332:14: ^( T_STRING STRING )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(332, 16);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_STRING, "T_STRING"), root_1);

					DebugLocation(332, 25);
					adaptor.AddChild(root_1, stream_STRING.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:333:4: SYSTEMVAR
				{
				DebugLocation(333, 4);
				SYSTEMVAR229=(IToken)Match(input,SYSTEMVAR,Follow._SYSTEMVAR_in_expression_atom2083);  
				stream_SYSTEMVAR.Add(SYSTEMVAR229);



				{
				// AST REWRITE
				// elements: SYSTEMVAR
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 333:14: -> ^( T_SYSTEMVAR SYSTEMVAR )
				{
					DebugLocation(333, 17);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:333:17: ^( T_SYSTEMVAR SYSTEMVAR )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(333, 19);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SYSTEMVAR, "T_SYSTEMVAR"), root_1);

					DebugLocation(333, 31);
					adaptor.AddChild(root_1, stream_SYSTEMVAR.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:334:4: VARIABLE
				{
				DebugLocation(334, 4);
				VARIABLE230=(IToken)Match(input,VARIABLE,Follow._VARIABLE_in_expression_atom2096);  
				stream_VARIABLE.Add(VARIABLE230);



				{
				// AST REWRITE
				// elements: VARIABLE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 334:13: -> ^( T_VARIABLE VARIABLE )
				{
					DebugLocation(334, 16);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:334:16: ^( T_VARIABLE VARIABLE )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(334, 18);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_VARIABLE, "T_VARIABLE"), root_1);

					DebugLocation(334, 29);
					adaptor.AddChild(root_1, stream_VARIABLE.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:335:4: subquery
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(335, 4);
				PushFollow(Follow._subquery_in_expression_atom2109);
				subquery231=subquery();
				PopFollow();

				adaptor.AddChild(root_0, subquery231.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:336:4: '(' expression ')'
				{
				DebugLocation(336, 4);
				char_literal232=(IToken)Match(input,139,Follow._139_in_expression_atom2114);  
				stream_139.Add(char_literal232);

				DebugLocation(336, 8);
				PushFollow(Follow._expression_in_expression_atom2116);
				expression233=expression();
				PopFollow();

				stream_expression.Add(expression233.Tree);
				DebugLocation(336, 19);
				char_literal234=(IToken)Match(input,140,Follow._140_in_expression_atom2118);  
				stream_140.Add(char_literal234);



				{
				// AST REWRITE
				// elements: expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 336:23: -> expression
				{
					DebugLocation(336, 26);
					adaptor.AddChild(root_0, stream_expression.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:337:4: functioncall_or_column
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(337, 4);
				PushFollow(Follow._functioncall_or_column_in_expression_atom2127);
				functioncall_or_column235=functioncall_or_column();
				PopFollow();

				adaptor.AddChild(root_0, functioncall_or_column235.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:338:4: conversion
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(338, 4);
				PushFollow(Follow._conversion_in_expression_atom2132);
				conversion236=conversion();
				PopFollow();

				adaptor.AddChild(root_0, conversion236.Tree);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:339:4: case
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(339, 4);
				PushFollow(Follow._case_in_expression_atom2137);
				case237=@case();
				PopFollow();

				adaptor.AddChild(root_0, case237.Tree);

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:340:4: EXISTS ( WS )? '(' ( WS )? select_command ( WS )? ')'
				{
				DebugLocation(340, 4);
				EXISTS238=(IToken)Match(input,EXISTS,Follow._EXISTS_in_expression_atom2142);  
				stream_EXISTS.Add(EXISTS238);

				DebugLocation(340, 11);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:340:11: ( WS )?
				int alt85=2;
				try { DebugEnterSubRule(85);
				try { DebugEnterDecision(85, decisionCanBacktrack[85]);
				int LA85_0 = input.LA(1);

				if ((LA85_0==WS))
				{
					alt85 = 1;
				}
				} finally { DebugExitDecision(85); }
				switch (alt85)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:340:11: WS
					{
					DebugLocation(340, 11);
					WS239=(IToken)Match(input,WS,Follow._WS_in_expression_atom2144);  
					stream_WS.Add(WS239);


					}
					break;

				}
				} finally { DebugExitSubRule(85); }

				DebugLocation(340, 15);
				char_literal240=(IToken)Match(input,139,Follow._139_in_expression_atom2147);  
				stream_139.Add(char_literal240);

				DebugLocation(340, 19);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:340:19: ( WS )?
				int alt86=2;
				try { DebugEnterSubRule(86);
				try { DebugEnterDecision(86, decisionCanBacktrack[86]);
				int LA86_0 = input.LA(1);

				if ((LA86_0==WS))
				{
					alt86 = 1;
				}
				} finally { DebugExitDecision(86); }
				switch (alt86)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:340:19: WS
					{
					DebugLocation(340, 19);
					WS241=(IToken)Match(input,WS,Follow._WS_in_expression_atom2149);  
					stream_WS.Add(WS241);


					}
					break;

				}
				} finally { DebugExitSubRule(86); }

				DebugLocation(340, 23);
				PushFollow(Follow._select_command_in_expression_atom2152);
				select_command242=select_command();
				PopFollow();

				stream_select_command.Add(select_command242.Tree);
				DebugLocation(340, 38);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:340:38: ( WS )?
				int alt87=2;
				try { DebugEnterSubRule(87);
				try { DebugEnterDecision(87, decisionCanBacktrack[87]);
				int LA87_0 = input.LA(1);

				if ((LA87_0==WS))
				{
					alt87 = 1;
				}
				} finally { DebugExitDecision(87); }
				switch (alt87)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:340:38: WS
					{
					DebugLocation(340, 38);
					WS243=(IToken)Match(input,WS,Follow._WS_in_expression_atom2154);  
					stream_WS.Add(WS243);


					}
					break;

				}
				} finally { DebugExitSubRule(87); }

				DebugLocation(340, 42);
				char_literal244=(IToken)Match(input,140,Follow._140_in_expression_atom2157);  
				stream_140.Add(char_literal244);



				{
				// AST REWRITE
				// elements: select_command
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 340:46: -> ^( T_EXISTS select_command )
				{
					DebugLocation(340, 49);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:340:49: ^( T_EXISTS select_command )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(340, 51);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_EXISTS, "T_EXISTS"), root_1);

					DebugLocation(340, 60);
					adaptor.AddChild(root_1, stream_select_command.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_atom", 44);
			LeaveRule("expression_atom", 44);
			LeaveRule_expression_atom();
	    }
	 	DebugLocation(341, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_atom"); }
		return retval;

	}
	// $ANTLR end "expression_atom"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_functioncall_or_column() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_functioncall_or_column() {}

	// $ANTLR start "functioncall_or_column"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:344:1: functioncall_or_column : ( TOKEN ( WS )? '(' ( WS )? ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )? ')' -> ^( T_FUNCTIONCALL TOKEN ( expression )* ) | SIMPLE_FILE -> ^( T_COLUMN SIMPLE_FILE ) );
	[GrammarRule("functioncall_or_column")]
	private AstParserRuleReturnScope<object, IToken> functioncall_or_column()
	{
		EnterRule_functioncall_or_column();
		EnterRule("functioncall_or_column", 45);
		TraceIn("functioncall_or_column", 45);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN245 = default(IToken);
	    IToken WS246 = default(IToken);
	    IToken char_literal247 = default(IToken);
	    IToken WS248 = default(IToken);
	    IToken WS250 = default(IToken);
	    IToken char_literal251 = default(IToken);
	    IToken WS252 = default(IToken);
	    IToken WS254 = default(IToken);
	    IToken char_literal255 = default(IToken);
	    IToken SIMPLE_FILE256 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression249 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression253 = default(AstParserRuleReturnScope<object, IToken>);

	    object TOKEN245_tree = default(object);
	    object WS246_tree = default(object);
	    object char_literal247_tree = default(object);
	    object WS248_tree = default(object);
	    object WS250_tree = default(object);
	    object char_literal251_tree = default(object);
	    object WS252_tree = default(object);
	    object WS254_tree = default(object);
	    object char_literal255_tree = default(object);
	    object SIMPLE_FILE256_tree = default(object);
	    RewriteRuleITokenStream stream_143=new RewriteRuleITokenStream(adaptor,"token 143");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_SIMPLE_FILE=new RewriteRuleITokenStream(adaptor,"token SIMPLE_FILE");
	    RewriteRuleITokenStream stream_139=new RewriteRuleITokenStream(adaptor,"token 139");
	    RewriteRuleITokenStream stream_140=new RewriteRuleITokenStream(adaptor,"token 140");
	    RewriteRuleITokenStream stream_TOKEN=new RewriteRuleITokenStream(adaptor,"token TOKEN");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "functioncall_or_column");
		DebugLocation(344, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:345:2: ( TOKEN ( WS )? '(' ( WS )? ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )? ')' -> ^( T_FUNCTIONCALL TOKEN ( expression )* ) | SIMPLE_FILE -> ^( T_COLUMN SIMPLE_FILE ) )
			int alt96=2;
			try { DebugEnterDecision(96, decisionCanBacktrack[96]);
			int LA96_0 = input.LA(1);

			if ((LA96_0==TOKEN))
			{
				alt96 = 1;
			}
			else if ((LA96_0==SIMPLE_FILE))
			{
				alt96 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 96, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(96); }
			switch (alt96)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:345:4: TOKEN ( WS )? '(' ( WS )? ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )? ')'
				{
				DebugLocation(345, 4);
				TOKEN245=(IToken)Match(input,TOKEN,Follow._TOKEN_in_functioncall_or_column2177);  
				stream_TOKEN.Add(TOKEN245);

				DebugLocation(345, 10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:345:10: ( WS )?
				int alt89=2;
				try { DebugEnterSubRule(89);
				try { DebugEnterDecision(89, decisionCanBacktrack[89]);
				int LA89_0 = input.LA(1);

				if ((LA89_0==WS))
				{
					alt89 = 1;
				}
				} finally { DebugExitDecision(89); }
				switch (alt89)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:345:10: WS
					{
					DebugLocation(345, 10);
					WS246=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2179);  
					stream_WS.Add(WS246);


					}
					break;

				}
				} finally { DebugExitSubRule(89); }

				DebugLocation(345, 14);
				char_literal247=(IToken)Match(input,139,Follow._139_in_functioncall_or_column2182);  
				stream_139.Add(char_literal247);

				DebugLocation(345, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:345:18: ( WS )?
				int alt90=2;
				try { DebugEnterSubRule(90);
				try { DebugEnterDecision(90, decisionCanBacktrack[90]);
				int LA90_0 = input.LA(1);

				if ((LA90_0==WS))
				{
					alt90 = 1;
				}
				} finally { DebugExitDecision(90); }
				switch (alt90)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:345:18: WS
					{
					DebugLocation(345, 18);
					WS248=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2184);  
					stream_WS.Add(WS248);


					}
					break;

				}
				} finally { DebugExitSubRule(90); }

				DebugLocation(345, 22);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:345:22: ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )?
				int alt95=2;
				try { DebugEnterSubRule(95);
				try { DebugEnterDecision(95, decisionCanBacktrack[95]);
				int LA95_0 = input.LA(1);

				if (((LA95_0>=CASE && LA95_0<=CAST)||LA95_0==CONVERT||LA95_0==EXISTS||(LA95_0>=NOT && LA95_0<=NUMBER)||LA95_0==SIMPLE_FILE||(LA95_0>=STRING && LA95_0<=SYSTEMVAR)||LA95_0==TOKEN||LA95_0==VARIABLE||LA95_0==139))
				{
					alt95 = 1;
				}
				} finally { DebugExitDecision(95); }
				switch (alt95)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:345:23: expression ( WS )? ( ',' ( WS )? expression ( WS )? )*
					{
					DebugLocation(345, 23);
					PushFollow(Follow._expression_in_functioncall_or_column2188);
					expression249=expression();
					PopFollow();

					stream_expression.Add(expression249.Tree);
					DebugLocation(345, 34);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:345:34: ( WS )?
					int alt91=2;
					try { DebugEnterSubRule(91);
					try { DebugEnterDecision(91, decisionCanBacktrack[91]);
					int LA91_0 = input.LA(1);

					if ((LA91_0==WS))
					{
						alt91 = 1;
					}
					} finally { DebugExitDecision(91); }
					switch (alt91)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:345:34: WS
						{
						DebugLocation(345, 34);
						WS250=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2190);  
						stream_WS.Add(WS250);


						}
						break;

					}
					} finally { DebugExitSubRule(91); }

					DebugLocation(345, 38);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:345:38: ( ',' ( WS )? expression ( WS )? )*
					try { DebugEnterSubRule(94);
					while (true)
					{
						int alt94=2;
						try { DebugEnterDecision(94, decisionCanBacktrack[94]);
						int LA94_0 = input.LA(1);

						if ((LA94_0==143))
						{
							alt94 = 1;
						}


						} finally { DebugExitDecision(94); }
						switch ( alt94 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:345:39: ',' ( WS )? expression ( WS )?
							{
							DebugLocation(345, 39);
							char_literal251=(IToken)Match(input,143,Follow._143_in_functioncall_or_column2194);  
							stream_143.Add(char_literal251);

							DebugLocation(345, 43);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:345:43: ( WS )?
							int alt92=2;
							try { DebugEnterSubRule(92);
							try { DebugEnterDecision(92, decisionCanBacktrack[92]);
							int LA92_0 = input.LA(1);

							if ((LA92_0==WS))
							{
								alt92 = 1;
							}
							} finally { DebugExitDecision(92); }
							switch (alt92)
							{
							case 1:
								DebugEnterAlt(1);
								// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:345:43: WS
								{
								DebugLocation(345, 43);
								WS252=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2196);  
								stream_WS.Add(WS252);


								}
								break;

							}
							} finally { DebugExitSubRule(92); }

							DebugLocation(345, 47);
							PushFollow(Follow._expression_in_functioncall_or_column2199);
							expression253=expression();
							PopFollow();

							stream_expression.Add(expression253.Tree);
							DebugLocation(345, 58);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:345:58: ( WS )?
							int alt93=2;
							try { DebugEnterSubRule(93);
							try { DebugEnterDecision(93, decisionCanBacktrack[93]);
							int LA93_0 = input.LA(1);

							if ((LA93_0==WS))
							{
								alt93 = 1;
							}
							} finally { DebugExitDecision(93); }
							switch (alt93)
							{
							case 1:
								DebugEnterAlt(1);
								// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:345:58: WS
								{
								DebugLocation(345, 58);
								WS254=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2201);  
								stream_WS.Add(WS254);


								}
								break;

							}
							} finally { DebugExitSubRule(93); }


							}
							break;

						default:
							goto loop94;
						}
					}

					loop94:
						;

					} finally { DebugExitSubRule(94); }


					}
					break;

				}
				} finally { DebugExitSubRule(95); }

				DebugLocation(345, 66);
				char_literal255=(IToken)Match(input,140,Follow._140_in_functioncall_or_column2208);  
				stream_140.Add(char_literal255);



				{
				// AST REWRITE
				// elements: expression, TOKEN
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 345:70: -> ^( T_FUNCTIONCALL TOKEN ( expression )* )
				{
					DebugLocation(345, 73);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:345:73: ^( T_FUNCTIONCALL TOKEN ( expression )* )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(345, 75);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(345, 90);
					adaptor.AddChild(root_1, stream_TOKEN.NextNode());
					DebugLocation(345, 96);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:345:96: ( expression )*
					while ( stream_expression.HasNext )
					{
						DebugLocation(345, 96);
						adaptor.AddChild(root_1, stream_expression.NextTree());

					}
					stream_expression.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:347:4: SIMPLE_FILE
				{
				DebugLocation(347, 4);
				SIMPLE_FILE256=(IToken)Match(input,SIMPLE_FILE,Follow._SIMPLE_FILE_in_functioncall_or_column2226);  
				stream_SIMPLE_FILE.Add(SIMPLE_FILE256);



				{
				// AST REWRITE
				// elements: SIMPLE_FILE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 347:16: -> ^( T_COLUMN SIMPLE_FILE )
				{
					DebugLocation(347, 19);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:347:19: ^( T_COLUMN SIMPLE_FILE )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(347, 21);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_COLUMN, "T_COLUMN"), root_1);

					DebugLocation(347, 30);
					adaptor.AddChild(root_1, stream_SIMPLE_FILE.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("functioncall_or_column", 45);
			LeaveRule("functioncall_or_column", 45);
			LeaveRule_functioncall_or_column();
	    }
	 	DebugLocation(348, 1);
		} finally { DebugExitRule(GrammarFileName, "functioncall_or_column"); }
		return retval;

	}
	// $ANTLR end "functioncall_or_column"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_conversion() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_conversion() {}

	// $ANTLR start "conversion"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:350:1: conversion : ( CONVERT ( WS )? '(' ( WS )? TOKEN ( WS )? ',' ( WS )? expression ( WS )? ')' -> ^( T_CONVERT TOKEN expression ) | CAST ( WS )? '(' ( WS )? expression WS AS WS datatype ( WS )? ')' -> ^( T_CONVERT TOKEN expression ) );
	[GrammarRule("conversion")]
	private AstParserRuleReturnScope<object, IToken> conversion()
	{
		EnterRule_conversion();
		EnterRule("conversion", 46);
		TraceIn("conversion", 46);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken CONVERT257 = default(IToken);
	    IToken WS258 = default(IToken);
	    IToken char_literal259 = default(IToken);
	    IToken WS260 = default(IToken);
	    IToken TOKEN261 = default(IToken);
	    IToken WS262 = default(IToken);
	    IToken char_literal263 = default(IToken);
	    IToken WS264 = default(IToken);
	    IToken WS266 = default(IToken);
	    IToken char_literal267 = default(IToken);
	    IToken CAST268 = default(IToken);
	    IToken WS269 = default(IToken);
	    IToken char_literal270 = default(IToken);
	    IToken WS271 = default(IToken);
	    IToken WS273 = default(IToken);
	    IToken AS274 = default(IToken);
	    IToken WS275 = default(IToken);
	    IToken WS277 = default(IToken);
	    IToken char_literal278 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression265 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression272 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> datatype276 = default(AstParserRuleReturnScope<object, IToken>);

	    object CONVERT257_tree = default(object);
	    object WS258_tree = default(object);
	    object char_literal259_tree = default(object);
	    object WS260_tree = default(object);
	    object TOKEN261_tree = default(object);
	    object WS262_tree = default(object);
	    object char_literal263_tree = default(object);
	    object WS264_tree = default(object);
	    object WS266_tree = default(object);
	    object char_literal267_tree = default(object);
	    object CAST268_tree = default(object);
	    object WS269_tree = default(object);
	    object char_literal270_tree = default(object);
	    object WS271_tree = default(object);
	    object WS273_tree = default(object);
	    object AS274_tree = default(object);
	    object WS275_tree = default(object);
	    object WS277_tree = default(object);
	    object char_literal278_tree = default(object);
	    RewriteRuleITokenStream stream_CAST=new RewriteRuleITokenStream(adaptor,"token CAST");
	    RewriteRuleITokenStream stream_143=new RewriteRuleITokenStream(adaptor,"token 143");
	    RewriteRuleITokenStream stream_AS=new RewriteRuleITokenStream(adaptor,"token AS");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_139=new RewriteRuleITokenStream(adaptor,"token 139");
	    RewriteRuleITokenStream stream_CONVERT=new RewriteRuleITokenStream(adaptor,"token CONVERT");
	    RewriteRuleITokenStream stream_140=new RewriteRuleITokenStream(adaptor,"token 140");
	    RewriteRuleITokenStream stream_TOKEN=new RewriteRuleITokenStream(adaptor,"token TOKEN");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_datatype=new RewriteRuleSubtreeStream(adaptor,"rule datatype");
		try { DebugEnterRule(GrammarFileName, "conversion");
		DebugLocation(350, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:351:2: ( CONVERT ( WS )? '(' ( WS )? TOKEN ( WS )? ',' ( WS )? expression ( WS )? ')' -> ^( T_CONVERT TOKEN expression ) | CAST ( WS )? '(' ( WS )? expression WS AS WS datatype ( WS )? ')' -> ^( T_CONVERT TOKEN expression ) )
			int alt105=2;
			try { DebugEnterDecision(105, decisionCanBacktrack[105]);
			int LA105_0 = input.LA(1);

			if ((LA105_0==CONVERT))
			{
				alt105 = 1;
			}
			else if ((LA105_0==CAST))
			{
				alt105 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 105, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(105); }
			switch (alt105)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:351:4: CONVERT ( WS )? '(' ( WS )? TOKEN ( WS )? ',' ( WS )? expression ( WS )? ')'
				{
				DebugLocation(351, 4);
				CONVERT257=(IToken)Match(input,CONVERT,Follow._CONVERT_in_conversion2246);  
				stream_CONVERT.Add(CONVERT257);

				DebugLocation(351, 12);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:351:12: ( WS )?
				int alt97=2;
				try { DebugEnterSubRule(97);
				try { DebugEnterDecision(97, decisionCanBacktrack[97]);
				int LA97_0 = input.LA(1);

				if ((LA97_0==WS))
				{
					alt97 = 1;
				}
				} finally { DebugExitDecision(97); }
				switch (alt97)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:351:12: WS
					{
					DebugLocation(351, 12);
					WS258=(IToken)Match(input,WS,Follow._WS_in_conversion2248);  
					stream_WS.Add(WS258);


					}
					break;

				}
				} finally { DebugExitSubRule(97); }

				DebugLocation(351, 16);
				char_literal259=(IToken)Match(input,139,Follow._139_in_conversion2251);  
				stream_139.Add(char_literal259);

				DebugLocation(351, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:351:20: ( WS )?
				int alt98=2;
				try { DebugEnterSubRule(98);
				try { DebugEnterDecision(98, decisionCanBacktrack[98]);
				int LA98_0 = input.LA(1);

				if ((LA98_0==WS))
				{
					alt98 = 1;
				}
				} finally { DebugExitDecision(98); }
				switch (alt98)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:351:20: WS
					{
					DebugLocation(351, 20);
					WS260=(IToken)Match(input,WS,Follow._WS_in_conversion2253);  
					stream_WS.Add(WS260);


					}
					break;

				}
				} finally { DebugExitSubRule(98); }

				DebugLocation(351, 24);
				TOKEN261=(IToken)Match(input,TOKEN,Follow._TOKEN_in_conversion2256);  
				stream_TOKEN.Add(TOKEN261);

				DebugLocation(351, 30);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:351:30: ( WS )?
				int alt99=2;
				try { DebugEnterSubRule(99);
				try { DebugEnterDecision(99, decisionCanBacktrack[99]);
				int LA99_0 = input.LA(1);

				if ((LA99_0==WS))
				{
					alt99 = 1;
				}
				} finally { DebugExitDecision(99); }
				switch (alt99)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:351:30: WS
					{
					DebugLocation(351, 30);
					WS262=(IToken)Match(input,WS,Follow._WS_in_conversion2258);  
					stream_WS.Add(WS262);


					}
					break;

				}
				} finally { DebugExitSubRule(99); }

				DebugLocation(351, 34);
				char_literal263=(IToken)Match(input,143,Follow._143_in_conversion2261);  
				stream_143.Add(char_literal263);

				DebugLocation(351, 38);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:351:38: ( WS )?
				int alt100=2;
				try { DebugEnterSubRule(100);
				try { DebugEnterDecision(100, decisionCanBacktrack[100]);
				int LA100_0 = input.LA(1);

				if ((LA100_0==WS))
				{
					alt100 = 1;
				}
				} finally { DebugExitDecision(100); }
				switch (alt100)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:351:38: WS
					{
					DebugLocation(351, 38);
					WS264=(IToken)Match(input,WS,Follow._WS_in_conversion2263);  
					stream_WS.Add(WS264);


					}
					break;

				}
				} finally { DebugExitSubRule(100); }

				DebugLocation(351, 42);
				PushFollow(Follow._expression_in_conversion2266);
				expression265=expression();
				PopFollow();

				stream_expression.Add(expression265.Tree);
				DebugLocation(351, 53);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:351:53: ( WS )?
				int alt101=2;
				try { DebugEnterSubRule(101);
				try { DebugEnterDecision(101, decisionCanBacktrack[101]);
				int LA101_0 = input.LA(1);

				if ((LA101_0==WS))
				{
					alt101 = 1;
				}
				} finally { DebugExitDecision(101); }
				switch (alt101)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:351:53: WS
					{
					DebugLocation(351, 53);
					WS266=(IToken)Match(input,WS,Follow._WS_in_conversion2268);  
					stream_WS.Add(WS266);


					}
					break;

				}
				} finally { DebugExitSubRule(101); }

				DebugLocation(351, 57);
				char_literal267=(IToken)Match(input,140,Follow._140_in_conversion2271);  
				stream_140.Add(char_literal267);



				{
				// AST REWRITE
				// elements: expression, TOKEN
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 351:61: -> ^( T_CONVERT TOKEN expression )
				{
					DebugLocation(351, 64);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:351:64: ^( T_CONVERT TOKEN expression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(351, 66);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CONVERT, "T_CONVERT"), root_1);

					DebugLocation(351, 76);
					adaptor.AddChild(root_1, stream_TOKEN.NextNode());
					DebugLocation(351, 82);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:352:4: CAST ( WS )? '(' ( WS )? expression WS AS WS datatype ( WS )? ')'
				{
				DebugLocation(352, 4);
				CAST268=(IToken)Match(input,CAST,Follow._CAST_in_conversion2286);  
				stream_CAST.Add(CAST268);

				DebugLocation(352, 9);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:352:9: ( WS )?
				int alt102=2;
				try { DebugEnterSubRule(102);
				try { DebugEnterDecision(102, decisionCanBacktrack[102]);
				int LA102_0 = input.LA(1);

				if ((LA102_0==WS))
				{
					alt102 = 1;
				}
				} finally { DebugExitDecision(102); }
				switch (alt102)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:352:9: WS
					{
					DebugLocation(352, 9);
					WS269=(IToken)Match(input,WS,Follow._WS_in_conversion2288);  
					stream_WS.Add(WS269);


					}
					break;

				}
				} finally { DebugExitSubRule(102); }

				DebugLocation(352, 13);
				char_literal270=(IToken)Match(input,139,Follow._139_in_conversion2291);  
				stream_139.Add(char_literal270);

				DebugLocation(352, 17);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:352:17: ( WS )?
				int alt103=2;
				try { DebugEnterSubRule(103);
				try { DebugEnterDecision(103, decisionCanBacktrack[103]);
				int LA103_0 = input.LA(1);

				if ((LA103_0==WS))
				{
					alt103 = 1;
				}
				} finally { DebugExitDecision(103); }
				switch (alt103)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:352:17: WS
					{
					DebugLocation(352, 17);
					WS271=(IToken)Match(input,WS,Follow._WS_in_conversion2293);  
					stream_WS.Add(WS271);


					}
					break;

				}
				} finally { DebugExitSubRule(103); }

				DebugLocation(352, 21);
				PushFollow(Follow._expression_in_conversion2296);
				expression272=expression();
				PopFollow();

				stream_expression.Add(expression272.Tree);
				DebugLocation(352, 32);
				WS273=(IToken)Match(input,WS,Follow._WS_in_conversion2298);  
				stream_WS.Add(WS273);

				DebugLocation(352, 35);
				AS274=(IToken)Match(input,AS,Follow._AS_in_conversion2300);  
				stream_AS.Add(AS274);

				DebugLocation(352, 38);
				WS275=(IToken)Match(input,WS,Follow._WS_in_conversion2302);  
				stream_WS.Add(WS275);

				DebugLocation(352, 41);
				PushFollow(Follow._datatype_in_conversion2304);
				datatype276=datatype();
				PopFollow();

				stream_datatype.Add(datatype276.Tree);
				DebugLocation(352, 50);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:352:50: ( WS )?
				int alt104=2;
				try { DebugEnterSubRule(104);
				try { DebugEnterDecision(104, decisionCanBacktrack[104]);
				int LA104_0 = input.LA(1);

				if ((LA104_0==WS))
				{
					alt104 = 1;
				}
				} finally { DebugExitDecision(104); }
				switch (alt104)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:352:50: WS
					{
					DebugLocation(352, 50);
					WS277=(IToken)Match(input,WS,Follow._WS_in_conversion2306);  
					stream_WS.Add(WS277);


					}
					break;

				}
				} finally { DebugExitSubRule(104); }

				DebugLocation(352, 54);
				char_literal278=(IToken)Match(input,140,Follow._140_in_conversion2309);  
				stream_140.Add(char_literal278);



				{
				// AST REWRITE
				// elements: expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 352:58: -> ^( T_CONVERT TOKEN expression )
				{
					DebugLocation(352, 61);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:352:61: ^( T_CONVERT TOKEN expression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(352, 63);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CONVERT, "T_CONVERT"), root_1);

					DebugLocation(352, 73);
					adaptor.AddChild(root_1, (object)adaptor.Create(TOKEN, "TOKEN"));
					DebugLocation(352, 79);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conversion", 46);
			LeaveRule("conversion", 46);
			LeaveRule_conversion();
	    }
	 	DebugLocation(353, 1);
		} finally { DebugExitRule(GrammarFileName, "conversion"); }
		return retval;

	}
	// $ANTLR end "conversion"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_datatype() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_datatype() {}

	// $ANTLR start "datatype"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:355:1: datatype : TOKEN ;
	[GrammarRule("datatype")]
	private AstParserRuleReturnScope<object, IToken> datatype()
	{
		EnterRule_datatype();
		EnterRule("datatype", 47);
		TraceIn("datatype", 47);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN279 = default(IToken);

	    object TOKEN279_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "datatype");
		DebugLocation(355, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:356:2: ( TOKEN )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:356:4: TOKEN
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(356, 4);
			TOKEN279=(IToken)Match(input,TOKEN,Follow._TOKEN_in_datatype2331); 
			TOKEN279_tree = (object)adaptor.Create(TOKEN279);
			adaptor.AddChild(root_0, TOKEN279_tree);


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("datatype", 47);
			LeaveRule("datatype", 47);
			LeaveRule_datatype();
	    }
	 	DebugLocation(357, 1);
		} finally { DebugExitRule(GrammarFileName, "datatype"); }
		return retval;

	}
	// $ANTLR end "datatype"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_variable() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_variable() {}

	// $ANTLR start "variable"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:359:1: variable : VARIABLE ;
	[GrammarRule("variable")]
	private AstParserRuleReturnScope<object, IToken> variable()
	{
		EnterRule_variable();
		EnterRule("variable", 48);
		TraceIn("variable", 48);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken VARIABLE280 = default(IToken);

	    object VARIABLE280_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "variable");
		DebugLocation(359, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:360:2: ( VARIABLE )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:360:4: VARIABLE
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(360, 4);
			VARIABLE280=(IToken)Match(input,VARIABLE,Follow._VARIABLE_in_variable2343); 
			VARIABLE280_tree = (object)adaptor.Create(VARIABLE280);
			adaptor.AddChild(root_0, VARIABLE280_tree);


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variable", 48);
			LeaveRule("variable", 48);
			LeaveRule_variable();
	    }
	 	DebugLocation(361, 1);
		} finally { DebugExitRule(GrammarFileName, "variable"); }
		return retval;

	}
	// $ANTLR end "variable"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_case() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_case() {}

	// $ANTLR start "case"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:363:1: case : CASE WS ( expression WS )? ( case_when WS )* ( case_else WS )? END -> ^( T_CASE ( expression )? ( case_when )* ( case_else )? ) ;
	[GrammarRule("case")]
	private AstParserRuleReturnScope<object, IToken> @case()
	{
		EnterRule_case();
		EnterRule("case", 49);
		TraceIn("case", 49);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken CASE281 = default(IToken);
	    IToken WS282 = default(IToken);
	    IToken WS284 = default(IToken);
	    IToken WS286 = default(IToken);
	    IToken WS288 = default(IToken);
	    IToken END289 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression283 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> case_when285 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> case_else287 = default(AstParserRuleReturnScope<object, IToken>);

	    object CASE281_tree = default(object);
	    object WS282_tree = default(object);
	    object WS284_tree = default(object);
	    object WS286_tree = default(object);
	    object WS288_tree = default(object);
	    object END289_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_END=new RewriteRuleITokenStream(adaptor,"token END");
	    RewriteRuleITokenStream stream_CASE=new RewriteRuleITokenStream(adaptor,"token CASE");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_case_when=new RewriteRuleSubtreeStream(adaptor,"rule case_when");
	    RewriteRuleSubtreeStream stream_case_else=new RewriteRuleSubtreeStream(adaptor,"rule case_else");
		try { DebugEnterRule(GrammarFileName, "case");
		DebugLocation(363, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:364:2: ( CASE WS ( expression WS )? ( case_when WS )* ( case_else WS )? END -> ^( T_CASE ( expression )? ( case_when )* ( case_else )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:364:4: CASE WS ( expression WS )? ( case_when WS )* ( case_else WS )? END
			{
			DebugLocation(364, 4);
			CASE281=(IToken)Match(input,CASE,Follow._CASE_in_case2355);  
			stream_CASE.Add(CASE281);

			DebugLocation(364, 9);
			WS282=(IToken)Match(input,WS,Follow._WS_in_case2357);  
			stream_WS.Add(WS282);

			DebugLocation(364, 12);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:364:12: ( expression WS )?
			int alt106=2;
			try { DebugEnterSubRule(106);
			try { DebugEnterDecision(106, decisionCanBacktrack[106]);
			int LA106_0 = input.LA(1);

			if (((LA106_0>=CASE && LA106_0<=CAST)||LA106_0==CONVERT||LA106_0==EXISTS||(LA106_0>=NOT && LA106_0<=NUMBER)||LA106_0==SIMPLE_FILE||(LA106_0>=STRING && LA106_0<=SYSTEMVAR)||LA106_0==TOKEN||LA106_0==VARIABLE||LA106_0==139))
			{
				alt106 = 1;
			}
			} finally { DebugExitDecision(106); }
			switch (alt106)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:364:13: expression WS
				{
				DebugLocation(364, 13);
				PushFollow(Follow._expression_in_case2360);
				expression283=expression();
				PopFollow();

				stream_expression.Add(expression283.Tree);
				DebugLocation(364, 24);
				WS284=(IToken)Match(input,WS,Follow._WS_in_case2362);  
				stream_WS.Add(WS284);


				}
				break;

			}
			} finally { DebugExitSubRule(106); }

			DebugLocation(364, 29);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:364:29: ( case_when WS )*
			try { DebugEnterSubRule(107);
			while (true)
			{
				int alt107=2;
				try { DebugEnterDecision(107, decisionCanBacktrack[107]);
				int LA107_0 = input.LA(1);

				if ((LA107_0==WHEN))
				{
					alt107 = 1;
				}


				} finally { DebugExitDecision(107); }
				switch ( alt107 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:364:30: case_when WS
					{
					DebugLocation(364, 30);
					PushFollow(Follow._case_when_in_case2367);
					case_when285=case_when();
					PopFollow();

					stream_case_when.Add(case_when285.Tree);
					DebugLocation(364, 40);
					WS286=(IToken)Match(input,WS,Follow._WS_in_case2369);  
					stream_WS.Add(WS286);


					}
					break;

				default:
					goto loop107;
				}
			}

			loop107:
				;

			} finally { DebugExitSubRule(107); }

			DebugLocation(364, 45);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:364:45: ( case_else WS )?
			int alt108=2;
			try { DebugEnterSubRule(108);
			try { DebugEnterDecision(108, decisionCanBacktrack[108]);
			int LA108_0 = input.LA(1);

			if ((LA108_0==ELSE))
			{
				alt108 = 1;
			}
			} finally { DebugExitDecision(108); }
			switch (alt108)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:364:46: case_else WS
				{
				DebugLocation(364, 46);
				PushFollow(Follow._case_else_in_case2374);
				case_else287=case_else();
				PopFollow();

				stream_case_else.Add(case_else287.Tree);
				DebugLocation(364, 56);
				WS288=(IToken)Match(input,WS,Follow._WS_in_case2376);  
				stream_WS.Add(WS288);


				}
				break;

			}
			} finally { DebugExitSubRule(108); }

			DebugLocation(364, 61);
			END289=(IToken)Match(input,END,Follow._END_in_case2380);  
			stream_END.Add(END289);



			{
			// AST REWRITE
			// elements: case_else, case_when, expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 365:2: -> ^( T_CASE ( expression )? ( case_when )* ( case_else )? )
			{
				DebugLocation(365, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:365:5: ^( T_CASE ( expression )? ( case_when )* ( case_else )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(365, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CASE, "T_CASE"), root_1);

				DebugLocation(365, 14);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:365:14: ( expression )?
				if (stream_expression.HasNext)
				{
					DebugLocation(365, 14);
					adaptor.AddChild(root_1, stream_expression.NextTree());

				}
				stream_expression.Reset();
				DebugLocation(365, 26);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:365:26: ( case_when )*
				while ( stream_case_when.HasNext )
				{
					DebugLocation(365, 26);
					adaptor.AddChild(root_1, stream_case_when.NextTree());

				}
				stream_case_when.Reset();
				DebugLocation(365, 37);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:365:37: ( case_else )?
				if (stream_case_else.HasNext)
				{
					DebugLocation(365, 37);
					adaptor.AddChild(root_1, stream_case_else.NextTree());

				}
				stream_case_else.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("case", 49);
			LeaveRule("case", 49);
			LeaveRule_case();
	    }
	 	DebugLocation(366, 1);
		} finally { DebugExitRule(GrammarFileName, "case"); }
		return retval;

	}
	// $ANTLR end "case"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_case_when() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_case_when() {}

	// $ANTLR start "case_when"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:368:1: case_when : WHEN WS a= expression WS THEN WS b= expression -> ^( T_CASE_WHEN $a $b) ;
	[GrammarRule("case_when")]
	private AstParserRuleReturnScope<object, IToken> case_when()
	{
		EnterRule_case_when();
		EnterRule("case_when", 50);
		TraceIn("case_when", 50);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WHEN290 = default(IToken);
	    IToken WS291 = default(IToken);
	    IToken WS292 = default(IToken);
	    IToken THEN293 = default(IToken);
	    IToken WS294 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);

	    object WHEN290_tree = default(object);
	    object WS291_tree = default(object);
	    object WS292_tree = default(object);
	    object THEN293_tree = default(object);
	    object WS294_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_THEN=new RewriteRuleITokenStream(adaptor,"token THEN");
	    RewriteRuleITokenStream stream_WHEN=new RewriteRuleITokenStream(adaptor,"token WHEN");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "case_when");
		DebugLocation(368, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:369:2: ( WHEN WS a= expression WS THEN WS b= expression -> ^( T_CASE_WHEN $a $b) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:369:4: WHEN WS a= expression WS THEN WS b= expression
			{
			DebugLocation(369, 4);
			WHEN290=(IToken)Match(input,WHEN,Follow._WHEN_in_case_when2408);  
			stream_WHEN.Add(WHEN290);

			DebugLocation(369, 9);
			WS291=(IToken)Match(input,WS,Follow._WS_in_case_when2410);  
			stream_WS.Add(WS291);

			DebugLocation(369, 13);
			PushFollow(Follow._expression_in_case_when2414);
			a=expression();
			PopFollow();

			stream_expression.Add(a.Tree);
			DebugLocation(369, 25);
			WS292=(IToken)Match(input,WS,Follow._WS_in_case_when2416);  
			stream_WS.Add(WS292);

			DebugLocation(369, 28);
			THEN293=(IToken)Match(input,THEN,Follow._THEN_in_case_when2418);  
			stream_THEN.Add(THEN293);

			DebugLocation(369, 33);
			WS294=(IToken)Match(input,WS,Follow._WS_in_case_when2420);  
			stream_WS.Add(WS294);

			DebugLocation(369, 37);
			PushFollow(Follow._expression_in_case_when2424);
			b=expression();
			PopFollow();

			stream_expression.Add(b.Tree);


			{
			// AST REWRITE
			// elements: b, a
			// token labels: 
			// rule labels: retval, b, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 370:2: -> ^( T_CASE_WHEN $a $b)
			{
				DebugLocation(370, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:370:5: ^( T_CASE_WHEN $a $b)
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(370, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CASE_WHEN, "T_CASE_WHEN"), root_1);

				DebugLocation(370, 20);
				adaptor.AddChild(root_1, stream_a.NextTree());
				DebugLocation(370, 23);
				adaptor.AddChild(root_1, stream_b.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("case_when", 50);
			LeaveRule("case_when", 50);
			LeaveRule_case_when();
	    }
	 	DebugLocation(371, 1);
		} finally { DebugExitRule(GrammarFileName, "case_when"); }
		return retval;

	}
	// $ANTLR end "case_when"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_case_else() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_case_else() {}

	// $ANTLR start "case_else"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:373:1: case_else : ELSE WS expression -> ^( T_CASE_ELSE expression ) ;
	[GrammarRule("case_else")]
	private AstParserRuleReturnScope<object, IToken> case_else()
	{
		EnterRule_case_else();
		EnterRule("case_else", 51);
		TraceIn("case_else", 51);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken ELSE295 = default(IToken);
	    IToken WS296 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression297 = default(AstParserRuleReturnScope<object, IToken>);

	    object ELSE295_tree = default(object);
	    object WS296_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_ELSE=new RewriteRuleITokenStream(adaptor,"token ELSE");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "case_else");
		DebugLocation(373, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:374:2: ( ELSE WS expression -> ^( T_CASE_ELSE expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:374:4: ELSE WS expression
			{
			DebugLocation(374, 4);
			ELSE295=(IToken)Match(input,ELSE,Follow._ELSE_in_case_else2449);  
			stream_ELSE.Add(ELSE295);

			DebugLocation(374, 9);
			WS296=(IToken)Match(input,WS,Follow._WS_in_case_else2451);  
			stream_WS.Add(WS296);

			DebugLocation(374, 12);
			PushFollow(Follow._expression_in_case_else2453);
			expression297=expression();
			PopFollow();

			stream_expression.Add(expression297.Tree);


			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 375:2: -> ^( T_CASE_ELSE expression )
			{
				DebugLocation(375, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:375:5: ^( T_CASE_ELSE expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(375, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CASE_ELSE, "T_CASE_ELSE"), root_1);

				DebugLocation(375, 19);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("case_else", 51);
			LeaveRule("case_else", 51);
			LeaveRule_case_else();
	    }
	 	DebugLocation(376, 1);
		} finally { DebugExitRule(GrammarFileName, "case_else"); }
		return retval;

	}
	// $ANTLR end "case_else"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _WS_in_parse328 = new BitSet(new ulong[]{0x18000000080000UL,0x1000000000000000UL});
		public static readonly BitSet _commands_in_parse332 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4UL});
		public static readonly BitSet _WS_in_parse334 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_parse339 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _command_in_commands362 = new BitSet(new ulong[]{0x18000000080002UL,0x1000000000000000UL,0x40004UL});
		public static readonly BitSet _WS_in_commands365 = new BitSet(new ulong[]{0x18000000080000UL,0x1000000000000000UL,0x40000UL});
		public static readonly BitSet _146_in_commands369 = new BitSet(new ulong[]{0x18000000080000UL,0x1000000000000000UL,0x4UL});
		public static readonly BitSet _WS_in_commands371 = new BitSet(new ulong[]{0x18000000080000UL,0x1000000000000000UL});
		public static readonly BitSet _command_in_commands376 = new BitSet(new ulong[]{0x18000000080002UL,0x1000000000000000UL,0x40004UL});
		public static readonly BitSet _WS_in_commands381 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _146_in_commands384 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _select_command_in_command404 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _use_command_in_command409 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declare_command_in_command414 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_command_in_command419 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SELECT_in_select_command433 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4UL});
		public static readonly BitSet _WS_in_select_command436 = new BitSet(new ulong[]{0x400020UL});
		public static readonly BitSet _distinct_clause_in_select_command438 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4UL});
		public static readonly BitSet _WS_in_select_command443 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _top_clause_in_select_command445 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4UL});
		public static readonly BitSet _WS_in_select_command449 = new BitSet(new ulong[]{0x9A00C000402C000UL,0x4000000000000000UL,0x2800UL});
		public static readonly BitSet _column_list_in_select_command451 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4UL});
		public static readonly BitSet _WS_in_select_command454 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _into_clause_in_select_command456 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4UL});
		public static readonly BitSet _WS_in_select_command461 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _from_clause_in_select_command463 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4UL});
		public static readonly BitSet _WS_in_select_command468 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2UL});
		public static readonly BitSet _where_clause_in_select_command470 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4UL});
		public static readonly BitSet _WS_in_select_command475 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _groupby_clause_in_select_command477 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4UL});
		public static readonly BitSet _WS_in_select_command482 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _orderby_clause_in_select_command484 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DISTINCT_in_distinct_clause529 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ALL_in_distinct_clause538 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOP_in_top_clause554 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4UL});
		public static readonly BitSet _WS_in_top_clause556 = new BitSet(new ulong[]{0x9A00C000402C000UL,0x4000000000000000UL,0x800UL});
		public static readonly BitSet _expression_in_top_clause558 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _column_in_column_list580 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8004UL});
		public static readonly BitSet _WS_in_column_list583 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000UL});
		public static readonly BitSet _143_in_column_list586 = new BitSet(new ulong[]{0x9A00C000402C000UL,0x4000000000000000UL,0x2804UL});
		public static readonly BitSet _WS_in_column_list588 = new BitSet(new ulong[]{0x9A00C000402C000UL,0x4000000000000000UL,0x2800UL});
		public static readonly BitSet _column_in_column_list591 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8004UL});
		public static readonly BitSet _141_in_column615 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_column629 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4UL});
		public static readonly BitSet _WS_in_column632 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _SIMPLE_FILE_in_column634 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INTO_in_into_clause657 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4UL});
		public static readonly BitSet _WS_in_into_clause659 = new BitSet(new ulong[]{0x20000000000000UL,0x0UL,0x2000000UL});
		public static readonly BitSet _file_in_into_clause661 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FROM_in_from_clause681 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4UL});
		public static readonly BitSet _WS_in_from_clause683 = new BitSet(new ulong[]{0xA0000000000000UL,0x0UL,0x2000800UL});
		public static readonly BitSet _from_clause_item_in_from_clause685 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8004UL});
		public static readonly BitSet _WS_in_from_clause688 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000UL});
		public static readonly BitSet _143_in_from_clause691 = new BitSet(new ulong[]{0xA0000000000000UL,0x0UL,0x2000804UL});
		public static readonly BitSet _WS_in_from_clause693 = new BitSet(new ulong[]{0xA0000000000000UL,0x0UL,0x2000800UL});
		public static readonly BitSet _from_clause_item_in_from_clause696 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8004UL});
		public static readonly BitSet _STRING_in_from_clause_item719 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _file_in_from_clause_item732 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _subquery_in_from_clause_item737 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _139_in_subquery749 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x4UL});
		public static readonly BitSet _WS_in_subquery751 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _select_command_in_subquery754 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1004UL});
		public static readonly BitSet _WS_in_subquery756 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000UL});
		public static readonly BitSet _140_in_subquery759 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _153_in_file778 = new BitSet(new ulong[]{0x80000000000000UL,0x0UL,0x4UL});
		public static readonly BitSet _WS_in_file780 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _STRING_in_file783 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000004UL});
		public static readonly BitSet _WS_in_file786 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _file_option_in_file788 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000004UL});
		public static readonly BitSet _WS_in_file792 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _154_in_file795 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SIMPLE_FILE_in_file812 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _144_in_file_option831 = new BitSet(new ulong[]{0x800000000000000UL});
		public static readonly BitSet _file_option_name_in_file_option833 = new BitSet(new ulong[]{0x2UL,0x0UL,0x400004UL});
		public static readonly BitSet _WS_in_file_option837 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000UL});
		public static readonly BitSet _150_in_file_option840 = new BitSet(new ulong[]{0x880080000000000UL,0x0UL,0x4UL});
		public static readonly BitSet _WS_in_file_option842 = new BitSet(new ulong[]{0x880080000000000UL});
		public static readonly BitSet _file_option_value_in_file_option845 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_file_option_name869 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHERE_in_where_clause901 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4UL});
		public static readonly BitSet _WS_in_where_clause903 = new BitSet(new ulong[]{0x9A00C000402C000UL,0x4000000000000000UL,0x800UL});
		public static readonly BitSet _expression_in_where_clause905 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GROUP_in_groupby_clause924 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4UL});
		public static readonly BitSet _WS_in_groupby_clause926 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _BY_in_groupby_clause928 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4UL});
		public static readonly BitSet _WS_in_groupby_clause930 = new BitSet(new ulong[]{0x9A00C000402C000UL,0x4000000000000000UL,0x800UL});
		public static readonly BitSet _expression_list_in_groupby_clause932 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ORDER_in_orderby_clause953 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4UL});
		public static readonly BitSet _WS_in_orderby_clause955 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _BY_in_orderby_clause957 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4UL});
		public static readonly BitSet _WS_in_orderby_clause959 = new BitSet(new ulong[]{0x9A00C000402C000UL,0x4000000000000000UL,0x800UL});
		public static readonly BitSet _orderby_column_list_in_orderby_clause961 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _orderby_column_in_orderby_column_list982 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8004UL});
		public static readonly BitSet _WS_in_orderby_column_list985 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000UL});
		public static readonly BitSet _143_in_orderby_column_list988 = new BitSet(new ulong[]{0x9A00C000402C000UL,0x4000000000000000UL,0x804UL});
		public static readonly BitSet _WS_in_orderby_column_list990 = new BitSet(new ulong[]{0x9A00C000402C000UL,0x4000000000000000UL,0x800UL});
		public static readonly BitSet _orderby_column_in_orderby_column_list993 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8004UL});
		public static readonly BitSet _expression_in_orderby_column1013 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4UL});
		public static readonly BitSet _WS_in_orderby_column1016 = new BitSet(new ulong[]{0x100200UL});
		public static readonly BitSet _orderby_direction_in_orderby_column1018 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASC_in_orderby_direction1043 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DESC_in_orderby_direction1052 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _USE_in_use_command1070 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4UL});
		public static readonly BitSet _WS_in_use_command1072 = new BitSet(new ulong[]{0x20000000000000UL,0x0UL,0x2000000UL});
		public static readonly BitSet _file_in_use_command1074 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DECLARE_in_declare_command1096 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4UL});
		public static readonly BitSet _WS_in_declare_command1098 = new BitSet(new ulong[]{0x0UL,0x4000000000000000UL});
		public static readonly BitSet _declaration_in_declare_command1100 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8004UL});
		public static readonly BitSet _WS_in_declare_command1103 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000UL});
		public static readonly BitSet _143_in_declare_command1106 = new BitSet(new ulong[]{0x0UL,0x4000000000000000UL,0x4UL});
		public static readonly BitSet _WS_in_declare_command1108 = new BitSet(new ulong[]{0x0UL,0x4000000000000000UL});
		public static readonly BitSet _declaration_in_declare_command1111 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8004UL});
		public static readonly BitSet _variable_in_declaration1135 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4UL});
		public static readonly BitSet _WS_in_declaration1137 = new BitSet(new ulong[]{0x800000000000100UL});
		public static readonly BitSet _AS_in_declaration1140 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4UL});
		public static readonly BitSet _WS_in_declaration1142 = new BitSet(new ulong[]{0x800000000000000UL});
		public static readonly BitSet _datatype_in_declaration1146 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SET_in_set_command1171 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4UL});
		public static readonly BitSet _WS_in_set_command1173 = new BitSet(new ulong[]{0x0UL,0x4000000000000000UL});
		public static readonly BitSet _variable_in_set_command1175 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400004UL});
		public static readonly BitSet _WS_in_set_command1177 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000UL});
		public static readonly BitSet _150_in_set_command1180 = new BitSet(new ulong[]{0x9A00C000402C000UL,0x4000000000000000UL,0x804UL});
		public static readonly BitSet _WS_in_set_command1182 = new BitSet(new ulong[]{0x9A00C000402C000UL,0x4000000000000000UL,0x800UL});
		public static readonly BitSet _expression_in_set_command1185 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_expression_list1210 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8004UL});
		public static readonly BitSet _WS_in_expression_list1213 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000UL});
		public static readonly BitSet _143_in_expression_list1216 = new BitSet(new ulong[]{0x9A00C000402C000UL,0x4000000000000000UL,0x804UL});
		public static readonly BitSet _WS_in_expression_list1218 = new BitSet(new ulong[]{0x9A00C000402C000UL,0x4000000000000000UL,0x800UL});
		public static readonly BitSet _expression_in_expression_list1221 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8004UL});
		public static readonly BitSet _expression_list_in_expression_list_or_select_command1244 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _select_command_in_expression_list_or_select_command1248 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_7_in_expression1260 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_6_in_expression_71276 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4UL});
		public static readonly BitSet _WS_in_expression_71283 = new BitSet(new ulong[]{0x254200000800UL,0x0UL,0x1F801C0UL});
		public static readonly BitSet _op_7_in_expression_71288 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4UL});
		public static readonly BitSet _WS_in_expression_71290 = new BitSet(new ulong[]{0x9A00C000402C000UL,0x4000000000000000UL,0x800UL});
		public static readonly BitSet _expression_6_in_expression_71294 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4UL});
		public static readonly BitSet _IN_in_expression_71313 = new BitSet(new ulong[]{0x0UL,0x0UL,0x804UL});
		public static readonly BitSet _WS_in_expression_71315 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800UL});
		public static readonly BitSet _139_in_expression_71318 = new BitSet(new ulong[]{0x9A80C000402C000UL,0x4000000000000000UL,0x804UL});
		public static readonly BitSet _WS_in_expression_71320 = new BitSet(new ulong[]{0x9A80C000402C000UL,0x4000000000000000UL,0x800UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_71323 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1004UL});
		public static readonly BitSet _WS_in_expression_71325 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000UL});
		public static readonly BitSet _140_in_expression_71328 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4UL});
		public static readonly BitSet _NOT_in_expression_71346 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4UL});
		public static readonly BitSet _WS_in_expression_71348 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _IN_in_expression_71350 = new BitSet(new ulong[]{0x0UL,0x0UL,0x804UL});
		public static readonly BitSet _WS_in_expression_71352 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800UL});
		public static readonly BitSet _139_in_expression_71355 = new BitSet(new ulong[]{0x9A80C000402C000UL,0x4000000000000000UL,0x804UL});
		public static readonly BitSet _WS_in_expression_71357 = new BitSet(new ulong[]{0x9A80C000402C000UL,0x4000000000000000UL,0x800UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_71361 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1004UL});
		public static readonly BitSet _WS_in_expression_71364 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000UL});
		public static readonly BitSet _140_in_expression_71367 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4UL});
		public static readonly BitSet _op_4_in_expression_71385 = new BitSet(new ulong[]{0x40000000000080UL,0x0UL,0x4UL});
		public static readonly BitSet _WS_in_expression_71387 = new BitSet(new ulong[]{0x40000000000080UL});
		public static readonly BitSet _SOME_in_expression_71391 = new BitSet(new ulong[]{0x0UL,0x0UL,0x804UL});
		public static readonly BitSet _ANY_in_expression_71395 = new BitSet(new ulong[]{0x0UL,0x0UL,0x804UL});
		public static readonly BitSet _WS_in_expression_71398 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800UL});
		public static readonly BitSet _139_in_expression_71401 = new BitSet(new ulong[]{0x9A80C000402C000UL,0x4000000000000000UL,0x800UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_71403 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000UL});
		public static readonly BitSet _140_in_expression_71405 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4UL});
		public static readonly BitSet _op_4_in_expression_71425 = new BitSet(new ulong[]{0x20UL,0x0UL,0x4UL});
		public static readonly BitSet _WS_in_expression_71427 = new BitSet(new ulong[]{0x20UL});
		public static readonly BitSet _ALL_in_expression_71430 = new BitSet(new ulong[]{0x0UL,0x0UL,0x804UL});
		public static readonly BitSet _WS_in_expression_71432 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800UL});
		public static readonly BitSet _139_in_expression_71435 = new BitSet(new ulong[]{0x9A80C000402C000UL,0x4000000000000000UL,0x800UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_71437 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000UL});
		public static readonly BitSet _140_in_expression_71439 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4UL});
		public static readonly BitSet _OR_in_op_71469 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LIKE_in_op_71478 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_71487 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4UL});
		public static readonly BitSet _WS_in_op_71489 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _LIKE_in_op_71491 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MATCH_in_op_71500 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_71509 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4UL});
		public static readonly BitSet _WS_in_op_71511 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _MATCH_in_op_71513 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BETWEEN_in_op_71522 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_71531 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4UL});
		public static readonly BitSet _WS_in_op_71533 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _BETWEEN_in_op_71535 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_5_in_expression_61554 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4UL});
		public static readonly BitSet _WS_in_expression_61561 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _op_6_in_expression_61563 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4UL});
		public static readonly BitSet _WS_in_expression_61565 = new BitSet(new ulong[]{0x9A00C000402C000UL,0x4000000000000000UL,0x800UL});
		public static readonly BitSet _expression_5_in_expression_61569 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4UL});
		public static readonly BitSet _AND_in_op_61597 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _op_5_in_expression_51615 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4UL});
		public static readonly BitSet _WS_in_expression_51617 = new BitSet(new ulong[]{0x9A00C000402C000UL,0x4000000000000000UL,0x800UL});
		public static readonly BitSet _expression_5_in_expression_51619 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_4_in_expression_51634 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_51645 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_3_in_expression_41664 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1F801C4UL});
		public static readonly BitSet _WS_in_expression_41671 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1F801C0UL});
		public static readonly BitSet _op_4_in_expression_41674 = new BitSet(new ulong[]{0x9A008000402C000UL,0x4000000000000000UL,0x804UL});
		public static readonly BitSet _WS_in_expression_41676 = new BitSet(new ulong[]{0x9A008000402C000UL,0x4000000000000000UL,0x800UL});
		public static readonly BitSet _expression_3_in_expression_41681 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1F801C4UL});
		public static readonly BitSet _150_in_op_41707 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _152_in_op_41716 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _148_in_op_41726 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _149_in_op_41736 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _135_in_op_41745 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _136_in_op_41754 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _134_in_op_41763 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _151_in_op_41772 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _147_in_op_41782 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_2_in_expression_31801 = new BitSet(new ulong[]{0x2UL,0x0UL,0x18014404UL});
		public static readonly BitSet _WS_in_expression_31808 = new BitSet(new ulong[]{0x0UL,0x0UL,0x18014400UL});
		public static readonly BitSet _op_3_in_expression_31811 = new BitSet(new ulong[]{0x9A008000402C000UL,0x4000000000000000UL,0x804UL});
		public static readonly BitSet _WS_in_expression_31813 = new BitSet(new ulong[]{0x9A008000402C000UL,0x4000000000000000UL,0x800UL});
		public static readonly BitSet _expression_2_in_expression_31818 = new BitSet(new ulong[]{0x2UL,0x0UL,0x18014404UL});
		public static readonly BitSet _142_in_op_31844 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _144_in_op_31853 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _138_in_op_31862 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _156_in_op_31871 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _155_in_op_31880 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_1_in_expression_21902 = new BitSet(new ulong[]{0x2UL,0x0UL,0x22204UL});
		public static readonly BitSet _WS_in_expression_21909 = new BitSet(new ulong[]{0x0UL,0x0UL,0x22200UL});
		public static readonly BitSet _op_2_in_expression_21912 = new BitSet(new ulong[]{0x9A008000402C000UL,0x4000000000000000UL,0x804UL});
		public static readonly BitSet _WS_in_expression_21914 = new BitSet(new ulong[]{0x9A008000402C000UL,0x4000000000000000UL,0x800UL});
		public static readonly BitSet _expression_1_in_expression_21919 = new BitSet(new ulong[]{0x2UL,0x0UL,0x22204UL});
		public static readonly BitSet _141_in_op_21945 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _145_in_op_21954 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _137_in_op_21963 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _139_in_expression_11981 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20014004UL});
		public static readonly BitSet _WS_in_expression_11983 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20014000UL});
		public static readonly BitSet _op_1_in_expression_11986 = new BitSet(new ulong[]{0x9A008000402C000UL,0x4000000000000000UL,0x804UL});
		public static readonly BitSet _WS_in_expression_11988 = new BitSet(new ulong[]{0x9A008000402C000UL,0x4000000000000000UL,0x800UL});
		public static readonly BitSet _expression_1_in_expression_11991 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1004UL});
		public static readonly BitSet _WS_in_expression_11993 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000UL});
		public static readonly BitSet _140_in_expression_11996 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_atom_in_expression_12013 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _157_in_op_12023 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _142_in_op_12033 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _144_in_op_12042 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_expression_atom2057 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_expression_atom2070 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SYSTEMVAR_in_expression_atom2083 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VARIABLE_in_expression_atom2096 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _subquery_in_expression_atom2109 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _139_in_expression_atom2114 = new BitSet(new ulong[]{0x9A00C000402C000UL,0x4000000000000000UL,0x800UL});
		public static readonly BitSet _expression_in_expression_atom2116 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000UL});
		public static readonly BitSet _140_in_expression_atom2118 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functioncall_or_column_in_expression_atom2127 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conversion_in_expression_atom2132 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _case_in_expression_atom2137 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXISTS_in_expression_atom2142 = new BitSet(new ulong[]{0x0UL,0x0UL,0x804UL});
		public static readonly BitSet _WS_in_expression_atom2144 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800UL});
		public static readonly BitSet _139_in_expression_atom2147 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x4UL});
		public static readonly BitSet _WS_in_expression_atom2149 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _select_command_in_expression_atom2152 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1004UL});
		public static readonly BitSet _WS_in_expression_atom2154 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000UL});
		public static readonly BitSet _140_in_expression_atom2157 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_functioncall_or_column2177 = new BitSet(new ulong[]{0x0UL,0x0UL,0x804UL});
		public static readonly BitSet _WS_in_functioncall_or_column2179 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800UL});
		public static readonly BitSet _139_in_functioncall_or_column2182 = new BitSet(new ulong[]{0x9A00C000402C000UL,0x4000000000000000UL,0x1804UL});
		public static readonly BitSet _WS_in_functioncall_or_column2184 = new BitSet(new ulong[]{0x9A00C000402C000UL,0x4000000000000000UL,0x1800UL});
		public static readonly BitSet _expression_in_functioncall_or_column2188 = new BitSet(new ulong[]{0x0UL,0x0UL,0x9004UL});
		public static readonly BitSet _WS_in_functioncall_or_column2190 = new BitSet(new ulong[]{0x0UL,0x0UL,0x9000UL});
		public static readonly BitSet _143_in_functioncall_or_column2194 = new BitSet(new ulong[]{0x9A00C000402C000UL,0x4000000000000000UL,0x804UL});
		public static readonly BitSet _WS_in_functioncall_or_column2196 = new BitSet(new ulong[]{0x9A00C000402C000UL,0x4000000000000000UL,0x800UL});
		public static readonly BitSet _expression_in_functioncall_or_column2199 = new BitSet(new ulong[]{0x0UL,0x0UL,0x9004UL});
		public static readonly BitSet _WS_in_functioncall_or_column2201 = new BitSet(new ulong[]{0x0UL,0x0UL,0x9000UL});
		public static readonly BitSet _140_in_functioncall_or_column2208 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SIMPLE_FILE_in_functioncall_or_column2226 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CONVERT_in_conversion2246 = new BitSet(new ulong[]{0x0UL,0x0UL,0x804UL});
		public static readonly BitSet _WS_in_conversion2248 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800UL});
		public static readonly BitSet _139_in_conversion2251 = new BitSet(new ulong[]{0x800000000000000UL,0x0UL,0x4UL});
		public static readonly BitSet _WS_in_conversion2253 = new BitSet(new ulong[]{0x800000000000000UL});
		public static readonly BitSet _TOKEN_in_conversion2256 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8004UL});
		public static readonly BitSet _WS_in_conversion2258 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000UL});
		public static readonly BitSet _143_in_conversion2261 = new BitSet(new ulong[]{0x9A00C000402C000UL,0x4000000000000000UL,0x804UL});
		public static readonly BitSet _WS_in_conversion2263 = new BitSet(new ulong[]{0x9A00C000402C000UL,0x4000000000000000UL,0x800UL});
		public static readonly BitSet _expression_in_conversion2266 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1004UL});
		public static readonly BitSet _WS_in_conversion2268 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000UL});
		public static readonly BitSet _140_in_conversion2271 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CAST_in_conversion2286 = new BitSet(new ulong[]{0x0UL,0x0UL,0x804UL});
		public static readonly BitSet _WS_in_conversion2288 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800UL});
		public static readonly BitSet _139_in_conversion2291 = new BitSet(new ulong[]{0x9A00C000402C000UL,0x4000000000000000UL,0x804UL});
		public static readonly BitSet _WS_in_conversion2293 = new BitSet(new ulong[]{0x9A00C000402C000UL,0x4000000000000000UL,0x800UL});
		public static readonly BitSet _expression_in_conversion2296 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4UL});
		public static readonly BitSet _WS_in_conversion2298 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _AS_in_conversion2300 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4UL});
		public static readonly BitSet _WS_in_conversion2302 = new BitSet(new ulong[]{0x800000000000000UL});
		public static readonly BitSet _datatype_in_conversion2304 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1004UL});
		public static readonly BitSet _WS_in_conversion2306 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000UL});
		public static readonly BitSet _140_in_conversion2309 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_datatype2331 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VARIABLE_in_variable2343 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CASE_in_case2355 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4UL});
		public static readonly BitSet _WS_in_case2357 = new BitSet(new ulong[]{0x9A00C000702C000UL,0x4000000000000000UL,0x801UL});
		public static readonly BitSet _expression_in_case2360 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4UL});
		public static readonly BitSet _WS_in_case2362 = new BitSet(new ulong[]{0x3000000UL,0x0UL,0x1UL});
		public static readonly BitSet _case_when_in_case2367 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4UL});
		public static readonly BitSet _WS_in_case2369 = new BitSet(new ulong[]{0x3000000UL,0x0UL,0x1UL});
		public static readonly BitSet _case_else_in_case2374 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4UL});
		public static readonly BitSet _WS_in_case2376 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _END_in_case2380 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHEN_in_case_when2408 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4UL});
		public static readonly BitSet _WS_in_case_when2410 = new BitSet(new ulong[]{0x9A00C000402C000UL,0x4000000000000000UL,0x800UL});
		public static readonly BitSet _expression_in_case_when2414 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4UL});
		public static readonly BitSet _WS_in_case_when2416 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _THEN_in_case_when2418 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4UL});
		public static readonly BitSet _WS_in_case_when2420 = new BitSet(new ulong[]{0x9A00C000402C000UL,0x4000000000000000UL,0x800UL});
		public static readonly BitSet _expression_in_case_when2424 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ELSE_in_case_else2449 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4UL});
		public static readonly BitSet _WS_in_case_else2451 = new BitSet(new ulong[]{0x9A00C000402C000UL,0x4000000000000000UL,0x800UL});
		public static readonly BitSet _expression_in_case_else2453 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  FxGqlLib 
