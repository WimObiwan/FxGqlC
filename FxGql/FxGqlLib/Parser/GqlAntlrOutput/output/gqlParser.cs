//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g 2012-06-26 14:06:22

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591


// `XXX' does not need a CLSCompliant attribute because the assembly is not marked as CLS-compliant (CS3021)
#pragma warning disable 3021
// The private field `XXX' is assigned but its value is never used (CS0414)
#pragma warning disable 414


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  FxGqlLib 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class gqlParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "A", "ALL", "AND", "ANY", "AS", "ASC", "B", "BETWEEN", "BY", "C", "CASE", "CAST", "COMMENT_LINE", "CONVERT", "CREATE", "D", "DECLARE", "DESC", "DIGIT", "DISTINCT", "E", "ELSE", "END", "EXISTS", "F", "FROM", "G", "GROUP", "H", "I", "IN", "INTO", "J", "K", "L", "LIKE", "M", "MATCH", "N", "NOT", "NUMBER", "O", "OR", "ORDER", "P", "Q", "R", "S", "SELECT", "SET", "SIMPLE_FILE", "SOME", "STRING", "SYSTEMVAR", "T", "THEN", "TOKEN", "TOP", "T_ALL", "T_AND", "T_ANY", "T_BETWEEN", "T_BITWISE_AND", "T_BITWISE_NOT", "T_BITWISE_OR", "T_BITWISE_XOR", "T_CASE", "T_CASE_ELSE", "T_CASE_WHEN", "T_COLUMN", "T_COLUMNLIST", "T_CONVERT", "T_CREATE_VIEW", "T_DECLARATION", "T_DECLARE", "T_DISTINCT", "T_DIVIDE", "T_EQUAL", "T_EXISTS", "T_EXPRESSIONLIST", "T_FILE", "T_FILEOPTION", "T_FROM", "T_FUNCTIONCALL", "T_GREATER", "T_GROUPBY", "T_IN", "T_INTEGER", "T_INTO", "T_LESS", "T_LIKE", "T_MATCH", "T_MINUS", "T_MODULO", "T_NOT", "T_NOTBETWEEN", "T_NOTEQUAL", "T_NOTGREATER", "T_NOTIN", "T_NOTLESS", "T_NOTLIKE", "T_NOTMATCH", "T_OP_BINARY", "T_OP_UNARY", "T_OR", "T_ORDERBY", "T_ORDERBY_ASC", "T_ORDERBY_COLUMN", "T_ORDERBY_DESC", "T_PLUS", "T_PRODUCT", "T_ROOT", "T_SELECT", "T_SET_VARIABLE", "T_STRING", "T_SUBQUERY", "T_SYSTEMVAR", "T_TOP", "T_USE", "T_VARIABLE", "T_VIEW_NAME", "T_WHERE", "U", "USE", "V", "VARIABLE", "VIEW", "W", "WHEN", "WHERE", "WS", "X", "Y", "Z", "'!<'", "'!='", "'!>'", "'%'", "'&'", "'('", "')'", "'*'", "'+'", "','", "'-'", "'/'", "';'", "'<'", "'<='", "'<>'", "'='", "'>'", "'>='", "'['", "']'", "'^'", "'|'", "'~'"
	};
	public const int EOF=-1;
	public const int T__138=138;
	public const int T__139=139;
	public const int T__140=140;
	public const int T__141=141;
	public const int T__142=142;
	public const int T__143=143;
	public const int T__144=144;
	public const int T__145=145;
	public const int T__146=146;
	public const int T__147=147;
	public const int T__148=148;
	public const int T__149=149;
	public const int T__150=150;
	public const int T__151=151;
	public const int T__152=152;
	public const int T__153=153;
	public const int T__154=154;
	public const int T__155=155;
	public const int T__156=156;
	public const int T__157=157;
	public const int T__158=158;
	public const int T__159=159;
	public const int T__160=160;
	public const int T__161=161;
	public const int A=4;
	public const int ALL=5;
	public const int AND=6;
	public const int ANY=7;
	public const int AS=8;
	public const int ASC=9;
	public const int B=10;
	public const int BETWEEN=11;
	public const int BY=12;
	public const int C=13;
	public const int CASE=14;
	public const int CAST=15;
	public const int COMMENT_LINE=16;
	public const int CONVERT=17;
	public const int CREATE=18;
	public const int D=19;
	public const int DECLARE=20;
	public const int DESC=21;
	public const int DIGIT=22;
	public const int DISTINCT=23;
	public const int E=24;
	public const int ELSE=25;
	public const int END=26;
	public const int EXISTS=27;
	public const int F=28;
	public const int FROM=29;
	public const int G=30;
	public const int GROUP=31;
	public const int H=32;
	public const int I=33;
	public const int IN=34;
	public const int INTO=35;
	public const int J=36;
	public const int K=37;
	public const int L=38;
	public const int LIKE=39;
	public const int M=40;
	public const int MATCH=41;
	public const int N=42;
	public const int NOT=43;
	public const int NUMBER=44;
	public const int O=45;
	public const int OR=46;
	public const int ORDER=47;
	public const int P=48;
	public const int Q=49;
	public const int R=50;
	public const int S=51;
	public const int SELECT=52;
	public const int SET=53;
	public const int SIMPLE_FILE=54;
	public const int SOME=55;
	public const int STRING=56;
	public const int SYSTEMVAR=57;
	public const int T=58;
	public const int THEN=59;
	public const int TOKEN=60;
	public const int TOP=61;
	public const int T_ALL=62;
	public const int T_AND=63;
	public const int T_ANY=64;
	public const int T_BETWEEN=65;
	public const int T_BITWISE_AND=66;
	public const int T_BITWISE_NOT=67;
	public const int T_BITWISE_OR=68;
	public const int T_BITWISE_XOR=69;
	public const int T_CASE=70;
	public const int T_CASE_ELSE=71;
	public const int T_CASE_WHEN=72;
	public const int T_COLUMN=73;
	public const int T_COLUMNLIST=74;
	public const int T_CONVERT=75;
	public const int T_CREATE_VIEW=76;
	public const int T_DECLARATION=77;
	public const int T_DECLARE=78;
	public const int T_DISTINCT=79;
	public const int T_DIVIDE=80;
	public const int T_EQUAL=81;
	public const int T_EXISTS=82;
	public const int T_EXPRESSIONLIST=83;
	public const int T_FILE=84;
	public const int T_FILEOPTION=85;
	public const int T_FROM=86;
	public const int T_FUNCTIONCALL=87;
	public const int T_GREATER=88;
	public const int T_GROUPBY=89;
	public const int T_IN=90;
	public const int T_INTEGER=91;
	public const int T_INTO=92;
	public const int T_LESS=93;
	public const int T_LIKE=94;
	public const int T_MATCH=95;
	public const int T_MINUS=96;
	public const int T_MODULO=97;
	public const int T_NOT=98;
	public const int T_NOTBETWEEN=99;
	public const int T_NOTEQUAL=100;
	public const int T_NOTGREATER=101;
	public const int T_NOTIN=102;
	public const int T_NOTLESS=103;
	public const int T_NOTLIKE=104;
	public const int T_NOTMATCH=105;
	public const int T_OP_BINARY=106;
	public const int T_OP_UNARY=107;
	public const int T_OR=108;
	public const int T_ORDERBY=109;
	public const int T_ORDERBY_ASC=110;
	public const int T_ORDERBY_COLUMN=111;
	public const int T_ORDERBY_DESC=112;
	public const int T_PLUS=113;
	public const int T_PRODUCT=114;
	public const int T_ROOT=115;
	public const int T_SELECT=116;
	public const int T_SET_VARIABLE=117;
	public const int T_STRING=118;
	public const int T_SUBQUERY=119;
	public const int T_SYSTEMVAR=120;
	public const int T_TOP=121;
	public const int T_USE=122;
	public const int T_VARIABLE=123;
	public const int T_VIEW_NAME=124;
	public const int T_WHERE=125;
	public const int U=126;
	public const int USE=127;
	public const int V=128;
	public const int VARIABLE=129;
	public const int VIEW=130;
	public const int W=131;
	public const int WHEN=132;
	public const int WHERE=133;
	public const int WS=134;
	public const int X=135;
	public const int Y=136;
	public const int Z=137;

	#if ANTLR_DEBUG
		private static readonly bool[] decisionCanBacktrack =
			new bool[]
			{
				false, // invalid decision
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false
			};
	#else
		private static readonly bool[] decisionCanBacktrack = new bool[0];
	#endif
	public gqlParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public gqlParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}
	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return gqlParser.tokenNames; } }
	public override string GrammarFileName { get { return "C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g"; } }


	[Conditional("ANTLR_TRACE")]
	protected virtual void OnCreated() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

	#region Rules

	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_parse() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_parse() {}

	// $ANTLR start "parse"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:95:1: parse : ( WS )? ( commands ( WS )? )? EOF -> ^( T_ROOT ( commands )? ) ;
	[GrammarRule("parse")]
	private AstParserRuleReturnScope<object, IToken> parse()
	{
		EnterRule_parse();
		EnterRule("parse", 1);
		TraceIn("parse", 1);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS1 = default(IToken);
	    IToken WS3 = default(IToken);
	    IToken EOF4 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> commands2 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS1_tree = default(object);
	    object WS3_tree = default(object);
	    object EOF4_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
	    RewriteRuleSubtreeStream stream_commands=new RewriteRuleSubtreeStream(adaptor,"rule commands");
		try { DebugEnterRule(GrammarFileName, "parse");
		DebugLocation(95, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:96:2: ( ( WS )? ( commands ( WS )? )? EOF -> ^( T_ROOT ( commands )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:96:4: ( WS )? ( commands ( WS )? )? EOF
			{
			DebugLocation(96, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:96:4: ( WS )?
			int alt1=2;
			try { DebugEnterSubRule(1);
			try { DebugEnterDecision(1, decisionCanBacktrack[1]);
			int LA1_0 = input.LA(1);

			if ((LA1_0==WS))
			{
				alt1 = 1;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:96:4: WS
				{
				DebugLocation(96, 4);
				WS1=(IToken)Match(input,WS,Follow._WS_in_parse336);  
				stream_WS.Add(WS1);


				}
				break;

			}
			} finally { DebugExitSubRule(1); }

			DebugLocation(96, 8);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:96:8: ( commands ( WS )? )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, decisionCanBacktrack[3]);
			int LA3_0 = input.LA(1);

			if ((LA3_0==CREATE||LA3_0==DECLARE||(LA3_0>=SELECT && LA3_0<=SET)||LA3_0==USE))
			{
				alt3 = 1;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:96:9: commands ( WS )?
				{
				DebugLocation(96, 9);
				PushFollow(Follow._commands_in_parse340);
				commands2=commands();
				PopFollow();

				stream_commands.Add(commands2.Tree);
				DebugLocation(96, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:96:18: ( WS )?
				int alt2=2;
				try { DebugEnterSubRule(2);
				try { DebugEnterDecision(2, decisionCanBacktrack[2]);
				int LA2_0 = input.LA(1);

				if ((LA2_0==WS))
				{
					alt2 = 1;
				}
				} finally { DebugExitDecision(2); }
				switch (alt2)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:96:18: WS
					{
					DebugLocation(96, 18);
					WS3=(IToken)Match(input,WS,Follow._WS_in_parse342);  
					stream_WS.Add(WS3);


					}
					break;

				}
				} finally { DebugExitSubRule(2); }


				}
				break;

			}
			} finally { DebugExitSubRule(3); }

			DebugLocation(96, 24);
			EOF4=(IToken)Match(input,EOF,Follow._EOF_in_parse347);  
			stream_EOF.Add(EOF4);



			{
			// AST REWRITE
			// elements: commands
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 97:2: -> ^( T_ROOT ( commands )? )
			{
				DebugLocation(97, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:97:5: ^( T_ROOT ( commands )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(97, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_ROOT, "T_ROOT"), root_1);

				DebugLocation(97, 14);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:97:14: ( commands )?
				if (stream_commands.HasNext)
				{
					DebugLocation(97, 14);
					adaptor.AddChild(root_1, stream_commands.NextTree());

				}
				stream_commands.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parse", 1);
			LeaveRule("parse", 1);
			LeaveRule_parse();
	    }
	 	DebugLocation(98, 1);
		} finally { DebugExitRule(GrammarFileName, "parse"); }
		return retval;

	}
	// $ANTLR end "parse"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_commands() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_commands() {}

	// $ANTLR start "commands"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:100:1: commands : command ( ( WS )? ( ';' ( WS )? )? command )* ( ( WS )? ';' )? -> ( command )+ ;
	[GrammarRule("commands")]
	private AstParserRuleReturnScope<object, IToken> commands()
	{
		EnterRule_commands();
		EnterRule("commands", 2);
		TraceIn("commands", 2);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS6 = default(IToken);
	    IToken char_literal7 = default(IToken);
	    IToken WS8 = default(IToken);
	    IToken WS10 = default(IToken);
	    IToken char_literal11 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> command5 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> command9 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS6_tree = default(object);
	    object char_literal7_tree = default(object);
	    object WS8_tree = default(object);
	    object WS10_tree = default(object);
	    object char_literal11_tree = default(object);
	    RewriteRuleITokenStream stream_150=new RewriteRuleITokenStream(adaptor,"token 150");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_command=new RewriteRuleSubtreeStream(adaptor,"rule command");
		try { DebugEnterRule(GrammarFileName, "commands");
		DebugLocation(100, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:101:2: ( command ( ( WS )? ( ';' ( WS )? )? command )* ( ( WS )? ';' )? -> ( command )+ )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:101:4: command ( ( WS )? ( ';' ( WS )? )? command )* ( ( WS )? ';' )?
			{
			DebugLocation(101, 4);
			PushFollow(Follow._command_in_commands370);
			command5=command();
			PopFollow();

			stream_command.Add(command5.Tree);
			DebugLocation(101, 12);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:101:12: ( ( WS )? ( ';' ( WS )? )? command )*
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, decisionCanBacktrack[7]);
				switch (input.LA(1))
				{
				case WS:
					{
					int LA7_1 = input.LA(2);

					if ((LA7_1==150))
					{
						int LA7_2 = input.LA(3);

						if ((LA7_2==WS))
						{
							int LA7_5 = input.LA(4);

							if ((LA7_5==CREATE||LA7_5==DECLARE||(LA7_5>=SELECT && LA7_5<=SET)||LA7_5==USE))
							{
								alt7 = 1;
							}


						}
						else if ((LA7_2==CREATE||LA7_2==DECLARE||(LA7_2>=SELECT && LA7_2<=SET)||LA7_2==USE))
						{
							alt7 = 1;
						}


					}
					else if ((LA7_1==CREATE||LA7_1==DECLARE||(LA7_1>=SELECT && LA7_1<=SET)||LA7_1==USE))
					{
						alt7 = 1;
					}


					}
					break;
				case 150:
					{
					int LA7_2 = input.LA(2);

					if ((LA7_2==WS))
					{
						int LA7_5 = input.LA(3);

						if ((LA7_5==CREATE||LA7_5==DECLARE||(LA7_5>=SELECT && LA7_5<=SET)||LA7_5==USE))
						{
							alt7 = 1;
						}


					}
					else if ((LA7_2==CREATE||LA7_2==DECLARE||(LA7_2>=SELECT && LA7_2<=SET)||LA7_2==USE))
					{
						alt7 = 1;
					}


					}
					break;
				case CREATE:
				case DECLARE:
				case SELECT:
				case SET:
				case USE:
					{
					alt7 = 1;
					}
					break;
				}

				} finally { DebugExitDecision(7); }
				switch ( alt7 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:101:13: ( WS )? ( ';' ( WS )? )? command
					{
					DebugLocation(101, 13);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:101:13: ( WS )?
					int alt4=2;
					try { DebugEnterSubRule(4);
					try { DebugEnterDecision(4, decisionCanBacktrack[4]);
					int LA4_0 = input.LA(1);

					if ((LA4_0==WS))
					{
						alt4 = 1;
					}
					} finally { DebugExitDecision(4); }
					switch (alt4)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:101:13: WS
						{
						DebugLocation(101, 13);
						WS6=(IToken)Match(input,WS,Follow._WS_in_commands373);  
						stream_WS.Add(WS6);


						}
						break;

					}
					} finally { DebugExitSubRule(4); }

					DebugLocation(101, 17);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:101:17: ( ';' ( WS )? )?
					int alt6=2;
					try { DebugEnterSubRule(6);
					try { DebugEnterDecision(6, decisionCanBacktrack[6]);
					int LA6_0 = input.LA(1);

					if ((LA6_0==150))
					{
						alt6 = 1;
					}
					} finally { DebugExitDecision(6); }
					switch (alt6)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:101:18: ';' ( WS )?
						{
						DebugLocation(101, 18);
						char_literal7=(IToken)Match(input,150,Follow._150_in_commands377);  
						stream_150.Add(char_literal7);

						DebugLocation(101, 22);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:101:22: ( WS )?
						int alt5=2;
						try { DebugEnterSubRule(5);
						try { DebugEnterDecision(5, decisionCanBacktrack[5]);
						int LA5_0 = input.LA(1);

						if ((LA5_0==WS))
						{
							alt5 = 1;
						}
						} finally { DebugExitDecision(5); }
						switch (alt5)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:101:22: WS
							{
							DebugLocation(101, 22);
							WS8=(IToken)Match(input,WS,Follow._WS_in_commands379);  
							stream_WS.Add(WS8);


							}
							break;

						}
						} finally { DebugExitSubRule(5); }


						}
						break;

					}
					} finally { DebugExitSubRule(6); }

					DebugLocation(101, 28);
					PushFollow(Follow._command_in_commands384);
					command9=command();
					PopFollow();

					stream_command.Add(command9.Tree);

					}
					break;

				default:
					goto loop7;
				}
			}

			loop7:
				;

			} finally { DebugExitSubRule(7); }

			DebugLocation(101, 38);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:101:38: ( ( WS )? ';' )?
			int alt9=2;
			try { DebugEnterSubRule(9);
			try { DebugEnterDecision(9, decisionCanBacktrack[9]);
			int LA9_0 = input.LA(1);

			if ((LA9_0==WS))
			{
				int LA9_1 = input.LA(2);

				if ((LA9_1==150))
				{
					alt9 = 1;
				}
			}
			else if ((LA9_0==150))
			{
				alt9 = 1;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:101:39: ( WS )? ';'
				{
				DebugLocation(101, 39);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:101:39: ( WS )?
				int alt8=2;
				try { DebugEnterSubRule(8);
				try { DebugEnterDecision(8, decisionCanBacktrack[8]);
				int LA8_0 = input.LA(1);

				if ((LA8_0==WS))
				{
					alt8 = 1;
				}
				} finally { DebugExitDecision(8); }
				switch (alt8)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:101:39: WS
					{
					DebugLocation(101, 39);
					WS10=(IToken)Match(input,WS,Follow._WS_in_commands389);  
					stream_WS.Add(WS10);


					}
					break;

				}
				} finally { DebugExitSubRule(8); }

				DebugLocation(101, 43);
				char_literal11=(IToken)Match(input,150,Follow._150_in_commands392);  
				stream_150.Add(char_literal11);


				}
				break;

			}
			} finally { DebugExitSubRule(9); }



			{
			// AST REWRITE
			// elements: command
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 102:2: -> ( command )+
			{
				DebugLocation(102, 5);
				if (!(stream_command.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_command.HasNext )
				{
					DebugLocation(102, 5);
					adaptor.AddChild(root_0, stream_command.NextTree());

				}
				stream_command.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("commands", 2);
			LeaveRule("commands", 2);
			LeaveRule_commands();
	    }
	 	DebugLocation(103, 1);
		} finally { DebugExitRule(GrammarFileName, "commands"); }
		return retval;

	}
	// $ANTLR end "commands"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_command() {}

	// $ANTLR start "command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:105:1: command : ( select_command | use_command | declare_command | set_command | create_view_command );
	[GrammarRule("command")]
	private AstParserRuleReturnScope<object, IToken> command()
	{
		EnterRule_command();
		EnterRule("command", 3);
		TraceIn("command", 3);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> select_command12 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> use_command13 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> declare_command14 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> set_command15 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> create_view_command16 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "command");
		DebugLocation(105, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:106:2: ( select_command | use_command | declare_command | set_command | create_view_command )
			int alt10=5;
			try { DebugEnterDecision(10, decisionCanBacktrack[10]);
			switch (input.LA(1))
			{
			case SELECT:
				{
				alt10 = 1;
				}
				break;
			case USE:
				{
				alt10 = 2;
				}
				break;
			case DECLARE:
				{
				alt10 = 3;
				}
				break;
			case SET:
				{
				alt10 = 4;
				}
				break;
			case CREATE:
				{
				alt10 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 10, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:106:4: select_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(106, 4);
				PushFollow(Follow._select_command_in_command412);
				select_command12=select_command();
				PopFollow();

				adaptor.AddChild(root_0, select_command12.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:107:4: use_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(107, 4);
				PushFollow(Follow._use_command_in_command417);
				use_command13=use_command();
				PopFollow();

				adaptor.AddChild(root_0, use_command13.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:108:4: declare_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(108, 4);
				PushFollow(Follow._declare_command_in_command422);
				declare_command14=declare_command();
				PopFollow();

				adaptor.AddChild(root_0, declare_command14.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:109:4: set_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(109, 4);
				PushFollow(Follow._set_command_in_command427);
				set_command15=set_command();
				PopFollow();

				adaptor.AddChild(root_0, set_command15.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:110:4: create_view_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(110, 4);
				PushFollow(Follow._create_view_command_in_command432);
				create_view_command16=create_view_command();
				PopFollow();

				adaptor.AddChild(root_0, create_view_command16.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("command", 3);
			LeaveRule("command", 3);
			LeaveRule_command();
	    }
	 	DebugLocation(111, 1);
		} finally { DebugExitRule(GrammarFileName, "command"); }
		return retval;

	}
	// $ANTLR end "command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_select_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_select_command() {}

	// $ANTLR start "select_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:116:1: select_command : SELECT ( WS distinct_clause )? ( WS top_clause )? WS column_list ( WS into_clause )? ( WS from_clause )? ( WS where_clause )? ( WS groupby_clause )? ( WS orderby_clause )? -> ^( T_SELECT ( distinct_clause )? ( top_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( orderby_clause )? ) ;
	[GrammarRule("select_command")]
	private AstParserRuleReturnScope<object, IToken> select_command()
	{
		EnterRule_select_command();
		EnterRule("select_command", 4);
		TraceIn("select_command", 4);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken SELECT17 = default(IToken);
	    IToken WS18 = default(IToken);
	    IToken WS20 = default(IToken);
	    IToken WS22 = default(IToken);
	    IToken WS24 = default(IToken);
	    IToken WS26 = default(IToken);
	    IToken WS28 = default(IToken);
	    IToken WS30 = default(IToken);
	    IToken WS32 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> distinct_clause19 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> top_clause21 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> column_list23 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> into_clause25 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> from_clause27 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> where_clause29 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> groupby_clause31 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> orderby_clause33 = default(AstParserRuleReturnScope<object, IToken>);

	    object SELECT17_tree = default(object);
	    object WS18_tree = default(object);
	    object WS20_tree = default(object);
	    object WS22_tree = default(object);
	    object WS24_tree = default(object);
	    object WS26_tree = default(object);
	    object WS28_tree = default(object);
	    object WS30_tree = default(object);
	    object WS32_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_SELECT=new RewriteRuleITokenStream(adaptor,"token SELECT");
	    RewriteRuleSubtreeStream stream_groupby_clause=new RewriteRuleSubtreeStream(adaptor,"rule groupby_clause");
	    RewriteRuleSubtreeStream stream_distinct_clause=new RewriteRuleSubtreeStream(adaptor,"rule distinct_clause");
	    RewriteRuleSubtreeStream stream_from_clause=new RewriteRuleSubtreeStream(adaptor,"rule from_clause");
	    RewriteRuleSubtreeStream stream_column_list=new RewriteRuleSubtreeStream(adaptor,"rule column_list");
	    RewriteRuleSubtreeStream stream_where_clause=new RewriteRuleSubtreeStream(adaptor,"rule where_clause");
	    RewriteRuleSubtreeStream stream_into_clause=new RewriteRuleSubtreeStream(adaptor,"rule into_clause");
	    RewriteRuleSubtreeStream stream_top_clause=new RewriteRuleSubtreeStream(adaptor,"rule top_clause");
	    RewriteRuleSubtreeStream stream_orderby_clause=new RewriteRuleSubtreeStream(adaptor,"rule orderby_clause");
		try { DebugEnterRule(GrammarFileName, "select_command");
		DebugLocation(116, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:117:2: ( SELECT ( WS distinct_clause )? ( WS top_clause )? WS column_list ( WS into_clause )? ( WS from_clause )? ( WS where_clause )? ( WS groupby_clause )? ( WS orderby_clause )? -> ^( T_SELECT ( distinct_clause )? ( top_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( orderby_clause )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:117:4: SELECT ( WS distinct_clause )? ( WS top_clause )? WS column_list ( WS into_clause )? ( WS from_clause )? ( WS where_clause )? ( WS groupby_clause )? ( WS orderby_clause )?
			{
			DebugLocation(117, 4);
			SELECT17=(IToken)Match(input,SELECT,Follow._SELECT_in_select_command446);  
			stream_SELECT.Add(SELECT17);

			DebugLocation(117, 11);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:117:11: ( WS distinct_clause )?
			int alt11=2;
			try { DebugEnterSubRule(11);
			try { DebugEnterDecision(11, decisionCanBacktrack[11]);
			int LA11_0 = input.LA(1);

			if ((LA11_0==WS))
			{
				int LA11_1 = input.LA(2);

				if ((LA11_1==ALL||LA11_1==DISTINCT))
				{
					alt11 = 1;
				}
			}
			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:117:12: WS distinct_clause
				{
				DebugLocation(117, 12);
				WS18=(IToken)Match(input,WS,Follow._WS_in_select_command449);  
				stream_WS.Add(WS18);

				DebugLocation(117, 15);
				PushFollow(Follow._distinct_clause_in_select_command451);
				distinct_clause19=distinct_clause();
				PopFollow();

				stream_distinct_clause.Add(distinct_clause19.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(11); }

			DebugLocation(117, 33);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:117:33: ( WS top_clause )?
			int alt12=2;
			try { DebugEnterSubRule(12);
			try { DebugEnterDecision(12, decisionCanBacktrack[12]);
			int LA12_0 = input.LA(1);

			if ((LA12_0==WS))
			{
				int LA12_1 = input.LA(2);

				if ((LA12_1==TOP))
				{
					alt12 = 1;
				}
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:117:34: WS top_clause
				{
				DebugLocation(117, 34);
				WS20=(IToken)Match(input,WS,Follow._WS_in_select_command456);  
				stream_WS.Add(WS20);

				DebugLocation(117, 37);
				PushFollow(Follow._top_clause_in_select_command458);
				top_clause21=top_clause();
				PopFollow();

				stream_top_clause.Add(top_clause21.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(12); }

			DebugLocation(117, 50);
			WS22=(IToken)Match(input,WS,Follow._WS_in_select_command462);  
			stream_WS.Add(WS22);

			DebugLocation(117, 53);
			PushFollow(Follow._column_list_in_select_command464);
			column_list23=column_list();
			PopFollow();

			stream_column_list.Add(column_list23.Tree);
			DebugLocation(117, 65);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:117:65: ( WS into_clause )?
			int alt13=2;
			try { DebugEnterSubRule(13);
			try { DebugEnterDecision(13, decisionCanBacktrack[13]);
			int LA13_0 = input.LA(1);

			if ((LA13_0==WS))
			{
				int LA13_1 = input.LA(2);

				if ((LA13_1==INTO))
				{
					alt13 = 1;
				}
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:117:66: WS into_clause
				{
				DebugLocation(117, 66);
				WS24=(IToken)Match(input,WS,Follow._WS_in_select_command467);  
				stream_WS.Add(WS24);

				DebugLocation(117, 69);
				PushFollow(Follow._into_clause_in_select_command469);
				into_clause25=into_clause();
				PopFollow();

				stream_into_clause.Add(into_clause25.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(13); }

			DebugLocation(117, 83);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:117:83: ( WS from_clause )?
			int alt14=2;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, decisionCanBacktrack[14]);
			int LA14_0 = input.LA(1);

			if ((LA14_0==WS))
			{
				int LA14_1 = input.LA(2);

				if ((LA14_1==FROM))
				{
					alt14 = 1;
				}
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:117:84: WS from_clause
				{
				DebugLocation(117, 84);
				WS26=(IToken)Match(input,WS,Follow._WS_in_select_command474);  
				stream_WS.Add(WS26);

				DebugLocation(117, 87);
				PushFollow(Follow._from_clause_in_select_command476);
				from_clause27=from_clause();
				PopFollow();

				stream_from_clause.Add(from_clause27.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(14); }

			DebugLocation(117, 101);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:117:101: ( WS where_clause )?
			int alt15=2;
			try { DebugEnterSubRule(15);
			try { DebugEnterDecision(15, decisionCanBacktrack[15]);
			int LA15_0 = input.LA(1);

			if ((LA15_0==WS))
			{
				int LA15_1 = input.LA(2);

				if ((LA15_1==WHERE))
				{
					alt15 = 1;
				}
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:117:102: WS where_clause
				{
				DebugLocation(117, 102);
				WS28=(IToken)Match(input,WS,Follow._WS_in_select_command481);  
				stream_WS.Add(WS28);

				DebugLocation(117, 105);
				PushFollow(Follow._where_clause_in_select_command483);
				where_clause29=where_clause();
				PopFollow();

				stream_where_clause.Add(where_clause29.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(15); }

			DebugLocation(117, 120);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:117:120: ( WS groupby_clause )?
			int alt16=2;
			try { DebugEnterSubRule(16);
			try { DebugEnterDecision(16, decisionCanBacktrack[16]);
			int LA16_0 = input.LA(1);

			if ((LA16_0==WS))
			{
				int LA16_1 = input.LA(2);

				if ((LA16_1==GROUP))
				{
					alt16 = 1;
				}
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:117:121: WS groupby_clause
				{
				DebugLocation(117, 121);
				WS30=(IToken)Match(input,WS,Follow._WS_in_select_command488);  
				stream_WS.Add(WS30);

				DebugLocation(117, 124);
				PushFollow(Follow._groupby_clause_in_select_command490);
				groupby_clause31=groupby_clause();
				PopFollow();

				stream_groupby_clause.Add(groupby_clause31.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(16); }

			DebugLocation(117, 141);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:117:141: ( WS orderby_clause )?
			int alt17=2;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, decisionCanBacktrack[17]);
			int LA17_0 = input.LA(1);

			if ((LA17_0==WS))
			{
				int LA17_1 = input.LA(2);

				if ((LA17_1==ORDER))
				{
					alt17 = 1;
				}
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:117:142: WS orderby_clause
				{
				DebugLocation(117, 142);
				WS32=(IToken)Match(input,WS,Follow._WS_in_select_command495);  
				stream_WS.Add(WS32);

				DebugLocation(117, 145);
				PushFollow(Follow._orderby_clause_in_select_command497);
				orderby_clause33=orderby_clause();
				PopFollow();

				stream_orderby_clause.Add(orderby_clause33.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(17); }



			{
			// AST REWRITE
			// elements: groupby_clause, from_clause, top_clause, where_clause, column_list, orderby_clause, into_clause, distinct_clause
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 118:3: -> ^( T_SELECT ( distinct_clause )? ( top_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( orderby_clause )? )
			{
				DebugLocation(118, 6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:118:6: ^( T_SELECT ( distinct_clause )? ( top_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( orderby_clause )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(118, 8);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SELECT, "T_SELECT"), root_1);

				DebugLocation(118, 17);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:118:17: ( distinct_clause )?
				if (stream_distinct_clause.HasNext)
				{
					DebugLocation(118, 17);
					adaptor.AddChild(root_1, stream_distinct_clause.NextTree());

				}
				stream_distinct_clause.Reset();
				DebugLocation(118, 34);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:118:34: ( top_clause )?
				if (stream_top_clause.HasNext)
				{
					DebugLocation(118, 34);
					adaptor.AddChild(root_1, stream_top_clause.NextTree());

				}
				stream_top_clause.Reset();
				DebugLocation(118, 46);
				adaptor.AddChild(root_1, stream_column_list.NextTree());
				DebugLocation(118, 58);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:118:58: ( into_clause )?
				if (stream_into_clause.HasNext)
				{
					DebugLocation(118, 58);
					adaptor.AddChild(root_1, stream_into_clause.NextTree());

				}
				stream_into_clause.Reset();
				DebugLocation(118, 71);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:118:71: ( from_clause )?
				if (stream_from_clause.HasNext)
				{
					DebugLocation(118, 71);
					adaptor.AddChild(root_1, stream_from_clause.NextTree());

				}
				stream_from_clause.Reset();
				DebugLocation(118, 84);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:118:84: ( where_clause )?
				if (stream_where_clause.HasNext)
				{
					DebugLocation(118, 84);
					adaptor.AddChild(root_1, stream_where_clause.NextTree());

				}
				stream_where_clause.Reset();
				DebugLocation(118, 98);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:118:98: ( groupby_clause )?
				if (stream_groupby_clause.HasNext)
				{
					DebugLocation(118, 98);
					adaptor.AddChild(root_1, stream_groupby_clause.NextTree());

				}
				stream_groupby_clause.Reset();
				DebugLocation(118, 114);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:118:114: ( orderby_clause )?
				if (stream_orderby_clause.HasNext)
				{
					DebugLocation(118, 114);
					adaptor.AddChild(root_1, stream_orderby_clause.NextTree());

				}
				stream_orderby_clause.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("select_command", 4);
			LeaveRule("select_command", 4);
			LeaveRule_select_command();
	    }
	 	DebugLocation(119, 1);
		} finally { DebugExitRule(GrammarFileName, "select_command"); }
		return retval;

	}
	// $ANTLR end "select_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_distinct_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_distinct_clause() {}

	// $ANTLR start "distinct_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:121:1: distinct_clause : ( DISTINCT -> T_DISTINCT | ALL -> T_ALL );
	[GrammarRule("distinct_clause")]
	private AstParserRuleReturnScope<object, IToken> distinct_clause()
	{
		EnterRule_distinct_clause();
		EnterRule("distinct_clause", 5);
		TraceIn("distinct_clause", 5);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken DISTINCT34 = default(IToken);
	    IToken ALL35 = default(IToken);

	    object DISTINCT34_tree = default(object);
	    object ALL35_tree = default(object);
	    RewriteRuleITokenStream stream_DISTINCT=new RewriteRuleITokenStream(adaptor,"token DISTINCT");
	    RewriteRuleITokenStream stream_ALL=new RewriteRuleITokenStream(adaptor,"token ALL");

		try { DebugEnterRule(GrammarFileName, "distinct_clause");
		DebugLocation(121, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:122:2: ( DISTINCT -> T_DISTINCT | ALL -> T_ALL )
			int alt18=2;
			try { DebugEnterDecision(18, decisionCanBacktrack[18]);
			int LA18_0 = input.LA(1);

			if ((LA18_0==DISTINCT))
			{
				alt18 = 1;
			}
			else if ((LA18_0==ALL))
			{
				alt18 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 18, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:122:4: DISTINCT
				{
				DebugLocation(122, 4);
				DISTINCT34=(IToken)Match(input,DISTINCT,Follow._DISTINCT_in_distinct_clause542);  
				stream_DISTINCT.Add(DISTINCT34);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 122:13: -> T_DISTINCT
				{
					DebugLocation(122, 16);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_DISTINCT, "T_DISTINCT"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:123:4: ALL
				{
				DebugLocation(123, 4);
				ALL35=(IToken)Match(input,ALL,Follow._ALL_in_distinct_clause551);  
				stream_ALL.Add(ALL35);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 123:8: -> T_ALL
				{
					DebugLocation(123, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_ALL, "T_ALL"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("distinct_clause", 5);
			LeaveRule("distinct_clause", 5);
			LeaveRule_distinct_clause();
	    }
	 	DebugLocation(124, 1);
		} finally { DebugExitRule(GrammarFileName, "distinct_clause"); }
		return retval;

	}
	// $ANTLR end "distinct_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_top_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_top_clause() {}

	// $ANTLR start "top_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:126:1: top_clause : TOP WS expression -> ^( T_TOP expression ) ;
	[GrammarRule("top_clause")]
	private AstParserRuleReturnScope<object, IToken> top_clause()
	{
		EnterRule_top_clause();
		EnterRule("top_clause", 6);
		TraceIn("top_clause", 6);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOP36 = default(IToken);
	    IToken WS37 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression38 = default(AstParserRuleReturnScope<object, IToken>);

	    object TOP36_tree = default(object);
	    object WS37_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_TOP=new RewriteRuleITokenStream(adaptor,"token TOP");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "top_clause");
		DebugLocation(126, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:127:2: ( TOP WS expression -> ^( T_TOP expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:127:4: TOP WS expression
			{
			DebugLocation(127, 4);
			TOP36=(IToken)Match(input,TOP,Follow._TOP_in_top_clause567);  
			stream_TOP.Add(TOP36);

			DebugLocation(127, 8);
			WS37=(IToken)Match(input,WS,Follow._WS_in_top_clause569);  
			stream_WS.Add(WS37);

			DebugLocation(127, 11);
			PushFollow(Follow._expression_in_top_clause571);
			expression38=expression();
			PopFollow();

			stream_expression.Add(expression38.Tree);


			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 128:2: -> ^( T_TOP expression )
			{
				DebugLocation(128, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:128:5: ^( T_TOP expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(128, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_TOP, "T_TOP"), root_1);

				DebugLocation(128, 13);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("top_clause", 6);
			LeaveRule("top_clause", 6);
			LeaveRule_top_clause();
	    }
	 	DebugLocation(129, 1);
		} finally { DebugExitRule(GrammarFileName, "top_clause"); }
		return retval;

	}
	// $ANTLR end "top_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_column_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_column_list() {}

	// $ANTLR start "column_list"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:131:1: column_list : column ( ( WS )? ',' ( WS )? column )* -> ^( T_COLUMNLIST ( column )* ) ;
	[GrammarRule("column_list")]
	private AstParserRuleReturnScope<object, IToken> column_list()
	{
		EnterRule_column_list();
		EnterRule("column_list", 7);
		TraceIn("column_list", 7);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS40 = default(IToken);
	    IToken char_literal41 = default(IToken);
	    IToken WS42 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> column39 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> column43 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS40_tree = default(object);
	    object char_literal41_tree = default(object);
	    object WS42_tree = default(object);
	    RewriteRuleITokenStream stream_147=new RewriteRuleITokenStream(adaptor,"token 147");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_column=new RewriteRuleSubtreeStream(adaptor,"rule column");
		try { DebugEnterRule(GrammarFileName, "column_list");
		DebugLocation(131, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:132:2: ( column ( ( WS )? ',' ( WS )? column )* -> ^( T_COLUMNLIST ( column )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:132:4: column ( ( WS )? ',' ( WS )? column )*
			{
			DebugLocation(132, 4);
			PushFollow(Follow._column_in_column_list593);
			column39=column();
			PopFollow();

			stream_column.Add(column39.Tree);
			DebugLocation(132, 11);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:132:11: ( ( WS )? ',' ( WS )? column )*
			try { DebugEnterSubRule(21);
			while (true)
			{
				int alt21=2;
				try { DebugEnterDecision(21, decisionCanBacktrack[21]);
				int LA21_0 = input.LA(1);

				if ((LA21_0==WS))
				{
					int LA21_1 = input.LA(2);

					if ((LA21_1==147))
					{
						alt21 = 1;
					}


				}
				else if ((LA21_0==147))
				{
					alt21 = 1;
				}


				} finally { DebugExitDecision(21); }
				switch ( alt21 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:132:12: ( WS )? ',' ( WS )? column
					{
					DebugLocation(132, 12);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:132:12: ( WS )?
					int alt19=2;
					try { DebugEnterSubRule(19);
					try { DebugEnterDecision(19, decisionCanBacktrack[19]);
					int LA19_0 = input.LA(1);

					if ((LA19_0==WS))
					{
						alt19 = 1;
					}
					} finally { DebugExitDecision(19); }
					switch (alt19)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:132:12: WS
						{
						DebugLocation(132, 12);
						WS40=(IToken)Match(input,WS,Follow._WS_in_column_list596);  
						stream_WS.Add(WS40);


						}
						break;

					}
					} finally { DebugExitSubRule(19); }

					DebugLocation(132, 16);
					char_literal41=(IToken)Match(input,147,Follow._147_in_column_list599);  
					stream_147.Add(char_literal41);

					DebugLocation(132, 20);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:132:20: ( WS )?
					int alt20=2;
					try { DebugEnterSubRule(20);
					try { DebugEnterDecision(20, decisionCanBacktrack[20]);
					int LA20_0 = input.LA(1);

					if ((LA20_0==WS))
					{
						alt20 = 1;
					}
					} finally { DebugExitDecision(20); }
					switch (alt20)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:132:20: WS
						{
						DebugLocation(132, 20);
						WS42=(IToken)Match(input,WS,Follow._WS_in_column_list601);  
						stream_WS.Add(WS42);


						}
						break;

					}
					} finally { DebugExitSubRule(20); }

					DebugLocation(132, 24);
					PushFollow(Follow._column_in_column_list604);
					column43=column();
					PopFollow();

					stream_column.Add(column43.Tree);

					}
					break;

				default:
					goto loop21;
				}
			}

			loop21:
				;

			} finally { DebugExitSubRule(21); }



			{
			// AST REWRITE
			// elements: column
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 133:2: -> ^( T_COLUMNLIST ( column )* )
			{
				DebugLocation(133, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:133:5: ^( T_COLUMNLIST ( column )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(133, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_COLUMNLIST, "T_COLUMNLIST"), root_1);

				DebugLocation(133, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:133:20: ( column )*
				while ( stream_column.HasNext )
				{
					DebugLocation(133, 20);
					adaptor.AddChild(root_1, stream_column.NextTree());

				}
				stream_column.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("column_list", 7);
			LeaveRule("column_list", 7);
			LeaveRule_column_list();
	    }
	 	DebugLocation(134, 1);
		} finally { DebugExitRule(GrammarFileName, "column_list"); }
		return retval;

	}
	// $ANTLR end "column_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_column() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_column() {}

	// $ANTLR start "column"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:136:1: column : ( '*' -> ^( T_COLUMN '*' ) | expression ( WS SIMPLE_FILE )? -> ^( T_COLUMN expression ( SIMPLE_FILE )? ) );
	[GrammarRule("column")]
	private AstParserRuleReturnScope<object, IToken> column()
	{
		EnterRule_column();
		EnterRule("column", 8);
		TraceIn("column", 8);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal44 = default(IToken);
	    IToken WS46 = default(IToken);
	    IToken SIMPLE_FILE47 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression45 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal44_tree = default(object);
	    object WS46_tree = default(object);
	    object SIMPLE_FILE47_tree = default(object);
	    RewriteRuleITokenStream stream_145=new RewriteRuleITokenStream(adaptor,"token 145");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_SIMPLE_FILE=new RewriteRuleITokenStream(adaptor,"token SIMPLE_FILE");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "column");
		DebugLocation(136, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:137:2: ( '*' -> ^( T_COLUMN '*' ) | expression ( WS SIMPLE_FILE )? -> ^( T_COLUMN expression ( SIMPLE_FILE )? ) )
			int alt23=2;
			try { DebugEnterDecision(23, decisionCanBacktrack[23]);
			int LA23_0 = input.LA(1);

			if ((LA23_0==145))
			{
				alt23 = 1;
			}
			else if (((LA23_0>=CASE && LA23_0<=CAST)||LA23_0==CONVERT||LA23_0==EXISTS||(LA23_0>=NOT && LA23_0<=NUMBER)||LA23_0==SIMPLE_FILE||(LA23_0>=STRING && LA23_0<=SYSTEMVAR)||LA23_0==TOKEN||LA23_0==VARIABLE||LA23_0==143))
			{
				alt23 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 23, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:137:4: '*'
				{
				DebugLocation(137, 4);
				char_literal44=(IToken)Match(input,145,Follow._145_in_column628);  
				stream_145.Add(char_literal44);



				{
				// AST REWRITE
				// elements: 145
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 137:8: -> ^( T_COLUMN '*' )
				{
					DebugLocation(137, 11);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:137:11: ^( T_COLUMN '*' )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(137, 13);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_COLUMN, "T_COLUMN"), root_1);

					DebugLocation(137, 22);
					adaptor.AddChild(root_1, stream_145.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:138:4: expression ( WS SIMPLE_FILE )?
				{
				DebugLocation(138, 4);
				PushFollow(Follow._expression_in_column642);
				expression45=expression();
				PopFollow();

				stream_expression.Add(expression45.Tree);
				DebugLocation(138, 15);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:138:15: ( WS SIMPLE_FILE )?
				int alt22=2;
				try { DebugEnterSubRule(22);
				try { DebugEnterDecision(22, decisionCanBacktrack[22]);
				int LA22_0 = input.LA(1);

				if ((LA22_0==WS))
				{
					int LA22_1 = input.LA(2);

					if ((LA22_1==SIMPLE_FILE))
					{
						alt22 = 1;
					}
				}
				} finally { DebugExitDecision(22); }
				switch (alt22)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:138:16: WS SIMPLE_FILE
					{
					DebugLocation(138, 16);
					WS46=(IToken)Match(input,WS,Follow._WS_in_column645);  
					stream_WS.Add(WS46);

					DebugLocation(138, 19);
					SIMPLE_FILE47=(IToken)Match(input,SIMPLE_FILE,Follow._SIMPLE_FILE_in_column647);  
					stream_SIMPLE_FILE.Add(SIMPLE_FILE47);


					}
					break;

				}
				} finally { DebugExitSubRule(22); }



				{
				// AST REWRITE
				// elements: SIMPLE_FILE, expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 138:33: -> ^( T_COLUMN expression ( SIMPLE_FILE )? )
				{
					DebugLocation(138, 36);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:138:36: ^( T_COLUMN expression ( SIMPLE_FILE )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(138, 38);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_COLUMN, "T_COLUMN"), root_1);

					DebugLocation(138, 47);
					adaptor.AddChild(root_1, stream_expression.NextTree());
					DebugLocation(138, 58);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:138:58: ( SIMPLE_FILE )?
					if (stream_SIMPLE_FILE.HasNext)
					{
						DebugLocation(138, 58);
						adaptor.AddChild(root_1, stream_SIMPLE_FILE.NextNode());

					}
					stream_SIMPLE_FILE.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("column", 8);
			LeaveRule("column", 8);
			LeaveRule_column();
	    }
	 	DebugLocation(139, 1);
		} finally { DebugExitRule(GrammarFileName, "column"); }
		return retval;

	}
	// $ANTLR end "column"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_into_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_into_clause() {}

	// $ANTLR start "into_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:140:1: into_clause : INTO WS file -> ^( T_INTO file ) ;
	[GrammarRule("into_clause")]
	private AstParserRuleReturnScope<object, IToken> into_clause()
	{
		EnterRule_into_clause();
		EnterRule("into_clause", 9);
		TraceIn("into_clause", 9);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken INTO48 = default(IToken);
	    IToken WS49 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file50 = default(AstParserRuleReturnScope<object, IToken>);

	    object INTO48_tree = default(object);
	    object WS49_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_INTO=new RewriteRuleITokenStream(adaptor,"token INTO");
	    RewriteRuleSubtreeStream stream_file=new RewriteRuleSubtreeStream(adaptor,"rule file");
		try { DebugEnterRule(GrammarFileName, "into_clause");
		DebugLocation(140, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:141:2: ( INTO WS file -> ^( T_INTO file ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:141:4: INTO WS file
			{
			DebugLocation(141, 4);
			INTO48=(IToken)Match(input,INTO,Follow._INTO_in_into_clause670);  
			stream_INTO.Add(INTO48);

			DebugLocation(141, 9);
			WS49=(IToken)Match(input,WS,Follow._WS_in_into_clause672);  
			stream_WS.Add(WS49);

			DebugLocation(141, 12);
			PushFollow(Follow._file_in_into_clause674);
			file50=file();
			PopFollow();

			stream_file.Add(file50.Tree);


			{
			// AST REWRITE
			// elements: file
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 141:17: -> ^( T_INTO file )
			{
				DebugLocation(141, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:141:20: ^( T_INTO file )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(141, 22);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_INTO, "T_INTO"), root_1);

				DebugLocation(141, 29);
				adaptor.AddChild(root_1, stream_file.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("into_clause", 9);
			LeaveRule("into_clause", 9);
			LeaveRule_into_clause();
	    }
	 	DebugLocation(142, 1);
		} finally { DebugExitRule(GrammarFileName, "into_clause"); }
		return retval;

	}
	// $ANTLR end "into_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_from_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_from_clause() {}

	// $ANTLR start "from_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:144:1: from_clause : FROM WS from_clause_item ( ( WS )? ',' ( WS )? from_clause_item )* -> ^( T_FROM ( from_clause_item )* ) ;
	[GrammarRule("from_clause")]
	private AstParserRuleReturnScope<object, IToken> from_clause()
	{
		EnterRule_from_clause();
		EnterRule("from_clause", 10);
		TraceIn("from_clause", 10);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken FROM51 = default(IToken);
	    IToken WS52 = default(IToken);
	    IToken WS54 = default(IToken);
	    IToken char_literal55 = default(IToken);
	    IToken WS56 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> from_clause_item53 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> from_clause_item57 = default(AstParserRuleReturnScope<object, IToken>);

	    object FROM51_tree = default(object);
	    object WS52_tree = default(object);
	    object WS54_tree = default(object);
	    object char_literal55_tree = default(object);
	    object WS56_tree = default(object);
	    RewriteRuleITokenStream stream_147=new RewriteRuleITokenStream(adaptor,"token 147");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_FROM=new RewriteRuleITokenStream(adaptor,"token FROM");
	    RewriteRuleSubtreeStream stream_from_clause_item=new RewriteRuleSubtreeStream(adaptor,"rule from_clause_item");
		try { DebugEnterRule(GrammarFileName, "from_clause");
		DebugLocation(144, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:145:2: ( FROM WS from_clause_item ( ( WS )? ',' ( WS )? from_clause_item )* -> ^( T_FROM ( from_clause_item )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:145:4: FROM WS from_clause_item ( ( WS )? ',' ( WS )? from_clause_item )*
			{
			DebugLocation(145, 4);
			FROM51=(IToken)Match(input,FROM,Follow._FROM_in_from_clause694);  
			stream_FROM.Add(FROM51);

			DebugLocation(145, 9);
			WS52=(IToken)Match(input,WS,Follow._WS_in_from_clause696);  
			stream_WS.Add(WS52);

			DebugLocation(145, 12);
			PushFollow(Follow._from_clause_item_in_from_clause698);
			from_clause_item53=from_clause_item();
			PopFollow();

			stream_from_clause_item.Add(from_clause_item53.Tree);
			DebugLocation(145, 29);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:145:29: ( ( WS )? ',' ( WS )? from_clause_item )*
			try { DebugEnterSubRule(26);
			while (true)
			{
				int alt26=2;
				try { DebugEnterDecision(26, decisionCanBacktrack[26]);
				int LA26_0 = input.LA(1);

				if ((LA26_0==WS))
				{
					int LA26_1 = input.LA(2);

					if ((LA26_1==147))
					{
						alt26 = 1;
					}


				}
				else if ((LA26_0==147))
				{
					alt26 = 1;
				}


				} finally { DebugExitDecision(26); }
				switch ( alt26 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:145:30: ( WS )? ',' ( WS )? from_clause_item
					{
					DebugLocation(145, 30);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:145:30: ( WS )?
					int alt24=2;
					try { DebugEnterSubRule(24);
					try { DebugEnterDecision(24, decisionCanBacktrack[24]);
					int LA24_0 = input.LA(1);

					if ((LA24_0==WS))
					{
						alt24 = 1;
					}
					} finally { DebugExitDecision(24); }
					switch (alt24)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:145:30: WS
						{
						DebugLocation(145, 30);
						WS54=(IToken)Match(input,WS,Follow._WS_in_from_clause701);  
						stream_WS.Add(WS54);


						}
						break;

					}
					} finally { DebugExitSubRule(24); }

					DebugLocation(145, 34);
					char_literal55=(IToken)Match(input,147,Follow._147_in_from_clause704);  
					stream_147.Add(char_literal55);

					DebugLocation(145, 38);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:145:38: ( WS )?
					int alt25=2;
					try { DebugEnterSubRule(25);
					try { DebugEnterDecision(25, decisionCanBacktrack[25]);
					int LA25_0 = input.LA(1);

					if ((LA25_0==WS))
					{
						alt25 = 1;
					}
					} finally { DebugExitDecision(25); }
					switch (alt25)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:145:38: WS
						{
						DebugLocation(145, 38);
						WS56=(IToken)Match(input,WS,Follow._WS_in_from_clause706);  
						stream_WS.Add(WS56);


						}
						break;

					}
					} finally { DebugExitSubRule(25); }

					DebugLocation(145, 42);
					PushFollow(Follow._from_clause_item_in_from_clause709);
					from_clause_item57=from_clause_item();
					PopFollow();

					stream_from_clause_item.Add(from_clause_item57.Tree);

					}
					break;

				default:
					goto loop26;
				}
			}

			loop26:
				;

			} finally { DebugExitSubRule(26); }



			{
			// AST REWRITE
			// elements: from_clause_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 145:61: -> ^( T_FROM ( from_clause_item )* )
			{
				DebugLocation(145, 64);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:145:64: ^( T_FROM ( from_clause_item )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(145, 66);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FROM, "T_FROM"), root_1);

				DebugLocation(145, 73);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:145:73: ( from_clause_item )*
				while ( stream_from_clause_item.HasNext )
				{
					DebugLocation(145, 73);
					adaptor.AddChild(root_1, stream_from_clause_item.NextTree());

				}
				stream_from_clause_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("from_clause", 10);
			LeaveRule("from_clause", 10);
			LeaveRule_from_clause();
	    }
	 	DebugLocation(146, 1);
		} finally { DebugExitRule(GrammarFileName, "from_clause"); }
		return retval;

	}
	// $ANTLR end "from_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_from_clause_item() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_from_clause_item() {}

	// $ANTLR start "from_clause_item"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:148:1: from_clause_item : ( STRING -> ^( T_FILE STRING ) | file | subquery | view_name );
	[GrammarRule("from_clause_item")]
	private AstParserRuleReturnScope<object, IToken> from_clause_item()
	{
		EnterRule_from_clause_item();
		EnterRule("from_clause_item", 11);
		TraceIn("from_clause_item", 11);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken STRING58 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file59 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> subquery60 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> view_name61 = default(AstParserRuleReturnScope<object, IToken>);

	    object STRING58_tree = default(object);
	    RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");

		try { DebugEnterRule(GrammarFileName, "from_clause_item");
		DebugLocation(148, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:149:2: ( STRING -> ^( T_FILE STRING ) | file | subquery | view_name )
			int alt27=4;
			try { DebugEnterDecision(27, decisionCanBacktrack[27]);
			switch (input.LA(1))
			{
			case STRING:
				{
				alt27 = 1;
				}
				break;
			case SIMPLE_FILE:
			case 157:
				{
				alt27 = 2;
				}
				break;
			case 143:
				{
				alt27 = 3;
				}
				break;
			case TOKEN:
				{
				alt27 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 27, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:149:4: STRING
				{
				DebugLocation(149, 4);
				STRING58=(IToken)Match(input,STRING,Follow._STRING_in_from_clause_item732);  
				stream_STRING.Add(STRING58);



				{
				// AST REWRITE
				// elements: STRING
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 149:11: -> ^( T_FILE STRING )
				{
					DebugLocation(149, 14);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:149:14: ^( T_FILE STRING )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(149, 16);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILE, "T_FILE"), root_1);

					DebugLocation(149, 23);
					adaptor.AddChild(root_1, stream_STRING.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:150:4: file
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(150, 4);
				PushFollow(Follow._file_in_from_clause_item745);
				file59=file();
				PopFollow();

				adaptor.AddChild(root_0, file59.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:151:4: subquery
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(151, 4);
				PushFollow(Follow._subquery_in_from_clause_item750);
				subquery60=subquery();
				PopFollow();

				adaptor.AddChild(root_0, subquery60.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:152:4: view_name
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(152, 4);
				PushFollow(Follow._view_name_in_from_clause_item755);
				view_name61=view_name();
				PopFollow();

				adaptor.AddChild(root_0, view_name61.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("from_clause_item", 11);
			LeaveRule("from_clause_item", 11);
			LeaveRule_from_clause_item();
	    }
	 	DebugLocation(153, 1);
		} finally { DebugExitRule(GrammarFileName, "from_clause_item"); }
		return retval;

	}
	// $ANTLR end "from_clause_item"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_subquery() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_subquery() {}

	// $ANTLR start "subquery"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:155:1: subquery : '(' ( WS )? select_command ( WS )? ')' -> ^( T_SUBQUERY select_command ) ;
	[GrammarRule("subquery")]
	private AstParserRuleReturnScope<object, IToken> subquery()
	{
		EnterRule_subquery();
		EnterRule("subquery", 12);
		TraceIn("subquery", 12);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal62 = default(IToken);
	    IToken WS63 = default(IToken);
	    IToken WS65 = default(IToken);
	    IToken char_literal66 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> select_command64 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal62_tree = default(object);
	    object WS63_tree = default(object);
	    object WS65_tree = default(object);
	    object char_literal66_tree = default(object);
	    RewriteRuleITokenStream stream_143=new RewriteRuleITokenStream(adaptor,"token 143");
	    RewriteRuleITokenStream stream_144=new RewriteRuleITokenStream(adaptor,"token 144");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_select_command=new RewriteRuleSubtreeStream(adaptor,"rule select_command");
		try { DebugEnterRule(GrammarFileName, "subquery");
		DebugLocation(155, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:156:2: ( '(' ( WS )? select_command ( WS )? ')' -> ^( T_SUBQUERY select_command ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:156:4: '(' ( WS )? select_command ( WS )? ')'
			{
			DebugLocation(156, 4);
			char_literal62=(IToken)Match(input,143,Follow._143_in_subquery767);  
			stream_143.Add(char_literal62);

			DebugLocation(156, 8);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:156:8: ( WS )?
			int alt28=2;
			try { DebugEnterSubRule(28);
			try { DebugEnterDecision(28, decisionCanBacktrack[28]);
			int LA28_0 = input.LA(1);

			if ((LA28_0==WS))
			{
				alt28 = 1;
			}
			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:156:8: WS
				{
				DebugLocation(156, 8);
				WS63=(IToken)Match(input,WS,Follow._WS_in_subquery769);  
				stream_WS.Add(WS63);


				}
				break;

			}
			} finally { DebugExitSubRule(28); }

			DebugLocation(156, 12);
			PushFollow(Follow._select_command_in_subquery772);
			select_command64=select_command();
			PopFollow();

			stream_select_command.Add(select_command64.Tree);
			DebugLocation(156, 27);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:156:27: ( WS )?
			int alt29=2;
			try { DebugEnterSubRule(29);
			try { DebugEnterDecision(29, decisionCanBacktrack[29]);
			int LA29_0 = input.LA(1);

			if ((LA29_0==WS))
			{
				alt29 = 1;
			}
			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:156:27: WS
				{
				DebugLocation(156, 27);
				WS65=(IToken)Match(input,WS,Follow._WS_in_subquery774);  
				stream_WS.Add(WS65);


				}
				break;

			}
			} finally { DebugExitSubRule(29); }

			DebugLocation(156, 31);
			char_literal66=(IToken)Match(input,144,Follow._144_in_subquery777);  
			stream_144.Add(char_literal66);



			{
			// AST REWRITE
			// elements: select_command
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 156:35: -> ^( T_SUBQUERY select_command )
			{
				DebugLocation(156, 38);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:156:38: ^( T_SUBQUERY select_command )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(156, 40);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SUBQUERY, "T_SUBQUERY"), root_1);

				DebugLocation(156, 51);
				adaptor.AddChild(root_1, stream_select_command.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("subquery", 12);
			LeaveRule("subquery", 12);
			LeaveRule_subquery();
	    }
	 	DebugLocation(157, 1);
		} finally { DebugExitRule(GrammarFileName, "subquery"); }
		return retval;

	}
	// $ANTLR end "subquery"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file() {}

	// $ANTLR start "file"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:159:1: file : ( '[' ( WS )? file_spec ( WS file_option )* ( WS )? ']' -> ^( T_FILE file_spec ( file_option )* ) | SIMPLE_FILE -> ^( T_FILE SIMPLE_FILE ) );
	[GrammarRule("file")]
	private AstParserRuleReturnScope<object, IToken> file()
	{
		EnterRule_file();
		EnterRule("file", 13);
		TraceIn("file", 13);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal67 = default(IToken);
	    IToken WS68 = default(IToken);
	    IToken WS70 = default(IToken);
	    IToken WS72 = default(IToken);
	    IToken char_literal73 = default(IToken);
	    IToken SIMPLE_FILE74 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file_spec69 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> file_option71 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal67_tree = default(object);
	    object WS68_tree = default(object);
	    object WS70_tree = default(object);
	    object WS72_tree = default(object);
	    object char_literal73_tree = default(object);
	    object SIMPLE_FILE74_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_SIMPLE_FILE=new RewriteRuleITokenStream(adaptor,"token SIMPLE_FILE");
	    RewriteRuleITokenStream stream_158=new RewriteRuleITokenStream(adaptor,"token 158");
	    RewriteRuleITokenStream stream_157=new RewriteRuleITokenStream(adaptor,"token 157");
	    RewriteRuleSubtreeStream stream_file_option=new RewriteRuleSubtreeStream(adaptor,"rule file_option");
	    RewriteRuleSubtreeStream stream_file_spec=new RewriteRuleSubtreeStream(adaptor,"rule file_spec");
		try { DebugEnterRule(GrammarFileName, "file");
		DebugLocation(159, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:160:2: ( '[' ( WS )? file_spec ( WS file_option )* ( WS )? ']' -> ^( T_FILE file_spec ( file_option )* ) | SIMPLE_FILE -> ^( T_FILE SIMPLE_FILE ) )
			int alt33=2;
			try { DebugEnterDecision(33, decisionCanBacktrack[33]);
			int LA33_0 = input.LA(1);

			if ((LA33_0==157))
			{
				alt33 = 1;
			}
			else if ((LA33_0==SIMPLE_FILE))
			{
				alt33 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 33, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:160:4: '[' ( WS )? file_spec ( WS file_option )* ( WS )? ']'
				{
				DebugLocation(160, 4);
				char_literal67=(IToken)Match(input,157,Follow._157_in_file796);  
				stream_157.Add(char_literal67);

				DebugLocation(160, 8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:160:8: ( WS )?
				int alt30=2;
				try { DebugEnterSubRule(30);
				try { DebugEnterDecision(30, decisionCanBacktrack[30]);
				int LA30_0 = input.LA(1);

				if ((LA30_0==WS))
				{
					alt30 = 1;
				}
				} finally { DebugExitDecision(30); }
				switch (alt30)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:160:8: WS
					{
					DebugLocation(160, 8);
					WS68=(IToken)Match(input,WS,Follow._WS_in_file798);  
					stream_WS.Add(WS68);


					}
					break;

				}
				} finally { DebugExitSubRule(30); }

				DebugLocation(160, 12);
				PushFollow(Follow._file_spec_in_file801);
				file_spec69=file_spec();
				PopFollow();

				stream_file_spec.Add(file_spec69.Tree);
				DebugLocation(160, 22);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:160:22: ( WS file_option )*
				try { DebugEnterSubRule(31);
				while (true)
				{
					int alt31=2;
					try { DebugEnterDecision(31, decisionCanBacktrack[31]);
					int LA31_0 = input.LA(1);

					if ((LA31_0==WS))
					{
						int LA31_1 = input.LA(2);

						if ((LA31_1==148))
						{
							alt31 = 1;
						}


					}


					} finally { DebugExitDecision(31); }
					switch ( alt31 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:160:23: WS file_option
						{
						DebugLocation(160, 23);
						WS70=(IToken)Match(input,WS,Follow._WS_in_file804);  
						stream_WS.Add(WS70);

						DebugLocation(160, 26);
						PushFollow(Follow._file_option_in_file806);
						file_option71=file_option();
						PopFollow();

						stream_file_option.Add(file_option71.Tree);

						}
						break;

					default:
						goto loop31;
					}
				}

				loop31:
					;

				} finally { DebugExitSubRule(31); }

				DebugLocation(160, 40);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:160:40: ( WS )?
				int alt32=2;
				try { DebugEnterSubRule(32);
				try { DebugEnterDecision(32, decisionCanBacktrack[32]);
				int LA32_0 = input.LA(1);

				if ((LA32_0==WS))
				{
					alt32 = 1;
				}
				} finally { DebugExitDecision(32); }
				switch (alt32)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:160:40: WS
					{
					DebugLocation(160, 40);
					WS72=(IToken)Match(input,WS,Follow._WS_in_file810);  
					stream_WS.Add(WS72);


					}
					break;

				}
				} finally { DebugExitSubRule(32); }

				DebugLocation(160, 44);
				char_literal73=(IToken)Match(input,158,Follow._158_in_file813);  
				stream_158.Add(char_literal73);



				{
				// AST REWRITE
				// elements: file_option, file_spec
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 160:48: -> ^( T_FILE file_spec ( file_option )* )
				{
					DebugLocation(160, 51);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:160:51: ^( T_FILE file_spec ( file_option )* )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(160, 53);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILE, "T_FILE"), root_1);

					DebugLocation(160, 60);
					adaptor.AddChild(root_1, stream_file_spec.NextTree());
					DebugLocation(160, 70);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:160:70: ( file_option )*
					while ( stream_file_option.HasNext )
					{
						DebugLocation(160, 70);
						adaptor.AddChild(root_1, stream_file_option.NextTree());

					}
					stream_file_option.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:161:4: SIMPLE_FILE
				{
				DebugLocation(161, 4);
				SIMPLE_FILE74=(IToken)Match(input,SIMPLE_FILE,Follow._SIMPLE_FILE_in_file830);  
				stream_SIMPLE_FILE.Add(SIMPLE_FILE74);



				{
				// AST REWRITE
				// elements: SIMPLE_FILE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 161:16: -> ^( T_FILE SIMPLE_FILE )
				{
					DebugLocation(161, 19);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:161:19: ^( T_FILE SIMPLE_FILE )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(161, 21);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILE, "T_FILE"), root_1);

					DebugLocation(161, 28);
					adaptor.AddChild(root_1, stream_SIMPLE_FILE.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file", 13);
			LeaveRule("file", 13);
			LeaveRule_file();
	    }
	 	DebugLocation(162, 1);
		} finally { DebugExitRule(GrammarFileName, "file"); }
		return retval;

	}
	// $ANTLR end "file"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_spec() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_spec() {}

	// $ANTLR start "file_spec"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:164:1: file_spec : ( STRING -> STRING | VARIABLE -> ^( T_VARIABLE VARIABLE ) );
	[GrammarRule("file_spec")]
	private AstParserRuleReturnScope<object, IToken> file_spec()
	{
		EnterRule_file_spec();
		EnterRule("file_spec", 14);
		TraceIn("file_spec", 14);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken STRING75 = default(IToken);
	    IToken VARIABLE76 = default(IToken);

	    object STRING75_tree = default(object);
	    object VARIABLE76_tree = default(object);
	    RewriteRuleITokenStream stream_VARIABLE=new RewriteRuleITokenStream(adaptor,"token VARIABLE");
	    RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");

		try { DebugEnterRule(GrammarFileName, "file_spec");
		DebugLocation(164, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:165:2: ( STRING -> STRING | VARIABLE -> ^( T_VARIABLE VARIABLE ) )
			int alt34=2;
			try { DebugEnterDecision(34, decisionCanBacktrack[34]);
			int LA34_0 = input.LA(1);

			if ((LA34_0==STRING))
			{
				alt34 = 1;
			}
			else if ((LA34_0==VARIABLE))
			{
				alt34 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 34, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(34); }
			switch (alt34)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:165:4: STRING
				{
				DebugLocation(165, 4);
				STRING75=(IToken)Match(input,STRING,Follow._STRING_in_file_spec849);  
				stream_STRING.Add(STRING75);



				{
				// AST REWRITE
				// elements: STRING
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 165:11: -> STRING
				{
					DebugLocation(165, 14);
					adaptor.AddChild(root_0, stream_STRING.NextNode());

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:166:4: VARIABLE
				{
				DebugLocation(166, 4);
				VARIABLE76=(IToken)Match(input,VARIABLE,Follow._VARIABLE_in_file_spec858);  
				stream_VARIABLE.Add(VARIABLE76);



				{
				// AST REWRITE
				// elements: VARIABLE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 166:13: -> ^( T_VARIABLE VARIABLE )
				{
					DebugLocation(166, 16);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:166:16: ^( T_VARIABLE VARIABLE )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(166, 18);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_VARIABLE, "T_VARIABLE"), root_1);

					DebugLocation(166, 29);
					adaptor.AddChild(root_1, stream_VARIABLE.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_spec", 14);
			LeaveRule("file_spec", 14);
			LeaveRule_file_spec();
	    }
	 	DebugLocation(167, 1);
		} finally { DebugExitRule(GrammarFileName, "file_spec"); }
		return retval;

	}
	// $ANTLR end "file_spec"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_option() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_option() {}

	// $ANTLR start "file_option"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:169:1: file_option : '-' file_option_name ( ( WS )? '=' ( WS )? file_option_value )? -> ^( T_FILEOPTION file_option_name ( file_option_value )? ) ;
	[GrammarRule("file_option")]
	private AstParserRuleReturnScope<object, IToken> file_option()
	{
		EnterRule_file_option();
		EnterRule("file_option", 15);
		TraceIn("file_option", 15);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal77 = default(IToken);
	    IToken WS79 = default(IToken);
	    IToken char_literal80 = default(IToken);
	    IToken WS81 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file_option_name78 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> file_option_value82 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal77_tree = default(object);
	    object WS79_tree = default(object);
	    object char_literal80_tree = default(object);
	    object WS81_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_148=new RewriteRuleITokenStream(adaptor,"token 148");
	    RewriteRuleITokenStream stream_154=new RewriteRuleITokenStream(adaptor,"token 154");
	    RewriteRuleSubtreeStream stream_file_option_name=new RewriteRuleSubtreeStream(adaptor,"rule file_option_name");
	    RewriteRuleSubtreeStream stream_file_option_value=new RewriteRuleSubtreeStream(adaptor,"rule file_option_value");
		try { DebugEnterRule(GrammarFileName, "file_option");
		DebugLocation(169, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:170:2: ( '-' file_option_name ( ( WS )? '=' ( WS )? file_option_value )? -> ^( T_FILEOPTION file_option_name ( file_option_value )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:170:4: '-' file_option_name ( ( WS )? '=' ( WS )? file_option_value )?
			{
			DebugLocation(170, 4);
			char_literal77=(IToken)Match(input,148,Follow._148_in_file_option878);  
			stream_148.Add(char_literal77);

			DebugLocation(170, 8);
			PushFollow(Follow._file_option_name_in_file_option880);
			file_option_name78=file_option_name();
			PopFollow();

			stream_file_option_name.Add(file_option_name78.Tree);
			DebugLocation(170, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:170:25: ( ( WS )? '=' ( WS )? file_option_value )?
			int alt37=2;
			try { DebugEnterSubRule(37);
			try { DebugEnterDecision(37, decisionCanBacktrack[37]);
			int LA37_0 = input.LA(1);

			if ((LA37_0==WS))
			{
				int LA37_1 = input.LA(2);

				if ((LA37_1==154))
				{
					alt37 = 1;
				}
			}
			else if ((LA37_0==154))
			{
				alt37 = 1;
			}
			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:170:27: ( WS )? '=' ( WS )? file_option_value
				{
				DebugLocation(170, 27);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:170:27: ( WS )?
				int alt35=2;
				try { DebugEnterSubRule(35);
				try { DebugEnterDecision(35, decisionCanBacktrack[35]);
				int LA35_0 = input.LA(1);

				if ((LA35_0==WS))
				{
					alt35 = 1;
				}
				} finally { DebugExitDecision(35); }
				switch (alt35)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:170:27: WS
					{
					DebugLocation(170, 27);
					WS79=(IToken)Match(input,WS,Follow._WS_in_file_option884);  
					stream_WS.Add(WS79);


					}
					break;

				}
				} finally { DebugExitSubRule(35); }

				DebugLocation(170, 31);
				char_literal80=(IToken)Match(input,154,Follow._154_in_file_option887);  
				stream_154.Add(char_literal80);

				DebugLocation(170, 35);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:170:35: ( WS )?
				int alt36=2;
				try { DebugEnterSubRule(36);
				try { DebugEnterDecision(36, decisionCanBacktrack[36]);
				int LA36_0 = input.LA(1);

				if ((LA36_0==WS))
				{
					alt36 = 1;
				}
				} finally { DebugExitDecision(36); }
				switch (alt36)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:170:35: WS
					{
					DebugLocation(170, 35);
					WS81=(IToken)Match(input,WS,Follow._WS_in_file_option889);  
					stream_WS.Add(WS81);


					}
					break;

				}
				} finally { DebugExitSubRule(36); }

				DebugLocation(170, 39);
				PushFollow(Follow._file_option_value_in_file_option892);
				file_option_value82=file_option_value();
				PopFollow();

				stream_file_option_value.Add(file_option_value82.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(37); }



			{
			// AST REWRITE
			// elements: file_option_name, file_option_value
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 170:59: -> ^( T_FILEOPTION file_option_name ( file_option_value )? )
			{
				DebugLocation(170, 62);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:170:62: ^( T_FILEOPTION file_option_name ( file_option_value )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(170, 64);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILEOPTION, "T_FILEOPTION"), root_1);

				DebugLocation(170, 77);
				adaptor.AddChild(root_1, stream_file_option_name.NextTree());
				DebugLocation(170, 94);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:170:94: ( file_option_value )?
				if (stream_file_option_value.HasNext)
				{
					DebugLocation(170, 94);
					adaptor.AddChild(root_1, stream_file_option_value.NextTree());

				}
				stream_file_option_value.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_option", 15);
			LeaveRule("file_option", 15);
			LeaveRule_file_option();
	    }
	 	DebugLocation(171, 1);
		} finally { DebugExitRule(GrammarFileName, "file_option"); }
		return retval;

	}
	// $ANTLR end "file_option"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_option_name() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_option_name() {}

	// $ANTLR start "file_option_name"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:173:1: file_option_name : TOKEN ;
	[GrammarRule("file_option_name")]
	private AstParserRuleReturnScope<object, IToken> file_option_name()
	{
		EnterRule_file_option_name();
		EnterRule("file_option_name", 16);
		TraceIn("file_option_name", 16);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN83 = default(IToken);

	    object TOKEN83_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "file_option_name");
		DebugLocation(173, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:174:2: ( TOKEN )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:174:4: TOKEN
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(174, 4);
			TOKEN83=(IToken)Match(input,TOKEN,Follow._TOKEN_in_file_option_name916); 
			TOKEN83_tree = (object)adaptor.Create(TOKEN83);
			adaptor.AddChild(root_0, TOKEN83_tree);


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_option_name", 16);
			LeaveRule("file_option_name", 16);
			LeaveRule_file_option_name();
	    }
	 	DebugLocation(175, 1);
		} finally { DebugExitRule(GrammarFileName, "file_option_name"); }
		return retval;

	}
	// $ANTLR end "file_option_name"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_option_value() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_option_value() {}

	// $ANTLR start "file_option_value"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:177:1: file_option_value : ( TOKEN | STRING | NUMBER | variable );
	[GrammarRule("file_option_value")]
	private AstParserRuleReturnScope<object, IToken> file_option_value()
	{
		EnterRule_file_option_value();
		EnterRule("file_option_value", 17);
		TraceIn("file_option_value", 17);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN84 = default(IToken);
	    IToken STRING85 = default(IToken);
	    IToken NUMBER86 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> variable87 = default(AstParserRuleReturnScope<object, IToken>);

	    object TOKEN84_tree = default(object);
	    object STRING85_tree = default(object);
	    object NUMBER86_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "file_option_value");
		DebugLocation(177, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:178:2: ( TOKEN | STRING | NUMBER | variable )
			int alt38=4;
			try { DebugEnterDecision(38, decisionCanBacktrack[38]);
			switch (input.LA(1))
			{
			case TOKEN:
				{
				alt38 = 1;
				}
				break;
			case STRING:
				{
				alt38 = 2;
				}
				break;
			case NUMBER:
				{
				alt38 = 3;
				}
				break;
			case VARIABLE:
				{
				alt38 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 38, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:178:4: TOKEN
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(178, 4);
				TOKEN84=(IToken)Match(input,TOKEN,Follow._TOKEN_in_file_option_value928); 
				TOKEN84_tree = (object)adaptor.Create(TOKEN84);
				adaptor.AddChild(root_0, TOKEN84_tree);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:178:12: STRING
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(178, 12);
				STRING85=(IToken)Match(input,STRING,Follow._STRING_in_file_option_value932); 
				STRING85_tree = (object)adaptor.Create(STRING85);
				adaptor.AddChild(root_0, STRING85_tree);


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:178:21: NUMBER
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(178, 21);
				NUMBER86=(IToken)Match(input,NUMBER,Follow._NUMBER_in_file_option_value936); 
				NUMBER86_tree = (object)adaptor.Create(NUMBER86);
				adaptor.AddChild(root_0, NUMBER86_tree);


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:178:30: variable
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(178, 30);
				PushFollow(Follow._variable_in_file_option_value940);
				variable87=variable();
				PopFollow();

				adaptor.AddChild(root_0, variable87.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_option_value", 17);
			LeaveRule("file_option_value", 17);
			LeaveRule_file_option_value();
	    }
	 	DebugLocation(179, 1);
		} finally { DebugExitRule(GrammarFileName, "file_option_value"); }
		return retval;

	}
	// $ANTLR end "file_option_value"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_where_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_where_clause() {}

	// $ANTLR start "where_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:181:1: where_clause : WHERE WS expression -> ^( T_WHERE expression ) ;
	[GrammarRule("where_clause")]
	private AstParserRuleReturnScope<object, IToken> where_clause()
	{
		EnterRule_where_clause();
		EnterRule("where_clause", 18);
		TraceIn("where_clause", 18);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WHERE88 = default(IToken);
	    IToken WS89 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression90 = default(AstParserRuleReturnScope<object, IToken>);

	    object WHERE88_tree = default(object);
	    object WS89_tree = default(object);
	    RewriteRuleITokenStream stream_WHERE=new RewriteRuleITokenStream(adaptor,"token WHERE");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "where_clause");
		DebugLocation(181, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:182:2: ( WHERE WS expression -> ^( T_WHERE expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:182:4: WHERE WS expression
			{
			DebugLocation(182, 4);
			WHERE88=(IToken)Match(input,WHERE,Follow._WHERE_in_where_clause952);  
			stream_WHERE.Add(WHERE88);

			DebugLocation(182, 10);
			WS89=(IToken)Match(input,WS,Follow._WS_in_where_clause954);  
			stream_WS.Add(WS89);

			DebugLocation(182, 13);
			PushFollow(Follow._expression_in_where_clause956);
			expression90=expression();
			PopFollow();

			stream_expression.Add(expression90.Tree);


			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 183:2: -> ^( T_WHERE expression )
			{
				DebugLocation(183, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:183:5: ^( T_WHERE expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(183, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_WHERE, "T_WHERE"), root_1);

				DebugLocation(183, 15);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("where_clause", 18);
			LeaveRule("where_clause", 18);
			LeaveRule_where_clause();
	    }
	 	DebugLocation(184, 1);
		} finally { DebugExitRule(GrammarFileName, "where_clause"); }
		return retval;

	}
	// $ANTLR end "where_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_groupby_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_groupby_clause() {}

	// $ANTLR start "groupby_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:185:1: groupby_clause : GROUP WS BY WS expression_list -> ^( T_GROUPBY expression_list ) ;
	[GrammarRule("groupby_clause")]
	private AstParserRuleReturnScope<object, IToken> groupby_clause()
	{
		EnterRule_groupby_clause();
		EnterRule("groupby_clause", 19);
		TraceIn("groupby_clause", 19);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken GROUP91 = default(IToken);
	    IToken WS92 = default(IToken);
	    IToken BY93 = default(IToken);
	    IToken WS94 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression_list95 = default(AstParserRuleReturnScope<object, IToken>);

	    object GROUP91_tree = default(object);
	    object WS92_tree = default(object);
	    object BY93_tree = default(object);
	    object WS94_tree = default(object);
	    RewriteRuleITokenStream stream_GROUP=new RewriteRuleITokenStream(adaptor,"token GROUP");
	    RewriteRuleITokenStream stream_BY=new RewriteRuleITokenStream(adaptor,"token BY");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression_list=new RewriteRuleSubtreeStream(adaptor,"rule expression_list");
		try { DebugEnterRule(GrammarFileName, "groupby_clause");
		DebugLocation(185, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:186:2: ( GROUP WS BY WS expression_list -> ^( T_GROUPBY expression_list ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:186:4: GROUP WS BY WS expression_list
			{
			DebugLocation(186, 4);
			GROUP91=(IToken)Match(input,GROUP,Follow._GROUP_in_groupby_clause975);  
			stream_GROUP.Add(GROUP91);

			DebugLocation(186, 10);
			WS92=(IToken)Match(input,WS,Follow._WS_in_groupby_clause977);  
			stream_WS.Add(WS92);

			DebugLocation(186, 13);
			BY93=(IToken)Match(input,BY,Follow._BY_in_groupby_clause979);  
			stream_BY.Add(BY93);

			DebugLocation(186, 16);
			WS94=(IToken)Match(input,WS,Follow._WS_in_groupby_clause981);  
			stream_WS.Add(WS94);

			DebugLocation(186, 19);
			PushFollow(Follow._expression_list_in_groupby_clause983);
			expression_list95=expression_list();
			PopFollow();

			stream_expression_list.Add(expression_list95.Tree);


			{
			// AST REWRITE
			// elements: expression_list
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 187:2: -> ^( T_GROUPBY expression_list )
			{
				DebugLocation(187, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:187:5: ^( T_GROUPBY expression_list )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(187, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_GROUPBY, "T_GROUPBY"), root_1);

				DebugLocation(187, 17);
				adaptor.AddChild(root_1, stream_expression_list.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("groupby_clause", 19);
			LeaveRule("groupby_clause", 19);
			LeaveRule_groupby_clause();
	    }
	 	DebugLocation(188, 1);
		} finally { DebugExitRule(GrammarFileName, "groupby_clause"); }
		return retval;

	}
	// $ANTLR end "groupby_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_clause() {}

	// $ANTLR start "orderby_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:190:1: orderby_clause : ORDER WS BY WS orderby_column_list -> ^( T_ORDERBY orderby_column_list ) ;
	[GrammarRule("orderby_clause")]
	private AstParserRuleReturnScope<object, IToken> orderby_clause()
	{
		EnterRule_orderby_clause();
		EnterRule("orderby_clause", 20);
		TraceIn("orderby_clause", 20);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken ORDER96 = default(IToken);
	    IToken WS97 = default(IToken);
	    IToken BY98 = default(IToken);
	    IToken WS99 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> orderby_column_list100 = default(AstParserRuleReturnScope<object, IToken>);

	    object ORDER96_tree = default(object);
	    object WS97_tree = default(object);
	    object BY98_tree = default(object);
	    object WS99_tree = default(object);
	    RewriteRuleITokenStream stream_BY=new RewriteRuleITokenStream(adaptor,"token BY");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_ORDER=new RewriteRuleITokenStream(adaptor,"token ORDER");
	    RewriteRuleSubtreeStream stream_orderby_column_list=new RewriteRuleSubtreeStream(adaptor,"rule orderby_column_list");
		try { DebugEnterRule(GrammarFileName, "orderby_clause");
		DebugLocation(190, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:191:2: ( ORDER WS BY WS orderby_column_list -> ^( T_ORDERBY orderby_column_list ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:191:4: ORDER WS BY WS orderby_column_list
			{
			DebugLocation(191, 4);
			ORDER96=(IToken)Match(input,ORDER,Follow._ORDER_in_orderby_clause1004);  
			stream_ORDER.Add(ORDER96);

			DebugLocation(191, 10);
			WS97=(IToken)Match(input,WS,Follow._WS_in_orderby_clause1006);  
			stream_WS.Add(WS97);

			DebugLocation(191, 13);
			BY98=(IToken)Match(input,BY,Follow._BY_in_orderby_clause1008);  
			stream_BY.Add(BY98);

			DebugLocation(191, 16);
			WS99=(IToken)Match(input,WS,Follow._WS_in_orderby_clause1010);  
			stream_WS.Add(WS99);

			DebugLocation(191, 19);
			PushFollow(Follow._orderby_column_list_in_orderby_clause1012);
			orderby_column_list100=orderby_column_list();
			PopFollow();

			stream_orderby_column_list.Add(orderby_column_list100.Tree);


			{
			// AST REWRITE
			// elements: orderby_column_list
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 192:2: -> ^( T_ORDERBY orderby_column_list )
			{
				DebugLocation(192, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:192:5: ^( T_ORDERBY orderby_column_list )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(192, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_ORDERBY, "T_ORDERBY"), root_1);

				DebugLocation(192, 17);
				adaptor.AddChild(root_1, stream_orderby_column_list.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_clause", 20);
			LeaveRule("orderby_clause", 20);
			LeaveRule_orderby_clause();
	    }
	 	DebugLocation(193, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_clause"); }
		return retval;

	}
	// $ANTLR end "orderby_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_column_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_column_list() {}

	// $ANTLR start "orderby_column_list"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:195:1: orderby_column_list : orderby_column ( ( WS )? ',' ( WS )? orderby_column )* -> ( orderby_column )* ;
	[GrammarRule("orderby_column_list")]
	private AstParserRuleReturnScope<object, IToken> orderby_column_list()
	{
		EnterRule_orderby_column_list();
		EnterRule("orderby_column_list", 21);
		TraceIn("orderby_column_list", 21);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS102 = default(IToken);
	    IToken char_literal103 = default(IToken);
	    IToken WS104 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> orderby_column101 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> orderby_column105 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS102_tree = default(object);
	    object char_literal103_tree = default(object);
	    object WS104_tree = default(object);
	    RewriteRuleITokenStream stream_147=new RewriteRuleITokenStream(adaptor,"token 147");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_orderby_column=new RewriteRuleSubtreeStream(adaptor,"rule orderby_column");
		try { DebugEnterRule(GrammarFileName, "orderby_column_list");
		DebugLocation(195, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:196:2: ( orderby_column ( ( WS )? ',' ( WS )? orderby_column )* -> ( orderby_column )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:196:4: orderby_column ( ( WS )? ',' ( WS )? orderby_column )*
			{
			DebugLocation(196, 4);
			PushFollow(Follow._orderby_column_in_orderby_column_list1033);
			orderby_column101=orderby_column();
			PopFollow();

			stream_orderby_column.Add(orderby_column101.Tree);
			DebugLocation(196, 19);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:196:19: ( ( WS )? ',' ( WS )? orderby_column )*
			try { DebugEnterSubRule(41);
			while (true)
			{
				int alt41=2;
				try { DebugEnterDecision(41, decisionCanBacktrack[41]);
				int LA41_0 = input.LA(1);

				if ((LA41_0==WS))
				{
					int LA41_1 = input.LA(2);

					if ((LA41_1==147))
					{
						alt41 = 1;
					}


				}
				else if ((LA41_0==147))
				{
					alt41 = 1;
				}


				} finally { DebugExitDecision(41); }
				switch ( alt41 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:196:20: ( WS )? ',' ( WS )? orderby_column
					{
					DebugLocation(196, 20);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:196:20: ( WS )?
					int alt39=2;
					try { DebugEnterSubRule(39);
					try { DebugEnterDecision(39, decisionCanBacktrack[39]);
					int LA39_0 = input.LA(1);

					if ((LA39_0==WS))
					{
						alt39 = 1;
					}
					} finally { DebugExitDecision(39); }
					switch (alt39)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:196:20: WS
						{
						DebugLocation(196, 20);
						WS102=(IToken)Match(input,WS,Follow._WS_in_orderby_column_list1036);  
						stream_WS.Add(WS102);


						}
						break;

					}
					} finally { DebugExitSubRule(39); }

					DebugLocation(196, 24);
					char_literal103=(IToken)Match(input,147,Follow._147_in_orderby_column_list1039);  
					stream_147.Add(char_literal103);

					DebugLocation(196, 28);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:196:28: ( WS )?
					int alt40=2;
					try { DebugEnterSubRule(40);
					try { DebugEnterDecision(40, decisionCanBacktrack[40]);
					int LA40_0 = input.LA(1);

					if ((LA40_0==WS))
					{
						alt40 = 1;
					}
					} finally { DebugExitDecision(40); }
					switch (alt40)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:196:28: WS
						{
						DebugLocation(196, 28);
						WS104=(IToken)Match(input,WS,Follow._WS_in_orderby_column_list1041);  
						stream_WS.Add(WS104);


						}
						break;

					}
					} finally { DebugExitSubRule(40); }

					DebugLocation(196, 32);
					PushFollow(Follow._orderby_column_in_orderby_column_list1044);
					orderby_column105=orderby_column();
					PopFollow();

					stream_orderby_column.Add(orderby_column105.Tree);

					}
					break;

				default:
					goto loop41;
				}
			}

			loop41:
				;

			} finally { DebugExitSubRule(41); }



			{
			// AST REWRITE
			// elements: orderby_column
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 197:2: -> ( orderby_column )*
			{
				DebugLocation(197, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:197:5: ( orderby_column )*
				while ( stream_orderby_column.HasNext )
				{
					DebugLocation(197, 5);
					adaptor.AddChild(root_0, stream_orderby_column.NextTree());

				}
				stream_orderby_column.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_column_list", 21);
			LeaveRule("orderby_column_list", 21);
			LeaveRule_orderby_column_list();
	    }
	 	DebugLocation(198, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_column_list"); }
		return retval;

	}
	// $ANTLR end "orderby_column_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_column() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_column() {}

	// $ANTLR start "orderby_column"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:200:1: orderby_column : expression ( WS orderby_direction )? -> ^( T_ORDERBY_COLUMN expression ( orderby_direction )? ) ;
	[GrammarRule("orderby_column")]
	private AstParserRuleReturnScope<object, IToken> orderby_column()
	{
		EnterRule_orderby_column();
		EnterRule("orderby_column", 22);
		TraceIn("orderby_column", 22);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS107 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression106 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> orderby_direction108 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS107_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_orderby_direction=new RewriteRuleSubtreeStream(adaptor,"rule orderby_direction");
		try { DebugEnterRule(GrammarFileName, "orderby_column");
		DebugLocation(200, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:201:2: ( expression ( WS orderby_direction )? -> ^( T_ORDERBY_COLUMN expression ( orderby_direction )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:201:4: expression ( WS orderby_direction )?
			{
			DebugLocation(201, 4);
			PushFollow(Follow._expression_in_orderby_column1064);
			expression106=expression();
			PopFollow();

			stream_expression.Add(expression106.Tree);
			DebugLocation(201, 15);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:201:15: ( WS orderby_direction )?
			int alt42=2;
			try { DebugEnterSubRule(42);
			try { DebugEnterDecision(42, decisionCanBacktrack[42]);
			int LA42_0 = input.LA(1);

			if ((LA42_0==WS))
			{
				int LA42_1 = input.LA(2);

				if ((LA42_1==ASC||LA42_1==DESC))
				{
					alt42 = 1;
				}
			}
			} finally { DebugExitDecision(42); }
			switch (alt42)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:201:16: WS orderby_direction
				{
				DebugLocation(201, 16);
				WS107=(IToken)Match(input,WS,Follow._WS_in_orderby_column1067);  
				stream_WS.Add(WS107);

				DebugLocation(201, 19);
				PushFollow(Follow._orderby_direction_in_orderby_column1069);
				orderby_direction108=orderby_direction();
				PopFollow();

				stream_orderby_direction.Add(orderby_direction108.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(42); }



			{
			// AST REWRITE
			// elements: orderby_direction, expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 201:39: -> ^( T_ORDERBY_COLUMN expression ( orderby_direction )? )
			{
				DebugLocation(201, 42);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:201:42: ^( T_ORDERBY_COLUMN expression ( orderby_direction )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(201, 44);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_ORDERBY_COLUMN, "T_ORDERBY_COLUMN"), root_1);

				DebugLocation(201, 61);
				adaptor.AddChild(root_1, stream_expression.NextTree());
				DebugLocation(201, 72);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:201:72: ( orderby_direction )?
				if (stream_orderby_direction.HasNext)
				{
					DebugLocation(201, 72);
					adaptor.AddChild(root_1, stream_orderby_direction.NextTree());

				}
				stream_orderby_direction.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_column", 22);
			LeaveRule("orderby_column", 22);
			LeaveRule_orderby_column();
	    }
	 	DebugLocation(202, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_column"); }
		return retval;

	}
	// $ANTLR end "orderby_column"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_direction() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_direction() {}

	// $ANTLR start "orderby_direction"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:204:1: orderby_direction : ( ASC -> T_ORDERBY_ASC | DESC -> T_ORDERBY_DESC );
	[GrammarRule("orderby_direction")]
	private AstParserRuleReturnScope<object, IToken> orderby_direction()
	{
		EnterRule_orderby_direction();
		EnterRule("orderby_direction", 23);
		TraceIn("orderby_direction", 23);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken ASC109 = default(IToken);
	    IToken DESC110 = default(IToken);

	    object ASC109_tree = default(object);
	    object DESC110_tree = default(object);
	    RewriteRuleITokenStream stream_DESC=new RewriteRuleITokenStream(adaptor,"token DESC");
	    RewriteRuleITokenStream stream_ASC=new RewriteRuleITokenStream(adaptor,"token ASC");

		try { DebugEnterRule(GrammarFileName, "orderby_direction");
		DebugLocation(204, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:205:2: ( ASC -> T_ORDERBY_ASC | DESC -> T_ORDERBY_DESC )
			int alt43=2;
			try { DebugEnterDecision(43, decisionCanBacktrack[43]);
			int LA43_0 = input.LA(1);

			if ((LA43_0==ASC))
			{
				alt43 = 1;
			}
			else if ((LA43_0==DESC))
			{
				alt43 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 43, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(43); }
			switch (alt43)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:205:4: ASC
				{
				DebugLocation(205, 4);
				ASC109=(IToken)Match(input,ASC,Follow._ASC_in_orderby_direction1094);  
				stream_ASC.Add(ASC109);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 205:8: -> T_ORDERBY_ASC
				{
					DebugLocation(205, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_ORDERBY_ASC, "T_ORDERBY_ASC"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:206:4: DESC
				{
				DebugLocation(206, 4);
				DESC110=(IToken)Match(input,DESC,Follow._DESC_in_orderby_direction1103);  
				stream_DESC.Add(DESC110);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 206:9: -> T_ORDERBY_DESC
				{
					DebugLocation(206, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_ORDERBY_DESC, "T_ORDERBY_DESC"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_direction", 23);
			LeaveRule("orderby_direction", 23);
			LeaveRule_orderby_direction();
	    }
	 	DebugLocation(207, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_direction"); }
		return retval;

	}
	// $ANTLR end "orderby_direction"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_use_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_use_command() {}

	// $ANTLR start "use_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:212:1: use_command : USE WS file -> ^( T_USE file ) ;
	[GrammarRule("use_command")]
	private AstParserRuleReturnScope<object, IToken> use_command()
	{
		EnterRule_use_command();
		EnterRule("use_command", 24);
		TraceIn("use_command", 24);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken USE111 = default(IToken);
	    IToken WS112 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file113 = default(AstParserRuleReturnScope<object, IToken>);

	    object USE111_tree = default(object);
	    object WS112_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_USE=new RewriteRuleITokenStream(adaptor,"token USE");
	    RewriteRuleSubtreeStream stream_file=new RewriteRuleSubtreeStream(adaptor,"rule file");
		try { DebugEnterRule(GrammarFileName, "use_command");
		DebugLocation(212, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:213:2: ( USE WS file -> ^( T_USE file ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:213:4: USE WS file
			{
			DebugLocation(213, 4);
			USE111=(IToken)Match(input,USE,Follow._USE_in_use_command1121);  
			stream_USE.Add(USE111);

			DebugLocation(213, 8);
			WS112=(IToken)Match(input,WS,Follow._WS_in_use_command1123);  
			stream_WS.Add(WS112);

			DebugLocation(213, 11);
			PushFollow(Follow._file_in_use_command1125);
			file113=file();
			PopFollow();

			stream_file.Add(file113.Tree);


			{
			// AST REWRITE
			// elements: file
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 213:16: -> ^( T_USE file )
			{
				DebugLocation(213, 19);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:213:19: ^( T_USE file )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(213, 21);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_USE, "T_USE"), root_1);

				DebugLocation(213, 27);
				adaptor.AddChild(root_1, stream_file.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("use_command", 24);
			LeaveRule("use_command", 24);
			LeaveRule_use_command();
	    }
	 	DebugLocation(214, 1);
		} finally { DebugExitRule(GrammarFileName, "use_command"); }
		return retval;

	}
	// $ANTLR end "use_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_declare_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_declare_command() {}

	// $ANTLR start "declare_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:219:1: declare_command : DECLARE WS declaration ( ( WS )? ',' ( WS )? declaration )* -> ^( T_DECLARE ( declaration )+ ) ;
	[GrammarRule("declare_command")]
	private AstParserRuleReturnScope<object, IToken> declare_command()
	{
		EnterRule_declare_command();
		EnterRule("declare_command", 25);
		TraceIn("declare_command", 25);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken DECLARE114 = default(IToken);
	    IToken WS115 = default(IToken);
	    IToken WS117 = default(IToken);
	    IToken char_literal118 = default(IToken);
	    IToken WS119 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> declaration116 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> declaration120 = default(AstParserRuleReturnScope<object, IToken>);

	    object DECLARE114_tree = default(object);
	    object WS115_tree = default(object);
	    object WS117_tree = default(object);
	    object char_literal118_tree = default(object);
	    object WS119_tree = default(object);
	    RewriteRuleITokenStream stream_DECLARE=new RewriteRuleITokenStream(adaptor,"token DECLARE");
	    RewriteRuleITokenStream stream_147=new RewriteRuleITokenStream(adaptor,"token 147");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_declaration=new RewriteRuleSubtreeStream(adaptor,"rule declaration");
		try { DebugEnterRule(GrammarFileName, "declare_command");
		DebugLocation(219, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:220:2: ( DECLARE WS declaration ( ( WS )? ',' ( WS )? declaration )* -> ^( T_DECLARE ( declaration )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:220:4: DECLARE WS declaration ( ( WS )? ',' ( WS )? declaration )*
			{
			DebugLocation(220, 4);
			DECLARE114=(IToken)Match(input,DECLARE,Follow._DECLARE_in_declare_command1147);  
			stream_DECLARE.Add(DECLARE114);

			DebugLocation(220, 12);
			WS115=(IToken)Match(input,WS,Follow._WS_in_declare_command1149);  
			stream_WS.Add(WS115);

			DebugLocation(220, 15);
			PushFollow(Follow._declaration_in_declare_command1151);
			declaration116=declaration();
			PopFollow();

			stream_declaration.Add(declaration116.Tree);
			DebugLocation(220, 27);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:220:27: ( ( WS )? ',' ( WS )? declaration )*
			try { DebugEnterSubRule(46);
			while (true)
			{
				int alt46=2;
				try { DebugEnterDecision(46, decisionCanBacktrack[46]);
				int LA46_0 = input.LA(1);

				if ((LA46_0==WS))
				{
					int LA46_1 = input.LA(2);

					if ((LA46_1==147))
					{
						alt46 = 1;
					}


				}
				else if ((LA46_0==147))
				{
					alt46 = 1;
				}


				} finally { DebugExitDecision(46); }
				switch ( alt46 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:220:28: ( WS )? ',' ( WS )? declaration
					{
					DebugLocation(220, 28);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:220:28: ( WS )?
					int alt44=2;
					try { DebugEnterSubRule(44);
					try { DebugEnterDecision(44, decisionCanBacktrack[44]);
					int LA44_0 = input.LA(1);

					if ((LA44_0==WS))
					{
						alt44 = 1;
					}
					} finally { DebugExitDecision(44); }
					switch (alt44)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:220:28: WS
						{
						DebugLocation(220, 28);
						WS117=(IToken)Match(input,WS,Follow._WS_in_declare_command1154);  
						stream_WS.Add(WS117);


						}
						break;

					}
					} finally { DebugExitSubRule(44); }

					DebugLocation(220, 32);
					char_literal118=(IToken)Match(input,147,Follow._147_in_declare_command1157);  
					stream_147.Add(char_literal118);

					DebugLocation(220, 36);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:220:36: ( WS )?
					int alt45=2;
					try { DebugEnterSubRule(45);
					try { DebugEnterDecision(45, decisionCanBacktrack[45]);
					int LA45_0 = input.LA(1);

					if ((LA45_0==WS))
					{
						alt45 = 1;
					}
					} finally { DebugExitDecision(45); }
					switch (alt45)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:220:36: WS
						{
						DebugLocation(220, 36);
						WS119=(IToken)Match(input,WS,Follow._WS_in_declare_command1159);  
						stream_WS.Add(WS119);


						}
						break;

					}
					} finally { DebugExitSubRule(45); }

					DebugLocation(220, 40);
					PushFollow(Follow._declaration_in_declare_command1162);
					declaration120=declaration();
					PopFollow();

					stream_declaration.Add(declaration120.Tree);

					}
					break;

				default:
					goto loop46;
				}
			}

			loop46:
				;

			} finally { DebugExitSubRule(46); }



			{
			// AST REWRITE
			// elements: declaration
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 221:2: -> ^( T_DECLARE ( declaration )+ )
			{
				DebugLocation(221, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:221:5: ^( T_DECLARE ( declaration )+ )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(221, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_DECLARE, "T_DECLARE"), root_1);

				DebugLocation(221, 17);
				if (!(stream_declaration.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_declaration.HasNext )
				{
					DebugLocation(221, 17);
					adaptor.AddChild(root_1, stream_declaration.NextTree());

				}
				stream_declaration.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declare_command", 25);
			LeaveRule("declare_command", 25);
			LeaveRule_declare_command();
	    }
	 	DebugLocation(222, 1);
		} finally { DebugExitRule(GrammarFileName, "declare_command"); }
		return retval;

	}
	// $ANTLR end "declare_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_declaration() {}

	// $ANTLR start "declaration"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:224:1: declaration : variable WS ( AS WS )? datatype -> ^( T_DECLARATION variable datatype ) ;
	[GrammarRule("declaration")]
	private AstParserRuleReturnScope<object, IToken> declaration()
	{
		EnterRule_declaration();
		EnterRule("declaration", 26);
		TraceIn("declaration", 26);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS122 = default(IToken);
	    IToken AS123 = default(IToken);
	    IToken WS124 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> variable121 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> datatype125 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS122_tree = default(object);
	    object AS123_tree = default(object);
	    object WS124_tree = default(object);
	    RewriteRuleITokenStream stream_AS=new RewriteRuleITokenStream(adaptor,"token AS");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_datatype=new RewriteRuleSubtreeStream(adaptor,"rule datatype");
	    RewriteRuleSubtreeStream stream_variable=new RewriteRuleSubtreeStream(adaptor,"rule variable");
		try { DebugEnterRule(GrammarFileName, "declaration");
		DebugLocation(224, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:225:2: ( variable WS ( AS WS )? datatype -> ^( T_DECLARATION variable datatype ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:225:4: variable WS ( AS WS )? datatype
			{
			DebugLocation(225, 4);
			PushFollow(Follow._variable_in_declaration1186);
			variable121=variable();
			PopFollow();

			stream_variable.Add(variable121.Tree);
			DebugLocation(225, 13);
			WS122=(IToken)Match(input,WS,Follow._WS_in_declaration1188);  
			stream_WS.Add(WS122);

			DebugLocation(225, 16);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:225:16: ( AS WS )?
			int alt47=2;
			try { DebugEnterSubRule(47);
			try { DebugEnterDecision(47, decisionCanBacktrack[47]);
			int LA47_0 = input.LA(1);

			if ((LA47_0==AS))
			{
				alt47 = 1;
			}
			} finally { DebugExitDecision(47); }
			switch (alt47)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:225:17: AS WS
				{
				DebugLocation(225, 17);
				AS123=(IToken)Match(input,AS,Follow._AS_in_declaration1191);  
				stream_AS.Add(AS123);

				DebugLocation(225, 20);
				WS124=(IToken)Match(input,WS,Follow._WS_in_declaration1193);  
				stream_WS.Add(WS124);


				}
				break;

			}
			} finally { DebugExitSubRule(47); }

			DebugLocation(225, 25);
			PushFollow(Follow._datatype_in_declaration1197);
			datatype125=datatype();
			PopFollow();

			stream_datatype.Add(datatype125.Tree);


			{
			// AST REWRITE
			// elements: variable, datatype
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 226:2: -> ^( T_DECLARATION variable datatype )
			{
				DebugLocation(226, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:226:5: ^( T_DECLARATION variable datatype )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(226, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_DECLARATION, "T_DECLARATION"), root_1);

				DebugLocation(226, 21);
				adaptor.AddChild(root_1, stream_variable.NextTree());
				DebugLocation(226, 30);
				adaptor.AddChild(root_1, stream_datatype.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declaration", 26);
			LeaveRule("declaration", 26);
			LeaveRule_declaration();
	    }
	 	DebugLocation(227, 1);
		} finally { DebugExitRule(GrammarFileName, "declaration"); }
		return retval;

	}
	// $ANTLR end "declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_create_view_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_create_view_command() {}

	// $ANTLR start "create_view_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:232:1: create_view_command : CREATE WS VIEW WS view_name WS AS WS select_command -> ^( T_CREATE_VIEW view_name select_command ) ;
	[GrammarRule("create_view_command")]
	private AstParserRuleReturnScope<object, IToken> create_view_command()
	{
		EnterRule_create_view_command();
		EnterRule("create_view_command", 27);
		TraceIn("create_view_command", 27);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken CREATE126 = default(IToken);
	    IToken WS127 = default(IToken);
	    IToken VIEW128 = default(IToken);
	    IToken WS129 = default(IToken);
	    IToken WS131 = default(IToken);
	    IToken AS132 = default(IToken);
	    IToken WS133 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> view_name130 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> select_command134 = default(AstParserRuleReturnScope<object, IToken>);

	    object CREATE126_tree = default(object);
	    object WS127_tree = default(object);
	    object VIEW128_tree = default(object);
	    object WS129_tree = default(object);
	    object WS131_tree = default(object);
	    object AS132_tree = default(object);
	    object WS133_tree = default(object);
	    RewriteRuleITokenStream stream_AS=new RewriteRuleITokenStream(adaptor,"token AS");
	    RewriteRuleITokenStream stream_CREATE=new RewriteRuleITokenStream(adaptor,"token CREATE");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_VIEW=new RewriteRuleITokenStream(adaptor,"token VIEW");
	    RewriteRuleSubtreeStream stream_view_name=new RewriteRuleSubtreeStream(adaptor,"rule view_name");
	    RewriteRuleSubtreeStream stream_select_command=new RewriteRuleSubtreeStream(adaptor,"rule select_command");
		try { DebugEnterRule(GrammarFileName, "create_view_command");
		DebugLocation(232, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:233:2: ( CREATE WS VIEW WS view_name WS AS WS select_command -> ^( T_CREATE_VIEW view_name select_command ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:233:4: CREATE WS VIEW WS view_name WS AS WS select_command
			{
			DebugLocation(233, 4);
			CREATE126=(IToken)Match(input,CREATE,Follow._CREATE_in_create_view_command1222);  
			stream_CREATE.Add(CREATE126);

			DebugLocation(233, 11);
			WS127=(IToken)Match(input,WS,Follow._WS_in_create_view_command1224);  
			stream_WS.Add(WS127);

			DebugLocation(233, 14);
			VIEW128=(IToken)Match(input,VIEW,Follow._VIEW_in_create_view_command1226);  
			stream_VIEW.Add(VIEW128);

			DebugLocation(233, 19);
			WS129=(IToken)Match(input,WS,Follow._WS_in_create_view_command1228);  
			stream_WS.Add(WS129);

			DebugLocation(233, 22);
			PushFollow(Follow._view_name_in_create_view_command1230);
			view_name130=view_name();
			PopFollow();

			stream_view_name.Add(view_name130.Tree);
			DebugLocation(233, 32);
			WS131=(IToken)Match(input,WS,Follow._WS_in_create_view_command1232);  
			stream_WS.Add(WS131);

			DebugLocation(233, 35);
			AS132=(IToken)Match(input,AS,Follow._AS_in_create_view_command1234);  
			stream_AS.Add(AS132);

			DebugLocation(233, 38);
			WS133=(IToken)Match(input,WS,Follow._WS_in_create_view_command1236);  
			stream_WS.Add(WS133);

			DebugLocation(233, 41);
			PushFollow(Follow._select_command_in_create_view_command1238);
			select_command134=select_command();
			PopFollow();

			stream_select_command.Add(select_command134.Tree);


			{
			// AST REWRITE
			// elements: select_command, view_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 234:2: -> ^( T_CREATE_VIEW view_name select_command )
			{
				DebugLocation(234, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:234:5: ^( T_CREATE_VIEW view_name select_command )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(234, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CREATE_VIEW, "T_CREATE_VIEW"), root_1);

				DebugLocation(234, 21);
				adaptor.AddChild(root_1, stream_view_name.NextTree());
				DebugLocation(234, 31);
				adaptor.AddChild(root_1, stream_select_command.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("create_view_command", 27);
			LeaveRule("create_view_command", 27);
			LeaveRule_create_view_command();
	    }
	 	DebugLocation(235, 1);
		} finally { DebugExitRule(GrammarFileName, "create_view_command"); }
		return retval;

	}
	// $ANTLR end "create_view_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_view_name() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_view_name() {}

	// $ANTLR start "view_name"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:237:1: view_name : TOKEN -> ^( T_VIEW_NAME TOKEN ) ;
	[GrammarRule("view_name")]
	private AstParserRuleReturnScope<object, IToken> view_name()
	{
		EnterRule_view_name();
		EnterRule("view_name", 28);
		TraceIn("view_name", 28);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN135 = default(IToken);

	    object TOKEN135_tree = default(object);
	    RewriteRuleITokenStream stream_TOKEN=new RewriteRuleITokenStream(adaptor,"token TOKEN");

		try { DebugEnterRule(GrammarFileName, "view_name");
		DebugLocation(237, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:238:2: ( TOKEN -> ^( T_VIEW_NAME TOKEN ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:238:4: TOKEN
			{
			DebugLocation(238, 4);
			TOKEN135=(IToken)Match(input,TOKEN,Follow._TOKEN_in_view_name1261);  
			stream_TOKEN.Add(TOKEN135);



			{
			// AST REWRITE
			// elements: TOKEN
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 238:10: -> ^( T_VIEW_NAME TOKEN )
			{
				DebugLocation(238, 13);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:238:13: ^( T_VIEW_NAME TOKEN )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(238, 15);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_VIEW_NAME, "T_VIEW_NAME"), root_1);

				DebugLocation(238, 27);
				adaptor.AddChild(root_1, stream_TOKEN.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("view_name", 28);
			LeaveRule("view_name", 28);
			LeaveRule_view_name();
	    }
	 	DebugLocation(239, 1);
		} finally { DebugExitRule(GrammarFileName, "view_name"); }
		return retval;

	}
	// $ANTLR end "view_name"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_set_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_set_command() {}

	// $ANTLR start "set_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:245:1: set_command : SET WS variable ( WS )? '=' ( WS )? expression -> ^( T_SET_VARIABLE variable expression ) ;
	[GrammarRule("set_command")]
	private AstParserRuleReturnScope<object, IToken> set_command()
	{
		EnterRule_set_command();
		EnterRule("set_command", 29);
		TraceIn("set_command", 29);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken SET136 = default(IToken);
	    IToken WS137 = default(IToken);
	    IToken WS139 = default(IToken);
	    IToken char_literal140 = default(IToken);
	    IToken WS141 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> variable138 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression142 = default(AstParserRuleReturnScope<object, IToken>);

	    object SET136_tree = default(object);
	    object WS137_tree = default(object);
	    object WS139_tree = default(object);
	    object char_literal140_tree = default(object);
	    object WS141_tree = default(object);
	    RewriteRuleITokenStream stream_SET=new RewriteRuleITokenStream(adaptor,"token SET");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_154=new RewriteRuleITokenStream(adaptor,"token 154");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_variable=new RewriteRuleSubtreeStream(adaptor,"rule variable");
		try { DebugEnterRule(GrammarFileName, "set_command");
		DebugLocation(245, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:246:2: ( SET WS variable ( WS )? '=' ( WS )? expression -> ^( T_SET_VARIABLE variable expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:246:4: SET WS variable ( WS )? '=' ( WS )? expression
			{
			DebugLocation(246, 4);
			SET136=(IToken)Match(input,SET,Follow._SET_in_set_command1285);  
			stream_SET.Add(SET136);

			DebugLocation(246, 8);
			WS137=(IToken)Match(input,WS,Follow._WS_in_set_command1287);  
			stream_WS.Add(WS137);

			DebugLocation(246, 11);
			PushFollow(Follow._variable_in_set_command1289);
			variable138=variable();
			PopFollow();

			stream_variable.Add(variable138.Tree);
			DebugLocation(246, 20);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:246:20: ( WS )?
			int alt48=2;
			try { DebugEnterSubRule(48);
			try { DebugEnterDecision(48, decisionCanBacktrack[48]);
			int LA48_0 = input.LA(1);

			if ((LA48_0==WS))
			{
				alt48 = 1;
			}
			} finally { DebugExitDecision(48); }
			switch (alt48)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:246:20: WS
				{
				DebugLocation(246, 20);
				WS139=(IToken)Match(input,WS,Follow._WS_in_set_command1291);  
				stream_WS.Add(WS139);


				}
				break;

			}
			} finally { DebugExitSubRule(48); }

			DebugLocation(246, 24);
			char_literal140=(IToken)Match(input,154,Follow._154_in_set_command1294);  
			stream_154.Add(char_literal140);

			DebugLocation(246, 28);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:246:28: ( WS )?
			int alt49=2;
			try { DebugEnterSubRule(49);
			try { DebugEnterDecision(49, decisionCanBacktrack[49]);
			int LA49_0 = input.LA(1);

			if ((LA49_0==WS))
			{
				alt49 = 1;
			}
			} finally { DebugExitDecision(49); }
			switch (alt49)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:246:28: WS
				{
				DebugLocation(246, 28);
				WS141=(IToken)Match(input,WS,Follow._WS_in_set_command1296);  
				stream_WS.Add(WS141);


				}
				break;

			}
			} finally { DebugExitSubRule(49); }

			DebugLocation(246, 32);
			PushFollow(Follow._expression_in_set_command1299);
			expression142=expression();
			PopFollow();

			stream_expression.Add(expression142.Tree);


			{
			// AST REWRITE
			// elements: variable, expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 247:2: -> ^( T_SET_VARIABLE variable expression )
			{
				DebugLocation(247, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:247:5: ^( T_SET_VARIABLE variable expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(247, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SET_VARIABLE, "T_SET_VARIABLE"), root_1);

				DebugLocation(247, 22);
				adaptor.AddChild(root_1, stream_variable.NextTree());
				DebugLocation(247, 31);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("set_command", 29);
			LeaveRule("set_command", 29);
			LeaveRule_set_command();
	    }
	 	DebugLocation(248, 1);
		} finally { DebugExitRule(GrammarFileName, "set_command"); }
		return retval;

	}
	// $ANTLR end "set_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_list() {}

	// $ANTLR start "expression_list"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:253:1: expression_list : expression ( ( WS )? ',' ( WS )? expression )* -> ^( T_EXPRESSIONLIST ( expression )+ ) ;
	[GrammarRule("expression_list")]
	private AstParserRuleReturnScope<object, IToken> expression_list()
	{
		EnterRule_expression_list();
		EnterRule("expression_list", 30);
		TraceIn("expression_list", 30);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS144 = default(IToken);
	    IToken char_literal145 = default(IToken);
	    IToken WS146 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression143 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression147 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS144_tree = default(object);
	    object char_literal145_tree = default(object);
	    object WS146_tree = default(object);
	    RewriteRuleITokenStream stream_147=new RewriteRuleITokenStream(adaptor,"token 147");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "expression_list");
		DebugLocation(253, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:254:2: ( expression ( ( WS )? ',' ( WS )? expression )* -> ^( T_EXPRESSIONLIST ( expression )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:254:4: expression ( ( WS )? ',' ( WS )? expression )*
			{
			DebugLocation(254, 4);
			PushFollow(Follow._expression_in_expression_list1324);
			expression143=expression();
			PopFollow();

			stream_expression.Add(expression143.Tree);
			DebugLocation(254, 15);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:254:15: ( ( WS )? ',' ( WS )? expression )*
			try { DebugEnterSubRule(52);
			while (true)
			{
				int alt52=2;
				try { DebugEnterDecision(52, decisionCanBacktrack[52]);
				int LA52_0 = input.LA(1);

				if ((LA52_0==WS))
				{
					int LA52_1 = input.LA(2);

					if ((LA52_1==147))
					{
						alt52 = 1;
					}


				}
				else if ((LA52_0==147))
				{
					alt52 = 1;
				}


				} finally { DebugExitDecision(52); }
				switch ( alt52 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:254:16: ( WS )? ',' ( WS )? expression
					{
					DebugLocation(254, 16);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:254:16: ( WS )?
					int alt50=2;
					try { DebugEnterSubRule(50);
					try { DebugEnterDecision(50, decisionCanBacktrack[50]);
					int LA50_0 = input.LA(1);

					if ((LA50_0==WS))
					{
						alt50 = 1;
					}
					} finally { DebugExitDecision(50); }
					switch (alt50)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:254:16: WS
						{
						DebugLocation(254, 16);
						WS144=(IToken)Match(input,WS,Follow._WS_in_expression_list1327);  
						stream_WS.Add(WS144);


						}
						break;

					}
					} finally { DebugExitSubRule(50); }

					DebugLocation(254, 20);
					char_literal145=(IToken)Match(input,147,Follow._147_in_expression_list1330);  
					stream_147.Add(char_literal145);

					DebugLocation(254, 24);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:254:24: ( WS )?
					int alt51=2;
					try { DebugEnterSubRule(51);
					try { DebugEnterDecision(51, decisionCanBacktrack[51]);
					int LA51_0 = input.LA(1);

					if ((LA51_0==WS))
					{
						alt51 = 1;
					}
					} finally { DebugExitDecision(51); }
					switch (alt51)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:254:24: WS
						{
						DebugLocation(254, 24);
						WS146=(IToken)Match(input,WS,Follow._WS_in_expression_list1332);  
						stream_WS.Add(WS146);


						}
						break;

					}
					} finally { DebugExitSubRule(51); }

					DebugLocation(254, 28);
					PushFollow(Follow._expression_in_expression_list1335);
					expression147=expression();
					PopFollow();

					stream_expression.Add(expression147.Tree);

					}
					break;

				default:
					goto loop52;
				}
			}

			loop52:
				;

			} finally { DebugExitSubRule(52); }



			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 254:41: -> ^( T_EXPRESSIONLIST ( expression )+ )
			{
				DebugLocation(254, 44);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:254:44: ^( T_EXPRESSIONLIST ( expression )+ )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(254, 46);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_EXPRESSIONLIST, "T_EXPRESSIONLIST"), root_1);

				DebugLocation(254, 63);
				if (!(stream_expression.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_expression.HasNext )
				{
					DebugLocation(254, 63);
					adaptor.AddChild(root_1, stream_expression.NextTree());

				}
				stream_expression.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_list", 30);
			LeaveRule("expression_list", 30);
			LeaveRule_expression_list();
	    }
	 	DebugLocation(255, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_list"); }
		return retval;

	}
	// $ANTLR end "expression_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_list_or_select_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_list_or_select_command() {}

	// $ANTLR start "expression_list_or_select_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:257:1: expression_list_or_select_command : ( expression_list | select_command );
	[GrammarRule("expression_list_or_select_command")]
	private AstParserRuleReturnScope<object, IToken> expression_list_or_select_command()
	{
		EnterRule_expression_list_or_select_command();
		EnterRule("expression_list_or_select_command", 31);
		TraceIn("expression_list_or_select_command", 31);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> expression_list148 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> select_command149 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "expression_list_or_select_command");
		DebugLocation(257, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:258:2: ( expression_list | select_command )
			int alt53=2;
			try { DebugEnterDecision(53, decisionCanBacktrack[53]);
			int LA53_0 = input.LA(1);

			if (((LA53_0>=CASE && LA53_0<=CAST)||LA53_0==CONVERT||LA53_0==EXISTS||(LA53_0>=NOT && LA53_0<=NUMBER)||LA53_0==SIMPLE_FILE||(LA53_0>=STRING && LA53_0<=SYSTEMVAR)||LA53_0==TOKEN||LA53_0==VARIABLE||LA53_0==143))
			{
				alt53 = 1;
			}
			else if ((LA53_0==SELECT))
			{
				alt53 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 53, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(53); }
			switch (alt53)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:258:4: expression_list
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(258, 4);
				PushFollow(Follow._expression_list_in_expression_list_or_select_command1358);
				expression_list148=expression_list();
				PopFollow();

				adaptor.AddChild(root_0, expression_list148.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:258:22: select_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(258, 22);
				PushFollow(Follow._select_command_in_expression_list_or_select_command1362);
				select_command149=select_command();
				PopFollow();

				adaptor.AddChild(root_0, select_command149.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_list_or_select_command", 31);
			LeaveRule("expression_list_or_select_command", 31);
			LeaveRule_expression_list_or_select_command();
	    }
	 	DebugLocation(259, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_list_or_select_command"); }
		return retval;

	}
	// $ANTLR end "expression_list_or_select_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression() {}

	// $ANTLR start "expression"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:261:1: expression : expression_7 ;
	[GrammarRule("expression")]
	private AstParserRuleReturnScope<object, IToken> expression()
	{
		EnterRule_expression();
		EnterRule("expression", 32);
		TraceIn("expression", 32);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> expression_7150 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(261, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:262:2: ( expression_7 )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:262:4: expression_7
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(262, 4);
			PushFollow(Follow._expression_7_in_expression1374);
			expression_7150=expression_7();
			PopFollow();

			adaptor.AddChild(root_0, expression_7150.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression", 32);
			LeaveRule("expression", 32);
			LeaveRule_expression();
	    }
	 	DebugLocation(263, 1);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return retval;

	}
	// $ANTLR end "expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_7() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_7() {}

	// $ANTLR start "expression_7"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:265:1: expression_7 : (a= expression_6 -> $a) ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )* ;
	[GrammarRule("expression_7")]
	private AstParserRuleReturnScope<object, IToken> expression_7()
	{
		EnterRule_expression_7();
		EnterRule("expression_7", 33);
		TraceIn("expression_7", 33);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS151 = default(IToken);
	    IToken WS153 = default(IToken);
	    IToken IN154 = default(IToken);
	    IToken WS155 = default(IToken);
	    IToken char_literal156 = default(IToken);
	    IToken WS157 = default(IToken);
	    IToken WS159 = default(IToken);
	    IToken char_literal160 = default(IToken);
	    IToken NOT161 = default(IToken);
	    IToken WS162 = default(IToken);
	    IToken IN163 = default(IToken);
	    IToken WS164 = default(IToken);
	    IToken char_literal165 = default(IToken);
	    IToken WS166 = default(IToken);
	    IToken WS168 = default(IToken);
	    IToken char_literal169 = default(IToken);
	    IToken WS171 = default(IToken);
	    IToken SOME172 = default(IToken);
	    IToken ANY173 = default(IToken);
	    IToken WS174 = default(IToken);
	    IToken char_literal175 = default(IToken);
	    IToken char_literal177 = default(IToken);
	    IToken WS179 = default(IToken);
	    IToken ALL180 = default(IToken);
	    IToken WS181 = default(IToken);
	    IToken char_literal182 = default(IToken);
	    IToken char_literal184 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_7152 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command158 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command167 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_4170 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command176 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_4178 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command183 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS151_tree = default(object);
	    object WS153_tree = default(object);
	    object IN154_tree = default(object);
	    object WS155_tree = default(object);
	    object char_literal156_tree = default(object);
	    object WS157_tree = default(object);
	    object WS159_tree = default(object);
	    object char_literal160_tree = default(object);
	    object NOT161_tree = default(object);
	    object WS162_tree = default(object);
	    object IN163_tree = default(object);
	    object WS164_tree = default(object);
	    object char_literal165_tree = default(object);
	    object WS166_tree = default(object);
	    object WS168_tree = default(object);
	    object char_literal169_tree = default(object);
	    object WS171_tree = default(object);
	    object SOME172_tree = default(object);
	    object ANY173_tree = default(object);
	    object WS174_tree = default(object);
	    object char_literal175_tree = default(object);
	    object char_literal177_tree = default(object);
	    object WS179_tree = default(object);
	    object ALL180_tree = default(object);
	    object WS181_tree = default(object);
	    object char_literal182_tree = default(object);
	    object char_literal184_tree = default(object);
	    RewriteRuleITokenStream stream_143=new RewriteRuleITokenStream(adaptor,"token 143");
	    RewriteRuleITokenStream stream_144=new RewriteRuleITokenStream(adaptor,"token 144");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_ANY=new RewriteRuleITokenStream(adaptor,"token ANY");
	    RewriteRuleITokenStream stream_IN=new RewriteRuleITokenStream(adaptor,"token IN");
	    RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");
	    RewriteRuleITokenStream stream_SOME=new RewriteRuleITokenStream(adaptor,"token SOME");
	    RewriteRuleITokenStream stream_ALL=new RewriteRuleITokenStream(adaptor,"token ALL");
	    RewriteRuleSubtreeStream stream_op_7=new RewriteRuleSubtreeStream(adaptor,"rule op_7");
	    RewriteRuleSubtreeStream stream_expression_6=new RewriteRuleSubtreeStream(adaptor,"rule expression_6");
	    RewriteRuleSubtreeStream stream_expression_list_or_select_command=new RewriteRuleSubtreeStream(adaptor,"rule expression_list_or_select_command");
	    RewriteRuleSubtreeStream stream_op_4=new RewriteRuleSubtreeStream(adaptor,"rule op_4");
		try { DebugEnterRule(GrammarFileName, "expression_7");
		DebugLocation(265, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:266:2: ( (a= expression_6 -> $a) ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:266:4: (a= expression_6 -> $a) ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )*
			{
			DebugLocation(266, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:266:4: (a= expression_6 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:266:5: a= expression_6
			{
			DebugLocation(266, 6);
			PushFollow(Follow._expression_6_in_expression_71390);
			a=expression_6();
			PopFollow();

			stream_expression_6.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 266:19: -> $a
			{
				DebugLocation(266, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(266, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:266:25: ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )*
			try { DebugEnterSubRule(66);
			while (true)
			{
				int alt66=2;
				try { DebugEnterDecision(66, decisionCanBacktrack[66]);
				int LA66_0 = input.LA(1);

				if ((LA66_0==WS))
				{
					int LA66_1 = input.LA(2);

					if ((LA66_1==NOT))
					{
						int LA66_3 = input.LA(3);

						if ((LA66_3==WS))
						{
							int LA66_5 = input.LA(4);

							if ((LA66_5==BETWEEN||LA66_5==IN||LA66_5==LIKE||LA66_5==MATCH))
							{
								alt66 = 1;
							}


						}


					}
					else if ((LA66_1==BETWEEN||LA66_1==IN||LA66_1==LIKE||LA66_1==MATCH||LA66_1==OR||(LA66_1>=138 && LA66_1<=140)||(LA66_1>=151 && LA66_1<=156)))
					{
						alt66 = 1;
					}


				}


				} finally { DebugExitDecision(66); }
				switch ( alt66 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:266:26: WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) )
					{
					DebugLocation(266, 26);
					WS151=(IToken)Match(input,WS,Follow._WS_in_expression_71397);  
					stream_WS.Add(WS151);

					DebugLocation(266, 29);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:266:29: ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) )
					int alt65=5;
					try { DebugEnterSubRule(65);
					try { DebugEnterDecision(65, decisionCanBacktrack[65]);
					switch (input.LA(1))
					{
					case BETWEEN:
					case LIKE:
					case MATCH:
					case OR:
						{
						alt65 = 1;
						}
						break;
					case NOT:
						{
						int LA65_2 = input.LA(2);

						if ((LA65_2==WS))
						{
							int LA65_13 = input.LA(3);

							if ((LA65_13==BETWEEN||LA65_13==LIKE||LA65_13==MATCH))
							{
								alt65 = 1;
							}
							else if ((LA65_13==IN))
							{
								alt65 = 3;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 65, 13, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 65, 2, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case IN:
						{
						alt65 = 2;
						}
						break;
					case 154:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA65_14 = input.LA(3);

							if ((LA65_14==ANY||LA65_14==SOME))
							{
								alt65 = 4;
							}
							else if ((LA65_14==ALL))
							{
								alt65 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 65, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt65 = 4;
							}
							break;
						case ALL:
							{
							alt65 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 65, 4, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 156:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA65_14 = input.LA(3);

							if ((LA65_14==ANY||LA65_14==SOME))
							{
								alt65 = 4;
							}
							else if ((LA65_14==ALL))
							{
								alt65 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 65, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt65 = 4;
							}
							break;
						case ALL:
							{
							alt65 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 65, 5, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 152:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA65_14 = input.LA(3);

							if ((LA65_14==ANY||LA65_14==SOME))
							{
								alt65 = 4;
							}
							else if ((LA65_14==ALL))
							{
								alt65 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 65, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt65 = 4;
							}
							break;
						case ALL:
							{
							alt65 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 65, 6, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 153:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA65_14 = input.LA(3);

							if ((LA65_14==ANY||LA65_14==SOME))
							{
								alt65 = 4;
							}
							else if ((LA65_14==ALL))
							{
								alt65 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 65, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt65 = 4;
							}
							break;
						case ALL:
							{
							alt65 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 65, 7, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 139:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA65_14 = input.LA(3);

							if ((LA65_14==ANY||LA65_14==SOME))
							{
								alt65 = 4;
							}
							else if ((LA65_14==ALL))
							{
								alt65 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 65, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt65 = 4;
							}
							break;
						case ALL:
							{
							alt65 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 65, 8, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 140:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA65_14 = input.LA(3);

							if ((LA65_14==ANY||LA65_14==SOME))
							{
								alt65 = 4;
							}
							else if ((LA65_14==ALL))
							{
								alt65 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 65, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt65 = 4;
							}
							break;
						case ALL:
							{
							alt65 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 65, 9, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 138:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA65_14 = input.LA(3);

							if ((LA65_14==ANY||LA65_14==SOME))
							{
								alt65 = 4;
							}
							else if ((LA65_14==ALL))
							{
								alt65 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 65, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt65 = 4;
							}
							break;
						case ALL:
							{
							alt65 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 65, 10, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 155:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA65_14 = input.LA(3);

							if ((LA65_14==ANY||LA65_14==SOME))
							{
								alt65 = 4;
							}
							else if ((LA65_14==ALL))
							{
								alt65 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 65, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt65 = 4;
							}
							break;
						case ALL:
							{
							alt65 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 65, 11, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 151:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA65_14 = input.LA(3);

							if ((LA65_14==ANY||LA65_14==SOME))
							{
								alt65 = 4;
							}
							else if ((LA65_14==ALL))
							{
								alt65 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 65, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt65 = 4;
							}
							break;
						case ALL:
							{
							alt65 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 65, 12, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 65, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(65); }
					switch (alt65)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:267:2: op_7 WS b= expression_6
						{
						DebugLocation(267, 2);
						PushFollow(Follow._op_7_in_expression_71402);
						op_7152=op_7();
						PopFollow();

						stream_op_7.Add(op_7152.Tree);
						DebugLocation(267, 7);
						WS153=(IToken)Match(input,WS,Follow._WS_in_expression_71404);  
						stream_WS.Add(WS153);

						DebugLocation(267, 11);
						PushFollow(Follow._expression_6_in_expression_71408);
						b=expression_6();
						PopFollow();

						stream_expression_6.Add(b.Tree);


						{
						// AST REWRITE
						// elements: b, expression_7, op_7
						// token labels: 
						// rule labels: retval, b
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 267:25: -> ^( T_OP_BINARY op_7 $expression_7 $b)
						{
							DebugLocation(267, 28);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:267:28: ^( T_OP_BINARY op_7 $expression_7 $b)
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(267, 30);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(267, 42);
							adaptor.AddChild(root_1, stream_op_7.NextTree());
							DebugLocation(267, 48);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(267, 62);
							adaptor.AddChild(root_1, stream_b.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:268:4: IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')'
						{
						DebugLocation(268, 4);
						IN154=(IToken)Match(input,IN,Follow._IN_in_expression_71427);  
						stream_IN.Add(IN154);

						DebugLocation(268, 7);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:268:7: ( WS )?
						int alt54=2;
						try { DebugEnterSubRule(54);
						try { DebugEnterDecision(54, decisionCanBacktrack[54]);
						int LA54_0 = input.LA(1);

						if ((LA54_0==WS))
						{
							alt54 = 1;
						}
						} finally { DebugExitDecision(54); }
						switch (alt54)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:268:7: WS
							{
							DebugLocation(268, 7);
							WS155=(IToken)Match(input,WS,Follow._WS_in_expression_71429);  
							stream_WS.Add(WS155);


							}
							break;

						}
						} finally { DebugExitSubRule(54); }

						DebugLocation(268, 11);
						char_literal156=(IToken)Match(input,143,Follow._143_in_expression_71432);  
						stream_143.Add(char_literal156);

						DebugLocation(268, 15);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:268:15: ( WS )?
						int alt55=2;
						try { DebugEnterSubRule(55);
						try { DebugEnterDecision(55, decisionCanBacktrack[55]);
						int LA55_0 = input.LA(1);

						if ((LA55_0==WS))
						{
							alt55 = 1;
						}
						} finally { DebugExitDecision(55); }
						switch (alt55)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:268:15: WS
							{
							DebugLocation(268, 15);
							WS157=(IToken)Match(input,WS,Follow._WS_in_expression_71434);  
							stream_WS.Add(WS157);


							}
							break;

						}
						} finally { DebugExitSubRule(55); }

						DebugLocation(268, 19);
						PushFollow(Follow._expression_list_or_select_command_in_expression_71437);
						expression_list_or_select_command158=expression_list_or_select_command();
						PopFollow();

						stream_expression_list_or_select_command.Add(expression_list_or_select_command158.Tree);
						DebugLocation(268, 53);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:268:53: ( WS )?
						int alt56=2;
						try { DebugEnterSubRule(56);
						try { DebugEnterDecision(56, decisionCanBacktrack[56]);
						int LA56_0 = input.LA(1);

						if ((LA56_0==WS))
						{
							alt56 = 1;
						}
						} finally { DebugExitDecision(56); }
						switch (alt56)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:268:53: WS
							{
							DebugLocation(268, 53);
							WS159=(IToken)Match(input,WS,Follow._WS_in_expression_71439);  
							stream_WS.Add(WS159);


							}
							break;

						}
						} finally { DebugExitSubRule(56); }

						DebugLocation(268, 57);
						char_literal160=(IToken)Match(input,144,Follow._144_in_expression_71442);  
						stream_144.Add(char_literal160);



						{
						// AST REWRITE
						// elements: expression_list_or_select_command, expression_7
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 268:61: -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command )
						{
							DebugLocation(268, 64);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:268:64: ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(268, 66);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(268, 78);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_IN, "T_IN"));
							DebugLocation(268, 84);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(268, 97);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:269:4: NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')'
						{
						DebugLocation(269, 4);
						NOT161=(IToken)Match(input,NOT,Follow._NOT_in_expression_71460);  
						stream_NOT.Add(NOT161);

						DebugLocation(269, 8);
						WS162=(IToken)Match(input,WS,Follow._WS_in_expression_71462);  
						stream_WS.Add(WS162);

						DebugLocation(269, 11);
						IN163=(IToken)Match(input,IN,Follow._IN_in_expression_71464);  
						stream_IN.Add(IN163);

						DebugLocation(269, 14);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:269:14: ( WS )?
						int alt57=2;
						try { DebugEnterSubRule(57);
						try { DebugEnterDecision(57, decisionCanBacktrack[57]);
						int LA57_0 = input.LA(1);

						if ((LA57_0==WS))
						{
							alt57 = 1;
						}
						} finally { DebugExitDecision(57); }
						switch (alt57)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:269:14: WS
							{
							DebugLocation(269, 14);
							WS164=(IToken)Match(input,WS,Follow._WS_in_expression_71466);  
							stream_WS.Add(WS164);


							}
							break;

						}
						} finally { DebugExitSubRule(57); }

						DebugLocation(269, 18);
						char_literal165=(IToken)Match(input,143,Follow._143_in_expression_71469);  
						stream_143.Add(char_literal165);

						DebugLocation(269, 22);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:269:22: ( WS )?
						int alt58=2;
						try { DebugEnterSubRule(58);
						try { DebugEnterDecision(58, decisionCanBacktrack[58]);
						int LA58_0 = input.LA(1);

						if ((LA58_0==WS))
						{
							alt58 = 1;
						}
						} finally { DebugExitDecision(58); }
						switch (alt58)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:269:22: WS
							{
							DebugLocation(269, 22);
							WS166=(IToken)Match(input,WS,Follow._WS_in_expression_71471);  
							stream_WS.Add(WS166);


							}
							break;

						}
						} finally { DebugExitSubRule(58); }

						DebugLocation(269, 26);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:269:26: ( expression_list_or_select_command )
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:269:27: expression_list_or_select_command
						{
						DebugLocation(269, 27);
						PushFollow(Follow._expression_list_or_select_command_in_expression_71475);
						expression_list_or_select_command167=expression_list_or_select_command();
						PopFollow();

						stream_expression_list_or_select_command.Add(expression_list_or_select_command167.Tree);

						}

						DebugLocation(269, 62);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:269:62: ( WS )?
						int alt59=2;
						try { DebugEnterSubRule(59);
						try { DebugEnterDecision(59, decisionCanBacktrack[59]);
						int LA59_0 = input.LA(1);

						if ((LA59_0==WS))
						{
							alt59 = 1;
						}
						} finally { DebugExitDecision(59); }
						switch (alt59)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:269:62: WS
							{
							DebugLocation(269, 62);
							WS168=(IToken)Match(input,WS,Follow._WS_in_expression_71478);  
							stream_WS.Add(WS168);


							}
							break;

						}
						} finally { DebugExitSubRule(59); }

						DebugLocation(269, 66);
						char_literal169=(IToken)Match(input,144,Follow._144_in_expression_71481);  
						stream_144.Add(char_literal169);



						{
						// AST REWRITE
						// elements: expression_7, expression_list_or_select_command
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 269:70: -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command )
						{
							DebugLocation(269, 73);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:269:73: ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(269, 75);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(269, 87);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_NOTIN, "T_NOTIN"));
							DebugLocation(269, 96);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(269, 109);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 4:
						DebugEnterAlt(4);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:270:4: op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')'
						{
						DebugLocation(270, 4);
						PushFollow(Follow._op_4_in_expression_71499);
						op_4170=op_4();
						PopFollow();

						stream_op_4.Add(op_4170.Tree);
						DebugLocation(270, 9);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:270:9: ( WS )?
						int alt60=2;
						try { DebugEnterSubRule(60);
						try { DebugEnterDecision(60, decisionCanBacktrack[60]);
						int LA60_0 = input.LA(1);

						if ((LA60_0==WS))
						{
							alt60 = 1;
						}
						} finally { DebugExitDecision(60); }
						switch (alt60)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:270:9: WS
							{
							DebugLocation(270, 9);
							WS171=(IToken)Match(input,WS,Follow._WS_in_expression_71501);  
							stream_WS.Add(WS171);


							}
							break;

						}
						} finally { DebugExitSubRule(60); }

						DebugLocation(270, 13);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:270:13: ( SOME | ANY )
						int alt61=2;
						try { DebugEnterSubRule(61);
						try { DebugEnterDecision(61, decisionCanBacktrack[61]);
						int LA61_0 = input.LA(1);

						if ((LA61_0==SOME))
						{
							alt61 = 1;
						}
						else if ((LA61_0==ANY))
						{
							alt61 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 61, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						} finally { DebugExitDecision(61); }
						switch (alt61)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:270:14: SOME
							{
							DebugLocation(270, 14);
							SOME172=(IToken)Match(input,SOME,Follow._SOME_in_expression_71505);  
							stream_SOME.Add(SOME172);


							}
							break;
						case 2:
							DebugEnterAlt(2);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:270:21: ANY
							{
							DebugLocation(270, 21);
							ANY173=(IToken)Match(input,ANY,Follow._ANY_in_expression_71509);  
							stream_ANY.Add(ANY173);


							}
							break;

						}
						} finally { DebugExitSubRule(61); }

						DebugLocation(270, 26);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:270:26: ( WS )?
						int alt62=2;
						try { DebugEnterSubRule(62);
						try { DebugEnterDecision(62, decisionCanBacktrack[62]);
						int LA62_0 = input.LA(1);

						if ((LA62_0==WS))
						{
							alt62 = 1;
						}
						} finally { DebugExitDecision(62); }
						switch (alt62)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:270:26: WS
							{
							DebugLocation(270, 26);
							WS174=(IToken)Match(input,WS,Follow._WS_in_expression_71512);  
							stream_WS.Add(WS174);


							}
							break;

						}
						} finally { DebugExitSubRule(62); }

						DebugLocation(270, 30);
						char_literal175=(IToken)Match(input,143,Follow._143_in_expression_71515);  
						stream_143.Add(char_literal175);

						DebugLocation(270, 34);
						PushFollow(Follow._expression_list_or_select_command_in_expression_71517);
						expression_list_or_select_command176=expression_list_or_select_command();
						PopFollow();

						stream_expression_list_or_select_command.Add(expression_list_or_select_command176.Tree);
						DebugLocation(270, 68);
						char_literal177=(IToken)Match(input,144,Follow._144_in_expression_71519);  
						stream_144.Add(char_literal177);



						{
						// AST REWRITE
						// elements: op_4, expression_list_or_select_command, expression_7
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 270:72: -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command )
						{
							DebugLocation(270, 75);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:270:75: ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(270, 77);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(270, 89);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_ANY, "T_ANY"));
							DebugLocation(270, 95);
							adaptor.AddChild(root_1, stream_op_4.NextTree());
							DebugLocation(270, 101);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(270, 114);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 5:
						DebugEnterAlt(5);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:271:4: op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')'
						{
						DebugLocation(271, 4);
						PushFollow(Follow._op_4_in_expression_71539);
						op_4178=op_4();
						PopFollow();

						stream_op_4.Add(op_4178.Tree);
						DebugLocation(271, 9);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:271:9: ( WS )?
						int alt63=2;
						try { DebugEnterSubRule(63);
						try { DebugEnterDecision(63, decisionCanBacktrack[63]);
						int LA63_0 = input.LA(1);

						if ((LA63_0==WS))
						{
							alt63 = 1;
						}
						} finally { DebugExitDecision(63); }
						switch (alt63)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:271:9: WS
							{
							DebugLocation(271, 9);
							WS179=(IToken)Match(input,WS,Follow._WS_in_expression_71541);  
							stream_WS.Add(WS179);


							}
							break;

						}
						} finally { DebugExitSubRule(63); }

						DebugLocation(271, 13);
						ALL180=(IToken)Match(input,ALL,Follow._ALL_in_expression_71544);  
						stream_ALL.Add(ALL180);

						DebugLocation(271, 17);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:271:17: ( WS )?
						int alt64=2;
						try { DebugEnterSubRule(64);
						try { DebugEnterDecision(64, decisionCanBacktrack[64]);
						int LA64_0 = input.LA(1);

						if ((LA64_0==WS))
						{
							alt64 = 1;
						}
						} finally { DebugExitDecision(64); }
						switch (alt64)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:271:17: WS
							{
							DebugLocation(271, 17);
							WS181=(IToken)Match(input,WS,Follow._WS_in_expression_71546);  
							stream_WS.Add(WS181);


							}
							break;

						}
						} finally { DebugExitSubRule(64); }

						DebugLocation(271, 21);
						char_literal182=(IToken)Match(input,143,Follow._143_in_expression_71549);  
						stream_143.Add(char_literal182);

						DebugLocation(271, 25);
						PushFollow(Follow._expression_list_or_select_command_in_expression_71551);
						expression_list_or_select_command183=expression_list_or_select_command();
						PopFollow();

						stream_expression_list_or_select_command.Add(expression_list_or_select_command183.Tree);
						DebugLocation(271, 59);
						char_literal184=(IToken)Match(input,144,Follow._144_in_expression_71553);  
						stream_144.Add(char_literal184);



						{
						// AST REWRITE
						// elements: op_4, expression_7, expression_list_or_select_command
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 271:63: -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command )
						{
							DebugLocation(271, 66);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:271:66: ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(271, 68);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(271, 80);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_ALL, "T_ALL"));
							DebugLocation(271, 86);
							adaptor.AddChild(root_1, stream_op_4.NextTree());
							DebugLocation(271, 92);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(271, 105);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					}
					} finally { DebugExitSubRule(65); }


					}
					break;

				default:
					goto loop66;
				}
			}

			loop66:
				;

			} finally { DebugExitSubRule(66); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_7", 33);
			LeaveRule("expression_7", 33);
			LeaveRule_expression_7();
	    }
	 	DebugLocation(273, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_7"); }
		return retval;

	}
	// $ANTLR end "expression_7"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_7() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_7() {}

	// $ANTLR start "op_7"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:275:1: op_7 : ( OR -> T_OR | LIKE -> T_LIKE | NOT WS LIKE -> T_NOTLIKE | MATCH -> T_MATCH | NOT WS MATCH -> T_NOTMATCH | BETWEEN -> T_BETWEEN | NOT WS BETWEEN -> T_NOTBETWEEN );
	[GrammarRule("op_7")]
	private AstParserRuleReturnScope<object, IToken> op_7()
	{
		EnterRule_op_7();
		EnterRule("op_7", 34);
		TraceIn("op_7", 34);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken OR185 = default(IToken);
	    IToken LIKE186 = default(IToken);
	    IToken NOT187 = default(IToken);
	    IToken WS188 = default(IToken);
	    IToken LIKE189 = default(IToken);
	    IToken MATCH190 = default(IToken);
	    IToken NOT191 = default(IToken);
	    IToken WS192 = default(IToken);
	    IToken MATCH193 = default(IToken);
	    IToken BETWEEN194 = default(IToken);
	    IToken NOT195 = default(IToken);
	    IToken WS196 = default(IToken);
	    IToken BETWEEN197 = default(IToken);

	    object OR185_tree = default(object);
	    object LIKE186_tree = default(object);
	    object NOT187_tree = default(object);
	    object WS188_tree = default(object);
	    object LIKE189_tree = default(object);
	    object MATCH190_tree = default(object);
	    object NOT191_tree = default(object);
	    object WS192_tree = default(object);
	    object MATCH193_tree = default(object);
	    object BETWEEN194_tree = default(object);
	    object NOT195_tree = default(object);
	    object WS196_tree = default(object);
	    object BETWEEN197_tree = default(object);
	    RewriteRuleITokenStream stream_MATCH=new RewriteRuleITokenStream(adaptor,"token MATCH");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");
	    RewriteRuleITokenStream stream_BETWEEN=new RewriteRuleITokenStream(adaptor,"token BETWEEN");
	    RewriteRuleITokenStream stream_LIKE=new RewriteRuleITokenStream(adaptor,"token LIKE");
	    RewriteRuleITokenStream stream_OR=new RewriteRuleITokenStream(adaptor,"token OR");

		try { DebugEnterRule(GrammarFileName, "op_7");
		DebugLocation(275, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:275:6: ( OR -> T_OR | LIKE -> T_LIKE | NOT WS LIKE -> T_NOTLIKE | MATCH -> T_MATCH | NOT WS MATCH -> T_NOTMATCH | BETWEEN -> T_BETWEEN | NOT WS BETWEEN -> T_NOTBETWEEN )
			int alt67=7;
			try { DebugEnterDecision(67, decisionCanBacktrack[67]);
			switch (input.LA(1))
			{
			case OR:
				{
				alt67 = 1;
				}
				break;
			case LIKE:
				{
				alt67 = 2;
				}
				break;
			case NOT:
				{
				int LA67_3 = input.LA(2);

				if ((LA67_3==WS))
				{
					switch (input.LA(3))
					{
					case LIKE:
						{
						alt67 = 3;
						}
						break;
					case MATCH:
						{
						alt67 = 5;
						}
						break;
					case BETWEEN:
						{
						alt67 = 7;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 67, 6, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 67, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case MATCH:
				{
				alt67 = 4;
				}
				break;
			case BETWEEN:
				{
				alt67 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 67, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(67); }
			switch (alt67)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:275:8: OR
				{
				DebugLocation(275, 8);
				OR185=(IToken)Match(input,OR,Follow._OR_in_op_71583);  
				stream_OR.Add(OR185);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 275:11: -> T_OR
				{
					DebugLocation(275, 14);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_OR, "T_OR"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:276:4: LIKE
				{
				DebugLocation(276, 4);
				LIKE186=(IToken)Match(input,LIKE,Follow._LIKE_in_op_71592);  
				stream_LIKE.Add(LIKE186);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 276:9: -> T_LIKE
				{
					DebugLocation(276, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_LIKE, "T_LIKE"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:277:4: NOT WS LIKE
				{
				DebugLocation(277, 4);
				NOT187=(IToken)Match(input,NOT,Follow._NOT_in_op_71601);  
				stream_NOT.Add(NOT187);

				DebugLocation(277, 8);
				WS188=(IToken)Match(input,WS,Follow._WS_in_op_71603);  
				stream_WS.Add(WS188);

				DebugLocation(277, 11);
				LIKE189=(IToken)Match(input,LIKE,Follow._LIKE_in_op_71605);  
				stream_LIKE.Add(LIKE189);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 277:16: -> T_NOTLIKE
				{
					DebugLocation(277, 19);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTLIKE, "T_NOTLIKE"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:278:4: MATCH
				{
				DebugLocation(278, 4);
				MATCH190=(IToken)Match(input,MATCH,Follow._MATCH_in_op_71614);  
				stream_MATCH.Add(MATCH190);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 278:10: -> T_MATCH
				{
					DebugLocation(278, 13);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MATCH, "T_MATCH"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:279:4: NOT WS MATCH
				{
				DebugLocation(279, 4);
				NOT191=(IToken)Match(input,NOT,Follow._NOT_in_op_71623);  
				stream_NOT.Add(NOT191);

				DebugLocation(279, 8);
				WS192=(IToken)Match(input,WS,Follow._WS_in_op_71625);  
				stream_WS.Add(WS192);

				DebugLocation(279, 11);
				MATCH193=(IToken)Match(input,MATCH,Follow._MATCH_in_op_71627);  
				stream_MATCH.Add(MATCH193);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 279:17: -> T_NOTMATCH
				{
					DebugLocation(279, 20);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTMATCH, "T_NOTMATCH"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:280:4: BETWEEN
				{
				DebugLocation(280, 4);
				BETWEEN194=(IToken)Match(input,BETWEEN,Follow._BETWEEN_in_op_71636);  
				stream_BETWEEN.Add(BETWEEN194);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 280:12: -> T_BETWEEN
				{
					DebugLocation(280, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BETWEEN, "T_BETWEEN"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:281:4: NOT WS BETWEEN
				{
				DebugLocation(281, 4);
				NOT195=(IToken)Match(input,NOT,Follow._NOT_in_op_71645);  
				stream_NOT.Add(NOT195);

				DebugLocation(281, 8);
				WS196=(IToken)Match(input,WS,Follow._WS_in_op_71647);  
				stream_WS.Add(WS196);

				DebugLocation(281, 11);
				BETWEEN197=(IToken)Match(input,BETWEEN,Follow._BETWEEN_in_op_71649);  
				stream_BETWEEN.Add(BETWEEN197);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 281:19: -> T_NOTBETWEEN
				{
					DebugLocation(281, 22);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTBETWEEN, "T_NOTBETWEEN"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_7", 34);
			LeaveRule("op_7", 34);
			LeaveRule_op_7();
	    }
	 	DebugLocation(282, 1);
		} finally { DebugExitRule(GrammarFileName, "op_7"); }
		return retval;

	}
	// $ANTLR end "op_7"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_6() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_6() {}

	// $ANTLR start "expression_6"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:284:1: expression_6 : (a= expression_5 -> $a) ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )* ;
	[GrammarRule("expression_6")]
	private AstParserRuleReturnScope<object, IToken> expression_6()
	{
		EnterRule_expression_6();
		EnterRule("expression_6", 35);
		TraceIn("expression_6", 35);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS198 = default(IToken);
	    IToken WS200 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_6199 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS198_tree = default(object);
	    object WS200_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_op_6=new RewriteRuleSubtreeStream(adaptor,"rule op_6");
	    RewriteRuleSubtreeStream stream_expression_5=new RewriteRuleSubtreeStream(adaptor,"rule expression_5");
		try { DebugEnterRule(GrammarFileName, "expression_6");
		DebugLocation(284, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:285:2: ( (a= expression_5 -> $a) ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:285:4: (a= expression_5 -> $a) ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )*
			{
			DebugLocation(285, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:285:4: (a= expression_5 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:285:5: a= expression_5
			{
			DebugLocation(285, 6);
			PushFollow(Follow._expression_5_in_expression_61668);
			a=expression_5();
			PopFollow();

			stream_expression_5.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 285:19: -> $a
			{
				DebugLocation(285, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(285, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:285:25: ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )*
			try { DebugEnterSubRule(68);
			while (true)
			{
				int alt68=2;
				try { DebugEnterDecision(68, decisionCanBacktrack[68]);
				int LA68_0 = input.LA(1);

				if ((LA68_0==WS))
				{
					int LA68_1 = input.LA(2);

					if ((LA68_1==AND))
					{
						alt68 = 1;
					}


				}


				} finally { DebugExitDecision(68); }
				switch ( alt68 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:285:26: WS op_6 WS b= expression_5
					{
					DebugLocation(285, 26);
					WS198=(IToken)Match(input,WS,Follow._WS_in_expression_61675);  
					stream_WS.Add(WS198);

					DebugLocation(285, 29);
					PushFollow(Follow._op_6_in_expression_61677);
					op_6199=op_6();
					PopFollow();

					stream_op_6.Add(op_6199.Tree);
					DebugLocation(285, 34);
					WS200=(IToken)Match(input,WS,Follow._WS_in_expression_61679);  
					stream_WS.Add(WS200);

					DebugLocation(285, 38);
					PushFollow(Follow._expression_5_in_expression_61683);
					b=expression_5();
					PopFollow();

					stream_expression_5.Add(b.Tree);


					{
					// AST REWRITE
					// elements: op_6, expression_6, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 285:52: -> ^( T_OP_BINARY op_6 $expression_6 $b)
					{
						DebugLocation(285, 55);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:285:55: ^( T_OP_BINARY op_6 $expression_6 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(285, 57);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(285, 69);
						adaptor.AddChild(root_1, stream_op_6.NextTree());
						DebugLocation(285, 75);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(285, 89);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop68;
				}
			}

			loop68:
				;

			} finally { DebugExitSubRule(68); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_6", 35);
			LeaveRule("expression_6", 35);
			LeaveRule_expression_6();
	    }
	 	DebugLocation(286, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_6"); }
		return retval;

	}
	// $ANTLR end "expression_6"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_6() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_6() {}

	// $ANTLR start "op_6"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:288:1: op_6 : AND -> T_AND ;
	[GrammarRule("op_6")]
	private AstParserRuleReturnScope<object, IToken> op_6()
	{
		EnterRule_op_6();
		EnterRule("op_6", 36);
		TraceIn("op_6", 36);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken AND201 = default(IToken);

	    object AND201_tree = default(object);
	    RewriteRuleITokenStream stream_AND=new RewriteRuleITokenStream(adaptor,"token AND");

		try { DebugEnterRule(GrammarFileName, "op_6");
		DebugLocation(288, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:288:6: ( AND -> T_AND )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:288:8: AND
			{
			DebugLocation(288, 8);
			AND201=(IToken)Match(input,AND,Follow._AND_in_op_61711);  
			stream_AND.Add(AND201);



			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 288:12: -> T_AND
			{
				DebugLocation(288, 15);
				adaptor.AddChild(root_0, (object)adaptor.Create(T_AND, "T_AND"));

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_6", 36);
			LeaveRule("op_6", 36);
			LeaveRule_op_6();
	    }
	 	DebugLocation(289, 1);
		} finally { DebugExitRule(GrammarFileName, "op_6"); }
		return retval;

	}
	// $ANTLR end "op_6"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_5() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_5() {}

	// $ANTLR start "expression_5"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:291:1: expression_5 : ( op_5 WS expression_5 -> ^( T_OP_UNARY op_5 expression_5 ) | expression_4 );
	[GrammarRule("expression_5")]
	private AstParserRuleReturnScope<object, IToken> expression_5()
	{
		EnterRule_expression_5();
		EnterRule("expression_5", 37);
		TraceIn("expression_5", 37);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS203 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> op_5202 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_5204 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_4205 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS203_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression_5=new RewriteRuleSubtreeStream(adaptor,"rule expression_5");
	    RewriteRuleSubtreeStream stream_op_5=new RewriteRuleSubtreeStream(adaptor,"rule op_5");
		try { DebugEnterRule(GrammarFileName, "expression_5");
		DebugLocation(291, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:292:2: ( op_5 WS expression_5 -> ^( T_OP_UNARY op_5 expression_5 ) | expression_4 )
			int alt69=2;
			try { DebugEnterDecision(69, decisionCanBacktrack[69]);
			int LA69_0 = input.LA(1);

			if ((LA69_0==NOT))
			{
				alt69 = 1;
			}
			else if (((LA69_0>=CASE && LA69_0<=CAST)||LA69_0==CONVERT||LA69_0==EXISTS||LA69_0==NUMBER||LA69_0==SIMPLE_FILE||(LA69_0>=STRING && LA69_0<=SYSTEMVAR)||LA69_0==TOKEN||LA69_0==VARIABLE||LA69_0==143))
			{
				alt69 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 69, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(69); }
			switch (alt69)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:292:4: op_5 WS expression_5
				{
				DebugLocation(292, 4);
				PushFollow(Follow._op_5_in_expression_51729);
				op_5202=op_5();
				PopFollow();

				stream_op_5.Add(op_5202.Tree);
				DebugLocation(292, 9);
				WS203=(IToken)Match(input,WS,Follow._WS_in_expression_51731);  
				stream_WS.Add(WS203);

				DebugLocation(292, 12);
				PushFollow(Follow._expression_5_in_expression_51733);
				expression_5204=expression_5();
				PopFollow();

				stream_expression_5.Add(expression_5204.Tree);


				{
				// AST REWRITE
				// elements: op_5, expression_5
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 292:25: -> ^( T_OP_UNARY op_5 expression_5 )
				{
					DebugLocation(292, 28);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:292:28: ^( T_OP_UNARY op_5 expression_5 )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(292, 30);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_UNARY, "T_OP_UNARY"), root_1);

					DebugLocation(292, 41);
					adaptor.AddChild(root_1, stream_op_5.NextTree());
					DebugLocation(292, 46);
					adaptor.AddChild(root_1, stream_expression_5.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:293:4: expression_4
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(293, 4);
				PushFollow(Follow._expression_4_in_expression_51748);
				expression_4205=expression_4();
				PopFollow();

				adaptor.AddChild(root_0, expression_4205.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_5", 37);
			LeaveRule("expression_5", 37);
			LeaveRule_expression_5();
	    }
	 	DebugLocation(294, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_5"); }
		return retval;

	}
	// $ANTLR end "expression_5"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_5() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_5() {}

	// $ANTLR start "op_5"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:296:1: op_5 : NOT -> T_NOT ;
	[GrammarRule("op_5")]
	private AstParserRuleReturnScope<object, IToken> op_5()
	{
		EnterRule_op_5();
		EnterRule("op_5", 38);
		TraceIn("op_5", 38);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken NOT206 = default(IToken);

	    object NOT206_tree = default(object);
	    RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");

		try { DebugEnterRule(GrammarFileName, "op_5");
		DebugLocation(296, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:296:7: ( NOT -> T_NOT )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:296:9: NOT
			{
			DebugLocation(296, 9);
			NOT206=(IToken)Match(input,NOT,Follow._NOT_in_op_51759);  
			stream_NOT.Add(NOT206);



			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 296:13: -> T_NOT
			{
				DebugLocation(296, 16);
				adaptor.AddChild(root_0, (object)adaptor.Create(T_NOT, "T_NOT"));

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_5", 38);
			LeaveRule("op_5", 38);
			LeaveRule_op_5();
	    }
	 	DebugLocation(297, 1);
		} finally { DebugExitRule(GrammarFileName, "op_5"); }
		return retval;

	}
	// $ANTLR end "op_5"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_4() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_4() {}

	// $ANTLR start "expression_4"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:299:1: expression_4 : (a= expression_3 -> $a) ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )* ;
	[GrammarRule("expression_4")]
	private AstParserRuleReturnScope<object, IToken> expression_4()
	{
		EnterRule_expression_4();
		EnterRule("expression_4", 39);
		TraceIn("expression_4", 39);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS207 = default(IToken);
	    IToken WS209 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_4208 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS207_tree = default(object);
	    object WS209_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression_3=new RewriteRuleSubtreeStream(adaptor,"rule expression_3");
	    RewriteRuleSubtreeStream stream_op_4=new RewriteRuleSubtreeStream(adaptor,"rule op_4");
		try { DebugEnterRule(GrammarFileName, "expression_4");
		DebugLocation(299, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:300:2: ( (a= expression_3 -> $a) ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:300:4: (a= expression_3 -> $a) ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )*
			{
			DebugLocation(300, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:300:4: (a= expression_3 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:300:5: a= expression_3
			{
			DebugLocation(300, 6);
			PushFollow(Follow._expression_3_in_expression_41778);
			a=expression_3();
			PopFollow();

			stream_expression_3.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 300:19: -> $a
			{
				DebugLocation(300, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(300, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:300:25: ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )*
			try { DebugEnterSubRule(72);
			while (true)
			{
				int alt72=2;
				try { DebugEnterDecision(72, decisionCanBacktrack[72]);
				int LA72_0 = input.LA(1);

				if ((LA72_0==WS))
				{
					switch (input.LA(2))
					{
					case 154:
						{
						int LA72_4 = input.LA(3);

						if ((LA72_4==WS))
						{
							int LA72_13 = input.LA(4);

							if (((LA72_13>=CASE && LA72_13<=CAST)||LA72_13==CONVERT||LA72_13==EXISTS||LA72_13==NUMBER||LA72_13==SIMPLE_FILE||(LA72_13>=STRING && LA72_13<=SYSTEMVAR)||LA72_13==TOKEN||LA72_13==VARIABLE||LA72_13==143))
							{
								alt72 = 1;
							}


						}
						else if (((LA72_4>=CASE && LA72_4<=CAST)||LA72_4==CONVERT||LA72_4==EXISTS||LA72_4==NUMBER||LA72_4==SIMPLE_FILE||(LA72_4>=STRING && LA72_4<=SYSTEMVAR)||LA72_4==TOKEN||LA72_4==VARIABLE||LA72_4==143))
						{
							alt72 = 1;
						}


						}
						break;
					case 156:
						{
						int LA72_5 = input.LA(3);

						if ((LA72_5==WS))
						{
							int LA72_13 = input.LA(4);

							if (((LA72_13>=CASE && LA72_13<=CAST)||LA72_13==CONVERT||LA72_13==EXISTS||LA72_13==NUMBER||LA72_13==SIMPLE_FILE||(LA72_13>=STRING && LA72_13<=SYSTEMVAR)||LA72_13==TOKEN||LA72_13==VARIABLE||LA72_13==143))
							{
								alt72 = 1;
							}


						}
						else if (((LA72_5>=CASE && LA72_5<=CAST)||LA72_5==CONVERT||LA72_5==EXISTS||LA72_5==NUMBER||LA72_5==SIMPLE_FILE||(LA72_5>=STRING && LA72_5<=SYSTEMVAR)||LA72_5==TOKEN||LA72_5==VARIABLE||LA72_5==143))
						{
							alt72 = 1;
						}


						}
						break;
					case 152:
						{
						int LA72_6 = input.LA(3);

						if ((LA72_6==WS))
						{
							int LA72_13 = input.LA(4);

							if (((LA72_13>=CASE && LA72_13<=CAST)||LA72_13==CONVERT||LA72_13==EXISTS||LA72_13==NUMBER||LA72_13==SIMPLE_FILE||(LA72_13>=STRING && LA72_13<=SYSTEMVAR)||LA72_13==TOKEN||LA72_13==VARIABLE||LA72_13==143))
							{
								alt72 = 1;
							}


						}
						else if (((LA72_6>=CASE && LA72_6<=CAST)||LA72_6==CONVERT||LA72_6==EXISTS||LA72_6==NUMBER||LA72_6==SIMPLE_FILE||(LA72_6>=STRING && LA72_6<=SYSTEMVAR)||LA72_6==TOKEN||LA72_6==VARIABLE||LA72_6==143))
						{
							alt72 = 1;
						}


						}
						break;
					case 153:
						{
						int LA72_7 = input.LA(3);

						if ((LA72_7==WS))
						{
							int LA72_13 = input.LA(4);

							if (((LA72_13>=CASE && LA72_13<=CAST)||LA72_13==CONVERT||LA72_13==EXISTS||LA72_13==NUMBER||LA72_13==SIMPLE_FILE||(LA72_13>=STRING && LA72_13<=SYSTEMVAR)||LA72_13==TOKEN||LA72_13==VARIABLE||LA72_13==143))
							{
								alt72 = 1;
							}


						}
						else if (((LA72_7>=CASE && LA72_7<=CAST)||LA72_7==CONVERT||LA72_7==EXISTS||LA72_7==NUMBER||LA72_7==SIMPLE_FILE||(LA72_7>=STRING && LA72_7<=SYSTEMVAR)||LA72_7==TOKEN||LA72_7==VARIABLE||LA72_7==143))
						{
							alt72 = 1;
						}


						}
						break;
					case 139:
						{
						int LA72_8 = input.LA(3);

						if ((LA72_8==WS))
						{
							int LA72_13 = input.LA(4);

							if (((LA72_13>=CASE && LA72_13<=CAST)||LA72_13==CONVERT||LA72_13==EXISTS||LA72_13==NUMBER||LA72_13==SIMPLE_FILE||(LA72_13>=STRING && LA72_13<=SYSTEMVAR)||LA72_13==TOKEN||LA72_13==VARIABLE||LA72_13==143))
							{
								alt72 = 1;
							}


						}
						else if (((LA72_8>=CASE && LA72_8<=CAST)||LA72_8==CONVERT||LA72_8==EXISTS||LA72_8==NUMBER||LA72_8==SIMPLE_FILE||(LA72_8>=STRING && LA72_8<=SYSTEMVAR)||LA72_8==TOKEN||LA72_8==VARIABLE||LA72_8==143))
						{
							alt72 = 1;
						}


						}
						break;
					case 140:
						{
						int LA72_9 = input.LA(3);

						if ((LA72_9==WS))
						{
							int LA72_13 = input.LA(4);

							if (((LA72_13>=CASE && LA72_13<=CAST)||LA72_13==CONVERT||LA72_13==EXISTS||LA72_13==NUMBER||LA72_13==SIMPLE_FILE||(LA72_13>=STRING && LA72_13<=SYSTEMVAR)||LA72_13==TOKEN||LA72_13==VARIABLE||LA72_13==143))
							{
								alt72 = 1;
							}


						}
						else if (((LA72_9>=CASE && LA72_9<=CAST)||LA72_9==CONVERT||LA72_9==EXISTS||LA72_9==NUMBER||LA72_9==SIMPLE_FILE||(LA72_9>=STRING && LA72_9<=SYSTEMVAR)||LA72_9==TOKEN||LA72_9==VARIABLE||LA72_9==143))
						{
							alt72 = 1;
						}


						}
						break;
					case 138:
						{
						int LA72_10 = input.LA(3);

						if ((LA72_10==WS))
						{
							int LA72_13 = input.LA(4);

							if (((LA72_13>=CASE && LA72_13<=CAST)||LA72_13==CONVERT||LA72_13==EXISTS||LA72_13==NUMBER||LA72_13==SIMPLE_FILE||(LA72_13>=STRING && LA72_13<=SYSTEMVAR)||LA72_13==TOKEN||LA72_13==VARIABLE||LA72_13==143))
							{
								alt72 = 1;
							}


						}
						else if (((LA72_10>=CASE && LA72_10<=CAST)||LA72_10==CONVERT||LA72_10==EXISTS||LA72_10==NUMBER||LA72_10==SIMPLE_FILE||(LA72_10>=STRING && LA72_10<=SYSTEMVAR)||LA72_10==TOKEN||LA72_10==VARIABLE||LA72_10==143))
						{
							alt72 = 1;
						}


						}
						break;
					case 155:
						{
						int LA72_11 = input.LA(3);

						if ((LA72_11==WS))
						{
							int LA72_13 = input.LA(4);

							if (((LA72_13>=CASE && LA72_13<=CAST)||LA72_13==CONVERT||LA72_13==EXISTS||LA72_13==NUMBER||LA72_13==SIMPLE_FILE||(LA72_13>=STRING && LA72_13<=SYSTEMVAR)||LA72_13==TOKEN||LA72_13==VARIABLE||LA72_13==143))
							{
								alt72 = 1;
							}


						}
						else if (((LA72_11>=CASE && LA72_11<=CAST)||LA72_11==CONVERT||LA72_11==EXISTS||LA72_11==NUMBER||LA72_11==SIMPLE_FILE||(LA72_11>=STRING && LA72_11<=SYSTEMVAR)||LA72_11==TOKEN||LA72_11==VARIABLE||LA72_11==143))
						{
							alt72 = 1;
						}


						}
						break;
					case 151:
						{
						int LA72_12 = input.LA(3);

						if ((LA72_12==WS))
						{
							int LA72_13 = input.LA(4);

							if (((LA72_13>=CASE && LA72_13<=CAST)||LA72_13==CONVERT||LA72_13==EXISTS||LA72_13==NUMBER||LA72_13==SIMPLE_FILE||(LA72_13>=STRING && LA72_13<=SYSTEMVAR)||LA72_13==TOKEN||LA72_13==VARIABLE||LA72_13==143))
							{
								alt72 = 1;
							}


						}
						else if (((LA72_12>=CASE && LA72_12<=CAST)||LA72_12==CONVERT||LA72_12==EXISTS||LA72_12==NUMBER||LA72_12==SIMPLE_FILE||(LA72_12>=STRING && LA72_12<=SYSTEMVAR)||LA72_12==TOKEN||LA72_12==VARIABLE||LA72_12==143))
						{
							alt72 = 1;
						}


						}
						break;
					}

				}
				else if (((LA72_0>=138 && LA72_0<=140)||(LA72_0>=151 && LA72_0<=156)))
				{
					alt72 = 1;
				}


				} finally { DebugExitDecision(72); }
				switch ( alt72 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:300:26: ( WS )? op_4 ( WS )? b= expression_3
					{
					DebugLocation(300, 26);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:300:26: ( WS )?
					int alt70=2;
					try { DebugEnterSubRule(70);
					try { DebugEnterDecision(70, decisionCanBacktrack[70]);
					int LA70_0 = input.LA(1);

					if ((LA70_0==WS))
					{
						alt70 = 1;
					}
					} finally { DebugExitDecision(70); }
					switch (alt70)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:300:26: WS
						{
						DebugLocation(300, 26);
						WS207=(IToken)Match(input,WS,Follow._WS_in_expression_41785);  
						stream_WS.Add(WS207);


						}
						break;

					}
					} finally { DebugExitSubRule(70); }

					DebugLocation(300, 30);
					PushFollow(Follow._op_4_in_expression_41788);
					op_4208=op_4();
					PopFollow();

					stream_op_4.Add(op_4208.Tree);
					DebugLocation(300, 35);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:300:35: ( WS )?
					int alt71=2;
					try { DebugEnterSubRule(71);
					try { DebugEnterDecision(71, decisionCanBacktrack[71]);
					int LA71_0 = input.LA(1);

					if ((LA71_0==WS))
					{
						alt71 = 1;
					}
					} finally { DebugExitDecision(71); }
					switch (alt71)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:300:35: WS
						{
						DebugLocation(300, 35);
						WS209=(IToken)Match(input,WS,Follow._WS_in_expression_41790);  
						stream_WS.Add(WS209);


						}
						break;

					}
					} finally { DebugExitSubRule(71); }

					DebugLocation(300, 40);
					PushFollow(Follow._expression_3_in_expression_41795);
					b=expression_3();
					PopFollow();

					stream_expression_3.Add(b.Tree);


					{
					// AST REWRITE
					// elements: expression_4, b, op_4
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 300:54: -> ^( T_OP_BINARY op_4 $expression_4 $b)
					{
						DebugLocation(300, 57);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:300:57: ^( T_OP_BINARY op_4 $expression_4 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(300, 59);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(300, 71);
						adaptor.AddChild(root_1, stream_op_4.NextTree());
						DebugLocation(300, 77);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(300, 91);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop72;
				}
			}

			loop72:
				;

			} finally { DebugExitSubRule(72); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_4", 39);
			LeaveRule("expression_4", 39);
			LeaveRule_expression_4();
	    }
	 	DebugLocation(301, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_4"); }
		return retval;

	}
	// $ANTLR end "expression_4"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_4() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_4() {}

	// $ANTLR start "op_4"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:303:1: op_4 : ( '=' -> T_EQUAL | '>=' -> T_NOTLESS | '<=' -> T_NOTGREATER | '<>' -> T_NOTEQUAL | '!=' -> T_NOTEQUAL | '!>' -> T_NOTGREATER | '!<' -> T_NOTLESS | '>' -> T_GREATER | '<' -> T_LESS );
	[GrammarRule("op_4")]
	private AstParserRuleReturnScope<object, IToken> op_4()
	{
		EnterRule_op_4();
		EnterRule("op_4", 40);
		TraceIn("op_4", 40);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal210 = default(IToken);
	    IToken string_literal211 = default(IToken);
	    IToken string_literal212 = default(IToken);
	    IToken string_literal213 = default(IToken);
	    IToken string_literal214 = default(IToken);
	    IToken string_literal215 = default(IToken);
	    IToken string_literal216 = default(IToken);
	    IToken char_literal217 = default(IToken);
	    IToken char_literal218 = default(IToken);

	    object char_literal210_tree = default(object);
	    object string_literal211_tree = default(object);
	    object string_literal212_tree = default(object);
	    object string_literal213_tree = default(object);
	    object string_literal214_tree = default(object);
	    object string_literal215_tree = default(object);
	    object string_literal216_tree = default(object);
	    object char_literal217_tree = default(object);
	    object char_literal218_tree = default(object);
	    RewriteRuleITokenStream stream_152=new RewriteRuleITokenStream(adaptor,"token 152");
	    RewriteRuleITokenStream stream_153=new RewriteRuleITokenStream(adaptor,"token 153");
	    RewriteRuleITokenStream stream_151=new RewriteRuleITokenStream(adaptor,"token 151");
	    RewriteRuleITokenStream stream_138=new RewriteRuleITokenStream(adaptor,"token 138");
	    RewriteRuleITokenStream stream_139=new RewriteRuleITokenStream(adaptor,"token 139");
	    RewriteRuleITokenStream stream_140=new RewriteRuleITokenStream(adaptor,"token 140");
	    RewriteRuleITokenStream stream_156=new RewriteRuleITokenStream(adaptor,"token 156");
	    RewriteRuleITokenStream stream_155=new RewriteRuleITokenStream(adaptor,"token 155");
	    RewriteRuleITokenStream stream_154=new RewriteRuleITokenStream(adaptor,"token 154");

		try { DebugEnterRule(GrammarFileName, "op_4");
		DebugLocation(303, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:303:6: ( '=' -> T_EQUAL | '>=' -> T_NOTLESS | '<=' -> T_NOTGREATER | '<>' -> T_NOTEQUAL | '!=' -> T_NOTEQUAL | '!>' -> T_NOTGREATER | '!<' -> T_NOTLESS | '>' -> T_GREATER | '<' -> T_LESS )
			int alt73=9;
			try { DebugEnterDecision(73, decisionCanBacktrack[73]);
			switch (input.LA(1))
			{
			case 154:
				{
				alt73 = 1;
				}
				break;
			case 156:
				{
				alt73 = 2;
				}
				break;
			case 152:
				{
				alt73 = 3;
				}
				break;
			case 153:
				{
				alt73 = 4;
				}
				break;
			case 139:
				{
				alt73 = 5;
				}
				break;
			case 140:
				{
				alt73 = 6;
				}
				break;
			case 138:
				{
				alt73 = 7;
				}
				break;
			case 155:
				{
				alt73 = 8;
				}
				break;
			case 151:
				{
				alt73 = 9;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 73, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(73); }
			switch (alt73)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:303:8: '='
				{
				DebugLocation(303, 8);
				char_literal210=(IToken)Match(input,154,Follow._154_in_op_41821);  
				stream_154.Add(char_literal210);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 303:12: -> T_EQUAL
				{
					DebugLocation(303, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_EQUAL, "T_EQUAL"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:304:4: '>='
				{
				DebugLocation(304, 4);
				string_literal211=(IToken)Match(input,156,Follow._156_in_op_41830);  
				stream_156.Add(string_literal211);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 304:9: -> T_NOTLESS
				{
					DebugLocation(304, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTLESS, "T_NOTLESS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:305:4: '<='
				{
				DebugLocation(305, 4);
				string_literal212=(IToken)Match(input,152,Follow._152_in_op_41840);  
				stream_152.Add(string_literal212);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 305:9: -> T_NOTGREATER
				{
					DebugLocation(305, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTGREATER, "T_NOTGREATER"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:306:4: '<>'
				{
				DebugLocation(306, 4);
				string_literal213=(IToken)Match(input,153,Follow._153_in_op_41850);  
				stream_153.Add(string_literal213);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 306:9: -> T_NOTEQUAL
				{
					DebugLocation(306, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTEQUAL, "T_NOTEQUAL"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:307:4: '!='
				{
				DebugLocation(307, 4);
				string_literal214=(IToken)Match(input,139,Follow._139_in_op_41859);  
				stream_139.Add(string_literal214);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 307:9: -> T_NOTEQUAL
				{
					DebugLocation(307, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTEQUAL, "T_NOTEQUAL"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:308:4: '!>'
				{
				DebugLocation(308, 4);
				string_literal215=(IToken)Match(input,140,Follow._140_in_op_41868);  
				stream_140.Add(string_literal215);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 308:9: -> T_NOTGREATER
				{
					DebugLocation(308, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTGREATER, "T_NOTGREATER"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:309:4: '!<'
				{
				DebugLocation(309, 4);
				string_literal216=(IToken)Match(input,138,Follow._138_in_op_41877);  
				stream_138.Add(string_literal216);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 309:9: -> T_NOTLESS
				{
					DebugLocation(309, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTLESS, "T_NOTLESS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:310:4: '>'
				{
				DebugLocation(310, 4);
				char_literal217=(IToken)Match(input,155,Follow._155_in_op_41886);  
				stream_155.Add(char_literal217);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 310:8: -> T_GREATER
				{
					DebugLocation(310, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_GREATER, "T_GREATER"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:311:4: '<'
				{
				DebugLocation(311, 4);
				char_literal218=(IToken)Match(input,151,Follow._151_in_op_41896);  
				stream_151.Add(char_literal218);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 311:8: -> T_LESS
				{
					DebugLocation(311, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_LESS, "T_LESS"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_4", 40);
			LeaveRule("op_4", 40);
			LeaveRule_op_4();
	    }
	 	DebugLocation(312, 1);
		} finally { DebugExitRule(GrammarFileName, "op_4"); }
		return retval;

	}
	// $ANTLR end "op_4"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_3() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_3() {}

	// $ANTLR start "expression_3"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:314:1: expression_3 : (a= expression_2 -> $a) ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )* ;
	[GrammarRule("expression_3")]
	private AstParserRuleReturnScope<object, IToken> expression_3()
	{
		EnterRule_expression_3();
		EnterRule("expression_3", 41);
		TraceIn("expression_3", 41);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS219 = default(IToken);
	    IToken WS221 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_3220 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS219_tree = default(object);
	    object WS221_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_op_3=new RewriteRuleSubtreeStream(adaptor,"rule op_3");
	    RewriteRuleSubtreeStream stream_expression_2=new RewriteRuleSubtreeStream(adaptor,"rule expression_2");
		try { DebugEnterRule(GrammarFileName, "expression_3");
		DebugLocation(314, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:315:2: ( (a= expression_2 -> $a) ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:315:4: (a= expression_2 -> $a) ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )*
			{
			DebugLocation(315, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:315:4: (a= expression_2 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:315:5: a= expression_2
			{
			DebugLocation(315, 6);
			PushFollow(Follow._expression_2_in_expression_31915);
			a=expression_2();
			PopFollow();

			stream_expression_2.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 315:19: -> $a
			{
				DebugLocation(315, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(315, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:315:25: ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )*
			try { DebugEnterSubRule(76);
			while (true)
			{
				int alt76=2;
				try { DebugEnterDecision(76, decisionCanBacktrack[76]);
				int LA76_0 = input.LA(1);

				if ((LA76_0==WS))
				{
					int LA76_1 = input.LA(2);

					if ((LA76_1==142||LA76_1==146||LA76_1==148||(LA76_1>=159 && LA76_1<=160)))
					{
						alt76 = 1;
					}


				}
				else if ((LA76_0==142||LA76_0==146||LA76_0==148||(LA76_0>=159 && LA76_0<=160)))
				{
					alt76 = 1;
				}


				} finally { DebugExitDecision(76); }
				switch ( alt76 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:315:26: ( WS )? op_3 ( WS )? b= expression_2
					{
					DebugLocation(315, 26);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:315:26: ( WS )?
					int alt74=2;
					try { DebugEnterSubRule(74);
					try { DebugEnterDecision(74, decisionCanBacktrack[74]);
					int LA74_0 = input.LA(1);

					if ((LA74_0==WS))
					{
						alt74 = 1;
					}
					} finally { DebugExitDecision(74); }
					switch (alt74)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:315:26: WS
						{
						DebugLocation(315, 26);
						WS219=(IToken)Match(input,WS,Follow._WS_in_expression_31922);  
						stream_WS.Add(WS219);


						}
						break;

					}
					} finally { DebugExitSubRule(74); }

					DebugLocation(315, 30);
					PushFollow(Follow._op_3_in_expression_31925);
					op_3220=op_3();
					PopFollow();

					stream_op_3.Add(op_3220.Tree);
					DebugLocation(315, 35);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:315:35: ( WS )?
					int alt75=2;
					try { DebugEnterSubRule(75);
					try { DebugEnterDecision(75, decisionCanBacktrack[75]);
					int LA75_0 = input.LA(1);

					if ((LA75_0==WS))
					{
						alt75 = 1;
					}
					} finally { DebugExitDecision(75); }
					switch (alt75)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:315:35: WS
						{
						DebugLocation(315, 35);
						WS221=(IToken)Match(input,WS,Follow._WS_in_expression_31927);  
						stream_WS.Add(WS221);


						}
						break;

					}
					} finally { DebugExitSubRule(75); }

					DebugLocation(315, 40);
					PushFollow(Follow._expression_2_in_expression_31932);
					b=expression_2();
					PopFollow();

					stream_expression_2.Add(b.Tree);


					{
					// AST REWRITE
					// elements: expression_3, op_3, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 315:54: -> ^( T_OP_BINARY op_3 $expression_3 $b)
					{
						DebugLocation(315, 57);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:315:57: ^( T_OP_BINARY op_3 $expression_3 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(315, 59);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(315, 71);
						adaptor.AddChild(root_1, stream_op_3.NextTree());
						DebugLocation(315, 77);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(315, 91);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop76;
				}
			}

			loop76:
				;

			} finally { DebugExitSubRule(76); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_3", 41);
			LeaveRule("expression_3", 41);
			LeaveRule_expression_3();
	    }
	 	DebugLocation(316, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_3"); }
		return retval;

	}
	// $ANTLR end "expression_3"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_3() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_3() {}

	// $ANTLR start "op_3"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:318:1: op_3 : ( '+' -> T_PLUS | '-' -> T_MINUS | '&' -> T_BITWISE_AND | '|' -> T_BITWISE_OR | '^' -> T_BITWISE_XOR );
	[GrammarRule("op_3")]
	private AstParserRuleReturnScope<object, IToken> op_3()
	{
		EnterRule_op_3();
		EnterRule("op_3", 42);
		TraceIn("op_3", 42);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal222 = default(IToken);
	    IToken char_literal223 = default(IToken);
	    IToken char_literal224 = default(IToken);
	    IToken char_literal225 = default(IToken);
	    IToken char_literal226 = default(IToken);

	    object char_literal222_tree = default(object);
	    object char_literal223_tree = default(object);
	    object char_literal224_tree = default(object);
	    object char_literal225_tree = default(object);
	    object char_literal226_tree = default(object);
	    RewriteRuleITokenStream stream_146=new RewriteRuleITokenStream(adaptor,"token 146");
	    RewriteRuleITokenStream stream_148=new RewriteRuleITokenStream(adaptor,"token 148");
	    RewriteRuleITokenStream stream_160=new RewriteRuleITokenStream(adaptor,"token 160");
	    RewriteRuleITokenStream stream_159=new RewriteRuleITokenStream(adaptor,"token 159");
	    RewriteRuleITokenStream stream_142=new RewriteRuleITokenStream(adaptor,"token 142");

		try { DebugEnterRule(GrammarFileName, "op_3");
		DebugLocation(318, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:318:6: ( '+' -> T_PLUS | '-' -> T_MINUS | '&' -> T_BITWISE_AND | '|' -> T_BITWISE_OR | '^' -> T_BITWISE_XOR )
			int alt77=5;
			try { DebugEnterDecision(77, decisionCanBacktrack[77]);
			switch (input.LA(1))
			{
			case 146:
				{
				alt77 = 1;
				}
				break;
			case 148:
				{
				alt77 = 2;
				}
				break;
			case 142:
				{
				alt77 = 3;
				}
				break;
			case 160:
				{
				alt77 = 4;
				}
				break;
			case 159:
				{
				alt77 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 77, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(77); }
			switch (alt77)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:318:8: '+'
				{
				DebugLocation(318, 8);
				char_literal222=(IToken)Match(input,146,Follow._146_in_op_31958);  
				stream_146.Add(char_literal222);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 318:12: -> T_PLUS
				{
					DebugLocation(318, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_PLUS, "T_PLUS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:319:4: '-'
				{
				DebugLocation(319, 4);
				char_literal223=(IToken)Match(input,148,Follow._148_in_op_31967);  
				stream_148.Add(char_literal223);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 319:8: -> T_MINUS
				{
					DebugLocation(319, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MINUS, "T_MINUS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:320:4: '&'
				{
				DebugLocation(320, 4);
				char_literal224=(IToken)Match(input,142,Follow._142_in_op_31976);  
				stream_142.Add(char_literal224);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 320:8: -> T_BITWISE_AND
				{
					DebugLocation(320, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_AND, "T_BITWISE_AND"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:321:4: '|'
				{
				DebugLocation(321, 4);
				char_literal225=(IToken)Match(input,160,Follow._160_in_op_31985);  
				stream_160.Add(char_literal225);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 321:8: -> T_BITWISE_OR
				{
					DebugLocation(321, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_OR, "T_BITWISE_OR"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:322:4: '^'
				{
				DebugLocation(322, 4);
				char_literal226=(IToken)Match(input,159,Follow._159_in_op_31994);  
				stream_159.Add(char_literal226);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 322:8: -> T_BITWISE_XOR
				{
					DebugLocation(322, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_XOR, "T_BITWISE_XOR"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_3", 42);
			LeaveRule("op_3", 42);
			LeaveRule_op_3();
	    }
	 	DebugLocation(323, 1);
		} finally { DebugExitRule(GrammarFileName, "op_3"); }
		return retval;

	}
	// $ANTLR end "op_3"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_2() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_2() {}

	// $ANTLR start "expression_2"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:331:1: expression_2 : (a= expression_1 -> $a) ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )* ;
	[GrammarRule("expression_2")]
	private AstParserRuleReturnScope<object, IToken> expression_2()
	{
		EnterRule_expression_2();
		EnterRule("expression_2", 43);
		TraceIn("expression_2", 43);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS227 = default(IToken);
	    IToken WS229 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_2228 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS227_tree = default(object);
	    object WS229_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_op_2=new RewriteRuleSubtreeStream(adaptor,"rule op_2");
	    RewriteRuleSubtreeStream stream_expression_1=new RewriteRuleSubtreeStream(adaptor,"rule expression_1");
		try { DebugEnterRule(GrammarFileName, "expression_2");
		DebugLocation(331, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:332:2: ( (a= expression_1 -> $a) ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:332:4: (a= expression_1 -> $a) ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )*
			{
			DebugLocation(332, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:332:4: (a= expression_1 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:332:5: a= expression_1
			{
			DebugLocation(332, 6);
			PushFollow(Follow._expression_1_in_expression_22016);
			a=expression_1();
			PopFollow();

			stream_expression_1.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 332:19: -> $a
			{
				DebugLocation(332, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(332, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:332:25: ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )*
			try { DebugEnterSubRule(80);
			while (true)
			{
				int alt80=2;
				try { DebugEnterDecision(80, decisionCanBacktrack[80]);
				int LA80_0 = input.LA(1);

				if ((LA80_0==WS))
				{
					int LA80_1 = input.LA(2);

					if ((LA80_1==145))
					{
						int LA80_4 = input.LA(3);

						if ((LA80_4==WS))
						{
							int LA80_5 = input.LA(4);

							if (((LA80_5>=CASE && LA80_5<=CAST)||LA80_5==CONVERT||LA80_5==EXISTS||LA80_5==NUMBER||LA80_5==SIMPLE_FILE||(LA80_5>=STRING && LA80_5<=SYSTEMVAR)||LA80_5==TOKEN||LA80_5==VARIABLE||LA80_5==143))
							{
								alt80 = 1;
							}


						}
						else if (((LA80_4>=CASE && LA80_4<=CAST)||LA80_4==CONVERT||LA80_4==EXISTS||LA80_4==NUMBER||LA80_4==SIMPLE_FILE||(LA80_4>=STRING && LA80_4<=SYSTEMVAR)||LA80_4==TOKEN||LA80_4==VARIABLE||LA80_4==143))
						{
							alt80 = 1;
						}


					}
					else if ((LA80_1==141||LA80_1==149))
					{
						alt80 = 1;
					}


				}
				else if ((LA80_0==141||LA80_0==145||LA80_0==149))
				{
					alt80 = 1;
				}


				} finally { DebugExitDecision(80); }
				switch ( alt80 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:332:26: ( WS )? op_2 ( WS )? b= expression_1
					{
					DebugLocation(332, 26);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:332:26: ( WS )?
					int alt78=2;
					try { DebugEnterSubRule(78);
					try { DebugEnterDecision(78, decisionCanBacktrack[78]);
					int LA78_0 = input.LA(1);

					if ((LA78_0==WS))
					{
						alt78 = 1;
					}
					} finally { DebugExitDecision(78); }
					switch (alt78)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:332:26: WS
						{
						DebugLocation(332, 26);
						WS227=(IToken)Match(input,WS,Follow._WS_in_expression_22023);  
						stream_WS.Add(WS227);


						}
						break;

					}
					} finally { DebugExitSubRule(78); }

					DebugLocation(332, 30);
					PushFollow(Follow._op_2_in_expression_22026);
					op_2228=op_2();
					PopFollow();

					stream_op_2.Add(op_2228.Tree);
					DebugLocation(332, 35);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:332:35: ( WS )?
					int alt79=2;
					try { DebugEnterSubRule(79);
					try { DebugEnterDecision(79, decisionCanBacktrack[79]);
					int LA79_0 = input.LA(1);

					if ((LA79_0==WS))
					{
						alt79 = 1;
					}
					} finally { DebugExitDecision(79); }
					switch (alt79)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:332:35: WS
						{
						DebugLocation(332, 35);
						WS229=(IToken)Match(input,WS,Follow._WS_in_expression_22028);  
						stream_WS.Add(WS229);


						}
						break;

					}
					} finally { DebugExitSubRule(79); }

					DebugLocation(332, 40);
					PushFollow(Follow._expression_1_in_expression_22033);
					b=expression_1();
					PopFollow();

					stream_expression_1.Add(b.Tree);


					{
					// AST REWRITE
					// elements: op_2, b, expression_2
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 332:54: -> ^( T_OP_BINARY op_2 $expression_2 $b)
					{
						DebugLocation(332, 57);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:332:57: ^( T_OP_BINARY op_2 $expression_2 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(332, 59);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(332, 71);
						adaptor.AddChild(root_1, stream_op_2.NextTree());
						DebugLocation(332, 77);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(332, 91);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop80;
				}
			}

			loop80:
				;

			} finally { DebugExitSubRule(80); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_2", 43);
			LeaveRule("expression_2", 43);
			LeaveRule_expression_2();
	    }
	 	DebugLocation(333, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_2"); }
		return retval;

	}
	// $ANTLR end "expression_2"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_2() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_2() {}

	// $ANTLR start "op_2"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:335:1: op_2 : ( '*' -> T_PRODUCT | '/' -> T_DIVIDE | '%' -> T_MODULO );
	[GrammarRule("op_2")]
	private AstParserRuleReturnScope<object, IToken> op_2()
	{
		EnterRule_op_2();
		EnterRule("op_2", 44);
		TraceIn("op_2", 44);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal230 = default(IToken);
	    IToken char_literal231 = default(IToken);
	    IToken char_literal232 = default(IToken);

	    object char_literal230_tree = default(object);
	    object char_literal231_tree = default(object);
	    object char_literal232_tree = default(object);
	    RewriteRuleITokenStream stream_145=new RewriteRuleITokenStream(adaptor,"token 145");
	    RewriteRuleITokenStream stream_149=new RewriteRuleITokenStream(adaptor,"token 149");
	    RewriteRuleITokenStream stream_141=new RewriteRuleITokenStream(adaptor,"token 141");

		try { DebugEnterRule(GrammarFileName, "op_2");
		DebugLocation(335, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:335:6: ( '*' -> T_PRODUCT | '/' -> T_DIVIDE | '%' -> T_MODULO )
			int alt81=3;
			try { DebugEnterDecision(81, decisionCanBacktrack[81]);
			switch (input.LA(1))
			{
			case 145:
				{
				alt81 = 1;
				}
				break;
			case 149:
				{
				alt81 = 2;
				}
				break;
			case 141:
				{
				alt81 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 81, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(81); }
			switch (alt81)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:335:8: '*'
				{
				DebugLocation(335, 8);
				char_literal230=(IToken)Match(input,145,Follow._145_in_op_22059);  
				stream_145.Add(char_literal230);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 335:12: -> T_PRODUCT
				{
					DebugLocation(335, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_PRODUCT, "T_PRODUCT"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:336:4: '/'
				{
				DebugLocation(336, 4);
				char_literal231=(IToken)Match(input,149,Follow._149_in_op_22068);  
				stream_149.Add(char_literal231);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 336:8: -> T_DIVIDE
				{
					DebugLocation(336, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_DIVIDE, "T_DIVIDE"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:337:4: '%'
				{
				DebugLocation(337, 4);
				char_literal232=(IToken)Match(input,141,Follow._141_in_op_22077);  
				stream_141.Add(char_literal232);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 337:8: -> T_MODULO
				{
					DebugLocation(337, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MODULO, "T_MODULO"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_2", 44);
			LeaveRule("op_2", 44);
			LeaveRule_op_2();
	    }
	 	DebugLocation(338, 1);
		} finally { DebugExitRule(GrammarFileName, "op_2"); }
		return retval;

	}
	// $ANTLR end "op_2"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_1() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_1() {}

	// $ANTLR start "expression_1"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:340:1: expression_1 : ( '(' ( WS )? op_1 ( WS )? expression_1 ( WS )? ')' -> ^( T_OP_UNARY op_1 expression_1 ) | expression_atom );
	[GrammarRule("expression_1")]
	private AstParserRuleReturnScope<object, IToken> expression_1()
	{
		EnterRule_expression_1();
		EnterRule("expression_1", 45);
		TraceIn("expression_1", 45);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal233 = default(IToken);
	    IToken WS234 = default(IToken);
	    IToken WS236 = default(IToken);
	    IToken WS238 = default(IToken);
	    IToken char_literal239 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> op_1235 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_1237 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_atom240 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal233_tree = default(object);
	    object WS234_tree = default(object);
	    object WS236_tree = default(object);
	    object WS238_tree = default(object);
	    object char_literal239_tree = default(object);
	    RewriteRuleITokenStream stream_143=new RewriteRuleITokenStream(adaptor,"token 143");
	    RewriteRuleITokenStream stream_144=new RewriteRuleITokenStream(adaptor,"token 144");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression_1=new RewriteRuleSubtreeStream(adaptor,"rule expression_1");
	    RewriteRuleSubtreeStream stream_op_1=new RewriteRuleSubtreeStream(adaptor,"rule op_1");
		try { DebugEnterRule(GrammarFileName, "expression_1");
		DebugLocation(340, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:342:2: ( '(' ( WS )? op_1 ( WS )? expression_1 ( WS )? ')' -> ^( T_OP_UNARY op_1 expression_1 ) | expression_atom )
			int alt85=2;
			try { DebugEnterDecision(85, decisionCanBacktrack[85]);
			int LA85_0 = input.LA(1);

			if ((LA85_0==143))
			{
				switch (input.LA(2))
				{
				case WS:
					{
					int LA85_3 = input.LA(3);

					if ((LA85_3==146||LA85_3==148||LA85_3==161))
					{
						alt85 = 1;
					}
					else if ((LA85_3==SELECT))
					{
						alt85 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 85, 3, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 146:
				case 148:
				case 161:
					{
					alt85 = 1;
					}
					break;
				case CASE:
				case CAST:
				case CONVERT:
				case EXISTS:
				case NOT:
				case NUMBER:
				case SELECT:
				case SIMPLE_FILE:
				case STRING:
				case SYSTEMVAR:
				case TOKEN:
				case VARIABLE:
				case 143:
					{
					alt85 = 2;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 85, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else if (((LA85_0>=CASE && LA85_0<=CAST)||LA85_0==CONVERT||LA85_0==EXISTS||LA85_0==NUMBER||LA85_0==SIMPLE_FILE||(LA85_0>=STRING && LA85_0<=SYSTEMVAR)||LA85_0==TOKEN||LA85_0==VARIABLE))
			{
				alt85 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 85, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(85); }
			switch (alt85)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:342:4: '(' ( WS )? op_1 ( WS )? expression_1 ( WS )? ')'
				{
				DebugLocation(342, 4);
				char_literal233=(IToken)Match(input,143,Follow._143_in_expression_12095);  
				stream_143.Add(char_literal233);

				DebugLocation(342, 8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:342:8: ( WS )?
				int alt82=2;
				try { DebugEnterSubRule(82);
				try { DebugEnterDecision(82, decisionCanBacktrack[82]);
				int LA82_0 = input.LA(1);

				if ((LA82_0==WS))
				{
					alt82 = 1;
				}
				} finally { DebugExitDecision(82); }
				switch (alt82)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:342:8: WS
					{
					DebugLocation(342, 8);
					WS234=(IToken)Match(input,WS,Follow._WS_in_expression_12097);  
					stream_WS.Add(WS234);


					}
					break;

				}
				} finally { DebugExitSubRule(82); }

				DebugLocation(342, 12);
				PushFollow(Follow._op_1_in_expression_12100);
				op_1235=op_1();
				PopFollow();

				stream_op_1.Add(op_1235.Tree);
				DebugLocation(342, 17);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:342:17: ( WS )?
				int alt83=2;
				try { DebugEnterSubRule(83);
				try { DebugEnterDecision(83, decisionCanBacktrack[83]);
				int LA83_0 = input.LA(1);

				if ((LA83_0==WS))
				{
					alt83 = 1;
				}
				} finally { DebugExitDecision(83); }
				switch (alt83)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:342:17: WS
					{
					DebugLocation(342, 17);
					WS236=(IToken)Match(input,WS,Follow._WS_in_expression_12102);  
					stream_WS.Add(WS236);


					}
					break;

				}
				} finally { DebugExitSubRule(83); }

				DebugLocation(342, 21);
				PushFollow(Follow._expression_1_in_expression_12105);
				expression_1237=expression_1();
				PopFollow();

				stream_expression_1.Add(expression_1237.Tree);
				DebugLocation(342, 34);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:342:34: ( WS )?
				int alt84=2;
				try { DebugEnterSubRule(84);
				try { DebugEnterDecision(84, decisionCanBacktrack[84]);
				int LA84_0 = input.LA(1);

				if ((LA84_0==WS))
				{
					alt84 = 1;
				}
				} finally { DebugExitDecision(84); }
				switch (alt84)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:342:34: WS
					{
					DebugLocation(342, 34);
					WS238=(IToken)Match(input,WS,Follow._WS_in_expression_12107);  
					stream_WS.Add(WS238);


					}
					break;

				}
				} finally { DebugExitSubRule(84); }

				DebugLocation(342, 38);
				char_literal239=(IToken)Match(input,144,Follow._144_in_expression_12110);  
				stream_144.Add(char_literal239);



				{
				// AST REWRITE
				// elements: expression_1, op_1
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 342:42: -> ^( T_OP_UNARY op_1 expression_1 )
				{
					DebugLocation(342, 45);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:342:45: ^( T_OP_UNARY op_1 expression_1 )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(342, 47);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_UNARY, "T_OP_UNARY"), root_1);

					DebugLocation(342, 58);
					adaptor.AddChild(root_1, stream_op_1.NextTree());
					DebugLocation(342, 63);
					adaptor.AddChild(root_1, stream_expression_1.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:344:4: expression_atom
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(344, 4);
				PushFollow(Follow._expression_atom_in_expression_12127);
				expression_atom240=expression_atom();
				PopFollow();

				adaptor.AddChild(root_0, expression_atom240.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_1", 45);
			LeaveRule("expression_1", 45);
			LeaveRule_expression_1();
	    }
	 	DebugLocation(345, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_1"); }
		return retval;

	}
	// $ANTLR end "expression_1"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_1() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_1() {}

	// $ANTLR start "op_1"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:347:1: op_1 : ( '~' -> T_BITWISE_NOT | '+' -> T_PLUS | '-' -> T_MINUS );
	[GrammarRule("op_1")]
	private AstParserRuleReturnScope<object, IToken> op_1()
	{
		EnterRule_op_1();
		EnterRule("op_1", 46);
		TraceIn("op_1", 46);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal241 = default(IToken);
	    IToken char_literal242 = default(IToken);
	    IToken char_literal243 = default(IToken);

	    object char_literal241_tree = default(object);
	    object char_literal242_tree = default(object);
	    object char_literal243_tree = default(object);
	    RewriteRuleITokenStream stream_161=new RewriteRuleITokenStream(adaptor,"token 161");
	    RewriteRuleITokenStream stream_146=new RewriteRuleITokenStream(adaptor,"token 146");
	    RewriteRuleITokenStream stream_148=new RewriteRuleITokenStream(adaptor,"token 148");

		try { DebugEnterRule(GrammarFileName, "op_1");
		DebugLocation(347, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:347:6: ( '~' -> T_BITWISE_NOT | '+' -> T_PLUS | '-' -> T_MINUS )
			int alt86=3;
			try { DebugEnterDecision(86, decisionCanBacktrack[86]);
			switch (input.LA(1))
			{
			case 161:
				{
				alt86 = 1;
				}
				break;
			case 146:
				{
				alt86 = 2;
				}
				break;
			case 148:
				{
				alt86 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 86, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(86); }
			switch (alt86)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:347:8: '~'
				{
				DebugLocation(347, 8);
				char_literal241=(IToken)Match(input,161,Follow._161_in_op_12137);  
				stream_161.Add(char_literal241);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 347:12: -> T_BITWISE_NOT
				{
					DebugLocation(347, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_NOT, "T_BITWISE_NOT"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:348:5: '+'
				{
				DebugLocation(348, 5);
				char_literal242=(IToken)Match(input,146,Follow._146_in_op_12147);  
				stream_146.Add(char_literal242);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 348:9: -> T_PLUS
				{
					DebugLocation(348, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_PLUS, "T_PLUS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:349:4: '-'
				{
				DebugLocation(349, 4);
				char_literal243=(IToken)Match(input,148,Follow._148_in_op_12156);  
				stream_148.Add(char_literal243);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 349:8: -> T_MINUS
				{
					DebugLocation(349, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MINUS, "T_MINUS"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_1", 46);
			LeaveRule("op_1", 46);
			LeaveRule_op_1();
	    }
	 	DebugLocation(350, 1);
		} finally { DebugExitRule(GrammarFileName, "op_1"); }
		return retval;

	}
	// $ANTLR end "op_1"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_atom() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_atom() {}

	// $ANTLR start "expression_atom"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:352:1: expression_atom : ( NUMBER -> ^( T_INTEGER NUMBER ) | STRING -> ^( T_STRING STRING ) | SYSTEMVAR -> ^( T_SYSTEMVAR SYSTEMVAR ) | VARIABLE -> ^( T_VARIABLE VARIABLE ) | subquery | '(' expression ')' -> expression | functioncall_or_column | conversion | case | EXISTS ( WS )? '(' ( WS )? select_command ( WS )? ')' -> ^( T_EXISTS select_command ) );
	[GrammarRule("expression_atom")]
	private AstParserRuleReturnScope<object, IToken> expression_atom()
	{
		EnterRule_expression_atom();
		EnterRule("expression_atom", 47);
		TraceIn("expression_atom", 47);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken NUMBER244 = default(IToken);
	    IToken STRING245 = default(IToken);
	    IToken SYSTEMVAR246 = default(IToken);
	    IToken VARIABLE247 = default(IToken);
	    IToken char_literal249 = default(IToken);
	    IToken char_literal251 = default(IToken);
	    IToken EXISTS255 = default(IToken);
	    IToken WS256 = default(IToken);
	    IToken char_literal257 = default(IToken);
	    IToken WS258 = default(IToken);
	    IToken WS260 = default(IToken);
	    IToken char_literal261 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> subquery248 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression250 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> functioncall_or_column252 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> conversion253 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> case254 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> select_command259 = default(AstParserRuleReturnScope<object, IToken>);

	    object NUMBER244_tree = default(object);
	    object STRING245_tree = default(object);
	    object SYSTEMVAR246_tree = default(object);
	    object VARIABLE247_tree = default(object);
	    object char_literal249_tree = default(object);
	    object char_literal251_tree = default(object);
	    object EXISTS255_tree = default(object);
	    object WS256_tree = default(object);
	    object char_literal257_tree = default(object);
	    object WS258_tree = default(object);
	    object WS260_tree = default(object);
	    object char_literal261_tree = default(object);
	    RewriteRuleITokenStream stream_143=new RewriteRuleITokenStream(adaptor,"token 143");
	    RewriteRuleITokenStream stream_144=new RewriteRuleITokenStream(adaptor,"token 144");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_EXISTS=new RewriteRuleITokenStream(adaptor,"token EXISTS");
	    RewriteRuleITokenStream stream_VARIABLE=new RewriteRuleITokenStream(adaptor,"token VARIABLE");
	    RewriteRuleITokenStream stream_SYSTEMVAR=new RewriteRuleITokenStream(adaptor,"token SYSTEMVAR");
	    RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
	    RewriteRuleITokenStream stream_NUMBER=new RewriteRuleITokenStream(adaptor,"token NUMBER");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_select_command=new RewriteRuleSubtreeStream(adaptor,"rule select_command");
		try { DebugEnterRule(GrammarFileName, "expression_atom");
		DebugLocation(352, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:353:2: ( NUMBER -> ^( T_INTEGER NUMBER ) | STRING -> ^( T_STRING STRING ) | SYSTEMVAR -> ^( T_SYSTEMVAR SYSTEMVAR ) | VARIABLE -> ^( T_VARIABLE VARIABLE ) | subquery | '(' expression ')' -> expression | functioncall_or_column | conversion | case | EXISTS ( WS )? '(' ( WS )? select_command ( WS )? ')' -> ^( T_EXISTS select_command ) )
			int alt90=10;
			try { DebugEnterDecision(90, decisionCanBacktrack[90]);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt90 = 1;
				}
				break;
			case STRING:
				{
				alt90 = 2;
				}
				break;
			case SYSTEMVAR:
				{
				alt90 = 3;
				}
				break;
			case VARIABLE:
				{
				alt90 = 4;
				}
				break;
			case 143:
				{
				int LA90_5 = input.LA(2);

				if ((LA90_5==SELECT||LA90_5==WS))
				{
					alt90 = 5;
				}
				else if (((LA90_5>=CASE && LA90_5<=CAST)||LA90_5==CONVERT||LA90_5==EXISTS||(LA90_5>=NOT && LA90_5<=NUMBER)||LA90_5==SIMPLE_FILE||(LA90_5>=STRING && LA90_5<=SYSTEMVAR)||LA90_5==TOKEN||LA90_5==VARIABLE||LA90_5==143))
				{
					alt90 = 6;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 90, 5, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SIMPLE_FILE:
			case TOKEN:
				{
				alt90 = 7;
				}
				break;
			case CAST:
			case CONVERT:
				{
				alt90 = 8;
				}
				break;
			case CASE:
				{
				alt90 = 9;
				}
				break;
			case EXISTS:
				{
				alt90 = 10;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 90, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(90); }
			switch (alt90)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:353:4: NUMBER
				{
				DebugLocation(353, 4);
				NUMBER244=(IToken)Match(input,NUMBER,Follow._NUMBER_in_expression_atom2171);  
				stream_NUMBER.Add(NUMBER244);



				{
				// AST REWRITE
				// elements: NUMBER
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 353:11: -> ^( T_INTEGER NUMBER )
				{
					DebugLocation(353, 14);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:353:14: ^( T_INTEGER NUMBER )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(353, 16);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_INTEGER, "T_INTEGER"), root_1);

					DebugLocation(353, 26);
					adaptor.AddChild(root_1, stream_NUMBER.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:354:4: STRING
				{
				DebugLocation(354, 4);
				STRING245=(IToken)Match(input,STRING,Follow._STRING_in_expression_atom2184);  
				stream_STRING.Add(STRING245);



				{
				// AST REWRITE
				// elements: STRING
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 354:11: -> ^( T_STRING STRING )
				{
					DebugLocation(354, 14);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:354:14: ^( T_STRING STRING )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(354, 16);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_STRING, "T_STRING"), root_1);

					DebugLocation(354, 25);
					adaptor.AddChild(root_1, stream_STRING.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:355:4: SYSTEMVAR
				{
				DebugLocation(355, 4);
				SYSTEMVAR246=(IToken)Match(input,SYSTEMVAR,Follow._SYSTEMVAR_in_expression_atom2197);  
				stream_SYSTEMVAR.Add(SYSTEMVAR246);



				{
				// AST REWRITE
				// elements: SYSTEMVAR
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 355:14: -> ^( T_SYSTEMVAR SYSTEMVAR )
				{
					DebugLocation(355, 17);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:355:17: ^( T_SYSTEMVAR SYSTEMVAR )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(355, 19);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SYSTEMVAR, "T_SYSTEMVAR"), root_1);

					DebugLocation(355, 31);
					adaptor.AddChild(root_1, stream_SYSTEMVAR.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:356:4: VARIABLE
				{
				DebugLocation(356, 4);
				VARIABLE247=(IToken)Match(input,VARIABLE,Follow._VARIABLE_in_expression_atom2210);  
				stream_VARIABLE.Add(VARIABLE247);



				{
				// AST REWRITE
				// elements: VARIABLE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 356:13: -> ^( T_VARIABLE VARIABLE )
				{
					DebugLocation(356, 16);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:356:16: ^( T_VARIABLE VARIABLE )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(356, 18);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_VARIABLE, "T_VARIABLE"), root_1);

					DebugLocation(356, 29);
					adaptor.AddChild(root_1, stream_VARIABLE.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:357:4: subquery
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(357, 4);
				PushFollow(Follow._subquery_in_expression_atom2223);
				subquery248=subquery();
				PopFollow();

				adaptor.AddChild(root_0, subquery248.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:358:4: '(' expression ')'
				{
				DebugLocation(358, 4);
				char_literal249=(IToken)Match(input,143,Follow._143_in_expression_atom2228);  
				stream_143.Add(char_literal249);

				DebugLocation(358, 8);
				PushFollow(Follow._expression_in_expression_atom2230);
				expression250=expression();
				PopFollow();

				stream_expression.Add(expression250.Tree);
				DebugLocation(358, 19);
				char_literal251=(IToken)Match(input,144,Follow._144_in_expression_atom2232);  
				stream_144.Add(char_literal251);



				{
				// AST REWRITE
				// elements: expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 358:23: -> expression
				{
					DebugLocation(358, 26);
					adaptor.AddChild(root_0, stream_expression.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:359:4: functioncall_or_column
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(359, 4);
				PushFollow(Follow._functioncall_or_column_in_expression_atom2241);
				functioncall_or_column252=functioncall_or_column();
				PopFollow();

				adaptor.AddChild(root_0, functioncall_or_column252.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:360:4: conversion
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(360, 4);
				PushFollow(Follow._conversion_in_expression_atom2246);
				conversion253=conversion();
				PopFollow();

				adaptor.AddChild(root_0, conversion253.Tree);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:361:4: case
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(361, 4);
				PushFollow(Follow._case_in_expression_atom2251);
				case254=@case();
				PopFollow();

				adaptor.AddChild(root_0, case254.Tree);

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:362:4: EXISTS ( WS )? '(' ( WS )? select_command ( WS )? ')'
				{
				DebugLocation(362, 4);
				EXISTS255=(IToken)Match(input,EXISTS,Follow._EXISTS_in_expression_atom2256);  
				stream_EXISTS.Add(EXISTS255);

				DebugLocation(362, 11);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:362:11: ( WS )?
				int alt87=2;
				try { DebugEnterSubRule(87);
				try { DebugEnterDecision(87, decisionCanBacktrack[87]);
				int LA87_0 = input.LA(1);

				if ((LA87_0==WS))
				{
					alt87 = 1;
				}
				} finally { DebugExitDecision(87); }
				switch (alt87)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:362:11: WS
					{
					DebugLocation(362, 11);
					WS256=(IToken)Match(input,WS,Follow._WS_in_expression_atom2258);  
					stream_WS.Add(WS256);


					}
					break;

				}
				} finally { DebugExitSubRule(87); }

				DebugLocation(362, 15);
				char_literal257=(IToken)Match(input,143,Follow._143_in_expression_atom2261);  
				stream_143.Add(char_literal257);

				DebugLocation(362, 19);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:362:19: ( WS )?
				int alt88=2;
				try { DebugEnterSubRule(88);
				try { DebugEnterDecision(88, decisionCanBacktrack[88]);
				int LA88_0 = input.LA(1);

				if ((LA88_0==WS))
				{
					alt88 = 1;
				}
				} finally { DebugExitDecision(88); }
				switch (alt88)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:362:19: WS
					{
					DebugLocation(362, 19);
					WS258=(IToken)Match(input,WS,Follow._WS_in_expression_atom2263);  
					stream_WS.Add(WS258);


					}
					break;

				}
				} finally { DebugExitSubRule(88); }

				DebugLocation(362, 23);
				PushFollow(Follow._select_command_in_expression_atom2266);
				select_command259=select_command();
				PopFollow();

				stream_select_command.Add(select_command259.Tree);
				DebugLocation(362, 38);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:362:38: ( WS )?
				int alt89=2;
				try { DebugEnterSubRule(89);
				try { DebugEnterDecision(89, decisionCanBacktrack[89]);
				int LA89_0 = input.LA(1);

				if ((LA89_0==WS))
				{
					alt89 = 1;
				}
				} finally { DebugExitDecision(89); }
				switch (alt89)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:362:38: WS
					{
					DebugLocation(362, 38);
					WS260=(IToken)Match(input,WS,Follow._WS_in_expression_atom2268);  
					stream_WS.Add(WS260);


					}
					break;

				}
				} finally { DebugExitSubRule(89); }

				DebugLocation(362, 42);
				char_literal261=(IToken)Match(input,144,Follow._144_in_expression_atom2271);  
				stream_144.Add(char_literal261);



				{
				// AST REWRITE
				// elements: select_command
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 362:46: -> ^( T_EXISTS select_command )
				{
					DebugLocation(362, 49);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:362:49: ^( T_EXISTS select_command )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(362, 51);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_EXISTS, "T_EXISTS"), root_1);

					DebugLocation(362, 60);
					adaptor.AddChild(root_1, stream_select_command.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_atom", 47);
			LeaveRule("expression_atom", 47);
			LeaveRule_expression_atom();
	    }
	 	DebugLocation(363, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_atom"); }
		return retval;

	}
	// $ANTLR end "expression_atom"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_functioncall_or_column() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_functioncall_or_column() {}

	// $ANTLR start "functioncall_or_column"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:366:1: functioncall_or_column : ( TOKEN ( WS )? '(' ( WS )? ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )? ')' -> ^( T_FUNCTIONCALL TOKEN ( expression )* ) | SIMPLE_FILE -> ^( T_COLUMN SIMPLE_FILE ) );
	[GrammarRule("functioncall_or_column")]
	private AstParserRuleReturnScope<object, IToken> functioncall_or_column()
	{
		EnterRule_functioncall_or_column();
		EnterRule("functioncall_or_column", 48);
		TraceIn("functioncall_or_column", 48);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN262 = default(IToken);
	    IToken WS263 = default(IToken);
	    IToken char_literal264 = default(IToken);
	    IToken WS265 = default(IToken);
	    IToken WS267 = default(IToken);
	    IToken char_literal268 = default(IToken);
	    IToken WS269 = default(IToken);
	    IToken WS271 = default(IToken);
	    IToken char_literal272 = default(IToken);
	    IToken SIMPLE_FILE273 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression266 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression270 = default(AstParserRuleReturnScope<object, IToken>);

	    object TOKEN262_tree = default(object);
	    object WS263_tree = default(object);
	    object char_literal264_tree = default(object);
	    object WS265_tree = default(object);
	    object WS267_tree = default(object);
	    object char_literal268_tree = default(object);
	    object WS269_tree = default(object);
	    object WS271_tree = default(object);
	    object char_literal272_tree = default(object);
	    object SIMPLE_FILE273_tree = default(object);
	    RewriteRuleITokenStream stream_143=new RewriteRuleITokenStream(adaptor,"token 143");
	    RewriteRuleITokenStream stream_144=new RewriteRuleITokenStream(adaptor,"token 144");
	    RewriteRuleITokenStream stream_147=new RewriteRuleITokenStream(adaptor,"token 147");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_SIMPLE_FILE=new RewriteRuleITokenStream(adaptor,"token SIMPLE_FILE");
	    RewriteRuleITokenStream stream_TOKEN=new RewriteRuleITokenStream(adaptor,"token TOKEN");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "functioncall_or_column");
		DebugLocation(366, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:367:2: ( TOKEN ( WS )? '(' ( WS )? ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )? ')' -> ^( T_FUNCTIONCALL TOKEN ( expression )* ) | SIMPLE_FILE -> ^( T_COLUMN SIMPLE_FILE ) )
			int alt98=2;
			try { DebugEnterDecision(98, decisionCanBacktrack[98]);
			int LA98_0 = input.LA(1);

			if ((LA98_0==TOKEN))
			{
				alt98 = 1;
			}
			else if ((LA98_0==SIMPLE_FILE))
			{
				alt98 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 98, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(98); }
			switch (alt98)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:367:4: TOKEN ( WS )? '(' ( WS )? ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )? ')'
				{
				DebugLocation(367, 4);
				TOKEN262=(IToken)Match(input,TOKEN,Follow._TOKEN_in_functioncall_or_column2291);  
				stream_TOKEN.Add(TOKEN262);

				DebugLocation(367, 10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:367:10: ( WS )?
				int alt91=2;
				try { DebugEnterSubRule(91);
				try { DebugEnterDecision(91, decisionCanBacktrack[91]);
				int LA91_0 = input.LA(1);

				if ((LA91_0==WS))
				{
					alt91 = 1;
				}
				} finally { DebugExitDecision(91); }
				switch (alt91)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:367:10: WS
					{
					DebugLocation(367, 10);
					WS263=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2293);  
					stream_WS.Add(WS263);


					}
					break;

				}
				} finally { DebugExitSubRule(91); }

				DebugLocation(367, 14);
				char_literal264=(IToken)Match(input,143,Follow._143_in_functioncall_or_column2296);  
				stream_143.Add(char_literal264);

				DebugLocation(367, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:367:18: ( WS )?
				int alt92=2;
				try { DebugEnterSubRule(92);
				try { DebugEnterDecision(92, decisionCanBacktrack[92]);
				int LA92_0 = input.LA(1);

				if ((LA92_0==WS))
				{
					alt92 = 1;
				}
				} finally { DebugExitDecision(92); }
				switch (alt92)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:367:18: WS
					{
					DebugLocation(367, 18);
					WS265=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2298);  
					stream_WS.Add(WS265);


					}
					break;

				}
				} finally { DebugExitSubRule(92); }

				DebugLocation(367, 22);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:367:22: ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )?
				int alt97=2;
				try { DebugEnterSubRule(97);
				try { DebugEnterDecision(97, decisionCanBacktrack[97]);
				int LA97_0 = input.LA(1);

				if (((LA97_0>=CASE && LA97_0<=CAST)||LA97_0==CONVERT||LA97_0==EXISTS||(LA97_0>=NOT && LA97_0<=NUMBER)||LA97_0==SIMPLE_FILE||(LA97_0>=STRING && LA97_0<=SYSTEMVAR)||LA97_0==TOKEN||LA97_0==VARIABLE||LA97_0==143))
				{
					alt97 = 1;
				}
				} finally { DebugExitDecision(97); }
				switch (alt97)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:367:23: expression ( WS )? ( ',' ( WS )? expression ( WS )? )*
					{
					DebugLocation(367, 23);
					PushFollow(Follow._expression_in_functioncall_or_column2302);
					expression266=expression();
					PopFollow();

					stream_expression.Add(expression266.Tree);
					DebugLocation(367, 34);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:367:34: ( WS )?
					int alt93=2;
					try { DebugEnterSubRule(93);
					try { DebugEnterDecision(93, decisionCanBacktrack[93]);
					int LA93_0 = input.LA(1);

					if ((LA93_0==WS))
					{
						alt93 = 1;
					}
					} finally { DebugExitDecision(93); }
					switch (alt93)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:367:34: WS
						{
						DebugLocation(367, 34);
						WS267=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2304);  
						stream_WS.Add(WS267);


						}
						break;

					}
					} finally { DebugExitSubRule(93); }

					DebugLocation(367, 38);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:367:38: ( ',' ( WS )? expression ( WS )? )*
					try { DebugEnterSubRule(96);
					while (true)
					{
						int alt96=2;
						try { DebugEnterDecision(96, decisionCanBacktrack[96]);
						int LA96_0 = input.LA(1);

						if ((LA96_0==147))
						{
							alt96 = 1;
						}


						} finally { DebugExitDecision(96); }
						switch ( alt96 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:367:39: ',' ( WS )? expression ( WS )?
							{
							DebugLocation(367, 39);
							char_literal268=(IToken)Match(input,147,Follow._147_in_functioncall_or_column2308);  
							stream_147.Add(char_literal268);

							DebugLocation(367, 43);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:367:43: ( WS )?
							int alt94=2;
							try { DebugEnterSubRule(94);
							try { DebugEnterDecision(94, decisionCanBacktrack[94]);
							int LA94_0 = input.LA(1);

							if ((LA94_0==WS))
							{
								alt94 = 1;
							}
							} finally { DebugExitDecision(94); }
							switch (alt94)
							{
							case 1:
								DebugEnterAlt(1);
								// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:367:43: WS
								{
								DebugLocation(367, 43);
								WS269=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2310);  
								stream_WS.Add(WS269);


								}
								break;

							}
							} finally { DebugExitSubRule(94); }

							DebugLocation(367, 47);
							PushFollow(Follow._expression_in_functioncall_or_column2313);
							expression270=expression();
							PopFollow();

							stream_expression.Add(expression270.Tree);
							DebugLocation(367, 58);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:367:58: ( WS )?
							int alt95=2;
							try { DebugEnterSubRule(95);
							try { DebugEnterDecision(95, decisionCanBacktrack[95]);
							int LA95_0 = input.LA(1);

							if ((LA95_0==WS))
							{
								alt95 = 1;
							}
							} finally { DebugExitDecision(95); }
							switch (alt95)
							{
							case 1:
								DebugEnterAlt(1);
								// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:367:58: WS
								{
								DebugLocation(367, 58);
								WS271=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2315);  
								stream_WS.Add(WS271);


								}
								break;

							}
							} finally { DebugExitSubRule(95); }


							}
							break;

						default:
							goto loop96;
						}
					}

					loop96:
						;

					} finally { DebugExitSubRule(96); }


					}
					break;

				}
				} finally { DebugExitSubRule(97); }

				DebugLocation(367, 66);
				char_literal272=(IToken)Match(input,144,Follow._144_in_functioncall_or_column2322);  
				stream_144.Add(char_literal272);



				{
				// AST REWRITE
				// elements: TOKEN, expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 367:70: -> ^( T_FUNCTIONCALL TOKEN ( expression )* )
				{
					DebugLocation(367, 73);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:367:73: ^( T_FUNCTIONCALL TOKEN ( expression )* )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(367, 75);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(367, 90);
					adaptor.AddChild(root_1, stream_TOKEN.NextNode());
					DebugLocation(367, 96);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:367:96: ( expression )*
					while ( stream_expression.HasNext )
					{
						DebugLocation(367, 96);
						adaptor.AddChild(root_1, stream_expression.NextTree());

					}
					stream_expression.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:369:4: SIMPLE_FILE
				{
				DebugLocation(369, 4);
				SIMPLE_FILE273=(IToken)Match(input,SIMPLE_FILE,Follow._SIMPLE_FILE_in_functioncall_or_column2340);  
				stream_SIMPLE_FILE.Add(SIMPLE_FILE273);



				{
				// AST REWRITE
				// elements: SIMPLE_FILE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 369:16: -> ^( T_COLUMN SIMPLE_FILE )
				{
					DebugLocation(369, 19);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:369:19: ^( T_COLUMN SIMPLE_FILE )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(369, 21);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_COLUMN, "T_COLUMN"), root_1);

					DebugLocation(369, 30);
					adaptor.AddChild(root_1, stream_SIMPLE_FILE.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("functioncall_or_column", 48);
			LeaveRule("functioncall_or_column", 48);
			LeaveRule_functioncall_or_column();
	    }
	 	DebugLocation(370, 1);
		} finally { DebugExitRule(GrammarFileName, "functioncall_or_column"); }
		return retval;

	}
	// $ANTLR end "functioncall_or_column"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_conversion() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_conversion() {}

	// $ANTLR start "conversion"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:372:1: conversion : ( CONVERT ( WS )? '(' ( WS )? TOKEN ( WS )? ',' ( WS )? expression ( WS )? ')' -> ^( T_CONVERT TOKEN expression ) | CAST ( WS )? '(' ( WS )? expression WS AS WS datatype ( WS )? ')' -> ^( T_CONVERT TOKEN expression ) );
	[GrammarRule("conversion")]
	private AstParserRuleReturnScope<object, IToken> conversion()
	{
		EnterRule_conversion();
		EnterRule("conversion", 49);
		TraceIn("conversion", 49);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken CONVERT274 = default(IToken);
	    IToken WS275 = default(IToken);
	    IToken char_literal276 = default(IToken);
	    IToken WS277 = default(IToken);
	    IToken TOKEN278 = default(IToken);
	    IToken WS279 = default(IToken);
	    IToken char_literal280 = default(IToken);
	    IToken WS281 = default(IToken);
	    IToken WS283 = default(IToken);
	    IToken char_literal284 = default(IToken);
	    IToken CAST285 = default(IToken);
	    IToken WS286 = default(IToken);
	    IToken char_literal287 = default(IToken);
	    IToken WS288 = default(IToken);
	    IToken WS290 = default(IToken);
	    IToken AS291 = default(IToken);
	    IToken WS292 = default(IToken);
	    IToken WS294 = default(IToken);
	    IToken char_literal295 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression282 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression289 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> datatype293 = default(AstParserRuleReturnScope<object, IToken>);

	    object CONVERT274_tree = default(object);
	    object WS275_tree = default(object);
	    object char_literal276_tree = default(object);
	    object WS277_tree = default(object);
	    object TOKEN278_tree = default(object);
	    object WS279_tree = default(object);
	    object char_literal280_tree = default(object);
	    object WS281_tree = default(object);
	    object WS283_tree = default(object);
	    object char_literal284_tree = default(object);
	    object CAST285_tree = default(object);
	    object WS286_tree = default(object);
	    object char_literal287_tree = default(object);
	    object WS288_tree = default(object);
	    object WS290_tree = default(object);
	    object AS291_tree = default(object);
	    object WS292_tree = default(object);
	    object WS294_tree = default(object);
	    object char_literal295_tree = default(object);
	    RewriteRuleITokenStream stream_CAST=new RewriteRuleITokenStream(adaptor,"token CAST");
	    RewriteRuleITokenStream stream_143=new RewriteRuleITokenStream(adaptor,"token 143");
	    RewriteRuleITokenStream stream_AS=new RewriteRuleITokenStream(adaptor,"token AS");
	    RewriteRuleITokenStream stream_144=new RewriteRuleITokenStream(adaptor,"token 144");
	    RewriteRuleITokenStream stream_147=new RewriteRuleITokenStream(adaptor,"token 147");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_CONVERT=new RewriteRuleITokenStream(adaptor,"token CONVERT");
	    RewriteRuleITokenStream stream_TOKEN=new RewriteRuleITokenStream(adaptor,"token TOKEN");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_datatype=new RewriteRuleSubtreeStream(adaptor,"rule datatype");
		try { DebugEnterRule(GrammarFileName, "conversion");
		DebugLocation(372, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:373:2: ( CONVERT ( WS )? '(' ( WS )? TOKEN ( WS )? ',' ( WS )? expression ( WS )? ')' -> ^( T_CONVERT TOKEN expression ) | CAST ( WS )? '(' ( WS )? expression WS AS WS datatype ( WS )? ')' -> ^( T_CONVERT TOKEN expression ) )
			int alt107=2;
			try { DebugEnterDecision(107, decisionCanBacktrack[107]);
			int LA107_0 = input.LA(1);

			if ((LA107_0==CONVERT))
			{
				alt107 = 1;
			}
			else if ((LA107_0==CAST))
			{
				alt107 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 107, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(107); }
			switch (alt107)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:373:4: CONVERT ( WS )? '(' ( WS )? TOKEN ( WS )? ',' ( WS )? expression ( WS )? ')'
				{
				DebugLocation(373, 4);
				CONVERT274=(IToken)Match(input,CONVERT,Follow._CONVERT_in_conversion2360);  
				stream_CONVERT.Add(CONVERT274);

				DebugLocation(373, 12);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:373:12: ( WS )?
				int alt99=2;
				try { DebugEnterSubRule(99);
				try { DebugEnterDecision(99, decisionCanBacktrack[99]);
				int LA99_0 = input.LA(1);

				if ((LA99_0==WS))
				{
					alt99 = 1;
				}
				} finally { DebugExitDecision(99); }
				switch (alt99)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:373:12: WS
					{
					DebugLocation(373, 12);
					WS275=(IToken)Match(input,WS,Follow._WS_in_conversion2362);  
					stream_WS.Add(WS275);


					}
					break;

				}
				} finally { DebugExitSubRule(99); }

				DebugLocation(373, 16);
				char_literal276=(IToken)Match(input,143,Follow._143_in_conversion2365);  
				stream_143.Add(char_literal276);

				DebugLocation(373, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:373:20: ( WS )?
				int alt100=2;
				try { DebugEnterSubRule(100);
				try { DebugEnterDecision(100, decisionCanBacktrack[100]);
				int LA100_0 = input.LA(1);

				if ((LA100_0==WS))
				{
					alt100 = 1;
				}
				} finally { DebugExitDecision(100); }
				switch (alt100)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:373:20: WS
					{
					DebugLocation(373, 20);
					WS277=(IToken)Match(input,WS,Follow._WS_in_conversion2367);  
					stream_WS.Add(WS277);


					}
					break;

				}
				} finally { DebugExitSubRule(100); }

				DebugLocation(373, 24);
				TOKEN278=(IToken)Match(input,TOKEN,Follow._TOKEN_in_conversion2370);  
				stream_TOKEN.Add(TOKEN278);

				DebugLocation(373, 30);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:373:30: ( WS )?
				int alt101=2;
				try { DebugEnterSubRule(101);
				try { DebugEnterDecision(101, decisionCanBacktrack[101]);
				int LA101_0 = input.LA(1);

				if ((LA101_0==WS))
				{
					alt101 = 1;
				}
				} finally { DebugExitDecision(101); }
				switch (alt101)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:373:30: WS
					{
					DebugLocation(373, 30);
					WS279=(IToken)Match(input,WS,Follow._WS_in_conversion2372);  
					stream_WS.Add(WS279);


					}
					break;

				}
				} finally { DebugExitSubRule(101); }

				DebugLocation(373, 34);
				char_literal280=(IToken)Match(input,147,Follow._147_in_conversion2375);  
				stream_147.Add(char_literal280);

				DebugLocation(373, 38);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:373:38: ( WS )?
				int alt102=2;
				try { DebugEnterSubRule(102);
				try { DebugEnterDecision(102, decisionCanBacktrack[102]);
				int LA102_0 = input.LA(1);

				if ((LA102_0==WS))
				{
					alt102 = 1;
				}
				} finally { DebugExitDecision(102); }
				switch (alt102)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:373:38: WS
					{
					DebugLocation(373, 38);
					WS281=(IToken)Match(input,WS,Follow._WS_in_conversion2377);  
					stream_WS.Add(WS281);


					}
					break;

				}
				} finally { DebugExitSubRule(102); }

				DebugLocation(373, 42);
				PushFollow(Follow._expression_in_conversion2380);
				expression282=expression();
				PopFollow();

				stream_expression.Add(expression282.Tree);
				DebugLocation(373, 53);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:373:53: ( WS )?
				int alt103=2;
				try { DebugEnterSubRule(103);
				try { DebugEnterDecision(103, decisionCanBacktrack[103]);
				int LA103_0 = input.LA(1);

				if ((LA103_0==WS))
				{
					alt103 = 1;
				}
				} finally { DebugExitDecision(103); }
				switch (alt103)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:373:53: WS
					{
					DebugLocation(373, 53);
					WS283=(IToken)Match(input,WS,Follow._WS_in_conversion2382);  
					stream_WS.Add(WS283);


					}
					break;

				}
				} finally { DebugExitSubRule(103); }

				DebugLocation(373, 57);
				char_literal284=(IToken)Match(input,144,Follow._144_in_conversion2385);  
				stream_144.Add(char_literal284);



				{
				// AST REWRITE
				// elements: expression, TOKEN
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 373:61: -> ^( T_CONVERT TOKEN expression )
				{
					DebugLocation(373, 64);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:373:64: ^( T_CONVERT TOKEN expression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(373, 66);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CONVERT, "T_CONVERT"), root_1);

					DebugLocation(373, 76);
					adaptor.AddChild(root_1, stream_TOKEN.NextNode());
					DebugLocation(373, 82);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:374:4: CAST ( WS )? '(' ( WS )? expression WS AS WS datatype ( WS )? ')'
				{
				DebugLocation(374, 4);
				CAST285=(IToken)Match(input,CAST,Follow._CAST_in_conversion2400);  
				stream_CAST.Add(CAST285);

				DebugLocation(374, 9);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:374:9: ( WS )?
				int alt104=2;
				try { DebugEnterSubRule(104);
				try { DebugEnterDecision(104, decisionCanBacktrack[104]);
				int LA104_0 = input.LA(1);

				if ((LA104_0==WS))
				{
					alt104 = 1;
				}
				} finally { DebugExitDecision(104); }
				switch (alt104)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:374:9: WS
					{
					DebugLocation(374, 9);
					WS286=(IToken)Match(input,WS,Follow._WS_in_conversion2402);  
					stream_WS.Add(WS286);


					}
					break;

				}
				} finally { DebugExitSubRule(104); }

				DebugLocation(374, 13);
				char_literal287=(IToken)Match(input,143,Follow._143_in_conversion2405);  
				stream_143.Add(char_literal287);

				DebugLocation(374, 17);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:374:17: ( WS )?
				int alt105=2;
				try { DebugEnterSubRule(105);
				try { DebugEnterDecision(105, decisionCanBacktrack[105]);
				int LA105_0 = input.LA(1);

				if ((LA105_0==WS))
				{
					alt105 = 1;
				}
				} finally { DebugExitDecision(105); }
				switch (alt105)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:374:17: WS
					{
					DebugLocation(374, 17);
					WS288=(IToken)Match(input,WS,Follow._WS_in_conversion2407);  
					stream_WS.Add(WS288);


					}
					break;

				}
				} finally { DebugExitSubRule(105); }

				DebugLocation(374, 21);
				PushFollow(Follow._expression_in_conversion2410);
				expression289=expression();
				PopFollow();

				stream_expression.Add(expression289.Tree);
				DebugLocation(374, 32);
				WS290=(IToken)Match(input,WS,Follow._WS_in_conversion2412);  
				stream_WS.Add(WS290);

				DebugLocation(374, 35);
				AS291=(IToken)Match(input,AS,Follow._AS_in_conversion2414);  
				stream_AS.Add(AS291);

				DebugLocation(374, 38);
				WS292=(IToken)Match(input,WS,Follow._WS_in_conversion2416);  
				stream_WS.Add(WS292);

				DebugLocation(374, 41);
				PushFollow(Follow._datatype_in_conversion2418);
				datatype293=datatype();
				PopFollow();

				stream_datatype.Add(datatype293.Tree);
				DebugLocation(374, 50);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:374:50: ( WS )?
				int alt106=2;
				try { DebugEnterSubRule(106);
				try { DebugEnterDecision(106, decisionCanBacktrack[106]);
				int LA106_0 = input.LA(1);

				if ((LA106_0==WS))
				{
					alt106 = 1;
				}
				} finally { DebugExitDecision(106); }
				switch (alt106)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:374:50: WS
					{
					DebugLocation(374, 50);
					WS294=(IToken)Match(input,WS,Follow._WS_in_conversion2420);  
					stream_WS.Add(WS294);


					}
					break;

				}
				} finally { DebugExitSubRule(106); }

				DebugLocation(374, 54);
				char_literal295=(IToken)Match(input,144,Follow._144_in_conversion2423);  
				stream_144.Add(char_literal295);



				{
				// AST REWRITE
				// elements: expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 374:58: -> ^( T_CONVERT TOKEN expression )
				{
					DebugLocation(374, 61);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:374:61: ^( T_CONVERT TOKEN expression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(374, 63);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CONVERT, "T_CONVERT"), root_1);

					DebugLocation(374, 73);
					adaptor.AddChild(root_1, (object)adaptor.Create(TOKEN, "TOKEN"));
					DebugLocation(374, 79);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conversion", 49);
			LeaveRule("conversion", 49);
			LeaveRule_conversion();
	    }
	 	DebugLocation(375, 1);
		} finally { DebugExitRule(GrammarFileName, "conversion"); }
		return retval;

	}
	// $ANTLR end "conversion"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_datatype() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_datatype() {}

	// $ANTLR start "datatype"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:377:1: datatype : TOKEN ;
	[GrammarRule("datatype")]
	private AstParserRuleReturnScope<object, IToken> datatype()
	{
		EnterRule_datatype();
		EnterRule("datatype", 50);
		TraceIn("datatype", 50);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN296 = default(IToken);

	    object TOKEN296_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "datatype");
		DebugLocation(377, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:378:2: ( TOKEN )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:378:4: TOKEN
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(378, 4);
			TOKEN296=(IToken)Match(input,TOKEN,Follow._TOKEN_in_datatype2445); 
			TOKEN296_tree = (object)adaptor.Create(TOKEN296);
			adaptor.AddChild(root_0, TOKEN296_tree);


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("datatype", 50);
			LeaveRule("datatype", 50);
			LeaveRule_datatype();
	    }
	 	DebugLocation(379, 1);
		} finally { DebugExitRule(GrammarFileName, "datatype"); }
		return retval;

	}
	// $ANTLR end "datatype"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_variable() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_variable() {}

	// $ANTLR start "variable"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:381:1: variable : VARIABLE ;
	[GrammarRule("variable")]
	private AstParserRuleReturnScope<object, IToken> variable()
	{
		EnterRule_variable();
		EnterRule("variable", 51);
		TraceIn("variable", 51);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken VARIABLE297 = default(IToken);

	    object VARIABLE297_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "variable");
		DebugLocation(381, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:382:2: ( VARIABLE )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:382:4: VARIABLE
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(382, 4);
			VARIABLE297=(IToken)Match(input,VARIABLE,Follow._VARIABLE_in_variable2457); 
			VARIABLE297_tree = (object)adaptor.Create(VARIABLE297);
			adaptor.AddChild(root_0, VARIABLE297_tree);


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variable", 51);
			LeaveRule("variable", 51);
			LeaveRule_variable();
	    }
	 	DebugLocation(383, 1);
		} finally { DebugExitRule(GrammarFileName, "variable"); }
		return retval;

	}
	// $ANTLR end "variable"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_case() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_case() {}

	// $ANTLR start "case"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:385:1: case : CASE WS ( expression WS )? ( case_when WS )* ( case_else WS )? END -> ^( T_CASE ( expression )? ( case_when )* ( case_else )? ) ;
	[GrammarRule("case")]
	private AstParserRuleReturnScope<object, IToken> @case()
	{
		EnterRule_case();
		EnterRule("case", 52);
		TraceIn("case", 52);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken CASE298 = default(IToken);
	    IToken WS299 = default(IToken);
	    IToken WS301 = default(IToken);
	    IToken WS303 = default(IToken);
	    IToken WS305 = default(IToken);
	    IToken END306 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression300 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> case_when302 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> case_else304 = default(AstParserRuleReturnScope<object, IToken>);

	    object CASE298_tree = default(object);
	    object WS299_tree = default(object);
	    object WS301_tree = default(object);
	    object WS303_tree = default(object);
	    object WS305_tree = default(object);
	    object END306_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_END=new RewriteRuleITokenStream(adaptor,"token END");
	    RewriteRuleITokenStream stream_CASE=new RewriteRuleITokenStream(adaptor,"token CASE");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_case_when=new RewriteRuleSubtreeStream(adaptor,"rule case_when");
	    RewriteRuleSubtreeStream stream_case_else=new RewriteRuleSubtreeStream(adaptor,"rule case_else");
		try { DebugEnterRule(GrammarFileName, "case");
		DebugLocation(385, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:386:2: ( CASE WS ( expression WS )? ( case_when WS )* ( case_else WS )? END -> ^( T_CASE ( expression )? ( case_when )* ( case_else )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:386:4: CASE WS ( expression WS )? ( case_when WS )* ( case_else WS )? END
			{
			DebugLocation(386, 4);
			CASE298=(IToken)Match(input,CASE,Follow._CASE_in_case2469);  
			stream_CASE.Add(CASE298);

			DebugLocation(386, 9);
			WS299=(IToken)Match(input,WS,Follow._WS_in_case2471);  
			stream_WS.Add(WS299);

			DebugLocation(386, 12);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:386:12: ( expression WS )?
			int alt108=2;
			try { DebugEnterSubRule(108);
			try { DebugEnterDecision(108, decisionCanBacktrack[108]);
			int LA108_0 = input.LA(1);

			if (((LA108_0>=CASE && LA108_0<=CAST)||LA108_0==CONVERT||LA108_0==EXISTS||(LA108_0>=NOT && LA108_0<=NUMBER)||LA108_0==SIMPLE_FILE||(LA108_0>=STRING && LA108_0<=SYSTEMVAR)||LA108_0==TOKEN||LA108_0==VARIABLE||LA108_0==143))
			{
				alt108 = 1;
			}
			} finally { DebugExitDecision(108); }
			switch (alt108)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:386:13: expression WS
				{
				DebugLocation(386, 13);
				PushFollow(Follow._expression_in_case2474);
				expression300=expression();
				PopFollow();

				stream_expression.Add(expression300.Tree);
				DebugLocation(386, 24);
				WS301=(IToken)Match(input,WS,Follow._WS_in_case2476);  
				stream_WS.Add(WS301);


				}
				break;

			}
			} finally { DebugExitSubRule(108); }

			DebugLocation(386, 29);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:386:29: ( case_when WS )*
			try { DebugEnterSubRule(109);
			while (true)
			{
				int alt109=2;
				try { DebugEnterDecision(109, decisionCanBacktrack[109]);
				int LA109_0 = input.LA(1);

				if ((LA109_0==WHEN))
				{
					alt109 = 1;
				}


				} finally { DebugExitDecision(109); }
				switch ( alt109 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:386:30: case_when WS
					{
					DebugLocation(386, 30);
					PushFollow(Follow._case_when_in_case2481);
					case_when302=case_when();
					PopFollow();

					stream_case_when.Add(case_when302.Tree);
					DebugLocation(386, 40);
					WS303=(IToken)Match(input,WS,Follow._WS_in_case2483);  
					stream_WS.Add(WS303);


					}
					break;

				default:
					goto loop109;
				}
			}

			loop109:
				;

			} finally { DebugExitSubRule(109); }

			DebugLocation(386, 45);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:386:45: ( case_else WS )?
			int alt110=2;
			try { DebugEnterSubRule(110);
			try { DebugEnterDecision(110, decisionCanBacktrack[110]);
			int LA110_0 = input.LA(1);

			if ((LA110_0==ELSE))
			{
				alt110 = 1;
			}
			} finally { DebugExitDecision(110); }
			switch (alt110)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:386:46: case_else WS
				{
				DebugLocation(386, 46);
				PushFollow(Follow._case_else_in_case2488);
				case_else304=case_else();
				PopFollow();

				stream_case_else.Add(case_else304.Tree);
				DebugLocation(386, 56);
				WS305=(IToken)Match(input,WS,Follow._WS_in_case2490);  
				stream_WS.Add(WS305);


				}
				break;

			}
			} finally { DebugExitSubRule(110); }

			DebugLocation(386, 61);
			END306=(IToken)Match(input,END,Follow._END_in_case2494);  
			stream_END.Add(END306);



			{
			// AST REWRITE
			// elements: expression, case_else, case_when
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 387:2: -> ^( T_CASE ( expression )? ( case_when )* ( case_else )? )
			{
				DebugLocation(387, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:387:5: ^( T_CASE ( expression )? ( case_when )* ( case_else )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(387, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CASE, "T_CASE"), root_1);

				DebugLocation(387, 14);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:387:14: ( expression )?
				if (stream_expression.HasNext)
				{
					DebugLocation(387, 14);
					adaptor.AddChild(root_1, stream_expression.NextTree());

				}
				stream_expression.Reset();
				DebugLocation(387, 26);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:387:26: ( case_when )*
				while ( stream_case_when.HasNext )
				{
					DebugLocation(387, 26);
					adaptor.AddChild(root_1, stream_case_when.NextTree());

				}
				stream_case_when.Reset();
				DebugLocation(387, 37);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:387:37: ( case_else )?
				if (stream_case_else.HasNext)
				{
					DebugLocation(387, 37);
					adaptor.AddChild(root_1, stream_case_else.NextTree());

				}
				stream_case_else.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("case", 52);
			LeaveRule("case", 52);
			LeaveRule_case();
	    }
	 	DebugLocation(388, 1);
		} finally { DebugExitRule(GrammarFileName, "case"); }
		return retval;

	}
	// $ANTLR end "case"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_case_when() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_case_when() {}

	// $ANTLR start "case_when"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:390:1: case_when : WHEN WS a= expression WS THEN WS b= expression -> ^( T_CASE_WHEN $a $b) ;
	[GrammarRule("case_when")]
	private AstParserRuleReturnScope<object, IToken> case_when()
	{
		EnterRule_case_when();
		EnterRule("case_when", 53);
		TraceIn("case_when", 53);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WHEN307 = default(IToken);
	    IToken WS308 = default(IToken);
	    IToken WS309 = default(IToken);
	    IToken THEN310 = default(IToken);
	    IToken WS311 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);

	    object WHEN307_tree = default(object);
	    object WS308_tree = default(object);
	    object WS309_tree = default(object);
	    object THEN310_tree = default(object);
	    object WS311_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_THEN=new RewriteRuleITokenStream(adaptor,"token THEN");
	    RewriteRuleITokenStream stream_WHEN=new RewriteRuleITokenStream(adaptor,"token WHEN");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "case_when");
		DebugLocation(390, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:391:2: ( WHEN WS a= expression WS THEN WS b= expression -> ^( T_CASE_WHEN $a $b) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:391:4: WHEN WS a= expression WS THEN WS b= expression
			{
			DebugLocation(391, 4);
			WHEN307=(IToken)Match(input,WHEN,Follow._WHEN_in_case_when2522);  
			stream_WHEN.Add(WHEN307);

			DebugLocation(391, 9);
			WS308=(IToken)Match(input,WS,Follow._WS_in_case_when2524);  
			stream_WS.Add(WS308);

			DebugLocation(391, 13);
			PushFollow(Follow._expression_in_case_when2528);
			a=expression();
			PopFollow();

			stream_expression.Add(a.Tree);
			DebugLocation(391, 25);
			WS309=(IToken)Match(input,WS,Follow._WS_in_case_when2530);  
			stream_WS.Add(WS309);

			DebugLocation(391, 28);
			THEN310=(IToken)Match(input,THEN,Follow._THEN_in_case_when2532);  
			stream_THEN.Add(THEN310);

			DebugLocation(391, 33);
			WS311=(IToken)Match(input,WS,Follow._WS_in_case_when2534);  
			stream_WS.Add(WS311);

			DebugLocation(391, 37);
			PushFollow(Follow._expression_in_case_when2538);
			b=expression();
			PopFollow();

			stream_expression.Add(b.Tree);


			{
			// AST REWRITE
			// elements: b, a
			// token labels: 
			// rule labels: retval, b, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 392:2: -> ^( T_CASE_WHEN $a $b)
			{
				DebugLocation(392, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:392:5: ^( T_CASE_WHEN $a $b)
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(392, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CASE_WHEN, "T_CASE_WHEN"), root_1);

				DebugLocation(392, 20);
				adaptor.AddChild(root_1, stream_a.NextTree());
				DebugLocation(392, 23);
				adaptor.AddChild(root_1, stream_b.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("case_when", 53);
			LeaveRule("case_when", 53);
			LeaveRule_case_when();
	    }
	 	DebugLocation(393, 1);
		} finally { DebugExitRule(GrammarFileName, "case_when"); }
		return retval;

	}
	// $ANTLR end "case_when"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_case_else() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_case_else() {}

	// $ANTLR start "case_else"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:395:1: case_else : ELSE WS expression -> ^( T_CASE_ELSE expression ) ;
	[GrammarRule("case_else")]
	private AstParserRuleReturnScope<object, IToken> case_else()
	{
		EnterRule_case_else();
		EnterRule("case_else", 54);
		TraceIn("case_else", 54);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken ELSE312 = default(IToken);
	    IToken WS313 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression314 = default(AstParserRuleReturnScope<object, IToken>);

	    object ELSE312_tree = default(object);
	    object WS313_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_ELSE=new RewriteRuleITokenStream(adaptor,"token ELSE");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "case_else");
		DebugLocation(395, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:396:2: ( ELSE WS expression -> ^( T_CASE_ELSE expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:396:4: ELSE WS expression
			{
			DebugLocation(396, 4);
			ELSE312=(IToken)Match(input,ELSE,Follow._ELSE_in_case_else2563);  
			stream_ELSE.Add(ELSE312);

			DebugLocation(396, 9);
			WS313=(IToken)Match(input,WS,Follow._WS_in_case_else2565);  
			stream_WS.Add(WS313);

			DebugLocation(396, 12);
			PushFollow(Follow._expression_in_case_else2567);
			expression314=expression();
			PopFollow();

			stream_expression.Add(expression314.Tree);


			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 397:2: -> ^( T_CASE_ELSE expression )
			{
				DebugLocation(397, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:397:5: ^( T_CASE_ELSE expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(397, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CASE_ELSE, "T_CASE_ELSE"), root_1);

				DebugLocation(397, 19);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("case_else", 54);
			LeaveRule("case_else", 54);
			LeaveRule_case_else();
	    }
	 	DebugLocation(398, 1);
		} finally { DebugExitRule(GrammarFileName, "case_else"); }
		return retval;

	}
	// $ANTLR end "case_else"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _WS_in_parse336 = new BitSet(new ulong[]{0x30000000140000UL,0x8000000000000000UL});
		public static readonly BitSet _commands_in_parse340 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_parse342 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_parse347 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _command_in_commands370 = new BitSet(new ulong[]{0x30000000140002UL,0x8000000000000000UL,0x400040UL});
		public static readonly BitSet _WS_in_commands373 = new BitSet(new ulong[]{0x30000000140000UL,0x8000000000000000UL,0x400000UL});
		public static readonly BitSet _150_in_commands377 = new BitSet(new ulong[]{0x30000000140000UL,0x8000000000000000UL,0x40UL});
		public static readonly BitSet _WS_in_commands379 = new BitSet(new ulong[]{0x30000000140000UL,0x8000000000000000UL});
		public static readonly BitSet _command_in_commands384 = new BitSet(new ulong[]{0x30000000140002UL,0x8000000000000000UL,0x400040UL});
		public static readonly BitSet _WS_in_commands389 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000UL});
		public static readonly BitSet _150_in_commands392 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _select_command_in_command412 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _use_command_in_command417 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declare_command_in_command422 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_command_in_command427 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _create_view_command_in_command432 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SELECT_in_select_command446 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_select_command449 = new BitSet(new ulong[]{0x800020UL});
		public static readonly BitSet _distinct_clause_in_select_command451 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_select_command456 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _top_clause_in_select_command458 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_select_command462 = new BitSet(new ulong[]{0x134018000802C000UL,0x0UL,0x28002UL});
		public static readonly BitSet _column_list_in_select_command464 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_select_command467 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _into_clause_in_select_command469 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_select_command474 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _from_clause_in_select_command476 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_select_command481 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _where_clause_in_select_command483 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_select_command488 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _groupby_clause_in_select_command490 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_select_command495 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _orderby_clause_in_select_command497 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DISTINCT_in_distinct_clause542 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ALL_in_distinct_clause551 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOP_in_top_clause567 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_top_clause569 = new BitSet(new ulong[]{0x134018000802C000UL,0x0UL,0x8002UL});
		public static readonly BitSet _expression_in_top_clause571 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _column_in_column_list593 = new BitSet(new ulong[]{0x2UL,0x0UL,0x80040UL});
		public static readonly BitSet _WS_in_column_list596 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _147_in_column_list599 = new BitSet(new ulong[]{0x134018000802C000UL,0x0UL,0x28042UL});
		public static readonly BitSet _WS_in_column_list601 = new BitSet(new ulong[]{0x134018000802C000UL,0x0UL,0x28002UL});
		public static readonly BitSet _column_in_column_list604 = new BitSet(new ulong[]{0x2UL,0x0UL,0x80040UL});
		public static readonly BitSet _145_in_column628 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_column642 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_column645 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _SIMPLE_FILE_in_column647 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INTO_in_into_clause670 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_into_clause672 = new BitSet(new ulong[]{0x40000000000000UL,0x0UL,0x20000000UL});
		public static readonly BitSet _file_in_into_clause674 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FROM_in_from_clause694 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_from_clause696 = new BitSet(new ulong[]{0x1140000000000000UL,0x0UL,0x20008000UL});
		public static readonly BitSet _from_clause_item_in_from_clause698 = new BitSet(new ulong[]{0x2UL,0x0UL,0x80040UL});
		public static readonly BitSet _WS_in_from_clause701 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _147_in_from_clause704 = new BitSet(new ulong[]{0x1140000000000000UL,0x0UL,0x20008040UL});
		public static readonly BitSet _WS_in_from_clause706 = new BitSet(new ulong[]{0x1140000000000000UL,0x0UL,0x20008000UL});
		public static readonly BitSet _from_clause_item_in_from_clause709 = new BitSet(new ulong[]{0x2UL,0x0UL,0x80040UL});
		public static readonly BitSet _STRING_in_from_clause_item732 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _file_in_from_clause_item745 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _subquery_in_from_clause_item750 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _view_name_in_from_clause_item755 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _143_in_subquery767 = new BitSet(new ulong[]{0x10000000000000UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_subquery769 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _select_command_in_subquery772 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10040UL});
		public static readonly BitSet _WS_in_subquery774 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _144_in_subquery777 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _157_in_file796 = new BitSet(new ulong[]{0x100000000000000UL,0x0UL,0x42UL});
		public static readonly BitSet _WS_in_file798 = new BitSet(new ulong[]{0x100000000000000UL,0x0UL,0x2UL});
		public static readonly BitSet _file_spec_in_file801 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000040UL});
		public static readonly BitSet _WS_in_file804 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000UL});
		public static readonly BitSet _file_option_in_file806 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000040UL});
		public static readonly BitSet _WS_in_file810 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _158_in_file813 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SIMPLE_FILE_in_file830 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_file_spec849 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VARIABLE_in_file_spec858 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _148_in_file_option878 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _file_option_name_in_file_option880 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4000040UL});
		public static readonly BitSet _WS_in_file_option884 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _154_in_file_option887 = new BitSet(new ulong[]{0x1100100000000000UL,0x0UL,0x42UL});
		public static readonly BitSet _WS_in_file_option889 = new BitSet(new ulong[]{0x1100100000000000UL,0x0UL,0x2UL});
		public static readonly BitSet _file_option_value_in_file_option892 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_file_option_name916 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_file_option_value928 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_file_option_value932 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_file_option_value936 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_in_file_option_value940 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHERE_in_where_clause952 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_where_clause954 = new BitSet(new ulong[]{0x134018000802C000UL,0x0UL,0x8002UL});
		public static readonly BitSet _expression_in_where_clause956 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GROUP_in_groupby_clause975 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_groupby_clause977 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _BY_in_groupby_clause979 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_groupby_clause981 = new BitSet(new ulong[]{0x134018000802C000UL,0x0UL,0x8002UL});
		public static readonly BitSet _expression_list_in_groupby_clause983 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ORDER_in_orderby_clause1004 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_orderby_clause1006 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _BY_in_orderby_clause1008 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_orderby_clause1010 = new BitSet(new ulong[]{0x134018000802C000UL,0x0UL,0x8002UL});
		public static readonly BitSet _orderby_column_list_in_orderby_clause1012 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _orderby_column_in_orderby_column_list1033 = new BitSet(new ulong[]{0x2UL,0x0UL,0x80040UL});
		public static readonly BitSet _WS_in_orderby_column_list1036 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _147_in_orderby_column_list1039 = new BitSet(new ulong[]{0x134018000802C000UL,0x0UL,0x8042UL});
		public static readonly BitSet _WS_in_orderby_column_list1041 = new BitSet(new ulong[]{0x134018000802C000UL,0x0UL,0x8002UL});
		public static readonly BitSet _orderby_column_in_orderby_column_list1044 = new BitSet(new ulong[]{0x2UL,0x0UL,0x80040UL});
		public static readonly BitSet _expression_in_orderby_column1064 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_orderby_column1067 = new BitSet(new ulong[]{0x200200UL});
		public static readonly BitSet _orderby_direction_in_orderby_column1069 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASC_in_orderby_direction1094 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DESC_in_orderby_direction1103 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _USE_in_use_command1121 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_use_command1123 = new BitSet(new ulong[]{0x40000000000000UL,0x0UL,0x20000000UL});
		public static readonly BitSet _file_in_use_command1125 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DECLARE_in_declare_command1147 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_declare_command1149 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2UL});
		public static readonly BitSet _declaration_in_declare_command1151 = new BitSet(new ulong[]{0x2UL,0x0UL,0x80040UL});
		public static readonly BitSet _WS_in_declare_command1154 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _147_in_declare_command1157 = new BitSet(new ulong[]{0x0UL,0x0UL,0x42UL});
		public static readonly BitSet _WS_in_declare_command1159 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2UL});
		public static readonly BitSet _declaration_in_declare_command1162 = new BitSet(new ulong[]{0x2UL,0x0UL,0x80040UL});
		public static readonly BitSet _variable_in_declaration1186 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_declaration1188 = new BitSet(new ulong[]{0x1000000000000100UL});
		public static readonly BitSet _AS_in_declaration1191 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_declaration1193 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _datatype_in_declaration1197 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CREATE_in_create_view_command1222 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_create_view_command1224 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4UL});
		public static readonly BitSet _VIEW_in_create_view_command1226 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_create_view_command1228 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _view_name_in_create_view_command1230 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_create_view_command1232 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _AS_in_create_view_command1234 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_create_view_command1236 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _select_command_in_create_view_command1238 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_view_name1261 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SET_in_set_command1285 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_set_command1287 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2UL});
		public static readonly BitSet _variable_in_set_command1289 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000040UL});
		public static readonly BitSet _WS_in_set_command1291 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _154_in_set_command1294 = new BitSet(new ulong[]{0x134018000802C000UL,0x0UL,0x8042UL});
		public static readonly BitSet _WS_in_set_command1296 = new BitSet(new ulong[]{0x134018000802C000UL,0x0UL,0x8002UL});
		public static readonly BitSet _expression_in_set_command1299 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_expression_list1324 = new BitSet(new ulong[]{0x2UL,0x0UL,0x80040UL});
		public static readonly BitSet _WS_in_expression_list1327 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _147_in_expression_list1330 = new BitSet(new ulong[]{0x134018000802C000UL,0x0UL,0x8042UL});
		public static readonly BitSet _WS_in_expression_list1332 = new BitSet(new ulong[]{0x134018000802C000UL,0x0UL,0x8002UL});
		public static readonly BitSet _expression_in_expression_list1335 = new BitSet(new ulong[]{0x2UL,0x0UL,0x80040UL});
		public static readonly BitSet _expression_list_in_expression_list_or_select_command1358 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _select_command_in_expression_list_or_select_command1362 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_7_in_expression1374 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_6_in_expression_71390 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_expression_71397 = new BitSet(new ulong[]{0x4A8400000800UL,0x0UL,0x1F801C00UL});
		public static readonly BitSet _op_7_in_expression_71402 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_expression_71404 = new BitSet(new ulong[]{0x134018000802C000UL,0x0UL,0x8002UL});
		public static readonly BitSet _expression_6_in_expression_71408 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40UL});
		public static readonly BitSet _IN_in_expression_71427 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8040UL});
		public static readonly BitSet _WS_in_expression_71429 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000UL});
		public static readonly BitSet _143_in_expression_71432 = new BitSet(new ulong[]{0x135018000802C000UL,0x0UL,0x8042UL});
		public static readonly BitSet _WS_in_expression_71434 = new BitSet(new ulong[]{0x135018000802C000UL,0x0UL,0x8002UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_71437 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10040UL});
		public static readonly BitSet _WS_in_expression_71439 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _144_in_expression_71442 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40UL});
		public static readonly BitSet _NOT_in_expression_71460 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_expression_71462 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _IN_in_expression_71464 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8040UL});
		public static readonly BitSet _WS_in_expression_71466 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000UL});
		public static readonly BitSet _143_in_expression_71469 = new BitSet(new ulong[]{0x135018000802C000UL,0x0UL,0x8042UL});
		public static readonly BitSet _WS_in_expression_71471 = new BitSet(new ulong[]{0x135018000802C000UL,0x0UL,0x8002UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_71475 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10040UL});
		public static readonly BitSet _WS_in_expression_71478 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _144_in_expression_71481 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40UL});
		public static readonly BitSet _op_4_in_expression_71499 = new BitSet(new ulong[]{0x80000000000080UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_expression_71501 = new BitSet(new ulong[]{0x80000000000080UL});
		public static readonly BitSet _SOME_in_expression_71505 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8040UL});
		public static readonly BitSet _ANY_in_expression_71509 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8040UL});
		public static readonly BitSet _WS_in_expression_71512 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000UL});
		public static readonly BitSet _143_in_expression_71515 = new BitSet(new ulong[]{0x135018000802C000UL,0x0UL,0x8002UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_71517 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _144_in_expression_71519 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40UL});
		public static readonly BitSet _op_4_in_expression_71539 = new BitSet(new ulong[]{0x20UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_expression_71541 = new BitSet(new ulong[]{0x20UL});
		public static readonly BitSet _ALL_in_expression_71544 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8040UL});
		public static readonly BitSet _WS_in_expression_71546 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000UL});
		public static readonly BitSet _143_in_expression_71549 = new BitSet(new ulong[]{0x135018000802C000UL,0x0UL,0x8002UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_71551 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _144_in_expression_71553 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40UL});
		public static readonly BitSet _OR_in_op_71583 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LIKE_in_op_71592 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_71601 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_op_71603 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _LIKE_in_op_71605 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MATCH_in_op_71614 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_71623 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_op_71625 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _MATCH_in_op_71627 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BETWEEN_in_op_71636 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_71645 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_op_71647 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _BETWEEN_in_op_71649 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_5_in_expression_61668 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_expression_61675 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _op_6_in_expression_61677 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_expression_61679 = new BitSet(new ulong[]{0x134018000802C000UL,0x0UL,0x8002UL});
		public static readonly BitSet _expression_5_in_expression_61683 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40UL});
		public static readonly BitSet _AND_in_op_61711 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _op_5_in_expression_51729 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_expression_51731 = new BitSet(new ulong[]{0x134018000802C000UL,0x0UL,0x8002UL});
		public static readonly BitSet _expression_5_in_expression_51733 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_4_in_expression_51748 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_51759 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_3_in_expression_41778 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1F801C40UL});
		public static readonly BitSet _WS_in_expression_41785 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1F801C00UL});
		public static readonly BitSet _op_4_in_expression_41788 = new BitSet(new ulong[]{0x134010000802C000UL,0x0UL,0x8042UL});
		public static readonly BitSet _WS_in_expression_41790 = new BitSet(new ulong[]{0x134010000802C000UL,0x0UL,0x8002UL});
		public static readonly BitSet _expression_3_in_expression_41795 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1F801C40UL});
		public static readonly BitSet _154_in_op_41821 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _156_in_op_41830 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _152_in_op_41840 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _153_in_op_41850 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _139_in_op_41859 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _140_in_op_41868 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _138_in_op_41877 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _155_in_op_41886 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _151_in_op_41896 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_2_in_expression_31915 = new BitSet(new ulong[]{0x2UL,0x0UL,0x180144040UL});
		public static readonly BitSet _WS_in_expression_31922 = new BitSet(new ulong[]{0x0UL,0x0UL,0x180144000UL});
		public static readonly BitSet _op_3_in_expression_31925 = new BitSet(new ulong[]{0x134010000802C000UL,0x0UL,0x8042UL});
		public static readonly BitSet _WS_in_expression_31927 = new BitSet(new ulong[]{0x134010000802C000UL,0x0UL,0x8002UL});
		public static readonly BitSet _expression_2_in_expression_31932 = new BitSet(new ulong[]{0x2UL,0x0UL,0x180144040UL});
		public static readonly BitSet _146_in_op_31958 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _148_in_op_31967 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _142_in_op_31976 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _160_in_op_31985 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _159_in_op_31994 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_1_in_expression_22016 = new BitSet(new ulong[]{0x2UL,0x0UL,0x222040UL});
		public static readonly BitSet _WS_in_expression_22023 = new BitSet(new ulong[]{0x0UL,0x0UL,0x222000UL});
		public static readonly BitSet _op_2_in_expression_22026 = new BitSet(new ulong[]{0x134010000802C000UL,0x0UL,0x8042UL});
		public static readonly BitSet _WS_in_expression_22028 = new BitSet(new ulong[]{0x134010000802C000UL,0x0UL,0x8002UL});
		public static readonly BitSet _expression_1_in_expression_22033 = new BitSet(new ulong[]{0x2UL,0x0UL,0x222040UL});
		public static readonly BitSet _145_in_op_22059 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _149_in_op_22068 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _141_in_op_22077 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _143_in_expression_12095 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200140040UL});
		public static readonly BitSet _WS_in_expression_12097 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200140000UL});
		public static readonly BitSet _op_1_in_expression_12100 = new BitSet(new ulong[]{0x134010000802C000UL,0x0UL,0x8042UL});
		public static readonly BitSet _WS_in_expression_12102 = new BitSet(new ulong[]{0x134010000802C000UL,0x0UL,0x8002UL});
		public static readonly BitSet _expression_1_in_expression_12105 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10040UL});
		public static readonly BitSet _WS_in_expression_12107 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _144_in_expression_12110 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_atom_in_expression_12127 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _161_in_op_12137 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _146_in_op_12147 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _148_in_op_12156 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_expression_atom2171 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_expression_atom2184 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SYSTEMVAR_in_expression_atom2197 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VARIABLE_in_expression_atom2210 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _subquery_in_expression_atom2223 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _143_in_expression_atom2228 = new BitSet(new ulong[]{0x134018000802C000UL,0x0UL,0x8002UL});
		public static readonly BitSet _expression_in_expression_atom2230 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _144_in_expression_atom2232 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functioncall_or_column_in_expression_atom2241 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conversion_in_expression_atom2246 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _case_in_expression_atom2251 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXISTS_in_expression_atom2256 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8040UL});
		public static readonly BitSet _WS_in_expression_atom2258 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000UL});
		public static readonly BitSet _143_in_expression_atom2261 = new BitSet(new ulong[]{0x10000000000000UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_expression_atom2263 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _select_command_in_expression_atom2266 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10040UL});
		public static readonly BitSet _WS_in_expression_atom2268 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _144_in_expression_atom2271 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_functioncall_or_column2291 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8040UL});
		public static readonly BitSet _WS_in_functioncall_or_column2293 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000UL});
		public static readonly BitSet _143_in_functioncall_or_column2296 = new BitSet(new ulong[]{0x134018000802C000UL,0x0UL,0x18042UL});
		public static readonly BitSet _WS_in_functioncall_or_column2298 = new BitSet(new ulong[]{0x134018000802C000UL,0x0UL,0x18002UL});
		public static readonly BitSet _expression_in_functioncall_or_column2302 = new BitSet(new ulong[]{0x0UL,0x0UL,0x90040UL});
		public static readonly BitSet _WS_in_functioncall_or_column2304 = new BitSet(new ulong[]{0x0UL,0x0UL,0x90000UL});
		public static readonly BitSet _147_in_functioncall_or_column2308 = new BitSet(new ulong[]{0x134018000802C000UL,0x0UL,0x8042UL});
		public static readonly BitSet _WS_in_functioncall_or_column2310 = new BitSet(new ulong[]{0x134018000802C000UL,0x0UL,0x8002UL});
		public static readonly BitSet _expression_in_functioncall_or_column2313 = new BitSet(new ulong[]{0x0UL,0x0UL,0x90040UL});
		public static readonly BitSet _WS_in_functioncall_or_column2315 = new BitSet(new ulong[]{0x0UL,0x0UL,0x90000UL});
		public static readonly BitSet _144_in_functioncall_or_column2322 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SIMPLE_FILE_in_functioncall_or_column2340 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CONVERT_in_conversion2360 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8040UL});
		public static readonly BitSet _WS_in_conversion2362 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000UL});
		public static readonly BitSet _143_in_conversion2365 = new BitSet(new ulong[]{0x1000000000000000UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_conversion2367 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _TOKEN_in_conversion2370 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80040UL});
		public static readonly BitSet _WS_in_conversion2372 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _147_in_conversion2375 = new BitSet(new ulong[]{0x134018000802C000UL,0x0UL,0x8042UL});
		public static readonly BitSet _WS_in_conversion2377 = new BitSet(new ulong[]{0x134018000802C000UL,0x0UL,0x8002UL});
		public static readonly BitSet _expression_in_conversion2380 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10040UL});
		public static readonly BitSet _WS_in_conversion2382 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _144_in_conversion2385 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CAST_in_conversion2400 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8040UL});
		public static readonly BitSet _WS_in_conversion2402 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000UL});
		public static readonly BitSet _143_in_conversion2405 = new BitSet(new ulong[]{0x134018000802C000UL,0x0UL,0x8042UL});
		public static readonly BitSet _WS_in_conversion2407 = new BitSet(new ulong[]{0x134018000802C000UL,0x0UL,0x8002UL});
		public static readonly BitSet _expression_in_conversion2410 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_conversion2412 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _AS_in_conversion2414 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_conversion2416 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _datatype_in_conversion2418 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10040UL});
		public static readonly BitSet _WS_in_conversion2420 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _144_in_conversion2423 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_datatype2445 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VARIABLE_in_variable2457 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CASE_in_case2469 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_case2471 = new BitSet(new ulong[]{0x134018000E02C000UL,0x0UL,0x8012UL});
		public static readonly BitSet _expression_in_case2474 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_case2476 = new BitSet(new ulong[]{0x6000000UL,0x0UL,0x10UL});
		public static readonly BitSet _case_when_in_case2481 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_case2483 = new BitSet(new ulong[]{0x6000000UL,0x0UL,0x10UL});
		public static readonly BitSet _case_else_in_case2488 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_case2490 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _END_in_case2494 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHEN_in_case_when2522 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_case_when2524 = new BitSet(new ulong[]{0x134018000802C000UL,0x0UL,0x8002UL});
		public static readonly BitSet _expression_in_case_when2528 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_case_when2530 = new BitSet(new ulong[]{0x800000000000000UL});
		public static readonly BitSet _THEN_in_case_when2532 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_case_when2534 = new BitSet(new ulong[]{0x134018000802C000UL,0x0UL,0x8002UL});
		public static readonly BitSet _expression_in_case_when2538 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ELSE_in_case_else2563 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_case_else2565 = new BitSet(new ulong[]{0x134018000802C000UL,0x0UL,0x8002UL});
		public static readonly BitSet _expression_in_case_else2567 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  FxGqlLib 
