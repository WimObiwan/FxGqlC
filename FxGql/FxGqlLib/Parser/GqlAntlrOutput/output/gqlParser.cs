//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g 2012-06-01 16:06:15

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591


// `XXX' does not need a CLSCompliant attribute because the assembly is not marked as CLS-compliant (CS3021)
#pragma warning disable 3021
// The private field `XXX' is assigned but its value is never used (CS0414)
#pragma warning disable 414


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  FxGqlLib 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class gqlParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "A", "ALL", "AND", "ANY", "AS", "ASC", "B", "BETWEEN", "BY", "C", "CASE", "CAST", "COMMENT_LINE", "CONVERT", "D", "DESC", "DIGIT", "DISTINCT", "E", "ELSE", "END", "EXISTS", "F", "FROM", "G", "GROUP", "H", "I", "IN", "INTO", "J", "K", "L", "LIKE", "M", "MATCH", "N", "NOT", "NUMBER", "O", "OR", "ORDER", "P", "Q", "R", "S", "SELECT", "SIMPLE_FILE", "SOME", "STRING", "SYSTEMVAR", "T", "THEN", "TOKEN", "TOP", "T_ALL", "T_AND", "T_ANY", "T_BETWEEN", "T_BITWISE_AND", "T_BITWISE_NOT", "T_BITWISE_OR", "T_BITWISE_XOR", "T_CASE", "T_CASE_ELSE", "T_CASE_WHEN", "T_COLUMN", "T_COLUMNLIST", "T_CONVERT", "T_DISTINCT", "T_DIVIDE", "T_EQUAL", "T_EXISTS", "T_EXPRESSIONLIST", "T_FILE", "T_FILEOPTION", "T_FROM", "T_FUNCTIONCALL", "T_GREATER", "T_GROUPBY", "T_IN", "T_INTEGER", "T_INTO", "T_LESS", "T_LIKE", "T_MATCH", "T_MINUS", "T_MODULO", "T_NOT", "T_NOTBETWEEN", "T_NOTEQUAL", "T_NOTGREATER", "T_NOTIN", "T_NOTLESS", "T_NOTLIKE", "T_NOTMATCH", "T_OP_BINARY", "T_OP_UNARY", "T_OR", "T_ORDERBY", "T_ORDERBY_ASC", "T_ORDERBY_COLUMN", "T_ORDERBY_DESC", "T_PLUS", "T_PRODUCT", "T_ROOT", "T_SELECT", "T_STRING", "T_SUBQUERY", "T_SYSTEMVAR", "T_TOP", "T_USE", "T_WHERE", "U", "USE", "V", "W", "WHEN", "WHERE", "WS", "X", "Y", "Z", "'!<'", "'!='", "'!>'", "'%'", "'&'", "'('", "')'", "'*'", "'+'", "','", "'-'", "'/'", "';'", "'<'", "'<='", "'<>'", "'='", "'>'", "'>='", "'['", "']'", "'^'", "'|'", "'~'"
	};
	public const int EOF=-1;
	public const int T__127=127;
	public const int T__128=128;
	public const int T__129=129;
	public const int T__130=130;
	public const int T__131=131;
	public const int T__132=132;
	public const int T__133=133;
	public const int T__134=134;
	public const int T__135=135;
	public const int T__136=136;
	public const int T__137=137;
	public const int T__138=138;
	public const int T__139=139;
	public const int T__140=140;
	public const int T__141=141;
	public const int T__142=142;
	public const int T__143=143;
	public const int T__144=144;
	public const int T__145=145;
	public const int T__146=146;
	public const int T__147=147;
	public const int T__148=148;
	public const int T__149=149;
	public const int T__150=150;
	public const int A=4;
	public const int ALL=5;
	public const int AND=6;
	public const int ANY=7;
	public const int AS=8;
	public const int ASC=9;
	public const int B=10;
	public const int BETWEEN=11;
	public const int BY=12;
	public const int C=13;
	public const int CASE=14;
	public const int CAST=15;
	public const int COMMENT_LINE=16;
	public const int CONVERT=17;
	public const int D=18;
	public const int DESC=19;
	public const int DIGIT=20;
	public const int DISTINCT=21;
	public const int E=22;
	public const int ELSE=23;
	public const int END=24;
	public const int EXISTS=25;
	public const int F=26;
	public const int FROM=27;
	public const int G=28;
	public const int GROUP=29;
	public const int H=30;
	public const int I=31;
	public const int IN=32;
	public const int INTO=33;
	public const int J=34;
	public const int K=35;
	public const int L=36;
	public const int LIKE=37;
	public const int M=38;
	public const int MATCH=39;
	public const int N=40;
	public const int NOT=41;
	public const int NUMBER=42;
	public const int O=43;
	public const int OR=44;
	public const int ORDER=45;
	public const int P=46;
	public const int Q=47;
	public const int R=48;
	public const int S=49;
	public const int SELECT=50;
	public const int SIMPLE_FILE=51;
	public const int SOME=52;
	public const int STRING=53;
	public const int SYSTEMVAR=54;
	public const int T=55;
	public const int THEN=56;
	public const int TOKEN=57;
	public const int TOP=58;
	public const int T_ALL=59;
	public const int T_AND=60;
	public const int T_ANY=61;
	public const int T_BETWEEN=62;
	public const int T_BITWISE_AND=63;
	public const int T_BITWISE_NOT=64;
	public const int T_BITWISE_OR=65;
	public const int T_BITWISE_XOR=66;
	public const int T_CASE=67;
	public const int T_CASE_ELSE=68;
	public const int T_CASE_WHEN=69;
	public const int T_COLUMN=70;
	public const int T_COLUMNLIST=71;
	public const int T_CONVERT=72;
	public const int T_DISTINCT=73;
	public const int T_DIVIDE=74;
	public const int T_EQUAL=75;
	public const int T_EXISTS=76;
	public const int T_EXPRESSIONLIST=77;
	public const int T_FILE=78;
	public const int T_FILEOPTION=79;
	public const int T_FROM=80;
	public const int T_FUNCTIONCALL=81;
	public const int T_GREATER=82;
	public const int T_GROUPBY=83;
	public const int T_IN=84;
	public const int T_INTEGER=85;
	public const int T_INTO=86;
	public const int T_LESS=87;
	public const int T_LIKE=88;
	public const int T_MATCH=89;
	public const int T_MINUS=90;
	public const int T_MODULO=91;
	public const int T_NOT=92;
	public const int T_NOTBETWEEN=93;
	public const int T_NOTEQUAL=94;
	public const int T_NOTGREATER=95;
	public const int T_NOTIN=96;
	public const int T_NOTLESS=97;
	public const int T_NOTLIKE=98;
	public const int T_NOTMATCH=99;
	public const int T_OP_BINARY=100;
	public const int T_OP_UNARY=101;
	public const int T_OR=102;
	public const int T_ORDERBY=103;
	public const int T_ORDERBY_ASC=104;
	public const int T_ORDERBY_COLUMN=105;
	public const int T_ORDERBY_DESC=106;
	public const int T_PLUS=107;
	public const int T_PRODUCT=108;
	public const int T_ROOT=109;
	public const int T_SELECT=110;
	public const int T_STRING=111;
	public const int T_SUBQUERY=112;
	public const int T_SYSTEMVAR=113;
	public const int T_TOP=114;
	public const int T_USE=115;
	public const int T_WHERE=116;
	public const int U=117;
	public const int USE=118;
	public const int V=119;
	public const int W=120;
	public const int WHEN=121;
	public const int WHERE=122;
	public const int WS=123;
	public const int X=124;
	public const int Y=125;
	public const int Z=126;

	#if ANTLR_DEBUG
		private static readonly bool[] decisionCanBacktrack =
			new bool[]
			{
				false, // invalid decision
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false
			};
	#else
		private static readonly bool[] decisionCanBacktrack = new bool[0];
	#endif
	public gqlParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public gqlParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}
	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return gqlParser.tokenNames; } }
	public override string GrammarFileName { get { return "C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g"; } }


	[Conditional("ANTLR_TRACE")]
	protected virtual void OnCreated() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

	#region Rules

	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_parse() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_parse() {}

	// $ANTLR start "parse"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:89:1: parse : ( WS )? ( commands ( WS )? )? EOF -> ^( T_ROOT ( commands )? ) ;
	[GrammarRule("parse")]
	private AstParserRuleReturnScope<object, IToken> parse()
	{
		EnterRule_parse();
		EnterRule("parse", 1);
		TraceIn("parse", 1);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS1 = default(IToken);
	    IToken WS3 = default(IToken);
	    IToken EOF4 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> commands2 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS1_tree = default(object);
	    object WS3_tree = default(object);
	    object EOF4_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
	    RewriteRuleSubtreeStream stream_commands=new RewriteRuleSubtreeStream(adaptor,"rule commands");
		try { DebugEnterRule(GrammarFileName, "parse");
		DebugLocation(89, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:90:2: ( ( WS )? ( commands ( WS )? )? EOF -> ^( T_ROOT ( commands )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:90:4: ( WS )? ( commands ( WS )? )? EOF
			{
			DebugLocation(90, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:90:4: ( WS )?
			int alt1=2;
			try { DebugEnterSubRule(1);
			try { DebugEnterDecision(1, decisionCanBacktrack[1]);
			int LA1_0 = input.LA(1);

			if ((LA1_0==WS))
			{
				alt1 = 1;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:90:4: WS
				{
				DebugLocation(90, 4);
				WS1=(IToken)Match(input,WS,Follow._WS_in_parse312);  
				stream_WS.Add(WS1);


				}
				break;

			}
			} finally { DebugExitSubRule(1); }

			DebugLocation(90, 8);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:90:8: ( commands ( WS )? )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, decisionCanBacktrack[3]);
			int LA3_0 = input.LA(1);

			if ((LA3_0==SELECT||LA3_0==USE))
			{
				alt3 = 1;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:90:9: commands ( WS )?
				{
				DebugLocation(90, 9);
				PushFollow(Follow._commands_in_parse316);
				commands2=commands();
				PopFollow();

				stream_commands.Add(commands2.Tree);
				DebugLocation(90, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:90:18: ( WS )?
				int alt2=2;
				try { DebugEnterSubRule(2);
				try { DebugEnterDecision(2, decisionCanBacktrack[2]);
				int LA2_0 = input.LA(1);

				if ((LA2_0==WS))
				{
					alt2 = 1;
				}
				} finally { DebugExitDecision(2); }
				switch (alt2)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:90:18: WS
					{
					DebugLocation(90, 18);
					WS3=(IToken)Match(input,WS,Follow._WS_in_parse318);  
					stream_WS.Add(WS3);


					}
					break;

				}
				} finally { DebugExitSubRule(2); }


				}
				break;

			}
			} finally { DebugExitSubRule(3); }

			DebugLocation(90, 24);
			EOF4=(IToken)Match(input,EOF,Follow._EOF_in_parse323);  
			stream_EOF.Add(EOF4);



			{
			// AST REWRITE
			// elements: commands
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 91:2: -> ^( T_ROOT ( commands )? )
			{
				DebugLocation(91, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:91:5: ^( T_ROOT ( commands )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(91, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_ROOT, "T_ROOT"), root_1);

				DebugLocation(91, 14);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:91:14: ( commands )?
				if (stream_commands.HasNext)
				{
					DebugLocation(91, 14);
					adaptor.AddChild(root_1, stream_commands.NextTree());

				}
				stream_commands.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parse", 1);
			LeaveRule("parse", 1);
			LeaveRule_parse();
	    }
	 	DebugLocation(92, 1);
		} finally { DebugExitRule(GrammarFileName, "parse"); }
		return retval;

	}
	// $ANTLR end "parse"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_commands() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_commands() {}

	// $ANTLR start "commands"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:94:1: commands : command ( ( WS )? ( ';' ( WS )? )? command )* -> ( command )+ ;
	[GrammarRule("commands")]
	private AstParserRuleReturnScope<object, IToken> commands()
	{
		EnterRule_commands();
		EnterRule("commands", 2);
		TraceIn("commands", 2);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS6 = default(IToken);
	    IToken char_literal7 = default(IToken);
	    IToken WS8 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> command5 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> command9 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS6_tree = default(object);
	    object char_literal7_tree = default(object);
	    object WS8_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_139=new RewriteRuleITokenStream(adaptor,"token 139");
	    RewriteRuleSubtreeStream stream_command=new RewriteRuleSubtreeStream(adaptor,"rule command");
		try { DebugEnterRule(GrammarFileName, "commands");
		DebugLocation(94, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:95:2: ( command ( ( WS )? ( ';' ( WS )? )? command )* -> ( command )+ )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:95:4: command ( ( WS )? ( ';' ( WS )? )? command )*
			{
			DebugLocation(95, 4);
			PushFollow(Follow._command_in_commands346);
			command5=command();
			PopFollow();

			stream_command.Add(command5.Tree);
			DebugLocation(95, 12);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:95:12: ( ( WS )? ( ';' ( WS )? )? command )*
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, decisionCanBacktrack[7]);
				int LA7_0 = input.LA(1);

				if ((LA7_0==WS))
				{
					int LA7_1 = input.LA(2);

					if ((LA7_1==SELECT||LA7_1==USE||LA7_1==139))
					{
						alt7 = 1;
					}


				}
				else if ((LA7_0==SELECT||LA7_0==USE||LA7_0==139))
				{
					alt7 = 1;
				}


				} finally { DebugExitDecision(7); }
				switch ( alt7 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:95:13: ( WS )? ( ';' ( WS )? )? command
					{
					DebugLocation(95, 13);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:95:13: ( WS )?
					int alt4=2;
					try { DebugEnterSubRule(4);
					try { DebugEnterDecision(4, decisionCanBacktrack[4]);
					int LA4_0 = input.LA(1);

					if ((LA4_0==WS))
					{
						alt4 = 1;
					}
					} finally { DebugExitDecision(4); }
					switch (alt4)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:95:13: WS
						{
						DebugLocation(95, 13);
						WS6=(IToken)Match(input,WS,Follow._WS_in_commands349);  
						stream_WS.Add(WS6);


						}
						break;

					}
					} finally { DebugExitSubRule(4); }

					DebugLocation(95, 17);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:95:17: ( ';' ( WS )? )?
					int alt6=2;
					try { DebugEnterSubRule(6);
					try { DebugEnterDecision(6, decisionCanBacktrack[6]);
					int LA6_0 = input.LA(1);

					if ((LA6_0==139))
					{
						alt6 = 1;
					}
					} finally { DebugExitDecision(6); }
					switch (alt6)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:95:18: ';' ( WS )?
						{
						DebugLocation(95, 18);
						char_literal7=(IToken)Match(input,139,Follow._139_in_commands353);  
						stream_139.Add(char_literal7);

						DebugLocation(95, 22);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:95:22: ( WS )?
						int alt5=2;
						try { DebugEnterSubRule(5);
						try { DebugEnterDecision(5, decisionCanBacktrack[5]);
						int LA5_0 = input.LA(1);

						if ((LA5_0==WS))
						{
							alt5 = 1;
						}
						} finally { DebugExitDecision(5); }
						switch (alt5)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:95:22: WS
							{
							DebugLocation(95, 22);
							WS8=(IToken)Match(input,WS,Follow._WS_in_commands355);  
							stream_WS.Add(WS8);


							}
							break;

						}
						} finally { DebugExitSubRule(5); }


						}
						break;

					}
					} finally { DebugExitSubRule(6); }

					DebugLocation(95, 28);
					PushFollow(Follow._command_in_commands360);
					command9=command();
					PopFollow();

					stream_command.Add(command9.Tree);

					}
					break;

				default:
					goto loop7;
				}
			}

			loop7:
				;

			} finally { DebugExitSubRule(7); }



			{
			// AST REWRITE
			// elements: command
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 96:2: -> ( command )+
			{
				DebugLocation(96, 5);
				if (!(stream_command.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_command.HasNext )
				{
					DebugLocation(96, 5);
					adaptor.AddChild(root_0, stream_command.NextTree());

				}
				stream_command.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("commands", 2);
			LeaveRule("commands", 2);
			LeaveRule_commands();
	    }
	 	DebugLocation(97, 1);
		} finally { DebugExitRule(GrammarFileName, "commands"); }
		return retval;

	}
	// $ANTLR end "commands"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_command() {}

	// $ANTLR start "command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:99:1: command : ( select_command | use_command );
	[GrammarRule("command")]
	private AstParserRuleReturnScope<object, IToken> command()
	{
		EnterRule_command();
		EnterRule("command", 3);
		TraceIn("command", 3);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> select_command10 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> use_command11 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "command");
		DebugLocation(99, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:100:2: ( select_command | use_command )
			int alt8=2;
			try { DebugEnterDecision(8, decisionCanBacktrack[8]);
			int LA8_0 = input.LA(1);

			if ((LA8_0==SELECT))
			{
				alt8 = 1;
			}
			else if ((LA8_0==USE))
			{
				alt8 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 8, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:100:4: select_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(100, 4);
				PushFollow(Follow._select_command_in_command380);
				select_command10=select_command();
				PopFollow();

				adaptor.AddChild(root_0, select_command10.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:101:4: use_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(101, 4);
				PushFollow(Follow._use_command_in_command385);
				use_command11=use_command();
				PopFollow();

				adaptor.AddChild(root_0, use_command11.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("command", 3);
			LeaveRule("command", 3);
			LeaveRule_command();
	    }
	 	DebugLocation(102, 1);
		} finally { DebugExitRule(GrammarFileName, "command"); }
		return retval;

	}
	// $ANTLR end "command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_select_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_select_command() {}

	// $ANTLR start "select_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:107:1: select_command : SELECT ( WS distinct_clause )? ( WS top_clause )? WS column_list ( WS into_clause )? ( WS from_clause )? ( WS where_clause )? ( WS groupby_clause )? ( WS orderby_clause )? -> ^( T_SELECT ( distinct_clause )? ( top_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( orderby_clause )? ) ;
	[GrammarRule("select_command")]
	private AstParserRuleReturnScope<object, IToken> select_command()
	{
		EnterRule_select_command();
		EnterRule("select_command", 4);
		TraceIn("select_command", 4);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken SELECT12 = default(IToken);
	    IToken WS13 = default(IToken);
	    IToken WS15 = default(IToken);
	    IToken WS17 = default(IToken);
	    IToken WS19 = default(IToken);
	    IToken WS21 = default(IToken);
	    IToken WS23 = default(IToken);
	    IToken WS25 = default(IToken);
	    IToken WS27 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> distinct_clause14 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> top_clause16 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> column_list18 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> into_clause20 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> from_clause22 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> where_clause24 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> groupby_clause26 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> orderby_clause28 = default(AstParserRuleReturnScope<object, IToken>);

	    object SELECT12_tree = default(object);
	    object WS13_tree = default(object);
	    object WS15_tree = default(object);
	    object WS17_tree = default(object);
	    object WS19_tree = default(object);
	    object WS21_tree = default(object);
	    object WS23_tree = default(object);
	    object WS25_tree = default(object);
	    object WS27_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_SELECT=new RewriteRuleITokenStream(adaptor,"token SELECT");
	    RewriteRuleSubtreeStream stream_groupby_clause=new RewriteRuleSubtreeStream(adaptor,"rule groupby_clause");
	    RewriteRuleSubtreeStream stream_distinct_clause=new RewriteRuleSubtreeStream(adaptor,"rule distinct_clause");
	    RewriteRuleSubtreeStream stream_from_clause=new RewriteRuleSubtreeStream(adaptor,"rule from_clause");
	    RewriteRuleSubtreeStream stream_column_list=new RewriteRuleSubtreeStream(adaptor,"rule column_list");
	    RewriteRuleSubtreeStream stream_where_clause=new RewriteRuleSubtreeStream(adaptor,"rule where_clause");
	    RewriteRuleSubtreeStream stream_into_clause=new RewriteRuleSubtreeStream(adaptor,"rule into_clause");
	    RewriteRuleSubtreeStream stream_top_clause=new RewriteRuleSubtreeStream(adaptor,"rule top_clause");
	    RewriteRuleSubtreeStream stream_orderby_clause=new RewriteRuleSubtreeStream(adaptor,"rule orderby_clause");
		try { DebugEnterRule(GrammarFileName, "select_command");
		DebugLocation(107, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:108:2: ( SELECT ( WS distinct_clause )? ( WS top_clause )? WS column_list ( WS into_clause )? ( WS from_clause )? ( WS where_clause )? ( WS groupby_clause )? ( WS orderby_clause )? -> ^( T_SELECT ( distinct_clause )? ( top_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( orderby_clause )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:108:4: SELECT ( WS distinct_clause )? ( WS top_clause )? WS column_list ( WS into_clause )? ( WS from_clause )? ( WS where_clause )? ( WS groupby_clause )? ( WS orderby_clause )?
			{
			DebugLocation(108, 4);
			SELECT12=(IToken)Match(input,SELECT,Follow._SELECT_in_select_command399);  
			stream_SELECT.Add(SELECT12);

			DebugLocation(108, 11);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:108:11: ( WS distinct_clause )?
			int alt9=2;
			try { DebugEnterSubRule(9);
			try { DebugEnterDecision(9, decisionCanBacktrack[9]);
			int LA9_0 = input.LA(1);

			if ((LA9_0==WS))
			{
				int LA9_1 = input.LA(2);

				if ((LA9_1==ALL||LA9_1==DISTINCT))
				{
					alt9 = 1;
				}
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:108:12: WS distinct_clause
				{
				DebugLocation(108, 12);
				WS13=(IToken)Match(input,WS,Follow._WS_in_select_command402);  
				stream_WS.Add(WS13);

				DebugLocation(108, 15);
				PushFollow(Follow._distinct_clause_in_select_command404);
				distinct_clause14=distinct_clause();
				PopFollow();

				stream_distinct_clause.Add(distinct_clause14.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(9); }

			DebugLocation(108, 33);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:108:33: ( WS top_clause )?
			int alt10=2;
			try { DebugEnterSubRule(10);
			try { DebugEnterDecision(10, decisionCanBacktrack[10]);
			int LA10_0 = input.LA(1);

			if ((LA10_0==WS))
			{
				int LA10_1 = input.LA(2);

				if ((LA10_1==TOP))
				{
					alt10 = 1;
				}
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:108:34: WS top_clause
				{
				DebugLocation(108, 34);
				WS15=(IToken)Match(input,WS,Follow._WS_in_select_command409);  
				stream_WS.Add(WS15);

				DebugLocation(108, 37);
				PushFollow(Follow._top_clause_in_select_command411);
				top_clause16=top_clause();
				PopFollow();

				stream_top_clause.Add(top_clause16.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(10); }

			DebugLocation(108, 50);
			WS17=(IToken)Match(input,WS,Follow._WS_in_select_command415);  
			stream_WS.Add(WS17);

			DebugLocation(108, 53);
			PushFollow(Follow._column_list_in_select_command417);
			column_list18=column_list();
			PopFollow();

			stream_column_list.Add(column_list18.Tree);
			DebugLocation(108, 65);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:108:65: ( WS into_clause )?
			int alt11=2;
			try { DebugEnterSubRule(11);
			try { DebugEnterDecision(11, decisionCanBacktrack[11]);
			int LA11_0 = input.LA(1);

			if ((LA11_0==WS))
			{
				int LA11_1 = input.LA(2);

				if ((LA11_1==INTO))
				{
					alt11 = 1;
				}
			}
			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:108:66: WS into_clause
				{
				DebugLocation(108, 66);
				WS19=(IToken)Match(input,WS,Follow._WS_in_select_command420);  
				stream_WS.Add(WS19);

				DebugLocation(108, 69);
				PushFollow(Follow._into_clause_in_select_command422);
				into_clause20=into_clause();
				PopFollow();

				stream_into_clause.Add(into_clause20.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(11); }

			DebugLocation(108, 83);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:108:83: ( WS from_clause )?
			int alt12=2;
			try { DebugEnterSubRule(12);
			try { DebugEnterDecision(12, decisionCanBacktrack[12]);
			int LA12_0 = input.LA(1);

			if ((LA12_0==WS))
			{
				int LA12_1 = input.LA(2);

				if ((LA12_1==FROM))
				{
					alt12 = 1;
				}
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:108:84: WS from_clause
				{
				DebugLocation(108, 84);
				WS21=(IToken)Match(input,WS,Follow._WS_in_select_command427);  
				stream_WS.Add(WS21);

				DebugLocation(108, 87);
				PushFollow(Follow._from_clause_in_select_command429);
				from_clause22=from_clause();
				PopFollow();

				stream_from_clause.Add(from_clause22.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(12); }

			DebugLocation(108, 101);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:108:101: ( WS where_clause )?
			int alt13=2;
			try { DebugEnterSubRule(13);
			try { DebugEnterDecision(13, decisionCanBacktrack[13]);
			int LA13_0 = input.LA(1);

			if ((LA13_0==WS))
			{
				int LA13_1 = input.LA(2);

				if ((LA13_1==WHERE))
				{
					alt13 = 1;
				}
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:108:102: WS where_clause
				{
				DebugLocation(108, 102);
				WS23=(IToken)Match(input,WS,Follow._WS_in_select_command434);  
				stream_WS.Add(WS23);

				DebugLocation(108, 105);
				PushFollow(Follow._where_clause_in_select_command436);
				where_clause24=where_clause();
				PopFollow();

				stream_where_clause.Add(where_clause24.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(13); }

			DebugLocation(108, 120);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:108:120: ( WS groupby_clause )?
			int alt14=2;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, decisionCanBacktrack[14]);
			int LA14_0 = input.LA(1);

			if ((LA14_0==WS))
			{
				int LA14_1 = input.LA(2);

				if ((LA14_1==GROUP))
				{
					alt14 = 1;
				}
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:108:121: WS groupby_clause
				{
				DebugLocation(108, 121);
				WS25=(IToken)Match(input,WS,Follow._WS_in_select_command441);  
				stream_WS.Add(WS25);

				DebugLocation(108, 124);
				PushFollow(Follow._groupby_clause_in_select_command443);
				groupby_clause26=groupby_clause();
				PopFollow();

				stream_groupby_clause.Add(groupby_clause26.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(14); }

			DebugLocation(108, 141);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:108:141: ( WS orderby_clause )?
			int alt15=2;
			try { DebugEnterSubRule(15);
			try { DebugEnterDecision(15, decisionCanBacktrack[15]);
			int LA15_0 = input.LA(1);

			if ((LA15_0==WS))
			{
				int LA15_1 = input.LA(2);

				if ((LA15_1==ORDER))
				{
					alt15 = 1;
				}
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:108:142: WS orderby_clause
				{
				DebugLocation(108, 142);
				WS27=(IToken)Match(input,WS,Follow._WS_in_select_command448);  
				stream_WS.Add(WS27);

				DebugLocation(108, 145);
				PushFollow(Follow._orderby_clause_in_select_command450);
				orderby_clause28=orderby_clause();
				PopFollow();

				stream_orderby_clause.Add(orderby_clause28.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(15); }



			{
			// AST REWRITE
			// elements: orderby_clause, where_clause, into_clause, column_list, distinct_clause, groupby_clause, top_clause, from_clause
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 109:3: -> ^( T_SELECT ( distinct_clause )? ( top_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( orderby_clause )? )
			{
				DebugLocation(109, 6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:109:6: ^( T_SELECT ( distinct_clause )? ( top_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( orderby_clause )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(109, 8);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SELECT, "T_SELECT"), root_1);

				DebugLocation(109, 17);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:109:17: ( distinct_clause )?
				if (stream_distinct_clause.HasNext)
				{
					DebugLocation(109, 17);
					adaptor.AddChild(root_1, stream_distinct_clause.NextTree());

				}
				stream_distinct_clause.Reset();
				DebugLocation(109, 34);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:109:34: ( top_clause )?
				if (stream_top_clause.HasNext)
				{
					DebugLocation(109, 34);
					adaptor.AddChild(root_1, stream_top_clause.NextTree());

				}
				stream_top_clause.Reset();
				DebugLocation(109, 46);
				adaptor.AddChild(root_1, stream_column_list.NextTree());
				DebugLocation(109, 58);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:109:58: ( into_clause )?
				if (stream_into_clause.HasNext)
				{
					DebugLocation(109, 58);
					adaptor.AddChild(root_1, stream_into_clause.NextTree());

				}
				stream_into_clause.Reset();
				DebugLocation(109, 71);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:109:71: ( from_clause )?
				if (stream_from_clause.HasNext)
				{
					DebugLocation(109, 71);
					adaptor.AddChild(root_1, stream_from_clause.NextTree());

				}
				stream_from_clause.Reset();
				DebugLocation(109, 84);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:109:84: ( where_clause )?
				if (stream_where_clause.HasNext)
				{
					DebugLocation(109, 84);
					adaptor.AddChild(root_1, stream_where_clause.NextTree());

				}
				stream_where_clause.Reset();
				DebugLocation(109, 98);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:109:98: ( groupby_clause )?
				if (stream_groupby_clause.HasNext)
				{
					DebugLocation(109, 98);
					adaptor.AddChild(root_1, stream_groupby_clause.NextTree());

				}
				stream_groupby_clause.Reset();
				DebugLocation(109, 114);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:109:114: ( orderby_clause )?
				if (stream_orderby_clause.HasNext)
				{
					DebugLocation(109, 114);
					adaptor.AddChild(root_1, stream_orderby_clause.NextTree());

				}
				stream_orderby_clause.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("select_command", 4);
			LeaveRule("select_command", 4);
			LeaveRule_select_command();
	    }
	 	DebugLocation(110, 1);
		} finally { DebugExitRule(GrammarFileName, "select_command"); }
		return retval;

	}
	// $ANTLR end "select_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_distinct_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_distinct_clause() {}

	// $ANTLR start "distinct_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:112:1: distinct_clause : ( DISTINCT -> T_DISTINCT | ALL -> T_ALL );
	[GrammarRule("distinct_clause")]
	private AstParserRuleReturnScope<object, IToken> distinct_clause()
	{
		EnterRule_distinct_clause();
		EnterRule("distinct_clause", 5);
		TraceIn("distinct_clause", 5);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken DISTINCT29 = default(IToken);
	    IToken ALL30 = default(IToken);

	    object DISTINCT29_tree = default(object);
	    object ALL30_tree = default(object);
	    RewriteRuleITokenStream stream_DISTINCT=new RewriteRuleITokenStream(adaptor,"token DISTINCT");
	    RewriteRuleITokenStream stream_ALL=new RewriteRuleITokenStream(adaptor,"token ALL");

		try { DebugEnterRule(GrammarFileName, "distinct_clause");
		DebugLocation(112, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:113:2: ( DISTINCT -> T_DISTINCT | ALL -> T_ALL )
			int alt16=2;
			try { DebugEnterDecision(16, decisionCanBacktrack[16]);
			int LA16_0 = input.LA(1);

			if ((LA16_0==DISTINCT))
			{
				alt16 = 1;
			}
			else if ((LA16_0==ALL))
			{
				alt16 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 16, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:113:4: DISTINCT
				{
				DebugLocation(113, 4);
				DISTINCT29=(IToken)Match(input,DISTINCT,Follow._DISTINCT_in_distinct_clause495);  
				stream_DISTINCT.Add(DISTINCT29);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 113:13: -> T_DISTINCT
				{
					DebugLocation(113, 16);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_DISTINCT, "T_DISTINCT"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:114:4: ALL
				{
				DebugLocation(114, 4);
				ALL30=(IToken)Match(input,ALL,Follow._ALL_in_distinct_clause504);  
				stream_ALL.Add(ALL30);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 114:8: -> T_ALL
				{
					DebugLocation(114, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_ALL, "T_ALL"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("distinct_clause", 5);
			LeaveRule("distinct_clause", 5);
			LeaveRule_distinct_clause();
	    }
	 	DebugLocation(115, 1);
		} finally { DebugExitRule(GrammarFileName, "distinct_clause"); }
		return retval;

	}
	// $ANTLR end "distinct_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_top_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_top_clause() {}

	// $ANTLR start "top_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:117:1: top_clause : TOP WS expression -> ^( T_TOP expression ) ;
	[GrammarRule("top_clause")]
	private AstParserRuleReturnScope<object, IToken> top_clause()
	{
		EnterRule_top_clause();
		EnterRule("top_clause", 6);
		TraceIn("top_clause", 6);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOP31 = default(IToken);
	    IToken WS32 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression33 = default(AstParserRuleReturnScope<object, IToken>);

	    object TOP31_tree = default(object);
	    object WS32_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_TOP=new RewriteRuleITokenStream(adaptor,"token TOP");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "top_clause");
		DebugLocation(117, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:118:2: ( TOP WS expression -> ^( T_TOP expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:118:4: TOP WS expression
			{
			DebugLocation(118, 4);
			TOP31=(IToken)Match(input,TOP,Follow._TOP_in_top_clause520);  
			stream_TOP.Add(TOP31);

			DebugLocation(118, 8);
			WS32=(IToken)Match(input,WS,Follow._WS_in_top_clause522);  
			stream_WS.Add(WS32);

			DebugLocation(118, 11);
			PushFollow(Follow._expression_in_top_clause524);
			expression33=expression();
			PopFollow();

			stream_expression.Add(expression33.Tree);


			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 119:2: -> ^( T_TOP expression )
			{
				DebugLocation(119, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:119:5: ^( T_TOP expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(119, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_TOP, "T_TOP"), root_1);

				DebugLocation(119, 13);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("top_clause", 6);
			LeaveRule("top_clause", 6);
			LeaveRule_top_clause();
	    }
	 	DebugLocation(120, 1);
		} finally { DebugExitRule(GrammarFileName, "top_clause"); }
		return retval;

	}
	// $ANTLR end "top_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_column_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_column_list() {}

	// $ANTLR start "column_list"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:122:1: column_list : column ( ( WS )? ',' ( WS )? column )* -> ^( T_COLUMNLIST ( column )* ) ;
	[GrammarRule("column_list")]
	private AstParserRuleReturnScope<object, IToken> column_list()
	{
		EnterRule_column_list();
		EnterRule("column_list", 7);
		TraceIn("column_list", 7);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS35 = default(IToken);
	    IToken char_literal36 = default(IToken);
	    IToken WS37 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> column34 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> column38 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS35_tree = default(object);
	    object char_literal36_tree = default(object);
	    object WS37_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_136=new RewriteRuleITokenStream(adaptor,"token 136");
	    RewriteRuleSubtreeStream stream_column=new RewriteRuleSubtreeStream(adaptor,"rule column");
		try { DebugEnterRule(GrammarFileName, "column_list");
		DebugLocation(122, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:123:2: ( column ( ( WS )? ',' ( WS )? column )* -> ^( T_COLUMNLIST ( column )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:123:4: column ( ( WS )? ',' ( WS )? column )*
			{
			DebugLocation(123, 4);
			PushFollow(Follow._column_in_column_list546);
			column34=column();
			PopFollow();

			stream_column.Add(column34.Tree);
			DebugLocation(123, 11);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:123:11: ( ( WS )? ',' ( WS )? column )*
			try { DebugEnterSubRule(19);
			while (true)
			{
				int alt19=2;
				try { DebugEnterDecision(19, decisionCanBacktrack[19]);
				int LA19_0 = input.LA(1);

				if ((LA19_0==WS))
				{
					int LA19_1 = input.LA(2);

					if ((LA19_1==136))
					{
						alt19 = 1;
					}


				}
				else if ((LA19_0==136))
				{
					alt19 = 1;
				}


				} finally { DebugExitDecision(19); }
				switch ( alt19 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:123:12: ( WS )? ',' ( WS )? column
					{
					DebugLocation(123, 12);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:123:12: ( WS )?
					int alt17=2;
					try { DebugEnterSubRule(17);
					try { DebugEnterDecision(17, decisionCanBacktrack[17]);
					int LA17_0 = input.LA(1);

					if ((LA17_0==WS))
					{
						alt17 = 1;
					}
					} finally { DebugExitDecision(17); }
					switch (alt17)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:123:12: WS
						{
						DebugLocation(123, 12);
						WS35=(IToken)Match(input,WS,Follow._WS_in_column_list549);  
						stream_WS.Add(WS35);


						}
						break;

					}
					} finally { DebugExitSubRule(17); }

					DebugLocation(123, 16);
					char_literal36=(IToken)Match(input,136,Follow._136_in_column_list552);  
					stream_136.Add(char_literal36);

					DebugLocation(123, 20);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:123:20: ( WS )?
					int alt18=2;
					try { DebugEnterSubRule(18);
					try { DebugEnterDecision(18, decisionCanBacktrack[18]);
					int LA18_0 = input.LA(1);

					if ((LA18_0==WS))
					{
						alt18 = 1;
					}
					} finally { DebugExitDecision(18); }
					switch (alt18)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:123:20: WS
						{
						DebugLocation(123, 20);
						WS37=(IToken)Match(input,WS,Follow._WS_in_column_list554);  
						stream_WS.Add(WS37);


						}
						break;

					}
					} finally { DebugExitSubRule(18); }

					DebugLocation(123, 24);
					PushFollow(Follow._column_in_column_list557);
					column38=column();
					PopFollow();

					stream_column.Add(column38.Tree);

					}
					break;

				default:
					goto loop19;
				}
			}

			loop19:
				;

			} finally { DebugExitSubRule(19); }



			{
			// AST REWRITE
			// elements: column
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 124:2: -> ^( T_COLUMNLIST ( column )* )
			{
				DebugLocation(124, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:124:5: ^( T_COLUMNLIST ( column )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(124, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_COLUMNLIST, "T_COLUMNLIST"), root_1);

				DebugLocation(124, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:124:20: ( column )*
				while ( stream_column.HasNext )
				{
					DebugLocation(124, 20);
					adaptor.AddChild(root_1, stream_column.NextTree());

				}
				stream_column.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("column_list", 7);
			LeaveRule("column_list", 7);
			LeaveRule_column_list();
	    }
	 	DebugLocation(125, 1);
		} finally { DebugExitRule(GrammarFileName, "column_list"); }
		return retval;

	}
	// $ANTLR end "column_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_column() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_column() {}

	// $ANTLR start "column"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:127:1: column : ( '*' -> ^( T_COLUMN '*' ) | expression ( WS SIMPLE_FILE )? -> ^( T_COLUMN expression ( SIMPLE_FILE )? ) );
	[GrammarRule("column")]
	private AstParserRuleReturnScope<object, IToken> column()
	{
		EnterRule_column();
		EnterRule("column", 8);
		TraceIn("column", 8);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal39 = default(IToken);
	    IToken WS41 = default(IToken);
	    IToken SIMPLE_FILE42 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression40 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal39_tree = default(object);
	    object WS41_tree = default(object);
	    object SIMPLE_FILE42_tree = default(object);
	    RewriteRuleITokenStream stream_134=new RewriteRuleITokenStream(adaptor,"token 134");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_SIMPLE_FILE=new RewriteRuleITokenStream(adaptor,"token SIMPLE_FILE");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "column");
		DebugLocation(127, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:128:2: ( '*' -> ^( T_COLUMN '*' ) | expression ( WS SIMPLE_FILE )? -> ^( T_COLUMN expression ( SIMPLE_FILE )? ) )
			int alt21=2;
			try { DebugEnterDecision(21, decisionCanBacktrack[21]);
			int LA21_0 = input.LA(1);

			if ((LA21_0==134))
			{
				alt21 = 1;
			}
			else if (((LA21_0>=CASE && LA21_0<=CAST)||LA21_0==CONVERT||LA21_0==EXISTS||(LA21_0>=NOT && LA21_0<=NUMBER)||LA21_0==SIMPLE_FILE||(LA21_0>=STRING && LA21_0<=SYSTEMVAR)||LA21_0==TOKEN||LA21_0==132))
			{
				alt21 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 21, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:128:4: '*'
				{
				DebugLocation(128, 4);
				char_literal39=(IToken)Match(input,134,Follow._134_in_column581);  
				stream_134.Add(char_literal39);



				{
				// AST REWRITE
				// elements: 134
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 128:8: -> ^( T_COLUMN '*' )
				{
					DebugLocation(128, 11);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:128:11: ^( T_COLUMN '*' )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(128, 13);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_COLUMN, "T_COLUMN"), root_1);

					DebugLocation(128, 22);
					adaptor.AddChild(root_1, stream_134.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:129:4: expression ( WS SIMPLE_FILE )?
				{
				DebugLocation(129, 4);
				PushFollow(Follow._expression_in_column595);
				expression40=expression();
				PopFollow();

				stream_expression.Add(expression40.Tree);
				DebugLocation(129, 15);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:129:15: ( WS SIMPLE_FILE )?
				int alt20=2;
				try { DebugEnterSubRule(20);
				try { DebugEnterDecision(20, decisionCanBacktrack[20]);
				int LA20_0 = input.LA(1);

				if ((LA20_0==WS))
				{
					int LA20_1 = input.LA(2);

					if ((LA20_1==SIMPLE_FILE))
					{
						alt20 = 1;
					}
				}
				} finally { DebugExitDecision(20); }
				switch (alt20)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:129:16: WS SIMPLE_FILE
					{
					DebugLocation(129, 16);
					WS41=(IToken)Match(input,WS,Follow._WS_in_column598);  
					stream_WS.Add(WS41);

					DebugLocation(129, 19);
					SIMPLE_FILE42=(IToken)Match(input,SIMPLE_FILE,Follow._SIMPLE_FILE_in_column600);  
					stream_SIMPLE_FILE.Add(SIMPLE_FILE42);


					}
					break;

				}
				} finally { DebugExitSubRule(20); }



				{
				// AST REWRITE
				// elements: SIMPLE_FILE, expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 129:33: -> ^( T_COLUMN expression ( SIMPLE_FILE )? )
				{
					DebugLocation(129, 36);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:129:36: ^( T_COLUMN expression ( SIMPLE_FILE )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(129, 38);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_COLUMN, "T_COLUMN"), root_1);

					DebugLocation(129, 47);
					adaptor.AddChild(root_1, stream_expression.NextTree());
					DebugLocation(129, 58);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:129:58: ( SIMPLE_FILE )?
					if (stream_SIMPLE_FILE.HasNext)
					{
						DebugLocation(129, 58);
						adaptor.AddChild(root_1, stream_SIMPLE_FILE.NextNode());

					}
					stream_SIMPLE_FILE.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("column", 8);
			LeaveRule("column", 8);
			LeaveRule_column();
	    }
	 	DebugLocation(130, 1);
		} finally { DebugExitRule(GrammarFileName, "column"); }
		return retval;

	}
	// $ANTLR end "column"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_into_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_into_clause() {}

	// $ANTLR start "into_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:131:1: into_clause : INTO WS file -> ^( T_INTO file ) ;
	[GrammarRule("into_clause")]
	private AstParserRuleReturnScope<object, IToken> into_clause()
	{
		EnterRule_into_clause();
		EnterRule("into_clause", 9);
		TraceIn("into_clause", 9);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken INTO43 = default(IToken);
	    IToken WS44 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file45 = default(AstParserRuleReturnScope<object, IToken>);

	    object INTO43_tree = default(object);
	    object WS44_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_INTO=new RewriteRuleITokenStream(adaptor,"token INTO");
	    RewriteRuleSubtreeStream stream_file=new RewriteRuleSubtreeStream(adaptor,"rule file");
		try { DebugEnterRule(GrammarFileName, "into_clause");
		DebugLocation(131, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:132:2: ( INTO WS file -> ^( T_INTO file ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:132:4: INTO WS file
			{
			DebugLocation(132, 4);
			INTO43=(IToken)Match(input,INTO,Follow._INTO_in_into_clause623);  
			stream_INTO.Add(INTO43);

			DebugLocation(132, 9);
			WS44=(IToken)Match(input,WS,Follow._WS_in_into_clause625);  
			stream_WS.Add(WS44);

			DebugLocation(132, 12);
			PushFollow(Follow._file_in_into_clause627);
			file45=file();
			PopFollow();

			stream_file.Add(file45.Tree);


			{
			// AST REWRITE
			// elements: file
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 132:17: -> ^( T_INTO file )
			{
				DebugLocation(132, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:132:20: ^( T_INTO file )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(132, 22);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_INTO, "T_INTO"), root_1);

				DebugLocation(132, 29);
				adaptor.AddChild(root_1, stream_file.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("into_clause", 9);
			LeaveRule("into_clause", 9);
			LeaveRule_into_clause();
	    }
	 	DebugLocation(133, 1);
		} finally { DebugExitRule(GrammarFileName, "into_clause"); }
		return retval;

	}
	// $ANTLR end "into_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_from_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_from_clause() {}

	// $ANTLR start "from_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:135:1: from_clause : FROM WS from_clause_item ( ( WS )? ',' ( WS )? from_clause_item )* -> ^( T_FROM ( from_clause_item )* ) ;
	[GrammarRule("from_clause")]
	private AstParserRuleReturnScope<object, IToken> from_clause()
	{
		EnterRule_from_clause();
		EnterRule("from_clause", 10);
		TraceIn("from_clause", 10);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken FROM46 = default(IToken);
	    IToken WS47 = default(IToken);
	    IToken WS49 = default(IToken);
	    IToken char_literal50 = default(IToken);
	    IToken WS51 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> from_clause_item48 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> from_clause_item52 = default(AstParserRuleReturnScope<object, IToken>);

	    object FROM46_tree = default(object);
	    object WS47_tree = default(object);
	    object WS49_tree = default(object);
	    object char_literal50_tree = default(object);
	    object WS51_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_136=new RewriteRuleITokenStream(adaptor,"token 136");
	    RewriteRuleITokenStream stream_FROM=new RewriteRuleITokenStream(adaptor,"token FROM");
	    RewriteRuleSubtreeStream stream_from_clause_item=new RewriteRuleSubtreeStream(adaptor,"rule from_clause_item");
		try { DebugEnterRule(GrammarFileName, "from_clause");
		DebugLocation(135, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:136:2: ( FROM WS from_clause_item ( ( WS )? ',' ( WS )? from_clause_item )* -> ^( T_FROM ( from_clause_item )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:136:4: FROM WS from_clause_item ( ( WS )? ',' ( WS )? from_clause_item )*
			{
			DebugLocation(136, 4);
			FROM46=(IToken)Match(input,FROM,Follow._FROM_in_from_clause647);  
			stream_FROM.Add(FROM46);

			DebugLocation(136, 9);
			WS47=(IToken)Match(input,WS,Follow._WS_in_from_clause649);  
			stream_WS.Add(WS47);

			DebugLocation(136, 12);
			PushFollow(Follow._from_clause_item_in_from_clause651);
			from_clause_item48=from_clause_item();
			PopFollow();

			stream_from_clause_item.Add(from_clause_item48.Tree);
			DebugLocation(136, 29);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:136:29: ( ( WS )? ',' ( WS )? from_clause_item )*
			try { DebugEnterSubRule(24);
			while (true)
			{
				int alt24=2;
				try { DebugEnterDecision(24, decisionCanBacktrack[24]);
				int LA24_0 = input.LA(1);

				if ((LA24_0==WS))
				{
					int LA24_1 = input.LA(2);

					if ((LA24_1==136))
					{
						alt24 = 1;
					}


				}
				else if ((LA24_0==136))
				{
					alt24 = 1;
				}


				} finally { DebugExitDecision(24); }
				switch ( alt24 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:136:30: ( WS )? ',' ( WS )? from_clause_item
					{
					DebugLocation(136, 30);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:136:30: ( WS )?
					int alt22=2;
					try { DebugEnterSubRule(22);
					try { DebugEnterDecision(22, decisionCanBacktrack[22]);
					int LA22_0 = input.LA(1);

					if ((LA22_0==WS))
					{
						alt22 = 1;
					}
					} finally { DebugExitDecision(22); }
					switch (alt22)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:136:30: WS
						{
						DebugLocation(136, 30);
						WS49=(IToken)Match(input,WS,Follow._WS_in_from_clause654);  
						stream_WS.Add(WS49);


						}
						break;

					}
					} finally { DebugExitSubRule(22); }

					DebugLocation(136, 34);
					char_literal50=(IToken)Match(input,136,Follow._136_in_from_clause657);  
					stream_136.Add(char_literal50);

					DebugLocation(136, 38);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:136:38: ( WS )?
					int alt23=2;
					try { DebugEnterSubRule(23);
					try { DebugEnterDecision(23, decisionCanBacktrack[23]);
					int LA23_0 = input.LA(1);

					if ((LA23_0==WS))
					{
						alt23 = 1;
					}
					} finally { DebugExitDecision(23); }
					switch (alt23)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:136:38: WS
						{
						DebugLocation(136, 38);
						WS51=(IToken)Match(input,WS,Follow._WS_in_from_clause659);  
						stream_WS.Add(WS51);


						}
						break;

					}
					} finally { DebugExitSubRule(23); }

					DebugLocation(136, 42);
					PushFollow(Follow._from_clause_item_in_from_clause662);
					from_clause_item52=from_clause_item();
					PopFollow();

					stream_from_clause_item.Add(from_clause_item52.Tree);

					}
					break;

				default:
					goto loop24;
				}
			}

			loop24:
				;

			} finally { DebugExitSubRule(24); }



			{
			// AST REWRITE
			// elements: from_clause_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 136:61: -> ^( T_FROM ( from_clause_item )* )
			{
				DebugLocation(136, 64);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:136:64: ^( T_FROM ( from_clause_item )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(136, 66);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FROM, "T_FROM"), root_1);

				DebugLocation(136, 73);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:136:73: ( from_clause_item )*
				while ( stream_from_clause_item.HasNext )
				{
					DebugLocation(136, 73);
					adaptor.AddChild(root_1, stream_from_clause_item.NextTree());

				}
				stream_from_clause_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("from_clause", 10);
			LeaveRule("from_clause", 10);
			LeaveRule_from_clause();
	    }
	 	DebugLocation(137, 1);
		} finally { DebugExitRule(GrammarFileName, "from_clause"); }
		return retval;

	}
	// $ANTLR end "from_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_from_clause_item() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_from_clause_item() {}

	// $ANTLR start "from_clause_item"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:139:1: from_clause_item : ( STRING -> ^( T_FILE STRING ) | file | '(' ( WS )? select_command ( WS )? ')' -> ^( T_SUBQUERY select_command ) );
	[GrammarRule("from_clause_item")]
	private AstParserRuleReturnScope<object, IToken> from_clause_item()
	{
		EnterRule_from_clause_item();
		EnterRule("from_clause_item", 11);
		TraceIn("from_clause_item", 11);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken STRING53 = default(IToken);
	    IToken char_literal55 = default(IToken);
	    IToken WS56 = default(IToken);
	    IToken WS58 = default(IToken);
	    IToken char_literal59 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file54 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> select_command57 = default(AstParserRuleReturnScope<object, IToken>);

	    object STRING53_tree = default(object);
	    object char_literal55_tree = default(object);
	    object WS56_tree = default(object);
	    object WS58_tree = default(object);
	    object char_literal59_tree = default(object);
	    RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
	    RewriteRuleITokenStream stream_133=new RewriteRuleITokenStream(adaptor,"token 133");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
	    RewriteRuleSubtreeStream stream_select_command=new RewriteRuleSubtreeStream(adaptor,"rule select_command");
		try { DebugEnterRule(GrammarFileName, "from_clause_item");
		DebugLocation(139, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:140:2: ( STRING -> ^( T_FILE STRING ) | file | '(' ( WS )? select_command ( WS )? ')' -> ^( T_SUBQUERY select_command ) )
			int alt27=3;
			try { DebugEnterDecision(27, decisionCanBacktrack[27]);
			switch (input.LA(1))
			{
			case STRING:
				{
				alt27 = 1;
				}
				break;
			case SIMPLE_FILE:
			case 146:
				{
				alt27 = 2;
				}
				break;
			case 132:
				{
				alt27 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 27, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:140:4: STRING
				{
				DebugLocation(140, 4);
				STRING53=(IToken)Match(input,STRING,Follow._STRING_in_from_clause_item685);  
				stream_STRING.Add(STRING53);



				{
				// AST REWRITE
				// elements: STRING
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 140:11: -> ^( T_FILE STRING )
				{
					DebugLocation(140, 14);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:140:14: ^( T_FILE STRING )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(140, 16);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILE, "T_FILE"), root_1);

					DebugLocation(140, 23);
					adaptor.AddChild(root_1, stream_STRING.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:141:4: file
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(141, 4);
				PushFollow(Follow._file_in_from_clause_item698);
				file54=file();
				PopFollow();

				adaptor.AddChild(root_0, file54.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:142:4: '(' ( WS )? select_command ( WS )? ')'
				{
				DebugLocation(142, 4);
				char_literal55=(IToken)Match(input,132,Follow._132_in_from_clause_item703);  
				stream_132.Add(char_literal55);

				DebugLocation(142, 8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:142:8: ( WS )?
				int alt25=2;
				try { DebugEnterSubRule(25);
				try { DebugEnterDecision(25, decisionCanBacktrack[25]);
				int LA25_0 = input.LA(1);

				if ((LA25_0==WS))
				{
					alt25 = 1;
				}
				} finally { DebugExitDecision(25); }
				switch (alt25)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:142:8: WS
					{
					DebugLocation(142, 8);
					WS56=(IToken)Match(input,WS,Follow._WS_in_from_clause_item705);  
					stream_WS.Add(WS56);


					}
					break;

				}
				} finally { DebugExitSubRule(25); }

				DebugLocation(142, 12);
				PushFollow(Follow._select_command_in_from_clause_item708);
				select_command57=select_command();
				PopFollow();

				stream_select_command.Add(select_command57.Tree);
				DebugLocation(142, 27);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:142:27: ( WS )?
				int alt26=2;
				try { DebugEnterSubRule(26);
				try { DebugEnterDecision(26, decisionCanBacktrack[26]);
				int LA26_0 = input.LA(1);

				if ((LA26_0==WS))
				{
					alt26 = 1;
				}
				} finally { DebugExitDecision(26); }
				switch (alt26)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:142:27: WS
					{
					DebugLocation(142, 27);
					WS58=(IToken)Match(input,WS,Follow._WS_in_from_clause_item710);  
					stream_WS.Add(WS58);


					}
					break;

				}
				} finally { DebugExitSubRule(26); }

				DebugLocation(142, 31);
				char_literal59=(IToken)Match(input,133,Follow._133_in_from_clause_item713);  
				stream_133.Add(char_literal59);



				{
				// AST REWRITE
				// elements: select_command
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 142:35: -> ^( T_SUBQUERY select_command )
				{
					DebugLocation(142, 38);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:142:38: ^( T_SUBQUERY select_command )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(142, 40);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SUBQUERY, "T_SUBQUERY"), root_1);

					DebugLocation(142, 51);
					adaptor.AddChild(root_1, stream_select_command.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("from_clause_item", 11);
			LeaveRule("from_clause_item", 11);
			LeaveRule_from_clause_item();
	    }
	 	DebugLocation(143, 1);
		} finally { DebugExitRule(GrammarFileName, "from_clause_item"); }
		return retval;

	}
	// $ANTLR end "from_clause_item"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file() {}

	// $ANTLR start "file"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:145:1: file : ( '[' ( WS )? STRING ( WS file_option )* ( WS )? ']' -> ^( T_FILE STRING ( file_option )* ) | SIMPLE_FILE -> ^( T_FILE SIMPLE_FILE ) );
	[GrammarRule("file")]
	private AstParserRuleReturnScope<object, IToken> file()
	{
		EnterRule_file();
		EnterRule("file", 12);
		TraceIn("file", 12);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal60 = default(IToken);
	    IToken WS61 = default(IToken);
	    IToken STRING62 = default(IToken);
	    IToken WS63 = default(IToken);
	    IToken WS65 = default(IToken);
	    IToken char_literal66 = default(IToken);
	    IToken SIMPLE_FILE67 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file_option64 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal60_tree = default(object);
	    object WS61_tree = default(object);
	    object STRING62_tree = default(object);
	    object WS63_tree = default(object);
	    object WS65_tree = default(object);
	    object char_literal66_tree = default(object);
	    object SIMPLE_FILE67_tree = default(object);
	    RewriteRuleITokenStream stream_146=new RewriteRuleITokenStream(adaptor,"token 146");
	    RewriteRuleITokenStream stream_147=new RewriteRuleITokenStream(adaptor,"token 147");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_SIMPLE_FILE=new RewriteRuleITokenStream(adaptor,"token SIMPLE_FILE");
	    RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
	    RewriteRuleSubtreeStream stream_file_option=new RewriteRuleSubtreeStream(adaptor,"rule file_option");
		try { DebugEnterRule(GrammarFileName, "file");
		DebugLocation(145, 39);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:146:2: ( '[' ( WS )? STRING ( WS file_option )* ( WS )? ']' -> ^( T_FILE STRING ( file_option )* ) | SIMPLE_FILE -> ^( T_FILE SIMPLE_FILE ) )
			int alt31=2;
			try { DebugEnterDecision(31, decisionCanBacktrack[31]);
			int LA31_0 = input.LA(1);

			if ((LA31_0==146))
			{
				alt31 = 1;
			}
			else if ((LA31_0==SIMPLE_FILE))
			{
				alt31 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 31, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:146:4: '[' ( WS )? STRING ( WS file_option )* ( WS )? ']'
				{
				DebugLocation(146, 4);
				char_literal60=(IToken)Match(input,146,Follow._146_in_file732);  
				stream_146.Add(char_literal60);

				DebugLocation(146, 8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:146:8: ( WS )?
				int alt28=2;
				try { DebugEnterSubRule(28);
				try { DebugEnterDecision(28, decisionCanBacktrack[28]);
				int LA28_0 = input.LA(1);

				if ((LA28_0==WS))
				{
					alt28 = 1;
				}
				} finally { DebugExitDecision(28); }
				switch (alt28)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:146:8: WS
					{
					DebugLocation(146, 8);
					WS61=(IToken)Match(input,WS,Follow._WS_in_file734);  
					stream_WS.Add(WS61);


					}
					break;

				}
				} finally { DebugExitSubRule(28); }

				DebugLocation(146, 12);
				STRING62=(IToken)Match(input,STRING,Follow._STRING_in_file737);  
				stream_STRING.Add(STRING62);

				DebugLocation(146, 19);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:146:19: ( WS file_option )*
				try { DebugEnterSubRule(29);
				while (true)
				{
					int alt29=2;
					try { DebugEnterDecision(29, decisionCanBacktrack[29]);
					int LA29_0 = input.LA(1);

					if ((LA29_0==WS))
					{
						int LA29_1 = input.LA(2);

						if ((LA29_1==137))
						{
							alt29 = 1;
						}


					}


					} finally { DebugExitDecision(29); }
					switch ( alt29 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:146:20: WS file_option
						{
						DebugLocation(146, 20);
						WS63=(IToken)Match(input,WS,Follow._WS_in_file740);  
						stream_WS.Add(WS63);

						DebugLocation(146, 23);
						PushFollow(Follow._file_option_in_file742);
						file_option64=file_option();
						PopFollow();

						stream_file_option.Add(file_option64.Tree);

						}
						break;

					default:
						goto loop29;
					}
				}

				loop29:
					;

				} finally { DebugExitSubRule(29); }

				DebugLocation(146, 37);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:146:37: ( WS )?
				int alt30=2;
				try { DebugEnterSubRule(30);
				try { DebugEnterDecision(30, decisionCanBacktrack[30]);
				int LA30_0 = input.LA(1);

				if ((LA30_0==WS))
				{
					alt30 = 1;
				}
				} finally { DebugExitDecision(30); }
				switch (alt30)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:146:37: WS
					{
					DebugLocation(146, 37);
					WS65=(IToken)Match(input,WS,Follow._WS_in_file746);  
					stream_WS.Add(WS65);


					}
					break;

				}
				} finally { DebugExitSubRule(30); }

				DebugLocation(146, 41);
				char_literal66=(IToken)Match(input,147,Follow._147_in_file749);  
				stream_147.Add(char_literal66);



				{
				// AST REWRITE
				// elements: file_option, STRING
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 146:45: -> ^( T_FILE STRING ( file_option )* )
				{
					DebugLocation(146, 48);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:146:48: ^( T_FILE STRING ( file_option )* )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(146, 50);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILE, "T_FILE"), root_1);

					DebugLocation(146, 57);
					adaptor.AddChild(root_1, stream_STRING.NextNode());
					DebugLocation(146, 64);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:146:64: ( file_option )*
					while ( stream_file_option.HasNext )
					{
						DebugLocation(146, 64);
						adaptor.AddChild(root_1, stream_file_option.NextTree());

					}
					stream_file_option.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:147:4: SIMPLE_FILE
				{
				DebugLocation(147, 4);
				SIMPLE_FILE67=(IToken)Match(input,SIMPLE_FILE,Follow._SIMPLE_FILE_in_file766);  
				stream_SIMPLE_FILE.Add(SIMPLE_FILE67);



				{
				// AST REWRITE
				// elements: SIMPLE_FILE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 147:16: -> ^( T_FILE SIMPLE_FILE )
				{
					DebugLocation(147, 19);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:147:19: ^( T_FILE SIMPLE_FILE )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(147, 21);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILE, "T_FILE"), root_1);

					DebugLocation(147, 28);
					adaptor.AddChild(root_1, stream_SIMPLE_FILE.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file", 12);
			LeaveRule("file", 12);
			LeaveRule_file();
	    }
	 	DebugLocation(147, 39);
		} finally { DebugExitRule(GrammarFileName, "file"); }
		return retval;

	}
	// $ANTLR end "file"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_option() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_option() {}

	// $ANTLR start "file_option"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:149:1: file_option : '-' file_option_name ( ( WS )? '=' ( WS )? file_option_value )? -> ^( T_FILEOPTION file_option_name ( file_option_value )? ) ;
	[GrammarRule("file_option")]
	private AstParserRuleReturnScope<object, IToken> file_option()
	{
		EnterRule_file_option();
		EnterRule("file_option", 13);
		TraceIn("file_option", 13);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal68 = default(IToken);
	    IToken WS70 = default(IToken);
	    IToken char_literal71 = default(IToken);
	    IToken WS72 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file_option_name69 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> file_option_value73 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal68_tree = default(object);
	    object WS70_tree = default(object);
	    object char_literal71_tree = default(object);
	    object WS72_tree = default(object);
	    RewriteRuleITokenStream stream_143=new RewriteRuleITokenStream(adaptor,"token 143");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_137=new RewriteRuleITokenStream(adaptor,"token 137");
	    RewriteRuleSubtreeStream stream_file_option_name=new RewriteRuleSubtreeStream(adaptor,"rule file_option_name");
	    RewriteRuleSubtreeStream stream_file_option_value=new RewriteRuleSubtreeStream(adaptor,"rule file_option_value");
		try { DebugEnterRule(GrammarFileName, "file_option");
		DebugLocation(149, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:150:2: ( '-' file_option_name ( ( WS )? '=' ( WS )? file_option_value )? -> ^( T_FILEOPTION file_option_name ( file_option_value )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:150:4: '-' file_option_name ( ( WS )? '=' ( WS )? file_option_value )?
			{
			DebugLocation(150, 4);
			char_literal68=(IToken)Match(input,137,Follow._137_in_file_option783);  
			stream_137.Add(char_literal68);

			DebugLocation(150, 8);
			PushFollow(Follow._file_option_name_in_file_option785);
			file_option_name69=file_option_name();
			PopFollow();

			stream_file_option_name.Add(file_option_name69.Tree);
			DebugLocation(150, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:150:25: ( ( WS )? '=' ( WS )? file_option_value )?
			int alt34=2;
			try { DebugEnterSubRule(34);
			try { DebugEnterDecision(34, decisionCanBacktrack[34]);
			int LA34_0 = input.LA(1);

			if ((LA34_0==WS))
			{
				int LA34_1 = input.LA(2);

				if ((LA34_1==143))
				{
					alt34 = 1;
				}
			}
			else if ((LA34_0==143))
			{
				alt34 = 1;
			}
			} finally { DebugExitDecision(34); }
			switch (alt34)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:150:27: ( WS )? '=' ( WS )? file_option_value
				{
				DebugLocation(150, 27);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:150:27: ( WS )?
				int alt32=2;
				try { DebugEnterSubRule(32);
				try { DebugEnterDecision(32, decisionCanBacktrack[32]);
				int LA32_0 = input.LA(1);

				if ((LA32_0==WS))
				{
					alt32 = 1;
				}
				} finally { DebugExitDecision(32); }
				switch (alt32)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:150:27: WS
					{
					DebugLocation(150, 27);
					WS70=(IToken)Match(input,WS,Follow._WS_in_file_option789);  
					stream_WS.Add(WS70);


					}
					break;

				}
				} finally { DebugExitSubRule(32); }

				DebugLocation(150, 31);
				char_literal71=(IToken)Match(input,143,Follow._143_in_file_option792);  
				stream_143.Add(char_literal71);

				DebugLocation(150, 35);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:150:35: ( WS )?
				int alt33=2;
				try { DebugEnterSubRule(33);
				try { DebugEnterDecision(33, decisionCanBacktrack[33]);
				int LA33_0 = input.LA(1);

				if ((LA33_0==WS))
				{
					alt33 = 1;
				}
				} finally { DebugExitDecision(33); }
				switch (alt33)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:150:35: WS
					{
					DebugLocation(150, 35);
					WS72=(IToken)Match(input,WS,Follow._WS_in_file_option794);  
					stream_WS.Add(WS72);


					}
					break;

				}
				} finally { DebugExitSubRule(33); }

				DebugLocation(150, 39);
				PushFollow(Follow._file_option_value_in_file_option797);
				file_option_value73=file_option_value();
				PopFollow();

				stream_file_option_value.Add(file_option_value73.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(34); }



			{
			// AST REWRITE
			// elements: file_option_name, file_option_value
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 150:59: -> ^( T_FILEOPTION file_option_name ( file_option_value )? )
			{
				DebugLocation(150, 62);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:150:62: ^( T_FILEOPTION file_option_name ( file_option_value )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(150, 64);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILEOPTION, "T_FILEOPTION"), root_1);

				DebugLocation(150, 77);
				adaptor.AddChild(root_1, stream_file_option_name.NextTree());
				DebugLocation(150, 94);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:150:94: ( file_option_value )?
				if (stream_file_option_value.HasNext)
				{
					DebugLocation(150, 94);
					adaptor.AddChild(root_1, stream_file_option_value.NextTree());

				}
				stream_file_option_value.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_option", 13);
			LeaveRule("file_option", 13);
			LeaveRule_file_option();
	    }
	 	DebugLocation(151, 1);
		} finally { DebugExitRule(GrammarFileName, "file_option"); }
		return retval;

	}
	// $ANTLR end "file_option"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_option_name() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_option_name() {}

	// $ANTLR start "file_option_name"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:153:1: file_option_name : TOKEN ;
	[GrammarRule("file_option_name")]
	private AstParserRuleReturnScope<object, IToken> file_option_name()
	{
		EnterRule_file_option_name();
		EnterRule("file_option_name", 14);
		TraceIn("file_option_name", 14);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN74 = default(IToken);

	    object TOKEN74_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "file_option_name");
		DebugLocation(153, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:154:2: ( TOKEN )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:154:4: TOKEN
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(154, 4);
			TOKEN74=(IToken)Match(input,TOKEN,Follow._TOKEN_in_file_option_name821); 
			TOKEN74_tree = (object)adaptor.Create(TOKEN74);
			adaptor.AddChild(root_0, TOKEN74_tree);


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_option_name", 14);
			LeaveRule("file_option_name", 14);
			LeaveRule_file_option_name();
	    }
	 	DebugLocation(155, 1);
		} finally { DebugExitRule(GrammarFileName, "file_option_name"); }
		return retval;

	}
	// $ANTLR end "file_option_name"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_option_value() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_option_value() {}

	// $ANTLR start "file_option_value"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:157:1: file_option_value : ( TOKEN | STRING | NUMBER );
	[GrammarRule("file_option_value")]
	private AstParserRuleReturnScope<object, IToken> file_option_value()
	{
		EnterRule_file_option_value();
		EnterRule("file_option_value", 15);
		TraceIn("file_option_value", 15);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken set75 = default(IToken);

	    object set75_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "file_option_value");
		DebugLocation(157, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:158:2: ( TOKEN | STRING | NUMBER )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(158, 2);

			set75=(IToken)input.LT(1);
			if (input.LA(1)==NUMBER||input.LA(1)==STRING||input.LA(1)==TOKEN)
			{
				input.Consume();
				adaptor.AddChild(root_0, (object)adaptor.Create(set75));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_option_value", 15);
			LeaveRule("file_option_value", 15);
			LeaveRule_file_option_value();
	    }
	 	DebugLocation(159, 1);
		} finally { DebugExitRule(GrammarFileName, "file_option_value"); }
		return retval;

	}
	// $ANTLR end "file_option_value"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_where_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_where_clause() {}

	// $ANTLR start "where_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:161:1: where_clause : WHERE WS expression -> ^( T_WHERE expression ) ;
	[GrammarRule("where_clause")]
	private AstParserRuleReturnScope<object, IToken> where_clause()
	{
		EnterRule_where_clause();
		EnterRule("where_clause", 16);
		TraceIn("where_clause", 16);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WHERE76 = default(IToken);
	    IToken WS77 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression78 = default(AstParserRuleReturnScope<object, IToken>);

	    object WHERE76_tree = default(object);
	    object WS77_tree = default(object);
	    RewriteRuleITokenStream stream_WHERE=new RewriteRuleITokenStream(adaptor,"token WHERE");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "where_clause");
		DebugLocation(161, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:162:2: ( WHERE WS expression -> ^( T_WHERE expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:162:4: WHERE WS expression
			{
			DebugLocation(162, 4);
			WHERE76=(IToken)Match(input,WHERE,Follow._WHERE_in_where_clause853);  
			stream_WHERE.Add(WHERE76);

			DebugLocation(162, 10);
			WS77=(IToken)Match(input,WS,Follow._WS_in_where_clause855);  
			stream_WS.Add(WS77);

			DebugLocation(162, 13);
			PushFollow(Follow._expression_in_where_clause857);
			expression78=expression();
			PopFollow();

			stream_expression.Add(expression78.Tree);


			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 163:2: -> ^( T_WHERE expression )
			{
				DebugLocation(163, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:163:5: ^( T_WHERE expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(163, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_WHERE, "T_WHERE"), root_1);

				DebugLocation(163, 15);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("where_clause", 16);
			LeaveRule("where_clause", 16);
			LeaveRule_where_clause();
	    }
	 	DebugLocation(164, 1);
		} finally { DebugExitRule(GrammarFileName, "where_clause"); }
		return retval;

	}
	// $ANTLR end "where_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_groupby_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_groupby_clause() {}

	// $ANTLR start "groupby_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:165:1: groupby_clause : GROUP WS BY WS expression_list -> ^( T_GROUPBY expression_list ) ;
	[GrammarRule("groupby_clause")]
	private AstParserRuleReturnScope<object, IToken> groupby_clause()
	{
		EnterRule_groupby_clause();
		EnterRule("groupby_clause", 17);
		TraceIn("groupby_clause", 17);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken GROUP79 = default(IToken);
	    IToken WS80 = default(IToken);
	    IToken BY81 = default(IToken);
	    IToken WS82 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression_list83 = default(AstParserRuleReturnScope<object, IToken>);

	    object GROUP79_tree = default(object);
	    object WS80_tree = default(object);
	    object BY81_tree = default(object);
	    object WS82_tree = default(object);
	    RewriteRuleITokenStream stream_GROUP=new RewriteRuleITokenStream(adaptor,"token GROUP");
	    RewriteRuleITokenStream stream_BY=new RewriteRuleITokenStream(adaptor,"token BY");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression_list=new RewriteRuleSubtreeStream(adaptor,"rule expression_list");
		try { DebugEnterRule(GrammarFileName, "groupby_clause");
		DebugLocation(165, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:166:2: ( GROUP WS BY WS expression_list -> ^( T_GROUPBY expression_list ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:166:4: GROUP WS BY WS expression_list
			{
			DebugLocation(166, 4);
			GROUP79=(IToken)Match(input,GROUP,Follow._GROUP_in_groupby_clause876);  
			stream_GROUP.Add(GROUP79);

			DebugLocation(166, 10);
			WS80=(IToken)Match(input,WS,Follow._WS_in_groupby_clause878);  
			stream_WS.Add(WS80);

			DebugLocation(166, 13);
			BY81=(IToken)Match(input,BY,Follow._BY_in_groupby_clause880);  
			stream_BY.Add(BY81);

			DebugLocation(166, 16);
			WS82=(IToken)Match(input,WS,Follow._WS_in_groupby_clause882);  
			stream_WS.Add(WS82);

			DebugLocation(166, 19);
			PushFollow(Follow._expression_list_in_groupby_clause884);
			expression_list83=expression_list();
			PopFollow();

			stream_expression_list.Add(expression_list83.Tree);


			{
			// AST REWRITE
			// elements: expression_list
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 167:2: -> ^( T_GROUPBY expression_list )
			{
				DebugLocation(167, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:167:5: ^( T_GROUPBY expression_list )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(167, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_GROUPBY, "T_GROUPBY"), root_1);

				DebugLocation(167, 17);
				adaptor.AddChild(root_1, stream_expression_list.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("groupby_clause", 17);
			LeaveRule("groupby_clause", 17);
			LeaveRule_groupby_clause();
	    }
	 	DebugLocation(168, 1);
		} finally { DebugExitRule(GrammarFileName, "groupby_clause"); }
		return retval;

	}
	// $ANTLR end "groupby_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_clause() {}

	// $ANTLR start "orderby_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:170:1: orderby_clause : ORDER WS BY WS orderby_column_list -> ^( T_ORDERBY orderby_column_list ) ;
	[GrammarRule("orderby_clause")]
	private AstParserRuleReturnScope<object, IToken> orderby_clause()
	{
		EnterRule_orderby_clause();
		EnterRule("orderby_clause", 18);
		TraceIn("orderby_clause", 18);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken ORDER84 = default(IToken);
	    IToken WS85 = default(IToken);
	    IToken BY86 = default(IToken);
	    IToken WS87 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> orderby_column_list88 = default(AstParserRuleReturnScope<object, IToken>);

	    object ORDER84_tree = default(object);
	    object WS85_tree = default(object);
	    object BY86_tree = default(object);
	    object WS87_tree = default(object);
	    RewriteRuleITokenStream stream_BY=new RewriteRuleITokenStream(adaptor,"token BY");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_ORDER=new RewriteRuleITokenStream(adaptor,"token ORDER");
	    RewriteRuleSubtreeStream stream_orderby_column_list=new RewriteRuleSubtreeStream(adaptor,"rule orderby_column_list");
		try { DebugEnterRule(GrammarFileName, "orderby_clause");
		DebugLocation(170, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:171:2: ( ORDER WS BY WS orderby_column_list -> ^( T_ORDERBY orderby_column_list ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:171:4: ORDER WS BY WS orderby_column_list
			{
			DebugLocation(171, 4);
			ORDER84=(IToken)Match(input,ORDER,Follow._ORDER_in_orderby_clause905);  
			stream_ORDER.Add(ORDER84);

			DebugLocation(171, 10);
			WS85=(IToken)Match(input,WS,Follow._WS_in_orderby_clause907);  
			stream_WS.Add(WS85);

			DebugLocation(171, 13);
			BY86=(IToken)Match(input,BY,Follow._BY_in_orderby_clause909);  
			stream_BY.Add(BY86);

			DebugLocation(171, 16);
			WS87=(IToken)Match(input,WS,Follow._WS_in_orderby_clause911);  
			stream_WS.Add(WS87);

			DebugLocation(171, 19);
			PushFollow(Follow._orderby_column_list_in_orderby_clause913);
			orderby_column_list88=orderby_column_list();
			PopFollow();

			stream_orderby_column_list.Add(orderby_column_list88.Tree);


			{
			// AST REWRITE
			// elements: orderby_column_list
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 172:2: -> ^( T_ORDERBY orderby_column_list )
			{
				DebugLocation(172, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:172:5: ^( T_ORDERBY orderby_column_list )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(172, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_ORDERBY, "T_ORDERBY"), root_1);

				DebugLocation(172, 17);
				adaptor.AddChild(root_1, stream_orderby_column_list.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_clause", 18);
			LeaveRule("orderby_clause", 18);
			LeaveRule_orderby_clause();
	    }
	 	DebugLocation(173, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_clause"); }
		return retval;

	}
	// $ANTLR end "orderby_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_column_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_column_list() {}

	// $ANTLR start "orderby_column_list"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:175:1: orderby_column_list : orderby_column ( ( WS )? ',' ( WS )? orderby_column )* -> ( orderby_column )* ;
	[GrammarRule("orderby_column_list")]
	private AstParserRuleReturnScope<object, IToken> orderby_column_list()
	{
		EnterRule_orderby_column_list();
		EnterRule("orderby_column_list", 19);
		TraceIn("orderby_column_list", 19);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS90 = default(IToken);
	    IToken char_literal91 = default(IToken);
	    IToken WS92 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> orderby_column89 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> orderby_column93 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS90_tree = default(object);
	    object char_literal91_tree = default(object);
	    object WS92_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_136=new RewriteRuleITokenStream(adaptor,"token 136");
	    RewriteRuleSubtreeStream stream_orderby_column=new RewriteRuleSubtreeStream(adaptor,"rule orderby_column");
		try { DebugEnterRule(GrammarFileName, "orderby_column_list");
		DebugLocation(175, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:176:2: ( orderby_column ( ( WS )? ',' ( WS )? orderby_column )* -> ( orderby_column )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:176:4: orderby_column ( ( WS )? ',' ( WS )? orderby_column )*
			{
			DebugLocation(176, 4);
			PushFollow(Follow._orderby_column_in_orderby_column_list934);
			orderby_column89=orderby_column();
			PopFollow();

			stream_orderby_column.Add(orderby_column89.Tree);
			DebugLocation(176, 19);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:176:19: ( ( WS )? ',' ( WS )? orderby_column )*
			try { DebugEnterSubRule(37);
			while (true)
			{
				int alt37=2;
				try { DebugEnterDecision(37, decisionCanBacktrack[37]);
				int LA37_0 = input.LA(1);

				if ((LA37_0==WS))
				{
					int LA37_1 = input.LA(2);

					if ((LA37_1==136))
					{
						alt37 = 1;
					}


				}
				else if ((LA37_0==136))
				{
					alt37 = 1;
				}


				} finally { DebugExitDecision(37); }
				switch ( alt37 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:176:20: ( WS )? ',' ( WS )? orderby_column
					{
					DebugLocation(176, 20);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:176:20: ( WS )?
					int alt35=2;
					try { DebugEnterSubRule(35);
					try { DebugEnterDecision(35, decisionCanBacktrack[35]);
					int LA35_0 = input.LA(1);

					if ((LA35_0==WS))
					{
						alt35 = 1;
					}
					} finally { DebugExitDecision(35); }
					switch (alt35)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:176:20: WS
						{
						DebugLocation(176, 20);
						WS90=(IToken)Match(input,WS,Follow._WS_in_orderby_column_list937);  
						stream_WS.Add(WS90);


						}
						break;

					}
					} finally { DebugExitSubRule(35); }

					DebugLocation(176, 24);
					char_literal91=(IToken)Match(input,136,Follow._136_in_orderby_column_list940);  
					stream_136.Add(char_literal91);

					DebugLocation(176, 28);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:176:28: ( WS )?
					int alt36=2;
					try { DebugEnterSubRule(36);
					try { DebugEnterDecision(36, decisionCanBacktrack[36]);
					int LA36_0 = input.LA(1);

					if ((LA36_0==WS))
					{
						alt36 = 1;
					}
					} finally { DebugExitDecision(36); }
					switch (alt36)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:176:28: WS
						{
						DebugLocation(176, 28);
						WS92=(IToken)Match(input,WS,Follow._WS_in_orderby_column_list942);  
						stream_WS.Add(WS92);


						}
						break;

					}
					} finally { DebugExitSubRule(36); }

					DebugLocation(176, 32);
					PushFollow(Follow._orderby_column_in_orderby_column_list945);
					orderby_column93=orderby_column();
					PopFollow();

					stream_orderby_column.Add(orderby_column93.Tree);

					}
					break;

				default:
					goto loop37;
				}
			}

			loop37:
				;

			} finally { DebugExitSubRule(37); }



			{
			// AST REWRITE
			// elements: orderby_column
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 177:2: -> ( orderby_column )*
			{
				DebugLocation(177, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:177:5: ( orderby_column )*
				while ( stream_orderby_column.HasNext )
				{
					DebugLocation(177, 5);
					adaptor.AddChild(root_0, stream_orderby_column.NextTree());

				}
				stream_orderby_column.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_column_list", 19);
			LeaveRule("orderby_column_list", 19);
			LeaveRule_orderby_column_list();
	    }
	 	DebugLocation(178, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_column_list"); }
		return retval;

	}
	// $ANTLR end "orderby_column_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_column() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_column() {}

	// $ANTLR start "orderby_column"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:180:1: orderby_column : expression ( WS orderby_direction )? -> ^( T_ORDERBY_COLUMN expression ( orderby_direction )? ) ;
	[GrammarRule("orderby_column")]
	private AstParserRuleReturnScope<object, IToken> orderby_column()
	{
		EnterRule_orderby_column();
		EnterRule("orderby_column", 20);
		TraceIn("orderby_column", 20);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS95 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression94 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> orderby_direction96 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS95_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_orderby_direction=new RewriteRuleSubtreeStream(adaptor,"rule orderby_direction");
		try { DebugEnterRule(GrammarFileName, "orderby_column");
		DebugLocation(180, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:181:2: ( expression ( WS orderby_direction )? -> ^( T_ORDERBY_COLUMN expression ( orderby_direction )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:181:4: expression ( WS orderby_direction )?
			{
			DebugLocation(181, 4);
			PushFollow(Follow._expression_in_orderby_column965);
			expression94=expression();
			PopFollow();

			stream_expression.Add(expression94.Tree);
			DebugLocation(181, 15);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:181:15: ( WS orderby_direction )?
			int alt38=2;
			try { DebugEnterSubRule(38);
			try { DebugEnterDecision(38, decisionCanBacktrack[38]);
			int LA38_0 = input.LA(1);

			if ((LA38_0==WS))
			{
				int LA38_1 = input.LA(2);

				if ((LA38_1==ASC||LA38_1==DESC))
				{
					alt38 = 1;
				}
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:181:16: WS orderby_direction
				{
				DebugLocation(181, 16);
				WS95=(IToken)Match(input,WS,Follow._WS_in_orderby_column968);  
				stream_WS.Add(WS95);

				DebugLocation(181, 19);
				PushFollow(Follow._orderby_direction_in_orderby_column970);
				orderby_direction96=orderby_direction();
				PopFollow();

				stream_orderby_direction.Add(orderby_direction96.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(38); }



			{
			// AST REWRITE
			// elements: orderby_direction, expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 181:39: -> ^( T_ORDERBY_COLUMN expression ( orderby_direction )? )
			{
				DebugLocation(181, 42);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:181:42: ^( T_ORDERBY_COLUMN expression ( orderby_direction )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(181, 44);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_ORDERBY_COLUMN, "T_ORDERBY_COLUMN"), root_1);

				DebugLocation(181, 61);
				adaptor.AddChild(root_1, stream_expression.NextTree());
				DebugLocation(181, 72);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:181:72: ( orderby_direction )?
				if (stream_orderby_direction.HasNext)
				{
					DebugLocation(181, 72);
					adaptor.AddChild(root_1, stream_orderby_direction.NextTree());

				}
				stream_orderby_direction.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_column", 20);
			LeaveRule("orderby_column", 20);
			LeaveRule_orderby_column();
	    }
	 	DebugLocation(182, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_column"); }
		return retval;

	}
	// $ANTLR end "orderby_column"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_direction() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_direction() {}

	// $ANTLR start "orderby_direction"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:184:1: orderby_direction : ( ASC -> T_ORDERBY_ASC | DESC -> T_ORDERBY_DESC );
	[GrammarRule("orderby_direction")]
	private AstParserRuleReturnScope<object, IToken> orderby_direction()
	{
		EnterRule_orderby_direction();
		EnterRule("orderby_direction", 21);
		TraceIn("orderby_direction", 21);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken ASC97 = default(IToken);
	    IToken DESC98 = default(IToken);

	    object ASC97_tree = default(object);
	    object DESC98_tree = default(object);
	    RewriteRuleITokenStream stream_DESC=new RewriteRuleITokenStream(adaptor,"token DESC");
	    RewriteRuleITokenStream stream_ASC=new RewriteRuleITokenStream(adaptor,"token ASC");

		try { DebugEnterRule(GrammarFileName, "orderby_direction");
		DebugLocation(184, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:185:2: ( ASC -> T_ORDERBY_ASC | DESC -> T_ORDERBY_DESC )
			int alt39=2;
			try { DebugEnterDecision(39, decisionCanBacktrack[39]);
			int LA39_0 = input.LA(1);

			if ((LA39_0==ASC))
			{
				alt39 = 1;
			}
			else if ((LA39_0==DESC))
			{
				alt39 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 39, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:185:4: ASC
				{
				DebugLocation(185, 4);
				ASC97=(IToken)Match(input,ASC,Follow._ASC_in_orderby_direction995);  
				stream_ASC.Add(ASC97);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 185:8: -> T_ORDERBY_ASC
				{
					DebugLocation(185, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_ORDERBY_ASC, "T_ORDERBY_ASC"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:186:4: DESC
				{
				DebugLocation(186, 4);
				DESC98=(IToken)Match(input,DESC,Follow._DESC_in_orderby_direction1004);  
				stream_DESC.Add(DESC98);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 186:9: -> T_ORDERBY_DESC
				{
					DebugLocation(186, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_ORDERBY_DESC, "T_ORDERBY_DESC"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_direction", 21);
			LeaveRule("orderby_direction", 21);
			LeaveRule_orderby_direction();
	    }
	 	DebugLocation(187, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_direction"); }
		return retval;

	}
	// $ANTLR end "orderby_direction"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_use_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_use_command() {}

	// $ANTLR start "use_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:192:1: use_command : USE WS file -> ^( T_USE file ) ;
	[GrammarRule("use_command")]
	private AstParserRuleReturnScope<object, IToken> use_command()
	{
		EnterRule_use_command();
		EnterRule("use_command", 22);
		TraceIn("use_command", 22);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken USE99 = default(IToken);
	    IToken WS100 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file101 = default(AstParserRuleReturnScope<object, IToken>);

	    object USE99_tree = default(object);
	    object WS100_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_USE=new RewriteRuleITokenStream(adaptor,"token USE");
	    RewriteRuleSubtreeStream stream_file=new RewriteRuleSubtreeStream(adaptor,"rule file");
		try { DebugEnterRule(GrammarFileName, "use_command");
		DebugLocation(192, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:193:2: ( USE WS file -> ^( T_USE file ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:193:4: USE WS file
			{
			DebugLocation(193, 4);
			USE99=(IToken)Match(input,USE,Follow._USE_in_use_command1022);  
			stream_USE.Add(USE99);

			DebugLocation(193, 8);
			WS100=(IToken)Match(input,WS,Follow._WS_in_use_command1024);  
			stream_WS.Add(WS100);

			DebugLocation(193, 11);
			PushFollow(Follow._file_in_use_command1026);
			file101=file();
			PopFollow();

			stream_file.Add(file101.Tree);


			{
			// AST REWRITE
			// elements: file
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 193:16: -> ^( T_USE file )
			{
				DebugLocation(193, 19);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:193:19: ^( T_USE file )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(193, 21);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_USE, "T_USE"), root_1);

				DebugLocation(193, 27);
				adaptor.AddChild(root_1, stream_file.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("use_command", 22);
			LeaveRule("use_command", 22);
			LeaveRule_use_command();
	    }
	 	DebugLocation(194, 1);
		} finally { DebugExitRule(GrammarFileName, "use_command"); }
		return retval;

	}
	// $ANTLR end "use_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_list() {}

	// $ANTLR start "expression_list"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:199:1: expression_list : expression ( ( WS )? ',' ( WS )? expression )* -> ^( T_EXPRESSIONLIST ( expression )+ ) ;
	[GrammarRule("expression_list")]
	private AstParserRuleReturnScope<object, IToken> expression_list()
	{
		EnterRule_expression_list();
		EnterRule("expression_list", 23);
		TraceIn("expression_list", 23);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS103 = default(IToken);
	    IToken char_literal104 = default(IToken);
	    IToken WS105 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression102 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression106 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS103_tree = default(object);
	    object char_literal104_tree = default(object);
	    object WS105_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_136=new RewriteRuleITokenStream(adaptor,"token 136");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "expression_list");
		DebugLocation(199, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:200:2: ( expression ( ( WS )? ',' ( WS )? expression )* -> ^( T_EXPRESSIONLIST ( expression )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:200:4: expression ( ( WS )? ',' ( WS )? expression )*
			{
			DebugLocation(200, 4);
			PushFollow(Follow._expression_in_expression_list1048);
			expression102=expression();
			PopFollow();

			stream_expression.Add(expression102.Tree);
			DebugLocation(200, 15);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:200:15: ( ( WS )? ',' ( WS )? expression )*
			try { DebugEnterSubRule(42);
			while (true)
			{
				int alt42=2;
				try { DebugEnterDecision(42, decisionCanBacktrack[42]);
				int LA42_0 = input.LA(1);

				if ((LA42_0==WS))
				{
					int LA42_1 = input.LA(2);

					if ((LA42_1==136))
					{
						alt42 = 1;
					}


				}
				else if ((LA42_0==136))
				{
					alt42 = 1;
				}


				} finally { DebugExitDecision(42); }
				switch ( alt42 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:200:16: ( WS )? ',' ( WS )? expression
					{
					DebugLocation(200, 16);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:200:16: ( WS )?
					int alt40=2;
					try { DebugEnterSubRule(40);
					try { DebugEnterDecision(40, decisionCanBacktrack[40]);
					int LA40_0 = input.LA(1);

					if ((LA40_0==WS))
					{
						alt40 = 1;
					}
					} finally { DebugExitDecision(40); }
					switch (alt40)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:200:16: WS
						{
						DebugLocation(200, 16);
						WS103=(IToken)Match(input,WS,Follow._WS_in_expression_list1051);  
						stream_WS.Add(WS103);


						}
						break;

					}
					} finally { DebugExitSubRule(40); }

					DebugLocation(200, 20);
					char_literal104=(IToken)Match(input,136,Follow._136_in_expression_list1054);  
					stream_136.Add(char_literal104);

					DebugLocation(200, 24);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:200:24: ( WS )?
					int alt41=2;
					try { DebugEnterSubRule(41);
					try { DebugEnterDecision(41, decisionCanBacktrack[41]);
					int LA41_0 = input.LA(1);

					if ((LA41_0==WS))
					{
						alt41 = 1;
					}
					} finally { DebugExitDecision(41); }
					switch (alt41)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:200:24: WS
						{
						DebugLocation(200, 24);
						WS105=(IToken)Match(input,WS,Follow._WS_in_expression_list1056);  
						stream_WS.Add(WS105);


						}
						break;

					}
					} finally { DebugExitSubRule(41); }

					DebugLocation(200, 28);
					PushFollow(Follow._expression_in_expression_list1059);
					expression106=expression();
					PopFollow();

					stream_expression.Add(expression106.Tree);

					}
					break;

				default:
					goto loop42;
				}
			}

			loop42:
				;

			} finally { DebugExitSubRule(42); }



			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 200:41: -> ^( T_EXPRESSIONLIST ( expression )+ )
			{
				DebugLocation(200, 44);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:200:44: ^( T_EXPRESSIONLIST ( expression )+ )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(200, 46);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_EXPRESSIONLIST, "T_EXPRESSIONLIST"), root_1);

				DebugLocation(200, 63);
				if (!(stream_expression.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_expression.HasNext )
				{
					DebugLocation(200, 63);
					adaptor.AddChild(root_1, stream_expression.NextTree());

				}
				stream_expression.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_list", 23);
			LeaveRule("expression_list", 23);
			LeaveRule_expression_list();
	    }
	 	DebugLocation(201, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_list"); }
		return retval;

	}
	// $ANTLR end "expression_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_list_or_select_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_list_or_select_command() {}

	// $ANTLR start "expression_list_or_select_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:203:1: expression_list_or_select_command : ( expression_list | select_command );
	[GrammarRule("expression_list_or_select_command")]
	private AstParserRuleReturnScope<object, IToken> expression_list_or_select_command()
	{
		EnterRule_expression_list_or_select_command();
		EnterRule("expression_list_or_select_command", 24);
		TraceIn("expression_list_or_select_command", 24);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> expression_list107 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> select_command108 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "expression_list_or_select_command");
		DebugLocation(203, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:204:2: ( expression_list | select_command )
			int alt43=2;
			try { DebugEnterDecision(43, decisionCanBacktrack[43]);
			int LA43_0 = input.LA(1);

			if (((LA43_0>=CASE && LA43_0<=CAST)||LA43_0==CONVERT||LA43_0==EXISTS||(LA43_0>=NOT && LA43_0<=NUMBER)||LA43_0==SIMPLE_FILE||(LA43_0>=STRING && LA43_0<=SYSTEMVAR)||LA43_0==TOKEN||LA43_0==132))
			{
				alt43 = 1;
			}
			else if ((LA43_0==SELECT))
			{
				alt43 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 43, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(43); }
			switch (alt43)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:204:4: expression_list
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(204, 4);
				PushFollow(Follow._expression_list_in_expression_list_or_select_command1082);
				expression_list107=expression_list();
				PopFollow();

				adaptor.AddChild(root_0, expression_list107.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:204:22: select_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(204, 22);
				PushFollow(Follow._select_command_in_expression_list_or_select_command1086);
				select_command108=select_command();
				PopFollow();

				adaptor.AddChild(root_0, select_command108.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_list_or_select_command", 24);
			LeaveRule("expression_list_or_select_command", 24);
			LeaveRule_expression_list_or_select_command();
	    }
	 	DebugLocation(205, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_list_or_select_command"); }
		return retval;

	}
	// $ANTLR end "expression_list_or_select_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression() {}

	// $ANTLR start "expression"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:207:1: expression : expression_7 ;
	[GrammarRule("expression")]
	private AstParserRuleReturnScope<object, IToken> expression()
	{
		EnterRule_expression();
		EnterRule("expression", 25);
		TraceIn("expression", 25);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> expression_7109 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(207, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:208:2: ( expression_7 )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:208:4: expression_7
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(208, 4);
			PushFollow(Follow._expression_7_in_expression1098);
			expression_7109=expression_7();
			PopFollow();

			adaptor.AddChild(root_0, expression_7109.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression", 25);
			LeaveRule("expression", 25);
			LeaveRule_expression();
	    }
	 	DebugLocation(209, 1);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return retval;

	}
	// $ANTLR end "expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_7() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_7() {}

	// $ANTLR start "expression_7"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:211:1: expression_7 : (a= expression_6 -> $a) ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )* ;
	[GrammarRule("expression_7")]
	private AstParserRuleReturnScope<object, IToken> expression_7()
	{
		EnterRule_expression_7();
		EnterRule("expression_7", 26);
		TraceIn("expression_7", 26);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS110 = default(IToken);
	    IToken WS112 = default(IToken);
	    IToken IN113 = default(IToken);
	    IToken WS114 = default(IToken);
	    IToken char_literal115 = default(IToken);
	    IToken WS116 = default(IToken);
	    IToken WS118 = default(IToken);
	    IToken char_literal119 = default(IToken);
	    IToken NOT120 = default(IToken);
	    IToken WS121 = default(IToken);
	    IToken IN122 = default(IToken);
	    IToken WS123 = default(IToken);
	    IToken char_literal124 = default(IToken);
	    IToken WS125 = default(IToken);
	    IToken WS127 = default(IToken);
	    IToken char_literal128 = default(IToken);
	    IToken WS130 = default(IToken);
	    IToken SOME131 = default(IToken);
	    IToken ANY132 = default(IToken);
	    IToken WS133 = default(IToken);
	    IToken char_literal134 = default(IToken);
	    IToken char_literal136 = default(IToken);
	    IToken WS138 = default(IToken);
	    IToken ALL139 = default(IToken);
	    IToken WS140 = default(IToken);
	    IToken char_literal141 = default(IToken);
	    IToken char_literal143 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_7111 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command117 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command126 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_4129 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command135 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_4137 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command142 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS110_tree = default(object);
	    object WS112_tree = default(object);
	    object IN113_tree = default(object);
	    object WS114_tree = default(object);
	    object char_literal115_tree = default(object);
	    object WS116_tree = default(object);
	    object WS118_tree = default(object);
	    object char_literal119_tree = default(object);
	    object NOT120_tree = default(object);
	    object WS121_tree = default(object);
	    object IN122_tree = default(object);
	    object WS123_tree = default(object);
	    object char_literal124_tree = default(object);
	    object WS125_tree = default(object);
	    object WS127_tree = default(object);
	    object char_literal128_tree = default(object);
	    object WS130_tree = default(object);
	    object SOME131_tree = default(object);
	    object ANY132_tree = default(object);
	    object WS133_tree = default(object);
	    object char_literal134_tree = default(object);
	    object char_literal136_tree = default(object);
	    object WS138_tree = default(object);
	    object ALL139_tree = default(object);
	    object WS140_tree = default(object);
	    object char_literal141_tree = default(object);
	    object char_literal143_tree = default(object);
	    RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
	    RewriteRuleITokenStream stream_133=new RewriteRuleITokenStream(adaptor,"token 133");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_ANY=new RewriteRuleITokenStream(adaptor,"token ANY");
	    RewriteRuleITokenStream stream_IN=new RewriteRuleITokenStream(adaptor,"token IN");
	    RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");
	    RewriteRuleITokenStream stream_SOME=new RewriteRuleITokenStream(adaptor,"token SOME");
	    RewriteRuleITokenStream stream_ALL=new RewriteRuleITokenStream(adaptor,"token ALL");
	    RewriteRuleSubtreeStream stream_op_7=new RewriteRuleSubtreeStream(adaptor,"rule op_7");
	    RewriteRuleSubtreeStream stream_expression_6=new RewriteRuleSubtreeStream(adaptor,"rule expression_6");
	    RewriteRuleSubtreeStream stream_expression_list_or_select_command=new RewriteRuleSubtreeStream(adaptor,"rule expression_list_or_select_command");
	    RewriteRuleSubtreeStream stream_op_4=new RewriteRuleSubtreeStream(adaptor,"rule op_4");
		try { DebugEnterRule(GrammarFileName, "expression_7");
		DebugLocation(211, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:212:2: ( (a= expression_6 -> $a) ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:212:4: (a= expression_6 -> $a) ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )*
			{
			DebugLocation(212, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:212:4: (a= expression_6 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:212:5: a= expression_6
			{
			DebugLocation(212, 6);
			PushFollow(Follow._expression_6_in_expression_71114);
			a=expression_6();
			PopFollow();

			stream_expression_6.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 212:19: -> $a
			{
				DebugLocation(212, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(212, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:212:25: ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )*
			try { DebugEnterSubRule(56);
			while (true)
			{
				int alt56=2;
				try { DebugEnterDecision(56, decisionCanBacktrack[56]);
				int LA56_0 = input.LA(1);

				if ((LA56_0==WS))
				{
					int LA56_1 = input.LA(2);

					if ((LA56_1==NOT))
					{
						int LA56_3 = input.LA(3);

						if ((LA56_3==WS))
						{
							int LA56_5 = input.LA(4);

							if ((LA56_5==BETWEEN||LA56_5==IN||LA56_5==LIKE||LA56_5==MATCH))
							{
								alt56 = 1;
							}


						}


					}
					else if ((LA56_1==BETWEEN||LA56_1==IN||LA56_1==LIKE||LA56_1==MATCH||LA56_1==OR||(LA56_1>=127 && LA56_1<=129)||(LA56_1>=140 && LA56_1<=145)))
					{
						alt56 = 1;
					}


				}


				} finally { DebugExitDecision(56); }
				switch ( alt56 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:212:26: WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) )
					{
					DebugLocation(212, 26);
					WS110=(IToken)Match(input,WS,Follow._WS_in_expression_71121);  
					stream_WS.Add(WS110);

					DebugLocation(212, 29);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:212:29: ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) )
					int alt55=5;
					try { DebugEnterSubRule(55);
					try { DebugEnterDecision(55, decisionCanBacktrack[55]);
					switch (input.LA(1))
					{
					case BETWEEN:
					case LIKE:
					case MATCH:
					case OR:
						{
						alt55 = 1;
						}
						break;
					case NOT:
						{
						int LA55_2 = input.LA(2);

						if ((LA55_2==WS))
						{
							int LA55_13 = input.LA(3);

							if ((LA55_13==BETWEEN||LA55_13==LIKE||LA55_13==MATCH))
							{
								alt55 = 1;
							}
							else if ((LA55_13==IN))
							{
								alt55 = 3;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 55, 13, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 55, 2, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case IN:
						{
						alt55 = 2;
						}
						break;
					case 143:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA55_14 = input.LA(3);

							if ((LA55_14==ANY||LA55_14==SOME))
							{
								alt55 = 4;
							}
							else if ((LA55_14==ALL))
							{
								alt55 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 55, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt55 = 4;
							}
							break;
						case ALL:
							{
							alt55 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 55, 4, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 145:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA55_14 = input.LA(3);

							if ((LA55_14==ANY||LA55_14==SOME))
							{
								alt55 = 4;
							}
							else if ((LA55_14==ALL))
							{
								alt55 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 55, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt55 = 4;
							}
							break;
						case ALL:
							{
							alt55 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 55, 5, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 141:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA55_14 = input.LA(3);

							if ((LA55_14==ANY||LA55_14==SOME))
							{
								alt55 = 4;
							}
							else if ((LA55_14==ALL))
							{
								alt55 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 55, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt55 = 4;
							}
							break;
						case ALL:
							{
							alt55 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 55, 6, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 142:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA55_14 = input.LA(3);

							if ((LA55_14==ANY||LA55_14==SOME))
							{
								alt55 = 4;
							}
							else if ((LA55_14==ALL))
							{
								alt55 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 55, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt55 = 4;
							}
							break;
						case ALL:
							{
							alt55 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 55, 7, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 128:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA55_14 = input.LA(3);

							if ((LA55_14==ANY||LA55_14==SOME))
							{
								alt55 = 4;
							}
							else if ((LA55_14==ALL))
							{
								alt55 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 55, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt55 = 4;
							}
							break;
						case ALL:
							{
							alt55 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 55, 8, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 129:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA55_14 = input.LA(3);

							if ((LA55_14==ANY||LA55_14==SOME))
							{
								alt55 = 4;
							}
							else if ((LA55_14==ALL))
							{
								alt55 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 55, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt55 = 4;
							}
							break;
						case ALL:
							{
							alt55 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 55, 9, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 127:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA55_14 = input.LA(3);

							if ((LA55_14==ANY||LA55_14==SOME))
							{
								alt55 = 4;
							}
							else if ((LA55_14==ALL))
							{
								alt55 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 55, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt55 = 4;
							}
							break;
						case ALL:
							{
							alt55 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 55, 10, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 144:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA55_14 = input.LA(3);

							if ((LA55_14==ANY||LA55_14==SOME))
							{
								alt55 = 4;
							}
							else if ((LA55_14==ALL))
							{
								alt55 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 55, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt55 = 4;
							}
							break;
						case ALL:
							{
							alt55 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 55, 11, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 140:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA55_14 = input.LA(3);

							if ((LA55_14==ANY||LA55_14==SOME))
							{
								alt55 = 4;
							}
							else if ((LA55_14==ALL))
							{
								alt55 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 55, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt55 = 4;
							}
							break;
						case ALL:
							{
							alt55 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 55, 12, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 55, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(55); }
					switch (alt55)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:213:2: op_7 WS b= expression_6
						{
						DebugLocation(213, 2);
						PushFollow(Follow._op_7_in_expression_71126);
						op_7111=op_7();
						PopFollow();

						stream_op_7.Add(op_7111.Tree);
						DebugLocation(213, 7);
						WS112=(IToken)Match(input,WS,Follow._WS_in_expression_71128);  
						stream_WS.Add(WS112);

						DebugLocation(213, 11);
						PushFollow(Follow._expression_6_in_expression_71132);
						b=expression_6();
						PopFollow();

						stream_expression_6.Add(b.Tree);


						{
						// AST REWRITE
						// elements: op_7, expression_7, b
						// token labels: 
						// rule labels: retval, b
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 213:25: -> ^( T_OP_BINARY op_7 $expression_7 $b)
						{
							DebugLocation(213, 28);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:213:28: ^( T_OP_BINARY op_7 $expression_7 $b)
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(213, 30);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(213, 42);
							adaptor.AddChild(root_1, stream_op_7.NextTree());
							DebugLocation(213, 48);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(213, 62);
							adaptor.AddChild(root_1, stream_b.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:214:4: IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')'
						{
						DebugLocation(214, 4);
						IN113=(IToken)Match(input,IN,Follow._IN_in_expression_71151);  
						stream_IN.Add(IN113);

						DebugLocation(214, 7);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:214:7: ( WS )?
						int alt44=2;
						try { DebugEnterSubRule(44);
						try { DebugEnterDecision(44, decisionCanBacktrack[44]);
						int LA44_0 = input.LA(1);

						if ((LA44_0==WS))
						{
							alt44 = 1;
						}
						} finally { DebugExitDecision(44); }
						switch (alt44)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:214:7: WS
							{
							DebugLocation(214, 7);
							WS114=(IToken)Match(input,WS,Follow._WS_in_expression_71153);  
							stream_WS.Add(WS114);


							}
							break;

						}
						} finally { DebugExitSubRule(44); }

						DebugLocation(214, 11);
						char_literal115=(IToken)Match(input,132,Follow._132_in_expression_71156);  
						stream_132.Add(char_literal115);

						DebugLocation(214, 15);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:214:15: ( WS )?
						int alt45=2;
						try { DebugEnterSubRule(45);
						try { DebugEnterDecision(45, decisionCanBacktrack[45]);
						int LA45_0 = input.LA(1);

						if ((LA45_0==WS))
						{
							alt45 = 1;
						}
						} finally { DebugExitDecision(45); }
						switch (alt45)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:214:15: WS
							{
							DebugLocation(214, 15);
							WS116=(IToken)Match(input,WS,Follow._WS_in_expression_71158);  
							stream_WS.Add(WS116);


							}
							break;

						}
						} finally { DebugExitSubRule(45); }

						DebugLocation(214, 19);
						PushFollow(Follow._expression_list_or_select_command_in_expression_71161);
						expression_list_or_select_command117=expression_list_or_select_command();
						PopFollow();

						stream_expression_list_or_select_command.Add(expression_list_or_select_command117.Tree);
						DebugLocation(214, 53);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:214:53: ( WS )?
						int alt46=2;
						try { DebugEnterSubRule(46);
						try { DebugEnterDecision(46, decisionCanBacktrack[46]);
						int LA46_0 = input.LA(1);

						if ((LA46_0==WS))
						{
							alt46 = 1;
						}
						} finally { DebugExitDecision(46); }
						switch (alt46)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:214:53: WS
							{
							DebugLocation(214, 53);
							WS118=(IToken)Match(input,WS,Follow._WS_in_expression_71163);  
							stream_WS.Add(WS118);


							}
							break;

						}
						} finally { DebugExitSubRule(46); }

						DebugLocation(214, 57);
						char_literal119=(IToken)Match(input,133,Follow._133_in_expression_71166);  
						stream_133.Add(char_literal119);



						{
						// AST REWRITE
						// elements: expression_7, expression_list_or_select_command
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 214:61: -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command )
						{
							DebugLocation(214, 64);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:214:64: ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(214, 66);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(214, 78);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_IN, "T_IN"));
							DebugLocation(214, 84);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(214, 97);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:215:4: NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')'
						{
						DebugLocation(215, 4);
						NOT120=(IToken)Match(input,NOT,Follow._NOT_in_expression_71184);  
						stream_NOT.Add(NOT120);

						DebugLocation(215, 8);
						WS121=(IToken)Match(input,WS,Follow._WS_in_expression_71186);  
						stream_WS.Add(WS121);

						DebugLocation(215, 11);
						IN122=(IToken)Match(input,IN,Follow._IN_in_expression_71188);  
						stream_IN.Add(IN122);

						DebugLocation(215, 14);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:215:14: ( WS )?
						int alt47=2;
						try { DebugEnterSubRule(47);
						try { DebugEnterDecision(47, decisionCanBacktrack[47]);
						int LA47_0 = input.LA(1);

						if ((LA47_0==WS))
						{
							alt47 = 1;
						}
						} finally { DebugExitDecision(47); }
						switch (alt47)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:215:14: WS
							{
							DebugLocation(215, 14);
							WS123=(IToken)Match(input,WS,Follow._WS_in_expression_71190);  
							stream_WS.Add(WS123);


							}
							break;

						}
						} finally { DebugExitSubRule(47); }

						DebugLocation(215, 18);
						char_literal124=(IToken)Match(input,132,Follow._132_in_expression_71193);  
						stream_132.Add(char_literal124);

						DebugLocation(215, 22);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:215:22: ( WS )?
						int alt48=2;
						try { DebugEnterSubRule(48);
						try { DebugEnterDecision(48, decisionCanBacktrack[48]);
						int LA48_0 = input.LA(1);

						if ((LA48_0==WS))
						{
							alt48 = 1;
						}
						} finally { DebugExitDecision(48); }
						switch (alt48)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:215:22: WS
							{
							DebugLocation(215, 22);
							WS125=(IToken)Match(input,WS,Follow._WS_in_expression_71195);  
							stream_WS.Add(WS125);


							}
							break;

						}
						} finally { DebugExitSubRule(48); }

						DebugLocation(215, 26);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:215:26: ( expression_list_or_select_command )
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:215:27: expression_list_or_select_command
						{
						DebugLocation(215, 27);
						PushFollow(Follow._expression_list_or_select_command_in_expression_71199);
						expression_list_or_select_command126=expression_list_or_select_command();
						PopFollow();

						stream_expression_list_or_select_command.Add(expression_list_or_select_command126.Tree);

						}

						DebugLocation(215, 62);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:215:62: ( WS )?
						int alt49=2;
						try { DebugEnterSubRule(49);
						try { DebugEnterDecision(49, decisionCanBacktrack[49]);
						int LA49_0 = input.LA(1);

						if ((LA49_0==WS))
						{
							alt49 = 1;
						}
						} finally { DebugExitDecision(49); }
						switch (alt49)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:215:62: WS
							{
							DebugLocation(215, 62);
							WS127=(IToken)Match(input,WS,Follow._WS_in_expression_71202);  
							stream_WS.Add(WS127);


							}
							break;

						}
						} finally { DebugExitSubRule(49); }

						DebugLocation(215, 66);
						char_literal128=(IToken)Match(input,133,Follow._133_in_expression_71205);  
						stream_133.Add(char_literal128);



						{
						// AST REWRITE
						// elements: expression_list_or_select_command, expression_7
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 215:70: -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command )
						{
							DebugLocation(215, 73);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:215:73: ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(215, 75);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(215, 87);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_NOTIN, "T_NOTIN"));
							DebugLocation(215, 96);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(215, 109);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 4:
						DebugEnterAlt(4);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:216:4: op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')'
						{
						DebugLocation(216, 4);
						PushFollow(Follow._op_4_in_expression_71223);
						op_4129=op_4();
						PopFollow();

						stream_op_4.Add(op_4129.Tree);
						DebugLocation(216, 9);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:216:9: ( WS )?
						int alt50=2;
						try { DebugEnterSubRule(50);
						try { DebugEnterDecision(50, decisionCanBacktrack[50]);
						int LA50_0 = input.LA(1);

						if ((LA50_0==WS))
						{
							alt50 = 1;
						}
						} finally { DebugExitDecision(50); }
						switch (alt50)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:216:9: WS
							{
							DebugLocation(216, 9);
							WS130=(IToken)Match(input,WS,Follow._WS_in_expression_71225);  
							stream_WS.Add(WS130);


							}
							break;

						}
						} finally { DebugExitSubRule(50); }

						DebugLocation(216, 13);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:216:13: ( SOME | ANY )
						int alt51=2;
						try { DebugEnterSubRule(51);
						try { DebugEnterDecision(51, decisionCanBacktrack[51]);
						int LA51_0 = input.LA(1);

						if ((LA51_0==SOME))
						{
							alt51 = 1;
						}
						else if ((LA51_0==ANY))
						{
							alt51 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 51, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						} finally { DebugExitDecision(51); }
						switch (alt51)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:216:14: SOME
							{
							DebugLocation(216, 14);
							SOME131=(IToken)Match(input,SOME,Follow._SOME_in_expression_71229);  
							stream_SOME.Add(SOME131);


							}
							break;
						case 2:
							DebugEnterAlt(2);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:216:21: ANY
							{
							DebugLocation(216, 21);
							ANY132=(IToken)Match(input,ANY,Follow._ANY_in_expression_71233);  
							stream_ANY.Add(ANY132);


							}
							break;

						}
						} finally { DebugExitSubRule(51); }

						DebugLocation(216, 26);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:216:26: ( WS )?
						int alt52=2;
						try { DebugEnterSubRule(52);
						try { DebugEnterDecision(52, decisionCanBacktrack[52]);
						int LA52_0 = input.LA(1);

						if ((LA52_0==WS))
						{
							alt52 = 1;
						}
						} finally { DebugExitDecision(52); }
						switch (alt52)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:216:26: WS
							{
							DebugLocation(216, 26);
							WS133=(IToken)Match(input,WS,Follow._WS_in_expression_71236);  
							stream_WS.Add(WS133);


							}
							break;

						}
						} finally { DebugExitSubRule(52); }

						DebugLocation(216, 30);
						char_literal134=(IToken)Match(input,132,Follow._132_in_expression_71239);  
						stream_132.Add(char_literal134);

						DebugLocation(216, 34);
						PushFollow(Follow._expression_list_or_select_command_in_expression_71241);
						expression_list_or_select_command135=expression_list_or_select_command();
						PopFollow();

						stream_expression_list_or_select_command.Add(expression_list_or_select_command135.Tree);
						DebugLocation(216, 68);
						char_literal136=(IToken)Match(input,133,Follow._133_in_expression_71243);  
						stream_133.Add(char_literal136);



						{
						// AST REWRITE
						// elements: expression_7, op_4, expression_list_or_select_command
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 216:72: -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command )
						{
							DebugLocation(216, 75);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:216:75: ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(216, 77);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(216, 89);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_ANY, "T_ANY"));
							DebugLocation(216, 95);
							adaptor.AddChild(root_1, stream_op_4.NextTree());
							DebugLocation(216, 101);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(216, 114);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 5:
						DebugEnterAlt(5);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:217:4: op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')'
						{
						DebugLocation(217, 4);
						PushFollow(Follow._op_4_in_expression_71263);
						op_4137=op_4();
						PopFollow();

						stream_op_4.Add(op_4137.Tree);
						DebugLocation(217, 9);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:217:9: ( WS )?
						int alt53=2;
						try { DebugEnterSubRule(53);
						try { DebugEnterDecision(53, decisionCanBacktrack[53]);
						int LA53_0 = input.LA(1);

						if ((LA53_0==WS))
						{
							alt53 = 1;
						}
						} finally { DebugExitDecision(53); }
						switch (alt53)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:217:9: WS
							{
							DebugLocation(217, 9);
							WS138=(IToken)Match(input,WS,Follow._WS_in_expression_71265);  
							stream_WS.Add(WS138);


							}
							break;

						}
						} finally { DebugExitSubRule(53); }

						DebugLocation(217, 13);
						ALL139=(IToken)Match(input,ALL,Follow._ALL_in_expression_71268);  
						stream_ALL.Add(ALL139);

						DebugLocation(217, 17);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:217:17: ( WS )?
						int alt54=2;
						try { DebugEnterSubRule(54);
						try { DebugEnterDecision(54, decisionCanBacktrack[54]);
						int LA54_0 = input.LA(1);

						if ((LA54_0==WS))
						{
							alt54 = 1;
						}
						} finally { DebugExitDecision(54); }
						switch (alt54)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:217:17: WS
							{
							DebugLocation(217, 17);
							WS140=(IToken)Match(input,WS,Follow._WS_in_expression_71270);  
							stream_WS.Add(WS140);


							}
							break;

						}
						} finally { DebugExitSubRule(54); }

						DebugLocation(217, 21);
						char_literal141=(IToken)Match(input,132,Follow._132_in_expression_71273);  
						stream_132.Add(char_literal141);

						DebugLocation(217, 25);
						PushFollow(Follow._expression_list_or_select_command_in_expression_71275);
						expression_list_or_select_command142=expression_list_or_select_command();
						PopFollow();

						stream_expression_list_or_select_command.Add(expression_list_or_select_command142.Tree);
						DebugLocation(217, 59);
						char_literal143=(IToken)Match(input,133,Follow._133_in_expression_71277);  
						stream_133.Add(char_literal143);



						{
						// AST REWRITE
						// elements: op_4, expression_7, expression_list_or_select_command
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 217:63: -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command )
						{
							DebugLocation(217, 66);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:217:66: ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(217, 68);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(217, 80);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_ALL, "T_ALL"));
							DebugLocation(217, 86);
							adaptor.AddChild(root_1, stream_op_4.NextTree());
							DebugLocation(217, 92);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(217, 105);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					}
					} finally { DebugExitSubRule(55); }


					}
					break;

				default:
					goto loop56;
				}
			}

			loop56:
				;

			} finally { DebugExitSubRule(56); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_7", 26);
			LeaveRule("expression_7", 26);
			LeaveRule_expression_7();
	    }
	 	DebugLocation(219, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_7"); }
		return retval;

	}
	// $ANTLR end "expression_7"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_7() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_7() {}

	// $ANTLR start "op_7"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:221:1: op_7 : ( OR -> T_OR | LIKE -> T_LIKE | NOT WS LIKE -> T_NOTLIKE | MATCH -> T_MATCH | NOT WS MATCH -> T_NOTMATCH | BETWEEN -> T_BETWEEN | NOT WS BETWEEN -> T_NOTBETWEEN );
	[GrammarRule("op_7")]
	private AstParserRuleReturnScope<object, IToken> op_7()
	{
		EnterRule_op_7();
		EnterRule("op_7", 27);
		TraceIn("op_7", 27);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken OR144 = default(IToken);
	    IToken LIKE145 = default(IToken);
	    IToken NOT146 = default(IToken);
	    IToken WS147 = default(IToken);
	    IToken LIKE148 = default(IToken);
	    IToken MATCH149 = default(IToken);
	    IToken NOT150 = default(IToken);
	    IToken WS151 = default(IToken);
	    IToken MATCH152 = default(IToken);
	    IToken BETWEEN153 = default(IToken);
	    IToken NOT154 = default(IToken);
	    IToken WS155 = default(IToken);
	    IToken BETWEEN156 = default(IToken);

	    object OR144_tree = default(object);
	    object LIKE145_tree = default(object);
	    object NOT146_tree = default(object);
	    object WS147_tree = default(object);
	    object LIKE148_tree = default(object);
	    object MATCH149_tree = default(object);
	    object NOT150_tree = default(object);
	    object WS151_tree = default(object);
	    object MATCH152_tree = default(object);
	    object BETWEEN153_tree = default(object);
	    object NOT154_tree = default(object);
	    object WS155_tree = default(object);
	    object BETWEEN156_tree = default(object);
	    RewriteRuleITokenStream stream_MATCH=new RewriteRuleITokenStream(adaptor,"token MATCH");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");
	    RewriteRuleITokenStream stream_BETWEEN=new RewriteRuleITokenStream(adaptor,"token BETWEEN");
	    RewriteRuleITokenStream stream_LIKE=new RewriteRuleITokenStream(adaptor,"token LIKE");
	    RewriteRuleITokenStream stream_OR=new RewriteRuleITokenStream(adaptor,"token OR");

		try { DebugEnterRule(GrammarFileName, "op_7");
		DebugLocation(221, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:221:6: ( OR -> T_OR | LIKE -> T_LIKE | NOT WS LIKE -> T_NOTLIKE | MATCH -> T_MATCH | NOT WS MATCH -> T_NOTMATCH | BETWEEN -> T_BETWEEN | NOT WS BETWEEN -> T_NOTBETWEEN )
			int alt57=7;
			try { DebugEnterDecision(57, decisionCanBacktrack[57]);
			switch (input.LA(1))
			{
			case OR:
				{
				alt57 = 1;
				}
				break;
			case LIKE:
				{
				alt57 = 2;
				}
				break;
			case NOT:
				{
				int LA57_3 = input.LA(2);

				if ((LA57_3==WS))
				{
					switch (input.LA(3))
					{
					case LIKE:
						{
						alt57 = 3;
						}
						break;
					case MATCH:
						{
						alt57 = 5;
						}
						break;
					case BETWEEN:
						{
						alt57 = 7;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 57, 6, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 57, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case MATCH:
				{
				alt57 = 4;
				}
				break;
			case BETWEEN:
				{
				alt57 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 57, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(57); }
			switch (alt57)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:221:8: OR
				{
				DebugLocation(221, 8);
				OR144=(IToken)Match(input,OR,Follow._OR_in_op_71307);  
				stream_OR.Add(OR144);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 221:11: -> T_OR
				{
					DebugLocation(221, 14);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_OR, "T_OR"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:222:4: LIKE
				{
				DebugLocation(222, 4);
				LIKE145=(IToken)Match(input,LIKE,Follow._LIKE_in_op_71316);  
				stream_LIKE.Add(LIKE145);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 222:9: -> T_LIKE
				{
					DebugLocation(222, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_LIKE, "T_LIKE"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:223:4: NOT WS LIKE
				{
				DebugLocation(223, 4);
				NOT146=(IToken)Match(input,NOT,Follow._NOT_in_op_71325);  
				stream_NOT.Add(NOT146);

				DebugLocation(223, 8);
				WS147=(IToken)Match(input,WS,Follow._WS_in_op_71327);  
				stream_WS.Add(WS147);

				DebugLocation(223, 11);
				LIKE148=(IToken)Match(input,LIKE,Follow._LIKE_in_op_71329);  
				stream_LIKE.Add(LIKE148);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 223:16: -> T_NOTLIKE
				{
					DebugLocation(223, 19);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTLIKE, "T_NOTLIKE"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:224:4: MATCH
				{
				DebugLocation(224, 4);
				MATCH149=(IToken)Match(input,MATCH,Follow._MATCH_in_op_71338);  
				stream_MATCH.Add(MATCH149);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 224:10: -> T_MATCH
				{
					DebugLocation(224, 13);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MATCH, "T_MATCH"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:225:4: NOT WS MATCH
				{
				DebugLocation(225, 4);
				NOT150=(IToken)Match(input,NOT,Follow._NOT_in_op_71347);  
				stream_NOT.Add(NOT150);

				DebugLocation(225, 8);
				WS151=(IToken)Match(input,WS,Follow._WS_in_op_71349);  
				stream_WS.Add(WS151);

				DebugLocation(225, 11);
				MATCH152=(IToken)Match(input,MATCH,Follow._MATCH_in_op_71351);  
				stream_MATCH.Add(MATCH152);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 225:17: -> T_NOTMATCH
				{
					DebugLocation(225, 20);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTMATCH, "T_NOTMATCH"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:226:4: BETWEEN
				{
				DebugLocation(226, 4);
				BETWEEN153=(IToken)Match(input,BETWEEN,Follow._BETWEEN_in_op_71360);  
				stream_BETWEEN.Add(BETWEEN153);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 226:12: -> T_BETWEEN
				{
					DebugLocation(226, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BETWEEN, "T_BETWEEN"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:227:4: NOT WS BETWEEN
				{
				DebugLocation(227, 4);
				NOT154=(IToken)Match(input,NOT,Follow._NOT_in_op_71369);  
				stream_NOT.Add(NOT154);

				DebugLocation(227, 8);
				WS155=(IToken)Match(input,WS,Follow._WS_in_op_71371);  
				stream_WS.Add(WS155);

				DebugLocation(227, 11);
				BETWEEN156=(IToken)Match(input,BETWEEN,Follow._BETWEEN_in_op_71373);  
				stream_BETWEEN.Add(BETWEEN156);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 227:19: -> T_NOTBETWEEN
				{
					DebugLocation(227, 22);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTBETWEEN, "T_NOTBETWEEN"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_7", 27);
			LeaveRule("op_7", 27);
			LeaveRule_op_7();
	    }
	 	DebugLocation(228, 1);
		} finally { DebugExitRule(GrammarFileName, "op_7"); }
		return retval;

	}
	// $ANTLR end "op_7"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_6() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_6() {}

	// $ANTLR start "expression_6"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:230:1: expression_6 : (a= expression_5 -> $a) ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )* ;
	[GrammarRule("expression_6")]
	private AstParserRuleReturnScope<object, IToken> expression_6()
	{
		EnterRule_expression_6();
		EnterRule("expression_6", 28);
		TraceIn("expression_6", 28);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS157 = default(IToken);
	    IToken WS159 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_6158 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS157_tree = default(object);
	    object WS159_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_op_6=new RewriteRuleSubtreeStream(adaptor,"rule op_6");
	    RewriteRuleSubtreeStream stream_expression_5=new RewriteRuleSubtreeStream(adaptor,"rule expression_5");
		try { DebugEnterRule(GrammarFileName, "expression_6");
		DebugLocation(230, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:231:2: ( (a= expression_5 -> $a) ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:231:4: (a= expression_5 -> $a) ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )*
			{
			DebugLocation(231, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:231:4: (a= expression_5 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:231:5: a= expression_5
			{
			DebugLocation(231, 6);
			PushFollow(Follow._expression_5_in_expression_61392);
			a=expression_5();
			PopFollow();

			stream_expression_5.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 231:19: -> $a
			{
				DebugLocation(231, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(231, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:231:25: ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )*
			try { DebugEnterSubRule(58);
			while (true)
			{
				int alt58=2;
				try { DebugEnterDecision(58, decisionCanBacktrack[58]);
				int LA58_0 = input.LA(1);

				if ((LA58_0==WS))
				{
					int LA58_1 = input.LA(2);

					if ((LA58_1==AND))
					{
						alt58 = 1;
					}


				}


				} finally { DebugExitDecision(58); }
				switch ( alt58 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:231:26: WS op_6 WS b= expression_5
					{
					DebugLocation(231, 26);
					WS157=(IToken)Match(input,WS,Follow._WS_in_expression_61399);  
					stream_WS.Add(WS157);

					DebugLocation(231, 29);
					PushFollow(Follow._op_6_in_expression_61401);
					op_6158=op_6();
					PopFollow();

					stream_op_6.Add(op_6158.Tree);
					DebugLocation(231, 34);
					WS159=(IToken)Match(input,WS,Follow._WS_in_expression_61403);  
					stream_WS.Add(WS159);

					DebugLocation(231, 38);
					PushFollow(Follow._expression_5_in_expression_61407);
					b=expression_5();
					PopFollow();

					stream_expression_5.Add(b.Tree);


					{
					// AST REWRITE
					// elements: op_6, expression_6, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 231:52: -> ^( T_OP_BINARY op_6 $expression_6 $b)
					{
						DebugLocation(231, 55);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:231:55: ^( T_OP_BINARY op_6 $expression_6 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(231, 57);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(231, 69);
						adaptor.AddChild(root_1, stream_op_6.NextTree());
						DebugLocation(231, 75);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(231, 89);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop58;
				}
			}

			loop58:
				;

			} finally { DebugExitSubRule(58); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_6", 28);
			LeaveRule("expression_6", 28);
			LeaveRule_expression_6();
	    }
	 	DebugLocation(232, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_6"); }
		return retval;

	}
	// $ANTLR end "expression_6"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_6() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_6() {}

	// $ANTLR start "op_6"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:234:1: op_6 : AND -> T_AND ;
	[GrammarRule("op_6")]
	private AstParserRuleReturnScope<object, IToken> op_6()
	{
		EnterRule_op_6();
		EnterRule("op_6", 29);
		TraceIn("op_6", 29);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken AND160 = default(IToken);

	    object AND160_tree = default(object);
	    RewriteRuleITokenStream stream_AND=new RewriteRuleITokenStream(adaptor,"token AND");

		try { DebugEnterRule(GrammarFileName, "op_6");
		DebugLocation(234, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:234:6: ( AND -> T_AND )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:234:8: AND
			{
			DebugLocation(234, 8);
			AND160=(IToken)Match(input,AND,Follow._AND_in_op_61435);  
			stream_AND.Add(AND160);



			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 234:12: -> T_AND
			{
				DebugLocation(234, 15);
				adaptor.AddChild(root_0, (object)adaptor.Create(T_AND, "T_AND"));

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_6", 29);
			LeaveRule("op_6", 29);
			LeaveRule_op_6();
	    }
	 	DebugLocation(235, 1);
		} finally { DebugExitRule(GrammarFileName, "op_6"); }
		return retval;

	}
	// $ANTLR end "op_6"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_5() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_5() {}

	// $ANTLR start "expression_5"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:237:1: expression_5 : ( op_5 WS expression_5 -> ^( T_OP_UNARY op_5 expression_5 ) | expression_4 );
	[GrammarRule("expression_5")]
	private AstParserRuleReturnScope<object, IToken> expression_5()
	{
		EnterRule_expression_5();
		EnterRule("expression_5", 30);
		TraceIn("expression_5", 30);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS162 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> op_5161 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_5163 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_4164 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS162_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression_5=new RewriteRuleSubtreeStream(adaptor,"rule expression_5");
	    RewriteRuleSubtreeStream stream_op_5=new RewriteRuleSubtreeStream(adaptor,"rule op_5");
		try { DebugEnterRule(GrammarFileName, "expression_5");
		DebugLocation(237, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:238:2: ( op_5 WS expression_5 -> ^( T_OP_UNARY op_5 expression_5 ) | expression_4 )
			int alt59=2;
			try { DebugEnterDecision(59, decisionCanBacktrack[59]);
			int LA59_0 = input.LA(1);

			if ((LA59_0==NOT))
			{
				alt59 = 1;
			}
			else if (((LA59_0>=CASE && LA59_0<=CAST)||LA59_0==CONVERT||LA59_0==EXISTS||LA59_0==NUMBER||LA59_0==SIMPLE_FILE||(LA59_0>=STRING && LA59_0<=SYSTEMVAR)||LA59_0==TOKEN||LA59_0==132))
			{
				alt59 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 59, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(59); }
			switch (alt59)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:238:4: op_5 WS expression_5
				{
				DebugLocation(238, 4);
				PushFollow(Follow._op_5_in_expression_51453);
				op_5161=op_5();
				PopFollow();

				stream_op_5.Add(op_5161.Tree);
				DebugLocation(238, 9);
				WS162=(IToken)Match(input,WS,Follow._WS_in_expression_51455);  
				stream_WS.Add(WS162);

				DebugLocation(238, 12);
				PushFollow(Follow._expression_5_in_expression_51457);
				expression_5163=expression_5();
				PopFollow();

				stream_expression_5.Add(expression_5163.Tree);


				{
				// AST REWRITE
				// elements: op_5, expression_5
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 238:25: -> ^( T_OP_UNARY op_5 expression_5 )
				{
					DebugLocation(238, 28);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:238:28: ^( T_OP_UNARY op_5 expression_5 )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(238, 30);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_UNARY, "T_OP_UNARY"), root_1);

					DebugLocation(238, 41);
					adaptor.AddChild(root_1, stream_op_5.NextTree());
					DebugLocation(238, 46);
					adaptor.AddChild(root_1, stream_expression_5.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:239:4: expression_4
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(239, 4);
				PushFollow(Follow._expression_4_in_expression_51472);
				expression_4164=expression_4();
				PopFollow();

				adaptor.AddChild(root_0, expression_4164.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_5", 30);
			LeaveRule("expression_5", 30);
			LeaveRule_expression_5();
	    }
	 	DebugLocation(240, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_5"); }
		return retval;

	}
	// $ANTLR end "expression_5"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_5() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_5() {}

	// $ANTLR start "op_5"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:242:1: op_5 : NOT -> T_NOT ;
	[GrammarRule("op_5")]
	private AstParserRuleReturnScope<object, IToken> op_5()
	{
		EnterRule_op_5();
		EnterRule("op_5", 31);
		TraceIn("op_5", 31);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken NOT165 = default(IToken);

	    object NOT165_tree = default(object);
	    RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");

		try { DebugEnterRule(GrammarFileName, "op_5");
		DebugLocation(242, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:242:7: ( NOT -> T_NOT )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:242:9: NOT
			{
			DebugLocation(242, 9);
			NOT165=(IToken)Match(input,NOT,Follow._NOT_in_op_51483);  
			stream_NOT.Add(NOT165);



			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 242:13: -> T_NOT
			{
				DebugLocation(242, 16);
				adaptor.AddChild(root_0, (object)adaptor.Create(T_NOT, "T_NOT"));

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_5", 31);
			LeaveRule("op_5", 31);
			LeaveRule_op_5();
	    }
	 	DebugLocation(243, 1);
		} finally { DebugExitRule(GrammarFileName, "op_5"); }
		return retval;

	}
	// $ANTLR end "op_5"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_4() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_4() {}

	// $ANTLR start "expression_4"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:245:1: expression_4 : (a= expression_3 -> $a) ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )* ;
	[GrammarRule("expression_4")]
	private AstParserRuleReturnScope<object, IToken> expression_4()
	{
		EnterRule_expression_4();
		EnterRule("expression_4", 32);
		TraceIn("expression_4", 32);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS166 = default(IToken);
	    IToken WS168 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_4167 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS166_tree = default(object);
	    object WS168_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression_3=new RewriteRuleSubtreeStream(adaptor,"rule expression_3");
	    RewriteRuleSubtreeStream stream_op_4=new RewriteRuleSubtreeStream(adaptor,"rule op_4");
		try { DebugEnterRule(GrammarFileName, "expression_4");
		DebugLocation(245, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:246:2: ( (a= expression_3 -> $a) ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:246:4: (a= expression_3 -> $a) ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )*
			{
			DebugLocation(246, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:246:4: (a= expression_3 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:246:5: a= expression_3
			{
			DebugLocation(246, 6);
			PushFollow(Follow._expression_3_in_expression_41502);
			a=expression_3();
			PopFollow();

			stream_expression_3.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 246:19: -> $a
			{
				DebugLocation(246, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(246, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:246:25: ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )*
			try { DebugEnterSubRule(62);
			while (true)
			{
				int alt62=2;
				try { DebugEnterDecision(62, decisionCanBacktrack[62]);
				int LA62_0 = input.LA(1);

				if ((LA62_0==WS))
				{
					switch (input.LA(2))
					{
					case 143:
						{
						int LA62_4 = input.LA(3);

						if ((LA62_4==WS))
						{
							int LA62_13 = input.LA(4);

							if (((LA62_13>=CASE && LA62_13<=CAST)||LA62_13==CONVERT||LA62_13==EXISTS||LA62_13==NUMBER||LA62_13==SIMPLE_FILE||(LA62_13>=STRING && LA62_13<=SYSTEMVAR)||LA62_13==TOKEN||LA62_13==132))
							{
								alt62 = 1;
							}


						}
						else if (((LA62_4>=CASE && LA62_4<=CAST)||LA62_4==CONVERT||LA62_4==EXISTS||LA62_4==NUMBER||LA62_4==SIMPLE_FILE||(LA62_4>=STRING && LA62_4<=SYSTEMVAR)||LA62_4==TOKEN||LA62_4==132))
						{
							alt62 = 1;
						}


						}
						break;
					case 145:
						{
						int LA62_5 = input.LA(3);

						if ((LA62_5==WS))
						{
							int LA62_13 = input.LA(4);

							if (((LA62_13>=CASE && LA62_13<=CAST)||LA62_13==CONVERT||LA62_13==EXISTS||LA62_13==NUMBER||LA62_13==SIMPLE_FILE||(LA62_13>=STRING && LA62_13<=SYSTEMVAR)||LA62_13==TOKEN||LA62_13==132))
							{
								alt62 = 1;
							}


						}
						else if (((LA62_5>=CASE && LA62_5<=CAST)||LA62_5==CONVERT||LA62_5==EXISTS||LA62_5==NUMBER||LA62_5==SIMPLE_FILE||(LA62_5>=STRING && LA62_5<=SYSTEMVAR)||LA62_5==TOKEN||LA62_5==132))
						{
							alt62 = 1;
						}


						}
						break;
					case 141:
						{
						int LA62_6 = input.LA(3);

						if ((LA62_6==WS))
						{
							int LA62_13 = input.LA(4);

							if (((LA62_13>=CASE && LA62_13<=CAST)||LA62_13==CONVERT||LA62_13==EXISTS||LA62_13==NUMBER||LA62_13==SIMPLE_FILE||(LA62_13>=STRING && LA62_13<=SYSTEMVAR)||LA62_13==TOKEN||LA62_13==132))
							{
								alt62 = 1;
							}


						}
						else if (((LA62_6>=CASE && LA62_6<=CAST)||LA62_6==CONVERT||LA62_6==EXISTS||LA62_6==NUMBER||LA62_6==SIMPLE_FILE||(LA62_6>=STRING && LA62_6<=SYSTEMVAR)||LA62_6==TOKEN||LA62_6==132))
						{
							alt62 = 1;
						}


						}
						break;
					case 142:
						{
						int LA62_7 = input.LA(3);

						if ((LA62_7==WS))
						{
							int LA62_13 = input.LA(4);

							if (((LA62_13>=CASE && LA62_13<=CAST)||LA62_13==CONVERT||LA62_13==EXISTS||LA62_13==NUMBER||LA62_13==SIMPLE_FILE||(LA62_13>=STRING && LA62_13<=SYSTEMVAR)||LA62_13==TOKEN||LA62_13==132))
							{
								alt62 = 1;
							}


						}
						else if (((LA62_7>=CASE && LA62_7<=CAST)||LA62_7==CONVERT||LA62_7==EXISTS||LA62_7==NUMBER||LA62_7==SIMPLE_FILE||(LA62_7>=STRING && LA62_7<=SYSTEMVAR)||LA62_7==TOKEN||LA62_7==132))
						{
							alt62 = 1;
						}


						}
						break;
					case 128:
						{
						int LA62_8 = input.LA(3);

						if ((LA62_8==WS))
						{
							int LA62_13 = input.LA(4);

							if (((LA62_13>=CASE && LA62_13<=CAST)||LA62_13==CONVERT||LA62_13==EXISTS||LA62_13==NUMBER||LA62_13==SIMPLE_FILE||(LA62_13>=STRING && LA62_13<=SYSTEMVAR)||LA62_13==TOKEN||LA62_13==132))
							{
								alt62 = 1;
							}


						}
						else if (((LA62_8>=CASE && LA62_8<=CAST)||LA62_8==CONVERT||LA62_8==EXISTS||LA62_8==NUMBER||LA62_8==SIMPLE_FILE||(LA62_8>=STRING && LA62_8<=SYSTEMVAR)||LA62_8==TOKEN||LA62_8==132))
						{
							alt62 = 1;
						}


						}
						break;
					case 129:
						{
						int LA62_9 = input.LA(3);

						if ((LA62_9==WS))
						{
							int LA62_13 = input.LA(4);

							if (((LA62_13>=CASE && LA62_13<=CAST)||LA62_13==CONVERT||LA62_13==EXISTS||LA62_13==NUMBER||LA62_13==SIMPLE_FILE||(LA62_13>=STRING && LA62_13<=SYSTEMVAR)||LA62_13==TOKEN||LA62_13==132))
							{
								alt62 = 1;
							}


						}
						else if (((LA62_9>=CASE && LA62_9<=CAST)||LA62_9==CONVERT||LA62_9==EXISTS||LA62_9==NUMBER||LA62_9==SIMPLE_FILE||(LA62_9>=STRING && LA62_9<=SYSTEMVAR)||LA62_9==TOKEN||LA62_9==132))
						{
							alt62 = 1;
						}


						}
						break;
					case 127:
						{
						int LA62_10 = input.LA(3);

						if ((LA62_10==WS))
						{
							int LA62_13 = input.LA(4);

							if (((LA62_13>=CASE && LA62_13<=CAST)||LA62_13==CONVERT||LA62_13==EXISTS||LA62_13==NUMBER||LA62_13==SIMPLE_FILE||(LA62_13>=STRING && LA62_13<=SYSTEMVAR)||LA62_13==TOKEN||LA62_13==132))
							{
								alt62 = 1;
							}


						}
						else if (((LA62_10>=CASE && LA62_10<=CAST)||LA62_10==CONVERT||LA62_10==EXISTS||LA62_10==NUMBER||LA62_10==SIMPLE_FILE||(LA62_10>=STRING && LA62_10<=SYSTEMVAR)||LA62_10==TOKEN||LA62_10==132))
						{
							alt62 = 1;
						}


						}
						break;
					case 144:
						{
						int LA62_11 = input.LA(3);

						if ((LA62_11==WS))
						{
							int LA62_13 = input.LA(4);

							if (((LA62_13>=CASE && LA62_13<=CAST)||LA62_13==CONVERT||LA62_13==EXISTS||LA62_13==NUMBER||LA62_13==SIMPLE_FILE||(LA62_13>=STRING && LA62_13<=SYSTEMVAR)||LA62_13==TOKEN||LA62_13==132))
							{
								alt62 = 1;
							}


						}
						else if (((LA62_11>=CASE && LA62_11<=CAST)||LA62_11==CONVERT||LA62_11==EXISTS||LA62_11==NUMBER||LA62_11==SIMPLE_FILE||(LA62_11>=STRING && LA62_11<=SYSTEMVAR)||LA62_11==TOKEN||LA62_11==132))
						{
							alt62 = 1;
						}


						}
						break;
					case 140:
						{
						int LA62_12 = input.LA(3);

						if ((LA62_12==WS))
						{
							int LA62_13 = input.LA(4);

							if (((LA62_13>=CASE && LA62_13<=CAST)||LA62_13==CONVERT||LA62_13==EXISTS||LA62_13==NUMBER||LA62_13==SIMPLE_FILE||(LA62_13>=STRING && LA62_13<=SYSTEMVAR)||LA62_13==TOKEN||LA62_13==132))
							{
								alt62 = 1;
							}


						}
						else if (((LA62_12>=CASE && LA62_12<=CAST)||LA62_12==CONVERT||LA62_12==EXISTS||LA62_12==NUMBER||LA62_12==SIMPLE_FILE||(LA62_12>=STRING && LA62_12<=SYSTEMVAR)||LA62_12==TOKEN||LA62_12==132))
						{
							alt62 = 1;
						}


						}
						break;
					}

				}
				else if (((LA62_0>=127 && LA62_0<=129)||(LA62_0>=140 && LA62_0<=145)))
				{
					alt62 = 1;
				}


				} finally { DebugExitDecision(62); }
				switch ( alt62 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:246:26: ( WS )? op_4 ( WS )? b= expression_3
					{
					DebugLocation(246, 26);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:246:26: ( WS )?
					int alt60=2;
					try { DebugEnterSubRule(60);
					try { DebugEnterDecision(60, decisionCanBacktrack[60]);
					int LA60_0 = input.LA(1);

					if ((LA60_0==WS))
					{
						alt60 = 1;
					}
					} finally { DebugExitDecision(60); }
					switch (alt60)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:246:26: WS
						{
						DebugLocation(246, 26);
						WS166=(IToken)Match(input,WS,Follow._WS_in_expression_41509);  
						stream_WS.Add(WS166);


						}
						break;

					}
					} finally { DebugExitSubRule(60); }

					DebugLocation(246, 30);
					PushFollow(Follow._op_4_in_expression_41512);
					op_4167=op_4();
					PopFollow();

					stream_op_4.Add(op_4167.Tree);
					DebugLocation(246, 35);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:246:35: ( WS )?
					int alt61=2;
					try { DebugEnterSubRule(61);
					try { DebugEnterDecision(61, decisionCanBacktrack[61]);
					int LA61_0 = input.LA(1);

					if ((LA61_0==WS))
					{
						alt61 = 1;
					}
					} finally { DebugExitDecision(61); }
					switch (alt61)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:246:35: WS
						{
						DebugLocation(246, 35);
						WS168=(IToken)Match(input,WS,Follow._WS_in_expression_41514);  
						stream_WS.Add(WS168);


						}
						break;

					}
					} finally { DebugExitSubRule(61); }

					DebugLocation(246, 40);
					PushFollow(Follow._expression_3_in_expression_41519);
					b=expression_3();
					PopFollow();

					stream_expression_3.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, expression_4, op_4
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 246:54: -> ^( T_OP_BINARY op_4 $expression_4 $b)
					{
						DebugLocation(246, 57);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:246:57: ^( T_OP_BINARY op_4 $expression_4 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(246, 59);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(246, 71);
						adaptor.AddChild(root_1, stream_op_4.NextTree());
						DebugLocation(246, 77);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(246, 91);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop62;
				}
			}

			loop62:
				;

			} finally { DebugExitSubRule(62); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_4", 32);
			LeaveRule("expression_4", 32);
			LeaveRule_expression_4();
	    }
	 	DebugLocation(247, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_4"); }
		return retval;

	}
	// $ANTLR end "expression_4"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_4() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_4() {}

	// $ANTLR start "op_4"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:249:1: op_4 : ( '=' -> T_EQUAL | '>=' -> T_NOTLESS | '<=' -> T_NOTGREATER | '<>' -> T_NOTEQUAL | '!=' -> T_NOTEQUAL | '!>' -> T_NOTGREATER | '!<' -> T_NOTLESS | '>' -> T_GREATER | '<' -> T_LESS );
	[GrammarRule("op_4")]
	private AstParserRuleReturnScope<object, IToken> op_4()
	{
		EnterRule_op_4();
		EnterRule("op_4", 33);
		TraceIn("op_4", 33);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal169 = default(IToken);
	    IToken string_literal170 = default(IToken);
	    IToken string_literal171 = default(IToken);
	    IToken string_literal172 = default(IToken);
	    IToken string_literal173 = default(IToken);
	    IToken string_literal174 = default(IToken);
	    IToken string_literal175 = default(IToken);
	    IToken char_literal176 = default(IToken);
	    IToken char_literal177 = default(IToken);

	    object char_literal169_tree = default(object);
	    object string_literal170_tree = default(object);
	    object string_literal171_tree = default(object);
	    object string_literal172_tree = default(object);
	    object string_literal173_tree = default(object);
	    object string_literal174_tree = default(object);
	    object string_literal175_tree = default(object);
	    object char_literal176_tree = default(object);
	    object char_literal177_tree = default(object);
	    RewriteRuleITokenStream stream_143=new RewriteRuleITokenStream(adaptor,"token 143");
	    RewriteRuleITokenStream stream_144=new RewriteRuleITokenStream(adaptor,"token 144");
	    RewriteRuleITokenStream stream_127=new RewriteRuleITokenStream(adaptor,"token 127");
	    RewriteRuleITokenStream stream_145=new RewriteRuleITokenStream(adaptor,"token 145");
	    RewriteRuleITokenStream stream_128=new RewriteRuleITokenStream(adaptor,"token 128");
	    RewriteRuleITokenStream stream_140=new RewriteRuleITokenStream(adaptor,"token 140");
	    RewriteRuleITokenStream stream_129=new RewriteRuleITokenStream(adaptor,"token 129");
	    RewriteRuleITokenStream stream_142=new RewriteRuleITokenStream(adaptor,"token 142");
	    RewriteRuleITokenStream stream_141=new RewriteRuleITokenStream(adaptor,"token 141");

		try { DebugEnterRule(GrammarFileName, "op_4");
		DebugLocation(249, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:249:6: ( '=' -> T_EQUAL | '>=' -> T_NOTLESS | '<=' -> T_NOTGREATER | '<>' -> T_NOTEQUAL | '!=' -> T_NOTEQUAL | '!>' -> T_NOTGREATER | '!<' -> T_NOTLESS | '>' -> T_GREATER | '<' -> T_LESS )
			int alt63=9;
			try { DebugEnterDecision(63, decisionCanBacktrack[63]);
			switch (input.LA(1))
			{
			case 143:
				{
				alt63 = 1;
				}
				break;
			case 145:
				{
				alt63 = 2;
				}
				break;
			case 141:
				{
				alt63 = 3;
				}
				break;
			case 142:
				{
				alt63 = 4;
				}
				break;
			case 128:
				{
				alt63 = 5;
				}
				break;
			case 129:
				{
				alt63 = 6;
				}
				break;
			case 127:
				{
				alt63 = 7;
				}
				break;
			case 144:
				{
				alt63 = 8;
				}
				break;
			case 140:
				{
				alt63 = 9;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 63, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(63); }
			switch (alt63)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:249:8: '='
				{
				DebugLocation(249, 8);
				char_literal169=(IToken)Match(input,143,Follow._143_in_op_41545);  
				stream_143.Add(char_literal169);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 249:12: -> T_EQUAL
				{
					DebugLocation(249, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_EQUAL, "T_EQUAL"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:250:4: '>='
				{
				DebugLocation(250, 4);
				string_literal170=(IToken)Match(input,145,Follow._145_in_op_41554);  
				stream_145.Add(string_literal170);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 250:9: -> T_NOTLESS
				{
					DebugLocation(250, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTLESS, "T_NOTLESS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:251:4: '<='
				{
				DebugLocation(251, 4);
				string_literal171=(IToken)Match(input,141,Follow._141_in_op_41564);  
				stream_141.Add(string_literal171);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 251:9: -> T_NOTGREATER
				{
					DebugLocation(251, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTGREATER, "T_NOTGREATER"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:252:4: '<>'
				{
				DebugLocation(252, 4);
				string_literal172=(IToken)Match(input,142,Follow._142_in_op_41574);  
				stream_142.Add(string_literal172);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 252:9: -> T_NOTEQUAL
				{
					DebugLocation(252, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTEQUAL, "T_NOTEQUAL"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:253:4: '!='
				{
				DebugLocation(253, 4);
				string_literal173=(IToken)Match(input,128,Follow._128_in_op_41583);  
				stream_128.Add(string_literal173);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 253:9: -> T_NOTEQUAL
				{
					DebugLocation(253, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTEQUAL, "T_NOTEQUAL"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:254:4: '!>'
				{
				DebugLocation(254, 4);
				string_literal174=(IToken)Match(input,129,Follow._129_in_op_41592);  
				stream_129.Add(string_literal174);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 254:9: -> T_NOTGREATER
				{
					DebugLocation(254, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTGREATER, "T_NOTGREATER"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:255:4: '!<'
				{
				DebugLocation(255, 4);
				string_literal175=(IToken)Match(input,127,Follow._127_in_op_41601);  
				stream_127.Add(string_literal175);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 255:9: -> T_NOTLESS
				{
					DebugLocation(255, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTLESS, "T_NOTLESS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:256:4: '>'
				{
				DebugLocation(256, 4);
				char_literal176=(IToken)Match(input,144,Follow._144_in_op_41610);  
				stream_144.Add(char_literal176);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 256:8: -> T_GREATER
				{
					DebugLocation(256, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_GREATER, "T_GREATER"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:257:4: '<'
				{
				DebugLocation(257, 4);
				char_literal177=(IToken)Match(input,140,Follow._140_in_op_41620);  
				stream_140.Add(char_literal177);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 257:8: -> T_LESS
				{
					DebugLocation(257, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_LESS, "T_LESS"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_4", 33);
			LeaveRule("op_4", 33);
			LeaveRule_op_4();
	    }
	 	DebugLocation(258, 1);
		} finally { DebugExitRule(GrammarFileName, "op_4"); }
		return retval;

	}
	// $ANTLR end "op_4"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_3() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_3() {}

	// $ANTLR start "expression_3"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:260:1: expression_3 : (a= expression_2 -> $a) ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )* ;
	[GrammarRule("expression_3")]
	private AstParserRuleReturnScope<object, IToken> expression_3()
	{
		EnterRule_expression_3();
		EnterRule("expression_3", 34);
		TraceIn("expression_3", 34);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS178 = default(IToken);
	    IToken WS180 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_3179 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS178_tree = default(object);
	    object WS180_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_op_3=new RewriteRuleSubtreeStream(adaptor,"rule op_3");
	    RewriteRuleSubtreeStream stream_expression_2=new RewriteRuleSubtreeStream(adaptor,"rule expression_2");
		try { DebugEnterRule(GrammarFileName, "expression_3");
		DebugLocation(260, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:261:2: ( (a= expression_2 -> $a) ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:261:4: (a= expression_2 -> $a) ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )*
			{
			DebugLocation(261, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:261:4: (a= expression_2 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:261:5: a= expression_2
			{
			DebugLocation(261, 6);
			PushFollow(Follow._expression_2_in_expression_31639);
			a=expression_2();
			PopFollow();

			stream_expression_2.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 261:19: -> $a
			{
				DebugLocation(261, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(261, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:261:25: ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )*
			try { DebugEnterSubRule(66);
			while (true)
			{
				int alt66=2;
				try { DebugEnterDecision(66, decisionCanBacktrack[66]);
				int LA66_0 = input.LA(1);

				if ((LA66_0==WS))
				{
					int LA66_1 = input.LA(2);

					if ((LA66_1==131||LA66_1==135||LA66_1==137||(LA66_1>=148 && LA66_1<=149)))
					{
						alt66 = 1;
					}


				}
				else if ((LA66_0==131||LA66_0==135||LA66_0==137||(LA66_0>=148 && LA66_0<=149)))
				{
					alt66 = 1;
				}


				} finally { DebugExitDecision(66); }
				switch ( alt66 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:261:26: ( WS )? op_3 ( WS )? b= expression_2
					{
					DebugLocation(261, 26);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:261:26: ( WS )?
					int alt64=2;
					try { DebugEnterSubRule(64);
					try { DebugEnterDecision(64, decisionCanBacktrack[64]);
					int LA64_0 = input.LA(1);

					if ((LA64_0==WS))
					{
						alt64 = 1;
					}
					} finally { DebugExitDecision(64); }
					switch (alt64)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:261:26: WS
						{
						DebugLocation(261, 26);
						WS178=(IToken)Match(input,WS,Follow._WS_in_expression_31646);  
						stream_WS.Add(WS178);


						}
						break;

					}
					} finally { DebugExitSubRule(64); }

					DebugLocation(261, 30);
					PushFollow(Follow._op_3_in_expression_31649);
					op_3179=op_3();
					PopFollow();

					stream_op_3.Add(op_3179.Tree);
					DebugLocation(261, 35);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:261:35: ( WS )?
					int alt65=2;
					try { DebugEnterSubRule(65);
					try { DebugEnterDecision(65, decisionCanBacktrack[65]);
					int LA65_0 = input.LA(1);

					if ((LA65_0==WS))
					{
						alt65 = 1;
					}
					} finally { DebugExitDecision(65); }
					switch (alt65)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:261:35: WS
						{
						DebugLocation(261, 35);
						WS180=(IToken)Match(input,WS,Follow._WS_in_expression_31651);  
						stream_WS.Add(WS180);


						}
						break;

					}
					} finally { DebugExitSubRule(65); }

					DebugLocation(261, 40);
					PushFollow(Follow._expression_2_in_expression_31656);
					b=expression_2();
					PopFollow();

					stream_expression_2.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, expression_3, op_3
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 261:54: -> ^( T_OP_BINARY op_3 $expression_3 $b)
					{
						DebugLocation(261, 57);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:261:57: ^( T_OP_BINARY op_3 $expression_3 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(261, 59);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(261, 71);
						adaptor.AddChild(root_1, stream_op_3.NextTree());
						DebugLocation(261, 77);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(261, 91);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop66;
				}
			}

			loop66:
				;

			} finally { DebugExitSubRule(66); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_3", 34);
			LeaveRule("expression_3", 34);
			LeaveRule_expression_3();
	    }
	 	DebugLocation(262, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_3"); }
		return retval;

	}
	// $ANTLR end "expression_3"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_3() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_3() {}

	// $ANTLR start "op_3"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:264:1: op_3 : ( '+' -> T_PLUS | '-' -> T_MINUS | '&' -> T_BITWISE_AND | '|' -> T_BITWISE_OR | '^' -> T_BITWISE_XOR );
	[GrammarRule("op_3")]
	private AstParserRuleReturnScope<object, IToken> op_3()
	{
		EnterRule_op_3();
		EnterRule("op_3", 35);
		TraceIn("op_3", 35);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal181 = default(IToken);
	    IToken char_literal182 = default(IToken);
	    IToken char_literal183 = default(IToken);
	    IToken char_literal184 = default(IToken);
	    IToken char_literal185 = default(IToken);

	    object char_literal181_tree = default(object);
	    object char_literal182_tree = default(object);
	    object char_literal183_tree = default(object);
	    object char_literal184_tree = default(object);
	    object char_literal185_tree = default(object);
	    RewriteRuleITokenStream stream_135=new RewriteRuleITokenStream(adaptor,"token 135");
	    RewriteRuleITokenStream stream_148=new RewriteRuleITokenStream(adaptor,"token 148");
	    RewriteRuleITokenStream stream_149=new RewriteRuleITokenStream(adaptor,"token 149");
	    RewriteRuleITokenStream stream_137=new RewriteRuleITokenStream(adaptor,"token 137");
	    RewriteRuleITokenStream stream_131=new RewriteRuleITokenStream(adaptor,"token 131");

		try { DebugEnterRule(GrammarFileName, "op_3");
		DebugLocation(264, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:264:6: ( '+' -> T_PLUS | '-' -> T_MINUS | '&' -> T_BITWISE_AND | '|' -> T_BITWISE_OR | '^' -> T_BITWISE_XOR )
			int alt67=5;
			try { DebugEnterDecision(67, decisionCanBacktrack[67]);
			switch (input.LA(1))
			{
			case 135:
				{
				alt67 = 1;
				}
				break;
			case 137:
				{
				alt67 = 2;
				}
				break;
			case 131:
				{
				alt67 = 3;
				}
				break;
			case 149:
				{
				alt67 = 4;
				}
				break;
			case 148:
				{
				alt67 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 67, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(67); }
			switch (alt67)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:264:8: '+'
				{
				DebugLocation(264, 8);
				char_literal181=(IToken)Match(input,135,Follow._135_in_op_31682);  
				stream_135.Add(char_literal181);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 264:12: -> T_PLUS
				{
					DebugLocation(264, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_PLUS, "T_PLUS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:265:4: '-'
				{
				DebugLocation(265, 4);
				char_literal182=(IToken)Match(input,137,Follow._137_in_op_31691);  
				stream_137.Add(char_literal182);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 265:8: -> T_MINUS
				{
					DebugLocation(265, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MINUS, "T_MINUS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:266:4: '&'
				{
				DebugLocation(266, 4);
				char_literal183=(IToken)Match(input,131,Follow._131_in_op_31700);  
				stream_131.Add(char_literal183);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 266:8: -> T_BITWISE_AND
				{
					DebugLocation(266, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_AND, "T_BITWISE_AND"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:267:4: '|'
				{
				DebugLocation(267, 4);
				char_literal184=(IToken)Match(input,149,Follow._149_in_op_31709);  
				stream_149.Add(char_literal184);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 267:8: -> T_BITWISE_OR
				{
					DebugLocation(267, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_OR, "T_BITWISE_OR"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:268:4: '^'
				{
				DebugLocation(268, 4);
				char_literal185=(IToken)Match(input,148,Follow._148_in_op_31718);  
				stream_148.Add(char_literal185);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 268:8: -> T_BITWISE_XOR
				{
					DebugLocation(268, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_XOR, "T_BITWISE_XOR"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_3", 35);
			LeaveRule("op_3", 35);
			LeaveRule_op_3();
	    }
	 	DebugLocation(269, 1);
		} finally { DebugExitRule(GrammarFileName, "op_3"); }
		return retval;

	}
	// $ANTLR end "op_3"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_2() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_2() {}

	// $ANTLR start "expression_2"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:277:1: expression_2 : (a= expression_1 -> $a) ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )* ;
	[GrammarRule("expression_2")]
	private AstParserRuleReturnScope<object, IToken> expression_2()
	{
		EnterRule_expression_2();
		EnterRule("expression_2", 36);
		TraceIn("expression_2", 36);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS186 = default(IToken);
	    IToken WS188 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_2187 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS186_tree = default(object);
	    object WS188_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_op_2=new RewriteRuleSubtreeStream(adaptor,"rule op_2");
	    RewriteRuleSubtreeStream stream_expression_1=new RewriteRuleSubtreeStream(adaptor,"rule expression_1");
		try { DebugEnterRule(GrammarFileName, "expression_2");
		DebugLocation(277, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:278:2: ( (a= expression_1 -> $a) ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:278:4: (a= expression_1 -> $a) ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )*
			{
			DebugLocation(278, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:278:4: (a= expression_1 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:278:5: a= expression_1
			{
			DebugLocation(278, 6);
			PushFollow(Follow._expression_1_in_expression_21740);
			a=expression_1();
			PopFollow();

			stream_expression_1.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 278:19: -> $a
			{
				DebugLocation(278, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(278, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:278:25: ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )*
			try { DebugEnterSubRule(70);
			while (true)
			{
				int alt70=2;
				try { DebugEnterDecision(70, decisionCanBacktrack[70]);
				int LA70_0 = input.LA(1);

				if ((LA70_0==WS))
				{
					int LA70_1 = input.LA(2);

					if ((LA70_1==134))
					{
						int LA70_4 = input.LA(3);

						if ((LA70_4==WS))
						{
							int LA70_5 = input.LA(4);

							if (((LA70_5>=CASE && LA70_5<=CAST)||LA70_5==CONVERT||LA70_5==EXISTS||LA70_5==NUMBER||LA70_5==SIMPLE_FILE||(LA70_5>=STRING && LA70_5<=SYSTEMVAR)||LA70_5==TOKEN||LA70_5==132))
							{
								alt70 = 1;
							}


						}
						else if (((LA70_4>=CASE && LA70_4<=CAST)||LA70_4==CONVERT||LA70_4==EXISTS||LA70_4==NUMBER||LA70_4==SIMPLE_FILE||(LA70_4>=STRING && LA70_4<=SYSTEMVAR)||LA70_4==TOKEN||LA70_4==132))
						{
							alt70 = 1;
						}


					}
					else if ((LA70_1==130||LA70_1==138))
					{
						alt70 = 1;
					}


				}
				else if ((LA70_0==130||LA70_0==134||LA70_0==138))
				{
					alt70 = 1;
				}


				} finally { DebugExitDecision(70); }
				switch ( alt70 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:278:26: ( WS )? op_2 ( WS )? b= expression_1
					{
					DebugLocation(278, 26);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:278:26: ( WS )?
					int alt68=2;
					try { DebugEnterSubRule(68);
					try { DebugEnterDecision(68, decisionCanBacktrack[68]);
					int LA68_0 = input.LA(1);

					if ((LA68_0==WS))
					{
						alt68 = 1;
					}
					} finally { DebugExitDecision(68); }
					switch (alt68)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:278:26: WS
						{
						DebugLocation(278, 26);
						WS186=(IToken)Match(input,WS,Follow._WS_in_expression_21747);  
						stream_WS.Add(WS186);


						}
						break;

					}
					} finally { DebugExitSubRule(68); }

					DebugLocation(278, 30);
					PushFollow(Follow._op_2_in_expression_21750);
					op_2187=op_2();
					PopFollow();

					stream_op_2.Add(op_2187.Tree);
					DebugLocation(278, 35);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:278:35: ( WS )?
					int alt69=2;
					try { DebugEnterSubRule(69);
					try { DebugEnterDecision(69, decisionCanBacktrack[69]);
					int LA69_0 = input.LA(1);

					if ((LA69_0==WS))
					{
						alt69 = 1;
					}
					} finally { DebugExitDecision(69); }
					switch (alt69)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:278:35: WS
						{
						DebugLocation(278, 35);
						WS188=(IToken)Match(input,WS,Follow._WS_in_expression_21752);  
						stream_WS.Add(WS188);


						}
						break;

					}
					} finally { DebugExitSubRule(69); }

					DebugLocation(278, 40);
					PushFollow(Follow._expression_1_in_expression_21757);
					b=expression_1();
					PopFollow();

					stream_expression_1.Add(b.Tree);


					{
					// AST REWRITE
					// elements: op_2, expression_2, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 278:54: -> ^( T_OP_BINARY op_2 $expression_2 $b)
					{
						DebugLocation(278, 57);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:278:57: ^( T_OP_BINARY op_2 $expression_2 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(278, 59);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(278, 71);
						adaptor.AddChild(root_1, stream_op_2.NextTree());
						DebugLocation(278, 77);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(278, 91);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop70;
				}
			}

			loop70:
				;

			} finally { DebugExitSubRule(70); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_2", 36);
			LeaveRule("expression_2", 36);
			LeaveRule_expression_2();
	    }
	 	DebugLocation(279, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_2"); }
		return retval;

	}
	// $ANTLR end "expression_2"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_2() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_2() {}

	// $ANTLR start "op_2"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:281:1: op_2 : ( '*' -> T_PRODUCT | '/' -> T_DIVIDE | '%' -> T_MODULO );
	[GrammarRule("op_2")]
	private AstParserRuleReturnScope<object, IToken> op_2()
	{
		EnterRule_op_2();
		EnterRule("op_2", 37);
		TraceIn("op_2", 37);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal189 = default(IToken);
	    IToken char_literal190 = default(IToken);
	    IToken char_literal191 = default(IToken);

	    object char_literal189_tree = default(object);
	    object char_literal190_tree = default(object);
	    object char_literal191_tree = default(object);
	    RewriteRuleITokenStream stream_134=new RewriteRuleITokenStream(adaptor,"token 134");
	    RewriteRuleITokenStream stream_138=new RewriteRuleITokenStream(adaptor,"token 138");
	    RewriteRuleITokenStream stream_130=new RewriteRuleITokenStream(adaptor,"token 130");

		try { DebugEnterRule(GrammarFileName, "op_2");
		DebugLocation(281, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:281:6: ( '*' -> T_PRODUCT | '/' -> T_DIVIDE | '%' -> T_MODULO )
			int alt71=3;
			try { DebugEnterDecision(71, decisionCanBacktrack[71]);
			switch (input.LA(1))
			{
			case 134:
				{
				alt71 = 1;
				}
				break;
			case 138:
				{
				alt71 = 2;
				}
				break;
			case 130:
				{
				alt71 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 71, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(71); }
			switch (alt71)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:281:8: '*'
				{
				DebugLocation(281, 8);
				char_literal189=(IToken)Match(input,134,Follow._134_in_op_21783);  
				stream_134.Add(char_literal189);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 281:12: -> T_PRODUCT
				{
					DebugLocation(281, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_PRODUCT, "T_PRODUCT"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:282:4: '/'
				{
				DebugLocation(282, 4);
				char_literal190=(IToken)Match(input,138,Follow._138_in_op_21792);  
				stream_138.Add(char_literal190);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 282:8: -> T_DIVIDE
				{
					DebugLocation(282, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_DIVIDE, "T_DIVIDE"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:283:4: '%'
				{
				DebugLocation(283, 4);
				char_literal191=(IToken)Match(input,130,Follow._130_in_op_21801);  
				stream_130.Add(char_literal191);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 283:8: -> T_MODULO
				{
					DebugLocation(283, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MODULO, "T_MODULO"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_2", 37);
			LeaveRule("op_2", 37);
			LeaveRule_op_2();
	    }
	 	DebugLocation(284, 1);
		} finally { DebugExitRule(GrammarFileName, "op_2"); }
		return retval;

	}
	// $ANTLR end "op_2"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_1() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_1() {}

	// $ANTLR start "expression_1"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:286:1: expression_1 : ( '(' ( WS )? op_1 ( WS )? expression_1 ( WS )? ')' -> ^( T_OP_UNARY op_1 expression_1 ) | expression_atom );
	[GrammarRule("expression_1")]
	private AstParserRuleReturnScope<object, IToken> expression_1()
	{
		EnterRule_expression_1();
		EnterRule("expression_1", 38);
		TraceIn("expression_1", 38);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal192 = default(IToken);
	    IToken WS193 = default(IToken);
	    IToken WS195 = default(IToken);
	    IToken WS197 = default(IToken);
	    IToken char_literal198 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> op_1194 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_1196 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_atom199 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal192_tree = default(object);
	    object WS193_tree = default(object);
	    object WS195_tree = default(object);
	    object WS197_tree = default(object);
	    object char_literal198_tree = default(object);
	    RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
	    RewriteRuleITokenStream stream_133=new RewriteRuleITokenStream(adaptor,"token 133");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression_1=new RewriteRuleSubtreeStream(adaptor,"rule expression_1");
	    RewriteRuleSubtreeStream stream_op_1=new RewriteRuleSubtreeStream(adaptor,"rule op_1");
		try { DebugEnterRule(GrammarFileName, "expression_1");
		DebugLocation(286, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:288:2: ( '(' ( WS )? op_1 ( WS )? expression_1 ( WS )? ')' -> ^( T_OP_UNARY op_1 expression_1 ) | expression_atom )
			int alt75=2;
			try { DebugEnterDecision(75, decisionCanBacktrack[75]);
			int LA75_0 = input.LA(1);

			if ((LA75_0==132))
			{
				int LA75_1 = input.LA(2);

				if ((LA75_1==WS||LA75_1==135||LA75_1==137||LA75_1==150))
				{
					alt75 = 1;
				}
				else if (((LA75_1>=CASE && LA75_1<=CAST)||LA75_1==CONVERT||LA75_1==EXISTS||(LA75_1>=NOT && LA75_1<=NUMBER)||LA75_1==SIMPLE_FILE||(LA75_1>=STRING && LA75_1<=SYSTEMVAR)||LA75_1==TOKEN||LA75_1==132))
				{
					alt75 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 75, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if (((LA75_0>=CASE && LA75_0<=CAST)||LA75_0==CONVERT||LA75_0==EXISTS||LA75_0==NUMBER||LA75_0==SIMPLE_FILE||(LA75_0>=STRING && LA75_0<=SYSTEMVAR)||LA75_0==TOKEN))
			{
				alt75 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 75, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(75); }
			switch (alt75)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:288:4: '(' ( WS )? op_1 ( WS )? expression_1 ( WS )? ')'
				{
				DebugLocation(288, 4);
				char_literal192=(IToken)Match(input,132,Follow._132_in_expression_11819);  
				stream_132.Add(char_literal192);

				DebugLocation(288, 8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:288:8: ( WS )?
				int alt72=2;
				try { DebugEnterSubRule(72);
				try { DebugEnterDecision(72, decisionCanBacktrack[72]);
				int LA72_0 = input.LA(1);

				if ((LA72_0==WS))
				{
					alt72 = 1;
				}
				} finally { DebugExitDecision(72); }
				switch (alt72)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:288:8: WS
					{
					DebugLocation(288, 8);
					WS193=(IToken)Match(input,WS,Follow._WS_in_expression_11821);  
					stream_WS.Add(WS193);


					}
					break;

				}
				} finally { DebugExitSubRule(72); }

				DebugLocation(288, 12);
				PushFollow(Follow._op_1_in_expression_11824);
				op_1194=op_1();
				PopFollow();

				stream_op_1.Add(op_1194.Tree);
				DebugLocation(288, 17);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:288:17: ( WS )?
				int alt73=2;
				try { DebugEnterSubRule(73);
				try { DebugEnterDecision(73, decisionCanBacktrack[73]);
				int LA73_0 = input.LA(1);

				if ((LA73_0==WS))
				{
					alt73 = 1;
				}
				} finally { DebugExitDecision(73); }
				switch (alt73)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:288:17: WS
					{
					DebugLocation(288, 17);
					WS195=(IToken)Match(input,WS,Follow._WS_in_expression_11826);  
					stream_WS.Add(WS195);


					}
					break;

				}
				} finally { DebugExitSubRule(73); }

				DebugLocation(288, 21);
				PushFollow(Follow._expression_1_in_expression_11829);
				expression_1196=expression_1();
				PopFollow();

				stream_expression_1.Add(expression_1196.Tree);
				DebugLocation(288, 34);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:288:34: ( WS )?
				int alt74=2;
				try { DebugEnterSubRule(74);
				try { DebugEnterDecision(74, decisionCanBacktrack[74]);
				int LA74_0 = input.LA(1);

				if ((LA74_0==WS))
				{
					alt74 = 1;
				}
				} finally { DebugExitDecision(74); }
				switch (alt74)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:288:34: WS
					{
					DebugLocation(288, 34);
					WS197=(IToken)Match(input,WS,Follow._WS_in_expression_11831);  
					stream_WS.Add(WS197);


					}
					break;

				}
				} finally { DebugExitSubRule(74); }

				DebugLocation(288, 38);
				char_literal198=(IToken)Match(input,133,Follow._133_in_expression_11834);  
				stream_133.Add(char_literal198);



				{
				// AST REWRITE
				// elements: expression_1, op_1
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 288:42: -> ^( T_OP_UNARY op_1 expression_1 )
				{
					DebugLocation(288, 45);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:288:45: ^( T_OP_UNARY op_1 expression_1 )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(288, 47);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_UNARY, "T_OP_UNARY"), root_1);

					DebugLocation(288, 58);
					adaptor.AddChild(root_1, stream_op_1.NextTree());
					DebugLocation(288, 63);
					adaptor.AddChild(root_1, stream_expression_1.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:290:4: expression_atom
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(290, 4);
				PushFollow(Follow._expression_atom_in_expression_11851);
				expression_atom199=expression_atom();
				PopFollow();

				adaptor.AddChild(root_0, expression_atom199.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_1", 38);
			LeaveRule("expression_1", 38);
			LeaveRule_expression_1();
	    }
	 	DebugLocation(291, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_1"); }
		return retval;

	}
	// $ANTLR end "expression_1"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_1() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_1() {}

	// $ANTLR start "op_1"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:293:1: op_1 : ( '~' -> T_BITWISE_NOT | '+' -> T_PLUS | '-' -> T_MINUS );
	[GrammarRule("op_1")]
	private AstParserRuleReturnScope<object, IToken> op_1()
	{
		EnterRule_op_1();
		EnterRule("op_1", 39);
		TraceIn("op_1", 39);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal200 = default(IToken);
	    IToken char_literal201 = default(IToken);
	    IToken char_literal202 = default(IToken);

	    object char_literal200_tree = default(object);
	    object char_literal201_tree = default(object);
	    object char_literal202_tree = default(object);
	    RewriteRuleITokenStream stream_135=new RewriteRuleITokenStream(adaptor,"token 135");
	    RewriteRuleITokenStream stream_150=new RewriteRuleITokenStream(adaptor,"token 150");
	    RewriteRuleITokenStream stream_137=new RewriteRuleITokenStream(adaptor,"token 137");

		try { DebugEnterRule(GrammarFileName, "op_1");
		DebugLocation(293, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:293:6: ( '~' -> T_BITWISE_NOT | '+' -> T_PLUS | '-' -> T_MINUS )
			int alt76=3;
			try { DebugEnterDecision(76, decisionCanBacktrack[76]);
			switch (input.LA(1))
			{
			case 150:
				{
				alt76 = 1;
				}
				break;
			case 135:
				{
				alt76 = 2;
				}
				break;
			case 137:
				{
				alt76 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 76, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(76); }
			switch (alt76)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:293:8: '~'
				{
				DebugLocation(293, 8);
				char_literal200=(IToken)Match(input,150,Follow._150_in_op_11861);  
				stream_150.Add(char_literal200);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 293:12: -> T_BITWISE_NOT
				{
					DebugLocation(293, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_NOT, "T_BITWISE_NOT"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:294:5: '+'
				{
				DebugLocation(294, 5);
				char_literal201=(IToken)Match(input,135,Follow._135_in_op_11871);  
				stream_135.Add(char_literal201);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 294:9: -> T_PLUS
				{
					DebugLocation(294, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_PLUS, "T_PLUS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:295:4: '-'
				{
				DebugLocation(295, 4);
				char_literal202=(IToken)Match(input,137,Follow._137_in_op_11880);  
				stream_137.Add(char_literal202);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 295:8: -> T_MINUS
				{
					DebugLocation(295, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MINUS, "T_MINUS"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_1", 39);
			LeaveRule("op_1", 39);
			LeaveRule_op_1();
	    }
	 	DebugLocation(296, 1);
		} finally { DebugExitRule(GrammarFileName, "op_1"); }
		return retval;

	}
	// $ANTLR end "op_1"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_atom() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_atom() {}

	// $ANTLR start "expression_atom"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:298:1: expression_atom : ( NUMBER -> ^( T_INTEGER NUMBER ) | STRING -> ^( T_STRING STRING ) | SYSTEMVAR -> ^( T_SYSTEMVAR SYSTEMVAR ) | '(' expression ')' -> expression | functioncall_or_column | conversion | case | EXISTS ( WS )? '(' ( WS )? select_command ( WS )? ')' -> ^( T_EXISTS select_command ) );
	[GrammarRule("expression_atom")]
	private AstParserRuleReturnScope<object, IToken> expression_atom()
	{
		EnterRule_expression_atom();
		EnterRule("expression_atom", 40);
		TraceIn("expression_atom", 40);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken NUMBER203 = default(IToken);
	    IToken STRING204 = default(IToken);
	    IToken SYSTEMVAR205 = default(IToken);
	    IToken char_literal206 = default(IToken);
	    IToken char_literal208 = default(IToken);
	    IToken EXISTS212 = default(IToken);
	    IToken WS213 = default(IToken);
	    IToken char_literal214 = default(IToken);
	    IToken WS215 = default(IToken);
	    IToken WS217 = default(IToken);
	    IToken char_literal218 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression207 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> functioncall_or_column209 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> conversion210 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> case211 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> select_command216 = default(AstParserRuleReturnScope<object, IToken>);

	    object NUMBER203_tree = default(object);
	    object STRING204_tree = default(object);
	    object SYSTEMVAR205_tree = default(object);
	    object char_literal206_tree = default(object);
	    object char_literal208_tree = default(object);
	    object EXISTS212_tree = default(object);
	    object WS213_tree = default(object);
	    object char_literal214_tree = default(object);
	    object WS215_tree = default(object);
	    object WS217_tree = default(object);
	    object char_literal218_tree = default(object);
	    RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
	    RewriteRuleITokenStream stream_133=new RewriteRuleITokenStream(adaptor,"token 133");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_EXISTS=new RewriteRuleITokenStream(adaptor,"token EXISTS");
	    RewriteRuleITokenStream stream_SYSTEMVAR=new RewriteRuleITokenStream(adaptor,"token SYSTEMVAR");
	    RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
	    RewriteRuleITokenStream stream_NUMBER=new RewriteRuleITokenStream(adaptor,"token NUMBER");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_select_command=new RewriteRuleSubtreeStream(adaptor,"rule select_command");
		try { DebugEnterRule(GrammarFileName, "expression_atom");
		DebugLocation(298, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:299:2: ( NUMBER -> ^( T_INTEGER NUMBER ) | STRING -> ^( T_STRING STRING ) | SYSTEMVAR -> ^( T_SYSTEMVAR SYSTEMVAR ) | '(' expression ')' -> expression | functioncall_or_column | conversion | case | EXISTS ( WS )? '(' ( WS )? select_command ( WS )? ')' -> ^( T_EXISTS select_command ) )
			int alt80=8;
			try { DebugEnterDecision(80, decisionCanBacktrack[80]);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt80 = 1;
				}
				break;
			case STRING:
				{
				alt80 = 2;
				}
				break;
			case SYSTEMVAR:
				{
				alt80 = 3;
				}
				break;
			case 132:
				{
				alt80 = 4;
				}
				break;
			case SIMPLE_FILE:
			case TOKEN:
				{
				alt80 = 5;
				}
				break;
			case CAST:
			case CONVERT:
				{
				alt80 = 6;
				}
				break;
			case CASE:
				{
				alt80 = 7;
				}
				break;
			case EXISTS:
				{
				alt80 = 8;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 80, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(80); }
			switch (alt80)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:299:4: NUMBER
				{
				DebugLocation(299, 4);
				NUMBER203=(IToken)Match(input,NUMBER,Follow._NUMBER_in_expression_atom1895);  
				stream_NUMBER.Add(NUMBER203);



				{
				// AST REWRITE
				// elements: NUMBER
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 299:11: -> ^( T_INTEGER NUMBER )
				{
					DebugLocation(299, 14);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:299:14: ^( T_INTEGER NUMBER )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(299, 16);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_INTEGER, "T_INTEGER"), root_1);

					DebugLocation(299, 26);
					adaptor.AddChild(root_1, stream_NUMBER.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:300:4: STRING
				{
				DebugLocation(300, 4);
				STRING204=(IToken)Match(input,STRING,Follow._STRING_in_expression_atom1908);  
				stream_STRING.Add(STRING204);



				{
				// AST REWRITE
				// elements: STRING
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 300:11: -> ^( T_STRING STRING )
				{
					DebugLocation(300, 14);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:300:14: ^( T_STRING STRING )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(300, 16);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_STRING, "T_STRING"), root_1);

					DebugLocation(300, 25);
					adaptor.AddChild(root_1, stream_STRING.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:301:4: SYSTEMVAR
				{
				DebugLocation(301, 4);
				SYSTEMVAR205=(IToken)Match(input,SYSTEMVAR,Follow._SYSTEMVAR_in_expression_atom1921);  
				stream_SYSTEMVAR.Add(SYSTEMVAR205);



				{
				// AST REWRITE
				// elements: SYSTEMVAR
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 301:14: -> ^( T_SYSTEMVAR SYSTEMVAR )
				{
					DebugLocation(301, 17);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:301:17: ^( T_SYSTEMVAR SYSTEMVAR )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(301, 19);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SYSTEMVAR, "T_SYSTEMVAR"), root_1);

					DebugLocation(301, 31);
					adaptor.AddChild(root_1, stream_SYSTEMVAR.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:302:4: '(' expression ')'
				{
				DebugLocation(302, 4);
				char_literal206=(IToken)Match(input,132,Follow._132_in_expression_atom1934);  
				stream_132.Add(char_literal206);

				DebugLocation(302, 8);
				PushFollow(Follow._expression_in_expression_atom1936);
				expression207=expression();
				PopFollow();

				stream_expression.Add(expression207.Tree);
				DebugLocation(302, 19);
				char_literal208=(IToken)Match(input,133,Follow._133_in_expression_atom1938);  
				stream_133.Add(char_literal208);



				{
				// AST REWRITE
				// elements: expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 302:23: -> expression
				{
					DebugLocation(302, 26);
					adaptor.AddChild(root_0, stream_expression.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:303:4: functioncall_or_column
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(303, 4);
				PushFollow(Follow._functioncall_or_column_in_expression_atom1947);
				functioncall_or_column209=functioncall_or_column();
				PopFollow();

				adaptor.AddChild(root_0, functioncall_or_column209.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:304:4: conversion
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(304, 4);
				PushFollow(Follow._conversion_in_expression_atom1952);
				conversion210=conversion();
				PopFollow();

				adaptor.AddChild(root_0, conversion210.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:305:4: case
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(305, 4);
				PushFollow(Follow._case_in_expression_atom1957);
				case211=@case();
				PopFollow();

				adaptor.AddChild(root_0, case211.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:306:4: EXISTS ( WS )? '(' ( WS )? select_command ( WS )? ')'
				{
				DebugLocation(306, 4);
				EXISTS212=(IToken)Match(input,EXISTS,Follow._EXISTS_in_expression_atom1962);  
				stream_EXISTS.Add(EXISTS212);

				DebugLocation(306, 11);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:306:11: ( WS )?
				int alt77=2;
				try { DebugEnterSubRule(77);
				try { DebugEnterDecision(77, decisionCanBacktrack[77]);
				int LA77_0 = input.LA(1);

				if ((LA77_0==WS))
				{
					alt77 = 1;
				}
				} finally { DebugExitDecision(77); }
				switch (alt77)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:306:11: WS
					{
					DebugLocation(306, 11);
					WS213=(IToken)Match(input,WS,Follow._WS_in_expression_atom1964);  
					stream_WS.Add(WS213);


					}
					break;

				}
				} finally { DebugExitSubRule(77); }

				DebugLocation(306, 15);
				char_literal214=(IToken)Match(input,132,Follow._132_in_expression_atom1967);  
				stream_132.Add(char_literal214);

				DebugLocation(306, 19);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:306:19: ( WS )?
				int alt78=2;
				try { DebugEnterSubRule(78);
				try { DebugEnterDecision(78, decisionCanBacktrack[78]);
				int LA78_0 = input.LA(1);

				if ((LA78_0==WS))
				{
					alt78 = 1;
				}
				} finally { DebugExitDecision(78); }
				switch (alt78)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:306:19: WS
					{
					DebugLocation(306, 19);
					WS215=(IToken)Match(input,WS,Follow._WS_in_expression_atom1969);  
					stream_WS.Add(WS215);


					}
					break;

				}
				} finally { DebugExitSubRule(78); }

				DebugLocation(306, 23);
				PushFollow(Follow._select_command_in_expression_atom1972);
				select_command216=select_command();
				PopFollow();

				stream_select_command.Add(select_command216.Tree);
				DebugLocation(306, 38);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:306:38: ( WS )?
				int alt79=2;
				try { DebugEnterSubRule(79);
				try { DebugEnterDecision(79, decisionCanBacktrack[79]);
				int LA79_0 = input.LA(1);

				if ((LA79_0==WS))
				{
					alt79 = 1;
				}
				} finally { DebugExitDecision(79); }
				switch (alt79)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:306:38: WS
					{
					DebugLocation(306, 38);
					WS217=(IToken)Match(input,WS,Follow._WS_in_expression_atom1974);  
					stream_WS.Add(WS217);


					}
					break;

				}
				} finally { DebugExitSubRule(79); }

				DebugLocation(306, 42);
				char_literal218=(IToken)Match(input,133,Follow._133_in_expression_atom1977);  
				stream_133.Add(char_literal218);



				{
				// AST REWRITE
				// elements: select_command
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 306:46: -> ^( T_EXISTS select_command )
				{
					DebugLocation(306, 49);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:306:49: ^( T_EXISTS select_command )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(306, 51);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_EXISTS, "T_EXISTS"), root_1);

					DebugLocation(306, 60);
					adaptor.AddChild(root_1, stream_select_command.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_atom", 40);
			LeaveRule("expression_atom", 40);
			LeaveRule_expression_atom();
	    }
	 	DebugLocation(307, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_atom"); }
		return retval;

	}
	// $ANTLR end "expression_atom"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_functioncall_or_column() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_functioncall_or_column() {}

	// $ANTLR start "functioncall_or_column"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:310:1: functioncall_or_column : ( TOKEN ( WS )? '(' ( WS )? ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )? ')' -> ^( T_FUNCTIONCALL TOKEN ( expression )* ) | SIMPLE_FILE -> ^( T_COLUMN SIMPLE_FILE ) );
	[GrammarRule("functioncall_or_column")]
	private AstParserRuleReturnScope<object, IToken> functioncall_or_column()
	{
		EnterRule_functioncall_or_column();
		EnterRule("functioncall_or_column", 41);
		TraceIn("functioncall_or_column", 41);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN219 = default(IToken);
	    IToken WS220 = default(IToken);
	    IToken char_literal221 = default(IToken);
	    IToken WS222 = default(IToken);
	    IToken WS224 = default(IToken);
	    IToken char_literal225 = default(IToken);
	    IToken WS226 = default(IToken);
	    IToken WS228 = default(IToken);
	    IToken char_literal229 = default(IToken);
	    IToken SIMPLE_FILE230 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression223 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression227 = default(AstParserRuleReturnScope<object, IToken>);

	    object TOKEN219_tree = default(object);
	    object WS220_tree = default(object);
	    object char_literal221_tree = default(object);
	    object WS222_tree = default(object);
	    object WS224_tree = default(object);
	    object char_literal225_tree = default(object);
	    object WS226_tree = default(object);
	    object WS228_tree = default(object);
	    object char_literal229_tree = default(object);
	    object SIMPLE_FILE230_tree = default(object);
	    RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
	    RewriteRuleITokenStream stream_133=new RewriteRuleITokenStream(adaptor,"token 133");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_SIMPLE_FILE=new RewriteRuleITokenStream(adaptor,"token SIMPLE_FILE");
	    RewriteRuleITokenStream stream_136=new RewriteRuleITokenStream(adaptor,"token 136");
	    RewriteRuleITokenStream stream_TOKEN=new RewriteRuleITokenStream(adaptor,"token TOKEN");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "functioncall_or_column");
		DebugLocation(310, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:311:2: ( TOKEN ( WS )? '(' ( WS )? ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )? ')' -> ^( T_FUNCTIONCALL TOKEN ( expression )* ) | SIMPLE_FILE -> ^( T_COLUMN SIMPLE_FILE ) )
			int alt88=2;
			try { DebugEnterDecision(88, decisionCanBacktrack[88]);
			int LA88_0 = input.LA(1);

			if ((LA88_0==TOKEN))
			{
				alt88 = 1;
			}
			else if ((LA88_0==SIMPLE_FILE))
			{
				alt88 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 88, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(88); }
			switch (alt88)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:311:4: TOKEN ( WS )? '(' ( WS )? ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )? ')'
				{
				DebugLocation(311, 4);
				TOKEN219=(IToken)Match(input,TOKEN,Follow._TOKEN_in_functioncall_or_column1997);  
				stream_TOKEN.Add(TOKEN219);

				DebugLocation(311, 10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:311:10: ( WS )?
				int alt81=2;
				try { DebugEnterSubRule(81);
				try { DebugEnterDecision(81, decisionCanBacktrack[81]);
				int LA81_0 = input.LA(1);

				if ((LA81_0==WS))
				{
					alt81 = 1;
				}
				} finally { DebugExitDecision(81); }
				switch (alt81)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:311:10: WS
					{
					DebugLocation(311, 10);
					WS220=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column1999);  
					stream_WS.Add(WS220);


					}
					break;

				}
				} finally { DebugExitSubRule(81); }

				DebugLocation(311, 14);
				char_literal221=(IToken)Match(input,132,Follow._132_in_functioncall_or_column2002);  
				stream_132.Add(char_literal221);

				DebugLocation(311, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:311:18: ( WS )?
				int alt82=2;
				try { DebugEnterSubRule(82);
				try { DebugEnterDecision(82, decisionCanBacktrack[82]);
				int LA82_0 = input.LA(1);

				if ((LA82_0==WS))
				{
					alt82 = 1;
				}
				} finally { DebugExitDecision(82); }
				switch (alt82)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:311:18: WS
					{
					DebugLocation(311, 18);
					WS222=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2004);  
					stream_WS.Add(WS222);


					}
					break;

				}
				} finally { DebugExitSubRule(82); }

				DebugLocation(311, 22);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:311:22: ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )?
				int alt87=2;
				try { DebugEnterSubRule(87);
				try { DebugEnterDecision(87, decisionCanBacktrack[87]);
				int LA87_0 = input.LA(1);

				if (((LA87_0>=CASE && LA87_0<=CAST)||LA87_0==CONVERT||LA87_0==EXISTS||(LA87_0>=NOT && LA87_0<=NUMBER)||LA87_0==SIMPLE_FILE||(LA87_0>=STRING && LA87_0<=SYSTEMVAR)||LA87_0==TOKEN||LA87_0==132))
				{
					alt87 = 1;
				}
				} finally { DebugExitDecision(87); }
				switch (alt87)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:311:23: expression ( WS )? ( ',' ( WS )? expression ( WS )? )*
					{
					DebugLocation(311, 23);
					PushFollow(Follow._expression_in_functioncall_or_column2008);
					expression223=expression();
					PopFollow();

					stream_expression.Add(expression223.Tree);
					DebugLocation(311, 34);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:311:34: ( WS )?
					int alt83=2;
					try { DebugEnterSubRule(83);
					try { DebugEnterDecision(83, decisionCanBacktrack[83]);
					int LA83_0 = input.LA(1);

					if ((LA83_0==WS))
					{
						alt83 = 1;
					}
					} finally { DebugExitDecision(83); }
					switch (alt83)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:311:34: WS
						{
						DebugLocation(311, 34);
						WS224=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2010);  
						stream_WS.Add(WS224);


						}
						break;

					}
					} finally { DebugExitSubRule(83); }

					DebugLocation(311, 38);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:311:38: ( ',' ( WS )? expression ( WS )? )*
					try { DebugEnterSubRule(86);
					while (true)
					{
						int alt86=2;
						try { DebugEnterDecision(86, decisionCanBacktrack[86]);
						int LA86_0 = input.LA(1);

						if ((LA86_0==136))
						{
							alt86 = 1;
						}


						} finally { DebugExitDecision(86); }
						switch ( alt86 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:311:39: ',' ( WS )? expression ( WS )?
							{
							DebugLocation(311, 39);
							char_literal225=(IToken)Match(input,136,Follow._136_in_functioncall_or_column2014);  
							stream_136.Add(char_literal225);

							DebugLocation(311, 43);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:311:43: ( WS )?
							int alt84=2;
							try { DebugEnterSubRule(84);
							try { DebugEnterDecision(84, decisionCanBacktrack[84]);
							int LA84_0 = input.LA(1);

							if ((LA84_0==WS))
							{
								alt84 = 1;
							}
							} finally { DebugExitDecision(84); }
							switch (alt84)
							{
							case 1:
								DebugEnterAlt(1);
								// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:311:43: WS
								{
								DebugLocation(311, 43);
								WS226=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2016);  
								stream_WS.Add(WS226);


								}
								break;

							}
							} finally { DebugExitSubRule(84); }

							DebugLocation(311, 47);
							PushFollow(Follow._expression_in_functioncall_or_column2019);
							expression227=expression();
							PopFollow();

							stream_expression.Add(expression227.Tree);
							DebugLocation(311, 58);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:311:58: ( WS )?
							int alt85=2;
							try { DebugEnterSubRule(85);
							try { DebugEnterDecision(85, decisionCanBacktrack[85]);
							int LA85_0 = input.LA(1);

							if ((LA85_0==WS))
							{
								alt85 = 1;
							}
							} finally { DebugExitDecision(85); }
							switch (alt85)
							{
							case 1:
								DebugEnterAlt(1);
								// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:311:58: WS
								{
								DebugLocation(311, 58);
								WS228=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2021);  
								stream_WS.Add(WS228);


								}
								break;

							}
							} finally { DebugExitSubRule(85); }


							}
							break;

						default:
							goto loop86;
						}
					}

					loop86:
						;

					} finally { DebugExitSubRule(86); }


					}
					break;

				}
				} finally { DebugExitSubRule(87); }

				DebugLocation(311, 66);
				char_literal229=(IToken)Match(input,133,Follow._133_in_functioncall_or_column2028);  
				stream_133.Add(char_literal229);



				{
				// AST REWRITE
				// elements: TOKEN, expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 311:70: -> ^( T_FUNCTIONCALL TOKEN ( expression )* )
				{
					DebugLocation(311, 73);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:311:73: ^( T_FUNCTIONCALL TOKEN ( expression )* )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(311, 75);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(311, 90);
					adaptor.AddChild(root_1, stream_TOKEN.NextNode());
					DebugLocation(311, 96);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:311:96: ( expression )*
					while ( stream_expression.HasNext )
					{
						DebugLocation(311, 96);
						adaptor.AddChild(root_1, stream_expression.NextTree());

					}
					stream_expression.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:313:4: SIMPLE_FILE
				{
				DebugLocation(313, 4);
				SIMPLE_FILE230=(IToken)Match(input,SIMPLE_FILE,Follow._SIMPLE_FILE_in_functioncall_or_column2046);  
				stream_SIMPLE_FILE.Add(SIMPLE_FILE230);



				{
				// AST REWRITE
				// elements: SIMPLE_FILE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 313:16: -> ^( T_COLUMN SIMPLE_FILE )
				{
					DebugLocation(313, 19);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:313:19: ^( T_COLUMN SIMPLE_FILE )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(313, 21);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_COLUMN, "T_COLUMN"), root_1);

					DebugLocation(313, 30);
					adaptor.AddChild(root_1, stream_SIMPLE_FILE.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("functioncall_or_column", 41);
			LeaveRule("functioncall_or_column", 41);
			LeaveRule_functioncall_or_column();
	    }
	 	DebugLocation(314, 1);
		} finally { DebugExitRule(GrammarFileName, "functioncall_or_column"); }
		return retval;

	}
	// $ANTLR end "functioncall_or_column"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_conversion() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_conversion() {}

	// $ANTLR start "conversion"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:316:1: conversion : ( CONVERT ( WS )? '(' ( WS )? TOKEN ( WS )? ',' ( WS )? expression ( WS )? ')' -> ^( T_CONVERT TOKEN expression ) | CAST ( WS )? '(' ( WS )? expression WS AS WS TOKEN ( WS )? ')' -> ^( T_CONVERT TOKEN expression ) );
	[GrammarRule("conversion")]
	private AstParserRuleReturnScope<object, IToken> conversion()
	{
		EnterRule_conversion();
		EnterRule("conversion", 42);
		TraceIn("conversion", 42);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken CONVERT231 = default(IToken);
	    IToken WS232 = default(IToken);
	    IToken char_literal233 = default(IToken);
	    IToken WS234 = default(IToken);
	    IToken TOKEN235 = default(IToken);
	    IToken WS236 = default(IToken);
	    IToken char_literal237 = default(IToken);
	    IToken WS238 = default(IToken);
	    IToken WS240 = default(IToken);
	    IToken char_literal241 = default(IToken);
	    IToken CAST242 = default(IToken);
	    IToken WS243 = default(IToken);
	    IToken char_literal244 = default(IToken);
	    IToken WS245 = default(IToken);
	    IToken WS247 = default(IToken);
	    IToken AS248 = default(IToken);
	    IToken WS249 = default(IToken);
	    IToken TOKEN250 = default(IToken);
	    IToken WS251 = default(IToken);
	    IToken char_literal252 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression239 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression246 = default(AstParserRuleReturnScope<object, IToken>);

	    object CONVERT231_tree = default(object);
	    object WS232_tree = default(object);
	    object char_literal233_tree = default(object);
	    object WS234_tree = default(object);
	    object TOKEN235_tree = default(object);
	    object WS236_tree = default(object);
	    object char_literal237_tree = default(object);
	    object WS238_tree = default(object);
	    object WS240_tree = default(object);
	    object char_literal241_tree = default(object);
	    object CAST242_tree = default(object);
	    object WS243_tree = default(object);
	    object char_literal244_tree = default(object);
	    object WS245_tree = default(object);
	    object WS247_tree = default(object);
	    object AS248_tree = default(object);
	    object WS249_tree = default(object);
	    object TOKEN250_tree = default(object);
	    object WS251_tree = default(object);
	    object char_literal252_tree = default(object);
	    RewriteRuleITokenStream stream_CAST=new RewriteRuleITokenStream(adaptor,"token CAST");
	    RewriteRuleITokenStream stream_AS=new RewriteRuleITokenStream(adaptor,"token AS");
	    RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
	    RewriteRuleITokenStream stream_133=new RewriteRuleITokenStream(adaptor,"token 133");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_136=new RewriteRuleITokenStream(adaptor,"token 136");
	    RewriteRuleITokenStream stream_CONVERT=new RewriteRuleITokenStream(adaptor,"token CONVERT");
	    RewriteRuleITokenStream stream_TOKEN=new RewriteRuleITokenStream(adaptor,"token TOKEN");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "conversion");
		DebugLocation(316, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:317:2: ( CONVERT ( WS )? '(' ( WS )? TOKEN ( WS )? ',' ( WS )? expression ( WS )? ')' -> ^( T_CONVERT TOKEN expression ) | CAST ( WS )? '(' ( WS )? expression WS AS WS TOKEN ( WS )? ')' -> ^( T_CONVERT TOKEN expression ) )
			int alt97=2;
			try { DebugEnterDecision(97, decisionCanBacktrack[97]);
			int LA97_0 = input.LA(1);

			if ((LA97_0==CONVERT))
			{
				alt97 = 1;
			}
			else if ((LA97_0==CAST))
			{
				alt97 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 97, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(97); }
			switch (alt97)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:317:4: CONVERT ( WS )? '(' ( WS )? TOKEN ( WS )? ',' ( WS )? expression ( WS )? ')'
				{
				DebugLocation(317, 4);
				CONVERT231=(IToken)Match(input,CONVERT,Follow._CONVERT_in_conversion2066);  
				stream_CONVERT.Add(CONVERT231);

				DebugLocation(317, 12);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:317:12: ( WS )?
				int alt89=2;
				try { DebugEnterSubRule(89);
				try { DebugEnterDecision(89, decisionCanBacktrack[89]);
				int LA89_0 = input.LA(1);

				if ((LA89_0==WS))
				{
					alt89 = 1;
				}
				} finally { DebugExitDecision(89); }
				switch (alt89)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:317:12: WS
					{
					DebugLocation(317, 12);
					WS232=(IToken)Match(input,WS,Follow._WS_in_conversion2068);  
					stream_WS.Add(WS232);


					}
					break;

				}
				} finally { DebugExitSubRule(89); }

				DebugLocation(317, 16);
				char_literal233=(IToken)Match(input,132,Follow._132_in_conversion2071);  
				stream_132.Add(char_literal233);

				DebugLocation(317, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:317:20: ( WS )?
				int alt90=2;
				try { DebugEnterSubRule(90);
				try { DebugEnterDecision(90, decisionCanBacktrack[90]);
				int LA90_0 = input.LA(1);

				if ((LA90_0==WS))
				{
					alt90 = 1;
				}
				} finally { DebugExitDecision(90); }
				switch (alt90)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:317:20: WS
					{
					DebugLocation(317, 20);
					WS234=(IToken)Match(input,WS,Follow._WS_in_conversion2073);  
					stream_WS.Add(WS234);


					}
					break;

				}
				} finally { DebugExitSubRule(90); }

				DebugLocation(317, 24);
				TOKEN235=(IToken)Match(input,TOKEN,Follow._TOKEN_in_conversion2076);  
				stream_TOKEN.Add(TOKEN235);

				DebugLocation(317, 30);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:317:30: ( WS )?
				int alt91=2;
				try { DebugEnterSubRule(91);
				try { DebugEnterDecision(91, decisionCanBacktrack[91]);
				int LA91_0 = input.LA(1);

				if ((LA91_0==WS))
				{
					alt91 = 1;
				}
				} finally { DebugExitDecision(91); }
				switch (alt91)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:317:30: WS
					{
					DebugLocation(317, 30);
					WS236=(IToken)Match(input,WS,Follow._WS_in_conversion2078);  
					stream_WS.Add(WS236);


					}
					break;

				}
				} finally { DebugExitSubRule(91); }

				DebugLocation(317, 34);
				char_literal237=(IToken)Match(input,136,Follow._136_in_conversion2081);  
				stream_136.Add(char_literal237);

				DebugLocation(317, 38);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:317:38: ( WS )?
				int alt92=2;
				try { DebugEnterSubRule(92);
				try { DebugEnterDecision(92, decisionCanBacktrack[92]);
				int LA92_0 = input.LA(1);

				if ((LA92_0==WS))
				{
					alt92 = 1;
				}
				} finally { DebugExitDecision(92); }
				switch (alt92)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:317:38: WS
					{
					DebugLocation(317, 38);
					WS238=(IToken)Match(input,WS,Follow._WS_in_conversion2083);  
					stream_WS.Add(WS238);


					}
					break;

				}
				} finally { DebugExitSubRule(92); }

				DebugLocation(317, 42);
				PushFollow(Follow._expression_in_conversion2086);
				expression239=expression();
				PopFollow();

				stream_expression.Add(expression239.Tree);
				DebugLocation(317, 53);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:317:53: ( WS )?
				int alt93=2;
				try { DebugEnterSubRule(93);
				try { DebugEnterDecision(93, decisionCanBacktrack[93]);
				int LA93_0 = input.LA(1);

				if ((LA93_0==WS))
				{
					alt93 = 1;
				}
				} finally { DebugExitDecision(93); }
				switch (alt93)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:317:53: WS
					{
					DebugLocation(317, 53);
					WS240=(IToken)Match(input,WS,Follow._WS_in_conversion2088);  
					stream_WS.Add(WS240);


					}
					break;

				}
				} finally { DebugExitSubRule(93); }

				DebugLocation(317, 57);
				char_literal241=(IToken)Match(input,133,Follow._133_in_conversion2091);  
				stream_133.Add(char_literal241);



				{
				// AST REWRITE
				// elements: TOKEN, expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 317:61: -> ^( T_CONVERT TOKEN expression )
				{
					DebugLocation(317, 64);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:317:64: ^( T_CONVERT TOKEN expression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(317, 66);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CONVERT, "T_CONVERT"), root_1);

					DebugLocation(317, 76);
					adaptor.AddChild(root_1, stream_TOKEN.NextNode());
					DebugLocation(317, 82);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:318:4: CAST ( WS )? '(' ( WS )? expression WS AS WS TOKEN ( WS )? ')'
				{
				DebugLocation(318, 4);
				CAST242=(IToken)Match(input,CAST,Follow._CAST_in_conversion2106);  
				stream_CAST.Add(CAST242);

				DebugLocation(318, 9);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:318:9: ( WS )?
				int alt94=2;
				try { DebugEnterSubRule(94);
				try { DebugEnterDecision(94, decisionCanBacktrack[94]);
				int LA94_0 = input.LA(1);

				if ((LA94_0==WS))
				{
					alt94 = 1;
				}
				} finally { DebugExitDecision(94); }
				switch (alt94)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:318:9: WS
					{
					DebugLocation(318, 9);
					WS243=(IToken)Match(input,WS,Follow._WS_in_conversion2108);  
					stream_WS.Add(WS243);


					}
					break;

				}
				} finally { DebugExitSubRule(94); }

				DebugLocation(318, 13);
				char_literal244=(IToken)Match(input,132,Follow._132_in_conversion2111);  
				stream_132.Add(char_literal244);

				DebugLocation(318, 17);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:318:17: ( WS )?
				int alt95=2;
				try { DebugEnterSubRule(95);
				try { DebugEnterDecision(95, decisionCanBacktrack[95]);
				int LA95_0 = input.LA(1);

				if ((LA95_0==WS))
				{
					alt95 = 1;
				}
				} finally { DebugExitDecision(95); }
				switch (alt95)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:318:17: WS
					{
					DebugLocation(318, 17);
					WS245=(IToken)Match(input,WS,Follow._WS_in_conversion2113);  
					stream_WS.Add(WS245);


					}
					break;

				}
				} finally { DebugExitSubRule(95); }

				DebugLocation(318, 21);
				PushFollow(Follow._expression_in_conversion2116);
				expression246=expression();
				PopFollow();

				stream_expression.Add(expression246.Tree);
				DebugLocation(318, 32);
				WS247=(IToken)Match(input,WS,Follow._WS_in_conversion2118);  
				stream_WS.Add(WS247);

				DebugLocation(318, 35);
				AS248=(IToken)Match(input,AS,Follow._AS_in_conversion2120);  
				stream_AS.Add(AS248);

				DebugLocation(318, 38);
				WS249=(IToken)Match(input,WS,Follow._WS_in_conversion2122);  
				stream_WS.Add(WS249);

				DebugLocation(318, 41);
				TOKEN250=(IToken)Match(input,TOKEN,Follow._TOKEN_in_conversion2124);  
				stream_TOKEN.Add(TOKEN250);

				DebugLocation(318, 47);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:318:47: ( WS )?
				int alt96=2;
				try { DebugEnterSubRule(96);
				try { DebugEnterDecision(96, decisionCanBacktrack[96]);
				int LA96_0 = input.LA(1);

				if ((LA96_0==WS))
				{
					alt96 = 1;
				}
				} finally { DebugExitDecision(96); }
				switch (alt96)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:318:47: WS
					{
					DebugLocation(318, 47);
					WS251=(IToken)Match(input,WS,Follow._WS_in_conversion2126);  
					stream_WS.Add(WS251);


					}
					break;

				}
				} finally { DebugExitSubRule(96); }

				DebugLocation(318, 51);
				char_literal252=(IToken)Match(input,133,Follow._133_in_conversion2129);  
				stream_133.Add(char_literal252);



				{
				// AST REWRITE
				// elements: expression, TOKEN
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 318:55: -> ^( T_CONVERT TOKEN expression )
				{
					DebugLocation(318, 58);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:318:58: ^( T_CONVERT TOKEN expression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(318, 60);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CONVERT, "T_CONVERT"), root_1);

					DebugLocation(318, 70);
					adaptor.AddChild(root_1, stream_TOKEN.NextNode());
					DebugLocation(318, 76);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conversion", 42);
			LeaveRule("conversion", 42);
			LeaveRule_conversion();
	    }
	 	DebugLocation(319, 1);
		} finally { DebugExitRule(GrammarFileName, "conversion"); }
		return retval;

	}
	// $ANTLR end "conversion"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_case() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_case() {}

	// $ANTLR start "case"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:321:1: case : CASE WS ( expression WS )? ( case_when WS )* ( case_else WS )? END -> ^( T_CASE ( expression )? ( case_when )* ( case_else )? ) ;
	[GrammarRule("case")]
	private AstParserRuleReturnScope<object, IToken> @case()
	{
		EnterRule_case();
		EnterRule("case", 43);
		TraceIn("case", 43);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken CASE253 = default(IToken);
	    IToken WS254 = default(IToken);
	    IToken WS256 = default(IToken);
	    IToken WS258 = default(IToken);
	    IToken WS260 = default(IToken);
	    IToken END261 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression255 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> case_when257 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> case_else259 = default(AstParserRuleReturnScope<object, IToken>);

	    object CASE253_tree = default(object);
	    object WS254_tree = default(object);
	    object WS256_tree = default(object);
	    object WS258_tree = default(object);
	    object WS260_tree = default(object);
	    object END261_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_END=new RewriteRuleITokenStream(adaptor,"token END");
	    RewriteRuleITokenStream stream_CASE=new RewriteRuleITokenStream(adaptor,"token CASE");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_case_when=new RewriteRuleSubtreeStream(adaptor,"rule case_when");
	    RewriteRuleSubtreeStream stream_case_else=new RewriteRuleSubtreeStream(adaptor,"rule case_else");
		try { DebugEnterRule(GrammarFileName, "case");
		DebugLocation(321, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:322:2: ( CASE WS ( expression WS )? ( case_when WS )* ( case_else WS )? END -> ^( T_CASE ( expression )? ( case_when )* ( case_else )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:322:4: CASE WS ( expression WS )? ( case_when WS )* ( case_else WS )? END
			{
			DebugLocation(322, 4);
			CASE253=(IToken)Match(input,CASE,Follow._CASE_in_case2151);  
			stream_CASE.Add(CASE253);

			DebugLocation(322, 9);
			WS254=(IToken)Match(input,WS,Follow._WS_in_case2153);  
			stream_WS.Add(WS254);

			DebugLocation(322, 12);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:322:12: ( expression WS )?
			int alt98=2;
			try { DebugEnterSubRule(98);
			try { DebugEnterDecision(98, decisionCanBacktrack[98]);
			int LA98_0 = input.LA(1);

			if (((LA98_0>=CASE && LA98_0<=CAST)||LA98_0==CONVERT||LA98_0==EXISTS||(LA98_0>=NOT && LA98_0<=NUMBER)||LA98_0==SIMPLE_FILE||(LA98_0>=STRING && LA98_0<=SYSTEMVAR)||LA98_0==TOKEN||LA98_0==132))
			{
				alt98 = 1;
			}
			} finally { DebugExitDecision(98); }
			switch (alt98)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:322:13: expression WS
				{
				DebugLocation(322, 13);
				PushFollow(Follow._expression_in_case2156);
				expression255=expression();
				PopFollow();

				stream_expression.Add(expression255.Tree);
				DebugLocation(322, 24);
				WS256=(IToken)Match(input,WS,Follow._WS_in_case2158);  
				stream_WS.Add(WS256);


				}
				break;

			}
			} finally { DebugExitSubRule(98); }

			DebugLocation(322, 29);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:322:29: ( case_when WS )*
			try { DebugEnterSubRule(99);
			while (true)
			{
				int alt99=2;
				try { DebugEnterDecision(99, decisionCanBacktrack[99]);
				int LA99_0 = input.LA(1);

				if ((LA99_0==WHEN))
				{
					alt99 = 1;
				}


				} finally { DebugExitDecision(99); }
				switch ( alt99 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:322:30: case_when WS
					{
					DebugLocation(322, 30);
					PushFollow(Follow._case_when_in_case2163);
					case_when257=case_when();
					PopFollow();

					stream_case_when.Add(case_when257.Tree);
					DebugLocation(322, 40);
					WS258=(IToken)Match(input,WS,Follow._WS_in_case2165);  
					stream_WS.Add(WS258);


					}
					break;

				default:
					goto loop99;
				}
			}

			loop99:
				;

			} finally { DebugExitSubRule(99); }

			DebugLocation(322, 45);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:322:45: ( case_else WS )?
			int alt100=2;
			try { DebugEnterSubRule(100);
			try { DebugEnterDecision(100, decisionCanBacktrack[100]);
			int LA100_0 = input.LA(1);

			if ((LA100_0==ELSE))
			{
				alt100 = 1;
			}
			} finally { DebugExitDecision(100); }
			switch (alt100)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:322:46: case_else WS
				{
				DebugLocation(322, 46);
				PushFollow(Follow._case_else_in_case2170);
				case_else259=case_else();
				PopFollow();

				stream_case_else.Add(case_else259.Tree);
				DebugLocation(322, 56);
				WS260=(IToken)Match(input,WS,Follow._WS_in_case2172);  
				stream_WS.Add(WS260);


				}
				break;

			}
			} finally { DebugExitSubRule(100); }

			DebugLocation(322, 61);
			END261=(IToken)Match(input,END,Follow._END_in_case2176);  
			stream_END.Add(END261);



			{
			// AST REWRITE
			// elements: case_else, case_when, expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 323:2: -> ^( T_CASE ( expression )? ( case_when )* ( case_else )? )
			{
				DebugLocation(323, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:323:5: ^( T_CASE ( expression )? ( case_when )* ( case_else )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(323, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CASE, "T_CASE"), root_1);

				DebugLocation(323, 14);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:323:14: ( expression )?
				if (stream_expression.HasNext)
				{
					DebugLocation(323, 14);
					adaptor.AddChild(root_1, stream_expression.NextTree());

				}
				stream_expression.Reset();
				DebugLocation(323, 26);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:323:26: ( case_when )*
				while ( stream_case_when.HasNext )
				{
					DebugLocation(323, 26);
					adaptor.AddChild(root_1, stream_case_when.NextTree());

				}
				stream_case_when.Reset();
				DebugLocation(323, 37);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:323:37: ( case_else )?
				if (stream_case_else.HasNext)
				{
					DebugLocation(323, 37);
					adaptor.AddChild(root_1, stream_case_else.NextTree());

				}
				stream_case_else.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("case", 43);
			LeaveRule("case", 43);
			LeaveRule_case();
	    }
	 	DebugLocation(324, 1);
		} finally { DebugExitRule(GrammarFileName, "case"); }
		return retval;

	}
	// $ANTLR end "case"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_case_when() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_case_when() {}

	// $ANTLR start "case_when"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:326:1: case_when : WHEN WS a= expression WS THEN WS b= expression -> ^( T_CASE_WHEN $a $b) ;
	[GrammarRule("case_when")]
	private AstParserRuleReturnScope<object, IToken> case_when()
	{
		EnterRule_case_when();
		EnterRule("case_when", 44);
		TraceIn("case_when", 44);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WHEN262 = default(IToken);
	    IToken WS263 = default(IToken);
	    IToken WS264 = default(IToken);
	    IToken THEN265 = default(IToken);
	    IToken WS266 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);

	    object WHEN262_tree = default(object);
	    object WS263_tree = default(object);
	    object WS264_tree = default(object);
	    object THEN265_tree = default(object);
	    object WS266_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_THEN=new RewriteRuleITokenStream(adaptor,"token THEN");
	    RewriteRuleITokenStream stream_WHEN=new RewriteRuleITokenStream(adaptor,"token WHEN");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "case_when");
		DebugLocation(326, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:327:2: ( WHEN WS a= expression WS THEN WS b= expression -> ^( T_CASE_WHEN $a $b) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:327:4: WHEN WS a= expression WS THEN WS b= expression
			{
			DebugLocation(327, 4);
			WHEN262=(IToken)Match(input,WHEN,Follow._WHEN_in_case_when2204);  
			stream_WHEN.Add(WHEN262);

			DebugLocation(327, 9);
			WS263=(IToken)Match(input,WS,Follow._WS_in_case_when2206);  
			stream_WS.Add(WS263);

			DebugLocation(327, 13);
			PushFollow(Follow._expression_in_case_when2210);
			a=expression();
			PopFollow();

			stream_expression.Add(a.Tree);
			DebugLocation(327, 25);
			WS264=(IToken)Match(input,WS,Follow._WS_in_case_when2212);  
			stream_WS.Add(WS264);

			DebugLocation(327, 28);
			THEN265=(IToken)Match(input,THEN,Follow._THEN_in_case_when2214);  
			stream_THEN.Add(THEN265);

			DebugLocation(327, 33);
			WS266=(IToken)Match(input,WS,Follow._WS_in_case_when2216);  
			stream_WS.Add(WS266);

			DebugLocation(327, 37);
			PushFollow(Follow._expression_in_case_when2220);
			b=expression();
			PopFollow();

			stream_expression.Add(b.Tree);


			{
			// AST REWRITE
			// elements: a, b
			// token labels: 
			// rule labels: retval, b, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 328:2: -> ^( T_CASE_WHEN $a $b)
			{
				DebugLocation(328, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:328:5: ^( T_CASE_WHEN $a $b)
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(328, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CASE_WHEN, "T_CASE_WHEN"), root_1);

				DebugLocation(328, 20);
				adaptor.AddChild(root_1, stream_a.NextTree());
				DebugLocation(328, 23);
				adaptor.AddChild(root_1, stream_b.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("case_when", 44);
			LeaveRule("case_when", 44);
			LeaveRule_case_when();
	    }
	 	DebugLocation(329, 1);
		} finally { DebugExitRule(GrammarFileName, "case_when"); }
		return retval;

	}
	// $ANTLR end "case_when"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_case_else() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_case_else() {}

	// $ANTLR start "case_else"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:331:1: case_else : ELSE WS expression -> ^( T_CASE_ELSE expression ) ;
	[GrammarRule("case_else")]
	private AstParserRuleReturnScope<object, IToken> case_else()
	{
		EnterRule_case_else();
		EnterRule("case_else", 45);
		TraceIn("case_else", 45);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken ELSE267 = default(IToken);
	    IToken WS268 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression269 = default(AstParserRuleReturnScope<object, IToken>);

	    object ELSE267_tree = default(object);
	    object WS268_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_ELSE=new RewriteRuleITokenStream(adaptor,"token ELSE");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "case_else");
		DebugLocation(331, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:332:2: ( ELSE WS expression -> ^( T_CASE_ELSE expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:332:4: ELSE WS expression
			{
			DebugLocation(332, 4);
			ELSE267=(IToken)Match(input,ELSE,Follow._ELSE_in_case_else2245);  
			stream_ELSE.Add(ELSE267);

			DebugLocation(332, 9);
			WS268=(IToken)Match(input,WS,Follow._WS_in_case_else2247);  
			stream_WS.Add(WS268);

			DebugLocation(332, 12);
			PushFollow(Follow._expression_in_case_else2249);
			expression269=expression();
			PopFollow();

			stream_expression.Add(expression269.Tree);


			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 333:2: -> ^( T_CASE_ELSE expression )
			{
				DebugLocation(333, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:333:5: ^( T_CASE_ELSE expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(333, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CASE_ELSE, "T_CASE_ELSE"), root_1);

				DebugLocation(333, 19);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("case_else", 45);
			LeaveRule("case_else", 45);
			LeaveRule_case_else();
	    }
	 	DebugLocation(334, 1);
		} finally { DebugExitRule(GrammarFileName, "case_else"); }
		return retval;

	}
	// $ANTLR end "case_else"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _WS_in_parse312 = new BitSet(new ulong[]{0x4000000000000UL,0x40000000000000UL});
		public static readonly BitSet _commands_in_parse316 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_parse318 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_parse323 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _command_in_commands346 = new BitSet(new ulong[]{0x4000000000002UL,0x840000000000000UL,0x800UL});
		public static readonly BitSet _WS_in_commands349 = new BitSet(new ulong[]{0x4000000000000UL,0x40000000000000UL,0x800UL});
		public static readonly BitSet _139_in_commands353 = new BitSet(new ulong[]{0x4000000000000UL,0x840000000000000UL});
		public static readonly BitSet _WS_in_commands355 = new BitSet(new ulong[]{0x4000000000000UL,0x40000000000000UL});
		public static readonly BitSet _command_in_commands360 = new BitSet(new ulong[]{0x4000000000002UL,0x840000000000000UL,0x800UL});
		public static readonly BitSet _select_command_in_command380 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _use_command_in_command385 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SELECT_in_select_command399 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_select_command402 = new BitSet(new ulong[]{0x200020UL});
		public static readonly BitSet _distinct_clause_in_select_command404 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_select_command409 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _top_clause_in_select_command411 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_select_command415 = new BitSet(new ulong[]{0x26806000202C000UL,0x0UL,0x50UL});
		public static readonly BitSet _column_list_in_select_command417 = new BitSet(new ulong[]{0x2UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_select_command420 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _into_clause_in_select_command422 = new BitSet(new ulong[]{0x2UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_select_command427 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _from_clause_in_select_command429 = new BitSet(new ulong[]{0x2UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_select_command434 = new BitSet(new ulong[]{0x0UL,0x400000000000000UL});
		public static readonly BitSet _where_clause_in_select_command436 = new BitSet(new ulong[]{0x2UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_select_command441 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _groupby_clause_in_select_command443 = new BitSet(new ulong[]{0x2UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_select_command448 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _orderby_clause_in_select_command450 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DISTINCT_in_distinct_clause495 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ALL_in_distinct_clause504 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOP_in_top_clause520 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_top_clause522 = new BitSet(new ulong[]{0x26806000202C000UL,0x0UL,0x10UL});
		public static readonly BitSet _expression_in_top_clause524 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _column_in_column_list546 = new BitSet(new ulong[]{0x2UL,0x800000000000000UL,0x100UL});
		public static readonly BitSet _WS_in_column_list549 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100UL});
		public static readonly BitSet _136_in_column_list552 = new BitSet(new ulong[]{0x26806000202C000UL,0x800000000000000UL,0x50UL});
		public static readonly BitSet _WS_in_column_list554 = new BitSet(new ulong[]{0x26806000202C000UL,0x0UL,0x50UL});
		public static readonly BitSet _column_in_column_list557 = new BitSet(new ulong[]{0x2UL,0x800000000000000UL,0x100UL});
		public static readonly BitSet _134_in_column581 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_column595 = new BitSet(new ulong[]{0x2UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_column598 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _SIMPLE_FILE_in_column600 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INTO_in_into_clause623 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_into_clause625 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x40000UL});
		public static readonly BitSet _file_in_into_clause627 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FROM_in_from_clause647 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_from_clause649 = new BitSet(new ulong[]{0x28000000000000UL,0x0UL,0x40010UL});
		public static readonly BitSet _from_clause_item_in_from_clause651 = new BitSet(new ulong[]{0x2UL,0x800000000000000UL,0x100UL});
		public static readonly BitSet _WS_in_from_clause654 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100UL});
		public static readonly BitSet _136_in_from_clause657 = new BitSet(new ulong[]{0x28000000000000UL,0x800000000000000UL,0x40010UL});
		public static readonly BitSet _WS_in_from_clause659 = new BitSet(new ulong[]{0x28000000000000UL,0x0UL,0x40010UL});
		public static readonly BitSet _from_clause_item_in_from_clause662 = new BitSet(new ulong[]{0x2UL,0x800000000000000UL,0x100UL});
		public static readonly BitSet _STRING_in_from_clause_item685 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _file_in_from_clause_item698 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _132_in_from_clause_item703 = new BitSet(new ulong[]{0x4000000000000UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_from_clause_item705 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _select_command_in_from_clause_item708 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL,0x20UL});
		public static readonly BitSet _WS_in_from_clause_item710 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _133_in_from_clause_item713 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _146_in_file732 = new BitSet(new ulong[]{0x20000000000000UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_file734 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _STRING_in_file737 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL,0x80000UL});
		public static readonly BitSet _WS_in_file740 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _file_option_in_file742 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL,0x80000UL});
		public static readonly BitSet _WS_in_file746 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _147_in_file749 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SIMPLE_FILE_in_file766 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _137_in_file_option783 = new BitSet(new ulong[]{0x200000000000000UL});
		public static readonly BitSet _file_option_name_in_file_option785 = new BitSet(new ulong[]{0x2UL,0x800000000000000UL,0x8000UL});
		public static readonly BitSet _WS_in_file_option789 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000UL});
		public static readonly BitSet _143_in_file_option792 = new BitSet(new ulong[]{0x220040000000000UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_file_option794 = new BitSet(new ulong[]{0x220040000000000UL});
		public static readonly BitSet _file_option_value_in_file_option797 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_file_option_name821 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHERE_in_where_clause853 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_where_clause855 = new BitSet(new ulong[]{0x26806000202C000UL,0x0UL,0x10UL});
		public static readonly BitSet _expression_in_where_clause857 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GROUP_in_groupby_clause876 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_groupby_clause878 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _BY_in_groupby_clause880 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_groupby_clause882 = new BitSet(new ulong[]{0x26806000202C000UL,0x0UL,0x10UL});
		public static readonly BitSet _expression_list_in_groupby_clause884 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ORDER_in_orderby_clause905 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_orderby_clause907 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _BY_in_orderby_clause909 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_orderby_clause911 = new BitSet(new ulong[]{0x26806000202C000UL,0x0UL,0x10UL});
		public static readonly BitSet _orderby_column_list_in_orderby_clause913 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _orderby_column_in_orderby_column_list934 = new BitSet(new ulong[]{0x2UL,0x800000000000000UL,0x100UL});
		public static readonly BitSet _WS_in_orderby_column_list937 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100UL});
		public static readonly BitSet _136_in_orderby_column_list940 = new BitSet(new ulong[]{0x26806000202C000UL,0x800000000000000UL,0x10UL});
		public static readonly BitSet _WS_in_orderby_column_list942 = new BitSet(new ulong[]{0x26806000202C000UL,0x0UL,0x10UL});
		public static readonly BitSet _orderby_column_in_orderby_column_list945 = new BitSet(new ulong[]{0x2UL,0x800000000000000UL,0x100UL});
		public static readonly BitSet _expression_in_orderby_column965 = new BitSet(new ulong[]{0x2UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_orderby_column968 = new BitSet(new ulong[]{0x80200UL});
		public static readonly BitSet _orderby_direction_in_orderby_column970 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASC_in_orderby_direction995 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DESC_in_orderby_direction1004 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _USE_in_use_command1022 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_use_command1024 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x40000UL});
		public static readonly BitSet _file_in_use_command1026 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_expression_list1048 = new BitSet(new ulong[]{0x2UL,0x800000000000000UL,0x100UL});
		public static readonly BitSet _WS_in_expression_list1051 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100UL});
		public static readonly BitSet _136_in_expression_list1054 = new BitSet(new ulong[]{0x26806000202C000UL,0x800000000000000UL,0x10UL});
		public static readonly BitSet _WS_in_expression_list1056 = new BitSet(new ulong[]{0x26806000202C000UL,0x0UL,0x10UL});
		public static readonly BitSet _expression_in_expression_list1059 = new BitSet(new ulong[]{0x2UL,0x800000000000000UL,0x100UL});
		public static readonly BitSet _expression_list_in_expression_list_or_select_command1082 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _select_command_in_expression_list_or_select_command1086 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_7_in_expression1098 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_6_in_expression_71114 = new BitSet(new ulong[]{0x2UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_expression_71121 = new BitSet(new ulong[]{0x12A100000800UL,0x8000000000000000UL,0x3F003UL});
		public static readonly BitSet _op_7_in_expression_71126 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_expression_71128 = new BitSet(new ulong[]{0x26806000202C000UL,0x0UL,0x10UL});
		public static readonly BitSet _expression_6_in_expression_71132 = new BitSet(new ulong[]{0x2UL,0x800000000000000UL});
		public static readonly BitSet _IN_in_expression_71151 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL,0x10UL});
		public static readonly BitSet _WS_in_expression_71153 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10UL});
		public static readonly BitSet _132_in_expression_71156 = new BitSet(new ulong[]{0x26C06000202C000UL,0x800000000000000UL,0x10UL});
		public static readonly BitSet _WS_in_expression_71158 = new BitSet(new ulong[]{0x26C06000202C000UL,0x0UL,0x10UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_71161 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL,0x20UL});
		public static readonly BitSet _WS_in_expression_71163 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _133_in_expression_71166 = new BitSet(new ulong[]{0x2UL,0x800000000000000UL});
		public static readonly BitSet _NOT_in_expression_71184 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_expression_71186 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _IN_in_expression_71188 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL,0x10UL});
		public static readonly BitSet _WS_in_expression_71190 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10UL});
		public static readonly BitSet _132_in_expression_71193 = new BitSet(new ulong[]{0x26C06000202C000UL,0x800000000000000UL,0x10UL});
		public static readonly BitSet _WS_in_expression_71195 = new BitSet(new ulong[]{0x26C06000202C000UL,0x0UL,0x10UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_71199 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL,0x20UL});
		public static readonly BitSet _WS_in_expression_71202 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _133_in_expression_71205 = new BitSet(new ulong[]{0x2UL,0x800000000000000UL});
		public static readonly BitSet _op_4_in_expression_71223 = new BitSet(new ulong[]{0x10000000000080UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_expression_71225 = new BitSet(new ulong[]{0x10000000000080UL});
		public static readonly BitSet _SOME_in_expression_71229 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL,0x10UL});
		public static readonly BitSet _ANY_in_expression_71233 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL,0x10UL});
		public static readonly BitSet _WS_in_expression_71236 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10UL});
		public static readonly BitSet _132_in_expression_71239 = new BitSet(new ulong[]{0x26C06000202C000UL,0x0UL,0x10UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_71241 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _133_in_expression_71243 = new BitSet(new ulong[]{0x2UL,0x800000000000000UL});
		public static readonly BitSet _op_4_in_expression_71263 = new BitSet(new ulong[]{0x20UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_expression_71265 = new BitSet(new ulong[]{0x20UL});
		public static readonly BitSet _ALL_in_expression_71268 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL,0x10UL});
		public static readonly BitSet _WS_in_expression_71270 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10UL});
		public static readonly BitSet _132_in_expression_71273 = new BitSet(new ulong[]{0x26C06000202C000UL,0x0UL,0x10UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_71275 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _133_in_expression_71277 = new BitSet(new ulong[]{0x2UL,0x800000000000000UL});
		public static readonly BitSet _OR_in_op_71307 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LIKE_in_op_71316 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_71325 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_op_71327 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _LIKE_in_op_71329 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MATCH_in_op_71338 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_71347 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_op_71349 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _MATCH_in_op_71351 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BETWEEN_in_op_71360 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_71369 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_op_71371 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _BETWEEN_in_op_71373 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_5_in_expression_61392 = new BitSet(new ulong[]{0x2UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_expression_61399 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _op_6_in_expression_61401 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_expression_61403 = new BitSet(new ulong[]{0x26806000202C000UL,0x0UL,0x10UL});
		public static readonly BitSet _expression_5_in_expression_61407 = new BitSet(new ulong[]{0x2UL,0x800000000000000UL});
		public static readonly BitSet _AND_in_op_61435 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _op_5_in_expression_51453 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_expression_51455 = new BitSet(new ulong[]{0x26806000202C000UL,0x0UL,0x10UL});
		public static readonly BitSet _expression_5_in_expression_51457 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_4_in_expression_51472 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_51483 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_3_in_expression_41502 = new BitSet(new ulong[]{0x2UL,0x8800000000000000UL,0x3F003UL});
		public static readonly BitSet _WS_in_expression_41509 = new BitSet(new ulong[]{0x0UL,0x8000000000000000UL,0x3F003UL});
		public static readonly BitSet _op_4_in_expression_41512 = new BitSet(new ulong[]{0x26804000202C000UL,0x800000000000000UL,0x10UL});
		public static readonly BitSet _WS_in_expression_41514 = new BitSet(new ulong[]{0x26804000202C000UL,0x0UL,0x10UL});
		public static readonly BitSet _expression_3_in_expression_41519 = new BitSet(new ulong[]{0x2UL,0x8800000000000000UL,0x3F003UL});
		public static readonly BitSet _143_in_op_41545 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _145_in_op_41554 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _141_in_op_41564 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _142_in_op_41574 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _128_in_op_41583 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _129_in_op_41592 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _127_in_op_41601 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _144_in_op_41610 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _140_in_op_41620 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_2_in_expression_31639 = new BitSet(new ulong[]{0x2UL,0x800000000000000UL,0x300288UL});
		public static readonly BitSet _WS_in_expression_31646 = new BitSet(new ulong[]{0x0UL,0x0UL,0x300288UL});
		public static readonly BitSet _op_3_in_expression_31649 = new BitSet(new ulong[]{0x26804000202C000UL,0x800000000000000UL,0x10UL});
		public static readonly BitSet _WS_in_expression_31651 = new BitSet(new ulong[]{0x26804000202C000UL,0x0UL,0x10UL});
		public static readonly BitSet _expression_2_in_expression_31656 = new BitSet(new ulong[]{0x2UL,0x800000000000000UL,0x300288UL});
		public static readonly BitSet _135_in_op_31682 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _137_in_op_31691 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _131_in_op_31700 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _149_in_op_31709 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _148_in_op_31718 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_1_in_expression_21740 = new BitSet(new ulong[]{0x2UL,0x800000000000000UL,0x444UL});
		public static readonly BitSet _WS_in_expression_21747 = new BitSet(new ulong[]{0x0UL,0x0UL,0x444UL});
		public static readonly BitSet _op_2_in_expression_21750 = new BitSet(new ulong[]{0x26804000202C000UL,0x800000000000000UL,0x10UL});
		public static readonly BitSet _WS_in_expression_21752 = new BitSet(new ulong[]{0x26804000202C000UL,0x0UL,0x10UL});
		public static readonly BitSet _expression_1_in_expression_21757 = new BitSet(new ulong[]{0x2UL,0x800000000000000UL,0x444UL});
		public static readonly BitSet _134_in_op_21783 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _138_in_op_21792 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _130_in_op_21801 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _132_in_expression_11819 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL,0x400280UL});
		public static readonly BitSet _WS_in_expression_11821 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400280UL});
		public static readonly BitSet _op_1_in_expression_11824 = new BitSet(new ulong[]{0x26804000202C000UL,0x800000000000000UL,0x10UL});
		public static readonly BitSet _WS_in_expression_11826 = new BitSet(new ulong[]{0x26804000202C000UL,0x0UL,0x10UL});
		public static readonly BitSet _expression_1_in_expression_11829 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL,0x20UL});
		public static readonly BitSet _WS_in_expression_11831 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _133_in_expression_11834 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_atom_in_expression_11851 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _150_in_op_11861 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _135_in_op_11871 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _137_in_op_11880 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_expression_atom1895 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_expression_atom1908 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SYSTEMVAR_in_expression_atom1921 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _132_in_expression_atom1934 = new BitSet(new ulong[]{0x26806000202C000UL,0x0UL,0x10UL});
		public static readonly BitSet _expression_in_expression_atom1936 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _133_in_expression_atom1938 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functioncall_or_column_in_expression_atom1947 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conversion_in_expression_atom1952 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _case_in_expression_atom1957 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXISTS_in_expression_atom1962 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL,0x10UL});
		public static readonly BitSet _WS_in_expression_atom1964 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10UL});
		public static readonly BitSet _132_in_expression_atom1967 = new BitSet(new ulong[]{0x4000000000000UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_expression_atom1969 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _select_command_in_expression_atom1972 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL,0x20UL});
		public static readonly BitSet _WS_in_expression_atom1974 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _133_in_expression_atom1977 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_functioncall_or_column1997 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL,0x10UL});
		public static readonly BitSet _WS_in_functioncall_or_column1999 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10UL});
		public static readonly BitSet _132_in_functioncall_or_column2002 = new BitSet(new ulong[]{0x26806000202C000UL,0x800000000000000UL,0x30UL});
		public static readonly BitSet _WS_in_functioncall_or_column2004 = new BitSet(new ulong[]{0x26806000202C000UL,0x0UL,0x30UL});
		public static readonly BitSet _expression_in_functioncall_or_column2008 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL,0x120UL});
		public static readonly BitSet _WS_in_functioncall_or_column2010 = new BitSet(new ulong[]{0x0UL,0x0UL,0x120UL});
		public static readonly BitSet _136_in_functioncall_or_column2014 = new BitSet(new ulong[]{0x26806000202C000UL,0x800000000000000UL,0x10UL});
		public static readonly BitSet _WS_in_functioncall_or_column2016 = new BitSet(new ulong[]{0x26806000202C000UL,0x0UL,0x10UL});
		public static readonly BitSet _expression_in_functioncall_or_column2019 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL,0x120UL});
		public static readonly BitSet _WS_in_functioncall_or_column2021 = new BitSet(new ulong[]{0x0UL,0x0UL,0x120UL});
		public static readonly BitSet _133_in_functioncall_or_column2028 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SIMPLE_FILE_in_functioncall_or_column2046 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CONVERT_in_conversion2066 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL,0x10UL});
		public static readonly BitSet _WS_in_conversion2068 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10UL});
		public static readonly BitSet _132_in_conversion2071 = new BitSet(new ulong[]{0x200000000000000UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_conversion2073 = new BitSet(new ulong[]{0x200000000000000UL});
		public static readonly BitSet _TOKEN_in_conversion2076 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL,0x100UL});
		public static readonly BitSet _WS_in_conversion2078 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100UL});
		public static readonly BitSet _136_in_conversion2081 = new BitSet(new ulong[]{0x26806000202C000UL,0x800000000000000UL,0x10UL});
		public static readonly BitSet _WS_in_conversion2083 = new BitSet(new ulong[]{0x26806000202C000UL,0x0UL,0x10UL});
		public static readonly BitSet _expression_in_conversion2086 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL,0x20UL});
		public static readonly BitSet _WS_in_conversion2088 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _133_in_conversion2091 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CAST_in_conversion2106 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL,0x10UL});
		public static readonly BitSet _WS_in_conversion2108 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10UL});
		public static readonly BitSet _132_in_conversion2111 = new BitSet(new ulong[]{0x26806000202C000UL,0x800000000000000UL,0x10UL});
		public static readonly BitSet _WS_in_conversion2113 = new BitSet(new ulong[]{0x26806000202C000UL,0x0UL,0x10UL});
		public static readonly BitSet _expression_in_conversion2116 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_conversion2118 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _AS_in_conversion2120 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_conversion2122 = new BitSet(new ulong[]{0x200000000000000UL});
		public static readonly BitSet _TOKEN_in_conversion2124 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL,0x20UL});
		public static readonly BitSet _WS_in_conversion2126 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _133_in_conversion2129 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CASE_in_case2151 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_case2153 = new BitSet(new ulong[]{0x26806000382C000UL,0x200000000000000UL,0x10UL});
		public static readonly BitSet _expression_in_case2156 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_case2158 = new BitSet(new ulong[]{0x1800000UL,0x200000000000000UL});
		public static readonly BitSet _case_when_in_case2163 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_case2165 = new BitSet(new ulong[]{0x1800000UL,0x200000000000000UL});
		public static readonly BitSet _case_else_in_case2170 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_case2172 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _END_in_case2176 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHEN_in_case_when2204 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_case_when2206 = new BitSet(new ulong[]{0x26806000202C000UL,0x0UL,0x10UL});
		public static readonly BitSet _expression_in_case_when2210 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_case_when2212 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _THEN_in_case_when2214 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_case_when2216 = new BitSet(new ulong[]{0x26806000202C000UL,0x0UL,0x10UL});
		public static readonly BitSet _expression_in_case_when2220 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ELSE_in_case_else2245 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_case_else2247 = new BitSet(new ulong[]{0x26806000202C000UL,0x0UL,0x10UL});
		public static readonly BitSet _expression_in_case_else2249 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  FxGqlLib 
