//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g 2012-06-19 14:14:46

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591


// `XXX' does not need a CLSCompliant attribute because the assembly is not marked as CLS-compliant (CS3021)
#pragma warning disable 3021
// The private field `XXX' is assigned but its value is never used (CS0414)
#pragma warning disable 414


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  FxGqlLib 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class gqlParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "A", "ALL", "AND", "ANY", "AS", "ASC", "B", "BETWEEN", "BY", "C", "CASE", "CAST", "COMMENT_LINE", "CONVERT", "CREATE", "D", "DECLARE", "DESC", "DIGIT", "DISTINCT", "E", "ELSE", "END", "EXISTS", "F", "FROM", "G", "GROUP", "H", "I", "IN", "INTO", "J", "K", "L", "LIKE", "M", "MATCH", "N", "NOT", "NUMBER", "O", "OR", "ORDER", "P", "Q", "R", "S", "SELECT", "SET", "SIMPLE_FILE", "SOME", "STRING", "SYSTEMVAR", "T", "THEN", "TOKEN", "TOP", "T_ALL", "T_AND", "T_ANY", "T_BETWEEN", "T_BITWISE_AND", "T_BITWISE_NOT", "T_BITWISE_OR", "T_BITWISE_XOR", "T_CASE", "T_CASE_ELSE", "T_CASE_WHEN", "T_COLUMN", "T_COLUMNLIST", "T_CONVERT", "T_CREATE_VIEW", "T_DECLARATION", "T_DECLARE", "T_DISTINCT", "T_DIVIDE", "T_EQUAL", "T_EXISTS", "T_EXPRESSIONLIST", "T_FILE", "T_FILEOPTION", "T_FROM", "T_FUNCTIONCALL", "T_GREATER", "T_GROUPBY", "T_IN", "T_INTEGER", "T_INTO", "T_LESS", "T_LIKE", "T_MATCH", "T_MINUS", "T_MODULO", "T_NOT", "T_NOTBETWEEN", "T_NOTEQUAL", "T_NOTGREATER", "T_NOTIN", "T_NOTLESS", "T_NOTLIKE", "T_NOTMATCH", "T_OP_BINARY", "T_OP_UNARY", "T_OR", "T_ORDERBY", "T_ORDERBY_ASC", "T_ORDERBY_COLUMN", "T_ORDERBY_DESC", "T_PLUS", "T_PRODUCT", "T_ROOT", "T_SELECT", "T_SET_VARIABLE", "T_STRING", "T_SUBQUERY", "T_SYSTEMVAR", "T_TOP", "T_USE", "T_VARIABLE", "T_VIEW_NAME", "T_WHERE", "U", "USE", "V", "VARIABLE", "VIEW", "W", "WHEN", "WHERE", "WS", "X", "Y", "Z", "'!<'", "'!='", "'!>'", "'%'", "'&'", "'('", "')'", "'*'", "'+'", "','", "'-'", "'/'", "';'", "'<'", "'<='", "'<>'", "'='", "'>'", "'>='", "'['", "']'", "'^'", "'|'", "'~'"
	};
	public const int EOF=-1;
	public const int T__138=138;
	public const int T__139=139;
	public const int T__140=140;
	public const int T__141=141;
	public const int T__142=142;
	public const int T__143=143;
	public const int T__144=144;
	public const int T__145=145;
	public const int T__146=146;
	public const int T__147=147;
	public const int T__148=148;
	public const int T__149=149;
	public const int T__150=150;
	public const int T__151=151;
	public const int T__152=152;
	public const int T__153=153;
	public const int T__154=154;
	public const int T__155=155;
	public const int T__156=156;
	public const int T__157=157;
	public const int T__158=158;
	public const int T__159=159;
	public const int T__160=160;
	public const int T__161=161;
	public const int A=4;
	public const int ALL=5;
	public const int AND=6;
	public const int ANY=7;
	public const int AS=8;
	public const int ASC=9;
	public const int B=10;
	public const int BETWEEN=11;
	public const int BY=12;
	public const int C=13;
	public const int CASE=14;
	public const int CAST=15;
	public const int COMMENT_LINE=16;
	public const int CONVERT=17;
	public const int CREATE=18;
	public const int D=19;
	public const int DECLARE=20;
	public const int DESC=21;
	public const int DIGIT=22;
	public const int DISTINCT=23;
	public const int E=24;
	public const int ELSE=25;
	public const int END=26;
	public const int EXISTS=27;
	public const int F=28;
	public const int FROM=29;
	public const int G=30;
	public const int GROUP=31;
	public const int H=32;
	public const int I=33;
	public const int IN=34;
	public const int INTO=35;
	public const int J=36;
	public const int K=37;
	public const int L=38;
	public const int LIKE=39;
	public const int M=40;
	public const int MATCH=41;
	public const int N=42;
	public const int NOT=43;
	public const int NUMBER=44;
	public const int O=45;
	public const int OR=46;
	public const int ORDER=47;
	public const int P=48;
	public const int Q=49;
	public const int R=50;
	public const int S=51;
	public const int SELECT=52;
	public const int SET=53;
	public const int SIMPLE_FILE=54;
	public const int SOME=55;
	public const int STRING=56;
	public const int SYSTEMVAR=57;
	public const int T=58;
	public const int THEN=59;
	public const int TOKEN=60;
	public const int TOP=61;
	public const int T_ALL=62;
	public const int T_AND=63;
	public const int T_ANY=64;
	public const int T_BETWEEN=65;
	public const int T_BITWISE_AND=66;
	public const int T_BITWISE_NOT=67;
	public const int T_BITWISE_OR=68;
	public const int T_BITWISE_XOR=69;
	public const int T_CASE=70;
	public const int T_CASE_ELSE=71;
	public const int T_CASE_WHEN=72;
	public const int T_COLUMN=73;
	public const int T_COLUMNLIST=74;
	public const int T_CONVERT=75;
	public const int T_CREATE_VIEW=76;
	public const int T_DECLARATION=77;
	public const int T_DECLARE=78;
	public const int T_DISTINCT=79;
	public const int T_DIVIDE=80;
	public const int T_EQUAL=81;
	public const int T_EXISTS=82;
	public const int T_EXPRESSIONLIST=83;
	public const int T_FILE=84;
	public const int T_FILEOPTION=85;
	public const int T_FROM=86;
	public const int T_FUNCTIONCALL=87;
	public const int T_GREATER=88;
	public const int T_GROUPBY=89;
	public const int T_IN=90;
	public const int T_INTEGER=91;
	public const int T_INTO=92;
	public const int T_LESS=93;
	public const int T_LIKE=94;
	public const int T_MATCH=95;
	public const int T_MINUS=96;
	public const int T_MODULO=97;
	public const int T_NOT=98;
	public const int T_NOTBETWEEN=99;
	public const int T_NOTEQUAL=100;
	public const int T_NOTGREATER=101;
	public const int T_NOTIN=102;
	public const int T_NOTLESS=103;
	public const int T_NOTLIKE=104;
	public const int T_NOTMATCH=105;
	public const int T_OP_BINARY=106;
	public const int T_OP_UNARY=107;
	public const int T_OR=108;
	public const int T_ORDERBY=109;
	public const int T_ORDERBY_ASC=110;
	public const int T_ORDERBY_COLUMN=111;
	public const int T_ORDERBY_DESC=112;
	public const int T_PLUS=113;
	public const int T_PRODUCT=114;
	public const int T_ROOT=115;
	public const int T_SELECT=116;
	public const int T_SET_VARIABLE=117;
	public const int T_STRING=118;
	public const int T_SUBQUERY=119;
	public const int T_SYSTEMVAR=120;
	public const int T_TOP=121;
	public const int T_USE=122;
	public const int T_VARIABLE=123;
	public const int T_VIEW_NAME=124;
	public const int T_WHERE=125;
	public const int U=126;
	public const int USE=127;
	public const int V=128;
	public const int VARIABLE=129;
	public const int VIEW=130;
	public const int W=131;
	public const int WHEN=132;
	public const int WHERE=133;
	public const int WS=134;
	public const int X=135;
	public const int Y=136;
	public const int Z=137;

	#if ANTLR_DEBUG
		private static readonly bool[] decisionCanBacktrack =
			new bool[]
			{
				false, // invalid decision
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false
			};
	#else
		private static readonly bool[] decisionCanBacktrack = new bool[0];
	#endif
	public gqlParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public gqlParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}
	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return gqlParser.tokenNames; } }
	public override string GrammarFileName { get { return "C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g"; } }


	[Conditional("ANTLR_TRACE")]
	protected virtual void OnCreated() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

	#region Rules

	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_parse() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_parse() {}

	// $ANTLR start "parse"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:95:1: parse : ( WS )? ( commands ( WS )? )? EOF -> ^( T_ROOT ( commands )? ) ;
	[GrammarRule("parse")]
	private AstParserRuleReturnScope<object, IToken> parse()
	{
		EnterRule_parse();
		EnterRule("parse", 1);
		TraceIn("parse", 1);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS1 = default(IToken);
	    IToken WS3 = default(IToken);
	    IToken EOF4 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> commands2 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS1_tree = default(object);
	    object WS3_tree = default(object);
	    object EOF4_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
	    RewriteRuleSubtreeStream stream_commands=new RewriteRuleSubtreeStream(adaptor,"rule commands");
		try { DebugEnterRule(GrammarFileName, "parse");
		DebugLocation(95, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:96:2: ( ( WS )? ( commands ( WS )? )? EOF -> ^( T_ROOT ( commands )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:96:4: ( WS )? ( commands ( WS )? )? EOF
			{
			DebugLocation(96, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:96:4: ( WS )?
			int alt1=2;
			try { DebugEnterSubRule(1);
			try { DebugEnterDecision(1, decisionCanBacktrack[1]);
			int LA1_0 = input.LA(1);

			if ((LA1_0==WS))
			{
				alt1 = 1;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:96:4: WS
				{
				DebugLocation(96, 4);
				WS1=(IToken)Match(input,WS,Follow._WS_in_parse336);  
				stream_WS.Add(WS1);


				}
				break;

			}
			} finally { DebugExitSubRule(1); }

			DebugLocation(96, 8);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:96:8: ( commands ( WS )? )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, decisionCanBacktrack[3]);
			int LA3_0 = input.LA(1);

			if ((LA3_0==CREATE||LA3_0==DECLARE||(LA3_0>=SELECT && LA3_0<=SET)||LA3_0==USE))
			{
				alt3 = 1;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:96:9: commands ( WS )?
				{
				DebugLocation(96, 9);
				PushFollow(Follow._commands_in_parse340);
				commands2=commands();
				PopFollow();

				stream_commands.Add(commands2.Tree);
				DebugLocation(96, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:96:18: ( WS )?
				int alt2=2;
				try { DebugEnterSubRule(2);
				try { DebugEnterDecision(2, decisionCanBacktrack[2]);
				int LA2_0 = input.LA(1);

				if ((LA2_0==WS))
				{
					alt2 = 1;
				}
				} finally { DebugExitDecision(2); }
				switch (alt2)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:96:18: WS
					{
					DebugLocation(96, 18);
					WS3=(IToken)Match(input,WS,Follow._WS_in_parse342);  
					stream_WS.Add(WS3);


					}
					break;

				}
				} finally { DebugExitSubRule(2); }


				}
				break;

			}
			} finally { DebugExitSubRule(3); }

			DebugLocation(96, 24);
			EOF4=(IToken)Match(input,EOF,Follow._EOF_in_parse347);  
			stream_EOF.Add(EOF4);



			{
			// AST REWRITE
			// elements: commands
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 97:2: -> ^( T_ROOT ( commands )? )
			{
				DebugLocation(97, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:97:5: ^( T_ROOT ( commands )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(97, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_ROOT, "T_ROOT"), root_1);

				DebugLocation(97, 14);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:97:14: ( commands )?
				if (stream_commands.HasNext)
				{
					DebugLocation(97, 14);
					adaptor.AddChild(root_1, stream_commands.NextTree());

				}
				stream_commands.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parse", 1);
			LeaveRule("parse", 1);
			LeaveRule_parse();
	    }
	 	DebugLocation(98, 1);
		} finally { DebugExitRule(GrammarFileName, "parse"); }
		return retval;

	}
	// $ANTLR end "parse"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_commands() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_commands() {}

	// $ANTLR start "commands"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:100:1: commands : command ( ( WS )? ( ';' ( WS )? )? command )* ( ( WS )? ';' )? -> ( command )+ ;
	[GrammarRule("commands")]
	private AstParserRuleReturnScope<object, IToken> commands()
	{
		EnterRule_commands();
		EnterRule("commands", 2);
		TraceIn("commands", 2);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS6 = default(IToken);
	    IToken char_literal7 = default(IToken);
	    IToken WS8 = default(IToken);
	    IToken WS10 = default(IToken);
	    IToken char_literal11 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> command5 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> command9 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS6_tree = default(object);
	    object char_literal7_tree = default(object);
	    object WS8_tree = default(object);
	    object WS10_tree = default(object);
	    object char_literal11_tree = default(object);
	    RewriteRuleITokenStream stream_150=new RewriteRuleITokenStream(adaptor,"token 150");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_command=new RewriteRuleSubtreeStream(adaptor,"rule command");
		try { DebugEnterRule(GrammarFileName, "commands");
		DebugLocation(100, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:101:2: ( command ( ( WS )? ( ';' ( WS )? )? command )* ( ( WS )? ';' )? -> ( command )+ )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:101:4: command ( ( WS )? ( ';' ( WS )? )? command )* ( ( WS )? ';' )?
			{
			DebugLocation(101, 4);
			PushFollow(Follow._command_in_commands370);
			command5=command();
			PopFollow();

			stream_command.Add(command5.Tree);
			DebugLocation(101, 12);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:101:12: ( ( WS )? ( ';' ( WS )? )? command )*
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, decisionCanBacktrack[7]);
				switch (input.LA(1))
				{
				case WS:
					{
					int LA7_1 = input.LA(2);

					if ((LA7_1==150))
					{
						int LA7_2 = input.LA(3);

						if ((LA7_2==WS))
						{
							int LA7_5 = input.LA(4);

							if ((LA7_5==CREATE||LA7_5==DECLARE||(LA7_5>=SELECT && LA7_5<=SET)||LA7_5==USE))
							{
								alt7 = 1;
							}


						}
						else if ((LA7_2==CREATE||LA7_2==DECLARE||(LA7_2>=SELECT && LA7_2<=SET)||LA7_2==USE))
						{
							alt7 = 1;
						}


					}
					else if ((LA7_1==CREATE||LA7_1==DECLARE||(LA7_1>=SELECT && LA7_1<=SET)||LA7_1==USE))
					{
						alt7 = 1;
					}


					}
					break;
				case 150:
					{
					int LA7_2 = input.LA(2);

					if ((LA7_2==WS))
					{
						int LA7_5 = input.LA(3);

						if ((LA7_5==CREATE||LA7_5==DECLARE||(LA7_5>=SELECT && LA7_5<=SET)||LA7_5==USE))
						{
							alt7 = 1;
						}


					}
					else if ((LA7_2==CREATE||LA7_2==DECLARE||(LA7_2>=SELECT && LA7_2<=SET)||LA7_2==USE))
					{
						alt7 = 1;
					}


					}
					break;
				case CREATE:
				case DECLARE:
				case SELECT:
				case SET:
				case USE:
					{
					alt7 = 1;
					}
					break;
				}

				} finally { DebugExitDecision(7); }
				switch ( alt7 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:101:13: ( WS )? ( ';' ( WS )? )? command
					{
					DebugLocation(101, 13);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:101:13: ( WS )?
					int alt4=2;
					try { DebugEnterSubRule(4);
					try { DebugEnterDecision(4, decisionCanBacktrack[4]);
					int LA4_0 = input.LA(1);

					if ((LA4_0==WS))
					{
						alt4 = 1;
					}
					} finally { DebugExitDecision(4); }
					switch (alt4)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:101:13: WS
						{
						DebugLocation(101, 13);
						WS6=(IToken)Match(input,WS,Follow._WS_in_commands373);  
						stream_WS.Add(WS6);


						}
						break;

					}
					} finally { DebugExitSubRule(4); }

					DebugLocation(101, 17);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:101:17: ( ';' ( WS )? )?
					int alt6=2;
					try { DebugEnterSubRule(6);
					try { DebugEnterDecision(6, decisionCanBacktrack[6]);
					int LA6_0 = input.LA(1);

					if ((LA6_0==150))
					{
						alt6 = 1;
					}
					} finally { DebugExitDecision(6); }
					switch (alt6)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:101:18: ';' ( WS )?
						{
						DebugLocation(101, 18);
						char_literal7=(IToken)Match(input,150,Follow._150_in_commands377);  
						stream_150.Add(char_literal7);

						DebugLocation(101, 22);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:101:22: ( WS )?
						int alt5=2;
						try { DebugEnterSubRule(5);
						try { DebugEnterDecision(5, decisionCanBacktrack[5]);
						int LA5_0 = input.LA(1);

						if ((LA5_0==WS))
						{
							alt5 = 1;
						}
						} finally { DebugExitDecision(5); }
						switch (alt5)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:101:22: WS
							{
							DebugLocation(101, 22);
							WS8=(IToken)Match(input,WS,Follow._WS_in_commands379);  
							stream_WS.Add(WS8);


							}
							break;

						}
						} finally { DebugExitSubRule(5); }


						}
						break;

					}
					} finally { DebugExitSubRule(6); }

					DebugLocation(101, 28);
					PushFollow(Follow._command_in_commands384);
					command9=command();
					PopFollow();

					stream_command.Add(command9.Tree);

					}
					break;

				default:
					goto loop7;
				}
			}

			loop7:
				;

			} finally { DebugExitSubRule(7); }

			DebugLocation(101, 38);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:101:38: ( ( WS )? ';' )?
			int alt9=2;
			try { DebugEnterSubRule(9);
			try { DebugEnterDecision(9, decisionCanBacktrack[9]);
			int LA9_0 = input.LA(1);

			if ((LA9_0==WS))
			{
				int LA9_1 = input.LA(2);

				if ((LA9_1==150))
				{
					alt9 = 1;
				}
			}
			else if ((LA9_0==150))
			{
				alt9 = 1;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:101:39: ( WS )? ';'
				{
				DebugLocation(101, 39);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:101:39: ( WS )?
				int alt8=2;
				try { DebugEnterSubRule(8);
				try { DebugEnterDecision(8, decisionCanBacktrack[8]);
				int LA8_0 = input.LA(1);

				if ((LA8_0==WS))
				{
					alt8 = 1;
				}
				} finally { DebugExitDecision(8); }
				switch (alt8)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:101:39: WS
					{
					DebugLocation(101, 39);
					WS10=(IToken)Match(input,WS,Follow._WS_in_commands389);  
					stream_WS.Add(WS10);


					}
					break;

				}
				} finally { DebugExitSubRule(8); }

				DebugLocation(101, 43);
				char_literal11=(IToken)Match(input,150,Follow._150_in_commands392);  
				stream_150.Add(char_literal11);


				}
				break;

			}
			} finally { DebugExitSubRule(9); }



			{
			// AST REWRITE
			// elements: command
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 102:2: -> ( command )+
			{
				DebugLocation(102, 5);
				if (!(stream_command.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_command.HasNext )
				{
					DebugLocation(102, 5);
					adaptor.AddChild(root_0, stream_command.NextTree());

				}
				stream_command.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("commands", 2);
			LeaveRule("commands", 2);
			LeaveRule_commands();
	    }
	 	DebugLocation(103, 1);
		} finally { DebugExitRule(GrammarFileName, "commands"); }
		return retval;

	}
	// $ANTLR end "commands"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_command() {}

	// $ANTLR start "command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:105:1: command : ( select_command | use_command | declare_command | set_command | create_view_command );
	[GrammarRule("command")]
	private AstParserRuleReturnScope<object, IToken> command()
	{
		EnterRule_command();
		EnterRule("command", 3);
		TraceIn("command", 3);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> select_command12 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> use_command13 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> declare_command14 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> set_command15 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> create_view_command16 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "command");
		DebugLocation(105, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:106:2: ( select_command | use_command | declare_command | set_command | create_view_command )
			int alt10=5;
			try { DebugEnterDecision(10, decisionCanBacktrack[10]);
			switch (input.LA(1))
			{
			case SELECT:
				{
				alt10 = 1;
				}
				break;
			case USE:
				{
				alt10 = 2;
				}
				break;
			case DECLARE:
				{
				alt10 = 3;
				}
				break;
			case SET:
				{
				alt10 = 4;
				}
				break;
			case CREATE:
				{
				alt10 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 10, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:106:4: select_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(106, 4);
				PushFollow(Follow._select_command_in_command412);
				select_command12=select_command();
				PopFollow();

				adaptor.AddChild(root_0, select_command12.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:107:4: use_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(107, 4);
				PushFollow(Follow._use_command_in_command417);
				use_command13=use_command();
				PopFollow();

				adaptor.AddChild(root_0, use_command13.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:108:4: declare_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(108, 4);
				PushFollow(Follow._declare_command_in_command422);
				declare_command14=declare_command();
				PopFollow();

				adaptor.AddChild(root_0, declare_command14.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:109:4: set_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(109, 4);
				PushFollow(Follow._set_command_in_command427);
				set_command15=set_command();
				PopFollow();

				adaptor.AddChild(root_0, set_command15.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:110:4: create_view_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(110, 4);
				PushFollow(Follow._create_view_command_in_command432);
				create_view_command16=create_view_command();
				PopFollow();

				adaptor.AddChild(root_0, create_view_command16.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("command", 3);
			LeaveRule("command", 3);
			LeaveRule_command();
	    }
	 	DebugLocation(111, 1);
		} finally { DebugExitRule(GrammarFileName, "command"); }
		return retval;

	}
	// $ANTLR end "command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_select_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_select_command() {}

	// $ANTLR start "select_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:116:1: select_command : SELECT ( WS distinct_clause )? ( WS top_clause )? WS column_list ( WS into_clause )? ( WS from_clause )? ( WS where_clause )? ( WS groupby_clause )? ( WS orderby_clause )? -> ^( T_SELECT ( distinct_clause )? ( top_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( orderby_clause )? ) ;
	[GrammarRule("select_command")]
	private AstParserRuleReturnScope<object, IToken> select_command()
	{
		EnterRule_select_command();
		EnterRule("select_command", 4);
		TraceIn("select_command", 4);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken SELECT17 = default(IToken);
	    IToken WS18 = default(IToken);
	    IToken WS20 = default(IToken);
	    IToken WS22 = default(IToken);
	    IToken WS24 = default(IToken);
	    IToken WS26 = default(IToken);
	    IToken WS28 = default(IToken);
	    IToken WS30 = default(IToken);
	    IToken WS32 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> distinct_clause19 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> top_clause21 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> column_list23 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> into_clause25 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> from_clause27 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> where_clause29 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> groupby_clause31 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> orderby_clause33 = default(AstParserRuleReturnScope<object, IToken>);

	    object SELECT17_tree = default(object);
	    object WS18_tree = default(object);
	    object WS20_tree = default(object);
	    object WS22_tree = default(object);
	    object WS24_tree = default(object);
	    object WS26_tree = default(object);
	    object WS28_tree = default(object);
	    object WS30_tree = default(object);
	    object WS32_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_SELECT=new RewriteRuleITokenStream(adaptor,"token SELECT");
	    RewriteRuleSubtreeStream stream_groupby_clause=new RewriteRuleSubtreeStream(adaptor,"rule groupby_clause");
	    RewriteRuleSubtreeStream stream_distinct_clause=new RewriteRuleSubtreeStream(adaptor,"rule distinct_clause");
	    RewriteRuleSubtreeStream stream_from_clause=new RewriteRuleSubtreeStream(adaptor,"rule from_clause");
	    RewriteRuleSubtreeStream stream_column_list=new RewriteRuleSubtreeStream(adaptor,"rule column_list");
	    RewriteRuleSubtreeStream stream_where_clause=new RewriteRuleSubtreeStream(adaptor,"rule where_clause");
	    RewriteRuleSubtreeStream stream_into_clause=new RewriteRuleSubtreeStream(adaptor,"rule into_clause");
	    RewriteRuleSubtreeStream stream_top_clause=new RewriteRuleSubtreeStream(adaptor,"rule top_clause");
	    RewriteRuleSubtreeStream stream_orderby_clause=new RewriteRuleSubtreeStream(adaptor,"rule orderby_clause");
		try { DebugEnterRule(GrammarFileName, "select_command");
		DebugLocation(116, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:117:2: ( SELECT ( WS distinct_clause )? ( WS top_clause )? WS column_list ( WS into_clause )? ( WS from_clause )? ( WS where_clause )? ( WS groupby_clause )? ( WS orderby_clause )? -> ^( T_SELECT ( distinct_clause )? ( top_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( orderby_clause )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:117:4: SELECT ( WS distinct_clause )? ( WS top_clause )? WS column_list ( WS into_clause )? ( WS from_clause )? ( WS where_clause )? ( WS groupby_clause )? ( WS orderby_clause )?
			{
			DebugLocation(117, 4);
			SELECT17=(IToken)Match(input,SELECT,Follow._SELECT_in_select_command446);  
			stream_SELECT.Add(SELECT17);

			DebugLocation(117, 11);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:117:11: ( WS distinct_clause )?
			int alt11=2;
			try { DebugEnterSubRule(11);
			try { DebugEnterDecision(11, decisionCanBacktrack[11]);
			int LA11_0 = input.LA(1);

			if ((LA11_0==WS))
			{
				int LA11_1 = input.LA(2);

				if ((LA11_1==ALL||LA11_1==DISTINCT))
				{
					alt11 = 1;
				}
			}
			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:117:12: WS distinct_clause
				{
				DebugLocation(117, 12);
				WS18=(IToken)Match(input,WS,Follow._WS_in_select_command449);  
				stream_WS.Add(WS18);

				DebugLocation(117, 15);
				PushFollow(Follow._distinct_clause_in_select_command451);
				distinct_clause19=distinct_clause();
				PopFollow();

				stream_distinct_clause.Add(distinct_clause19.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(11); }

			DebugLocation(117, 33);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:117:33: ( WS top_clause )?
			int alt12=2;
			try { DebugEnterSubRule(12);
			try { DebugEnterDecision(12, decisionCanBacktrack[12]);
			int LA12_0 = input.LA(1);

			if ((LA12_0==WS))
			{
				int LA12_1 = input.LA(2);

				if ((LA12_1==TOP))
				{
					alt12 = 1;
				}
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:117:34: WS top_clause
				{
				DebugLocation(117, 34);
				WS20=(IToken)Match(input,WS,Follow._WS_in_select_command456);  
				stream_WS.Add(WS20);

				DebugLocation(117, 37);
				PushFollow(Follow._top_clause_in_select_command458);
				top_clause21=top_clause();
				PopFollow();

				stream_top_clause.Add(top_clause21.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(12); }

			DebugLocation(117, 50);
			WS22=(IToken)Match(input,WS,Follow._WS_in_select_command462);  
			stream_WS.Add(WS22);

			DebugLocation(117, 53);
			PushFollow(Follow._column_list_in_select_command464);
			column_list23=column_list();
			PopFollow();

			stream_column_list.Add(column_list23.Tree);
			DebugLocation(117, 65);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:117:65: ( WS into_clause )?
			int alt13=2;
			try { DebugEnterSubRule(13);
			try { DebugEnterDecision(13, decisionCanBacktrack[13]);
			int LA13_0 = input.LA(1);

			if ((LA13_0==WS))
			{
				int LA13_1 = input.LA(2);

				if ((LA13_1==INTO))
				{
					alt13 = 1;
				}
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:117:66: WS into_clause
				{
				DebugLocation(117, 66);
				WS24=(IToken)Match(input,WS,Follow._WS_in_select_command467);  
				stream_WS.Add(WS24);

				DebugLocation(117, 69);
				PushFollow(Follow._into_clause_in_select_command469);
				into_clause25=into_clause();
				PopFollow();

				stream_into_clause.Add(into_clause25.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(13); }

			DebugLocation(117, 83);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:117:83: ( WS from_clause )?
			int alt14=2;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, decisionCanBacktrack[14]);
			int LA14_0 = input.LA(1);

			if ((LA14_0==WS))
			{
				int LA14_1 = input.LA(2);

				if ((LA14_1==FROM))
				{
					alt14 = 1;
				}
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:117:84: WS from_clause
				{
				DebugLocation(117, 84);
				WS26=(IToken)Match(input,WS,Follow._WS_in_select_command474);  
				stream_WS.Add(WS26);

				DebugLocation(117, 87);
				PushFollow(Follow._from_clause_in_select_command476);
				from_clause27=from_clause();
				PopFollow();

				stream_from_clause.Add(from_clause27.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(14); }

			DebugLocation(117, 101);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:117:101: ( WS where_clause )?
			int alt15=2;
			try { DebugEnterSubRule(15);
			try { DebugEnterDecision(15, decisionCanBacktrack[15]);
			int LA15_0 = input.LA(1);

			if ((LA15_0==WS))
			{
				int LA15_1 = input.LA(2);

				if ((LA15_1==WHERE))
				{
					alt15 = 1;
				}
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:117:102: WS where_clause
				{
				DebugLocation(117, 102);
				WS28=(IToken)Match(input,WS,Follow._WS_in_select_command481);  
				stream_WS.Add(WS28);

				DebugLocation(117, 105);
				PushFollow(Follow._where_clause_in_select_command483);
				where_clause29=where_clause();
				PopFollow();

				stream_where_clause.Add(where_clause29.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(15); }

			DebugLocation(117, 120);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:117:120: ( WS groupby_clause )?
			int alt16=2;
			try { DebugEnterSubRule(16);
			try { DebugEnterDecision(16, decisionCanBacktrack[16]);
			int LA16_0 = input.LA(1);

			if ((LA16_0==WS))
			{
				int LA16_1 = input.LA(2);

				if ((LA16_1==GROUP))
				{
					alt16 = 1;
				}
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:117:121: WS groupby_clause
				{
				DebugLocation(117, 121);
				WS30=(IToken)Match(input,WS,Follow._WS_in_select_command488);  
				stream_WS.Add(WS30);

				DebugLocation(117, 124);
				PushFollow(Follow._groupby_clause_in_select_command490);
				groupby_clause31=groupby_clause();
				PopFollow();

				stream_groupby_clause.Add(groupby_clause31.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(16); }

			DebugLocation(117, 141);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:117:141: ( WS orderby_clause )?
			int alt17=2;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, decisionCanBacktrack[17]);
			int LA17_0 = input.LA(1);

			if ((LA17_0==WS))
			{
				int LA17_1 = input.LA(2);

				if ((LA17_1==ORDER))
				{
					alt17 = 1;
				}
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:117:142: WS orderby_clause
				{
				DebugLocation(117, 142);
				WS32=(IToken)Match(input,WS,Follow._WS_in_select_command495);  
				stream_WS.Add(WS32);

				DebugLocation(117, 145);
				PushFollow(Follow._orderby_clause_in_select_command497);
				orderby_clause33=orderby_clause();
				PopFollow();

				stream_orderby_clause.Add(orderby_clause33.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(17); }



			{
			// AST REWRITE
			// elements: distinct_clause, orderby_clause, where_clause, from_clause, into_clause, groupby_clause, top_clause, column_list
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 118:3: -> ^( T_SELECT ( distinct_clause )? ( top_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( orderby_clause )? )
			{
				DebugLocation(118, 6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:118:6: ^( T_SELECT ( distinct_clause )? ( top_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( orderby_clause )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(118, 8);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SELECT, "T_SELECT"), root_1);

				DebugLocation(118, 17);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:118:17: ( distinct_clause )?
				if (stream_distinct_clause.HasNext)
				{
					DebugLocation(118, 17);
					adaptor.AddChild(root_1, stream_distinct_clause.NextTree());

				}
				stream_distinct_clause.Reset();
				DebugLocation(118, 34);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:118:34: ( top_clause )?
				if (stream_top_clause.HasNext)
				{
					DebugLocation(118, 34);
					adaptor.AddChild(root_1, stream_top_clause.NextTree());

				}
				stream_top_clause.Reset();
				DebugLocation(118, 46);
				adaptor.AddChild(root_1, stream_column_list.NextTree());
				DebugLocation(118, 58);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:118:58: ( into_clause )?
				if (stream_into_clause.HasNext)
				{
					DebugLocation(118, 58);
					adaptor.AddChild(root_1, stream_into_clause.NextTree());

				}
				stream_into_clause.Reset();
				DebugLocation(118, 71);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:118:71: ( from_clause )?
				if (stream_from_clause.HasNext)
				{
					DebugLocation(118, 71);
					adaptor.AddChild(root_1, stream_from_clause.NextTree());

				}
				stream_from_clause.Reset();
				DebugLocation(118, 84);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:118:84: ( where_clause )?
				if (stream_where_clause.HasNext)
				{
					DebugLocation(118, 84);
					adaptor.AddChild(root_1, stream_where_clause.NextTree());

				}
				stream_where_clause.Reset();
				DebugLocation(118, 98);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:118:98: ( groupby_clause )?
				if (stream_groupby_clause.HasNext)
				{
					DebugLocation(118, 98);
					adaptor.AddChild(root_1, stream_groupby_clause.NextTree());

				}
				stream_groupby_clause.Reset();
				DebugLocation(118, 114);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:118:114: ( orderby_clause )?
				if (stream_orderby_clause.HasNext)
				{
					DebugLocation(118, 114);
					adaptor.AddChild(root_1, stream_orderby_clause.NextTree());

				}
				stream_orderby_clause.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("select_command", 4);
			LeaveRule("select_command", 4);
			LeaveRule_select_command();
	    }
	 	DebugLocation(119, 1);
		} finally { DebugExitRule(GrammarFileName, "select_command"); }
		return retval;

	}
	// $ANTLR end "select_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_distinct_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_distinct_clause() {}

	// $ANTLR start "distinct_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:121:1: distinct_clause : ( DISTINCT -> T_DISTINCT | ALL -> T_ALL );
	[GrammarRule("distinct_clause")]
	private AstParserRuleReturnScope<object, IToken> distinct_clause()
	{
		EnterRule_distinct_clause();
		EnterRule("distinct_clause", 5);
		TraceIn("distinct_clause", 5);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken DISTINCT34 = default(IToken);
	    IToken ALL35 = default(IToken);

	    object DISTINCT34_tree = default(object);
	    object ALL35_tree = default(object);
	    RewriteRuleITokenStream stream_DISTINCT=new RewriteRuleITokenStream(adaptor,"token DISTINCT");
	    RewriteRuleITokenStream stream_ALL=new RewriteRuleITokenStream(adaptor,"token ALL");

		try { DebugEnterRule(GrammarFileName, "distinct_clause");
		DebugLocation(121, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:122:2: ( DISTINCT -> T_DISTINCT | ALL -> T_ALL )
			int alt18=2;
			try { DebugEnterDecision(18, decisionCanBacktrack[18]);
			int LA18_0 = input.LA(1);

			if ((LA18_0==DISTINCT))
			{
				alt18 = 1;
			}
			else if ((LA18_0==ALL))
			{
				alt18 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 18, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:122:4: DISTINCT
				{
				DebugLocation(122, 4);
				DISTINCT34=(IToken)Match(input,DISTINCT,Follow._DISTINCT_in_distinct_clause542);  
				stream_DISTINCT.Add(DISTINCT34);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 122:13: -> T_DISTINCT
				{
					DebugLocation(122, 16);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_DISTINCT, "T_DISTINCT"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:123:4: ALL
				{
				DebugLocation(123, 4);
				ALL35=(IToken)Match(input,ALL,Follow._ALL_in_distinct_clause551);  
				stream_ALL.Add(ALL35);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 123:8: -> T_ALL
				{
					DebugLocation(123, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_ALL, "T_ALL"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("distinct_clause", 5);
			LeaveRule("distinct_clause", 5);
			LeaveRule_distinct_clause();
	    }
	 	DebugLocation(124, 1);
		} finally { DebugExitRule(GrammarFileName, "distinct_clause"); }
		return retval;

	}
	// $ANTLR end "distinct_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_top_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_top_clause() {}

	// $ANTLR start "top_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:126:1: top_clause : TOP WS expression -> ^( T_TOP expression ) ;
	[GrammarRule("top_clause")]
	private AstParserRuleReturnScope<object, IToken> top_clause()
	{
		EnterRule_top_clause();
		EnterRule("top_clause", 6);
		TraceIn("top_clause", 6);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOP36 = default(IToken);
	    IToken WS37 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression38 = default(AstParserRuleReturnScope<object, IToken>);

	    object TOP36_tree = default(object);
	    object WS37_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_TOP=new RewriteRuleITokenStream(adaptor,"token TOP");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "top_clause");
		DebugLocation(126, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:127:2: ( TOP WS expression -> ^( T_TOP expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:127:4: TOP WS expression
			{
			DebugLocation(127, 4);
			TOP36=(IToken)Match(input,TOP,Follow._TOP_in_top_clause567);  
			stream_TOP.Add(TOP36);

			DebugLocation(127, 8);
			WS37=(IToken)Match(input,WS,Follow._WS_in_top_clause569);  
			stream_WS.Add(WS37);

			DebugLocation(127, 11);
			PushFollow(Follow._expression_in_top_clause571);
			expression38=expression();
			PopFollow();

			stream_expression.Add(expression38.Tree);


			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 128:2: -> ^( T_TOP expression )
			{
				DebugLocation(128, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:128:5: ^( T_TOP expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(128, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_TOP, "T_TOP"), root_1);

				DebugLocation(128, 13);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("top_clause", 6);
			LeaveRule("top_clause", 6);
			LeaveRule_top_clause();
	    }
	 	DebugLocation(129, 1);
		} finally { DebugExitRule(GrammarFileName, "top_clause"); }
		return retval;

	}
	// $ANTLR end "top_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_column_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_column_list() {}

	// $ANTLR start "column_list"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:131:1: column_list : column ( ( WS )? ',' ( WS )? column )* -> ^( T_COLUMNLIST ( column )* ) ;
	[GrammarRule("column_list")]
	private AstParserRuleReturnScope<object, IToken> column_list()
	{
		EnterRule_column_list();
		EnterRule("column_list", 7);
		TraceIn("column_list", 7);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS40 = default(IToken);
	    IToken char_literal41 = default(IToken);
	    IToken WS42 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> column39 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> column43 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS40_tree = default(object);
	    object char_literal41_tree = default(object);
	    object WS42_tree = default(object);
	    RewriteRuleITokenStream stream_147=new RewriteRuleITokenStream(adaptor,"token 147");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_column=new RewriteRuleSubtreeStream(adaptor,"rule column");
		try { DebugEnterRule(GrammarFileName, "column_list");
		DebugLocation(131, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:132:2: ( column ( ( WS )? ',' ( WS )? column )* -> ^( T_COLUMNLIST ( column )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:132:4: column ( ( WS )? ',' ( WS )? column )*
			{
			DebugLocation(132, 4);
			PushFollow(Follow._column_in_column_list593);
			column39=column();
			PopFollow();

			stream_column.Add(column39.Tree);
			DebugLocation(132, 11);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:132:11: ( ( WS )? ',' ( WS )? column )*
			try { DebugEnterSubRule(21);
			while (true)
			{
				int alt21=2;
				try { DebugEnterDecision(21, decisionCanBacktrack[21]);
				int LA21_0 = input.LA(1);

				if ((LA21_0==WS))
				{
					int LA21_1 = input.LA(2);

					if ((LA21_1==147))
					{
						alt21 = 1;
					}


				}
				else if ((LA21_0==147))
				{
					alt21 = 1;
				}


				} finally { DebugExitDecision(21); }
				switch ( alt21 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:132:12: ( WS )? ',' ( WS )? column
					{
					DebugLocation(132, 12);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:132:12: ( WS )?
					int alt19=2;
					try { DebugEnterSubRule(19);
					try { DebugEnterDecision(19, decisionCanBacktrack[19]);
					int LA19_0 = input.LA(1);

					if ((LA19_0==WS))
					{
						alt19 = 1;
					}
					} finally { DebugExitDecision(19); }
					switch (alt19)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:132:12: WS
						{
						DebugLocation(132, 12);
						WS40=(IToken)Match(input,WS,Follow._WS_in_column_list596);  
						stream_WS.Add(WS40);


						}
						break;

					}
					} finally { DebugExitSubRule(19); }

					DebugLocation(132, 16);
					char_literal41=(IToken)Match(input,147,Follow._147_in_column_list599);  
					stream_147.Add(char_literal41);

					DebugLocation(132, 20);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:132:20: ( WS )?
					int alt20=2;
					try { DebugEnterSubRule(20);
					try { DebugEnterDecision(20, decisionCanBacktrack[20]);
					int LA20_0 = input.LA(1);

					if ((LA20_0==WS))
					{
						alt20 = 1;
					}
					} finally { DebugExitDecision(20); }
					switch (alt20)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:132:20: WS
						{
						DebugLocation(132, 20);
						WS42=(IToken)Match(input,WS,Follow._WS_in_column_list601);  
						stream_WS.Add(WS42);


						}
						break;

					}
					} finally { DebugExitSubRule(20); }

					DebugLocation(132, 24);
					PushFollow(Follow._column_in_column_list604);
					column43=column();
					PopFollow();

					stream_column.Add(column43.Tree);

					}
					break;

				default:
					goto loop21;
				}
			}

			loop21:
				;

			} finally { DebugExitSubRule(21); }



			{
			// AST REWRITE
			// elements: column
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 133:2: -> ^( T_COLUMNLIST ( column )* )
			{
				DebugLocation(133, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:133:5: ^( T_COLUMNLIST ( column )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(133, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_COLUMNLIST, "T_COLUMNLIST"), root_1);

				DebugLocation(133, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:133:20: ( column )*
				while ( stream_column.HasNext )
				{
					DebugLocation(133, 20);
					adaptor.AddChild(root_1, stream_column.NextTree());

				}
				stream_column.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("column_list", 7);
			LeaveRule("column_list", 7);
			LeaveRule_column_list();
	    }
	 	DebugLocation(134, 1);
		} finally { DebugExitRule(GrammarFileName, "column_list"); }
		return retval;

	}
	// $ANTLR end "column_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_column() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_column() {}

	// $ANTLR start "column"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:136:1: column : ( '*' -> ^( T_COLUMN '*' ) | expression ( WS SIMPLE_FILE )? -> ^( T_COLUMN expression ( SIMPLE_FILE )? ) );
	[GrammarRule("column")]
	private AstParserRuleReturnScope<object, IToken> column()
	{
		EnterRule_column();
		EnterRule("column", 8);
		TraceIn("column", 8);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal44 = default(IToken);
	    IToken WS46 = default(IToken);
	    IToken SIMPLE_FILE47 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression45 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal44_tree = default(object);
	    object WS46_tree = default(object);
	    object SIMPLE_FILE47_tree = default(object);
	    RewriteRuleITokenStream stream_145=new RewriteRuleITokenStream(adaptor,"token 145");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_SIMPLE_FILE=new RewriteRuleITokenStream(adaptor,"token SIMPLE_FILE");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "column");
		DebugLocation(136, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:137:2: ( '*' -> ^( T_COLUMN '*' ) | expression ( WS SIMPLE_FILE )? -> ^( T_COLUMN expression ( SIMPLE_FILE )? ) )
			int alt23=2;
			try { DebugEnterDecision(23, decisionCanBacktrack[23]);
			int LA23_0 = input.LA(1);

			if ((LA23_0==145))
			{
				alt23 = 1;
			}
			else if (((LA23_0>=CASE && LA23_0<=CAST)||LA23_0==CONVERT||LA23_0==EXISTS||(LA23_0>=NOT && LA23_0<=NUMBER)||LA23_0==SIMPLE_FILE||(LA23_0>=STRING && LA23_0<=SYSTEMVAR)||LA23_0==TOKEN||LA23_0==VARIABLE||LA23_0==143))
			{
				alt23 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 23, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:137:4: '*'
				{
				DebugLocation(137, 4);
				char_literal44=(IToken)Match(input,145,Follow._145_in_column628);  
				stream_145.Add(char_literal44);



				{
				// AST REWRITE
				// elements: 145
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 137:8: -> ^( T_COLUMN '*' )
				{
					DebugLocation(137, 11);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:137:11: ^( T_COLUMN '*' )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(137, 13);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_COLUMN, "T_COLUMN"), root_1);

					DebugLocation(137, 22);
					adaptor.AddChild(root_1, stream_145.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:138:4: expression ( WS SIMPLE_FILE )?
				{
				DebugLocation(138, 4);
				PushFollow(Follow._expression_in_column642);
				expression45=expression();
				PopFollow();

				stream_expression.Add(expression45.Tree);
				DebugLocation(138, 15);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:138:15: ( WS SIMPLE_FILE )?
				int alt22=2;
				try { DebugEnterSubRule(22);
				try { DebugEnterDecision(22, decisionCanBacktrack[22]);
				int LA22_0 = input.LA(1);

				if ((LA22_0==WS))
				{
					int LA22_1 = input.LA(2);

					if ((LA22_1==SIMPLE_FILE))
					{
						alt22 = 1;
					}
				}
				} finally { DebugExitDecision(22); }
				switch (alt22)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:138:16: WS SIMPLE_FILE
					{
					DebugLocation(138, 16);
					WS46=(IToken)Match(input,WS,Follow._WS_in_column645);  
					stream_WS.Add(WS46);

					DebugLocation(138, 19);
					SIMPLE_FILE47=(IToken)Match(input,SIMPLE_FILE,Follow._SIMPLE_FILE_in_column647);  
					stream_SIMPLE_FILE.Add(SIMPLE_FILE47);


					}
					break;

				}
				} finally { DebugExitSubRule(22); }



				{
				// AST REWRITE
				// elements: SIMPLE_FILE, expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 138:33: -> ^( T_COLUMN expression ( SIMPLE_FILE )? )
				{
					DebugLocation(138, 36);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:138:36: ^( T_COLUMN expression ( SIMPLE_FILE )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(138, 38);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_COLUMN, "T_COLUMN"), root_1);

					DebugLocation(138, 47);
					adaptor.AddChild(root_1, stream_expression.NextTree());
					DebugLocation(138, 58);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:138:58: ( SIMPLE_FILE )?
					if (stream_SIMPLE_FILE.HasNext)
					{
						DebugLocation(138, 58);
						adaptor.AddChild(root_1, stream_SIMPLE_FILE.NextNode());

					}
					stream_SIMPLE_FILE.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("column", 8);
			LeaveRule("column", 8);
			LeaveRule_column();
	    }
	 	DebugLocation(139, 1);
		} finally { DebugExitRule(GrammarFileName, "column"); }
		return retval;

	}
	// $ANTLR end "column"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_into_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_into_clause() {}

	// $ANTLR start "into_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:140:1: into_clause : INTO WS file -> ^( T_INTO file ) ;
	[GrammarRule("into_clause")]
	private AstParserRuleReturnScope<object, IToken> into_clause()
	{
		EnterRule_into_clause();
		EnterRule("into_clause", 9);
		TraceIn("into_clause", 9);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken INTO48 = default(IToken);
	    IToken WS49 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file50 = default(AstParserRuleReturnScope<object, IToken>);

	    object INTO48_tree = default(object);
	    object WS49_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_INTO=new RewriteRuleITokenStream(adaptor,"token INTO");
	    RewriteRuleSubtreeStream stream_file=new RewriteRuleSubtreeStream(adaptor,"rule file");
		try { DebugEnterRule(GrammarFileName, "into_clause");
		DebugLocation(140, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:141:2: ( INTO WS file -> ^( T_INTO file ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:141:4: INTO WS file
			{
			DebugLocation(141, 4);
			INTO48=(IToken)Match(input,INTO,Follow._INTO_in_into_clause670);  
			stream_INTO.Add(INTO48);

			DebugLocation(141, 9);
			WS49=(IToken)Match(input,WS,Follow._WS_in_into_clause672);  
			stream_WS.Add(WS49);

			DebugLocation(141, 12);
			PushFollow(Follow._file_in_into_clause674);
			file50=file();
			PopFollow();

			stream_file.Add(file50.Tree);


			{
			// AST REWRITE
			// elements: file
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 141:17: -> ^( T_INTO file )
			{
				DebugLocation(141, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:141:20: ^( T_INTO file )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(141, 22);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_INTO, "T_INTO"), root_1);

				DebugLocation(141, 29);
				adaptor.AddChild(root_1, stream_file.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("into_clause", 9);
			LeaveRule("into_clause", 9);
			LeaveRule_into_clause();
	    }
	 	DebugLocation(142, 1);
		} finally { DebugExitRule(GrammarFileName, "into_clause"); }
		return retval;

	}
	// $ANTLR end "into_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_from_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_from_clause() {}

	// $ANTLR start "from_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:144:1: from_clause : FROM WS from_clause_item ( ( WS )? ',' ( WS )? from_clause_item )* -> ^( T_FROM ( from_clause_item )* ) ;
	[GrammarRule("from_clause")]
	private AstParserRuleReturnScope<object, IToken> from_clause()
	{
		EnterRule_from_clause();
		EnterRule("from_clause", 10);
		TraceIn("from_clause", 10);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken FROM51 = default(IToken);
	    IToken WS52 = default(IToken);
	    IToken WS54 = default(IToken);
	    IToken char_literal55 = default(IToken);
	    IToken WS56 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> from_clause_item53 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> from_clause_item57 = default(AstParserRuleReturnScope<object, IToken>);

	    object FROM51_tree = default(object);
	    object WS52_tree = default(object);
	    object WS54_tree = default(object);
	    object char_literal55_tree = default(object);
	    object WS56_tree = default(object);
	    RewriteRuleITokenStream stream_147=new RewriteRuleITokenStream(adaptor,"token 147");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_FROM=new RewriteRuleITokenStream(adaptor,"token FROM");
	    RewriteRuleSubtreeStream stream_from_clause_item=new RewriteRuleSubtreeStream(adaptor,"rule from_clause_item");
		try { DebugEnterRule(GrammarFileName, "from_clause");
		DebugLocation(144, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:145:2: ( FROM WS from_clause_item ( ( WS )? ',' ( WS )? from_clause_item )* -> ^( T_FROM ( from_clause_item )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:145:4: FROM WS from_clause_item ( ( WS )? ',' ( WS )? from_clause_item )*
			{
			DebugLocation(145, 4);
			FROM51=(IToken)Match(input,FROM,Follow._FROM_in_from_clause694);  
			stream_FROM.Add(FROM51);

			DebugLocation(145, 9);
			WS52=(IToken)Match(input,WS,Follow._WS_in_from_clause696);  
			stream_WS.Add(WS52);

			DebugLocation(145, 12);
			PushFollow(Follow._from_clause_item_in_from_clause698);
			from_clause_item53=from_clause_item();
			PopFollow();

			stream_from_clause_item.Add(from_clause_item53.Tree);
			DebugLocation(145, 29);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:145:29: ( ( WS )? ',' ( WS )? from_clause_item )*
			try { DebugEnterSubRule(26);
			while (true)
			{
				int alt26=2;
				try { DebugEnterDecision(26, decisionCanBacktrack[26]);
				int LA26_0 = input.LA(1);

				if ((LA26_0==WS))
				{
					int LA26_1 = input.LA(2);

					if ((LA26_1==147))
					{
						alt26 = 1;
					}


				}
				else if ((LA26_0==147))
				{
					alt26 = 1;
				}


				} finally { DebugExitDecision(26); }
				switch ( alt26 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:145:30: ( WS )? ',' ( WS )? from_clause_item
					{
					DebugLocation(145, 30);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:145:30: ( WS )?
					int alt24=2;
					try { DebugEnterSubRule(24);
					try { DebugEnterDecision(24, decisionCanBacktrack[24]);
					int LA24_0 = input.LA(1);

					if ((LA24_0==WS))
					{
						alt24 = 1;
					}
					} finally { DebugExitDecision(24); }
					switch (alt24)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:145:30: WS
						{
						DebugLocation(145, 30);
						WS54=(IToken)Match(input,WS,Follow._WS_in_from_clause701);  
						stream_WS.Add(WS54);


						}
						break;

					}
					} finally { DebugExitSubRule(24); }

					DebugLocation(145, 34);
					char_literal55=(IToken)Match(input,147,Follow._147_in_from_clause704);  
					stream_147.Add(char_literal55);

					DebugLocation(145, 38);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:145:38: ( WS )?
					int alt25=2;
					try { DebugEnterSubRule(25);
					try { DebugEnterDecision(25, decisionCanBacktrack[25]);
					int LA25_0 = input.LA(1);

					if ((LA25_0==WS))
					{
						alt25 = 1;
					}
					} finally { DebugExitDecision(25); }
					switch (alt25)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:145:38: WS
						{
						DebugLocation(145, 38);
						WS56=(IToken)Match(input,WS,Follow._WS_in_from_clause706);  
						stream_WS.Add(WS56);


						}
						break;

					}
					} finally { DebugExitSubRule(25); }

					DebugLocation(145, 42);
					PushFollow(Follow._from_clause_item_in_from_clause709);
					from_clause_item57=from_clause_item();
					PopFollow();

					stream_from_clause_item.Add(from_clause_item57.Tree);

					}
					break;

				default:
					goto loop26;
				}
			}

			loop26:
				;

			} finally { DebugExitSubRule(26); }



			{
			// AST REWRITE
			// elements: from_clause_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 145:61: -> ^( T_FROM ( from_clause_item )* )
			{
				DebugLocation(145, 64);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:145:64: ^( T_FROM ( from_clause_item )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(145, 66);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FROM, "T_FROM"), root_1);

				DebugLocation(145, 73);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:145:73: ( from_clause_item )*
				while ( stream_from_clause_item.HasNext )
				{
					DebugLocation(145, 73);
					adaptor.AddChild(root_1, stream_from_clause_item.NextTree());

				}
				stream_from_clause_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("from_clause", 10);
			LeaveRule("from_clause", 10);
			LeaveRule_from_clause();
	    }
	 	DebugLocation(146, 1);
		} finally { DebugExitRule(GrammarFileName, "from_clause"); }
		return retval;

	}
	// $ANTLR end "from_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_from_clause_item() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_from_clause_item() {}

	// $ANTLR start "from_clause_item"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:148:1: from_clause_item : ( STRING -> ^( T_FILE STRING ) | file | subquery | view_name );
	[GrammarRule("from_clause_item")]
	private AstParserRuleReturnScope<object, IToken> from_clause_item()
	{
		EnterRule_from_clause_item();
		EnterRule("from_clause_item", 11);
		TraceIn("from_clause_item", 11);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken STRING58 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file59 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> subquery60 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> view_name61 = default(AstParserRuleReturnScope<object, IToken>);

	    object STRING58_tree = default(object);
	    RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");

		try { DebugEnterRule(GrammarFileName, "from_clause_item");
		DebugLocation(148, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:149:2: ( STRING -> ^( T_FILE STRING ) | file | subquery | view_name )
			int alt27=4;
			try { DebugEnterDecision(27, decisionCanBacktrack[27]);
			switch (input.LA(1))
			{
			case STRING:
				{
				alt27 = 1;
				}
				break;
			case SIMPLE_FILE:
			case 157:
				{
				alt27 = 2;
				}
				break;
			case 143:
				{
				alt27 = 3;
				}
				break;
			case TOKEN:
				{
				alt27 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 27, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:149:4: STRING
				{
				DebugLocation(149, 4);
				STRING58=(IToken)Match(input,STRING,Follow._STRING_in_from_clause_item732);  
				stream_STRING.Add(STRING58);



				{
				// AST REWRITE
				// elements: STRING
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 149:11: -> ^( T_FILE STRING )
				{
					DebugLocation(149, 14);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:149:14: ^( T_FILE STRING )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(149, 16);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILE, "T_FILE"), root_1);

					DebugLocation(149, 23);
					adaptor.AddChild(root_1, stream_STRING.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:150:4: file
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(150, 4);
				PushFollow(Follow._file_in_from_clause_item745);
				file59=file();
				PopFollow();

				adaptor.AddChild(root_0, file59.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:151:4: subquery
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(151, 4);
				PushFollow(Follow._subquery_in_from_clause_item750);
				subquery60=subquery();
				PopFollow();

				adaptor.AddChild(root_0, subquery60.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:152:4: view_name
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(152, 4);
				PushFollow(Follow._view_name_in_from_clause_item755);
				view_name61=view_name();
				PopFollow();

				adaptor.AddChild(root_0, view_name61.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("from_clause_item", 11);
			LeaveRule("from_clause_item", 11);
			LeaveRule_from_clause_item();
	    }
	 	DebugLocation(153, 1);
		} finally { DebugExitRule(GrammarFileName, "from_clause_item"); }
		return retval;

	}
	// $ANTLR end "from_clause_item"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_subquery() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_subquery() {}

	// $ANTLR start "subquery"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:155:1: subquery : '(' ( WS )? select_command ( WS )? ')' -> ^( T_SUBQUERY select_command ) ;
	[GrammarRule("subquery")]
	private AstParserRuleReturnScope<object, IToken> subquery()
	{
		EnterRule_subquery();
		EnterRule("subquery", 12);
		TraceIn("subquery", 12);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal62 = default(IToken);
	    IToken WS63 = default(IToken);
	    IToken WS65 = default(IToken);
	    IToken char_literal66 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> select_command64 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal62_tree = default(object);
	    object WS63_tree = default(object);
	    object WS65_tree = default(object);
	    object char_literal66_tree = default(object);
	    RewriteRuleITokenStream stream_143=new RewriteRuleITokenStream(adaptor,"token 143");
	    RewriteRuleITokenStream stream_144=new RewriteRuleITokenStream(adaptor,"token 144");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_select_command=new RewriteRuleSubtreeStream(adaptor,"rule select_command");
		try { DebugEnterRule(GrammarFileName, "subquery");
		DebugLocation(155, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:156:2: ( '(' ( WS )? select_command ( WS )? ')' -> ^( T_SUBQUERY select_command ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:156:4: '(' ( WS )? select_command ( WS )? ')'
			{
			DebugLocation(156, 4);
			char_literal62=(IToken)Match(input,143,Follow._143_in_subquery767);  
			stream_143.Add(char_literal62);

			DebugLocation(156, 8);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:156:8: ( WS )?
			int alt28=2;
			try { DebugEnterSubRule(28);
			try { DebugEnterDecision(28, decisionCanBacktrack[28]);
			int LA28_0 = input.LA(1);

			if ((LA28_0==WS))
			{
				alt28 = 1;
			}
			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:156:8: WS
				{
				DebugLocation(156, 8);
				WS63=(IToken)Match(input,WS,Follow._WS_in_subquery769);  
				stream_WS.Add(WS63);


				}
				break;

			}
			} finally { DebugExitSubRule(28); }

			DebugLocation(156, 12);
			PushFollow(Follow._select_command_in_subquery772);
			select_command64=select_command();
			PopFollow();

			stream_select_command.Add(select_command64.Tree);
			DebugLocation(156, 27);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:156:27: ( WS )?
			int alt29=2;
			try { DebugEnterSubRule(29);
			try { DebugEnterDecision(29, decisionCanBacktrack[29]);
			int LA29_0 = input.LA(1);

			if ((LA29_0==WS))
			{
				alt29 = 1;
			}
			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:156:27: WS
				{
				DebugLocation(156, 27);
				WS65=(IToken)Match(input,WS,Follow._WS_in_subquery774);  
				stream_WS.Add(WS65);


				}
				break;

			}
			} finally { DebugExitSubRule(29); }

			DebugLocation(156, 31);
			char_literal66=(IToken)Match(input,144,Follow._144_in_subquery777);  
			stream_144.Add(char_literal66);



			{
			// AST REWRITE
			// elements: select_command
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 156:35: -> ^( T_SUBQUERY select_command )
			{
				DebugLocation(156, 38);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:156:38: ^( T_SUBQUERY select_command )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(156, 40);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SUBQUERY, "T_SUBQUERY"), root_1);

				DebugLocation(156, 51);
				adaptor.AddChild(root_1, stream_select_command.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("subquery", 12);
			LeaveRule("subquery", 12);
			LeaveRule_subquery();
	    }
	 	DebugLocation(157, 1);
		} finally { DebugExitRule(GrammarFileName, "subquery"); }
		return retval;

	}
	// $ANTLR end "subquery"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file() {}

	// $ANTLR start "file"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:159:1: file : ( '[' ( WS )? STRING ( WS file_option )* ( WS )? ']' -> ^( T_FILE STRING ( file_option )* ) | SIMPLE_FILE -> ^( T_FILE SIMPLE_FILE ) );
	[GrammarRule("file")]
	private AstParserRuleReturnScope<object, IToken> file()
	{
		EnterRule_file();
		EnterRule("file", 13);
		TraceIn("file", 13);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal67 = default(IToken);
	    IToken WS68 = default(IToken);
	    IToken STRING69 = default(IToken);
	    IToken WS70 = default(IToken);
	    IToken WS72 = default(IToken);
	    IToken char_literal73 = default(IToken);
	    IToken SIMPLE_FILE74 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file_option71 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal67_tree = default(object);
	    object WS68_tree = default(object);
	    object STRING69_tree = default(object);
	    object WS70_tree = default(object);
	    object WS72_tree = default(object);
	    object char_literal73_tree = default(object);
	    object SIMPLE_FILE74_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_SIMPLE_FILE=new RewriteRuleITokenStream(adaptor,"token SIMPLE_FILE");
	    RewriteRuleITokenStream stream_158=new RewriteRuleITokenStream(adaptor,"token 158");
	    RewriteRuleITokenStream stream_157=new RewriteRuleITokenStream(adaptor,"token 157");
	    RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
	    RewriteRuleSubtreeStream stream_file_option=new RewriteRuleSubtreeStream(adaptor,"rule file_option");
		try { DebugEnterRule(GrammarFileName, "file");
		DebugLocation(159, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:160:2: ( '[' ( WS )? STRING ( WS file_option )* ( WS )? ']' -> ^( T_FILE STRING ( file_option )* ) | SIMPLE_FILE -> ^( T_FILE SIMPLE_FILE ) )
			int alt33=2;
			try { DebugEnterDecision(33, decisionCanBacktrack[33]);
			int LA33_0 = input.LA(1);

			if ((LA33_0==157))
			{
				alt33 = 1;
			}
			else if ((LA33_0==SIMPLE_FILE))
			{
				alt33 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 33, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:160:4: '[' ( WS )? STRING ( WS file_option )* ( WS )? ']'
				{
				DebugLocation(160, 4);
				char_literal67=(IToken)Match(input,157,Follow._157_in_file796);  
				stream_157.Add(char_literal67);

				DebugLocation(160, 8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:160:8: ( WS )?
				int alt30=2;
				try { DebugEnterSubRule(30);
				try { DebugEnterDecision(30, decisionCanBacktrack[30]);
				int LA30_0 = input.LA(1);

				if ((LA30_0==WS))
				{
					alt30 = 1;
				}
				} finally { DebugExitDecision(30); }
				switch (alt30)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:160:8: WS
					{
					DebugLocation(160, 8);
					WS68=(IToken)Match(input,WS,Follow._WS_in_file798);  
					stream_WS.Add(WS68);


					}
					break;

				}
				} finally { DebugExitSubRule(30); }

				DebugLocation(160, 12);
				STRING69=(IToken)Match(input,STRING,Follow._STRING_in_file801);  
				stream_STRING.Add(STRING69);

				DebugLocation(160, 19);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:160:19: ( WS file_option )*
				try { DebugEnterSubRule(31);
				while (true)
				{
					int alt31=2;
					try { DebugEnterDecision(31, decisionCanBacktrack[31]);
					int LA31_0 = input.LA(1);

					if ((LA31_0==WS))
					{
						int LA31_1 = input.LA(2);

						if ((LA31_1==148))
						{
							alt31 = 1;
						}


					}


					} finally { DebugExitDecision(31); }
					switch ( alt31 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:160:20: WS file_option
						{
						DebugLocation(160, 20);
						WS70=(IToken)Match(input,WS,Follow._WS_in_file804);  
						stream_WS.Add(WS70);

						DebugLocation(160, 23);
						PushFollow(Follow._file_option_in_file806);
						file_option71=file_option();
						PopFollow();

						stream_file_option.Add(file_option71.Tree);

						}
						break;

					default:
						goto loop31;
					}
				}

				loop31:
					;

				} finally { DebugExitSubRule(31); }

				DebugLocation(160, 37);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:160:37: ( WS )?
				int alt32=2;
				try { DebugEnterSubRule(32);
				try { DebugEnterDecision(32, decisionCanBacktrack[32]);
				int LA32_0 = input.LA(1);

				if ((LA32_0==WS))
				{
					alt32 = 1;
				}
				} finally { DebugExitDecision(32); }
				switch (alt32)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:160:37: WS
					{
					DebugLocation(160, 37);
					WS72=(IToken)Match(input,WS,Follow._WS_in_file810);  
					stream_WS.Add(WS72);


					}
					break;

				}
				} finally { DebugExitSubRule(32); }

				DebugLocation(160, 41);
				char_literal73=(IToken)Match(input,158,Follow._158_in_file813);  
				stream_158.Add(char_literal73);



				{
				// AST REWRITE
				// elements: file_option, STRING
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 160:45: -> ^( T_FILE STRING ( file_option )* )
				{
					DebugLocation(160, 48);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:160:48: ^( T_FILE STRING ( file_option )* )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(160, 50);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILE, "T_FILE"), root_1);

					DebugLocation(160, 57);
					adaptor.AddChild(root_1, stream_STRING.NextNode());
					DebugLocation(160, 64);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:160:64: ( file_option )*
					while ( stream_file_option.HasNext )
					{
						DebugLocation(160, 64);
						adaptor.AddChild(root_1, stream_file_option.NextTree());

					}
					stream_file_option.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:161:4: SIMPLE_FILE
				{
				DebugLocation(161, 4);
				SIMPLE_FILE74=(IToken)Match(input,SIMPLE_FILE,Follow._SIMPLE_FILE_in_file830);  
				stream_SIMPLE_FILE.Add(SIMPLE_FILE74);



				{
				// AST REWRITE
				// elements: SIMPLE_FILE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 161:16: -> ^( T_FILE SIMPLE_FILE )
				{
					DebugLocation(161, 19);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:161:19: ^( T_FILE SIMPLE_FILE )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(161, 21);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILE, "T_FILE"), root_1);

					DebugLocation(161, 28);
					adaptor.AddChild(root_1, stream_SIMPLE_FILE.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file", 13);
			LeaveRule("file", 13);
			LeaveRule_file();
	    }
	 	DebugLocation(162, 1);
		} finally { DebugExitRule(GrammarFileName, "file"); }
		return retval;

	}
	// $ANTLR end "file"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_option() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_option() {}

	// $ANTLR start "file_option"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:164:1: file_option : '-' file_option_name ( ( WS )? '=' ( WS )? file_option_value )? -> ^( T_FILEOPTION file_option_name ( file_option_value )? ) ;
	[GrammarRule("file_option")]
	private AstParserRuleReturnScope<object, IToken> file_option()
	{
		EnterRule_file_option();
		EnterRule("file_option", 14);
		TraceIn("file_option", 14);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal75 = default(IToken);
	    IToken WS77 = default(IToken);
	    IToken char_literal78 = default(IToken);
	    IToken WS79 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file_option_name76 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> file_option_value80 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal75_tree = default(object);
	    object WS77_tree = default(object);
	    object char_literal78_tree = default(object);
	    object WS79_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_148=new RewriteRuleITokenStream(adaptor,"token 148");
	    RewriteRuleITokenStream stream_154=new RewriteRuleITokenStream(adaptor,"token 154");
	    RewriteRuleSubtreeStream stream_file_option_name=new RewriteRuleSubtreeStream(adaptor,"rule file_option_name");
	    RewriteRuleSubtreeStream stream_file_option_value=new RewriteRuleSubtreeStream(adaptor,"rule file_option_value");
		try { DebugEnterRule(GrammarFileName, "file_option");
		DebugLocation(164, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:165:2: ( '-' file_option_name ( ( WS )? '=' ( WS )? file_option_value )? -> ^( T_FILEOPTION file_option_name ( file_option_value )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:165:4: '-' file_option_name ( ( WS )? '=' ( WS )? file_option_value )?
			{
			DebugLocation(165, 4);
			char_literal75=(IToken)Match(input,148,Follow._148_in_file_option849);  
			stream_148.Add(char_literal75);

			DebugLocation(165, 8);
			PushFollow(Follow._file_option_name_in_file_option851);
			file_option_name76=file_option_name();
			PopFollow();

			stream_file_option_name.Add(file_option_name76.Tree);
			DebugLocation(165, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:165:25: ( ( WS )? '=' ( WS )? file_option_value )?
			int alt36=2;
			try { DebugEnterSubRule(36);
			try { DebugEnterDecision(36, decisionCanBacktrack[36]);
			int LA36_0 = input.LA(1);

			if ((LA36_0==WS))
			{
				int LA36_1 = input.LA(2);

				if ((LA36_1==154))
				{
					alt36 = 1;
				}
			}
			else if ((LA36_0==154))
			{
				alt36 = 1;
			}
			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:165:27: ( WS )? '=' ( WS )? file_option_value
				{
				DebugLocation(165, 27);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:165:27: ( WS )?
				int alt34=2;
				try { DebugEnterSubRule(34);
				try { DebugEnterDecision(34, decisionCanBacktrack[34]);
				int LA34_0 = input.LA(1);

				if ((LA34_0==WS))
				{
					alt34 = 1;
				}
				} finally { DebugExitDecision(34); }
				switch (alt34)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:165:27: WS
					{
					DebugLocation(165, 27);
					WS77=(IToken)Match(input,WS,Follow._WS_in_file_option855);  
					stream_WS.Add(WS77);


					}
					break;

				}
				} finally { DebugExitSubRule(34); }

				DebugLocation(165, 31);
				char_literal78=(IToken)Match(input,154,Follow._154_in_file_option858);  
				stream_154.Add(char_literal78);

				DebugLocation(165, 35);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:165:35: ( WS )?
				int alt35=2;
				try { DebugEnterSubRule(35);
				try { DebugEnterDecision(35, decisionCanBacktrack[35]);
				int LA35_0 = input.LA(1);

				if ((LA35_0==WS))
				{
					alt35 = 1;
				}
				} finally { DebugExitDecision(35); }
				switch (alt35)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:165:35: WS
					{
					DebugLocation(165, 35);
					WS79=(IToken)Match(input,WS,Follow._WS_in_file_option860);  
					stream_WS.Add(WS79);


					}
					break;

				}
				} finally { DebugExitSubRule(35); }

				DebugLocation(165, 39);
				PushFollow(Follow._file_option_value_in_file_option863);
				file_option_value80=file_option_value();
				PopFollow();

				stream_file_option_value.Add(file_option_value80.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(36); }



			{
			// AST REWRITE
			// elements: file_option_value, file_option_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 165:59: -> ^( T_FILEOPTION file_option_name ( file_option_value )? )
			{
				DebugLocation(165, 62);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:165:62: ^( T_FILEOPTION file_option_name ( file_option_value )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(165, 64);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILEOPTION, "T_FILEOPTION"), root_1);

				DebugLocation(165, 77);
				adaptor.AddChild(root_1, stream_file_option_name.NextTree());
				DebugLocation(165, 94);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:165:94: ( file_option_value )?
				if (stream_file_option_value.HasNext)
				{
					DebugLocation(165, 94);
					adaptor.AddChild(root_1, stream_file_option_value.NextTree());

				}
				stream_file_option_value.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_option", 14);
			LeaveRule("file_option", 14);
			LeaveRule_file_option();
	    }
	 	DebugLocation(166, 1);
		} finally { DebugExitRule(GrammarFileName, "file_option"); }
		return retval;

	}
	// $ANTLR end "file_option"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_option_name() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_option_name() {}

	// $ANTLR start "file_option_name"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:168:1: file_option_name : TOKEN ;
	[GrammarRule("file_option_name")]
	private AstParserRuleReturnScope<object, IToken> file_option_name()
	{
		EnterRule_file_option_name();
		EnterRule("file_option_name", 15);
		TraceIn("file_option_name", 15);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN81 = default(IToken);

	    object TOKEN81_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "file_option_name");
		DebugLocation(168, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:169:2: ( TOKEN )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:169:4: TOKEN
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(169, 4);
			TOKEN81=(IToken)Match(input,TOKEN,Follow._TOKEN_in_file_option_name887); 
			TOKEN81_tree = (object)adaptor.Create(TOKEN81);
			adaptor.AddChild(root_0, TOKEN81_tree);


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_option_name", 15);
			LeaveRule("file_option_name", 15);
			LeaveRule_file_option_name();
	    }
	 	DebugLocation(170, 1);
		} finally { DebugExitRule(GrammarFileName, "file_option_name"); }
		return retval;

	}
	// $ANTLR end "file_option_name"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_option_value() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_option_value() {}

	// $ANTLR start "file_option_value"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:172:1: file_option_value : ( TOKEN | STRING | NUMBER );
	[GrammarRule("file_option_value")]
	private AstParserRuleReturnScope<object, IToken> file_option_value()
	{
		EnterRule_file_option_value();
		EnterRule("file_option_value", 16);
		TraceIn("file_option_value", 16);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken set82 = default(IToken);

	    object set82_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "file_option_value");
		DebugLocation(172, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:173:2: ( TOKEN | STRING | NUMBER )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(173, 2);

			set82=(IToken)input.LT(1);
			if (input.LA(1)==NUMBER||input.LA(1)==STRING||input.LA(1)==TOKEN)
			{
				input.Consume();
				adaptor.AddChild(root_0, (object)adaptor.Create(set82));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_option_value", 16);
			LeaveRule("file_option_value", 16);
			LeaveRule_file_option_value();
	    }
	 	DebugLocation(174, 1);
		} finally { DebugExitRule(GrammarFileName, "file_option_value"); }
		return retval;

	}
	// $ANTLR end "file_option_value"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_where_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_where_clause() {}

	// $ANTLR start "where_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:176:1: where_clause : WHERE WS expression -> ^( T_WHERE expression ) ;
	[GrammarRule("where_clause")]
	private AstParserRuleReturnScope<object, IToken> where_clause()
	{
		EnterRule_where_clause();
		EnterRule("where_clause", 17);
		TraceIn("where_clause", 17);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WHERE83 = default(IToken);
	    IToken WS84 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression85 = default(AstParserRuleReturnScope<object, IToken>);

	    object WHERE83_tree = default(object);
	    object WS84_tree = default(object);
	    RewriteRuleITokenStream stream_WHERE=new RewriteRuleITokenStream(adaptor,"token WHERE");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "where_clause");
		DebugLocation(176, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:177:2: ( WHERE WS expression -> ^( T_WHERE expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:177:4: WHERE WS expression
			{
			DebugLocation(177, 4);
			WHERE83=(IToken)Match(input,WHERE,Follow._WHERE_in_where_clause919);  
			stream_WHERE.Add(WHERE83);

			DebugLocation(177, 10);
			WS84=(IToken)Match(input,WS,Follow._WS_in_where_clause921);  
			stream_WS.Add(WS84);

			DebugLocation(177, 13);
			PushFollow(Follow._expression_in_where_clause923);
			expression85=expression();
			PopFollow();

			stream_expression.Add(expression85.Tree);


			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 178:2: -> ^( T_WHERE expression )
			{
				DebugLocation(178, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:178:5: ^( T_WHERE expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(178, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_WHERE, "T_WHERE"), root_1);

				DebugLocation(178, 15);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("where_clause", 17);
			LeaveRule("where_clause", 17);
			LeaveRule_where_clause();
	    }
	 	DebugLocation(179, 1);
		} finally { DebugExitRule(GrammarFileName, "where_clause"); }
		return retval;

	}
	// $ANTLR end "where_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_groupby_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_groupby_clause() {}

	// $ANTLR start "groupby_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:180:1: groupby_clause : GROUP WS BY WS expression_list -> ^( T_GROUPBY expression_list ) ;
	[GrammarRule("groupby_clause")]
	private AstParserRuleReturnScope<object, IToken> groupby_clause()
	{
		EnterRule_groupby_clause();
		EnterRule("groupby_clause", 18);
		TraceIn("groupby_clause", 18);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken GROUP86 = default(IToken);
	    IToken WS87 = default(IToken);
	    IToken BY88 = default(IToken);
	    IToken WS89 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression_list90 = default(AstParserRuleReturnScope<object, IToken>);

	    object GROUP86_tree = default(object);
	    object WS87_tree = default(object);
	    object BY88_tree = default(object);
	    object WS89_tree = default(object);
	    RewriteRuleITokenStream stream_GROUP=new RewriteRuleITokenStream(adaptor,"token GROUP");
	    RewriteRuleITokenStream stream_BY=new RewriteRuleITokenStream(adaptor,"token BY");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression_list=new RewriteRuleSubtreeStream(adaptor,"rule expression_list");
		try { DebugEnterRule(GrammarFileName, "groupby_clause");
		DebugLocation(180, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:181:2: ( GROUP WS BY WS expression_list -> ^( T_GROUPBY expression_list ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:181:4: GROUP WS BY WS expression_list
			{
			DebugLocation(181, 4);
			GROUP86=(IToken)Match(input,GROUP,Follow._GROUP_in_groupby_clause942);  
			stream_GROUP.Add(GROUP86);

			DebugLocation(181, 10);
			WS87=(IToken)Match(input,WS,Follow._WS_in_groupby_clause944);  
			stream_WS.Add(WS87);

			DebugLocation(181, 13);
			BY88=(IToken)Match(input,BY,Follow._BY_in_groupby_clause946);  
			stream_BY.Add(BY88);

			DebugLocation(181, 16);
			WS89=(IToken)Match(input,WS,Follow._WS_in_groupby_clause948);  
			stream_WS.Add(WS89);

			DebugLocation(181, 19);
			PushFollow(Follow._expression_list_in_groupby_clause950);
			expression_list90=expression_list();
			PopFollow();

			stream_expression_list.Add(expression_list90.Tree);


			{
			// AST REWRITE
			// elements: expression_list
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 182:2: -> ^( T_GROUPBY expression_list )
			{
				DebugLocation(182, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:182:5: ^( T_GROUPBY expression_list )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(182, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_GROUPBY, "T_GROUPBY"), root_1);

				DebugLocation(182, 17);
				adaptor.AddChild(root_1, stream_expression_list.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("groupby_clause", 18);
			LeaveRule("groupby_clause", 18);
			LeaveRule_groupby_clause();
	    }
	 	DebugLocation(183, 1);
		} finally { DebugExitRule(GrammarFileName, "groupby_clause"); }
		return retval;

	}
	// $ANTLR end "groupby_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_clause() {}

	// $ANTLR start "orderby_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:185:1: orderby_clause : ORDER WS BY WS orderby_column_list -> ^( T_ORDERBY orderby_column_list ) ;
	[GrammarRule("orderby_clause")]
	private AstParserRuleReturnScope<object, IToken> orderby_clause()
	{
		EnterRule_orderby_clause();
		EnterRule("orderby_clause", 19);
		TraceIn("orderby_clause", 19);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken ORDER91 = default(IToken);
	    IToken WS92 = default(IToken);
	    IToken BY93 = default(IToken);
	    IToken WS94 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> orderby_column_list95 = default(AstParserRuleReturnScope<object, IToken>);

	    object ORDER91_tree = default(object);
	    object WS92_tree = default(object);
	    object BY93_tree = default(object);
	    object WS94_tree = default(object);
	    RewriteRuleITokenStream stream_BY=new RewriteRuleITokenStream(adaptor,"token BY");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_ORDER=new RewriteRuleITokenStream(adaptor,"token ORDER");
	    RewriteRuleSubtreeStream stream_orderby_column_list=new RewriteRuleSubtreeStream(adaptor,"rule orderby_column_list");
		try { DebugEnterRule(GrammarFileName, "orderby_clause");
		DebugLocation(185, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:186:2: ( ORDER WS BY WS orderby_column_list -> ^( T_ORDERBY orderby_column_list ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:186:4: ORDER WS BY WS orderby_column_list
			{
			DebugLocation(186, 4);
			ORDER91=(IToken)Match(input,ORDER,Follow._ORDER_in_orderby_clause971);  
			stream_ORDER.Add(ORDER91);

			DebugLocation(186, 10);
			WS92=(IToken)Match(input,WS,Follow._WS_in_orderby_clause973);  
			stream_WS.Add(WS92);

			DebugLocation(186, 13);
			BY93=(IToken)Match(input,BY,Follow._BY_in_orderby_clause975);  
			stream_BY.Add(BY93);

			DebugLocation(186, 16);
			WS94=(IToken)Match(input,WS,Follow._WS_in_orderby_clause977);  
			stream_WS.Add(WS94);

			DebugLocation(186, 19);
			PushFollow(Follow._orderby_column_list_in_orderby_clause979);
			orderby_column_list95=orderby_column_list();
			PopFollow();

			stream_orderby_column_list.Add(orderby_column_list95.Tree);


			{
			// AST REWRITE
			// elements: orderby_column_list
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 187:2: -> ^( T_ORDERBY orderby_column_list )
			{
				DebugLocation(187, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:187:5: ^( T_ORDERBY orderby_column_list )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(187, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_ORDERBY, "T_ORDERBY"), root_1);

				DebugLocation(187, 17);
				adaptor.AddChild(root_1, stream_orderby_column_list.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_clause", 19);
			LeaveRule("orderby_clause", 19);
			LeaveRule_orderby_clause();
	    }
	 	DebugLocation(188, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_clause"); }
		return retval;

	}
	// $ANTLR end "orderby_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_column_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_column_list() {}

	// $ANTLR start "orderby_column_list"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:190:1: orderby_column_list : orderby_column ( ( WS )? ',' ( WS )? orderby_column )* -> ( orderby_column )* ;
	[GrammarRule("orderby_column_list")]
	private AstParserRuleReturnScope<object, IToken> orderby_column_list()
	{
		EnterRule_orderby_column_list();
		EnterRule("orderby_column_list", 20);
		TraceIn("orderby_column_list", 20);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS97 = default(IToken);
	    IToken char_literal98 = default(IToken);
	    IToken WS99 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> orderby_column96 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> orderby_column100 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS97_tree = default(object);
	    object char_literal98_tree = default(object);
	    object WS99_tree = default(object);
	    RewriteRuleITokenStream stream_147=new RewriteRuleITokenStream(adaptor,"token 147");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_orderby_column=new RewriteRuleSubtreeStream(adaptor,"rule orderby_column");
		try { DebugEnterRule(GrammarFileName, "orderby_column_list");
		DebugLocation(190, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:191:2: ( orderby_column ( ( WS )? ',' ( WS )? orderby_column )* -> ( orderby_column )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:191:4: orderby_column ( ( WS )? ',' ( WS )? orderby_column )*
			{
			DebugLocation(191, 4);
			PushFollow(Follow._orderby_column_in_orderby_column_list1000);
			orderby_column96=orderby_column();
			PopFollow();

			stream_orderby_column.Add(orderby_column96.Tree);
			DebugLocation(191, 19);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:191:19: ( ( WS )? ',' ( WS )? orderby_column )*
			try { DebugEnterSubRule(39);
			while (true)
			{
				int alt39=2;
				try { DebugEnterDecision(39, decisionCanBacktrack[39]);
				int LA39_0 = input.LA(1);

				if ((LA39_0==WS))
				{
					int LA39_1 = input.LA(2);

					if ((LA39_1==147))
					{
						alt39 = 1;
					}


				}
				else if ((LA39_0==147))
				{
					alt39 = 1;
				}


				} finally { DebugExitDecision(39); }
				switch ( alt39 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:191:20: ( WS )? ',' ( WS )? orderby_column
					{
					DebugLocation(191, 20);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:191:20: ( WS )?
					int alt37=2;
					try { DebugEnterSubRule(37);
					try { DebugEnterDecision(37, decisionCanBacktrack[37]);
					int LA37_0 = input.LA(1);

					if ((LA37_0==WS))
					{
						alt37 = 1;
					}
					} finally { DebugExitDecision(37); }
					switch (alt37)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:191:20: WS
						{
						DebugLocation(191, 20);
						WS97=(IToken)Match(input,WS,Follow._WS_in_orderby_column_list1003);  
						stream_WS.Add(WS97);


						}
						break;

					}
					} finally { DebugExitSubRule(37); }

					DebugLocation(191, 24);
					char_literal98=(IToken)Match(input,147,Follow._147_in_orderby_column_list1006);  
					stream_147.Add(char_literal98);

					DebugLocation(191, 28);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:191:28: ( WS )?
					int alt38=2;
					try { DebugEnterSubRule(38);
					try { DebugEnterDecision(38, decisionCanBacktrack[38]);
					int LA38_0 = input.LA(1);

					if ((LA38_0==WS))
					{
						alt38 = 1;
					}
					} finally { DebugExitDecision(38); }
					switch (alt38)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:191:28: WS
						{
						DebugLocation(191, 28);
						WS99=(IToken)Match(input,WS,Follow._WS_in_orderby_column_list1008);  
						stream_WS.Add(WS99);


						}
						break;

					}
					} finally { DebugExitSubRule(38); }

					DebugLocation(191, 32);
					PushFollow(Follow._orderby_column_in_orderby_column_list1011);
					orderby_column100=orderby_column();
					PopFollow();

					stream_orderby_column.Add(orderby_column100.Tree);

					}
					break;

				default:
					goto loop39;
				}
			}

			loop39:
				;

			} finally { DebugExitSubRule(39); }



			{
			// AST REWRITE
			// elements: orderby_column
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 192:2: -> ( orderby_column )*
			{
				DebugLocation(192, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:192:5: ( orderby_column )*
				while ( stream_orderby_column.HasNext )
				{
					DebugLocation(192, 5);
					adaptor.AddChild(root_0, stream_orderby_column.NextTree());

				}
				stream_orderby_column.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_column_list", 20);
			LeaveRule("orderby_column_list", 20);
			LeaveRule_orderby_column_list();
	    }
	 	DebugLocation(193, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_column_list"); }
		return retval;

	}
	// $ANTLR end "orderby_column_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_column() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_column() {}

	// $ANTLR start "orderby_column"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:195:1: orderby_column : expression ( WS orderby_direction )? -> ^( T_ORDERBY_COLUMN expression ( orderby_direction )? ) ;
	[GrammarRule("orderby_column")]
	private AstParserRuleReturnScope<object, IToken> orderby_column()
	{
		EnterRule_orderby_column();
		EnterRule("orderby_column", 21);
		TraceIn("orderby_column", 21);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS102 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression101 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> orderby_direction103 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS102_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_orderby_direction=new RewriteRuleSubtreeStream(adaptor,"rule orderby_direction");
		try { DebugEnterRule(GrammarFileName, "orderby_column");
		DebugLocation(195, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:196:2: ( expression ( WS orderby_direction )? -> ^( T_ORDERBY_COLUMN expression ( orderby_direction )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:196:4: expression ( WS orderby_direction )?
			{
			DebugLocation(196, 4);
			PushFollow(Follow._expression_in_orderby_column1031);
			expression101=expression();
			PopFollow();

			stream_expression.Add(expression101.Tree);
			DebugLocation(196, 15);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:196:15: ( WS orderby_direction )?
			int alt40=2;
			try { DebugEnterSubRule(40);
			try { DebugEnterDecision(40, decisionCanBacktrack[40]);
			int LA40_0 = input.LA(1);

			if ((LA40_0==WS))
			{
				int LA40_1 = input.LA(2);

				if ((LA40_1==ASC||LA40_1==DESC))
				{
					alt40 = 1;
				}
			}
			} finally { DebugExitDecision(40); }
			switch (alt40)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:196:16: WS orderby_direction
				{
				DebugLocation(196, 16);
				WS102=(IToken)Match(input,WS,Follow._WS_in_orderby_column1034);  
				stream_WS.Add(WS102);

				DebugLocation(196, 19);
				PushFollow(Follow._orderby_direction_in_orderby_column1036);
				orderby_direction103=orderby_direction();
				PopFollow();

				stream_orderby_direction.Add(orderby_direction103.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(40); }



			{
			// AST REWRITE
			// elements: expression, orderby_direction
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 196:39: -> ^( T_ORDERBY_COLUMN expression ( orderby_direction )? )
			{
				DebugLocation(196, 42);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:196:42: ^( T_ORDERBY_COLUMN expression ( orderby_direction )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(196, 44);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_ORDERBY_COLUMN, "T_ORDERBY_COLUMN"), root_1);

				DebugLocation(196, 61);
				adaptor.AddChild(root_1, stream_expression.NextTree());
				DebugLocation(196, 72);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:196:72: ( orderby_direction )?
				if (stream_orderby_direction.HasNext)
				{
					DebugLocation(196, 72);
					adaptor.AddChild(root_1, stream_orderby_direction.NextTree());

				}
				stream_orderby_direction.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_column", 21);
			LeaveRule("orderby_column", 21);
			LeaveRule_orderby_column();
	    }
	 	DebugLocation(197, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_column"); }
		return retval;

	}
	// $ANTLR end "orderby_column"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_direction() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_direction() {}

	// $ANTLR start "orderby_direction"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:199:1: orderby_direction : ( ASC -> T_ORDERBY_ASC | DESC -> T_ORDERBY_DESC );
	[GrammarRule("orderby_direction")]
	private AstParserRuleReturnScope<object, IToken> orderby_direction()
	{
		EnterRule_orderby_direction();
		EnterRule("orderby_direction", 22);
		TraceIn("orderby_direction", 22);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken ASC104 = default(IToken);
	    IToken DESC105 = default(IToken);

	    object ASC104_tree = default(object);
	    object DESC105_tree = default(object);
	    RewriteRuleITokenStream stream_DESC=new RewriteRuleITokenStream(adaptor,"token DESC");
	    RewriteRuleITokenStream stream_ASC=new RewriteRuleITokenStream(adaptor,"token ASC");

		try { DebugEnterRule(GrammarFileName, "orderby_direction");
		DebugLocation(199, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:200:2: ( ASC -> T_ORDERBY_ASC | DESC -> T_ORDERBY_DESC )
			int alt41=2;
			try { DebugEnterDecision(41, decisionCanBacktrack[41]);
			int LA41_0 = input.LA(1);

			if ((LA41_0==ASC))
			{
				alt41 = 1;
			}
			else if ((LA41_0==DESC))
			{
				alt41 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 41, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(41); }
			switch (alt41)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:200:4: ASC
				{
				DebugLocation(200, 4);
				ASC104=(IToken)Match(input,ASC,Follow._ASC_in_orderby_direction1061);  
				stream_ASC.Add(ASC104);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 200:8: -> T_ORDERBY_ASC
				{
					DebugLocation(200, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_ORDERBY_ASC, "T_ORDERBY_ASC"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:201:4: DESC
				{
				DebugLocation(201, 4);
				DESC105=(IToken)Match(input,DESC,Follow._DESC_in_orderby_direction1070);  
				stream_DESC.Add(DESC105);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 201:9: -> T_ORDERBY_DESC
				{
					DebugLocation(201, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_ORDERBY_DESC, "T_ORDERBY_DESC"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_direction", 22);
			LeaveRule("orderby_direction", 22);
			LeaveRule_orderby_direction();
	    }
	 	DebugLocation(202, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_direction"); }
		return retval;

	}
	// $ANTLR end "orderby_direction"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_use_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_use_command() {}

	// $ANTLR start "use_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:207:1: use_command : USE WS file -> ^( T_USE file ) ;
	[GrammarRule("use_command")]
	private AstParserRuleReturnScope<object, IToken> use_command()
	{
		EnterRule_use_command();
		EnterRule("use_command", 23);
		TraceIn("use_command", 23);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken USE106 = default(IToken);
	    IToken WS107 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file108 = default(AstParserRuleReturnScope<object, IToken>);

	    object USE106_tree = default(object);
	    object WS107_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_USE=new RewriteRuleITokenStream(adaptor,"token USE");
	    RewriteRuleSubtreeStream stream_file=new RewriteRuleSubtreeStream(adaptor,"rule file");
		try { DebugEnterRule(GrammarFileName, "use_command");
		DebugLocation(207, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:208:2: ( USE WS file -> ^( T_USE file ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:208:4: USE WS file
			{
			DebugLocation(208, 4);
			USE106=(IToken)Match(input,USE,Follow._USE_in_use_command1088);  
			stream_USE.Add(USE106);

			DebugLocation(208, 8);
			WS107=(IToken)Match(input,WS,Follow._WS_in_use_command1090);  
			stream_WS.Add(WS107);

			DebugLocation(208, 11);
			PushFollow(Follow._file_in_use_command1092);
			file108=file();
			PopFollow();

			stream_file.Add(file108.Tree);


			{
			// AST REWRITE
			// elements: file
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 208:16: -> ^( T_USE file )
			{
				DebugLocation(208, 19);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:208:19: ^( T_USE file )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(208, 21);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_USE, "T_USE"), root_1);

				DebugLocation(208, 27);
				adaptor.AddChild(root_1, stream_file.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("use_command", 23);
			LeaveRule("use_command", 23);
			LeaveRule_use_command();
	    }
	 	DebugLocation(209, 1);
		} finally { DebugExitRule(GrammarFileName, "use_command"); }
		return retval;

	}
	// $ANTLR end "use_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_declare_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_declare_command() {}

	// $ANTLR start "declare_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:214:1: declare_command : DECLARE WS declaration ( ( WS )? ',' ( WS )? declaration )* -> ^( T_DECLARE ( declaration )+ ) ;
	[GrammarRule("declare_command")]
	private AstParserRuleReturnScope<object, IToken> declare_command()
	{
		EnterRule_declare_command();
		EnterRule("declare_command", 24);
		TraceIn("declare_command", 24);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken DECLARE109 = default(IToken);
	    IToken WS110 = default(IToken);
	    IToken WS112 = default(IToken);
	    IToken char_literal113 = default(IToken);
	    IToken WS114 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> declaration111 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> declaration115 = default(AstParserRuleReturnScope<object, IToken>);

	    object DECLARE109_tree = default(object);
	    object WS110_tree = default(object);
	    object WS112_tree = default(object);
	    object char_literal113_tree = default(object);
	    object WS114_tree = default(object);
	    RewriteRuleITokenStream stream_DECLARE=new RewriteRuleITokenStream(adaptor,"token DECLARE");
	    RewriteRuleITokenStream stream_147=new RewriteRuleITokenStream(adaptor,"token 147");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_declaration=new RewriteRuleSubtreeStream(adaptor,"rule declaration");
		try { DebugEnterRule(GrammarFileName, "declare_command");
		DebugLocation(214, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:215:2: ( DECLARE WS declaration ( ( WS )? ',' ( WS )? declaration )* -> ^( T_DECLARE ( declaration )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:215:4: DECLARE WS declaration ( ( WS )? ',' ( WS )? declaration )*
			{
			DebugLocation(215, 4);
			DECLARE109=(IToken)Match(input,DECLARE,Follow._DECLARE_in_declare_command1114);  
			stream_DECLARE.Add(DECLARE109);

			DebugLocation(215, 12);
			WS110=(IToken)Match(input,WS,Follow._WS_in_declare_command1116);  
			stream_WS.Add(WS110);

			DebugLocation(215, 15);
			PushFollow(Follow._declaration_in_declare_command1118);
			declaration111=declaration();
			PopFollow();

			stream_declaration.Add(declaration111.Tree);
			DebugLocation(215, 27);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:215:27: ( ( WS )? ',' ( WS )? declaration )*
			try { DebugEnterSubRule(44);
			while (true)
			{
				int alt44=2;
				try { DebugEnterDecision(44, decisionCanBacktrack[44]);
				int LA44_0 = input.LA(1);

				if ((LA44_0==WS))
				{
					int LA44_1 = input.LA(2);

					if ((LA44_1==147))
					{
						alt44 = 1;
					}


				}
				else if ((LA44_0==147))
				{
					alt44 = 1;
				}


				} finally { DebugExitDecision(44); }
				switch ( alt44 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:215:28: ( WS )? ',' ( WS )? declaration
					{
					DebugLocation(215, 28);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:215:28: ( WS )?
					int alt42=2;
					try { DebugEnterSubRule(42);
					try { DebugEnterDecision(42, decisionCanBacktrack[42]);
					int LA42_0 = input.LA(1);

					if ((LA42_0==WS))
					{
						alt42 = 1;
					}
					} finally { DebugExitDecision(42); }
					switch (alt42)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:215:28: WS
						{
						DebugLocation(215, 28);
						WS112=(IToken)Match(input,WS,Follow._WS_in_declare_command1121);  
						stream_WS.Add(WS112);


						}
						break;

					}
					} finally { DebugExitSubRule(42); }

					DebugLocation(215, 32);
					char_literal113=(IToken)Match(input,147,Follow._147_in_declare_command1124);  
					stream_147.Add(char_literal113);

					DebugLocation(215, 36);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:215:36: ( WS )?
					int alt43=2;
					try { DebugEnterSubRule(43);
					try { DebugEnterDecision(43, decisionCanBacktrack[43]);
					int LA43_0 = input.LA(1);

					if ((LA43_0==WS))
					{
						alt43 = 1;
					}
					} finally { DebugExitDecision(43); }
					switch (alt43)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:215:36: WS
						{
						DebugLocation(215, 36);
						WS114=(IToken)Match(input,WS,Follow._WS_in_declare_command1126);  
						stream_WS.Add(WS114);


						}
						break;

					}
					} finally { DebugExitSubRule(43); }

					DebugLocation(215, 40);
					PushFollow(Follow._declaration_in_declare_command1129);
					declaration115=declaration();
					PopFollow();

					stream_declaration.Add(declaration115.Tree);

					}
					break;

				default:
					goto loop44;
				}
			}

			loop44:
				;

			} finally { DebugExitSubRule(44); }



			{
			// AST REWRITE
			// elements: declaration
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 216:2: -> ^( T_DECLARE ( declaration )+ )
			{
				DebugLocation(216, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:216:5: ^( T_DECLARE ( declaration )+ )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(216, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_DECLARE, "T_DECLARE"), root_1);

				DebugLocation(216, 17);
				if (!(stream_declaration.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_declaration.HasNext )
				{
					DebugLocation(216, 17);
					adaptor.AddChild(root_1, stream_declaration.NextTree());

				}
				stream_declaration.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declare_command", 24);
			LeaveRule("declare_command", 24);
			LeaveRule_declare_command();
	    }
	 	DebugLocation(217, 1);
		} finally { DebugExitRule(GrammarFileName, "declare_command"); }
		return retval;

	}
	// $ANTLR end "declare_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_declaration() {}

	// $ANTLR start "declaration"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:219:1: declaration : variable WS ( AS WS )? datatype -> ^( T_DECLARATION variable datatype ) ;
	[GrammarRule("declaration")]
	private AstParserRuleReturnScope<object, IToken> declaration()
	{
		EnterRule_declaration();
		EnterRule("declaration", 25);
		TraceIn("declaration", 25);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS117 = default(IToken);
	    IToken AS118 = default(IToken);
	    IToken WS119 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> variable116 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> datatype120 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS117_tree = default(object);
	    object AS118_tree = default(object);
	    object WS119_tree = default(object);
	    RewriteRuleITokenStream stream_AS=new RewriteRuleITokenStream(adaptor,"token AS");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_datatype=new RewriteRuleSubtreeStream(adaptor,"rule datatype");
	    RewriteRuleSubtreeStream stream_variable=new RewriteRuleSubtreeStream(adaptor,"rule variable");
		try { DebugEnterRule(GrammarFileName, "declaration");
		DebugLocation(219, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:220:2: ( variable WS ( AS WS )? datatype -> ^( T_DECLARATION variable datatype ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:220:4: variable WS ( AS WS )? datatype
			{
			DebugLocation(220, 4);
			PushFollow(Follow._variable_in_declaration1153);
			variable116=variable();
			PopFollow();

			stream_variable.Add(variable116.Tree);
			DebugLocation(220, 13);
			WS117=(IToken)Match(input,WS,Follow._WS_in_declaration1155);  
			stream_WS.Add(WS117);

			DebugLocation(220, 16);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:220:16: ( AS WS )?
			int alt45=2;
			try { DebugEnterSubRule(45);
			try { DebugEnterDecision(45, decisionCanBacktrack[45]);
			int LA45_0 = input.LA(1);

			if ((LA45_0==AS))
			{
				alt45 = 1;
			}
			} finally { DebugExitDecision(45); }
			switch (alt45)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:220:17: AS WS
				{
				DebugLocation(220, 17);
				AS118=(IToken)Match(input,AS,Follow._AS_in_declaration1158);  
				stream_AS.Add(AS118);

				DebugLocation(220, 20);
				WS119=(IToken)Match(input,WS,Follow._WS_in_declaration1160);  
				stream_WS.Add(WS119);


				}
				break;

			}
			} finally { DebugExitSubRule(45); }

			DebugLocation(220, 25);
			PushFollow(Follow._datatype_in_declaration1164);
			datatype120=datatype();
			PopFollow();

			stream_datatype.Add(datatype120.Tree);


			{
			// AST REWRITE
			// elements: variable, datatype
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 221:2: -> ^( T_DECLARATION variable datatype )
			{
				DebugLocation(221, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:221:5: ^( T_DECLARATION variable datatype )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(221, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_DECLARATION, "T_DECLARATION"), root_1);

				DebugLocation(221, 21);
				adaptor.AddChild(root_1, stream_variable.NextTree());
				DebugLocation(221, 30);
				adaptor.AddChild(root_1, stream_datatype.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declaration", 25);
			LeaveRule("declaration", 25);
			LeaveRule_declaration();
	    }
	 	DebugLocation(222, 1);
		} finally { DebugExitRule(GrammarFileName, "declaration"); }
		return retval;

	}
	// $ANTLR end "declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_create_view_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_create_view_command() {}

	// $ANTLR start "create_view_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:227:1: create_view_command : CREATE WS VIEW WS view_name WS AS WS select_command -> ^( T_CREATE_VIEW view_name select_command ) ;
	[GrammarRule("create_view_command")]
	private AstParserRuleReturnScope<object, IToken> create_view_command()
	{
		EnterRule_create_view_command();
		EnterRule("create_view_command", 26);
		TraceIn("create_view_command", 26);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken CREATE121 = default(IToken);
	    IToken WS122 = default(IToken);
	    IToken VIEW123 = default(IToken);
	    IToken WS124 = default(IToken);
	    IToken WS126 = default(IToken);
	    IToken AS127 = default(IToken);
	    IToken WS128 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> view_name125 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> select_command129 = default(AstParserRuleReturnScope<object, IToken>);

	    object CREATE121_tree = default(object);
	    object WS122_tree = default(object);
	    object VIEW123_tree = default(object);
	    object WS124_tree = default(object);
	    object WS126_tree = default(object);
	    object AS127_tree = default(object);
	    object WS128_tree = default(object);
	    RewriteRuleITokenStream stream_AS=new RewriteRuleITokenStream(adaptor,"token AS");
	    RewriteRuleITokenStream stream_CREATE=new RewriteRuleITokenStream(adaptor,"token CREATE");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_VIEW=new RewriteRuleITokenStream(adaptor,"token VIEW");
	    RewriteRuleSubtreeStream stream_view_name=new RewriteRuleSubtreeStream(adaptor,"rule view_name");
	    RewriteRuleSubtreeStream stream_select_command=new RewriteRuleSubtreeStream(adaptor,"rule select_command");
		try { DebugEnterRule(GrammarFileName, "create_view_command");
		DebugLocation(227, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:228:2: ( CREATE WS VIEW WS view_name WS AS WS select_command -> ^( T_CREATE_VIEW view_name select_command ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:228:4: CREATE WS VIEW WS view_name WS AS WS select_command
			{
			DebugLocation(228, 4);
			CREATE121=(IToken)Match(input,CREATE,Follow._CREATE_in_create_view_command1189);  
			stream_CREATE.Add(CREATE121);

			DebugLocation(228, 11);
			WS122=(IToken)Match(input,WS,Follow._WS_in_create_view_command1191);  
			stream_WS.Add(WS122);

			DebugLocation(228, 14);
			VIEW123=(IToken)Match(input,VIEW,Follow._VIEW_in_create_view_command1193);  
			stream_VIEW.Add(VIEW123);

			DebugLocation(228, 19);
			WS124=(IToken)Match(input,WS,Follow._WS_in_create_view_command1195);  
			stream_WS.Add(WS124);

			DebugLocation(228, 22);
			PushFollow(Follow._view_name_in_create_view_command1197);
			view_name125=view_name();
			PopFollow();

			stream_view_name.Add(view_name125.Tree);
			DebugLocation(228, 32);
			WS126=(IToken)Match(input,WS,Follow._WS_in_create_view_command1199);  
			stream_WS.Add(WS126);

			DebugLocation(228, 35);
			AS127=(IToken)Match(input,AS,Follow._AS_in_create_view_command1201);  
			stream_AS.Add(AS127);

			DebugLocation(228, 38);
			WS128=(IToken)Match(input,WS,Follow._WS_in_create_view_command1203);  
			stream_WS.Add(WS128);

			DebugLocation(228, 41);
			PushFollow(Follow._select_command_in_create_view_command1205);
			select_command129=select_command();
			PopFollow();

			stream_select_command.Add(select_command129.Tree);


			{
			// AST REWRITE
			// elements: view_name, select_command
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 229:2: -> ^( T_CREATE_VIEW view_name select_command )
			{
				DebugLocation(229, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:229:5: ^( T_CREATE_VIEW view_name select_command )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(229, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CREATE_VIEW, "T_CREATE_VIEW"), root_1);

				DebugLocation(229, 21);
				adaptor.AddChild(root_1, stream_view_name.NextTree());
				DebugLocation(229, 31);
				adaptor.AddChild(root_1, stream_select_command.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("create_view_command", 26);
			LeaveRule("create_view_command", 26);
			LeaveRule_create_view_command();
	    }
	 	DebugLocation(230, 1);
		} finally { DebugExitRule(GrammarFileName, "create_view_command"); }
		return retval;

	}
	// $ANTLR end "create_view_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_view_name() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_view_name() {}

	// $ANTLR start "view_name"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:232:1: view_name : TOKEN -> ^( T_VIEW_NAME TOKEN ) ;
	[GrammarRule("view_name")]
	private AstParserRuleReturnScope<object, IToken> view_name()
	{
		EnterRule_view_name();
		EnterRule("view_name", 27);
		TraceIn("view_name", 27);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN130 = default(IToken);

	    object TOKEN130_tree = default(object);
	    RewriteRuleITokenStream stream_TOKEN=new RewriteRuleITokenStream(adaptor,"token TOKEN");

		try { DebugEnterRule(GrammarFileName, "view_name");
		DebugLocation(232, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:233:2: ( TOKEN -> ^( T_VIEW_NAME TOKEN ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:233:4: TOKEN
			{
			DebugLocation(233, 4);
			TOKEN130=(IToken)Match(input,TOKEN,Follow._TOKEN_in_view_name1228);  
			stream_TOKEN.Add(TOKEN130);



			{
			// AST REWRITE
			// elements: TOKEN
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 233:10: -> ^( T_VIEW_NAME TOKEN )
			{
				DebugLocation(233, 13);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:233:13: ^( T_VIEW_NAME TOKEN )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(233, 15);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_VIEW_NAME, "T_VIEW_NAME"), root_1);

				DebugLocation(233, 27);
				adaptor.AddChild(root_1, stream_TOKEN.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("view_name", 27);
			LeaveRule("view_name", 27);
			LeaveRule_view_name();
	    }
	 	DebugLocation(234, 1);
		} finally { DebugExitRule(GrammarFileName, "view_name"); }
		return retval;

	}
	// $ANTLR end "view_name"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_set_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_set_command() {}

	// $ANTLR start "set_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:240:1: set_command : SET WS variable ( WS )? '=' ( WS )? expression -> ^( T_SET_VARIABLE variable expression ) ;
	[GrammarRule("set_command")]
	private AstParserRuleReturnScope<object, IToken> set_command()
	{
		EnterRule_set_command();
		EnterRule("set_command", 28);
		TraceIn("set_command", 28);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken SET131 = default(IToken);
	    IToken WS132 = default(IToken);
	    IToken WS134 = default(IToken);
	    IToken char_literal135 = default(IToken);
	    IToken WS136 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> variable133 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression137 = default(AstParserRuleReturnScope<object, IToken>);

	    object SET131_tree = default(object);
	    object WS132_tree = default(object);
	    object WS134_tree = default(object);
	    object char_literal135_tree = default(object);
	    object WS136_tree = default(object);
	    RewriteRuleITokenStream stream_SET=new RewriteRuleITokenStream(adaptor,"token SET");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_154=new RewriteRuleITokenStream(adaptor,"token 154");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_variable=new RewriteRuleSubtreeStream(adaptor,"rule variable");
		try { DebugEnterRule(GrammarFileName, "set_command");
		DebugLocation(240, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:241:2: ( SET WS variable ( WS )? '=' ( WS )? expression -> ^( T_SET_VARIABLE variable expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:241:4: SET WS variable ( WS )? '=' ( WS )? expression
			{
			DebugLocation(241, 4);
			SET131=(IToken)Match(input,SET,Follow._SET_in_set_command1252);  
			stream_SET.Add(SET131);

			DebugLocation(241, 8);
			WS132=(IToken)Match(input,WS,Follow._WS_in_set_command1254);  
			stream_WS.Add(WS132);

			DebugLocation(241, 11);
			PushFollow(Follow._variable_in_set_command1256);
			variable133=variable();
			PopFollow();

			stream_variable.Add(variable133.Tree);
			DebugLocation(241, 20);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:241:20: ( WS )?
			int alt46=2;
			try { DebugEnterSubRule(46);
			try { DebugEnterDecision(46, decisionCanBacktrack[46]);
			int LA46_0 = input.LA(1);

			if ((LA46_0==WS))
			{
				alt46 = 1;
			}
			} finally { DebugExitDecision(46); }
			switch (alt46)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:241:20: WS
				{
				DebugLocation(241, 20);
				WS134=(IToken)Match(input,WS,Follow._WS_in_set_command1258);  
				stream_WS.Add(WS134);


				}
				break;

			}
			} finally { DebugExitSubRule(46); }

			DebugLocation(241, 24);
			char_literal135=(IToken)Match(input,154,Follow._154_in_set_command1261);  
			stream_154.Add(char_literal135);

			DebugLocation(241, 28);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:241:28: ( WS )?
			int alt47=2;
			try { DebugEnterSubRule(47);
			try { DebugEnterDecision(47, decisionCanBacktrack[47]);
			int LA47_0 = input.LA(1);

			if ((LA47_0==WS))
			{
				alt47 = 1;
			}
			} finally { DebugExitDecision(47); }
			switch (alt47)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:241:28: WS
				{
				DebugLocation(241, 28);
				WS136=(IToken)Match(input,WS,Follow._WS_in_set_command1263);  
				stream_WS.Add(WS136);


				}
				break;

			}
			} finally { DebugExitSubRule(47); }

			DebugLocation(241, 32);
			PushFollow(Follow._expression_in_set_command1266);
			expression137=expression();
			PopFollow();

			stream_expression.Add(expression137.Tree);


			{
			// AST REWRITE
			// elements: expression, variable
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 242:2: -> ^( T_SET_VARIABLE variable expression )
			{
				DebugLocation(242, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:242:5: ^( T_SET_VARIABLE variable expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(242, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SET_VARIABLE, "T_SET_VARIABLE"), root_1);

				DebugLocation(242, 22);
				adaptor.AddChild(root_1, stream_variable.NextTree());
				DebugLocation(242, 31);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("set_command", 28);
			LeaveRule("set_command", 28);
			LeaveRule_set_command();
	    }
	 	DebugLocation(243, 1);
		} finally { DebugExitRule(GrammarFileName, "set_command"); }
		return retval;

	}
	// $ANTLR end "set_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_list() {}

	// $ANTLR start "expression_list"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:248:1: expression_list : expression ( ( WS )? ',' ( WS )? expression )* -> ^( T_EXPRESSIONLIST ( expression )+ ) ;
	[GrammarRule("expression_list")]
	private AstParserRuleReturnScope<object, IToken> expression_list()
	{
		EnterRule_expression_list();
		EnterRule("expression_list", 29);
		TraceIn("expression_list", 29);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS139 = default(IToken);
	    IToken char_literal140 = default(IToken);
	    IToken WS141 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression138 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression142 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS139_tree = default(object);
	    object char_literal140_tree = default(object);
	    object WS141_tree = default(object);
	    RewriteRuleITokenStream stream_147=new RewriteRuleITokenStream(adaptor,"token 147");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "expression_list");
		DebugLocation(248, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:249:2: ( expression ( ( WS )? ',' ( WS )? expression )* -> ^( T_EXPRESSIONLIST ( expression )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:249:4: expression ( ( WS )? ',' ( WS )? expression )*
			{
			DebugLocation(249, 4);
			PushFollow(Follow._expression_in_expression_list1291);
			expression138=expression();
			PopFollow();

			stream_expression.Add(expression138.Tree);
			DebugLocation(249, 15);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:249:15: ( ( WS )? ',' ( WS )? expression )*
			try { DebugEnterSubRule(50);
			while (true)
			{
				int alt50=2;
				try { DebugEnterDecision(50, decisionCanBacktrack[50]);
				int LA50_0 = input.LA(1);

				if ((LA50_0==WS))
				{
					int LA50_1 = input.LA(2);

					if ((LA50_1==147))
					{
						alt50 = 1;
					}


				}
				else if ((LA50_0==147))
				{
					alt50 = 1;
				}


				} finally { DebugExitDecision(50); }
				switch ( alt50 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:249:16: ( WS )? ',' ( WS )? expression
					{
					DebugLocation(249, 16);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:249:16: ( WS )?
					int alt48=2;
					try { DebugEnterSubRule(48);
					try { DebugEnterDecision(48, decisionCanBacktrack[48]);
					int LA48_0 = input.LA(1);

					if ((LA48_0==WS))
					{
						alt48 = 1;
					}
					} finally { DebugExitDecision(48); }
					switch (alt48)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:249:16: WS
						{
						DebugLocation(249, 16);
						WS139=(IToken)Match(input,WS,Follow._WS_in_expression_list1294);  
						stream_WS.Add(WS139);


						}
						break;

					}
					} finally { DebugExitSubRule(48); }

					DebugLocation(249, 20);
					char_literal140=(IToken)Match(input,147,Follow._147_in_expression_list1297);  
					stream_147.Add(char_literal140);

					DebugLocation(249, 24);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:249:24: ( WS )?
					int alt49=2;
					try { DebugEnterSubRule(49);
					try { DebugEnterDecision(49, decisionCanBacktrack[49]);
					int LA49_0 = input.LA(1);

					if ((LA49_0==WS))
					{
						alt49 = 1;
					}
					} finally { DebugExitDecision(49); }
					switch (alt49)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:249:24: WS
						{
						DebugLocation(249, 24);
						WS141=(IToken)Match(input,WS,Follow._WS_in_expression_list1299);  
						stream_WS.Add(WS141);


						}
						break;

					}
					} finally { DebugExitSubRule(49); }

					DebugLocation(249, 28);
					PushFollow(Follow._expression_in_expression_list1302);
					expression142=expression();
					PopFollow();

					stream_expression.Add(expression142.Tree);

					}
					break;

				default:
					goto loop50;
				}
			}

			loop50:
				;

			} finally { DebugExitSubRule(50); }



			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 249:41: -> ^( T_EXPRESSIONLIST ( expression )+ )
			{
				DebugLocation(249, 44);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:249:44: ^( T_EXPRESSIONLIST ( expression )+ )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(249, 46);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_EXPRESSIONLIST, "T_EXPRESSIONLIST"), root_1);

				DebugLocation(249, 63);
				if (!(stream_expression.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_expression.HasNext )
				{
					DebugLocation(249, 63);
					adaptor.AddChild(root_1, stream_expression.NextTree());

				}
				stream_expression.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_list", 29);
			LeaveRule("expression_list", 29);
			LeaveRule_expression_list();
	    }
	 	DebugLocation(250, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_list"); }
		return retval;

	}
	// $ANTLR end "expression_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_list_or_select_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_list_or_select_command() {}

	// $ANTLR start "expression_list_or_select_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:252:1: expression_list_or_select_command : ( expression_list | select_command );
	[GrammarRule("expression_list_or_select_command")]
	private AstParserRuleReturnScope<object, IToken> expression_list_or_select_command()
	{
		EnterRule_expression_list_or_select_command();
		EnterRule("expression_list_or_select_command", 30);
		TraceIn("expression_list_or_select_command", 30);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> expression_list143 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> select_command144 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "expression_list_or_select_command");
		DebugLocation(252, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:253:2: ( expression_list | select_command )
			int alt51=2;
			try { DebugEnterDecision(51, decisionCanBacktrack[51]);
			int LA51_0 = input.LA(1);

			if (((LA51_0>=CASE && LA51_0<=CAST)||LA51_0==CONVERT||LA51_0==EXISTS||(LA51_0>=NOT && LA51_0<=NUMBER)||LA51_0==SIMPLE_FILE||(LA51_0>=STRING && LA51_0<=SYSTEMVAR)||LA51_0==TOKEN||LA51_0==VARIABLE||LA51_0==143))
			{
				alt51 = 1;
			}
			else if ((LA51_0==SELECT))
			{
				alt51 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 51, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(51); }
			switch (alt51)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:253:4: expression_list
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(253, 4);
				PushFollow(Follow._expression_list_in_expression_list_or_select_command1325);
				expression_list143=expression_list();
				PopFollow();

				adaptor.AddChild(root_0, expression_list143.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:253:22: select_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(253, 22);
				PushFollow(Follow._select_command_in_expression_list_or_select_command1329);
				select_command144=select_command();
				PopFollow();

				adaptor.AddChild(root_0, select_command144.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_list_or_select_command", 30);
			LeaveRule("expression_list_or_select_command", 30);
			LeaveRule_expression_list_or_select_command();
	    }
	 	DebugLocation(254, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_list_or_select_command"); }
		return retval;

	}
	// $ANTLR end "expression_list_or_select_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression() {}

	// $ANTLR start "expression"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:256:1: expression : expression_7 ;
	[GrammarRule("expression")]
	private AstParserRuleReturnScope<object, IToken> expression()
	{
		EnterRule_expression();
		EnterRule("expression", 31);
		TraceIn("expression", 31);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> expression_7145 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(256, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:257:2: ( expression_7 )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:257:4: expression_7
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(257, 4);
			PushFollow(Follow._expression_7_in_expression1341);
			expression_7145=expression_7();
			PopFollow();

			adaptor.AddChild(root_0, expression_7145.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression", 31);
			LeaveRule("expression", 31);
			LeaveRule_expression();
	    }
	 	DebugLocation(258, 1);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return retval;

	}
	// $ANTLR end "expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_7() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_7() {}

	// $ANTLR start "expression_7"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:260:1: expression_7 : (a= expression_6 -> $a) ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )* ;
	[GrammarRule("expression_7")]
	private AstParserRuleReturnScope<object, IToken> expression_7()
	{
		EnterRule_expression_7();
		EnterRule("expression_7", 32);
		TraceIn("expression_7", 32);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS146 = default(IToken);
	    IToken WS148 = default(IToken);
	    IToken IN149 = default(IToken);
	    IToken WS150 = default(IToken);
	    IToken char_literal151 = default(IToken);
	    IToken WS152 = default(IToken);
	    IToken WS154 = default(IToken);
	    IToken char_literal155 = default(IToken);
	    IToken NOT156 = default(IToken);
	    IToken WS157 = default(IToken);
	    IToken IN158 = default(IToken);
	    IToken WS159 = default(IToken);
	    IToken char_literal160 = default(IToken);
	    IToken WS161 = default(IToken);
	    IToken WS163 = default(IToken);
	    IToken char_literal164 = default(IToken);
	    IToken WS166 = default(IToken);
	    IToken SOME167 = default(IToken);
	    IToken ANY168 = default(IToken);
	    IToken WS169 = default(IToken);
	    IToken char_literal170 = default(IToken);
	    IToken char_literal172 = default(IToken);
	    IToken WS174 = default(IToken);
	    IToken ALL175 = default(IToken);
	    IToken WS176 = default(IToken);
	    IToken char_literal177 = default(IToken);
	    IToken char_literal179 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_7147 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command153 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command162 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_4165 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command171 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_4173 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command178 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS146_tree = default(object);
	    object WS148_tree = default(object);
	    object IN149_tree = default(object);
	    object WS150_tree = default(object);
	    object char_literal151_tree = default(object);
	    object WS152_tree = default(object);
	    object WS154_tree = default(object);
	    object char_literal155_tree = default(object);
	    object NOT156_tree = default(object);
	    object WS157_tree = default(object);
	    object IN158_tree = default(object);
	    object WS159_tree = default(object);
	    object char_literal160_tree = default(object);
	    object WS161_tree = default(object);
	    object WS163_tree = default(object);
	    object char_literal164_tree = default(object);
	    object WS166_tree = default(object);
	    object SOME167_tree = default(object);
	    object ANY168_tree = default(object);
	    object WS169_tree = default(object);
	    object char_literal170_tree = default(object);
	    object char_literal172_tree = default(object);
	    object WS174_tree = default(object);
	    object ALL175_tree = default(object);
	    object WS176_tree = default(object);
	    object char_literal177_tree = default(object);
	    object char_literal179_tree = default(object);
	    RewriteRuleITokenStream stream_143=new RewriteRuleITokenStream(adaptor,"token 143");
	    RewriteRuleITokenStream stream_144=new RewriteRuleITokenStream(adaptor,"token 144");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_ANY=new RewriteRuleITokenStream(adaptor,"token ANY");
	    RewriteRuleITokenStream stream_IN=new RewriteRuleITokenStream(adaptor,"token IN");
	    RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");
	    RewriteRuleITokenStream stream_SOME=new RewriteRuleITokenStream(adaptor,"token SOME");
	    RewriteRuleITokenStream stream_ALL=new RewriteRuleITokenStream(adaptor,"token ALL");
	    RewriteRuleSubtreeStream stream_op_7=new RewriteRuleSubtreeStream(adaptor,"rule op_7");
	    RewriteRuleSubtreeStream stream_expression_6=new RewriteRuleSubtreeStream(adaptor,"rule expression_6");
	    RewriteRuleSubtreeStream stream_expression_list_or_select_command=new RewriteRuleSubtreeStream(adaptor,"rule expression_list_or_select_command");
	    RewriteRuleSubtreeStream stream_op_4=new RewriteRuleSubtreeStream(adaptor,"rule op_4");
		try { DebugEnterRule(GrammarFileName, "expression_7");
		DebugLocation(260, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:261:2: ( (a= expression_6 -> $a) ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:261:4: (a= expression_6 -> $a) ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )*
			{
			DebugLocation(261, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:261:4: (a= expression_6 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:261:5: a= expression_6
			{
			DebugLocation(261, 6);
			PushFollow(Follow._expression_6_in_expression_71357);
			a=expression_6();
			PopFollow();

			stream_expression_6.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 261:19: -> $a
			{
				DebugLocation(261, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(261, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:261:25: ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )*
			try { DebugEnterSubRule(64);
			while (true)
			{
				int alt64=2;
				try { DebugEnterDecision(64, decisionCanBacktrack[64]);
				int LA64_0 = input.LA(1);

				if ((LA64_0==WS))
				{
					int LA64_1 = input.LA(2);

					if ((LA64_1==NOT))
					{
						int LA64_3 = input.LA(3);

						if ((LA64_3==WS))
						{
							int LA64_5 = input.LA(4);

							if ((LA64_5==BETWEEN||LA64_5==IN||LA64_5==LIKE||LA64_5==MATCH))
							{
								alt64 = 1;
							}


						}


					}
					else if ((LA64_1==BETWEEN||LA64_1==IN||LA64_1==LIKE||LA64_1==MATCH||LA64_1==OR||(LA64_1>=138 && LA64_1<=140)||(LA64_1>=151 && LA64_1<=156)))
					{
						alt64 = 1;
					}


				}


				} finally { DebugExitDecision(64); }
				switch ( alt64 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:261:26: WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) )
					{
					DebugLocation(261, 26);
					WS146=(IToken)Match(input,WS,Follow._WS_in_expression_71364);  
					stream_WS.Add(WS146);

					DebugLocation(261, 29);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:261:29: ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) )
					int alt63=5;
					try { DebugEnterSubRule(63);
					try { DebugEnterDecision(63, decisionCanBacktrack[63]);
					switch (input.LA(1))
					{
					case BETWEEN:
					case LIKE:
					case MATCH:
					case OR:
						{
						alt63 = 1;
						}
						break;
					case NOT:
						{
						int LA63_2 = input.LA(2);

						if ((LA63_2==WS))
						{
							int LA63_13 = input.LA(3);

							if ((LA63_13==BETWEEN||LA63_13==LIKE||LA63_13==MATCH))
							{
								alt63 = 1;
							}
							else if ((LA63_13==IN))
							{
								alt63 = 3;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 63, 13, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 63, 2, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case IN:
						{
						alt63 = 2;
						}
						break;
					case 154:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA63_14 = input.LA(3);

							if ((LA63_14==ANY||LA63_14==SOME))
							{
								alt63 = 4;
							}
							else if ((LA63_14==ALL))
							{
								alt63 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 63, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt63 = 4;
							}
							break;
						case ALL:
							{
							alt63 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 63, 4, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 156:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA63_14 = input.LA(3);

							if ((LA63_14==ANY||LA63_14==SOME))
							{
								alt63 = 4;
							}
							else if ((LA63_14==ALL))
							{
								alt63 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 63, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt63 = 4;
							}
							break;
						case ALL:
							{
							alt63 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 63, 5, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 152:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA63_14 = input.LA(3);

							if ((LA63_14==ANY||LA63_14==SOME))
							{
								alt63 = 4;
							}
							else if ((LA63_14==ALL))
							{
								alt63 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 63, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt63 = 4;
							}
							break;
						case ALL:
							{
							alt63 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 63, 6, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 153:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA63_14 = input.LA(3);

							if ((LA63_14==ANY||LA63_14==SOME))
							{
								alt63 = 4;
							}
							else if ((LA63_14==ALL))
							{
								alt63 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 63, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt63 = 4;
							}
							break;
						case ALL:
							{
							alt63 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 63, 7, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 139:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA63_14 = input.LA(3);

							if ((LA63_14==ANY||LA63_14==SOME))
							{
								alt63 = 4;
							}
							else if ((LA63_14==ALL))
							{
								alt63 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 63, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt63 = 4;
							}
							break;
						case ALL:
							{
							alt63 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 63, 8, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 140:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA63_14 = input.LA(3);

							if ((LA63_14==ANY||LA63_14==SOME))
							{
								alt63 = 4;
							}
							else if ((LA63_14==ALL))
							{
								alt63 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 63, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt63 = 4;
							}
							break;
						case ALL:
							{
							alt63 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 63, 9, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 138:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA63_14 = input.LA(3);

							if ((LA63_14==ANY||LA63_14==SOME))
							{
								alt63 = 4;
							}
							else if ((LA63_14==ALL))
							{
								alt63 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 63, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt63 = 4;
							}
							break;
						case ALL:
							{
							alt63 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 63, 10, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 155:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA63_14 = input.LA(3);

							if ((LA63_14==ANY||LA63_14==SOME))
							{
								alt63 = 4;
							}
							else if ((LA63_14==ALL))
							{
								alt63 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 63, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt63 = 4;
							}
							break;
						case ALL:
							{
							alt63 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 63, 11, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 151:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA63_14 = input.LA(3);

							if ((LA63_14==ANY||LA63_14==SOME))
							{
								alt63 = 4;
							}
							else if ((LA63_14==ALL))
							{
								alt63 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 63, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt63 = 4;
							}
							break;
						case ALL:
							{
							alt63 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 63, 12, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 63, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(63); }
					switch (alt63)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:262:2: op_7 WS b= expression_6
						{
						DebugLocation(262, 2);
						PushFollow(Follow._op_7_in_expression_71369);
						op_7147=op_7();
						PopFollow();

						stream_op_7.Add(op_7147.Tree);
						DebugLocation(262, 7);
						WS148=(IToken)Match(input,WS,Follow._WS_in_expression_71371);  
						stream_WS.Add(WS148);

						DebugLocation(262, 11);
						PushFollow(Follow._expression_6_in_expression_71375);
						b=expression_6();
						PopFollow();

						stream_expression_6.Add(b.Tree);


						{
						// AST REWRITE
						// elements: op_7, expression_7, b
						// token labels: 
						// rule labels: retval, b
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 262:25: -> ^( T_OP_BINARY op_7 $expression_7 $b)
						{
							DebugLocation(262, 28);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:262:28: ^( T_OP_BINARY op_7 $expression_7 $b)
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(262, 30);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(262, 42);
							adaptor.AddChild(root_1, stream_op_7.NextTree());
							DebugLocation(262, 48);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(262, 62);
							adaptor.AddChild(root_1, stream_b.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:263:4: IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')'
						{
						DebugLocation(263, 4);
						IN149=(IToken)Match(input,IN,Follow._IN_in_expression_71394);  
						stream_IN.Add(IN149);

						DebugLocation(263, 7);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:263:7: ( WS )?
						int alt52=2;
						try { DebugEnterSubRule(52);
						try { DebugEnterDecision(52, decisionCanBacktrack[52]);
						int LA52_0 = input.LA(1);

						if ((LA52_0==WS))
						{
							alt52 = 1;
						}
						} finally { DebugExitDecision(52); }
						switch (alt52)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:263:7: WS
							{
							DebugLocation(263, 7);
							WS150=(IToken)Match(input,WS,Follow._WS_in_expression_71396);  
							stream_WS.Add(WS150);


							}
							break;

						}
						} finally { DebugExitSubRule(52); }

						DebugLocation(263, 11);
						char_literal151=(IToken)Match(input,143,Follow._143_in_expression_71399);  
						stream_143.Add(char_literal151);

						DebugLocation(263, 15);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:263:15: ( WS )?
						int alt53=2;
						try { DebugEnterSubRule(53);
						try { DebugEnterDecision(53, decisionCanBacktrack[53]);
						int LA53_0 = input.LA(1);

						if ((LA53_0==WS))
						{
							alt53 = 1;
						}
						} finally { DebugExitDecision(53); }
						switch (alt53)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:263:15: WS
							{
							DebugLocation(263, 15);
							WS152=(IToken)Match(input,WS,Follow._WS_in_expression_71401);  
							stream_WS.Add(WS152);


							}
							break;

						}
						} finally { DebugExitSubRule(53); }

						DebugLocation(263, 19);
						PushFollow(Follow._expression_list_or_select_command_in_expression_71404);
						expression_list_or_select_command153=expression_list_or_select_command();
						PopFollow();

						stream_expression_list_or_select_command.Add(expression_list_or_select_command153.Tree);
						DebugLocation(263, 53);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:263:53: ( WS )?
						int alt54=2;
						try { DebugEnterSubRule(54);
						try { DebugEnterDecision(54, decisionCanBacktrack[54]);
						int LA54_0 = input.LA(1);

						if ((LA54_0==WS))
						{
							alt54 = 1;
						}
						} finally { DebugExitDecision(54); }
						switch (alt54)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:263:53: WS
							{
							DebugLocation(263, 53);
							WS154=(IToken)Match(input,WS,Follow._WS_in_expression_71406);  
							stream_WS.Add(WS154);


							}
							break;

						}
						} finally { DebugExitSubRule(54); }

						DebugLocation(263, 57);
						char_literal155=(IToken)Match(input,144,Follow._144_in_expression_71409);  
						stream_144.Add(char_literal155);



						{
						// AST REWRITE
						// elements: expression_7, expression_list_or_select_command
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 263:61: -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command )
						{
							DebugLocation(263, 64);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:263:64: ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(263, 66);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(263, 78);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_IN, "T_IN"));
							DebugLocation(263, 84);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(263, 97);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:264:4: NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')'
						{
						DebugLocation(264, 4);
						NOT156=(IToken)Match(input,NOT,Follow._NOT_in_expression_71427);  
						stream_NOT.Add(NOT156);

						DebugLocation(264, 8);
						WS157=(IToken)Match(input,WS,Follow._WS_in_expression_71429);  
						stream_WS.Add(WS157);

						DebugLocation(264, 11);
						IN158=(IToken)Match(input,IN,Follow._IN_in_expression_71431);  
						stream_IN.Add(IN158);

						DebugLocation(264, 14);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:264:14: ( WS )?
						int alt55=2;
						try { DebugEnterSubRule(55);
						try { DebugEnterDecision(55, decisionCanBacktrack[55]);
						int LA55_0 = input.LA(1);

						if ((LA55_0==WS))
						{
							alt55 = 1;
						}
						} finally { DebugExitDecision(55); }
						switch (alt55)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:264:14: WS
							{
							DebugLocation(264, 14);
							WS159=(IToken)Match(input,WS,Follow._WS_in_expression_71433);  
							stream_WS.Add(WS159);


							}
							break;

						}
						} finally { DebugExitSubRule(55); }

						DebugLocation(264, 18);
						char_literal160=(IToken)Match(input,143,Follow._143_in_expression_71436);  
						stream_143.Add(char_literal160);

						DebugLocation(264, 22);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:264:22: ( WS )?
						int alt56=2;
						try { DebugEnterSubRule(56);
						try { DebugEnterDecision(56, decisionCanBacktrack[56]);
						int LA56_0 = input.LA(1);

						if ((LA56_0==WS))
						{
							alt56 = 1;
						}
						} finally { DebugExitDecision(56); }
						switch (alt56)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:264:22: WS
							{
							DebugLocation(264, 22);
							WS161=(IToken)Match(input,WS,Follow._WS_in_expression_71438);  
							stream_WS.Add(WS161);


							}
							break;

						}
						} finally { DebugExitSubRule(56); }

						DebugLocation(264, 26);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:264:26: ( expression_list_or_select_command )
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:264:27: expression_list_or_select_command
						{
						DebugLocation(264, 27);
						PushFollow(Follow._expression_list_or_select_command_in_expression_71442);
						expression_list_or_select_command162=expression_list_or_select_command();
						PopFollow();

						stream_expression_list_or_select_command.Add(expression_list_or_select_command162.Tree);

						}

						DebugLocation(264, 62);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:264:62: ( WS )?
						int alt57=2;
						try { DebugEnterSubRule(57);
						try { DebugEnterDecision(57, decisionCanBacktrack[57]);
						int LA57_0 = input.LA(1);

						if ((LA57_0==WS))
						{
							alt57 = 1;
						}
						} finally { DebugExitDecision(57); }
						switch (alt57)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:264:62: WS
							{
							DebugLocation(264, 62);
							WS163=(IToken)Match(input,WS,Follow._WS_in_expression_71445);  
							stream_WS.Add(WS163);


							}
							break;

						}
						} finally { DebugExitSubRule(57); }

						DebugLocation(264, 66);
						char_literal164=(IToken)Match(input,144,Follow._144_in_expression_71448);  
						stream_144.Add(char_literal164);



						{
						// AST REWRITE
						// elements: expression_list_or_select_command, expression_7
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 264:70: -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command )
						{
							DebugLocation(264, 73);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:264:73: ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(264, 75);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(264, 87);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_NOTIN, "T_NOTIN"));
							DebugLocation(264, 96);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(264, 109);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 4:
						DebugEnterAlt(4);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:265:4: op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')'
						{
						DebugLocation(265, 4);
						PushFollow(Follow._op_4_in_expression_71466);
						op_4165=op_4();
						PopFollow();

						stream_op_4.Add(op_4165.Tree);
						DebugLocation(265, 9);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:265:9: ( WS )?
						int alt58=2;
						try { DebugEnterSubRule(58);
						try { DebugEnterDecision(58, decisionCanBacktrack[58]);
						int LA58_0 = input.LA(1);

						if ((LA58_0==WS))
						{
							alt58 = 1;
						}
						} finally { DebugExitDecision(58); }
						switch (alt58)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:265:9: WS
							{
							DebugLocation(265, 9);
							WS166=(IToken)Match(input,WS,Follow._WS_in_expression_71468);  
							stream_WS.Add(WS166);


							}
							break;

						}
						} finally { DebugExitSubRule(58); }

						DebugLocation(265, 13);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:265:13: ( SOME | ANY )
						int alt59=2;
						try { DebugEnterSubRule(59);
						try { DebugEnterDecision(59, decisionCanBacktrack[59]);
						int LA59_0 = input.LA(1);

						if ((LA59_0==SOME))
						{
							alt59 = 1;
						}
						else if ((LA59_0==ANY))
						{
							alt59 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 59, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						} finally { DebugExitDecision(59); }
						switch (alt59)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:265:14: SOME
							{
							DebugLocation(265, 14);
							SOME167=(IToken)Match(input,SOME,Follow._SOME_in_expression_71472);  
							stream_SOME.Add(SOME167);


							}
							break;
						case 2:
							DebugEnterAlt(2);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:265:21: ANY
							{
							DebugLocation(265, 21);
							ANY168=(IToken)Match(input,ANY,Follow._ANY_in_expression_71476);  
							stream_ANY.Add(ANY168);


							}
							break;

						}
						} finally { DebugExitSubRule(59); }

						DebugLocation(265, 26);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:265:26: ( WS )?
						int alt60=2;
						try { DebugEnterSubRule(60);
						try { DebugEnterDecision(60, decisionCanBacktrack[60]);
						int LA60_0 = input.LA(1);

						if ((LA60_0==WS))
						{
							alt60 = 1;
						}
						} finally { DebugExitDecision(60); }
						switch (alt60)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:265:26: WS
							{
							DebugLocation(265, 26);
							WS169=(IToken)Match(input,WS,Follow._WS_in_expression_71479);  
							stream_WS.Add(WS169);


							}
							break;

						}
						} finally { DebugExitSubRule(60); }

						DebugLocation(265, 30);
						char_literal170=(IToken)Match(input,143,Follow._143_in_expression_71482);  
						stream_143.Add(char_literal170);

						DebugLocation(265, 34);
						PushFollow(Follow._expression_list_or_select_command_in_expression_71484);
						expression_list_or_select_command171=expression_list_or_select_command();
						PopFollow();

						stream_expression_list_or_select_command.Add(expression_list_or_select_command171.Tree);
						DebugLocation(265, 68);
						char_literal172=(IToken)Match(input,144,Follow._144_in_expression_71486);  
						stream_144.Add(char_literal172);



						{
						// AST REWRITE
						// elements: expression_list_or_select_command, op_4, expression_7
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 265:72: -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command )
						{
							DebugLocation(265, 75);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:265:75: ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(265, 77);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(265, 89);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_ANY, "T_ANY"));
							DebugLocation(265, 95);
							adaptor.AddChild(root_1, stream_op_4.NextTree());
							DebugLocation(265, 101);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(265, 114);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 5:
						DebugEnterAlt(5);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:266:4: op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')'
						{
						DebugLocation(266, 4);
						PushFollow(Follow._op_4_in_expression_71506);
						op_4173=op_4();
						PopFollow();

						stream_op_4.Add(op_4173.Tree);
						DebugLocation(266, 9);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:266:9: ( WS )?
						int alt61=2;
						try { DebugEnterSubRule(61);
						try { DebugEnterDecision(61, decisionCanBacktrack[61]);
						int LA61_0 = input.LA(1);

						if ((LA61_0==WS))
						{
							alt61 = 1;
						}
						} finally { DebugExitDecision(61); }
						switch (alt61)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:266:9: WS
							{
							DebugLocation(266, 9);
							WS174=(IToken)Match(input,WS,Follow._WS_in_expression_71508);  
							stream_WS.Add(WS174);


							}
							break;

						}
						} finally { DebugExitSubRule(61); }

						DebugLocation(266, 13);
						ALL175=(IToken)Match(input,ALL,Follow._ALL_in_expression_71511);  
						stream_ALL.Add(ALL175);

						DebugLocation(266, 17);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:266:17: ( WS )?
						int alt62=2;
						try { DebugEnterSubRule(62);
						try { DebugEnterDecision(62, decisionCanBacktrack[62]);
						int LA62_0 = input.LA(1);

						if ((LA62_0==WS))
						{
							alt62 = 1;
						}
						} finally { DebugExitDecision(62); }
						switch (alt62)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:266:17: WS
							{
							DebugLocation(266, 17);
							WS176=(IToken)Match(input,WS,Follow._WS_in_expression_71513);  
							stream_WS.Add(WS176);


							}
							break;

						}
						} finally { DebugExitSubRule(62); }

						DebugLocation(266, 21);
						char_literal177=(IToken)Match(input,143,Follow._143_in_expression_71516);  
						stream_143.Add(char_literal177);

						DebugLocation(266, 25);
						PushFollow(Follow._expression_list_or_select_command_in_expression_71518);
						expression_list_or_select_command178=expression_list_or_select_command();
						PopFollow();

						stream_expression_list_or_select_command.Add(expression_list_or_select_command178.Tree);
						DebugLocation(266, 59);
						char_literal179=(IToken)Match(input,144,Follow._144_in_expression_71520);  
						stream_144.Add(char_literal179);



						{
						// AST REWRITE
						// elements: expression_7, op_4, expression_list_or_select_command
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 266:63: -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command )
						{
							DebugLocation(266, 66);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:266:66: ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(266, 68);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(266, 80);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_ALL, "T_ALL"));
							DebugLocation(266, 86);
							adaptor.AddChild(root_1, stream_op_4.NextTree());
							DebugLocation(266, 92);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(266, 105);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					}
					} finally { DebugExitSubRule(63); }


					}
					break;

				default:
					goto loop64;
				}
			}

			loop64:
				;

			} finally { DebugExitSubRule(64); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_7", 32);
			LeaveRule("expression_7", 32);
			LeaveRule_expression_7();
	    }
	 	DebugLocation(268, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_7"); }
		return retval;

	}
	// $ANTLR end "expression_7"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_7() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_7() {}

	// $ANTLR start "op_7"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:270:1: op_7 : ( OR -> T_OR | LIKE -> T_LIKE | NOT WS LIKE -> T_NOTLIKE | MATCH -> T_MATCH | NOT WS MATCH -> T_NOTMATCH | BETWEEN -> T_BETWEEN | NOT WS BETWEEN -> T_NOTBETWEEN );
	[GrammarRule("op_7")]
	private AstParserRuleReturnScope<object, IToken> op_7()
	{
		EnterRule_op_7();
		EnterRule("op_7", 33);
		TraceIn("op_7", 33);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken OR180 = default(IToken);
	    IToken LIKE181 = default(IToken);
	    IToken NOT182 = default(IToken);
	    IToken WS183 = default(IToken);
	    IToken LIKE184 = default(IToken);
	    IToken MATCH185 = default(IToken);
	    IToken NOT186 = default(IToken);
	    IToken WS187 = default(IToken);
	    IToken MATCH188 = default(IToken);
	    IToken BETWEEN189 = default(IToken);
	    IToken NOT190 = default(IToken);
	    IToken WS191 = default(IToken);
	    IToken BETWEEN192 = default(IToken);

	    object OR180_tree = default(object);
	    object LIKE181_tree = default(object);
	    object NOT182_tree = default(object);
	    object WS183_tree = default(object);
	    object LIKE184_tree = default(object);
	    object MATCH185_tree = default(object);
	    object NOT186_tree = default(object);
	    object WS187_tree = default(object);
	    object MATCH188_tree = default(object);
	    object BETWEEN189_tree = default(object);
	    object NOT190_tree = default(object);
	    object WS191_tree = default(object);
	    object BETWEEN192_tree = default(object);
	    RewriteRuleITokenStream stream_MATCH=new RewriteRuleITokenStream(adaptor,"token MATCH");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");
	    RewriteRuleITokenStream stream_BETWEEN=new RewriteRuleITokenStream(adaptor,"token BETWEEN");
	    RewriteRuleITokenStream stream_LIKE=new RewriteRuleITokenStream(adaptor,"token LIKE");
	    RewriteRuleITokenStream stream_OR=new RewriteRuleITokenStream(adaptor,"token OR");

		try { DebugEnterRule(GrammarFileName, "op_7");
		DebugLocation(270, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:270:6: ( OR -> T_OR | LIKE -> T_LIKE | NOT WS LIKE -> T_NOTLIKE | MATCH -> T_MATCH | NOT WS MATCH -> T_NOTMATCH | BETWEEN -> T_BETWEEN | NOT WS BETWEEN -> T_NOTBETWEEN )
			int alt65=7;
			try { DebugEnterDecision(65, decisionCanBacktrack[65]);
			switch (input.LA(1))
			{
			case OR:
				{
				alt65 = 1;
				}
				break;
			case LIKE:
				{
				alt65 = 2;
				}
				break;
			case NOT:
				{
				int LA65_3 = input.LA(2);

				if ((LA65_3==WS))
				{
					switch (input.LA(3))
					{
					case LIKE:
						{
						alt65 = 3;
						}
						break;
					case MATCH:
						{
						alt65 = 5;
						}
						break;
					case BETWEEN:
						{
						alt65 = 7;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 65, 6, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 65, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case MATCH:
				{
				alt65 = 4;
				}
				break;
			case BETWEEN:
				{
				alt65 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 65, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(65); }
			switch (alt65)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:270:8: OR
				{
				DebugLocation(270, 8);
				OR180=(IToken)Match(input,OR,Follow._OR_in_op_71550);  
				stream_OR.Add(OR180);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 270:11: -> T_OR
				{
					DebugLocation(270, 14);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_OR, "T_OR"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:271:4: LIKE
				{
				DebugLocation(271, 4);
				LIKE181=(IToken)Match(input,LIKE,Follow._LIKE_in_op_71559);  
				stream_LIKE.Add(LIKE181);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 271:9: -> T_LIKE
				{
					DebugLocation(271, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_LIKE, "T_LIKE"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:272:4: NOT WS LIKE
				{
				DebugLocation(272, 4);
				NOT182=(IToken)Match(input,NOT,Follow._NOT_in_op_71568);  
				stream_NOT.Add(NOT182);

				DebugLocation(272, 8);
				WS183=(IToken)Match(input,WS,Follow._WS_in_op_71570);  
				stream_WS.Add(WS183);

				DebugLocation(272, 11);
				LIKE184=(IToken)Match(input,LIKE,Follow._LIKE_in_op_71572);  
				stream_LIKE.Add(LIKE184);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 272:16: -> T_NOTLIKE
				{
					DebugLocation(272, 19);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTLIKE, "T_NOTLIKE"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:273:4: MATCH
				{
				DebugLocation(273, 4);
				MATCH185=(IToken)Match(input,MATCH,Follow._MATCH_in_op_71581);  
				stream_MATCH.Add(MATCH185);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 273:10: -> T_MATCH
				{
					DebugLocation(273, 13);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MATCH, "T_MATCH"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:274:4: NOT WS MATCH
				{
				DebugLocation(274, 4);
				NOT186=(IToken)Match(input,NOT,Follow._NOT_in_op_71590);  
				stream_NOT.Add(NOT186);

				DebugLocation(274, 8);
				WS187=(IToken)Match(input,WS,Follow._WS_in_op_71592);  
				stream_WS.Add(WS187);

				DebugLocation(274, 11);
				MATCH188=(IToken)Match(input,MATCH,Follow._MATCH_in_op_71594);  
				stream_MATCH.Add(MATCH188);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 274:17: -> T_NOTMATCH
				{
					DebugLocation(274, 20);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTMATCH, "T_NOTMATCH"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:275:4: BETWEEN
				{
				DebugLocation(275, 4);
				BETWEEN189=(IToken)Match(input,BETWEEN,Follow._BETWEEN_in_op_71603);  
				stream_BETWEEN.Add(BETWEEN189);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 275:12: -> T_BETWEEN
				{
					DebugLocation(275, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BETWEEN, "T_BETWEEN"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:276:4: NOT WS BETWEEN
				{
				DebugLocation(276, 4);
				NOT190=(IToken)Match(input,NOT,Follow._NOT_in_op_71612);  
				stream_NOT.Add(NOT190);

				DebugLocation(276, 8);
				WS191=(IToken)Match(input,WS,Follow._WS_in_op_71614);  
				stream_WS.Add(WS191);

				DebugLocation(276, 11);
				BETWEEN192=(IToken)Match(input,BETWEEN,Follow._BETWEEN_in_op_71616);  
				stream_BETWEEN.Add(BETWEEN192);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 276:19: -> T_NOTBETWEEN
				{
					DebugLocation(276, 22);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTBETWEEN, "T_NOTBETWEEN"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_7", 33);
			LeaveRule("op_7", 33);
			LeaveRule_op_7();
	    }
	 	DebugLocation(277, 1);
		} finally { DebugExitRule(GrammarFileName, "op_7"); }
		return retval;

	}
	// $ANTLR end "op_7"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_6() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_6() {}

	// $ANTLR start "expression_6"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:279:1: expression_6 : (a= expression_5 -> $a) ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )* ;
	[GrammarRule("expression_6")]
	private AstParserRuleReturnScope<object, IToken> expression_6()
	{
		EnterRule_expression_6();
		EnterRule("expression_6", 34);
		TraceIn("expression_6", 34);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS193 = default(IToken);
	    IToken WS195 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_6194 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS193_tree = default(object);
	    object WS195_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_op_6=new RewriteRuleSubtreeStream(adaptor,"rule op_6");
	    RewriteRuleSubtreeStream stream_expression_5=new RewriteRuleSubtreeStream(adaptor,"rule expression_5");
		try { DebugEnterRule(GrammarFileName, "expression_6");
		DebugLocation(279, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:280:2: ( (a= expression_5 -> $a) ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:280:4: (a= expression_5 -> $a) ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )*
			{
			DebugLocation(280, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:280:4: (a= expression_5 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:280:5: a= expression_5
			{
			DebugLocation(280, 6);
			PushFollow(Follow._expression_5_in_expression_61635);
			a=expression_5();
			PopFollow();

			stream_expression_5.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 280:19: -> $a
			{
				DebugLocation(280, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(280, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:280:25: ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )*
			try { DebugEnterSubRule(66);
			while (true)
			{
				int alt66=2;
				try { DebugEnterDecision(66, decisionCanBacktrack[66]);
				int LA66_0 = input.LA(1);

				if ((LA66_0==WS))
				{
					int LA66_1 = input.LA(2);

					if ((LA66_1==AND))
					{
						alt66 = 1;
					}


				}


				} finally { DebugExitDecision(66); }
				switch ( alt66 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:280:26: WS op_6 WS b= expression_5
					{
					DebugLocation(280, 26);
					WS193=(IToken)Match(input,WS,Follow._WS_in_expression_61642);  
					stream_WS.Add(WS193);

					DebugLocation(280, 29);
					PushFollow(Follow._op_6_in_expression_61644);
					op_6194=op_6();
					PopFollow();

					stream_op_6.Add(op_6194.Tree);
					DebugLocation(280, 34);
					WS195=(IToken)Match(input,WS,Follow._WS_in_expression_61646);  
					stream_WS.Add(WS195);

					DebugLocation(280, 38);
					PushFollow(Follow._expression_5_in_expression_61650);
					b=expression_5();
					PopFollow();

					stream_expression_5.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, op_6, expression_6
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 280:52: -> ^( T_OP_BINARY op_6 $expression_6 $b)
					{
						DebugLocation(280, 55);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:280:55: ^( T_OP_BINARY op_6 $expression_6 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(280, 57);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(280, 69);
						adaptor.AddChild(root_1, stream_op_6.NextTree());
						DebugLocation(280, 75);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(280, 89);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop66;
				}
			}

			loop66:
				;

			} finally { DebugExitSubRule(66); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_6", 34);
			LeaveRule("expression_6", 34);
			LeaveRule_expression_6();
	    }
	 	DebugLocation(281, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_6"); }
		return retval;

	}
	// $ANTLR end "expression_6"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_6() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_6() {}

	// $ANTLR start "op_6"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:283:1: op_6 : AND -> T_AND ;
	[GrammarRule("op_6")]
	private AstParserRuleReturnScope<object, IToken> op_6()
	{
		EnterRule_op_6();
		EnterRule("op_6", 35);
		TraceIn("op_6", 35);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken AND196 = default(IToken);

	    object AND196_tree = default(object);
	    RewriteRuleITokenStream stream_AND=new RewriteRuleITokenStream(adaptor,"token AND");

		try { DebugEnterRule(GrammarFileName, "op_6");
		DebugLocation(283, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:283:6: ( AND -> T_AND )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:283:8: AND
			{
			DebugLocation(283, 8);
			AND196=(IToken)Match(input,AND,Follow._AND_in_op_61678);  
			stream_AND.Add(AND196);



			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 283:12: -> T_AND
			{
				DebugLocation(283, 15);
				adaptor.AddChild(root_0, (object)adaptor.Create(T_AND, "T_AND"));

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_6", 35);
			LeaveRule("op_6", 35);
			LeaveRule_op_6();
	    }
	 	DebugLocation(284, 1);
		} finally { DebugExitRule(GrammarFileName, "op_6"); }
		return retval;

	}
	// $ANTLR end "op_6"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_5() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_5() {}

	// $ANTLR start "expression_5"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:286:1: expression_5 : ( op_5 WS expression_5 -> ^( T_OP_UNARY op_5 expression_5 ) | expression_4 );
	[GrammarRule("expression_5")]
	private AstParserRuleReturnScope<object, IToken> expression_5()
	{
		EnterRule_expression_5();
		EnterRule("expression_5", 36);
		TraceIn("expression_5", 36);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS198 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> op_5197 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_5199 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_4200 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS198_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression_5=new RewriteRuleSubtreeStream(adaptor,"rule expression_5");
	    RewriteRuleSubtreeStream stream_op_5=new RewriteRuleSubtreeStream(adaptor,"rule op_5");
		try { DebugEnterRule(GrammarFileName, "expression_5");
		DebugLocation(286, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:287:2: ( op_5 WS expression_5 -> ^( T_OP_UNARY op_5 expression_5 ) | expression_4 )
			int alt67=2;
			try { DebugEnterDecision(67, decisionCanBacktrack[67]);
			int LA67_0 = input.LA(1);

			if ((LA67_0==NOT))
			{
				alt67 = 1;
			}
			else if (((LA67_0>=CASE && LA67_0<=CAST)||LA67_0==CONVERT||LA67_0==EXISTS||LA67_0==NUMBER||LA67_0==SIMPLE_FILE||(LA67_0>=STRING && LA67_0<=SYSTEMVAR)||LA67_0==TOKEN||LA67_0==VARIABLE||LA67_0==143))
			{
				alt67 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 67, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(67); }
			switch (alt67)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:287:4: op_5 WS expression_5
				{
				DebugLocation(287, 4);
				PushFollow(Follow._op_5_in_expression_51696);
				op_5197=op_5();
				PopFollow();

				stream_op_5.Add(op_5197.Tree);
				DebugLocation(287, 9);
				WS198=(IToken)Match(input,WS,Follow._WS_in_expression_51698);  
				stream_WS.Add(WS198);

				DebugLocation(287, 12);
				PushFollow(Follow._expression_5_in_expression_51700);
				expression_5199=expression_5();
				PopFollow();

				stream_expression_5.Add(expression_5199.Tree);


				{
				// AST REWRITE
				// elements: expression_5, op_5
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 287:25: -> ^( T_OP_UNARY op_5 expression_5 )
				{
					DebugLocation(287, 28);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:287:28: ^( T_OP_UNARY op_5 expression_5 )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(287, 30);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_UNARY, "T_OP_UNARY"), root_1);

					DebugLocation(287, 41);
					adaptor.AddChild(root_1, stream_op_5.NextTree());
					DebugLocation(287, 46);
					adaptor.AddChild(root_1, stream_expression_5.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:288:4: expression_4
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(288, 4);
				PushFollow(Follow._expression_4_in_expression_51715);
				expression_4200=expression_4();
				PopFollow();

				adaptor.AddChild(root_0, expression_4200.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_5", 36);
			LeaveRule("expression_5", 36);
			LeaveRule_expression_5();
	    }
	 	DebugLocation(289, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_5"); }
		return retval;

	}
	// $ANTLR end "expression_5"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_5() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_5() {}

	// $ANTLR start "op_5"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:291:1: op_5 : NOT -> T_NOT ;
	[GrammarRule("op_5")]
	private AstParserRuleReturnScope<object, IToken> op_5()
	{
		EnterRule_op_5();
		EnterRule("op_5", 37);
		TraceIn("op_5", 37);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken NOT201 = default(IToken);

	    object NOT201_tree = default(object);
	    RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");

		try { DebugEnterRule(GrammarFileName, "op_5");
		DebugLocation(291, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:291:7: ( NOT -> T_NOT )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:291:9: NOT
			{
			DebugLocation(291, 9);
			NOT201=(IToken)Match(input,NOT,Follow._NOT_in_op_51726);  
			stream_NOT.Add(NOT201);



			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 291:13: -> T_NOT
			{
				DebugLocation(291, 16);
				adaptor.AddChild(root_0, (object)adaptor.Create(T_NOT, "T_NOT"));

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_5", 37);
			LeaveRule("op_5", 37);
			LeaveRule_op_5();
	    }
	 	DebugLocation(292, 1);
		} finally { DebugExitRule(GrammarFileName, "op_5"); }
		return retval;

	}
	// $ANTLR end "op_5"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_4() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_4() {}

	// $ANTLR start "expression_4"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:294:1: expression_4 : (a= expression_3 -> $a) ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )* ;
	[GrammarRule("expression_4")]
	private AstParserRuleReturnScope<object, IToken> expression_4()
	{
		EnterRule_expression_4();
		EnterRule("expression_4", 38);
		TraceIn("expression_4", 38);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS202 = default(IToken);
	    IToken WS204 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_4203 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS202_tree = default(object);
	    object WS204_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression_3=new RewriteRuleSubtreeStream(adaptor,"rule expression_3");
	    RewriteRuleSubtreeStream stream_op_4=new RewriteRuleSubtreeStream(adaptor,"rule op_4");
		try { DebugEnterRule(GrammarFileName, "expression_4");
		DebugLocation(294, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:295:2: ( (a= expression_3 -> $a) ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:295:4: (a= expression_3 -> $a) ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )*
			{
			DebugLocation(295, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:295:4: (a= expression_3 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:295:5: a= expression_3
			{
			DebugLocation(295, 6);
			PushFollow(Follow._expression_3_in_expression_41745);
			a=expression_3();
			PopFollow();

			stream_expression_3.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 295:19: -> $a
			{
				DebugLocation(295, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(295, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:295:25: ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )*
			try { DebugEnterSubRule(70);
			while (true)
			{
				int alt70=2;
				try { DebugEnterDecision(70, decisionCanBacktrack[70]);
				int LA70_0 = input.LA(1);

				if ((LA70_0==WS))
				{
					switch (input.LA(2))
					{
					case 154:
						{
						int LA70_4 = input.LA(3);

						if ((LA70_4==WS))
						{
							int LA70_13 = input.LA(4);

							if (((LA70_13>=CASE && LA70_13<=CAST)||LA70_13==CONVERT||LA70_13==EXISTS||LA70_13==NUMBER||LA70_13==SIMPLE_FILE||(LA70_13>=STRING && LA70_13<=SYSTEMVAR)||LA70_13==TOKEN||LA70_13==VARIABLE||LA70_13==143))
							{
								alt70 = 1;
							}


						}
						else if (((LA70_4>=CASE && LA70_4<=CAST)||LA70_4==CONVERT||LA70_4==EXISTS||LA70_4==NUMBER||LA70_4==SIMPLE_FILE||(LA70_4>=STRING && LA70_4<=SYSTEMVAR)||LA70_4==TOKEN||LA70_4==VARIABLE||LA70_4==143))
						{
							alt70 = 1;
						}


						}
						break;
					case 156:
						{
						int LA70_5 = input.LA(3);

						if ((LA70_5==WS))
						{
							int LA70_13 = input.LA(4);

							if (((LA70_13>=CASE && LA70_13<=CAST)||LA70_13==CONVERT||LA70_13==EXISTS||LA70_13==NUMBER||LA70_13==SIMPLE_FILE||(LA70_13>=STRING && LA70_13<=SYSTEMVAR)||LA70_13==TOKEN||LA70_13==VARIABLE||LA70_13==143))
							{
								alt70 = 1;
							}


						}
						else if (((LA70_5>=CASE && LA70_5<=CAST)||LA70_5==CONVERT||LA70_5==EXISTS||LA70_5==NUMBER||LA70_5==SIMPLE_FILE||(LA70_5>=STRING && LA70_5<=SYSTEMVAR)||LA70_5==TOKEN||LA70_5==VARIABLE||LA70_5==143))
						{
							alt70 = 1;
						}


						}
						break;
					case 152:
						{
						int LA70_6 = input.LA(3);

						if ((LA70_6==WS))
						{
							int LA70_13 = input.LA(4);

							if (((LA70_13>=CASE && LA70_13<=CAST)||LA70_13==CONVERT||LA70_13==EXISTS||LA70_13==NUMBER||LA70_13==SIMPLE_FILE||(LA70_13>=STRING && LA70_13<=SYSTEMVAR)||LA70_13==TOKEN||LA70_13==VARIABLE||LA70_13==143))
							{
								alt70 = 1;
							}


						}
						else if (((LA70_6>=CASE && LA70_6<=CAST)||LA70_6==CONVERT||LA70_6==EXISTS||LA70_6==NUMBER||LA70_6==SIMPLE_FILE||(LA70_6>=STRING && LA70_6<=SYSTEMVAR)||LA70_6==TOKEN||LA70_6==VARIABLE||LA70_6==143))
						{
							alt70 = 1;
						}


						}
						break;
					case 153:
						{
						int LA70_7 = input.LA(3);

						if ((LA70_7==WS))
						{
							int LA70_13 = input.LA(4);

							if (((LA70_13>=CASE && LA70_13<=CAST)||LA70_13==CONVERT||LA70_13==EXISTS||LA70_13==NUMBER||LA70_13==SIMPLE_FILE||(LA70_13>=STRING && LA70_13<=SYSTEMVAR)||LA70_13==TOKEN||LA70_13==VARIABLE||LA70_13==143))
							{
								alt70 = 1;
							}


						}
						else if (((LA70_7>=CASE && LA70_7<=CAST)||LA70_7==CONVERT||LA70_7==EXISTS||LA70_7==NUMBER||LA70_7==SIMPLE_FILE||(LA70_7>=STRING && LA70_7<=SYSTEMVAR)||LA70_7==TOKEN||LA70_7==VARIABLE||LA70_7==143))
						{
							alt70 = 1;
						}


						}
						break;
					case 139:
						{
						int LA70_8 = input.LA(3);

						if ((LA70_8==WS))
						{
							int LA70_13 = input.LA(4);

							if (((LA70_13>=CASE && LA70_13<=CAST)||LA70_13==CONVERT||LA70_13==EXISTS||LA70_13==NUMBER||LA70_13==SIMPLE_FILE||(LA70_13>=STRING && LA70_13<=SYSTEMVAR)||LA70_13==TOKEN||LA70_13==VARIABLE||LA70_13==143))
							{
								alt70 = 1;
							}


						}
						else if (((LA70_8>=CASE && LA70_8<=CAST)||LA70_8==CONVERT||LA70_8==EXISTS||LA70_8==NUMBER||LA70_8==SIMPLE_FILE||(LA70_8>=STRING && LA70_8<=SYSTEMVAR)||LA70_8==TOKEN||LA70_8==VARIABLE||LA70_8==143))
						{
							alt70 = 1;
						}


						}
						break;
					case 140:
						{
						int LA70_9 = input.LA(3);

						if ((LA70_9==WS))
						{
							int LA70_13 = input.LA(4);

							if (((LA70_13>=CASE && LA70_13<=CAST)||LA70_13==CONVERT||LA70_13==EXISTS||LA70_13==NUMBER||LA70_13==SIMPLE_FILE||(LA70_13>=STRING && LA70_13<=SYSTEMVAR)||LA70_13==TOKEN||LA70_13==VARIABLE||LA70_13==143))
							{
								alt70 = 1;
							}


						}
						else if (((LA70_9>=CASE && LA70_9<=CAST)||LA70_9==CONVERT||LA70_9==EXISTS||LA70_9==NUMBER||LA70_9==SIMPLE_FILE||(LA70_9>=STRING && LA70_9<=SYSTEMVAR)||LA70_9==TOKEN||LA70_9==VARIABLE||LA70_9==143))
						{
							alt70 = 1;
						}


						}
						break;
					case 138:
						{
						int LA70_10 = input.LA(3);

						if ((LA70_10==WS))
						{
							int LA70_13 = input.LA(4);

							if (((LA70_13>=CASE && LA70_13<=CAST)||LA70_13==CONVERT||LA70_13==EXISTS||LA70_13==NUMBER||LA70_13==SIMPLE_FILE||(LA70_13>=STRING && LA70_13<=SYSTEMVAR)||LA70_13==TOKEN||LA70_13==VARIABLE||LA70_13==143))
							{
								alt70 = 1;
							}


						}
						else if (((LA70_10>=CASE && LA70_10<=CAST)||LA70_10==CONVERT||LA70_10==EXISTS||LA70_10==NUMBER||LA70_10==SIMPLE_FILE||(LA70_10>=STRING && LA70_10<=SYSTEMVAR)||LA70_10==TOKEN||LA70_10==VARIABLE||LA70_10==143))
						{
							alt70 = 1;
						}


						}
						break;
					case 155:
						{
						int LA70_11 = input.LA(3);

						if ((LA70_11==WS))
						{
							int LA70_13 = input.LA(4);

							if (((LA70_13>=CASE && LA70_13<=CAST)||LA70_13==CONVERT||LA70_13==EXISTS||LA70_13==NUMBER||LA70_13==SIMPLE_FILE||(LA70_13>=STRING && LA70_13<=SYSTEMVAR)||LA70_13==TOKEN||LA70_13==VARIABLE||LA70_13==143))
							{
								alt70 = 1;
							}


						}
						else if (((LA70_11>=CASE && LA70_11<=CAST)||LA70_11==CONVERT||LA70_11==EXISTS||LA70_11==NUMBER||LA70_11==SIMPLE_FILE||(LA70_11>=STRING && LA70_11<=SYSTEMVAR)||LA70_11==TOKEN||LA70_11==VARIABLE||LA70_11==143))
						{
							alt70 = 1;
						}


						}
						break;
					case 151:
						{
						int LA70_12 = input.LA(3);

						if ((LA70_12==WS))
						{
							int LA70_13 = input.LA(4);

							if (((LA70_13>=CASE && LA70_13<=CAST)||LA70_13==CONVERT||LA70_13==EXISTS||LA70_13==NUMBER||LA70_13==SIMPLE_FILE||(LA70_13>=STRING && LA70_13<=SYSTEMVAR)||LA70_13==TOKEN||LA70_13==VARIABLE||LA70_13==143))
							{
								alt70 = 1;
							}


						}
						else if (((LA70_12>=CASE && LA70_12<=CAST)||LA70_12==CONVERT||LA70_12==EXISTS||LA70_12==NUMBER||LA70_12==SIMPLE_FILE||(LA70_12>=STRING && LA70_12<=SYSTEMVAR)||LA70_12==TOKEN||LA70_12==VARIABLE||LA70_12==143))
						{
							alt70 = 1;
						}


						}
						break;
					}

				}
				else if (((LA70_0>=138 && LA70_0<=140)||(LA70_0>=151 && LA70_0<=156)))
				{
					alt70 = 1;
				}


				} finally { DebugExitDecision(70); }
				switch ( alt70 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:295:26: ( WS )? op_4 ( WS )? b= expression_3
					{
					DebugLocation(295, 26);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:295:26: ( WS )?
					int alt68=2;
					try { DebugEnterSubRule(68);
					try { DebugEnterDecision(68, decisionCanBacktrack[68]);
					int LA68_0 = input.LA(1);

					if ((LA68_0==WS))
					{
						alt68 = 1;
					}
					} finally { DebugExitDecision(68); }
					switch (alt68)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:295:26: WS
						{
						DebugLocation(295, 26);
						WS202=(IToken)Match(input,WS,Follow._WS_in_expression_41752);  
						stream_WS.Add(WS202);


						}
						break;

					}
					} finally { DebugExitSubRule(68); }

					DebugLocation(295, 30);
					PushFollow(Follow._op_4_in_expression_41755);
					op_4203=op_4();
					PopFollow();

					stream_op_4.Add(op_4203.Tree);
					DebugLocation(295, 35);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:295:35: ( WS )?
					int alt69=2;
					try { DebugEnterSubRule(69);
					try { DebugEnterDecision(69, decisionCanBacktrack[69]);
					int LA69_0 = input.LA(1);

					if ((LA69_0==WS))
					{
						alt69 = 1;
					}
					} finally { DebugExitDecision(69); }
					switch (alt69)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:295:35: WS
						{
						DebugLocation(295, 35);
						WS204=(IToken)Match(input,WS,Follow._WS_in_expression_41757);  
						stream_WS.Add(WS204);


						}
						break;

					}
					} finally { DebugExitSubRule(69); }

					DebugLocation(295, 40);
					PushFollow(Follow._expression_3_in_expression_41762);
					b=expression_3();
					PopFollow();

					stream_expression_3.Add(b.Tree);


					{
					// AST REWRITE
					// elements: op_4, expression_4, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 295:54: -> ^( T_OP_BINARY op_4 $expression_4 $b)
					{
						DebugLocation(295, 57);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:295:57: ^( T_OP_BINARY op_4 $expression_4 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(295, 59);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(295, 71);
						adaptor.AddChild(root_1, stream_op_4.NextTree());
						DebugLocation(295, 77);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(295, 91);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop70;
				}
			}

			loop70:
				;

			} finally { DebugExitSubRule(70); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_4", 38);
			LeaveRule("expression_4", 38);
			LeaveRule_expression_4();
	    }
	 	DebugLocation(296, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_4"); }
		return retval;

	}
	// $ANTLR end "expression_4"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_4() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_4() {}

	// $ANTLR start "op_4"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:298:1: op_4 : ( '=' -> T_EQUAL | '>=' -> T_NOTLESS | '<=' -> T_NOTGREATER | '<>' -> T_NOTEQUAL | '!=' -> T_NOTEQUAL | '!>' -> T_NOTGREATER | '!<' -> T_NOTLESS | '>' -> T_GREATER | '<' -> T_LESS );
	[GrammarRule("op_4")]
	private AstParserRuleReturnScope<object, IToken> op_4()
	{
		EnterRule_op_4();
		EnterRule("op_4", 39);
		TraceIn("op_4", 39);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal205 = default(IToken);
	    IToken string_literal206 = default(IToken);
	    IToken string_literal207 = default(IToken);
	    IToken string_literal208 = default(IToken);
	    IToken string_literal209 = default(IToken);
	    IToken string_literal210 = default(IToken);
	    IToken string_literal211 = default(IToken);
	    IToken char_literal212 = default(IToken);
	    IToken char_literal213 = default(IToken);

	    object char_literal205_tree = default(object);
	    object string_literal206_tree = default(object);
	    object string_literal207_tree = default(object);
	    object string_literal208_tree = default(object);
	    object string_literal209_tree = default(object);
	    object string_literal210_tree = default(object);
	    object string_literal211_tree = default(object);
	    object char_literal212_tree = default(object);
	    object char_literal213_tree = default(object);
	    RewriteRuleITokenStream stream_152=new RewriteRuleITokenStream(adaptor,"token 152");
	    RewriteRuleITokenStream stream_153=new RewriteRuleITokenStream(adaptor,"token 153");
	    RewriteRuleITokenStream stream_151=new RewriteRuleITokenStream(adaptor,"token 151");
	    RewriteRuleITokenStream stream_138=new RewriteRuleITokenStream(adaptor,"token 138");
	    RewriteRuleITokenStream stream_139=new RewriteRuleITokenStream(adaptor,"token 139");
	    RewriteRuleITokenStream stream_140=new RewriteRuleITokenStream(adaptor,"token 140");
	    RewriteRuleITokenStream stream_156=new RewriteRuleITokenStream(adaptor,"token 156");
	    RewriteRuleITokenStream stream_155=new RewriteRuleITokenStream(adaptor,"token 155");
	    RewriteRuleITokenStream stream_154=new RewriteRuleITokenStream(adaptor,"token 154");

		try { DebugEnterRule(GrammarFileName, "op_4");
		DebugLocation(298, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:298:6: ( '=' -> T_EQUAL | '>=' -> T_NOTLESS | '<=' -> T_NOTGREATER | '<>' -> T_NOTEQUAL | '!=' -> T_NOTEQUAL | '!>' -> T_NOTGREATER | '!<' -> T_NOTLESS | '>' -> T_GREATER | '<' -> T_LESS )
			int alt71=9;
			try { DebugEnterDecision(71, decisionCanBacktrack[71]);
			switch (input.LA(1))
			{
			case 154:
				{
				alt71 = 1;
				}
				break;
			case 156:
				{
				alt71 = 2;
				}
				break;
			case 152:
				{
				alt71 = 3;
				}
				break;
			case 153:
				{
				alt71 = 4;
				}
				break;
			case 139:
				{
				alt71 = 5;
				}
				break;
			case 140:
				{
				alt71 = 6;
				}
				break;
			case 138:
				{
				alt71 = 7;
				}
				break;
			case 155:
				{
				alt71 = 8;
				}
				break;
			case 151:
				{
				alt71 = 9;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 71, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(71); }
			switch (alt71)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:298:8: '='
				{
				DebugLocation(298, 8);
				char_literal205=(IToken)Match(input,154,Follow._154_in_op_41788);  
				stream_154.Add(char_literal205);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 298:12: -> T_EQUAL
				{
					DebugLocation(298, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_EQUAL, "T_EQUAL"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:299:4: '>='
				{
				DebugLocation(299, 4);
				string_literal206=(IToken)Match(input,156,Follow._156_in_op_41797);  
				stream_156.Add(string_literal206);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 299:9: -> T_NOTLESS
				{
					DebugLocation(299, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTLESS, "T_NOTLESS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:300:4: '<='
				{
				DebugLocation(300, 4);
				string_literal207=(IToken)Match(input,152,Follow._152_in_op_41807);  
				stream_152.Add(string_literal207);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 300:9: -> T_NOTGREATER
				{
					DebugLocation(300, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTGREATER, "T_NOTGREATER"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:301:4: '<>'
				{
				DebugLocation(301, 4);
				string_literal208=(IToken)Match(input,153,Follow._153_in_op_41817);  
				stream_153.Add(string_literal208);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 301:9: -> T_NOTEQUAL
				{
					DebugLocation(301, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTEQUAL, "T_NOTEQUAL"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:302:4: '!='
				{
				DebugLocation(302, 4);
				string_literal209=(IToken)Match(input,139,Follow._139_in_op_41826);  
				stream_139.Add(string_literal209);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 302:9: -> T_NOTEQUAL
				{
					DebugLocation(302, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTEQUAL, "T_NOTEQUAL"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:303:4: '!>'
				{
				DebugLocation(303, 4);
				string_literal210=(IToken)Match(input,140,Follow._140_in_op_41835);  
				stream_140.Add(string_literal210);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 303:9: -> T_NOTGREATER
				{
					DebugLocation(303, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTGREATER, "T_NOTGREATER"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:304:4: '!<'
				{
				DebugLocation(304, 4);
				string_literal211=(IToken)Match(input,138,Follow._138_in_op_41844);  
				stream_138.Add(string_literal211);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 304:9: -> T_NOTLESS
				{
					DebugLocation(304, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTLESS, "T_NOTLESS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:305:4: '>'
				{
				DebugLocation(305, 4);
				char_literal212=(IToken)Match(input,155,Follow._155_in_op_41853);  
				stream_155.Add(char_literal212);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 305:8: -> T_GREATER
				{
					DebugLocation(305, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_GREATER, "T_GREATER"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:306:4: '<'
				{
				DebugLocation(306, 4);
				char_literal213=(IToken)Match(input,151,Follow._151_in_op_41863);  
				stream_151.Add(char_literal213);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 306:8: -> T_LESS
				{
					DebugLocation(306, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_LESS, "T_LESS"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_4", 39);
			LeaveRule("op_4", 39);
			LeaveRule_op_4();
	    }
	 	DebugLocation(307, 1);
		} finally { DebugExitRule(GrammarFileName, "op_4"); }
		return retval;

	}
	// $ANTLR end "op_4"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_3() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_3() {}

	// $ANTLR start "expression_3"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:309:1: expression_3 : (a= expression_2 -> $a) ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )* ;
	[GrammarRule("expression_3")]
	private AstParserRuleReturnScope<object, IToken> expression_3()
	{
		EnterRule_expression_3();
		EnterRule("expression_3", 40);
		TraceIn("expression_3", 40);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS214 = default(IToken);
	    IToken WS216 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_3215 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS214_tree = default(object);
	    object WS216_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_op_3=new RewriteRuleSubtreeStream(adaptor,"rule op_3");
	    RewriteRuleSubtreeStream stream_expression_2=new RewriteRuleSubtreeStream(adaptor,"rule expression_2");
		try { DebugEnterRule(GrammarFileName, "expression_3");
		DebugLocation(309, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:310:2: ( (a= expression_2 -> $a) ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:310:4: (a= expression_2 -> $a) ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )*
			{
			DebugLocation(310, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:310:4: (a= expression_2 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:310:5: a= expression_2
			{
			DebugLocation(310, 6);
			PushFollow(Follow._expression_2_in_expression_31882);
			a=expression_2();
			PopFollow();

			stream_expression_2.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 310:19: -> $a
			{
				DebugLocation(310, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(310, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:310:25: ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )*
			try { DebugEnterSubRule(74);
			while (true)
			{
				int alt74=2;
				try { DebugEnterDecision(74, decisionCanBacktrack[74]);
				int LA74_0 = input.LA(1);

				if ((LA74_0==WS))
				{
					int LA74_1 = input.LA(2);

					if ((LA74_1==142||LA74_1==146||LA74_1==148||(LA74_1>=159 && LA74_1<=160)))
					{
						alt74 = 1;
					}


				}
				else if ((LA74_0==142||LA74_0==146||LA74_0==148||(LA74_0>=159 && LA74_0<=160)))
				{
					alt74 = 1;
				}


				} finally { DebugExitDecision(74); }
				switch ( alt74 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:310:26: ( WS )? op_3 ( WS )? b= expression_2
					{
					DebugLocation(310, 26);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:310:26: ( WS )?
					int alt72=2;
					try { DebugEnterSubRule(72);
					try { DebugEnterDecision(72, decisionCanBacktrack[72]);
					int LA72_0 = input.LA(1);

					if ((LA72_0==WS))
					{
						alt72 = 1;
					}
					} finally { DebugExitDecision(72); }
					switch (alt72)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:310:26: WS
						{
						DebugLocation(310, 26);
						WS214=(IToken)Match(input,WS,Follow._WS_in_expression_31889);  
						stream_WS.Add(WS214);


						}
						break;

					}
					} finally { DebugExitSubRule(72); }

					DebugLocation(310, 30);
					PushFollow(Follow._op_3_in_expression_31892);
					op_3215=op_3();
					PopFollow();

					stream_op_3.Add(op_3215.Tree);
					DebugLocation(310, 35);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:310:35: ( WS )?
					int alt73=2;
					try { DebugEnterSubRule(73);
					try { DebugEnterDecision(73, decisionCanBacktrack[73]);
					int LA73_0 = input.LA(1);

					if ((LA73_0==WS))
					{
						alt73 = 1;
					}
					} finally { DebugExitDecision(73); }
					switch (alt73)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:310:35: WS
						{
						DebugLocation(310, 35);
						WS216=(IToken)Match(input,WS,Follow._WS_in_expression_31894);  
						stream_WS.Add(WS216);


						}
						break;

					}
					} finally { DebugExitSubRule(73); }

					DebugLocation(310, 40);
					PushFollow(Follow._expression_2_in_expression_31899);
					b=expression_2();
					PopFollow();

					stream_expression_2.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, op_3, expression_3
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 310:54: -> ^( T_OP_BINARY op_3 $expression_3 $b)
					{
						DebugLocation(310, 57);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:310:57: ^( T_OP_BINARY op_3 $expression_3 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(310, 59);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(310, 71);
						adaptor.AddChild(root_1, stream_op_3.NextTree());
						DebugLocation(310, 77);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(310, 91);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop74;
				}
			}

			loop74:
				;

			} finally { DebugExitSubRule(74); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_3", 40);
			LeaveRule("expression_3", 40);
			LeaveRule_expression_3();
	    }
	 	DebugLocation(311, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_3"); }
		return retval;

	}
	// $ANTLR end "expression_3"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_3() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_3() {}

	// $ANTLR start "op_3"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:313:1: op_3 : ( '+' -> T_PLUS | '-' -> T_MINUS | '&' -> T_BITWISE_AND | '|' -> T_BITWISE_OR | '^' -> T_BITWISE_XOR );
	[GrammarRule("op_3")]
	private AstParserRuleReturnScope<object, IToken> op_3()
	{
		EnterRule_op_3();
		EnterRule("op_3", 41);
		TraceIn("op_3", 41);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal217 = default(IToken);
	    IToken char_literal218 = default(IToken);
	    IToken char_literal219 = default(IToken);
	    IToken char_literal220 = default(IToken);
	    IToken char_literal221 = default(IToken);

	    object char_literal217_tree = default(object);
	    object char_literal218_tree = default(object);
	    object char_literal219_tree = default(object);
	    object char_literal220_tree = default(object);
	    object char_literal221_tree = default(object);
	    RewriteRuleITokenStream stream_146=new RewriteRuleITokenStream(adaptor,"token 146");
	    RewriteRuleITokenStream stream_148=new RewriteRuleITokenStream(adaptor,"token 148");
	    RewriteRuleITokenStream stream_160=new RewriteRuleITokenStream(adaptor,"token 160");
	    RewriteRuleITokenStream stream_159=new RewriteRuleITokenStream(adaptor,"token 159");
	    RewriteRuleITokenStream stream_142=new RewriteRuleITokenStream(adaptor,"token 142");

		try { DebugEnterRule(GrammarFileName, "op_3");
		DebugLocation(313, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:313:6: ( '+' -> T_PLUS | '-' -> T_MINUS | '&' -> T_BITWISE_AND | '|' -> T_BITWISE_OR | '^' -> T_BITWISE_XOR )
			int alt75=5;
			try { DebugEnterDecision(75, decisionCanBacktrack[75]);
			switch (input.LA(1))
			{
			case 146:
				{
				alt75 = 1;
				}
				break;
			case 148:
				{
				alt75 = 2;
				}
				break;
			case 142:
				{
				alt75 = 3;
				}
				break;
			case 160:
				{
				alt75 = 4;
				}
				break;
			case 159:
				{
				alt75 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 75, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(75); }
			switch (alt75)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:313:8: '+'
				{
				DebugLocation(313, 8);
				char_literal217=(IToken)Match(input,146,Follow._146_in_op_31925);  
				stream_146.Add(char_literal217);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 313:12: -> T_PLUS
				{
					DebugLocation(313, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_PLUS, "T_PLUS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:314:4: '-'
				{
				DebugLocation(314, 4);
				char_literal218=(IToken)Match(input,148,Follow._148_in_op_31934);  
				stream_148.Add(char_literal218);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 314:8: -> T_MINUS
				{
					DebugLocation(314, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MINUS, "T_MINUS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:315:4: '&'
				{
				DebugLocation(315, 4);
				char_literal219=(IToken)Match(input,142,Follow._142_in_op_31943);  
				stream_142.Add(char_literal219);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 315:8: -> T_BITWISE_AND
				{
					DebugLocation(315, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_AND, "T_BITWISE_AND"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:316:4: '|'
				{
				DebugLocation(316, 4);
				char_literal220=(IToken)Match(input,160,Follow._160_in_op_31952);  
				stream_160.Add(char_literal220);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 316:8: -> T_BITWISE_OR
				{
					DebugLocation(316, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_OR, "T_BITWISE_OR"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:317:4: '^'
				{
				DebugLocation(317, 4);
				char_literal221=(IToken)Match(input,159,Follow._159_in_op_31961);  
				stream_159.Add(char_literal221);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 317:8: -> T_BITWISE_XOR
				{
					DebugLocation(317, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_XOR, "T_BITWISE_XOR"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_3", 41);
			LeaveRule("op_3", 41);
			LeaveRule_op_3();
	    }
	 	DebugLocation(318, 1);
		} finally { DebugExitRule(GrammarFileName, "op_3"); }
		return retval;

	}
	// $ANTLR end "op_3"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_2() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_2() {}

	// $ANTLR start "expression_2"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:326:1: expression_2 : (a= expression_1 -> $a) ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )* ;
	[GrammarRule("expression_2")]
	private AstParserRuleReturnScope<object, IToken> expression_2()
	{
		EnterRule_expression_2();
		EnterRule("expression_2", 42);
		TraceIn("expression_2", 42);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS222 = default(IToken);
	    IToken WS224 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_2223 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS222_tree = default(object);
	    object WS224_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_op_2=new RewriteRuleSubtreeStream(adaptor,"rule op_2");
	    RewriteRuleSubtreeStream stream_expression_1=new RewriteRuleSubtreeStream(adaptor,"rule expression_1");
		try { DebugEnterRule(GrammarFileName, "expression_2");
		DebugLocation(326, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:327:2: ( (a= expression_1 -> $a) ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:327:4: (a= expression_1 -> $a) ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )*
			{
			DebugLocation(327, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:327:4: (a= expression_1 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:327:5: a= expression_1
			{
			DebugLocation(327, 6);
			PushFollow(Follow._expression_1_in_expression_21983);
			a=expression_1();
			PopFollow();

			stream_expression_1.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 327:19: -> $a
			{
				DebugLocation(327, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(327, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:327:25: ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )*
			try { DebugEnterSubRule(78);
			while (true)
			{
				int alt78=2;
				try { DebugEnterDecision(78, decisionCanBacktrack[78]);
				int LA78_0 = input.LA(1);

				if ((LA78_0==WS))
				{
					int LA78_1 = input.LA(2);

					if ((LA78_1==145))
					{
						int LA78_4 = input.LA(3);

						if ((LA78_4==WS))
						{
							int LA78_5 = input.LA(4);

							if (((LA78_5>=CASE && LA78_5<=CAST)||LA78_5==CONVERT||LA78_5==EXISTS||LA78_5==NUMBER||LA78_5==SIMPLE_FILE||(LA78_5>=STRING && LA78_5<=SYSTEMVAR)||LA78_5==TOKEN||LA78_5==VARIABLE||LA78_5==143))
							{
								alt78 = 1;
							}


						}
						else if (((LA78_4>=CASE && LA78_4<=CAST)||LA78_4==CONVERT||LA78_4==EXISTS||LA78_4==NUMBER||LA78_4==SIMPLE_FILE||(LA78_4>=STRING && LA78_4<=SYSTEMVAR)||LA78_4==TOKEN||LA78_4==VARIABLE||LA78_4==143))
						{
							alt78 = 1;
						}


					}
					else if ((LA78_1==141||LA78_1==149))
					{
						alt78 = 1;
					}


				}
				else if ((LA78_0==141||LA78_0==145||LA78_0==149))
				{
					alt78 = 1;
				}


				} finally { DebugExitDecision(78); }
				switch ( alt78 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:327:26: ( WS )? op_2 ( WS )? b= expression_1
					{
					DebugLocation(327, 26);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:327:26: ( WS )?
					int alt76=2;
					try { DebugEnterSubRule(76);
					try { DebugEnterDecision(76, decisionCanBacktrack[76]);
					int LA76_0 = input.LA(1);

					if ((LA76_0==WS))
					{
						alt76 = 1;
					}
					} finally { DebugExitDecision(76); }
					switch (alt76)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:327:26: WS
						{
						DebugLocation(327, 26);
						WS222=(IToken)Match(input,WS,Follow._WS_in_expression_21990);  
						stream_WS.Add(WS222);


						}
						break;

					}
					} finally { DebugExitSubRule(76); }

					DebugLocation(327, 30);
					PushFollow(Follow._op_2_in_expression_21993);
					op_2223=op_2();
					PopFollow();

					stream_op_2.Add(op_2223.Tree);
					DebugLocation(327, 35);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:327:35: ( WS )?
					int alt77=2;
					try { DebugEnterSubRule(77);
					try { DebugEnterDecision(77, decisionCanBacktrack[77]);
					int LA77_0 = input.LA(1);

					if ((LA77_0==WS))
					{
						alt77 = 1;
					}
					} finally { DebugExitDecision(77); }
					switch (alt77)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:327:35: WS
						{
						DebugLocation(327, 35);
						WS224=(IToken)Match(input,WS,Follow._WS_in_expression_21995);  
						stream_WS.Add(WS224);


						}
						break;

					}
					} finally { DebugExitSubRule(77); }

					DebugLocation(327, 40);
					PushFollow(Follow._expression_1_in_expression_22000);
					b=expression_1();
					PopFollow();

					stream_expression_1.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, expression_2, op_2
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 327:54: -> ^( T_OP_BINARY op_2 $expression_2 $b)
					{
						DebugLocation(327, 57);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:327:57: ^( T_OP_BINARY op_2 $expression_2 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(327, 59);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(327, 71);
						adaptor.AddChild(root_1, stream_op_2.NextTree());
						DebugLocation(327, 77);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(327, 91);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop78;
				}
			}

			loop78:
				;

			} finally { DebugExitSubRule(78); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_2", 42);
			LeaveRule("expression_2", 42);
			LeaveRule_expression_2();
	    }
	 	DebugLocation(328, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_2"); }
		return retval;

	}
	// $ANTLR end "expression_2"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_2() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_2() {}

	// $ANTLR start "op_2"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:330:1: op_2 : ( '*' -> T_PRODUCT | '/' -> T_DIVIDE | '%' -> T_MODULO );
	[GrammarRule("op_2")]
	private AstParserRuleReturnScope<object, IToken> op_2()
	{
		EnterRule_op_2();
		EnterRule("op_2", 43);
		TraceIn("op_2", 43);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal225 = default(IToken);
	    IToken char_literal226 = default(IToken);
	    IToken char_literal227 = default(IToken);

	    object char_literal225_tree = default(object);
	    object char_literal226_tree = default(object);
	    object char_literal227_tree = default(object);
	    RewriteRuleITokenStream stream_145=new RewriteRuleITokenStream(adaptor,"token 145");
	    RewriteRuleITokenStream stream_149=new RewriteRuleITokenStream(adaptor,"token 149");
	    RewriteRuleITokenStream stream_141=new RewriteRuleITokenStream(adaptor,"token 141");

		try { DebugEnterRule(GrammarFileName, "op_2");
		DebugLocation(330, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:330:6: ( '*' -> T_PRODUCT | '/' -> T_DIVIDE | '%' -> T_MODULO )
			int alt79=3;
			try { DebugEnterDecision(79, decisionCanBacktrack[79]);
			switch (input.LA(1))
			{
			case 145:
				{
				alt79 = 1;
				}
				break;
			case 149:
				{
				alt79 = 2;
				}
				break;
			case 141:
				{
				alt79 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 79, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(79); }
			switch (alt79)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:330:8: '*'
				{
				DebugLocation(330, 8);
				char_literal225=(IToken)Match(input,145,Follow._145_in_op_22026);  
				stream_145.Add(char_literal225);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 330:12: -> T_PRODUCT
				{
					DebugLocation(330, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_PRODUCT, "T_PRODUCT"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:331:4: '/'
				{
				DebugLocation(331, 4);
				char_literal226=(IToken)Match(input,149,Follow._149_in_op_22035);  
				stream_149.Add(char_literal226);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 331:8: -> T_DIVIDE
				{
					DebugLocation(331, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_DIVIDE, "T_DIVIDE"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:332:4: '%'
				{
				DebugLocation(332, 4);
				char_literal227=(IToken)Match(input,141,Follow._141_in_op_22044);  
				stream_141.Add(char_literal227);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 332:8: -> T_MODULO
				{
					DebugLocation(332, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MODULO, "T_MODULO"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_2", 43);
			LeaveRule("op_2", 43);
			LeaveRule_op_2();
	    }
	 	DebugLocation(333, 1);
		} finally { DebugExitRule(GrammarFileName, "op_2"); }
		return retval;

	}
	// $ANTLR end "op_2"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_1() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_1() {}

	// $ANTLR start "expression_1"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:335:1: expression_1 : ( '(' ( WS )? op_1 ( WS )? expression_1 ( WS )? ')' -> ^( T_OP_UNARY op_1 expression_1 ) | expression_atom );
	[GrammarRule("expression_1")]
	private AstParserRuleReturnScope<object, IToken> expression_1()
	{
		EnterRule_expression_1();
		EnterRule("expression_1", 44);
		TraceIn("expression_1", 44);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal228 = default(IToken);
	    IToken WS229 = default(IToken);
	    IToken WS231 = default(IToken);
	    IToken WS233 = default(IToken);
	    IToken char_literal234 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> op_1230 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_1232 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_atom235 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal228_tree = default(object);
	    object WS229_tree = default(object);
	    object WS231_tree = default(object);
	    object WS233_tree = default(object);
	    object char_literal234_tree = default(object);
	    RewriteRuleITokenStream stream_143=new RewriteRuleITokenStream(adaptor,"token 143");
	    RewriteRuleITokenStream stream_144=new RewriteRuleITokenStream(adaptor,"token 144");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression_1=new RewriteRuleSubtreeStream(adaptor,"rule expression_1");
	    RewriteRuleSubtreeStream stream_op_1=new RewriteRuleSubtreeStream(adaptor,"rule op_1");
		try { DebugEnterRule(GrammarFileName, "expression_1");
		DebugLocation(335, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:337:2: ( '(' ( WS )? op_1 ( WS )? expression_1 ( WS )? ')' -> ^( T_OP_UNARY op_1 expression_1 ) | expression_atom )
			int alt83=2;
			try { DebugEnterDecision(83, decisionCanBacktrack[83]);
			int LA83_0 = input.LA(1);

			if ((LA83_0==143))
			{
				switch (input.LA(2))
				{
				case WS:
					{
					int LA83_3 = input.LA(3);

					if ((LA83_3==146||LA83_3==148||LA83_3==161))
					{
						alt83 = 1;
					}
					else if ((LA83_3==SELECT))
					{
						alt83 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 83, 3, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 146:
				case 148:
				case 161:
					{
					alt83 = 1;
					}
					break;
				case CASE:
				case CAST:
				case CONVERT:
				case EXISTS:
				case NOT:
				case NUMBER:
				case SELECT:
				case SIMPLE_FILE:
				case STRING:
				case SYSTEMVAR:
				case TOKEN:
				case VARIABLE:
				case 143:
					{
					alt83 = 2;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 83, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else if (((LA83_0>=CASE && LA83_0<=CAST)||LA83_0==CONVERT||LA83_0==EXISTS||LA83_0==NUMBER||LA83_0==SIMPLE_FILE||(LA83_0>=STRING && LA83_0<=SYSTEMVAR)||LA83_0==TOKEN||LA83_0==VARIABLE))
			{
				alt83 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 83, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(83); }
			switch (alt83)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:337:4: '(' ( WS )? op_1 ( WS )? expression_1 ( WS )? ')'
				{
				DebugLocation(337, 4);
				char_literal228=(IToken)Match(input,143,Follow._143_in_expression_12062);  
				stream_143.Add(char_literal228);

				DebugLocation(337, 8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:337:8: ( WS )?
				int alt80=2;
				try { DebugEnterSubRule(80);
				try { DebugEnterDecision(80, decisionCanBacktrack[80]);
				int LA80_0 = input.LA(1);

				if ((LA80_0==WS))
				{
					alt80 = 1;
				}
				} finally { DebugExitDecision(80); }
				switch (alt80)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:337:8: WS
					{
					DebugLocation(337, 8);
					WS229=(IToken)Match(input,WS,Follow._WS_in_expression_12064);  
					stream_WS.Add(WS229);


					}
					break;

				}
				} finally { DebugExitSubRule(80); }

				DebugLocation(337, 12);
				PushFollow(Follow._op_1_in_expression_12067);
				op_1230=op_1();
				PopFollow();

				stream_op_1.Add(op_1230.Tree);
				DebugLocation(337, 17);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:337:17: ( WS )?
				int alt81=2;
				try { DebugEnterSubRule(81);
				try { DebugEnterDecision(81, decisionCanBacktrack[81]);
				int LA81_0 = input.LA(1);

				if ((LA81_0==WS))
				{
					alt81 = 1;
				}
				} finally { DebugExitDecision(81); }
				switch (alt81)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:337:17: WS
					{
					DebugLocation(337, 17);
					WS231=(IToken)Match(input,WS,Follow._WS_in_expression_12069);  
					stream_WS.Add(WS231);


					}
					break;

				}
				} finally { DebugExitSubRule(81); }

				DebugLocation(337, 21);
				PushFollow(Follow._expression_1_in_expression_12072);
				expression_1232=expression_1();
				PopFollow();

				stream_expression_1.Add(expression_1232.Tree);
				DebugLocation(337, 34);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:337:34: ( WS )?
				int alt82=2;
				try { DebugEnterSubRule(82);
				try { DebugEnterDecision(82, decisionCanBacktrack[82]);
				int LA82_0 = input.LA(1);

				if ((LA82_0==WS))
				{
					alt82 = 1;
				}
				} finally { DebugExitDecision(82); }
				switch (alt82)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:337:34: WS
					{
					DebugLocation(337, 34);
					WS233=(IToken)Match(input,WS,Follow._WS_in_expression_12074);  
					stream_WS.Add(WS233);


					}
					break;

				}
				} finally { DebugExitSubRule(82); }

				DebugLocation(337, 38);
				char_literal234=(IToken)Match(input,144,Follow._144_in_expression_12077);  
				stream_144.Add(char_literal234);



				{
				// AST REWRITE
				// elements: expression_1, op_1
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 337:42: -> ^( T_OP_UNARY op_1 expression_1 )
				{
					DebugLocation(337, 45);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:337:45: ^( T_OP_UNARY op_1 expression_1 )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(337, 47);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_UNARY, "T_OP_UNARY"), root_1);

					DebugLocation(337, 58);
					adaptor.AddChild(root_1, stream_op_1.NextTree());
					DebugLocation(337, 63);
					adaptor.AddChild(root_1, stream_expression_1.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:339:4: expression_atom
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(339, 4);
				PushFollow(Follow._expression_atom_in_expression_12094);
				expression_atom235=expression_atom();
				PopFollow();

				adaptor.AddChild(root_0, expression_atom235.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_1", 44);
			LeaveRule("expression_1", 44);
			LeaveRule_expression_1();
	    }
	 	DebugLocation(340, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_1"); }
		return retval;

	}
	// $ANTLR end "expression_1"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_1() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_1() {}

	// $ANTLR start "op_1"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:342:1: op_1 : ( '~' -> T_BITWISE_NOT | '+' -> T_PLUS | '-' -> T_MINUS );
	[GrammarRule("op_1")]
	private AstParserRuleReturnScope<object, IToken> op_1()
	{
		EnterRule_op_1();
		EnterRule("op_1", 45);
		TraceIn("op_1", 45);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal236 = default(IToken);
	    IToken char_literal237 = default(IToken);
	    IToken char_literal238 = default(IToken);

	    object char_literal236_tree = default(object);
	    object char_literal237_tree = default(object);
	    object char_literal238_tree = default(object);
	    RewriteRuleITokenStream stream_161=new RewriteRuleITokenStream(adaptor,"token 161");
	    RewriteRuleITokenStream stream_146=new RewriteRuleITokenStream(adaptor,"token 146");
	    RewriteRuleITokenStream stream_148=new RewriteRuleITokenStream(adaptor,"token 148");

		try { DebugEnterRule(GrammarFileName, "op_1");
		DebugLocation(342, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:342:6: ( '~' -> T_BITWISE_NOT | '+' -> T_PLUS | '-' -> T_MINUS )
			int alt84=3;
			try { DebugEnterDecision(84, decisionCanBacktrack[84]);
			switch (input.LA(1))
			{
			case 161:
				{
				alt84 = 1;
				}
				break;
			case 146:
				{
				alt84 = 2;
				}
				break;
			case 148:
				{
				alt84 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 84, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(84); }
			switch (alt84)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:342:8: '~'
				{
				DebugLocation(342, 8);
				char_literal236=(IToken)Match(input,161,Follow._161_in_op_12104);  
				stream_161.Add(char_literal236);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 342:12: -> T_BITWISE_NOT
				{
					DebugLocation(342, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_NOT, "T_BITWISE_NOT"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:343:5: '+'
				{
				DebugLocation(343, 5);
				char_literal237=(IToken)Match(input,146,Follow._146_in_op_12114);  
				stream_146.Add(char_literal237);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 343:9: -> T_PLUS
				{
					DebugLocation(343, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_PLUS, "T_PLUS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:344:4: '-'
				{
				DebugLocation(344, 4);
				char_literal238=(IToken)Match(input,148,Follow._148_in_op_12123);  
				stream_148.Add(char_literal238);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 344:8: -> T_MINUS
				{
					DebugLocation(344, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MINUS, "T_MINUS"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_1", 45);
			LeaveRule("op_1", 45);
			LeaveRule_op_1();
	    }
	 	DebugLocation(345, 1);
		} finally { DebugExitRule(GrammarFileName, "op_1"); }
		return retval;

	}
	// $ANTLR end "op_1"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_atom() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_atom() {}

	// $ANTLR start "expression_atom"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:347:1: expression_atom : ( NUMBER -> ^( T_INTEGER NUMBER ) | STRING -> ^( T_STRING STRING ) | SYSTEMVAR -> ^( T_SYSTEMVAR SYSTEMVAR ) | VARIABLE -> ^( T_VARIABLE VARIABLE ) | subquery | '(' expression ')' -> expression | functioncall_or_column | conversion | case | EXISTS ( WS )? '(' ( WS )? select_command ( WS )? ')' -> ^( T_EXISTS select_command ) );
	[GrammarRule("expression_atom")]
	private AstParserRuleReturnScope<object, IToken> expression_atom()
	{
		EnterRule_expression_atom();
		EnterRule("expression_atom", 46);
		TraceIn("expression_atom", 46);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken NUMBER239 = default(IToken);
	    IToken STRING240 = default(IToken);
	    IToken SYSTEMVAR241 = default(IToken);
	    IToken VARIABLE242 = default(IToken);
	    IToken char_literal244 = default(IToken);
	    IToken char_literal246 = default(IToken);
	    IToken EXISTS250 = default(IToken);
	    IToken WS251 = default(IToken);
	    IToken char_literal252 = default(IToken);
	    IToken WS253 = default(IToken);
	    IToken WS255 = default(IToken);
	    IToken char_literal256 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> subquery243 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression245 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> functioncall_or_column247 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> conversion248 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> case249 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> select_command254 = default(AstParserRuleReturnScope<object, IToken>);

	    object NUMBER239_tree = default(object);
	    object STRING240_tree = default(object);
	    object SYSTEMVAR241_tree = default(object);
	    object VARIABLE242_tree = default(object);
	    object char_literal244_tree = default(object);
	    object char_literal246_tree = default(object);
	    object EXISTS250_tree = default(object);
	    object WS251_tree = default(object);
	    object char_literal252_tree = default(object);
	    object WS253_tree = default(object);
	    object WS255_tree = default(object);
	    object char_literal256_tree = default(object);
	    RewriteRuleITokenStream stream_143=new RewriteRuleITokenStream(adaptor,"token 143");
	    RewriteRuleITokenStream stream_144=new RewriteRuleITokenStream(adaptor,"token 144");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_EXISTS=new RewriteRuleITokenStream(adaptor,"token EXISTS");
	    RewriteRuleITokenStream stream_VARIABLE=new RewriteRuleITokenStream(adaptor,"token VARIABLE");
	    RewriteRuleITokenStream stream_SYSTEMVAR=new RewriteRuleITokenStream(adaptor,"token SYSTEMVAR");
	    RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
	    RewriteRuleITokenStream stream_NUMBER=new RewriteRuleITokenStream(adaptor,"token NUMBER");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_select_command=new RewriteRuleSubtreeStream(adaptor,"rule select_command");
		try { DebugEnterRule(GrammarFileName, "expression_atom");
		DebugLocation(347, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:348:2: ( NUMBER -> ^( T_INTEGER NUMBER ) | STRING -> ^( T_STRING STRING ) | SYSTEMVAR -> ^( T_SYSTEMVAR SYSTEMVAR ) | VARIABLE -> ^( T_VARIABLE VARIABLE ) | subquery | '(' expression ')' -> expression | functioncall_or_column | conversion | case | EXISTS ( WS )? '(' ( WS )? select_command ( WS )? ')' -> ^( T_EXISTS select_command ) )
			int alt88=10;
			try { DebugEnterDecision(88, decisionCanBacktrack[88]);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt88 = 1;
				}
				break;
			case STRING:
				{
				alt88 = 2;
				}
				break;
			case SYSTEMVAR:
				{
				alt88 = 3;
				}
				break;
			case VARIABLE:
				{
				alt88 = 4;
				}
				break;
			case 143:
				{
				int LA88_5 = input.LA(2);

				if ((LA88_5==SELECT||LA88_5==WS))
				{
					alt88 = 5;
				}
				else if (((LA88_5>=CASE && LA88_5<=CAST)||LA88_5==CONVERT||LA88_5==EXISTS||(LA88_5>=NOT && LA88_5<=NUMBER)||LA88_5==SIMPLE_FILE||(LA88_5>=STRING && LA88_5<=SYSTEMVAR)||LA88_5==TOKEN||LA88_5==VARIABLE||LA88_5==143))
				{
					alt88 = 6;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 88, 5, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SIMPLE_FILE:
			case TOKEN:
				{
				alt88 = 7;
				}
				break;
			case CAST:
			case CONVERT:
				{
				alt88 = 8;
				}
				break;
			case CASE:
				{
				alt88 = 9;
				}
				break;
			case EXISTS:
				{
				alt88 = 10;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 88, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(88); }
			switch (alt88)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:348:4: NUMBER
				{
				DebugLocation(348, 4);
				NUMBER239=(IToken)Match(input,NUMBER,Follow._NUMBER_in_expression_atom2138);  
				stream_NUMBER.Add(NUMBER239);



				{
				// AST REWRITE
				// elements: NUMBER
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 348:11: -> ^( T_INTEGER NUMBER )
				{
					DebugLocation(348, 14);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:348:14: ^( T_INTEGER NUMBER )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(348, 16);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_INTEGER, "T_INTEGER"), root_1);

					DebugLocation(348, 26);
					adaptor.AddChild(root_1, stream_NUMBER.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:349:4: STRING
				{
				DebugLocation(349, 4);
				STRING240=(IToken)Match(input,STRING,Follow._STRING_in_expression_atom2151);  
				stream_STRING.Add(STRING240);



				{
				// AST REWRITE
				// elements: STRING
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 349:11: -> ^( T_STRING STRING )
				{
					DebugLocation(349, 14);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:349:14: ^( T_STRING STRING )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(349, 16);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_STRING, "T_STRING"), root_1);

					DebugLocation(349, 25);
					adaptor.AddChild(root_1, stream_STRING.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:350:4: SYSTEMVAR
				{
				DebugLocation(350, 4);
				SYSTEMVAR241=(IToken)Match(input,SYSTEMVAR,Follow._SYSTEMVAR_in_expression_atom2164);  
				stream_SYSTEMVAR.Add(SYSTEMVAR241);



				{
				// AST REWRITE
				// elements: SYSTEMVAR
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 350:14: -> ^( T_SYSTEMVAR SYSTEMVAR )
				{
					DebugLocation(350, 17);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:350:17: ^( T_SYSTEMVAR SYSTEMVAR )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(350, 19);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SYSTEMVAR, "T_SYSTEMVAR"), root_1);

					DebugLocation(350, 31);
					adaptor.AddChild(root_1, stream_SYSTEMVAR.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:351:4: VARIABLE
				{
				DebugLocation(351, 4);
				VARIABLE242=(IToken)Match(input,VARIABLE,Follow._VARIABLE_in_expression_atom2177);  
				stream_VARIABLE.Add(VARIABLE242);



				{
				// AST REWRITE
				// elements: VARIABLE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 351:13: -> ^( T_VARIABLE VARIABLE )
				{
					DebugLocation(351, 16);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:351:16: ^( T_VARIABLE VARIABLE )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(351, 18);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_VARIABLE, "T_VARIABLE"), root_1);

					DebugLocation(351, 29);
					adaptor.AddChild(root_1, stream_VARIABLE.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:352:4: subquery
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(352, 4);
				PushFollow(Follow._subquery_in_expression_atom2190);
				subquery243=subquery();
				PopFollow();

				adaptor.AddChild(root_0, subquery243.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:353:4: '(' expression ')'
				{
				DebugLocation(353, 4);
				char_literal244=(IToken)Match(input,143,Follow._143_in_expression_atom2195);  
				stream_143.Add(char_literal244);

				DebugLocation(353, 8);
				PushFollow(Follow._expression_in_expression_atom2197);
				expression245=expression();
				PopFollow();

				stream_expression.Add(expression245.Tree);
				DebugLocation(353, 19);
				char_literal246=(IToken)Match(input,144,Follow._144_in_expression_atom2199);  
				stream_144.Add(char_literal246);



				{
				// AST REWRITE
				// elements: expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 353:23: -> expression
				{
					DebugLocation(353, 26);
					adaptor.AddChild(root_0, stream_expression.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:354:4: functioncall_or_column
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(354, 4);
				PushFollow(Follow._functioncall_or_column_in_expression_atom2208);
				functioncall_or_column247=functioncall_or_column();
				PopFollow();

				adaptor.AddChild(root_0, functioncall_or_column247.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:355:4: conversion
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(355, 4);
				PushFollow(Follow._conversion_in_expression_atom2213);
				conversion248=conversion();
				PopFollow();

				adaptor.AddChild(root_0, conversion248.Tree);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:356:4: case
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(356, 4);
				PushFollow(Follow._case_in_expression_atom2218);
				case249=@case();
				PopFollow();

				adaptor.AddChild(root_0, case249.Tree);

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:357:4: EXISTS ( WS )? '(' ( WS )? select_command ( WS )? ')'
				{
				DebugLocation(357, 4);
				EXISTS250=(IToken)Match(input,EXISTS,Follow._EXISTS_in_expression_atom2223);  
				stream_EXISTS.Add(EXISTS250);

				DebugLocation(357, 11);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:357:11: ( WS )?
				int alt85=2;
				try { DebugEnterSubRule(85);
				try { DebugEnterDecision(85, decisionCanBacktrack[85]);
				int LA85_0 = input.LA(1);

				if ((LA85_0==WS))
				{
					alt85 = 1;
				}
				} finally { DebugExitDecision(85); }
				switch (alt85)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:357:11: WS
					{
					DebugLocation(357, 11);
					WS251=(IToken)Match(input,WS,Follow._WS_in_expression_atom2225);  
					stream_WS.Add(WS251);


					}
					break;

				}
				} finally { DebugExitSubRule(85); }

				DebugLocation(357, 15);
				char_literal252=(IToken)Match(input,143,Follow._143_in_expression_atom2228);  
				stream_143.Add(char_literal252);

				DebugLocation(357, 19);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:357:19: ( WS )?
				int alt86=2;
				try { DebugEnterSubRule(86);
				try { DebugEnterDecision(86, decisionCanBacktrack[86]);
				int LA86_0 = input.LA(1);

				if ((LA86_0==WS))
				{
					alt86 = 1;
				}
				} finally { DebugExitDecision(86); }
				switch (alt86)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:357:19: WS
					{
					DebugLocation(357, 19);
					WS253=(IToken)Match(input,WS,Follow._WS_in_expression_atom2230);  
					stream_WS.Add(WS253);


					}
					break;

				}
				} finally { DebugExitSubRule(86); }

				DebugLocation(357, 23);
				PushFollow(Follow._select_command_in_expression_atom2233);
				select_command254=select_command();
				PopFollow();

				stream_select_command.Add(select_command254.Tree);
				DebugLocation(357, 38);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:357:38: ( WS )?
				int alt87=2;
				try { DebugEnterSubRule(87);
				try { DebugEnterDecision(87, decisionCanBacktrack[87]);
				int LA87_0 = input.LA(1);

				if ((LA87_0==WS))
				{
					alt87 = 1;
				}
				} finally { DebugExitDecision(87); }
				switch (alt87)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:357:38: WS
					{
					DebugLocation(357, 38);
					WS255=(IToken)Match(input,WS,Follow._WS_in_expression_atom2235);  
					stream_WS.Add(WS255);


					}
					break;

				}
				} finally { DebugExitSubRule(87); }

				DebugLocation(357, 42);
				char_literal256=(IToken)Match(input,144,Follow._144_in_expression_atom2238);  
				stream_144.Add(char_literal256);



				{
				// AST REWRITE
				// elements: select_command
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 357:46: -> ^( T_EXISTS select_command )
				{
					DebugLocation(357, 49);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:357:49: ^( T_EXISTS select_command )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(357, 51);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_EXISTS, "T_EXISTS"), root_1);

					DebugLocation(357, 60);
					adaptor.AddChild(root_1, stream_select_command.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_atom", 46);
			LeaveRule("expression_atom", 46);
			LeaveRule_expression_atom();
	    }
	 	DebugLocation(358, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_atom"); }
		return retval;

	}
	// $ANTLR end "expression_atom"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_functioncall_or_column() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_functioncall_or_column() {}

	// $ANTLR start "functioncall_or_column"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:361:1: functioncall_or_column : ( TOKEN ( WS )? '(' ( WS )? ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )? ')' -> ^( T_FUNCTIONCALL TOKEN ( expression )* ) | SIMPLE_FILE -> ^( T_COLUMN SIMPLE_FILE ) );
	[GrammarRule("functioncall_or_column")]
	private AstParserRuleReturnScope<object, IToken> functioncall_or_column()
	{
		EnterRule_functioncall_or_column();
		EnterRule("functioncall_or_column", 47);
		TraceIn("functioncall_or_column", 47);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN257 = default(IToken);
	    IToken WS258 = default(IToken);
	    IToken char_literal259 = default(IToken);
	    IToken WS260 = default(IToken);
	    IToken WS262 = default(IToken);
	    IToken char_literal263 = default(IToken);
	    IToken WS264 = default(IToken);
	    IToken WS266 = default(IToken);
	    IToken char_literal267 = default(IToken);
	    IToken SIMPLE_FILE268 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression261 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression265 = default(AstParserRuleReturnScope<object, IToken>);

	    object TOKEN257_tree = default(object);
	    object WS258_tree = default(object);
	    object char_literal259_tree = default(object);
	    object WS260_tree = default(object);
	    object WS262_tree = default(object);
	    object char_literal263_tree = default(object);
	    object WS264_tree = default(object);
	    object WS266_tree = default(object);
	    object char_literal267_tree = default(object);
	    object SIMPLE_FILE268_tree = default(object);
	    RewriteRuleITokenStream stream_143=new RewriteRuleITokenStream(adaptor,"token 143");
	    RewriteRuleITokenStream stream_144=new RewriteRuleITokenStream(adaptor,"token 144");
	    RewriteRuleITokenStream stream_147=new RewriteRuleITokenStream(adaptor,"token 147");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_SIMPLE_FILE=new RewriteRuleITokenStream(adaptor,"token SIMPLE_FILE");
	    RewriteRuleITokenStream stream_TOKEN=new RewriteRuleITokenStream(adaptor,"token TOKEN");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "functioncall_or_column");
		DebugLocation(361, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:362:2: ( TOKEN ( WS )? '(' ( WS )? ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )? ')' -> ^( T_FUNCTIONCALL TOKEN ( expression )* ) | SIMPLE_FILE -> ^( T_COLUMN SIMPLE_FILE ) )
			int alt96=2;
			try { DebugEnterDecision(96, decisionCanBacktrack[96]);
			int LA96_0 = input.LA(1);

			if ((LA96_0==TOKEN))
			{
				alt96 = 1;
			}
			else if ((LA96_0==SIMPLE_FILE))
			{
				alt96 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 96, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(96); }
			switch (alt96)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:362:4: TOKEN ( WS )? '(' ( WS )? ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )? ')'
				{
				DebugLocation(362, 4);
				TOKEN257=(IToken)Match(input,TOKEN,Follow._TOKEN_in_functioncall_or_column2258);  
				stream_TOKEN.Add(TOKEN257);

				DebugLocation(362, 10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:362:10: ( WS )?
				int alt89=2;
				try { DebugEnterSubRule(89);
				try { DebugEnterDecision(89, decisionCanBacktrack[89]);
				int LA89_0 = input.LA(1);

				if ((LA89_0==WS))
				{
					alt89 = 1;
				}
				} finally { DebugExitDecision(89); }
				switch (alt89)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:362:10: WS
					{
					DebugLocation(362, 10);
					WS258=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2260);  
					stream_WS.Add(WS258);


					}
					break;

				}
				} finally { DebugExitSubRule(89); }

				DebugLocation(362, 14);
				char_literal259=(IToken)Match(input,143,Follow._143_in_functioncall_or_column2263);  
				stream_143.Add(char_literal259);

				DebugLocation(362, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:362:18: ( WS )?
				int alt90=2;
				try { DebugEnterSubRule(90);
				try { DebugEnterDecision(90, decisionCanBacktrack[90]);
				int LA90_0 = input.LA(1);

				if ((LA90_0==WS))
				{
					alt90 = 1;
				}
				} finally { DebugExitDecision(90); }
				switch (alt90)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:362:18: WS
					{
					DebugLocation(362, 18);
					WS260=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2265);  
					stream_WS.Add(WS260);


					}
					break;

				}
				} finally { DebugExitSubRule(90); }

				DebugLocation(362, 22);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:362:22: ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )?
				int alt95=2;
				try { DebugEnterSubRule(95);
				try { DebugEnterDecision(95, decisionCanBacktrack[95]);
				int LA95_0 = input.LA(1);

				if (((LA95_0>=CASE && LA95_0<=CAST)||LA95_0==CONVERT||LA95_0==EXISTS||(LA95_0>=NOT && LA95_0<=NUMBER)||LA95_0==SIMPLE_FILE||(LA95_0>=STRING && LA95_0<=SYSTEMVAR)||LA95_0==TOKEN||LA95_0==VARIABLE||LA95_0==143))
				{
					alt95 = 1;
				}
				} finally { DebugExitDecision(95); }
				switch (alt95)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:362:23: expression ( WS )? ( ',' ( WS )? expression ( WS )? )*
					{
					DebugLocation(362, 23);
					PushFollow(Follow._expression_in_functioncall_or_column2269);
					expression261=expression();
					PopFollow();

					stream_expression.Add(expression261.Tree);
					DebugLocation(362, 34);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:362:34: ( WS )?
					int alt91=2;
					try { DebugEnterSubRule(91);
					try { DebugEnterDecision(91, decisionCanBacktrack[91]);
					int LA91_0 = input.LA(1);

					if ((LA91_0==WS))
					{
						alt91 = 1;
					}
					} finally { DebugExitDecision(91); }
					switch (alt91)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:362:34: WS
						{
						DebugLocation(362, 34);
						WS262=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2271);  
						stream_WS.Add(WS262);


						}
						break;

					}
					} finally { DebugExitSubRule(91); }

					DebugLocation(362, 38);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:362:38: ( ',' ( WS )? expression ( WS )? )*
					try { DebugEnterSubRule(94);
					while (true)
					{
						int alt94=2;
						try { DebugEnterDecision(94, decisionCanBacktrack[94]);
						int LA94_0 = input.LA(1);

						if ((LA94_0==147))
						{
							alt94 = 1;
						}


						} finally { DebugExitDecision(94); }
						switch ( alt94 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:362:39: ',' ( WS )? expression ( WS )?
							{
							DebugLocation(362, 39);
							char_literal263=(IToken)Match(input,147,Follow._147_in_functioncall_or_column2275);  
							stream_147.Add(char_literal263);

							DebugLocation(362, 43);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:362:43: ( WS )?
							int alt92=2;
							try { DebugEnterSubRule(92);
							try { DebugEnterDecision(92, decisionCanBacktrack[92]);
							int LA92_0 = input.LA(1);

							if ((LA92_0==WS))
							{
								alt92 = 1;
							}
							} finally { DebugExitDecision(92); }
							switch (alt92)
							{
							case 1:
								DebugEnterAlt(1);
								// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:362:43: WS
								{
								DebugLocation(362, 43);
								WS264=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2277);  
								stream_WS.Add(WS264);


								}
								break;

							}
							} finally { DebugExitSubRule(92); }

							DebugLocation(362, 47);
							PushFollow(Follow._expression_in_functioncall_or_column2280);
							expression265=expression();
							PopFollow();

							stream_expression.Add(expression265.Tree);
							DebugLocation(362, 58);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:362:58: ( WS )?
							int alt93=2;
							try { DebugEnterSubRule(93);
							try { DebugEnterDecision(93, decisionCanBacktrack[93]);
							int LA93_0 = input.LA(1);

							if ((LA93_0==WS))
							{
								alt93 = 1;
							}
							} finally { DebugExitDecision(93); }
							switch (alt93)
							{
							case 1:
								DebugEnterAlt(1);
								// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:362:58: WS
								{
								DebugLocation(362, 58);
								WS266=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2282);  
								stream_WS.Add(WS266);


								}
								break;

							}
							} finally { DebugExitSubRule(93); }


							}
							break;

						default:
							goto loop94;
						}
					}

					loop94:
						;

					} finally { DebugExitSubRule(94); }


					}
					break;

				}
				} finally { DebugExitSubRule(95); }

				DebugLocation(362, 66);
				char_literal267=(IToken)Match(input,144,Follow._144_in_functioncall_or_column2289);  
				stream_144.Add(char_literal267);



				{
				// AST REWRITE
				// elements: TOKEN, expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 362:70: -> ^( T_FUNCTIONCALL TOKEN ( expression )* )
				{
					DebugLocation(362, 73);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:362:73: ^( T_FUNCTIONCALL TOKEN ( expression )* )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(362, 75);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(362, 90);
					adaptor.AddChild(root_1, stream_TOKEN.NextNode());
					DebugLocation(362, 96);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:362:96: ( expression )*
					while ( stream_expression.HasNext )
					{
						DebugLocation(362, 96);
						adaptor.AddChild(root_1, stream_expression.NextTree());

					}
					stream_expression.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:364:4: SIMPLE_FILE
				{
				DebugLocation(364, 4);
				SIMPLE_FILE268=(IToken)Match(input,SIMPLE_FILE,Follow._SIMPLE_FILE_in_functioncall_or_column2307);  
				stream_SIMPLE_FILE.Add(SIMPLE_FILE268);



				{
				// AST REWRITE
				// elements: SIMPLE_FILE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 364:16: -> ^( T_COLUMN SIMPLE_FILE )
				{
					DebugLocation(364, 19);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:364:19: ^( T_COLUMN SIMPLE_FILE )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(364, 21);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_COLUMN, "T_COLUMN"), root_1);

					DebugLocation(364, 30);
					adaptor.AddChild(root_1, stream_SIMPLE_FILE.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("functioncall_or_column", 47);
			LeaveRule("functioncall_or_column", 47);
			LeaveRule_functioncall_or_column();
	    }
	 	DebugLocation(365, 1);
		} finally { DebugExitRule(GrammarFileName, "functioncall_or_column"); }
		return retval;

	}
	// $ANTLR end "functioncall_or_column"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_conversion() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_conversion() {}

	// $ANTLR start "conversion"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:367:1: conversion : ( CONVERT ( WS )? '(' ( WS )? TOKEN ( WS )? ',' ( WS )? expression ( WS )? ')' -> ^( T_CONVERT TOKEN expression ) | CAST ( WS )? '(' ( WS )? expression WS AS WS datatype ( WS )? ')' -> ^( T_CONVERT TOKEN expression ) );
	[GrammarRule("conversion")]
	private AstParserRuleReturnScope<object, IToken> conversion()
	{
		EnterRule_conversion();
		EnterRule("conversion", 48);
		TraceIn("conversion", 48);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken CONVERT269 = default(IToken);
	    IToken WS270 = default(IToken);
	    IToken char_literal271 = default(IToken);
	    IToken WS272 = default(IToken);
	    IToken TOKEN273 = default(IToken);
	    IToken WS274 = default(IToken);
	    IToken char_literal275 = default(IToken);
	    IToken WS276 = default(IToken);
	    IToken WS278 = default(IToken);
	    IToken char_literal279 = default(IToken);
	    IToken CAST280 = default(IToken);
	    IToken WS281 = default(IToken);
	    IToken char_literal282 = default(IToken);
	    IToken WS283 = default(IToken);
	    IToken WS285 = default(IToken);
	    IToken AS286 = default(IToken);
	    IToken WS287 = default(IToken);
	    IToken WS289 = default(IToken);
	    IToken char_literal290 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression277 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression284 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> datatype288 = default(AstParserRuleReturnScope<object, IToken>);

	    object CONVERT269_tree = default(object);
	    object WS270_tree = default(object);
	    object char_literal271_tree = default(object);
	    object WS272_tree = default(object);
	    object TOKEN273_tree = default(object);
	    object WS274_tree = default(object);
	    object char_literal275_tree = default(object);
	    object WS276_tree = default(object);
	    object WS278_tree = default(object);
	    object char_literal279_tree = default(object);
	    object CAST280_tree = default(object);
	    object WS281_tree = default(object);
	    object char_literal282_tree = default(object);
	    object WS283_tree = default(object);
	    object WS285_tree = default(object);
	    object AS286_tree = default(object);
	    object WS287_tree = default(object);
	    object WS289_tree = default(object);
	    object char_literal290_tree = default(object);
	    RewriteRuleITokenStream stream_CAST=new RewriteRuleITokenStream(adaptor,"token CAST");
	    RewriteRuleITokenStream stream_143=new RewriteRuleITokenStream(adaptor,"token 143");
	    RewriteRuleITokenStream stream_AS=new RewriteRuleITokenStream(adaptor,"token AS");
	    RewriteRuleITokenStream stream_144=new RewriteRuleITokenStream(adaptor,"token 144");
	    RewriteRuleITokenStream stream_147=new RewriteRuleITokenStream(adaptor,"token 147");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_CONVERT=new RewriteRuleITokenStream(adaptor,"token CONVERT");
	    RewriteRuleITokenStream stream_TOKEN=new RewriteRuleITokenStream(adaptor,"token TOKEN");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_datatype=new RewriteRuleSubtreeStream(adaptor,"rule datatype");
		try { DebugEnterRule(GrammarFileName, "conversion");
		DebugLocation(367, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:368:2: ( CONVERT ( WS )? '(' ( WS )? TOKEN ( WS )? ',' ( WS )? expression ( WS )? ')' -> ^( T_CONVERT TOKEN expression ) | CAST ( WS )? '(' ( WS )? expression WS AS WS datatype ( WS )? ')' -> ^( T_CONVERT TOKEN expression ) )
			int alt105=2;
			try { DebugEnterDecision(105, decisionCanBacktrack[105]);
			int LA105_0 = input.LA(1);

			if ((LA105_0==CONVERT))
			{
				alt105 = 1;
			}
			else if ((LA105_0==CAST))
			{
				alt105 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 105, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(105); }
			switch (alt105)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:368:4: CONVERT ( WS )? '(' ( WS )? TOKEN ( WS )? ',' ( WS )? expression ( WS )? ')'
				{
				DebugLocation(368, 4);
				CONVERT269=(IToken)Match(input,CONVERT,Follow._CONVERT_in_conversion2327);  
				stream_CONVERT.Add(CONVERT269);

				DebugLocation(368, 12);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:368:12: ( WS )?
				int alt97=2;
				try { DebugEnterSubRule(97);
				try { DebugEnterDecision(97, decisionCanBacktrack[97]);
				int LA97_0 = input.LA(1);

				if ((LA97_0==WS))
				{
					alt97 = 1;
				}
				} finally { DebugExitDecision(97); }
				switch (alt97)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:368:12: WS
					{
					DebugLocation(368, 12);
					WS270=(IToken)Match(input,WS,Follow._WS_in_conversion2329);  
					stream_WS.Add(WS270);


					}
					break;

				}
				} finally { DebugExitSubRule(97); }

				DebugLocation(368, 16);
				char_literal271=(IToken)Match(input,143,Follow._143_in_conversion2332);  
				stream_143.Add(char_literal271);

				DebugLocation(368, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:368:20: ( WS )?
				int alt98=2;
				try { DebugEnterSubRule(98);
				try { DebugEnterDecision(98, decisionCanBacktrack[98]);
				int LA98_0 = input.LA(1);

				if ((LA98_0==WS))
				{
					alt98 = 1;
				}
				} finally { DebugExitDecision(98); }
				switch (alt98)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:368:20: WS
					{
					DebugLocation(368, 20);
					WS272=(IToken)Match(input,WS,Follow._WS_in_conversion2334);  
					stream_WS.Add(WS272);


					}
					break;

				}
				} finally { DebugExitSubRule(98); }

				DebugLocation(368, 24);
				TOKEN273=(IToken)Match(input,TOKEN,Follow._TOKEN_in_conversion2337);  
				stream_TOKEN.Add(TOKEN273);

				DebugLocation(368, 30);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:368:30: ( WS )?
				int alt99=2;
				try { DebugEnterSubRule(99);
				try { DebugEnterDecision(99, decisionCanBacktrack[99]);
				int LA99_0 = input.LA(1);

				if ((LA99_0==WS))
				{
					alt99 = 1;
				}
				} finally { DebugExitDecision(99); }
				switch (alt99)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:368:30: WS
					{
					DebugLocation(368, 30);
					WS274=(IToken)Match(input,WS,Follow._WS_in_conversion2339);  
					stream_WS.Add(WS274);


					}
					break;

				}
				} finally { DebugExitSubRule(99); }

				DebugLocation(368, 34);
				char_literal275=(IToken)Match(input,147,Follow._147_in_conversion2342);  
				stream_147.Add(char_literal275);

				DebugLocation(368, 38);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:368:38: ( WS )?
				int alt100=2;
				try { DebugEnterSubRule(100);
				try { DebugEnterDecision(100, decisionCanBacktrack[100]);
				int LA100_0 = input.LA(1);

				if ((LA100_0==WS))
				{
					alt100 = 1;
				}
				} finally { DebugExitDecision(100); }
				switch (alt100)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:368:38: WS
					{
					DebugLocation(368, 38);
					WS276=(IToken)Match(input,WS,Follow._WS_in_conversion2344);  
					stream_WS.Add(WS276);


					}
					break;

				}
				} finally { DebugExitSubRule(100); }

				DebugLocation(368, 42);
				PushFollow(Follow._expression_in_conversion2347);
				expression277=expression();
				PopFollow();

				stream_expression.Add(expression277.Tree);
				DebugLocation(368, 53);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:368:53: ( WS )?
				int alt101=2;
				try { DebugEnterSubRule(101);
				try { DebugEnterDecision(101, decisionCanBacktrack[101]);
				int LA101_0 = input.LA(1);

				if ((LA101_0==WS))
				{
					alt101 = 1;
				}
				} finally { DebugExitDecision(101); }
				switch (alt101)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:368:53: WS
					{
					DebugLocation(368, 53);
					WS278=(IToken)Match(input,WS,Follow._WS_in_conversion2349);  
					stream_WS.Add(WS278);


					}
					break;

				}
				} finally { DebugExitSubRule(101); }

				DebugLocation(368, 57);
				char_literal279=(IToken)Match(input,144,Follow._144_in_conversion2352);  
				stream_144.Add(char_literal279);



				{
				// AST REWRITE
				// elements: TOKEN, expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 368:61: -> ^( T_CONVERT TOKEN expression )
				{
					DebugLocation(368, 64);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:368:64: ^( T_CONVERT TOKEN expression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(368, 66);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CONVERT, "T_CONVERT"), root_1);

					DebugLocation(368, 76);
					adaptor.AddChild(root_1, stream_TOKEN.NextNode());
					DebugLocation(368, 82);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:369:4: CAST ( WS )? '(' ( WS )? expression WS AS WS datatype ( WS )? ')'
				{
				DebugLocation(369, 4);
				CAST280=(IToken)Match(input,CAST,Follow._CAST_in_conversion2367);  
				stream_CAST.Add(CAST280);

				DebugLocation(369, 9);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:369:9: ( WS )?
				int alt102=2;
				try { DebugEnterSubRule(102);
				try { DebugEnterDecision(102, decisionCanBacktrack[102]);
				int LA102_0 = input.LA(1);

				if ((LA102_0==WS))
				{
					alt102 = 1;
				}
				} finally { DebugExitDecision(102); }
				switch (alt102)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:369:9: WS
					{
					DebugLocation(369, 9);
					WS281=(IToken)Match(input,WS,Follow._WS_in_conversion2369);  
					stream_WS.Add(WS281);


					}
					break;

				}
				} finally { DebugExitSubRule(102); }

				DebugLocation(369, 13);
				char_literal282=(IToken)Match(input,143,Follow._143_in_conversion2372);  
				stream_143.Add(char_literal282);

				DebugLocation(369, 17);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:369:17: ( WS )?
				int alt103=2;
				try { DebugEnterSubRule(103);
				try { DebugEnterDecision(103, decisionCanBacktrack[103]);
				int LA103_0 = input.LA(1);

				if ((LA103_0==WS))
				{
					alt103 = 1;
				}
				} finally { DebugExitDecision(103); }
				switch (alt103)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:369:17: WS
					{
					DebugLocation(369, 17);
					WS283=(IToken)Match(input,WS,Follow._WS_in_conversion2374);  
					stream_WS.Add(WS283);


					}
					break;

				}
				} finally { DebugExitSubRule(103); }

				DebugLocation(369, 21);
				PushFollow(Follow._expression_in_conversion2377);
				expression284=expression();
				PopFollow();

				stream_expression.Add(expression284.Tree);
				DebugLocation(369, 32);
				WS285=(IToken)Match(input,WS,Follow._WS_in_conversion2379);  
				stream_WS.Add(WS285);

				DebugLocation(369, 35);
				AS286=(IToken)Match(input,AS,Follow._AS_in_conversion2381);  
				stream_AS.Add(AS286);

				DebugLocation(369, 38);
				WS287=(IToken)Match(input,WS,Follow._WS_in_conversion2383);  
				stream_WS.Add(WS287);

				DebugLocation(369, 41);
				PushFollow(Follow._datatype_in_conversion2385);
				datatype288=datatype();
				PopFollow();

				stream_datatype.Add(datatype288.Tree);
				DebugLocation(369, 50);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:369:50: ( WS )?
				int alt104=2;
				try { DebugEnterSubRule(104);
				try { DebugEnterDecision(104, decisionCanBacktrack[104]);
				int LA104_0 = input.LA(1);

				if ((LA104_0==WS))
				{
					alt104 = 1;
				}
				} finally { DebugExitDecision(104); }
				switch (alt104)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:369:50: WS
					{
					DebugLocation(369, 50);
					WS289=(IToken)Match(input,WS,Follow._WS_in_conversion2387);  
					stream_WS.Add(WS289);


					}
					break;

				}
				} finally { DebugExitSubRule(104); }

				DebugLocation(369, 54);
				char_literal290=(IToken)Match(input,144,Follow._144_in_conversion2390);  
				stream_144.Add(char_literal290);



				{
				// AST REWRITE
				// elements: expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 369:58: -> ^( T_CONVERT TOKEN expression )
				{
					DebugLocation(369, 61);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:369:61: ^( T_CONVERT TOKEN expression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(369, 63);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CONVERT, "T_CONVERT"), root_1);

					DebugLocation(369, 73);
					adaptor.AddChild(root_1, (object)adaptor.Create(TOKEN, "TOKEN"));
					DebugLocation(369, 79);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conversion", 48);
			LeaveRule("conversion", 48);
			LeaveRule_conversion();
	    }
	 	DebugLocation(370, 1);
		} finally { DebugExitRule(GrammarFileName, "conversion"); }
		return retval;

	}
	// $ANTLR end "conversion"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_datatype() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_datatype() {}

	// $ANTLR start "datatype"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:372:1: datatype : TOKEN ;
	[GrammarRule("datatype")]
	private AstParserRuleReturnScope<object, IToken> datatype()
	{
		EnterRule_datatype();
		EnterRule("datatype", 49);
		TraceIn("datatype", 49);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN291 = default(IToken);

	    object TOKEN291_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "datatype");
		DebugLocation(372, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:373:2: ( TOKEN )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:373:4: TOKEN
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(373, 4);
			TOKEN291=(IToken)Match(input,TOKEN,Follow._TOKEN_in_datatype2412); 
			TOKEN291_tree = (object)adaptor.Create(TOKEN291);
			adaptor.AddChild(root_0, TOKEN291_tree);


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("datatype", 49);
			LeaveRule("datatype", 49);
			LeaveRule_datatype();
	    }
	 	DebugLocation(374, 1);
		} finally { DebugExitRule(GrammarFileName, "datatype"); }
		return retval;

	}
	// $ANTLR end "datatype"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_variable() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_variable() {}

	// $ANTLR start "variable"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:376:1: variable : VARIABLE ;
	[GrammarRule("variable")]
	private AstParserRuleReturnScope<object, IToken> variable()
	{
		EnterRule_variable();
		EnterRule("variable", 50);
		TraceIn("variable", 50);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken VARIABLE292 = default(IToken);

	    object VARIABLE292_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "variable");
		DebugLocation(376, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:377:2: ( VARIABLE )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:377:4: VARIABLE
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(377, 4);
			VARIABLE292=(IToken)Match(input,VARIABLE,Follow._VARIABLE_in_variable2424); 
			VARIABLE292_tree = (object)adaptor.Create(VARIABLE292);
			adaptor.AddChild(root_0, VARIABLE292_tree);


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variable", 50);
			LeaveRule("variable", 50);
			LeaveRule_variable();
	    }
	 	DebugLocation(378, 1);
		} finally { DebugExitRule(GrammarFileName, "variable"); }
		return retval;

	}
	// $ANTLR end "variable"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_case() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_case() {}

	// $ANTLR start "case"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:380:1: case : CASE WS ( expression WS )? ( case_when WS )* ( case_else WS )? END -> ^( T_CASE ( expression )? ( case_when )* ( case_else )? ) ;
	[GrammarRule("case")]
	private AstParserRuleReturnScope<object, IToken> @case()
	{
		EnterRule_case();
		EnterRule("case", 51);
		TraceIn("case", 51);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken CASE293 = default(IToken);
	    IToken WS294 = default(IToken);
	    IToken WS296 = default(IToken);
	    IToken WS298 = default(IToken);
	    IToken WS300 = default(IToken);
	    IToken END301 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression295 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> case_when297 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> case_else299 = default(AstParserRuleReturnScope<object, IToken>);

	    object CASE293_tree = default(object);
	    object WS294_tree = default(object);
	    object WS296_tree = default(object);
	    object WS298_tree = default(object);
	    object WS300_tree = default(object);
	    object END301_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_END=new RewriteRuleITokenStream(adaptor,"token END");
	    RewriteRuleITokenStream stream_CASE=new RewriteRuleITokenStream(adaptor,"token CASE");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_case_when=new RewriteRuleSubtreeStream(adaptor,"rule case_when");
	    RewriteRuleSubtreeStream stream_case_else=new RewriteRuleSubtreeStream(adaptor,"rule case_else");
		try { DebugEnterRule(GrammarFileName, "case");
		DebugLocation(380, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:381:2: ( CASE WS ( expression WS )? ( case_when WS )* ( case_else WS )? END -> ^( T_CASE ( expression )? ( case_when )* ( case_else )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:381:4: CASE WS ( expression WS )? ( case_when WS )* ( case_else WS )? END
			{
			DebugLocation(381, 4);
			CASE293=(IToken)Match(input,CASE,Follow._CASE_in_case2436);  
			stream_CASE.Add(CASE293);

			DebugLocation(381, 9);
			WS294=(IToken)Match(input,WS,Follow._WS_in_case2438);  
			stream_WS.Add(WS294);

			DebugLocation(381, 12);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:381:12: ( expression WS )?
			int alt106=2;
			try { DebugEnterSubRule(106);
			try { DebugEnterDecision(106, decisionCanBacktrack[106]);
			int LA106_0 = input.LA(1);

			if (((LA106_0>=CASE && LA106_0<=CAST)||LA106_0==CONVERT||LA106_0==EXISTS||(LA106_0>=NOT && LA106_0<=NUMBER)||LA106_0==SIMPLE_FILE||(LA106_0>=STRING && LA106_0<=SYSTEMVAR)||LA106_0==TOKEN||LA106_0==VARIABLE||LA106_0==143))
			{
				alt106 = 1;
			}
			} finally { DebugExitDecision(106); }
			switch (alt106)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:381:13: expression WS
				{
				DebugLocation(381, 13);
				PushFollow(Follow._expression_in_case2441);
				expression295=expression();
				PopFollow();

				stream_expression.Add(expression295.Tree);
				DebugLocation(381, 24);
				WS296=(IToken)Match(input,WS,Follow._WS_in_case2443);  
				stream_WS.Add(WS296);


				}
				break;

			}
			} finally { DebugExitSubRule(106); }

			DebugLocation(381, 29);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:381:29: ( case_when WS )*
			try { DebugEnterSubRule(107);
			while (true)
			{
				int alt107=2;
				try { DebugEnterDecision(107, decisionCanBacktrack[107]);
				int LA107_0 = input.LA(1);

				if ((LA107_0==WHEN))
				{
					alt107 = 1;
				}


				} finally { DebugExitDecision(107); }
				switch ( alt107 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:381:30: case_when WS
					{
					DebugLocation(381, 30);
					PushFollow(Follow._case_when_in_case2448);
					case_when297=case_when();
					PopFollow();

					stream_case_when.Add(case_when297.Tree);
					DebugLocation(381, 40);
					WS298=(IToken)Match(input,WS,Follow._WS_in_case2450);  
					stream_WS.Add(WS298);


					}
					break;

				default:
					goto loop107;
				}
			}

			loop107:
				;

			} finally { DebugExitSubRule(107); }

			DebugLocation(381, 45);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:381:45: ( case_else WS )?
			int alt108=2;
			try { DebugEnterSubRule(108);
			try { DebugEnterDecision(108, decisionCanBacktrack[108]);
			int LA108_0 = input.LA(1);

			if ((LA108_0==ELSE))
			{
				alt108 = 1;
			}
			} finally { DebugExitDecision(108); }
			switch (alt108)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:381:46: case_else WS
				{
				DebugLocation(381, 46);
				PushFollow(Follow._case_else_in_case2455);
				case_else299=case_else();
				PopFollow();

				stream_case_else.Add(case_else299.Tree);
				DebugLocation(381, 56);
				WS300=(IToken)Match(input,WS,Follow._WS_in_case2457);  
				stream_WS.Add(WS300);


				}
				break;

			}
			} finally { DebugExitSubRule(108); }

			DebugLocation(381, 61);
			END301=(IToken)Match(input,END,Follow._END_in_case2461);  
			stream_END.Add(END301);



			{
			// AST REWRITE
			// elements: case_else, case_when, expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 382:2: -> ^( T_CASE ( expression )? ( case_when )* ( case_else )? )
			{
				DebugLocation(382, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:382:5: ^( T_CASE ( expression )? ( case_when )* ( case_else )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(382, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CASE, "T_CASE"), root_1);

				DebugLocation(382, 14);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:382:14: ( expression )?
				if (stream_expression.HasNext)
				{
					DebugLocation(382, 14);
					adaptor.AddChild(root_1, stream_expression.NextTree());

				}
				stream_expression.Reset();
				DebugLocation(382, 26);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:382:26: ( case_when )*
				while ( stream_case_when.HasNext )
				{
					DebugLocation(382, 26);
					adaptor.AddChild(root_1, stream_case_when.NextTree());

				}
				stream_case_when.Reset();
				DebugLocation(382, 37);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:382:37: ( case_else )?
				if (stream_case_else.HasNext)
				{
					DebugLocation(382, 37);
					adaptor.AddChild(root_1, stream_case_else.NextTree());

				}
				stream_case_else.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("case", 51);
			LeaveRule("case", 51);
			LeaveRule_case();
	    }
	 	DebugLocation(383, 1);
		} finally { DebugExitRule(GrammarFileName, "case"); }
		return retval;

	}
	// $ANTLR end "case"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_case_when() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_case_when() {}

	// $ANTLR start "case_when"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:385:1: case_when : WHEN WS a= expression WS THEN WS b= expression -> ^( T_CASE_WHEN $a $b) ;
	[GrammarRule("case_when")]
	private AstParserRuleReturnScope<object, IToken> case_when()
	{
		EnterRule_case_when();
		EnterRule("case_when", 52);
		TraceIn("case_when", 52);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WHEN302 = default(IToken);
	    IToken WS303 = default(IToken);
	    IToken WS304 = default(IToken);
	    IToken THEN305 = default(IToken);
	    IToken WS306 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);

	    object WHEN302_tree = default(object);
	    object WS303_tree = default(object);
	    object WS304_tree = default(object);
	    object THEN305_tree = default(object);
	    object WS306_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_THEN=new RewriteRuleITokenStream(adaptor,"token THEN");
	    RewriteRuleITokenStream stream_WHEN=new RewriteRuleITokenStream(adaptor,"token WHEN");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "case_when");
		DebugLocation(385, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:386:2: ( WHEN WS a= expression WS THEN WS b= expression -> ^( T_CASE_WHEN $a $b) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:386:4: WHEN WS a= expression WS THEN WS b= expression
			{
			DebugLocation(386, 4);
			WHEN302=(IToken)Match(input,WHEN,Follow._WHEN_in_case_when2489);  
			stream_WHEN.Add(WHEN302);

			DebugLocation(386, 9);
			WS303=(IToken)Match(input,WS,Follow._WS_in_case_when2491);  
			stream_WS.Add(WS303);

			DebugLocation(386, 13);
			PushFollow(Follow._expression_in_case_when2495);
			a=expression();
			PopFollow();

			stream_expression.Add(a.Tree);
			DebugLocation(386, 25);
			WS304=(IToken)Match(input,WS,Follow._WS_in_case_when2497);  
			stream_WS.Add(WS304);

			DebugLocation(386, 28);
			THEN305=(IToken)Match(input,THEN,Follow._THEN_in_case_when2499);  
			stream_THEN.Add(THEN305);

			DebugLocation(386, 33);
			WS306=(IToken)Match(input,WS,Follow._WS_in_case_when2501);  
			stream_WS.Add(WS306);

			DebugLocation(386, 37);
			PushFollow(Follow._expression_in_case_when2505);
			b=expression();
			PopFollow();

			stream_expression.Add(b.Tree);


			{
			// AST REWRITE
			// elements: b, a
			// token labels: 
			// rule labels: retval, b, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 387:2: -> ^( T_CASE_WHEN $a $b)
			{
				DebugLocation(387, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:387:5: ^( T_CASE_WHEN $a $b)
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(387, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CASE_WHEN, "T_CASE_WHEN"), root_1);

				DebugLocation(387, 20);
				adaptor.AddChild(root_1, stream_a.NextTree());
				DebugLocation(387, 23);
				adaptor.AddChild(root_1, stream_b.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("case_when", 52);
			LeaveRule("case_when", 52);
			LeaveRule_case_when();
	    }
	 	DebugLocation(388, 1);
		} finally { DebugExitRule(GrammarFileName, "case_when"); }
		return retval;

	}
	// $ANTLR end "case_when"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_case_else() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_case_else() {}

	// $ANTLR start "case_else"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:390:1: case_else : ELSE WS expression -> ^( T_CASE_ELSE expression ) ;
	[GrammarRule("case_else")]
	private AstParserRuleReturnScope<object, IToken> case_else()
	{
		EnterRule_case_else();
		EnterRule("case_else", 53);
		TraceIn("case_else", 53);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken ELSE307 = default(IToken);
	    IToken WS308 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression309 = default(AstParserRuleReturnScope<object, IToken>);

	    object ELSE307_tree = default(object);
	    object WS308_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_ELSE=new RewriteRuleITokenStream(adaptor,"token ELSE");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "case_else");
		DebugLocation(390, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:391:2: ( ELSE WS expression -> ^( T_CASE_ELSE expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:391:4: ELSE WS expression
			{
			DebugLocation(391, 4);
			ELSE307=(IToken)Match(input,ELSE,Follow._ELSE_in_case_else2530);  
			stream_ELSE.Add(ELSE307);

			DebugLocation(391, 9);
			WS308=(IToken)Match(input,WS,Follow._WS_in_case_else2532);  
			stream_WS.Add(WS308);

			DebugLocation(391, 12);
			PushFollow(Follow._expression_in_case_else2534);
			expression309=expression();
			PopFollow();

			stream_expression.Add(expression309.Tree);


			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 392:2: -> ^( T_CASE_ELSE expression )
			{
				DebugLocation(392, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:392:5: ^( T_CASE_ELSE expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(392, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CASE_ELSE, "T_CASE_ELSE"), root_1);

				DebugLocation(392, 19);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("case_else", 53);
			LeaveRule("case_else", 53);
			LeaveRule_case_else();
	    }
	 	DebugLocation(393, 1);
		} finally { DebugExitRule(GrammarFileName, "case_else"); }
		return retval;

	}
	// $ANTLR end "case_else"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _WS_in_parse336 = new BitSet(new ulong[]{0x30000000140000UL,0x8000000000000000UL});
		public static readonly BitSet _commands_in_parse340 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_parse342 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_parse347 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _command_in_commands370 = new BitSet(new ulong[]{0x30000000140002UL,0x8000000000000000UL,0x400040UL});
		public static readonly BitSet _WS_in_commands373 = new BitSet(new ulong[]{0x30000000140000UL,0x8000000000000000UL,0x400000UL});
		public static readonly BitSet _150_in_commands377 = new BitSet(new ulong[]{0x30000000140000UL,0x8000000000000000UL,0x40UL});
		public static readonly BitSet _WS_in_commands379 = new BitSet(new ulong[]{0x30000000140000UL,0x8000000000000000UL});
		public static readonly BitSet _command_in_commands384 = new BitSet(new ulong[]{0x30000000140002UL,0x8000000000000000UL,0x400040UL});
		public static readonly BitSet _WS_in_commands389 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000UL});
		public static readonly BitSet _150_in_commands392 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _select_command_in_command412 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _use_command_in_command417 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declare_command_in_command422 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_command_in_command427 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _create_view_command_in_command432 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SELECT_in_select_command446 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_select_command449 = new BitSet(new ulong[]{0x800020UL});
		public static readonly BitSet _distinct_clause_in_select_command451 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_select_command456 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _top_clause_in_select_command458 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_select_command462 = new BitSet(new ulong[]{0x134018000802C000UL,0x0UL,0x28002UL});
		public static readonly BitSet _column_list_in_select_command464 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_select_command467 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _into_clause_in_select_command469 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_select_command474 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _from_clause_in_select_command476 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_select_command481 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _where_clause_in_select_command483 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_select_command488 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _groupby_clause_in_select_command490 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_select_command495 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _orderby_clause_in_select_command497 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DISTINCT_in_distinct_clause542 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ALL_in_distinct_clause551 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOP_in_top_clause567 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_top_clause569 = new BitSet(new ulong[]{0x134018000802C000UL,0x0UL,0x8002UL});
		public static readonly BitSet _expression_in_top_clause571 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _column_in_column_list593 = new BitSet(new ulong[]{0x2UL,0x0UL,0x80040UL});
		public static readonly BitSet _WS_in_column_list596 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _147_in_column_list599 = new BitSet(new ulong[]{0x134018000802C000UL,0x0UL,0x28042UL});
		public static readonly BitSet _WS_in_column_list601 = new BitSet(new ulong[]{0x134018000802C000UL,0x0UL,0x28002UL});
		public static readonly BitSet _column_in_column_list604 = new BitSet(new ulong[]{0x2UL,0x0UL,0x80040UL});
		public static readonly BitSet _145_in_column628 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_column642 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_column645 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _SIMPLE_FILE_in_column647 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INTO_in_into_clause670 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_into_clause672 = new BitSet(new ulong[]{0x40000000000000UL,0x0UL,0x20000000UL});
		public static readonly BitSet _file_in_into_clause674 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FROM_in_from_clause694 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_from_clause696 = new BitSet(new ulong[]{0x1140000000000000UL,0x0UL,0x20008000UL});
		public static readonly BitSet _from_clause_item_in_from_clause698 = new BitSet(new ulong[]{0x2UL,0x0UL,0x80040UL});
		public static readonly BitSet _WS_in_from_clause701 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _147_in_from_clause704 = new BitSet(new ulong[]{0x1140000000000000UL,0x0UL,0x20008040UL});
		public static readonly BitSet _WS_in_from_clause706 = new BitSet(new ulong[]{0x1140000000000000UL,0x0UL,0x20008000UL});
		public static readonly BitSet _from_clause_item_in_from_clause709 = new BitSet(new ulong[]{0x2UL,0x0UL,0x80040UL});
		public static readonly BitSet _STRING_in_from_clause_item732 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _file_in_from_clause_item745 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _subquery_in_from_clause_item750 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _view_name_in_from_clause_item755 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _143_in_subquery767 = new BitSet(new ulong[]{0x10000000000000UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_subquery769 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _select_command_in_subquery772 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10040UL});
		public static readonly BitSet _WS_in_subquery774 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _144_in_subquery777 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _157_in_file796 = new BitSet(new ulong[]{0x100000000000000UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_file798 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _STRING_in_file801 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000040UL});
		public static readonly BitSet _WS_in_file804 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000UL});
		public static readonly BitSet _file_option_in_file806 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000040UL});
		public static readonly BitSet _WS_in_file810 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _158_in_file813 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SIMPLE_FILE_in_file830 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _148_in_file_option849 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _file_option_name_in_file_option851 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4000040UL});
		public static readonly BitSet _WS_in_file_option855 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _154_in_file_option858 = new BitSet(new ulong[]{0x1100100000000000UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_file_option860 = new BitSet(new ulong[]{0x1100100000000000UL});
		public static readonly BitSet _file_option_value_in_file_option863 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_file_option_name887 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHERE_in_where_clause919 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_where_clause921 = new BitSet(new ulong[]{0x134018000802C000UL,0x0UL,0x8002UL});
		public static readonly BitSet _expression_in_where_clause923 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GROUP_in_groupby_clause942 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_groupby_clause944 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _BY_in_groupby_clause946 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_groupby_clause948 = new BitSet(new ulong[]{0x134018000802C000UL,0x0UL,0x8002UL});
		public static readonly BitSet _expression_list_in_groupby_clause950 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ORDER_in_orderby_clause971 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_orderby_clause973 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _BY_in_orderby_clause975 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_orderby_clause977 = new BitSet(new ulong[]{0x134018000802C000UL,0x0UL,0x8002UL});
		public static readonly BitSet _orderby_column_list_in_orderby_clause979 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _orderby_column_in_orderby_column_list1000 = new BitSet(new ulong[]{0x2UL,0x0UL,0x80040UL});
		public static readonly BitSet _WS_in_orderby_column_list1003 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _147_in_orderby_column_list1006 = new BitSet(new ulong[]{0x134018000802C000UL,0x0UL,0x8042UL});
		public static readonly BitSet _WS_in_orderby_column_list1008 = new BitSet(new ulong[]{0x134018000802C000UL,0x0UL,0x8002UL});
		public static readonly BitSet _orderby_column_in_orderby_column_list1011 = new BitSet(new ulong[]{0x2UL,0x0UL,0x80040UL});
		public static readonly BitSet _expression_in_orderby_column1031 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_orderby_column1034 = new BitSet(new ulong[]{0x200200UL});
		public static readonly BitSet _orderby_direction_in_orderby_column1036 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASC_in_orderby_direction1061 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DESC_in_orderby_direction1070 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _USE_in_use_command1088 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_use_command1090 = new BitSet(new ulong[]{0x40000000000000UL,0x0UL,0x20000000UL});
		public static readonly BitSet _file_in_use_command1092 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DECLARE_in_declare_command1114 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_declare_command1116 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2UL});
		public static readonly BitSet _declaration_in_declare_command1118 = new BitSet(new ulong[]{0x2UL,0x0UL,0x80040UL});
		public static readonly BitSet _WS_in_declare_command1121 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _147_in_declare_command1124 = new BitSet(new ulong[]{0x0UL,0x0UL,0x42UL});
		public static readonly BitSet _WS_in_declare_command1126 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2UL});
		public static readonly BitSet _declaration_in_declare_command1129 = new BitSet(new ulong[]{0x2UL,0x0UL,0x80040UL});
		public static readonly BitSet _variable_in_declaration1153 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_declaration1155 = new BitSet(new ulong[]{0x1000000000000100UL});
		public static readonly BitSet _AS_in_declaration1158 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_declaration1160 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _datatype_in_declaration1164 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CREATE_in_create_view_command1189 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_create_view_command1191 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4UL});
		public static readonly BitSet _VIEW_in_create_view_command1193 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_create_view_command1195 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _view_name_in_create_view_command1197 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_create_view_command1199 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _AS_in_create_view_command1201 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_create_view_command1203 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _select_command_in_create_view_command1205 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_view_name1228 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SET_in_set_command1252 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_set_command1254 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2UL});
		public static readonly BitSet _variable_in_set_command1256 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000040UL});
		public static readonly BitSet _WS_in_set_command1258 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _154_in_set_command1261 = new BitSet(new ulong[]{0x134018000802C000UL,0x0UL,0x8042UL});
		public static readonly BitSet _WS_in_set_command1263 = new BitSet(new ulong[]{0x134018000802C000UL,0x0UL,0x8002UL});
		public static readonly BitSet _expression_in_set_command1266 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_expression_list1291 = new BitSet(new ulong[]{0x2UL,0x0UL,0x80040UL});
		public static readonly BitSet _WS_in_expression_list1294 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _147_in_expression_list1297 = new BitSet(new ulong[]{0x134018000802C000UL,0x0UL,0x8042UL});
		public static readonly BitSet _WS_in_expression_list1299 = new BitSet(new ulong[]{0x134018000802C000UL,0x0UL,0x8002UL});
		public static readonly BitSet _expression_in_expression_list1302 = new BitSet(new ulong[]{0x2UL,0x0UL,0x80040UL});
		public static readonly BitSet _expression_list_in_expression_list_or_select_command1325 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _select_command_in_expression_list_or_select_command1329 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_7_in_expression1341 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_6_in_expression_71357 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_expression_71364 = new BitSet(new ulong[]{0x4A8400000800UL,0x0UL,0x1F801C00UL});
		public static readonly BitSet _op_7_in_expression_71369 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_expression_71371 = new BitSet(new ulong[]{0x134018000802C000UL,0x0UL,0x8002UL});
		public static readonly BitSet _expression_6_in_expression_71375 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40UL});
		public static readonly BitSet _IN_in_expression_71394 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8040UL});
		public static readonly BitSet _WS_in_expression_71396 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000UL});
		public static readonly BitSet _143_in_expression_71399 = new BitSet(new ulong[]{0x135018000802C000UL,0x0UL,0x8042UL});
		public static readonly BitSet _WS_in_expression_71401 = new BitSet(new ulong[]{0x135018000802C000UL,0x0UL,0x8002UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_71404 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10040UL});
		public static readonly BitSet _WS_in_expression_71406 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _144_in_expression_71409 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40UL});
		public static readonly BitSet _NOT_in_expression_71427 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_expression_71429 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _IN_in_expression_71431 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8040UL});
		public static readonly BitSet _WS_in_expression_71433 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000UL});
		public static readonly BitSet _143_in_expression_71436 = new BitSet(new ulong[]{0x135018000802C000UL,0x0UL,0x8042UL});
		public static readonly BitSet _WS_in_expression_71438 = new BitSet(new ulong[]{0x135018000802C000UL,0x0UL,0x8002UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_71442 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10040UL});
		public static readonly BitSet _WS_in_expression_71445 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _144_in_expression_71448 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40UL});
		public static readonly BitSet _op_4_in_expression_71466 = new BitSet(new ulong[]{0x80000000000080UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_expression_71468 = new BitSet(new ulong[]{0x80000000000080UL});
		public static readonly BitSet _SOME_in_expression_71472 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8040UL});
		public static readonly BitSet _ANY_in_expression_71476 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8040UL});
		public static readonly BitSet _WS_in_expression_71479 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000UL});
		public static readonly BitSet _143_in_expression_71482 = new BitSet(new ulong[]{0x135018000802C000UL,0x0UL,0x8002UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_71484 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _144_in_expression_71486 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40UL});
		public static readonly BitSet _op_4_in_expression_71506 = new BitSet(new ulong[]{0x20UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_expression_71508 = new BitSet(new ulong[]{0x20UL});
		public static readonly BitSet _ALL_in_expression_71511 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8040UL});
		public static readonly BitSet _WS_in_expression_71513 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000UL});
		public static readonly BitSet _143_in_expression_71516 = new BitSet(new ulong[]{0x135018000802C000UL,0x0UL,0x8002UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_71518 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _144_in_expression_71520 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40UL});
		public static readonly BitSet _OR_in_op_71550 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LIKE_in_op_71559 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_71568 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_op_71570 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _LIKE_in_op_71572 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MATCH_in_op_71581 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_71590 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_op_71592 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _MATCH_in_op_71594 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BETWEEN_in_op_71603 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_71612 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_op_71614 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _BETWEEN_in_op_71616 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_5_in_expression_61635 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_expression_61642 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _op_6_in_expression_61644 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_expression_61646 = new BitSet(new ulong[]{0x134018000802C000UL,0x0UL,0x8002UL});
		public static readonly BitSet _expression_5_in_expression_61650 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40UL});
		public static readonly BitSet _AND_in_op_61678 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _op_5_in_expression_51696 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_expression_51698 = new BitSet(new ulong[]{0x134018000802C000UL,0x0UL,0x8002UL});
		public static readonly BitSet _expression_5_in_expression_51700 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_4_in_expression_51715 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_51726 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_3_in_expression_41745 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1F801C40UL});
		public static readonly BitSet _WS_in_expression_41752 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1F801C00UL});
		public static readonly BitSet _op_4_in_expression_41755 = new BitSet(new ulong[]{0x134010000802C000UL,0x0UL,0x8042UL});
		public static readonly BitSet _WS_in_expression_41757 = new BitSet(new ulong[]{0x134010000802C000UL,0x0UL,0x8002UL});
		public static readonly BitSet _expression_3_in_expression_41762 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1F801C40UL});
		public static readonly BitSet _154_in_op_41788 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _156_in_op_41797 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _152_in_op_41807 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _153_in_op_41817 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _139_in_op_41826 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _140_in_op_41835 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _138_in_op_41844 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _155_in_op_41853 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _151_in_op_41863 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_2_in_expression_31882 = new BitSet(new ulong[]{0x2UL,0x0UL,0x180144040UL});
		public static readonly BitSet _WS_in_expression_31889 = new BitSet(new ulong[]{0x0UL,0x0UL,0x180144000UL});
		public static readonly BitSet _op_3_in_expression_31892 = new BitSet(new ulong[]{0x134010000802C000UL,0x0UL,0x8042UL});
		public static readonly BitSet _WS_in_expression_31894 = new BitSet(new ulong[]{0x134010000802C000UL,0x0UL,0x8002UL});
		public static readonly BitSet _expression_2_in_expression_31899 = new BitSet(new ulong[]{0x2UL,0x0UL,0x180144040UL});
		public static readonly BitSet _146_in_op_31925 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _148_in_op_31934 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _142_in_op_31943 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _160_in_op_31952 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _159_in_op_31961 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_1_in_expression_21983 = new BitSet(new ulong[]{0x2UL,0x0UL,0x222040UL});
		public static readonly BitSet _WS_in_expression_21990 = new BitSet(new ulong[]{0x0UL,0x0UL,0x222000UL});
		public static readonly BitSet _op_2_in_expression_21993 = new BitSet(new ulong[]{0x134010000802C000UL,0x0UL,0x8042UL});
		public static readonly BitSet _WS_in_expression_21995 = new BitSet(new ulong[]{0x134010000802C000UL,0x0UL,0x8002UL});
		public static readonly BitSet _expression_1_in_expression_22000 = new BitSet(new ulong[]{0x2UL,0x0UL,0x222040UL});
		public static readonly BitSet _145_in_op_22026 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _149_in_op_22035 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _141_in_op_22044 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _143_in_expression_12062 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200140040UL});
		public static readonly BitSet _WS_in_expression_12064 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200140000UL});
		public static readonly BitSet _op_1_in_expression_12067 = new BitSet(new ulong[]{0x134010000802C000UL,0x0UL,0x8042UL});
		public static readonly BitSet _WS_in_expression_12069 = new BitSet(new ulong[]{0x134010000802C000UL,0x0UL,0x8002UL});
		public static readonly BitSet _expression_1_in_expression_12072 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10040UL});
		public static readonly BitSet _WS_in_expression_12074 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _144_in_expression_12077 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_atom_in_expression_12094 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _161_in_op_12104 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _146_in_op_12114 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _148_in_op_12123 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_expression_atom2138 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_expression_atom2151 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SYSTEMVAR_in_expression_atom2164 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VARIABLE_in_expression_atom2177 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _subquery_in_expression_atom2190 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _143_in_expression_atom2195 = new BitSet(new ulong[]{0x134018000802C000UL,0x0UL,0x8002UL});
		public static readonly BitSet _expression_in_expression_atom2197 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _144_in_expression_atom2199 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functioncall_or_column_in_expression_atom2208 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conversion_in_expression_atom2213 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _case_in_expression_atom2218 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXISTS_in_expression_atom2223 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8040UL});
		public static readonly BitSet _WS_in_expression_atom2225 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000UL});
		public static readonly BitSet _143_in_expression_atom2228 = new BitSet(new ulong[]{0x10000000000000UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_expression_atom2230 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _select_command_in_expression_atom2233 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10040UL});
		public static readonly BitSet _WS_in_expression_atom2235 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _144_in_expression_atom2238 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_functioncall_or_column2258 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8040UL});
		public static readonly BitSet _WS_in_functioncall_or_column2260 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000UL});
		public static readonly BitSet _143_in_functioncall_or_column2263 = new BitSet(new ulong[]{0x134018000802C000UL,0x0UL,0x18042UL});
		public static readonly BitSet _WS_in_functioncall_or_column2265 = new BitSet(new ulong[]{0x134018000802C000UL,0x0UL,0x18002UL});
		public static readonly BitSet _expression_in_functioncall_or_column2269 = new BitSet(new ulong[]{0x0UL,0x0UL,0x90040UL});
		public static readonly BitSet _WS_in_functioncall_or_column2271 = new BitSet(new ulong[]{0x0UL,0x0UL,0x90000UL});
		public static readonly BitSet _147_in_functioncall_or_column2275 = new BitSet(new ulong[]{0x134018000802C000UL,0x0UL,0x8042UL});
		public static readonly BitSet _WS_in_functioncall_or_column2277 = new BitSet(new ulong[]{0x134018000802C000UL,0x0UL,0x8002UL});
		public static readonly BitSet _expression_in_functioncall_or_column2280 = new BitSet(new ulong[]{0x0UL,0x0UL,0x90040UL});
		public static readonly BitSet _WS_in_functioncall_or_column2282 = new BitSet(new ulong[]{0x0UL,0x0UL,0x90000UL});
		public static readonly BitSet _144_in_functioncall_or_column2289 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SIMPLE_FILE_in_functioncall_or_column2307 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CONVERT_in_conversion2327 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8040UL});
		public static readonly BitSet _WS_in_conversion2329 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000UL});
		public static readonly BitSet _143_in_conversion2332 = new BitSet(new ulong[]{0x1000000000000000UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_conversion2334 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _TOKEN_in_conversion2337 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80040UL});
		public static readonly BitSet _WS_in_conversion2339 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _147_in_conversion2342 = new BitSet(new ulong[]{0x134018000802C000UL,0x0UL,0x8042UL});
		public static readonly BitSet _WS_in_conversion2344 = new BitSet(new ulong[]{0x134018000802C000UL,0x0UL,0x8002UL});
		public static readonly BitSet _expression_in_conversion2347 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10040UL});
		public static readonly BitSet _WS_in_conversion2349 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _144_in_conversion2352 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CAST_in_conversion2367 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8040UL});
		public static readonly BitSet _WS_in_conversion2369 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000UL});
		public static readonly BitSet _143_in_conversion2372 = new BitSet(new ulong[]{0x134018000802C000UL,0x0UL,0x8042UL});
		public static readonly BitSet _WS_in_conversion2374 = new BitSet(new ulong[]{0x134018000802C000UL,0x0UL,0x8002UL});
		public static readonly BitSet _expression_in_conversion2377 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_conversion2379 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _AS_in_conversion2381 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_conversion2383 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _datatype_in_conversion2385 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10040UL});
		public static readonly BitSet _WS_in_conversion2387 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _144_in_conversion2390 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_datatype2412 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VARIABLE_in_variable2424 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CASE_in_case2436 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_case2438 = new BitSet(new ulong[]{0x134018000E02C000UL,0x0UL,0x8012UL});
		public static readonly BitSet _expression_in_case2441 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_case2443 = new BitSet(new ulong[]{0x6000000UL,0x0UL,0x10UL});
		public static readonly BitSet _case_when_in_case2448 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_case2450 = new BitSet(new ulong[]{0x6000000UL,0x0UL,0x10UL});
		public static readonly BitSet _case_else_in_case2455 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_case2457 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _END_in_case2461 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHEN_in_case_when2489 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_case_when2491 = new BitSet(new ulong[]{0x134018000802C000UL,0x0UL,0x8002UL});
		public static readonly BitSet _expression_in_case_when2495 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_case_when2497 = new BitSet(new ulong[]{0x800000000000000UL});
		public static readonly BitSet _THEN_in_case_when2499 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_case_when2501 = new BitSet(new ulong[]{0x134018000802C000UL,0x0UL,0x8002UL});
		public static readonly BitSet _expression_in_case_when2505 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ELSE_in_case_else2530 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _WS_in_case_else2532 = new BitSet(new ulong[]{0x134018000802C000UL,0x0UL,0x8002UL});
		public static readonly BitSet _expression_in_case_else2534 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  FxGqlLib 
