//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g 2012-03-26 22:05:45

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591


// `XXX' does not need a CLSCompliant attribute because the assembly is not marked as CLS-compliant (CS3021)
#pragma warning disable 3021
// The private field `XXX' is assigned but its value is never used (CS0414)
#pragma warning disable 414


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  FxGqlLib 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class gqlParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "A", "ALL", "AND", "ANY", "AS", "ASC", "B", "BETWEEN", "BY", "C", "CAST", "COMMENT_LINE", "CONVERT", "D", "DESC", "DIGIT", "DISTINCT", "E", "EXISTS", "F", "FROM", "G", "GROUP", "H", "I", "IN", "INTO", "J", "K", "L", "LIKE", "M", "MATCH", "N", "NOT", "NUMBER", "O", "OR", "ORDER", "P", "Q", "R", "S", "SELECT", "SIMPLE_FILE", "SOME", "STRING", "SYSTEMVAR", "T", "TOKEN", "TOP", "T_ALL", "T_AND", "T_ANY", "T_BETWEEN", "T_BITWISE_AND", "T_BITWISE_NOT", "T_BITWISE_OR", "T_BITWISE_XOR", "T_COLUMN", "T_COLUMNLIST", "T_CONVERT", "T_DISTINCT", "T_DIVIDE", "T_EQUAL", "T_EXISTS", "T_EXPRESSIONLIST", "T_FILE", "T_FILEOPTION", "T_FROM", "T_FUNCTIONCALL", "T_GREATER", "T_GROUPBY", "T_IN", "T_INTEGER", "T_INTO", "T_LESS", "T_LIKE", "T_MATCH", "T_MINUS", "T_MODULO", "T_NOT", "T_NOTBETWEEN", "T_NOTEQUAL", "T_NOTGREATER", "T_NOTIN", "T_NOTLESS", "T_NOTLIKE", "T_NOTMATCH", "T_OP_BINARY", "T_OP_UNARY", "T_OR", "T_ORDERBY", "T_ORDERBY_ASC", "T_ORDERBY_COLUMN", "T_ORDERBY_DESC", "T_PLUS", "T_PRODUCT", "T_ROOT", "T_SELECT", "T_STRING", "T_SUBQUERY", "T_SYSTEMVAR", "T_TOP", "T_WHERE", "U", "V", "W", "WHERE", "WS", "X", "Y", "Z", "'!<'", "'!='", "'!>'", "'%'", "'&'", "'('", "')'", "'*'", "'+'", "','", "'-'", "'/'", "';'", "'<'", "'<='", "'<>'", "'='", "'>'", "'>='", "'['", "']'", "'^'", "'|'", "'~'"
	};
	public const int EOF=-1;
	public const int T__117=117;
	public const int T__118=118;
	public const int T__119=119;
	public const int T__120=120;
	public const int T__121=121;
	public const int T__122=122;
	public const int T__123=123;
	public const int T__124=124;
	public const int T__125=125;
	public const int T__126=126;
	public const int T__127=127;
	public const int T__128=128;
	public const int T__129=129;
	public const int T__130=130;
	public const int T__131=131;
	public const int T__132=132;
	public const int T__133=133;
	public const int T__134=134;
	public const int T__135=135;
	public const int T__136=136;
	public const int T__137=137;
	public const int T__138=138;
	public const int T__139=139;
	public const int T__140=140;
	public const int A=4;
	public const int ALL=5;
	public const int AND=6;
	public const int ANY=7;
	public const int AS=8;
	public const int ASC=9;
	public const int B=10;
	public const int BETWEEN=11;
	public const int BY=12;
	public const int C=13;
	public const int CAST=14;
	public const int COMMENT_LINE=15;
	public const int CONVERT=16;
	public const int D=17;
	public const int DESC=18;
	public const int DIGIT=19;
	public const int DISTINCT=20;
	public const int E=21;
	public const int EXISTS=22;
	public const int F=23;
	public const int FROM=24;
	public const int G=25;
	public const int GROUP=26;
	public const int H=27;
	public const int I=28;
	public const int IN=29;
	public const int INTO=30;
	public const int J=31;
	public const int K=32;
	public const int L=33;
	public const int LIKE=34;
	public const int M=35;
	public const int MATCH=36;
	public const int N=37;
	public const int NOT=38;
	public const int NUMBER=39;
	public const int O=40;
	public const int OR=41;
	public const int ORDER=42;
	public const int P=43;
	public const int Q=44;
	public const int R=45;
	public const int S=46;
	public const int SELECT=47;
	public const int SIMPLE_FILE=48;
	public const int SOME=49;
	public const int STRING=50;
	public const int SYSTEMVAR=51;
	public const int T=52;
	public const int TOKEN=53;
	public const int TOP=54;
	public const int T_ALL=55;
	public const int T_AND=56;
	public const int T_ANY=57;
	public const int T_BETWEEN=58;
	public const int T_BITWISE_AND=59;
	public const int T_BITWISE_NOT=60;
	public const int T_BITWISE_OR=61;
	public const int T_BITWISE_XOR=62;
	public const int T_COLUMN=63;
	public const int T_COLUMNLIST=64;
	public const int T_CONVERT=65;
	public const int T_DISTINCT=66;
	public const int T_DIVIDE=67;
	public const int T_EQUAL=68;
	public const int T_EXISTS=69;
	public const int T_EXPRESSIONLIST=70;
	public const int T_FILE=71;
	public const int T_FILEOPTION=72;
	public const int T_FROM=73;
	public const int T_FUNCTIONCALL=74;
	public const int T_GREATER=75;
	public const int T_GROUPBY=76;
	public const int T_IN=77;
	public const int T_INTEGER=78;
	public const int T_INTO=79;
	public const int T_LESS=80;
	public const int T_LIKE=81;
	public const int T_MATCH=82;
	public const int T_MINUS=83;
	public const int T_MODULO=84;
	public const int T_NOT=85;
	public const int T_NOTBETWEEN=86;
	public const int T_NOTEQUAL=87;
	public const int T_NOTGREATER=88;
	public const int T_NOTIN=89;
	public const int T_NOTLESS=90;
	public const int T_NOTLIKE=91;
	public const int T_NOTMATCH=92;
	public const int T_OP_BINARY=93;
	public const int T_OP_UNARY=94;
	public const int T_OR=95;
	public const int T_ORDERBY=96;
	public const int T_ORDERBY_ASC=97;
	public const int T_ORDERBY_COLUMN=98;
	public const int T_ORDERBY_DESC=99;
	public const int T_PLUS=100;
	public const int T_PRODUCT=101;
	public const int T_ROOT=102;
	public const int T_SELECT=103;
	public const int T_STRING=104;
	public const int T_SUBQUERY=105;
	public const int T_SYSTEMVAR=106;
	public const int T_TOP=107;
	public const int T_WHERE=108;
	public const int U=109;
	public const int V=110;
	public const int W=111;
	public const int WHERE=112;
	public const int WS=113;
	public const int X=114;
	public const int Y=115;
	public const int Z=116;

	#if ANTLR_DEBUG
		private static readonly bool[] decisionCanBacktrack =
			new bool[]
			{
				false, // invalid decision
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false
			};
	#else
		private static readonly bool[] decisionCanBacktrack = new bool[0];
	#endif
	public gqlParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public gqlParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}
	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return gqlParser.tokenNames; } }
	public override string GrammarFileName { get { return "/home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g"; } }


	[Conditional("ANTLR_TRACE")]
	protected virtual void OnCreated() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

	#region Rules

	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_parse() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_parse() {}

	// $ANTLR start "parse"
	// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:85:1: parse : ( WS )? ( commands ( WS )? )? EOF -> ^( T_ROOT ( commands )? ) ;
	[GrammarRule("parse")]
	private AstParserRuleReturnScope<object, IToken> parse()
	{
		EnterRule_parse();
		EnterRule("parse", 1);
		TraceIn("parse", 1);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS1 = default(IToken);
	    IToken WS3 = default(IToken);
	    IToken EOF4 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> commands2 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS1_tree = default(object);
	    object WS3_tree = default(object);
	    object EOF4_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
	    RewriteRuleSubtreeStream stream_commands=new RewriteRuleSubtreeStream(adaptor,"rule commands");
		try { DebugEnterRule(GrammarFileName, "parse");
		DebugLocation(85, 1);
		try
		{
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:86:2: ( ( WS )? ( commands ( WS )? )? EOF -> ^( T_ROOT ( commands )? ) )
			DebugEnterAlt(1);
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:86:4: ( WS )? ( commands ( WS )? )? EOF
			{
			DebugLocation(86, 4);
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:86:4: ( WS )?
			int alt1=2;
			try { DebugEnterSubRule(1);
			try { DebugEnterDecision(1, decisionCanBacktrack[1]);
			int LA1_0 = input.LA(1);

			if ((LA1_0==WS))
			{
				alt1 = 1;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:86:4: WS
				{
				DebugLocation(86, 4);
				WS1=(IToken)Match(input,WS,Follow._WS_in_parse296);  
				stream_WS.Add(WS1);


				}
				break;

			}
			} finally { DebugExitSubRule(1); }

			DebugLocation(86, 8);
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:86:8: ( commands ( WS )? )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, decisionCanBacktrack[3]);
			int LA3_0 = input.LA(1);

			if ((LA3_0==SELECT))
			{
				alt3 = 1;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:86:9: commands ( WS )?
				{
				DebugLocation(86, 9);
				PushFollow(Follow._commands_in_parse300);
				commands2=commands();
				PopFollow();

				stream_commands.Add(commands2.Tree);
				DebugLocation(86, 18);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:86:18: ( WS )?
				int alt2=2;
				try { DebugEnterSubRule(2);
				try { DebugEnterDecision(2, decisionCanBacktrack[2]);
				int LA2_0 = input.LA(1);

				if ((LA2_0==WS))
				{
					alt2 = 1;
				}
				} finally { DebugExitDecision(2); }
				switch (alt2)
				{
				case 1:
					DebugEnterAlt(1);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:86:18: WS
					{
					DebugLocation(86, 18);
					WS3=(IToken)Match(input,WS,Follow._WS_in_parse302);  
					stream_WS.Add(WS3);


					}
					break;

				}
				} finally { DebugExitSubRule(2); }


				}
				break;

			}
			} finally { DebugExitSubRule(3); }

			DebugLocation(86, 24);
			EOF4=(IToken)Match(input,EOF,Follow._EOF_in_parse307);  
			stream_EOF.Add(EOF4);



			{
			// AST REWRITE
			// elements: commands
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 87:2: -> ^( T_ROOT ( commands )? )
			{
				DebugLocation(87, 5);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:87:5: ^( T_ROOT ( commands )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(87, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_ROOT, "T_ROOT"), root_1);

				DebugLocation(87, 14);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:87:14: ( commands )?
				if (stream_commands.HasNext)
				{
					DebugLocation(87, 14);
					adaptor.AddChild(root_1, stream_commands.NextTree());

				}
				stream_commands.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parse", 1);
			LeaveRule("parse", 1);
			LeaveRule_parse();
	    }
	 	DebugLocation(88, 1);
		} finally { DebugExitRule(GrammarFileName, "parse"); }
		return retval;

	}
	// $ANTLR end "parse"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_commands() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_commands() {}

	// $ANTLR start "commands"
	// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:90:1: commands : command ( ( WS )? ( ';' ( WS )? )? command )* -> ( command )+ ;
	[GrammarRule("commands")]
	private AstParserRuleReturnScope<object, IToken> commands()
	{
		EnterRule_commands();
		EnterRule("commands", 2);
		TraceIn("commands", 2);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS6 = default(IToken);
	    IToken char_literal7 = default(IToken);
	    IToken WS8 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> command5 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> command9 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS6_tree = default(object);
	    object char_literal7_tree = default(object);
	    object WS8_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_129=new RewriteRuleITokenStream(adaptor,"token 129");
	    RewriteRuleSubtreeStream stream_command=new RewriteRuleSubtreeStream(adaptor,"rule command");
		try { DebugEnterRule(GrammarFileName, "commands");
		DebugLocation(90, 1);
		try
		{
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:91:2: ( command ( ( WS )? ( ';' ( WS )? )? command )* -> ( command )+ )
			DebugEnterAlt(1);
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:91:4: command ( ( WS )? ( ';' ( WS )? )? command )*
			{
			DebugLocation(91, 4);
			PushFollow(Follow._command_in_commands330);
			command5=command();
			PopFollow();

			stream_command.Add(command5.Tree);
			DebugLocation(91, 12);
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:91:12: ( ( WS )? ( ';' ( WS )? )? command )*
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, decisionCanBacktrack[7]);
				int LA7_0 = input.LA(1);

				if ((LA7_0==WS))
				{
					int LA7_1 = input.LA(2);

					if ((LA7_1==SELECT||LA7_1==129))
					{
						alt7 = 1;
					}


				}
				else if ((LA7_0==SELECT||LA7_0==129))
				{
					alt7 = 1;
				}


				} finally { DebugExitDecision(7); }
				switch ( alt7 )
				{
				case 1:
					DebugEnterAlt(1);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:91:13: ( WS )? ( ';' ( WS )? )? command
					{
					DebugLocation(91, 13);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:91:13: ( WS )?
					int alt4=2;
					try { DebugEnterSubRule(4);
					try { DebugEnterDecision(4, decisionCanBacktrack[4]);
					int LA4_0 = input.LA(1);

					if ((LA4_0==WS))
					{
						alt4 = 1;
					}
					} finally { DebugExitDecision(4); }
					switch (alt4)
					{
					case 1:
						DebugEnterAlt(1);
						// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:91:13: WS
						{
						DebugLocation(91, 13);
						WS6=(IToken)Match(input,WS,Follow._WS_in_commands333);  
						stream_WS.Add(WS6);


						}
						break;

					}
					} finally { DebugExitSubRule(4); }

					DebugLocation(91, 17);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:91:17: ( ';' ( WS )? )?
					int alt6=2;
					try { DebugEnterSubRule(6);
					try { DebugEnterDecision(6, decisionCanBacktrack[6]);
					int LA6_0 = input.LA(1);

					if ((LA6_0==129))
					{
						alt6 = 1;
					}
					} finally { DebugExitDecision(6); }
					switch (alt6)
					{
					case 1:
						DebugEnterAlt(1);
						// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:91:18: ';' ( WS )?
						{
						DebugLocation(91, 18);
						char_literal7=(IToken)Match(input,129,Follow._129_in_commands337);  
						stream_129.Add(char_literal7);

						DebugLocation(91, 22);
						// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:91:22: ( WS )?
						int alt5=2;
						try { DebugEnterSubRule(5);
						try { DebugEnterDecision(5, decisionCanBacktrack[5]);
						int LA5_0 = input.LA(1);

						if ((LA5_0==WS))
						{
							alt5 = 1;
						}
						} finally { DebugExitDecision(5); }
						switch (alt5)
						{
						case 1:
							DebugEnterAlt(1);
							// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:91:22: WS
							{
							DebugLocation(91, 22);
							WS8=(IToken)Match(input,WS,Follow._WS_in_commands339);  
							stream_WS.Add(WS8);


							}
							break;

						}
						} finally { DebugExitSubRule(5); }


						}
						break;

					}
					} finally { DebugExitSubRule(6); }

					DebugLocation(91, 28);
					PushFollow(Follow._command_in_commands344);
					command9=command();
					PopFollow();

					stream_command.Add(command9.Tree);

					}
					break;

				default:
					goto loop7;
				}
			}

			loop7:
				;

			} finally { DebugExitSubRule(7); }



			{
			// AST REWRITE
			// elements: command
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 92:2: -> ( command )+
			{
				DebugLocation(92, 5);
				if (!(stream_command.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_command.HasNext )
				{
					DebugLocation(92, 5);
					adaptor.AddChild(root_0, stream_command.NextTree());

				}
				stream_command.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("commands", 2);
			LeaveRule("commands", 2);
			LeaveRule_commands();
	    }
	 	DebugLocation(93, 1);
		} finally { DebugExitRule(GrammarFileName, "commands"); }
		return retval;

	}
	// $ANTLR end "commands"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_command() {}

	// $ANTLR start "command"
	// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:95:1: command : select_command ;
	[GrammarRule("command")]
	private AstParserRuleReturnScope<object, IToken> command()
	{
		EnterRule_command();
		EnterRule("command", 3);
		TraceIn("command", 3);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> select_command10 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "command");
		DebugLocation(95, 1);
		try
		{
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:96:2: ( select_command )
			DebugEnterAlt(1);
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:96:4: select_command
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(96, 4);
			PushFollow(Follow._select_command_in_command364);
			select_command10=select_command();
			PopFollow();

			adaptor.AddChild(root_0, select_command10.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("command", 3);
			LeaveRule("command", 3);
			LeaveRule_command();
	    }
	 	DebugLocation(97, 1);
		} finally { DebugExitRule(GrammarFileName, "command"); }
		return retval;

	}
	// $ANTLR end "command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_select_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_select_command() {}

	// $ANTLR start "select_command"
	// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:99:1: select_command : SELECT ( WS distinct_clause )? ( WS top_clause )? WS column_list ( WS into_clause )? ( WS from_clause )? ( WS where_clause )? ( WS groupby_clause )? ( WS orderby_clause )? -> ^( T_SELECT ( distinct_clause )? ( top_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( orderby_clause )? ) ;
	[GrammarRule("select_command")]
	private AstParserRuleReturnScope<object, IToken> select_command()
	{
		EnterRule_select_command();
		EnterRule("select_command", 4);
		TraceIn("select_command", 4);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken SELECT11 = default(IToken);
	    IToken WS12 = default(IToken);
	    IToken WS14 = default(IToken);
	    IToken WS16 = default(IToken);
	    IToken WS18 = default(IToken);
	    IToken WS20 = default(IToken);
	    IToken WS22 = default(IToken);
	    IToken WS24 = default(IToken);
	    IToken WS26 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> distinct_clause13 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> top_clause15 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> column_list17 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> into_clause19 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> from_clause21 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> where_clause23 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> groupby_clause25 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> orderby_clause27 = default(AstParserRuleReturnScope<object, IToken>);

	    object SELECT11_tree = default(object);
	    object WS12_tree = default(object);
	    object WS14_tree = default(object);
	    object WS16_tree = default(object);
	    object WS18_tree = default(object);
	    object WS20_tree = default(object);
	    object WS22_tree = default(object);
	    object WS24_tree = default(object);
	    object WS26_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_SELECT=new RewriteRuleITokenStream(adaptor,"token SELECT");
	    RewriteRuleSubtreeStream stream_groupby_clause=new RewriteRuleSubtreeStream(adaptor,"rule groupby_clause");
	    RewriteRuleSubtreeStream stream_distinct_clause=new RewriteRuleSubtreeStream(adaptor,"rule distinct_clause");
	    RewriteRuleSubtreeStream stream_from_clause=new RewriteRuleSubtreeStream(adaptor,"rule from_clause");
	    RewriteRuleSubtreeStream stream_column_list=new RewriteRuleSubtreeStream(adaptor,"rule column_list");
	    RewriteRuleSubtreeStream stream_where_clause=new RewriteRuleSubtreeStream(adaptor,"rule where_clause");
	    RewriteRuleSubtreeStream stream_into_clause=new RewriteRuleSubtreeStream(adaptor,"rule into_clause");
	    RewriteRuleSubtreeStream stream_top_clause=new RewriteRuleSubtreeStream(adaptor,"rule top_clause");
	    RewriteRuleSubtreeStream stream_orderby_clause=new RewriteRuleSubtreeStream(adaptor,"rule orderby_clause");
		try { DebugEnterRule(GrammarFileName, "select_command");
		DebugLocation(99, 1);
		try
		{
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:100:2: ( SELECT ( WS distinct_clause )? ( WS top_clause )? WS column_list ( WS into_clause )? ( WS from_clause )? ( WS where_clause )? ( WS groupby_clause )? ( WS orderby_clause )? -> ^( T_SELECT ( distinct_clause )? ( top_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( orderby_clause )? ) )
			DebugEnterAlt(1);
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:100:4: SELECT ( WS distinct_clause )? ( WS top_clause )? WS column_list ( WS into_clause )? ( WS from_clause )? ( WS where_clause )? ( WS groupby_clause )? ( WS orderby_clause )?
			{
			DebugLocation(100, 4);
			SELECT11=(IToken)Match(input,SELECT,Follow._SELECT_in_select_command375);  
			stream_SELECT.Add(SELECT11);

			DebugLocation(100, 11);
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:100:11: ( WS distinct_clause )?
			int alt8=2;
			try { DebugEnterSubRule(8);
			try { DebugEnterDecision(8, decisionCanBacktrack[8]);
			int LA8_0 = input.LA(1);

			if ((LA8_0==WS))
			{
				int LA8_1 = input.LA(2);

				if ((LA8_1==ALL||LA8_1==DISTINCT))
				{
					alt8 = 1;
				}
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:100:12: WS distinct_clause
				{
				DebugLocation(100, 12);
				WS12=(IToken)Match(input,WS,Follow._WS_in_select_command378);  
				stream_WS.Add(WS12);

				DebugLocation(100, 15);
				PushFollow(Follow._distinct_clause_in_select_command380);
				distinct_clause13=distinct_clause();
				PopFollow();

				stream_distinct_clause.Add(distinct_clause13.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(8); }

			DebugLocation(100, 33);
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:100:33: ( WS top_clause )?
			int alt9=2;
			try { DebugEnterSubRule(9);
			try { DebugEnterDecision(9, decisionCanBacktrack[9]);
			int LA9_0 = input.LA(1);

			if ((LA9_0==WS))
			{
				int LA9_1 = input.LA(2);

				if ((LA9_1==TOP))
				{
					alt9 = 1;
				}
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:100:34: WS top_clause
				{
				DebugLocation(100, 34);
				WS14=(IToken)Match(input,WS,Follow._WS_in_select_command385);  
				stream_WS.Add(WS14);

				DebugLocation(100, 37);
				PushFollow(Follow._top_clause_in_select_command387);
				top_clause15=top_clause();
				PopFollow();

				stream_top_clause.Add(top_clause15.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(9); }

			DebugLocation(100, 50);
			WS16=(IToken)Match(input,WS,Follow._WS_in_select_command391);  
			stream_WS.Add(WS16);

			DebugLocation(100, 53);
			PushFollow(Follow._column_list_in_select_command393);
			column_list17=column_list();
			PopFollow();

			stream_column_list.Add(column_list17.Tree);
			DebugLocation(100, 65);
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:100:65: ( WS into_clause )?
			int alt10=2;
			try { DebugEnterSubRule(10);
			try { DebugEnterDecision(10, decisionCanBacktrack[10]);
			int LA10_0 = input.LA(1);

			if ((LA10_0==WS))
			{
				int LA10_1 = input.LA(2);

				if ((LA10_1==INTO))
				{
					alt10 = 1;
				}
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:100:66: WS into_clause
				{
				DebugLocation(100, 66);
				WS18=(IToken)Match(input,WS,Follow._WS_in_select_command396);  
				stream_WS.Add(WS18);

				DebugLocation(100, 69);
				PushFollow(Follow._into_clause_in_select_command398);
				into_clause19=into_clause();
				PopFollow();

				stream_into_clause.Add(into_clause19.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(10); }

			DebugLocation(100, 83);
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:100:83: ( WS from_clause )?
			int alt11=2;
			try { DebugEnterSubRule(11);
			try { DebugEnterDecision(11, decisionCanBacktrack[11]);
			int LA11_0 = input.LA(1);

			if ((LA11_0==WS))
			{
				int LA11_1 = input.LA(2);

				if ((LA11_1==FROM))
				{
					alt11 = 1;
				}
			}
			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:100:84: WS from_clause
				{
				DebugLocation(100, 84);
				WS20=(IToken)Match(input,WS,Follow._WS_in_select_command403);  
				stream_WS.Add(WS20);

				DebugLocation(100, 87);
				PushFollow(Follow._from_clause_in_select_command405);
				from_clause21=from_clause();
				PopFollow();

				stream_from_clause.Add(from_clause21.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(11); }

			DebugLocation(100, 101);
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:100:101: ( WS where_clause )?
			int alt12=2;
			try { DebugEnterSubRule(12);
			try { DebugEnterDecision(12, decisionCanBacktrack[12]);
			int LA12_0 = input.LA(1);

			if ((LA12_0==WS))
			{
				int LA12_1 = input.LA(2);

				if ((LA12_1==WHERE))
				{
					alt12 = 1;
				}
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:100:102: WS where_clause
				{
				DebugLocation(100, 102);
				WS22=(IToken)Match(input,WS,Follow._WS_in_select_command410);  
				stream_WS.Add(WS22);

				DebugLocation(100, 105);
				PushFollow(Follow._where_clause_in_select_command412);
				where_clause23=where_clause();
				PopFollow();

				stream_where_clause.Add(where_clause23.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(12); }

			DebugLocation(100, 120);
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:100:120: ( WS groupby_clause )?
			int alt13=2;
			try { DebugEnterSubRule(13);
			try { DebugEnterDecision(13, decisionCanBacktrack[13]);
			int LA13_0 = input.LA(1);

			if ((LA13_0==WS))
			{
				int LA13_1 = input.LA(2);

				if ((LA13_1==GROUP))
				{
					alt13 = 1;
				}
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:100:121: WS groupby_clause
				{
				DebugLocation(100, 121);
				WS24=(IToken)Match(input,WS,Follow._WS_in_select_command417);  
				stream_WS.Add(WS24);

				DebugLocation(100, 124);
				PushFollow(Follow._groupby_clause_in_select_command419);
				groupby_clause25=groupby_clause();
				PopFollow();

				stream_groupby_clause.Add(groupby_clause25.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(13); }

			DebugLocation(100, 141);
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:100:141: ( WS orderby_clause )?
			int alt14=2;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, decisionCanBacktrack[14]);
			int LA14_0 = input.LA(1);

			if ((LA14_0==WS))
			{
				int LA14_1 = input.LA(2);

				if ((LA14_1==ORDER))
				{
					alt14 = 1;
				}
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:100:142: WS orderby_clause
				{
				DebugLocation(100, 142);
				WS26=(IToken)Match(input,WS,Follow._WS_in_select_command424);  
				stream_WS.Add(WS26);

				DebugLocation(100, 145);
				PushFollow(Follow._orderby_clause_in_select_command426);
				orderby_clause27=orderby_clause();
				PopFollow();

				stream_orderby_clause.Add(orderby_clause27.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(14); }



			{
			// AST REWRITE
			// elements: where_clause, column_list, into_clause, from_clause, groupby_clause, orderby_clause, top_clause, distinct_clause
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 101:3: -> ^( T_SELECT ( distinct_clause )? ( top_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( orderby_clause )? )
			{
				DebugLocation(101, 6);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:101:6: ^( T_SELECT ( distinct_clause )? ( top_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( orderby_clause )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(101, 8);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SELECT, "T_SELECT"), root_1);

				DebugLocation(101, 17);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:101:17: ( distinct_clause )?
				if (stream_distinct_clause.HasNext)
				{
					DebugLocation(101, 17);
					adaptor.AddChild(root_1, stream_distinct_clause.NextTree());

				}
				stream_distinct_clause.Reset();
				DebugLocation(101, 34);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:101:34: ( top_clause )?
				if (stream_top_clause.HasNext)
				{
					DebugLocation(101, 34);
					adaptor.AddChild(root_1, stream_top_clause.NextTree());

				}
				stream_top_clause.Reset();
				DebugLocation(101, 46);
				adaptor.AddChild(root_1, stream_column_list.NextTree());
				DebugLocation(101, 58);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:101:58: ( into_clause )?
				if (stream_into_clause.HasNext)
				{
					DebugLocation(101, 58);
					adaptor.AddChild(root_1, stream_into_clause.NextTree());

				}
				stream_into_clause.Reset();
				DebugLocation(101, 71);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:101:71: ( from_clause )?
				if (stream_from_clause.HasNext)
				{
					DebugLocation(101, 71);
					adaptor.AddChild(root_1, stream_from_clause.NextTree());

				}
				stream_from_clause.Reset();
				DebugLocation(101, 84);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:101:84: ( where_clause )?
				if (stream_where_clause.HasNext)
				{
					DebugLocation(101, 84);
					adaptor.AddChild(root_1, stream_where_clause.NextTree());

				}
				stream_where_clause.Reset();
				DebugLocation(101, 98);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:101:98: ( groupby_clause )?
				if (stream_groupby_clause.HasNext)
				{
					DebugLocation(101, 98);
					adaptor.AddChild(root_1, stream_groupby_clause.NextTree());

				}
				stream_groupby_clause.Reset();
				DebugLocation(101, 114);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:101:114: ( orderby_clause )?
				if (stream_orderby_clause.HasNext)
				{
					DebugLocation(101, 114);
					adaptor.AddChild(root_1, stream_orderby_clause.NextTree());

				}
				stream_orderby_clause.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("select_command", 4);
			LeaveRule("select_command", 4);
			LeaveRule_select_command();
	    }
	 	DebugLocation(102, 1);
		} finally { DebugExitRule(GrammarFileName, "select_command"); }
		return retval;

	}
	// $ANTLR end "select_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_distinct_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_distinct_clause() {}

	// $ANTLR start "distinct_clause"
	// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:104:1: distinct_clause : ( DISTINCT -> T_DISTINCT | ALL -> T_ALL );
	[GrammarRule("distinct_clause")]
	private AstParserRuleReturnScope<object, IToken> distinct_clause()
	{
		EnterRule_distinct_clause();
		EnterRule("distinct_clause", 5);
		TraceIn("distinct_clause", 5);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken DISTINCT28 = default(IToken);
	    IToken ALL29 = default(IToken);

	    object DISTINCT28_tree = default(object);
	    object ALL29_tree = default(object);
	    RewriteRuleITokenStream stream_DISTINCT=new RewriteRuleITokenStream(adaptor,"token DISTINCT");
	    RewriteRuleITokenStream stream_ALL=new RewriteRuleITokenStream(adaptor,"token ALL");

		try { DebugEnterRule(GrammarFileName, "distinct_clause");
		DebugLocation(104, 1);
		try
		{
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:105:2: ( DISTINCT -> T_DISTINCT | ALL -> T_ALL )
			int alt15=2;
			try { DebugEnterDecision(15, decisionCanBacktrack[15]);
			int LA15_0 = input.LA(1);

			if ((LA15_0==DISTINCT))
			{
				alt15 = 1;
			}
			else if ((LA15_0==ALL))
			{
				alt15 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 15, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:105:4: DISTINCT
				{
				DebugLocation(105, 4);
				DISTINCT28=(IToken)Match(input,DISTINCT,Follow._DISTINCT_in_distinct_clause471);  
				stream_DISTINCT.Add(DISTINCT28);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 105:13: -> T_DISTINCT
				{
					DebugLocation(105, 16);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_DISTINCT, "T_DISTINCT"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:106:4: ALL
				{
				DebugLocation(106, 4);
				ALL29=(IToken)Match(input,ALL,Follow._ALL_in_distinct_clause480);  
				stream_ALL.Add(ALL29);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 106:8: -> T_ALL
				{
					DebugLocation(106, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_ALL, "T_ALL"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("distinct_clause", 5);
			LeaveRule("distinct_clause", 5);
			LeaveRule_distinct_clause();
	    }
	 	DebugLocation(107, 1);
		} finally { DebugExitRule(GrammarFileName, "distinct_clause"); }
		return retval;

	}
	// $ANTLR end "distinct_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_top_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_top_clause() {}

	// $ANTLR start "top_clause"
	// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:109:1: top_clause : TOP WS expression -> ^( T_TOP expression ) ;
	[GrammarRule("top_clause")]
	private AstParserRuleReturnScope<object, IToken> top_clause()
	{
		EnterRule_top_clause();
		EnterRule("top_clause", 6);
		TraceIn("top_clause", 6);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOP30 = default(IToken);
	    IToken WS31 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression32 = default(AstParserRuleReturnScope<object, IToken>);

	    object TOP30_tree = default(object);
	    object WS31_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_TOP=new RewriteRuleITokenStream(adaptor,"token TOP");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "top_clause");
		DebugLocation(109, 1);
		try
		{
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:110:2: ( TOP WS expression -> ^( T_TOP expression ) )
			DebugEnterAlt(1);
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:110:4: TOP WS expression
			{
			DebugLocation(110, 4);
			TOP30=(IToken)Match(input,TOP,Follow._TOP_in_top_clause496);  
			stream_TOP.Add(TOP30);

			DebugLocation(110, 8);
			WS31=(IToken)Match(input,WS,Follow._WS_in_top_clause498);  
			stream_WS.Add(WS31);

			DebugLocation(110, 11);
			PushFollow(Follow._expression_in_top_clause500);
			expression32=expression();
			PopFollow();

			stream_expression.Add(expression32.Tree);


			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 111:2: -> ^( T_TOP expression )
			{
				DebugLocation(111, 5);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:111:5: ^( T_TOP expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(111, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_TOP, "T_TOP"), root_1);

				DebugLocation(111, 13);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("top_clause", 6);
			LeaveRule("top_clause", 6);
			LeaveRule_top_clause();
	    }
	 	DebugLocation(112, 1);
		} finally { DebugExitRule(GrammarFileName, "top_clause"); }
		return retval;

	}
	// $ANTLR end "top_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_column_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_column_list() {}

	// $ANTLR start "column_list"
	// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:114:1: column_list : column ( ( WS )? ',' ( WS )? column )* -> ^( T_COLUMNLIST ( column )* ) ;
	[GrammarRule("column_list")]
	private AstParserRuleReturnScope<object, IToken> column_list()
	{
		EnterRule_column_list();
		EnterRule("column_list", 7);
		TraceIn("column_list", 7);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS34 = default(IToken);
	    IToken char_literal35 = default(IToken);
	    IToken WS36 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> column33 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> column37 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS34_tree = default(object);
	    object char_literal35_tree = default(object);
	    object WS36_tree = default(object);
	    RewriteRuleITokenStream stream_126=new RewriteRuleITokenStream(adaptor,"token 126");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_column=new RewriteRuleSubtreeStream(adaptor,"rule column");
		try { DebugEnterRule(GrammarFileName, "column_list");
		DebugLocation(114, 1);
		try
		{
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:115:2: ( column ( ( WS )? ',' ( WS )? column )* -> ^( T_COLUMNLIST ( column )* ) )
			DebugEnterAlt(1);
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:115:4: column ( ( WS )? ',' ( WS )? column )*
			{
			DebugLocation(115, 4);
			PushFollow(Follow._column_in_column_list522);
			column33=column();
			PopFollow();

			stream_column.Add(column33.Tree);
			DebugLocation(115, 11);
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:115:11: ( ( WS )? ',' ( WS )? column )*
			try { DebugEnterSubRule(18);
			while (true)
			{
				int alt18=2;
				try { DebugEnterDecision(18, decisionCanBacktrack[18]);
				int LA18_0 = input.LA(1);

				if ((LA18_0==WS))
				{
					int LA18_1 = input.LA(2);

					if ((LA18_1==126))
					{
						alt18 = 1;
					}


				}
				else if ((LA18_0==126))
				{
					alt18 = 1;
				}


				} finally { DebugExitDecision(18); }
				switch ( alt18 )
				{
				case 1:
					DebugEnterAlt(1);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:115:12: ( WS )? ',' ( WS )? column
					{
					DebugLocation(115, 12);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:115:12: ( WS )?
					int alt16=2;
					try { DebugEnterSubRule(16);
					try { DebugEnterDecision(16, decisionCanBacktrack[16]);
					int LA16_0 = input.LA(1);

					if ((LA16_0==WS))
					{
						alt16 = 1;
					}
					} finally { DebugExitDecision(16); }
					switch (alt16)
					{
					case 1:
						DebugEnterAlt(1);
						// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:115:12: WS
						{
						DebugLocation(115, 12);
						WS34=(IToken)Match(input,WS,Follow._WS_in_column_list525);  
						stream_WS.Add(WS34);


						}
						break;

					}
					} finally { DebugExitSubRule(16); }

					DebugLocation(115, 16);
					char_literal35=(IToken)Match(input,126,Follow._126_in_column_list528);  
					stream_126.Add(char_literal35);

					DebugLocation(115, 20);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:115:20: ( WS )?
					int alt17=2;
					try { DebugEnterSubRule(17);
					try { DebugEnterDecision(17, decisionCanBacktrack[17]);
					int LA17_0 = input.LA(1);

					if ((LA17_0==WS))
					{
						alt17 = 1;
					}
					} finally { DebugExitDecision(17); }
					switch (alt17)
					{
					case 1:
						DebugEnterAlt(1);
						// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:115:20: WS
						{
						DebugLocation(115, 20);
						WS36=(IToken)Match(input,WS,Follow._WS_in_column_list530);  
						stream_WS.Add(WS36);


						}
						break;

					}
					} finally { DebugExitSubRule(17); }

					DebugLocation(115, 24);
					PushFollow(Follow._column_in_column_list533);
					column37=column();
					PopFollow();

					stream_column.Add(column37.Tree);

					}
					break;

				default:
					goto loop18;
				}
			}

			loop18:
				;

			} finally { DebugExitSubRule(18); }



			{
			// AST REWRITE
			// elements: column
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 116:2: -> ^( T_COLUMNLIST ( column )* )
			{
				DebugLocation(116, 5);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:116:5: ^( T_COLUMNLIST ( column )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(116, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_COLUMNLIST, "T_COLUMNLIST"), root_1);

				DebugLocation(116, 20);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:116:20: ( column )*
				while ( stream_column.HasNext )
				{
					DebugLocation(116, 20);
					adaptor.AddChild(root_1, stream_column.NextTree());

				}
				stream_column.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("column_list", 7);
			LeaveRule("column_list", 7);
			LeaveRule_column_list();
	    }
	 	DebugLocation(117, 1);
		} finally { DebugExitRule(GrammarFileName, "column_list"); }
		return retval;

	}
	// $ANTLR end "column_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_column() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_column() {}

	// $ANTLR start "column"
	// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:119:1: column : ( '*' -> ^( T_COLUMN '*' ) | expression ( WS SIMPLE_FILE )? -> ^( T_COLUMN expression ( SIMPLE_FILE )? ) );
	[GrammarRule("column")]
	private AstParserRuleReturnScope<object, IToken> column()
	{
		EnterRule_column();
		EnterRule("column", 8);
		TraceIn("column", 8);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal38 = default(IToken);
	    IToken WS40 = default(IToken);
	    IToken SIMPLE_FILE41 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression39 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal38_tree = default(object);
	    object WS40_tree = default(object);
	    object SIMPLE_FILE41_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_SIMPLE_FILE=new RewriteRuleITokenStream(adaptor,"token SIMPLE_FILE");
	    RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "column");
		DebugLocation(119, 1);
		try
		{
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:120:2: ( '*' -> ^( T_COLUMN '*' ) | expression ( WS SIMPLE_FILE )? -> ^( T_COLUMN expression ( SIMPLE_FILE )? ) )
			int alt20=2;
			try { DebugEnterDecision(20, decisionCanBacktrack[20]);
			int LA20_0 = input.LA(1);

			if ((LA20_0==124))
			{
				alt20 = 1;
			}
			else if ((LA20_0==CAST||LA20_0==CONVERT||LA20_0==EXISTS||(LA20_0>=NOT && LA20_0<=NUMBER)||LA20_0==SIMPLE_FILE||(LA20_0>=STRING && LA20_0<=SYSTEMVAR)||LA20_0==TOKEN||LA20_0==122))
			{
				alt20 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 20, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:120:4: '*'
				{
				DebugLocation(120, 4);
				char_literal38=(IToken)Match(input,124,Follow._124_in_column557);  
				stream_124.Add(char_literal38);



				{
				// AST REWRITE
				// elements: 124
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 120:8: -> ^( T_COLUMN '*' )
				{
					DebugLocation(120, 11);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:120:11: ^( T_COLUMN '*' )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(120, 13);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_COLUMN, "T_COLUMN"), root_1);

					DebugLocation(120, 22);
					adaptor.AddChild(root_1, stream_124.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:121:4: expression ( WS SIMPLE_FILE )?
				{
				DebugLocation(121, 4);
				PushFollow(Follow._expression_in_column571);
				expression39=expression();
				PopFollow();

				stream_expression.Add(expression39.Tree);
				DebugLocation(121, 15);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:121:15: ( WS SIMPLE_FILE )?
				int alt19=2;
				try { DebugEnterSubRule(19);
				try { DebugEnterDecision(19, decisionCanBacktrack[19]);
				int LA19_0 = input.LA(1);

				if ((LA19_0==WS))
				{
					int LA19_1 = input.LA(2);

					if ((LA19_1==SIMPLE_FILE))
					{
						alt19 = 1;
					}
				}
				} finally { DebugExitDecision(19); }
				switch (alt19)
				{
				case 1:
					DebugEnterAlt(1);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:121:16: WS SIMPLE_FILE
					{
					DebugLocation(121, 16);
					WS40=(IToken)Match(input,WS,Follow._WS_in_column574);  
					stream_WS.Add(WS40);

					DebugLocation(121, 19);
					SIMPLE_FILE41=(IToken)Match(input,SIMPLE_FILE,Follow._SIMPLE_FILE_in_column576);  
					stream_SIMPLE_FILE.Add(SIMPLE_FILE41);


					}
					break;

				}
				} finally { DebugExitSubRule(19); }



				{
				// AST REWRITE
				// elements: expression, SIMPLE_FILE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 121:33: -> ^( T_COLUMN expression ( SIMPLE_FILE )? )
				{
					DebugLocation(121, 36);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:121:36: ^( T_COLUMN expression ( SIMPLE_FILE )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(121, 38);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_COLUMN, "T_COLUMN"), root_1);

					DebugLocation(121, 47);
					adaptor.AddChild(root_1, stream_expression.NextTree());
					DebugLocation(121, 58);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:121:58: ( SIMPLE_FILE )?
					if (stream_SIMPLE_FILE.HasNext)
					{
						DebugLocation(121, 58);
						adaptor.AddChild(root_1, stream_SIMPLE_FILE.NextNode());

					}
					stream_SIMPLE_FILE.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("column", 8);
			LeaveRule("column", 8);
			LeaveRule_column();
	    }
	 	DebugLocation(122, 1);
		} finally { DebugExitRule(GrammarFileName, "column"); }
		return retval;

	}
	// $ANTLR end "column"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_into_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_into_clause() {}

	// $ANTLR start "into_clause"
	// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:123:1: into_clause : INTO WS file -> ^( T_INTO file ) ;
	[GrammarRule("into_clause")]
	private AstParserRuleReturnScope<object, IToken> into_clause()
	{
		EnterRule_into_clause();
		EnterRule("into_clause", 9);
		TraceIn("into_clause", 9);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken INTO42 = default(IToken);
	    IToken WS43 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file44 = default(AstParserRuleReturnScope<object, IToken>);

	    object INTO42_tree = default(object);
	    object WS43_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_INTO=new RewriteRuleITokenStream(adaptor,"token INTO");
	    RewriteRuleSubtreeStream stream_file=new RewriteRuleSubtreeStream(adaptor,"rule file");
		try { DebugEnterRule(GrammarFileName, "into_clause");
		DebugLocation(123, 1);
		try
		{
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:124:2: ( INTO WS file -> ^( T_INTO file ) )
			DebugEnterAlt(1);
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:124:4: INTO WS file
			{
			DebugLocation(124, 4);
			INTO42=(IToken)Match(input,INTO,Follow._INTO_in_into_clause599);  
			stream_INTO.Add(INTO42);

			DebugLocation(124, 9);
			WS43=(IToken)Match(input,WS,Follow._WS_in_into_clause601);  
			stream_WS.Add(WS43);

			DebugLocation(124, 12);
			PushFollow(Follow._file_in_into_clause603);
			file44=file();
			PopFollow();

			stream_file.Add(file44.Tree);


			{
			// AST REWRITE
			// elements: file
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 124:17: -> ^( T_INTO file )
			{
				DebugLocation(124, 20);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:124:20: ^( T_INTO file )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(124, 22);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_INTO, "T_INTO"), root_1);

				DebugLocation(124, 29);
				adaptor.AddChild(root_1, stream_file.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("into_clause", 9);
			LeaveRule("into_clause", 9);
			LeaveRule_into_clause();
	    }
	 	DebugLocation(125, 1);
		} finally { DebugExitRule(GrammarFileName, "into_clause"); }
		return retval;

	}
	// $ANTLR end "into_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_from_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_from_clause() {}

	// $ANTLR start "from_clause"
	// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:127:1: from_clause : FROM WS from_clause_item ( ( WS )? ',' ( WS )? from_clause_item )* -> ^( T_FROM ( from_clause_item )* ) ;
	[GrammarRule("from_clause")]
	private AstParserRuleReturnScope<object, IToken> from_clause()
	{
		EnterRule_from_clause();
		EnterRule("from_clause", 10);
		TraceIn("from_clause", 10);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken FROM45 = default(IToken);
	    IToken WS46 = default(IToken);
	    IToken WS48 = default(IToken);
	    IToken char_literal49 = default(IToken);
	    IToken WS50 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> from_clause_item47 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> from_clause_item51 = default(AstParserRuleReturnScope<object, IToken>);

	    object FROM45_tree = default(object);
	    object WS46_tree = default(object);
	    object WS48_tree = default(object);
	    object char_literal49_tree = default(object);
	    object WS50_tree = default(object);
	    RewriteRuleITokenStream stream_126=new RewriteRuleITokenStream(adaptor,"token 126");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_FROM=new RewriteRuleITokenStream(adaptor,"token FROM");
	    RewriteRuleSubtreeStream stream_from_clause_item=new RewriteRuleSubtreeStream(adaptor,"rule from_clause_item");
		try { DebugEnterRule(GrammarFileName, "from_clause");
		DebugLocation(127, 1);
		try
		{
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:128:2: ( FROM WS from_clause_item ( ( WS )? ',' ( WS )? from_clause_item )* -> ^( T_FROM ( from_clause_item )* ) )
			DebugEnterAlt(1);
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:128:4: FROM WS from_clause_item ( ( WS )? ',' ( WS )? from_clause_item )*
			{
			DebugLocation(128, 4);
			FROM45=(IToken)Match(input,FROM,Follow._FROM_in_from_clause623);  
			stream_FROM.Add(FROM45);

			DebugLocation(128, 9);
			WS46=(IToken)Match(input,WS,Follow._WS_in_from_clause625);  
			stream_WS.Add(WS46);

			DebugLocation(128, 12);
			PushFollow(Follow._from_clause_item_in_from_clause627);
			from_clause_item47=from_clause_item();
			PopFollow();

			stream_from_clause_item.Add(from_clause_item47.Tree);
			DebugLocation(128, 29);
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:128:29: ( ( WS )? ',' ( WS )? from_clause_item )*
			try { DebugEnterSubRule(23);
			while (true)
			{
				int alt23=2;
				try { DebugEnterDecision(23, decisionCanBacktrack[23]);
				int LA23_0 = input.LA(1);

				if ((LA23_0==WS))
				{
					int LA23_1 = input.LA(2);

					if ((LA23_1==126))
					{
						alt23 = 1;
					}


				}
				else if ((LA23_0==126))
				{
					alt23 = 1;
				}


				} finally { DebugExitDecision(23); }
				switch ( alt23 )
				{
				case 1:
					DebugEnterAlt(1);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:128:30: ( WS )? ',' ( WS )? from_clause_item
					{
					DebugLocation(128, 30);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:128:30: ( WS )?
					int alt21=2;
					try { DebugEnterSubRule(21);
					try { DebugEnterDecision(21, decisionCanBacktrack[21]);
					int LA21_0 = input.LA(1);

					if ((LA21_0==WS))
					{
						alt21 = 1;
					}
					} finally { DebugExitDecision(21); }
					switch (alt21)
					{
					case 1:
						DebugEnterAlt(1);
						// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:128:30: WS
						{
						DebugLocation(128, 30);
						WS48=(IToken)Match(input,WS,Follow._WS_in_from_clause630);  
						stream_WS.Add(WS48);


						}
						break;

					}
					} finally { DebugExitSubRule(21); }

					DebugLocation(128, 34);
					char_literal49=(IToken)Match(input,126,Follow._126_in_from_clause633);  
					stream_126.Add(char_literal49);

					DebugLocation(128, 38);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:128:38: ( WS )?
					int alt22=2;
					try { DebugEnterSubRule(22);
					try { DebugEnterDecision(22, decisionCanBacktrack[22]);
					int LA22_0 = input.LA(1);

					if ((LA22_0==WS))
					{
						alt22 = 1;
					}
					} finally { DebugExitDecision(22); }
					switch (alt22)
					{
					case 1:
						DebugEnterAlt(1);
						// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:128:38: WS
						{
						DebugLocation(128, 38);
						WS50=(IToken)Match(input,WS,Follow._WS_in_from_clause635);  
						stream_WS.Add(WS50);


						}
						break;

					}
					} finally { DebugExitSubRule(22); }

					DebugLocation(128, 42);
					PushFollow(Follow._from_clause_item_in_from_clause638);
					from_clause_item51=from_clause_item();
					PopFollow();

					stream_from_clause_item.Add(from_clause_item51.Tree);

					}
					break;

				default:
					goto loop23;
				}
			}

			loop23:
				;

			} finally { DebugExitSubRule(23); }



			{
			// AST REWRITE
			// elements: from_clause_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 128:61: -> ^( T_FROM ( from_clause_item )* )
			{
				DebugLocation(128, 64);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:128:64: ^( T_FROM ( from_clause_item )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(128, 66);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FROM, "T_FROM"), root_1);

				DebugLocation(128, 73);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:128:73: ( from_clause_item )*
				while ( stream_from_clause_item.HasNext )
				{
					DebugLocation(128, 73);
					adaptor.AddChild(root_1, stream_from_clause_item.NextTree());

				}
				stream_from_clause_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("from_clause", 10);
			LeaveRule("from_clause", 10);
			LeaveRule_from_clause();
	    }
	 	DebugLocation(129, 1);
		} finally { DebugExitRule(GrammarFileName, "from_clause"); }
		return retval;

	}
	// $ANTLR end "from_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_from_clause_item() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_from_clause_item() {}

	// $ANTLR start "from_clause_item"
	// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:131:1: from_clause_item : ( STRING -> ^( T_FILE STRING ) | file | '(' ( WS )? select_command ( WS )? ')' -> ^( T_SUBQUERY select_command ) );
	[GrammarRule("from_clause_item")]
	private AstParserRuleReturnScope<object, IToken> from_clause_item()
	{
		EnterRule_from_clause_item();
		EnterRule("from_clause_item", 11);
		TraceIn("from_clause_item", 11);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken STRING52 = default(IToken);
	    IToken char_literal54 = default(IToken);
	    IToken WS55 = default(IToken);
	    IToken WS57 = default(IToken);
	    IToken char_literal58 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file53 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> select_command56 = default(AstParserRuleReturnScope<object, IToken>);

	    object STRING52_tree = default(object);
	    object char_literal54_tree = default(object);
	    object WS55_tree = default(object);
	    object WS57_tree = default(object);
	    object char_literal58_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_122=new RewriteRuleITokenStream(adaptor,"token 122");
	    RewriteRuleITokenStream stream_123=new RewriteRuleITokenStream(adaptor,"token 123");
	    RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
	    RewriteRuleSubtreeStream stream_select_command=new RewriteRuleSubtreeStream(adaptor,"rule select_command");
		try { DebugEnterRule(GrammarFileName, "from_clause_item");
		DebugLocation(131, 1);
		try
		{
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:132:2: ( STRING -> ^( T_FILE STRING ) | file | '(' ( WS )? select_command ( WS )? ')' -> ^( T_SUBQUERY select_command ) )
			int alt26=3;
			try { DebugEnterDecision(26, decisionCanBacktrack[26]);
			switch (input.LA(1))
			{
			case STRING:
				{
				alt26 = 1;
				}
				break;
			case SIMPLE_FILE:
			case 136:
				{
				alt26 = 2;
				}
				break;
			case 122:
				{
				alt26 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 26, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:132:4: STRING
				{
				DebugLocation(132, 4);
				STRING52=(IToken)Match(input,STRING,Follow._STRING_in_from_clause_item661);  
				stream_STRING.Add(STRING52);



				{
				// AST REWRITE
				// elements: STRING
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 132:11: -> ^( T_FILE STRING )
				{
					DebugLocation(132, 14);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:132:14: ^( T_FILE STRING )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(132, 16);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILE, "T_FILE"), root_1);

					DebugLocation(132, 23);
					adaptor.AddChild(root_1, stream_STRING.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:133:4: file
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(133, 4);
				PushFollow(Follow._file_in_from_clause_item674);
				file53=file();
				PopFollow();

				adaptor.AddChild(root_0, file53.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:134:4: '(' ( WS )? select_command ( WS )? ')'
				{
				DebugLocation(134, 4);
				char_literal54=(IToken)Match(input,122,Follow._122_in_from_clause_item679);  
				stream_122.Add(char_literal54);

				DebugLocation(134, 8);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:134:8: ( WS )?
				int alt24=2;
				try { DebugEnterSubRule(24);
				try { DebugEnterDecision(24, decisionCanBacktrack[24]);
				int LA24_0 = input.LA(1);

				if ((LA24_0==WS))
				{
					alt24 = 1;
				}
				} finally { DebugExitDecision(24); }
				switch (alt24)
				{
				case 1:
					DebugEnterAlt(1);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:134:8: WS
					{
					DebugLocation(134, 8);
					WS55=(IToken)Match(input,WS,Follow._WS_in_from_clause_item681);  
					stream_WS.Add(WS55);


					}
					break;

				}
				} finally { DebugExitSubRule(24); }

				DebugLocation(134, 12);
				PushFollow(Follow._select_command_in_from_clause_item684);
				select_command56=select_command();
				PopFollow();

				stream_select_command.Add(select_command56.Tree);
				DebugLocation(134, 27);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:134:27: ( WS )?
				int alt25=2;
				try { DebugEnterSubRule(25);
				try { DebugEnterDecision(25, decisionCanBacktrack[25]);
				int LA25_0 = input.LA(1);

				if ((LA25_0==WS))
				{
					alt25 = 1;
				}
				} finally { DebugExitDecision(25); }
				switch (alt25)
				{
				case 1:
					DebugEnterAlt(1);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:134:27: WS
					{
					DebugLocation(134, 27);
					WS57=(IToken)Match(input,WS,Follow._WS_in_from_clause_item686);  
					stream_WS.Add(WS57);


					}
					break;

				}
				} finally { DebugExitSubRule(25); }

				DebugLocation(134, 31);
				char_literal58=(IToken)Match(input,123,Follow._123_in_from_clause_item689);  
				stream_123.Add(char_literal58);



				{
				// AST REWRITE
				// elements: select_command
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 134:35: -> ^( T_SUBQUERY select_command )
				{
					DebugLocation(134, 38);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:134:38: ^( T_SUBQUERY select_command )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(134, 40);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SUBQUERY, "T_SUBQUERY"), root_1);

					DebugLocation(134, 51);
					adaptor.AddChild(root_1, stream_select_command.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("from_clause_item", 11);
			LeaveRule("from_clause_item", 11);
			LeaveRule_from_clause_item();
	    }
	 	DebugLocation(135, 1);
		} finally { DebugExitRule(GrammarFileName, "from_clause_item"); }
		return retval;

	}
	// $ANTLR end "from_clause_item"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file() {}

	// $ANTLR start "file"
	// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:137:1: file : ( '[' ( WS )? STRING ( WS file_option )* ( WS )? ']' -> ^( T_FILE STRING ( file_option )* ) | SIMPLE_FILE -> ^( T_FILE SIMPLE_FILE ) );
	[GrammarRule("file")]
	private AstParserRuleReturnScope<object, IToken> file()
	{
		EnterRule_file();
		EnterRule("file", 12);
		TraceIn("file", 12);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal59 = default(IToken);
	    IToken WS60 = default(IToken);
	    IToken STRING61 = default(IToken);
	    IToken WS62 = default(IToken);
	    IToken WS64 = default(IToken);
	    IToken char_literal65 = default(IToken);
	    IToken SIMPLE_FILE66 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file_option63 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal59_tree = default(object);
	    object WS60_tree = default(object);
	    object STRING61_tree = default(object);
	    object WS62_tree = default(object);
	    object WS64_tree = default(object);
	    object char_literal65_tree = default(object);
	    object SIMPLE_FILE66_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_SIMPLE_FILE=new RewriteRuleITokenStream(adaptor,"token SIMPLE_FILE");
	    RewriteRuleITokenStream stream_136=new RewriteRuleITokenStream(adaptor,"token 136");
	    RewriteRuleITokenStream stream_137=new RewriteRuleITokenStream(adaptor,"token 137");
	    RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
	    RewriteRuleSubtreeStream stream_file_option=new RewriteRuleSubtreeStream(adaptor,"rule file_option");
		try { DebugEnterRule(GrammarFileName, "file");
		DebugLocation(137, 39);
		try
		{
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:138:2: ( '[' ( WS )? STRING ( WS file_option )* ( WS )? ']' -> ^( T_FILE STRING ( file_option )* ) | SIMPLE_FILE -> ^( T_FILE SIMPLE_FILE ) )
			int alt30=2;
			try { DebugEnterDecision(30, decisionCanBacktrack[30]);
			int LA30_0 = input.LA(1);

			if ((LA30_0==136))
			{
				alt30 = 1;
			}
			else if ((LA30_0==SIMPLE_FILE))
			{
				alt30 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 30, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:138:4: '[' ( WS )? STRING ( WS file_option )* ( WS )? ']'
				{
				DebugLocation(138, 4);
				char_literal59=(IToken)Match(input,136,Follow._136_in_file708);  
				stream_136.Add(char_literal59);

				DebugLocation(138, 8);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:138:8: ( WS )?
				int alt27=2;
				try { DebugEnterSubRule(27);
				try { DebugEnterDecision(27, decisionCanBacktrack[27]);
				int LA27_0 = input.LA(1);

				if ((LA27_0==WS))
				{
					alt27 = 1;
				}
				} finally { DebugExitDecision(27); }
				switch (alt27)
				{
				case 1:
					DebugEnterAlt(1);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:138:8: WS
					{
					DebugLocation(138, 8);
					WS60=(IToken)Match(input,WS,Follow._WS_in_file710);  
					stream_WS.Add(WS60);


					}
					break;

				}
				} finally { DebugExitSubRule(27); }

				DebugLocation(138, 12);
				STRING61=(IToken)Match(input,STRING,Follow._STRING_in_file713);  
				stream_STRING.Add(STRING61);

				DebugLocation(138, 19);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:138:19: ( WS file_option )*
				try { DebugEnterSubRule(28);
				while (true)
				{
					int alt28=2;
					try { DebugEnterDecision(28, decisionCanBacktrack[28]);
					int LA28_0 = input.LA(1);

					if ((LA28_0==WS))
					{
						int LA28_1 = input.LA(2);

						if ((LA28_1==127))
						{
							alt28 = 1;
						}


					}


					} finally { DebugExitDecision(28); }
					switch ( alt28 )
					{
					case 1:
						DebugEnterAlt(1);
						// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:138:20: WS file_option
						{
						DebugLocation(138, 20);
						WS62=(IToken)Match(input,WS,Follow._WS_in_file716);  
						stream_WS.Add(WS62);

						DebugLocation(138, 23);
						PushFollow(Follow._file_option_in_file718);
						file_option63=file_option();
						PopFollow();

						stream_file_option.Add(file_option63.Tree);

						}
						break;

					default:
						goto loop28;
					}
				}

				loop28:
					;

				} finally { DebugExitSubRule(28); }

				DebugLocation(138, 37);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:138:37: ( WS )?
				int alt29=2;
				try { DebugEnterSubRule(29);
				try { DebugEnterDecision(29, decisionCanBacktrack[29]);
				int LA29_0 = input.LA(1);

				if ((LA29_0==WS))
				{
					alt29 = 1;
				}
				} finally { DebugExitDecision(29); }
				switch (alt29)
				{
				case 1:
					DebugEnterAlt(1);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:138:37: WS
					{
					DebugLocation(138, 37);
					WS64=(IToken)Match(input,WS,Follow._WS_in_file722);  
					stream_WS.Add(WS64);


					}
					break;

				}
				} finally { DebugExitSubRule(29); }

				DebugLocation(138, 41);
				char_literal65=(IToken)Match(input,137,Follow._137_in_file725);  
				stream_137.Add(char_literal65);



				{
				// AST REWRITE
				// elements: STRING, file_option
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 138:45: -> ^( T_FILE STRING ( file_option )* )
				{
					DebugLocation(138, 48);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:138:48: ^( T_FILE STRING ( file_option )* )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(138, 50);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILE, "T_FILE"), root_1);

					DebugLocation(138, 57);
					adaptor.AddChild(root_1, stream_STRING.NextNode());
					DebugLocation(138, 64);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:138:64: ( file_option )*
					while ( stream_file_option.HasNext )
					{
						DebugLocation(138, 64);
						adaptor.AddChild(root_1, stream_file_option.NextTree());

					}
					stream_file_option.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:139:4: SIMPLE_FILE
				{
				DebugLocation(139, 4);
				SIMPLE_FILE66=(IToken)Match(input,SIMPLE_FILE,Follow._SIMPLE_FILE_in_file742);  
				stream_SIMPLE_FILE.Add(SIMPLE_FILE66);



				{
				// AST REWRITE
				// elements: SIMPLE_FILE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 139:16: -> ^( T_FILE SIMPLE_FILE )
				{
					DebugLocation(139, 19);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:139:19: ^( T_FILE SIMPLE_FILE )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(139, 21);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILE, "T_FILE"), root_1);

					DebugLocation(139, 28);
					adaptor.AddChild(root_1, stream_SIMPLE_FILE.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file", 12);
			LeaveRule("file", 12);
			LeaveRule_file();
	    }
	 	DebugLocation(139, 39);
		} finally { DebugExitRule(GrammarFileName, "file"); }
		return retval;

	}
	// $ANTLR end "file"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_option() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_option() {}

	// $ANTLR start "file_option"
	// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:141:1: file_option : '-' file_option_name ( ( WS )? '=' ( WS )? file_option_value )? -> ^( T_FILEOPTION file_option_name ( file_option_value )? ) ;
	[GrammarRule("file_option")]
	private AstParserRuleReturnScope<object, IToken> file_option()
	{
		EnterRule_file_option();
		EnterRule("file_option", 13);
		TraceIn("file_option", 13);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal67 = default(IToken);
	    IToken WS69 = default(IToken);
	    IToken char_literal70 = default(IToken);
	    IToken WS71 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file_option_name68 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> file_option_value72 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal67_tree = default(object);
	    object WS69_tree = default(object);
	    object char_literal70_tree = default(object);
	    object WS71_tree = default(object);
	    RewriteRuleITokenStream stream_127=new RewriteRuleITokenStream(adaptor,"token 127");
	    RewriteRuleITokenStream stream_133=new RewriteRuleITokenStream(adaptor,"token 133");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_file_option_name=new RewriteRuleSubtreeStream(adaptor,"rule file_option_name");
	    RewriteRuleSubtreeStream stream_file_option_value=new RewriteRuleSubtreeStream(adaptor,"rule file_option_value");
		try { DebugEnterRule(GrammarFileName, "file_option");
		DebugLocation(141, 1);
		try
		{
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:142:2: ( '-' file_option_name ( ( WS )? '=' ( WS )? file_option_value )? -> ^( T_FILEOPTION file_option_name ( file_option_value )? ) )
			DebugEnterAlt(1);
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:142:4: '-' file_option_name ( ( WS )? '=' ( WS )? file_option_value )?
			{
			DebugLocation(142, 4);
			char_literal67=(IToken)Match(input,127,Follow._127_in_file_option759);  
			stream_127.Add(char_literal67);

			DebugLocation(142, 8);
			PushFollow(Follow._file_option_name_in_file_option761);
			file_option_name68=file_option_name();
			PopFollow();

			stream_file_option_name.Add(file_option_name68.Tree);
			DebugLocation(142, 25);
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:142:25: ( ( WS )? '=' ( WS )? file_option_value )?
			int alt33=2;
			try { DebugEnterSubRule(33);
			try { DebugEnterDecision(33, decisionCanBacktrack[33]);
			int LA33_0 = input.LA(1);

			if ((LA33_0==WS))
			{
				int LA33_1 = input.LA(2);

				if ((LA33_1==133))
				{
					alt33 = 1;
				}
			}
			else if ((LA33_0==133))
			{
				alt33 = 1;
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:142:27: ( WS )? '=' ( WS )? file_option_value
				{
				DebugLocation(142, 27);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:142:27: ( WS )?
				int alt31=2;
				try { DebugEnterSubRule(31);
				try { DebugEnterDecision(31, decisionCanBacktrack[31]);
				int LA31_0 = input.LA(1);

				if ((LA31_0==WS))
				{
					alt31 = 1;
				}
				} finally { DebugExitDecision(31); }
				switch (alt31)
				{
				case 1:
					DebugEnterAlt(1);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:142:27: WS
					{
					DebugLocation(142, 27);
					WS69=(IToken)Match(input,WS,Follow._WS_in_file_option765);  
					stream_WS.Add(WS69);


					}
					break;

				}
				} finally { DebugExitSubRule(31); }

				DebugLocation(142, 31);
				char_literal70=(IToken)Match(input,133,Follow._133_in_file_option768);  
				stream_133.Add(char_literal70);

				DebugLocation(142, 35);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:142:35: ( WS )?
				int alt32=2;
				try { DebugEnterSubRule(32);
				try { DebugEnterDecision(32, decisionCanBacktrack[32]);
				int LA32_0 = input.LA(1);

				if ((LA32_0==WS))
				{
					alt32 = 1;
				}
				} finally { DebugExitDecision(32); }
				switch (alt32)
				{
				case 1:
					DebugEnterAlt(1);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:142:35: WS
					{
					DebugLocation(142, 35);
					WS71=(IToken)Match(input,WS,Follow._WS_in_file_option770);  
					stream_WS.Add(WS71);


					}
					break;

				}
				} finally { DebugExitSubRule(32); }

				DebugLocation(142, 39);
				PushFollow(Follow._file_option_value_in_file_option773);
				file_option_value72=file_option_value();
				PopFollow();

				stream_file_option_value.Add(file_option_value72.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(33); }



			{
			// AST REWRITE
			// elements: file_option_value, file_option_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 142:59: -> ^( T_FILEOPTION file_option_name ( file_option_value )? )
			{
				DebugLocation(142, 62);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:142:62: ^( T_FILEOPTION file_option_name ( file_option_value )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(142, 64);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILEOPTION, "T_FILEOPTION"), root_1);

				DebugLocation(142, 77);
				adaptor.AddChild(root_1, stream_file_option_name.NextTree());
				DebugLocation(142, 94);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:142:94: ( file_option_value )?
				if (stream_file_option_value.HasNext)
				{
					DebugLocation(142, 94);
					adaptor.AddChild(root_1, stream_file_option_value.NextTree());

				}
				stream_file_option_value.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_option", 13);
			LeaveRule("file_option", 13);
			LeaveRule_file_option();
	    }
	 	DebugLocation(143, 1);
		} finally { DebugExitRule(GrammarFileName, "file_option"); }
		return retval;

	}
	// $ANTLR end "file_option"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_option_name() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_option_name() {}

	// $ANTLR start "file_option_name"
	// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:145:1: file_option_name : TOKEN ;
	[GrammarRule("file_option_name")]
	private AstParserRuleReturnScope<object, IToken> file_option_name()
	{
		EnterRule_file_option_name();
		EnterRule("file_option_name", 14);
		TraceIn("file_option_name", 14);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN73 = default(IToken);

	    object TOKEN73_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "file_option_name");
		DebugLocation(145, 1);
		try
		{
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:146:2: ( TOKEN )
			DebugEnterAlt(1);
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:146:4: TOKEN
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(146, 4);
			TOKEN73=(IToken)Match(input,TOKEN,Follow._TOKEN_in_file_option_name797); 
			TOKEN73_tree = (object)adaptor.Create(TOKEN73);
			adaptor.AddChild(root_0, TOKEN73_tree);


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_option_name", 14);
			LeaveRule("file_option_name", 14);
			LeaveRule_file_option_name();
	    }
	 	DebugLocation(147, 1);
		} finally { DebugExitRule(GrammarFileName, "file_option_name"); }
		return retval;

	}
	// $ANTLR end "file_option_name"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_option_value() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_option_value() {}

	// $ANTLR start "file_option_value"
	// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:149:1: file_option_value : ( TOKEN | STRING | NUMBER );
	[GrammarRule("file_option_value")]
	private AstParserRuleReturnScope<object, IToken> file_option_value()
	{
		EnterRule_file_option_value();
		EnterRule("file_option_value", 15);
		TraceIn("file_option_value", 15);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken set74 = default(IToken);

	    object set74_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "file_option_value");
		DebugLocation(149, 1);
		try
		{
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:150:2: ( TOKEN | STRING | NUMBER )
			DebugEnterAlt(1);
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(150, 2);

			set74=(IToken)input.LT(1);
			if (input.LA(1)==NUMBER||input.LA(1)==STRING||input.LA(1)==TOKEN)
			{
				input.Consume();
				adaptor.AddChild(root_0, (object)adaptor.Create(set74));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_option_value", 15);
			LeaveRule("file_option_value", 15);
			LeaveRule_file_option_value();
	    }
	 	DebugLocation(151, 1);
		} finally { DebugExitRule(GrammarFileName, "file_option_value"); }
		return retval;

	}
	// $ANTLR end "file_option_value"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_where_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_where_clause() {}

	// $ANTLR start "where_clause"
	// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:153:1: where_clause : WHERE WS expression -> ^( T_WHERE expression ) ;
	[GrammarRule("where_clause")]
	private AstParserRuleReturnScope<object, IToken> where_clause()
	{
		EnterRule_where_clause();
		EnterRule("where_clause", 16);
		TraceIn("where_clause", 16);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WHERE75 = default(IToken);
	    IToken WS76 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression77 = default(AstParserRuleReturnScope<object, IToken>);

	    object WHERE75_tree = default(object);
	    object WS76_tree = default(object);
	    RewriteRuleITokenStream stream_WHERE=new RewriteRuleITokenStream(adaptor,"token WHERE");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "where_clause");
		DebugLocation(153, 1);
		try
		{
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:154:2: ( WHERE WS expression -> ^( T_WHERE expression ) )
			DebugEnterAlt(1);
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:154:4: WHERE WS expression
			{
			DebugLocation(154, 4);
			WHERE75=(IToken)Match(input,WHERE,Follow._WHERE_in_where_clause829);  
			stream_WHERE.Add(WHERE75);

			DebugLocation(154, 10);
			WS76=(IToken)Match(input,WS,Follow._WS_in_where_clause831);  
			stream_WS.Add(WS76);

			DebugLocation(154, 13);
			PushFollow(Follow._expression_in_where_clause833);
			expression77=expression();
			PopFollow();

			stream_expression.Add(expression77.Tree);


			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 155:2: -> ^( T_WHERE expression )
			{
				DebugLocation(155, 5);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:155:5: ^( T_WHERE expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(155, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_WHERE, "T_WHERE"), root_1);

				DebugLocation(155, 15);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("where_clause", 16);
			LeaveRule("where_clause", 16);
			LeaveRule_where_clause();
	    }
	 	DebugLocation(156, 1);
		} finally { DebugExitRule(GrammarFileName, "where_clause"); }
		return retval;

	}
	// $ANTLR end "where_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_groupby_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_groupby_clause() {}

	// $ANTLR start "groupby_clause"
	// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:157:1: groupby_clause : GROUP WS BY WS expression_list -> ^( T_GROUPBY expression_list ) ;
	[GrammarRule("groupby_clause")]
	private AstParserRuleReturnScope<object, IToken> groupby_clause()
	{
		EnterRule_groupby_clause();
		EnterRule("groupby_clause", 17);
		TraceIn("groupby_clause", 17);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken GROUP78 = default(IToken);
	    IToken WS79 = default(IToken);
	    IToken BY80 = default(IToken);
	    IToken WS81 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression_list82 = default(AstParserRuleReturnScope<object, IToken>);

	    object GROUP78_tree = default(object);
	    object WS79_tree = default(object);
	    object BY80_tree = default(object);
	    object WS81_tree = default(object);
	    RewriteRuleITokenStream stream_GROUP=new RewriteRuleITokenStream(adaptor,"token GROUP");
	    RewriteRuleITokenStream stream_BY=new RewriteRuleITokenStream(adaptor,"token BY");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression_list=new RewriteRuleSubtreeStream(adaptor,"rule expression_list");
		try { DebugEnterRule(GrammarFileName, "groupby_clause");
		DebugLocation(157, 1);
		try
		{
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:158:2: ( GROUP WS BY WS expression_list -> ^( T_GROUPBY expression_list ) )
			DebugEnterAlt(1);
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:158:4: GROUP WS BY WS expression_list
			{
			DebugLocation(158, 4);
			GROUP78=(IToken)Match(input,GROUP,Follow._GROUP_in_groupby_clause852);  
			stream_GROUP.Add(GROUP78);

			DebugLocation(158, 10);
			WS79=(IToken)Match(input,WS,Follow._WS_in_groupby_clause854);  
			stream_WS.Add(WS79);

			DebugLocation(158, 13);
			BY80=(IToken)Match(input,BY,Follow._BY_in_groupby_clause856);  
			stream_BY.Add(BY80);

			DebugLocation(158, 16);
			WS81=(IToken)Match(input,WS,Follow._WS_in_groupby_clause858);  
			stream_WS.Add(WS81);

			DebugLocation(158, 19);
			PushFollow(Follow._expression_list_in_groupby_clause860);
			expression_list82=expression_list();
			PopFollow();

			stream_expression_list.Add(expression_list82.Tree);


			{
			// AST REWRITE
			// elements: expression_list
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 159:2: -> ^( T_GROUPBY expression_list )
			{
				DebugLocation(159, 5);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:159:5: ^( T_GROUPBY expression_list )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(159, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_GROUPBY, "T_GROUPBY"), root_1);

				DebugLocation(159, 17);
				adaptor.AddChild(root_1, stream_expression_list.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("groupby_clause", 17);
			LeaveRule("groupby_clause", 17);
			LeaveRule_groupby_clause();
	    }
	 	DebugLocation(160, 1);
		} finally { DebugExitRule(GrammarFileName, "groupby_clause"); }
		return retval;

	}
	// $ANTLR end "groupby_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_clause() {}

	// $ANTLR start "orderby_clause"
	// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:162:1: orderby_clause : ORDER WS BY WS orderby_column_list -> ^( T_ORDERBY orderby_column_list ) ;
	[GrammarRule("orderby_clause")]
	private AstParserRuleReturnScope<object, IToken> orderby_clause()
	{
		EnterRule_orderby_clause();
		EnterRule("orderby_clause", 18);
		TraceIn("orderby_clause", 18);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken ORDER83 = default(IToken);
	    IToken WS84 = default(IToken);
	    IToken BY85 = default(IToken);
	    IToken WS86 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> orderby_column_list87 = default(AstParserRuleReturnScope<object, IToken>);

	    object ORDER83_tree = default(object);
	    object WS84_tree = default(object);
	    object BY85_tree = default(object);
	    object WS86_tree = default(object);
	    RewriteRuleITokenStream stream_BY=new RewriteRuleITokenStream(adaptor,"token BY");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_ORDER=new RewriteRuleITokenStream(adaptor,"token ORDER");
	    RewriteRuleSubtreeStream stream_orderby_column_list=new RewriteRuleSubtreeStream(adaptor,"rule orderby_column_list");
		try { DebugEnterRule(GrammarFileName, "orderby_clause");
		DebugLocation(162, 1);
		try
		{
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:163:2: ( ORDER WS BY WS orderby_column_list -> ^( T_ORDERBY orderby_column_list ) )
			DebugEnterAlt(1);
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:163:4: ORDER WS BY WS orderby_column_list
			{
			DebugLocation(163, 4);
			ORDER83=(IToken)Match(input,ORDER,Follow._ORDER_in_orderby_clause881);  
			stream_ORDER.Add(ORDER83);

			DebugLocation(163, 10);
			WS84=(IToken)Match(input,WS,Follow._WS_in_orderby_clause883);  
			stream_WS.Add(WS84);

			DebugLocation(163, 13);
			BY85=(IToken)Match(input,BY,Follow._BY_in_orderby_clause885);  
			stream_BY.Add(BY85);

			DebugLocation(163, 16);
			WS86=(IToken)Match(input,WS,Follow._WS_in_orderby_clause887);  
			stream_WS.Add(WS86);

			DebugLocation(163, 19);
			PushFollow(Follow._orderby_column_list_in_orderby_clause889);
			orderby_column_list87=orderby_column_list();
			PopFollow();

			stream_orderby_column_list.Add(orderby_column_list87.Tree);


			{
			// AST REWRITE
			// elements: orderby_column_list
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 164:2: -> ^( T_ORDERBY orderby_column_list )
			{
				DebugLocation(164, 5);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:164:5: ^( T_ORDERBY orderby_column_list )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(164, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_ORDERBY, "T_ORDERBY"), root_1);

				DebugLocation(164, 17);
				adaptor.AddChild(root_1, stream_orderby_column_list.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_clause", 18);
			LeaveRule("orderby_clause", 18);
			LeaveRule_orderby_clause();
	    }
	 	DebugLocation(165, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_clause"); }
		return retval;

	}
	// $ANTLR end "orderby_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_column_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_column_list() {}

	// $ANTLR start "orderby_column_list"
	// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:167:1: orderby_column_list : orderby_column ( ( WS )? ',' ( WS )? orderby_column )* -> ( orderby_column )* ;
	[GrammarRule("orderby_column_list")]
	private AstParserRuleReturnScope<object, IToken> orderby_column_list()
	{
		EnterRule_orderby_column_list();
		EnterRule("orderby_column_list", 19);
		TraceIn("orderby_column_list", 19);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS89 = default(IToken);
	    IToken char_literal90 = default(IToken);
	    IToken WS91 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> orderby_column88 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> orderby_column92 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS89_tree = default(object);
	    object char_literal90_tree = default(object);
	    object WS91_tree = default(object);
	    RewriteRuleITokenStream stream_126=new RewriteRuleITokenStream(adaptor,"token 126");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_orderby_column=new RewriteRuleSubtreeStream(adaptor,"rule orderby_column");
		try { DebugEnterRule(GrammarFileName, "orderby_column_list");
		DebugLocation(167, 1);
		try
		{
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:168:2: ( orderby_column ( ( WS )? ',' ( WS )? orderby_column )* -> ( orderby_column )* )
			DebugEnterAlt(1);
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:168:4: orderby_column ( ( WS )? ',' ( WS )? orderby_column )*
			{
			DebugLocation(168, 4);
			PushFollow(Follow._orderby_column_in_orderby_column_list910);
			orderby_column88=orderby_column();
			PopFollow();

			stream_orderby_column.Add(orderby_column88.Tree);
			DebugLocation(168, 19);
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:168:19: ( ( WS )? ',' ( WS )? orderby_column )*
			try { DebugEnterSubRule(36);
			while (true)
			{
				int alt36=2;
				try { DebugEnterDecision(36, decisionCanBacktrack[36]);
				int LA36_0 = input.LA(1);

				if ((LA36_0==WS))
				{
					int LA36_1 = input.LA(2);

					if ((LA36_1==126))
					{
						alt36 = 1;
					}


				}
				else if ((LA36_0==126))
				{
					alt36 = 1;
				}


				} finally { DebugExitDecision(36); }
				switch ( alt36 )
				{
				case 1:
					DebugEnterAlt(1);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:168:20: ( WS )? ',' ( WS )? orderby_column
					{
					DebugLocation(168, 20);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:168:20: ( WS )?
					int alt34=2;
					try { DebugEnterSubRule(34);
					try { DebugEnterDecision(34, decisionCanBacktrack[34]);
					int LA34_0 = input.LA(1);

					if ((LA34_0==WS))
					{
						alt34 = 1;
					}
					} finally { DebugExitDecision(34); }
					switch (alt34)
					{
					case 1:
						DebugEnterAlt(1);
						// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:168:20: WS
						{
						DebugLocation(168, 20);
						WS89=(IToken)Match(input,WS,Follow._WS_in_orderby_column_list913);  
						stream_WS.Add(WS89);


						}
						break;

					}
					} finally { DebugExitSubRule(34); }

					DebugLocation(168, 24);
					char_literal90=(IToken)Match(input,126,Follow._126_in_orderby_column_list916);  
					stream_126.Add(char_literal90);

					DebugLocation(168, 28);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:168:28: ( WS )?
					int alt35=2;
					try { DebugEnterSubRule(35);
					try { DebugEnterDecision(35, decisionCanBacktrack[35]);
					int LA35_0 = input.LA(1);

					if ((LA35_0==WS))
					{
						alt35 = 1;
					}
					} finally { DebugExitDecision(35); }
					switch (alt35)
					{
					case 1:
						DebugEnterAlt(1);
						// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:168:28: WS
						{
						DebugLocation(168, 28);
						WS91=(IToken)Match(input,WS,Follow._WS_in_orderby_column_list918);  
						stream_WS.Add(WS91);


						}
						break;

					}
					} finally { DebugExitSubRule(35); }

					DebugLocation(168, 32);
					PushFollow(Follow._orderby_column_in_orderby_column_list921);
					orderby_column92=orderby_column();
					PopFollow();

					stream_orderby_column.Add(orderby_column92.Tree);

					}
					break;

				default:
					goto loop36;
				}
			}

			loop36:
				;

			} finally { DebugExitSubRule(36); }



			{
			// AST REWRITE
			// elements: orderby_column
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 169:2: -> ( orderby_column )*
			{
				DebugLocation(169, 5);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:169:5: ( orderby_column )*
				while ( stream_orderby_column.HasNext )
				{
					DebugLocation(169, 5);
					adaptor.AddChild(root_0, stream_orderby_column.NextTree());

				}
				stream_orderby_column.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_column_list", 19);
			LeaveRule("orderby_column_list", 19);
			LeaveRule_orderby_column_list();
	    }
	 	DebugLocation(170, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_column_list"); }
		return retval;

	}
	// $ANTLR end "orderby_column_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_column() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_column() {}

	// $ANTLR start "orderby_column"
	// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:172:1: orderby_column : expression ( WS orderby_direction )? -> ^( T_ORDERBY_COLUMN expression ( orderby_direction )? ) ;
	[GrammarRule("orderby_column")]
	private AstParserRuleReturnScope<object, IToken> orderby_column()
	{
		EnterRule_orderby_column();
		EnterRule("orderby_column", 20);
		TraceIn("orderby_column", 20);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS94 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression93 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> orderby_direction95 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS94_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_orderby_direction=new RewriteRuleSubtreeStream(adaptor,"rule orderby_direction");
		try { DebugEnterRule(GrammarFileName, "orderby_column");
		DebugLocation(172, 1);
		try
		{
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:173:2: ( expression ( WS orderby_direction )? -> ^( T_ORDERBY_COLUMN expression ( orderby_direction )? ) )
			DebugEnterAlt(1);
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:173:4: expression ( WS orderby_direction )?
			{
			DebugLocation(173, 4);
			PushFollow(Follow._expression_in_orderby_column941);
			expression93=expression();
			PopFollow();

			stream_expression.Add(expression93.Tree);
			DebugLocation(173, 15);
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:173:15: ( WS orderby_direction )?
			int alt37=2;
			try { DebugEnterSubRule(37);
			try { DebugEnterDecision(37, decisionCanBacktrack[37]);
			int LA37_0 = input.LA(1);

			if ((LA37_0==WS))
			{
				int LA37_1 = input.LA(2);

				if ((LA37_1==ASC||LA37_1==DESC))
				{
					alt37 = 1;
				}
			}
			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:173:16: WS orderby_direction
				{
				DebugLocation(173, 16);
				WS94=(IToken)Match(input,WS,Follow._WS_in_orderby_column944);  
				stream_WS.Add(WS94);

				DebugLocation(173, 19);
				PushFollow(Follow._orderby_direction_in_orderby_column946);
				orderby_direction95=orderby_direction();
				PopFollow();

				stream_orderby_direction.Add(orderby_direction95.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(37); }



			{
			// AST REWRITE
			// elements: orderby_direction, expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 173:39: -> ^( T_ORDERBY_COLUMN expression ( orderby_direction )? )
			{
				DebugLocation(173, 42);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:173:42: ^( T_ORDERBY_COLUMN expression ( orderby_direction )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(173, 44);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_ORDERBY_COLUMN, "T_ORDERBY_COLUMN"), root_1);

				DebugLocation(173, 61);
				adaptor.AddChild(root_1, stream_expression.NextTree());
				DebugLocation(173, 72);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:173:72: ( orderby_direction )?
				if (stream_orderby_direction.HasNext)
				{
					DebugLocation(173, 72);
					adaptor.AddChild(root_1, stream_orderby_direction.NextTree());

				}
				stream_orderby_direction.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_column", 20);
			LeaveRule("orderby_column", 20);
			LeaveRule_orderby_column();
	    }
	 	DebugLocation(174, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_column"); }
		return retval;

	}
	// $ANTLR end "orderby_column"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_direction() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_direction() {}

	// $ANTLR start "orderby_direction"
	// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:176:1: orderby_direction : ( ASC -> T_ORDERBY_ASC | DESC -> T_ORDERBY_DESC );
	[GrammarRule("orderby_direction")]
	private AstParserRuleReturnScope<object, IToken> orderby_direction()
	{
		EnterRule_orderby_direction();
		EnterRule("orderby_direction", 21);
		TraceIn("orderby_direction", 21);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken ASC96 = default(IToken);
	    IToken DESC97 = default(IToken);

	    object ASC96_tree = default(object);
	    object DESC97_tree = default(object);
	    RewriteRuleITokenStream stream_DESC=new RewriteRuleITokenStream(adaptor,"token DESC");
	    RewriteRuleITokenStream stream_ASC=new RewriteRuleITokenStream(adaptor,"token ASC");

		try { DebugEnterRule(GrammarFileName, "orderby_direction");
		DebugLocation(176, 1);
		try
		{
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:177:2: ( ASC -> T_ORDERBY_ASC | DESC -> T_ORDERBY_DESC )
			int alt38=2;
			try { DebugEnterDecision(38, decisionCanBacktrack[38]);
			int LA38_0 = input.LA(1);

			if ((LA38_0==ASC))
			{
				alt38 = 1;
			}
			else if ((LA38_0==DESC))
			{
				alt38 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 38, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:177:4: ASC
				{
				DebugLocation(177, 4);
				ASC96=(IToken)Match(input,ASC,Follow._ASC_in_orderby_direction971);  
				stream_ASC.Add(ASC96);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 177:8: -> T_ORDERBY_ASC
				{
					DebugLocation(177, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_ORDERBY_ASC, "T_ORDERBY_ASC"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:178:4: DESC
				{
				DebugLocation(178, 4);
				DESC97=(IToken)Match(input,DESC,Follow._DESC_in_orderby_direction980);  
				stream_DESC.Add(DESC97);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 178:9: -> T_ORDERBY_DESC
				{
					DebugLocation(178, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_ORDERBY_DESC, "T_ORDERBY_DESC"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_direction", 21);
			LeaveRule("orderby_direction", 21);
			LeaveRule_orderby_direction();
	    }
	 	DebugLocation(179, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_direction"); }
		return retval;

	}
	// $ANTLR end "orderby_direction"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_list() {}

	// $ANTLR start "expression_list"
	// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:184:1: expression_list : expression ( ( WS )? ',' ( WS )? expression )* -> ^( T_EXPRESSIONLIST ( expression )+ ) ;
	[GrammarRule("expression_list")]
	private AstParserRuleReturnScope<object, IToken> expression_list()
	{
		EnterRule_expression_list();
		EnterRule("expression_list", 22);
		TraceIn("expression_list", 22);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS99 = default(IToken);
	    IToken char_literal100 = default(IToken);
	    IToken WS101 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression98 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression102 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS99_tree = default(object);
	    object char_literal100_tree = default(object);
	    object WS101_tree = default(object);
	    RewriteRuleITokenStream stream_126=new RewriteRuleITokenStream(adaptor,"token 126");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "expression_list");
		DebugLocation(184, 1);
		try
		{
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:185:2: ( expression ( ( WS )? ',' ( WS )? expression )* -> ^( T_EXPRESSIONLIST ( expression )+ ) )
			DebugEnterAlt(1);
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:185:4: expression ( ( WS )? ',' ( WS )? expression )*
			{
			DebugLocation(185, 4);
			PushFollow(Follow._expression_in_expression_list998);
			expression98=expression();
			PopFollow();

			stream_expression.Add(expression98.Tree);
			DebugLocation(185, 15);
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:185:15: ( ( WS )? ',' ( WS )? expression )*
			try { DebugEnterSubRule(41);
			while (true)
			{
				int alt41=2;
				try { DebugEnterDecision(41, decisionCanBacktrack[41]);
				int LA41_0 = input.LA(1);

				if ((LA41_0==WS))
				{
					int LA41_1 = input.LA(2);

					if ((LA41_1==126))
					{
						alt41 = 1;
					}


				}
				else if ((LA41_0==126))
				{
					alt41 = 1;
				}


				} finally { DebugExitDecision(41); }
				switch ( alt41 )
				{
				case 1:
					DebugEnterAlt(1);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:185:16: ( WS )? ',' ( WS )? expression
					{
					DebugLocation(185, 16);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:185:16: ( WS )?
					int alt39=2;
					try { DebugEnterSubRule(39);
					try { DebugEnterDecision(39, decisionCanBacktrack[39]);
					int LA39_0 = input.LA(1);

					if ((LA39_0==WS))
					{
						alt39 = 1;
					}
					} finally { DebugExitDecision(39); }
					switch (alt39)
					{
					case 1:
						DebugEnterAlt(1);
						// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:185:16: WS
						{
						DebugLocation(185, 16);
						WS99=(IToken)Match(input,WS,Follow._WS_in_expression_list1001);  
						stream_WS.Add(WS99);


						}
						break;

					}
					} finally { DebugExitSubRule(39); }

					DebugLocation(185, 20);
					char_literal100=(IToken)Match(input,126,Follow._126_in_expression_list1004);  
					stream_126.Add(char_literal100);

					DebugLocation(185, 24);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:185:24: ( WS )?
					int alt40=2;
					try { DebugEnterSubRule(40);
					try { DebugEnterDecision(40, decisionCanBacktrack[40]);
					int LA40_0 = input.LA(1);

					if ((LA40_0==WS))
					{
						alt40 = 1;
					}
					} finally { DebugExitDecision(40); }
					switch (alt40)
					{
					case 1:
						DebugEnterAlt(1);
						// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:185:24: WS
						{
						DebugLocation(185, 24);
						WS101=(IToken)Match(input,WS,Follow._WS_in_expression_list1006);  
						stream_WS.Add(WS101);


						}
						break;

					}
					} finally { DebugExitSubRule(40); }

					DebugLocation(185, 28);
					PushFollow(Follow._expression_in_expression_list1009);
					expression102=expression();
					PopFollow();

					stream_expression.Add(expression102.Tree);

					}
					break;

				default:
					goto loop41;
				}
			}

			loop41:
				;

			} finally { DebugExitSubRule(41); }



			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 185:41: -> ^( T_EXPRESSIONLIST ( expression )+ )
			{
				DebugLocation(185, 44);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:185:44: ^( T_EXPRESSIONLIST ( expression )+ )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(185, 46);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_EXPRESSIONLIST, "T_EXPRESSIONLIST"), root_1);

				DebugLocation(185, 63);
				if (!(stream_expression.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_expression.HasNext )
				{
					DebugLocation(185, 63);
					adaptor.AddChild(root_1, stream_expression.NextTree());

				}
				stream_expression.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_list", 22);
			LeaveRule("expression_list", 22);
			LeaveRule_expression_list();
	    }
	 	DebugLocation(186, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_list"); }
		return retval;

	}
	// $ANTLR end "expression_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_list_or_select_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_list_or_select_command() {}

	// $ANTLR start "expression_list_or_select_command"
	// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:188:1: expression_list_or_select_command : ( expression_list | select_command );
	[GrammarRule("expression_list_or_select_command")]
	private AstParserRuleReturnScope<object, IToken> expression_list_or_select_command()
	{
		EnterRule_expression_list_or_select_command();
		EnterRule("expression_list_or_select_command", 23);
		TraceIn("expression_list_or_select_command", 23);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> expression_list103 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> select_command104 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "expression_list_or_select_command");
		DebugLocation(188, 1);
		try
		{
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:189:2: ( expression_list | select_command )
			int alt42=2;
			try { DebugEnterDecision(42, decisionCanBacktrack[42]);
			int LA42_0 = input.LA(1);

			if ((LA42_0==CAST||LA42_0==CONVERT||LA42_0==EXISTS||(LA42_0>=NOT && LA42_0<=NUMBER)||LA42_0==SIMPLE_FILE||(LA42_0>=STRING && LA42_0<=SYSTEMVAR)||LA42_0==TOKEN||LA42_0==122))
			{
				alt42 = 1;
			}
			else if ((LA42_0==SELECT))
			{
				alt42 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 42, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(42); }
			switch (alt42)
			{
			case 1:
				DebugEnterAlt(1);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:189:4: expression_list
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(189, 4);
				PushFollow(Follow._expression_list_in_expression_list_or_select_command1032);
				expression_list103=expression_list();
				PopFollow();

				adaptor.AddChild(root_0, expression_list103.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:189:22: select_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(189, 22);
				PushFollow(Follow._select_command_in_expression_list_or_select_command1036);
				select_command104=select_command();
				PopFollow();

				adaptor.AddChild(root_0, select_command104.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_list_or_select_command", 23);
			LeaveRule("expression_list_or_select_command", 23);
			LeaveRule_expression_list_or_select_command();
	    }
	 	DebugLocation(190, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_list_or_select_command"); }
		return retval;

	}
	// $ANTLR end "expression_list_or_select_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression() {}

	// $ANTLR start "expression"
	// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:192:1: expression : expression_7 ;
	[GrammarRule("expression")]
	private AstParserRuleReturnScope<object, IToken> expression()
	{
		EnterRule_expression();
		EnterRule("expression", 24);
		TraceIn("expression", 24);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> expression_7105 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(192, 1);
		try
		{
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:193:2: ( expression_7 )
			DebugEnterAlt(1);
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:193:4: expression_7
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(193, 4);
			PushFollow(Follow._expression_7_in_expression1048);
			expression_7105=expression_7();
			PopFollow();

			adaptor.AddChild(root_0, expression_7105.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression", 24);
			LeaveRule("expression", 24);
			LeaveRule_expression();
	    }
	 	DebugLocation(194, 1);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return retval;

	}
	// $ANTLR end "expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_7() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_7() {}

	// $ANTLR start "expression_7"
	// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:196:1: expression_7 : (a= expression_6 -> $a) ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )* ;
	[GrammarRule("expression_7")]
	private AstParserRuleReturnScope<object, IToken> expression_7()
	{
		EnterRule_expression_7();
		EnterRule("expression_7", 25);
		TraceIn("expression_7", 25);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS106 = default(IToken);
	    IToken WS108 = default(IToken);
	    IToken IN109 = default(IToken);
	    IToken WS110 = default(IToken);
	    IToken char_literal111 = default(IToken);
	    IToken WS112 = default(IToken);
	    IToken WS114 = default(IToken);
	    IToken char_literal115 = default(IToken);
	    IToken NOT116 = default(IToken);
	    IToken WS117 = default(IToken);
	    IToken IN118 = default(IToken);
	    IToken WS119 = default(IToken);
	    IToken char_literal120 = default(IToken);
	    IToken WS121 = default(IToken);
	    IToken WS123 = default(IToken);
	    IToken char_literal124 = default(IToken);
	    IToken WS126 = default(IToken);
	    IToken SOME127 = default(IToken);
	    IToken ANY128 = default(IToken);
	    IToken WS129 = default(IToken);
	    IToken char_literal130 = default(IToken);
	    IToken char_literal132 = default(IToken);
	    IToken WS134 = default(IToken);
	    IToken ALL135 = default(IToken);
	    IToken WS136 = default(IToken);
	    IToken char_literal137 = default(IToken);
	    IToken char_literal139 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_7107 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command113 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command122 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_4125 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command131 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_4133 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command138 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS106_tree = default(object);
	    object WS108_tree = default(object);
	    object IN109_tree = default(object);
	    object WS110_tree = default(object);
	    object char_literal111_tree = default(object);
	    object WS112_tree = default(object);
	    object WS114_tree = default(object);
	    object char_literal115_tree = default(object);
	    object NOT116_tree = default(object);
	    object WS117_tree = default(object);
	    object IN118_tree = default(object);
	    object WS119_tree = default(object);
	    object char_literal120_tree = default(object);
	    object WS121_tree = default(object);
	    object WS123_tree = default(object);
	    object char_literal124_tree = default(object);
	    object WS126_tree = default(object);
	    object SOME127_tree = default(object);
	    object ANY128_tree = default(object);
	    object WS129_tree = default(object);
	    object char_literal130_tree = default(object);
	    object char_literal132_tree = default(object);
	    object WS134_tree = default(object);
	    object ALL135_tree = default(object);
	    object WS136_tree = default(object);
	    object char_literal137_tree = default(object);
	    object char_literal139_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_ANY=new RewriteRuleITokenStream(adaptor,"token ANY");
	    RewriteRuleITokenStream stream_122=new RewriteRuleITokenStream(adaptor,"token 122");
	    RewriteRuleITokenStream stream_IN=new RewriteRuleITokenStream(adaptor,"token IN");
	    RewriteRuleITokenStream stream_123=new RewriteRuleITokenStream(adaptor,"token 123");
	    RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");
	    RewriteRuleITokenStream stream_SOME=new RewriteRuleITokenStream(adaptor,"token SOME");
	    RewriteRuleITokenStream stream_ALL=new RewriteRuleITokenStream(adaptor,"token ALL");
	    RewriteRuleSubtreeStream stream_op_7=new RewriteRuleSubtreeStream(adaptor,"rule op_7");
	    RewriteRuleSubtreeStream stream_expression_6=new RewriteRuleSubtreeStream(adaptor,"rule expression_6");
	    RewriteRuleSubtreeStream stream_expression_list_or_select_command=new RewriteRuleSubtreeStream(adaptor,"rule expression_list_or_select_command");
	    RewriteRuleSubtreeStream stream_op_4=new RewriteRuleSubtreeStream(adaptor,"rule op_4");
		try { DebugEnterRule(GrammarFileName, "expression_7");
		DebugLocation(196, 1);
		try
		{
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:197:2: ( (a= expression_6 -> $a) ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )* )
			DebugEnterAlt(1);
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:197:4: (a= expression_6 -> $a) ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )*
			{
			DebugLocation(197, 4);
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:197:4: (a= expression_6 -> $a)
			DebugEnterAlt(1);
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:197:5: a= expression_6
			{
			DebugLocation(197, 6);
			PushFollow(Follow._expression_6_in_expression_71064);
			a=expression_6();
			PopFollow();

			stream_expression_6.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 197:19: -> $a
			{
				DebugLocation(197, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(197, 25);
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:197:25: ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )*
			try { DebugEnterSubRule(55);
			while (true)
			{
				int alt55=2;
				try { DebugEnterDecision(55, decisionCanBacktrack[55]);
				int LA55_0 = input.LA(1);

				if ((LA55_0==WS))
				{
					int LA55_1 = input.LA(2);

					if ((LA55_1==NOT))
					{
						int LA55_3 = input.LA(3);

						if ((LA55_3==WS))
						{
							int LA55_5 = input.LA(4);

							if ((LA55_5==BETWEEN||LA55_5==IN||LA55_5==LIKE||LA55_5==MATCH))
							{
								alt55 = 1;
							}


						}


					}
					else if ((LA55_1==BETWEEN||LA55_1==IN||LA55_1==LIKE||LA55_1==MATCH||LA55_1==OR||(LA55_1>=117 && LA55_1<=119)||(LA55_1>=130 && LA55_1<=135)))
					{
						alt55 = 1;
					}


				}


				} finally { DebugExitDecision(55); }
				switch ( alt55 )
				{
				case 1:
					DebugEnterAlt(1);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:197:26: WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) )
					{
					DebugLocation(197, 26);
					WS106=(IToken)Match(input,WS,Follow._WS_in_expression_71071);  
					stream_WS.Add(WS106);

					DebugLocation(197, 29);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:197:29: ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) )
					int alt54=5;
					try { DebugEnterSubRule(54);
					try { DebugEnterDecision(54, decisionCanBacktrack[54]);
					switch (input.LA(1))
					{
					case BETWEEN:
					case LIKE:
					case MATCH:
					case OR:
						{
						alt54 = 1;
						}
						break;
					case NOT:
						{
						int LA54_2 = input.LA(2);

						if ((LA54_2==WS))
						{
							int LA54_13 = input.LA(3);

							if ((LA54_13==BETWEEN||LA54_13==LIKE||LA54_13==MATCH))
							{
								alt54 = 1;
							}
							else if ((LA54_13==IN))
							{
								alt54 = 3;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 54, 13, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 54, 2, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case IN:
						{
						alt54 = 2;
						}
						break;
					case 133:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA54_14 = input.LA(3);

							if ((LA54_14==ANY||LA54_14==SOME))
							{
								alt54 = 4;
							}
							else if ((LA54_14==ALL))
							{
								alt54 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 54, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt54 = 4;
							}
							break;
						case ALL:
							{
							alt54 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 54, 4, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 135:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA54_14 = input.LA(3);

							if ((LA54_14==ANY||LA54_14==SOME))
							{
								alt54 = 4;
							}
							else if ((LA54_14==ALL))
							{
								alt54 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 54, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt54 = 4;
							}
							break;
						case ALL:
							{
							alt54 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 54, 5, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 131:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA54_14 = input.LA(3);

							if ((LA54_14==ANY||LA54_14==SOME))
							{
								alt54 = 4;
							}
							else if ((LA54_14==ALL))
							{
								alt54 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 54, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt54 = 4;
							}
							break;
						case ALL:
							{
							alt54 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 54, 6, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 132:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA54_14 = input.LA(3);

							if ((LA54_14==ANY||LA54_14==SOME))
							{
								alt54 = 4;
							}
							else if ((LA54_14==ALL))
							{
								alt54 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 54, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt54 = 4;
							}
							break;
						case ALL:
							{
							alt54 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 54, 7, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 118:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA54_14 = input.LA(3);

							if ((LA54_14==ANY||LA54_14==SOME))
							{
								alt54 = 4;
							}
							else if ((LA54_14==ALL))
							{
								alt54 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 54, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt54 = 4;
							}
							break;
						case ALL:
							{
							alt54 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 54, 8, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 119:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA54_14 = input.LA(3);

							if ((LA54_14==ANY||LA54_14==SOME))
							{
								alt54 = 4;
							}
							else if ((LA54_14==ALL))
							{
								alt54 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 54, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt54 = 4;
							}
							break;
						case ALL:
							{
							alt54 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 54, 9, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 117:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA54_14 = input.LA(3);

							if ((LA54_14==ANY||LA54_14==SOME))
							{
								alt54 = 4;
							}
							else if ((LA54_14==ALL))
							{
								alt54 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 54, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt54 = 4;
							}
							break;
						case ALL:
							{
							alt54 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 54, 10, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 134:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA54_14 = input.LA(3);

							if ((LA54_14==ANY||LA54_14==SOME))
							{
								alt54 = 4;
							}
							else if ((LA54_14==ALL))
							{
								alt54 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 54, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt54 = 4;
							}
							break;
						case ALL:
							{
							alt54 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 54, 11, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 130:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA54_14 = input.LA(3);

							if ((LA54_14==ANY||LA54_14==SOME))
							{
								alt54 = 4;
							}
							else if ((LA54_14==ALL))
							{
								alt54 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 54, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt54 = 4;
							}
							break;
						case ALL:
							{
							alt54 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 54, 12, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 54, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(54); }
					switch (alt54)
					{
					case 1:
						DebugEnterAlt(1);
						// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:198:2: op_7 WS b= expression_6
						{
						DebugLocation(198, 2);
						PushFollow(Follow._op_7_in_expression_71076);
						op_7107=op_7();
						PopFollow();

						stream_op_7.Add(op_7107.Tree);
						DebugLocation(198, 7);
						WS108=(IToken)Match(input,WS,Follow._WS_in_expression_71078);  
						stream_WS.Add(WS108);

						DebugLocation(198, 11);
						PushFollow(Follow._expression_6_in_expression_71082);
						b=expression_6();
						PopFollow();

						stream_expression_6.Add(b.Tree);


						{
						// AST REWRITE
						// elements: op_7, b, expression_7
						// token labels: 
						// rule labels: retval, b
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 198:25: -> ^( T_OP_BINARY op_7 $expression_7 $b)
						{
							DebugLocation(198, 28);
							// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:198:28: ^( T_OP_BINARY op_7 $expression_7 $b)
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(198, 30);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(198, 42);
							adaptor.AddChild(root_1, stream_op_7.NextTree());
							DebugLocation(198, 48);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(198, 62);
							adaptor.AddChild(root_1, stream_b.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:199:4: IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')'
						{
						DebugLocation(199, 4);
						IN109=(IToken)Match(input,IN,Follow._IN_in_expression_71101);  
						stream_IN.Add(IN109);

						DebugLocation(199, 7);
						// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:199:7: ( WS )?
						int alt43=2;
						try { DebugEnterSubRule(43);
						try { DebugEnterDecision(43, decisionCanBacktrack[43]);
						int LA43_0 = input.LA(1);

						if ((LA43_0==WS))
						{
							alt43 = 1;
						}
						} finally { DebugExitDecision(43); }
						switch (alt43)
						{
						case 1:
							DebugEnterAlt(1);
							// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:199:7: WS
							{
							DebugLocation(199, 7);
							WS110=(IToken)Match(input,WS,Follow._WS_in_expression_71103);  
							stream_WS.Add(WS110);


							}
							break;

						}
						} finally { DebugExitSubRule(43); }

						DebugLocation(199, 11);
						char_literal111=(IToken)Match(input,122,Follow._122_in_expression_71106);  
						stream_122.Add(char_literal111);

						DebugLocation(199, 15);
						// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:199:15: ( WS )?
						int alt44=2;
						try { DebugEnterSubRule(44);
						try { DebugEnterDecision(44, decisionCanBacktrack[44]);
						int LA44_0 = input.LA(1);

						if ((LA44_0==WS))
						{
							alt44 = 1;
						}
						} finally { DebugExitDecision(44); }
						switch (alt44)
						{
						case 1:
							DebugEnterAlt(1);
							// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:199:15: WS
							{
							DebugLocation(199, 15);
							WS112=(IToken)Match(input,WS,Follow._WS_in_expression_71108);  
							stream_WS.Add(WS112);


							}
							break;

						}
						} finally { DebugExitSubRule(44); }

						DebugLocation(199, 19);
						PushFollow(Follow._expression_list_or_select_command_in_expression_71111);
						expression_list_or_select_command113=expression_list_or_select_command();
						PopFollow();

						stream_expression_list_or_select_command.Add(expression_list_or_select_command113.Tree);
						DebugLocation(199, 53);
						// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:199:53: ( WS )?
						int alt45=2;
						try { DebugEnterSubRule(45);
						try { DebugEnterDecision(45, decisionCanBacktrack[45]);
						int LA45_0 = input.LA(1);

						if ((LA45_0==WS))
						{
							alt45 = 1;
						}
						} finally { DebugExitDecision(45); }
						switch (alt45)
						{
						case 1:
							DebugEnterAlt(1);
							// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:199:53: WS
							{
							DebugLocation(199, 53);
							WS114=(IToken)Match(input,WS,Follow._WS_in_expression_71113);  
							stream_WS.Add(WS114);


							}
							break;

						}
						} finally { DebugExitSubRule(45); }

						DebugLocation(199, 57);
						char_literal115=(IToken)Match(input,123,Follow._123_in_expression_71116);  
						stream_123.Add(char_literal115);



						{
						// AST REWRITE
						// elements: expression_7, expression_list_or_select_command
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 199:61: -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command )
						{
							DebugLocation(199, 64);
							// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:199:64: ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(199, 66);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(199, 78);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_IN, "T_IN"));
							DebugLocation(199, 84);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(199, 97);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:200:4: NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')'
						{
						DebugLocation(200, 4);
						NOT116=(IToken)Match(input,NOT,Follow._NOT_in_expression_71134);  
						stream_NOT.Add(NOT116);

						DebugLocation(200, 8);
						WS117=(IToken)Match(input,WS,Follow._WS_in_expression_71136);  
						stream_WS.Add(WS117);

						DebugLocation(200, 11);
						IN118=(IToken)Match(input,IN,Follow._IN_in_expression_71138);  
						stream_IN.Add(IN118);

						DebugLocation(200, 14);
						// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:200:14: ( WS )?
						int alt46=2;
						try { DebugEnterSubRule(46);
						try { DebugEnterDecision(46, decisionCanBacktrack[46]);
						int LA46_0 = input.LA(1);

						if ((LA46_0==WS))
						{
							alt46 = 1;
						}
						} finally { DebugExitDecision(46); }
						switch (alt46)
						{
						case 1:
							DebugEnterAlt(1);
							// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:200:14: WS
							{
							DebugLocation(200, 14);
							WS119=(IToken)Match(input,WS,Follow._WS_in_expression_71140);  
							stream_WS.Add(WS119);


							}
							break;

						}
						} finally { DebugExitSubRule(46); }

						DebugLocation(200, 18);
						char_literal120=(IToken)Match(input,122,Follow._122_in_expression_71143);  
						stream_122.Add(char_literal120);

						DebugLocation(200, 22);
						// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:200:22: ( WS )?
						int alt47=2;
						try { DebugEnterSubRule(47);
						try { DebugEnterDecision(47, decisionCanBacktrack[47]);
						int LA47_0 = input.LA(1);

						if ((LA47_0==WS))
						{
							alt47 = 1;
						}
						} finally { DebugExitDecision(47); }
						switch (alt47)
						{
						case 1:
							DebugEnterAlt(1);
							// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:200:22: WS
							{
							DebugLocation(200, 22);
							WS121=(IToken)Match(input,WS,Follow._WS_in_expression_71145);  
							stream_WS.Add(WS121);


							}
							break;

						}
						} finally { DebugExitSubRule(47); }

						DebugLocation(200, 26);
						// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:200:26: ( expression_list_or_select_command )
						DebugEnterAlt(1);
						// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:200:27: expression_list_or_select_command
						{
						DebugLocation(200, 27);
						PushFollow(Follow._expression_list_or_select_command_in_expression_71149);
						expression_list_or_select_command122=expression_list_or_select_command();
						PopFollow();

						stream_expression_list_or_select_command.Add(expression_list_or_select_command122.Tree);

						}

						DebugLocation(200, 62);
						// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:200:62: ( WS )?
						int alt48=2;
						try { DebugEnterSubRule(48);
						try { DebugEnterDecision(48, decisionCanBacktrack[48]);
						int LA48_0 = input.LA(1);

						if ((LA48_0==WS))
						{
							alt48 = 1;
						}
						} finally { DebugExitDecision(48); }
						switch (alt48)
						{
						case 1:
							DebugEnterAlt(1);
							// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:200:62: WS
							{
							DebugLocation(200, 62);
							WS123=(IToken)Match(input,WS,Follow._WS_in_expression_71152);  
							stream_WS.Add(WS123);


							}
							break;

						}
						} finally { DebugExitSubRule(48); }

						DebugLocation(200, 66);
						char_literal124=(IToken)Match(input,123,Follow._123_in_expression_71155);  
						stream_123.Add(char_literal124);



						{
						// AST REWRITE
						// elements: expression_7, expression_list_or_select_command
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 200:70: -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command )
						{
							DebugLocation(200, 73);
							// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:200:73: ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(200, 75);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(200, 87);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_NOTIN, "T_NOTIN"));
							DebugLocation(200, 96);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(200, 109);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 4:
						DebugEnterAlt(4);
						// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:201:4: op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')'
						{
						DebugLocation(201, 4);
						PushFollow(Follow._op_4_in_expression_71173);
						op_4125=op_4();
						PopFollow();

						stream_op_4.Add(op_4125.Tree);
						DebugLocation(201, 9);
						// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:201:9: ( WS )?
						int alt49=2;
						try { DebugEnterSubRule(49);
						try { DebugEnterDecision(49, decisionCanBacktrack[49]);
						int LA49_0 = input.LA(1);

						if ((LA49_0==WS))
						{
							alt49 = 1;
						}
						} finally { DebugExitDecision(49); }
						switch (alt49)
						{
						case 1:
							DebugEnterAlt(1);
							// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:201:9: WS
							{
							DebugLocation(201, 9);
							WS126=(IToken)Match(input,WS,Follow._WS_in_expression_71175);  
							stream_WS.Add(WS126);


							}
							break;

						}
						} finally { DebugExitSubRule(49); }

						DebugLocation(201, 13);
						// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:201:13: ( SOME | ANY )
						int alt50=2;
						try { DebugEnterSubRule(50);
						try { DebugEnterDecision(50, decisionCanBacktrack[50]);
						int LA50_0 = input.LA(1);

						if ((LA50_0==SOME))
						{
							alt50 = 1;
						}
						else if ((LA50_0==ANY))
						{
							alt50 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 50, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						} finally { DebugExitDecision(50); }
						switch (alt50)
						{
						case 1:
							DebugEnterAlt(1);
							// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:201:14: SOME
							{
							DebugLocation(201, 14);
							SOME127=(IToken)Match(input,SOME,Follow._SOME_in_expression_71179);  
							stream_SOME.Add(SOME127);


							}
							break;
						case 2:
							DebugEnterAlt(2);
							// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:201:21: ANY
							{
							DebugLocation(201, 21);
							ANY128=(IToken)Match(input,ANY,Follow._ANY_in_expression_71183);  
							stream_ANY.Add(ANY128);


							}
							break;

						}
						} finally { DebugExitSubRule(50); }

						DebugLocation(201, 26);
						// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:201:26: ( WS )?
						int alt51=2;
						try { DebugEnterSubRule(51);
						try { DebugEnterDecision(51, decisionCanBacktrack[51]);
						int LA51_0 = input.LA(1);

						if ((LA51_0==WS))
						{
							alt51 = 1;
						}
						} finally { DebugExitDecision(51); }
						switch (alt51)
						{
						case 1:
							DebugEnterAlt(1);
							// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:201:26: WS
							{
							DebugLocation(201, 26);
							WS129=(IToken)Match(input,WS,Follow._WS_in_expression_71186);  
							stream_WS.Add(WS129);


							}
							break;

						}
						} finally { DebugExitSubRule(51); }

						DebugLocation(201, 30);
						char_literal130=(IToken)Match(input,122,Follow._122_in_expression_71189);  
						stream_122.Add(char_literal130);

						DebugLocation(201, 34);
						PushFollow(Follow._expression_list_or_select_command_in_expression_71191);
						expression_list_or_select_command131=expression_list_or_select_command();
						PopFollow();

						stream_expression_list_or_select_command.Add(expression_list_or_select_command131.Tree);
						DebugLocation(201, 68);
						char_literal132=(IToken)Match(input,123,Follow._123_in_expression_71193);  
						stream_123.Add(char_literal132);



						{
						// AST REWRITE
						// elements: op_4, expression_7, expression_list_or_select_command
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 201:72: -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command )
						{
							DebugLocation(201, 75);
							// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:201:75: ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(201, 77);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(201, 89);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_ANY, "T_ANY"));
							DebugLocation(201, 95);
							adaptor.AddChild(root_1, stream_op_4.NextTree());
							DebugLocation(201, 101);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(201, 114);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 5:
						DebugEnterAlt(5);
						// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:202:4: op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')'
						{
						DebugLocation(202, 4);
						PushFollow(Follow._op_4_in_expression_71213);
						op_4133=op_4();
						PopFollow();

						stream_op_4.Add(op_4133.Tree);
						DebugLocation(202, 9);
						// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:202:9: ( WS )?
						int alt52=2;
						try { DebugEnterSubRule(52);
						try { DebugEnterDecision(52, decisionCanBacktrack[52]);
						int LA52_0 = input.LA(1);

						if ((LA52_0==WS))
						{
							alt52 = 1;
						}
						} finally { DebugExitDecision(52); }
						switch (alt52)
						{
						case 1:
							DebugEnterAlt(1);
							// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:202:9: WS
							{
							DebugLocation(202, 9);
							WS134=(IToken)Match(input,WS,Follow._WS_in_expression_71215);  
							stream_WS.Add(WS134);


							}
							break;

						}
						} finally { DebugExitSubRule(52); }

						DebugLocation(202, 13);
						ALL135=(IToken)Match(input,ALL,Follow._ALL_in_expression_71218);  
						stream_ALL.Add(ALL135);

						DebugLocation(202, 17);
						// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:202:17: ( WS )?
						int alt53=2;
						try { DebugEnterSubRule(53);
						try { DebugEnterDecision(53, decisionCanBacktrack[53]);
						int LA53_0 = input.LA(1);

						if ((LA53_0==WS))
						{
							alt53 = 1;
						}
						} finally { DebugExitDecision(53); }
						switch (alt53)
						{
						case 1:
							DebugEnterAlt(1);
							// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:202:17: WS
							{
							DebugLocation(202, 17);
							WS136=(IToken)Match(input,WS,Follow._WS_in_expression_71220);  
							stream_WS.Add(WS136);


							}
							break;

						}
						} finally { DebugExitSubRule(53); }

						DebugLocation(202, 21);
						char_literal137=(IToken)Match(input,122,Follow._122_in_expression_71223);  
						stream_122.Add(char_literal137);

						DebugLocation(202, 25);
						PushFollow(Follow._expression_list_or_select_command_in_expression_71225);
						expression_list_or_select_command138=expression_list_or_select_command();
						PopFollow();

						stream_expression_list_or_select_command.Add(expression_list_or_select_command138.Tree);
						DebugLocation(202, 59);
						char_literal139=(IToken)Match(input,123,Follow._123_in_expression_71227);  
						stream_123.Add(char_literal139);



						{
						// AST REWRITE
						// elements: expression_list_or_select_command, op_4, expression_7
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 202:63: -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command )
						{
							DebugLocation(202, 66);
							// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:202:66: ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(202, 68);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(202, 80);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_ALL, "T_ALL"));
							DebugLocation(202, 86);
							adaptor.AddChild(root_1, stream_op_4.NextTree());
							DebugLocation(202, 92);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(202, 105);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					}
					} finally { DebugExitSubRule(54); }


					}
					break;

				default:
					goto loop55;
				}
			}

			loop55:
				;

			} finally { DebugExitSubRule(55); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_7", 25);
			LeaveRule("expression_7", 25);
			LeaveRule_expression_7();
	    }
	 	DebugLocation(204, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_7"); }
		return retval;

	}
	// $ANTLR end "expression_7"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_7() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_7() {}

	// $ANTLR start "op_7"
	// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:206:1: op_7 : ( OR -> T_OR | LIKE -> T_LIKE | NOT WS LIKE -> T_NOTLIKE | MATCH -> T_MATCH | NOT WS MATCH -> T_NOTMATCH | BETWEEN -> T_BETWEEN | NOT WS BETWEEN -> T_NOTBETWEEN );
	[GrammarRule("op_7")]
	private AstParserRuleReturnScope<object, IToken> op_7()
	{
		EnterRule_op_7();
		EnterRule("op_7", 26);
		TraceIn("op_7", 26);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken OR140 = default(IToken);
	    IToken LIKE141 = default(IToken);
	    IToken NOT142 = default(IToken);
	    IToken WS143 = default(IToken);
	    IToken LIKE144 = default(IToken);
	    IToken MATCH145 = default(IToken);
	    IToken NOT146 = default(IToken);
	    IToken WS147 = default(IToken);
	    IToken MATCH148 = default(IToken);
	    IToken BETWEEN149 = default(IToken);
	    IToken NOT150 = default(IToken);
	    IToken WS151 = default(IToken);
	    IToken BETWEEN152 = default(IToken);

	    object OR140_tree = default(object);
	    object LIKE141_tree = default(object);
	    object NOT142_tree = default(object);
	    object WS143_tree = default(object);
	    object LIKE144_tree = default(object);
	    object MATCH145_tree = default(object);
	    object NOT146_tree = default(object);
	    object WS147_tree = default(object);
	    object MATCH148_tree = default(object);
	    object BETWEEN149_tree = default(object);
	    object NOT150_tree = default(object);
	    object WS151_tree = default(object);
	    object BETWEEN152_tree = default(object);
	    RewriteRuleITokenStream stream_MATCH=new RewriteRuleITokenStream(adaptor,"token MATCH");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");
	    RewriteRuleITokenStream stream_BETWEEN=new RewriteRuleITokenStream(adaptor,"token BETWEEN");
	    RewriteRuleITokenStream stream_LIKE=new RewriteRuleITokenStream(adaptor,"token LIKE");
	    RewriteRuleITokenStream stream_OR=new RewriteRuleITokenStream(adaptor,"token OR");

		try { DebugEnterRule(GrammarFileName, "op_7");
		DebugLocation(206, 1);
		try
		{
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:206:6: ( OR -> T_OR | LIKE -> T_LIKE | NOT WS LIKE -> T_NOTLIKE | MATCH -> T_MATCH | NOT WS MATCH -> T_NOTMATCH | BETWEEN -> T_BETWEEN | NOT WS BETWEEN -> T_NOTBETWEEN )
			int alt56=7;
			try { DebugEnterDecision(56, decisionCanBacktrack[56]);
			switch (input.LA(1))
			{
			case OR:
				{
				alt56 = 1;
				}
				break;
			case LIKE:
				{
				alt56 = 2;
				}
				break;
			case NOT:
				{
				int LA56_3 = input.LA(2);

				if ((LA56_3==WS))
				{
					switch (input.LA(3))
					{
					case LIKE:
						{
						alt56 = 3;
						}
						break;
					case MATCH:
						{
						alt56 = 5;
						}
						break;
					case BETWEEN:
						{
						alt56 = 7;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 56, 6, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 56, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case MATCH:
				{
				alt56 = 4;
				}
				break;
			case BETWEEN:
				{
				alt56 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 56, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(56); }
			switch (alt56)
			{
			case 1:
				DebugEnterAlt(1);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:206:8: OR
				{
				DebugLocation(206, 8);
				OR140=(IToken)Match(input,OR,Follow._OR_in_op_71257);  
				stream_OR.Add(OR140);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 206:11: -> T_OR
				{
					DebugLocation(206, 14);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_OR, "T_OR"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:207:4: LIKE
				{
				DebugLocation(207, 4);
				LIKE141=(IToken)Match(input,LIKE,Follow._LIKE_in_op_71266);  
				stream_LIKE.Add(LIKE141);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 207:9: -> T_LIKE
				{
					DebugLocation(207, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_LIKE, "T_LIKE"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:208:4: NOT WS LIKE
				{
				DebugLocation(208, 4);
				NOT142=(IToken)Match(input,NOT,Follow._NOT_in_op_71275);  
				stream_NOT.Add(NOT142);

				DebugLocation(208, 8);
				WS143=(IToken)Match(input,WS,Follow._WS_in_op_71277);  
				stream_WS.Add(WS143);

				DebugLocation(208, 11);
				LIKE144=(IToken)Match(input,LIKE,Follow._LIKE_in_op_71279);  
				stream_LIKE.Add(LIKE144);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 208:16: -> T_NOTLIKE
				{
					DebugLocation(208, 19);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTLIKE, "T_NOTLIKE"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:209:4: MATCH
				{
				DebugLocation(209, 4);
				MATCH145=(IToken)Match(input,MATCH,Follow._MATCH_in_op_71288);  
				stream_MATCH.Add(MATCH145);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 209:10: -> T_MATCH
				{
					DebugLocation(209, 13);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MATCH, "T_MATCH"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:210:4: NOT WS MATCH
				{
				DebugLocation(210, 4);
				NOT146=(IToken)Match(input,NOT,Follow._NOT_in_op_71297);  
				stream_NOT.Add(NOT146);

				DebugLocation(210, 8);
				WS147=(IToken)Match(input,WS,Follow._WS_in_op_71299);  
				stream_WS.Add(WS147);

				DebugLocation(210, 11);
				MATCH148=(IToken)Match(input,MATCH,Follow._MATCH_in_op_71301);  
				stream_MATCH.Add(MATCH148);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 210:17: -> T_NOTMATCH
				{
					DebugLocation(210, 20);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTMATCH, "T_NOTMATCH"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:211:4: BETWEEN
				{
				DebugLocation(211, 4);
				BETWEEN149=(IToken)Match(input,BETWEEN,Follow._BETWEEN_in_op_71310);  
				stream_BETWEEN.Add(BETWEEN149);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 211:12: -> T_BETWEEN
				{
					DebugLocation(211, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BETWEEN, "T_BETWEEN"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:212:4: NOT WS BETWEEN
				{
				DebugLocation(212, 4);
				NOT150=(IToken)Match(input,NOT,Follow._NOT_in_op_71319);  
				stream_NOT.Add(NOT150);

				DebugLocation(212, 8);
				WS151=(IToken)Match(input,WS,Follow._WS_in_op_71321);  
				stream_WS.Add(WS151);

				DebugLocation(212, 11);
				BETWEEN152=(IToken)Match(input,BETWEEN,Follow._BETWEEN_in_op_71323);  
				stream_BETWEEN.Add(BETWEEN152);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 212:19: -> T_NOTBETWEEN
				{
					DebugLocation(212, 22);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTBETWEEN, "T_NOTBETWEEN"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_7", 26);
			LeaveRule("op_7", 26);
			LeaveRule_op_7();
	    }
	 	DebugLocation(213, 1);
		} finally { DebugExitRule(GrammarFileName, "op_7"); }
		return retval;

	}
	// $ANTLR end "op_7"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_6() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_6() {}

	// $ANTLR start "expression_6"
	// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:215:1: expression_6 : (a= expression_5 -> $a) ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )* ;
	[GrammarRule("expression_6")]
	private AstParserRuleReturnScope<object, IToken> expression_6()
	{
		EnterRule_expression_6();
		EnterRule("expression_6", 27);
		TraceIn("expression_6", 27);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS153 = default(IToken);
	    IToken WS155 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_6154 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS153_tree = default(object);
	    object WS155_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_op_6=new RewriteRuleSubtreeStream(adaptor,"rule op_6");
	    RewriteRuleSubtreeStream stream_expression_5=new RewriteRuleSubtreeStream(adaptor,"rule expression_5");
		try { DebugEnterRule(GrammarFileName, "expression_6");
		DebugLocation(215, 1);
		try
		{
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:216:2: ( (a= expression_5 -> $a) ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )* )
			DebugEnterAlt(1);
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:216:4: (a= expression_5 -> $a) ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )*
			{
			DebugLocation(216, 4);
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:216:4: (a= expression_5 -> $a)
			DebugEnterAlt(1);
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:216:5: a= expression_5
			{
			DebugLocation(216, 6);
			PushFollow(Follow._expression_5_in_expression_61342);
			a=expression_5();
			PopFollow();

			stream_expression_5.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 216:19: -> $a
			{
				DebugLocation(216, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(216, 25);
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:216:25: ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )*
			try { DebugEnterSubRule(57);
			while (true)
			{
				int alt57=2;
				try { DebugEnterDecision(57, decisionCanBacktrack[57]);
				int LA57_0 = input.LA(1);

				if ((LA57_0==WS))
				{
					int LA57_1 = input.LA(2);

					if ((LA57_1==AND))
					{
						alt57 = 1;
					}


				}


				} finally { DebugExitDecision(57); }
				switch ( alt57 )
				{
				case 1:
					DebugEnterAlt(1);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:216:26: WS op_6 WS b= expression_5
					{
					DebugLocation(216, 26);
					WS153=(IToken)Match(input,WS,Follow._WS_in_expression_61349);  
					stream_WS.Add(WS153);

					DebugLocation(216, 29);
					PushFollow(Follow._op_6_in_expression_61351);
					op_6154=op_6();
					PopFollow();

					stream_op_6.Add(op_6154.Tree);
					DebugLocation(216, 34);
					WS155=(IToken)Match(input,WS,Follow._WS_in_expression_61353);  
					stream_WS.Add(WS155);

					DebugLocation(216, 38);
					PushFollow(Follow._expression_5_in_expression_61357);
					b=expression_5();
					PopFollow();

					stream_expression_5.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, expression_6, op_6
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 216:52: -> ^( T_OP_BINARY op_6 $expression_6 $b)
					{
						DebugLocation(216, 55);
						// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:216:55: ^( T_OP_BINARY op_6 $expression_6 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(216, 57);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(216, 69);
						adaptor.AddChild(root_1, stream_op_6.NextTree());
						DebugLocation(216, 75);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(216, 89);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop57;
				}
			}

			loop57:
				;

			} finally { DebugExitSubRule(57); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_6", 27);
			LeaveRule("expression_6", 27);
			LeaveRule_expression_6();
	    }
	 	DebugLocation(217, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_6"); }
		return retval;

	}
	// $ANTLR end "expression_6"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_6() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_6() {}

	// $ANTLR start "op_6"
	// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:219:1: op_6 : AND -> T_AND ;
	[GrammarRule("op_6")]
	private AstParserRuleReturnScope<object, IToken> op_6()
	{
		EnterRule_op_6();
		EnterRule("op_6", 28);
		TraceIn("op_6", 28);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken AND156 = default(IToken);

	    object AND156_tree = default(object);
	    RewriteRuleITokenStream stream_AND=new RewriteRuleITokenStream(adaptor,"token AND");

		try { DebugEnterRule(GrammarFileName, "op_6");
		DebugLocation(219, 1);
		try
		{
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:219:6: ( AND -> T_AND )
			DebugEnterAlt(1);
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:219:8: AND
			{
			DebugLocation(219, 8);
			AND156=(IToken)Match(input,AND,Follow._AND_in_op_61385);  
			stream_AND.Add(AND156);



			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 219:12: -> T_AND
			{
				DebugLocation(219, 15);
				adaptor.AddChild(root_0, (object)adaptor.Create(T_AND, "T_AND"));

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_6", 28);
			LeaveRule("op_6", 28);
			LeaveRule_op_6();
	    }
	 	DebugLocation(220, 1);
		} finally { DebugExitRule(GrammarFileName, "op_6"); }
		return retval;

	}
	// $ANTLR end "op_6"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_5() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_5() {}

	// $ANTLR start "expression_5"
	// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:222:1: expression_5 : ( op_5 WS expression_5 -> ^( T_OP_UNARY op_5 expression_5 ) | expression_4 );
	[GrammarRule("expression_5")]
	private AstParserRuleReturnScope<object, IToken> expression_5()
	{
		EnterRule_expression_5();
		EnterRule("expression_5", 29);
		TraceIn("expression_5", 29);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS158 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> op_5157 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_5159 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_4160 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS158_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression_5=new RewriteRuleSubtreeStream(adaptor,"rule expression_5");
	    RewriteRuleSubtreeStream stream_op_5=new RewriteRuleSubtreeStream(adaptor,"rule op_5");
		try { DebugEnterRule(GrammarFileName, "expression_5");
		DebugLocation(222, 1);
		try
		{
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:223:2: ( op_5 WS expression_5 -> ^( T_OP_UNARY op_5 expression_5 ) | expression_4 )
			int alt58=2;
			try { DebugEnterDecision(58, decisionCanBacktrack[58]);
			int LA58_0 = input.LA(1);

			if ((LA58_0==NOT))
			{
				alt58 = 1;
			}
			else if ((LA58_0==CAST||LA58_0==CONVERT||LA58_0==EXISTS||LA58_0==NUMBER||LA58_0==SIMPLE_FILE||(LA58_0>=STRING && LA58_0<=SYSTEMVAR)||LA58_0==TOKEN||LA58_0==122))
			{
				alt58 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 58, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(58); }
			switch (alt58)
			{
			case 1:
				DebugEnterAlt(1);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:223:4: op_5 WS expression_5
				{
				DebugLocation(223, 4);
				PushFollow(Follow._op_5_in_expression_51403);
				op_5157=op_5();
				PopFollow();

				stream_op_5.Add(op_5157.Tree);
				DebugLocation(223, 9);
				WS158=(IToken)Match(input,WS,Follow._WS_in_expression_51405);  
				stream_WS.Add(WS158);

				DebugLocation(223, 12);
				PushFollow(Follow._expression_5_in_expression_51407);
				expression_5159=expression_5();
				PopFollow();

				stream_expression_5.Add(expression_5159.Tree);


				{
				// AST REWRITE
				// elements: op_5, expression_5
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 223:25: -> ^( T_OP_UNARY op_5 expression_5 )
				{
					DebugLocation(223, 28);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:223:28: ^( T_OP_UNARY op_5 expression_5 )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(223, 30);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_UNARY, "T_OP_UNARY"), root_1);

					DebugLocation(223, 41);
					adaptor.AddChild(root_1, stream_op_5.NextTree());
					DebugLocation(223, 46);
					adaptor.AddChild(root_1, stream_expression_5.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:224:4: expression_4
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(224, 4);
				PushFollow(Follow._expression_4_in_expression_51422);
				expression_4160=expression_4();
				PopFollow();

				adaptor.AddChild(root_0, expression_4160.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_5", 29);
			LeaveRule("expression_5", 29);
			LeaveRule_expression_5();
	    }
	 	DebugLocation(225, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_5"); }
		return retval;

	}
	// $ANTLR end "expression_5"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_5() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_5() {}

	// $ANTLR start "op_5"
	// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:227:1: op_5 : NOT -> T_NOT ;
	[GrammarRule("op_5")]
	private AstParserRuleReturnScope<object, IToken> op_5()
	{
		EnterRule_op_5();
		EnterRule("op_5", 30);
		TraceIn("op_5", 30);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken NOT161 = default(IToken);

	    object NOT161_tree = default(object);
	    RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");

		try { DebugEnterRule(GrammarFileName, "op_5");
		DebugLocation(227, 1);
		try
		{
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:227:7: ( NOT -> T_NOT )
			DebugEnterAlt(1);
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:227:9: NOT
			{
			DebugLocation(227, 9);
			NOT161=(IToken)Match(input,NOT,Follow._NOT_in_op_51433);  
			stream_NOT.Add(NOT161);



			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 227:13: -> T_NOT
			{
				DebugLocation(227, 16);
				adaptor.AddChild(root_0, (object)adaptor.Create(T_NOT, "T_NOT"));

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_5", 30);
			LeaveRule("op_5", 30);
			LeaveRule_op_5();
	    }
	 	DebugLocation(228, 1);
		} finally { DebugExitRule(GrammarFileName, "op_5"); }
		return retval;

	}
	// $ANTLR end "op_5"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_4() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_4() {}

	// $ANTLR start "expression_4"
	// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:230:1: expression_4 : (a= expression_3 -> $a) ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )* ;
	[GrammarRule("expression_4")]
	private AstParserRuleReturnScope<object, IToken> expression_4()
	{
		EnterRule_expression_4();
		EnterRule("expression_4", 31);
		TraceIn("expression_4", 31);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS162 = default(IToken);
	    IToken WS164 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_4163 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS162_tree = default(object);
	    object WS164_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression_3=new RewriteRuleSubtreeStream(adaptor,"rule expression_3");
	    RewriteRuleSubtreeStream stream_op_4=new RewriteRuleSubtreeStream(adaptor,"rule op_4");
		try { DebugEnterRule(GrammarFileName, "expression_4");
		DebugLocation(230, 1);
		try
		{
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:231:2: ( (a= expression_3 -> $a) ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )* )
			DebugEnterAlt(1);
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:231:4: (a= expression_3 -> $a) ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )*
			{
			DebugLocation(231, 4);
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:231:4: (a= expression_3 -> $a)
			DebugEnterAlt(1);
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:231:5: a= expression_3
			{
			DebugLocation(231, 6);
			PushFollow(Follow._expression_3_in_expression_41452);
			a=expression_3();
			PopFollow();

			stream_expression_3.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 231:19: -> $a
			{
				DebugLocation(231, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(231, 25);
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:231:25: ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )*
			try { DebugEnterSubRule(61);
			while (true)
			{
				int alt61=2;
				try { DebugEnterDecision(61, decisionCanBacktrack[61]);
				int LA61_0 = input.LA(1);

				if ((LA61_0==WS))
				{
					switch (input.LA(2))
					{
					case 133:
						{
						int LA61_4 = input.LA(3);

						if ((LA61_4==WS))
						{
							int LA61_13 = input.LA(4);

							if ((LA61_13==CAST||LA61_13==CONVERT||LA61_13==EXISTS||LA61_13==NUMBER||LA61_13==SIMPLE_FILE||(LA61_13>=STRING && LA61_13<=SYSTEMVAR)||LA61_13==TOKEN||LA61_13==122))
							{
								alt61 = 1;
							}


						}
						else if ((LA61_4==CAST||LA61_4==CONVERT||LA61_4==EXISTS||LA61_4==NUMBER||LA61_4==SIMPLE_FILE||(LA61_4>=STRING && LA61_4<=SYSTEMVAR)||LA61_4==TOKEN||LA61_4==122))
						{
							alt61 = 1;
						}


						}
						break;
					case 135:
						{
						int LA61_5 = input.LA(3);

						if ((LA61_5==WS))
						{
							int LA61_13 = input.LA(4);

							if ((LA61_13==CAST||LA61_13==CONVERT||LA61_13==EXISTS||LA61_13==NUMBER||LA61_13==SIMPLE_FILE||(LA61_13>=STRING && LA61_13<=SYSTEMVAR)||LA61_13==TOKEN||LA61_13==122))
							{
								alt61 = 1;
							}


						}
						else if ((LA61_5==CAST||LA61_5==CONVERT||LA61_5==EXISTS||LA61_5==NUMBER||LA61_5==SIMPLE_FILE||(LA61_5>=STRING && LA61_5<=SYSTEMVAR)||LA61_5==TOKEN||LA61_5==122))
						{
							alt61 = 1;
						}


						}
						break;
					case 131:
						{
						int LA61_6 = input.LA(3);

						if ((LA61_6==WS))
						{
							int LA61_13 = input.LA(4);

							if ((LA61_13==CAST||LA61_13==CONVERT||LA61_13==EXISTS||LA61_13==NUMBER||LA61_13==SIMPLE_FILE||(LA61_13>=STRING && LA61_13<=SYSTEMVAR)||LA61_13==TOKEN||LA61_13==122))
							{
								alt61 = 1;
							}


						}
						else if ((LA61_6==CAST||LA61_6==CONVERT||LA61_6==EXISTS||LA61_6==NUMBER||LA61_6==SIMPLE_FILE||(LA61_6>=STRING && LA61_6<=SYSTEMVAR)||LA61_6==TOKEN||LA61_6==122))
						{
							alt61 = 1;
						}


						}
						break;
					case 132:
						{
						int LA61_7 = input.LA(3);

						if ((LA61_7==WS))
						{
							int LA61_13 = input.LA(4);

							if ((LA61_13==CAST||LA61_13==CONVERT||LA61_13==EXISTS||LA61_13==NUMBER||LA61_13==SIMPLE_FILE||(LA61_13>=STRING && LA61_13<=SYSTEMVAR)||LA61_13==TOKEN||LA61_13==122))
							{
								alt61 = 1;
							}


						}
						else if ((LA61_7==CAST||LA61_7==CONVERT||LA61_7==EXISTS||LA61_7==NUMBER||LA61_7==SIMPLE_FILE||(LA61_7>=STRING && LA61_7<=SYSTEMVAR)||LA61_7==TOKEN||LA61_7==122))
						{
							alt61 = 1;
						}


						}
						break;
					case 118:
						{
						int LA61_8 = input.LA(3);

						if ((LA61_8==WS))
						{
							int LA61_13 = input.LA(4);

							if ((LA61_13==CAST||LA61_13==CONVERT||LA61_13==EXISTS||LA61_13==NUMBER||LA61_13==SIMPLE_FILE||(LA61_13>=STRING && LA61_13<=SYSTEMVAR)||LA61_13==TOKEN||LA61_13==122))
							{
								alt61 = 1;
							}


						}
						else if ((LA61_8==CAST||LA61_8==CONVERT||LA61_8==EXISTS||LA61_8==NUMBER||LA61_8==SIMPLE_FILE||(LA61_8>=STRING && LA61_8<=SYSTEMVAR)||LA61_8==TOKEN||LA61_8==122))
						{
							alt61 = 1;
						}


						}
						break;
					case 119:
						{
						int LA61_9 = input.LA(3);

						if ((LA61_9==WS))
						{
							int LA61_13 = input.LA(4);

							if ((LA61_13==CAST||LA61_13==CONVERT||LA61_13==EXISTS||LA61_13==NUMBER||LA61_13==SIMPLE_FILE||(LA61_13>=STRING && LA61_13<=SYSTEMVAR)||LA61_13==TOKEN||LA61_13==122))
							{
								alt61 = 1;
							}


						}
						else if ((LA61_9==CAST||LA61_9==CONVERT||LA61_9==EXISTS||LA61_9==NUMBER||LA61_9==SIMPLE_FILE||(LA61_9>=STRING && LA61_9<=SYSTEMVAR)||LA61_9==TOKEN||LA61_9==122))
						{
							alt61 = 1;
						}


						}
						break;
					case 117:
						{
						int LA61_10 = input.LA(3);

						if ((LA61_10==WS))
						{
							int LA61_13 = input.LA(4);

							if ((LA61_13==CAST||LA61_13==CONVERT||LA61_13==EXISTS||LA61_13==NUMBER||LA61_13==SIMPLE_FILE||(LA61_13>=STRING && LA61_13<=SYSTEMVAR)||LA61_13==TOKEN||LA61_13==122))
							{
								alt61 = 1;
							}


						}
						else if ((LA61_10==CAST||LA61_10==CONVERT||LA61_10==EXISTS||LA61_10==NUMBER||LA61_10==SIMPLE_FILE||(LA61_10>=STRING && LA61_10<=SYSTEMVAR)||LA61_10==TOKEN||LA61_10==122))
						{
							alt61 = 1;
						}


						}
						break;
					case 134:
						{
						int LA61_11 = input.LA(3);

						if ((LA61_11==WS))
						{
							int LA61_13 = input.LA(4);

							if ((LA61_13==CAST||LA61_13==CONVERT||LA61_13==EXISTS||LA61_13==NUMBER||LA61_13==SIMPLE_FILE||(LA61_13>=STRING && LA61_13<=SYSTEMVAR)||LA61_13==TOKEN||LA61_13==122))
							{
								alt61 = 1;
							}


						}
						else if ((LA61_11==CAST||LA61_11==CONVERT||LA61_11==EXISTS||LA61_11==NUMBER||LA61_11==SIMPLE_FILE||(LA61_11>=STRING && LA61_11<=SYSTEMVAR)||LA61_11==TOKEN||LA61_11==122))
						{
							alt61 = 1;
						}


						}
						break;
					case 130:
						{
						int LA61_12 = input.LA(3);

						if ((LA61_12==WS))
						{
							int LA61_13 = input.LA(4);

							if ((LA61_13==CAST||LA61_13==CONVERT||LA61_13==EXISTS||LA61_13==NUMBER||LA61_13==SIMPLE_FILE||(LA61_13>=STRING && LA61_13<=SYSTEMVAR)||LA61_13==TOKEN||LA61_13==122))
							{
								alt61 = 1;
							}


						}
						else if ((LA61_12==CAST||LA61_12==CONVERT||LA61_12==EXISTS||LA61_12==NUMBER||LA61_12==SIMPLE_FILE||(LA61_12>=STRING && LA61_12<=SYSTEMVAR)||LA61_12==TOKEN||LA61_12==122))
						{
							alt61 = 1;
						}


						}
						break;
					}

				}
				else if (((LA61_0>=117 && LA61_0<=119)||(LA61_0>=130 && LA61_0<=135)))
				{
					alt61 = 1;
				}


				} finally { DebugExitDecision(61); }
				switch ( alt61 )
				{
				case 1:
					DebugEnterAlt(1);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:231:26: ( WS )? op_4 ( WS )? b= expression_3
					{
					DebugLocation(231, 26);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:231:26: ( WS )?
					int alt59=2;
					try { DebugEnterSubRule(59);
					try { DebugEnterDecision(59, decisionCanBacktrack[59]);
					int LA59_0 = input.LA(1);

					if ((LA59_0==WS))
					{
						alt59 = 1;
					}
					} finally { DebugExitDecision(59); }
					switch (alt59)
					{
					case 1:
						DebugEnterAlt(1);
						// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:231:26: WS
						{
						DebugLocation(231, 26);
						WS162=(IToken)Match(input,WS,Follow._WS_in_expression_41459);  
						stream_WS.Add(WS162);


						}
						break;

					}
					} finally { DebugExitSubRule(59); }

					DebugLocation(231, 30);
					PushFollow(Follow._op_4_in_expression_41462);
					op_4163=op_4();
					PopFollow();

					stream_op_4.Add(op_4163.Tree);
					DebugLocation(231, 35);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:231:35: ( WS )?
					int alt60=2;
					try { DebugEnterSubRule(60);
					try { DebugEnterDecision(60, decisionCanBacktrack[60]);
					int LA60_0 = input.LA(1);

					if ((LA60_0==WS))
					{
						alt60 = 1;
					}
					} finally { DebugExitDecision(60); }
					switch (alt60)
					{
					case 1:
						DebugEnterAlt(1);
						// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:231:35: WS
						{
						DebugLocation(231, 35);
						WS164=(IToken)Match(input,WS,Follow._WS_in_expression_41464);  
						stream_WS.Add(WS164);


						}
						break;

					}
					} finally { DebugExitSubRule(60); }

					DebugLocation(231, 40);
					PushFollow(Follow._expression_3_in_expression_41469);
					b=expression_3();
					PopFollow();

					stream_expression_3.Add(b.Tree);


					{
					// AST REWRITE
					// elements: op_4, b, expression_4
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 231:54: -> ^( T_OP_BINARY op_4 $expression_4 $b)
					{
						DebugLocation(231, 57);
						// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:231:57: ^( T_OP_BINARY op_4 $expression_4 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(231, 59);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(231, 71);
						adaptor.AddChild(root_1, stream_op_4.NextTree());
						DebugLocation(231, 77);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(231, 91);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop61;
				}
			}

			loop61:
				;

			} finally { DebugExitSubRule(61); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_4", 31);
			LeaveRule("expression_4", 31);
			LeaveRule_expression_4();
	    }
	 	DebugLocation(232, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_4"); }
		return retval;

	}
	// $ANTLR end "expression_4"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_4() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_4() {}

	// $ANTLR start "op_4"
	// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:234:1: op_4 : ( '=' -> T_EQUAL | '>=' -> T_NOTLESS | '<=' -> T_NOTGREATER | '<>' -> T_NOTEQUAL | '!=' -> T_NOTEQUAL | '!>' -> T_NOTGREATER | '!<' -> T_NOTLESS | '>' -> T_GREATER | '<' -> T_LESS );
	[GrammarRule("op_4")]
	private AstParserRuleReturnScope<object, IToken> op_4()
	{
		EnterRule_op_4();
		EnterRule("op_4", 32);
		TraceIn("op_4", 32);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal165 = default(IToken);
	    IToken string_literal166 = default(IToken);
	    IToken string_literal167 = default(IToken);
	    IToken string_literal168 = default(IToken);
	    IToken string_literal169 = default(IToken);
	    IToken string_literal170 = default(IToken);
	    IToken string_literal171 = default(IToken);
	    IToken char_literal172 = default(IToken);
	    IToken char_literal173 = default(IToken);

	    object char_literal165_tree = default(object);
	    object string_literal166_tree = default(object);
	    object string_literal167_tree = default(object);
	    object string_literal168_tree = default(object);
	    object string_literal169_tree = default(object);
	    object string_literal170_tree = default(object);
	    object string_literal171_tree = default(object);
	    object char_literal172_tree = default(object);
	    object char_literal173_tree = default(object);
	    RewriteRuleITokenStream stream_134=new RewriteRuleITokenStream(adaptor,"token 134");
	    RewriteRuleITokenStream stream_117=new RewriteRuleITokenStream(adaptor,"token 117");
	    RewriteRuleITokenStream stream_135=new RewriteRuleITokenStream(adaptor,"token 135");
	    RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
	    RewriteRuleITokenStream stream_133=new RewriteRuleITokenStream(adaptor,"token 133");
	    RewriteRuleITokenStream stream_131=new RewriteRuleITokenStream(adaptor,"token 131");
	    RewriteRuleITokenStream stream_130=new RewriteRuleITokenStream(adaptor,"token 130");
	    RewriteRuleITokenStream stream_118=new RewriteRuleITokenStream(adaptor,"token 118");
	    RewriteRuleITokenStream stream_119=new RewriteRuleITokenStream(adaptor,"token 119");

		try { DebugEnterRule(GrammarFileName, "op_4");
		DebugLocation(234, 1);
		try
		{
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:234:6: ( '=' -> T_EQUAL | '>=' -> T_NOTLESS | '<=' -> T_NOTGREATER | '<>' -> T_NOTEQUAL | '!=' -> T_NOTEQUAL | '!>' -> T_NOTGREATER | '!<' -> T_NOTLESS | '>' -> T_GREATER | '<' -> T_LESS )
			int alt62=9;
			try { DebugEnterDecision(62, decisionCanBacktrack[62]);
			switch (input.LA(1))
			{
			case 133:
				{
				alt62 = 1;
				}
				break;
			case 135:
				{
				alt62 = 2;
				}
				break;
			case 131:
				{
				alt62 = 3;
				}
				break;
			case 132:
				{
				alt62 = 4;
				}
				break;
			case 118:
				{
				alt62 = 5;
				}
				break;
			case 119:
				{
				alt62 = 6;
				}
				break;
			case 117:
				{
				alt62 = 7;
				}
				break;
			case 134:
				{
				alt62 = 8;
				}
				break;
			case 130:
				{
				alt62 = 9;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 62, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(62); }
			switch (alt62)
			{
			case 1:
				DebugEnterAlt(1);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:234:8: '='
				{
				DebugLocation(234, 8);
				char_literal165=(IToken)Match(input,133,Follow._133_in_op_41495);  
				stream_133.Add(char_literal165);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 234:12: -> T_EQUAL
				{
					DebugLocation(234, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_EQUAL, "T_EQUAL"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:235:4: '>='
				{
				DebugLocation(235, 4);
				string_literal166=(IToken)Match(input,135,Follow._135_in_op_41504);  
				stream_135.Add(string_literal166);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 235:9: -> T_NOTLESS
				{
					DebugLocation(235, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTLESS, "T_NOTLESS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:236:4: '<='
				{
				DebugLocation(236, 4);
				string_literal167=(IToken)Match(input,131,Follow._131_in_op_41514);  
				stream_131.Add(string_literal167);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 236:9: -> T_NOTGREATER
				{
					DebugLocation(236, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTGREATER, "T_NOTGREATER"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:237:4: '<>'
				{
				DebugLocation(237, 4);
				string_literal168=(IToken)Match(input,132,Follow._132_in_op_41524);  
				stream_132.Add(string_literal168);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 237:9: -> T_NOTEQUAL
				{
					DebugLocation(237, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTEQUAL, "T_NOTEQUAL"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:238:4: '!='
				{
				DebugLocation(238, 4);
				string_literal169=(IToken)Match(input,118,Follow._118_in_op_41533);  
				stream_118.Add(string_literal169);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 238:9: -> T_NOTEQUAL
				{
					DebugLocation(238, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTEQUAL, "T_NOTEQUAL"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:239:4: '!>'
				{
				DebugLocation(239, 4);
				string_literal170=(IToken)Match(input,119,Follow._119_in_op_41542);  
				stream_119.Add(string_literal170);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 239:9: -> T_NOTGREATER
				{
					DebugLocation(239, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTGREATER, "T_NOTGREATER"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:240:4: '!<'
				{
				DebugLocation(240, 4);
				string_literal171=(IToken)Match(input,117,Follow._117_in_op_41551);  
				stream_117.Add(string_literal171);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 240:9: -> T_NOTLESS
				{
					DebugLocation(240, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTLESS, "T_NOTLESS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:241:4: '>'
				{
				DebugLocation(241, 4);
				char_literal172=(IToken)Match(input,134,Follow._134_in_op_41560);  
				stream_134.Add(char_literal172);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 241:8: -> T_GREATER
				{
					DebugLocation(241, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_GREATER, "T_GREATER"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:242:4: '<'
				{
				DebugLocation(242, 4);
				char_literal173=(IToken)Match(input,130,Follow._130_in_op_41570);  
				stream_130.Add(char_literal173);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 242:8: -> T_LESS
				{
					DebugLocation(242, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_LESS, "T_LESS"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_4", 32);
			LeaveRule("op_4", 32);
			LeaveRule_op_4();
	    }
	 	DebugLocation(243, 1);
		} finally { DebugExitRule(GrammarFileName, "op_4"); }
		return retval;

	}
	// $ANTLR end "op_4"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_3() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_3() {}

	// $ANTLR start "expression_3"
	// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:245:1: expression_3 : (a= expression_2 -> $a) ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )* ;
	[GrammarRule("expression_3")]
	private AstParserRuleReturnScope<object, IToken> expression_3()
	{
		EnterRule_expression_3();
		EnterRule("expression_3", 33);
		TraceIn("expression_3", 33);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS174 = default(IToken);
	    IToken WS176 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_3175 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS174_tree = default(object);
	    object WS176_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_op_3=new RewriteRuleSubtreeStream(adaptor,"rule op_3");
	    RewriteRuleSubtreeStream stream_expression_2=new RewriteRuleSubtreeStream(adaptor,"rule expression_2");
		try { DebugEnterRule(GrammarFileName, "expression_3");
		DebugLocation(245, 1);
		try
		{
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:246:2: ( (a= expression_2 -> $a) ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )* )
			DebugEnterAlt(1);
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:246:4: (a= expression_2 -> $a) ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )*
			{
			DebugLocation(246, 4);
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:246:4: (a= expression_2 -> $a)
			DebugEnterAlt(1);
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:246:5: a= expression_2
			{
			DebugLocation(246, 6);
			PushFollow(Follow._expression_2_in_expression_31589);
			a=expression_2();
			PopFollow();

			stream_expression_2.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 246:19: -> $a
			{
				DebugLocation(246, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(246, 25);
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:246:25: ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )*
			try { DebugEnterSubRule(65);
			while (true)
			{
				int alt65=2;
				try { DebugEnterDecision(65, decisionCanBacktrack[65]);
				int LA65_0 = input.LA(1);

				if ((LA65_0==WS))
				{
					int LA65_1 = input.LA(2);

					if ((LA65_1==121||LA65_1==125||LA65_1==127||(LA65_1>=138 && LA65_1<=139)))
					{
						alt65 = 1;
					}


				}
				else if ((LA65_0==121||LA65_0==125||LA65_0==127||(LA65_0>=138 && LA65_0<=139)))
				{
					alt65 = 1;
				}


				} finally { DebugExitDecision(65); }
				switch ( alt65 )
				{
				case 1:
					DebugEnterAlt(1);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:246:26: ( WS )? op_3 ( WS )? b= expression_2
					{
					DebugLocation(246, 26);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:246:26: ( WS )?
					int alt63=2;
					try { DebugEnterSubRule(63);
					try { DebugEnterDecision(63, decisionCanBacktrack[63]);
					int LA63_0 = input.LA(1);

					if ((LA63_0==WS))
					{
						alt63 = 1;
					}
					} finally { DebugExitDecision(63); }
					switch (alt63)
					{
					case 1:
						DebugEnterAlt(1);
						// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:246:26: WS
						{
						DebugLocation(246, 26);
						WS174=(IToken)Match(input,WS,Follow._WS_in_expression_31596);  
						stream_WS.Add(WS174);


						}
						break;

					}
					} finally { DebugExitSubRule(63); }

					DebugLocation(246, 30);
					PushFollow(Follow._op_3_in_expression_31599);
					op_3175=op_3();
					PopFollow();

					stream_op_3.Add(op_3175.Tree);
					DebugLocation(246, 35);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:246:35: ( WS )?
					int alt64=2;
					try { DebugEnterSubRule(64);
					try { DebugEnterDecision(64, decisionCanBacktrack[64]);
					int LA64_0 = input.LA(1);

					if ((LA64_0==WS))
					{
						alt64 = 1;
					}
					} finally { DebugExitDecision(64); }
					switch (alt64)
					{
					case 1:
						DebugEnterAlt(1);
						// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:246:35: WS
						{
						DebugLocation(246, 35);
						WS176=(IToken)Match(input,WS,Follow._WS_in_expression_31601);  
						stream_WS.Add(WS176);


						}
						break;

					}
					} finally { DebugExitSubRule(64); }

					DebugLocation(246, 40);
					PushFollow(Follow._expression_2_in_expression_31606);
					b=expression_2();
					PopFollow();

					stream_expression_2.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, op_3, expression_3
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 246:54: -> ^( T_OP_BINARY op_3 $expression_3 $b)
					{
						DebugLocation(246, 57);
						// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:246:57: ^( T_OP_BINARY op_3 $expression_3 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(246, 59);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(246, 71);
						adaptor.AddChild(root_1, stream_op_3.NextTree());
						DebugLocation(246, 77);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(246, 91);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop65;
				}
			}

			loop65:
				;

			} finally { DebugExitSubRule(65); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_3", 33);
			LeaveRule("expression_3", 33);
			LeaveRule_expression_3();
	    }
	 	DebugLocation(247, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_3"); }
		return retval;

	}
	// $ANTLR end "expression_3"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_3() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_3() {}

	// $ANTLR start "op_3"
	// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:249:1: op_3 : ( '+' -> T_PLUS | '-' -> T_MINUS | '&' -> T_BITWISE_AND | '|' -> T_BITWISE_OR | '^' -> T_BITWISE_XOR );
	[GrammarRule("op_3")]
	private AstParserRuleReturnScope<object, IToken> op_3()
	{
		EnterRule_op_3();
		EnterRule("op_3", 34);
		TraceIn("op_3", 34);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal177 = default(IToken);
	    IToken char_literal178 = default(IToken);
	    IToken char_literal179 = default(IToken);
	    IToken char_literal180 = default(IToken);
	    IToken char_literal181 = default(IToken);

	    object char_literal177_tree = default(object);
	    object char_literal178_tree = default(object);
	    object char_literal179_tree = default(object);
	    object char_literal180_tree = default(object);
	    object char_literal181_tree = default(object);
	    RewriteRuleITokenStream stream_125=new RewriteRuleITokenStream(adaptor,"token 125");
	    RewriteRuleITokenStream stream_127=new RewriteRuleITokenStream(adaptor,"token 127");
	    RewriteRuleITokenStream stream_138=new RewriteRuleITokenStream(adaptor,"token 138");
	    RewriteRuleITokenStream stream_121=new RewriteRuleITokenStream(adaptor,"token 121");
	    RewriteRuleITokenStream stream_139=new RewriteRuleITokenStream(adaptor,"token 139");

		try { DebugEnterRule(GrammarFileName, "op_3");
		DebugLocation(249, 1);
		try
		{
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:249:6: ( '+' -> T_PLUS | '-' -> T_MINUS | '&' -> T_BITWISE_AND | '|' -> T_BITWISE_OR | '^' -> T_BITWISE_XOR )
			int alt66=5;
			try { DebugEnterDecision(66, decisionCanBacktrack[66]);
			switch (input.LA(1))
			{
			case 125:
				{
				alt66 = 1;
				}
				break;
			case 127:
				{
				alt66 = 2;
				}
				break;
			case 121:
				{
				alt66 = 3;
				}
				break;
			case 139:
				{
				alt66 = 4;
				}
				break;
			case 138:
				{
				alt66 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 66, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(66); }
			switch (alt66)
			{
			case 1:
				DebugEnterAlt(1);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:249:8: '+'
				{
				DebugLocation(249, 8);
				char_literal177=(IToken)Match(input,125,Follow._125_in_op_31632);  
				stream_125.Add(char_literal177);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 249:12: -> T_PLUS
				{
					DebugLocation(249, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_PLUS, "T_PLUS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:250:4: '-'
				{
				DebugLocation(250, 4);
				char_literal178=(IToken)Match(input,127,Follow._127_in_op_31641);  
				stream_127.Add(char_literal178);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 250:8: -> T_MINUS
				{
					DebugLocation(250, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MINUS, "T_MINUS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:251:4: '&'
				{
				DebugLocation(251, 4);
				char_literal179=(IToken)Match(input,121,Follow._121_in_op_31650);  
				stream_121.Add(char_literal179);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 251:8: -> T_BITWISE_AND
				{
					DebugLocation(251, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_AND, "T_BITWISE_AND"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:252:4: '|'
				{
				DebugLocation(252, 4);
				char_literal180=(IToken)Match(input,139,Follow._139_in_op_31659);  
				stream_139.Add(char_literal180);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 252:8: -> T_BITWISE_OR
				{
					DebugLocation(252, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_OR, "T_BITWISE_OR"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:253:4: '^'
				{
				DebugLocation(253, 4);
				char_literal181=(IToken)Match(input,138,Follow._138_in_op_31668);  
				stream_138.Add(char_literal181);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 253:8: -> T_BITWISE_XOR
				{
					DebugLocation(253, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_XOR, "T_BITWISE_XOR"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_3", 34);
			LeaveRule("op_3", 34);
			LeaveRule_op_3();
	    }
	 	DebugLocation(254, 1);
		} finally { DebugExitRule(GrammarFileName, "op_3"); }
		return retval;

	}
	// $ANTLR end "op_3"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_2() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_2() {}

	// $ANTLR start "expression_2"
	// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:262:1: expression_2 : (a= expression_1 -> $a) ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )* ;
	[GrammarRule("expression_2")]
	private AstParserRuleReturnScope<object, IToken> expression_2()
	{
		EnterRule_expression_2();
		EnterRule("expression_2", 35);
		TraceIn("expression_2", 35);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS182 = default(IToken);
	    IToken WS184 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_2183 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS182_tree = default(object);
	    object WS184_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_op_2=new RewriteRuleSubtreeStream(adaptor,"rule op_2");
	    RewriteRuleSubtreeStream stream_expression_1=new RewriteRuleSubtreeStream(adaptor,"rule expression_1");
		try { DebugEnterRule(GrammarFileName, "expression_2");
		DebugLocation(262, 1);
		try
		{
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:263:2: ( (a= expression_1 -> $a) ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )* )
			DebugEnterAlt(1);
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:263:4: (a= expression_1 -> $a) ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )*
			{
			DebugLocation(263, 4);
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:263:4: (a= expression_1 -> $a)
			DebugEnterAlt(1);
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:263:5: a= expression_1
			{
			DebugLocation(263, 6);
			PushFollow(Follow._expression_1_in_expression_21690);
			a=expression_1();
			PopFollow();

			stream_expression_1.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 263:19: -> $a
			{
				DebugLocation(263, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(263, 25);
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:263:25: ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )*
			try { DebugEnterSubRule(69);
			while (true)
			{
				int alt69=2;
				try { DebugEnterDecision(69, decisionCanBacktrack[69]);
				int LA69_0 = input.LA(1);

				if ((LA69_0==WS))
				{
					int LA69_1 = input.LA(2);

					if ((LA69_1==124))
					{
						int LA69_4 = input.LA(3);

						if ((LA69_4==WS))
						{
							int LA69_5 = input.LA(4);

							if ((LA69_5==CAST||LA69_5==CONVERT||LA69_5==EXISTS||LA69_5==NUMBER||LA69_5==SIMPLE_FILE||(LA69_5>=STRING && LA69_5<=SYSTEMVAR)||LA69_5==TOKEN||LA69_5==122))
							{
								alt69 = 1;
							}


						}
						else if ((LA69_4==CAST||LA69_4==CONVERT||LA69_4==EXISTS||LA69_4==NUMBER||LA69_4==SIMPLE_FILE||(LA69_4>=STRING && LA69_4<=SYSTEMVAR)||LA69_4==TOKEN||LA69_4==122))
						{
							alt69 = 1;
						}


					}
					else if ((LA69_1==120||LA69_1==128))
					{
						alt69 = 1;
					}


				}
				else if ((LA69_0==120||LA69_0==124||LA69_0==128))
				{
					alt69 = 1;
				}


				} finally { DebugExitDecision(69); }
				switch ( alt69 )
				{
				case 1:
					DebugEnterAlt(1);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:263:26: ( WS )? op_2 ( WS )? b= expression_1
					{
					DebugLocation(263, 26);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:263:26: ( WS )?
					int alt67=2;
					try { DebugEnterSubRule(67);
					try { DebugEnterDecision(67, decisionCanBacktrack[67]);
					int LA67_0 = input.LA(1);

					if ((LA67_0==WS))
					{
						alt67 = 1;
					}
					} finally { DebugExitDecision(67); }
					switch (alt67)
					{
					case 1:
						DebugEnterAlt(1);
						// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:263:26: WS
						{
						DebugLocation(263, 26);
						WS182=(IToken)Match(input,WS,Follow._WS_in_expression_21697);  
						stream_WS.Add(WS182);


						}
						break;

					}
					} finally { DebugExitSubRule(67); }

					DebugLocation(263, 30);
					PushFollow(Follow._op_2_in_expression_21700);
					op_2183=op_2();
					PopFollow();

					stream_op_2.Add(op_2183.Tree);
					DebugLocation(263, 35);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:263:35: ( WS )?
					int alt68=2;
					try { DebugEnterSubRule(68);
					try { DebugEnterDecision(68, decisionCanBacktrack[68]);
					int LA68_0 = input.LA(1);

					if ((LA68_0==WS))
					{
						alt68 = 1;
					}
					} finally { DebugExitDecision(68); }
					switch (alt68)
					{
					case 1:
						DebugEnterAlt(1);
						// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:263:35: WS
						{
						DebugLocation(263, 35);
						WS184=(IToken)Match(input,WS,Follow._WS_in_expression_21702);  
						stream_WS.Add(WS184);


						}
						break;

					}
					} finally { DebugExitSubRule(68); }

					DebugLocation(263, 40);
					PushFollow(Follow._expression_1_in_expression_21707);
					b=expression_1();
					PopFollow();

					stream_expression_1.Add(b.Tree);


					{
					// AST REWRITE
					// elements: op_2, expression_2, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 263:54: -> ^( T_OP_BINARY op_2 $expression_2 $b)
					{
						DebugLocation(263, 57);
						// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:263:57: ^( T_OP_BINARY op_2 $expression_2 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(263, 59);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(263, 71);
						adaptor.AddChild(root_1, stream_op_2.NextTree());
						DebugLocation(263, 77);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(263, 91);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop69;
				}
			}

			loop69:
				;

			} finally { DebugExitSubRule(69); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_2", 35);
			LeaveRule("expression_2", 35);
			LeaveRule_expression_2();
	    }
	 	DebugLocation(264, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_2"); }
		return retval;

	}
	// $ANTLR end "expression_2"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_2() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_2() {}

	// $ANTLR start "op_2"
	// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:266:1: op_2 : ( '*' -> T_PRODUCT | '/' -> T_DIVIDE | '%' -> T_MODULO );
	[GrammarRule("op_2")]
	private AstParserRuleReturnScope<object, IToken> op_2()
	{
		EnterRule_op_2();
		EnterRule("op_2", 36);
		TraceIn("op_2", 36);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal185 = default(IToken);
	    IToken char_literal186 = default(IToken);
	    IToken char_literal187 = default(IToken);

	    object char_literal185_tree = default(object);
	    object char_literal186_tree = default(object);
	    object char_literal187_tree = default(object);
	    RewriteRuleITokenStream stream_128=new RewriteRuleITokenStream(adaptor,"token 128");
	    RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
	    RewriteRuleITokenStream stream_120=new RewriteRuleITokenStream(adaptor,"token 120");

		try { DebugEnterRule(GrammarFileName, "op_2");
		DebugLocation(266, 1);
		try
		{
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:266:6: ( '*' -> T_PRODUCT | '/' -> T_DIVIDE | '%' -> T_MODULO )
			int alt70=3;
			try { DebugEnterDecision(70, decisionCanBacktrack[70]);
			switch (input.LA(1))
			{
			case 124:
				{
				alt70 = 1;
				}
				break;
			case 128:
				{
				alt70 = 2;
				}
				break;
			case 120:
				{
				alt70 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 70, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(70); }
			switch (alt70)
			{
			case 1:
				DebugEnterAlt(1);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:266:8: '*'
				{
				DebugLocation(266, 8);
				char_literal185=(IToken)Match(input,124,Follow._124_in_op_21733);  
				stream_124.Add(char_literal185);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 266:12: -> T_PRODUCT
				{
					DebugLocation(266, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_PRODUCT, "T_PRODUCT"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:267:4: '/'
				{
				DebugLocation(267, 4);
				char_literal186=(IToken)Match(input,128,Follow._128_in_op_21742);  
				stream_128.Add(char_literal186);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 267:8: -> T_DIVIDE
				{
					DebugLocation(267, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_DIVIDE, "T_DIVIDE"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:268:4: '%'
				{
				DebugLocation(268, 4);
				char_literal187=(IToken)Match(input,120,Follow._120_in_op_21751);  
				stream_120.Add(char_literal187);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 268:8: -> T_MODULO
				{
					DebugLocation(268, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MODULO, "T_MODULO"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_2", 36);
			LeaveRule("op_2", 36);
			LeaveRule_op_2();
	    }
	 	DebugLocation(269, 1);
		} finally { DebugExitRule(GrammarFileName, "op_2"); }
		return retval;

	}
	// $ANTLR end "op_2"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_1() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_1() {}

	// $ANTLR start "expression_1"
	// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:271:1: expression_1 : ( '(' ( WS )? op_1 ( WS )? expression_1 ( WS )? ')' -> ^( T_OP_UNARY op_1 expression_1 ) | expression_atom );
	[GrammarRule("expression_1")]
	private AstParserRuleReturnScope<object, IToken> expression_1()
	{
		EnterRule_expression_1();
		EnterRule("expression_1", 37);
		TraceIn("expression_1", 37);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal188 = default(IToken);
	    IToken WS189 = default(IToken);
	    IToken WS191 = default(IToken);
	    IToken WS193 = default(IToken);
	    IToken char_literal194 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> op_1190 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_1192 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_atom195 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal188_tree = default(object);
	    object WS189_tree = default(object);
	    object WS191_tree = default(object);
	    object WS193_tree = default(object);
	    object char_literal194_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_122=new RewriteRuleITokenStream(adaptor,"token 122");
	    RewriteRuleITokenStream stream_123=new RewriteRuleITokenStream(adaptor,"token 123");
	    RewriteRuleSubtreeStream stream_expression_1=new RewriteRuleSubtreeStream(adaptor,"rule expression_1");
	    RewriteRuleSubtreeStream stream_op_1=new RewriteRuleSubtreeStream(adaptor,"rule op_1");
		try { DebugEnterRule(GrammarFileName, "expression_1");
		DebugLocation(271, 1);
		try
		{
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:273:2: ( '(' ( WS )? op_1 ( WS )? expression_1 ( WS )? ')' -> ^( T_OP_UNARY op_1 expression_1 ) | expression_atom )
			int alt74=2;
			try { DebugEnterDecision(74, decisionCanBacktrack[74]);
			int LA74_0 = input.LA(1);

			if ((LA74_0==122))
			{
				int LA74_1 = input.LA(2);

				if ((LA74_1==WS||LA74_1==125||LA74_1==127||LA74_1==140))
				{
					alt74 = 1;
				}
				else if ((LA74_1==CAST||LA74_1==CONVERT||LA74_1==EXISTS||(LA74_1>=NOT && LA74_1<=NUMBER)||LA74_1==SIMPLE_FILE||(LA74_1>=STRING && LA74_1<=SYSTEMVAR)||LA74_1==TOKEN||LA74_1==122))
				{
					alt74 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 74, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA74_0==CAST||LA74_0==CONVERT||LA74_0==EXISTS||LA74_0==NUMBER||LA74_0==SIMPLE_FILE||(LA74_0>=STRING && LA74_0<=SYSTEMVAR)||LA74_0==TOKEN))
			{
				alt74 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 74, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(74); }
			switch (alt74)
			{
			case 1:
				DebugEnterAlt(1);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:273:4: '(' ( WS )? op_1 ( WS )? expression_1 ( WS )? ')'
				{
				DebugLocation(273, 4);
				char_literal188=(IToken)Match(input,122,Follow._122_in_expression_11769);  
				stream_122.Add(char_literal188);

				DebugLocation(273, 8);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:273:8: ( WS )?
				int alt71=2;
				try { DebugEnterSubRule(71);
				try { DebugEnterDecision(71, decisionCanBacktrack[71]);
				int LA71_0 = input.LA(1);

				if ((LA71_0==WS))
				{
					alt71 = 1;
				}
				} finally { DebugExitDecision(71); }
				switch (alt71)
				{
				case 1:
					DebugEnterAlt(1);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:273:8: WS
					{
					DebugLocation(273, 8);
					WS189=(IToken)Match(input,WS,Follow._WS_in_expression_11771);  
					stream_WS.Add(WS189);


					}
					break;

				}
				} finally { DebugExitSubRule(71); }

				DebugLocation(273, 12);
				PushFollow(Follow._op_1_in_expression_11774);
				op_1190=op_1();
				PopFollow();

				stream_op_1.Add(op_1190.Tree);
				DebugLocation(273, 17);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:273:17: ( WS )?
				int alt72=2;
				try { DebugEnterSubRule(72);
				try { DebugEnterDecision(72, decisionCanBacktrack[72]);
				int LA72_0 = input.LA(1);

				if ((LA72_0==WS))
				{
					alt72 = 1;
				}
				} finally { DebugExitDecision(72); }
				switch (alt72)
				{
				case 1:
					DebugEnterAlt(1);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:273:17: WS
					{
					DebugLocation(273, 17);
					WS191=(IToken)Match(input,WS,Follow._WS_in_expression_11776);  
					stream_WS.Add(WS191);


					}
					break;

				}
				} finally { DebugExitSubRule(72); }

				DebugLocation(273, 21);
				PushFollow(Follow._expression_1_in_expression_11779);
				expression_1192=expression_1();
				PopFollow();

				stream_expression_1.Add(expression_1192.Tree);
				DebugLocation(273, 34);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:273:34: ( WS )?
				int alt73=2;
				try { DebugEnterSubRule(73);
				try { DebugEnterDecision(73, decisionCanBacktrack[73]);
				int LA73_0 = input.LA(1);

				if ((LA73_0==WS))
				{
					alt73 = 1;
				}
				} finally { DebugExitDecision(73); }
				switch (alt73)
				{
				case 1:
					DebugEnterAlt(1);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:273:34: WS
					{
					DebugLocation(273, 34);
					WS193=(IToken)Match(input,WS,Follow._WS_in_expression_11781);  
					stream_WS.Add(WS193);


					}
					break;

				}
				} finally { DebugExitSubRule(73); }

				DebugLocation(273, 38);
				char_literal194=(IToken)Match(input,123,Follow._123_in_expression_11784);  
				stream_123.Add(char_literal194);



				{
				// AST REWRITE
				// elements: op_1, expression_1
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 273:42: -> ^( T_OP_UNARY op_1 expression_1 )
				{
					DebugLocation(273, 45);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:273:45: ^( T_OP_UNARY op_1 expression_1 )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(273, 47);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_UNARY, "T_OP_UNARY"), root_1);

					DebugLocation(273, 58);
					adaptor.AddChild(root_1, stream_op_1.NextTree());
					DebugLocation(273, 63);
					adaptor.AddChild(root_1, stream_expression_1.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:275:4: expression_atom
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(275, 4);
				PushFollow(Follow._expression_atom_in_expression_11801);
				expression_atom195=expression_atom();
				PopFollow();

				adaptor.AddChild(root_0, expression_atom195.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_1", 37);
			LeaveRule("expression_1", 37);
			LeaveRule_expression_1();
	    }
	 	DebugLocation(276, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_1"); }
		return retval;

	}
	// $ANTLR end "expression_1"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_1() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_1() {}

	// $ANTLR start "op_1"
	// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:278:1: op_1 : ( '~' -> T_BITWISE_NOT | '+' -> T_PLUS | '-' -> T_MINUS );
	[GrammarRule("op_1")]
	private AstParserRuleReturnScope<object, IToken> op_1()
	{
		EnterRule_op_1();
		EnterRule("op_1", 38);
		TraceIn("op_1", 38);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal196 = default(IToken);
	    IToken char_literal197 = default(IToken);
	    IToken char_literal198 = default(IToken);

	    object char_literal196_tree = default(object);
	    object char_literal197_tree = default(object);
	    object char_literal198_tree = default(object);
	    RewriteRuleITokenStream stream_125=new RewriteRuleITokenStream(adaptor,"token 125");
	    RewriteRuleITokenStream stream_127=new RewriteRuleITokenStream(adaptor,"token 127");
	    RewriteRuleITokenStream stream_140=new RewriteRuleITokenStream(adaptor,"token 140");

		try { DebugEnterRule(GrammarFileName, "op_1");
		DebugLocation(278, 1);
		try
		{
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:278:6: ( '~' -> T_BITWISE_NOT | '+' -> T_PLUS | '-' -> T_MINUS )
			int alt75=3;
			try { DebugEnterDecision(75, decisionCanBacktrack[75]);
			switch (input.LA(1))
			{
			case 140:
				{
				alt75 = 1;
				}
				break;
			case 125:
				{
				alt75 = 2;
				}
				break;
			case 127:
				{
				alt75 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 75, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(75); }
			switch (alt75)
			{
			case 1:
				DebugEnterAlt(1);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:278:8: '~'
				{
				DebugLocation(278, 8);
				char_literal196=(IToken)Match(input,140,Follow._140_in_op_11811);  
				stream_140.Add(char_literal196);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 278:12: -> T_BITWISE_NOT
				{
					DebugLocation(278, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_NOT, "T_BITWISE_NOT"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:279:5: '+'
				{
				DebugLocation(279, 5);
				char_literal197=(IToken)Match(input,125,Follow._125_in_op_11821);  
				stream_125.Add(char_literal197);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 279:9: -> T_PLUS
				{
					DebugLocation(279, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_PLUS, "T_PLUS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:280:4: '-'
				{
				DebugLocation(280, 4);
				char_literal198=(IToken)Match(input,127,Follow._127_in_op_11830);  
				stream_127.Add(char_literal198);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 280:8: -> T_MINUS
				{
					DebugLocation(280, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MINUS, "T_MINUS"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_1", 38);
			LeaveRule("op_1", 38);
			LeaveRule_op_1();
	    }
	 	DebugLocation(281, 1);
		} finally { DebugExitRule(GrammarFileName, "op_1"); }
		return retval;

	}
	// $ANTLR end "op_1"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_atom() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_atom() {}

	// $ANTLR start "expression_atom"
	// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:283:1: expression_atom : ( NUMBER -> ^( T_INTEGER NUMBER ) | STRING -> ^( T_STRING STRING ) | SYSTEMVAR -> ^( T_SYSTEMVAR SYSTEMVAR ) | '(' expression ')' -> expression | functioncall_or_column | conversion | EXISTS ( WS )? '(' ( WS )? select_command ( WS )? ')' -> ^( T_EXISTS select_command ) );
	[GrammarRule("expression_atom")]
	private AstParserRuleReturnScope<object, IToken> expression_atom()
	{
		EnterRule_expression_atom();
		EnterRule("expression_atom", 39);
		TraceIn("expression_atom", 39);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken NUMBER199 = default(IToken);
	    IToken STRING200 = default(IToken);
	    IToken SYSTEMVAR201 = default(IToken);
	    IToken char_literal202 = default(IToken);
	    IToken char_literal204 = default(IToken);
	    IToken EXISTS207 = default(IToken);
	    IToken WS208 = default(IToken);
	    IToken char_literal209 = default(IToken);
	    IToken WS210 = default(IToken);
	    IToken WS212 = default(IToken);
	    IToken char_literal213 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression203 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> functioncall_or_column205 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> conversion206 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> select_command211 = default(AstParserRuleReturnScope<object, IToken>);

	    object NUMBER199_tree = default(object);
	    object STRING200_tree = default(object);
	    object SYSTEMVAR201_tree = default(object);
	    object char_literal202_tree = default(object);
	    object char_literal204_tree = default(object);
	    object EXISTS207_tree = default(object);
	    object WS208_tree = default(object);
	    object char_literal209_tree = default(object);
	    object WS210_tree = default(object);
	    object WS212_tree = default(object);
	    object char_literal213_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_122=new RewriteRuleITokenStream(adaptor,"token 122");
	    RewriteRuleITokenStream stream_EXISTS=new RewriteRuleITokenStream(adaptor,"token EXISTS");
	    RewriteRuleITokenStream stream_123=new RewriteRuleITokenStream(adaptor,"token 123");
	    RewriteRuleITokenStream stream_SYSTEMVAR=new RewriteRuleITokenStream(adaptor,"token SYSTEMVAR");
	    RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
	    RewriteRuleITokenStream stream_NUMBER=new RewriteRuleITokenStream(adaptor,"token NUMBER");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_select_command=new RewriteRuleSubtreeStream(adaptor,"rule select_command");
		try { DebugEnterRule(GrammarFileName, "expression_atom");
		DebugLocation(283, 1);
		try
		{
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:284:2: ( NUMBER -> ^( T_INTEGER NUMBER ) | STRING -> ^( T_STRING STRING ) | SYSTEMVAR -> ^( T_SYSTEMVAR SYSTEMVAR ) | '(' expression ')' -> expression | functioncall_or_column | conversion | EXISTS ( WS )? '(' ( WS )? select_command ( WS )? ')' -> ^( T_EXISTS select_command ) )
			int alt79=7;
			try { DebugEnterDecision(79, decisionCanBacktrack[79]);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt79 = 1;
				}
				break;
			case STRING:
				{
				alt79 = 2;
				}
				break;
			case SYSTEMVAR:
				{
				alt79 = 3;
				}
				break;
			case 122:
				{
				alt79 = 4;
				}
				break;
			case SIMPLE_FILE:
			case TOKEN:
				{
				alt79 = 5;
				}
				break;
			case CAST:
			case CONVERT:
				{
				alt79 = 6;
				}
				break;
			case EXISTS:
				{
				alt79 = 7;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 79, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(79); }
			switch (alt79)
			{
			case 1:
				DebugEnterAlt(1);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:284:4: NUMBER
				{
				DebugLocation(284, 4);
				NUMBER199=(IToken)Match(input,NUMBER,Follow._NUMBER_in_expression_atom1845);  
				stream_NUMBER.Add(NUMBER199);



				{
				// AST REWRITE
				// elements: NUMBER
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 284:11: -> ^( T_INTEGER NUMBER )
				{
					DebugLocation(284, 14);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:284:14: ^( T_INTEGER NUMBER )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(284, 16);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_INTEGER, "T_INTEGER"), root_1);

					DebugLocation(284, 26);
					adaptor.AddChild(root_1, stream_NUMBER.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:285:4: STRING
				{
				DebugLocation(285, 4);
				STRING200=(IToken)Match(input,STRING,Follow._STRING_in_expression_atom1858);  
				stream_STRING.Add(STRING200);



				{
				// AST REWRITE
				// elements: STRING
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 285:11: -> ^( T_STRING STRING )
				{
					DebugLocation(285, 14);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:285:14: ^( T_STRING STRING )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(285, 16);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_STRING, "T_STRING"), root_1);

					DebugLocation(285, 25);
					adaptor.AddChild(root_1, stream_STRING.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:286:4: SYSTEMVAR
				{
				DebugLocation(286, 4);
				SYSTEMVAR201=(IToken)Match(input,SYSTEMVAR,Follow._SYSTEMVAR_in_expression_atom1871);  
				stream_SYSTEMVAR.Add(SYSTEMVAR201);



				{
				// AST REWRITE
				// elements: SYSTEMVAR
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 286:14: -> ^( T_SYSTEMVAR SYSTEMVAR )
				{
					DebugLocation(286, 17);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:286:17: ^( T_SYSTEMVAR SYSTEMVAR )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(286, 19);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SYSTEMVAR, "T_SYSTEMVAR"), root_1);

					DebugLocation(286, 31);
					adaptor.AddChild(root_1, stream_SYSTEMVAR.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:287:4: '(' expression ')'
				{
				DebugLocation(287, 4);
				char_literal202=(IToken)Match(input,122,Follow._122_in_expression_atom1884);  
				stream_122.Add(char_literal202);

				DebugLocation(287, 8);
				PushFollow(Follow._expression_in_expression_atom1886);
				expression203=expression();
				PopFollow();

				stream_expression.Add(expression203.Tree);
				DebugLocation(287, 19);
				char_literal204=(IToken)Match(input,123,Follow._123_in_expression_atom1888);  
				stream_123.Add(char_literal204);



				{
				// AST REWRITE
				// elements: expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 287:23: -> expression
				{
					DebugLocation(287, 26);
					adaptor.AddChild(root_0, stream_expression.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:288:4: functioncall_or_column
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(288, 4);
				PushFollow(Follow._functioncall_or_column_in_expression_atom1897);
				functioncall_or_column205=functioncall_or_column();
				PopFollow();

				adaptor.AddChild(root_0, functioncall_or_column205.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:289:4: conversion
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(289, 4);
				PushFollow(Follow._conversion_in_expression_atom1902);
				conversion206=conversion();
				PopFollow();

				adaptor.AddChild(root_0, conversion206.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:290:4: EXISTS ( WS )? '(' ( WS )? select_command ( WS )? ')'
				{
				DebugLocation(290, 4);
				EXISTS207=(IToken)Match(input,EXISTS,Follow._EXISTS_in_expression_atom1907);  
				stream_EXISTS.Add(EXISTS207);

				DebugLocation(290, 11);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:290:11: ( WS )?
				int alt76=2;
				try { DebugEnterSubRule(76);
				try { DebugEnterDecision(76, decisionCanBacktrack[76]);
				int LA76_0 = input.LA(1);

				if ((LA76_0==WS))
				{
					alt76 = 1;
				}
				} finally { DebugExitDecision(76); }
				switch (alt76)
				{
				case 1:
					DebugEnterAlt(1);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:290:11: WS
					{
					DebugLocation(290, 11);
					WS208=(IToken)Match(input,WS,Follow._WS_in_expression_atom1909);  
					stream_WS.Add(WS208);


					}
					break;

				}
				} finally { DebugExitSubRule(76); }

				DebugLocation(290, 15);
				char_literal209=(IToken)Match(input,122,Follow._122_in_expression_atom1912);  
				stream_122.Add(char_literal209);

				DebugLocation(290, 19);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:290:19: ( WS )?
				int alt77=2;
				try { DebugEnterSubRule(77);
				try { DebugEnterDecision(77, decisionCanBacktrack[77]);
				int LA77_0 = input.LA(1);

				if ((LA77_0==WS))
				{
					alt77 = 1;
				}
				} finally { DebugExitDecision(77); }
				switch (alt77)
				{
				case 1:
					DebugEnterAlt(1);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:290:19: WS
					{
					DebugLocation(290, 19);
					WS210=(IToken)Match(input,WS,Follow._WS_in_expression_atom1914);  
					stream_WS.Add(WS210);


					}
					break;

				}
				} finally { DebugExitSubRule(77); }

				DebugLocation(290, 23);
				PushFollow(Follow._select_command_in_expression_atom1917);
				select_command211=select_command();
				PopFollow();

				stream_select_command.Add(select_command211.Tree);
				DebugLocation(290, 38);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:290:38: ( WS )?
				int alt78=2;
				try { DebugEnterSubRule(78);
				try { DebugEnterDecision(78, decisionCanBacktrack[78]);
				int LA78_0 = input.LA(1);

				if ((LA78_0==WS))
				{
					alt78 = 1;
				}
				} finally { DebugExitDecision(78); }
				switch (alt78)
				{
				case 1:
					DebugEnterAlt(1);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:290:38: WS
					{
					DebugLocation(290, 38);
					WS212=(IToken)Match(input,WS,Follow._WS_in_expression_atom1919);  
					stream_WS.Add(WS212);


					}
					break;

				}
				} finally { DebugExitSubRule(78); }

				DebugLocation(290, 42);
				char_literal213=(IToken)Match(input,123,Follow._123_in_expression_atom1922);  
				stream_123.Add(char_literal213);



				{
				// AST REWRITE
				// elements: select_command
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 290:46: -> ^( T_EXISTS select_command )
				{
					DebugLocation(290, 49);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:290:49: ^( T_EXISTS select_command )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(290, 51);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_EXISTS, "T_EXISTS"), root_1);

					DebugLocation(290, 60);
					adaptor.AddChild(root_1, stream_select_command.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_atom", 39);
			LeaveRule("expression_atom", 39);
			LeaveRule_expression_atom();
	    }
	 	DebugLocation(291, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_atom"); }
		return retval;

	}
	// $ANTLR end "expression_atom"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_functioncall_or_column() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_functioncall_or_column() {}

	// $ANTLR start "functioncall_or_column"
	// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:294:1: functioncall_or_column : ( TOKEN ( WS )? '(' ( WS )? ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )? ')' -> ^( T_FUNCTIONCALL TOKEN ( expression )* ) | SIMPLE_FILE -> ^( T_COLUMN SIMPLE_FILE ) );
	[GrammarRule("functioncall_or_column")]
	private AstParserRuleReturnScope<object, IToken> functioncall_or_column()
	{
		EnterRule_functioncall_or_column();
		EnterRule("functioncall_or_column", 40);
		TraceIn("functioncall_or_column", 40);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN214 = default(IToken);
	    IToken WS215 = default(IToken);
	    IToken char_literal216 = default(IToken);
	    IToken WS217 = default(IToken);
	    IToken WS219 = default(IToken);
	    IToken char_literal220 = default(IToken);
	    IToken WS221 = default(IToken);
	    IToken WS223 = default(IToken);
	    IToken char_literal224 = default(IToken);
	    IToken SIMPLE_FILE225 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression218 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression222 = default(AstParserRuleReturnScope<object, IToken>);

	    object TOKEN214_tree = default(object);
	    object WS215_tree = default(object);
	    object char_literal216_tree = default(object);
	    object WS217_tree = default(object);
	    object WS219_tree = default(object);
	    object char_literal220_tree = default(object);
	    object WS221_tree = default(object);
	    object WS223_tree = default(object);
	    object char_literal224_tree = default(object);
	    object SIMPLE_FILE225_tree = default(object);
	    RewriteRuleITokenStream stream_126=new RewriteRuleITokenStream(adaptor,"token 126");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_SIMPLE_FILE=new RewriteRuleITokenStream(adaptor,"token SIMPLE_FILE");
	    RewriteRuleITokenStream stream_122=new RewriteRuleITokenStream(adaptor,"token 122");
	    RewriteRuleITokenStream stream_123=new RewriteRuleITokenStream(adaptor,"token 123");
	    RewriteRuleITokenStream stream_TOKEN=new RewriteRuleITokenStream(adaptor,"token TOKEN");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "functioncall_or_column");
		DebugLocation(294, 1);
		try
		{
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:295:2: ( TOKEN ( WS )? '(' ( WS )? ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )? ')' -> ^( T_FUNCTIONCALL TOKEN ( expression )* ) | SIMPLE_FILE -> ^( T_COLUMN SIMPLE_FILE ) )
			int alt87=2;
			try { DebugEnterDecision(87, decisionCanBacktrack[87]);
			int LA87_0 = input.LA(1);

			if ((LA87_0==TOKEN))
			{
				alt87 = 1;
			}
			else if ((LA87_0==SIMPLE_FILE))
			{
				alt87 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 87, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(87); }
			switch (alt87)
			{
			case 1:
				DebugEnterAlt(1);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:295:4: TOKEN ( WS )? '(' ( WS )? ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )? ')'
				{
				DebugLocation(295, 4);
				TOKEN214=(IToken)Match(input,TOKEN,Follow._TOKEN_in_functioncall_or_column1942);  
				stream_TOKEN.Add(TOKEN214);

				DebugLocation(295, 10);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:295:10: ( WS )?
				int alt80=2;
				try { DebugEnterSubRule(80);
				try { DebugEnterDecision(80, decisionCanBacktrack[80]);
				int LA80_0 = input.LA(1);

				if ((LA80_0==WS))
				{
					alt80 = 1;
				}
				} finally { DebugExitDecision(80); }
				switch (alt80)
				{
				case 1:
					DebugEnterAlt(1);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:295:10: WS
					{
					DebugLocation(295, 10);
					WS215=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column1944);  
					stream_WS.Add(WS215);


					}
					break;

				}
				} finally { DebugExitSubRule(80); }

				DebugLocation(295, 14);
				char_literal216=(IToken)Match(input,122,Follow._122_in_functioncall_or_column1947);  
				stream_122.Add(char_literal216);

				DebugLocation(295, 18);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:295:18: ( WS )?
				int alt81=2;
				try { DebugEnterSubRule(81);
				try { DebugEnterDecision(81, decisionCanBacktrack[81]);
				int LA81_0 = input.LA(1);

				if ((LA81_0==WS))
				{
					alt81 = 1;
				}
				} finally { DebugExitDecision(81); }
				switch (alt81)
				{
				case 1:
					DebugEnterAlt(1);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:295:18: WS
					{
					DebugLocation(295, 18);
					WS217=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column1949);  
					stream_WS.Add(WS217);


					}
					break;

				}
				} finally { DebugExitSubRule(81); }

				DebugLocation(295, 22);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:295:22: ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )?
				int alt86=2;
				try { DebugEnterSubRule(86);
				try { DebugEnterDecision(86, decisionCanBacktrack[86]);
				int LA86_0 = input.LA(1);

				if ((LA86_0==CAST||LA86_0==CONVERT||LA86_0==EXISTS||(LA86_0>=NOT && LA86_0<=NUMBER)||LA86_0==SIMPLE_FILE||(LA86_0>=STRING && LA86_0<=SYSTEMVAR)||LA86_0==TOKEN||LA86_0==122))
				{
					alt86 = 1;
				}
				} finally { DebugExitDecision(86); }
				switch (alt86)
				{
				case 1:
					DebugEnterAlt(1);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:295:23: expression ( WS )? ( ',' ( WS )? expression ( WS )? )*
					{
					DebugLocation(295, 23);
					PushFollow(Follow._expression_in_functioncall_or_column1953);
					expression218=expression();
					PopFollow();

					stream_expression.Add(expression218.Tree);
					DebugLocation(295, 34);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:295:34: ( WS )?
					int alt82=2;
					try { DebugEnterSubRule(82);
					try { DebugEnterDecision(82, decisionCanBacktrack[82]);
					int LA82_0 = input.LA(1);

					if ((LA82_0==WS))
					{
						alt82 = 1;
					}
					} finally { DebugExitDecision(82); }
					switch (alt82)
					{
					case 1:
						DebugEnterAlt(1);
						// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:295:34: WS
						{
						DebugLocation(295, 34);
						WS219=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column1955);  
						stream_WS.Add(WS219);


						}
						break;

					}
					} finally { DebugExitSubRule(82); }

					DebugLocation(295, 38);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:295:38: ( ',' ( WS )? expression ( WS )? )*
					try { DebugEnterSubRule(85);
					while (true)
					{
						int alt85=2;
						try { DebugEnterDecision(85, decisionCanBacktrack[85]);
						int LA85_0 = input.LA(1);

						if ((LA85_0==126))
						{
							alt85 = 1;
						}


						} finally { DebugExitDecision(85); }
						switch ( alt85 )
						{
						case 1:
							DebugEnterAlt(1);
							// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:295:39: ',' ( WS )? expression ( WS )?
							{
							DebugLocation(295, 39);
							char_literal220=(IToken)Match(input,126,Follow._126_in_functioncall_or_column1959);  
							stream_126.Add(char_literal220);

							DebugLocation(295, 43);
							// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:295:43: ( WS )?
							int alt83=2;
							try { DebugEnterSubRule(83);
							try { DebugEnterDecision(83, decisionCanBacktrack[83]);
							int LA83_0 = input.LA(1);

							if ((LA83_0==WS))
							{
								alt83 = 1;
							}
							} finally { DebugExitDecision(83); }
							switch (alt83)
							{
							case 1:
								DebugEnterAlt(1);
								// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:295:43: WS
								{
								DebugLocation(295, 43);
								WS221=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column1961);  
								stream_WS.Add(WS221);


								}
								break;

							}
							} finally { DebugExitSubRule(83); }

							DebugLocation(295, 47);
							PushFollow(Follow._expression_in_functioncall_or_column1964);
							expression222=expression();
							PopFollow();

							stream_expression.Add(expression222.Tree);
							DebugLocation(295, 58);
							// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:295:58: ( WS )?
							int alt84=2;
							try { DebugEnterSubRule(84);
							try { DebugEnterDecision(84, decisionCanBacktrack[84]);
							int LA84_0 = input.LA(1);

							if ((LA84_0==WS))
							{
								alt84 = 1;
							}
							} finally { DebugExitDecision(84); }
							switch (alt84)
							{
							case 1:
								DebugEnterAlt(1);
								// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:295:58: WS
								{
								DebugLocation(295, 58);
								WS223=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column1966);  
								stream_WS.Add(WS223);


								}
								break;

							}
							} finally { DebugExitSubRule(84); }


							}
							break;

						default:
							goto loop85;
						}
					}

					loop85:
						;

					} finally { DebugExitSubRule(85); }


					}
					break;

				}
				} finally { DebugExitSubRule(86); }

				DebugLocation(295, 66);
				char_literal224=(IToken)Match(input,123,Follow._123_in_functioncall_or_column1973);  
				stream_123.Add(char_literal224);



				{
				// AST REWRITE
				// elements: TOKEN, expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 295:70: -> ^( T_FUNCTIONCALL TOKEN ( expression )* )
				{
					DebugLocation(295, 73);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:295:73: ^( T_FUNCTIONCALL TOKEN ( expression )* )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(295, 75);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(295, 90);
					adaptor.AddChild(root_1, stream_TOKEN.NextNode());
					DebugLocation(295, 96);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:295:96: ( expression )*
					while ( stream_expression.HasNext )
					{
						DebugLocation(295, 96);
						adaptor.AddChild(root_1, stream_expression.NextTree());

					}
					stream_expression.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:297:4: SIMPLE_FILE
				{
				DebugLocation(297, 4);
				SIMPLE_FILE225=(IToken)Match(input,SIMPLE_FILE,Follow._SIMPLE_FILE_in_functioncall_or_column1991);  
				stream_SIMPLE_FILE.Add(SIMPLE_FILE225);



				{
				// AST REWRITE
				// elements: SIMPLE_FILE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 297:16: -> ^( T_COLUMN SIMPLE_FILE )
				{
					DebugLocation(297, 19);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:297:19: ^( T_COLUMN SIMPLE_FILE )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(297, 21);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_COLUMN, "T_COLUMN"), root_1);

					DebugLocation(297, 30);
					adaptor.AddChild(root_1, stream_SIMPLE_FILE.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("functioncall_or_column", 40);
			LeaveRule("functioncall_or_column", 40);
			LeaveRule_functioncall_or_column();
	    }
	 	DebugLocation(298, 1);
		} finally { DebugExitRule(GrammarFileName, "functioncall_or_column"); }
		return retval;

	}
	// $ANTLR end "functioncall_or_column"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_conversion() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_conversion() {}

	// $ANTLR start "conversion"
	// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:300:1: conversion : ( CONVERT ( WS )? '(' ( WS )? TOKEN ( WS )? ',' ( WS )? expression ( WS )? ')' -> ^( T_CONVERT TOKEN expression ) | CAST ( WS )? '(' ( WS )? expression WS AS WS TOKEN ( WS )? ')' -> ^( T_CONVERT TOKEN expression ) );
	[GrammarRule("conversion")]
	private AstParserRuleReturnScope<object, IToken> conversion()
	{
		EnterRule_conversion();
		EnterRule("conversion", 41);
		TraceIn("conversion", 41);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken CONVERT226 = default(IToken);
	    IToken WS227 = default(IToken);
	    IToken char_literal228 = default(IToken);
	    IToken WS229 = default(IToken);
	    IToken TOKEN230 = default(IToken);
	    IToken WS231 = default(IToken);
	    IToken char_literal232 = default(IToken);
	    IToken WS233 = default(IToken);
	    IToken WS235 = default(IToken);
	    IToken char_literal236 = default(IToken);
	    IToken CAST237 = default(IToken);
	    IToken WS238 = default(IToken);
	    IToken char_literal239 = default(IToken);
	    IToken WS240 = default(IToken);
	    IToken WS242 = default(IToken);
	    IToken AS243 = default(IToken);
	    IToken WS244 = default(IToken);
	    IToken TOKEN245 = default(IToken);
	    IToken WS246 = default(IToken);
	    IToken char_literal247 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression234 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression241 = default(AstParserRuleReturnScope<object, IToken>);

	    object CONVERT226_tree = default(object);
	    object WS227_tree = default(object);
	    object char_literal228_tree = default(object);
	    object WS229_tree = default(object);
	    object TOKEN230_tree = default(object);
	    object WS231_tree = default(object);
	    object char_literal232_tree = default(object);
	    object WS233_tree = default(object);
	    object WS235_tree = default(object);
	    object char_literal236_tree = default(object);
	    object CAST237_tree = default(object);
	    object WS238_tree = default(object);
	    object char_literal239_tree = default(object);
	    object WS240_tree = default(object);
	    object WS242_tree = default(object);
	    object AS243_tree = default(object);
	    object WS244_tree = default(object);
	    object TOKEN245_tree = default(object);
	    object WS246_tree = default(object);
	    object char_literal247_tree = default(object);
	    RewriteRuleITokenStream stream_CAST=new RewriteRuleITokenStream(adaptor,"token CAST");
	    RewriteRuleITokenStream stream_AS=new RewriteRuleITokenStream(adaptor,"token AS");
	    RewriteRuleITokenStream stream_126=new RewriteRuleITokenStream(adaptor,"token 126");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_122=new RewriteRuleITokenStream(adaptor,"token 122");
	    RewriteRuleITokenStream stream_123=new RewriteRuleITokenStream(adaptor,"token 123");
	    RewriteRuleITokenStream stream_CONVERT=new RewriteRuleITokenStream(adaptor,"token CONVERT");
	    RewriteRuleITokenStream stream_TOKEN=new RewriteRuleITokenStream(adaptor,"token TOKEN");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "conversion");
		DebugLocation(300, 1);
		try
		{
			// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:301:2: ( CONVERT ( WS )? '(' ( WS )? TOKEN ( WS )? ',' ( WS )? expression ( WS )? ')' -> ^( T_CONVERT TOKEN expression ) | CAST ( WS )? '(' ( WS )? expression WS AS WS TOKEN ( WS )? ')' -> ^( T_CONVERT TOKEN expression ) )
			int alt96=2;
			try { DebugEnterDecision(96, decisionCanBacktrack[96]);
			int LA96_0 = input.LA(1);

			if ((LA96_0==CONVERT))
			{
				alt96 = 1;
			}
			else if ((LA96_0==CAST))
			{
				alt96 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 96, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(96); }
			switch (alt96)
			{
			case 1:
				DebugEnterAlt(1);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:301:4: CONVERT ( WS )? '(' ( WS )? TOKEN ( WS )? ',' ( WS )? expression ( WS )? ')'
				{
				DebugLocation(301, 4);
				CONVERT226=(IToken)Match(input,CONVERT,Follow._CONVERT_in_conversion2011);  
				stream_CONVERT.Add(CONVERT226);

				DebugLocation(301, 12);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:301:12: ( WS )?
				int alt88=2;
				try { DebugEnterSubRule(88);
				try { DebugEnterDecision(88, decisionCanBacktrack[88]);
				int LA88_0 = input.LA(1);

				if ((LA88_0==WS))
				{
					alt88 = 1;
				}
				} finally { DebugExitDecision(88); }
				switch (alt88)
				{
				case 1:
					DebugEnterAlt(1);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:301:12: WS
					{
					DebugLocation(301, 12);
					WS227=(IToken)Match(input,WS,Follow._WS_in_conversion2013);  
					stream_WS.Add(WS227);


					}
					break;

				}
				} finally { DebugExitSubRule(88); }

				DebugLocation(301, 16);
				char_literal228=(IToken)Match(input,122,Follow._122_in_conversion2016);  
				stream_122.Add(char_literal228);

				DebugLocation(301, 20);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:301:20: ( WS )?
				int alt89=2;
				try { DebugEnterSubRule(89);
				try { DebugEnterDecision(89, decisionCanBacktrack[89]);
				int LA89_0 = input.LA(1);

				if ((LA89_0==WS))
				{
					alt89 = 1;
				}
				} finally { DebugExitDecision(89); }
				switch (alt89)
				{
				case 1:
					DebugEnterAlt(1);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:301:20: WS
					{
					DebugLocation(301, 20);
					WS229=(IToken)Match(input,WS,Follow._WS_in_conversion2018);  
					stream_WS.Add(WS229);


					}
					break;

				}
				} finally { DebugExitSubRule(89); }

				DebugLocation(301, 24);
				TOKEN230=(IToken)Match(input,TOKEN,Follow._TOKEN_in_conversion2021);  
				stream_TOKEN.Add(TOKEN230);

				DebugLocation(301, 30);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:301:30: ( WS )?
				int alt90=2;
				try { DebugEnterSubRule(90);
				try { DebugEnterDecision(90, decisionCanBacktrack[90]);
				int LA90_0 = input.LA(1);

				if ((LA90_0==WS))
				{
					alt90 = 1;
				}
				} finally { DebugExitDecision(90); }
				switch (alt90)
				{
				case 1:
					DebugEnterAlt(1);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:301:30: WS
					{
					DebugLocation(301, 30);
					WS231=(IToken)Match(input,WS,Follow._WS_in_conversion2023);  
					stream_WS.Add(WS231);


					}
					break;

				}
				} finally { DebugExitSubRule(90); }

				DebugLocation(301, 34);
				char_literal232=(IToken)Match(input,126,Follow._126_in_conversion2026);  
				stream_126.Add(char_literal232);

				DebugLocation(301, 38);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:301:38: ( WS )?
				int alt91=2;
				try { DebugEnterSubRule(91);
				try { DebugEnterDecision(91, decisionCanBacktrack[91]);
				int LA91_0 = input.LA(1);

				if ((LA91_0==WS))
				{
					alt91 = 1;
				}
				} finally { DebugExitDecision(91); }
				switch (alt91)
				{
				case 1:
					DebugEnterAlt(1);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:301:38: WS
					{
					DebugLocation(301, 38);
					WS233=(IToken)Match(input,WS,Follow._WS_in_conversion2028);  
					stream_WS.Add(WS233);


					}
					break;

				}
				} finally { DebugExitSubRule(91); }

				DebugLocation(301, 42);
				PushFollow(Follow._expression_in_conversion2031);
				expression234=expression();
				PopFollow();

				stream_expression.Add(expression234.Tree);
				DebugLocation(301, 53);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:301:53: ( WS )?
				int alt92=2;
				try { DebugEnterSubRule(92);
				try { DebugEnterDecision(92, decisionCanBacktrack[92]);
				int LA92_0 = input.LA(1);

				if ((LA92_0==WS))
				{
					alt92 = 1;
				}
				} finally { DebugExitDecision(92); }
				switch (alt92)
				{
				case 1:
					DebugEnterAlt(1);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:301:53: WS
					{
					DebugLocation(301, 53);
					WS235=(IToken)Match(input,WS,Follow._WS_in_conversion2033);  
					stream_WS.Add(WS235);


					}
					break;

				}
				} finally { DebugExitSubRule(92); }

				DebugLocation(301, 57);
				char_literal236=(IToken)Match(input,123,Follow._123_in_conversion2036);  
				stream_123.Add(char_literal236);



				{
				// AST REWRITE
				// elements: expression, TOKEN
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 301:61: -> ^( T_CONVERT TOKEN expression )
				{
					DebugLocation(301, 64);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:301:64: ^( T_CONVERT TOKEN expression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(301, 66);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CONVERT, "T_CONVERT"), root_1);

					DebugLocation(301, 76);
					adaptor.AddChild(root_1, stream_TOKEN.NextNode());
					DebugLocation(301, 82);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:302:4: CAST ( WS )? '(' ( WS )? expression WS AS WS TOKEN ( WS )? ')'
				{
				DebugLocation(302, 4);
				CAST237=(IToken)Match(input,CAST,Follow._CAST_in_conversion2051);  
				stream_CAST.Add(CAST237);

				DebugLocation(302, 9);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:302:9: ( WS )?
				int alt93=2;
				try { DebugEnterSubRule(93);
				try { DebugEnterDecision(93, decisionCanBacktrack[93]);
				int LA93_0 = input.LA(1);

				if ((LA93_0==WS))
				{
					alt93 = 1;
				}
				} finally { DebugExitDecision(93); }
				switch (alt93)
				{
				case 1:
					DebugEnterAlt(1);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:302:9: WS
					{
					DebugLocation(302, 9);
					WS238=(IToken)Match(input,WS,Follow._WS_in_conversion2053);  
					stream_WS.Add(WS238);


					}
					break;

				}
				} finally { DebugExitSubRule(93); }

				DebugLocation(302, 13);
				char_literal239=(IToken)Match(input,122,Follow._122_in_conversion2056);  
				stream_122.Add(char_literal239);

				DebugLocation(302, 17);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:302:17: ( WS )?
				int alt94=2;
				try { DebugEnterSubRule(94);
				try { DebugEnterDecision(94, decisionCanBacktrack[94]);
				int LA94_0 = input.LA(1);

				if ((LA94_0==WS))
				{
					alt94 = 1;
				}
				} finally { DebugExitDecision(94); }
				switch (alt94)
				{
				case 1:
					DebugEnterAlt(1);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:302:17: WS
					{
					DebugLocation(302, 17);
					WS240=(IToken)Match(input,WS,Follow._WS_in_conversion2058);  
					stream_WS.Add(WS240);


					}
					break;

				}
				} finally { DebugExitSubRule(94); }

				DebugLocation(302, 21);
				PushFollow(Follow._expression_in_conversion2061);
				expression241=expression();
				PopFollow();

				stream_expression.Add(expression241.Tree);
				DebugLocation(302, 32);
				WS242=(IToken)Match(input,WS,Follow._WS_in_conversion2063);  
				stream_WS.Add(WS242);

				DebugLocation(302, 35);
				AS243=(IToken)Match(input,AS,Follow._AS_in_conversion2065);  
				stream_AS.Add(AS243);

				DebugLocation(302, 38);
				WS244=(IToken)Match(input,WS,Follow._WS_in_conversion2067);  
				stream_WS.Add(WS244);

				DebugLocation(302, 41);
				TOKEN245=(IToken)Match(input,TOKEN,Follow._TOKEN_in_conversion2069);  
				stream_TOKEN.Add(TOKEN245);

				DebugLocation(302, 47);
				// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:302:47: ( WS )?
				int alt95=2;
				try { DebugEnterSubRule(95);
				try { DebugEnterDecision(95, decisionCanBacktrack[95]);
				int LA95_0 = input.LA(1);

				if ((LA95_0==WS))
				{
					alt95 = 1;
				}
				} finally { DebugExitDecision(95); }
				switch (alt95)
				{
				case 1:
					DebugEnterAlt(1);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:302:47: WS
					{
					DebugLocation(302, 47);
					WS246=(IToken)Match(input,WS,Follow._WS_in_conversion2071);  
					stream_WS.Add(WS246);


					}
					break;

				}
				} finally { DebugExitSubRule(95); }

				DebugLocation(302, 51);
				char_literal247=(IToken)Match(input,123,Follow._123_in_conversion2074);  
				stream_123.Add(char_literal247);



				{
				// AST REWRITE
				// elements: expression, TOKEN
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 302:55: -> ^( T_CONVERT TOKEN expression )
				{
					DebugLocation(302, 58);
					// /home/wim/Projects/FxGqlC/FxGql/FxGqlLib/Parser/GqlAntlrOutput/gql.g:302:58: ^( T_CONVERT TOKEN expression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(302, 60);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CONVERT, "T_CONVERT"), root_1);

					DebugLocation(302, 70);
					adaptor.AddChild(root_1, stream_TOKEN.NextNode());
					DebugLocation(302, 76);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conversion", 41);
			LeaveRule("conversion", 41);
			LeaveRule_conversion();
	    }
	 	DebugLocation(303, 1);
		} finally { DebugExitRule(GrammarFileName, "conversion"); }
		return retval;

	}
	// $ANTLR end "conversion"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _WS_in_parse296 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _commands_in_parse300 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _WS_in_parse302 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_parse307 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _command_in_commands330 = new BitSet(new ulong[]{0x800000000002UL,0x2000000000000UL,0x2UL});
		public static readonly BitSet _WS_in_commands333 = new BitSet(new ulong[]{0x800000000000UL,0x0UL,0x2UL});
		public static readonly BitSet _129_in_commands337 = new BitSet(new ulong[]{0x800000000000UL,0x2000000000000UL});
		public static readonly BitSet _WS_in_commands339 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _command_in_commands344 = new BitSet(new ulong[]{0x800000000002UL,0x2000000000000UL,0x2UL});
		public static readonly BitSet _select_command_in_command364 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SELECT_in_select_command375 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _WS_in_select_command378 = new BitSet(new ulong[]{0x100020UL});
		public static readonly BitSet _distinct_clause_in_select_command380 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _WS_in_select_command385 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _top_clause_in_select_command387 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _WS_in_select_command391 = new BitSet(new ulong[]{0x2D00C000414000UL,0x1400000000000000UL});
		public static readonly BitSet _column_list_in_select_command393 = new BitSet(new ulong[]{0x2UL,0x2000000000000UL});
		public static readonly BitSet _WS_in_select_command396 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _into_clause_in_select_command398 = new BitSet(new ulong[]{0x2UL,0x2000000000000UL});
		public static readonly BitSet _WS_in_select_command403 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _from_clause_in_select_command405 = new BitSet(new ulong[]{0x2UL,0x2000000000000UL});
		public static readonly BitSet _WS_in_select_command410 = new BitSet(new ulong[]{0x0UL,0x1000000000000UL});
		public static readonly BitSet _where_clause_in_select_command412 = new BitSet(new ulong[]{0x2UL,0x2000000000000UL});
		public static readonly BitSet _WS_in_select_command417 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _groupby_clause_in_select_command419 = new BitSet(new ulong[]{0x2UL,0x2000000000000UL});
		public static readonly BitSet _WS_in_select_command424 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _orderby_clause_in_select_command426 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DISTINCT_in_distinct_clause471 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ALL_in_distinct_clause480 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOP_in_top_clause496 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _WS_in_top_clause498 = new BitSet(new ulong[]{0x2D00C000414000UL,0x400000000000000UL});
		public static readonly BitSet _expression_in_top_clause500 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _column_in_column_list522 = new BitSet(new ulong[]{0x2UL,0x4002000000000000UL});
		public static readonly BitSet _WS_in_column_list525 = new BitSet(new ulong[]{0x0UL,0x4000000000000000UL});
		public static readonly BitSet _126_in_column_list528 = new BitSet(new ulong[]{0x2D00C000414000UL,0x1402000000000000UL});
		public static readonly BitSet _WS_in_column_list530 = new BitSet(new ulong[]{0x2D00C000414000UL,0x1400000000000000UL});
		public static readonly BitSet _column_in_column_list533 = new BitSet(new ulong[]{0x2UL,0x4002000000000000UL});
		public static readonly BitSet _124_in_column557 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_column571 = new BitSet(new ulong[]{0x2UL,0x2000000000000UL});
		public static readonly BitSet _WS_in_column574 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _SIMPLE_FILE_in_column576 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INTO_in_into_clause599 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _WS_in_into_clause601 = new BitSet(new ulong[]{0x1000000000000UL,0x0UL,0x100UL});
		public static readonly BitSet _file_in_into_clause603 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FROM_in_from_clause623 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _WS_in_from_clause625 = new BitSet(new ulong[]{0x5000000000000UL,0x400000000000000UL,0x100UL});
		public static readonly BitSet _from_clause_item_in_from_clause627 = new BitSet(new ulong[]{0x2UL,0x4002000000000000UL});
		public static readonly BitSet _WS_in_from_clause630 = new BitSet(new ulong[]{0x0UL,0x4000000000000000UL});
		public static readonly BitSet _126_in_from_clause633 = new BitSet(new ulong[]{0x5000000000000UL,0x402000000000000UL,0x100UL});
		public static readonly BitSet _WS_in_from_clause635 = new BitSet(new ulong[]{0x5000000000000UL,0x400000000000000UL,0x100UL});
		public static readonly BitSet _from_clause_item_in_from_clause638 = new BitSet(new ulong[]{0x2UL,0x4002000000000000UL});
		public static readonly BitSet _STRING_in_from_clause_item661 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _file_in_from_clause_item674 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _122_in_from_clause_item679 = new BitSet(new ulong[]{0x800000000000UL,0x2000000000000UL});
		public static readonly BitSet _WS_in_from_clause_item681 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _select_command_in_from_clause_item684 = new BitSet(new ulong[]{0x0UL,0x802000000000000UL});
		public static readonly BitSet _WS_in_from_clause_item686 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _123_in_from_clause_item689 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _136_in_file708 = new BitSet(new ulong[]{0x4000000000000UL,0x2000000000000UL});
		public static readonly BitSet _WS_in_file710 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _STRING_in_file713 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL,0x200UL});
		public static readonly BitSet _WS_in_file716 = new BitSet(new ulong[]{0x0UL,0x8000000000000000UL});
		public static readonly BitSet _file_option_in_file718 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL,0x200UL});
		public static readonly BitSet _WS_in_file722 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _137_in_file725 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SIMPLE_FILE_in_file742 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _127_in_file_option759 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _file_option_name_in_file_option761 = new BitSet(new ulong[]{0x2UL,0x2000000000000UL,0x20UL});
		public static readonly BitSet _WS_in_file_option765 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _133_in_file_option768 = new BitSet(new ulong[]{0x24008000000000UL,0x2000000000000UL});
		public static readonly BitSet _WS_in_file_option770 = new BitSet(new ulong[]{0x24008000000000UL});
		public static readonly BitSet _file_option_value_in_file_option773 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_file_option_name797 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHERE_in_where_clause829 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _WS_in_where_clause831 = new BitSet(new ulong[]{0x2D00C000414000UL,0x400000000000000UL});
		public static readonly BitSet _expression_in_where_clause833 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GROUP_in_groupby_clause852 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _WS_in_groupby_clause854 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _BY_in_groupby_clause856 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _WS_in_groupby_clause858 = new BitSet(new ulong[]{0x2D00C000414000UL,0x400000000000000UL});
		public static readonly BitSet _expression_list_in_groupby_clause860 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ORDER_in_orderby_clause881 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _WS_in_orderby_clause883 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _BY_in_orderby_clause885 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _WS_in_orderby_clause887 = new BitSet(new ulong[]{0x2D00C000414000UL,0x400000000000000UL});
		public static readonly BitSet _orderby_column_list_in_orderby_clause889 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _orderby_column_in_orderby_column_list910 = new BitSet(new ulong[]{0x2UL,0x4002000000000000UL});
		public static readonly BitSet _WS_in_orderby_column_list913 = new BitSet(new ulong[]{0x0UL,0x4000000000000000UL});
		public static readonly BitSet _126_in_orderby_column_list916 = new BitSet(new ulong[]{0x2D00C000414000UL,0x402000000000000UL});
		public static readonly BitSet _WS_in_orderby_column_list918 = new BitSet(new ulong[]{0x2D00C000414000UL,0x400000000000000UL});
		public static readonly BitSet _orderby_column_in_orderby_column_list921 = new BitSet(new ulong[]{0x2UL,0x4002000000000000UL});
		public static readonly BitSet _expression_in_orderby_column941 = new BitSet(new ulong[]{0x2UL,0x2000000000000UL});
		public static readonly BitSet _WS_in_orderby_column944 = new BitSet(new ulong[]{0x40200UL});
		public static readonly BitSet _orderby_direction_in_orderby_column946 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASC_in_orderby_direction971 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DESC_in_orderby_direction980 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_expression_list998 = new BitSet(new ulong[]{0x2UL,0x4002000000000000UL});
		public static readonly BitSet _WS_in_expression_list1001 = new BitSet(new ulong[]{0x0UL,0x4000000000000000UL});
		public static readonly BitSet _126_in_expression_list1004 = new BitSet(new ulong[]{0x2D00C000414000UL,0x402000000000000UL});
		public static readonly BitSet _WS_in_expression_list1006 = new BitSet(new ulong[]{0x2D00C000414000UL,0x400000000000000UL});
		public static readonly BitSet _expression_in_expression_list1009 = new BitSet(new ulong[]{0x2UL,0x4002000000000000UL});
		public static readonly BitSet _expression_list_in_expression_list_or_select_command1032 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _select_command_in_expression_list_or_select_command1036 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_7_in_expression1048 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_6_in_expression_71064 = new BitSet(new ulong[]{0x2UL,0x2000000000000UL});
		public static readonly BitSet _WS_in_expression_71071 = new BitSet(new ulong[]{0x25420000800UL,0xE0000000000000UL,0xFCUL});
		public static readonly BitSet _op_7_in_expression_71076 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _WS_in_expression_71078 = new BitSet(new ulong[]{0x2D00C000414000UL,0x400000000000000UL});
		public static readonly BitSet _expression_6_in_expression_71082 = new BitSet(new ulong[]{0x2UL,0x2000000000000UL});
		public static readonly BitSet _IN_in_expression_71101 = new BitSet(new ulong[]{0x0UL,0x402000000000000UL});
		public static readonly BitSet _WS_in_expression_71103 = new BitSet(new ulong[]{0x0UL,0x400000000000000UL});
		public static readonly BitSet _122_in_expression_71106 = new BitSet(new ulong[]{0x2D80C000414000UL,0x402000000000000UL});
		public static readonly BitSet _WS_in_expression_71108 = new BitSet(new ulong[]{0x2D80C000414000UL,0x400000000000000UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_71111 = new BitSet(new ulong[]{0x0UL,0x802000000000000UL});
		public static readonly BitSet _WS_in_expression_71113 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _123_in_expression_71116 = new BitSet(new ulong[]{0x2UL,0x2000000000000UL});
		public static readonly BitSet _NOT_in_expression_71134 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _WS_in_expression_71136 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _IN_in_expression_71138 = new BitSet(new ulong[]{0x0UL,0x402000000000000UL});
		public static readonly BitSet _WS_in_expression_71140 = new BitSet(new ulong[]{0x0UL,0x400000000000000UL});
		public static readonly BitSet _122_in_expression_71143 = new BitSet(new ulong[]{0x2D80C000414000UL,0x402000000000000UL});
		public static readonly BitSet _WS_in_expression_71145 = new BitSet(new ulong[]{0x2D80C000414000UL,0x400000000000000UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_71149 = new BitSet(new ulong[]{0x0UL,0x802000000000000UL});
		public static readonly BitSet _WS_in_expression_71152 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _123_in_expression_71155 = new BitSet(new ulong[]{0x2UL,0x2000000000000UL});
		public static readonly BitSet _op_4_in_expression_71173 = new BitSet(new ulong[]{0x2000000000080UL,0x2000000000000UL});
		public static readonly BitSet _WS_in_expression_71175 = new BitSet(new ulong[]{0x2000000000080UL});
		public static readonly BitSet _SOME_in_expression_71179 = new BitSet(new ulong[]{0x0UL,0x402000000000000UL});
		public static readonly BitSet _ANY_in_expression_71183 = new BitSet(new ulong[]{0x0UL,0x402000000000000UL});
		public static readonly BitSet _WS_in_expression_71186 = new BitSet(new ulong[]{0x0UL,0x400000000000000UL});
		public static readonly BitSet _122_in_expression_71189 = new BitSet(new ulong[]{0x2D80C000414000UL,0x400000000000000UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_71191 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _123_in_expression_71193 = new BitSet(new ulong[]{0x2UL,0x2000000000000UL});
		public static readonly BitSet _op_4_in_expression_71213 = new BitSet(new ulong[]{0x20UL,0x2000000000000UL});
		public static readonly BitSet _WS_in_expression_71215 = new BitSet(new ulong[]{0x20UL});
		public static readonly BitSet _ALL_in_expression_71218 = new BitSet(new ulong[]{0x0UL,0x402000000000000UL});
		public static readonly BitSet _WS_in_expression_71220 = new BitSet(new ulong[]{0x0UL,0x400000000000000UL});
		public static readonly BitSet _122_in_expression_71223 = new BitSet(new ulong[]{0x2D80C000414000UL,0x400000000000000UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_71225 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _123_in_expression_71227 = new BitSet(new ulong[]{0x2UL,0x2000000000000UL});
		public static readonly BitSet _OR_in_op_71257 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LIKE_in_op_71266 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_71275 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _WS_in_op_71277 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _LIKE_in_op_71279 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MATCH_in_op_71288 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_71297 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _WS_in_op_71299 = new BitSet(new ulong[]{0x1000000000UL});
		public static readonly BitSet _MATCH_in_op_71301 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BETWEEN_in_op_71310 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_71319 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _WS_in_op_71321 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _BETWEEN_in_op_71323 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_5_in_expression_61342 = new BitSet(new ulong[]{0x2UL,0x2000000000000UL});
		public static readonly BitSet _WS_in_expression_61349 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _op_6_in_expression_61351 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _WS_in_expression_61353 = new BitSet(new ulong[]{0x2D00C000414000UL,0x400000000000000UL});
		public static readonly BitSet _expression_5_in_expression_61357 = new BitSet(new ulong[]{0x2UL,0x2000000000000UL});
		public static readonly BitSet _AND_in_op_61385 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _op_5_in_expression_51403 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _WS_in_expression_51405 = new BitSet(new ulong[]{0x2D00C000414000UL,0x400000000000000UL});
		public static readonly BitSet _expression_5_in_expression_51407 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_4_in_expression_51422 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_51433 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_3_in_expression_41452 = new BitSet(new ulong[]{0x2UL,0xE2000000000000UL,0xFCUL});
		public static readonly BitSet _WS_in_expression_41459 = new BitSet(new ulong[]{0x0UL,0xE0000000000000UL,0xFCUL});
		public static readonly BitSet _op_4_in_expression_41462 = new BitSet(new ulong[]{0x2D008000414000UL,0x402000000000000UL});
		public static readonly BitSet _WS_in_expression_41464 = new BitSet(new ulong[]{0x2D008000414000UL,0x400000000000000UL});
		public static readonly BitSet _expression_3_in_expression_41469 = new BitSet(new ulong[]{0x2UL,0xE2000000000000UL,0xFCUL});
		public static readonly BitSet _133_in_op_41495 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _135_in_op_41504 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _131_in_op_41514 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _132_in_op_41524 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _118_in_op_41533 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _119_in_op_41542 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _117_in_op_41551 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _134_in_op_41560 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _130_in_op_41570 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_2_in_expression_31589 = new BitSet(new ulong[]{0x2UL,0xA202000000000000UL,0xC00UL});
		public static readonly BitSet _WS_in_expression_31596 = new BitSet(new ulong[]{0x0UL,0xA200000000000000UL,0xC00UL});
		public static readonly BitSet _op_3_in_expression_31599 = new BitSet(new ulong[]{0x2D008000414000UL,0x402000000000000UL});
		public static readonly BitSet _WS_in_expression_31601 = new BitSet(new ulong[]{0x2D008000414000UL,0x400000000000000UL});
		public static readonly BitSet _expression_2_in_expression_31606 = new BitSet(new ulong[]{0x2UL,0xA202000000000000UL,0xC00UL});
		public static readonly BitSet _125_in_op_31632 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _127_in_op_31641 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _121_in_op_31650 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _139_in_op_31659 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _138_in_op_31668 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_1_in_expression_21690 = new BitSet(new ulong[]{0x2UL,0x1102000000000000UL,0x1UL});
		public static readonly BitSet _WS_in_expression_21697 = new BitSet(new ulong[]{0x0UL,0x1100000000000000UL,0x1UL});
		public static readonly BitSet _op_2_in_expression_21700 = new BitSet(new ulong[]{0x2D008000414000UL,0x402000000000000UL});
		public static readonly BitSet _WS_in_expression_21702 = new BitSet(new ulong[]{0x2D008000414000UL,0x400000000000000UL});
		public static readonly BitSet _expression_1_in_expression_21707 = new BitSet(new ulong[]{0x2UL,0x1102000000000000UL,0x1UL});
		public static readonly BitSet _124_in_op_21733 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _128_in_op_21742 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _120_in_op_21751 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _122_in_expression_11769 = new BitSet(new ulong[]{0x0UL,0xA002000000000000UL,0x1000UL});
		public static readonly BitSet _WS_in_expression_11771 = new BitSet(new ulong[]{0x0UL,0xA000000000000000UL,0x1000UL});
		public static readonly BitSet _op_1_in_expression_11774 = new BitSet(new ulong[]{0x2D008000414000UL,0x402000000000000UL});
		public static readonly BitSet _WS_in_expression_11776 = new BitSet(new ulong[]{0x2D008000414000UL,0x400000000000000UL});
		public static readonly BitSet _expression_1_in_expression_11779 = new BitSet(new ulong[]{0x0UL,0x802000000000000UL});
		public static readonly BitSet _WS_in_expression_11781 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _123_in_expression_11784 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_atom_in_expression_11801 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _140_in_op_11811 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _125_in_op_11821 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _127_in_op_11830 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_expression_atom1845 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_expression_atom1858 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SYSTEMVAR_in_expression_atom1871 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _122_in_expression_atom1884 = new BitSet(new ulong[]{0x2D00C000414000UL,0x400000000000000UL});
		public static readonly BitSet _expression_in_expression_atom1886 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _123_in_expression_atom1888 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functioncall_or_column_in_expression_atom1897 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conversion_in_expression_atom1902 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXISTS_in_expression_atom1907 = new BitSet(new ulong[]{0x0UL,0x402000000000000UL});
		public static readonly BitSet _WS_in_expression_atom1909 = new BitSet(new ulong[]{0x0UL,0x400000000000000UL});
		public static readonly BitSet _122_in_expression_atom1912 = new BitSet(new ulong[]{0x800000000000UL,0x2000000000000UL});
		public static readonly BitSet _WS_in_expression_atom1914 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _select_command_in_expression_atom1917 = new BitSet(new ulong[]{0x0UL,0x802000000000000UL});
		public static readonly BitSet _WS_in_expression_atom1919 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _123_in_expression_atom1922 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_functioncall_or_column1942 = new BitSet(new ulong[]{0x0UL,0x402000000000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column1944 = new BitSet(new ulong[]{0x0UL,0x400000000000000UL});
		public static readonly BitSet _122_in_functioncall_or_column1947 = new BitSet(new ulong[]{0x2D00C000414000UL,0xC02000000000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column1949 = new BitSet(new ulong[]{0x2D00C000414000UL,0xC00000000000000UL});
		public static readonly BitSet _expression_in_functioncall_or_column1953 = new BitSet(new ulong[]{0x0UL,0x4802000000000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column1955 = new BitSet(new ulong[]{0x0UL,0x4800000000000000UL});
		public static readonly BitSet _126_in_functioncall_or_column1959 = new BitSet(new ulong[]{0x2D00C000414000UL,0x402000000000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column1961 = new BitSet(new ulong[]{0x2D00C000414000UL,0x400000000000000UL});
		public static readonly BitSet _expression_in_functioncall_or_column1964 = new BitSet(new ulong[]{0x0UL,0x4802000000000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column1966 = new BitSet(new ulong[]{0x0UL,0x4800000000000000UL});
		public static readonly BitSet _123_in_functioncall_or_column1973 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SIMPLE_FILE_in_functioncall_or_column1991 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CONVERT_in_conversion2011 = new BitSet(new ulong[]{0x0UL,0x402000000000000UL});
		public static readonly BitSet _WS_in_conversion2013 = new BitSet(new ulong[]{0x0UL,0x400000000000000UL});
		public static readonly BitSet _122_in_conversion2016 = new BitSet(new ulong[]{0x20000000000000UL,0x2000000000000UL});
		public static readonly BitSet _WS_in_conversion2018 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _TOKEN_in_conversion2021 = new BitSet(new ulong[]{0x0UL,0x4002000000000000UL});
		public static readonly BitSet _WS_in_conversion2023 = new BitSet(new ulong[]{0x0UL,0x4000000000000000UL});
		public static readonly BitSet _126_in_conversion2026 = new BitSet(new ulong[]{0x2D00C000414000UL,0x402000000000000UL});
		public static readonly BitSet _WS_in_conversion2028 = new BitSet(new ulong[]{0x2D00C000414000UL,0x400000000000000UL});
		public static readonly BitSet _expression_in_conversion2031 = new BitSet(new ulong[]{0x0UL,0x802000000000000UL});
		public static readonly BitSet _WS_in_conversion2033 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _123_in_conversion2036 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CAST_in_conversion2051 = new BitSet(new ulong[]{0x0UL,0x402000000000000UL});
		public static readonly BitSet _WS_in_conversion2053 = new BitSet(new ulong[]{0x0UL,0x400000000000000UL});
		public static readonly BitSet _122_in_conversion2056 = new BitSet(new ulong[]{0x2D00C000414000UL,0x402000000000000UL});
		public static readonly BitSet _WS_in_conversion2058 = new BitSet(new ulong[]{0x2D00C000414000UL,0x400000000000000UL});
		public static readonly BitSet _expression_in_conversion2061 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _WS_in_conversion2063 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _AS_in_conversion2065 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _WS_in_conversion2067 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _TOKEN_in_conversion2069 = new BitSet(new ulong[]{0x0UL,0x802000000000000UL});
		public static readonly BitSet _WS_in_conversion2071 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _123_in_conversion2074 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  FxGqlLib 
