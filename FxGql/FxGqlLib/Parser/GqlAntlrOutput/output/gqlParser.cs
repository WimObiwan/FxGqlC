//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g 2012-07-31 14:51:47

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591


// `XXX' does not need a CLSCompliant attribute because the assembly is not marked as CLS-compliant (CS3021)
#pragma warning disable 3021
// The private field `XXX' is assigned but its value is never used (CS0414)
#pragma warning disable 414


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  FxGqlLib 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class gqlParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "A", "ALL", "AND", "ANY", "AS", "ASC", "B", "BETWEEN", "BY", "C", "CASE", "CAST", "COMMENT_BLOCK", "COMMENT_LINE", "CONVERT", "COUNT", "CREATE", "D", "DATEADD", "DATEDIFF", "DATEPART", "DECLARE", "DESC", "DIGIT", "DISTINCT", "DROP", "E", "ELSE", "END", "EXISTS", "F", "FROM", "G", "GROUP", "H", "HAVING", "I", "IN", "INTO", "J", "K", "L", "LIKE", "M", "MATCH", "N", "NOT", "NUMBER", "O", "OR", "ORDER", "ORIG", "P", "Q", "R", "S", "SELECT", "SET", "SIMPLE_FILE", "SOME", "STRING", "SYSTEMVAR", "T", "TABLE", "THEN", "TOKEN", "TOP", "T_ALL", "T_ALLCOLUMNS", "T_AND", "T_ANY", "T_BETWEEN", "T_BITWISE_AND", "T_BITWISE_NOT", "T_BITWISE_OR", "T_BITWISE_XOR", "T_CASE", "T_CASE_ELSE", "T_CASE_WHEN", "T_COLUMN", "T_COLUMNLIST", "T_CONVERT", "T_COUNT", "T_CREATE_VIEW", "T_DATEPART", "T_DECLARATION", "T_DECLARE", "T_DISTINCT", "T_DISTINCTCOUNT", "T_DIVIDE", "T_DROP_TABLE", "T_DROP_VIEW", "T_EQUAL", "T_EXISTS", "T_EXPRESSIONLIST", "T_FILE", "T_FILEOPTION", "T_FROM", "T_FUNCTIONCALL", "T_GREATER", "T_GROUPBY", "T_GROUPBY_ORIG", "T_HAVING", "T_IN", "T_INTEGER", "T_INTO", "T_LESS", "T_LIKE", "T_MATCH", "T_MINUS", "T_MODULO", "T_NOT", "T_NOTBETWEEN", "T_NOTEQUAL", "T_NOTGREATER", "T_NOTIN", "T_NOTLESS", "T_NOTLIKE", "T_NOTMATCH", "T_OP_BINARY", "T_OP_UNARY", "T_OR", "T_ORDERBY", "T_ORDERBY_ASC", "T_ORDERBY_COLUMN", "T_ORDERBY_DESC", "T_ORDERBY_ORIG", "T_PLUS", "T_PRODUCT", "T_ROOT", "T_SELECT", "T_SET_VARIABLE", "T_STRING", "T_SUBQUERY", "T_SYSTEMVAR", "T_TABLE_ALIAS", "T_TOP", "T_USE", "T_VARIABLE", "T_VIEW", "T_VIEW_NAME", "T_WHERE", "U", "USE", "V", "VARIABLE", "VIEW", "W", "WHEN", "WHERE", "WS", "X", "Y", "Z", "'!<'", "'!='", "'!>'", "'%'", "'&'", "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", "';'", "'<'", "'<='", "'<>'", "'='", "'>'", "'>='", "'['", "']'", "'^'", "'|'", "'~'"
	};
	public const int EOF=-1;
	public const int T__158=158;
	public const int T__159=159;
	public const int T__160=160;
	public const int T__161=161;
	public const int T__162=162;
	public const int T__163=163;
	public const int T__164=164;
	public const int T__165=165;
	public const int T__166=166;
	public const int T__167=167;
	public const int T__168=168;
	public const int T__169=169;
	public const int T__170=170;
	public const int T__171=171;
	public const int T__172=172;
	public const int T__173=173;
	public const int T__174=174;
	public const int T__175=175;
	public const int T__176=176;
	public const int T__177=177;
	public const int T__178=178;
	public const int T__179=179;
	public const int T__180=180;
	public const int T__181=181;
	public const int T__182=182;
	public const int A=4;
	public const int ALL=5;
	public const int AND=6;
	public const int ANY=7;
	public const int AS=8;
	public const int ASC=9;
	public const int B=10;
	public const int BETWEEN=11;
	public const int BY=12;
	public const int C=13;
	public const int CASE=14;
	public const int CAST=15;
	public const int COMMENT_BLOCK=16;
	public const int COMMENT_LINE=17;
	public const int CONVERT=18;
	public const int COUNT=19;
	public const int CREATE=20;
	public const int D=21;
	public const int DATEADD=22;
	public const int DATEDIFF=23;
	public const int DATEPART=24;
	public const int DECLARE=25;
	public const int DESC=26;
	public const int DIGIT=27;
	public const int DISTINCT=28;
	public const int DROP=29;
	public const int E=30;
	public const int ELSE=31;
	public const int END=32;
	public const int EXISTS=33;
	public const int F=34;
	public const int FROM=35;
	public const int G=36;
	public const int GROUP=37;
	public const int H=38;
	public const int HAVING=39;
	public const int I=40;
	public const int IN=41;
	public const int INTO=42;
	public const int J=43;
	public const int K=44;
	public const int L=45;
	public const int LIKE=46;
	public const int M=47;
	public const int MATCH=48;
	public const int N=49;
	public const int NOT=50;
	public const int NUMBER=51;
	public const int O=52;
	public const int OR=53;
	public const int ORDER=54;
	public const int ORIG=55;
	public const int P=56;
	public const int Q=57;
	public const int R=58;
	public const int S=59;
	public const int SELECT=60;
	public const int SET=61;
	public const int SIMPLE_FILE=62;
	public const int SOME=63;
	public const int STRING=64;
	public const int SYSTEMVAR=65;
	public const int T=66;
	public const int TABLE=67;
	public const int THEN=68;
	public const int TOKEN=69;
	public const int TOP=70;
	public const int T_ALL=71;
	public const int T_ALLCOLUMNS=72;
	public const int T_AND=73;
	public const int T_ANY=74;
	public const int T_BETWEEN=75;
	public const int T_BITWISE_AND=76;
	public const int T_BITWISE_NOT=77;
	public const int T_BITWISE_OR=78;
	public const int T_BITWISE_XOR=79;
	public const int T_CASE=80;
	public const int T_CASE_ELSE=81;
	public const int T_CASE_WHEN=82;
	public const int T_COLUMN=83;
	public const int T_COLUMNLIST=84;
	public const int T_CONVERT=85;
	public const int T_COUNT=86;
	public const int T_CREATE_VIEW=87;
	public const int T_DATEPART=88;
	public const int T_DECLARATION=89;
	public const int T_DECLARE=90;
	public const int T_DISTINCT=91;
	public const int T_DISTINCTCOUNT=92;
	public const int T_DIVIDE=93;
	public const int T_DROP_TABLE=94;
	public const int T_DROP_VIEW=95;
	public const int T_EQUAL=96;
	public const int T_EXISTS=97;
	public const int T_EXPRESSIONLIST=98;
	public const int T_FILE=99;
	public const int T_FILEOPTION=100;
	public const int T_FROM=101;
	public const int T_FUNCTIONCALL=102;
	public const int T_GREATER=103;
	public const int T_GROUPBY=104;
	public const int T_GROUPBY_ORIG=105;
	public const int T_HAVING=106;
	public const int T_IN=107;
	public const int T_INTEGER=108;
	public const int T_INTO=109;
	public const int T_LESS=110;
	public const int T_LIKE=111;
	public const int T_MATCH=112;
	public const int T_MINUS=113;
	public const int T_MODULO=114;
	public const int T_NOT=115;
	public const int T_NOTBETWEEN=116;
	public const int T_NOTEQUAL=117;
	public const int T_NOTGREATER=118;
	public const int T_NOTIN=119;
	public const int T_NOTLESS=120;
	public const int T_NOTLIKE=121;
	public const int T_NOTMATCH=122;
	public const int T_OP_BINARY=123;
	public const int T_OP_UNARY=124;
	public const int T_OR=125;
	public const int T_ORDERBY=126;
	public const int T_ORDERBY_ASC=127;
	public const int T_ORDERBY_COLUMN=128;
	public const int T_ORDERBY_DESC=129;
	public const int T_ORDERBY_ORIG=130;
	public const int T_PLUS=131;
	public const int T_PRODUCT=132;
	public const int T_ROOT=133;
	public const int T_SELECT=134;
	public const int T_SET_VARIABLE=135;
	public const int T_STRING=136;
	public const int T_SUBQUERY=137;
	public const int T_SYSTEMVAR=138;
	public const int T_TABLE_ALIAS=139;
	public const int T_TOP=140;
	public const int T_USE=141;
	public const int T_VARIABLE=142;
	public const int T_VIEW=143;
	public const int T_VIEW_NAME=144;
	public const int T_WHERE=145;
	public const int U=146;
	public const int USE=147;
	public const int V=148;
	public const int VARIABLE=149;
	public const int VIEW=150;
	public const int W=151;
	public const int WHEN=152;
	public const int WHERE=153;
	public const int WS=154;
	public const int X=155;
	public const int Y=156;
	public const int Z=157;

	#if ANTLR_DEBUG
		private static readonly bool[] decisionCanBacktrack =
			new bool[]
			{
				false, // invalid decision
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false
			};
	#else
		private static readonly bool[] decisionCanBacktrack = new bool[0];
	#endif
	public gqlParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public gqlParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}
	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return gqlParser.tokenNames; } }
	public override string GrammarFileName { get { return "C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g"; } }


	[Conditional("ANTLR_TRACE")]
	protected virtual void OnCreated() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

	#region Rules

	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_parse() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_parse() {}

	// $ANTLR start "parse"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:106:1: parse : ( WS )? ( commands ( WS )? )? EOF -> ^( T_ROOT ( commands )? ) ;
	[GrammarRule("parse")]
	private AstParserRuleReturnScope<object, IToken> parse()
	{
		EnterRule_parse();
		EnterRule("parse", 1);
		TraceIn("parse", 1);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS1 = default(IToken);
	    IToken WS3 = default(IToken);
	    IToken EOF4 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> commands2 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS1_tree = default(object);
	    object WS3_tree = default(object);
	    object EOF4_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
	    RewriteRuleSubtreeStream stream_commands=new RewriteRuleSubtreeStream(adaptor,"rule commands");
		try { DebugEnterRule(GrammarFileName, "parse");
		DebugLocation(106, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:107:2: ( ( WS )? ( commands ( WS )? )? EOF -> ^( T_ROOT ( commands )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:107:4: ( WS )? ( commands ( WS )? )? EOF
			{
			DebugLocation(107, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:107:4: ( WS )?
			int alt1=2;
			try { DebugEnterSubRule(1);
			try { DebugEnterDecision(1, decisionCanBacktrack[1]);
			int LA1_0 = input.LA(1);

			if ((LA1_0==WS))
			{
				alt1 = 1;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:107:4: WS
				{
				DebugLocation(107, 4);
				WS1=(IToken)Match(input,WS,Follow._WS_in_parse380);  
				stream_WS.Add(WS1);


				}
				break;

			}
			} finally { DebugExitSubRule(1); }

			DebugLocation(107, 8);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:107:8: ( commands ( WS )? )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, decisionCanBacktrack[3]);
			int LA3_0 = input.LA(1);

			if ((LA3_0==CREATE||LA3_0==DECLARE||LA3_0==DROP||(LA3_0>=SELECT && LA3_0<=SET)||LA3_0==USE))
			{
				alt3 = 1;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:107:9: commands ( WS )?
				{
				DebugLocation(107, 9);
				PushFollow(Follow._commands_in_parse384);
				commands2=commands();
				PopFollow();

				stream_commands.Add(commands2.Tree);
				DebugLocation(107, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:107:18: ( WS )?
				int alt2=2;
				try { DebugEnterSubRule(2);
				try { DebugEnterDecision(2, decisionCanBacktrack[2]);
				int LA2_0 = input.LA(1);

				if ((LA2_0==WS))
				{
					alt2 = 1;
				}
				} finally { DebugExitDecision(2); }
				switch (alt2)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:107:18: WS
					{
					DebugLocation(107, 18);
					WS3=(IToken)Match(input,WS,Follow._WS_in_parse386);  
					stream_WS.Add(WS3);


					}
					break;

				}
				} finally { DebugExitSubRule(2); }


				}
				break;

			}
			} finally { DebugExitSubRule(3); }

			DebugLocation(107, 24);
			EOF4=(IToken)Match(input,EOF,Follow._EOF_in_parse391);  
			stream_EOF.Add(EOF4);



			{
			// AST REWRITE
			// elements: commands
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 108:2: -> ^( T_ROOT ( commands )? )
			{
				DebugLocation(108, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:108:5: ^( T_ROOT ( commands )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(108, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_ROOT, "T_ROOT"), root_1);

				DebugLocation(108, 14);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:108:14: ( commands )?
				if (stream_commands.HasNext)
				{
					DebugLocation(108, 14);
					adaptor.AddChild(root_1, stream_commands.NextTree());

				}
				stream_commands.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parse", 1);
			LeaveRule("parse", 1);
			LeaveRule_parse();
	    }
	 	DebugLocation(109, 1);
		} finally { DebugExitRule(GrammarFileName, "parse"); }
		return retval;

	}
	// $ANTLR end "parse"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_commands() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_commands() {}

	// $ANTLR start "commands"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:111:1: commands : command ( ( WS )? ( ';' ( WS )? )? command )* ( ( WS )? ';' )? -> ( command )+ ;
	[GrammarRule("commands")]
	private AstParserRuleReturnScope<object, IToken> commands()
	{
		EnterRule_commands();
		EnterRule("commands", 2);
		TraceIn("commands", 2);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS6 = default(IToken);
	    IToken char_literal7 = default(IToken);
	    IToken WS8 = default(IToken);
	    IToken WS10 = default(IToken);
	    IToken char_literal11 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> command5 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> command9 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS6_tree = default(object);
	    object char_literal7_tree = default(object);
	    object WS8_tree = default(object);
	    object WS10_tree = default(object);
	    object char_literal11_tree = default(object);
	    RewriteRuleITokenStream stream_171=new RewriteRuleITokenStream(adaptor,"token 171");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_command=new RewriteRuleSubtreeStream(adaptor,"rule command");
		try { DebugEnterRule(GrammarFileName, "commands");
		DebugLocation(111, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:112:2: ( command ( ( WS )? ( ';' ( WS )? )? command )* ( ( WS )? ';' )? -> ( command )+ )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:112:4: command ( ( WS )? ( ';' ( WS )? )? command )* ( ( WS )? ';' )?
			{
			DebugLocation(112, 4);
			PushFollow(Follow._command_in_commands414);
			command5=command();
			PopFollow();

			stream_command.Add(command5.Tree);
			DebugLocation(112, 12);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:112:12: ( ( WS )? ( ';' ( WS )? )? command )*
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, decisionCanBacktrack[7]);
				switch (input.LA(1))
				{
				case WS:
					{
					int LA7_1 = input.LA(2);

					if ((LA7_1==171))
					{
						int LA7_2 = input.LA(3);

						if ((LA7_2==WS))
						{
							int LA7_5 = input.LA(4);

							if ((LA7_5==CREATE||LA7_5==DECLARE||LA7_5==DROP||(LA7_5>=SELECT && LA7_5<=SET)||LA7_5==USE))
							{
								alt7 = 1;
							}


						}
						else if ((LA7_2==CREATE||LA7_2==DECLARE||LA7_2==DROP||(LA7_2>=SELECT && LA7_2<=SET)||LA7_2==USE))
						{
							alt7 = 1;
						}


					}
					else if ((LA7_1==CREATE||LA7_1==DECLARE||LA7_1==DROP||(LA7_1>=SELECT && LA7_1<=SET)||LA7_1==USE))
					{
						alt7 = 1;
					}


					}
					break;
				case 171:
					{
					int LA7_2 = input.LA(2);

					if ((LA7_2==WS))
					{
						int LA7_5 = input.LA(3);

						if ((LA7_5==CREATE||LA7_5==DECLARE||LA7_5==DROP||(LA7_5>=SELECT && LA7_5<=SET)||LA7_5==USE))
						{
							alt7 = 1;
						}


					}
					else if ((LA7_2==CREATE||LA7_2==DECLARE||LA7_2==DROP||(LA7_2>=SELECT && LA7_2<=SET)||LA7_2==USE))
					{
						alt7 = 1;
					}


					}
					break;
				case CREATE:
				case DECLARE:
				case DROP:
				case SELECT:
				case SET:
				case USE:
					{
					alt7 = 1;
					}
					break;
				}

				} finally { DebugExitDecision(7); }
				switch ( alt7 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:112:13: ( WS )? ( ';' ( WS )? )? command
					{
					DebugLocation(112, 13);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:112:13: ( WS )?
					int alt4=2;
					try { DebugEnterSubRule(4);
					try { DebugEnterDecision(4, decisionCanBacktrack[4]);
					int LA4_0 = input.LA(1);

					if ((LA4_0==WS))
					{
						alt4 = 1;
					}
					} finally { DebugExitDecision(4); }
					switch (alt4)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:112:13: WS
						{
						DebugLocation(112, 13);
						WS6=(IToken)Match(input,WS,Follow._WS_in_commands417);  
						stream_WS.Add(WS6);


						}
						break;

					}
					} finally { DebugExitSubRule(4); }

					DebugLocation(112, 17);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:112:17: ( ';' ( WS )? )?
					int alt6=2;
					try { DebugEnterSubRule(6);
					try { DebugEnterDecision(6, decisionCanBacktrack[6]);
					int LA6_0 = input.LA(1);

					if ((LA6_0==171))
					{
						alt6 = 1;
					}
					} finally { DebugExitDecision(6); }
					switch (alt6)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:112:18: ';' ( WS )?
						{
						DebugLocation(112, 18);
						char_literal7=(IToken)Match(input,171,Follow._171_in_commands421);  
						stream_171.Add(char_literal7);

						DebugLocation(112, 22);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:112:22: ( WS )?
						int alt5=2;
						try { DebugEnterSubRule(5);
						try { DebugEnterDecision(5, decisionCanBacktrack[5]);
						int LA5_0 = input.LA(1);

						if ((LA5_0==WS))
						{
							alt5 = 1;
						}
						} finally { DebugExitDecision(5); }
						switch (alt5)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:112:22: WS
							{
							DebugLocation(112, 22);
							WS8=(IToken)Match(input,WS,Follow._WS_in_commands423);  
							stream_WS.Add(WS8);


							}
							break;

						}
						} finally { DebugExitSubRule(5); }


						}
						break;

					}
					} finally { DebugExitSubRule(6); }

					DebugLocation(112, 28);
					PushFollow(Follow._command_in_commands428);
					command9=command();
					PopFollow();

					stream_command.Add(command9.Tree);

					}
					break;

				default:
					goto loop7;
				}
			}

			loop7:
				;

			} finally { DebugExitSubRule(7); }

			DebugLocation(112, 38);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:112:38: ( ( WS )? ';' )?
			int alt9=2;
			try { DebugEnterSubRule(9);
			try { DebugEnterDecision(9, decisionCanBacktrack[9]);
			int LA9_0 = input.LA(1);

			if ((LA9_0==WS))
			{
				int LA9_1 = input.LA(2);

				if ((LA9_1==171))
				{
					alt9 = 1;
				}
			}
			else if ((LA9_0==171))
			{
				alt9 = 1;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:112:39: ( WS )? ';'
				{
				DebugLocation(112, 39);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:112:39: ( WS )?
				int alt8=2;
				try { DebugEnterSubRule(8);
				try { DebugEnterDecision(8, decisionCanBacktrack[8]);
				int LA8_0 = input.LA(1);

				if ((LA8_0==WS))
				{
					alt8 = 1;
				}
				} finally { DebugExitDecision(8); }
				switch (alt8)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:112:39: WS
					{
					DebugLocation(112, 39);
					WS10=(IToken)Match(input,WS,Follow._WS_in_commands433);  
					stream_WS.Add(WS10);


					}
					break;

				}
				} finally { DebugExitSubRule(8); }

				DebugLocation(112, 43);
				char_literal11=(IToken)Match(input,171,Follow._171_in_commands436);  
				stream_171.Add(char_literal11);


				}
				break;

			}
			} finally { DebugExitSubRule(9); }



			{
			// AST REWRITE
			// elements: command
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 113:2: -> ( command )+
			{
				DebugLocation(113, 5);
				if (!(stream_command.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_command.HasNext )
				{
					DebugLocation(113, 5);
					adaptor.AddChild(root_0, stream_command.NextTree());

				}
				stream_command.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("commands", 2);
			LeaveRule("commands", 2);
			LeaveRule_commands();
	    }
	 	DebugLocation(114, 1);
		} finally { DebugExitRule(GrammarFileName, "commands"); }
		return retval;

	}
	// $ANTLR end "commands"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_command() {}

	// $ANTLR start "command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:116:1: command : ( select_command | use_command | declare_command | set_command | create_view_command | drop_view_command | drop_table_command );
	[GrammarRule("command")]
	private AstParserRuleReturnScope<object, IToken> command()
	{
		EnterRule_command();
		EnterRule("command", 3);
		TraceIn("command", 3);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> select_command12 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> use_command13 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> declare_command14 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> set_command15 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> create_view_command16 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> drop_view_command17 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> drop_table_command18 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "command");
		DebugLocation(116, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:117:2: ( select_command | use_command | declare_command | set_command | create_view_command | drop_view_command | drop_table_command )
			int alt10=7;
			try { DebugEnterDecision(10, decisionCanBacktrack[10]);
			switch (input.LA(1))
			{
			case SELECT:
				{
				alt10 = 1;
				}
				break;
			case USE:
				{
				alt10 = 2;
				}
				break;
			case DECLARE:
				{
				alt10 = 3;
				}
				break;
			case SET:
				{
				alt10 = 4;
				}
				break;
			case CREATE:
				{
				alt10 = 5;
				}
				break;
			case DROP:
				{
				int LA10_6 = input.LA(2);

				if ((LA10_6==WS))
				{
					int LA10_7 = input.LA(3);

					if ((LA10_7==VIEW))
					{
						alt10 = 6;
					}
					else if ((LA10_7==TABLE))
					{
						alt10 = 7;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 10, 7, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 10, 6, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 10, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:117:4: select_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(117, 4);
				PushFollow(Follow._select_command_in_command456);
				select_command12=select_command();
				PopFollow();

				adaptor.AddChild(root_0, select_command12.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:118:4: use_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(118, 4);
				PushFollow(Follow._use_command_in_command461);
				use_command13=use_command();
				PopFollow();

				adaptor.AddChild(root_0, use_command13.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:119:4: declare_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(119, 4);
				PushFollow(Follow._declare_command_in_command466);
				declare_command14=declare_command();
				PopFollow();

				adaptor.AddChild(root_0, declare_command14.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:120:4: set_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(120, 4);
				PushFollow(Follow._set_command_in_command471);
				set_command15=set_command();
				PopFollow();

				adaptor.AddChild(root_0, set_command15.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:121:4: create_view_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(121, 4);
				PushFollow(Follow._create_view_command_in_command476);
				create_view_command16=create_view_command();
				PopFollow();

				adaptor.AddChild(root_0, create_view_command16.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:122:4: drop_view_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(122, 4);
				PushFollow(Follow._drop_view_command_in_command481);
				drop_view_command17=drop_view_command();
				PopFollow();

				adaptor.AddChild(root_0, drop_view_command17.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:123:4: drop_table_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(123, 4);
				PushFollow(Follow._drop_table_command_in_command486);
				drop_table_command18=drop_table_command();
				PopFollow();

				adaptor.AddChild(root_0, drop_table_command18.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("command", 3);
			LeaveRule("command", 3);
			LeaveRule_command();
	    }
	 	DebugLocation(124, 1);
		} finally { DebugExitRule(GrammarFileName, "command"); }
		return retval;

	}
	// $ANTLR end "command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_select_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_select_command() {}

	// $ANTLR start "select_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:129:1: select_command : SELECT ( WS distinct_clause )? ( WS top_clause )? WS column_list ( WS into_clause )? ( WS from_clause )? ( WS where_clause )? ( WS groupby_clause )? ( WS having_clause )? ( WS orderby_clause )? -> ^( T_SELECT ( distinct_clause )? ( top_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( having_clause )? ( orderby_clause )? ) ;
	[GrammarRule("select_command")]
	private AstParserRuleReturnScope<object, IToken> select_command()
	{
		EnterRule_select_command();
		EnterRule("select_command", 4);
		TraceIn("select_command", 4);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken SELECT19 = default(IToken);
	    IToken WS20 = default(IToken);
	    IToken WS22 = default(IToken);
	    IToken WS24 = default(IToken);
	    IToken WS26 = default(IToken);
	    IToken WS28 = default(IToken);
	    IToken WS30 = default(IToken);
	    IToken WS32 = default(IToken);
	    IToken WS34 = default(IToken);
	    IToken WS36 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> distinct_clause21 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> top_clause23 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> column_list25 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> into_clause27 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> from_clause29 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> where_clause31 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> groupby_clause33 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> having_clause35 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> orderby_clause37 = default(AstParserRuleReturnScope<object, IToken>);

	    object SELECT19_tree = default(object);
	    object WS20_tree = default(object);
	    object WS22_tree = default(object);
	    object WS24_tree = default(object);
	    object WS26_tree = default(object);
	    object WS28_tree = default(object);
	    object WS30_tree = default(object);
	    object WS32_tree = default(object);
	    object WS34_tree = default(object);
	    object WS36_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_SELECT=new RewriteRuleITokenStream(adaptor,"token SELECT");
	    RewriteRuleSubtreeStream stream_groupby_clause=new RewriteRuleSubtreeStream(adaptor,"rule groupby_clause");
	    RewriteRuleSubtreeStream stream_distinct_clause=new RewriteRuleSubtreeStream(adaptor,"rule distinct_clause");
	    RewriteRuleSubtreeStream stream_from_clause=new RewriteRuleSubtreeStream(adaptor,"rule from_clause");
	    RewriteRuleSubtreeStream stream_having_clause=new RewriteRuleSubtreeStream(adaptor,"rule having_clause");
	    RewriteRuleSubtreeStream stream_column_list=new RewriteRuleSubtreeStream(adaptor,"rule column_list");
	    RewriteRuleSubtreeStream stream_where_clause=new RewriteRuleSubtreeStream(adaptor,"rule where_clause");
	    RewriteRuleSubtreeStream stream_into_clause=new RewriteRuleSubtreeStream(adaptor,"rule into_clause");
	    RewriteRuleSubtreeStream stream_top_clause=new RewriteRuleSubtreeStream(adaptor,"rule top_clause");
	    RewriteRuleSubtreeStream stream_orderby_clause=new RewriteRuleSubtreeStream(adaptor,"rule orderby_clause");
		try { DebugEnterRule(GrammarFileName, "select_command");
		DebugLocation(129, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:130:2: ( SELECT ( WS distinct_clause )? ( WS top_clause )? WS column_list ( WS into_clause )? ( WS from_clause )? ( WS where_clause )? ( WS groupby_clause )? ( WS having_clause )? ( WS orderby_clause )? -> ^( T_SELECT ( distinct_clause )? ( top_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( having_clause )? ( orderby_clause )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:130:4: SELECT ( WS distinct_clause )? ( WS top_clause )? WS column_list ( WS into_clause )? ( WS from_clause )? ( WS where_clause )? ( WS groupby_clause )? ( WS having_clause )? ( WS orderby_clause )?
			{
			DebugLocation(130, 4);
			SELECT19=(IToken)Match(input,SELECT,Follow._SELECT_in_select_command500);  
			stream_SELECT.Add(SELECT19);

			DebugLocation(130, 11);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:130:11: ( WS distinct_clause )?
			int alt11=2;
			try { DebugEnterSubRule(11);
			try { DebugEnterDecision(11, decisionCanBacktrack[11]);
			int LA11_0 = input.LA(1);

			if ((LA11_0==WS))
			{
				int LA11_1 = input.LA(2);

				if ((LA11_1==ALL||LA11_1==DISTINCT))
				{
					alt11 = 1;
				}
			}
			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:130:12: WS distinct_clause
				{
				DebugLocation(130, 12);
				WS20=(IToken)Match(input,WS,Follow._WS_in_select_command503);  
				stream_WS.Add(WS20);

				DebugLocation(130, 15);
				PushFollow(Follow._distinct_clause_in_select_command505);
				distinct_clause21=distinct_clause();
				PopFollow();

				stream_distinct_clause.Add(distinct_clause21.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(11); }

			DebugLocation(130, 33);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:130:33: ( WS top_clause )?
			int alt12=2;
			try { DebugEnterSubRule(12);
			try { DebugEnterDecision(12, decisionCanBacktrack[12]);
			int LA12_0 = input.LA(1);

			if ((LA12_0==WS))
			{
				int LA12_1 = input.LA(2);

				if ((LA12_1==TOP))
				{
					alt12 = 1;
				}
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:130:34: WS top_clause
				{
				DebugLocation(130, 34);
				WS22=(IToken)Match(input,WS,Follow._WS_in_select_command510);  
				stream_WS.Add(WS22);

				DebugLocation(130, 37);
				PushFollow(Follow._top_clause_in_select_command512);
				top_clause23=top_clause();
				PopFollow();

				stream_top_clause.Add(top_clause23.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(12); }

			DebugLocation(130, 50);
			WS24=(IToken)Match(input,WS,Follow._WS_in_select_command516);  
			stream_WS.Add(WS24);

			DebugLocation(130, 53);
			PushFollow(Follow._column_list_in_select_command518);
			column_list25=column_list();
			PopFollow();

			stream_column_list.Add(column_list25.Tree);
			DebugLocation(130, 65);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:130:65: ( WS into_clause )?
			int alt13=2;
			try { DebugEnterSubRule(13);
			try { DebugEnterDecision(13, decisionCanBacktrack[13]);
			int LA13_0 = input.LA(1);

			if ((LA13_0==WS))
			{
				int LA13_1 = input.LA(2);

				if ((LA13_1==INTO))
				{
					alt13 = 1;
				}
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:130:66: WS into_clause
				{
				DebugLocation(130, 66);
				WS26=(IToken)Match(input,WS,Follow._WS_in_select_command521);  
				stream_WS.Add(WS26);

				DebugLocation(130, 69);
				PushFollow(Follow._into_clause_in_select_command523);
				into_clause27=into_clause();
				PopFollow();

				stream_into_clause.Add(into_clause27.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(13); }

			DebugLocation(130, 83);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:130:83: ( WS from_clause )?
			int alt14=2;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, decisionCanBacktrack[14]);
			int LA14_0 = input.LA(1);

			if ((LA14_0==WS))
			{
				int LA14_1 = input.LA(2);

				if ((LA14_1==FROM))
				{
					alt14 = 1;
				}
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:130:84: WS from_clause
				{
				DebugLocation(130, 84);
				WS28=(IToken)Match(input,WS,Follow._WS_in_select_command528);  
				stream_WS.Add(WS28);

				DebugLocation(130, 87);
				PushFollow(Follow._from_clause_in_select_command530);
				from_clause29=from_clause();
				PopFollow();

				stream_from_clause.Add(from_clause29.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(14); }

			DebugLocation(130, 101);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:130:101: ( WS where_clause )?
			int alt15=2;
			try { DebugEnterSubRule(15);
			try { DebugEnterDecision(15, decisionCanBacktrack[15]);
			int LA15_0 = input.LA(1);

			if ((LA15_0==WS))
			{
				int LA15_1 = input.LA(2);

				if ((LA15_1==WHERE))
				{
					alt15 = 1;
				}
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:130:102: WS where_clause
				{
				DebugLocation(130, 102);
				WS30=(IToken)Match(input,WS,Follow._WS_in_select_command535);  
				stream_WS.Add(WS30);

				DebugLocation(130, 105);
				PushFollow(Follow._where_clause_in_select_command537);
				where_clause31=where_clause();
				PopFollow();

				stream_where_clause.Add(where_clause31.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(15); }

			DebugLocation(130, 120);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:130:120: ( WS groupby_clause )?
			int alt16=2;
			try { DebugEnterSubRule(16);
			try { DebugEnterDecision(16, decisionCanBacktrack[16]);
			int LA16_0 = input.LA(1);

			if ((LA16_0==WS))
			{
				int LA16_1 = input.LA(2);

				if ((LA16_1==GROUP))
				{
					alt16 = 1;
				}
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:130:121: WS groupby_clause
				{
				DebugLocation(130, 121);
				WS32=(IToken)Match(input,WS,Follow._WS_in_select_command542);  
				stream_WS.Add(WS32);

				DebugLocation(130, 124);
				PushFollow(Follow._groupby_clause_in_select_command544);
				groupby_clause33=groupby_clause();
				PopFollow();

				stream_groupby_clause.Add(groupby_clause33.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(16); }

			DebugLocation(130, 141);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:130:141: ( WS having_clause )?
			int alt17=2;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, decisionCanBacktrack[17]);
			int LA17_0 = input.LA(1);

			if ((LA17_0==WS))
			{
				int LA17_1 = input.LA(2);

				if ((LA17_1==HAVING))
				{
					alt17 = 1;
				}
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:130:142: WS having_clause
				{
				DebugLocation(130, 142);
				WS34=(IToken)Match(input,WS,Follow._WS_in_select_command549);  
				stream_WS.Add(WS34);

				DebugLocation(130, 145);
				PushFollow(Follow._having_clause_in_select_command551);
				having_clause35=having_clause();
				PopFollow();

				stream_having_clause.Add(having_clause35.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(17); }

			DebugLocation(130, 161);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:130:161: ( WS orderby_clause )?
			int alt18=2;
			try { DebugEnterSubRule(18);
			try { DebugEnterDecision(18, decisionCanBacktrack[18]);
			int LA18_0 = input.LA(1);

			if ((LA18_0==WS))
			{
				int LA18_1 = input.LA(2);

				if ((LA18_1==ORDER))
				{
					alt18 = 1;
				}
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:130:162: WS orderby_clause
				{
				DebugLocation(130, 162);
				WS36=(IToken)Match(input,WS,Follow._WS_in_select_command556);  
				stream_WS.Add(WS36);

				DebugLocation(130, 165);
				PushFollow(Follow._orderby_clause_in_select_command558);
				orderby_clause37=orderby_clause();
				PopFollow();

				stream_orderby_clause.Add(orderby_clause37.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(18); }



			{
			// AST REWRITE
			// elements: column_list, groupby_clause, from_clause, into_clause, orderby_clause, having_clause, where_clause, top_clause, distinct_clause
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 131:3: -> ^( T_SELECT ( distinct_clause )? ( top_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( having_clause )? ( orderby_clause )? )
			{
				DebugLocation(131, 6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:131:6: ^( T_SELECT ( distinct_clause )? ( top_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( having_clause )? ( orderby_clause )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(131, 8);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SELECT, "T_SELECT"), root_1);

				DebugLocation(131, 17);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:131:17: ( distinct_clause )?
				if (stream_distinct_clause.HasNext)
				{
					DebugLocation(131, 17);
					adaptor.AddChild(root_1, stream_distinct_clause.NextTree());

				}
				stream_distinct_clause.Reset();
				DebugLocation(131, 34);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:131:34: ( top_clause )?
				if (stream_top_clause.HasNext)
				{
					DebugLocation(131, 34);
					adaptor.AddChild(root_1, stream_top_clause.NextTree());

				}
				stream_top_clause.Reset();
				DebugLocation(131, 46);
				adaptor.AddChild(root_1, stream_column_list.NextTree());
				DebugLocation(131, 58);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:131:58: ( into_clause )?
				if (stream_into_clause.HasNext)
				{
					DebugLocation(131, 58);
					adaptor.AddChild(root_1, stream_into_clause.NextTree());

				}
				stream_into_clause.Reset();
				DebugLocation(131, 71);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:131:71: ( from_clause )?
				if (stream_from_clause.HasNext)
				{
					DebugLocation(131, 71);
					adaptor.AddChild(root_1, stream_from_clause.NextTree());

				}
				stream_from_clause.Reset();
				DebugLocation(131, 84);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:131:84: ( where_clause )?
				if (stream_where_clause.HasNext)
				{
					DebugLocation(131, 84);
					adaptor.AddChild(root_1, stream_where_clause.NextTree());

				}
				stream_where_clause.Reset();
				DebugLocation(131, 98);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:131:98: ( groupby_clause )?
				if (stream_groupby_clause.HasNext)
				{
					DebugLocation(131, 98);
					adaptor.AddChild(root_1, stream_groupby_clause.NextTree());

				}
				stream_groupby_clause.Reset();
				DebugLocation(131, 114);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:131:114: ( having_clause )?
				if (stream_having_clause.HasNext)
				{
					DebugLocation(131, 114);
					adaptor.AddChild(root_1, stream_having_clause.NextTree());

				}
				stream_having_clause.Reset();
				DebugLocation(131, 129);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:131:129: ( orderby_clause )?
				if (stream_orderby_clause.HasNext)
				{
					DebugLocation(131, 129);
					adaptor.AddChild(root_1, stream_orderby_clause.NextTree());

				}
				stream_orderby_clause.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("select_command", 4);
			LeaveRule("select_command", 4);
			LeaveRule_select_command();
	    }
	 	DebugLocation(132, 1);
		} finally { DebugExitRule(GrammarFileName, "select_command"); }
		return retval;

	}
	// $ANTLR end "select_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_distinct_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_distinct_clause() {}

	// $ANTLR start "distinct_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:134:1: distinct_clause : ( DISTINCT -> T_DISTINCT | ALL -> T_ALL );
	[GrammarRule("distinct_clause")]
	private AstParserRuleReturnScope<object, IToken> distinct_clause()
	{
		EnterRule_distinct_clause();
		EnterRule("distinct_clause", 5);
		TraceIn("distinct_clause", 5);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken DISTINCT38 = default(IToken);
	    IToken ALL39 = default(IToken);

	    object DISTINCT38_tree = default(object);
	    object ALL39_tree = default(object);
	    RewriteRuleITokenStream stream_DISTINCT=new RewriteRuleITokenStream(adaptor,"token DISTINCT");
	    RewriteRuleITokenStream stream_ALL=new RewriteRuleITokenStream(adaptor,"token ALL");

		try { DebugEnterRule(GrammarFileName, "distinct_clause");
		DebugLocation(134, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:135:2: ( DISTINCT -> T_DISTINCT | ALL -> T_ALL )
			int alt19=2;
			try { DebugEnterDecision(19, decisionCanBacktrack[19]);
			int LA19_0 = input.LA(1);

			if ((LA19_0==DISTINCT))
			{
				alt19 = 1;
			}
			else if ((LA19_0==ALL))
			{
				alt19 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 19, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:135:4: DISTINCT
				{
				DebugLocation(135, 4);
				DISTINCT38=(IToken)Match(input,DISTINCT,Follow._DISTINCT_in_distinct_clause606);  
				stream_DISTINCT.Add(DISTINCT38);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 135:13: -> T_DISTINCT
				{
					DebugLocation(135, 16);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_DISTINCT, "T_DISTINCT"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:136:4: ALL
				{
				DebugLocation(136, 4);
				ALL39=(IToken)Match(input,ALL,Follow._ALL_in_distinct_clause615);  
				stream_ALL.Add(ALL39);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 136:8: -> T_ALL
				{
					DebugLocation(136, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_ALL, "T_ALL"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("distinct_clause", 5);
			LeaveRule("distinct_clause", 5);
			LeaveRule_distinct_clause();
	    }
	 	DebugLocation(137, 1);
		} finally { DebugExitRule(GrammarFileName, "distinct_clause"); }
		return retval;

	}
	// $ANTLR end "distinct_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_top_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_top_clause() {}

	// $ANTLR start "top_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:139:1: top_clause : TOP WS expression -> ^( T_TOP expression ) ;
	[GrammarRule("top_clause")]
	private AstParserRuleReturnScope<object, IToken> top_clause()
	{
		EnterRule_top_clause();
		EnterRule("top_clause", 6);
		TraceIn("top_clause", 6);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOP40 = default(IToken);
	    IToken WS41 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression42 = default(AstParserRuleReturnScope<object, IToken>);

	    object TOP40_tree = default(object);
	    object WS41_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_TOP=new RewriteRuleITokenStream(adaptor,"token TOP");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "top_clause");
		DebugLocation(139, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:140:2: ( TOP WS expression -> ^( T_TOP expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:140:4: TOP WS expression
			{
			DebugLocation(140, 4);
			TOP40=(IToken)Match(input,TOP,Follow._TOP_in_top_clause631);  
			stream_TOP.Add(TOP40);

			DebugLocation(140, 8);
			WS41=(IToken)Match(input,WS,Follow._WS_in_top_clause633);  
			stream_WS.Add(WS41);

			DebugLocation(140, 11);
			PushFollow(Follow._expression_in_top_clause635);
			expression42=expression();
			PopFollow();

			stream_expression.Add(expression42.Tree);


			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 141:2: -> ^( T_TOP expression )
			{
				DebugLocation(141, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:141:5: ^( T_TOP expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(141, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_TOP, "T_TOP"), root_1);

				DebugLocation(141, 13);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("top_clause", 6);
			LeaveRule("top_clause", 6);
			LeaveRule_top_clause();
	    }
	 	DebugLocation(142, 1);
		} finally { DebugExitRule(GrammarFileName, "top_clause"); }
		return retval;

	}
	// $ANTLR end "top_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_column_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_column_list() {}

	// $ANTLR start "column_list"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:144:1: column_list : column ( ( WS )? ',' ( WS )? column )* -> ^( T_COLUMNLIST ( column )* ) ;
	[GrammarRule("column_list")]
	private AstParserRuleReturnScope<object, IToken> column_list()
	{
		EnterRule_column_list();
		EnterRule("column_list", 7);
		TraceIn("column_list", 7);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS44 = default(IToken);
	    IToken char_literal45 = default(IToken);
	    IToken WS46 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> column43 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> column47 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS44_tree = default(object);
	    object char_literal45_tree = default(object);
	    object WS46_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_167=new RewriteRuleITokenStream(adaptor,"token 167");
	    RewriteRuleSubtreeStream stream_column=new RewriteRuleSubtreeStream(adaptor,"rule column");
		try { DebugEnterRule(GrammarFileName, "column_list");
		DebugLocation(144, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:145:2: ( column ( ( WS )? ',' ( WS )? column )* -> ^( T_COLUMNLIST ( column )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:145:4: column ( ( WS )? ',' ( WS )? column )*
			{
			DebugLocation(145, 4);
			PushFollow(Follow._column_in_column_list657);
			column43=column();
			PopFollow();

			stream_column.Add(column43.Tree);
			DebugLocation(145, 11);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:145:11: ( ( WS )? ',' ( WS )? column )*
			try { DebugEnterSubRule(22);
			while (true)
			{
				int alt22=2;
				try { DebugEnterDecision(22, decisionCanBacktrack[22]);
				int LA22_0 = input.LA(1);

				if ((LA22_0==WS))
				{
					int LA22_1 = input.LA(2);

					if ((LA22_1==167))
					{
						alt22 = 1;
					}


				}
				else if ((LA22_0==167))
				{
					alt22 = 1;
				}


				} finally { DebugExitDecision(22); }
				switch ( alt22 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:145:12: ( WS )? ',' ( WS )? column
					{
					DebugLocation(145, 12);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:145:12: ( WS )?
					int alt20=2;
					try { DebugEnterSubRule(20);
					try { DebugEnterDecision(20, decisionCanBacktrack[20]);
					int LA20_0 = input.LA(1);

					if ((LA20_0==WS))
					{
						alt20 = 1;
					}
					} finally { DebugExitDecision(20); }
					switch (alt20)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:145:12: WS
						{
						DebugLocation(145, 12);
						WS44=(IToken)Match(input,WS,Follow._WS_in_column_list660);  
						stream_WS.Add(WS44);


						}
						break;

					}
					} finally { DebugExitSubRule(20); }

					DebugLocation(145, 16);
					char_literal45=(IToken)Match(input,167,Follow._167_in_column_list663);  
					stream_167.Add(char_literal45);

					DebugLocation(145, 20);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:145:20: ( WS )?
					int alt21=2;
					try { DebugEnterSubRule(21);
					try { DebugEnterDecision(21, decisionCanBacktrack[21]);
					int LA21_0 = input.LA(1);

					if ((LA21_0==WS))
					{
						alt21 = 1;
					}
					} finally { DebugExitDecision(21); }
					switch (alt21)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:145:20: WS
						{
						DebugLocation(145, 20);
						WS46=(IToken)Match(input,WS,Follow._WS_in_column_list665);  
						stream_WS.Add(WS46);


						}
						break;

					}
					} finally { DebugExitSubRule(21); }

					DebugLocation(145, 24);
					PushFollow(Follow._column_in_column_list668);
					column47=column();
					PopFollow();

					stream_column.Add(column47.Tree);

					}
					break;

				default:
					goto loop22;
				}
			}

			loop22:
				;

			} finally { DebugExitSubRule(22); }



			{
			// AST REWRITE
			// elements: column
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 146:2: -> ^( T_COLUMNLIST ( column )* )
			{
				DebugLocation(146, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:146:5: ^( T_COLUMNLIST ( column )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(146, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_COLUMNLIST, "T_COLUMNLIST"), root_1);

				DebugLocation(146, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:146:20: ( column )*
				while ( stream_column.HasNext )
				{
					DebugLocation(146, 20);
					adaptor.AddChild(root_1, stream_column.NextTree());

				}
				stream_column.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("column_list", 7);
			LeaveRule("column_list", 7);
			LeaveRule_column_list();
	    }
	 	DebugLocation(147, 1);
		} finally { DebugExitRule(GrammarFileName, "column_list"); }
		return retval;

	}
	// $ANTLR end "column_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_column() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_column() {}

	// $ANTLR start "column"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:149:1: column : ( all_columns | expression ( WS SIMPLE_FILE )? -> ^( T_COLUMN expression ( SIMPLE_FILE )? ) );
	[GrammarRule("column")]
	private AstParserRuleReturnScope<object, IToken> column()
	{
		EnterRule_column();
		EnterRule("column", 8);
		TraceIn("column", 8);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS50 = default(IToken);
	    IToken SIMPLE_FILE51 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> all_columns48 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression49 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS50_tree = default(object);
	    object SIMPLE_FILE51_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_SIMPLE_FILE=new RewriteRuleITokenStream(adaptor,"token SIMPLE_FILE");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "column");
		DebugLocation(149, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:150:2: ( all_columns | expression ( WS SIMPLE_FILE )? -> ^( T_COLUMN expression ( SIMPLE_FILE )? ) )
			int alt24=2;
			try { DebugEnterDecision(24, decisionCanBacktrack[24]);
			switch (input.LA(1))
			{
			case SIMPLE_FILE:
				{
				switch (input.LA(2))
				{
				case WS:
					{
					int LA24_4 = input.LA(3);

					if ((LA24_4==EOF||LA24_4==AND||LA24_4==BETWEEN||LA24_4==CREATE||LA24_4==DECLARE||LA24_4==DROP||LA24_4==FROM||LA24_4==GROUP||LA24_4==HAVING||(LA24_4>=IN && LA24_4<=INTO)||LA24_4==LIKE||LA24_4==MATCH||LA24_4==NOT||(LA24_4>=OR && LA24_4<=ORDER)||(LA24_4>=SELECT && LA24_4<=SIMPLE_FILE)||LA24_4==USE||LA24_4==WHERE||(LA24_4>=158 && LA24_4<=162)||(LA24_4>=164 && LA24_4<=168)||(LA24_4>=170 && LA24_4<=177)||(LA24_4>=180 && LA24_4<=181)))
					{
						alt24 = 2;
					}
					else if ((LA24_4==169))
					{
						switch (input.LA(4))
						{
						case WS:
							{
							int LA24_6 = input.LA(5);

							if ((LA24_6==165))
							{
								alt24 = 1;
							}
							else if ((LA24_6==SIMPLE_FILE))
							{
								alt24 = 2;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 24, 6, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case 165:
							{
							alt24 = 1;
							}
							break;
						case SIMPLE_FILE:
							{
							alt24 = 2;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 24, 5, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 24, 4, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 169:
					{
					switch (input.LA(3))
					{
					case WS:
						{
						int LA24_6 = input.LA(4);

						if ((LA24_6==165))
						{
							alt24 = 1;
						}
						else if ((LA24_6==SIMPLE_FILE))
						{
							alt24 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 24, 6, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case 165:
						{
						alt24 = 1;
						}
						break;
					case SIMPLE_FILE:
						{
						alt24 = 2;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 24, 5, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					}
					break;
				case EOF:
				case CREATE:
				case DECLARE:
				case DROP:
				case SELECT:
				case SET:
				case USE:
				case 158:
				case 159:
				case 160:
				case 161:
				case 162:
				case 164:
				case 165:
				case 166:
				case 167:
				case 168:
				case 170:
				case 171:
				case 172:
				case 173:
				case 174:
				case 175:
				case 176:
				case 177:
				case 180:
				case 181:
					{
					alt24 = 2;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 24, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				}
				break;
			case 165:
				{
				alt24 = 1;
				}
				break;
			case CASE:
			case CAST:
			case CONVERT:
			case COUNT:
			case DATEADD:
			case DATEDIFF:
			case DATEPART:
			case EXISTS:
			case NOT:
			case NUMBER:
			case STRING:
			case SYSTEMVAR:
			case TOKEN:
			case VARIABLE:
			case 163:
			case 168:
				{
				alt24 = 2;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 24, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:150:4: all_columns
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(150, 4);
				PushFollow(Follow._all_columns_in_column692);
				all_columns48=all_columns();
				PopFollow();

				adaptor.AddChild(root_0, all_columns48.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:151:4: expression ( WS SIMPLE_FILE )?
				{
				DebugLocation(151, 4);
				PushFollow(Follow._expression_in_column697);
				expression49=expression();
				PopFollow();

				stream_expression.Add(expression49.Tree);
				DebugLocation(151, 15);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:151:15: ( WS SIMPLE_FILE )?
				int alt23=2;
				try { DebugEnterSubRule(23);
				try { DebugEnterDecision(23, decisionCanBacktrack[23]);
				int LA23_0 = input.LA(1);

				if ((LA23_0==WS))
				{
					int LA23_1 = input.LA(2);

					if ((LA23_1==SIMPLE_FILE))
					{
						alt23 = 1;
					}
				}
				} finally { DebugExitDecision(23); }
				switch (alt23)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:151:16: WS SIMPLE_FILE
					{
					DebugLocation(151, 16);
					WS50=(IToken)Match(input,WS,Follow._WS_in_column700);  
					stream_WS.Add(WS50);

					DebugLocation(151, 19);
					SIMPLE_FILE51=(IToken)Match(input,SIMPLE_FILE,Follow._SIMPLE_FILE_in_column702);  
					stream_SIMPLE_FILE.Add(SIMPLE_FILE51);


					}
					break;

				}
				} finally { DebugExitSubRule(23); }



				{
				// AST REWRITE
				// elements: SIMPLE_FILE, expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 151:33: -> ^( T_COLUMN expression ( SIMPLE_FILE )? )
				{
					DebugLocation(151, 36);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:151:36: ^( T_COLUMN expression ( SIMPLE_FILE )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(151, 38);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_COLUMN, "T_COLUMN"), root_1);

					DebugLocation(151, 47);
					adaptor.AddChild(root_1, stream_expression.NextTree());
					DebugLocation(151, 58);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:151:58: ( SIMPLE_FILE )?
					if (stream_SIMPLE_FILE.HasNext)
					{
						DebugLocation(151, 58);
						adaptor.AddChild(root_1, stream_SIMPLE_FILE.NextNode());

					}
					stream_SIMPLE_FILE.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("column", 8);
			LeaveRule("column", 8);
			LeaveRule_column();
	    }
	 	DebugLocation(152, 1);
		} finally { DebugExitRule(GrammarFileName, "column"); }
		return retval;

	}
	// $ANTLR end "column"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_all_columns() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_all_columns() {}

	// $ANTLR start "all_columns"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:154:1: all_columns : ( table_alias ( WS )? '.' ( WS )? )? '*' -> ^( T_ALLCOLUMNS ( table_alias )? ) ;
	[GrammarRule("all_columns")]
	private AstParserRuleReturnScope<object, IToken> all_columns()
	{
		EnterRule_all_columns();
		EnterRule("all_columns", 9);
		TraceIn("all_columns", 9);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS53 = default(IToken);
	    IToken char_literal54 = default(IToken);
	    IToken WS55 = default(IToken);
	    IToken char_literal56 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> table_alias52 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS53_tree = default(object);
	    object char_literal54_tree = default(object);
	    object WS55_tree = default(object);
	    object char_literal56_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_169=new RewriteRuleITokenStream(adaptor,"token 169");
	    RewriteRuleITokenStream stream_165=new RewriteRuleITokenStream(adaptor,"token 165");
	    RewriteRuleSubtreeStream stream_table_alias=new RewriteRuleSubtreeStream(adaptor,"rule table_alias");
		try { DebugEnterRule(GrammarFileName, "all_columns");
		DebugLocation(154, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:155:2: ( ( table_alias ( WS )? '.' ( WS )? )? '*' -> ^( T_ALLCOLUMNS ( table_alias )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:155:4: ( table_alias ( WS )? '.' ( WS )? )? '*'
			{
			DebugLocation(155, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:155:4: ( table_alias ( WS )? '.' ( WS )? )?
			int alt27=2;
			try { DebugEnterSubRule(27);
			try { DebugEnterDecision(27, decisionCanBacktrack[27]);
			int LA27_0 = input.LA(1);

			if ((LA27_0==SIMPLE_FILE))
			{
				alt27 = 1;
			}
			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:155:5: table_alias ( WS )? '.' ( WS )?
				{
				DebugLocation(155, 5);
				PushFollow(Follow._table_alias_in_all_columns727);
				table_alias52=table_alias();
				PopFollow();

				stream_table_alias.Add(table_alias52.Tree);
				DebugLocation(155, 17);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:155:17: ( WS )?
				int alt25=2;
				try { DebugEnterSubRule(25);
				try { DebugEnterDecision(25, decisionCanBacktrack[25]);
				int LA25_0 = input.LA(1);

				if ((LA25_0==WS))
				{
					alt25 = 1;
				}
				} finally { DebugExitDecision(25); }
				switch (alt25)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:155:17: WS
					{
					DebugLocation(155, 17);
					WS53=(IToken)Match(input,WS,Follow._WS_in_all_columns729);  
					stream_WS.Add(WS53);


					}
					break;

				}
				} finally { DebugExitSubRule(25); }

				DebugLocation(155, 21);
				char_literal54=(IToken)Match(input,169,Follow._169_in_all_columns732);  
				stream_169.Add(char_literal54);

				DebugLocation(155, 25);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:155:25: ( WS )?
				int alt26=2;
				try { DebugEnterSubRule(26);
				try { DebugEnterDecision(26, decisionCanBacktrack[26]);
				int LA26_0 = input.LA(1);

				if ((LA26_0==WS))
				{
					alt26 = 1;
				}
				} finally { DebugExitDecision(26); }
				switch (alt26)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:155:25: WS
					{
					DebugLocation(155, 25);
					WS55=(IToken)Match(input,WS,Follow._WS_in_all_columns734);  
					stream_WS.Add(WS55);


					}
					break;

				}
				} finally { DebugExitSubRule(26); }


				}
				break;

			}
			} finally { DebugExitSubRule(27); }

			DebugLocation(155, 31);
			char_literal56=(IToken)Match(input,165,Follow._165_in_all_columns739);  
			stream_165.Add(char_literal56);



			{
			// AST REWRITE
			// elements: table_alias
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 155:35: -> ^( T_ALLCOLUMNS ( table_alias )? )
			{
				DebugLocation(155, 38);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:155:38: ^( T_ALLCOLUMNS ( table_alias )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(155, 40);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_ALLCOLUMNS, "T_ALLCOLUMNS"), root_1);

				DebugLocation(155, 53);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:155:53: ( table_alias )?
				if (stream_table_alias.HasNext)
				{
					DebugLocation(155, 53);
					adaptor.AddChild(root_1, stream_table_alias.NextTree());

				}
				stream_table_alias.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("all_columns", 9);
			LeaveRule("all_columns", 9);
			LeaveRule_all_columns();
	    }
	 	DebugLocation(156, 1);
		} finally { DebugExitRule(GrammarFileName, "all_columns"); }
		return retval;

	}
	// $ANTLR end "all_columns"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_into_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_into_clause() {}

	// $ANTLR start "into_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:158:1: into_clause : INTO WS file -> ^( T_INTO file ) ;
	[GrammarRule("into_clause")]
	private AstParserRuleReturnScope<object, IToken> into_clause()
	{
		EnterRule_into_clause();
		EnterRule("into_clause", 10);
		TraceIn("into_clause", 10);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken INTO57 = default(IToken);
	    IToken WS58 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file59 = default(AstParserRuleReturnScope<object, IToken>);

	    object INTO57_tree = default(object);
	    object WS58_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_INTO=new RewriteRuleITokenStream(adaptor,"token INTO");
	    RewriteRuleSubtreeStream stream_file=new RewriteRuleSubtreeStream(adaptor,"rule file");
		try { DebugEnterRule(GrammarFileName, "into_clause");
		DebugLocation(158, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:159:2: ( INTO WS file -> ^( T_INTO file ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:159:4: INTO WS file
			{
			DebugLocation(159, 4);
			INTO57=(IToken)Match(input,INTO,Follow._INTO_in_into_clause759);  
			stream_INTO.Add(INTO57);

			DebugLocation(159, 9);
			WS58=(IToken)Match(input,WS,Follow._WS_in_into_clause761);  
			stream_WS.Add(WS58);

			DebugLocation(159, 12);
			PushFollow(Follow._file_in_into_clause763);
			file59=file();
			PopFollow();

			stream_file.Add(file59.Tree);


			{
			// AST REWRITE
			// elements: file
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 159:17: -> ^( T_INTO file )
			{
				DebugLocation(159, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:159:20: ^( T_INTO file )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(159, 22);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_INTO, "T_INTO"), root_1);

				DebugLocation(159, 29);
				adaptor.AddChild(root_1, stream_file.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("into_clause", 10);
			LeaveRule("into_clause", 10);
			LeaveRule_into_clause();
	    }
	 	DebugLocation(160, 1);
		} finally { DebugExitRule(GrammarFileName, "into_clause"); }
		return retval;

	}
	// $ANTLR end "into_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_from_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_from_clause() {}

	// $ANTLR start "from_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:162:1: from_clause : FROM WS from_clause_item ( ( WS )? ',' ( WS )? from_clause_item )* ( WS table_alias )? -> ^( T_FROM ( table_alias )? ( from_clause_item )* ) ;
	[GrammarRule("from_clause")]
	private AstParserRuleReturnScope<object, IToken> from_clause()
	{
		EnterRule_from_clause();
		EnterRule("from_clause", 11);
		TraceIn("from_clause", 11);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken FROM60 = default(IToken);
	    IToken WS61 = default(IToken);
	    IToken WS63 = default(IToken);
	    IToken char_literal64 = default(IToken);
	    IToken WS65 = default(IToken);
	    IToken WS67 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> from_clause_item62 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> from_clause_item66 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> table_alias68 = default(AstParserRuleReturnScope<object, IToken>);

	    object FROM60_tree = default(object);
	    object WS61_tree = default(object);
	    object WS63_tree = default(object);
	    object char_literal64_tree = default(object);
	    object WS65_tree = default(object);
	    object WS67_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_FROM=new RewriteRuleITokenStream(adaptor,"token FROM");
	    RewriteRuleITokenStream stream_167=new RewriteRuleITokenStream(adaptor,"token 167");
	    RewriteRuleSubtreeStream stream_from_clause_item=new RewriteRuleSubtreeStream(adaptor,"rule from_clause_item");
	    RewriteRuleSubtreeStream stream_table_alias=new RewriteRuleSubtreeStream(adaptor,"rule table_alias");
		try { DebugEnterRule(GrammarFileName, "from_clause");
		DebugLocation(162, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:163:2: ( FROM WS from_clause_item ( ( WS )? ',' ( WS )? from_clause_item )* ( WS table_alias )? -> ^( T_FROM ( table_alias )? ( from_clause_item )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:163:4: FROM WS from_clause_item ( ( WS )? ',' ( WS )? from_clause_item )* ( WS table_alias )?
			{
			DebugLocation(163, 4);
			FROM60=(IToken)Match(input,FROM,Follow._FROM_in_from_clause783);  
			stream_FROM.Add(FROM60);

			DebugLocation(163, 9);
			WS61=(IToken)Match(input,WS,Follow._WS_in_from_clause785);  
			stream_WS.Add(WS61);

			DebugLocation(163, 12);
			PushFollow(Follow._from_clause_item_in_from_clause787);
			from_clause_item62=from_clause_item();
			PopFollow();

			stream_from_clause_item.Add(from_clause_item62.Tree);
			DebugLocation(163, 29);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:163:29: ( ( WS )? ',' ( WS )? from_clause_item )*
			try { DebugEnterSubRule(30);
			while (true)
			{
				int alt30=2;
				try { DebugEnterDecision(30, decisionCanBacktrack[30]);
				int LA30_0 = input.LA(1);

				if ((LA30_0==WS))
				{
					int LA30_1 = input.LA(2);

					if ((LA30_1==167))
					{
						alt30 = 1;
					}


				}
				else if ((LA30_0==167))
				{
					alt30 = 1;
				}


				} finally { DebugExitDecision(30); }
				switch ( alt30 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:163:30: ( WS )? ',' ( WS )? from_clause_item
					{
					DebugLocation(163, 30);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:163:30: ( WS )?
					int alt28=2;
					try { DebugEnterSubRule(28);
					try { DebugEnterDecision(28, decisionCanBacktrack[28]);
					int LA28_0 = input.LA(1);

					if ((LA28_0==WS))
					{
						alt28 = 1;
					}
					} finally { DebugExitDecision(28); }
					switch (alt28)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:163:30: WS
						{
						DebugLocation(163, 30);
						WS63=(IToken)Match(input,WS,Follow._WS_in_from_clause790);  
						stream_WS.Add(WS63);


						}
						break;

					}
					} finally { DebugExitSubRule(28); }

					DebugLocation(163, 34);
					char_literal64=(IToken)Match(input,167,Follow._167_in_from_clause793);  
					stream_167.Add(char_literal64);

					DebugLocation(163, 38);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:163:38: ( WS )?
					int alt29=2;
					try { DebugEnterSubRule(29);
					try { DebugEnterDecision(29, decisionCanBacktrack[29]);
					int LA29_0 = input.LA(1);

					if ((LA29_0==WS))
					{
						alt29 = 1;
					}
					} finally { DebugExitDecision(29); }
					switch (alt29)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:163:38: WS
						{
						DebugLocation(163, 38);
						WS65=(IToken)Match(input,WS,Follow._WS_in_from_clause795);  
						stream_WS.Add(WS65);


						}
						break;

					}
					} finally { DebugExitSubRule(29); }

					DebugLocation(163, 42);
					PushFollow(Follow._from_clause_item_in_from_clause798);
					from_clause_item66=from_clause_item();
					PopFollow();

					stream_from_clause_item.Add(from_clause_item66.Tree);

					}
					break;

				default:
					goto loop30;
				}
			}

			loop30:
				;

			} finally { DebugExitSubRule(30); }

			DebugLocation(163, 61);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:163:61: ( WS table_alias )?
			int alt31=2;
			try { DebugEnterSubRule(31);
			try { DebugEnterDecision(31, decisionCanBacktrack[31]);
			int LA31_0 = input.LA(1);

			if ((LA31_0==WS))
			{
				int LA31_1 = input.LA(2);

				if ((LA31_1==SIMPLE_FILE))
				{
					alt31 = 1;
				}
			}
			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:163:62: WS table_alias
				{
				DebugLocation(163, 62);
				WS67=(IToken)Match(input,WS,Follow._WS_in_from_clause803);  
				stream_WS.Add(WS67);

				DebugLocation(163, 65);
				PushFollow(Follow._table_alias_in_from_clause805);
				table_alias68=table_alias();
				PopFollow();

				stream_table_alias.Add(table_alias68.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(31); }



			{
			// AST REWRITE
			// elements: table_alias, from_clause_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 163:79: -> ^( T_FROM ( table_alias )? ( from_clause_item )* )
			{
				DebugLocation(163, 82);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:163:82: ^( T_FROM ( table_alias )? ( from_clause_item )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(163, 84);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FROM, "T_FROM"), root_1);

				DebugLocation(163, 91);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:163:91: ( table_alias )?
				if (stream_table_alias.HasNext)
				{
					DebugLocation(163, 91);
					adaptor.AddChild(root_1, stream_table_alias.NextTree());

				}
				stream_table_alias.Reset();
				DebugLocation(163, 104);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:163:104: ( from_clause_item )*
				while ( stream_from_clause_item.HasNext )
				{
					DebugLocation(163, 104);
					adaptor.AddChild(root_1, stream_from_clause_item.NextTree());

				}
				stream_from_clause_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("from_clause", 11);
			LeaveRule("from_clause", 11);
			LeaveRule_from_clause();
	    }
	 	DebugLocation(165, 1);
		} finally { DebugExitRule(GrammarFileName, "from_clause"); }
		return retval;

	}
	// $ANTLR end "from_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_from_clause_item() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_from_clause_item() {}

	// $ANTLR start "from_clause_item"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:167:1: from_clause_item : ( STRING -> ^( T_FILE STRING ) | file | subquery | view_name ( ( WS )? '(' ( expression_list )? ')' )? -> ^( T_VIEW view_name ( expression_list )? ) );
	[GrammarRule("from_clause_item")]
	private AstParserRuleReturnScope<object, IToken> from_clause_item()
	{
		EnterRule_from_clause_item();
		EnterRule("from_clause_item", 12);
		TraceIn("from_clause_item", 12);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken STRING69 = default(IToken);
	    IToken WS73 = default(IToken);
	    IToken char_literal74 = default(IToken);
	    IToken char_literal76 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file70 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> subquery71 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> view_name72 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list75 = default(AstParserRuleReturnScope<object, IToken>);

	    object STRING69_tree = default(object);
	    object WS73_tree = default(object);
	    object char_literal74_tree = default(object);
	    object char_literal76_tree = default(object);
	    RewriteRuleITokenStream stream_163=new RewriteRuleITokenStream(adaptor,"token 163");
	    RewriteRuleITokenStream stream_164=new RewriteRuleITokenStream(adaptor,"token 164");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
	    RewriteRuleSubtreeStream stream_view_name=new RewriteRuleSubtreeStream(adaptor,"rule view_name");
	    RewriteRuleSubtreeStream stream_expression_list=new RewriteRuleSubtreeStream(adaptor,"rule expression_list");
		try { DebugEnterRule(GrammarFileName, "from_clause_item");
		DebugLocation(167, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:168:2: ( STRING -> ^( T_FILE STRING ) | file | subquery | view_name ( ( WS )? '(' ( expression_list )? ')' )? -> ^( T_VIEW view_name ( expression_list )? ) )
			int alt35=4;
			try { DebugEnterDecision(35, decisionCanBacktrack[35]);
			switch (input.LA(1))
			{
			case STRING:
				{
				alt35 = 1;
				}
				break;
			case SIMPLE_FILE:
			case 178:
				{
				alt35 = 2;
				}
				break;
			case 163:
				{
				alt35 = 3;
				}
				break;
			case TOKEN:
				{
				alt35 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 35, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(35); }
			switch (alt35)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:168:4: STRING
				{
				DebugLocation(168, 4);
				STRING69=(IToken)Match(input,STRING,Follow._STRING_in_from_clause_item832);  
				stream_STRING.Add(STRING69);



				{
				// AST REWRITE
				// elements: STRING
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 168:11: -> ^( T_FILE STRING )
				{
					DebugLocation(168, 14);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:168:14: ^( T_FILE STRING )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(168, 16);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILE, "T_FILE"), root_1);

					DebugLocation(168, 23);
					adaptor.AddChild(root_1, stream_STRING.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:169:4: file
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(169, 4);
				PushFollow(Follow._file_in_from_clause_item845);
				file70=file();
				PopFollow();

				adaptor.AddChild(root_0, file70.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:170:4: subquery
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(170, 4);
				PushFollow(Follow._subquery_in_from_clause_item850);
				subquery71=subquery();
				PopFollow();

				adaptor.AddChild(root_0, subquery71.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:171:4: view_name ( ( WS )? '(' ( expression_list )? ')' )?
				{
				DebugLocation(171, 4);
				PushFollow(Follow._view_name_in_from_clause_item855);
				view_name72=view_name();
				PopFollow();

				stream_view_name.Add(view_name72.Tree);
				DebugLocation(171, 14);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:171:14: ( ( WS )? '(' ( expression_list )? ')' )?
				int alt34=2;
				try { DebugEnterSubRule(34);
				try { DebugEnterDecision(34, decisionCanBacktrack[34]);
				int LA34_0 = input.LA(1);

				if ((LA34_0==WS))
				{
					int LA34_1 = input.LA(2);

					if ((LA34_1==163))
					{
						alt34 = 1;
					}
				}
				else if ((LA34_0==163))
				{
					alt34 = 1;
				}
				} finally { DebugExitDecision(34); }
				switch (alt34)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:171:15: ( WS )? '(' ( expression_list )? ')'
					{
					DebugLocation(171, 15);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:171:15: ( WS )?
					int alt32=2;
					try { DebugEnterSubRule(32);
					try { DebugEnterDecision(32, decisionCanBacktrack[32]);
					int LA32_0 = input.LA(1);

					if ((LA32_0==WS))
					{
						alt32 = 1;
					}
					} finally { DebugExitDecision(32); }
					switch (alt32)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:171:15: WS
						{
						DebugLocation(171, 15);
						WS73=(IToken)Match(input,WS,Follow._WS_in_from_clause_item858);  
						stream_WS.Add(WS73);


						}
						break;

					}
					} finally { DebugExitSubRule(32); }

					DebugLocation(171, 19);
					char_literal74=(IToken)Match(input,163,Follow._163_in_from_clause_item861);  
					stream_163.Add(char_literal74);

					DebugLocation(171, 23);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:171:23: ( expression_list )?
					int alt33=2;
					try { DebugEnterSubRule(33);
					try { DebugEnterDecision(33, decisionCanBacktrack[33]);
					int LA33_0 = input.LA(1);

					if (((LA33_0>=CASE && LA33_0<=CAST)||(LA33_0>=CONVERT && LA33_0<=COUNT)||(LA33_0>=DATEADD && LA33_0<=DATEPART)||LA33_0==EXISTS||(LA33_0>=NOT && LA33_0<=NUMBER)||LA33_0==SIMPLE_FILE||(LA33_0>=STRING && LA33_0<=SYSTEMVAR)||LA33_0==TOKEN||LA33_0==VARIABLE||LA33_0==163||LA33_0==168))
					{
						alt33 = 1;
					}
					} finally { DebugExitDecision(33); }
					switch (alt33)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:171:23: expression_list
						{
						DebugLocation(171, 23);
						PushFollow(Follow._expression_list_in_from_clause_item863);
						expression_list75=expression_list();
						PopFollow();

						stream_expression_list.Add(expression_list75.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(33); }

					DebugLocation(171, 40);
					char_literal76=(IToken)Match(input,164,Follow._164_in_from_clause_item866);  
					stream_164.Add(char_literal76);


					}
					break;

				}
				} finally { DebugExitSubRule(34); }



				{
				// AST REWRITE
				// elements: view_name, expression_list
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 171:46: -> ^( T_VIEW view_name ( expression_list )? )
				{
					DebugLocation(171, 49);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:171:49: ^( T_VIEW view_name ( expression_list )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(171, 51);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_VIEW, "T_VIEW"), root_1);

					DebugLocation(171, 58);
					adaptor.AddChild(root_1, stream_view_name.NextTree());
					DebugLocation(171, 68);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:171:68: ( expression_list )?
					if (stream_expression_list.HasNext)
					{
						DebugLocation(171, 68);
						adaptor.AddChild(root_1, stream_expression_list.NextTree());

					}
					stream_expression_list.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("from_clause_item", 12);
			LeaveRule("from_clause_item", 12);
			LeaveRule_from_clause_item();
	    }
	 	DebugLocation(172, 1);
		} finally { DebugExitRule(GrammarFileName, "from_clause_item"); }
		return retval;

	}
	// $ANTLR end "from_clause_item"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_subquery() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_subquery() {}

	// $ANTLR start "subquery"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:174:1: subquery : '(' ( WS )? select_command ( WS )? ')' -> ^( T_SUBQUERY select_command ) ;
	[GrammarRule("subquery")]
	private AstParserRuleReturnScope<object, IToken> subquery()
	{
		EnterRule_subquery();
		EnterRule("subquery", 13);
		TraceIn("subquery", 13);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal77 = default(IToken);
	    IToken WS78 = default(IToken);
	    IToken WS80 = default(IToken);
	    IToken char_literal81 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> select_command79 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal77_tree = default(object);
	    object WS78_tree = default(object);
	    object WS80_tree = default(object);
	    object char_literal81_tree = default(object);
	    RewriteRuleITokenStream stream_163=new RewriteRuleITokenStream(adaptor,"token 163");
	    RewriteRuleITokenStream stream_164=new RewriteRuleITokenStream(adaptor,"token 164");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_select_command=new RewriteRuleSubtreeStream(adaptor,"rule select_command");
		try { DebugEnterRule(GrammarFileName, "subquery");
		DebugLocation(174, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:175:2: ( '(' ( WS )? select_command ( WS )? ')' -> ^( T_SUBQUERY select_command ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:175:4: '(' ( WS )? select_command ( WS )? ')'
			{
			DebugLocation(175, 4);
			char_literal77=(IToken)Match(input,163,Follow._163_in_subquery891);  
			stream_163.Add(char_literal77);

			DebugLocation(175, 8);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:175:8: ( WS )?
			int alt36=2;
			try { DebugEnterSubRule(36);
			try { DebugEnterDecision(36, decisionCanBacktrack[36]);
			int LA36_0 = input.LA(1);

			if ((LA36_0==WS))
			{
				alt36 = 1;
			}
			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:175:8: WS
				{
				DebugLocation(175, 8);
				WS78=(IToken)Match(input,WS,Follow._WS_in_subquery893);  
				stream_WS.Add(WS78);


				}
				break;

			}
			} finally { DebugExitSubRule(36); }

			DebugLocation(175, 12);
			PushFollow(Follow._select_command_in_subquery896);
			select_command79=select_command();
			PopFollow();

			stream_select_command.Add(select_command79.Tree);
			DebugLocation(175, 27);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:175:27: ( WS )?
			int alt37=2;
			try { DebugEnterSubRule(37);
			try { DebugEnterDecision(37, decisionCanBacktrack[37]);
			int LA37_0 = input.LA(1);

			if ((LA37_0==WS))
			{
				alt37 = 1;
			}
			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:175:27: WS
				{
				DebugLocation(175, 27);
				WS80=(IToken)Match(input,WS,Follow._WS_in_subquery898);  
				stream_WS.Add(WS80);


				}
				break;

			}
			} finally { DebugExitSubRule(37); }

			DebugLocation(175, 31);
			char_literal81=(IToken)Match(input,164,Follow._164_in_subquery901);  
			stream_164.Add(char_literal81);



			{
			// AST REWRITE
			// elements: select_command
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 175:35: -> ^( T_SUBQUERY select_command )
			{
				DebugLocation(175, 38);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:175:38: ^( T_SUBQUERY select_command )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(175, 40);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SUBQUERY, "T_SUBQUERY"), root_1);

				DebugLocation(175, 51);
				adaptor.AddChild(root_1, stream_select_command.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("subquery", 13);
			LeaveRule("subquery", 13);
			LeaveRule_subquery();
	    }
	 	DebugLocation(176, 1);
		} finally { DebugExitRule(GrammarFileName, "subquery"); }
		return retval;

	}
	// $ANTLR end "subquery"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file() {}

	// $ANTLR start "file"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:178:1: file : ( '[' ( WS )? file_spec ( WS file_option )* ( WS )? ']' -> ^( T_FILE file_spec ( file_option )* ) | SIMPLE_FILE -> ^( T_FILE SIMPLE_FILE ) );
	[GrammarRule("file")]
	private AstParserRuleReturnScope<object, IToken> file()
	{
		EnterRule_file();
		EnterRule("file", 14);
		TraceIn("file", 14);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal82 = default(IToken);
	    IToken WS83 = default(IToken);
	    IToken WS85 = default(IToken);
	    IToken WS87 = default(IToken);
	    IToken char_literal88 = default(IToken);
	    IToken SIMPLE_FILE89 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file_spec84 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> file_option86 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal82_tree = default(object);
	    object WS83_tree = default(object);
	    object WS85_tree = default(object);
	    object WS87_tree = default(object);
	    object char_literal88_tree = default(object);
	    object SIMPLE_FILE89_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_SIMPLE_FILE=new RewriteRuleITokenStream(adaptor,"token SIMPLE_FILE");
	    RewriteRuleITokenStream stream_179=new RewriteRuleITokenStream(adaptor,"token 179");
	    RewriteRuleITokenStream stream_178=new RewriteRuleITokenStream(adaptor,"token 178");
	    RewriteRuleSubtreeStream stream_file_option=new RewriteRuleSubtreeStream(adaptor,"rule file_option");
	    RewriteRuleSubtreeStream stream_file_spec=new RewriteRuleSubtreeStream(adaptor,"rule file_spec");
		try { DebugEnterRule(GrammarFileName, "file");
		DebugLocation(178, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:179:2: ( '[' ( WS )? file_spec ( WS file_option )* ( WS )? ']' -> ^( T_FILE file_spec ( file_option )* ) | SIMPLE_FILE -> ^( T_FILE SIMPLE_FILE ) )
			int alt41=2;
			try { DebugEnterDecision(41, decisionCanBacktrack[41]);
			int LA41_0 = input.LA(1);

			if ((LA41_0==178))
			{
				alt41 = 1;
			}
			else if ((LA41_0==SIMPLE_FILE))
			{
				alt41 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 41, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(41); }
			switch (alt41)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:179:4: '[' ( WS )? file_spec ( WS file_option )* ( WS )? ']'
				{
				DebugLocation(179, 4);
				char_literal82=(IToken)Match(input,178,Follow._178_in_file920);  
				stream_178.Add(char_literal82);

				DebugLocation(179, 8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:179:8: ( WS )?
				int alt38=2;
				try { DebugEnterSubRule(38);
				try { DebugEnterDecision(38, decisionCanBacktrack[38]);
				int LA38_0 = input.LA(1);

				if ((LA38_0==WS))
				{
					alt38 = 1;
				}
				} finally { DebugExitDecision(38); }
				switch (alt38)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:179:8: WS
					{
					DebugLocation(179, 8);
					WS83=(IToken)Match(input,WS,Follow._WS_in_file922);  
					stream_WS.Add(WS83);


					}
					break;

				}
				} finally { DebugExitSubRule(38); }

				DebugLocation(179, 12);
				PushFollow(Follow._file_spec_in_file925);
				file_spec84=file_spec();
				PopFollow();

				stream_file_spec.Add(file_spec84.Tree);
				DebugLocation(179, 22);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:179:22: ( WS file_option )*
				try { DebugEnterSubRule(39);
				while (true)
				{
					int alt39=2;
					try { DebugEnterDecision(39, decisionCanBacktrack[39]);
					int LA39_0 = input.LA(1);

					if ((LA39_0==WS))
					{
						int LA39_1 = input.LA(2);

						if ((LA39_1==168))
						{
							alt39 = 1;
						}


					}


					} finally { DebugExitDecision(39); }
					switch ( alt39 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:179:23: WS file_option
						{
						DebugLocation(179, 23);
						WS85=(IToken)Match(input,WS,Follow._WS_in_file928);  
						stream_WS.Add(WS85);

						DebugLocation(179, 26);
						PushFollow(Follow._file_option_in_file930);
						file_option86=file_option();
						PopFollow();

						stream_file_option.Add(file_option86.Tree);

						}
						break;

					default:
						goto loop39;
					}
				}

				loop39:
					;

				} finally { DebugExitSubRule(39); }

				DebugLocation(179, 40);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:179:40: ( WS )?
				int alt40=2;
				try { DebugEnterSubRule(40);
				try { DebugEnterDecision(40, decisionCanBacktrack[40]);
				int LA40_0 = input.LA(1);

				if ((LA40_0==WS))
				{
					alt40 = 1;
				}
				} finally { DebugExitDecision(40); }
				switch (alt40)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:179:40: WS
					{
					DebugLocation(179, 40);
					WS87=(IToken)Match(input,WS,Follow._WS_in_file934);  
					stream_WS.Add(WS87);


					}
					break;

				}
				} finally { DebugExitSubRule(40); }

				DebugLocation(179, 44);
				char_literal88=(IToken)Match(input,179,Follow._179_in_file937);  
				stream_179.Add(char_literal88);



				{
				// AST REWRITE
				// elements: file_spec, file_option
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 179:48: -> ^( T_FILE file_spec ( file_option )* )
				{
					DebugLocation(179, 51);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:179:51: ^( T_FILE file_spec ( file_option )* )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(179, 53);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILE, "T_FILE"), root_1);

					DebugLocation(179, 60);
					adaptor.AddChild(root_1, stream_file_spec.NextTree());
					DebugLocation(179, 70);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:179:70: ( file_option )*
					while ( stream_file_option.HasNext )
					{
						DebugLocation(179, 70);
						adaptor.AddChild(root_1, stream_file_option.NextTree());

					}
					stream_file_option.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:180:4: SIMPLE_FILE
				{
				DebugLocation(180, 4);
				SIMPLE_FILE89=(IToken)Match(input,SIMPLE_FILE,Follow._SIMPLE_FILE_in_file954);  
				stream_SIMPLE_FILE.Add(SIMPLE_FILE89);



				{
				// AST REWRITE
				// elements: SIMPLE_FILE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 180:16: -> ^( T_FILE SIMPLE_FILE )
				{
					DebugLocation(180, 19);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:180:19: ^( T_FILE SIMPLE_FILE )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(180, 21);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILE, "T_FILE"), root_1);

					DebugLocation(180, 28);
					adaptor.AddChild(root_1, stream_SIMPLE_FILE.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file", 14);
			LeaveRule("file", 14);
			LeaveRule_file();
	    }
	 	DebugLocation(181, 1);
		} finally { DebugExitRule(GrammarFileName, "file"); }
		return retval;

	}
	// $ANTLR end "file"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_spec() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_spec() {}

	// $ANTLR start "file_spec"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:183:1: file_spec : ( string | variable );
	[GrammarRule("file_spec")]
	private AstParserRuleReturnScope<object, IToken> file_spec()
	{
		EnterRule_file_spec();
		EnterRule("file_spec", 15);
		TraceIn("file_spec", 15);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> string90 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> variable91 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "file_spec");
		DebugLocation(183, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:184:2: ( string | variable )
			int alt42=2;
			try { DebugEnterDecision(42, decisionCanBacktrack[42]);
			int LA42_0 = input.LA(1);

			if ((LA42_0==STRING))
			{
				alt42 = 1;
			}
			else if ((LA42_0==VARIABLE))
			{
				alt42 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 42, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(42); }
			switch (alt42)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:184:4: string
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(184, 4);
				PushFollow(Follow._string_in_file_spec973);
				string90=@string();
				PopFollow();

				adaptor.AddChild(root_0, string90.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:185:4: variable
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(185, 4);
				PushFollow(Follow._variable_in_file_spec978);
				variable91=variable();
				PopFollow();

				adaptor.AddChild(root_0, variable91.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_spec", 15);
			LeaveRule("file_spec", 15);
			LeaveRule_file_spec();
	    }
	 	DebugLocation(186, 1);
		} finally { DebugExitRule(GrammarFileName, "file_spec"); }
		return retval;

	}
	// $ANTLR end "file_spec"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_option() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_option() {}

	// $ANTLR start "file_option"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:188:1: file_option : '-' file_option_name ( ( WS )? '=' ( WS )? file_option_value )? -> ^( T_FILEOPTION file_option_name ( file_option_value )? ) ;
	[GrammarRule("file_option")]
	private AstParserRuleReturnScope<object, IToken> file_option()
	{
		EnterRule_file_option();
		EnterRule("file_option", 16);
		TraceIn("file_option", 16);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal92 = default(IToken);
	    IToken WS94 = default(IToken);
	    IToken char_literal95 = default(IToken);
	    IToken WS96 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file_option_name93 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> file_option_value97 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal92_tree = default(object);
	    object WS94_tree = default(object);
	    object char_literal95_tree = default(object);
	    object WS96_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_175=new RewriteRuleITokenStream(adaptor,"token 175");
	    RewriteRuleITokenStream stream_168=new RewriteRuleITokenStream(adaptor,"token 168");
	    RewriteRuleSubtreeStream stream_file_option_name=new RewriteRuleSubtreeStream(adaptor,"rule file_option_name");
	    RewriteRuleSubtreeStream stream_file_option_value=new RewriteRuleSubtreeStream(adaptor,"rule file_option_value");
		try { DebugEnterRule(GrammarFileName, "file_option");
		DebugLocation(188, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:189:2: ( '-' file_option_name ( ( WS )? '=' ( WS )? file_option_value )? -> ^( T_FILEOPTION file_option_name ( file_option_value )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:189:4: '-' file_option_name ( ( WS )? '=' ( WS )? file_option_value )?
			{
			DebugLocation(189, 4);
			char_literal92=(IToken)Match(input,168,Follow._168_in_file_option990);  
			stream_168.Add(char_literal92);

			DebugLocation(189, 8);
			PushFollow(Follow._file_option_name_in_file_option992);
			file_option_name93=file_option_name();
			PopFollow();

			stream_file_option_name.Add(file_option_name93.Tree);
			DebugLocation(189, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:189:25: ( ( WS )? '=' ( WS )? file_option_value )?
			int alt45=2;
			try { DebugEnterSubRule(45);
			try { DebugEnterDecision(45, decisionCanBacktrack[45]);
			int LA45_0 = input.LA(1);

			if ((LA45_0==WS))
			{
				int LA45_1 = input.LA(2);

				if ((LA45_1==175))
				{
					alt45 = 1;
				}
			}
			else if ((LA45_0==175))
			{
				alt45 = 1;
			}
			} finally { DebugExitDecision(45); }
			switch (alt45)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:189:27: ( WS )? '=' ( WS )? file_option_value
				{
				DebugLocation(189, 27);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:189:27: ( WS )?
				int alt43=2;
				try { DebugEnterSubRule(43);
				try { DebugEnterDecision(43, decisionCanBacktrack[43]);
				int LA43_0 = input.LA(1);

				if ((LA43_0==WS))
				{
					alt43 = 1;
				}
				} finally { DebugExitDecision(43); }
				switch (alt43)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:189:27: WS
					{
					DebugLocation(189, 27);
					WS94=(IToken)Match(input,WS,Follow._WS_in_file_option996);  
					stream_WS.Add(WS94);


					}
					break;

				}
				} finally { DebugExitSubRule(43); }

				DebugLocation(189, 31);
				char_literal95=(IToken)Match(input,175,Follow._175_in_file_option999);  
				stream_175.Add(char_literal95);

				DebugLocation(189, 35);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:189:35: ( WS )?
				int alt44=2;
				try { DebugEnterSubRule(44);
				try { DebugEnterDecision(44, decisionCanBacktrack[44]);
				int LA44_0 = input.LA(1);

				if ((LA44_0==WS))
				{
					alt44 = 1;
				}
				} finally { DebugExitDecision(44); }
				switch (alt44)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:189:35: WS
					{
					DebugLocation(189, 35);
					WS96=(IToken)Match(input,WS,Follow._WS_in_file_option1001);  
					stream_WS.Add(WS96);


					}
					break;

				}
				} finally { DebugExitSubRule(44); }

				DebugLocation(189, 39);
				PushFollow(Follow._file_option_value_in_file_option1004);
				file_option_value97=file_option_value();
				PopFollow();

				stream_file_option_value.Add(file_option_value97.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(45); }



			{
			// AST REWRITE
			// elements: file_option_name, file_option_value
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 189:59: -> ^( T_FILEOPTION file_option_name ( file_option_value )? )
			{
				DebugLocation(189, 62);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:189:62: ^( T_FILEOPTION file_option_name ( file_option_value )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(189, 64);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILEOPTION, "T_FILEOPTION"), root_1);

				DebugLocation(189, 77);
				adaptor.AddChild(root_1, stream_file_option_name.NextTree());
				DebugLocation(189, 94);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:189:94: ( file_option_value )?
				if (stream_file_option_value.HasNext)
				{
					DebugLocation(189, 94);
					adaptor.AddChild(root_1, stream_file_option_value.NextTree());

				}
				stream_file_option_value.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_option", 16);
			LeaveRule("file_option", 16);
			LeaveRule_file_option();
	    }
	 	DebugLocation(190, 1);
		} finally { DebugExitRule(GrammarFileName, "file_option"); }
		return retval;

	}
	// $ANTLR end "file_option"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_option_name() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_option_name() {}

	// $ANTLR start "file_option_name"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:192:1: file_option_name : TOKEN ;
	[GrammarRule("file_option_name")]
	private AstParserRuleReturnScope<object, IToken> file_option_name()
	{
		EnterRule_file_option_name();
		EnterRule("file_option_name", 17);
		TraceIn("file_option_name", 17);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN98 = default(IToken);

	    object TOKEN98_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "file_option_name");
		DebugLocation(192, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:193:2: ( TOKEN )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:193:4: TOKEN
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(193, 4);
			TOKEN98=(IToken)Match(input,TOKEN,Follow._TOKEN_in_file_option_name1028); 
			TOKEN98_tree = (object)adaptor.Create(TOKEN98);
			adaptor.AddChild(root_0, TOKEN98_tree);


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_option_name", 17);
			LeaveRule("file_option_name", 17);
			LeaveRule_file_option_name();
	    }
	 	DebugLocation(194, 1);
		} finally { DebugExitRule(GrammarFileName, "file_option_name"); }
		return retval;

	}
	// $ANTLR end "file_option_name"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_option_value() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_option_value() {}

	// $ANTLR start "file_option_value"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:196:1: file_option_value : ( TOKEN | STRING | NUMBER | variable );
	[GrammarRule("file_option_value")]
	private AstParserRuleReturnScope<object, IToken> file_option_value()
	{
		EnterRule_file_option_value();
		EnterRule("file_option_value", 18);
		TraceIn("file_option_value", 18);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN99 = default(IToken);
	    IToken STRING100 = default(IToken);
	    IToken NUMBER101 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> variable102 = default(AstParserRuleReturnScope<object, IToken>);

	    object TOKEN99_tree = default(object);
	    object STRING100_tree = default(object);
	    object NUMBER101_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "file_option_value");
		DebugLocation(196, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:197:2: ( TOKEN | STRING | NUMBER | variable )
			int alt46=4;
			try { DebugEnterDecision(46, decisionCanBacktrack[46]);
			switch (input.LA(1))
			{
			case TOKEN:
				{
				alt46 = 1;
				}
				break;
			case STRING:
				{
				alt46 = 2;
				}
				break;
			case NUMBER:
				{
				alt46 = 3;
				}
				break;
			case VARIABLE:
				{
				alt46 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 46, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(46); }
			switch (alt46)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:197:4: TOKEN
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(197, 4);
				TOKEN99=(IToken)Match(input,TOKEN,Follow._TOKEN_in_file_option_value1040); 
				TOKEN99_tree = (object)adaptor.Create(TOKEN99);
				adaptor.AddChild(root_0, TOKEN99_tree);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:197:12: STRING
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(197, 12);
				STRING100=(IToken)Match(input,STRING,Follow._STRING_in_file_option_value1044); 
				STRING100_tree = (object)adaptor.Create(STRING100);
				adaptor.AddChild(root_0, STRING100_tree);


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:197:21: NUMBER
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(197, 21);
				NUMBER101=(IToken)Match(input,NUMBER,Follow._NUMBER_in_file_option_value1048); 
				NUMBER101_tree = (object)adaptor.Create(NUMBER101);
				adaptor.AddChild(root_0, NUMBER101_tree);


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:197:30: variable
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(197, 30);
				PushFollow(Follow._variable_in_file_option_value1052);
				variable102=variable();
				PopFollow();

				adaptor.AddChild(root_0, variable102.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_option_value", 18);
			LeaveRule("file_option_value", 18);
			LeaveRule_file_option_value();
	    }
	 	DebugLocation(198, 1);
		} finally { DebugExitRule(GrammarFileName, "file_option_value"); }
		return retval;

	}
	// $ANTLR end "file_option_value"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_where_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_where_clause() {}

	// $ANTLR start "where_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:200:1: where_clause : WHERE WS expression -> ^( T_WHERE expression ) ;
	[GrammarRule("where_clause")]
	private AstParserRuleReturnScope<object, IToken> where_clause()
	{
		EnterRule_where_clause();
		EnterRule("where_clause", 19);
		TraceIn("where_clause", 19);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WHERE103 = default(IToken);
	    IToken WS104 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression105 = default(AstParserRuleReturnScope<object, IToken>);

	    object WHERE103_tree = default(object);
	    object WS104_tree = default(object);
	    RewriteRuleITokenStream stream_WHERE=new RewriteRuleITokenStream(adaptor,"token WHERE");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "where_clause");
		DebugLocation(200, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:201:2: ( WHERE WS expression -> ^( T_WHERE expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:201:4: WHERE WS expression
			{
			DebugLocation(201, 4);
			WHERE103=(IToken)Match(input,WHERE,Follow._WHERE_in_where_clause1064);  
			stream_WHERE.Add(WHERE103);

			DebugLocation(201, 10);
			WS104=(IToken)Match(input,WS,Follow._WS_in_where_clause1066);  
			stream_WS.Add(WS104);

			DebugLocation(201, 13);
			PushFollow(Follow._expression_in_where_clause1068);
			expression105=expression();
			PopFollow();

			stream_expression.Add(expression105.Tree);


			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 202:2: -> ^( T_WHERE expression )
			{
				DebugLocation(202, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:202:5: ^( T_WHERE expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(202, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_WHERE, "T_WHERE"), root_1);

				DebugLocation(202, 15);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("where_clause", 19);
			LeaveRule("where_clause", 19);
			LeaveRule_where_clause();
	    }
	 	DebugLocation(203, 1);
		} finally { DebugExitRule(GrammarFileName, "where_clause"); }
		return retval;

	}
	// $ANTLR end "where_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_groupby_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_groupby_clause() {}

	// $ANTLR start "groupby_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:204:1: groupby_clause : GROUP WS BY WS orderby_column_list -> ^( T_GROUPBY orderby_column_list ) ;
	[GrammarRule("groupby_clause")]
	private AstParserRuleReturnScope<object, IToken> groupby_clause()
	{
		EnterRule_groupby_clause();
		EnterRule("groupby_clause", 20);
		TraceIn("groupby_clause", 20);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken GROUP106 = default(IToken);
	    IToken WS107 = default(IToken);
	    IToken BY108 = default(IToken);
	    IToken WS109 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> orderby_column_list110 = default(AstParserRuleReturnScope<object, IToken>);

	    object GROUP106_tree = default(object);
	    object WS107_tree = default(object);
	    object BY108_tree = default(object);
	    object WS109_tree = default(object);
	    RewriteRuleITokenStream stream_GROUP=new RewriteRuleITokenStream(adaptor,"token GROUP");
	    RewriteRuleITokenStream stream_BY=new RewriteRuleITokenStream(adaptor,"token BY");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_orderby_column_list=new RewriteRuleSubtreeStream(adaptor,"rule orderby_column_list");
		try { DebugEnterRule(GrammarFileName, "groupby_clause");
		DebugLocation(204, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:205:2: ( GROUP WS BY WS orderby_column_list -> ^( T_GROUPBY orderby_column_list ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:205:4: GROUP WS BY WS orderby_column_list
			{
			DebugLocation(205, 4);
			GROUP106=(IToken)Match(input,GROUP,Follow._GROUP_in_groupby_clause1087);  
			stream_GROUP.Add(GROUP106);

			DebugLocation(205, 10);
			WS107=(IToken)Match(input,WS,Follow._WS_in_groupby_clause1089);  
			stream_WS.Add(WS107);

			DebugLocation(205, 13);
			BY108=(IToken)Match(input,BY,Follow._BY_in_groupby_clause1091);  
			stream_BY.Add(BY108);

			DebugLocation(205, 16);
			WS109=(IToken)Match(input,WS,Follow._WS_in_groupby_clause1093);  
			stream_WS.Add(WS109);

			DebugLocation(205, 19);
			PushFollow(Follow._orderby_column_list_in_groupby_clause1095);
			orderby_column_list110=orderby_column_list();
			PopFollow();

			stream_orderby_column_list.Add(orderby_column_list110.Tree);


			{
			// AST REWRITE
			// elements: orderby_column_list
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 206:2: -> ^( T_GROUPBY orderby_column_list )
			{
				DebugLocation(206, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:206:5: ^( T_GROUPBY orderby_column_list )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(206, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_GROUPBY, "T_GROUPBY"), root_1);

				DebugLocation(206, 17);
				adaptor.AddChild(root_1, stream_orderby_column_list.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("groupby_clause", 20);
			LeaveRule("groupby_clause", 20);
			LeaveRule_groupby_clause();
	    }
	 	DebugLocation(207, 1);
		} finally { DebugExitRule(GrammarFileName, "groupby_clause"); }
		return retval;

	}
	// $ANTLR end "groupby_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_having_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_having_clause() {}

	// $ANTLR start "having_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:209:1: having_clause : HAVING WS expression -> ^( T_HAVING expression ) ;
	[GrammarRule("having_clause")]
	private AstParserRuleReturnScope<object, IToken> having_clause()
	{
		EnterRule_having_clause();
		EnterRule("having_clause", 21);
		TraceIn("having_clause", 21);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken HAVING111 = default(IToken);
	    IToken WS112 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression113 = default(AstParserRuleReturnScope<object, IToken>);

	    object HAVING111_tree = default(object);
	    object WS112_tree = default(object);
	    RewriteRuleITokenStream stream_HAVING=new RewriteRuleITokenStream(adaptor,"token HAVING");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "having_clause");
		DebugLocation(209, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:210:2: ( HAVING WS expression -> ^( T_HAVING expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:210:4: HAVING WS expression
			{
			DebugLocation(210, 4);
			HAVING111=(IToken)Match(input,HAVING,Follow._HAVING_in_having_clause1116);  
			stream_HAVING.Add(HAVING111);

			DebugLocation(210, 11);
			WS112=(IToken)Match(input,WS,Follow._WS_in_having_clause1118);  
			stream_WS.Add(WS112);

			DebugLocation(210, 14);
			PushFollow(Follow._expression_in_having_clause1120);
			expression113=expression();
			PopFollow();

			stream_expression.Add(expression113.Tree);


			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 211:2: -> ^( T_HAVING expression )
			{
				DebugLocation(211, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:211:5: ^( T_HAVING expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(211, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_HAVING, "T_HAVING"), root_1);

				DebugLocation(211, 16);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("having_clause", 21);
			LeaveRule("having_clause", 21);
			LeaveRule_having_clause();
	    }
	 	DebugLocation(212, 1);
		} finally { DebugExitRule(GrammarFileName, "having_clause"); }
		return retval;

	}
	// $ANTLR end "having_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_clause() {}

	// $ANTLR start "orderby_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:214:1: orderby_clause : ORDER WS BY WS orderby_column_list -> ^( T_ORDERBY orderby_column_list ) ;
	[GrammarRule("orderby_clause")]
	private AstParserRuleReturnScope<object, IToken> orderby_clause()
	{
		EnterRule_orderby_clause();
		EnterRule("orderby_clause", 22);
		TraceIn("orderby_clause", 22);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken ORDER114 = default(IToken);
	    IToken WS115 = default(IToken);
	    IToken BY116 = default(IToken);
	    IToken WS117 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> orderby_column_list118 = default(AstParserRuleReturnScope<object, IToken>);

	    object ORDER114_tree = default(object);
	    object WS115_tree = default(object);
	    object BY116_tree = default(object);
	    object WS117_tree = default(object);
	    RewriteRuleITokenStream stream_BY=new RewriteRuleITokenStream(adaptor,"token BY");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_ORDER=new RewriteRuleITokenStream(adaptor,"token ORDER");
	    RewriteRuleSubtreeStream stream_orderby_column_list=new RewriteRuleSubtreeStream(adaptor,"rule orderby_column_list");
		try { DebugEnterRule(GrammarFileName, "orderby_clause");
		DebugLocation(214, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:215:2: ( ORDER WS BY WS orderby_column_list -> ^( T_ORDERBY orderby_column_list ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:215:4: ORDER WS BY WS orderby_column_list
			{
			DebugLocation(215, 4);
			ORDER114=(IToken)Match(input,ORDER,Follow._ORDER_in_orderby_clause1141);  
			stream_ORDER.Add(ORDER114);

			DebugLocation(215, 10);
			WS115=(IToken)Match(input,WS,Follow._WS_in_orderby_clause1143);  
			stream_WS.Add(WS115);

			DebugLocation(215, 13);
			BY116=(IToken)Match(input,BY,Follow._BY_in_orderby_clause1145);  
			stream_BY.Add(BY116);

			DebugLocation(215, 16);
			WS117=(IToken)Match(input,WS,Follow._WS_in_orderby_clause1147);  
			stream_WS.Add(WS117);

			DebugLocation(215, 19);
			PushFollow(Follow._orderby_column_list_in_orderby_clause1149);
			orderby_column_list118=orderby_column_list();
			PopFollow();

			stream_orderby_column_list.Add(orderby_column_list118.Tree);


			{
			// AST REWRITE
			// elements: orderby_column_list
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 216:2: -> ^( T_ORDERBY orderby_column_list )
			{
				DebugLocation(216, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:216:5: ^( T_ORDERBY orderby_column_list )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(216, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_ORDERBY, "T_ORDERBY"), root_1);

				DebugLocation(216, 17);
				adaptor.AddChild(root_1, stream_orderby_column_list.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_clause", 22);
			LeaveRule("orderby_clause", 22);
			LeaveRule_orderby_clause();
	    }
	 	DebugLocation(217, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_clause"); }
		return retval;

	}
	// $ANTLR end "orderby_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_column_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_column_list() {}

	// $ANTLR start "orderby_column_list"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:219:1: orderby_column_list : orderby_column ( ( WS )? ',' ( WS )? orderby_column )* -> ( orderby_column )* ;
	[GrammarRule("orderby_column_list")]
	private AstParserRuleReturnScope<object, IToken> orderby_column_list()
	{
		EnterRule_orderby_column_list();
		EnterRule("orderby_column_list", 23);
		TraceIn("orderby_column_list", 23);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS120 = default(IToken);
	    IToken char_literal121 = default(IToken);
	    IToken WS122 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> orderby_column119 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> orderby_column123 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS120_tree = default(object);
	    object char_literal121_tree = default(object);
	    object WS122_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_167=new RewriteRuleITokenStream(adaptor,"token 167");
	    RewriteRuleSubtreeStream stream_orderby_column=new RewriteRuleSubtreeStream(adaptor,"rule orderby_column");
		try { DebugEnterRule(GrammarFileName, "orderby_column_list");
		DebugLocation(219, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:220:2: ( orderby_column ( ( WS )? ',' ( WS )? orderby_column )* -> ( orderby_column )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:220:4: orderby_column ( ( WS )? ',' ( WS )? orderby_column )*
			{
			DebugLocation(220, 4);
			PushFollow(Follow._orderby_column_in_orderby_column_list1170);
			orderby_column119=orderby_column();
			PopFollow();

			stream_orderby_column.Add(orderby_column119.Tree);
			DebugLocation(220, 19);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:220:19: ( ( WS )? ',' ( WS )? orderby_column )*
			try { DebugEnterSubRule(49);
			while (true)
			{
				int alt49=2;
				try { DebugEnterDecision(49, decisionCanBacktrack[49]);
				int LA49_0 = input.LA(1);

				if ((LA49_0==WS))
				{
					int LA49_1 = input.LA(2);

					if ((LA49_1==167))
					{
						alt49 = 1;
					}


				}
				else if ((LA49_0==167))
				{
					alt49 = 1;
				}


				} finally { DebugExitDecision(49); }
				switch ( alt49 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:220:20: ( WS )? ',' ( WS )? orderby_column
					{
					DebugLocation(220, 20);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:220:20: ( WS )?
					int alt47=2;
					try { DebugEnterSubRule(47);
					try { DebugEnterDecision(47, decisionCanBacktrack[47]);
					int LA47_0 = input.LA(1);

					if ((LA47_0==WS))
					{
						alt47 = 1;
					}
					} finally { DebugExitDecision(47); }
					switch (alt47)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:220:20: WS
						{
						DebugLocation(220, 20);
						WS120=(IToken)Match(input,WS,Follow._WS_in_orderby_column_list1173);  
						stream_WS.Add(WS120);


						}
						break;

					}
					} finally { DebugExitSubRule(47); }

					DebugLocation(220, 24);
					char_literal121=(IToken)Match(input,167,Follow._167_in_orderby_column_list1176);  
					stream_167.Add(char_literal121);

					DebugLocation(220, 28);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:220:28: ( WS )?
					int alt48=2;
					try { DebugEnterSubRule(48);
					try { DebugEnterDecision(48, decisionCanBacktrack[48]);
					int LA48_0 = input.LA(1);

					if ((LA48_0==WS))
					{
						alt48 = 1;
					}
					} finally { DebugExitDecision(48); }
					switch (alt48)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:220:28: WS
						{
						DebugLocation(220, 28);
						WS122=(IToken)Match(input,WS,Follow._WS_in_orderby_column_list1178);  
						stream_WS.Add(WS122);


						}
						break;

					}
					} finally { DebugExitSubRule(48); }

					DebugLocation(220, 32);
					PushFollow(Follow._orderby_column_in_orderby_column_list1181);
					orderby_column123=orderby_column();
					PopFollow();

					stream_orderby_column.Add(orderby_column123.Tree);

					}
					break;

				default:
					goto loop49;
				}
			}

			loop49:
				;

			} finally { DebugExitSubRule(49); }



			{
			// AST REWRITE
			// elements: orderby_column
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 221:2: -> ( orderby_column )*
			{
				DebugLocation(221, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:221:5: ( orderby_column )*
				while ( stream_orderby_column.HasNext )
				{
					DebugLocation(221, 5);
					adaptor.AddChild(root_0, stream_orderby_column.NextTree());

				}
				stream_orderby_column.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_column_list", 23);
			LeaveRule("orderby_column_list", 23);
			LeaveRule_orderby_column_list();
	    }
	 	DebugLocation(222, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_column_list"); }
		return retval;

	}
	// $ANTLR end "orderby_column_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_column() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_column() {}

	// $ANTLR start "orderby_column"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:224:1: orderby_column : expression ( WS orderby_direction )? -> ^( T_ORDERBY_COLUMN expression ( orderby_direction )? ) ;
	[GrammarRule("orderby_column")]
	private AstParserRuleReturnScope<object, IToken> orderby_column()
	{
		EnterRule_orderby_column();
		EnterRule("orderby_column", 24);
		TraceIn("orderby_column", 24);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS125 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression124 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> orderby_direction126 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS125_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_orderby_direction=new RewriteRuleSubtreeStream(adaptor,"rule orderby_direction");
		try { DebugEnterRule(GrammarFileName, "orderby_column");
		DebugLocation(224, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:225:2: ( expression ( WS orderby_direction )? -> ^( T_ORDERBY_COLUMN expression ( orderby_direction )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:225:4: expression ( WS orderby_direction )?
			{
			DebugLocation(225, 4);
			PushFollow(Follow._expression_in_orderby_column1201);
			expression124=expression();
			PopFollow();

			stream_expression.Add(expression124.Tree);
			DebugLocation(225, 15);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:225:15: ( WS orderby_direction )?
			int alt50=2;
			try { DebugEnterSubRule(50);
			try { DebugEnterDecision(50, decisionCanBacktrack[50]);
			int LA50_0 = input.LA(1);

			if ((LA50_0==WS))
			{
				int LA50_1 = input.LA(2);

				if ((LA50_1==ASC||LA50_1==DESC||LA50_1==ORIG))
				{
					alt50 = 1;
				}
			}
			} finally { DebugExitDecision(50); }
			switch (alt50)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:225:16: WS orderby_direction
				{
				DebugLocation(225, 16);
				WS125=(IToken)Match(input,WS,Follow._WS_in_orderby_column1204);  
				stream_WS.Add(WS125);

				DebugLocation(225, 19);
				PushFollow(Follow._orderby_direction_in_orderby_column1206);
				orderby_direction126=orderby_direction();
				PopFollow();

				stream_orderby_direction.Add(orderby_direction126.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(50); }



			{
			// AST REWRITE
			// elements: expression, orderby_direction
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 225:39: -> ^( T_ORDERBY_COLUMN expression ( orderby_direction )? )
			{
				DebugLocation(225, 42);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:225:42: ^( T_ORDERBY_COLUMN expression ( orderby_direction )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(225, 44);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_ORDERBY_COLUMN, "T_ORDERBY_COLUMN"), root_1);

				DebugLocation(225, 61);
				adaptor.AddChild(root_1, stream_expression.NextTree());
				DebugLocation(225, 72);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:225:72: ( orderby_direction )?
				if (stream_orderby_direction.HasNext)
				{
					DebugLocation(225, 72);
					adaptor.AddChild(root_1, stream_orderby_direction.NextTree());

				}
				stream_orderby_direction.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_column", 24);
			LeaveRule("orderby_column", 24);
			LeaveRule_orderby_column();
	    }
	 	DebugLocation(226, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_column"); }
		return retval;

	}
	// $ANTLR end "orderby_column"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_direction() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_direction() {}

	// $ANTLR start "orderby_direction"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:228:1: orderby_direction : ( ASC -> T_ORDERBY_ASC | DESC -> T_ORDERBY_DESC | ORIG -> T_ORDERBY_ORIG );
	[GrammarRule("orderby_direction")]
	private AstParserRuleReturnScope<object, IToken> orderby_direction()
	{
		EnterRule_orderby_direction();
		EnterRule("orderby_direction", 25);
		TraceIn("orderby_direction", 25);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken ASC127 = default(IToken);
	    IToken DESC128 = default(IToken);
	    IToken ORIG129 = default(IToken);

	    object ASC127_tree = default(object);
	    object DESC128_tree = default(object);
	    object ORIG129_tree = default(object);
	    RewriteRuleITokenStream stream_DESC=new RewriteRuleITokenStream(adaptor,"token DESC");
	    RewriteRuleITokenStream stream_ASC=new RewriteRuleITokenStream(adaptor,"token ASC");
	    RewriteRuleITokenStream stream_ORIG=new RewriteRuleITokenStream(adaptor,"token ORIG");

		try { DebugEnterRule(GrammarFileName, "orderby_direction");
		DebugLocation(228, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:229:2: ( ASC -> T_ORDERBY_ASC | DESC -> T_ORDERBY_DESC | ORIG -> T_ORDERBY_ORIG )
			int alt51=3;
			try { DebugEnterDecision(51, decisionCanBacktrack[51]);
			switch (input.LA(1))
			{
			case ASC:
				{
				alt51 = 1;
				}
				break;
			case DESC:
				{
				alt51 = 2;
				}
				break;
			case ORIG:
				{
				alt51 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 51, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(51); }
			switch (alt51)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:229:4: ASC
				{
				DebugLocation(229, 4);
				ASC127=(IToken)Match(input,ASC,Follow._ASC_in_orderby_direction1231);  
				stream_ASC.Add(ASC127);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 229:8: -> T_ORDERBY_ASC
				{
					DebugLocation(229, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_ORDERBY_ASC, "T_ORDERBY_ASC"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:230:4: DESC
				{
				DebugLocation(230, 4);
				DESC128=(IToken)Match(input,DESC,Follow._DESC_in_orderby_direction1240);  
				stream_DESC.Add(DESC128);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 230:9: -> T_ORDERBY_DESC
				{
					DebugLocation(230, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_ORDERBY_DESC, "T_ORDERBY_DESC"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:231:4: ORIG
				{
				DebugLocation(231, 4);
				ORIG129=(IToken)Match(input,ORIG,Follow._ORIG_in_orderby_direction1249);  
				stream_ORIG.Add(ORIG129);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 231:9: -> T_ORDERBY_ORIG
				{
					DebugLocation(231, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_ORDERBY_ORIG, "T_ORDERBY_ORIG"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_direction", 25);
			LeaveRule("orderby_direction", 25);
			LeaveRule_orderby_direction();
	    }
	 	DebugLocation(232, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_direction"); }
		return retval;

	}
	// $ANTLR end "orderby_direction"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_use_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_use_command() {}

	// $ANTLR start "use_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:237:1: use_command : USE WS file -> ^( T_USE file ) ;
	[GrammarRule("use_command")]
	private AstParserRuleReturnScope<object, IToken> use_command()
	{
		EnterRule_use_command();
		EnterRule("use_command", 26);
		TraceIn("use_command", 26);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken USE130 = default(IToken);
	    IToken WS131 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file132 = default(AstParserRuleReturnScope<object, IToken>);

	    object USE130_tree = default(object);
	    object WS131_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_USE=new RewriteRuleITokenStream(adaptor,"token USE");
	    RewriteRuleSubtreeStream stream_file=new RewriteRuleSubtreeStream(adaptor,"rule file");
		try { DebugEnterRule(GrammarFileName, "use_command");
		DebugLocation(237, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:238:2: ( USE WS file -> ^( T_USE file ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:238:4: USE WS file
			{
			DebugLocation(238, 4);
			USE130=(IToken)Match(input,USE,Follow._USE_in_use_command1267);  
			stream_USE.Add(USE130);

			DebugLocation(238, 8);
			WS131=(IToken)Match(input,WS,Follow._WS_in_use_command1269);  
			stream_WS.Add(WS131);

			DebugLocation(238, 11);
			PushFollow(Follow._file_in_use_command1271);
			file132=file();
			PopFollow();

			stream_file.Add(file132.Tree);


			{
			// AST REWRITE
			// elements: file
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 238:16: -> ^( T_USE file )
			{
				DebugLocation(238, 19);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:238:19: ^( T_USE file )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(238, 21);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_USE, "T_USE"), root_1);

				DebugLocation(238, 27);
				adaptor.AddChild(root_1, stream_file.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("use_command", 26);
			LeaveRule("use_command", 26);
			LeaveRule_use_command();
	    }
	 	DebugLocation(239, 1);
		} finally { DebugExitRule(GrammarFileName, "use_command"); }
		return retval;

	}
	// $ANTLR end "use_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_declare_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_declare_command() {}

	// $ANTLR start "declare_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:244:1: declare_command : DECLARE WS declaration_list -> declaration_list ;
	[GrammarRule("declare_command")]
	private AstParserRuleReturnScope<object, IToken> declare_command()
	{
		EnterRule_declare_command();
		EnterRule("declare_command", 27);
		TraceIn("declare_command", 27);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken DECLARE133 = default(IToken);
	    IToken WS134 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> declaration_list135 = default(AstParserRuleReturnScope<object, IToken>);

	    object DECLARE133_tree = default(object);
	    object WS134_tree = default(object);
	    RewriteRuleITokenStream stream_DECLARE=new RewriteRuleITokenStream(adaptor,"token DECLARE");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_declaration_list=new RewriteRuleSubtreeStream(adaptor,"rule declaration_list");
		try { DebugEnterRule(GrammarFileName, "declare_command");
		DebugLocation(244, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:245:2: ( DECLARE WS declaration_list -> declaration_list )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:245:4: DECLARE WS declaration_list
			{
			DebugLocation(245, 4);
			DECLARE133=(IToken)Match(input,DECLARE,Follow._DECLARE_in_declare_command1293);  
			stream_DECLARE.Add(DECLARE133);

			DebugLocation(245, 12);
			WS134=(IToken)Match(input,WS,Follow._WS_in_declare_command1295);  
			stream_WS.Add(WS134);

			DebugLocation(245, 15);
			PushFollow(Follow._declaration_list_in_declare_command1297);
			declaration_list135=declaration_list();
			PopFollow();

			stream_declaration_list.Add(declaration_list135.Tree);


			{
			// AST REWRITE
			// elements: declaration_list
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 245:32: -> declaration_list
			{
				DebugLocation(245, 35);
				adaptor.AddChild(root_0, stream_declaration_list.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declare_command", 27);
			LeaveRule("declare_command", 27);
			LeaveRule_declare_command();
	    }
	 	DebugLocation(246, 1);
		} finally { DebugExitRule(GrammarFileName, "declare_command"); }
		return retval;

	}
	// $ANTLR end "declare_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_declaration_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_declaration_list() {}

	// $ANTLR start "declaration_list"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:248:1: declaration_list : declaration ( ( WS )? ',' ( WS )? declaration )* -> ^( T_DECLARE ( declaration )+ ) ;
	[GrammarRule("declaration_list")]
	private AstParserRuleReturnScope<object, IToken> declaration_list()
	{
		EnterRule_declaration_list();
		EnterRule("declaration_list", 28);
		TraceIn("declaration_list", 28);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS137 = default(IToken);
	    IToken char_literal138 = default(IToken);
	    IToken WS139 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> declaration136 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> declaration140 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS137_tree = default(object);
	    object char_literal138_tree = default(object);
	    object WS139_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_167=new RewriteRuleITokenStream(adaptor,"token 167");
	    RewriteRuleSubtreeStream stream_declaration=new RewriteRuleSubtreeStream(adaptor,"rule declaration");
		try { DebugEnterRule(GrammarFileName, "declaration_list");
		DebugLocation(248, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:249:2: ( declaration ( ( WS )? ',' ( WS )? declaration )* -> ^( T_DECLARE ( declaration )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:249:4: declaration ( ( WS )? ',' ( WS )? declaration )*
			{
			DebugLocation(249, 4);
			PushFollow(Follow._declaration_in_declaration_list1314);
			declaration136=declaration();
			PopFollow();

			stream_declaration.Add(declaration136.Tree);
			DebugLocation(249, 16);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:249:16: ( ( WS )? ',' ( WS )? declaration )*
			try { DebugEnterSubRule(54);
			while (true)
			{
				int alt54=2;
				try { DebugEnterDecision(54, decisionCanBacktrack[54]);
				int LA54_0 = input.LA(1);

				if ((LA54_0==WS))
				{
					int LA54_1 = input.LA(2);

					if ((LA54_1==167))
					{
						alt54 = 1;
					}


				}
				else if ((LA54_0==167))
				{
					alt54 = 1;
				}


				} finally { DebugExitDecision(54); }
				switch ( alt54 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:249:17: ( WS )? ',' ( WS )? declaration
					{
					DebugLocation(249, 17);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:249:17: ( WS )?
					int alt52=2;
					try { DebugEnterSubRule(52);
					try { DebugEnterDecision(52, decisionCanBacktrack[52]);
					int LA52_0 = input.LA(1);

					if ((LA52_0==WS))
					{
						alt52 = 1;
					}
					} finally { DebugExitDecision(52); }
					switch (alt52)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:249:17: WS
						{
						DebugLocation(249, 17);
						WS137=(IToken)Match(input,WS,Follow._WS_in_declaration_list1317);  
						stream_WS.Add(WS137);


						}
						break;

					}
					} finally { DebugExitSubRule(52); }

					DebugLocation(249, 21);
					char_literal138=(IToken)Match(input,167,Follow._167_in_declaration_list1320);  
					stream_167.Add(char_literal138);

					DebugLocation(249, 25);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:249:25: ( WS )?
					int alt53=2;
					try { DebugEnterSubRule(53);
					try { DebugEnterDecision(53, decisionCanBacktrack[53]);
					int LA53_0 = input.LA(1);

					if ((LA53_0==WS))
					{
						alt53 = 1;
					}
					} finally { DebugExitDecision(53); }
					switch (alt53)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:249:25: WS
						{
						DebugLocation(249, 25);
						WS139=(IToken)Match(input,WS,Follow._WS_in_declaration_list1322);  
						stream_WS.Add(WS139);


						}
						break;

					}
					} finally { DebugExitSubRule(53); }

					DebugLocation(249, 29);
					PushFollow(Follow._declaration_in_declaration_list1325);
					declaration140=declaration();
					PopFollow();

					stream_declaration.Add(declaration140.Tree);

					}
					break;

				default:
					goto loop54;
				}
			}

			loop54:
				;

			} finally { DebugExitSubRule(54); }



			{
			// AST REWRITE
			// elements: declaration
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 250:2: -> ^( T_DECLARE ( declaration )+ )
			{
				DebugLocation(250, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:250:5: ^( T_DECLARE ( declaration )+ )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(250, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_DECLARE, "T_DECLARE"), root_1);

				DebugLocation(250, 17);
				if (!(stream_declaration.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_declaration.HasNext )
				{
					DebugLocation(250, 17);
					adaptor.AddChild(root_1, stream_declaration.NextTree());

				}
				stream_declaration.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declaration_list", 28);
			LeaveRule("declaration_list", 28);
			LeaveRule_declaration_list();
	    }
	 	DebugLocation(251, 1);
		} finally { DebugExitRule(GrammarFileName, "declaration_list"); }
		return retval;

	}
	// $ANTLR end "declaration_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_declaration() {}

	// $ANTLR start "declaration"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:253:1: declaration : variable WS ( AS WS )? datatype -> ^( T_DECLARATION variable datatype ) ;
	[GrammarRule("declaration")]
	private AstParserRuleReturnScope<object, IToken> declaration()
	{
		EnterRule_declaration();
		EnterRule("declaration", 29);
		TraceIn("declaration", 29);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS142 = default(IToken);
	    IToken AS143 = default(IToken);
	    IToken WS144 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> variable141 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> datatype145 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS142_tree = default(object);
	    object AS143_tree = default(object);
	    object WS144_tree = default(object);
	    RewriteRuleITokenStream stream_AS=new RewriteRuleITokenStream(adaptor,"token AS");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_datatype=new RewriteRuleSubtreeStream(adaptor,"rule datatype");
	    RewriteRuleSubtreeStream stream_variable=new RewriteRuleSubtreeStream(adaptor,"rule variable");
		try { DebugEnterRule(GrammarFileName, "declaration");
		DebugLocation(253, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:254:2: ( variable WS ( AS WS )? datatype -> ^( T_DECLARATION variable datatype ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:254:4: variable WS ( AS WS )? datatype
			{
			DebugLocation(254, 4);
			PushFollow(Follow._variable_in_declaration1349);
			variable141=variable();
			PopFollow();

			stream_variable.Add(variable141.Tree);
			DebugLocation(254, 13);
			WS142=(IToken)Match(input,WS,Follow._WS_in_declaration1351);  
			stream_WS.Add(WS142);

			DebugLocation(254, 16);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:254:16: ( AS WS )?
			int alt55=2;
			try { DebugEnterSubRule(55);
			try { DebugEnterDecision(55, decisionCanBacktrack[55]);
			int LA55_0 = input.LA(1);

			if ((LA55_0==AS))
			{
				alt55 = 1;
			}
			} finally { DebugExitDecision(55); }
			switch (alt55)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:254:17: AS WS
				{
				DebugLocation(254, 17);
				AS143=(IToken)Match(input,AS,Follow._AS_in_declaration1354);  
				stream_AS.Add(AS143);

				DebugLocation(254, 20);
				WS144=(IToken)Match(input,WS,Follow._WS_in_declaration1356);  
				stream_WS.Add(WS144);


				}
				break;

			}
			} finally { DebugExitSubRule(55); }

			DebugLocation(254, 25);
			PushFollow(Follow._datatype_in_declaration1360);
			datatype145=datatype();
			PopFollow();

			stream_datatype.Add(datatype145.Tree);


			{
			// AST REWRITE
			// elements: datatype, variable
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 255:2: -> ^( T_DECLARATION variable datatype )
			{
				DebugLocation(255, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:255:5: ^( T_DECLARATION variable datatype )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(255, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_DECLARATION, "T_DECLARATION"), root_1);

				DebugLocation(255, 21);
				adaptor.AddChild(root_1, stream_variable.NextTree());
				DebugLocation(255, 30);
				adaptor.AddChild(root_1, stream_datatype.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declaration", 29);
			LeaveRule("declaration", 29);
			LeaveRule_declaration();
	    }
	 	DebugLocation(256, 1);
		} finally { DebugExitRule(GrammarFileName, "declaration"); }
		return retval;

	}
	// $ANTLR end "declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_create_view_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_create_view_command() {}

	// $ANTLR start "create_view_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:261:1: create_view_command : CREATE WS VIEW WS view_name ( ( WS )? '(' declaration_list ')' )? WS AS WS select_command -> ^( T_CREATE_VIEW view_name ( declaration_list )? select_command ) ;
	[GrammarRule("create_view_command")]
	private AstParserRuleReturnScope<object, IToken> create_view_command()
	{
		EnterRule_create_view_command();
		EnterRule("create_view_command", 30);
		TraceIn("create_view_command", 30);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken CREATE146 = default(IToken);
	    IToken WS147 = default(IToken);
	    IToken VIEW148 = default(IToken);
	    IToken WS149 = default(IToken);
	    IToken WS151 = default(IToken);
	    IToken char_literal152 = default(IToken);
	    IToken char_literal154 = default(IToken);
	    IToken WS155 = default(IToken);
	    IToken AS156 = default(IToken);
	    IToken WS157 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> view_name150 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> declaration_list153 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> select_command158 = default(AstParserRuleReturnScope<object, IToken>);

	    object CREATE146_tree = default(object);
	    object WS147_tree = default(object);
	    object VIEW148_tree = default(object);
	    object WS149_tree = default(object);
	    object WS151_tree = default(object);
	    object char_literal152_tree = default(object);
	    object char_literal154_tree = default(object);
	    object WS155_tree = default(object);
	    object AS156_tree = default(object);
	    object WS157_tree = default(object);
	    RewriteRuleITokenStream stream_AS=new RewriteRuleITokenStream(adaptor,"token AS");
	    RewriteRuleITokenStream stream_163=new RewriteRuleITokenStream(adaptor,"token 163");
	    RewriteRuleITokenStream stream_164=new RewriteRuleITokenStream(adaptor,"token 164");
	    RewriteRuleITokenStream stream_CREATE=new RewriteRuleITokenStream(adaptor,"token CREATE");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_VIEW=new RewriteRuleITokenStream(adaptor,"token VIEW");
	    RewriteRuleSubtreeStream stream_view_name=new RewriteRuleSubtreeStream(adaptor,"rule view_name");
	    RewriteRuleSubtreeStream stream_select_command=new RewriteRuleSubtreeStream(adaptor,"rule select_command");
	    RewriteRuleSubtreeStream stream_declaration_list=new RewriteRuleSubtreeStream(adaptor,"rule declaration_list");
		try { DebugEnterRule(GrammarFileName, "create_view_command");
		DebugLocation(261, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:262:2: ( CREATE WS VIEW WS view_name ( ( WS )? '(' declaration_list ')' )? WS AS WS select_command -> ^( T_CREATE_VIEW view_name ( declaration_list )? select_command ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:262:4: CREATE WS VIEW WS view_name ( ( WS )? '(' declaration_list ')' )? WS AS WS select_command
			{
			DebugLocation(262, 4);
			CREATE146=(IToken)Match(input,CREATE,Follow._CREATE_in_create_view_command1385);  
			stream_CREATE.Add(CREATE146);

			DebugLocation(262, 11);
			WS147=(IToken)Match(input,WS,Follow._WS_in_create_view_command1387);  
			stream_WS.Add(WS147);

			DebugLocation(262, 14);
			VIEW148=(IToken)Match(input,VIEW,Follow._VIEW_in_create_view_command1389);  
			stream_VIEW.Add(VIEW148);

			DebugLocation(262, 19);
			WS149=(IToken)Match(input,WS,Follow._WS_in_create_view_command1391);  
			stream_WS.Add(WS149);

			DebugLocation(262, 22);
			PushFollow(Follow._view_name_in_create_view_command1393);
			view_name150=view_name();
			PopFollow();

			stream_view_name.Add(view_name150.Tree);
			DebugLocation(262, 32);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:262:32: ( ( WS )? '(' declaration_list ')' )?
			int alt57=2;
			try { DebugEnterSubRule(57);
			try { DebugEnterDecision(57, decisionCanBacktrack[57]);
			int LA57_0 = input.LA(1);

			if ((LA57_0==WS))
			{
				int LA57_1 = input.LA(2);

				if ((LA57_1==163))
				{
					alt57 = 1;
				}
			}
			else if ((LA57_0==163))
			{
				alt57 = 1;
			}
			} finally { DebugExitDecision(57); }
			switch (alt57)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:262:33: ( WS )? '(' declaration_list ')'
				{
				DebugLocation(262, 33);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:262:33: ( WS )?
				int alt56=2;
				try { DebugEnterSubRule(56);
				try { DebugEnterDecision(56, decisionCanBacktrack[56]);
				int LA56_0 = input.LA(1);

				if ((LA56_0==WS))
				{
					alt56 = 1;
				}
				} finally { DebugExitDecision(56); }
				switch (alt56)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:262:33: WS
					{
					DebugLocation(262, 33);
					WS151=(IToken)Match(input,WS,Follow._WS_in_create_view_command1396);  
					stream_WS.Add(WS151);


					}
					break;

				}
				} finally { DebugExitSubRule(56); }

				DebugLocation(262, 37);
				char_literal152=(IToken)Match(input,163,Follow._163_in_create_view_command1399);  
				stream_163.Add(char_literal152);

				DebugLocation(262, 41);
				PushFollow(Follow._declaration_list_in_create_view_command1401);
				declaration_list153=declaration_list();
				PopFollow();

				stream_declaration_list.Add(declaration_list153.Tree);
				DebugLocation(262, 58);
				char_literal154=(IToken)Match(input,164,Follow._164_in_create_view_command1403);  
				stream_164.Add(char_literal154);


				}
				break;

			}
			} finally { DebugExitSubRule(57); }

			DebugLocation(262, 64);
			WS155=(IToken)Match(input,WS,Follow._WS_in_create_view_command1407);  
			stream_WS.Add(WS155);

			DebugLocation(262, 67);
			AS156=(IToken)Match(input,AS,Follow._AS_in_create_view_command1409);  
			stream_AS.Add(AS156);

			DebugLocation(262, 70);
			WS157=(IToken)Match(input,WS,Follow._WS_in_create_view_command1411);  
			stream_WS.Add(WS157);

			DebugLocation(262, 73);
			PushFollow(Follow._select_command_in_create_view_command1413);
			select_command158=select_command();
			PopFollow();

			stream_select_command.Add(select_command158.Tree);


			{
			// AST REWRITE
			// elements: view_name, declaration_list, select_command
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 263:2: -> ^( T_CREATE_VIEW view_name ( declaration_list )? select_command )
			{
				DebugLocation(263, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:263:5: ^( T_CREATE_VIEW view_name ( declaration_list )? select_command )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(263, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CREATE_VIEW, "T_CREATE_VIEW"), root_1);

				DebugLocation(263, 21);
				adaptor.AddChild(root_1, stream_view_name.NextTree());
				DebugLocation(263, 31);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:263:31: ( declaration_list )?
				if (stream_declaration_list.HasNext)
				{
					DebugLocation(263, 31);
					adaptor.AddChild(root_1, stream_declaration_list.NextTree());

				}
				stream_declaration_list.Reset();
				DebugLocation(263, 49);
				adaptor.AddChild(root_1, stream_select_command.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("create_view_command", 30);
			LeaveRule("create_view_command", 30);
			LeaveRule_create_view_command();
	    }
	 	DebugLocation(264, 1);
		} finally { DebugExitRule(GrammarFileName, "create_view_command"); }
		return retval;

	}
	// $ANTLR end "create_view_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_drop_view_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_drop_view_command() {}

	// $ANTLR start "drop_view_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:266:1: drop_view_command : DROP WS VIEW WS view_name -> ^( T_DROP_VIEW view_name ) ;
	[GrammarRule("drop_view_command")]
	private AstParserRuleReturnScope<object, IToken> drop_view_command()
	{
		EnterRule_drop_view_command();
		EnterRule("drop_view_command", 31);
		TraceIn("drop_view_command", 31);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken DROP159 = default(IToken);
	    IToken WS160 = default(IToken);
	    IToken VIEW161 = default(IToken);
	    IToken WS162 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> view_name163 = default(AstParserRuleReturnScope<object, IToken>);

	    object DROP159_tree = default(object);
	    object WS160_tree = default(object);
	    object VIEW161_tree = default(object);
	    object WS162_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_VIEW=new RewriteRuleITokenStream(adaptor,"token VIEW");
	    RewriteRuleITokenStream stream_DROP=new RewriteRuleITokenStream(adaptor,"token DROP");
	    RewriteRuleSubtreeStream stream_view_name=new RewriteRuleSubtreeStream(adaptor,"rule view_name");
		try { DebugEnterRule(GrammarFileName, "drop_view_command");
		DebugLocation(266, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:267:2: ( DROP WS VIEW WS view_name -> ^( T_DROP_VIEW view_name ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:267:4: DROP WS VIEW WS view_name
			{
			DebugLocation(267, 4);
			DROP159=(IToken)Match(input,DROP,Follow._DROP_in_drop_view_command1439);  
			stream_DROP.Add(DROP159);

			DebugLocation(267, 9);
			WS160=(IToken)Match(input,WS,Follow._WS_in_drop_view_command1441);  
			stream_WS.Add(WS160);

			DebugLocation(267, 12);
			VIEW161=(IToken)Match(input,VIEW,Follow._VIEW_in_drop_view_command1443);  
			stream_VIEW.Add(VIEW161);

			DebugLocation(267, 17);
			WS162=(IToken)Match(input,WS,Follow._WS_in_drop_view_command1445);  
			stream_WS.Add(WS162);

			DebugLocation(267, 20);
			PushFollow(Follow._view_name_in_drop_view_command1447);
			view_name163=view_name();
			PopFollow();

			stream_view_name.Add(view_name163.Tree);


			{
			// AST REWRITE
			// elements: view_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 268:2: -> ^( T_DROP_VIEW view_name )
			{
				DebugLocation(268, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:268:5: ^( T_DROP_VIEW view_name )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(268, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_DROP_VIEW, "T_DROP_VIEW"), root_1);

				DebugLocation(268, 19);
				adaptor.AddChild(root_1, stream_view_name.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("drop_view_command", 31);
			LeaveRule("drop_view_command", 31);
			LeaveRule_drop_view_command();
	    }
	 	DebugLocation(269, 1);
		} finally { DebugExitRule(GrammarFileName, "drop_view_command"); }
		return retval;

	}
	// $ANTLR end "drop_view_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_view_name() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_view_name() {}

	// $ANTLR start "view_name"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:271:1: view_name : TOKEN -> ^( T_VIEW_NAME TOKEN ) ;
	[GrammarRule("view_name")]
	private AstParserRuleReturnScope<object, IToken> view_name()
	{
		EnterRule_view_name();
		EnterRule("view_name", 32);
		TraceIn("view_name", 32);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN164 = default(IToken);

	    object TOKEN164_tree = default(object);
	    RewriteRuleITokenStream stream_TOKEN=new RewriteRuleITokenStream(adaptor,"token TOKEN");

		try { DebugEnterRule(GrammarFileName, "view_name");
		DebugLocation(271, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:272:2: ( TOKEN -> ^( T_VIEW_NAME TOKEN ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:272:4: TOKEN
			{
			DebugLocation(272, 4);
			TOKEN164=(IToken)Match(input,TOKEN,Follow._TOKEN_in_view_name1467);  
			stream_TOKEN.Add(TOKEN164);



			{
			// AST REWRITE
			// elements: TOKEN
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 272:10: -> ^( T_VIEW_NAME TOKEN )
			{
				DebugLocation(272, 13);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:272:13: ^( T_VIEW_NAME TOKEN )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(272, 15);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_VIEW_NAME, "T_VIEW_NAME"), root_1);

				DebugLocation(272, 27);
				adaptor.AddChild(root_1, stream_TOKEN.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("view_name", 32);
			LeaveRule("view_name", 32);
			LeaveRule_view_name();
	    }
	 	DebugLocation(273, 1);
		} finally { DebugExitRule(GrammarFileName, "view_name"); }
		return retval;

	}
	// $ANTLR end "view_name"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_drop_table_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_drop_table_command() {}

	// $ANTLR start "drop_table_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:277:1: drop_table_command : DROP WS TABLE WS file -> ^( T_DROP_TABLE file ) ;
	[GrammarRule("drop_table_command")]
	private AstParserRuleReturnScope<object, IToken> drop_table_command()
	{
		EnterRule_drop_table_command();
		EnterRule("drop_table_command", 33);
		TraceIn("drop_table_command", 33);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken DROP165 = default(IToken);
	    IToken WS166 = default(IToken);
	    IToken TABLE167 = default(IToken);
	    IToken WS168 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file169 = default(AstParserRuleReturnScope<object, IToken>);

	    object DROP165_tree = default(object);
	    object WS166_tree = default(object);
	    object TABLE167_tree = default(object);
	    object WS168_tree = default(object);
	    RewriteRuleITokenStream stream_TABLE=new RewriteRuleITokenStream(adaptor,"token TABLE");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_DROP=new RewriteRuleITokenStream(adaptor,"token DROP");
	    RewriteRuleSubtreeStream stream_file=new RewriteRuleSubtreeStream(adaptor,"rule file");
		try { DebugEnterRule(GrammarFileName, "drop_table_command");
		DebugLocation(277, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:278:2: ( DROP WS TABLE WS file -> ^( T_DROP_TABLE file ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:278:4: DROP WS TABLE WS file
			{
			DebugLocation(278, 4);
			DROP165=(IToken)Match(input,DROP,Follow._DROP_in_drop_table_command1489);  
			stream_DROP.Add(DROP165);

			DebugLocation(278, 9);
			WS166=(IToken)Match(input,WS,Follow._WS_in_drop_table_command1491);  
			stream_WS.Add(WS166);

			DebugLocation(278, 12);
			TABLE167=(IToken)Match(input,TABLE,Follow._TABLE_in_drop_table_command1493);  
			stream_TABLE.Add(TABLE167);

			DebugLocation(278, 18);
			WS168=(IToken)Match(input,WS,Follow._WS_in_drop_table_command1495);  
			stream_WS.Add(WS168);

			DebugLocation(278, 21);
			PushFollow(Follow._file_in_drop_table_command1497);
			file169=file();
			PopFollow();

			stream_file.Add(file169.Tree);


			{
			// AST REWRITE
			// elements: file
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 279:2: -> ^( T_DROP_TABLE file )
			{
				DebugLocation(279, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:279:5: ^( T_DROP_TABLE file )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(279, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_DROP_TABLE, "T_DROP_TABLE"), root_1);

				DebugLocation(279, 20);
				adaptor.AddChild(root_1, stream_file.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("drop_table_command", 33);
			LeaveRule("drop_table_command", 33);
			LeaveRule_drop_table_command();
	    }
	 	DebugLocation(280, 1);
		} finally { DebugExitRule(GrammarFileName, "drop_table_command"); }
		return retval;

	}
	// $ANTLR end "drop_table_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_set_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_set_command() {}

	// $ANTLR start "set_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:286:1: set_command : SET WS variable ( WS )? '=' ( WS )? expression -> ^( T_SET_VARIABLE variable expression ) ;
	[GrammarRule("set_command")]
	private AstParserRuleReturnScope<object, IToken> set_command()
	{
		EnterRule_set_command();
		EnterRule("set_command", 34);
		TraceIn("set_command", 34);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken SET170 = default(IToken);
	    IToken WS171 = default(IToken);
	    IToken WS173 = default(IToken);
	    IToken char_literal174 = default(IToken);
	    IToken WS175 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> variable172 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression176 = default(AstParserRuleReturnScope<object, IToken>);

	    object SET170_tree = default(object);
	    object WS171_tree = default(object);
	    object WS173_tree = default(object);
	    object char_literal174_tree = default(object);
	    object WS175_tree = default(object);
	    RewriteRuleITokenStream stream_SET=new RewriteRuleITokenStream(adaptor,"token SET");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_175=new RewriteRuleITokenStream(adaptor,"token 175");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_variable=new RewriteRuleSubtreeStream(adaptor,"rule variable");
		try { DebugEnterRule(GrammarFileName, "set_command");
		DebugLocation(286, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:287:2: ( SET WS variable ( WS )? '=' ( WS )? expression -> ^( T_SET_VARIABLE variable expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:287:4: SET WS variable ( WS )? '=' ( WS )? expression
			{
			DebugLocation(287, 4);
			SET170=(IToken)Match(input,SET,Follow._SET_in_set_command1521);  
			stream_SET.Add(SET170);

			DebugLocation(287, 8);
			WS171=(IToken)Match(input,WS,Follow._WS_in_set_command1523);  
			stream_WS.Add(WS171);

			DebugLocation(287, 11);
			PushFollow(Follow._variable_in_set_command1525);
			variable172=variable();
			PopFollow();

			stream_variable.Add(variable172.Tree);
			DebugLocation(287, 20);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:287:20: ( WS )?
			int alt58=2;
			try { DebugEnterSubRule(58);
			try { DebugEnterDecision(58, decisionCanBacktrack[58]);
			int LA58_0 = input.LA(1);

			if ((LA58_0==WS))
			{
				alt58 = 1;
			}
			} finally { DebugExitDecision(58); }
			switch (alt58)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:287:20: WS
				{
				DebugLocation(287, 20);
				WS173=(IToken)Match(input,WS,Follow._WS_in_set_command1527);  
				stream_WS.Add(WS173);


				}
				break;

			}
			} finally { DebugExitSubRule(58); }

			DebugLocation(287, 24);
			char_literal174=(IToken)Match(input,175,Follow._175_in_set_command1530);  
			stream_175.Add(char_literal174);

			DebugLocation(287, 28);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:287:28: ( WS )?
			int alt59=2;
			try { DebugEnterSubRule(59);
			try { DebugEnterDecision(59, decisionCanBacktrack[59]);
			int LA59_0 = input.LA(1);

			if ((LA59_0==WS))
			{
				alt59 = 1;
			}
			} finally { DebugExitDecision(59); }
			switch (alt59)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:287:28: WS
				{
				DebugLocation(287, 28);
				WS175=(IToken)Match(input,WS,Follow._WS_in_set_command1532);  
				stream_WS.Add(WS175);


				}
				break;

			}
			} finally { DebugExitSubRule(59); }

			DebugLocation(287, 32);
			PushFollow(Follow._expression_in_set_command1535);
			expression176=expression();
			PopFollow();

			stream_expression.Add(expression176.Tree);


			{
			// AST REWRITE
			// elements: variable, expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 288:2: -> ^( T_SET_VARIABLE variable expression )
			{
				DebugLocation(288, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:288:5: ^( T_SET_VARIABLE variable expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(288, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SET_VARIABLE, "T_SET_VARIABLE"), root_1);

				DebugLocation(288, 22);
				adaptor.AddChild(root_1, stream_variable.NextTree());
				DebugLocation(288, 31);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("set_command", 34);
			LeaveRule("set_command", 34);
			LeaveRule_set_command();
	    }
	 	DebugLocation(289, 1);
		} finally { DebugExitRule(GrammarFileName, "set_command"); }
		return retval;

	}
	// $ANTLR end "set_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_list() {}

	// $ANTLR start "expression_list"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:294:1: expression_list : expression ( ( WS )? ',' ( WS )? expression )* -> ^( T_EXPRESSIONLIST ( expression )+ ) ;
	[GrammarRule("expression_list")]
	private AstParserRuleReturnScope<object, IToken> expression_list()
	{
		EnterRule_expression_list();
		EnterRule("expression_list", 35);
		TraceIn("expression_list", 35);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS178 = default(IToken);
	    IToken char_literal179 = default(IToken);
	    IToken WS180 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression177 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression181 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS178_tree = default(object);
	    object char_literal179_tree = default(object);
	    object WS180_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_167=new RewriteRuleITokenStream(adaptor,"token 167");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "expression_list");
		DebugLocation(294, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:295:2: ( expression ( ( WS )? ',' ( WS )? expression )* -> ^( T_EXPRESSIONLIST ( expression )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:295:4: expression ( ( WS )? ',' ( WS )? expression )*
			{
			DebugLocation(295, 4);
			PushFollow(Follow._expression_in_expression_list1560);
			expression177=expression();
			PopFollow();

			stream_expression.Add(expression177.Tree);
			DebugLocation(295, 15);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:295:15: ( ( WS )? ',' ( WS )? expression )*
			try { DebugEnterSubRule(62);
			while (true)
			{
				int alt62=2;
				try { DebugEnterDecision(62, decisionCanBacktrack[62]);
				int LA62_0 = input.LA(1);

				if ((LA62_0==WS))
				{
					int LA62_2 = input.LA(2);

					if ((LA62_2==167))
					{
						alt62 = 1;
					}


				}
				else if ((LA62_0==167))
				{
					alt62 = 1;
				}


				} finally { DebugExitDecision(62); }
				switch ( alt62 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:295:16: ( WS )? ',' ( WS )? expression
					{
					DebugLocation(295, 16);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:295:16: ( WS )?
					int alt60=2;
					try { DebugEnterSubRule(60);
					try { DebugEnterDecision(60, decisionCanBacktrack[60]);
					int LA60_0 = input.LA(1);

					if ((LA60_0==WS))
					{
						alt60 = 1;
					}
					} finally { DebugExitDecision(60); }
					switch (alt60)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:295:16: WS
						{
						DebugLocation(295, 16);
						WS178=(IToken)Match(input,WS,Follow._WS_in_expression_list1563);  
						stream_WS.Add(WS178);


						}
						break;

					}
					} finally { DebugExitSubRule(60); }

					DebugLocation(295, 20);
					char_literal179=(IToken)Match(input,167,Follow._167_in_expression_list1566);  
					stream_167.Add(char_literal179);

					DebugLocation(295, 24);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:295:24: ( WS )?
					int alt61=2;
					try { DebugEnterSubRule(61);
					try { DebugEnterDecision(61, decisionCanBacktrack[61]);
					int LA61_0 = input.LA(1);

					if ((LA61_0==WS))
					{
						alt61 = 1;
					}
					} finally { DebugExitDecision(61); }
					switch (alt61)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:295:24: WS
						{
						DebugLocation(295, 24);
						WS180=(IToken)Match(input,WS,Follow._WS_in_expression_list1568);  
						stream_WS.Add(WS180);


						}
						break;

					}
					} finally { DebugExitSubRule(61); }

					DebugLocation(295, 28);
					PushFollow(Follow._expression_in_expression_list1571);
					expression181=expression();
					PopFollow();

					stream_expression.Add(expression181.Tree);

					}
					break;

				default:
					goto loop62;
				}
			}

			loop62:
				;

			} finally { DebugExitSubRule(62); }



			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 295:41: -> ^( T_EXPRESSIONLIST ( expression )+ )
			{
				DebugLocation(295, 44);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:295:44: ^( T_EXPRESSIONLIST ( expression )+ )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(295, 46);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_EXPRESSIONLIST, "T_EXPRESSIONLIST"), root_1);

				DebugLocation(295, 63);
				if (!(stream_expression.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_expression.HasNext )
				{
					DebugLocation(295, 63);
					adaptor.AddChild(root_1, stream_expression.NextTree());

				}
				stream_expression.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_list", 35);
			LeaveRule("expression_list", 35);
			LeaveRule_expression_list();
	    }
	 	DebugLocation(296, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_list"); }
		return retval;

	}
	// $ANTLR end "expression_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_list_or_select_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_list_or_select_command() {}

	// $ANTLR start "expression_list_or_select_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:298:1: expression_list_or_select_command : ( expression_list | select_command );
	[GrammarRule("expression_list_or_select_command")]
	private AstParserRuleReturnScope<object, IToken> expression_list_or_select_command()
	{
		EnterRule_expression_list_or_select_command();
		EnterRule("expression_list_or_select_command", 36);
		TraceIn("expression_list_or_select_command", 36);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> expression_list182 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> select_command183 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "expression_list_or_select_command");
		DebugLocation(298, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:299:2: ( expression_list | select_command )
			int alt63=2;
			try { DebugEnterDecision(63, decisionCanBacktrack[63]);
			int LA63_0 = input.LA(1);

			if (((LA63_0>=CASE && LA63_0<=CAST)||(LA63_0>=CONVERT && LA63_0<=COUNT)||(LA63_0>=DATEADD && LA63_0<=DATEPART)||LA63_0==EXISTS||(LA63_0>=NOT && LA63_0<=NUMBER)||LA63_0==SIMPLE_FILE||(LA63_0>=STRING && LA63_0<=SYSTEMVAR)||LA63_0==TOKEN||LA63_0==VARIABLE||LA63_0==163||LA63_0==168))
			{
				alt63 = 1;
			}
			else if ((LA63_0==SELECT))
			{
				alt63 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 63, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(63); }
			switch (alt63)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:299:4: expression_list
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(299, 4);
				PushFollow(Follow._expression_list_in_expression_list_or_select_command1594);
				expression_list182=expression_list();
				PopFollow();

				adaptor.AddChild(root_0, expression_list182.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:299:22: select_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(299, 22);
				PushFollow(Follow._select_command_in_expression_list_or_select_command1598);
				select_command183=select_command();
				PopFollow();

				adaptor.AddChild(root_0, select_command183.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_list_or_select_command", 36);
			LeaveRule("expression_list_or_select_command", 36);
			LeaveRule_expression_list_or_select_command();
	    }
	 	DebugLocation(300, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_list_or_select_command"); }
		return retval;

	}
	// $ANTLR end "expression_list_or_select_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression() {}

	// $ANTLR start "expression"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:302:1: expression : expression_7 ;
	[GrammarRule("expression")]
	private AstParserRuleReturnScope<object, IToken> expression()
	{
		EnterRule_expression();
		EnterRule("expression", 37);
		TraceIn("expression", 37);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> expression_7184 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(302, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:303:2: ( expression_7 )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:303:4: expression_7
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(303, 4);
			PushFollow(Follow._expression_7_in_expression1610);
			expression_7184=expression_7();
			PopFollow();

			adaptor.AddChild(root_0, expression_7184.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression", 37);
			LeaveRule("expression", 37);
			LeaveRule_expression();
	    }
	 	DebugLocation(304, 1);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return retval;

	}
	// $ANTLR end "expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_7() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_7() {}

	// $ANTLR start "expression_7"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:306:1: expression_7 : (a= expression_6 -> $a) ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )* ;
	[GrammarRule("expression_7")]
	private AstParserRuleReturnScope<object, IToken> expression_7()
	{
		EnterRule_expression_7();
		EnterRule("expression_7", 38);
		TraceIn("expression_7", 38);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS185 = default(IToken);
	    IToken WS187 = default(IToken);
	    IToken IN188 = default(IToken);
	    IToken WS189 = default(IToken);
	    IToken char_literal190 = default(IToken);
	    IToken WS191 = default(IToken);
	    IToken WS193 = default(IToken);
	    IToken char_literal194 = default(IToken);
	    IToken NOT195 = default(IToken);
	    IToken WS196 = default(IToken);
	    IToken IN197 = default(IToken);
	    IToken WS198 = default(IToken);
	    IToken char_literal199 = default(IToken);
	    IToken WS200 = default(IToken);
	    IToken WS202 = default(IToken);
	    IToken char_literal203 = default(IToken);
	    IToken WS205 = default(IToken);
	    IToken SOME206 = default(IToken);
	    IToken ANY207 = default(IToken);
	    IToken WS208 = default(IToken);
	    IToken char_literal209 = default(IToken);
	    IToken char_literal211 = default(IToken);
	    IToken WS213 = default(IToken);
	    IToken ALL214 = default(IToken);
	    IToken WS215 = default(IToken);
	    IToken char_literal216 = default(IToken);
	    IToken char_literal218 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_7186 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command192 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command201 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_4204 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command210 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_4212 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command217 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS185_tree = default(object);
	    object WS187_tree = default(object);
	    object IN188_tree = default(object);
	    object WS189_tree = default(object);
	    object char_literal190_tree = default(object);
	    object WS191_tree = default(object);
	    object WS193_tree = default(object);
	    object char_literal194_tree = default(object);
	    object NOT195_tree = default(object);
	    object WS196_tree = default(object);
	    object IN197_tree = default(object);
	    object WS198_tree = default(object);
	    object char_literal199_tree = default(object);
	    object WS200_tree = default(object);
	    object WS202_tree = default(object);
	    object char_literal203_tree = default(object);
	    object WS205_tree = default(object);
	    object SOME206_tree = default(object);
	    object ANY207_tree = default(object);
	    object WS208_tree = default(object);
	    object char_literal209_tree = default(object);
	    object char_literal211_tree = default(object);
	    object WS213_tree = default(object);
	    object ALL214_tree = default(object);
	    object WS215_tree = default(object);
	    object char_literal216_tree = default(object);
	    object char_literal218_tree = default(object);
	    RewriteRuleITokenStream stream_163=new RewriteRuleITokenStream(adaptor,"token 163");
	    RewriteRuleITokenStream stream_164=new RewriteRuleITokenStream(adaptor,"token 164");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_ANY=new RewriteRuleITokenStream(adaptor,"token ANY");
	    RewriteRuleITokenStream stream_IN=new RewriteRuleITokenStream(adaptor,"token IN");
	    RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");
	    RewriteRuleITokenStream stream_SOME=new RewriteRuleITokenStream(adaptor,"token SOME");
	    RewriteRuleITokenStream stream_ALL=new RewriteRuleITokenStream(adaptor,"token ALL");
	    RewriteRuleSubtreeStream stream_op_7=new RewriteRuleSubtreeStream(adaptor,"rule op_7");
	    RewriteRuleSubtreeStream stream_expression_6=new RewriteRuleSubtreeStream(adaptor,"rule expression_6");
	    RewriteRuleSubtreeStream stream_expression_list_or_select_command=new RewriteRuleSubtreeStream(adaptor,"rule expression_list_or_select_command");
	    RewriteRuleSubtreeStream stream_op_4=new RewriteRuleSubtreeStream(adaptor,"rule op_4");
		try { DebugEnterRule(GrammarFileName, "expression_7");
		DebugLocation(306, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:307:2: ( (a= expression_6 -> $a) ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:307:4: (a= expression_6 -> $a) ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )*
			{
			DebugLocation(307, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:307:4: (a= expression_6 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:307:5: a= expression_6
			{
			DebugLocation(307, 6);
			PushFollow(Follow._expression_6_in_expression_71626);
			a=expression_6();
			PopFollow();

			stream_expression_6.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 307:19: -> $a
			{
				DebugLocation(307, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(307, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:307:25: ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )*
			try { DebugEnterSubRule(76);
			while (true)
			{
				int alt76=2;
				try { DebugEnterDecision(76, decisionCanBacktrack[76]);
				int LA76_0 = input.LA(1);

				if ((LA76_0==WS))
				{
					int LA76_1 = input.LA(2);

					if ((LA76_1==NOT))
					{
						int LA76_3 = input.LA(3);

						if ((LA76_3==WS))
						{
							int LA76_5 = input.LA(4);

							if ((LA76_5==BETWEEN||LA76_5==IN||LA76_5==LIKE||LA76_5==MATCH))
							{
								alt76 = 1;
							}


						}


					}
					else if ((LA76_1==BETWEEN||LA76_1==IN||LA76_1==LIKE||LA76_1==MATCH||LA76_1==OR||(LA76_1>=158 && LA76_1<=160)||(LA76_1>=172 && LA76_1<=177)))
					{
						alt76 = 1;
					}


				}


				} finally { DebugExitDecision(76); }
				switch ( alt76 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:307:26: WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) )
					{
					DebugLocation(307, 26);
					WS185=(IToken)Match(input,WS,Follow._WS_in_expression_71633);  
					stream_WS.Add(WS185);

					DebugLocation(307, 29);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:307:29: ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) )
					int alt75=5;
					try { DebugEnterSubRule(75);
					try { DebugEnterDecision(75, decisionCanBacktrack[75]);
					switch (input.LA(1))
					{
					case BETWEEN:
					case LIKE:
					case MATCH:
					case OR:
						{
						alt75 = 1;
						}
						break;
					case NOT:
						{
						int LA75_2 = input.LA(2);

						if ((LA75_2==WS))
						{
							int LA75_13 = input.LA(3);

							if ((LA75_13==BETWEEN||LA75_13==LIKE||LA75_13==MATCH))
							{
								alt75 = 1;
							}
							else if ((LA75_13==IN))
							{
								alt75 = 3;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 75, 13, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 75, 2, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case IN:
						{
						alt75 = 2;
						}
						break;
					case 175:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA75_14 = input.LA(3);

							if ((LA75_14==ANY||LA75_14==SOME))
							{
								alt75 = 4;
							}
							else if ((LA75_14==ALL))
							{
								alt75 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 75, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt75 = 4;
							}
							break;
						case ALL:
							{
							alt75 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 75, 4, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 177:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA75_14 = input.LA(3);

							if ((LA75_14==ANY||LA75_14==SOME))
							{
								alt75 = 4;
							}
							else if ((LA75_14==ALL))
							{
								alt75 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 75, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt75 = 4;
							}
							break;
						case ALL:
							{
							alt75 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 75, 5, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 173:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA75_14 = input.LA(3);

							if ((LA75_14==ANY||LA75_14==SOME))
							{
								alt75 = 4;
							}
							else if ((LA75_14==ALL))
							{
								alt75 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 75, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt75 = 4;
							}
							break;
						case ALL:
							{
							alt75 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 75, 6, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 174:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA75_14 = input.LA(3);

							if ((LA75_14==ANY||LA75_14==SOME))
							{
								alt75 = 4;
							}
							else if ((LA75_14==ALL))
							{
								alt75 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 75, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt75 = 4;
							}
							break;
						case ALL:
							{
							alt75 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 75, 7, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 159:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA75_14 = input.LA(3);

							if ((LA75_14==ANY||LA75_14==SOME))
							{
								alt75 = 4;
							}
							else if ((LA75_14==ALL))
							{
								alt75 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 75, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt75 = 4;
							}
							break;
						case ALL:
							{
							alt75 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 75, 8, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 160:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA75_14 = input.LA(3);

							if ((LA75_14==ANY||LA75_14==SOME))
							{
								alt75 = 4;
							}
							else if ((LA75_14==ALL))
							{
								alt75 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 75, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt75 = 4;
							}
							break;
						case ALL:
							{
							alt75 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 75, 9, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 158:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA75_14 = input.LA(3);

							if ((LA75_14==ANY||LA75_14==SOME))
							{
								alt75 = 4;
							}
							else if ((LA75_14==ALL))
							{
								alt75 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 75, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt75 = 4;
							}
							break;
						case ALL:
							{
							alt75 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 75, 10, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 176:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA75_14 = input.LA(3);

							if ((LA75_14==ANY||LA75_14==SOME))
							{
								alt75 = 4;
							}
							else if ((LA75_14==ALL))
							{
								alt75 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 75, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt75 = 4;
							}
							break;
						case ALL:
							{
							alt75 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 75, 11, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 172:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA75_14 = input.LA(3);

							if ((LA75_14==ANY||LA75_14==SOME))
							{
								alt75 = 4;
							}
							else if ((LA75_14==ALL))
							{
								alt75 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 75, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt75 = 4;
							}
							break;
						case ALL:
							{
							alt75 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 75, 12, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 75, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(75); }
					switch (alt75)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:308:2: op_7 WS b= expression_6
						{
						DebugLocation(308, 2);
						PushFollow(Follow._op_7_in_expression_71638);
						op_7186=op_7();
						PopFollow();

						stream_op_7.Add(op_7186.Tree);
						DebugLocation(308, 7);
						WS187=(IToken)Match(input,WS,Follow._WS_in_expression_71640);  
						stream_WS.Add(WS187);

						DebugLocation(308, 11);
						PushFollow(Follow._expression_6_in_expression_71644);
						b=expression_6();
						PopFollow();

						stream_expression_6.Add(b.Tree);


						{
						// AST REWRITE
						// elements: expression_7, b, op_7
						// token labels: 
						// rule labels: retval, b
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 308:25: -> ^( T_OP_BINARY op_7 $expression_7 $b)
						{
							DebugLocation(308, 28);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:308:28: ^( T_OP_BINARY op_7 $expression_7 $b)
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(308, 30);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(308, 42);
							adaptor.AddChild(root_1, stream_op_7.NextTree());
							DebugLocation(308, 48);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(308, 62);
							adaptor.AddChild(root_1, stream_b.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:309:4: IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')'
						{
						DebugLocation(309, 4);
						IN188=(IToken)Match(input,IN,Follow._IN_in_expression_71663);  
						stream_IN.Add(IN188);

						DebugLocation(309, 7);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:309:7: ( WS )?
						int alt64=2;
						try { DebugEnterSubRule(64);
						try { DebugEnterDecision(64, decisionCanBacktrack[64]);
						int LA64_0 = input.LA(1);

						if ((LA64_0==WS))
						{
							alt64 = 1;
						}
						} finally { DebugExitDecision(64); }
						switch (alt64)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:309:7: WS
							{
							DebugLocation(309, 7);
							WS189=(IToken)Match(input,WS,Follow._WS_in_expression_71665);  
							stream_WS.Add(WS189);


							}
							break;

						}
						} finally { DebugExitSubRule(64); }

						DebugLocation(309, 11);
						char_literal190=(IToken)Match(input,163,Follow._163_in_expression_71668);  
						stream_163.Add(char_literal190);

						DebugLocation(309, 15);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:309:15: ( WS )?
						int alt65=2;
						try { DebugEnterSubRule(65);
						try { DebugEnterDecision(65, decisionCanBacktrack[65]);
						int LA65_0 = input.LA(1);

						if ((LA65_0==WS))
						{
							alt65 = 1;
						}
						} finally { DebugExitDecision(65); }
						switch (alt65)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:309:15: WS
							{
							DebugLocation(309, 15);
							WS191=(IToken)Match(input,WS,Follow._WS_in_expression_71670);  
							stream_WS.Add(WS191);


							}
							break;

						}
						} finally { DebugExitSubRule(65); }

						DebugLocation(309, 19);
						PushFollow(Follow._expression_list_or_select_command_in_expression_71673);
						expression_list_or_select_command192=expression_list_or_select_command();
						PopFollow();

						stream_expression_list_or_select_command.Add(expression_list_or_select_command192.Tree);
						DebugLocation(309, 53);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:309:53: ( WS )?
						int alt66=2;
						try { DebugEnterSubRule(66);
						try { DebugEnterDecision(66, decisionCanBacktrack[66]);
						int LA66_0 = input.LA(1);

						if ((LA66_0==WS))
						{
							alt66 = 1;
						}
						} finally { DebugExitDecision(66); }
						switch (alt66)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:309:53: WS
							{
							DebugLocation(309, 53);
							WS193=(IToken)Match(input,WS,Follow._WS_in_expression_71675);  
							stream_WS.Add(WS193);


							}
							break;

						}
						} finally { DebugExitSubRule(66); }

						DebugLocation(309, 57);
						char_literal194=(IToken)Match(input,164,Follow._164_in_expression_71678);  
						stream_164.Add(char_literal194);



						{
						// AST REWRITE
						// elements: expression_7, expression_list_or_select_command
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 309:61: -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command )
						{
							DebugLocation(309, 64);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:309:64: ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(309, 66);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(309, 78);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_IN, "T_IN"));
							DebugLocation(309, 84);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(309, 97);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:310:4: NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')'
						{
						DebugLocation(310, 4);
						NOT195=(IToken)Match(input,NOT,Follow._NOT_in_expression_71696);  
						stream_NOT.Add(NOT195);

						DebugLocation(310, 8);
						WS196=(IToken)Match(input,WS,Follow._WS_in_expression_71698);  
						stream_WS.Add(WS196);

						DebugLocation(310, 11);
						IN197=(IToken)Match(input,IN,Follow._IN_in_expression_71700);  
						stream_IN.Add(IN197);

						DebugLocation(310, 14);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:310:14: ( WS )?
						int alt67=2;
						try { DebugEnterSubRule(67);
						try { DebugEnterDecision(67, decisionCanBacktrack[67]);
						int LA67_0 = input.LA(1);

						if ((LA67_0==WS))
						{
							alt67 = 1;
						}
						} finally { DebugExitDecision(67); }
						switch (alt67)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:310:14: WS
							{
							DebugLocation(310, 14);
							WS198=(IToken)Match(input,WS,Follow._WS_in_expression_71702);  
							stream_WS.Add(WS198);


							}
							break;

						}
						} finally { DebugExitSubRule(67); }

						DebugLocation(310, 18);
						char_literal199=(IToken)Match(input,163,Follow._163_in_expression_71705);  
						stream_163.Add(char_literal199);

						DebugLocation(310, 22);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:310:22: ( WS )?
						int alt68=2;
						try { DebugEnterSubRule(68);
						try { DebugEnterDecision(68, decisionCanBacktrack[68]);
						int LA68_0 = input.LA(1);

						if ((LA68_0==WS))
						{
							alt68 = 1;
						}
						} finally { DebugExitDecision(68); }
						switch (alt68)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:310:22: WS
							{
							DebugLocation(310, 22);
							WS200=(IToken)Match(input,WS,Follow._WS_in_expression_71707);  
							stream_WS.Add(WS200);


							}
							break;

						}
						} finally { DebugExitSubRule(68); }

						DebugLocation(310, 26);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:310:26: ( expression_list_or_select_command )
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:310:27: expression_list_or_select_command
						{
						DebugLocation(310, 27);
						PushFollow(Follow._expression_list_or_select_command_in_expression_71711);
						expression_list_or_select_command201=expression_list_or_select_command();
						PopFollow();

						stream_expression_list_or_select_command.Add(expression_list_or_select_command201.Tree);

						}

						DebugLocation(310, 62);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:310:62: ( WS )?
						int alt69=2;
						try { DebugEnterSubRule(69);
						try { DebugEnterDecision(69, decisionCanBacktrack[69]);
						int LA69_0 = input.LA(1);

						if ((LA69_0==WS))
						{
							alt69 = 1;
						}
						} finally { DebugExitDecision(69); }
						switch (alt69)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:310:62: WS
							{
							DebugLocation(310, 62);
							WS202=(IToken)Match(input,WS,Follow._WS_in_expression_71714);  
							stream_WS.Add(WS202);


							}
							break;

						}
						} finally { DebugExitSubRule(69); }

						DebugLocation(310, 66);
						char_literal203=(IToken)Match(input,164,Follow._164_in_expression_71717);  
						stream_164.Add(char_literal203);



						{
						// AST REWRITE
						// elements: expression_list_or_select_command, expression_7
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 310:70: -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command )
						{
							DebugLocation(310, 73);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:310:73: ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(310, 75);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(310, 87);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_NOTIN, "T_NOTIN"));
							DebugLocation(310, 96);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(310, 109);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 4:
						DebugEnterAlt(4);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:311:4: op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')'
						{
						DebugLocation(311, 4);
						PushFollow(Follow._op_4_in_expression_71735);
						op_4204=op_4();
						PopFollow();

						stream_op_4.Add(op_4204.Tree);
						DebugLocation(311, 9);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:311:9: ( WS )?
						int alt70=2;
						try { DebugEnterSubRule(70);
						try { DebugEnterDecision(70, decisionCanBacktrack[70]);
						int LA70_0 = input.LA(1);

						if ((LA70_0==WS))
						{
							alt70 = 1;
						}
						} finally { DebugExitDecision(70); }
						switch (alt70)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:311:9: WS
							{
							DebugLocation(311, 9);
							WS205=(IToken)Match(input,WS,Follow._WS_in_expression_71737);  
							stream_WS.Add(WS205);


							}
							break;

						}
						} finally { DebugExitSubRule(70); }

						DebugLocation(311, 13);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:311:13: ( SOME | ANY )
						int alt71=2;
						try { DebugEnterSubRule(71);
						try { DebugEnterDecision(71, decisionCanBacktrack[71]);
						int LA71_0 = input.LA(1);

						if ((LA71_0==SOME))
						{
							alt71 = 1;
						}
						else if ((LA71_0==ANY))
						{
							alt71 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 71, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						} finally { DebugExitDecision(71); }
						switch (alt71)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:311:14: SOME
							{
							DebugLocation(311, 14);
							SOME206=(IToken)Match(input,SOME,Follow._SOME_in_expression_71741);  
							stream_SOME.Add(SOME206);


							}
							break;
						case 2:
							DebugEnterAlt(2);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:311:21: ANY
							{
							DebugLocation(311, 21);
							ANY207=(IToken)Match(input,ANY,Follow._ANY_in_expression_71745);  
							stream_ANY.Add(ANY207);


							}
							break;

						}
						} finally { DebugExitSubRule(71); }

						DebugLocation(311, 26);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:311:26: ( WS )?
						int alt72=2;
						try { DebugEnterSubRule(72);
						try { DebugEnterDecision(72, decisionCanBacktrack[72]);
						int LA72_0 = input.LA(1);

						if ((LA72_0==WS))
						{
							alt72 = 1;
						}
						} finally { DebugExitDecision(72); }
						switch (alt72)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:311:26: WS
							{
							DebugLocation(311, 26);
							WS208=(IToken)Match(input,WS,Follow._WS_in_expression_71748);  
							stream_WS.Add(WS208);


							}
							break;

						}
						} finally { DebugExitSubRule(72); }

						DebugLocation(311, 30);
						char_literal209=(IToken)Match(input,163,Follow._163_in_expression_71751);  
						stream_163.Add(char_literal209);

						DebugLocation(311, 34);
						PushFollow(Follow._expression_list_or_select_command_in_expression_71753);
						expression_list_or_select_command210=expression_list_or_select_command();
						PopFollow();

						stream_expression_list_or_select_command.Add(expression_list_or_select_command210.Tree);
						DebugLocation(311, 68);
						char_literal211=(IToken)Match(input,164,Follow._164_in_expression_71755);  
						stream_164.Add(char_literal211);



						{
						// AST REWRITE
						// elements: op_4, expression_7, expression_list_or_select_command
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 311:72: -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command )
						{
							DebugLocation(311, 75);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:311:75: ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(311, 77);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(311, 89);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_ANY, "T_ANY"));
							DebugLocation(311, 95);
							adaptor.AddChild(root_1, stream_op_4.NextTree());
							DebugLocation(311, 101);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(311, 114);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 5:
						DebugEnterAlt(5);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:312:4: op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')'
						{
						DebugLocation(312, 4);
						PushFollow(Follow._op_4_in_expression_71775);
						op_4212=op_4();
						PopFollow();

						stream_op_4.Add(op_4212.Tree);
						DebugLocation(312, 9);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:312:9: ( WS )?
						int alt73=2;
						try { DebugEnterSubRule(73);
						try { DebugEnterDecision(73, decisionCanBacktrack[73]);
						int LA73_0 = input.LA(1);

						if ((LA73_0==WS))
						{
							alt73 = 1;
						}
						} finally { DebugExitDecision(73); }
						switch (alt73)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:312:9: WS
							{
							DebugLocation(312, 9);
							WS213=(IToken)Match(input,WS,Follow._WS_in_expression_71777);  
							stream_WS.Add(WS213);


							}
							break;

						}
						} finally { DebugExitSubRule(73); }

						DebugLocation(312, 13);
						ALL214=(IToken)Match(input,ALL,Follow._ALL_in_expression_71780);  
						stream_ALL.Add(ALL214);

						DebugLocation(312, 17);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:312:17: ( WS )?
						int alt74=2;
						try { DebugEnterSubRule(74);
						try { DebugEnterDecision(74, decisionCanBacktrack[74]);
						int LA74_0 = input.LA(1);

						if ((LA74_0==WS))
						{
							alt74 = 1;
						}
						} finally { DebugExitDecision(74); }
						switch (alt74)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:312:17: WS
							{
							DebugLocation(312, 17);
							WS215=(IToken)Match(input,WS,Follow._WS_in_expression_71782);  
							stream_WS.Add(WS215);


							}
							break;

						}
						} finally { DebugExitSubRule(74); }

						DebugLocation(312, 21);
						char_literal216=(IToken)Match(input,163,Follow._163_in_expression_71785);  
						stream_163.Add(char_literal216);

						DebugLocation(312, 25);
						PushFollow(Follow._expression_list_or_select_command_in_expression_71787);
						expression_list_or_select_command217=expression_list_or_select_command();
						PopFollow();

						stream_expression_list_or_select_command.Add(expression_list_or_select_command217.Tree);
						DebugLocation(312, 59);
						char_literal218=(IToken)Match(input,164,Follow._164_in_expression_71789);  
						stream_164.Add(char_literal218);



						{
						// AST REWRITE
						// elements: expression_list_or_select_command, expression_7, op_4
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 312:63: -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command )
						{
							DebugLocation(312, 66);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:312:66: ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(312, 68);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(312, 80);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_ALL, "T_ALL"));
							DebugLocation(312, 86);
							adaptor.AddChild(root_1, stream_op_4.NextTree());
							DebugLocation(312, 92);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(312, 105);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					}
					} finally { DebugExitSubRule(75); }


					}
					break;

				default:
					goto loop76;
				}
			}

			loop76:
				;

			} finally { DebugExitSubRule(76); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_7", 38);
			LeaveRule("expression_7", 38);
			LeaveRule_expression_7();
	    }
	 	DebugLocation(314, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_7"); }
		return retval;

	}
	// $ANTLR end "expression_7"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_7() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_7() {}

	// $ANTLR start "op_7"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:316:1: op_7 : ( OR -> T_OR | LIKE -> T_LIKE | NOT WS LIKE -> T_NOTLIKE | MATCH -> T_MATCH | NOT WS MATCH -> T_NOTMATCH | BETWEEN -> T_BETWEEN | NOT WS BETWEEN -> T_NOTBETWEEN );
	[GrammarRule("op_7")]
	private AstParserRuleReturnScope<object, IToken> op_7()
	{
		EnterRule_op_7();
		EnterRule("op_7", 39);
		TraceIn("op_7", 39);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken OR219 = default(IToken);
	    IToken LIKE220 = default(IToken);
	    IToken NOT221 = default(IToken);
	    IToken WS222 = default(IToken);
	    IToken LIKE223 = default(IToken);
	    IToken MATCH224 = default(IToken);
	    IToken NOT225 = default(IToken);
	    IToken WS226 = default(IToken);
	    IToken MATCH227 = default(IToken);
	    IToken BETWEEN228 = default(IToken);
	    IToken NOT229 = default(IToken);
	    IToken WS230 = default(IToken);
	    IToken BETWEEN231 = default(IToken);

	    object OR219_tree = default(object);
	    object LIKE220_tree = default(object);
	    object NOT221_tree = default(object);
	    object WS222_tree = default(object);
	    object LIKE223_tree = default(object);
	    object MATCH224_tree = default(object);
	    object NOT225_tree = default(object);
	    object WS226_tree = default(object);
	    object MATCH227_tree = default(object);
	    object BETWEEN228_tree = default(object);
	    object NOT229_tree = default(object);
	    object WS230_tree = default(object);
	    object BETWEEN231_tree = default(object);
	    RewriteRuleITokenStream stream_MATCH=new RewriteRuleITokenStream(adaptor,"token MATCH");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");
	    RewriteRuleITokenStream stream_BETWEEN=new RewriteRuleITokenStream(adaptor,"token BETWEEN");
	    RewriteRuleITokenStream stream_LIKE=new RewriteRuleITokenStream(adaptor,"token LIKE");
	    RewriteRuleITokenStream stream_OR=new RewriteRuleITokenStream(adaptor,"token OR");

		try { DebugEnterRule(GrammarFileName, "op_7");
		DebugLocation(316, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:316:6: ( OR -> T_OR | LIKE -> T_LIKE | NOT WS LIKE -> T_NOTLIKE | MATCH -> T_MATCH | NOT WS MATCH -> T_NOTMATCH | BETWEEN -> T_BETWEEN | NOT WS BETWEEN -> T_NOTBETWEEN )
			int alt77=7;
			try { DebugEnterDecision(77, decisionCanBacktrack[77]);
			switch (input.LA(1))
			{
			case OR:
				{
				alt77 = 1;
				}
				break;
			case LIKE:
				{
				alt77 = 2;
				}
				break;
			case NOT:
				{
				int LA77_3 = input.LA(2);

				if ((LA77_3==WS))
				{
					switch (input.LA(3))
					{
					case LIKE:
						{
						alt77 = 3;
						}
						break;
					case MATCH:
						{
						alt77 = 5;
						}
						break;
					case BETWEEN:
						{
						alt77 = 7;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 77, 6, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 77, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case MATCH:
				{
				alt77 = 4;
				}
				break;
			case BETWEEN:
				{
				alt77 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 77, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(77); }
			switch (alt77)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:316:8: OR
				{
				DebugLocation(316, 8);
				OR219=(IToken)Match(input,OR,Follow._OR_in_op_71819);  
				stream_OR.Add(OR219);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 316:11: -> T_OR
				{
					DebugLocation(316, 14);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_OR, "T_OR"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:317:4: LIKE
				{
				DebugLocation(317, 4);
				LIKE220=(IToken)Match(input,LIKE,Follow._LIKE_in_op_71828);  
				stream_LIKE.Add(LIKE220);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 317:9: -> T_LIKE
				{
					DebugLocation(317, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_LIKE, "T_LIKE"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:318:4: NOT WS LIKE
				{
				DebugLocation(318, 4);
				NOT221=(IToken)Match(input,NOT,Follow._NOT_in_op_71837);  
				stream_NOT.Add(NOT221);

				DebugLocation(318, 8);
				WS222=(IToken)Match(input,WS,Follow._WS_in_op_71839);  
				stream_WS.Add(WS222);

				DebugLocation(318, 11);
				LIKE223=(IToken)Match(input,LIKE,Follow._LIKE_in_op_71841);  
				stream_LIKE.Add(LIKE223);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 318:16: -> T_NOTLIKE
				{
					DebugLocation(318, 19);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTLIKE, "T_NOTLIKE"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:319:4: MATCH
				{
				DebugLocation(319, 4);
				MATCH224=(IToken)Match(input,MATCH,Follow._MATCH_in_op_71850);  
				stream_MATCH.Add(MATCH224);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 319:10: -> T_MATCH
				{
					DebugLocation(319, 13);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MATCH, "T_MATCH"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:320:4: NOT WS MATCH
				{
				DebugLocation(320, 4);
				NOT225=(IToken)Match(input,NOT,Follow._NOT_in_op_71859);  
				stream_NOT.Add(NOT225);

				DebugLocation(320, 8);
				WS226=(IToken)Match(input,WS,Follow._WS_in_op_71861);  
				stream_WS.Add(WS226);

				DebugLocation(320, 11);
				MATCH227=(IToken)Match(input,MATCH,Follow._MATCH_in_op_71863);  
				stream_MATCH.Add(MATCH227);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 320:17: -> T_NOTMATCH
				{
					DebugLocation(320, 20);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTMATCH, "T_NOTMATCH"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:321:4: BETWEEN
				{
				DebugLocation(321, 4);
				BETWEEN228=(IToken)Match(input,BETWEEN,Follow._BETWEEN_in_op_71872);  
				stream_BETWEEN.Add(BETWEEN228);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 321:12: -> T_BETWEEN
				{
					DebugLocation(321, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BETWEEN, "T_BETWEEN"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:322:4: NOT WS BETWEEN
				{
				DebugLocation(322, 4);
				NOT229=(IToken)Match(input,NOT,Follow._NOT_in_op_71881);  
				stream_NOT.Add(NOT229);

				DebugLocation(322, 8);
				WS230=(IToken)Match(input,WS,Follow._WS_in_op_71883);  
				stream_WS.Add(WS230);

				DebugLocation(322, 11);
				BETWEEN231=(IToken)Match(input,BETWEEN,Follow._BETWEEN_in_op_71885);  
				stream_BETWEEN.Add(BETWEEN231);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 322:19: -> T_NOTBETWEEN
				{
					DebugLocation(322, 22);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTBETWEEN, "T_NOTBETWEEN"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_7", 39);
			LeaveRule("op_7", 39);
			LeaveRule_op_7();
	    }
	 	DebugLocation(323, 1);
		} finally { DebugExitRule(GrammarFileName, "op_7"); }
		return retval;

	}
	// $ANTLR end "op_7"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_6() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_6() {}

	// $ANTLR start "expression_6"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:325:1: expression_6 : (a= expression_5 -> $a) ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )* ;
	[GrammarRule("expression_6")]
	private AstParserRuleReturnScope<object, IToken> expression_6()
	{
		EnterRule_expression_6();
		EnterRule("expression_6", 40);
		TraceIn("expression_6", 40);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS232 = default(IToken);
	    IToken WS234 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_6233 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS232_tree = default(object);
	    object WS234_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_op_6=new RewriteRuleSubtreeStream(adaptor,"rule op_6");
	    RewriteRuleSubtreeStream stream_expression_5=new RewriteRuleSubtreeStream(adaptor,"rule expression_5");
		try { DebugEnterRule(GrammarFileName, "expression_6");
		DebugLocation(325, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:326:2: ( (a= expression_5 -> $a) ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:326:4: (a= expression_5 -> $a) ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )*
			{
			DebugLocation(326, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:326:4: (a= expression_5 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:326:5: a= expression_5
			{
			DebugLocation(326, 6);
			PushFollow(Follow._expression_5_in_expression_61904);
			a=expression_5();
			PopFollow();

			stream_expression_5.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 326:19: -> $a
			{
				DebugLocation(326, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(326, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:326:25: ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )*
			try { DebugEnterSubRule(78);
			while (true)
			{
				int alt78=2;
				try { DebugEnterDecision(78, decisionCanBacktrack[78]);
				int LA78_0 = input.LA(1);

				if ((LA78_0==WS))
				{
					int LA78_1 = input.LA(2);

					if ((LA78_1==AND))
					{
						alt78 = 1;
					}


				}


				} finally { DebugExitDecision(78); }
				switch ( alt78 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:326:26: WS op_6 WS b= expression_5
					{
					DebugLocation(326, 26);
					WS232=(IToken)Match(input,WS,Follow._WS_in_expression_61911);  
					stream_WS.Add(WS232);

					DebugLocation(326, 29);
					PushFollow(Follow._op_6_in_expression_61913);
					op_6233=op_6();
					PopFollow();

					stream_op_6.Add(op_6233.Tree);
					DebugLocation(326, 34);
					WS234=(IToken)Match(input,WS,Follow._WS_in_expression_61915);  
					stream_WS.Add(WS234);

					DebugLocation(326, 38);
					PushFollow(Follow._expression_5_in_expression_61919);
					b=expression_5();
					PopFollow();

					stream_expression_5.Add(b.Tree);


					{
					// AST REWRITE
					// elements: op_6, expression_6, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 326:52: -> ^( T_OP_BINARY op_6 $expression_6 $b)
					{
						DebugLocation(326, 55);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:326:55: ^( T_OP_BINARY op_6 $expression_6 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(326, 57);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(326, 69);
						adaptor.AddChild(root_1, stream_op_6.NextTree());
						DebugLocation(326, 75);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(326, 89);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop78;
				}
			}

			loop78:
				;

			} finally { DebugExitSubRule(78); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_6", 40);
			LeaveRule("expression_6", 40);
			LeaveRule_expression_6();
	    }
	 	DebugLocation(327, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_6"); }
		return retval;

	}
	// $ANTLR end "expression_6"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_6() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_6() {}

	// $ANTLR start "op_6"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:329:1: op_6 : AND -> T_AND ;
	[GrammarRule("op_6")]
	private AstParserRuleReturnScope<object, IToken> op_6()
	{
		EnterRule_op_6();
		EnterRule("op_6", 41);
		TraceIn("op_6", 41);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken AND235 = default(IToken);

	    object AND235_tree = default(object);
	    RewriteRuleITokenStream stream_AND=new RewriteRuleITokenStream(adaptor,"token AND");

		try { DebugEnterRule(GrammarFileName, "op_6");
		DebugLocation(329, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:329:6: ( AND -> T_AND )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:329:8: AND
			{
			DebugLocation(329, 8);
			AND235=(IToken)Match(input,AND,Follow._AND_in_op_61947);  
			stream_AND.Add(AND235);



			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 329:12: -> T_AND
			{
				DebugLocation(329, 15);
				adaptor.AddChild(root_0, (object)adaptor.Create(T_AND, "T_AND"));

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_6", 41);
			LeaveRule("op_6", 41);
			LeaveRule_op_6();
	    }
	 	DebugLocation(330, 1);
		} finally { DebugExitRule(GrammarFileName, "op_6"); }
		return retval;

	}
	// $ANTLR end "op_6"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_5() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_5() {}

	// $ANTLR start "expression_5"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:332:1: expression_5 : ( op_5 WS expression_5 -> ^( T_OP_UNARY op_5 expression_5 ) | expression_4 );
	[GrammarRule("expression_5")]
	private AstParserRuleReturnScope<object, IToken> expression_5()
	{
		EnterRule_expression_5();
		EnterRule("expression_5", 42);
		TraceIn("expression_5", 42);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS237 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> op_5236 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_5238 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_4239 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS237_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression_5=new RewriteRuleSubtreeStream(adaptor,"rule expression_5");
	    RewriteRuleSubtreeStream stream_op_5=new RewriteRuleSubtreeStream(adaptor,"rule op_5");
		try { DebugEnterRule(GrammarFileName, "expression_5");
		DebugLocation(332, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:333:2: ( op_5 WS expression_5 -> ^( T_OP_UNARY op_5 expression_5 ) | expression_4 )
			int alt79=2;
			try { DebugEnterDecision(79, decisionCanBacktrack[79]);
			int LA79_0 = input.LA(1);

			if ((LA79_0==NOT))
			{
				alt79 = 1;
			}
			else if (((LA79_0>=CASE && LA79_0<=CAST)||(LA79_0>=CONVERT && LA79_0<=COUNT)||(LA79_0>=DATEADD && LA79_0<=DATEPART)||LA79_0==EXISTS||LA79_0==NUMBER||LA79_0==SIMPLE_FILE||(LA79_0>=STRING && LA79_0<=SYSTEMVAR)||LA79_0==TOKEN||LA79_0==VARIABLE||LA79_0==163||LA79_0==168))
			{
				alt79 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 79, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(79); }
			switch (alt79)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:333:4: op_5 WS expression_5
				{
				DebugLocation(333, 4);
				PushFollow(Follow._op_5_in_expression_51965);
				op_5236=op_5();
				PopFollow();

				stream_op_5.Add(op_5236.Tree);
				DebugLocation(333, 9);
				WS237=(IToken)Match(input,WS,Follow._WS_in_expression_51967);  
				stream_WS.Add(WS237);

				DebugLocation(333, 12);
				PushFollow(Follow._expression_5_in_expression_51969);
				expression_5238=expression_5();
				PopFollow();

				stream_expression_5.Add(expression_5238.Tree);


				{
				// AST REWRITE
				// elements: op_5, expression_5
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 333:25: -> ^( T_OP_UNARY op_5 expression_5 )
				{
					DebugLocation(333, 28);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:333:28: ^( T_OP_UNARY op_5 expression_5 )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(333, 30);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_UNARY, "T_OP_UNARY"), root_1);

					DebugLocation(333, 41);
					adaptor.AddChild(root_1, stream_op_5.NextTree());
					DebugLocation(333, 46);
					adaptor.AddChild(root_1, stream_expression_5.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:334:4: expression_4
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(334, 4);
				PushFollow(Follow._expression_4_in_expression_51984);
				expression_4239=expression_4();
				PopFollow();

				adaptor.AddChild(root_0, expression_4239.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_5", 42);
			LeaveRule("expression_5", 42);
			LeaveRule_expression_5();
	    }
	 	DebugLocation(335, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_5"); }
		return retval;

	}
	// $ANTLR end "expression_5"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_5() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_5() {}

	// $ANTLR start "op_5"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:337:1: op_5 : NOT -> T_NOT ;
	[GrammarRule("op_5")]
	private AstParserRuleReturnScope<object, IToken> op_5()
	{
		EnterRule_op_5();
		EnterRule("op_5", 43);
		TraceIn("op_5", 43);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken NOT240 = default(IToken);

	    object NOT240_tree = default(object);
	    RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");

		try { DebugEnterRule(GrammarFileName, "op_5");
		DebugLocation(337, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:337:7: ( NOT -> T_NOT )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:337:9: NOT
			{
			DebugLocation(337, 9);
			NOT240=(IToken)Match(input,NOT,Follow._NOT_in_op_51995);  
			stream_NOT.Add(NOT240);



			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 337:13: -> T_NOT
			{
				DebugLocation(337, 16);
				adaptor.AddChild(root_0, (object)adaptor.Create(T_NOT, "T_NOT"));

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_5", 43);
			LeaveRule("op_5", 43);
			LeaveRule_op_5();
	    }
	 	DebugLocation(338, 1);
		} finally { DebugExitRule(GrammarFileName, "op_5"); }
		return retval;

	}
	// $ANTLR end "op_5"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_4() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_4() {}

	// $ANTLR start "expression_4"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:340:1: expression_4 : (a= expression_3 -> $a) ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )* ;
	[GrammarRule("expression_4")]
	private AstParserRuleReturnScope<object, IToken> expression_4()
	{
		EnterRule_expression_4();
		EnterRule("expression_4", 44);
		TraceIn("expression_4", 44);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS241 = default(IToken);
	    IToken WS243 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_4242 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS241_tree = default(object);
	    object WS243_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression_3=new RewriteRuleSubtreeStream(adaptor,"rule expression_3");
	    RewriteRuleSubtreeStream stream_op_4=new RewriteRuleSubtreeStream(adaptor,"rule op_4");
		try { DebugEnterRule(GrammarFileName, "expression_4");
		DebugLocation(340, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:341:2: ( (a= expression_3 -> $a) ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:341:4: (a= expression_3 -> $a) ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )*
			{
			DebugLocation(341, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:341:4: (a= expression_3 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:341:5: a= expression_3
			{
			DebugLocation(341, 6);
			PushFollow(Follow._expression_3_in_expression_42014);
			a=expression_3();
			PopFollow();

			stream_expression_3.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 341:19: -> $a
			{
				DebugLocation(341, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(341, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:341:25: ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )*
			try { DebugEnterSubRule(82);
			while (true)
			{
				int alt82=2;
				try { DebugEnterDecision(82, decisionCanBacktrack[82]);
				int LA82_0 = input.LA(1);

				if ((LA82_0==WS))
				{
					switch (input.LA(2))
					{
					case 175:
						{
						int LA82_4 = input.LA(3);

						if ((LA82_4==WS))
						{
							int LA82_13 = input.LA(4);

							if (((LA82_13>=CASE && LA82_13<=CAST)||(LA82_13>=CONVERT && LA82_13<=COUNT)||(LA82_13>=DATEADD && LA82_13<=DATEPART)||LA82_13==EXISTS||LA82_13==NUMBER||LA82_13==SIMPLE_FILE||(LA82_13>=STRING && LA82_13<=SYSTEMVAR)||LA82_13==TOKEN||LA82_13==VARIABLE||LA82_13==163||LA82_13==168))
							{
								alt82 = 1;
							}


						}
						else if (((LA82_4>=CASE && LA82_4<=CAST)||(LA82_4>=CONVERT && LA82_4<=COUNT)||(LA82_4>=DATEADD && LA82_4<=DATEPART)||LA82_4==EXISTS||LA82_4==NUMBER||LA82_4==SIMPLE_FILE||(LA82_4>=STRING && LA82_4<=SYSTEMVAR)||LA82_4==TOKEN||LA82_4==VARIABLE||LA82_4==163||LA82_4==168))
						{
							alt82 = 1;
						}


						}
						break;
					case 177:
						{
						int LA82_5 = input.LA(3);

						if ((LA82_5==WS))
						{
							int LA82_13 = input.LA(4);

							if (((LA82_13>=CASE && LA82_13<=CAST)||(LA82_13>=CONVERT && LA82_13<=COUNT)||(LA82_13>=DATEADD && LA82_13<=DATEPART)||LA82_13==EXISTS||LA82_13==NUMBER||LA82_13==SIMPLE_FILE||(LA82_13>=STRING && LA82_13<=SYSTEMVAR)||LA82_13==TOKEN||LA82_13==VARIABLE||LA82_13==163||LA82_13==168))
							{
								alt82 = 1;
							}


						}
						else if (((LA82_5>=CASE && LA82_5<=CAST)||(LA82_5>=CONVERT && LA82_5<=COUNT)||(LA82_5>=DATEADD && LA82_5<=DATEPART)||LA82_5==EXISTS||LA82_5==NUMBER||LA82_5==SIMPLE_FILE||(LA82_5>=STRING && LA82_5<=SYSTEMVAR)||LA82_5==TOKEN||LA82_5==VARIABLE||LA82_5==163||LA82_5==168))
						{
							alt82 = 1;
						}


						}
						break;
					case 173:
						{
						int LA82_6 = input.LA(3);

						if ((LA82_6==WS))
						{
							int LA82_13 = input.LA(4);

							if (((LA82_13>=CASE && LA82_13<=CAST)||(LA82_13>=CONVERT && LA82_13<=COUNT)||(LA82_13>=DATEADD && LA82_13<=DATEPART)||LA82_13==EXISTS||LA82_13==NUMBER||LA82_13==SIMPLE_FILE||(LA82_13>=STRING && LA82_13<=SYSTEMVAR)||LA82_13==TOKEN||LA82_13==VARIABLE||LA82_13==163||LA82_13==168))
							{
								alt82 = 1;
							}


						}
						else if (((LA82_6>=CASE && LA82_6<=CAST)||(LA82_6>=CONVERT && LA82_6<=COUNT)||(LA82_6>=DATEADD && LA82_6<=DATEPART)||LA82_6==EXISTS||LA82_6==NUMBER||LA82_6==SIMPLE_FILE||(LA82_6>=STRING && LA82_6<=SYSTEMVAR)||LA82_6==TOKEN||LA82_6==VARIABLE||LA82_6==163||LA82_6==168))
						{
							alt82 = 1;
						}


						}
						break;
					case 174:
						{
						int LA82_7 = input.LA(3);

						if ((LA82_7==WS))
						{
							int LA82_13 = input.LA(4);

							if (((LA82_13>=CASE && LA82_13<=CAST)||(LA82_13>=CONVERT && LA82_13<=COUNT)||(LA82_13>=DATEADD && LA82_13<=DATEPART)||LA82_13==EXISTS||LA82_13==NUMBER||LA82_13==SIMPLE_FILE||(LA82_13>=STRING && LA82_13<=SYSTEMVAR)||LA82_13==TOKEN||LA82_13==VARIABLE||LA82_13==163||LA82_13==168))
							{
								alt82 = 1;
							}


						}
						else if (((LA82_7>=CASE && LA82_7<=CAST)||(LA82_7>=CONVERT && LA82_7<=COUNT)||(LA82_7>=DATEADD && LA82_7<=DATEPART)||LA82_7==EXISTS||LA82_7==NUMBER||LA82_7==SIMPLE_FILE||(LA82_7>=STRING && LA82_7<=SYSTEMVAR)||LA82_7==TOKEN||LA82_7==VARIABLE||LA82_7==163||LA82_7==168))
						{
							alt82 = 1;
						}


						}
						break;
					case 159:
						{
						int LA82_8 = input.LA(3);

						if ((LA82_8==WS))
						{
							int LA82_13 = input.LA(4);

							if (((LA82_13>=CASE && LA82_13<=CAST)||(LA82_13>=CONVERT && LA82_13<=COUNT)||(LA82_13>=DATEADD && LA82_13<=DATEPART)||LA82_13==EXISTS||LA82_13==NUMBER||LA82_13==SIMPLE_FILE||(LA82_13>=STRING && LA82_13<=SYSTEMVAR)||LA82_13==TOKEN||LA82_13==VARIABLE||LA82_13==163||LA82_13==168))
							{
								alt82 = 1;
							}


						}
						else if (((LA82_8>=CASE && LA82_8<=CAST)||(LA82_8>=CONVERT && LA82_8<=COUNT)||(LA82_8>=DATEADD && LA82_8<=DATEPART)||LA82_8==EXISTS||LA82_8==NUMBER||LA82_8==SIMPLE_FILE||(LA82_8>=STRING && LA82_8<=SYSTEMVAR)||LA82_8==TOKEN||LA82_8==VARIABLE||LA82_8==163||LA82_8==168))
						{
							alt82 = 1;
						}


						}
						break;
					case 160:
						{
						int LA82_9 = input.LA(3);

						if ((LA82_9==WS))
						{
							int LA82_13 = input.LA(4);

							if (((LA82_13>=CASE && LA82_13<=CAST)||(LA82_13>=CONVERT && LA82_13<=COUNT)||(LA82_13>=DATEADD && LA82_13<=DATEPART)||LA82_13==EXISTS||LA82_13==NUMBER||LA82_13==SIMPLE_FILE||(LA82_13>=STRING && LA82_13<=SYSTEMVAR)||LA82_13==TOKEN||LA82_13==VARIABLE||LA82_13==163||LA82_13==168))
							{
								alt82 = 1;
							}


						}
						else if (((LA82_9>=CASE && LA82_9<=CAST)||(LA82_9>=CONVERT && LA82_9<=COUNT)||(LA82_9>=DATEADD && LA82_9<=DATEPART)||LA82_9==EXISTS||LA82_9==NUMBER||LA82_9==SIMPLE_FILE||(LA82_9>=STRING && LA82_9<=SYSTEMVAR)||LA82_9==TOKEN||LA82_9==VARIABLE||LA82_9==163||LA82_9==168))
						{
							alt82 = 1;
						}


						}
						break;
					case 158:
						{
						int LA82_10 = input.LA(3);

						if ((LA82_10==WS))
						{
							int LA82_13 = input.LA(4);

							if (((LA82_13>=CASE && LA82_13<=CAST)||(LA82_13>=CONVERT && LA82_13<=COUNT)||(LA82_13>=DATEADD && LA82_13<=DATEPART)||LA82_13==EXISTS||LA82_13==NUMBER||LA82_13==SIMPLE_FILE||(LA82_13>=STRING && LA82_13<=SYSTEMVAR)||LA82_13==TOKEN||LA82_13==VARIABLE||LA82_13==163||LA82_13==168))
							{
								alt82 = 1;
							}


						}
						else if (((LA82_10>=CASE && LA82_10<=CAST)||(LA82_10>=CONVERT && LA82_10<=COUNT)||(LA82_10>=DATEADD && LA82_10<=DATEPART)||LA82_10==EXISTS||LA82_10==NUMBER||LA82_10==SIMPLE_FILE||(LA82_10>=STRING && LA82_10<=SYSTEMVAR)||LA82_10==TOKEN||LA82_10==VARIABLE||LA82_10==163||LA82_10==168))
						{
							alt82 = 1;
						}


						}
						break;
					case 176:
						{
						int LA82_11 = input.LA(3);

						if ((LA82_11==WS))
						{
							int LA82_13 = input.LA(4);

							if (((LA82_13>=CASE && LA82_13<=CAST)||(LA82_13>=CONVERT && LA82_13<=COUNT)||(LA82_13>=DATEADD && LA82_13<=DATEPART)||LA82_13==EXISTS||LA82_13==NUMBER||LA82_13==SIMPLE_FILE||(LA82_13>=STRING && LA82_13<=SYSTEMVAR)||LA82_13==TOKEN||LA82_13==VARIABLE||LA82_13==163||LA82_13==168))
							{
								alt82 = 1;
							}


						}
						else if (((LA82_11>=CASE && LA82_11<=CAST)||(LA82_11>=CONVERT && LA82_11<=COUNT)||(LA82_11>=DATEADD && LA82_11<=DATEPART)||LA82_11==EXISTS||LA82_11==NUMBER||LA82_11==SIMPLE_FILE||(LA82_11>=STRING && LA82_11<=SYSTEMVAR)||LA82_11==TOKEN||LA82_11==VARIABLE||LA82_11==163||LA82_11==168))
						{
							alt82 = 1;
						}


						}
						break;
					case 172:
						{
						int LA82_12 = input.LA(3);

						if ((LA82_12==WS))
						{
							int LA82_13 = input.LA(4);

							if (((LA82_13>=CASE && LA82_13<=CAST)||(LA82_13>=CONVERT && LA82_13<=COUNT)||(LA82_13>=DATEADD && LA82_13<=DATEPART)||LA82_13==EXISTS||LA82_13==NUMBER||LA82_13==SIMPLE_FILE||(LA82_13>=STRING && LA82_13<=SYSTEMVAR)||LA82_13==TOKEN||LA82_13==VARIABLE||LA82_13==163||LA82_13==168))
							{
								alt82 = 1;
							}


						}
						else if (((LA82_12>=CASE && LA82_12<=CAST)||(LA82_12>=CONVERT && LA82_12<=COUNT)||(LA82_12>=DATEADD && LA82_12<=DATEPART)||LA82_12==EXISTS||LA82_12==NUMBER||LA82_12==SIMPLE_FILE||(LA82_12>=STRING && LA82_12<=SYSTEMVAR)||LA82_12==TOKEN||LA82_12==VARIABLE||LA82_12==163||LA82_12==168))
						{
							alt82 = 1;
						}


						}
						break;
					}

				}
				else if (((LA82_0>=158 && LA82_0<=160)||(LA82_0>=172 && LA82_0<=177)))
				{
					alt82 = 1;
				}


				} finally { DebugExitDecision(82); }
				switch ( alt82 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:341:26: ( WS )? op_4 ( WS )? b= expression_3
					{
					DebugLocation(341, 26);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:341:26: ( WS )?
					int alt80=2;
					try { DebugEnterSubRule(80);
					try { DebugEnterDecision(80, decisionCanBacktrack[80]);
					int LA80_0 = input.LA(1);

					if ((LA80_0==WS))
					{
						alt80 = 1;
					}
					} finally { DebugExitDecision(80); }
					switch (alt80)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:341:26: WS
						{
						DebugLocation(341, 26);
						WS241=(IToken)Match(input,WS,Follow._WS_in_expression_42021);  
						stream_WS.Add(WS241);


						}
						break;

					}
					} finally { DebugExitSubRule(80); }

					DebugLocation(341, 30);
					PushFollow(Follow._op_4_in_expression_42024);
					op_4242=op_4();
					PopFollow();

					stream_op_4.Add(op_4242.Tree);
					DebugLocation(341, 35);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:341:35: ( WS )?
					int alt81=2;
					try { DebugEnterSubRule(81);
					try { DebugEnterDecision(81, decisionCanBacktrack[81]);
					int LA81_0 = input.LA(1);

					if ((LA81_0==WS))
					{
						alt81 = 1;
					}
					} finally { DebugExitDecision(81); }
					switch (alt81)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:341:35: WS
						{
						DebugLocation(341, 35);
						WS243=(IToken)Match(input,WS,Follow._WS_in_expression_42026);  
						stream_WS.Add(WS243);


						}
						break;

					}
					} finally { DebugExitSubRule(81); }

					DebugLocation(341, 40);
					PushFollow(Follow._expression_3_in_expression_42031);
					b=expression_3();
					PopFollow();

					stream_expression_3.Add(b.Tree);


					{
					// AST REWRITE
					// elements: op_4, b, expression_4
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 341:54: -> ^( T_OP_BINARY op_4 $expression_4 $b)
					{
						DebugLocation(341, 57);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:341:57: ^( T_OP_BINARY op_4 $expression_4 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(341, 59);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(341, 71);
						adaptor.AddChild(root_1, stream_op_4.NextTree());
						DebugLocation(341, 77);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(341, 91);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop82;
				}
			}

			loop82:
				;

			} finally { DebugExitSubRule(82); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_4", 44);
			LeaveRule("expression_4", 44);
			LeaveRule_expression_4();
	    }
	 	DebugLocation(342, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_4"); }
		return retval;

	}
	// $ANTLR end "expression_4"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_4() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_4() {}

	// $ANTLR start "op_4"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:344:1: op_4 : ( '=' -> T_EQUAL | '>=' -> T_NOTLESS | '<=' -> T_NOTGREATER | '<>' -> T_NOTEQUAL | '!=' -> T_NOTEQUAL | '!>' -> T_NOTGREATER | '!<' -> T_NOTLESS | '>' -> T_GREATER | '<' -> T_LESS );
	[GrammarRule("op_4")]
	private AstParserRuleReturnScope<object, IToken> op_4()
	{
		EnterRule_op_4();
		EnterRule("op_4", 45);
		TraceIn("op_4", 45);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal244 = default(IToken);
	    IToken string_literal245 = default(IToken);
	    IToken string_literal246 = default(IToken);
	    IToken string_literal247 = default(IToken);
	    IToken string_literal248 = default(IToken);
	    IToken string_literal249 = default(IToken);
	    IToken string_literal250 = default(IToken);
	    IToken char_literal251 = default(IToken);
	    IToken char_literal252 = default(IToken);

	    object char_literal244_tree = default(object);
	    object string_literal245_tree = default(object);
	    object string_literal246_tree = default(object);
	    object string_literal247_tree = default(object);
	    object string_literal248_tree = default(object);
	    object string_literal249_tree = default(object);
	    object string_literal250_tree = default(object);
	    object char_literal251_tree = default(object);
	    object char_literal252_tree = default(object);
	    RewriteRuleITokenStream stream_174=new RewriteRuleITokenStream(adaptor,"token 174");
	    RewriteRuleITokenStream stream_175=new RewriteRuleITokenStream(adaptor,"token 175");
	    RewriteRuleITokenStream stream_172=new RewriteRuleITokenStream(adaptor,"token 172");
	    RewriteRuleITokenStream stream_160=new RewriteRuleITokenStream(adaptor,"token 160");
	    RewriteRuleITokenStream stream_173=new RewriteRuleITokenStream(adaptor,"token 173");
	    RewriteRuleITokenStream stream_159=new RewriteRuleITokenStream(adaptor,"token 159");
	    RewriteRuleITokenStream stream_177=new RewriteRuleITokenStream(adaptor,"token 177");
	    RewriteRuleITokenStream stream_176=new RewriteRuleITokenStream(adaptor,"token 176");
	    RewriteRuleITokenStream stream_158=new RewriteRuleITokenStream(adaptor,"token 158");

		try { DebugEnterRule(GrammarFileName, "op_4");
		DebugLocation(344, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:344:6: ( '=' -> T_EQUAL | '>=' -> T_NOTLESS | '<=' -> T_NOTGREATER | '<>' -> T_NOTEQUAL | '!=' -> T_NOTEQUAL | '!>' -> T_NOTGREATER | '!<' -> T_NOTLESS | '>' -> T_GREATER | '<' -> T_LESS )
			int alt83=9;
			try { DebugEnterDecision(83, decisionCanBacktrack[83]);
			switch (input.LA(1))
			{
			case 175:
				{
				alt83 = 1;
				}
				break;
			case 177:
				{
				alt83 = 2;
				}
				break;
			case 173:
				{
				alt83 = 3;
				}
				break;
			case 174:
				{
				alt83 = 4;
				}
				break;
			case 159:
				{
				alt83 = 5;
				}
				break;
			case 160:
				{
				alt83 = 6;
				}
				break;
			case 158:
				{
				alt83 = 7;
				}
				break;
			case 176:
				{
				alt83 = 8;
				}
				break;
			case 172:
				{
				alt83 = 9;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 83, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(83); }
			switch (alt83)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:344:8: '='
				{
				DebugLocation(344, 8);
				char_literal244=(IToken)Match(input,175,Follow._175_in_op_42057);  
				stream_175.Add(char_literal244);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 344:12: -> T_EQUAL
				{
					DebugLocation(344, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_EQUAL, "T_EQUAL"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:345:4: '>='
				{
				DebugLocation(345, 4);
				string_literal245=(IToken)Match(input,177,Follow._177_in_op_42066);  
				stream_177.Add(string_literal245);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 345:9: -> T_NOTLESS
				{
					DebugLocation(345, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTLESS, "T_NOTLESS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:346:4: '<='
				{
				DebugLocation(346, 4);
				string_literal246=(IToken)Match(input,173,Follow._173_in_op_42076);  
				stream_173.Add(string_literal246);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 346:9: -> T_NOTGREATER
				{
					DebugLocation(346, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTGREATER, "T_NOTGREATER"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:347:4: '<>'
				{
				DebugLocation(347, 4);
				string_literal247=(IToken)Match(input,174,Follow._174_in_op_42086);  
				stream_174.Add(string_literal247);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 347:9: -> T_NOTEQUAL
				{
					DebugLocation(347, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTEQUAL, "T_NOTEQUAL"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:348:4: '!='
				{
				DebugLocation(348, 4);
				string_literal248=(IToken)Match(input,159,Follow._159_in_op_42095);  
				stream_159.Add(string_literal248);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 348:9: -> T_NOTEQUAL
				{
					DebugLocation(348, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTEQUAL, "T_NOTEQUAL"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:349:4: '!>'
				{
				DebugLocation(349, 4);
				string_literal249=(IToken)Match(input,160,Follow._160_in_op_42104);  
				stream_160.Add(string_literal249);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 349:9: -> T_NOTGREATER
				{
					DebugLocation(349, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTGREATER, "T_NOTGREATER"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:350:4: '!<'
				{
				DebugLocation(350, 4);
				string_literal250=(IToken)Match(input,158,Follow._158_in_op_42113);  
				stream_158.Add(string_literal250);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 350:9: -> T_NOTLESS
				{
					DebugLocation(350, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTLESS, "T_NOTLESS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:351:4: '>'
				{
				DebugLocation(351, 4);
				char_literal251=(IToken)Match(input,176,Follow._176_in_op_42122);  
				stream_176.Add(char_literal251);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 351:8: -> T_GREATER
				{
					DebugLocation(351, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_GREATER, "T_GREATER"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:352:4: '<'
				{
				DebugLocation(352, 4);
				char_literal252=(IToken)Match(input,172,Follow._172_in_op_42132);  
				stream_172.Add(char_literal252);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 352:8: -> T_LESS
				{
					DebugLocation(352, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_LESS, "T_LESS"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_4", 45);
			LeaveRule("op_4", 45);
			LeaveRule_op_4();
	    }
	 	DebugLocation(353, 1);
		} finally { DebugExitRule(GrammarFileName, "op_4"); }
		return retval;

	}
	// $ANTLR end "op_4"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_3() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_3() {}

	// $ANTLR start "expression_3"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:355:1: expression_3 : (a= expression_2 -> $a) ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )* ;
	[GrammarRule("expression_3")]
	private AstParserRuleReturnScope<object, IToken> expression_3()
	{
		EnterRule_expression_3();
		EnterRule("expression_3", 46);
		TraceIn("expression_3", 46);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS253 = default(IToken);
	    IToken WS255 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_3254 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS253_tree = default(object);
	    object WS255_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_op_3=new RewriteRuleSubtreeStream(adaptor,"rule op_3");
	    RewriteRuleSubtreeStream stream_expression_2=new RewriteRuleSubtreeStream(adaptor,"rule expression_2");
		try { DebugEnterRule(GrammarFileName, "expression_3");
		DebugLocation(355, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:356:2: ( (a= expression_2 -> $a) ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:356:4: (a= expression_2 -> $a) ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )*
			{
			DebugLocation(356, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:356:4: (a= expression_2 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:356:5: a= expression_2
			{
			DebugLocation(356, 6);
			PushFollow(Follow._expression_2_in_expression_32151);
			a=expression_2();
			PopFollow();

			stream_expression_2.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 356:19: -> $a
			{
				DebugLocation(356, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(356, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:356:25: ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )*
			try { DebugEnterSubRule(86);
			while (true)
			{
				int alt86=2;
				try { DebugEnterDecision(86, decisionCanBacktrack[86]);
				int LA86_0 = input.LA(1);

				if ((LA86_0==WS))
				{
					int LA86_1 = input.LA(2);

					if ((LA86_1==168))
					{
						int LA86_4 = input.LA(3);

						if ((LA86_4==WS))
						{
							int LA86_5 = input.LA(4);

							if (((LA86_5>=CASE && LA86_5<=CAST)||(LA86_5>=CONVERT && LA86_5<=COUNT)||(LA86_5>=DATEADD && LA86_5<=DATEPART)||LA86_5==EXISTS||LA86_5==NUMBER||LA86_5==SIMPLE_FILE||(LA86_5>=STRING && LA86_5<=SYSTEMVAR)||LA86_5==TOKEN||LA86_5==VARIABLE||LA86_5==163||LA86_5==168))
							{
								alt86 = 1;
							}


						}
						else if (((LA86_4>=CASE && LA86_4<=CAST)||(LA86_4>=CONVERT && LA86_4<=COUNT)||(LA86_4>=DATEADD && LA86_4<=DATEPART)||LA86_4==EXISTS||LA86_4==NUMBER||LA86_4==SIMPLE_FILE||(LA86_4>=STRING && LA86_4<=SYSTEMVAR)||LA86_4==TOKEN||LA86_4==VARIABLE||LA86_4==163||LA86_4==168))
						{
							alt86 = 1;
						}


					}
					else if ((LA86_1==162||LA86_1==166||(LA86_1>=180 && LA86_1<=181)))
					{
						alt86 = 1;
					}


				}
				else if ((LA86_0==162||LA86_0==166||LA86_0==168||(LA86_0>=180 && LA86_0<=181)))
				{
					alt86 = 1;
				}


				} finally { DebugExitDecision(86); }
				switch ( alt86 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:356:26: ( WS )? op_3 ( WS )? b= expression_2
					{
					DebugLocation(356, 26);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:356:26: ( WS )?
					int alt84=2;
					try { DebugEnterSubRule(84);
					try { DebugEnterDecision(84, decisionCanBacktrack[84]);
					int LA84_0 = input.LA(1);

					if ((LA84_0==WS))
					{
						alt84 = 1;
					}
					} finally { DebugExitDecision(84); }
					switch (alt84)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:356:26: WS
						{
						DebugLocation(356, 26);
						WS253=(IToken)Match(input,WS,Follow._WS_in_expression_32158);  
						stream_WS.Add(WS253);


						}
						break;

					}
					} finally { DebugExitSubRule(84); }

					DebugLocation(356, 30);
					PushFollow(Follow._op_3_in_expression_32161);
					op_3254=op_3();
					PopFollow();

					stream_op_3.Add(op_3254.Tree);
					DebugLocation(356, 35);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:356:35: ( WS )?
					int alt85=2;
					try { DebugEnterSubRule(85);
					try { DebugEnterDecision(85, decisionCanBacktrack[85]);
					int LA85_0 = input.LA(1);

					if ((LA85_0==WS))
					{
						alt85 = 1;
					}
					} finally { DebugExitDecision(85); }
					switch (alt85)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:356:35: WS
						{
						DebugLocation(356, 35);
						WS255=(IToken)Match(input,WS,Follow._WS_in_expression_32163);  
						stream_WS.Add(WS255);


						}
						break;

					}
					} finally { DebugExitSubRule(85); }

					DebugLocation(356, 40);
					PushFollow(Follow._expression_2_in_expression_32168);
					b=expression_2();
					PopFollow();

					stream_expression_2.Add(b.Tree);


					{
					// AST REWRITE
					// elements: expression_3, b, op_3
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 356:54: -> ^( T_OP_BINARY op_3 $expression_3 $b)
					{
						DebugLocation(356, 57);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:356:57: ^( T_OP_BINARY op_3 $expression_3 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(356, 59);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(356, 71);
						adaptor.AddChild(root_1, stream_op_3.NextTree());
						DebugLocation(356, 77);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(356, 91);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop86;
				}
			}

			loop86:
				;

			} finally { DebugExitSubRule(86); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_3", 46);
			LeaveRule("expression_3", 46);
			LeaveRule_expression_3();
	    }
	 	DebugLocation(357, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_3"); }
		return retval;

	}
	// $ANTLR end "expression_3"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_3() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_3() {}

	// $ANTLR start "op_3"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:359:1: op_3 : ( '+' -> T_PLUS | '-' -> T_MINUS | '&' -> T_BITWISE_AND | '|' -> T_BITWISE_OR | '^' -> T_BITWISE_XOR );
	[GrammarRule("op_3")]
	private AstParserRuleReturnScope<object, IToken> op_3()
	{
		EnterRule_op_3();
		EnterRule("op_3", 47);
		TraceIn("op_3", 47);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal256 = default(IToken);
	    IToken char_literal257 = default(IToken);
	    IToken char_literal258 = default(IToken);
	    IToken char_literal259 = default(IToken);
	    IToken char_literal260 = default(IToken);

	    object char_literal256_tree = default(object);
	    object char_literal257_tree = default(object);
	    object char_literal258_tree = default(object);
	    object char_literal259_tree = default(object);
	    object char_literal260_tree = default(object);
	    RewriteRuleITokenStream stream_180=new RewriteRuleITokenStream(adaptor,"token 180");
	    RewriteRuleITokenStream stream_162=new RewriteRuleITokenStream(adaptor,"token 162");
	    RewriteRuleITokenStream stream_181=new RewriteRuleITokenStream(adaptor,"token 181");
	    RewriteRuleITokenStream stream_166=new RewriteRuleITokenStream(adaptor,"token 166");
	    RewriteRuleITokenStream stream_168=new RewriteRuleITokenStream(adaptor,"token 168");

		try { DebugEnterRule(GrammarFileName, "op_3");
		DebugLocation(359, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:359:6: ( '+' -> T_PLUS | '-' -> T_MINUS | '&' -> T_BITWISE_AND | '|' -> T_BITWISE_OR | '^' -> T_BITWISE_XOR )
			int alt87=5;
			try { DebugEnterDecision(87, decisionCanBacktrack[87]);
			switch (input.LA(1))
			{
			case 166:
				{
				alt87 = 1;
				}
				break;
			case 168:
				{
				alt87 = 2;
				}
				break;
			case 162:
				{
				alt87 = 3;
				}
				break;
			case 181:
				{
				alt87 = 4;
				}
				break;
			case 180:
				{
				alt87 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 87, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(87); }
			switch (alt87)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:359:8: '+'
				{
				DebugLocation(359, 8);
				char_literal256=(IToken)Match(input,166,Follow._166_in_op_32194);  
				stream_166.Add(char_literal256);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 359:12: -> T_PLUS
				{
					DebugLocation(359, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_PLUS, "T_PLUS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:360:4: '-'
				{
				DebugLocation(360, 4);
				char_literal257=(IToken)Match(input,168,Follow._168_in_op_32203);  
				stream_168.Add(char_literal257);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 360:8: -> T_MINUS
				{
					DebugLocation(360, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MINUS, "T_MINUS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:361:4: '&'
				{
				DebugLocation(361, 4);
				char_literal258=(IToken)Match(input,162,Follow._162_in_op_32212);  
				stream_162.Add(char_literal258);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 361:8: -> T_BITWISE_AND
				{
					DebugLocation(361, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_AND, "T_BITWISE_AND"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:362:4: '|'
				{
				DebugLocation(362, 4);
				char_literal259=(IToken)Match(input,181,Follow._181_in_op_32221);  
				stream_181.Add(char_literal259);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 362:8: -> T_BITWISE_OR
				{
					DebugLocation(362, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_OR, "T_BITWISE_OR"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:363:4: '^'
				{
				DebugLocation(363, 4);
				char_literal260=(IToken)Match(input,180,Follow._180_in_op_32230);  
				stream_180.Add(char_literal260);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 363:8: -> T_BITWISE_XOR
				{
					DebugLocation(363, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_XOR, "T_BITWISE_XOR"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_3", 47);
			LeaveRule("op_3", 47);
			LeaveRule_op_3();
	    }
	 	DebugLocation(364, 1);
		} finally { DebugExitRule(GrammarFileName, "op_3"); }
		return retval;

	}
	// $ANTLR end "op_3"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_2() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_2() {}

	// $ANTLR start "expression_2"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:372:1: expression_2 : (a= expression_1 -> $a) ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )* ;
	[GrammarRule("expression_2")]
	private AstParserRuleReturnScope<object, IToken> expression_2()
	{
		EnterRule_expression_2();
		EnterRule("expression_2", 48);
		TraceIn("expression_2", 48);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS261 = default(IToken);
	    IToken WS263 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_2262 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS261_tree = default(object);
	    object WS263_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_op_2=new RewriteRuleSubtreeStream(adaptor,"rule op_2");
	    RewriteRuleSubtreeStream stream_expression_1=new RewriteRuleSubtreeStream(adaptor,"rule expression_1");
		try { DebugEnterRule(GrammarFileName, "expression_2");
		DebugLocation(372, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:373:2: ( (a= expression_1 -> $a) ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:373:4: (a= expression_1 -> $a) ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )*
			{
			DebugLocation(373, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:373:4: (a= expression_1 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:373:5: a= expression_1
			{
			DebugLocation(373, 6);
			PushFollow(Follow._expression_1_in_expression_22252);
			a=expression_1();
			PopFollow();

			stream_expression_1.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 373:19: -> $a
			{
				DebugLocation(373, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(373, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:373:25: ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )*
			try { DebugEnterSubRule(90);
			while (true)
			{
				int alt90=2;
				try { DebugEnterDecision(90, decisionCanBacktrack[90]);
				int LA90_0 = input.LA(1);

				if ((LA90_0==WS))
				{
					int LA90_1 = input.LA(2);

					if ((LA90_1==165))
					{
						int LA90_4 = input.LA(3);

						if ((LA90_4==WS))
						{
							int LA90_5 = input.LA(4);

							if (((LA90_5>=CASE && LA90_5<=CAST)||(LA90_5>=CONVERT && LA90_5<=COUNT)||(LA90_5>=DATEADD && LA90_5<=DATEPART)||LA90_5==EXISTS||LA90_5==NUMBER||LA90_5==SIMPLE_FILE||(LA90_5>=STRING && LA90_5<=SYSTEMVAR)||LA90_5==TOKEN||LA90_5==VARIABLE||LA90_5==163||LA90_5==168))
							{
								alt90 = 1;
							}


						}
						else if (((LA90_4>=CASE && LA90_4<=CAST)||(LA90_4>=CONVERT && LA90_4<=COUNT)||(LA90_4>=DATEADD && LA90_4<=DATEPART)||LA90_4==EXISTS||LA90_4==NUMBER||LA90_4==SIMPLE_FILE||(LA90_4>=STRING && LA90_4<=SYSTEMVAR)||LA90_4==TOKEN||LA90_4==VARIABLE||LA90_4==163||LA90_4==168))
						{
							alt90 = 1;
						}


					}
					else if ((LA90_1==161||LA90_1==170))
					{
						alt90 = 1;
					}


				}
				else if ((LA90_0==161||LA90_0==165||LA90_0==170))
				{
					alt90 = 1;
				}


				} finally { DebugExitDecision(90); }
				switch ( alt90 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:373:26: ( WS )? op_2 ( WS )? b= expression_1
					{
					DebugLocation(373, 26);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:373:26: ( WS )?
					int alt88=2;
					try { DebugEnterSubRule(88);
					try { DebugEnterDecision(88, decisionCanBacktrack[88]);
					int LA88_0 = input.LA(1);

					if ((LA88_0==WS))
					{
						alt88 = 1;
					}
					} finally { DebugExitDecision(88); }
					switch (alt88)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:373:26: WS
						{
						DebugLocation(373, 26);
						WS261=(IToken)Match(input,WS,Follow._WS_in_expression_22259);  
						stream_WS.Add(WS261);


						}
						break;

					}
					} finally { DebugExitSubRule(88); }

					DebugLocation(373, 30);
					PushFollow(Follow._op_2_in_expression_22262);
					op_2262=op_2();
					PopFollow();

					stream_op_2.Add(op_2262.Tree);
					DebugLocation(373, 35);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:373:35: ( WS )?
					int alt89=2;
					try { DebugEnterSubRule(89);
					try { DebugEnterDecision(89, decisionCanBacktrack[89]);
					int LA89_0 = input.LA(1);

					if ((LA89_0==WS))
					{
						alt89 = 1;
					}
					} finally { DebugExitDecision(89); }
					switch (alt89)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:373:35: WS
						{
						DebugLocation(373, 35);
						WS263=(IToken)Match(input,WS,Follow._WS_in_expression_22264);  
						stream_WS.Add(WS263);


						}
						break;

					}
					} finally { DebugExitSubRule(89); }

					DebugLocation(373, 40);
					PushFollow(Follow._expression_1_in_expression_22269);
					b=expression_1();
					PopFollow();

					stream_expression_1.Add(b.Tree);


					{
					// AST REWRITE
					// elements: expression_2, b, op_2
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 373:54: -> ^( T_OP_BINARY op_2 $expression_2 $b)
					{
						DebugLocation(373, 57);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:373:57: ^( T_OP_BINARY op_2 $expression_2 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(373, 59);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(373, 71);
						adaptor.AddChild(root_1, stream_op_2.NextTree());
						DebugLocation(373, 77);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(373, 91);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop90;
				}
			}

			loop90:
				;

			} finally { DebugExitSubRule(90); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_2", 48);
			LeaveRule("expression_2", 48);
			LeaveRule_expression_2();
	    }
	 	DebugLocation(374, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_2"); }
		return retval;

	}
	// $ANTLR end "expression_2"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_2() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_2() {}

	// $ANTLR start "op_2"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:376:1: op_2 : ( '*' -> T_PRODUCT | '/' -> T_DIVIDE | '%' -> T_MODULO );
	[GrammarRule("op_2")]
	private AstParserRuleReturnScope<object, IToken> op_2()
	{
		EnterRule_op_2();
		EnterRule("op_2", 49);
		TraceIn("op_2", 49);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal264 = default(IToken);
	    IToken char_literal265 = default(IToken);
	    IToken char_literal266 = default(IToken);

	    object char_literal264_tree = default(object);
	    object char_literal265_tree = default(object);
	    object char_literal266_tree = default(object);
	    RewriteRuleITokenStream stream_161=new RewriteRuleITokenStream(adaptor,"token 161");
	    RewriteRuleITokenStream stream_170=new RewriteRuleITokenStream(adaptor,"token 170");
	    RewriteRuleITokenStream stream_165=new RewriteRuleITokenStream(adaptor,"token 165");

		try { DebugEnterRule(GrammarFileName, "op_2");
		DebugLocation(376, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:376:6: ( '*' -> T_PRODUCT | '/' -> T_DIVIDE | '%' -> T_MODULO )
			int alt91=3;
			try { DebugEnterDecision(91, decisionCanBacktrack[91]);
			switch (input.LA(1))
			{
			case 165:
				{
				alt91 = 1;
				}
				break;
			case 170:
				{
				alt91 = 2;
				}
				break;
			case 161:
				{
				alt91 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 91, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(91); }
			switch (alt91)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:376:8: '*'
				{
				DebugLocation(376, 8);
				char_literal264=(IToken)Match(input,165,Follow._165_in_op_22295);  
				stream_165.Add(char_literal264);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 376:12: -> T_PRODUCT
				{
					DebugLocation(376, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_PRODUCT, "T_PRODUCT"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:377:4: '/'
				{
				DebugLocation(377, 4);
				char_literal265=(IToken)Match(input,170,Follow._170_in_op_22304);  
				stream_170.Add(char_literal265);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 377:8: -> T_DIVIDE
				{
					DebugLocation(377, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_DIVIDE, "T_DIVIDE"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:378:4: '%'
				{
				DebugLocation(378, 4);
				char_literal266=(IToken)Match(input,161,Follow._161_in_op_22313);  
				stream_161.Add(char_literal266);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 378:8: -> T_MODULO
				{
					DebugLocation(378, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MODULO, "T_MODULO"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_2", 49);
			LeaveRule("op_2", 49);
			LeaveRule_op_2();
	    }
	 	DebugLocation(379, 1);
		} finally { DebugExitRule(GrammarFileName, "op_2"); }
		return retval;

	}
	// $ANTLR end "op_2"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_1() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_1() {}

	// $ANTLR start "expression_1"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:381:1: expression_1 : ( '(' ( WS )? op_1 ( WS )? expression_1 ( WS )? ')' -> ^( T_OP_UNARY op_1 expression_1 ) | expression_atom );
	[GrammarRule("expression_1")]
	private AstParserRuleReturnScope<object, IToken> expression_1()
	{
		EnterRule_expression_1();
		EnterRule("expression_1", 50);
		TraceIn("expression_1", 50);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal267 = default(IToken);
	    IToken WS268 = default(IToken);
	    IToken WS270 = default(IToken);
	    IToken WS272 = default(IToken);
	    IToken char_literal273 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> op_1269 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_1271 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_atom274 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal267_tree = default(object);
	    object WS268_tree = default(object);
	    object WS270_tree = default(object);
	    object WS272_tree = default(object);
	    object char_literal273_tree = default(object);
	    RewriteRuleITokenStream stream_163=new RewriteRuleITokenStream(adaptor,"token 163");
	    RewriteRuleITokenStream stream_164=new RewriteRuleITokenStream(adaptor,"token 164");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression_1=new RewriteRuleSubtreeStream(adaptor,"rule expression_1");
	    RewriteRuleSubtreeStream stream_op_1=new RewriteRuleSubtreeStream(adaptor,"rule op_1");
		try { DebugEnterRule(GrammarFileName, "expression_1");
		DebugLocation(381, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:383:2: ( '(' ( WS )? op_1 ( WS )? expression_1 ( WS )? ')' -> ^( T_OP_UNARY op_1 expression_1 ) | expression_atom )
			int alt95=2;
			try { DebugEnterDecision(95, decisionCanBacktrack[95]);
			int LA95_0 = input.LA(1);

			if ((LA95_0==163))
			{
				switch (input.LA(2))
				{
				case WS:
					{
					int LA95_3 = input.LA(3);

					if ((LA95_3==166||LA95_3==168||LA95_3==182))
					{
						alt95 = 1;
					}
					else if ((LA95_3==SELECT))
					{
						alt95 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 95, 3, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 166:
				case 182:
					{
					alt95 = 1;
					}
					break;
				case 168:
					{
					switch (input.LA(3))
					{
					case WS:
						{
						int LA95_6 = input.LA(4);

						if (((LA95_6>=CASE && LA95_6<=CAST)||(LA95_6>=CONVERT && LA95_6<=COUNT)||(LA95_6>=DATEADD && LA95_6<=DATEPART)||LA95_6==EXISTS||LA95_6==SIMPLE_FILE||(LA95_6>=STRING && LA95_6<=SYSTEMVAR)||LA95_6==TOKEN||LA95_6==VARIABLE||LA95_6==163||LA95_6==168))
						{
							alt95 = 1;
						}
						else if ((LA95_6==NUMBER))
						{
							switch (input.LA(5))
							{
							case WS:
								{
								int LA95_8 = input.LA(6);

								if ((LA95_8==164))
								{
									alt95 = 1;
								}
								else if ((LA95_8==AND||LA95_8==BETWEEN||LA95_8==IN||LA95_8==LIKE||LA95_8==MATCH||LA95_8==NOT||LA95_8==OR||(LA95_8>=158 && LA95_8<=162)||(LA95_8>=165 && LA95_8<=166)||LA95_8==168||LA95_8==170||(LA95_8>=172 && LA95_8<=177)||(LA95_8>=180 && LA95_8<=181)))
								{
									alt95 = 2;
								}
								else
								{
									NoViableAltException nvae = new NoViableAltException("", 95, 8, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
								}
								break;
							case 164:
								{
								alt95 = 1;
								}
								break;
							case 158:
							case 159:
							case 160:
							case 161:
							case 162:
							case 165:
							case 166:
							case 168:
							case 170:
							case 172:
							case 173:
							case 174:
							case 175:
							case 176:
							case 177:
							case 180:
							case 181:
								{
								alt95 = 2;
								}
								break;
							default:
								{
									NoViableAltException nvae = new NoViableAltException("", 95, 7, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}

						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 95, 6, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case CASE:
					case CAST:
					case CONVERT:
					case COUNT:
					case DATEADD:
					case DATEDIFF:
					case DATEPART:
					case EXISTS:
					case SIMPLE_FILE:
					case STRING:
					case SYSTEMVAR:
					case TOKEN:
					case VARIABLE:
					case 163:
					case 168:
						{
						alt95 = 1;
						}
						break;
					case NUMBER:
						{
						switch (input.LA(4))
						{
						case WS:
							{
							int LA95_8 = input.LA(5);

							if ((LA95_8==164))
							{
								alt95 = 1;
							}
							else if ((LA95_8==AND||LA95_8==BETWEEN||LA95_8==IN||LA95_8==LIKE||LA95_8==MATCH||LA95_8==NOT||LA95_8==OR||(LA95_8>=158 && LA95_8<=162)||(LA95_8>=165 && LA95_8<=166)||LA95_8==168||LA95_8==170||(LA95_8>=172 && LA95_8<=177)||(LA95_8>=180 && LA95_8<=181)))
							{
								alt95 = 2;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 95, 8, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case 164:
							{
							alt95 = 1;
							}
							break;
						case 158:
						case 159:
						case 160:
						case 161:
						case 162:
						case 165:
						case 166:
						case 168:
						case 170:
						case 172:
						case 173:
						case 174:
						case 175:
						case 176:
						case 177:
						case 180:
						case 181:
							{
							alt95 = 2;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 95, 7, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 95, 5, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					}
					break;
				case CASE:
				case CAST:
				case CONVERT:
				case COUNT:
				case DATEADD:
				case DATEDIFF:
				case DATEPART:
				case EXISTS:
				case NOT:
				case NUMBER:
				case SELECT:
				case SIMPLE_FILE:
				case STRING:
				case SYSTEMVAR:
				case TOKEN:
				case VARIABLE:
				case 163:
					{
					alt95 = 2;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 95, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else if (((LA95_0>=CASE && LA95_0<=CAST)||(LA95_0>=CONVERT && LA95_0<=COUNT)||(LA95_0>=DATEADD && LA95_0<=DATEPART)||LA95_0==EXISTS||LA95_0==NUMBER||LA95_0==SIMPLE_FILE||(LA95_0>=STRING && LA95_0<=SYSTEMVAR)||LA95_0==TOKEN||LA95_0==VARIABLE||LA95_0==168))
			{
				alt95 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 95, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(95); }
			switch (alt95)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:383:4: '(' ( WS )? op_1 ( WS )? expression_1 ( WS )? ')'
				{
				DebugLocation(383, 4);
				char_literal267=(IToken)Match(input,163,Follow._163_in_expression_12331);  
				stream_163.Add(char_literal267);

				DebugLocation(383, 8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:383:8: ( WS )?
				int alt92=2;
				try { DebugEnterSubRule(92);
				try { DebugEnterDecision(92, decisionCanBacktrack[92]);
				int LA92_0 = input.LA(1);

				if ((LA92_0==WS))
				{
					alt92 = 1;
				}
				} finally { DebugExitDecision(92); }
				switch (alt92)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:383:8: WS
					{
					DebugLocation(383, 8);
					WS268=(IToken)Match(input,WS,Follow._WS_in_expression_12333);  
					stream_WS.Add(WS268);


					}
					break;

				}
				} finally { DebugExitSubRule(92); }

				DebugLocation(383, 12);
				PushFollow(Follow._op_1_in_expression_12336);
				op_1269=op_1();
				PopFollow();

				stream_op_1.Add(op_1269.Tree);
				DebugLocation(383, 17);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:383:17: ( WS )?
				int alt93=2;
				try { DebugEnterSubRule(93);
				try { DebugEnterDecision(93, decisionCanBacktrack[93]);
				int LA93_0 = input.LA(1);

				if ((LA93_0==WS))
				{
					alt93 = 1;
				}
				} finally { DebugExitDecision(93); }
				switch (alt93)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:383:17: WS
					{
					DebugLocation(383, 17);
					WS270=(IToken)Match(input,WS,Follow._WS_in_expression_12338);  
					stream_WS.Add(WS270);


					}
					break;

				}
				} finally { DebugExitSubRule(93); }

				DebugLocation(383, 21);
				PushFollow(Follow._expression_1_in_expression_12341);
				expression_1271=expression_1();
				PopFollow();

				stream_expression_1.Add(expression_1271.Tree);
				DebugLocation(383, 34);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:383:34: ( WS )?
				int alt94=2;
				try { DebugEnterSubRule(94);
				try { DebugEnterDecision(94, decisionCanBacktrack[94]);
				int LA94_0 = input.LA(1);

				if ((LA94_0==WS))
				{
					alt94 = 1;
				}
				} finally { DebugExitDecision(94); }
				switch (alt94)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:383:34: WS
					{
					DebugLocation(383, 34);
					WS272=(IToken)Match(input,WS,Follow._WS_in_expression_12343);  
					stream_WS.Add(WS272);


					}
					break;

				}
				} finally { DebugExitSubRule(94); }

				DebugLocation(383, 38);
				char_literal273=(IToken)Match(input,164,Follow._164_in_expression_12346);  
				stream_164.Add(char_literal273);



				{
				// AST REWRITE
				// elements: expression_1, op_1
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 383:42: -> ^( T_OP_UNARY op_1 expression_1 )
				{
					DebugLocation(383, 45);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:383:45: ^( T_OP_UNARY op_1 expression_1 )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(383, 47);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_UNARY, "T_OP_UNARY"), root_1);

					DebugLocation(383, 58);
					adaptor.AddChild(root_1, stream_op_1.NextTree());
					DebugLocation(383, 63);
					adaptor.AddChild(root_1, stream_expression_1.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:385:4: expression_atom
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(385, 4);
				PushFollow(Follow._expression_atom_in_expression_12363);
				expression_atom274=expression_atom();
				PopFollow();

				adaptor.AddChild(root_0, expression_atom274.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_1", 50);
			LeaveRule("expression_1", 50);
			LeaveRule_expression_1();
	    }
	 	DebugLocation(386, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_1"); }
		return retval;

	}
	// $ANTLR end "expression_1"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_1() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_1() {}

	// $ANTLR start "op_1"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:388:1: op_1 : ( '~' -> T_BITWISE_NOT | '+' -> T_PLUS | '-' -> T_MINUS );
	[GrammarRule("op_1")]
	private AstParserRuleReturnScope<object, IToken> op_1()
	{
		EnterRule_op_1();
		EnterRule("op_1", 51);
		TraceIn("op_1", 51);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal275 = default(IToken);
	    IToken char_literal276 = default(IToken);
	    IToken char_literal277 = default(IToken);

	    object char_literal275_tree = default(object);
	    object char_literal276_tree = default(object);
	    object char_literal277_tree = default(object);
	    RewriteRuleITokenStream stream_182=new RewriteRuleITokenStream(adaptor,"token 182");
	    RewriteRuleITokenStream stream_166=new RewriteRuleITokenStream(adaptor,"token 166");
	    RewriteRuleITokenStream stream_168=new RewriteRuleITokenStream(adaptor,"token 168");

		try { DebugEnterRule(GrammarFileName, "op_1");
		DebugLocation(388, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:388:6: ( '~' -> T_BITWISE_NOT | '+' -> T_PLUS | '-' -> T_MINUS )
			int alt96=3;
			try { DebugEnterDecision(96, decisionCanBacktrack[96]);
			switch (input.LA(1))
			{
			case 182:
				{
				alt96 = 1;
				}
				break;
			case 166:
				{
				alt96 = 2;
				}
				break;
			case 168:
				{
				alt96 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 96, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(96); }
			switch (alt96)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:388:8: '~'
				{
				DebugLocation(388, 8);
				char_literal275=(IToken)Match(input,182,Follow._182_in_op_12373);  
				stream_182.Add(char_literal275);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 388:12: -> T_BITWISE_NOT
				{
					DebugLocation(388, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_NOT, "T_BITWISE_NOT"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:389:5: '+'
				{
				DebugLocation(389, 5);
				char_literal276=(IToken)Match(input,166,Follow._166_in_op_12383);  
				stream_166.Add(char_literal276);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 389:9: -> T_PLUS
				{
					DebugLocation(389, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_PLUS, "T_PLUS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:390:4: '-'
				{
				DebugLocation(390, 4);
				char_literal277=(IToken)Match(input,168,Follow._168_in_op_12392);  
				stream_168.Add(char_literal277);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 390:8: -> T_MINUS
				{
					DebugLocation(390, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MINUS, "T_MINUS"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_1", 51);
			LeaveRule("op_1", 51);
			LeaveRule_op_1();
	    }
	 	DebugLocation(391, 1);
		} finally { DebugExitRule(GrammarFileName, "op_1"); }
		return retval;

	}
	// $ANTLR end "op_1"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_atom() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_atom() {}

	// $ANTLR start "expression_atom"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:393:1: expression_atom : ( number -> ^( T_INTEGER number ) | string | SYSTEMVAR -> ^( T_SYSTEMVAR SYSTEMVAR ) | variable | subquery | '(' expression ')' -> expression | functioncall_or_column | specialfunctioncall | case | EXISTS ( WS )? '(' ( WS )? select_command ( WS )? ')' -> ^( T_EXISTS select_command ) );
	[GrammarRule("expression_atom")]
	private AstParserRuleReturnScope<object, IToken> expression_atom()
	{
		EnterRule_expression_atom();
		EnterRule("expression_atom", 52);
		TraceIn("expression_atom", 52);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken SYSTEMVAR280 = default(IToken);
	    IToken char_literal283 = default(IToken);
	    IToken char_literal285 = default(IToken);
	    IToken EXISTS289 = default(IToken);
	    IToken WS290 = default(IToken);
	    IToken char_literal291 = default(IToken);
	    IToken WS292 = default(IToken);
	    IToken WS294 = default(IToken);
	    IToken char_literal295 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> number278 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> string279 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> variable281 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> subquery282 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression284 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> functioncall_or_column286 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> specialfunctioncall287 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> case288 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> select_command293 = default(AstParserRuleReturnScope<object, IToken>);

	    object SYSTEMVAR280_tree = default(object);
	    object char_literal283_tree = default(object);
	    object char_literal285_tree = default(object);
	    object EXISTS289_tree = default(object);
	    object WS290_tree = default(object);
	    object char_literal291_tree = default(object);
	    object WS292_tree = default(object);
	    object WS294_tree = default(object);
	    object char_literal295_tree = default(object);
	    RewriteRuleITokenStream stream_163=new RewriteRuleITokenStream(adaptor,"token 163");
	    RewriteRuleITokenStream stream_164=new RewriteRuleITokenStream(adaptor,"token 164");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_EXISTS=new RewriteRuleITokenStream(adaptor,"token EXISTS");
	    RewriteRuleITokenStream stream_SYSTEMVAR=new RewriteRuleITokenStream(adaptor,"token SYSTEMVAR");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_select_command=new RewriteRuleSubtreeStream(adaptor,"rule select_command");
	    RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
		try { DebugEnterRule(GrammarFileName, "expression_atom");
		DebugLocation(393, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:394:2: ( number -> ^( T_INTEGER number ) | string | SYSTEMVAR -> ^( T_SYSTEMVAR SYSTEMVAR ) | variable | subquery | '(' expression ')' -> expression | functioncall_or_column | specialfunctioncall | case | EXISTS ( WS )? '(' ( WS )? select_command ( WS )? ')' -> ^( T_EXISTS select_command ) )
			int alt100=10;
			try { DebugEnterDecision(100, decisionCanBacktrack[100]);
			switch (input.LA(1))
			{
			case NUMBER:
			case 168:
				{
				alt100 = 1;
				}
				break;
			case STRING:
				{
				alt100 = 2;
				}
				break;
			case SYSTEMVAR:
				{
				alt100 = 3;
				}
				break;
			case VARIABLE:
				{
				alt100 = 4;
				}
				break;
			case 163:
				{
				int LA100_5 = input.LA(2);

				if ((LA100_5==SELECT||LA100_5==WS))
				{
					alt100 = 5;
				}
				else if (((LA100_5>=CASE && LA100_5<=CAST)||(LA100_5>=CONVERT && LA100_5<=COUNT)||(LA100_5>=DATEADD && LA100_5<=DATEPART)||LA100_5==EXISTS||(LA100_5>=NOT && LA100_5<=NUMBER)||LA100_5==SIMPLE_FILE||(LA100_5>=STRING && LA100_5<=SYSTEMVAR)||LA100_5==TOKEN||LA100_5==VARIABLE||LA100_5==163||LA100_5==168))
				{
					alt100 = 6;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 100, 5, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case COUNT:
			case SIMPLE_FILE:
			case TOKEN:
				{
				alt100 = 7;
				}
				break;
			case CAST:
			case CONVERT:
			case DATEADD:
			case DATEDIFF:
			case DATEPART:
				{
				alt100 = 8;
				}
				break;
			case CASE:
				{
				alt100 = 9;
				}
				break;
			case EXISTS:
				{
				alt100 = 10;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 100, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(100); }
			switch (alt100)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:394:4: number
				{
				DebugLocation(394, 4);
				PushFollow(Follow._number_in_expression_atom2407);
				number278=number();
				PopFollow();

				stream_number.Add(number278.Tree);


				{
				// AST REWRITE
				// elements: number
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 394:11: -> ^( T_INTEGER number )
				{
					DebugLocation(394, 14);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:394:14: ^( T_INTEGER number )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(394, 16);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_INTEGER, "T_INTEGER"), root_1);

					DebugLocation(394, 26);
					adaptor.AddChild(root_1, stream_number.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:395:4: string
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(395, 4);
				PushFollow(Follow._string_in_expression_atom2420);
				string279=@string();
				PopFollow();

				adaptor.AddChild(root_0, string279.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:396:4: SYSTEMVAR
				{
				DebugLocation(396, 4);
				SYSTEMVAR280=(IToken)Match(input,SYSTEMVAR,Follow._SYSTEMVAR_in_expression_atom2425);  
				stream_SYSTEMVAR.Add(SYSTEMVAR280);



				{
				// AST REWRITE
				// elements: SYSTEMVAR
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 396:14: -> ^( T_SYSTEMVAR SYSTEMVAR )
				{
					DebugLocation(396, 17);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:396:17: ^( T_SYSTEMVAR SYSTEMVAR )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(396, 19);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SYSTEMVAR, "T_SYSTEMVAR"), root_1);

					DebugLocation(396, 31);
					adaptor.AddChild(root_1, stream_SYSTEMVAR.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:397:4: variable
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(397, 4);
				PushFollow(Follow._variable_in_expression_atom2438);
				variable281=variable();
				PopFollow();

				adaptor.AddChild(root_0, variable281.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:398:4: subquery
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(398, 4);
				PushFollow(Follow._subquery_in_expression_atom2443);
				subquery282=subquery();
				PopFollow();

				adaptor.AddChild(root_0, subquery282.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:399:4: '(' expression ')'
				{
				DebugLocation(399, 4);
				char_literal283=(IToken)Match(input,163,Follow._163_in_expression_atom2448);  
				stream_163.Add(char_literal283);

				DebugLocation(399, 8);
				PushFollow(Follow._expression_in_expression_atom2450);
				expression284=expression();
				PopFollow();

				stream_expression.Add(expression284.Tree);
				DebugLocation(399, 19);
				char_literal285=(IToken)Match(input,164,Follow._164_in_expression_atom2452);  
				stream_164.Add(char_literal285);



				{
				// AST REWRITE
				// elements: expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 399:23: -> expression
				{
					DebugLocation(399, 26);
					adaptor.AddChild(root_0, stream_expression.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:400:4: functioncall_or_column
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(400, 4);
				PushFollow(Follow._functioncall_or_column_in_expression_atom2461);
				functioncall_or_column286=functioncall_or_column();
				PopFollow();

				adaptor.AddChild(root_0, functioncall_or_column286.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:401:4: specialfunctioncall
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(401, 4);
				PushFollow(Follow._specialfunctioncall_in_expression_atom2466);
				specialfunctioncall287=specialfunctioncall();
				PopFollow();

				adaptor.AddChild(root_0, specialfunctioncall287.Tree);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:402:4: case
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(402, 4);
				PushFollow(Follow._case_in_expression_atom2471);
				case288=@case();
				PopFollow();

				adaptor.AddChild(root_0, case288.Tree);

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:403:4: EXISTS ( WS )? '(' ( WS )? select_command ( WS )? ')'
				{
				DebugLocation(403, 4);
				EXISTS289=(IToken)Match(input,EXISTS,Follow._EXISTS_in_expression_atom2476);  
				stream_EXISTS.Add(EXISTS289);

				DebugLocation(403, 11);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:403:11: ( WS )?
				int alt97=2;
				try { DebugEnterSubRule(97);
				try { DebugEnterDecision(97, decisionCanBacktrack[97]);
				int LA97_0 = input.LA(1);

				if ((LA97_0==WS))
				{
					alt97 = 1;
				}
				} finally { DebugExitDecision(97); }
				switch (alt97)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:403:11: WS
					{
					DebugLocation(403, 11);
					WS290=(IToken)Match(input,WS,Follow._WS_in_expression_atom2478);  
					stream_WS.Add(WS290);


					}
					break;

				}
				} finally { DebugExitSubRule(97); }

				DebugLocation(403, 15);
				char_literal291=(IToken)Match(input,163,Follow._163_in_expression_atom2481);  
				stream_163.Add(char_literal291);

				DebugLocation(403, 19);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:403:19: ( WS )?
				int alt98=2;
				try { DebugEnterSubRule(98);
				try { DebugEnterDecision(98, decisionCanBacktrack[98]);
				int LA98_0 = input.LA(1);

				if ((LA98_0==WS))
				{
					alt98 = 1;
				}
				} finally { DebugExitDecision(98); }
				switch (alt98)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:403:19: WS
					{
					DebugLocation(403, 19);
					WS292=(IToken)Match(input,WS,Follow._WS_in_expression_atom2483);  
					stream_WS.Add(WS292);


					}
					break;

				}
				} finally { DebugExitSubRule(98); }

				DebugLocation(403, 23);
				PushFollow(Follow._select_command_in_expression_atom2486);
				select_command293=select_command();
				PopFollow();

				stream_select_command.Add(select_command293.Tree);
				DebugLocation(403, 38);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:403:38: ( WS )?
				int alt99=2;
				try { DebugEnterSubRule(99);
				try { DebugEnterDecision(99, decisionCanBacktrack[99]);
				int LA99_0 = input.LA(1);

				if ((LA99_0==WS))
				{
					alt99 = 1;
				}
				} finally { DebugExitDecision(99); }
				switch (alt99)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:403:38: WS
					{
					DebugLocation(403, 38);
					WS294=(IToken)Match(input,WS,Follow._WS_in_expression_atom2488);  
					stream_WS.Add(WS294);


					}
					break;

				}
				} finally { DebugExitSubRule(99); }

				DebugLocation(403, 42);
				char_literal295=(IToken)Match(input,164,Follow._164_in_expression_atom2491);  
				stream_164.Add(char_literal295);



				{
				// AST REWRITE
				// elements: select_command
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 403:46: -> ^( T_EXISTS select_command )
				{
					DebugLocation(403, 49);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:403:49: ^( T_EXISTS select_command )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(403, 51);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_EXISTS, "T_EXISTS"), root_1);

					DebugLocation(403, 60);
					adaptor.AddChild(root_1, stream_select_command.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_atom", 52);
			LeaveRule("expression_atom", 52);
			LeaveRule_expression_atom();
	    }
	 	DebugLocation(404, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_atom"); }
		return retval;

	}
	// $ANTLR end "expression_atom"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_functioncall_or_column() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_functioncall_or_column() {}

	// $ANTLR start "functioncall_or_column"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:407:1: functioncall_or_column : ( TOKEN ( WS )? '(' ( WS )? ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )? ')' -> ^( T_FUNCTIONCALL TOKEN ( expression )* ) | COUNT ( WS )? '(' ( WS )? expression ( WS )? ')' -> ^( T_FUNCTIONCALL T_COUNT expression ) | COUNT ( WS )? '(' ( WS )? DISTINCT WS expression ( WS )? ')' -> ^( T_FUNCTIONCALL T_DISTINCTCOUNT expression ) | COUNT ( WS )? '(' ( WS )? all_columns ( WS )? ')' -> ^( T_FUNCTIONCALL T_COUNT all_columns ) | COUNT ( WS )? '(' ( WS )? DISTINCT WS all_columns ( WS )? ')' -> ^( T_FUNCTIONCALL T_DISTINCTCOUNT all_columns ) | ( table_alias ( WS )? '.' ( WS )? )? column_name -> ^( T_COLUMN column_name ( table_alias )? ) );
	[GrammarRule("functioncall_or_column")]
	private AstParserRuleReturnScope<object, IToken> functioncall_or_column()
	{
		EnterRule_functioncall_or_column();
		EnterRule("functioncall_or_column", 53);
		TraceIn("functioncall_or_column", 53);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN296 = default(IToken);
	    IToken WS297 = default(IToken);
	    IToken char_literal298 = default(IToken);
	    IToken WS299 = default(IToken);
	    IToken WS301 = default(IToken);
	    IToken char_literal302 = default(IToken);
	    IToken WS303 = default(IToken);
	    IToken WS305 = default(IToken);
	    IToken char_literal306 = default(IToken);
	    IToken COUNT307 = default(IToken);
	    IToken WS308 = default(IToken);
	    IToken char_literal309 = default(IToken);
	    IToken WS310 = default(IToken);
	    IToken WS312 = default(IToken);
	    IToken char_literal313 = default(IToken);
	    IToken COUNT314 = default(IToken);
	    IToken WS315 = default(IToken);
	    IToken char_literal316 = default(IToken);
	    IToken WS317 = default(IToken);
	    IToken DISTINCT318 = default(IToken);
	    IToken WS319 = default(IToken);
	    IToken WS321 = default(IToken);
	    IToken char_literal322 = default(IToken);
	    IToken COUNT323 = default(IToken);
	    IToken WS324 = default(IToken);
	    IToken char_literal325 = default(IToken);
	    IToken WS326 = default(IToken);
	    IToken WS328 = default(IToken);
	    IToken char_literal329 = default(IToken);
	    IToken COUNT330 = default(IToken);
	    IToken WS331 = default(IToken);
	    IToken char_literal332 = default(IToken);
	    IToken WS333 = default(IToken);
	    IToken DISTINCT334 = default(IToken);
	    IToken WS335 = default(IToken);
	    IToken WS337 = default(IToken);
	    IToken char_literal338 = default(IToken);
	    IToken WS340 = default(IToken);
	    IToken char_literal341 = default(IToken);
	    IToken WS342 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression300 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression304 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression311 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression320 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> all_columns327 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> all_columns336 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> table_alias339 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> column_name343 = default(AstParserRuleReturnScope<object, IToken>);

	    object TOKEN296_tree = default(object);
	    object WS297_tree = default(object);
	    object char_literal298_tree = default(object);
	    object WS299_tree = default(object);
	    object WS301_tree = default(object);
	    object char_literal302_tree = default(object);
	    object WS303_tree = default(object);
	    object WS305_tree = default(object);
	    object char_literal306_tree = default(object);
	    object COUNT307_tree = default(object);
	    object WS308_tree = default(object);
	    object char_literal309_tree = default(object);
	    object WS310_tree = default(object);
	    object WS312_tree = default(object);
	    object char_literal313_tree = default(object);
	    object COUNT314_tree = default(object);
	    object WS315_tree = default(object);
	    object char_literal316_tree = default(object);
	    object WS317_tree = default(object);
	    object DISTINCT318_tree = default(object);
	    object WS319_tree = default(object);
	    object WS321_tree = default(object);
	    object char_literal322_tree = default(object);
	    object COUNT323_tree = default(object);
	    object WS324_tree = default(object);
	    object char_literal325_tree = default(object);
	    object WS326_tree = default(object);
	    object WS328_tree = default(object);
	    object char_literal329_tree = default(object);
	    object COUNT330_tree = default(object);
	    object WS331_tree = default(object);
	    object char_literal332_tree = default(object);
	    object WS333_tree = default(object);
	    object DISTINCT334_tree = default(object);
	    object WS335_tree = default(object);
	    object WS337_tree = default(object);
	    object char_literal338_tree = default(object);
	    object WS340_tree = default(object);
	    object char_literal341_tree = default(object);
	    object WS342_tree = default(object);
	    RewriteRuleITokenStream stream_163=new RewriteRuleITokenStream(adaptor,"token 163");
	    RewriteRuleITokenStream stream_164=new RewriteRuleITokenStream(adaptor,"token 164");
	    RewriteRuleITokenStream stream_COUNT=new RewriteRuleITokenStream(adaptor,"token COUNT");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_169=new RewriteRuleITokenStream(adaptor,"token 169");
	    RewriteRuleITokenStream stream_DISTINCT=new RewriteRuleITokenStream(adaptor,"token DISTINCT");
	    RewriteRuleITokenStream stream_TOKEN=new RewriteRuleITokenStream(adaptor,"token TOKEN");
	    RewriteRuleITokenStream stream_167=new RewriteRuleITokenStream(adaptor,"token 167");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_table_alias=new RewriteRuleSubtreeStream(adaptor,"rule table_alias");
	    RewriteRuleSubtreeStream stream_all_columns=new RewriteRuleSubtreeStream(adaptor,"rule all_columns");
	    RewriteRuleSubtreeStream stream_column_name=new RewriteRuleSubtreeStream(adaptor,"rule column_name");
		try { DebugEnterRule(GrammarFileName, "functioncall_or_column");
		DebugLocation(407, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:408:2: ( TOKEN ( WS )? '(' ( WS )? ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )? ')' -> ^( T_FUNCTIONCALL TOKEN ( expression )* ) | COUNT ( WS )? '(' ( WS )? expression ( WS )? ')' -> ^( T_FUNCTIONCALL T_COUNT expression ) | COUNT ( WS )? '(' ( WS )? DISTINCT WS expression ( WS )? ')' -> ^( T_FUNCTIONCALL T_DISTINCTCOUNT expression ) | COUNT ( WS )? '(' ( WS )? all_columns ( WS )? ')' -> ^( T_FUNCTIONCALL T_COUNT all_columns ) | COUNT ( WS )? '(' ( WS )? DISTINCT WS all_columns ( WS )? ')' -> ^( T_FUNCTIONCALL T_DISTINCTCOUNT all_columns ) | ( table_alias ( WS )? '.' ( WS )? )? column_name -> ^( T_COLUMN column_name ( table_alias )? ) )
			int alt123=6;
			try { DebugEnterDecision(123, decisionCanBacktrack[123]);
			switch (input.LA(1))
			{
			case TOKEN:
				{
				alt123 = 1;
				}
				break;
			case COUNT:
				{
				int LA123_2 = input.LA(2);

				if ((LA123_2==WS))
				{
					int LA123_4 = input.LA(3);

					if ((LA123_4==163))
					{
						switch (input.LA(4))
						{
						case WS:
							{
							switch (input.LA(5))
							{
							case CASE:
							case CAST:
							case CONVERT:
							case COUNT:
							case DATEADD:
							case DATEDIFF:
							case DATEPART:
							case EXISTS:
							case NOT:
							case NUMBER:
							case STRING:
							case SYSTEMVAR:
							case TOKEN:
							case VARIABLE:
							case 163:
							case 168:
								{
								alt123 = 2;
								}
								break;
							case SIMPLE_FILE:
								{
								switch (input.LA(6))
								{
								case WS:
									{
									int LA123_11 = input.LA(7);

									if ((LA123_11==169))
									{
										switch (input.LA(8))
										{
										case WS:
											{
											int LA123_14 = input.LA(9);

											if ((LA123_14==SIMPLE_FILE))
											{
												alt123 = 2;
											}
											else if ((LA123_14==165))
											{
												alt123 = 4;
											}
											else
											{
												NoViableAltException nvae = new NoViableAltException("", 123, 14, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
											}
											break;
										case SIMPLE_FILE:
											{
											alt123 = 2;
											}
											break;
										case 165:
											{
											alt123 = 4;
											}
											break;
										default:
											{
												NoViableAltException nvae = new NoViableAltException("", 123, 12, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
										}

									}
									else if ((LA123_11==AND||LA123_11==BETWEEN||LA123_11==IN||LA123_11==LIKE||LA123_11==MATCH||LA123_11==NOT||LA123_11==OR||(LA123_11>=158 && LA123_11<=162)||(LA123_11>=164 && LA123_11<=166)||LA123_11==168||LA123_11==170||(LA123_11>=172 && LA123_11<=177)||(LA123_11>=180 && LA123_11<=181)))
									{
										alt123 = 2;
									}
									else
									{
										NoViableAltException nvae = new NoViableAltException("", 123, 11, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
									}
									break;
								case 169:
									{
									switch (input.LA(7))
									{
									case WS:
										{
										int LA123_14 = input.LA(8);

										if ((LA123_14==SIMPLE_FILE))
										{
											alt123 = 2;
										}
										else if ((LA123_14==165))
										{
											alt123 = 4;
										}
										else
										{
											NoViableAltException nvae = new NoViableAltException("", 123, 14, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
										}
										break;
									case SIMPLE_FILE:
										{
										alt123 = 2;
										}
										break;
									case 165:
										{
										alt123 = 4;
										}
										break;
									default:
										{
											NoViableAltException nvae = new NoViableAltException("", 123, 12, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}

									}
									break;
								case 158:
								case 159:
								case 160:
								case 161:
								case 162:
								case 164:
								case 165:
								case 166:
								case 168:
								case 170:
								case 172:
								case 173:
								case 174:
								case 175:
								case 176:
								case 177:
								case 180:
								case 181:
									{
									alt123 = 2;
									}
									break;
								default:
									{
										NoViableAltException nvae = new NoViableAltException("", 123, 8, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

								}
								break;
							case DISTINCT:
								{
								int LA123_9 = input.LA(6);

								if ((LA123_9==WS))
								{
									switch (input.LA(7))
									{
									case CASE:
									case CAST:
									case CONVERT:
									case COUNT:
									case DATEADD:
									case DATEDIFF:
									case DATEPART:
									case EXISTS:
									case NOT:
									case NUMBER:
									case STRING:
									case SYSTEMVAR:
									case TOKEN:
									case VARIABLE:
									case 163:
									case 168:
										{
										alt123 = 3;
										}
										break;
									case SIMPLE_FILE:
										{
										switch (input.LA(8))
										{
										case WS:
											{
											int LA123_18 = input.LA(9);

											if ((LA123_18==169))
											{
												switch (input.LA(10))
												{
												case WS:
													{
													int LA123_20 = input.LA(11);

													if ((LA123_20==SIMPLE_FILE))
													{
														alt123 = 3;
													}
													else if ((LA123_20==165))
													{
														alt123 = 5;
													}
													else
													{
														NoViableAltException nvae = new NoViableAltException("", 123, 20, input);
														DebugRecognitionException(nvae);
														throw nvae;
													}
													}
													break;
												case SIMPLE_FILE:
													{
													alt123 = 3;
													}
													break;
												case 165:
													{
													alt123 = 5;
													}
													break;
												default:
													{
														NoViableAltException nvae = new NoViableAltException("", 123, 19, input);
														DebugRecognitionException(nvae);
														throw nvae;
													}
												}

											}
											else if ((LA123_18==AND||LA123_18==BETWEEN||LA123_18==IN||LA123_18==LIKE||LA123_18==MATCH||LA123_18==NOT||LA123_18==OR||(LA123_18>=158 && LA123_18<=162)||(LA123_18>=164 && LA123_18<=166)||LA123_18==168||LA123_18==170||(LA123_18>=172 && LA123_18<=177)||(LA123_18>=180 && LA123_18<=181)))
											{
												alt123 = 3;
											}
											else
											{
												NoViableAltException nvae = new NoViableAltException("", 123, 18, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
											}
											break;
										case 169:
											{
											switch (input.LA(9))
											{
											case WS:
												{
												int LA123_20 = input.LA(10);

												if ((LA123_20==SIMPLE_FILE))
												{
													alt123 = 3;
												}
												else if ((LA123_20==165))
												{
													alt123 = 5;
												}
												else
												{
													NoViableAltException nvae = new NoViableAltException("", 123, 20, input);
													DebugRecognitionException(nvae);
													throw nvae;
												}
												}
												break;
											case SIMPLE_FILE:
												{
												alt123 = 3;
												}
												break;
											case 165:
												{
												alt123 = 5;
												}
												break;
											default:
												{
													NoViableAltException nvae = new NoViableAltException("", 123, 19, input);
													DebugRecognitionException(nvae);
													throw nvae;
												}
											}

											}
											break;
										case 158:
										case 159:
										case 160:
										case 161:
										case 162:
										case 164:
										case 165:
										case 166:
										case 168:
										case 170:
										case 172:
										case 173:
										case 174:
										case 175:
										case 176:
										case 177:
										case 180:
										case 181:
											{
											alt123 = 3;
											}
											break;
										default:
											{
												NoViableAltException nvae = new NoViableAltException("", 123, 16, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
										}

										}
										break;
									case 165:
										{
										alt123 = 5;
										}
										break;
									default:
										{
											NoViableAltException nvae = new NoViableAltException("", 123, 13, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}

								}
								else
								{
									NoViableAltException nvae = new NoViableAltException("", 123, 9, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
								}
								break;
							case 165:
								{
								alt123 = 4;
								}
								break;
							default:
								{
									NoViableAltException nvae = new NoViableAltException("", 123, 6, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}

							}
							break;
						case CASE:
						case CAST:
						case CONVERT:
						case COUNT:
						case DATEADD:
						case DATEDIFF:
						case DATEPART:
						case EXISTS:
						case NOT:
						case NUMBER:
						case STRING:
						case SYSTEMVAR:
						case TOKEN:
						case VARIABLE:
						case 163:
						case 168:
							{
							alt123 = 2;
							}
							break;
						case SIMPLE_FILE:
							{
							switch (input.LA(5))
							{
							case WS:
								{
								int LA123_11 = input.LA(6);

								if ((LA123_11==169))
								{
									switch (input.LA(7))
									{
									case WS:
										{
										int LA123_14 = input.LA(8);

										if ((LA123_14==SIMPLE_FILE))
										{
											alt123 = 2;
										}
										else if ((LA123_14==165))
										{
											alt123 = 4;
										}
										else
										{
											NoViableAltException nvae = new NoViableAltException("", 123, 14, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
										}
										break;
									case SIMPLE_FILE:
										{
										alt123 = 2;
										}
										break;
									case 165:
										{
										alt123 = 4;
										}
										break;
									default:
										{
											NoViableAltException nvae = new NoViableAltException("", 123, 12, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}

								}
								else if ((LA123_11==AND||LA123_11==BETWEEN||LA123_11==IN||LA123_11==LIKE||LA123_11==MATCH||LA123_11==NOT||LA123_11==OR||(LA123_11>=158 && LA123_11<=162)||(LA123_11>=164 && LA123_11<=166)||LA123_11==168||LA123_11==170||(LA123_11>=172 && LA123_11<=177)||(LA123_11>=180 && LA123_11<=181)))
								{
									alt123 = 2;
								}
								else
								{
									NoViableAltException nvae = new NoViableAltException("", 123, 11, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
								}
								break;
							case 169:
								{
								switch (input.LA(6))
								{
								case WS:
									{
									int LA123_14 = input.LA(7);

									if ((LA123_14==SIMPLE_FILE))
									{
										alt123 = 2;
									}
									else if ((LA123_14==165))
									{
										alt123 = 4;
									}
									else
									{
										NoViableAltException nvae = new NoViableAltException("", 123, 14, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
									}
									break;
								case SIMPLE_FILE:
									{
									alt123 = 2;
									}
									break;
								case 165:
									{
									alt123 = 4;
									}
									break;
								default:
									{
										NoViableAltException nvae = new NoViableAltException("", 123, 12, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

								}
								break;
							case 158:
							case 159:
							case 160:
							case 161:
							case 162:
							case 164:
							case 165:
							case 166:
							case 168:
							case 170:
							case 172:
							case 173:
							case 174:
							case 175:
							case 176:
							case 177:
							case 180:
							case 181:
								{
								alt123 = 2;
								}
								break;
							default:
								{
									NoViableAltException nvae = new NoViableAltException("", 123, 8, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}

							}
							break;
						case DISTINCT:
							{
							int LA123_9 = input.LA(5);

							if ((LA123_9==WS))
							{
								switch (input.LA(6))
								{
								case CASE:
								case CAST:
								case CONVERT:
								case COUNT:
								case DATEADD:
								case DATEDIFF:
								case DATEPART:
								case EXISTS:
								case NOT:
								case NUMBER:
								case STRING:
								case SYSTEMVAR:
								case TOKEN:
								case VARIABLE:
								case 163:
								case 168:
									{
									alt123 = 3;
									}
									break;
								case SIMPLE_FILE:
									{
									switch (input.LA(7))
									{
									case WS:
										{
										int LA123_18 = input.LA(8);

										if ((LA123_18==169))
										{
											switch (input.LA(9))
											{
											case WS:
												{
												int LA123_20 = input.LA(10);

												if ((LA123_20==SIMPLE_FILE))
												{
													alt123 = 3;
												}
												else if ((LA123_20==165))
												{
													alt123 = 5;
												}
												else
												{
													NoViableAltException nvae = new NoViableAltException("", 123, 20, input);
													DebugRecognitionException(nvae);
													throw nvae;
												}
												}
												break;
											case SIMPLE_FILE:
												{
												alt123 = 3;
												}
												break;
											case 165:
												{
												alt123 = 5;
												}
												break;
											default:
												{
													NoViableAltException nvae = new NoViableAltException("", 123, 19, input);
													DebugRecognitionException(nvae);
													throw nvae;
												}
											}

										}
										else if ((LA123_18==AND||LA123_18==BETWEEN||LA123_18==IN||LA123_18==LIKE||LA123_18==MATCH||LA123_18==NOT||LA123_18==OR||(LA123_18>=158 && LA123_18<=162)||(LA123_18>=164 && LA123_18<=166)||LA123_18==168||LA123_18==170||(LA123_18>=172 && LA123_18<=177)||(LA123_18>=180 && LA123_18<=181)))
										{
											alt123 = 3;
										}
										else
										{
											NoViableAltException nvae = new NoViableAltException("", 123, 18, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
										}
										break;
									case 169:
										{
										switch (input.LA(8))
										{
										case WS:
											{
											int LA123_20 = input.LA(9);

											if ((LA123_20==SIMPLE_FILE))
											{
												alt123 = 3;
											}
											else if ((LA123_20==165))
											{
												alt123 = 5;
											}
											else
											{
												NoViableAltException nvae = new NoViableAltException("", 123, 20, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
											}
											break;
										case SIMPLE_FILE:
											{
											alt123 = 3;
											}
											break;
										case 165:
											{
											alt123 = 5;
											}
											break;
										default:
											{
												NoViableAltException nvae = new NoViableAltException("", 123, 19, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
										}

										}
										break;
									case 158:
									case 159:
									case 160:
									case 161:
									case 162:
									case 164:
									case 165:
									case 166:
									case 168:
									case 170:
									case 172:
									case 173:
									case 174:
									case 175:
									case 176:
									case 177:
									case 180:
									case 181:
										{
										alt123 = 3;
										}
										break;
									default:
										{
											NoViableAltException nvae = new NoViableAltException("", 123, 16, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}

									}
									break;
								case 165:
									{
									alt123 = 5;
									}
									break;
								default:
									{
										NoViableAltException nvae = new NoViableAltException("", 123, 13, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 123, 9, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case 165:
							{
							alt123 = 4;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 123, 5, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 123, 4, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA123_2==163))
				{
					switch (input.LA(3))
					{
					case WS:
						{
						switch (input.LA(4))
						{
						case CASE:
						case CAST:
						case CONVERT:
						case COUNT:
						case DATEADD:
						case DATEDIFF:
						case DATEPART:
						case EXISTS:
						case NOT:
						case NUMBER:
						case STRING:
						case SYSTEMVAR:
						case TOKEN:
						case VARIABLE:
						case 163:
						case 168:
							{
							alt123 = 2;
							}
							break;
						case SIMPLE_FILE:
							{
							switch (input.LA(5))
							{
							case WS:
								{
								int LA123_11 = input.LA(6);

								if ((LA123_11==169))
								{
									switch (input.LA(7))
									{
									case WS:
										{
										int LA123_14 = input.LA(8);

										if ((LA123_14==SIMPLE_FILE))
										{
											alt123 = 2;
										}
										else if ((LA123_14==165))
										{
											alt123 = 4;
										}
										else
										{
											NoViableAltException nvae = new NoViableAltException("", 123, 14, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
										}
										break;
									case SIMPLE_FILE:
										{
										alt123 = 2;
										}
										break;
									case 165:
										{
										alt123 = 4;
										}
										break;
									default:
										{
											NoViableAltException nvae = new NoViableAltException("", 123, 12, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}

								}
								else if ((LA123_11==AND||LA123_11==BETWEEN||LA123_11==IN||LA123_11==LIKE||LA123_11==MATCH||LA123_11==NOT||LA123_11==OR||(LA123_11>=158 && LA123_11<=162)||(LA123_11>=164 && LA123_11<=166)||LA123_11==168||LA123_11==170||(LA123_11>=172 && LA123_11<=177)||(LA123_11>=180 && LA123_11<=181)))
								{
									alt123 = 2;
								}
								else
								{
									NoViableAltException nvae = new NoViableAltException("", 123, 11, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
								}
								break;
							case 169:
								{
								switch (input.LA(6))
								{
								case WS:
									{
									int LA123_14 = input.LA(7);

									if ((LA123_14==SIMPLE_FILE))
									{
										alt123 = 2;
									}
									else if ((LA123_14==165))
									{
										alt123 = 4;
									}
									else
									{
										NoViableAltException nvae = new NoViableAltException("", 123, 14, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
									}
									break;
								case SIMPLE_FILE:
									{
									alt123 = 2;
									}
									break;
								case 165:
									{
									alt123 = 4;
									}
									break;
								default:
									{
										NoViableAltException nvae = new NoViableAltException("", 123, 12, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

								}
								break;
							case 158:
							case 159:
							case 160:
							case 161:
							case 162:
							case 164:
							case 165:
							case 166:
							case 168:
							case 170:
							case 172:
							case 173:
							case 174:
							case 175:
							case 176:
							case 177:
							case 180:
							case 181:
								{
								alt123 = 2;
								}
								break;
							default:
								{
									NoViableAltException nvae = new NoViableAltException("", 123, 8, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}

							}
							break;
						case DISTINCT:
							{
							int LA123_9 = input.LA(5);

							if ((LA123_9==WS))
							{
								switch (input.LA(6))
								{
								case CASE:
								case CAST:
								case CONVERT:
								case COUNT:
								case DATEADD:
								case DATEDIFF:
								case DATEPART:
								case EXISTS:
								case NOT:
								case NUMBER:
								case STRING:
								case SYSTEMVAR:
								case TOKEN:
								case VARIABLE:
								case 163:
								case 168:
									{
									alt123 = 3;
									}
									break;
								case SIMPLE_FILE:
									{
									switch (input.LA(7))
									{
									case WS:
										{
										int LA123_18 = input.LA(8);

										if ((LA123_18==169))
										{
											switch (input.LA(9))
											{
											case WS:
												{
												int LA123_20 = input.LA(10);

												if ((LA123_20==SIMPLE_FILE))
												{
													alt123 = 3;
												}
												else if ((LA123_20==165))
												{
													alt123 = 5;
												}
												else
												{
													NoViableAltException nvae = new NoViableAltException("", 123, 20, input);
													DebugRecognitionException(nvae);
													throw nvae;
												}
												}
												break;
											case SIMPLE_FILE:
												{
												alt123 = 3;
												}
												break;
											case 165:
												{
												alt123 = 5;
												}
												break;
											default:
												{
													NoViableAltException nvae = new NoViableAltException("", 123, 19, input);
													DebugRecognitionException(nvae);
													throw nvae;
												}
											}

										}
										else if ((LA123_18==AND||LA123_18==BETWEEN||LA123_18==IN||LA123_18==LIKE||LA123_18==MATCH||LA123_18==NOT||LA123_18==OR||(LA123_18>=158 && LA123_18<=162)||(LA123_18>=164 && LA123_18<=166)||LA123_18==168||LA123_18==170||(LA123_18>=172 && LA123_18<=177)||(LA123_18>=180 && LA123_18<=181)))
										{
											alt123 = 3;
										}
										else
										{
											NoViableAltException nvae = new NoViableAltException("", 123, 18, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
										}
										break;
									case 169:
										{
										switch (input.LA(8))
										{
										case WS:
											{
											int LA123_20 = input.LA(9);

											if ((LA123_20==SIMPLE_FILE))
											{
												alt123 = 3;
											}
											else if ((LA123_20==165))
											{
												alt123 = 5;
											}
											else
											{
												NoViableAltException nvae = new NoViableAltException("", 123, 20, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
											}
											break;
										case SIMPLE_FILE:
											{
											alt123 = 3;
											}
											break;
										case 165:
											{
											alt123 = 5;
											}
											break;
										default:
											{
												NoViableAltException nvae = new NoViableAltException("", 123, 19, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
										}

										}
										break;
									case 158:
									case 159:
									case 160:
									case 161:
									case 162:
									case 164:
									case 165:
									case 166:
									case 168:
									case 170:
									case 172:
									case 173:
									case 174:
									case 175:
									case 176:
									case 177:
									case 180:
									case 181:
										{
										alt123 = 3;
										}
										break;
									default:
										{
											NoViableAltException nvae = new NoViableAltException("", 123, 16, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}

									}
									break;
								case 165:
									{
									alt123 = 5;
									}
									break;
								default:
									{
										NoViableAltException nvae = new NoViableAltException("", 123, 13, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 123, 9, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case 165:
							{
							alt123 = 4;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 123, 6, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case CASE:
					case CAST:
					case CONVERT:
					case COUNT:
					case DATEADD:
					case DATEDIFF:
					case DATEPART:
					case EXISTS:
					case NOT:
					case NUMBER:
					case STRING:
					case SYSTEMVAR:
					case TOKEN:
					case VARIABLE:
					case 163:
					case 168:
						{
						alt123 = 2;
						}
						break;
					case SIMPLE_FILE:
						{
						switch (input.LA(4))
						{
						case WS:
							{
							int LA123_11 = input.LA(5);

							if ((LA123_11==169))
							{
								switch (input.LA(6))
								{
								case WS:
									{
									int LA123_14 = input.LA(7);

									if ((LA123_14==SIMPLE_FILE))
									{
										alt123 = 2;
									}
									else if ((LA123_14==165))
									{
										alt123 = 4;
									}
									else
									{
										NoViableAltException nvae = new NoViableAltException("", 123, 14, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
									}
									break;
								case SIMPLE_FILE:
									{
									alt123 = 2;
									}
									break;
								case 165:
									{
									alt123 = 4;
									}
									break;
								default:
									{
										NoViableAltException nvae = new NoViableAltException("", 123, 12, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

							}
							else if ((LA123_11==AND||LA123_11==BETWEEN||LA123_11==IN||LA123_11==LIKE||LA123_11==MATCH||LA123_11==NOT||LA123_11==OR||(LA123_11>=158 && LA123_11<=162)||(LA123_11>=164 && LA123_11<=166)||LA123_11==168||LA123_11==170||(LA123_11>=172 && LA123_11<=177)||(LA123_11>=180 && LA123_11<=181)))
							{
								alt123 = 2;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 123, 11, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case 169:
							{
							switch (input.LA(5))
							{
							case WS:
								{
								int LA123_14 = input.LA(6);

								if ((LA123_14==SIMPLE_FILE))
								{
									alt123 = 2;
								}
								else if ((LA123_14==165))
								{
									alt123 = 4;
								}
								else
								{
									NoViableAltException nvae = new NoViableAltException("", 123, 14, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
								}
								break;
							case SIMPLE_FILE:
								{
								alt123 = 2;
								}
								break;
							case 165:
								{
								alt123 = 4;
								}
								break;
							default:
								{
									NoViableAltException nvae = new NoViableAltException("", 123, 12, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}

							}
							break;
						case 158:
						case 159:
						case 160:
						case 161:
						case 162:
						case 164:
						case 165:
						case 166:
						case 168:
						case 170:
						case 172:
						case 173:
						case 174:
						case 175:
						case 176:
						case 177:
						case 180:
						case 181:
							{
							alt123 = 2;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 123, 8, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case DISTINCT:
						{
						int LA123_9 = input.LA(4);

						if ((LA123_9==WS))
						{
							switch (input.LA(5))
							{
							case CASE:
							case CAST:
							case CONVERT:
							case COUNT:
							case DATEADD:
							case DATEDIFF:
							case DATEPART:
							case EXISTS:
							case NOT:
							case NUMBER:
							case STRING:
							case SYSTEMVAR:
							case TOKEN:
							case VARIABLE:
							case 163:
							case 168:
								{
								alt123 = 3;
								}
								break;
							case SIMPLE_FILE:
								{
								switch (input.LA(6))
								{
								case WS:
									{
									int LA123_18 = input.LA(7);

									if ((LA123_18==169))
									{
										switch (input.LA(8))
										{
										case WS:
											{
											int LA123_20 = input.LA(9);

											if ((LA123_20==SIMPLE_FILE))
											{
												alt123 = 3;
											}
											else if ((LA123_20==165))
											{
												alt123 = 5;
											}
											else
											{
												NoViableAltException nvae = new NoViableAltException("", 123, 20, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
											}
											break;
										case SIMPLE_FILE:
											{
											alt123 = 3;
											}
											break;
										case 165:
											{
											alt123 = 5;
											}
											break;
										default:
											{
												NoViableAltException nvae = new NoViableAltException("", 123, 19, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
										}

									}
									else if ((LA123_18==AND||LA123_18==BETWEEN||LA123_18==IN||LA123_18==LIKE||LA123_18==MATCH||LA123_18==NOT||LA123_18==OR||(LA123_18>=158 && LA123_18<=162)||(LA123_18>=164 && LA123_18<=166)||LA123_18==168||LA123_18==170||(LA123_18>=172 && LA123_18<=177)||(LA123_18>=180 && LA123_18<=181)))
									{
										alt123 = 3;
									}
									else
									{
										NoViableAltException nvae = new NoViableAltException("", 123, 18, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
									}
									break;
								case 169:
									{
									switch (input.LA(7))
									{
									case WS:
										{
										int LA123_20 = input.LA(8);

										if ((LA123_20==SIMPLE_FILE))
										{
											alt123 = 3;
										}
										else if ((LA123_20==165))
										{
											alt123 = 5;
										}
										else
										{
											NoViableAltException nvae = new NoViableAltException("", 123, 20, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
										}
										break;
									case SIMPLE_FILE:
										{
										alt123 = 3;
										}
										break;
									case 165:
										{
										alt123 = 5;
										}
										break;
									default:
										{
											NoViableAltException nvae = new NoViableAltException("", 123, 19, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}

									}
									break;
								case 158:
								case 159:
								case 160:
								case 161:
								case 162:
								case 164:
								case 165:
								case 166:
								case 168:
								case 170:
								case 172:
								case 173:
								case 174:
								case 175:
								case 176:
								case 177:
								case 180:
								case 181:
									{
									alt123 = 3;
									}
									break;
								default:
									{
										NoViableAltException nvae = new NoViableAltException("", 123, 16, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

								}
								break;
							case 165:
								{
								alt123 = 5;
								}
								break;
							default:
								{
									NoViableAltException nvae = new NoViableAltException("", 123, 13, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}

						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 123, 9, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case 165:
						{
						alt123 = 4;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 123, 5, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 123, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SIMPLE_FILE:
				{
				alt123 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 123, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(123); }
			switch (alt123)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:408:4: TOKEN ( WS )? '(' ( WS )? ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )? ')'
				{
				DebugLocation(408, 4);
				TOKEN296=(IToken)Match(input,TOKEN,Follow._TOKEN_in_functioncall_or_column2511);  
				stream_TOKEN.Add(TOKEN296);

				DebugLocation(408, 10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:408:10: ( WS )?
				int alt101=2;
				try { DebugEnterSubRule(101);
				try { DebugEnterDecision(101, decisionCanBacktrack[101]);
				int LA101_0 = input.LA(1);

				if ((LA101_0==WS))
				{
					alt101 = 1;
				}
				} finally { DebugExitDecision(101); }
				switch (alt101)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:408:10: WS
					{
					DebugLocation(408, 10);
					WS297=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2513);  
					stream_WS.Add(WS297);


					}
					break;

				}
				} finally { DebugExitSubRule(101); }

				DebugLocation(408, 14);
				char_literal298=(IToken)Match(input,163,Follow._163_in_functioncall_or_column2516);  
				stream_163.Add(char_literal298);

				DebugLocation(408, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:408:18: ( WS )?
				int alt102=2;
				try { DebugEnterSubRule(102);
				try { DebugEnterDecision(102, decisionCanBacktrack[102]);
				int LA102_0 = input.LA(1);

				if ((LA102_0==WS))
				{
					alt102 = 1;
				}
				} finally { DebugExitDecision(102); }
				switch (alt102)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:408:18: WS
					{
					DebugLocation(408, 18);
					WS299=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2518);  
					stream_WS.Add(WS299);


					}
					break;

				}
				} finally { DebugExitSubRule(102); }

				DebugLocation(408, 22);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:408:22: ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )?
				int alt107=2;
				try { DebugEnterSubRule(107);
				try { DebugEnterDecision(107, decisionCanBacktrack[107]);
				int LA107_0 = input.LA(1);

				if (((LA107_0>=CASE && LA107_0<=CAST)||(LA107_0>=CONVERT && LA107_0<=COUNT)||(LA107_0>=DATEADD && LA107_0<=DATEPART)||LA107_0==EXISTS||(LA107_0>=NOT && LA107_0<=NUMBER)||LA107_0==SIMPLE_FILE||(LA107_0>=STRING && LA107_0<=SYSTEMVAR)||LA107_0==TOKEN||LA107_0==VARIABLE||LA107_0==163||LA107_0==168))
				{
					alt107 = 1;
				}
				} finally { DebugExitDecision(107); }
				switch (alt107)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:408:23: expression ( WS )? ( ',' ( WS )? expression ( WS )? )*
					{
					DebugLocation(408, 23);
					PushFollow(Follow._expression_in_functioncall_or_column2522);
					expression300=expression();
					PopFollow();

					stream_expression.Add(expression300.Tree);
					DebugLocation(408, 34);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:408:34: ( WS )?
					int alt103=2;
					try { DebugEnterSubRule(103);
					try { DebugEnterDecision(103, decisionCanBacktrack[103]);
					int LA103_0 = input.LA(1);

					if ((LA103_0==WS))
					{
						alt103 = 1;
					}
					} finally { DebugExitDecision(103); }
					switch (alt103)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:408:34: WS
						{
						DebugLocation(408, 34);
						WS301=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2524);  
						stream_WS.Add(WS301);


						}
						break;

					}
					} finally { DebugExitSubRule(103); }

					DebugLocation(408, 38);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:408:38: ( ',' ( WS )? expression ( WS )? )*
					try { DebugEnterSubRule(106);
					while (true)
					{
						int alt106=2;
						try { DebugEnterDecision(106, decisionCanBacktrack[106]);
						int LA106_0 = input.LA(1);

						if ((LA106_0==167))
						{
							alt106 = 1;
						}


						} finally { DebugExitDecision(106); }
						switch ( alt106 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:408:39: ',' ( WS )? expression ( WS )?
							{
							DebugLocation(408, 39);
							char_literal302=(IToken)Match(input,167,Follow._167_in_functioncall_or_column2528);  
							stream_167.Add(char_literal302);

							DebugLocation(408, 43);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:408:43: ( WS )?
							int alt104=2;
							try { DebugEnterSubRule(104);
							try { DebugEnterDecision(104, decisionCanBacktrack[104]);
							int LA104_0 = input.LA(1);

							if ((LA104_0==WS))
							{
								alt104 = 1;
							}
							} finally { DebugExitDecision(104); }
							switch (alt104)
							{
							case 1:
								DebugEnterAlt(1);
								// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:408:43: WS
								{
								DebugLocation(408, 43);
								WS303=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2530);  
								stream_WS.Add(WS303);


								}
								break;

							}
							} finally { DebugExitSubRule(104); }

							DebugLocation(408, 47);
							PushFollow(Follow._expression_in_functioncall_or_column2533);
							expression304=expression();
							PopFollow();

							stream_expression.Add(expression304.Tree);
							DebugLocation(408, 58);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:408:58: ( WS )?
							int alt105=2;
							try { DebugEnterSubRule(105);
							try { DebugEnterDecision(105, decisionCanBacktrack[105]);
							int LA105_0 = input.LA(1);

							if ((LA105_0==WS))
							{
								alt105 = 1;
							}
							} finally { DebugExitDecision(105); }
							switch (alt105)
							{
							case 1:
								DebugEnterAlt(1);
								// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:408:58: WS
								{
								DebugLocation(408, 58);
								WS305=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2535);  
								stream_WS.Add(WS305);


								}
								break;

							}
							} finally { DebugExitSubRule(105); }


							}
							break;

						default:
							goto loop106;
						}
					}

					loop106:
						;

					} finally { DebugExitSubRule(106); }


					}
					break;

				}
				} finally { DebugExitSubRule(107); }

				DebugLocation(408, 66);
				char_literal306=(IToken)Match(input,164,Follow._164_in_functioncall_or_column2542);  
				stream_164.Add(char_literal306);



				{
				// AST REWRITE
				// elements: expression, TOKEN
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 408:70: -> ^( T_FUNCTIONCALL TOKEN ( expression )* )
				{
					DebugLocation(408, 73);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:408:73: ^( T_FUNCTIONCALL TOKEN ( expression )* )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(408, 75);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(408, 90);
					adaptor.AddChild(root_1, stream_TOKEN.NextNode());
					DebugLocation(408, 96);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:408:96: ( expression )*
					while ( stream_expression.HasNext )
					{
						DebugLocation(408, 96);
						adaptor.AddChild(root_1, stream_expression.NextTree());

					}
					stream_expression.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:409:4: COUNT ( WS )? '(' ( WS )? expression ( WS )? ')'
				{
				DebugLocation(409, 4);
				COUNT307=(IToken)Match(input,COUNT,Follow._COUNT_in_functioncall_or_column2558);  
				stream_COUNT.Add(COUNT307);

				DebugLocation(409, 10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:409:10: ( WS )?
				int alt108=2;
				try { DebugEnterSubRule(108);
				try { DebugEnterDecision(108, decisionCanBacktrack[108]);
				int LA108_0 = input.LA(1);

				if ((LA108_0==WS))
				{
					alt108 = 1;
				}
				} finally { DebugExitDecision(108); }
				switch (alt108)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:409:10: WS
					{
					DebugLocation(409, 10);
					WS308=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2560);  
					stream_WS.Add(WS308);


					}
					break;

				}
				} finally { DebugExitSubRule(108); }

				DebugLocation(409, 14);
				char_literal309=(IToken)Match(input,163,Follow._163_in_functioncall_or_column2563);  
				stream_163.Add(char_literal309);

				DebugLocation(409, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:409:18: ( WS )?
				int alt109=2;
				try { DebugEnterSubRule(109);
				try { DebugEnterDecision(109, decisionCanBacktrack[109]);
				int LA109_0 = input.LA(1);

				if ((LA109_0==WS))
				{
					alt109 = 1;
				}
				} finally { DebugExitDecision(109); }
				switch (alt109)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:409:18: WS
					{
					DebugLocation(409, 18);
					WS310=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2565);  
					stream_WS.Add(WS310);


					}
					break;

				}
				} finally { DebugExitSubRule(109); }

				DebugLocation(409, 22);
				PushFollow(Follow._expression_in_functioncall_or_column2568);
				expression311=expression();
				PopFollow();

				stream_expression.Add(expression311.Tree);
				DebugLocation(409, 33);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:409:33: ( WS )?
				int alt110=2;
				try { DebugEnterSubRule(110);
				try { DebugEnterDecision(110, decisionCanBacktrack[110]);
				int LA110_0 = input.LA(1);

				if ((LA110_0==WS))
				{
					alt110 = 1;
				}
				} finally { DebugExitDecision(110); }
				switch (alt110)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:409:33: WS
					{
					DebugLocation(409, 33);
					WS312=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2570);  
					stream_WS.Add(WS312);


					}
					break;

				}
				} finally { DebugExitSubRule(110); }

				DebugLocation(409, 37);
				char_literal313=(IToken)Match(input,164,Follow._164_in_functioncall_or_column2573);  
				stream_164.Add(char_literal313);



				{
				// AST REWRITE
				// elements: expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 409:41: -> ^( T_FUNCTIONCALL T_COUNT expression )
				{
					DebugLocation(409, 44);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:409:44: ^( T_FUNCTIONCALL T_COUNT expression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(409, 46);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(409, 61);
					adaptor.AddChild(root_1, (object)adaptor.Create(T_COUNT, "T_COUNT"));
					DebugLocation(409, 69);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:410:4: COUNT ( WS )? '(' ( WS )? DISTINCT WS expression ( WS )? ')'
				{
				DebugLocation(410, 4);
				COUNT314=(IToken)Match(input,COUNT,Follow._COUNT_in_functioncall_or_column2588);  
				stream_COUNT.Add(COUNT314);

				DebugLocation(410, 10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:410:10: ( WS )?
				int alt111=2;
				try { DebugEnterSubRule(111);
				try { DebugEnterDecision(111, decisionCanBacktrack[111]);
				int LA111_0 = input.LA(1);

				if ((LA111_0==WS))
				{
					alt111 = 1;
				}
				} finally { DebugExitDecision(111); }
				switch (alt111)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:410:10: WS
					{
					DebugLocation(410, 10);
					WS315=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2590);  
					stream_WS.Add(WS315);


					}
					break;

				}
				} finally { DebugExitSubRule(111); }

				DebugLocation(410, 14);
				char_literal316=(IToken)Match(input,163,Follow._163_in_functioncall_or_column2593);  
				stream_163.Add(char_literal316);

				DebugLocation(410, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:410:18: ( WS )?
				int alt112=2;
				try { DebugEnterSubRule(112);
				try { DebugEnterDecision(112, decisionCanBacktrack[112]);
				int LA112_0 = input.LA(1);

				if ((LA112_0==WS))
				{
					alt112 = 1;
				}
				} finally { DebugExitDecision(112); }
				switch (alt112)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:410:18: WS
					{
					DebugLocation(410, 18);
					WS317=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2595);  
					stream_WS.Add(WS317);


					}
					break;

				}
				} finally { DebugExitSubRule(112); }

				DebugLocation(410, 22);
				DISTINCT318=(IToken)Match(input,DISTINCT,Follow._DISTINCT_in_functioncall_or_column2598);  
				stream_DISTINCT.Add(DISTINCT318);

				DebugLocation(410, 31);
				WS319=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2600);  
				stream_WS.Add(WS319);

				DebugLocation(410, 34);
				PushFollow(Follow._expression_in_functioncall_or_column2602);
				expression320=expression();
				PopFollow();

				stream_expression.Add(expression320.Tree);
				DebugLocation(410, 45);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:410:45: ( WS )?
				int alt113=2;
				try { DebugEnterSubRule(113);
				try { DebugEnterDecision(113, decisionCanBacktrack[113]);
				int LA113_0 = input.LA(1);

				if ((LA113_0==WS))
				{
					alt113 = 1;
				}
				} finally { DebugExitDecision(113); }
				switch (alt113)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:410:45: WS
					{
					DebugLocation(410, 45);
					WS321=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2604);  
					stream_WS.Add(WS321);


					}
					break;

				}
				} finally { DebugExitSubRule(113); }

				DebugLocation(410, 49);
				char_literal322=(IToken)Match(input,164,Follow._164_in_functioncall_or_column2607);  
				stream_164.Add(char_literal322);



				{
				// AST REWRITE
				// elements: expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 410:53: -> ^( T_FUNCTIONCALL T_DISTINCTCOUNT expression )
				{
					DebugLocation(410, 56);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:410:56: ^( T_FUNCTIONCALL T_DISTINCTCOUNT expression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(410, 58);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(410, 73);
					adaptor.AddChild(root_1, (object)adaptor.Create(T_DISTINCTCOUNT, "T_DISTINCTCOUNT"));
					DebugLocation(410, 89);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:411:4: COUNT ( WS )? '(' ( WS )? all_columns ( WS )? ')'
				{
				DebugLocation(411, 4);
				COUNT323=(IToken)Match(input,COUNT,Follow._COUNT_in_functioncall_or_column2622);  
				stream_COUNT.Add(COUNT323);

				DebugLocation(411, 10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:411:10: ( WS )?
				int alt114=2;
				try { DebugEnterSubRule(114);
				try { DebugEnterDecision(114, decisionCanBacktrack[114]);
				int LA114_0 = input.LA(1);

				if ((LA114_0==WS))
				{
					alt114 = 1;
				}
				} finally { DebugExitDecision(114); }
				switch (alt114)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:411:10: WS
					{
					DebugLocation(411, 10);
					WS324=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2624);  
					stream_WS.Add(WS324);


					}
					break;

				}
				} finally { DebugExitSubRule(114); }

				DebugLocation(411, 14);
				char_literal325=(IToken)Match(input,163,Follow._163_in_functioncall_or_column2627);  
				stream_163.Add(char_literal325);

				DebugLocation(411, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:411:18: ( WS )?
				int alt115=2;
				try { DebugEnterSubRule(115);
				try { DebugEnterDecision(115, decisionCanBacktrack[115]);
				int LA115_0 = input.LA(1);

				if ((LA115_0==WS))
				{
					alt115 = 1;
				}
				} finally { DebugExitDecision(115); }
				switch (alt115)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:411:18: WS
					{
					DebugLocation(411, 18);
					WS326=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2629);  
					stream_WS.Add(WS326);


					}
					break;

				}
				} finally { DebugExitSubRule(115); }

				DebugLocation(411, 22);
				PushFollow(Follow._all_columns_in_functioncall_or_column2632);
				all_columns327=all_columns();
				PopFollow();

				stream_all_columns.Add(all_columns327.Tree);
				DebugLocation(411, 34);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:411:34: ( WS )?
				int alt116=2;
				try { DebugEnterSubRule(116);
				try { DebugEnterDecision(116, decisionCanBacktrack[116]);
				int LA116_0 = input.LA(1);

				if ((LA116_0==WS))
				{
					alt116 = 1;
				}
				} finally { DebugExitDecision(116); }
				switch (alt116)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:411:34: WS
					{
					DebugLocation(411, 34);
					WS328=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2634);  
					stream_WS.Add(WS328);


					}
					break;

				}
				} finally { DebugExitSubRule(116); }

				DebugLocation(411, 38);
				char_literal329=(IToken)Match(input,164,Follow._164_in_functioncall_or_column2637);  
				stream_164.Add(char_literal329);



				{
				// AST REWRITE
				// elements: all_columns
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 411:42: -> ^( T_FUNCTIONCALL T_COUNT all_columns )
				{
					DebugLocation(411, 45);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:411:45: ^( T_FUNCTIONCALL T_COUNT all_columns )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(411, 47);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(411, 62);
					adaptor.AddChild(root_1, (object)adaptor.Create(T_COUNT, "T_COUNT"));
					DebugLocation(411, 70);
					adaptor.AddChild(root_1, stream_all_columns.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:412:4: COUNT ( WS )? '(' ( WS )? DISTINCT WS all_columns ( WS )? ')'
				{
				DebugLocation(412, 4);
				COUNT330=(IToken)Match(input,COUNT,Follow._COUNT_in_functioncall_or_column2652);  
				stream_COUNT.Add(COUNT330);

				DebugLocation(412, 10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:412:10: ( WS )?
				int alt117=2;
				try { DebugEnterSubRule(117);
				try { DebugEnterDecision(117, decisionCanBacktrack[117]);
				int LA117_0 = input.LA(1);

				if ((LA117_0==WS))
				{
					alt117 = 1;
				}
				} finally { DebugExitDecision(117); }
				switch (alt117)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:412:10: WS
					{
					DebugLocation(412, 10);
					WS331=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2654);  
					stream_WS.Add(WS331);


					}
					break;

				}
				} finally { DebugExitSubRule(117); }

				DebugLocation(412, 14);
				char_literal332=(IToken)Match(input,163,Follow._163_in_functioncall_or_column2657);  
				stream_163.Add(char_literal332);

				DebugLocation(412, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:412:18: ( WS )?
				int alt118=2;
				try { DebugEnterSubRule(118);
				try { DebugEnterDecision(118, decisionCanBacktrack[118]);
				int LA118_0 = input.LA(1);

				if ((LA118_0==WS))
				{
					alt118 = 1;
				}
				} finally { DebugExitDecision(118); }
				switch (alt118)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:412:18: WS
					{
					DebugLocation(412, 18);
					WS333=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2659);  
					stream_WS.Add(WS333);


					}
					break;

				}
				} finally { DebugExitSubRule(118); }

				DebugLocation(412, 22);
				DISTINCT334=(IToken)Match(input,DISTINCT,Follow._DISTINCT_in_functioncall_or_column2662);  
				stream_DISTINCT.Add(DISTINCT334);

				DebugLocation(412, 31);
				WS335=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2664);  
				stream_WS.Add(WS335);

				DebugLocation(412, 34);
				PushFollow(Follow._all_columns_in_functioncall_or_column2666);
				all_columns336=all_columns();
				PopFollow();

				stream_all_columns.Add(all_columns336.Tree);
				DebugLocation(412, 46);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:412:46: ( WS )?
				int alt119=2;
				try { DebugEnterSubRule(119);
				try { DebugEnterDecision(119, decisionCanBacktrack[119]);
				int LA119_0 = input.LA(1);

				if ((LA119_0==WS))
				{
					alt119 = 1;
				}
				} finally { DebugExitDecision(119); }
				switch (alt119)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:412:46: WS
					{
					DebugLocation(412, 46);
					WS337=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2668);  
					stream_WS.Add(WS337);


					}
					break;

				}
				} finally { DebugExitSubRule(119); }

				DebugLocation(412, 50);
				char_literal338=(IToken)Match(input,164,Follow._164_in_functioncall_or_column2671);  
				stream_164.Add(char_literal338);



				{
				// AST REWRITE
				// elements: all_columns
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 412:54: -> ^( T_FUNCTIONCALL T_DISTINCTCOUNT all_columns )
				{
					DebugLocation(412, 57);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:412:57: ^( T_FUNCTIONCALL T_DISTINCTCOUNT all_columns )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(412, 59);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(412, 74);
					adaptor.AddChild(root_1, (object)adaptor.Create(T_DISTINCTCOUNT, "T_DISTINCTCOUNT"));
					DebugLocation(412, 90);
					adaptor.AddChild(root_1, stream_all_columns.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:414:4: ( table_alias ( WS )? '.' ( WS )? )? column_name
				{
				DebugLocation(414, 4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:414:4: ( table_alias ( WS )? '.' ( WS )? )?
				int alt122=2;
				try { DebugEnterSubRule(122);
				try { DebugEnterDecision(122, decisionCanBacktrack[122]);
				int LA122_0 = input.LA(1);

				if ((LA122_0==SIMPLE_FILE))
				{
					int LA122_1 = input.LA(2);

					if ((LA122_1==WS))
					{
						int LA122_2 = input.LA(3);

						if ((LA122_2==169))
						{
							alt122 = 1;
						}
					}
					else if ((LA122_1==169))
					{
						alt122 = 1;
					}
				}
				} finally { DebugExitDecision(122); }
				switch (alt122)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:414:5: table_alias ( WS )? '.' ( WS )?
					{
					DebugLocation(414, 5);
					PushFollow(Follow._table_alias_in_functioncall_or_column2689);
					table_alias339=table_alias();
					PopFollow();

					stream_table_alias.Add(table_alias339.Tree);
					DebugLocation(414, 17);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:414:17: ( WS )?
					int alt120=2;
					try { DebugEnterSubRule(120);
					try { DebugEnterDecision(120, decisionCanBacktrack[120]);
					int LA120_0 = input.LA(1);

					if ((LA120_0==WS))
					{
						alt120 = 1;
					}
					} finally { DebugExitDecision(120); }
					switch (alt120)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:414:17: WS
						{
						DebugLocation(414, 17);
						WS340=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2691);  
						stream_WS.Add(WS340);


						}
						break;

					}
					} finally { DebugExitSubRule(120); }

					DebugLocation(414, 21);
					char_literal341=(IToken)Match(input,169,Follow._169_in_functioncall_or_column2694);  
					stream_169.Add(char_literal341);

					DebugLocation(414, 25);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:414:25: ( WS )?
					int alt121=2;
					try { DebugEnterSubRule(121);
					try { DebugEnterDecision(121, decisionCanBacktrack[121]);
					int LA121_0 = input.LA(1);

					if ((LA121_0==WS))
					{
						alt121 = 1;
					}
					} finally { DebugExitDecision(121); }
					switch (alt121)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:414:25: WS
						{
						DebugLocation(414, 25);
						WS342=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2696);  
						stream_WS.Add(WS342);


						}
						break;

					}
					} finally { DebugExitSubRule(121); }


					}
					break;

				}
				} finally { DebugExitSubRule(122); }

				DebugLocation(414, 31);
				PushFollow(Follow._column_name_in_functioncall_or_column2701);
				column_name343=column_name();
				PopFollow();

				stream_column_name.Add(column_name343.Tree);


				{
				// AST REWRITE
				// elements: column_name, table_alias
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 414:43: -> ^( T_COLUMN column_name ( table_alias )? )
				{
					DebugLocation(414, 46);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:414:46: ^( T_COLUMN column_name ( table_alias )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(414, 48);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_COLUMN, "T_COLUMN"), root_1);

					DebugLocation(414, 57);
					adaptor.AddChild(root_1, stream_column_name.NextTree());
					DebugLocation(414, 69);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:414:69: ( table_alias )?
					if (stream_table_alias.HasNext)
					{
						DebugLocation(414, 69);
						adaptor.AddChild(root_1, stream_table_alias.NextTree());

					}
					stream_table_alias.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("functioncall_or_column", 53);
			LeaveRule("functioncall_or_column", 53);
			LeaveRule_functioncall_or_column();
	    }
	 	DebugLocation(415, 1);
		} finally { DebugExitRule(GrammarFileName, "functioncall_or_column"); }
		return retval;

	}
	// $ANTLR end "functioncall_or_column"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_column_name() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_column_name() {}

	// $ANTLR start "column_name"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:417:1: column_name : SIMPLE_FILE ;
	[GrammarRule("column_name")]
	private AstParserRuleReturnScope<object, IToken> column_name()
	{
		EnterRule_column_name();
		EnterRule("column_name", 54);
		TraceIn("column_name", 54);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken SIMPLE_FILE344 = default(IToken);

	    object SIMPLE_FILE344_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "column_name");
		DebugLocation(417, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:418:2: ( SIMPLE_FILE )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:418:4: SIMPLE_FILE
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(418, 4);
			SIMPLE_FILE344=(IToken)Match(input,SIMPLE_FILE,Follow._SIMPLE_FILE_in_column_name2724); 
			SIMPLE_FILE344_tree = (object)adaptor.Create(SIMPLE_FILE344);
			adaptor.AddChild(root_0, SIMPLE_FILE344_tree);


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("column_name", 54);
			LeaveRule("column_name", 54);
			LeaveRule_column_name();
	    }
	 	DebugLocation(419, 1);
		} finally { DebugExitRule(GrammarFileName, "column_name"); }
		return retval;

	}
	// $ANTLR end "column_name"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_table_alias() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_table_alias() {}

	// $ANTLR start "table_alias"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:421:1: table_alias : SIMPLE_FILE -> ^( T_TABLE_ALIAS SIMPLE_FILE ) ;
	[GrammarRule("table_alias")]
	private AstParserRuleReturnScope<object, IToken> table_alias()
	{
		EnterRule_table_alias();
		EnterRule("table_alias", 55);
		TraceIn("table_alias", 55);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken SIMPLE_FILE345 = default(IToken);

	    object SIMPLE_FILE345_tree = default(object);
	    RewriteRuleITokenStream stream_SIMPLE_FILE=new RewriteRuleITokenStream(adaptor,"token SIMPLE_FILE");

		try { DebugEnterRule(GrammarFileName, "table_alias");
		DebugLocation(421, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:422:2: ( SIMPLE_FILE -> ^( T_TABLE_ALIAS SIMPLE_FILE ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:422:4: SIMPLE_FILE
			{
			DebugLocation(422, 4);
			SIMPLE_FILE345=(IToken)Match(input,SIMPLE_FILE,Follow._SIMPLE_FILE_in_table_alias2735);  
			stream_SIMPLE_FILE.Add(SIMPLE_FILE345);



			{
			// AST REWRITE
			// elements: SIMPLE_FILE
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 422:16: -> ^( T_TABLE_ALIAS SIMPLE_FILE )
			{
				DebugLocation(422, 19);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:422:19: ^( T_TABLE_ALIAS SIMPLE_FILE )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(422, 21);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_TABLE_ALIAS, "T_TABLE_ALIAS"), root_1);

				DebugLocation(422, 35);
				adaptor.AddChild(root_1, stream_SIMPLE_FILE.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("table_alias", 55);
			LeaveRule("table_alias", 55);
			LeaveRule_table_alias();
	    }
	 	DebugLocation(423, 1);
		} finally { DebugExitRule(GrammarFileName, "table_alias"); }
		return retval;

	}
	// $ANTLR end "table_alias"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_specialfunctioncall() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_specialfunctioncall() {}

	// $ANTLR start "specialfunctioncall"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:425:1: specialfunctioncall : ( CONVERT ( WS )? '(' ( WS )? TOKEN ( WS )? ',' ( WS )? expression ( WS )? ( ',' ( WS )? STRING ( WS )? )? ')' -> ^( T_CONVERT TOKEN expression ( STRING )? ) | CAST ( WS )? '(' ( WS )? expression WS AS WS datatype ( WS )? ')' -> ^( T_CONVERT TOKEN expression ) | DATEADD ( WS )? '(' ( WS )? datepart ( WS )? ',' ( WS )? expression ( WS )? ',' ( WS )? expression ( WS )? ')' -> ^( T_FUNCTIONCALL DATEADD datepart ( expression )+ ) | DATEDIFF ( WS )? '(' ( WS )? datepart ( WS )? ',' ( WS )? expression ( WS )? ',' ( WS )? expression ( WS )? ')' -> ^( T_FUNCTIONCALL DATEDIFF datepart ( expression )+ ) | DATEPART ( WS )? '(' ( WS )? datepart ( WS )? ',' ( WS )? expression ( WS )? ')' -> ^( T_FUNCTIONCALL DATEPART datepart expression ) );
	[GrammarRule("specialfunctioncall")]
	private AstParserRuleReturnScope<object, IToken> specialfunctioncall()
	{
		EnterRule_specialfunctioncall();
		EnterRule("specialfunctioncall", 56);
		TraceIn("specialfunctioncall", 56);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken CONVERT346 = default(IToken);
	    IToken WS347 = default(IToken);
	    IToken char_literal348 = default(IToken);
	    IToken WS349 = default(IToken);
	    IToken TOKEN350 = default(IToken);
	    IToken WS351 = default(IToken);
	    IToken char_literal352 = default(IToken);
	    IToken WS353 = default(IToken);
	    IToken WS355 = default(IToken);
	    IToken char_literal356 = default(IToken);
	    IToken WS357 = default(IToken);
	    IToken STRING358 = default(IToken);
	    IToken WS359 = default(IToken);
	    IToken char_literal360 = default(IToken);
	    IToken CAST361 = default(IToken);
	    IToken WS362 = default(IToken);
	    IToken char_literal363 = default(IToken);
	    IToken WS364 = default(IToken);
	    IToken WS366 = default(IToken);
	    IToken AS367 = default(IToken);
	    IToken WS368 = default(IToken);
	    IToken WS370 = default(IToken);
	    IToken char_literal371 = default(IToken);
	    IToken DATEADD372 = default(IToken);
	    IToken WS373 = default(IToken);
	    IToken char_literal374 = default(IToken);
	    IToken WS375 = default(IToken);
	    IToken WS377 = default(IToken);
	    IToken char_literal378 = default(IToken);
	    IToken WS379 = default(IToken);
	    IToken WS381 = default(IToken);
	    IToken char_literal382 = default(IToken);
	    IToken WS383 = default(IToken);
	    IToken WS385 = default(IToken);
	    IToken char_literal386 = default(IToken);
	    IToken DATEDIFF387 = default(IToken);
	    IToken WS388 = default(IToken);
	    IToken char_literal389 = default(IToken);
	    IToken WS390 = default(IToken);
	    IToken WS392 = default(IToken);
	    IToken char_literal393 = default(IToken);
	    IToken WS394 = default(IToken);
	    IToken WS396 = default(IToken);
	    IToken char_literal397 = default(IToken);
	    IToken WS398 = default(IToken);
	    IToken WS400 = default(IToken);
	    IToken char_literal401 = default(IToken);
	    IToken DATEPART402 = default(IToken);
	    IToken WS403 = default(IToken);
	    IToken char_literal404 = default(IToken);
	    IToken WS405 = default(IToken);
	    IToken WS407 = default(IToken);
	    IToken char_literal408 = default(IToken);
	    IToken WS409 = default(IToken);
	    IToken WS411 = default(IToken);
	    IToken char_literal412 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression354 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression365 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> datatype369 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> datepart376 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression380 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression384 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> datepart391 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression395 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression399 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> datepart406 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression410 = default(AstParserRuleReturnScope<object, IToken>);

	    object CONVERT346_tree = default(object);
	    object WS347_tree = default(object);
	    object char_literal348_tree = default(object);
	    object WS349_tree = default(object);
	    object TOKEN350_tree = default(object);
	    object WS351_tree = default(object);
	    object char_literal352_tree = default(object);
	    object WS353_tree = default(object);
	    object WS355_tree = default(object);
	    object char_literal356_tree = default(object);
	    object WS357_tree = default(object);
	    object STRING358_tree = default(object);
	    object WS359_tree = default(object);
	    object char_literal360_tree = default(object);
	    object CAST361_tree = default(object);
	    object WS362_tree = default(object);
	    object char_literal363_tree = default(object);
	    object WS364_tree = default(object);
	    object WS366_tree = default(object);
	    object AS367_tree = default(object);
	    object WS368_tree = default(object);
	    object WS370_tree = default(object);
	    object char_literal371_tree = default(object);
	    object DATEADD372_tree = default(object);
	    object WS373_tree = default(object);
	    object char_literal374_tree = default(object);
	    object WS375_tree = default(object);
	    object WS377_tree = default(object);
	    object char_literal378_tree = default(object);
	    object WS379_tree = default(object);
	    object WS381_tree = default(object);
	    object char_literal382_tree = default(object);
	    object WS383_tree = default(object);
	    object WS385_tree = default(object);
	    object char_literal386_tree = default(object);
	    object DATEDIFF387_tree = default(object);
	    object WS388_tree = default(object);
	    object char_literal389_tree = default(object);
	    object WS390_tree = default(object);
	    object WS392_tree = default(object);
	    object char_literal393_tree = default(object);
	    object WS394_tree = default(object);
	    object WS396_tree = default(object);
	    object char_literal397_tree = default(object);
	    object WS398_tree = default(object);
	    object WS400_tree = default(object);
	    object char_literal401_tree = default(object);
	    object DATEPART402_tree = default(object);
	    object WS403_tree = default(object);
	    object char_literal404_tree = default(object);
	    object WS405_tree = default(object);
	    object WS407_tree = default(object);
	    object char_literal408_tree = default(object);
	    object WS409_tree = default(object);
	    object WS411_tree = default(object);
	    object char_literal412_tree = default(object);
	    RewriteRuleITokenStream stream_CAST=new RewriteRuleITokenStream(adaptor,"token CAST");
	    RewriteRuleITokenStream stream_AS=new RewriteRuleITokenStream(adaptor,"token AS");
	    RewriteRuleITokenStream stream_163=new RewriteRuleITokenStream(adaptor,"token 163");
	    RewriteRuleITokenStream stream_164=new RewriteRuleITokenStream(adaptor,"token 164");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_DATEPART=new RewriteRuleITokenStream(adaptor,"token DATEPART");
	    RewriteRuleITokenStream stream_DATEADD=new RewriteRuleITokenStream(adaptor,"token DATEADD");
	    RewriteRuleITokenStream stream_CONVERT=new RewriteRuleITokenStream(adaptor,"token CONVERT");
	    RewriteRuleITokenStream stream_DATEDIFF=new RewriteRuleITokenStream(adaptor,"token DATEDIFF");
	    RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
	    RewriteRuleITokenStream stream_TOKEN=new RewriteRuleITokenStream(adaptor,"token TOKEN");
	    RewriteRuleITokenStream stream_167=new RewriteRuleITokenStream(adaptor,"token 167");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_datatype=new RewriteRuleSubtreeStream(adaptor,"rule datatype");
	    RewriteRuleSubtreeStream stream_datepart=new RewriteRuleSubtreeStream(adaptor,"rule datepart");
		try { DebugEnterRule(GrammarFileName, "specialfunctioncall");
		DebugLocation(425, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:426:2: ( CONVERT ( WS )? '(' ( WS )? TOKEN ( WS )? ',' ( WS )? expression ( WS )? ( ',' ( WS )? STRING ( WS )? )? ')' -> ^( T_CONVERT TOKEN expression ( STRING )? ) | CAST ( WS )? '(' ( WS )? expression WS AS WS datatype ( WS )? ')' -> ^( T_CONVERT TOKEN expression ) | DATEADD ( WS )? '(' ( WS )? datepart ( WS )? ',' ( WS )? expression ( WS )? ',' ( WS )? expression ( WS )? ')' -> ^( T_FUNCTIONCALL DATEADD datepart ( expression )+ ) | DATEDIFF ( WS )? '(' ( WS )? datepart ( WS )? ',' ( WS )? expression ( WS )? ',' ( WS )? expression ( WS )? ')' -> ^( T_FUNCTIONCALL DATEDIFF datepart ( expression )+ ) | DATEPART ( WS )? '(' ( WS )? datepart ( WS )? ',' ( WS )? expression ( WS )? ')' -> ^( T_FUNCTIONCALL DATEPART datepart expression ) )
			int alt154=5;
			try { DebugEnterDecision(154, decisionCanBacktrack[154]);
			switch (input.LA(1))
			{
			case CONVERT:
				{
				alt154 = 1;
				}
				break;
			case CAST:
				{
				alt154 = 2;
				}
				break;
			case DATEADD:
				{
				alt154 = 3;
				}
				break;
			case DATEDIFF:
				{
				alt154 = 4;
				}
				break;
			case DATEPART:
				{
				alt154 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 154, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(154); }
			switch (alt154)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:426:4: CONVERT ( WS )? '(' ( WS )? TOKEN ( WS )? ',' ( WS )? expression ( WS )? ( ',' ( WS )? STRING ( WS )? )? ')'
				{
				DebugLocation(426, 4);
				CONVERT346=(IToken)Match(input,CONVERT,Follow._CONVERT_in_specialfunctioncall2755);  
				stream_CONVERT.Add(CONVERT346);

				DebugLocation(426, 12);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:426:12: ( WS )?
				int alt124=2;
				try { DebugEnterSubRule(124);
				try { DebugEnterDecision(124, decisionCanBacktrack[124]);
				int LA124_0 = input.LA(1);

				if ((LA124_0==WS))
				{
					alt124 = 1;
				}
				} finally { DebugExitDecision(124); }
				switch (alt124)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:426:12: WS
					{
					DebugLocation(426, 12);
					WS347=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2757);  
					stream_WS.Add(WS347);


					}
					break;

				}
				} finally { DebugExitSubRule(124); }

				DebugLocation(426, 16);
				char_literal348=(IToken)Match(input,163,Follow._163_in_specialfunctioncall2760);  
				stream_163.Add(char_literal348);

				DebugLocation(426, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:426:20: ( WS )?
				int alt125=2;
				try { DebugEnterSubRule(125);
				try { DebugEnterDecision(125, decisionCanBacktrack[125]);
				int LA125_0 = input.LA(1);

				if ((LA125_0==WS))
				{
					alt125 = 1;
				}
				} finally { DebugExitDecision(125); }
				switch (alt125)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:426:20: WS
					{
					DebugLocation(426, 20);
					WS349=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2762);  
					stream_WS.Add(WS349);


					}
					break;

				}
				} finally { DebugExitSubRule(125); }

				DebugLocation(426, 24);
				TOKEN350=(IToken)Match(input,TOKEN,Follow._TOKEN_in_specialfunctioncall2765);  
				stream_TOKEN.Add(TOKEN350);

				DebugLocation(426, 30);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:426:30: ( WS )?
				int alt126=2;
				try { DebugEnterSubRule(126);
				try { DebugEnterDecision(126, decisionCanBacktrack[126]);
				int LA126_0 = input.LA(1);

				if ((LA126_0==WS))
				{
					alt126 = 1;
				}
				} finally { DebugExitDecision(126); }
				switch (alt126)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:426:30: WS
					{
					DebugLocation(426, 30);
					WS351=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2767);  
					stream_WS.Add(WS351);


					}
					break;

				}
				} finally { DebugExitSubRule(126); }

				DebugLocation(426, 34);
				char_literal352=(IToken)Match(input,167,Follow._167_in_specialfunctioncall2770);  
				stream_167.Add(char_literal352);

				DebugLocation(426, 38);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:426:38: ( WS )?
				int alt127=2;
				try { DebugEnterSubRule(127);
				try { DebugEnterDecision(127, decisionCanBacktrack[127]);
				int LA127_0 = input.LA(1);

				if ((LA127_0==WS))
				{
					alt127 = 1;
				}
				} finally { DebugExitDecision(127); }
				switch (alt127)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:426:38: WS
					{
					DebugLocation(426, 38);
					WS353=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2772);  
					stream_WS.Add(WS353);


					}
					break;

				}
				} finally { DebugExitSubRule(127); }

				DebugLocation(426, 42);
				PushFollow(Follow._expression_in_specialfunctioncall2775);
				expression354=expression();
				PopFollow();

				stream_expression.Add(expression354.Tree);
				DebugLocation(426, 53);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:426:53: ( WS )?
				int alt128=2;
				try { DebugEnterSubRule(128);
				try { DebugEnterDecision(128, decisionCanBacktrack[128]);
				int LA128_0 = input.LA(1);

				if ((LA128_0==WS))
				{
					alt128 = 1;
				}
				} finally { DebugExitDecision(128); }
				switch (alt128)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:426:53: WS
					{
					DebugLocation(426, 53);
					WS355=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2777);  
					stream_WS.Add(WS355);


					}
					break;

				}
				} finally { DebugExitSubRule(128); }

				DebugLocation(426, 57);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:426:57: ( ',' ( WS )? STRING ( WS )? )?
				int alt131=2;
				try { DebugEnterSubRule(131);
				try { DebugEnterDecision(131, decisionCanBacktrack[131]);
				int LA131_0 = input.LA(1);

				if ((LA131_0==167))
				{
					alt131 = 1;
				}
				} finally { DebugExitDecision(131); }
				switch (alt131)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:426:58: ',' ( WS )? STRING ( WS )?
					{
					DebugLocation(426, 58);
					char_literal356=(IToken)Match(input,167,Follow._167_in_specialfunctioncall2781);  
					stream_167.Add(char_literal356);

					DebugLocation(426, 62);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:426:62: ( WS )?
					int alt129=2;
					try { DebugEnterSubRule(129);
					try { DebugEnterDecision(129, decisionCanBacktrack[129]);
					int LA129_0 = input.LA(1);

					if ((LA129_0==WS))
					{
						alt129 = 1;
					}
					} finally { DebugExitDecision(129); }
					switch (alt129)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:426:62: WS
						{
						DebugLocation(426, 62);
						WS357=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2783);  
						stream_WS.Add(WS357);


						}
						break;

					}
					} finally { DebugExitSubRule(129); }

					DebugLocation(426, 66);
					STRING358=(IToken)Match(input,STRING,Follow._STRING_in_specialfunctioncall2786);  
					stream_STRING.Add(STRING358);

					DebugLocation(426, 73);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:426:73: ( WS )?
					int alt130=2;
					try { DebugEnterSubRule(130);
					try { DebugEnterDecision(130, decisionCanBacktrack[130]);
					int LA130_0 = input.LA(1);

					if ((LA130_0==WS))
					{
						alt130 = 1;
					}
					} finally { DebugExitDecision(130); }
					switch (alt130)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:426:73: WS
						{
						DebugLocation(426, 73);
						WS359=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2788);  
						stream_WS.Add(WS359);


						}
						break;

					}
					} finally { DebugExitSubRule(130); }


					}
					break;

				}
				} finally { DebugExitSubRule(131); }

				DebugLocation(426, 79);
				char_literal360=(IToken)Match(input,164,Follow._164_in_specialfunctioncall2793);  
				stream_164.Add(char_literal360);



				{
				// AST REWRITE
				// elements: STRING, TOKEN, expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 426:83: -> ^( T_CONVERT TOKEN expression ( STRING )? )
				{
					DebugLocation(426, 86);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:426:86: ^( T_CONVERT TOKEN expression ( STRING )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(426, 88);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CONVERT, "T_CONVERT"), root_1);

					DebugLocation(426, 98);
					adaptor.AddChild(root_1, stream_TOKEN.NextNode());
					DebugLocation(426, 104);
					adaptor.AddChild(root_1, stream_expression.NextTree());
					DebugLocation(426, 115);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:426:115: ( STRING )?
					if (stream_STRING.HasNext)
					{
						DebugLocation(426, 115);
						adaptor.AddChild(root_1, stream_STRING.NextNode());

					}
					stream_STRING.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:427:4: CAST ( WS )? '(' ( WS )? expression WS AS WS datatype ( WS )? ')'
				{
				DebugLocation(427, 4);
				CAST361=(IToken)Match(input,CAST,Follow._CAST_in_specialfunctioncall2811);  
				stream_CAST.Add(CAST361);

				DebugLocation(427, 9);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:427:9: ( WS )?
				int alt132=2;
				try { DebugEnterSubRule(132);
				try { DebugEnterDecision(132, decisionCanBacktrack[132]);
				int LA132_0 = input.LA(1);

				if ((LA132_0==WS))
				{
					alt132 = 1;
				}
				} finally { DebugExitDecision(132); }
				switch (alt132)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:427:9: WS
					{
					DebugLocation(427, 9);
					WS362=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2813);  
					stream_WS.Add(WS362);


					}
					break;

				}
				} finally { DebugExitSubRule(132); }

				DebugLocation(427, 13);
				char_literal363=(IToken)Match(input,163,Follow._163_in_specialfunctioncall2816);  
				stream_163.Add(char_literal363);

				DebugLocation(427, 17);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:427:17: ( WS )?
				int alt133=2;
				try { DebugEnterSubRule(133);
				try { DebugEnterDecision(133, decisionCanBacktrack[133]);
				int LA133_0 = input.LA(1);

				if ((LA133_0==WS))
				{
					alt133 = 1;
				}
				} finally { DebugExitDecision(133); }
				switch (alt133)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:427:17: WS
					{
					DebugLocation(427, 17);
					WS364=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2818);  
					stream_WS.Add(WS364);


					}
					break;

				}
				} finally { DebugExitSubRule(133); }

				DebugLocation(427, 21);
				PushFollow(Follow._expression_in_specialfunctioncall2821);
				expression365=expression();
				PopFollow();

				stream_expression.Add(expression365.Tree);
				DebugLocation(427, 32);
				WS366=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2823);  
				stream_WS.Add(WS366);

				DebugLocation(427, 35);
				AS367=(IToken)Match(input,AS,Follow._AS_in_specialfunctioncall2825);  
				stream_AS.Add(AS367);

				DebugLocation(427, 38);
				WS368=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2827);  
				stream_WS.Add(WS368);

				DebugLocation(427, 41);
				PushFollow(Follow._datatype_in_specialfunctioncall2829);
				datatype369=datatype();
				PopFollow();

				stream_datatype.Add(datatype369.Tree);
				DebugLocation(427, 50);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:427:50: ( WS )?
				int alt134=2;
				try { DebugEnterSubRule(134);
				try { DebugEnterDecision(134, decisionCanBacktrack[134]);
				int LA134_0 = input.LA(1);

				if ((LA134_0==WS))
				{
					alt134 = 1;
				}
				} finally { DebugExitDecision(134); }
				switch (alt134)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:427:50: WS
					{
					DebugLocation(427, 50);
					WS370=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2831);  
					stream_WS.Add(WS370);


					}
					break;

				}
				} finally { DebugExitSubRule(134); }

				DebugLocation(427, 54);
				char_literal371=(IToken)Match(input,164,Follow._164_in_specialfunctioncall2834);  
				stream_164.Add(char_literal371);



				{
				// AST REWRITE
				// elements: expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 427:58: -> ^( T_CONVERT TOKEN expression )
				{
					DebugLocation(427, 61);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:427:61: ^( T_CONVERT TOKEN expression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(427, 63);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CONVERT, "T_CONVERT"), root_1);

					DebugLocation(427, 73);
					adaptor.AddChild(root_1, (object)adaptor.Create(TOKEN, "TOKEN"));
					DebugLocation(427, 79);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:428:4: DATEADD ( WS )? '(' ( WS )? datepart ( WS )? ',' ( WS )? expression ( WS )? ',' ( WS )? expression ( WS )? ')'
				{
				DebugLocation(428, 4);
				DATEADD372=(IToken)Match(input,DATEADD,Follow._DATEADD_in_specialfunctioncall2849);  
				stream_DATEADD.Add(DATEADD372);

				DebugLocation(428, 12);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:428:12: ( WS )?
				int alt135=2;
				try { DebugEnterSubRule(135);
				try { DebugEnterDecision(135, decisionCanBacktrack[135]);
				int LA135_0 = input.LA(1);

				if ((LA135_0==WS))
				{
					alt135 = 1;
				}
				} finally { DebugExitDecision(135); }
				switch (alt135)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:428:12: WS
					{
					DebugLocation(428, 12);
					WS373=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2851);  
					stream_WS.Add(WS373);


					}
					break;

				}
				} finally { DebugExitSubRule(135); }

				DebugLocation(428, 16);
				char_literal374=(IToken)Match(input,163,Follow._163_in_specialfunctioncall2854);  
				stream_163.Add(char_literal374);

				DebugLocation(428, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:428:20: ( WS )?
				int alt136=2;
				try { DebugEnterSubRule(136);
				try { DebugEnterDecision(136, decisionCanBacktrack[136]);
				int LA136_0 = input.LA(1);

				if ((LA136_0==WS))
				{
					alt136 = 1;
				}
				} finally { DebugExitDecision(136); }
				switch (alt136)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:428:20: WS
					{
					DebugLocation(428, 20);
					WS375=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2856);  
					stream_WS.Add(WS375);


					}
					break;

				}
				} finally { DebugExitSubRule(136); }

				DebugLocation(428, 24);
				PushFollow(Follow._datepart_in_specialfunctioncall2859);
				datepart376=datepart();
				PopFollow();

				stream_datepart.Add(datepart376.Tree);
				DebugLocation(428, 33);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:428:33: ( WS )?
				int alt137=2;
				try { DebugEnterSubRule(137);
				try { DebugEnterDecision(137, decisionCanBacktrack[137]);
				int LA137_0 = input.LA(1);

				if ((LA137_0==WS))
				{
					alt137 = 1;
				}
				} finally { DebugExitDecision(137); }
				switch (alt137)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:428:33: WS
					{
					DebugLocation(428, 33);
					WS377=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2861);  
					stream_WS.Add(WS377);


					}
					break;

				}
				} finally { DebugExitSubRule(137); }

				DebugLocation(428, 37);
				char_literal378=(IToken)Match(input,167,Follow._167_in_specialfunctioncall2864);  
				stream_167.Add(char_literal378);

				DebugLocation(428, 41);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:428:41: ( WS )?
				int alt138=2;
				try { DebugEnterSubRule(138);
				try { DebugEnterDecision(138, decisionCanBacktrack[138]);
				int LA138_0 = input.LA(1);

				if ((LA138_0==WS))
				{
					alt138 = 1;
				}
				} finally { DebugExitDecision(138); }
				switch (alt138)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:428:41: WS
					{
					DebugLocation(428, 41);
					WS379=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2866);  
					stream_WS.Add(WS379);


					}
					break;

				}
				} finally { DebugExitSubRule(138); }

				DebugLocation(428, 45);
				PushFollow(Follow._expression_in_specialfunctioncall2869);
				expression380=expression();
				PopFollow();

				stream_expression.Add(expression380.Tree);
				DebugLocation(428, 56);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:428:56: ( WS )?
				int alt139=2;
				try { DebugEnterSubRule(139);
				try { DebugEnterDecision(139, decisionCanBacktrack[139]);
				int LA139_0 = input.LA(1);

				if ((LA139_0==WS))
				{
					alt139 = 1;
				}
				} finally { DebugExitDecision(139); }
				switch (alt139)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:428:56: WS
					{
					DebugLocation(428, 56);
					WS381=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2871);  
					stream_WS.Add(WS381);


					}
					break;

				}
				} finally { DebugExitSubRule(139); }

				DebugLocation(428, 60);
				char_literal382=(IToken)Match(input,167,Follow._167_in_specialfunctioncall2874);  
				stream_167.Add(char_literal382);

				DebugLocation(428, 64);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:428:64: ( WS )?
				int alt140=2;
				try { DebugEnterSubRule(140);
				try { DebugEnterDecision(140, decisionCanBacktrack[140]);
				int LA140_0 = input.LA(1);

				if ((LA140_0==WS))
				{
					alt140 = 1;
				}
				} finally { DebugExitDecision(140); }
				switch (alt140)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:428:64: WS
					{
					DebugLocation(428, 64);
					WS383=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2876);  
					stream_WS.Add(WS383);


					}
					break;

				}
				} finally { DebugExitSubRule(140); }

				DebugLocation(428, 68);
				PushFollow(Follow._expression_in_specialfunctioncall2879);
				expression384=expression();
				PopFollow();

				stream_expression.Add(expression384.Tree);
				DebugLocation(428, 79);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:428:79: ( WS )?
				int alt141=2;
				try { DebugEnterSubRule(141);
				try { DebugEnterDecision(141, decisionCanBacktrack[141]);
				int LA141_0 = input.LA(1);

				if ((LA141_0==WS))
				{
					alt141 = 1;
				}
				} finally { DebugExitDecision(141); }
				switch (alt141)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:428:79: WS
					{
					DebugLocation(428, 79);
					WS385=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2881);  
					stream_WS.Add(WS385);


					}
					break;

				}
				} finally { DebugExitSubRule(141); }

				DebugLocation(428, 83);
				char_literal386=(IToken)Match(input,164,Follow._164_in_specialfunctioncall2884);  
				stream_164.Add(char_literal386);



				{
				// AST REWRITE
				// elements: datepart, expression, DATEADD
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 428:87: -> ^( T_FUNCTIONCALL DATEADD datepart ( expression )+ )
				{
					DebugLocation(428, 90);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:428:90: ^( T_FUNCTIONCALL DATEADD datepart ( expression )+ )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(428, 92);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(428, 107);
					adaptor.AddChild(root_1, stream_DATEADD.NextNode());
					DebugLocation(428, 115);
					adaptor.AddChild(root_1, stream_datepart.NextTree());
					DebugLocation(428, 124);
					if (!(stream_expression.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expression.HasNext )
					{
						DebugLocation(428, 124);
						adaptor.AddChild(root_1, stream_expression.NextTree());

					}
					stream_expression.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:429:4: DATEDIFF ( WS )? '(' ( WS )? datepart ( WS )? ',' ( WS )? expression ( WS )? ',' ( WS )? expression ( WS )? ')'
				{
				DebugLocation(429, 4);
				DATEDIFF387=(IToken)Match(input,DATEDIFF,Follow._DATEDIFF_in_specialfunctioncall2902);  
				stream_DATEDIFF.Add(DATEDIFF387);

				DebugLocation(429, 13);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:429:13: ( WS )?
				int alt142=2;
				try { DebugEnterSubRule(142);
				try { DebugEnterDecision(142, decisionCanBacktrack[142]);
				int LA142_0 = input.LA(1);

				if ((LA142_0==WS))
				{
					alt142 = 1;
				}
				} finally { DebugExitDecision(142); }
				switch (alt142)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:429:13: WS
					{
					DebugLocation(429, 13);
					WS388=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2904);  
					stream_WS.Add(WS388);


					}
					break;

				}
				} finally { DebugExitSubRule(142); }

				DebugLocation(429, 17);
				char_literal389=(IToken)Match(input,163,Follow._163_in_specialfunctioncall2907);  
				stream_163.Add(char_literal389);

				DebugLocation(429, 21);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:429:21: ( WS )?
				int alt143=2;
				try { DebugEnterSubRule(143);
				try { DebugEnterDecision(143, decisionCanBacktrack[143]);
				int LA143_0 = input.LA(1);

				if ((LA143_0==WS))
				{
					alt143 = 1;
				}
				} finally { DebugExitDecision(143); }
				switch (alt143)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:429:21: WS
					{
					DebugLocation(429, 21);
					WS390=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2909);  
					stream_WS.Add(WS390);


					}
					break;

				}
				} finally { DebugExitSubRule(143); }

				DebugLocation(429, 25);
				PushFollow(Follow._datepart_in_specialfunctioncall2912);
				datepart391=datepart();
				PopFollow();

				stream_datepart.Add(datepart391.Tree);
				DebugLocation(429, 34);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:429:34: ( WS )?
				int alt144=2;
				try { DebugEnterSubRule(144);
				try { DebugEnterDecision(144, decisionCanBacktrack[144]);
				int LA144_0 = input.LA(1);

				if ((LA144_0==WS))
				{
					alt144 = 1;
				}
				} finally { DebugExitDecision(144); }
				switch (alt144)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:429:34: WS
					{
					DebugLocation(429, 34);
					WS392=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2914);  
					stream_WS.Add(WS392);


					}
					break;

				}
				} finally { DebugExitSubRule(144); }

				DebugLocation(429, 38);
				char_literal393=(IToken)Match(input,167,Follow._167_in_specialfunctioncall2917);  
				stream_167.Add(char_literal393);

				DebugLocation(429, 42);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:429:42: ( WS )?
				int alt145=2;
				try { DebugEnterSubRule(145);
				try { DebugEnterDecision(145, decisionCanBacktrack[145]);
				int LA145_0 = input.LA(1);

				if ((LA145_0==WS))
				{
					alt145 = 1;
				}
				} finally { DebugExitDecision(145); }
				switch (alt145)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:429:42: WS
					{
					DebugLocation(429, 42);
					WS394=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2919);  
					stream_WS.Add(WS394);


					}
					break;

				}
				} finally { DebugExitSubRule(145); }

				DebugLocation(429, 46);
				PushFollow(Follow._expression_in_specialfunctioncall2922);
				expression395=expression();
				PopFollow();

				stream_expression.Add(expression395.Tree);
				DebugLocation(429, 57);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:429:57: ( WS )?
				int alt146=2;
				try { DebugEnterSubRule(146);
				try { DebugEnterDecision(146, decisionCanBacktrack[146]);
				int LA146_0 = input.LA(1);

				if ((LA146_0==WS))
				{
					alt146 = 1;
				}
				} finally { DebugExitDecision(146); }
				switch (alt146)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:429:57: WS
					{
					DebugLocation(429, 57);
					WS396=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2924);  
					stream_WS.Add(WS396);


					}
					break;

				}
				} finally { DebugExitSubRule(146); }

				DebugLocation(429, 61);
				char_literal397=(IToken)Match(input,167,Follow._167_in_specialfunctioncall2927);  
				stream_167.Add(char_literal397);

				DebugLocation(429, 65);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:429:65: ( WS )?
				int alt147=2;
				try { DebugEnterSubRule(147);
				try { DebugEnterDecision(147, decisionCanBacktrack[147]);
				int LA147_0 = input.LA(1);

				if ((LA147_0==WS))
				{
					alt147 = 1;
				}
				} finally { DebugExitDecision(147); }
				switch (alt147)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:429:65: WS
					{
					DebugLocation(429, 65);
					WS398=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2929);  
					stream_WS.Add(WS398);


					}
					break;

				}
				} finally { DebugExitSubRule(147); }

				DebugLocation(429, 69);
				PushFollow(Follow._expression_in_specialfunctioncall2932);
				expression399=expression();
				PopFollow();

				stream_expression.Add(expression399.Tree);
				DebugLocation(429, 80);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:429:80: ( WS )?
				int alt148=2;
				try { DebugEnterSubRule(148);
				try { DebugEnterDecision(148, decisionCanBacktrack[148]);
				int LA148_0 = input.LA(1);

				if ((LA148_0==WS))
				{
					alt148 = 1;
				}
				} finally { DebugExitDecision(148); }
				switch (alt148)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:429:80: WS
					{
					DebugLocation(429, 80);
					WS400=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2934);  
					stream_WS.Add(WS400);


					}
					break;

				}
				} finally { DebugExitSubRule(148); }

				DebugLocation(429, 84);
				char_literal401=(IToken)Match(input,164,Follow._164_in_specialfunctioncall2937);  
				stream_164.Add(char_literal401);



				{
				// AST REWRITE
				// elements: DATEDIFF, datepart, expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 429:88: -> ^( T_FUNCTIONCALL DATEDIFF datepart ( expression )+ )
				{
					DebugLocation(429, 91);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:429:91: ^( T_FUNCTIONCALL DATEDIFF datepart ( expression )+ )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(429, 93);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(429, 108);
					adaptor.AddChild(root_1, stream_DATEDIFF.NextNode());
					DebugLocation(429, 117);
					adaptor.AddChild(root_1, stream_datepart.NextTree());
					DebugLocation(429, 126);
					if (!(stream_expression.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expression.HasNext )
					{
						DebugLocation(429, 126);
						adaptor.AddChild(root_1, stream_expression.NextTree());

					}
					stream_expression.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:430:4: DATEPART ( WS )? '(' ( WS )? datepart ( WS )? ',' ( WS )? expression ( WS )? ')'
				{
				DebugLocation(430, 4);
				DATEPART402=(IToken)Match(input,DATEPART,Follow._DATEPART_in_specialfunctioncall2955);  
				stream_DATEPART.Add(DATEPART402);

				DebugLocation(430, 13);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:430:13: ( WS )?
				int alt149=2;
				try { DebugEnterSubRule(149);
				try { DebugEnterDecision(149, decisionCanBacktrack[149]);
				int LA149_0 = input.LA(1);

				if ((LA149_0==WS))
				{
					alt149 = 1;
				}
				} finally { DebugExitDecision(149); }
				switch (alt149)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:430:13: WS
					{
					DebugLocation(430, 13);
					WS403=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2957);  
					stream_WS.Add(WS403);


					}
					break;

				}
				} finally { DebugExitSubRule(149); }

				DebugLocation(430, 17);
				char_literal404=(IToken)Match(input,163,Follow._163_in_specialfunctioncall2960);  
				stream_163.Add(char_literal404);

				DebugLocation(430, 21);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:430:21: ( WS )?
				int alt150=2;
				try { DebugEnterSubRule(150);
				try { DebugEnterDecision(150, decisionCanBacktrack[150]);
				int LA150_0 = input.LA(1);

				if ((LA150_0==WS))
				{
					alt150 = 1;
				}
				} finally { DebugExitDecision(150); }
				switch (alt150)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:430:21: WS
					{
					DebugLocation(430, 21);
					WS405=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2962);  
					stream_WS.Add(WS405);


					}
					break;

				}
				} finally { DebugExitSubRule(150); }

				DebugLocation(430, 25);
				PushFollow(Follow._datepart_in_specialfunctioncall2965);
				datepart406=datepart();
				PopFollow();

				stream_datepart.Add(datepart406.Tree);
				DebugLocation(430, 34);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:430:34: ( WS )?
				int alt151=2;
				try { DebugEnterSubRule(151);
				try { DebugEnterDecision(151, decisionCanBacktrack[151]);
				int LA151_0 = input.LA(1);

				if ((LA151_0==WS))
				{
					alt151 = 1;
				}
				} finally { DebugExitDecision(151); }
				switch (alt151)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:430:34: WS
					{
					DebugLocation(430, 34);
					WS407=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2967);  
					stream_WS.Add(WS407);


					}
					break;

				}
				} finally { DebugExitSubRule(151); }

				DebugLocation(430, 38);
				char_literal408=(IToken)Match(input,167,Follow._167_in_specialfunctioncall2970);  
				stream_167.Add(char_literal408);

				DebugLocation(430, 42);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:430:42: ( WS )?
				int alt152=2;
				try { DebugEnterSubRule(152);
				try { DebugEnterDecision(152, decisionCanBacktrack[152]);
				int LA152_0 = input.LA(1);

				if ((LA152_0==WS))
				{
					alt152 = 1;
				}
				} finally { DebugExitDecision(152); }
				switch (alt152)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:430:42: WS
					{
					DebugLocation(430, 42);
					WS409=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2972);  
					stream_WS.Add(WS409);


					}
					break;

				}
				} finally { DebugExitSubRule(152); }

				DebugLocation(430, 46);
				PushFollow(Follow._expression_in_specialfunctioncall2975);
				expression410=expression();
				PopFollow();

				stream_expression.Add(expression410.Tree);
				DebugLocation(430, 57);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:430:57: ( WS )?
				int alt153=2;
				try { DebugEnterSubRule(153);
				try { DebugEnterDecision(153, decisionCanBacktrack[153]);
				int LA153_0 = input.LA(1);

				if ((LA153_0==WS))
				{
					alt153 = 1;
				}
				} finally { DebugExitDecision(153); }
				switch (alt153)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:430:57: WS
					{
					DebugLocation(430, 57);
					WS411=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2977);  
					stream_WS.Add(WS411);


					}
					break;

				}
				} finally { DebugExitSubRule(153); }

				DebugLocation(430, 61);
				char_literal412=(IToken)Match(input,164,Follow._164_in_specialfunctioncall2980);  
				stream_164.Add(char_literal412);



				{
				// AST REWRITE
				// elements: expression, DATEPART, datepart
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 430:65: -> ^( T_FUNCTIONCALL DATEPART datepart expression )
				{
					DebugLocation(430, 68);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:430:68: ^( T_FUNCTIONCALL DATEPART datepart expression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(430, 70);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(430, 85);
					adaptor.AddChild(root_1, stream_DATEPART.NextNode());
					DebugLocation(430, 94);
					adaptor.AddChild(root_1, stream_datepart.NextTree());
					DebugLocation(430, 103);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("specialfunctioncall", 56);
			LeaveRule("specialfunctioncall", 56);
			LeaveRule_specialfunctioncall();
	    }
	 	DebugLocation(431, 1);
		} finally { DebugExitRule(GrammarFileName, "specialfunctioncall"); }
		return retval;

	}
	// $ANTLR end "specialfunctioncall"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_datepart() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_datepart() {}

	// $ANTLR start "datepart"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:433:1: datepart : TOKEN -> ^( T_DATEPART TOKEN ) ;
	[GrammarRule("datepart")]
	private AstParserRuleReturnScope<object, IToken> datepart()
	{
		EnterRule_datepart();
		EnterRule("datepart", 57);
		TraceIn("datepart", 57);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN413 = default(IToken);

	    object TOKEN413_tree = default(object);
	    RewriteRuleITokenStream stream_TOKEN=new RewriteRuleITokenStream(adaptor,"token TOKEN");

		try { DebugEnterRule(GrammarFileName, "datepart");
		DebugLocation(433, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:434:2: ( TOKEN -> ^( T_DATEPART TOKEN ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:434:4: TOKEN
			{
			DebugLocation(434, 4);
			TOKEN413=(IToken)Match(input,TOKEN,Follow._TOKEN_in_datepart3004);  
			stream_TOKEN.Add(TOKEN413);



			{
			// AST REWRITE
			// elements: TOKEN
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 434:10: -> ^( T_DATEPART TOKEN )
			{
				DebugLocation(434, 13);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:434:13: ^( T_DATEPART TOKEN )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(434, 15);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_DATEPART, "T_DATEPART"), root_1);

				DebugLocation(434, 26);
				adaptor.AddChild(root_1, stream_TOKEN.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("datepart", 57);
			LeaveRule("datepart", 57);
			LeaveRule_datepart();
	    }
	 	DebugLocation(435, 1);
		} finally { DebugExitRule(GrammarFileName, "datepart"); }
		return retval;

	}
	// $ANTLR end "datepart"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_number() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_number() {}

	// $ANTLR start "number"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:437:1: number : ( '-' ( WS )? )? NUMBER ;
	[GrammarRule("number")]
	private AstParserRuleReturnScope<object, IToken> number()
	{
		EnterRule_number();
		EnterRule("number", 58);
		TraceIn("number", 58);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal414 = default(IToken);
	    IToken WS415 = default(IToken);
	    IToken NUMBER416 = default(IToken);

	    object char_literal414_tree = default(object);
	    object WS415_tree = default(object);
	    object NUMBER416_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "number");
		DebugLocation(437, 27);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:437:9: ( ( '-' ( WS )? )? NUMBER )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:437:11: ( '-' ( WS )? )? NUMBER
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(437, 11);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:437:11: ( '-' ( WS )? )?
			int alt156=2;
			try { DebugEnterSubRule(156);
			try { DebugEnterDecision(156, decisionCanBacktrack[156]);
			int LA156_0 = input.LA(1);

			if ((LA156_0==168))
			{
				alt156 = 1;
			}
			} finally { DebugExitDecision(156); }
			switch (alt156)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:437:12: '-' ( WS )?
				{
				DebugLocation(437, 12);
				char_literal414=(IToken)Match(input,168,Follow._168_in_number3025); 
				char_literal414_tree = (object)adaptor.Create(char_literal414);
				adaptor.AddChild(root_0, char_literal414_tree);

				DebugLocation(437, 16);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:437:16: ( WS )?
				int alt155=2;
				try { DebugEnterSubRule(155);
				try { DebugEnterDecision(155, decisionCanBacktrack[155]);
				int LA155_0 = input.LA(1);

				if ((LA155_0==WS))
				{
					alt155 = 1;
				}
				} finally { DebugExitDecision(155); }
				switch (alt155)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:437:16: WS
					{
					DebugLocation(437, 16);
					WS415=(IToken)Match(input,WS,Follow._WS_in_number3027); 
					WS415_tree = (object)adaptor.Create(WS415);
					adaptor.AddChild(root_0, WS415_tree);


					}
					break;

				}
				} finally { DebugExitSubRule(155); }


				}
				break;

			}
			} finally { DebugExitSubRule(156); }

			DebugLocation(437, 22);
			NUMBER416=(IToken)Match(input,NUMBER,Follow._NUMBER_in_number3032); 
			NUMBER416_tree = (object)adaptor.Create(NUMBER416);
			adaptor.AddChild(root_0, NUMBER416_tree);


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("number", 58);
			LeaveRule("number", 58);
			LeaveRule_number();
	    }
	 	DebugLocation(437, 27);
		} finally { DebugExitRule(GrammarFileName, "number"); }
		return retval;

	}
	// $ANTLR end "number"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_string() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_string() {}

	// $ANTLR start "string"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:439:1: string : STRING -> ^( T_STRING STRING ) ;
	[GrammarRule("string")]
	private AstParserRuleReturnScope<object, IToken> @string()
	{
		EnterRule_string();
		EnterRule("string", 59);
		TraceIn("string", 59);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken STRING417 = default(IToken);

	    object STRING417_tree = default(object);
	    RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");

		try { DebugEnterRule(GrammarFileName, "string");
		DebugLocation(439, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:439:8: ( STRING -> ^( T_STRING STRING ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:439:10: STRING
			{
			DebugLocation(439, 10);
			STRING417=(IToken)Match(input,STRING,Follow._STRING_in_string3040);  
			stream_STRING.Add(STRING417);



			{
			// AST REWRITE
			// elements: STRING
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 439:17: -> ^( T_STRING STRING )
			{
				DebugLocation(439, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:439:20: ^( T_STRING STRING )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(439, 22);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_STRING, "T_STRING"), root_1);

				DebugLocation(439, 31);
				adaptor.AddChild(root_1, stream_STRING.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("string", 59);
			LeaveRule("string", 59);
			LeaveRule_string();
	    }
	 	DebugLocation(440, 1);
		} finally { DebugExitRule(GrammarFileName, "string"); }
		return retval;

	}
	// $ANTLR end "string"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_datatype() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_datatype() {}

	// $ANTLR start "datatype"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:442:1: datatype : TOKEN ;
	[GrammarRule("datatype")]
	private AstParserRuleReturnScope<object, IToken> datatype()
	{
		EnterRule_datatype();
		EnterRule("datatype", 60);
		TraceIn("datatype", 60);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN418 = default(IToken);

	    object TOKEN418_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "datatype");
		DebugLocation(442, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:443:2: ( TOKEN )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:443:4: TOKEN
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(443, 4);
			TOKEN418=(IToken)Match(input,TOKEN,Follow._TOKEN_in_datatype3060); 
			TOKEN418_tree = (object)adaptor.Create(TOKEN418);
			adaptor.AddChild(root_0, TOKEN418_tree);


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("datatype", 60);
			LeaveRule("datatype", 60);
			LeaveRule_datatype();
	    }
	 	DebugLocation(444, 1);
		} finally { DebugExitRule(GrammarFileName, "datatype"); }
		return retval;

	}
	// $ANTLR end "datatype"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_variable() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_variable() {}

	// $ANTLR start "variable"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:446:1: variable : VARIABLE -> ^( T_VARIABLE VARIABLE ) ;
	[GrammarRule("variable")]
	private AstParserRuleReturnScope<object, IToken> variable()
	{
		EnterRule_variable();
		EnterRule("variable", 61);
		TraceIn("variable", 61);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken VARIABLE419 = default(IToken);

	    object VARIABLE419_tree = default(object);
	    RewriteRuleITokenStream stream_VARIABLE=new RewriteRuleITokenStream(adaptor,"token VARIABLE");

		try { DebugEnterRule(GrammarFileName, "variable");
		DebugLocation(446, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:447:2: ( VARIABLE -> ^( T_VARIABLE VARIABLE ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:447:4: VARIABLE
			{
			DebugLocation(447, 4);
			VARIABLE419=(IToken)Match(input,VARIABLE,Follow._VARIABLE_in_variable3072);  
			stream_VARIABLE.Add(VARIABLE419);



			{
			// AST REWRITE
			// elements: VARIABLE
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 447:13: -> ^( T_VARIABLE VARIABLE )
			{
				DebugLocation(447, 16);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:447:16: ^( T_VARIABLE VARIABLE )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(447, 18);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_VARIABLE, "T_VARIABLE"), root_1);

				DebugLocation(447, 29);
				adaptor.AddChild(root_1, stream_VARIABLE.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variable", 61);
			LeaveRule("variable", 61);
			LeaveRule_variable();
	    }
	 	DebugLocation(448, 1);
		} finally { DebugExitRule(GrammarFileName, "variable"); }
		return retval;

	}
	// $ANTLR end "variable"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_case() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_case() {}

	// $ANTLR start "case"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:450:1: case : CASE WS ( expression WS )? ( case_when WS )* ( case_else WS )? END -> ^( T_CASE ( expression )? ( case_when )* ( case_else )? ) ;
	[GrammarRule("case")]
	private AstParserRuleReturnScope<object, IToken> @case()
	{
		EnterRule_case();
		EnterRule("case", 62);
		TraceIn("case", 62);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken CASE420 = default(IToken);
	    IToken WS421 = default(IToken);
	    IToken WS423 = default(IToken);
	    IToken WS425 = default(IToken);
	    IToken WS427 = default(IToken);
	    IToken END428 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression422 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> case_when424 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> case_else426 = default(AstParserRuleReturnScope<object, IToken>);

	    object CASE420_tree = default(object);
	    object WS421_tree = default(object);
	    object WS423_tree = default(object);
	    object WS425_tree = default(object);
	    object WS427_tree = default(object);
	    object END428_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_END=new RewriteRuleITokenStream(adaptor,"token END");
	    RewriteRuleITokenStream stream_CASE=new RewriteRuleITokenStream(adaptor,"token CASE");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_case_when=new RewriteRuleSubtreeStream(adaptor,"rule case_when");
	    RewriteRuleSubtreeStream stream_case_else=new RewriteRuleSubtreeStream(adaptor,"rule case_else");
		try { DebugEnterRule(GrammarFileName, "case");
		DebugLocation(450, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:451:2: ( CASE WS ( expression WS )? ( case_when WS )* ( case_else WS )? END -> ^( T_CASE ( expression )? ( case_when )* ( case_else )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:451:4: CASE WS ( expression WS )? ( case_when WS )* ( case_else WS )? END
			{
			DebugLocation(451, 4);
			CASE420=(IToken)Match(input,CASE,Follow._CASE_in_case3092);  
			stream_CASE.Add(CASE420);

			DebugLocation(451, 9);
			WS421=(IToken)Match(input,WS,Follow._WS_in_case3094);  
			stream_WS.Add(WS421);

			DebugLocation(451, 12);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:451:12: ( expression WS )?
			int alt157=2;
			try { DebugEnterSubRule(157);
			try { DebugEnterDecision(157, decisionCanBacktrack[157]);
			int LA157_0 = input.LA(1);

			if (((LA157_0>=CASE && LA157_0<=CAST)||(LA157_0>=CONVERT && LA157_0<=COUNT)||(LA157_0>=DATEADD && LA157_0<=DATEPART)||LA157_0==EXISTS||(LA157_0>=NOT && LA157_0<=NUMBER)||LA157_0==SIMPLE_FILE||(LA157_0>=STRING && LA157_0<=SYSTEMVAR)||LA157_0==TOKEN||LA157_0==VARIABLE||LA157_0==163||LA157_0==168))
			{
				alt157 = 1;
			}
			} finally { DebugExitDecision(157); }
			switch (alt157)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:451:13: expression WS
				{
				DebugLocation(451, 13);
				PushFollow(Follow._expression_in_case3097);
				expression422=expression();
				PopFollow();

				stream_expression.Add(expression422.Tree);
				DebugLocation(451, 24);
				WS423=(IToken)Match(input,WS,Follow._WS_in_case3099);  
				stream_WS.Add(WS423);


				}
				break;

			}
			} finally { DebugExitSubRule(157); }

			DebugLocation(451, 29);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:451:29: ( case_when WS )*
			try { DebugEnterSubRule(158);
			while (true)
			{
				int alt158=2;
				try { DebugEnterDecision(158, decisionCanBacktrack[158]);
				int LA158_0 = input.LA(1);

				if ((LA158_0==WHEN))
				{
					alt158 = 1;
				}


				} finally { DebugExitDecision(158); }
				switch ( alt158 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:451:30: case_when WS
					{
					DebugLocation(451, 30);
					PushFollow(Follow._case_when_in_case3104);
					case_when424=case_when();
					PopFollow();

					stream_case_when.Add(case_when424.Tree);
					DebugLocation(451, 40);
					WS425=(IToken)Match(input,WS,Follow._WS_in_case3106);  
					stream_WS.Add(WS425);


					}
					break;

				default:
					goto loop158;
				}
			}

			loop158:
				;

			} finally { DebugExitSubRule(158); }

			DebugLocation(451, 45);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:451:45: ( case_else WS )?
			int alt159=2;
			try { DebugEnterSubRule(159);
			try { DebugEnterDecision(159, decisionCanBacktrack[159]);
			int LA159_0 = input.LA(1);

			if ((LA159_0==ELSE))
			{
				alt159 = 1;
			}
			} finally { DebugExitDecision(159); }
			switch (alt159)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:451:46: case_else WS
				{
				DebugLocation(451, 46);
				PushFollow(Follow._case_else_in_case3111);
				case_else426=case_else();
				PopFollow();

				stream_case_else.Add(case_else426.Tree);
				DebugLocation(451, 56);
				WS427=(IToken)Match(input,WS,Follow._WS_in_case3113);  
				stream_WS.Add(WS427);


				}
				break;

			}
			} finally { DebugExitSubRule(159); }

			DebugLocation(451, 61);
			END428=(IToken)Match(input,END,Follow._END_in_case3117);  
			stream_END.Add(END428);



			{
			// AST REWRITE
			// elements: expression, case_else, case_when
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 452:2: -> ^( T_CASE ( expression )? ( case_when )* ( case_else )? )
			{
				DebugLocation(452, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:452:5: ^( T_CASE ( expression )? ( case_when )* ( case_else )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(452, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CASE, "T_CASE"), root_1);

				DebugLocation(452, 14);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:452:14: ( expression )?
				if (stream_expression.HasNext)
				{
					DebugLocation(452, 14);
					adaptor.AddChild(root_1, stream_expression.NextTree());

				}
				stream_expression.Reset();
				DebugLocation(452, 26);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:452:26: ( case_when )*
				while ( stream_case_when.HasNext )
				{
					DebugLocation(452, 26);
					adaptor.AddChild(root_1, stream_case_when.NextTree());

				}
				stream_case_when.Reset();
				DebugLocation(452, 37);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:452:37: ( case_else )?
				if (stream_case_else.HasNext)
				{
					DebugLocation(452, 37);
					adaptor.AddChild(root_1, stream_case_else.NextTree());

				}
				stream_case_else.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("case", 62);
			LeaveRule("case", 62);
			LeaveRule_case();
	    }
	 	DebugLocation(453, 1);
		} finally { DebugExitRule(GrammarFileName, "case"); }
		return retval;

	}
	// $ANTLR end "case"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_case_when() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_case_when() {}

	// $ANTLR start "case_when"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:455:1: case_when : WHEN WS a= expression WS THEN WS b= expression -> ^( T_CASE_WHEN $a $b) ;
	[GrammarRule("case_when")]
	private AstParserRuleReturnScope<object, IToken> case_when()
	{
		EnterRule_case_when();
		EnterRule("case_when", 63);
		TraceIn("case_when", 63);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WHEN429 = default(IToken);
	    IToken WS430 = default(IToken);
	    IToken WS431 = default(IToken);
	    IToken THEN432 = default(IToken);
	    IToken WS433 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);

	    object WHEN429_tree = default(object);
	    object WS430_tree = default(object);
	    object WS431_tree = default(object);
	    object THEN432_tree = default(object);
	    object WS433_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_THEN=new RewriteRuleITokenStream(adaptor,"token THEN");
	    RewriteRuleITokenStream stream_WHEN=new RewriteRuleITokenStream(adaptor,"token WHEN");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "case_when");
		DebugLocation(455, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:456:2: ( WHEN WS a= expression WS THEN WS b= expression -> ^( T_CASE_WHEN $a $b) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:456:4: WHEN WS a= expression WS THEN WS b= expression
			{
			DebugLocation(456, 4);
			WHEN429=(IToken)Match(input,WHEN,Follow._WHEN_in_case_when3145);  
			stream_WHEN.Add(WHEN429);

			DebugLocation(456, 9);
			WS430=(IToken)Match(input,WS,Follow._WS_in_case_when3147);  
			stream_WS.Add(WS430);

			DebugLocation(456, 13);
			PushFollow(Follow._expression_in_case_when3151);
			a=expression();
			PopFollow();

			stream_expression.Add(a.Tree);
			DebugLocation(456, 25);
			WS431=(IToken)Match(input,WS,Follow._WS_in_case_when3153);  
			stream_WS.Add(WS431);

			DebugLocation(456, 28);
			THEN432=(IToken)Match(input,THEN,Follow._THEN_in_case_when3155);  
			stream_THEN.Add(THEN432);

			DebugLocation(456, 33);
			WS433=(IToken)Match(input,WS,Follow._WS_in_case_when3157);  
			stream_WS.Add(WS433);

			DebugLocation(456, 37);
			PushFollow(Follow._expression_in_case_when3161);
			b=expression();
			PopFollow();

			stream_expression.Add(b.Tree);


			{
			// AST REWRITE
			// elements: a, b
			// token labels: 
			// rule labels: retval, b, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 457:2: -> ^( T_CASE_WHEN $a $b)
			{
				DebugLocation(457, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:457:5: ^( T_CASE_WHEN $a $b)
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(457, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CASE_WHEN, "T_CASE_WHEN"), root_1);

				DebugLocation(457, 20);
				adaptor.AddChild(root_1, stream_a.NextTree());
				DebugLocation(457, 23);
				adaptor.AddChild(root_1, stream_b.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("case_when", 63);
			LeaveRule("case_when", 63);
			LeaveRule_case_when();
	    }
	 	DebugLocation(458, 1);
		} finally { DebugExitRule(GrammarFileName, "case_when"); }
		return retval;

	}
	// $ANTLR end "case_when"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_case_else() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_case_else() {}

	// $ANTLR start "case_else"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:460:1: case_else : ELSE WS expression -> ^( T_CASE_ELSE expression ) ;
	[GrammarRule("case_else")]
	private AstParserRuleReturnScope<object, IToken> case_else()
	{
		EnterRule_case_else();
		EnterRule("case_else", 64);
		TraceIn("case_else", 64);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken ELSE434 = default(IToken);
	    IToken WS435 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression436 = default(AstParserRuleReturnScope<object, IToken>);

	    object ELSE434_tree = default(object);
	    object WS435_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_ELSE=new RewriteRuleITokenStream(adaptor,"token ELSE");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "case_else");
		DebugLocation(460, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:461:2: ( ELSE WS expression -> ^( T_CASE_ELSE expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:461:4: ELSE WS expression
			{
			DebugLocation(461, 4);
			ELSE434=(IToken)Match(input,ELSE,Follow._ELSE_in_case_else3186);  
			stream_ELSE.Add(ELSE434);

			DebugLocation(461, 9);
			WS435=(IToken)Match(input,WS,Follow._WS_in_case_else3188);  
			stream_WS.Add(WS435);

			DebugLocation(461, 12);
			PushFollow(Follow._expression_in_case_else3190);
			expression436=expression();
			PopFollow();

			stream_expression.Add(expression436.Tree);


			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 462:2: -> ^( T_CASE_ELSE expression )
			{
				DebugLocation(462, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:462:5: ^( T_CASE_ELSE expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(462, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CASE_ELSE, "T_CASE_ELSE"), root_1);

				DebugLocation(462, 19);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("case_else", 64);
			LeaveRule("case_else", 64);
			LeaveRule_case_else();
	    }
	 	DebugLocation(463, 1);
		} finally { DebugExitRule(GrammarFileName, "case_else"); }
		return retval;

	}
	// $ANTLR end "case_else"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _WS_in_parse380 = new BitSet(new ulong[]{0x3000000022100000UL,0x0UL,0x80000UL});
		public static readonly BitSet _commands_in_parse384 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _WS_in_parse386 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_parse391 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _command_in_commands414 = new BitSet(new ulong[]{0x3000000022100002UL,0x0UL,0x80004080000UL});
		public static readonly BitSet _WS_in_commands417 = new BitSet(new ulong[]{0x3000000022100000UL,0x0UL,0x80000080000UL});
		public static readonly BitSet _171_in_commands421 = new BitSet(new ulong[]{0x3000000022100000UL,0x0UL,0x4080000UL});
		public static readonly BitSet _WS_in_commands423 = new BitSet(new ulong[]{0x3000000022100000UL,0x0UL,0x80000UL});
		public static readonly BitSet _command_in_commands428 = new BitSet(new ulong[]{0x3000000022100002UL,0x0UL,0x80004080000UL});
		public static readonly BitSet _WS_in_commands433 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000000UL});
		public static readonly BitSet _171_in_commands436 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _select_command_in_command456 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _use_command_in_command461 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declare_command_in_command466 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_command_in_command471 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _create_view_command_in_command476 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _drop_view_command_in_command481 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _drop_table_command_in_command486 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SELECT_in_select_command500 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _WS_in_select_command503 = new BitSet(new ulong[]{0x10000020UL});
		public static readonly BitSet _distinct_clause_in_select_command505 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _WS_in_select_command510 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _top_clause_in_select_command512 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _WS_in_select_command516 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x12800200000UL});
		public static readonly BitSet _column_list_in_select_command518 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4000000UL});
		public static readonly BitSet _WS_in_select_command521 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _into_clause_in_select_command523 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4000000UL});
		public static readonly BitSet _WS_in_select_command528 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _from_clause_in_select_command530 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4000000UL});
		public static readonly BitSet _WS_in_select_command535 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000UL});
		public static readonly BitSet _where_clause_in_select_command537 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4000000UL});
		public static readonly BitSet _WS_in_select_command542 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _groupby_clause_in_select_command544 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4000000UL});
		public static readonly BitSet _WS_in_select_command549 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _having_clause_in_select_command551 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4000000UL});
		public static readonly BitSet _WS_in_select_command556 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _orderby_clause_in_select_command558 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DISTINCT_in_distinct_clause606 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ALL_in_distinct_clause615 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOP_in_top_clause631 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _WS_in_top_clause633 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x10800200000UL});
		public static readonly BitSet _expression_in_top_clause635 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _column_in_column_list657 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8004000000UL});
		public static readonly BitSet _WS_in_column_list660 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000000UL});
		public static readonly BitSet _167_in_column_list663 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x12804200000UL});
		public static readonly BitSet _WS_in_column_list665 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x12800200000UL});
		public static readonly BitSet _column_in_column_list668 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8004000000UL});
		public static readonly BitSet _all_columns_in_column692 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_column697 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4000000UL});
		public static readonly BitSet _WS_in_column700 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _SIMPLE_FILE_in_column702 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _table_alias_in_all_columns727 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20004000000UL});
		public static readonly BitSet _WS_in_all_columns729 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20000000000UL});
		public static readonly BitSet _169_in_all_columns732 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2004000000UL});
		public static readonly BitSet _WS_in_all_columns734 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000UL});
		public static readonly BitSet _165_in_all_columns739 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INTO_in_into_clause759 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _WS_in_into_clause761 = new BitSet(new ulong[]{0x4000000000000000UL,0x0UL,0x4000000000000UL});
		public static readonly BitSet _file_in_into_clause763 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FROM_in_from_clause783 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _WS_in_from_clause785 = new BitSet(new ulong[]{0x4000000000000000UL,0x21UL,0x4000800000000UL});
		public static readonly BitSet _from_clause_item_in_from_clause787 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8004000000UL});
		public static readonly BitSet _WS_in_from_clause790 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000000UL});
		public static readonly BitSet _167_in_from_clause793 = new BitSet(new ulong[]{0x4000000000000000UL,0x21UL,0x4000804000000UL});
		public static readonly BitSet _WS_in_from_clause795 = new BitSet(new ulong[]{0x4000000000000000UL,0x21UL,0x4000800000000UL});
		public static readonly BitSet _from_clause_item_in_from_clause798 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8004000000UL});
		public static readonly BitSet _WS_in_from_clause803 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _table_alias_in_from_clause805 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_from_clause_item832 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _file_in_from_clause_item845 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _subquery_in_from_clause_item850 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _view_name_in_from_clause_item855 = new BitSet(new ulong[]{0x2UL,0x0UL,0x804000000UL});
		public static readonly BitSet _WS_in_from_clause_item858 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _163_in_from_clause_item861 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x11800200000UL});
		public static readonly BitSet _expression_list_in_from_clause_item863 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000UL});
		public static readonly BitSet _164_in_from_clause_item866 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _163_in_subquery891 = new BitSet(new ulong[]{0x1000000000000000UL,0x0UL,0x4000000UL});
		public static readonly BitSet _WS_in_subquery893 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _select_command_in_subquery896 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1004000000UL});
		public static readonly BitSet _WS_in_subquery898 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000UL});
		public static readonly BitSet _164_in_subquery901 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _178_in_file920 = new BitSet(new ulong[]{0x0UL,0x1UL,0x4200000UL});
		public static readonly BitSet _WS_in_file922 = new BitSet(new ulong[]{0x0UL,0x1UL,0x200000UL});
		public static readonly BitSet _file_spec_in_file925 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000004000000UL});
		public static readonly BitSet _WS_in_file928 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000000UL});
		public static readonly BitSet _file_option_in_file930 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000004000000UL});
		public static readonly BitSet _WS_in_file934 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _179_in_file937 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SIMPLE_FILE_in_file954 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _string_in_file_spec973 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_in_file_spec978 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _168_in_file_option990 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _file_option_name_in_file_option992 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800004000000UL});
		public static readonly BitSet _WS_in_file_option996 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000000UL});
		public static readonly BitSet _175_in_file_option999 = new BitSet(new ulong[]{0x8000000000000UL,0x21UL,0x4200000UL});
		public static readonly BitSet _WS_in_file_option1001 = new BitSet(new ulong[]{0x8000000000000UL,0x21UL,0x200000UL});
		public static readonly BitSet _file_option_value_in_file_option1004 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_file_option_name1028 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_file_option_value1040 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_file_option_value1044 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_file_option_value1048 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_in_file_option_value1052 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHERE_in_where_clause1064 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _WS_in_where_clause1066 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x10800200000UL});
		public static readonly BitSet _expression_in_where_clause1068 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GROUP_in_groupby_clause1087 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _WS_in_groupby_clause1089 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _BY_in_groupby_clause1091 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _WS_in_groupby_clause1093 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x10800200000UL});
		public static readonly BitSet _orderby_column_list_in_groupby_clause1095 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _HAVING_in_having_clause1116 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _WS_in_having_clause1118 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x10800200000UL});
		public static readonly BitSet _expression_in_having_clause1120 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ORDER_in_orderby_clause1141 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _WS_in_orderby_clause1143 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _BY_in_orderby_clause1145 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _WS_in_orderby_clause1147 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x10800200000UL});
		public static readonly BitSet _orderby_column_list_in_orderby_clause1149 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _orderby_column_in_orderby_column_list1170 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8004000000UL});
		public static readonly BitSet _WS_in_orderby_column_list1173 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000000UL});
		public static readonly BitSet _167_in_orderby_column_list1176 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x10804200000UL});
		public static readonly BitSet _WS_in_orderby_column_list1178 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x10800200000UL});
		public static readonly BitSet _orderby_column_in_orderby_column_list1181 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8004000000UL});
		public static readonly BitSet _expression_in_orderby_column1201 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4000000UL});
		public static readonly BitSet _WS_in_orderby_column1204 = new BitSet(new ulong[]{0x80000004000200UL});
		public static readonly BitSet _orderby_direction_in_orderby_column1206 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASC_in_orderby_direction1231 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DESC_in_orderby_direction1240 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ORIG_in_orderby_direction1249 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _USE_in_use_command1267 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _WS_in_use_command1269 = new BitSet(new ulong[]{0x4000000000000000UL,0x0UL,0x4000000000000UL});
		public static readonly BitSet _file_in_use_command1271 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DECLARE_in_declare_command1293 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _WS_in_declare_command1295 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _declaration_list_in_declare_command1297 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_in_declaration_list1314 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8004000000UL});
		public static readonly BitSet _WS_in_declaration_list1317 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000000UL});
		public static readonly BitSet _167_in_declaration_list1320 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4200000UL});
		public static readonly BitSet _WS_in_declaration_list1322 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _declaration_in_declaration_list1325 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8004000000UL});
		public static readonly BitSet _variable_in_declaration1349 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _WS_in_declaration1351 = new BitSet(new ulong[]{0x100UL,0x20UL});
		public static readonly BitSet _AS_in_declaration1354 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _WS_in_declaration1356 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _datatype_in_declaration1360 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CREATE_in_create_view_command1385 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _WS_in_create_view_command1387 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000UL});
		public static readonly BitSet _VIEW_in_create_view_command1389 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _WS_in_create_view_command1391 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _view_name_in_create_view_command1393 = new BitSet(new ulong[]{0x0UL,0x0UL,0x804000000UL});
		public static readonly BitSet _WS_in_create_view_command1396 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _163_in_create_view_command1399 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _declaration_list_in_create_view_command1401 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000UL});
		public static readonly BitSet _164_in_create_view_command1403 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _WS_in_create_view_command1407 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _AS_in_create_view_command1409 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _WS_in_create_view_command1411 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _select_command_in_create_view_command1413 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DROP_in_drop_view_command1439 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _WS_in_drop_view_command1441 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000UL});
		public static readonly BitSet _VIEW_in_drop_view_command1443 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _WS_in_drop_view_command1445 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _view_name_in_drop_view_command1447 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_view_name1467 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DROP_in_drop_table_command1489 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _WS_in_drop_table_command1491 = new BitSet(new ulong[]{0x0UL,0x8UL});
		public static readonly BitSet _TABLE_in_drop_table_command1493 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _WS_in_drop_table_command1495 = new BitSet(new ulong[]{0x4000000000000000UL,0x0UL,0x4000000000000UL});
		public static readonly BitSet _file_in_drop_table_command1497 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SET_in_set_command1521 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _WS_in_set_command1523 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _variable_in_set_command1525 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800004000000UL});
		public static readonly BitSet _WS_in_set_command1527 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000000UL});
		public static readonly BitSet _175_in_set_command1530 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x10804200000UL});
		public static readonly BitSet _WS_in_set_command1532 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x10800200000UL});
		public static readonly BitSet _expression_in_set_command1535 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_expression_list1560 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8004000000UL});
		public static readonly BitSet _WS_in_expression_list1563 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000000UL});
		public static readonly BitSet _167_in_expression_list1566 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x10804200000UL});
		public static readonly BitSet _WS_in_expression_list1568 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x10800200000UL});
		public static readonly BitSet _expression_in_expression_list1571 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8004000000UL});
		public static readonly BitSet _expression_list_in_expression_list_or_select_command1594 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _select_command_in_expression_list_or_select_command1598 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_7_in_expression1610 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_6_in_expression_71626 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4000000UL});
		public static readonly BitSet _WS_in_expression_71633 = new BitSet(new ulong[]{0x25420000000800UL,0x0UL,0x3F001C0000000UL});
		public static readonly BitSet _op_7_in_expression_71638 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _WS_in_expression_71640 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x10800200000UL});
		public static readonly BitSet _expression_6_in_expression_71644 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4000000UL});
		public static readonly BitSet _IN_in_expression_71663 = new BitSet(new ulong[]{0x0UL,0x0UL,0x804000000UL});
		public static readonly BitSet _WS_in_expression_71665 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _163_in_expression_71668 = new BitSet(new ulong[]{0x500C000201CCC000UL,0x23UL,0x10804200000UL});
		public static readonly BitSet _WS_in_expression_71670 = new BitSet(new ulong[]{0x500C000201CCC000UL,0x23UL,0x10800200000UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_71673 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1004000000UL});
		public static readonly BitSet _WS_in_expression_71675 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000UL});
		public static readonly BitSet _164_in_expression_71678 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4000000UL});
		public static readonly BitSet _NOT_in_expression_71696 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _WS_in_expression_71698 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _IN_in_expression_71700 = new BitSet(new ulong[]{0x0UL,0x0UL,0x804000000UL});
		public static readonly BitSet _WS_in_expression_71702 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _163_in_expression_71705 = new BitSet(new ulong[]{0x500C000201CCC000UL,0x23UL,0x10804200000UL});
		public static readonly BitSet _WS_in_expression_71707 = new BitSet(new ulong[]{0x500C000201CCC000UL,0x23UL,0x10800200000UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_71711 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1004000000UL});
		public static readonly BitSet _WS_in_expression_71714 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000UL});
		public static readonly BitSet _164_in_expression_71717 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4000000UL});
		public static readonly BitSet _op_4_in_expression_71735 = new BitSet(new ulong[]{0x8000000000000080UL,0x0UL,0x4000000UL});
		public static readonly BitSet _WS_in_expression_71737 = new BitSet(new ulong[]{0x8000000000000080UL});
		public static readonly BitSet _SOME_in_expression_71741 = new BitSet(new ulong[]{0x0UL,0x0UL,0x804000000UL});
		public static readonly BitSet _ANY_in_expression_71745 = new BitSet(new ulong[]{0x0UL,0x0UL,0x804000000UL});
		public static readonly BitSet _WS_in_expression_71748 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _163_in_expression_71751 = new BitSet(new ulong[]{0x500C000201CCC000UL,0x23UL,0x10800200000UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_71753 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000UL});
		public static readonly BitSet _164_in_expression_71755 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4000000UL});
		public static readonly BitSet _op_4_in_expression_71775 = new BitSet(new ulong[]{0x20UL,0x0UL,0x4000000UL});
		public static readonly BitSet _WS_in_expression_71777 = new BitSet(new ulong[]{0x20UL});
		public static readonly BitSet _ALL_in_expression_71780 = new BitSet(new ulong[]{0x0UL,0x0UL,0x804000000UL});
		public static readonly BitSet _WS_in_expression_71782 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _163_in_expression_71785 = new BitSet(new ulong[]{0x500C000201CCC000UL,0x23UL,0x10800200000UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_71787 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000UL});
		public static readonly BitSet _164_in_expression_71789 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4000000UL});
		public static readonly BitSet _OR_in_op_71819 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LIKE_in_op_71828 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_71837 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _WS_in_op_71839 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _LIKE_in_op_71841 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MATCH_in_op_71850 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_71859 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _WS_in_op_71861 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _MATCH_in_op_71863 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BETWEEN_in_op_71872 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_71881 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _WS_in_op_71883 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _BETWEEN_in_op_71885 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_5_in_expression_61904 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4000000UL});
		public static readonly BitSet _WS_in_expression_61911 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _op_6_in_expression_61913 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _WS_in_expression_61915 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x10800200000UL});
		public static readonly BitSet _expression_5_in_expression_61919 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4000000UL});
		public static readonly BitSet _AND_in_op_61947 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _op_5_in_expression_51965 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _WS_in_expression_51967 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x10800200000UL});
		public static readonly BitSet _expression_5_in_expression_51969 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_4_in_expression_51984 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_51995 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_3_in_expression_42014 = new BitSet(new ulong[]{0x2UL,0x0UL,0x3F001C4000000UL});
		public static readonly BitSet _WS_in_expression_42021 = new BitSet(new ulong[]{0x0UL,0x0UL,0x3F001C0000000UL});
		public static readonly BitSet _op_4_in_expression_42024 = new BitSet(new ulong[]{0x4008000201CCC000UL,0x23UL,0x10804200000UL});
		public static readonly BitSet _WS_in_expression_42026 = new BitSet(new ulong[]{0x4008000201CCC000UL,0x23UL,0x10800200000UL});
		public static readonly BitSet _expression_3_in_expression_42031 = new BitSet(new ulong[]{0x2UL,0x0UL,0x3F001C4000000UL});
		public static readonly BitSet _175_in_op_42057 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _177_in_op_42066 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _173_in_op_42076 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _174_in_op_42086 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _159_in_op_42095 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _160_in_op_42104 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _158_in_op_42113 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _176_in_op_42122 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _172_in_op_42132 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_2_in_expression_32151 = new BitSet(new ulong[]{0x2UL,0x0UL,0x30014404000000UL});
		public static readonly BitSet _WS_in_expression_32158 = new BitSet(new ulong[]{0x0UL,0x0UL,0x30014400000000UL});
		public static readonly BitSet _op_3_in_expression_32161 = new BitSet(new ulong[]{0x4008000201CCC000UL,0x23UL,0x10804200000UL});
		public static readonly BitSet _WS_in_expression_32163 = new BitSet(new ulong[]{0x4008000201CCC000UL,0x23UL,0x10800200000UL});
		public static readonly BitSet _expression_2_in_expression_32168 = new BitSet(new ulong[]{0x2UL,0x0UL,0x30014404000000UL});
		public static readonly BitSet _166_in_op_32194 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _168_in_op_32203 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _162_in_op_32212 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _181_in_op_32221 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _180_in_op_32230 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_1_in_expression_22252 = new BitSet(new ulong[]{0x2UL,0x0UL,0x42204000000UL});
		public static readonly BitSet _WS_in_expression_22259 = new BitSet(new ulong[]{0x0UL,0x0UL,0x42200000000UL});
		public static readonly BitSet _op_2_in_expression_22262 = new BitSet(new ulong[]{0x4008000201CCC000UL,0x23UL,0x10804200000UL});
		public static readonly BitSet _WS_in_expression_22264 = new BitSet(new ulong[]{0x4008000201CCC000UL,0x23UL,0x10800200000UL});
		public static readonly BitSet _expression_1_in_expression_22269 = new BitSet(new ulong[]{0x2UL,0x0UL,0x42204000000UL});
		public static readonly BitSet _165_in_op_22295 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _170_in_op_22304 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _161_in_op_22313 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _163_in_expression_12331 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40014004000000UL});
		public static readonly BitSet _WS_in_expression_12333 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40014000000000UL});
		public static readonly BitSet _op_1_in_expression_12336 = new BitSet(new ulong[]{0x4008000201CCC000UL,0x23UL,0x10804200000UL});
		public static readonly BitSet _WS_in_expression_12338 = new BitSet(new ulong[]{0x4008000201CCC000UL,0x23UL,0x10800200000UL});
		public static readonly BitSet _expression_1_in_expression_12341 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1004000000UL});
		public static readonly BitSet _WS_in_expression_12343 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000UL});
		public static readonly BitSet _164_in_expression_12346 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_atom_in_expression_12363 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _182_in_op_12373 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _166_in_op_12383 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _168_in_op_12392 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _number_in_expression_atom2407 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _string_in_expression_atom2420 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SYSTEMVAR_in_expression_atom2425 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_in_expression_atom2438 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _subquery_in_expression_atom2443 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _163_in_expression_atom2448 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x10800200000UL});
		public static readonly BitSet _expression_in_expression_atom2450 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000UL});
		public static readonly BitSet _164_in_expression_atom2452 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functioncall_or_column_in_expression_atom2461 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _specialfunctioncall_in_expression_atom2466 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _case_in_expression_atom2471 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXISTS_in_expression_atom2476 = new BitSet(new ulong[]{0x0UL,0x0UL,0x804000000UL});
		public static readonly BitSet _WS_in_expression_atom2478 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _163_in_expression_atom2481 = new BitSet(new ulong[]{0x1000000000000000UL,0x0UL,0x4000000UL});
		public static readonly BitSet _WS_in_expression_atom2483 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _select_command_in_expression_atom2486 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1004000000UL});
		public static readonly BitSet _WS_in_expression_atom2488 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000UL});
		public static readonly BitSet _164_in_expression_atom2491 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_functioncall_or_column2511 = new BitSet(new ulong[]{0x0UL,0x0UL,0x804000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2513 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _163_in_functioncall_or_column2516 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x11804200000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2518 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x11800200000UL});
		public static readonly BitSet _expression_in_functioncall_or_column2522 = new BitSet(new ulong[]{0x0UL,0x0UL,0x9004000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2524 = new BitSet(new ulong[]{0x0UL,0x0UL,0x9000000000UL});
		public static readonly BitSet _167_in_functioncall_or_column2528 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x10804200000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2530 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x10800200000UL});
		public static readonly BitSet _expression_in_functioncall_or_column2533 = new BitSet(new ulong[]{0x0UL,0x0UL,0x9004000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2535 = new BitSet(new ulong[]{0x0UL,0x0UL,0x9000000000UL});
		public static readonly BitSet _164_in_functioncall_or_column2542 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COUNT_in_functioncall_or_column2558 = new BitSet(new ulong[]{0x0UL,0x0UL,0x804000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2560 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _163_in_functioncall_or_column2563 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x10804200000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2565 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x10800200000UL});
		public static readonly BitSet _expression_in_functioncall_or_column2568 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1004000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2570 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000UL});
		public static readonly BitSet _164_in_functioncall_or_column2573 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COUNT_in_functioncall_or_column2588 = new BitSet(new ulong[]{0x0UL,0x0UL,0x804000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2590 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _163_in_functioncall_or_column2593 = new BitSet(new ulong[]{0x10000000UL,0x0UL,0x4000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2595 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _DISTINCT_in_functioncall_or_column2598 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2600 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x10800200000UL});
		public static readonly BitSet _expression_in_functioncall_or_column2602 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1004000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2604 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000UL});
		public static readonly BitSet _164_in_functioncall_or_column2607 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COUNT_in_functioncall_or_column2622 = new BitSet(new ulong[]{0x0UL,0x0UL,0x804000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2624 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _163_in_functioncall_or_column2627 = new BitSet(new ulong[]{0x4000000000000000UL,0x0UL,0x2004000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2629 = new BitSet(new ulong[]{0x4000000000000000UL,0x0UL,0x2000000000UL});
		public static readonly BitSet _all_columns_in_functioncall_or_column2632 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1004000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2634 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000UL});
		public static readonly BitSet _164_in_functioncall_or_column2637 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COUNT_in_functioncall_or_column2652 = new BitSet(new ulong[]{0x0UL,0x0UL,0x804000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2654 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _163_in_functioncall_or_column2657 = new BitSet(new ulong[]{0x10000000UL,0x0UL,0x4000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2659 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _DISTINCT_in_functioncall_or_column2662 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2664 = new BitSet(new ulong[]{0x4000000000000000UL,0x0UL,0x2000000000UL});
		public static readonly BitSet _all_columns_in_functioncall_or_column2666 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1004000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2668 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000UL});
		public static readonly BitSet _164_in_functioncall_or_column2671 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _table_alias_in_functioncall_or_column2689 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20004000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2691 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20000000000UL});
		public static readonly BitSet _169_in_functioncall_or_column2694 = new BitSet(new ulong[]{0x4000000000000000UL,0x0UL,0x4000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2696 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _column_name_in_functioncall_or_column2701 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SIMPLE_FILE_in_column_name2724 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SIMPLE_FILE_in_table_alias2735 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CONVERT_in_specialfunctioncall2755 = new BitSet(new ulong[]{0x0UL,0x0UL,0x804000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2757 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _163_in_specialfunctioncall2760 = new BitSet(new ulong[]{0x0UL,0x20UL,0x4000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2762 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _TOKEN_in_specialfunctioncall2765 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8004000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2767 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000000UL});
		public static readonly BitSet _167_in_specialfunctioncall2770 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x10804200000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2772 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x10800200000UL});
		public static readonly BitSet _expression_in_specialfunctioncall2775 = new BitSet(new ulong[]{0x0UL,0x0UL,0x9004000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2777 = new BitSet(new ulong[]{0x0UL,0x0UL,0x9000000000UL});
		public static readonly BitSet _167_in_specialfunctioncall2781 = new BitSet(new ulong[]{0x0UL,0x1UL,0x4000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2783 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _STRING_in_specialfunctioncall2786 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1004000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2788 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000UL});
		public static readonly BitSet _164_in_specialfunctioncall2793 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CAST_in_specialfunctioncall2811 = new BitSet(new ulong[]{0x0UL,0x0UL,0x804000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2813 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _163_in_specialfunctioncall2816 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x10804200000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2818 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x10800200000UL});
		public static readonly BitSet _expression_in_specialfunctioncall2821 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2823 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _AS_in_specialfunctioncall2825 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2827 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _datatype_in_specialfunctioncall2829 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1004000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2831 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000UL});
		public static readonly BitSet _164_in_specialfunctioncall2834 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DATEADD_in_specialfunctioncall2849 = new BitSet(new ulong[]{0x0UL,0x0UL,0x804000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2851 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _163_in_specialfunctioncall2854 = new BitSet(new ulong[]{0x0UL,0x20UL,0x4000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2856 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _datepart_in_specialfunctioncall2859 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8004000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2861 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000000UL});
		public static readonly BitSet _167_in_specialfunctioncall2864 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x10804200000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2866 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x10800200000UL});
		public static readonly BitSet _expression_in_specialfunctioncall2869 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8004000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2871 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000000UL});
		public static readonly BitSet _167_in_specialfunctioncall2874 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x10804200000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2876 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x10800200000UL});
		public static readonly BitSet _expression_in_specialfunctioncall2879 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1004000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2881 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000UL});
		public static readonly BitSet _164_in_specialfunctioncall2884 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DATEDIFF_in_specialfunctioncall2902 = new BitSet(new ulong[]{0x0UL,0x0UL,0x804000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2904 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _163_in_specialfunctioncall2907 = new BitSet(new ulong[]{0x0UL,0x20UL,0x4000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2909 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _datepart_in_specialfunctioncall2912 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8004000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2914 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000000UL});
		public static readonly BitSet _167_in_specialfunctioncall2917 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x10804200000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2919 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x10800200000UL});
		public static readonly BitSet _expression_in_specialfunctioncall2922 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8004000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2924 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000000UL});
		public static readonly BitSet _167_in_specialfunctioncall2927 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x10804200000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2929 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x10800200000UL});
		public static readonly BitSet _expression_in_specialfunctioncall2932 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1004000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2934 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000UL});
		public static readonly BitSet _164_in_specialfunctioncall2937 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DATEPART_in_specialfunctioncall2955 = new BitSet(new ulong[]{0x0UL,0x0UL,0x804000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2957 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _163_in_specialfunctioncall2960 = new BitSet(new ulong[]{0x0UL,0x20UL,0x4000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2962 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _datepart_in_specialfunctioncall2965 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8004000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2967 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000000UL});
		public static readonly BitSet _167_in_specialfunctioncall2970 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x10804200000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2972 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x10800200000UL});
		public static readonly BitSet _expression_in_specialfunctioncall2975 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1004000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2977 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000UL});
		public static readonly BitSet _164_in_specialfunctioncall2980 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_datepart3004 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _168_in_number3025 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x4000000UL});
		public static readonly BitSet _WS_in_number3027 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NUMBER_in_number3032 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_string3040 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_datatype3060 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VARIABLE_in_variable3072 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CASE_in_case3092 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _WS_in_case3094 = new BitSet(new ulong[]{0x400C000381CCC000UL,0x23UL,0x10801200000UL});
		public static readonly BitSet _expression_in_case3097 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _WS_in_case3099 = new BitSet(new ulong[]{0x180000000UL,0x0UL,0x1000000UL});
		public static readonly BitSet _case_when_in_case3104 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _WS_in_case3106 = new BitSet(new ulong[]{0x180000000UL,0x0UL,0x1000000UL});
		public static readonly BitSet _case_else_in_case3111 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _WS_in_case3113 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _END_in_case3117 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHEN_in_case_when3145 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _WS_in_case_when3147 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x10800200000UL});
		public static readonly BitSet _expression_in_case_when3151 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _WS_in_case_when3153 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _THEN_in_case_when3155 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _WS_in_case_when3157 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x10800200000UL});
		public static readonly BitSet _expression_in_case_when3161 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ELSE_in_case_else3186 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _WS_in_case_else3188 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x10800200000UL});
		public static readonly BitSet _expression_in_case_else3190 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  FxGqlLib 
