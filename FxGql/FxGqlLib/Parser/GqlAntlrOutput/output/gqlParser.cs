//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g 2012-07-06 16:21:40

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591


// `XXX' does not need a CLSCompliant attribute because the assembly is not marked as CLS-compliant (CS3021)
#pragma warning disable 3021
// The private field `XXX' is assigned but its value is never used (CS0414)
#pragma warning disable 414


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  FxGqlLib 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class gqlParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "A", "ALL", "AND", "ANY", "AS", "ASC", "B", "BETWEEN", "BY", "C", "CASE", "CAST", "COMMENT_BLOCK", "COMMENT_LINE", "CONVERT", "CREATE", "D", "DECLARE", "DESC", "DIGIT", "DISTINCT", "DROP", "E", "ELSE", "END", "EXISTS", "F", "FROM", "G", "GROUP", "H", "I", "IN", "INTO", "J", "K", "L", "LIKE", "M", "MATCH", "N", "NOT", "NUMBER", "O", "OR", "ORDER", "ORIG", "P", "Q", "R", "S", "SELECT", "SET", "SIMPLE_FILE", "SOME", "STRING", "SYSTEMVAR", "T", "THEN", "TOKEN", "TOP", "T_ALL", "T_ALLCOLUMNS", "T_AND", "T_ANY", "T_BETWEEN", "T_BITWISE_AND", "T_BITWISE_NOT", "T_BITWISE_OR", "T_BITWISE_XOR", "T_CASE", "T_CASE_ELSE", "T_CASE_WHEN", "T_COLUMN", "T_COLUMNLIST", "T_CONVERT", "T_CREATE_VIEW", "T_DECLARATION", "T_DECLARE", "T_DISTINCT", "T_DIVIDE", "T_DROP_VIEW", "T_EQUAL", "T_EXISTS", "T_EXPRESSIONLIST", "T_FILE", "T_FILEOPTION", "T_FROM", "T_FUNCTIONCALL", "T_GREATER", "T_GROUPBY", "T_GROUPBY_ORIG", "T_IN", "T_INTEGER", "T_INTO", "T_LESS", "T_LIKE", "T_MATCH", "T_MINUS", "T_MODULO", "T_NOT", "T_NOTBETWEEN", "T_NOTEQUAL", "T_NOTGREATER", "T_NOTIN", "T_NOTLESS", "T_NOTLIKE", "T_NOTMATCH", "T_OP_BINARY", "T_OP_UNARY", "T_OR", "T_ORDERBY", "T_ORDERBY_ASC", "T_ORDERBY_COLUMN", "T_ORDERBY_DESC", "T_ORDERBY_ORIG", "T_PLUS", "T_PRODUCT", "T_ROOT", "T_SELECT", "T_SET_VARIABLE", "T_STRING", "T_SUBQUERY", "T_SYSTEMVAR", "T_TABLE_ALIAS", "T_TOP", "T_USE", "T_VARIABLE", "T_VIEW_NAME", "T_WHERE", "U", "USE", "V", "VARIABLE", "VIEW", "W", "WHEN", "WHERE", "WS", "X", "Y", "Z", "'!<'", "'!='", "'!>'", "'%'", "'&'", "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", "';'", "'<'", "'<='", "'<>'", "'='", "'>'", "'>='", "'['", "']'", "'^'", "'|'", "'~'"
	};
	public const int EOF=-1;
	public const int T__146=146;
	public const int T__147=147;
	public const int T__148=148;
	public const int T__149=149;
	public const int T__150=150;
	public const int T__151=151;
	public const int T__152=152;
	public const int T__153=153;
	public const int T__154=154;
	public const int T__155=155;
	public const int T__156=156;
	public const int T__157=157;
	public const int T__158=158;
	public const int T__159=159;
	public const int T__160=160;
	public const int T__161=161;
	public const int T__162=162;
	public const int T__163=163;
	public const int T__164=164;
	public const int T__165=165;
	public const int T__166=166;
	public const int T__167=167;
	public const int T__168=168;
	public const int T__169=169;
	public const int T__170=170;
	public const int A=4;
	public const int ALL=5;
	public const int AND=6;
	public const int ANY=7;
	public const int AS=8;
	public const int ASC=9;
	public const int B=10;
	public const int BETWEEN=11;
	public const int BY=12;
	public const int C=13;
	public const int CASE=14;
	public const int CAST=15;
	public const int COMMENT_BLOCK=16;
	public const int COMMENT_LINE=17;
	public const int CONVERT=18;
	public const int CREATE=19;
	public const int D=20;
	public const int DECLARE=21;
	public const int DESC=22;
	public const int DIGIT=23;
	public const int DISTINCT=24;
	public const int DROP=25;
	public const int E=26;
	public const int ELSE=27;
	public const int END=28;
	public const int EXISTS=29;
	public const int F=30;
	public const int FROM=31;
	public const int G=32;
	public const int GROUP=33;
	public const int H=34;
	public const int I=35;
	public const int IN=36;
	public const int INTO=37;
	public const int J=38;
	public const int K=39;
	public const int L=40;
	public const int LIKE=41;
	public const int M=42;
	public const int MATCH=43;
	public const int N=44;
	public const int NOT=45;
	public const int NUMBER=46;
	public const int O=47;
	public const int OR=48;
	public const int ORDER=49;
	public const int ORIG=50;
	public const int P=51;
	public const int Q=52;
	public const int R=53;
	public const int S=54;
	public const int SELECT=55;
	public const int SET=56;
	public const int SIMPLE_FILE=57;
	public const int SOME=58;
	public const int STRING=59;
	public const int SYSTEMVAR=60;
	public const int T=61;
	public const int THEN=62;
	public const int TOKEN=63;
	public const int TOP=64;
	public const int T_ALL=65;
	public const int T_ALLCOLUMNS=66;
	public const int T_AND=67;
	public const int T_ANY=68;
	public const int T_BETWEEN=69;
	public const int T_BITWISE_AND=70;
	public const int T_BITWISE_NOT=71;
	public const int T_BITWISE_OR=72;
	public const int T_BITWISE_XOR=73;
	public const int T_CASE=74;
	public const int T_CASE_ELSE=75;
	public const int T_CASE_WHEN=76;
	public const int T_COLUMN=77;
	public const int T_COLUMNLIST=78;
	public const int T_CONVERT=79;
	public const int T_CREATE_VIEW=80;
	public const int T_DECLARATION=81;
	public const int T_DECLARE=82;
	public const int T_DISTINCT=83;
	public const int T_DIVIDE=84;
	public const int T_DROP_VIEW=85;
	public const int T_EQUAL=86;
	public const int T_EXISTS=87;
	public const int T_EXPRESSIONLIST=88;
	public const int T_FILE=89;
	public const int T_FILEOPTION=90;
	public const int T_FROM=91;
	public const int T_FUNCTIONCALL=92;
	public const int T_GREATER=93;
	public const int T_GROUPBY=94;
	public const int T_GROUPBY_ORIG=95;
	public const int T_IN=96;
	public const int T_INTEGER=97;
	public const int T_INTO=98;
	public const int T_LESS=99;
	public const int T_LIKE=100;
	public const int T_MATCH=101;
	public const int T_MINUS=102;
	public const int T_MODULO=103;
	public const int T_NOT=104;
	public const int T_NOTBETWEEN=105;
	public const int T_NOTEQUAL=106;
	public const int T_NOTGREATER=107;
	public const int T_NOTIN=108;
	public const int T_NOTLESS=109;
	public const int T_NOTLIKE=110;
	public const int T_NOTMATCH=111;
	public const int T_OP_BINARY=112;
	public const int T_OP_UNARY=113;
	public const int T_OR=114;
	public const int T_ORDERBY=115;
	public const int T_ORDERBY_ASC=116;
	public const int T_ORDERBY_COLUMN=117;
	public const int T_ORDERBY_DESC=118;
	public const int T_ORDERBY_ORIG=119;
	public const int T_PLUS=120;
	public const int T_PRODUCT=121;
	public const int T_ROOT=122;
	public const int T_SELECT=123;
	public const int T_SET_VARIABLE=124;
	public const int T_STRING=125;
	public const int T_SUBQUERY=126;
	public const int T_SYSTEMVAR=127;
	public const int T_TABLE_ALIAS=128;
	public const int T_TOP=129;
	public const int T_USE=130;
	public const int T_VARIABLE=131;
	public const int T_VIEW_NAME=132;
	public const int T_WHERE=133;
	public const int U=134;
	public const int USE=135;
	public const int V=136;
	public const int VARIABLE=137;
	public const int VIEW=138;
	public const int W=139;
	public const int WHEN=140;
	public const int WHERE=141;
	public const int WS=142;
	public const int X=143;
	public const int Y=144;
	public const int Z=145;

	#if ANTLR_DEBUG
		private static readonly bool[] decisionCanBacktrack =
			new bool[]
			{
				false, // invalid decision
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false
			};
	#else
		private static readonly bool[] decisionCanBacktrack = new bool[0];
	#endif
	public gqlParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public gqlParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}
	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return gqlParser.tokenNames; } }
	public override string GrammarFileName { get { return "C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g"; } }


	[Conditional("ANTLR_TRACE")]
	protected virtual void OnCreated() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

	#region Rules

	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_parse() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_parse() {}

	// $ANTLR start "parse"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:100:1: parse : ( WS )? ( commands ( WS )? )? EOF -> ^( T_ROOT ( commands )? ) ;
	[GrammarRule("parse")]
	private AstParserRuleReturnScope<object, IToken> parse()
	{
		EnterRule_parse();
		EnterRule("parse", 1);
		TraceIn("parse", 1);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS1 = default(IToken);
	    IToken WS3 = default(IToken);
	    IToken EOF4 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> commands2 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS1_tree = default(object);
	    object WS3_tree = default(object);
	    object EOF4_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
	    RewriteRuleSubtreeStream stream_commands=new RewriteRuleSubtreeStream(adaptor,"rule commands");
		try { DebugEnterRule(GrammarFileName, "parse");
		DebugLocation(100, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:101:2: ( ( WS )? ( commands ( WS )? )? EOF -> ^( T_ROOT ( commands )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:101:4: ( WS )? ( commands ( WS )? )? EOF
			{
			DebugLocation(101, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:101:4: ( WS )?
			int alt1=2;
			try { DebugEnterSubRule(1);
			try { DebugEnterDecision(1, decisionCanBacktrack[1]);
			int LA1_0 = input.LA(1);

			if ((LA1_0==WS))
			{
				alt1 = 1;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:101:4: WS
				{
				DebugLocation(101, 4);
				WS1=(IToken)Match(input,WS,Follow._WS_in_parse356);  
				stream_WS.Add(WS1);


				}
				break;

			}
			} finally { DebugExitSubRule(1); }

			DebugLocation(101, 8);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:101:8: ( commands ( WS )? )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, decisionCanBacktrack[3]);
			int LA3_0 = input.LA(1);

			if ((LA3_0==CREATE||LA3_0==DECLARE||LA3_0==DROP||(LA3_0>=SELECT && LA3_0<=SET)||LA3_0==USE))
			{
				alt3 = 1;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:101:9: commands ( WS )?
				{
				DebugLocation(101, 9);
				PushFollow(Follow._commands_in_parse360);
				commands2=commands();
				PopFollow();

				stream_commands.Add(commands2.Tree);
				DebugLocation(101, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:101:18: ( WS )?
				int alt2=2;
				try { DebugEnterSubRule(2);
				try { DebugEnterDecision(2, decisionCanBacktrack[2]);
				int LA2_0 = input.LA(1);

				if ((LA2_0==WS))
				{
					alt2 = 1;
				}
				} finally { DebugExitDecision(2); }
				switch (alt2)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:101:18: WS
					{
					DebugLocation(101, 18);
					WS3=(IToken)Match(input,WS,Follow._WS_in_parse362);  
					stream_WS.Add(WS3);


					}
					break;

				}
				} finally { DebugExitSubRule(2); }


				}
				break;

			}
			} finally { DebugExitSubRule(3); }

			DebugLocation(101, 24);
			EOF4=(IToken)Match(input,EOF,Follow._EOF_in_parse367);  
			stream_EOF.Add(EOF4);



			{
			// AST REWRITE
			// elements: commands
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 102:2: -> ^( T_ROOT ( commands )? )
			{
				DebugLocation(102, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:102:5: ^( T_ROOT ( commands )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(102, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_ROOT, "T_ROOT"), root_1);

				DebugLocation(102, 14);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:102:14: ( commands )?
				if (stream_commands.HasNext)
				{
					DebugLocation(102, 14);
					adaptor.AddChild(root_1, stream_commands.NextTree());

				}
				stream_commands.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parse", 1);
			LeaveRule("parse", 1);
			LeaveRule_parse();
	    }
	 	DebugLocation(103, 1);
		} finally { DebugExitRule(GrammarFileName, "parse"); }
		return retval;

	}
	// $ANTLR end "parse"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_commands() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_commands() {}

	// $ANTLR start "commands"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:105:1: commands : command ( ( WS )? ( ';' ( WS )? )? command )* ( ( WS )? ';' )? -> ( command )+ ;
	[GrammarRule("commands")]
	private AstParserRuleReturnScope<object, IToken> commands()
	{
		EnterRule_commands();
		EnterRule("commands", 2);
		TraceIn("commands", 2);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS6 = default(IToken);
	    IToken char_literal7 = default(IToken);
	    IToken WS8 = default(IToken);
	    IToken WS10 = default(IToken);
	    IToken char_literal11 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> command5 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> command9 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS6_tree = default(object);
	    object char_literal7_tree = default(object);
	    object WS8_tree = default(object);
	    object WS10_tree = default(object);
	    object char_literal11_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_159=new RewriteRuleITokenStream(adaptor,"token 159");
	    RewriteRuleSubtreeStream stream_command=new RewriteRuleSubtreeStream(adaptor,"rule command");
		try { DebugEnterRule(GrammarFileName, "commands");
		DebugLocation(105, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:106:2: ( command ( ( WS )? ( ';' ( WS )? )? command )* ( ( WS )? ';' )? -> ( command )+ )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:106:4: command ( ( WS )? ( ';' ( WS )? )? command )* ( ( WS )? ';' )?
			{
			DebugLocation(106, 4);
			PushFollow(Follow._command_in_commands390);
			command5=command();
			PopFollow();

			stream_command.Add(command5.Tree);
			DebugLocation(106, 12);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:106:12: ( ( WS )? ( ';' ( WS )? )? command )*
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, decisionCanBacktrack[7]);
				switch (input.LA(1))
				{
				case WS:
					{
					int LA7_1 = input.LA(2);

					if ((LA7_1==159))
					{
						int LA7_2 = input.LA(3);

						if ((LA7_2==WS))
						{
							int LA7_5 = input.LA(4);

							if ((LA7_5==CREATE||LA7_5==DECLARE||LA7_5==DROP||(LA7_5>=SELECT && LA7_5<=SET)||LA7_5==USE))
							{
								alt7 = 1;
							}


						}
						else if ((LA7_2==CREATE||LA7_2==DECLARE||LA7_2==DROP||(LA7_2>=SELECT && LA7_2<=SET)||LA7_2==USE))
						{
							alt7 = 1;
						}


					}
					else if ((LA7_1==CREATE||LA7_1==DECLARE||LA7_1==DROP||(LA7_1>=SELECT && LA7_1<=SET)||LA7_1==USE))
					{
						alt7 = 1;
					}


					}
					break;
				case 159:
					{
					int LA7_2 = input.LA(2);

					if ((LA7_2==WS))
					{
						int LA7_5 = input.LA(3);

						if ((LA7_5==CREATE||LA7_5==DECLARE||LA7_5==DROP||(LA7_5>=SELECT && LA7_5<=SET)||LA7_5==USE))
						{
							alt7 = 1;
						}


					}
					else if ((LA7_2==CREATE||LA7_2==DECLARE||LA7_2==DROP||(LA7_2>=SELECT && LA7_2<=SET)||LA7_2==USE))
					{
						alt7 = 1;
					}


					}
					break;
				case CREATE:
				case DECLARE:
				case DROP:
				case SELECT:
				case SET:
				case USE:
					{
					alt7 = 1;
					}
					break;
				}

				} finally { DebugExitDecision(7); }
				switch ( alt7 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:106:13: ( WS )? ( ';' ( WS )? )? command
					{
					DebugLocation(106, 13);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:106:13: ( WS )?
					int alt4=2;
					try { DebugEnterSubRule(4);
					try { DebugEnterDecision(4, decisionCanBacktrack[4]);
					int LA4_0 = input.LA(1);

					if ((LA4_0==WS))
					{
						alt4 = 1;
					}
					} finally { DebugExitDecision(4); }
					switch (alt4)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:106:13: WS
						{
						DebugLocation(106, 13);
						WS6=(IToken)Match(input,WS,Follow._WS_in_commands393);  
						stream_WS.Add(WS6);


						}
						break;

					}
					} finally { DebugExitSubRule(4); }

					DebugLocation(106, 17);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:106:17: ( ';' ( WS )? )?
					int alt6=2;
					try { DebugEnterSubRule(6);
					try { DebugEnterDecision(6, decisionCanBacktrack[6]);
					int LA6_0 = input.LA(1);

					if ((LA6_0==159))
					{
						alt6 = 1;
					}
					} finally { DebugExitDecision(6); }
					switch (alt6)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:106:18: ';' ( WS )?
						{
						DebugLocation(106, 18);
						char_literal7=(IToken)Match(input,159,Follow._159_in_commands397);  
						stream_159.Add(char_literal7);

						DebugLocation(106, 22);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:106:22: ( WS )?
						int alt5=2;
						try { DebugEnterSubRule(5);
						try { DebugEnterDecision(5, decisionCanBacktrack[5]);
						int LA5_0 = input.LA(1);

						if ((LA5_0==WS))
						{
							alt5 = 1;
						}
						} finally { DebugExitDecision(5); }
						switch (alt5)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:106:22: WS
							{
							DebugLocation(106, 22);
							WS8=(IToken)Match(input,WS,Follow._WS_in_commands399);  
							stream_WS.Add(WS8);


							}
							break;

						}
						} finally { DebugExitSubRule(5); }


						}
						break;

					}
					} finally { DebugExitSubRule(6); }

					DebugLocation(106, 28);
					PushFollow(Follow._command_in_commands404);
					command9=command();
					PopFollow();

					stream_command.Add(command9.Tree);

					}
					break;

				default:
					goto loop7;
				}
			}

			loop7:
				;

			} finally { DebugExitSubRule(7); }

			DebugLocation(106, 38);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:106:38: ( ( WS )? ';' )?
			int alt9=2;
			try { DebugEnterSubRule(9);
			try { DebugEnterDecision(9, decisionCanBacktrack[9]);
			int LA9_0 = input.LA(1);

			if ((LA9_0==WS))
			{
				int LA9_1 = input.LA(2);

				if ((LA9_1==159))
				{
					alt9 = 1;
				}
			}
			else if ((LA9_0==159))
			{
				alt9 = 1;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:106:39: ( WS )? ';'
				{
				DebugLocation(106, 39);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:106:39: ( WS )?
				int alt8=2;
				try { DebugEnterSubRule(8);
				try { DebugEnterDecision(8, decisionCanBacktrack[8]);
				int LA8_0 = input.LA(1);

				if ((LA8_0==WS))
				{
					alt8 = 1;
				}
				} finally { DebugExitDecision(8); }
				switch (alt8)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:106:39: WS
					{
					DebugLocation(106, 39);
					WS10=(IToken)Match(input,WS,Follow._WS_in_commands409);  
					stream_WS.Add(WS10);


					}
					break;

				}
				} finally { DebugExitSubRule(8); }

				DebugLocation(106, 43);
				char_literal11=(IToken)Match(input,159,Follow._159_in_commands412);  
				stream_159.Add(char_literal11);


				}
				break;

			}
			} finally { DebugExitSubRule(9); }



			{
			// AST REWRITE
			// elements: command
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 107:2: -> ( command )+
			{
				DebugLocation(107, 5);
				if (!(stream_command.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_command.HasNext )
				{
					DebugLocation(107, 5);
					adaptor.AddChild(root_0, stream_command.NextTree());

				}
				stream_command.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("commands", 2);
			LeaveRule("commands", 2);
			LeaveRule_commands();
	    }
	 	DebugLocation(108, 1);
		} finally { DebugExitRule(GrammarFileName, "commands"); }
		return retval;

	}
	// $ANTLR end "commands"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_command() {}

	// $ANTLR start "command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:110:1: command : ( select_command | use_command | declare_command | set_command | create_view_command | drop_view_command );
	[GrammarRule("command")]
	private AstParserRuleReturnScope<object, IToken> command()
	{
		EnterRule_command();
		EnterRule("command", 3);
		TraceIn("command", 3);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> select_command12 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> use_command13 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> declare_command14 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> set_command15 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> create_view_command16 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> drop_view_command17 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "command");
		DebugLocation(110, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:111:2: ( select_command | use_command | declare_command | set_command | create_view_command | drop_view_command )
			int alt10=6;
			try { DebugEnterDecision(10, decisionCanBacktrack[10]);
			switch (input.LA(1))
			{
			case SELECT:
				{
				alt10 = 1;
				}
				break;
			case USE:
				{
				alt10 = 2;
				}
				break;
			case DECLARE:
				{
				alt10 = 3;
				}
				break;
			case SET:
				{
				alt10 = 4;
				}
				break;
			case CREATE:
				{
				alt10 = 5;
				}
				break;
			case DROP:
				{
				alt10 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 10, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:111:4: select_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(111, 4);
				PushFollow(Follow._select_command_in_command432);
				select_command12=select_command();
				PopFollow();

				adaptor.AddChild(root_0, select_command12.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:112:4: use_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(112, 4);
				PushFollow(Follow._use_command_in_command437);
				use_command13=use_command();
				PopFollow();

				adaptor.AddChild(root_0, use_command13.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:113:4: declare_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(113, 4);
				PushFollow(Follow._declare_command_in_command442);
				declare_command14=declare_command();
				PopFollow();

				adaptor.AddChild(root_0, declare_command14.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:114:4: set_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(114, 4);
				PushFollow(Follow._set_command_in_command447);
				set_command15=set_command();
				PopFollow();

				adaptor.AddChild(root_0, set_command15.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:115:4: create_view_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(115, 4);
				PushFollow(Follow._create_view_command_in_command452);
				create_view_command16=create_view_command();
				PopFollow();

				adaptor.AddChild(root_0, create_view_command16.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:116:4: drop_view_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(116, 4);
				PushFollow(Follow._drop_view_command_in_command457);
				drop_view_command17=drop_view_command();
				PopFollow();

				adaptor.AddChild(root_0, drop_view_command17.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("command", 3);
			LeaveRule("command", 3);
			LeaveRule_command();
	    }
	 	DebugLocation(117, 1);
		} finally { DebugExitRule(GrammarFileName, "command"); }
		return retval;

	}
	// $ANTLR end "command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_select_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_select_command() {}

	// $ANTLR start "select_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:122:1: select_command : SELECT ( WS distinct_clause )? ( WS top_clause )? WS column_list ( WS into_clause )? ( WS from_clause )? ( WS where_clause )? ( WS groupby_clause )? ( WS orderby_clause )? -> ^( T_SELECT ( distinct_clause )? ( top_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( orderby_clause )? ) ;
	[GrammarRule("select_command")]
	private AstParserRuleReturnScope<object, IToken> select_command()
	{
		EnterRule_select_command();
		EnterRule("select_command", 4);
		TraceIn("select_command", 4);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken SELECT18 = default(IToken);
	    IToken WS19 = default(IToken);
	    IToken WS21 = default(IToken);
	    IToken WS23 = default(IToken);
	    IToken WS25 = default(IToken);
	    IToken WS27 = default(IToken);
	    IToken WS29 = default(IToken);
	    IToken WS31 = default(IToken);
	    IToken WS33 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> distinct_clause20 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> top_clause22 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> column_list24 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> into_clause26 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> from_clause28 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> where_clause30 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> groupby_clause32 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> orderby_clause34 = default(AstParserRuleReturnScope<object, IToken>);

	    object SELECT18_tree = default(object);
	    object WS19_tree = default(object);
	    object WS21_tree = default(object);
	    object WS23_tree = default(object);
	    object WS25_tree = default(object);
	    object WS27_tree = default(object);
	    object WS29_tree = default(object);
	    object WS31_tree = default(object);
	    object WS33_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_SELECT=new RewriteRuleITokenStream(adaptor,"token SELECT");
	    RewriteRuleSubtreeStream stream_groupby_clause=new RewriteRuleSubtreeStream(adaptor,"rule groupby_clause");
	    RewriteRuleSubtreeStream stream_distinct_clause=new RewriteRuleSubtreeStream(adaptor,"rule distinct_clause");
	    RewriteRuleSubtreeStream stream_from_clause=new RewriteRuleSubtreeStream(adaptor,"rule from_clause");
	    RewriteRuleSubtreeStream stream_column_list=new RewriteRuleSubtreeStream(adaptor,"rule column_list");
	    RewriteRuleSubtreeStream stream_where_clause=new RewriteRuleSubtreeStream(adaptor,"rule where_clause");
	    RewriteRuleSubtreeStream stream_into_clause=new RewriteRuleSubtreeStream(adaptor,"rule into_clause");
	    RewriteRuleSubtreeStream stream_top_clause=new RewriteRuleSubtreeStream(adaptor,"rule top_clause");
	    RewriteRuleSubtreeStream stream_orderby_clause=new RewriteRuleSubtreeStream(adaptor,"rule orderby_clause");
		try { DebugEnterRule(GrammarFileName, "select_command");
		DebugLocation(122, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:123:2: ( SELECT ( WS distinct_clause )? ( WS top_clause )? WS column_list ( WS into_clause )? ( WS from_clause )? ( WS where_clause )? ( WS groupby_clause )? ( WS orderby_clause )? -> ^( T_SELECT ( distinct_clause )? ( top_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( orderby_clause )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:123:4: SELECT ( WS distinct_clause )? ( WS top_clause )? WS column_list ( WS into_clause )? ( WS from_clause )? ( WS where_clause )? ( WS groupby_clause )? ( WS orderby_clause )?
			{
			DebugLocation(123, 4);
			SELECT18=(IToken)Match(input,SELECT,Follow._SELECT_in_select_command471);  
			stream_SELECT.Add(SELECT18);

			DebugLocation(123, 11);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:123:11: ( WS distinct_clause )?
			int alt11=2;
			try { DebugEnterSubRule(11);
			try { DebugEnterDecision(11, decisionCanBacktrack[11]);
			int LA11_0 = input.LA(1);

			if ((LA11_0==WS))
			{
				int LA11_1 = input.LA(2);

				if ((LA11_1==ALL||LA11_1==DISTINCT))
				{
					alt11 = 1;
				}
			}
			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:123:12: WS distinct_clause
				{
				DebugLocation(123, 12);
				WS19=(IToken)Match(input,WS,Follow._WS_in_select_command474);  
				stream_WS.Add(WS19);

				DebugLocation(123, 15);
				PushFollow(Follow._distinct_clause_in_select_command476);
				distinct_clause20=distinct_clause();
				PopFollow();

				stream_distinct_clause.Add(distinct_clause20.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(11); }

			DebugLocation(123, 33);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:123:33: ( WS top_clause )?
			int alt12=2;
			try { DebugEnterSubRule(12);
			try { DebugEnterDecision(12, decisionCanBacktrack[12]);
			int LA12_0 = input.LA(1);

			if ((LA12_0==WS))
			{
				int LA12_1 = input.LA(2);

				if ((LA12_1==TOP))
				{
					alt12 = 1;
				}
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:123:34: WS top_clause
				{
				DebugLocation(123, 34);
				WS21=(IToken)Match(input,WS,Follow._WS_in_select_command481);  
				stream_WS.Add(WS21);

				DebugLocation(123, 37);
				PushFollow(Follow._top_clause_in_select_command483);
				top_clause22=top_clause();
				PopFollow();

				stream_top_clause.Add(top_clause22.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(12); }

			DebugLocation(123, 50);
			WS23=(IToken)Match(input,WS,Follow._WS_in_select_command487);  
			stream_WS.Add(WS23);

			DebugLocation(123, 53);
			PushFollow(Follow._column_list_in_select_command489);
			column_list24=column_list();
			PopFollow();

			stream_column_list.Add(column_list24.Tree);
			DebugLocation(123, 65);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:123:65: ( WS into_clause )?
			int alt13=2;
			try { DebugEnterSubRule(13);
			try { DebugEnterDecision(13, decisionCanBacktrack[13]);
			int LA13_0 = input.LA(1);

			if ((LA13_0==WS))
			{
				int LA13_1 = input.LA(2);

				if ((LA13_1==INTO))
				{
					alt13 = 1;
				}
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:123:66: WS into_clause
				{
				DebugLocation(123, 66);
				WS25=(IToken)Match(input,WS,Follow._WS_in_select_command492);  
				stream_WS.Add(WS25);

				DebugLocation(123, 69);
				PushFollow(Follow._into_clause_in_select_command494);
				into_clause26=into_clause();
				PopFollow();

				stream_into_clause.Add(into_clause26.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(13); }

			DebugLocation(123, 83);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:123:83: ( WS from_clause )?
			int alt14=2;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, decisionCanBacktrack[14]);
			int LA14_0 = input.LA(1);

			if ((LA14_0==WS))
			{
				int LA14_1 = input.LA(2);

				if ((LA14_1==FROM))
				{
					alt14 = 1;
				}
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:123:84: WS from_clause
				{
				DebugLocation(123, 84);
				WS27=(IToken)Match(input,WS,Follow._WS_in_select_command499);  
				stream_WS.Add(WS27);

				DebugLocation(123, 87);
				PushFollow(Follow._from_clause_in_select_command501);
				from_clause28=from_clause();
				PopFollow();

				stream_from_clause.Add(from_clause28.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(14); }

			DebugLocation(123, 101);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:123:101: ( WS where_clause )?
			int alt15=2;
			try { DebugEnterSubRule(15);
			try { DebugEnterDecision(15, decisionCanBacktrack[15]);
			int LA15_0 = input.LA(1);

			if ((LA15_0==WS))
			{
				int LA15_1 = input.LA(2);

				if ((LA15_1==WHERE))
				{
					alt15 = 1;
				}
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:123:102: WS where_clause
				{
				DebugLocation(123, 102);
				WS29=(IToken)Match(input,WS,Follow._WS_in_select_command506);  
				stream_WS.Add(WS29);

				DebugLocation(123, 105);
				PushFollow(Follow._where_clause_in_select_command508);
				where_clause30=where_clause();
				PopFollow();

				stream_where_clause.Add(where_clause30.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(15); }

			DebugLocation(123, 120);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:123:120: ( WS groupby_clause )?
			int alt16=2;
			try { DebugEnterSubRule(16);
			try { DebugEnterDecision(16, decisionCanBacktrack[16]);
			int LA16_0 = input.LA(1);

			if ((LA16_0==WS))
			{
				int LA16_1 = input.LA(2);

				if ((LA16_1==GROUP))
				{
					alt16 = 1;
				}
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:123:121: WS groupby_clause
				{
				DebugLocation(123, 121);
				WS31=(IToken)Match(input,WS,Follow._WS_in_select_command513);  
				stream_WS.Add(WS31);

				DebugLocation(123, 124);
				PushFollow(Follow._groupby_clause_in_select_command515);
				groupby_clause32=groupby_clause();
				PopFollow();

				stream_groupby_clause.Add(groupby_clause32.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(16); }

			DebugLocation(123, 141);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:123:141: ( WS orderby_clause )?
			int alt17=2;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, decisionCanBacktrack[17]);
			int LA17_0 = input.LA(1);

			if ((LA17_0==WS))
			{
				int LA17_1 = input.LA(2);

				if ((LA17_1==ORDER))
				{
					alt17 = 1;
				}
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:123:142: WS orderby_clause
				{
				DebugLocation(123, 142);
				WS33=(IToken)Match(input,WS,Follow._WS_in_select_command520);  
				stream_WS.Add(WS33);

				DebugLocation(123, 145);
				PushFollow(Follow._orderby_clause_in_select_command522);
				orderby_clause34=orderby_clause();
				PopFollow();

				stream_orderby_clause.Add(orderby_clause34.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(17); }



			{
			// AST REWRITE
			// elements: column_list, where_clause, distinct_clause, groupby_clause, top_clause, orderby_clause, into_clause, from_clause
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 124:3: -> ^( T_SELECT ( distinct_clause )? ( top_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( orderby_clause )? )
			{
				DebugLocation(124, 6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:124:6: ^( T_SELECT ( distinct_clause )? ( top_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( orderby_clause )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(124, 8);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SELECT, "T_SELECT"), root_1);

				DebugLocation(124, 17);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:124:17: ( distinct_clause )?
				if (stream_distinct_clause.HasNext)
				{
					DebugLocation(124, 17);
					adaptor.AddChild(root_1, stream_distinct_clause.NextTree());

				}
				stream_distinct_clause.Reset();
				DebugLocation(124, 34);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:124:34: ( top_clause )?
				if (stream_top_clause.HasNext)
				{
					DebugLocation(124, 34);
					adaptor.AddChild(root_1, stream_top_clause.NextTree());

				}
				stream_top_clause.Reset();
				DebugLocation(124, 46);
				adaptor.AddChild(root_1, stream_column_list.NextTree());
				DebugLocation(124, 58);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:124:58: ( into_clause )?
				if (stream_into_clause.HasNext)
				{
					DebugLocation(124, 58);
					adaptor.AddChild(root_1, stream_into_clause.NextTree());

				}
				stream_into_clause.Reset();
				DebugLocation(124, 71);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:124:71: ( from_clause )?
				if (stream_from_clause.HasNext)
				{
					DebugLocation(124, 71);
					adaptor.AddChild(root_1, stream_from_clause.NextTree());

				}
				stream_from_clause.Reset();
				DebugLocation(124, 84);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:124:84: ( where_clause )?
				if (stream_where_clause.HasNext)
				{
					DebugLocation(124, 84);
					adaptor.AddChild(root_1, stream_where_clause.NextTree());

				}
				stream_where_clause.Reset();
				DebugLocation(124, 98);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:124:98: ( groupby_clause )?
				if (stream_groupby_clause.HasNext)
				{
					DebugLocation(124, 98);
					adaptor.AddChild(root_1, stream_groupby_clause.NextTree());

				}
				stream_groupby_clause.Reset();
				DebugLocation(124, 114);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:124:114: ( orderby_clause )?
				if (stream_orderby_clause.HasNext)
				{
					DebugLocation(124, 114);
					adaptor.AddChild(root_1, stream_orderby_clause.NextTree());

				}
				stream_orderby_clause.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("select_command", 4);
			LeaveRule("select_command", 4);
			LeaveRule_select_command();
	    }
	 	DebugLocation(125, 1);
		} finally { DebugExitRule(GrammarFileName, "select_command"); }
		return retval;

	}
	// $ANTLR end "select_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_distinct_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_distinct_clause() {}

	// $ANTLR start "distinct_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:127:1: distinct_clause : ( DISTINCT -> T_DISTINCT | ALL -> T_ALL );
	[GrammarRule("distinct_clause")]
	private AstParserRuleReturnScope<object, IToken> distinct_clause()
	{
		EnterRule_distinct_clause();
		EnterRule("distinct_clause", 5);
		TraceIn("distinct_clause", 5);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken DISTINCT35 = default(IToken);
	    IToken ALL36 = default(IToken);

	    object DISTINCT35_tree = default(object);
	    object ALL36_tree = default(object);
	    RewriteRuleITokenStream stream_DISTINCT=new RewriteRuleITokenStream(adaptor,"token DISTINCT");
	    RewriteRuleITokenStream stream_ALL=new RewriteRuleITokenStream(adaptor,"token ALL");

		try { DebugEnterRule(GrammarFileName, "distinct_clause");
		DebugLocation(127, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:128:2: ( DISTINCT -> T_DISTINCT | ALL -> T_ALL )
			int alt18=2;
			try { DebugEnterDecision(18, decisionCanBacktrack[18]);
			int LA18_0 = input.LA(1);

			if ((LA18_0==DISTINCT))
			{
				alt18 = 1;
			}
			else if ((LA18_0==ALL))
			{
				alt18 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 18, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:128:4: DISTINCT
				{
				DebugLocation(128, 4);
				DISTINCT35=(IToken)Match(input,DISTINCT,Follow._DISTINCT_in_distinct_clause567);  
				stream_DISTINCT.Add(DISTINCT35);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 128:13: -> T_DISTINCT
				{
					DebugLocation(128, 16);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_DISTINCT, "T_DISTINCT"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:129:4: ALL
				{
				DebugLocation(129, 4);
				ALL36=(IToken)Match(input,ALL,Follow._ALL_in_distinct_clause576);  
				stream_ALL.Add(ALL36);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 129:8: -> T_ALL
				{
					DebugLocation(129, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_ALL, "T_ALL"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("distinct_clause", 5);
			LeaveRule("distinct_clause", 5);
			LeaveRule_distinct_clause();
	    }
	 	DebugLocation(130, 1);
		} finally { DebugExitRule(GrammarFileName, "distinct_clause"); }
		return retval;

	}
	// $ANTLR end "distinct_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_top_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_top_clause() {}

	// $ANTLR start "top_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:132:1: top_clause : TOP WS expression -> ^( T_TOP expression ) ;
	[GrammarRule("top_clause")]
	private AstParserRuleReturnScope<object, IToken> top_clause()
	{
		EnterRule_top_clause();
		EnterRule("top_clause", 6);
		TraceIn("top_clause", 6);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOP37 = default(IToken);
	    IToken WS38 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression39 = default(AstParserRuleReturnScope<object, IToken>);

	    object TOP37_tree = default(object);
	    object WS38_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_TOP=new RewriteRuleITokenStream(adaptor,"token TOP");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "top_clause");
		DebugLocation(132, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:133:2: ( TOP WS expression -> ^( T_TOP expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:133:4: TOP WS expression
			{
			DebugLocation(133, 4);
			TOP37=(IToken)Match(input,TOP,Follow._TOP_in_top_clause592);  
			stream_TOP.Add(TOP37);

			DebugLocation(133, 8);
			WS38=(IToken)Match(input,WS,Follow._WS_in_top_clause594);  
			stream_WS.Add(WS38);

			DebugLocation(133, 11);
			PushFollow(Follow._expression_in_top_clause596);
			expression39=expression();
			PopFollow();

			stream_expression.Add(expression39.Tree);


			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 134:2: -> ^( T_TOP expression )
			{
				DebugLocation(134, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:134:5: ^( T_TOP expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(134, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_TOP, "T_TOP"), root_1);

				DebugLocation(134, 13);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("top_clause", 6);
			LeaveRule("top_clause", 6);
			LeaveRule_top_clause();
	    }
	 	DebugLocation(135, 1);
		} finally { DebugExitRule(GrammarFileName, "top_clause"); }
		return retval;

	}
	// $ANTLR end "top_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_column_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_column_list() {}

	// $ANTLR start "column_list"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:137:1: column_list : column ( ( WS )? ',' ( WS )? column )* -> ^( T_COLUMNLIST ( column )* ) ;
	[GrammarRule("column_list")]
	private AstParserRuleReturnScope<object, IToken> column_list()
	{
		EnterRule_column_list();
		EnterRule("column_list", 7);
		TraceIn("column_list", 7);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS41 = default(IToken);
	    IToken char_literal42 = default(IToken);
	    IToken WS43 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> column40 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> column44 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS41_tree = default(object);
	    object char_literal42_tree = default(object);
	    object WS43_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_155=new RewriteRuleITokenStream(adaptor,"token 155");
	    RewriteRuleSubtreeStream stream_column=new RewriteRuleSubtreeStream(adaptor,"rule column");
		try { DebugEnterRule(GrammarFileName, "column_list");
		DebugLocation(137, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:138:2: ( column ( ( WS )? ',' ( WS )? column )* -> ^( T_COLUMNLIST ( column )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:138:4: column ( ( WS )? ',' ( WS )? column )*
			{
			DebugLocation(138, 4);
			PushFollow(Follow._column_in_column_list618);
			column40=column();
			PopFollow();

			stream_column.Add(column40.Tree);
			DebugLocation(138, 11);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:138:11: ( ( WS )? ',' ( WS )? column )*
			try { DebugEnterSubRule(21);
			while (true)
			{
				int alt21=2;
				try { DebugEnterDecision(21, decisionCanBacktrack[21]);
				int LA21_0 = input.LA(1);

				if ((LA21_0==WS))
				{
					int LA21_1 = input.LA(2);

					if ((LA21_1==155))
					{
						alt21 = 1;
					}


				}
				else if ((LA21_0==155))
				{
					alt21 = 1;
				}


				} finally { DebugExitDecision(21); }
				switch ( alt21 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:138:12: ( WS )? ',' ( WS )? column
					{
					DebugLocation(138, 12);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:138:12: ( WS )?
					int alt19=2;
					try { DebugEnterSubRule(19);
					try { DebugEnterDecision(19, decisionCanBacktrack[19]);
					int LA19_0 = input.LA(1);

					if ((LA19_0==WS))
					{
						alt19 = 1;
					}
					} finally { DebugExitDecision(19); }
					switch (alt19)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:138:12: WS
						{
						DebugLocation(138, 12);
						WS41=(IToken)Match(input,WS,Follow._WS_in_column_list621);  
						stream_WS.Add(WS41);


						}
						break;

					}
					} finally { DebugExitSubRule(19); }

					DebugLocation(138, 16);
					char_literal42=(IToken)Match(input,155,Follow._155_in_column_list624);  
					stream_155.Add(char_literal42);

					DebugLocation(138, 20);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:138:20: ( WS )?
					int alt20=2;
					try { DebugEnterSubRule(20);
					try { DebugEnterDecision(20, decisionCanBacktrack[20]);
					int LA20_0 = input.LA(1);

					if ((LA20_0==WS))
					{
						alt20 = 1;
					}
					} finally { DebugExitDecision(20); }
					switch (alt20)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:138:20: WS
						{
						DebugLocation(138, 20);
						WS43=(IToken)Match(input,WS,Follow._WS_in_column_list626);  
						stream_WS.Add(WS43);


						}
						break;

					}
					} finally { DebugExitSubRule(20); }

					DebugLocation(138, 24);
					PushFollow(Follow._column_in_column_list629);
					column44=column();
					PopFollow();

					stream_column.Add(column44.Tree);

					}
					break;

				default:
					goto loop21;
				}
			}

			loop21:
				;

			} finally { DebugExitSubRule(21); }



			{
			// AST REWRITE
			// elements: column
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 139:2: -> ^( T_COLUMNLIST ( column )* )
			{
				DebugLocation(139, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:139:5: ^( T_COLUMNLIST ( column )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(139, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_COLUMNLIST, "T_COLUMNLIST"), root_1);

				DebugLocation(139, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:139:20: ( column )*
				while ( stream_column.HasNext )
				{
					DebugLocation(139, 20);
					adaptor.AddChild(root_1, stream_column.NextTree());

				}
				stream_column.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("column_list", 7);
			LeaveRule("column_list", 7);
			LeaveRule_column_list();
	    }
	 	DebugLocation(140, 1);
		} finally { DebugExitRule(GrammarFileName, "column_list"); }
		return retval;

	}
	// $ANTLR end "column_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_column() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_column() {}

	// $ANTLR start "column"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:142:1: column : ( all_columns | expression ( WS SIMPLE_FILE )? -> ^( T_COLUMN expression ( SIMPLE_FILE )? ) );
	[GrammarRule("column")]
	private AstParserRuleReturnScope<object, IToken> column()
	{
		EnterRule_column();
		EnterRule("column", 8);
		TraceIn("column", 8);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS47 = default(IToken);
	    IToken SIMPLE_FILE48 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> all_columns45 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression46 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS47_tree = default(object);
	    object SIMPLE_FILE48_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_SIMPLE_FILE=new RewriteRuleITokenStream(adaptor,"token SIMPLE_FILE");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "column");
		DebugLocation(142, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:143:2: ( all_columns | expression ( WS SIMPLE_FILE )? -> ^( T_COLUMN expression ( SIMPLE_FILE )? ) )
			int alt23=2;
			try { DebugEnterDecision(23, decisionCanBacktrack[23]);
			switch (input.LA(1))
			{
			case SIMPLE_FILE:
				{
				switch (input.LA(2))
				{
				case WS:
					{
					int LA23_4 = input.LA(3);

					if ((LA23_4==EOF||LA23_4==AND||LA23_4==BETWEEN||LA23_4==CREATE||LA23_4==DECLARE||LA23_4==DROP||LA23_4==FROM||LA23_4==GROUP||(LA23_4>=IN && LA23_4<=INTO)||LA23_4==LIKE||LA23_4==MATCH||LA23_4==NOT||(LA23_4>=OR && LA23_4<=ORDER)||(LA23_4>=SELECT && LA23_4<=SIMPLE_FILE)||LA23_4==USE||LA23_4==WHERE||(LA23_4>=146 && LA23_4<=150)||(LA23_4>=152 && LA23_4<=156)||(LA23_4>=158 && LA23_4<=165)||(LA23_4>=168 && LA23_4<=169)))
					{
						alt23 = 2;
					}
					else if ((LA23_4==157))
					{
						switch (input.LA(4))
						{
						case WS:
							{
							int LA23_6 = input.LA(5);

							if ((LA23_6==153))
							{
								alt23 = 1;
							}
							else if ((LA23_6==SIMPLE_FILE))
							{
								alt23 = 2;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 23, 6, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case 153:
							{
							alt23 = 1;
							}
							break;
						case SIMPLE_FILE:
							{
							alt23 = 2;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 23, 5, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 23, 4, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 157:
					{
					switch (input.LA(3))
					{
					case WS:
						{
						int LA23_6 = input.LA(4);

						if ((LA23_6==153))
						{
							alt23 = 1;
						}
						else if ((LA23_6==SIMPLE_FILE))
						{
							alt23 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 23, 6, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case 153:
						{
						alt23 = 1;
						}
						break;
					case SIMPLE_FILE:
						{
						alt23 = 2;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 23, 5, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					}
					break;
				case EOF:
				case CREATE:
				case DECLARE:
				case DROP:
				case SELECT:
				case SET:
				case USE:
				case 146:
				case 147:
				case 148:
				case 149:
				case 150:
				case 152:
				case 153:
				case 154:
				case 155:
				case 156:
				case 158:
				case 159:
				case 160:
				case 161:
				case 162:
				case 163:
				case 164:
				case 165:
				case 168:
				case 169:
					{
					alt23 = 2;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 23, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				}
				break;
			case 153:
				{
				alt23 = 1;
				}
				break;
			case CASE:
			case CAST:
			case CONVERT:
			case EXISTS:
			case NOT:
			case NUMBER:
			case STRING:
			case SYSTEMVAR:
			case TOKEN:
			case VARIABLE:
			case 151:
				{
				alt23 = 2;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 23, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:143:4: all_columns
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(143, 4);
				PushFollow(Follow._all_columns_in_column653);
				all_columns45=all_columns();
				PopFollow();

				adaptor.AddChild(root_0, all_columns45.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:144:4: expression ( WS SIMPLE_FILE )?
				{
				DebugLocation(144, 4);
				PushFollow(Follow._expression_in_column658);
				expression46=expression();
				PopFollow();

				stream_expression.Add(expression46.Tree);
				DebugLocation(144, 15);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:144:15: ( WS SIMPLE_FILE )?
				int alt22=2;
				try { DebugEnterSubRule(22);
				try { DebugEnterDecision(22, decisionCanBacktrack[22]);
				int LA22_0 = input.LA(1);

				if ((LA22_0==WS))
				{
					int LA22_1 = input.LA(2);

					if ((LA22_1==SIMPLE_FILE))
					{
						alt22 = 1;
					}
				}
				} finally { DebugExitDecision(22); }
				switch (alt22)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:144:16: WS SIMPLE_FILE
					{
					DebugLocation(144, 16);
					WS47=(IToken)Match(input,WS,Follow._WS_in_column661);  
					stream_WS.Add(WS47);

					DebugLocation(144, 19);
					SIMPLE_FILE48=(IToken)Match(input,SIMPLE_FILE,Follow._SIMPLE_FILE_in_column663);  
					stream_SIMPLE_FILE.Add(SIMPLE_FILE48);


					}
					break;

				}
				} finally { DebugExitSubRule(22); }



				{
				// AST REWRITE
				// elements: SIMPLE_FILE, expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 144:33: -> ^( T_COLUMN expression ( SIMPLE_FILE )? )
				{
					DebugLocation(144, 36);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:144:36: ^( T_COLUMN expression ( SIMPLE_FILE )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(144, 38);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_COLUMN, "T_COLUMN"), root_1);

					DebugLocation(144, 47);
					adaptor.AddChild(root_1, stream_expression.NextTree());
					DebugLocation(144, 58);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:144:58: ( SIMPLE_FILE )?
					if (stream_SIMPLE_FILE.HasNext)
					{
						DebugLocation(144, 58);
						adaptor.AddChild(root_1, stream_SIMPLE_FILE.NextNode());

					}
					stream_SIMPLE_FILE.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("column", 8);
			LeaveRule("column", 8);
			LeaveRule_column();
	    }
	 	DebugLocation(145, 1);
		} finally { DebugExitRule(GrammarFileName, "column"); }
		return retval;

	}
	// $ANTLR end "column"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_all_columns() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_all_columns() {}

	// $ANTLR start "all_columns"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:147:1: all_columns : ( table_alias ( WS )? '.' ( WS )? )? '*' -> ^( T_ALLCOLUMNS ( table_alias )? ) ;
	[GrammarRule("all_columns")]
	private AstParserRuleReturnScope<object, IToken> all_columns()
	{
		EnterRule_all_columns();
		EnterRule("all_columns", 9);
		TraceIn("all_columns", 9);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS50 = default(IToken);
	    IToken char_literal51 = default(IToken);
	    IToken WS52 = default(IToken);
	    IToken char_literal53 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> table_alias49 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS50_tree = default(object);
	    object char_literal51_tree = default(object);
	    object WS52_tree = default(object);
	    object char_literal53_tree = default(object);
	    RewriteRuleITokenStream stream_153=new RewriteRuleITokenStream(adaptor,"token 153");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_157=new RewriteRuleITokenStream(adaptor,"token 157");
	    RewriteRuleSubtreeStream stream_table_alias=new RewriteRuleSubtreeStream(adaptor,"rule table_alias");
		try { DebugEnterRule(GrammarFileName, "all_columns");
		DebugLocation(147, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:148:2: ( ( table_alias ( WS )? '.' ( WS )? )? '*' -> ^( T_ALLCOLUMNS ( table_alias )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:148:4: ( table_alias ( WS )? '.' ( WS )? )? '*'
			{
			DebugLocation(148, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:148:4: ( table_alias ( WS )? '.' ( WS )? )?
			int alt26=2;
			try { DebugEnterSubRule(26);
			try { DebugEnterDecision(26, decisionCanBacktrack[26]);
			int LA26_0 = input.LA(1);

			if ((LA26_0==SIMPLE_FILE))
			{
				alt26 = 1;
			}
			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:148:5: table_alias ( WS )? '.' ( WS )?
				{
				DebugLocation(148, 5);
				PushFollow(Follow._table_alias_in_all_columns688);
				table_alias49=table_alias();
				PopFollow();

				stream_table_alias.Add(table_alias49.Tree);
				DebugLocation(148, 17);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:148:17: ( WS )?
				int alt24=2;
				try { DebugEnterSubRule(24);
				try { DebugEnterDecision(24, decisionCanBacktrack[24]);
				int LA24_0 = input.LA(1);

				if ((LA24_0==WS))
				{
					alt24 = 1;
				}
				} finally { DebugExitDecision(24); }
				switch (alt24)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:148:17: WS
					{
					DebugLocation(148, 17);
					WS50=(IToken)Match(input,WS,Follow._WS_in_all_columns690);  
					stream_WS.Add(WS50);


					}
					break;

				}
				} finally { DebugExitSubRule(24); }

				DebugLocation(148, 21);
				char_literal51=(IToken)Match(input,157,Follow._157_in_all_columns693);  
				stream_157.Add(char_literal51);

				DebugLocation(148, 25);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:148:25: ( WS )?
				int alt25=2;
				try { DebugEnterSubRule(25);
				try { DebugEnterDecision(25, decisionCanBacktrack[25]);
				int LA25_0 = input.LA(1);

				if ((LA25_0==WS))
				{
					alt25 = 1;
				}
				} finally { DebugExitDecision(25); }
				switch (alt25)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:148:25: WS
					{
					DebugLocation(148, 25);
					WS52=(IToken)Match(input,WS,Follow._WS_in_all_columns695);  
					stream_WS.Add(WS52);


					}
					break;

				}
				} finally { DebugExitSubRule(25); }


				}
				break;

			}
			} finally { DebugExitSubRule(26); }

			DebugLocation(148, 31);
			char_literal53=(IToken)Match(input,153,Follow._153_in_all_columns700);  
			stream_153.Add(char_literal53);



			{
			// AST REWRITE
			// elements: table_alias
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 148:35: -> ^( T_ALLCOLUMNS ( table_alias )? )
			{
				DebugLocation(148, 38);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:148:38: ^( T_ALLCOLUMNS ( table_alias )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(148, 40);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_ALLCOLUMNS, "T_ALLCOLUMNS"), root_1);

				DebugLocation(148, 53);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:148:53: ( table_alias )?
				if (stream_table_alias.HasNext)
				{
					DebugLocation(148, 53);
					adaptor.AddChild(root_1, stream_table_alias.NextTree());

				}
				stream_table_alias.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("all_columns", 9);
			LeaveRule("all_columns", 9);
			LeaveRule_all_columns();
	    }
	 	DebugLocation(149, 1);
		} finally { DebugExitRule(GrammarFileName, "all_columns"); }
		return retval;

	}
	// $ANTLR end "all_columns"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_into_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_into_clause() {}

	// $ANTLR start "into_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:151:1: into_clause : INTO WS file -> ^( T_INTO file ) ;
	[GrammarRule("into_clause")]
	private AstParserRuleReturnScope<object, IToken> into_clause()
	{
		EnterRule_into_clause();
		EnterRule("into_clause", 10);
		TraceIn("into_clause", 10);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken INTO54 = default(IToken);
	    IToken WS55 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file56 = default(AstParserRuleReturnScope<object, IToken>);

	    object INTO54_tree = default(object);
	    object WS55_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_INTO=new RewriteRuleITokenStream(adaptor,"token INTO");
	    RewriteRuleSubtreeStream stream_file=new RewriteRuleSubtreeStream(adaptor,"rule file");
		try { DebugEnterRule(GrammarFileName, "into_clause");
		DebugLocation(151, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:152:2: ( INTO WS file -> ^( T_INTO file ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:152:4: INTO WS file
			{
			DebugLocation(152, 4);
			INTO54=(IToken)Match(input,INTO,Follow._INTO_in_into_clause720);  
			stream_INTO.Add(INTO54);

			DebugLocation(152, 9);
			WS55=(IToken)Match(input,WS,Follow._WS_in_into_clause722);  
			stream_WS.Add(WS55);

			DebugLocation(152, 12);
			PushFollow(Follow._file_in_into_clause724);
			file56=file();
			PopFollow();

			stream_file.Add(file56.Tree);


			{
			// AST REWRITE
			// elements: file
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 152:17: -> ^( T_INTO file )
			{
				DebugLocation(152, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:152:20: ^( T_INTO file )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(152, 22);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_INTO, "T_INTO"), root_1);

				DebugLocation(152, 29);
				adaptor.AddChild(root_1, stream_file.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("into_clause", 10);
			LeaveRule("into_clause", 10);
			LeaveRule_into_clause();
	    }
	 	DebugLocation(153, 1);
		} finally { DebugExitRule(GrammarFileName, "into_clause"); }
		return retval;

	}
	// $ANTLR end "into_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_from_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_from_clause() {}

	// $ANTLR start "from_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:155:1: from_clause : FROM WS from_clause_item ( ( WS )? ',' ( WS )? from_clause_item )* ( WS table_alias )? -> ^( T_FROM ( table_alias )? ( from_clause_item )* ) ;
	[GrammarRule("from_clause")]
	private AstParserRuleReturnScope<object, IToken> from_clause()
	{
		EnterRule_from_clause();
		EnterRule("from_clause", 11);
		TraceIn("from_clause", 11);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken FROM57 = default(IToken);
	    IToken WS58 = default(IToken);
	    IToken WS60 = default(IToken);
	    IToken char_literal61 = default(IToken);
	    IToken WS62 = default(IToken);
	    IToken WS64 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> from_clause_item59 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> from_clause_item63 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> table_alias65 = default(AstParserRuleReturnScope<object, IToken>);

	    object FROM57_tree = default(object);
	    object WS58_tree = default(object);
	    object WS60_tree = default(object);
	    object char_literal61_tree = default(object);
	    object WS62_tree = default(object);
	    object WS64_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_FROM=new RewriteRuleITokenStream(adaptor,"token FROM");
	    RewriteRuleITokenStream stream_155=new RewriteRuleITokenStream(adaptor,"token 155");
	    RewriteRuleSubtreeStream stream_from_clause_item=new RewriteRuleSubtreeStream(adaptor,"rule from_clause_item");
	    RewriteRuleSubtreeStream stream_table_alias=new RewriteRuleSubtreeStream(adaptor,"rule table_alias");
		try { DebugEnterRule(GrammarFileName, "from_clause");
		DebugLocation(155, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:156:2: ( FROM WS from_clause_item ( ( WS )? ',' ( WS )? from_clause_item )* ( WS table_alias )? -> ^( T_FROM ( table_alias )? ( from_clause_item )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:156:4: FROM WS from_clause_item ( ( WS )? ',' ( WS )? from_clause_item )* ( WS table_alias )?
			{
			DebugLocation(156, 4);
			FROM57=(IToken)Match(input,FROM,Follow._FROM_in_from_clause744);  
			stream_FROM.Add(FROM57);

			DebugLocation(156, 9);
			WS58=(IToken)Match(input,WS,Follow._WS_in_from_clause746);  
			stream_WS.Add(WS58);

			DebugLocation(156, 12);
			PushFollow(Follow._from_clause_item_in_from_clause748);
			from_clause_item59=from_clause_item();
			PopFollow();

			stream_from_clause_item.Add(from_clause_item59.Tree);
			DebugLocation(156, 29);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:156:29: ( ( WS )? ',' ( WS )? from_clause_item )*
			try { DebugEnterSubRule(29);
			while (true)
			{
				int alt29=2;
				try { DebugEnterDecision(29, decisionCanBacktrack[29]);
				int LA29_0 = input.LA(1);

				if ((LA29_0==WS))
				{
					int LA29_1 = input.LA(2);

					if ((LA29_1==155))
					{
						alt29 = 1;
					}


				}
				else if ((LA29_0==155))
				{
					alt29 = 1;
				}


				} finally { DebugExitDecision(29); }
				switch ( alt29 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:156:30: ( WS )? ',' ( WS )? from_clause_item
					{
					DebugLocation(156, 30);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:156:30: ( WS )?
					int alt27=2;
					try { DebugEnterSubRule(27);
					try { DebugEnterDecision(27, decisionCanBacktrack[27]);
					int LA27_0 = input.LA(1);

					if ((LA27_0==WS))
					{
						alt27 = 1;
					}
					} finally { DebugExitDecision(27); }
					switch (alt27)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:156:30: WS
						{
						DebugLocation(156, 30);
						WS60=(IToken)Match(input,WS,Follow._WS_in_from_clause751);  
						stream_WS.Add(WS60);


						}
						break;

					}
					} finally { DebugExitSubRule(27); }

					DebugLocation(156, 34);
					char_literal61=(IToken)Match(input,155,Follow._155_in_from_clause754);  
					stream_155.Add(char_literal61);

					DebugLocation(156, 38);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:156:38: ( WS )?
					int alt28=2;
					try { DebugEnterSubRule(28);
					try { DebugEnterDecision(28, decisionCanBacktrack[28]);
					int LA28_0 = input.LA(1);

					if ((LA28_0==WS))
					{
						alt28 = 1;
					}
					} finally { DebugExitDecision(28); }
					switch (alt28)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:156:38: WS
						{
						DebugLocation(156, 38);
						WS62=(IToken)Match(input,WS,Follow._WS_in_from_clause756);  
						stream_WS.Add(WS62);


						}
						break;

					}
					} finally { DebugExitSubRule(28); }

					DebugLocation(156, 42);
					PushFollow(Follow._from_clause_item_in_from_clause759);
					from_clause_item63=from_clause_item();
					PopFollow();

					stream_from_clause_item.Add(from_clause_item63.Tree);

					}
					break;

				default:
					goto loop29;
				}
			}

			loop29:
				;

			} finally { DebugExitSubRule(29); }

			DebugLocation(156, 61);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:156:61: ( WS table_alias )?
			int alt30=2;
			try { DebugEnterSubRule(30);
			try { DebugEnterDecision(30, decisionCanBacktrack[30]);
			int LA30_0 = input.LA(1);

			if ((LA30_0==WS))
			{
				int LA30_1 = input.LA(2);

				if ((LA30_1==SIMPLE_FILE))
				{
					alt30 = 1;
				}
			}
			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:156:62: WS table_alias
				{
				DebugLocation(156, 62);
				WS64=(IToken)Match(input,WS,Follow._WS_in_from_clause764);  
				stream_WS.Add(WS64);

				DebugLocation(156, 65);
				PushFollow(Follow._table_alias_in_from_clause766);
				table_alias65=table_alias();
				PopFollow();

				stream_table_alias.Add(table_alias65.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(30); }



			{
			// AST REWRITE
			// elements: table_alias, from_clause_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 156:79: -> ^( T_FROM ( table_alias )? ( from_clause_item )* )
			{
				DebugLocation(156, 82);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:156:82: ^( T_FROM ( table_alias )? ( from_clause_item )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(156, 84);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FROM, "T_FROM"), root_1);

				DebugLocation(156, 91);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:156:91: ( table_alias )?
				if (stream_table_alias.HasNext)
				{
					DebugLocation(156, 91);
					adaptor.AddChild(root_1, stream_table_alias.NextTree());

				}
				stream_table_alias.Reset();
				DebugLocation(156, 104);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:156:104: ( from_clause_item )*
				while ( stream_from_clause_item.HasNext )
				{
					DebugLocation(156, 104);
					adaptor.AddChild(root_1, stream_from_clause_item.NextTree());

				}
				stream_from_clause_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("from_clause", 11);
			LeaveRule("from_clause", 11);
			LeaveRule_from_clause();
	    }
	 	DebugLocation(158, 1);
		} finally { DebugExitRule(GrammarFileName, "from_clause"); }
		return retval;

	}
	// $ANTLR end "from_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_from_clause_item() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_from_clause_item() {}

	// $ANTLR start "from_clause_item"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:160:1: from_clause_item : ( STRING -> ^( T_FILE STRING ) | file | subquery | view_name );
	[GrammarRule("from_clause_item")]
	private AstParserRuleReturnScope<object, IToken> from_clause_item()
	{
		EnterRule_from_clause_item();
		EnterRule("from_clause_item", 12);
		TraceIn("from_clause_item", 12);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken STRING66 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file67 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> subquery68 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> view_name69 = default(AstParserRuleReturnScope<object, IToken>);

	    object STRING66_tree = default(object);
	    RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");

		try { DebugEnterRule(GrammarFileName, "from_clause_item");
		DebugLocation(160, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:161:2: ( STRING -> ^( T_FILE STRING ) | file | subquery | view_name )
			int alt31=4;
			try { DebugEnterDecision(31, decisionCanBacktrack[31]);
			switch (input.LA(1))
			{
			case STRING:
				{
				alt31 = 1;
				}
				break;
			case SIMPLE_FILE:
			case 166:
				{
				alt31 = 2;
				}
				break;
			case 151:
				{
				alt31 = 3;
				}
				break;
			case TOKEN:
				{
				alt31 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 31, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:161:4: STRING
				{
				DebugLocation(161, 4);
				STRING66=(IToken)Match(input,STRING,Follow._STRING_in_from_clause_item793);  
				stream_STRING.Add(STRING66);



				{
				// AST REWRITE
				// elements: STRING
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 161:11: -> ^( T_FILE STRING )
				{
					DebugLocation(161, 14);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:161:14: ^( T_FILE STRING )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(161, 16);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILE, "T_FILE"), root_1);

					DebugLocation(161, 23);
					adaptor.AddChild(root_1, stream_STRING.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:162:4: file
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(162, 4);
				PushFollow(Follow._file_in_from_clause_item806);
				file67=file();
				PopFollow();

				adaptor.AddChild(root_0, file67.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:163:4: subquery
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(163, 4);
				PushFollow(Follow._subquery_in_from_clause_item811);
				subquery68=subquery();
				PopFollow();

				adaptor.AddChild(root_0, subquery68.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:164:4: view_name
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(164, 4);
				PushFollow(Follow._view_name_in_from_clause_item816);
				view_name69=view_name();
				PopFollow();

				adaptor.AddChild(root_0, view_name69.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("from_clause_item", 12);
			LeaveRule("from_clause_item", 12);
			LeaveRule_from_clause_item();
	    }
	 	DebugLocation(165, 1);
		} finally { DebugExitRule(GrammarFileName, "from_clause_item"); }
		return retval;

	}
	// $ANTLR end "from_clause_item"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_subquery() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_subquery() {}

	// $ANTLR start "subquery"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:167:1: subquery : '(' ( WS )? select_command ( WS )? ')' -> ^( T_SUBQUERY select_command ) ;
	[GrammarRule("subquery")]
	private AstParserRuleReturnScope<object, IToken> subquery()
	{
		EnterRule_subquery();
		EnterRule("subquery", 13);
		TraceIn("subquery", 13);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal70 = default(IToken);
	    IToken WS71 = default(IToken);
	    IToken WS73 = default(IToken);
	    IToken char_literal74 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> select_command72 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal70_tree = default(object);
	    object WS71_tree = default(object);
	    object WS73_tree = default(object);
	    object char_literal74_tree = default(object);
	    RewriteRuleITokenStream stream_152=new RewriteRuleITokenStream(adaptor,"token 152");
	    RewriteRuleITokenStream stream_151=new RewriteRuleITokenStream(adaptor,"token 151");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_select_command=new RewriteRuleSubtreeStream(adaptor,"rule select_command");
		try { DebugEnterRule(GrammarFileName, "subquery");
		DebugLocation(167, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:168:2: ( '(' ( WS )? select_command ( WS )? ')' -> ^( T_SUBQUERY select_command ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:168:4: '(' ( WS )? select_command ( WS )? ')'
			{
			DebugLocation(168, 4);
			char_literal70=(IToken)Match(input,151,Follow._151_in_subquery828);  
			stream_151.Add(char_literal70);

			DebugLocation(168, 8);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:168:8: ( WS )?
			int alt32=2;
			try { DebugEnterSubRule(32);
			try { DebugEnterDecision(32, decisionCanBacktrack[32]);
			int LA32_0 = input.LA(1);

			if ((LA32_0==WS))
			{
				alt32 = 1;
			}
			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:168:8: WS
				{
				DebugLocation(168, 8);
				WS71=(IToken)Match(input,WS,Follow._WS_in_subquery830);  
				stream_WS.Add(WS71);


				}
				break;

			}
			} finally { DebugExitSubRule(32); }

			DebugLocation(168, 12);
			PushFollow(Follow._select_command_in_subquery833);
			select_command72=select_command();
			PopFollow();

			stream_select_command.Add(select_command72.Tree);
			DebugLocation(168, 27);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:168:27: ( WS )?
			int alt33=2;
			try { DebugEnterSubRule(33);
			try { DebugEnterDecision(33, decisionCanBacktrack[33]);
			int LA33_0 = input.LA(1);

			if ((LA33_0==WS))
			{
				alt33 = 1;
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:168:27: WS
				{
				DebugLocation(168, 27);
				WS73=(IToken)Match(input,WS,Follow._WS_in_subquery835);  
				stream_WS.Add(WS73);


				}
				break;

			}
			} finally { DebugExitSubRule(33); }

			DebugLocation(168, 31);
			char_literal74=(IToken)Match(input,152,Follow._152_in_subquery838);  
			stream_152.Add(char_literal74);



			{
			// AST REWRITE
			// elements: select_command
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 168:35: -> ^( T_SUBQUERY select_command )
			{
				DebugLocation(168, 38);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:168:38: ^( T_SUBQUERY select_command )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(168, 40);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SUBQUERY, "T_SUBQUERY"), root_1);

				DebugLocation(168, 51);
				adaptor.AddChild(root_1, stream_select_command.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("subquery", 13);
			LeaveRule("subquery", 13);
			LeaveRule_subquery();
	    }
	 	DebugLocation(169, 1);
		} finally { DebugExitRule(GrammarFileName, "subquery"); }
		return retval;

	}
	// $ANTLR end "subquery"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file() {}

	// $ANTLR start "file"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:171:1: file : ( '[' ( WS )? file_spec ( WS file_option )* ( WS )? ']' -> ^( T_FILE file_spec ( file_option )* ) | SIMPLE_FILE -> ^( T_FILE SIMPLE_FILE ) );
	[GrammarRule("file")]
	private AstParserRuleReturnScope<object, IToken> file()
	{
		EnterRule_file();
		EnterRule("file", 14);
		TraceIn("file", 14);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal75 = default(IToken);
	    IToken WS76 = default(IToken);
	    IToken WS78 = default(IToken);
	    IToken WS80 = default(IToken);
	    IToken char_literal81 = default(IToken);
	    IToken SIMPLE_FILE82 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file_spec77 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> file_option79 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal75_tree = default(object);
	    object WS76_tree = default(object);
	    object WS78_tree = default(object);
	    object WS80_tree = default(object);
	    object char_literal81_tree = default(object);
	    object SIMPLE_FILE82_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_SIMPLE_FILE=new RewriteRuleITokenStream(adaptor,"token SIMPLE_FILE");
	    RewriteRuleITokenStream stream_166=new RewriteRuleITokenStream(adaptor,"token 166");
	    RewriteRuleITokenStream stream_167=new RewriteRuleITokenStream(adaptor,"token 167");
	    RewriteRuleSubtreeStream stream_file_option=new RewriteRuleSubtreeStream(adaptor,"rule file_option");
	    RewriteRuleSubtreeStream stream_file_spec=new RewriteRuleSubtreeStream(adaptor,"rule file_spec");
		try { DebugEnterRule(GrammarFileName, "file");
		DebugLocation(171, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:172:2: ( '[' ( WS )? file_spec ( WS file_option )* ( WS )? ']' -> ^( T_FILE file_spec ( file_option )* ) | SIMPLE_FILE -> ^( T_FILE SIMPLE_FILE ) )
			int alt37=2;
			try { DebugEnterDecision(37, decisionCanBacktrack[37]);
			int LA37_0 = input.LA(1);

			if ((LA37_0==166))
			{
				alt37 = 1;
			}
			else if ((LA37_0==SIMPLE_FILE))
			{
				alt37 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 37, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:172:4: '[' ( WS )? file_spec ( WS file_option )* ( WS )? ']'
				{
				DebugLocation(172, 4);
				char_literal75=(IToken)Match(input,166,Follow._166_in_file857);  
				stream_166.Add(char_literal75);

				DebugLocation(172, 8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:172:8: ( WS )?
				int alt34=2;
				try { DebugEnterSubRule(34);
				try { DebugEnterDecision(34, decisionCanBacktrack[34]);
				int LA34_0 = input.LA(1);

				if ((LA34_0==WS))
				{
					alt34 = 1;
				}
				} finally { DebugExitDecision(34); }
				switch (alt34)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:172:8: WS
					{
					DebugLocation(172, 8);
					WS76=(IToken)Match(input,WS,Follow._WS_in_file859);  
					stream_WS.Add(WS76);


					}
					break;

				}
				} finally { DebugExitSubRule(34); }

				DebugLocation(172, 12);
				PushFollow(Follow._file_spec_in_file862);
				file_spec77=file_spec();
				PopFollow();

				stream_file_spec.Add(file_spec77.Tree);
				DebugLocation(172, 22);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:172:22: ( WS file_option )*
				try { DebugEnterSubRule(35);
				while (true)
				{
					int alt35=2;
					try { DebugEnterDecision(35, decisionCanBacktrack[35]);
					int LA35_0 = input.LA(1);

					if ((LA35_0==WS))
					{
						int LA35_1 = input.LA(2);

						if ((LA35_1==156))
						{
							alt35 = 1;
						}


					}


					} finally { DebugExitDecision(35); }
					switch ( alt35 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:172:23: WS file_option
						{
						DebugLocation(172, 23);
						WS78=(IToken)Match(input,WS,Follow._WS_in_file865);  
						stream_WS.Add(WS78);

						DebugLocation(172, 26);
						PushFollow(Follow._file_option_in_file867);
						file_option79=file_option();
						PopFollow();

						stream_file_option.Add(file_option79.Tree);

						}
						break;

					default:
						goto loop35;
					}
				}

				loop35:
					;

				} finally { DebugExitSubRule(35); }

				DebugLocation(172, 40);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:172:40: ( WS )?
				int alt36=2;
				try { DebugEnterSubRule(36);
				try { DebugEnterDecision(36, decisionCanBacktrack[36]);
				int LA36_0 = input.LA(1);

				if ((LA36_0==WS))
				{
					alt36 = 1;
				}
				} finally { DebugExitDecision(36); }
				switch (alt36)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:172:40: WS
					{
					DebugLocation(172, 40);
					WS80=(IToken)Match(input,WS,Follow._WS_in_file871);  
					stream_WS.Add(WS80);


					}
					break;

				}
				} finally { DebugExitSubRule(36); }

				DebugLocation(172, 44);
				char_literal81=(IToken)Match(input,167,Follow._167_in_file874);  
				stream_167.Add(char_literal81);



				{
				// AST REWRITE
				// elements: file_option, file_spec
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 172:48: -> ^( T_FILE file_spec ( file_option )* )
				{
					DebugLocation(172, 51);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:172:51: ^( T_FILE file_spec ( file_option )* )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(172, 53);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILE, "T_FILE"), root_1);

					DebugLocation(172, 60);
					adaptor.AddChild(root_1, stream_file_spec.NextTree());
					DebugLocation(172, 70);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:172:70: ( file_option )*
					while ( stream_file_option.HasNext )
					{
						DebugLocation(172, 70);
						adaptor.AddChild(root_1, stream_file_option.NextTree());

					}
					stream_file_option.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:173:4: SIMPLE_FILE
				{
				DebugLocation(173, 4);
				SIMPLE_FILE82=(IToken)Match(input,SIMPLE_FILE,Follow._SIMPLE_FILE_in_file891);  
				stream_SIMPLE_FILE.Add(SIMPLE_FILE82);



				{
				// AST REWRITE
				// elements: SIMPLE_FILE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 173:16: -> ^( T_FILE SIMPLE_FILE )
				{
					DebugLocation(173, 19);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:173:19: ^( T_FILE SIMPLE_FILE )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(173, 21);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILE, "T_FILE"), root_1);

					DebugLocation(173, 28);
					adaptor.AddChild(root_1, stream_SIMPLE_FILE.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file", 14);
			LeaveRule("file", 14);
			LeaveRule_file();
	    }
	 	DebugLocation(174, 1);
		} finally { DebugExitRule(GrammarFileName, "file"); }
		return retval;

	}
	// $ANTLR end "file"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_spec() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_spec() {}

	// $ANTLR start "file_spec"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:176:1: file_spec : ( string | variable );
	[GrammarRule("file_spec")]
	private AstParserRuleReturnScope<object, IToken> file_spec()
	{
		EnterRule_file_spec();
		EnterRule("file_spec", 15);
		TraceIn("file_spec", 15);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> string83 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> variable84 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "file_spec");
		DebugLocation(176, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:177:2: ( string | variable )
			int alt38=2;
			try { DebugEnterDecision(38, decisionCanBacktrack[38]);
			int LA38_0 = input.LA(1);

			if ((LA38_0==STRING))
			{
				alt38 = 1;
			}
			else if ((LA38_0==VARIABLE))
			{
				alt38 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 38, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:177:4: string
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(177, 4);
				PushFollow(Follow._string_in_file_spec910);
				string83=@string();
				PopFollow();

				adaptor.AddChild(root_0, string83.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:178:4: variable
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(178, 4);
				PushFollow(Follow._variable_in_file_spec915);
				variable84=variable();
				PopFollow();

				adaptor.AddChild(root_0, variable84.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_spec", 15);
			LeaveRule("file_spec", 15);
			LeaveRule_file_spec();
	    }
	 	DebugLocation(179, 1);
		} finally { DebugExitRule(GrammarFileName, "file_spec"); }
		return retval;

	}
	// $ANTLR end "file_spec"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_option() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_option() {}

	// $ANTLR start "file_option"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:181:1: file_option : '-' file_option_name ( ( WS )? '=' ( WS )? file_option_value )? -> ^( T_FILEOPTION file_option_name ( file_option_value )? ) ;
	[GrammarRule("file_option")]
	private AstParserRuleReturnScope<object, IToken> file_option()
	{
		EnterRule_file_option();
		EnterRule("file_option", 16);
		TraceIn("file_option", 16);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal85 = default(IToken);
	    IToken WS87 = default(IToken);
	    IToken char_literal88 = default(IToken);
	    IToken WS89 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file_option_name86 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> file_option_value90 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal85_tree = default(object);
	    object WS87_tree = default(object);
	    object char_literal88_tree = default(object);
	    object WS89_tree = default(object);
	    RewriteRuleITokenStream stream_163=new RewriteRuleITokenStream(adaptor,"token 163");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_156=new RewriteRuleITokenStream(adaptor,"token 156");
	    RewriteRuleSubtreeStream stream_file_option_name=new RewriteRuleSubtreeStream(adaptor,"rule file_option_name");
	    RewriteRuleSubtreeStream stream_file_option_value=new RewriteRuleSubtreeStream(adaptor,"rule file_option_value");
		try { DebugEnterRule(GrammarFileName, "file_option");
		DebugLocation(181, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:182:2: ( '-' file_option_name ( ( WS )? '=' ( WS )? file_option_value )? -> ^( T_FILEOPTION file_option_name ( file_option_value )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:182:4: '-' file_option_name ( ( WS )? '=' ( WS )? file_option_value )?
			{
			DebugLocation(182, 4);
			char_literal85=(IToken)Match(input,156,Follow._156_in_file_option927);  
			stream_156.Add(char_literal85);

			DebugLocation(182, 8);
			PushFollow(Follow._file_option_name_in_file_option929);
			file_option_name86=file_option_name();
			PopFollow();

			stream_file_option_name.Add(file_option_name86.Tree);
			DebugLocation(182, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:182:25: ( ( WS )? '=' ( WS )? file_option_value )?
			int alt41=2;
			try { DebugEnterSubRule(41);
			try { DebugEnterDecision(41, decisionCanBacktrack[41]);
			int LA41_0 = input.LA(1);

			if ((LA41_0==WS))
			{
				int LA41_1 = input.LA(2);

				if ((LA41_1==163))
				{
					alt41 = 1;
				}
			}
			else if ((LA41_0==163))
			{
				alt41 = 1;
			}
			} finally { DebugExitDecision(41); }
			switch (alt41)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:182:27: ( WS )? '=' ( WS )? file_option_value
				{
				DebugLocation(182, 27);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:182:27: ( WS )?
				int alt39=2;
				try { DebugEnterSubRule(39);
				try { DebugEnterDecision(39, decisionCanBacktrack[39]);
				int LA39_0 = input.LA(1);

				if ((LA39_0==WS))
				{
					alt39 = 1;
				}
				} finally { DebugExitDecision(39); }
				switch (alt39)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:182:27: WS
					{
					DebugLocation(182, 27);
					WS87=(IToken)Match(input,WS,Follow._WS_in_file_option933);  
					stream_WS.Add(WS87);


					}
					break;

				}
				} finally { DebugExitSubRule(39); }

				DebugLocation(182, 31);
				char_literal88=(IToken)Match(input,163,Follow._163_in_file_option936);  
				stream_163.Add(char_literal88);

				DebugLocation(182, 35);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:182:35: ( WS )?
				int alt40=2;
				try { DebugEnterSubRule(40);
				try { DebugEnterDecision(40, decisionCanBacktrack[40]);
				int LA40_0 = input.LA(1);

				if ((LA40_0==WS))
				{
					alt40 = 1;
				}
				} finally { DebugExitDecision(40); }
				switch (alt40)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:182:35: WS
					{
					DebugLocation(182, 35);
					WS89=(IToken)Match(input,WS,Follow._WS_in_file_option938);  
					stream_WS.Add(WS89);


					}
					break;

				}
				} finally { DebugExitSubRule(40); }

				DebugLocation(182, 39);
				PushFollow(Follow._file_option_value_in_file_option941);
				file_option_value90=file_option_value();
				PopFollow();

				stream_file_option_value.Add(file_option_value90.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(41); }



			{
			// AST REWRITE
			// elements: file_option_name, file_option_value
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 182:59: -> ^( T_FILEOPTION file_option_name ( file_option_value )? )
			{
				DebugLocation(182, 62);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:182:62: ^( T_FILEOPTION file_option_name ( file_option_value )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(182, 64);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILEOPTION, "T_FILEOPTION"), root_1);

				DebugLocation(182, 77);
				adaptor.AddChild(root_1, stream_file_option_name.NextTree());
				DebugLocation(182, 94);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:182:94: ( file_option_value )?
				if (stream_file_option_value.HasNext)
				{
					DebugLocation(182, 94);
					adaptor.AddChild(root_1, stream_file_option_value.NextTree());

				}
				stream_file_option_value.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_option", 16);
			LeaveRule("file_option", 16);
			LeaveRule_file_option();
	    }
	 	DebugLocation(183, 1);
		} finally { DebugExitRule(GrammarFileName, "file_option"); }
		return retval;

	}
	// $ANTLR end "file_option"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_option_name() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_option_name() {}

	// $ANTLR start "file_option_name"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:185:1: file_option_name : TOKEN ;
	[GrammarRule("file_option_name")]
	private AstParserRuleReturnScope<object, IToken> file_option_name()
	{
		EnterRule_file_option_name();
		EnterRule("file_option_name", 17);
		TraceIn("file_option_name", 17);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN91 = default(IToken);

	    object TOKEN91_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "file_option_name");
		DebugLocation(185, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:186:2: ( TOKEN )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:186:4: TOKEN
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(186, 4);
			TOKEN91=(IToken)Match(input,TOKEN,Follow._TOKEN_in_file_option_name965); 
			TOKEN91_tree = (object)adaptor.Create(TOKEN91);
			adaptor.AddChild(root_0, TOKEN91_tree);


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_option_name", 17);
			LeaveRule("file_option_name", 17);
			LeaveRule_file_option_name();
	    }
	 	DebugLocation(187, 1);
		} finally { DebugExitRule(GrammarFileName, "file_option_name"); }
		return retval;

	}
	// $ANTLR end "file_option_name"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_option_value() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_option_value() {}

	// $ANTLR start "file_option_value"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:189:1: file_option_value : ( TOKEN | STRING | NUMBER | variable );
	[GrammarRule("file_option_value")]
	private AstParserRuleReturnScope<object, IToken> file_option_value()
	{
		EnterRule_file_option_value();
		EnterRule("file_option_value", 18);
		TraceIn("file_option_value", 18);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN92 = default(IToken);
	    IToken STRING93 = default(IToken);
	    IToken NUMBER94 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> variable95 = default(AstParserRuleReturnScope<object, IToken>);

	    object TOKEN92_tree = default(object);
	    object STRING93_tree = default(object);
	    object NUMBER94_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "file_option_value");
		DebugLocation(189, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:190:2: ( TOKEN | STRING | NUMBER | variable )
			int alt42=4;
			try { DebugEnterDecision(42, decisionCanBacktrack[42]);
			switch (input.LA(1))
			{
			case TOKEN:
				{
				alt42 = 1;
				}
				break;
			case STRING:
				{
				alt42 = 2;
				}
				break;
			case NUMBER:
				{
				alt42 = 3;
				}
				break;
			case VARIABLE:
				{
				alt42 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 42, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(42); }
			switch (alt42)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:190:4: TOKEN
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(190, 4);
				TOKEN92=(IToken)Match(input,TOKEN,Follow._TOKEN_in_file_option_value977); 
				TOKEN92_tree = (object)adaptor.Create(TOKEN92);
				adaptor.AddChild(root_0, TOKEN92_tree);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:190:12: STRING
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(190, 12);
				STRING93=(IToken)Match(input,STRING,Follow._STRING_in_file_option_value981); 
				STRING93_tree = (object)adaptor.Create(STRING93);
				adaptor.AddChild(root_0, STRING93_tree);


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:190:21: NUMBER
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(190, 21);
				NUMBER94=(IToken)Match(input,NUMBER,Follow._NUMBER_in_file_option_value985); 
				NUMBER94_tree = (object)adaptor.Create(NUMBER94);
				adaptor.AddChild(root_0, NUMBER94_tree);


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:190:30: variable
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(190, 30);
				PushFollow(Follow._variable_in_file_option_value989);
				variable95=variable();
				PopFollow();

				adaptor.AddChild(root_0, variable95.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_option_value", 18);
			LeaveRule("file_option_value", 18);
			LeaveRule_file_option_value();
	    }
	 	DebugLocation(191, 1);
		} finally { DebugExitRule(GrammarFileName, "file_option_value"); }
		return retval;

	}
	// $ANTLR end "file_option_value"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_where_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_where_clause() {}

	// $ANTLR start "where_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:193:1: where_clause : WHERE WS expression -> ^( T_WHERE expression ) ;
	[GrammarRule("where_clause")]
	private AstParserRuleReturnScope<object, IToken> where_clause()
	{
		EnterRule_where_clause();
		EnterRule("where_clause", 19);
		TraceIn("where_clause", 19);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WHERE96 = default(IToken);
	    IToken WS97 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression98 = default(AstParserRuleReturnScope<object, IToken>);

	    object WHERE96_tree = default(object);
	    object WS97_tree = default(object);
	    RewriteRuleITokenStream stream_WHERE=new RewriteRuleITokenStream(adaptor,"token WHERE");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "where_clause");
		DebugLocation(193, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:194:2: ( WHERE WS expression -> ^( T_WHERE expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:194:4: WHERE WS expression
			{
			DebugLocation(194, 4);
			WHERE96=(IToken)Match(input,WHERE,Follow._WHERE_in_where_clause1001);  
			stream_WHERE.Add(WHERE96);

			DebugLocation(194, 10);
			WS97=(IToken)Match(input,WS,Follow._WS_in_where_clause1003);  
			stream_WS.Add(WS97);

			DebugLocation(194, 13);
			PushFollow(Follow._expression_in_where_clause1005);
			expression98=expression();
			PopFollow();

			stream_expression.Add(expression98.Tree);


			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 195:2: -> ^( T_WHERE expression )
			{
				DebugLocation(195, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:195:5: ^( T_WHERE expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(195, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_WHERE, "T_WHERE"), root_1);

				DebugLocation(195, 15);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("where_clause", 19);
			LeaveRule("where_clause", 19);
			LeaveRule_where_clause();
	    }
	 	DebugLocation(196, 1);
		} finally { DebugExitRule(GrammarFileName, "where_clause"); }
		return retval;

	}
	// $ANTLR end "where_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_groupby_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_groupby_clause() {}

	// $ANTLR start "groupby_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:197:1: groupby_clause : GROUP WS BY WS orderby_column_list -> ^( T_GROUPBY orderby_column_list ) ;
	[GrammarRule("groupby_clause")]
	private AstParserRuleReturnScope<object, IToken> groupby_clause()
	{
		EnterRule_groupby_clause();
		EnterRule("groupby_clause", 20);
		TraceIn("groupby_clause", 20);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken GROUP99 = default(IToken);
	    IToken WS100 = default(IToken);
	    IToken BY101 = default(IToken);
	    IToken WS102 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> orderby_column_list103 = default(AstParserRuleReturnScope<object, IToken>);

	    object GROUP99_tree = default(object);
	    object WS100_tree = default(object);
	    object BY101_tree = default(object);
	    object WS102_tree = default(object);
	    RewriteRuleITokenStream stream_GROUP=new RewriteRuleITokenStream(adaptor,"token GROUP");
	    RewriteRuleITokenStream stream_BY=new RewriteRuleITokenStream(adaptor,"token BY");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_orderby_column_list=new RewriteRuleSubtreeStream(adaptor,"rule orderby_column_list");
		try { DebugEnterRule(GrammarFileName, "groupby_clause");
		DebugLocation(197, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:198:2: ( GROUP WS BY WS orderby_column_list -> ^( T_GROUPBY orderby_column_list ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:198:4: GROUP WS BY WS orderby_column_list
			{
			DebugLocation(198, 4);
			GROUP99=(IToken)Match(input,GROUP,Follow._GROUP_in_groupby_clause1024);  
			stream_GROUP.Add(GROUP99);

			DebugLocation(198, 10);
			WS100=(IToken)Match(input,WS,Follow._WS_in_groupby_clause1026);  
			stream_WS.Add(WS100);

			DebugLocation(198, 13);
			BY101=(IToken)Match(input,BY,Follow._BY_in_groupby_clause1028);  
			stream_BY.Add(BY101);

			DebugLocation(198, 16);
			WS102=(IToken)Match(input,WS,Follow._WS_in_groupby_clause1030);  
			stream_WS.Add(WS102);

			DebugLocation(198, 19);
			PushFollow(Follow._orderby_column_list_in_groupby_clause1032);
			orderby_column_list103=orderby_column_list();
			PopFollow();

			stream_orderby_column_list.Add(orderby_column_list103.Tree);


			{
			// AST REWRITE
			// elements: orderby_column_list
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 199:2: -> ^( T_GROUPBY orderby_column_list )
			{
				DebugLocation(199, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:199:5: ^( T_GROUPBY orderby_column_list )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(199, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_GROUPBY, "T_GROUPBY"), root_1);

				DebugLocation(199, 17);
				adaptor.AddChild(root_1, stream_orderby_column_list.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("groupby_clause", 20);
			LeaveRule("groupby_clause", 20);
			LeaveRule_groupby_clause();
	    }
	 	DebugLocation(200, 1);
		} finally { DebugExitRule(GrammarFileName, "groupby_clause"); }
		return retval;

	}
	// $ANTLR end "groupby_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_clause() {}

	// $ANTLR start "orderby_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:202:1: orderby_clause : ORDER WS BY WS orderby_column_list -> ^( T_ORDERBY orderby_column_list ) ;
	[GrammarRule("orderby_clause")]
	private AstParserRuleReturnScope<object, IToken> orderby_clause()
	{
		EnterRule_orderby_clause();
		EnterRule("orderby_clause", 21);
		TraceIn("orderby_clause", 21);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken ORDER104 = default(IToken);
	    IToken WS105 = default(IToken);
	    IToken BY106 = default(IToken);
	    IToken WS107 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> orderby_column_list108 = default(AstParserRuleReturnScope<object, IToken>);

	    object ORDER104_tree = default(object);
	    object WS105_tree = default(object);
	    object BY106_tree = default(object);
	    object WS107_tree = default(object);
	    RewriteRuleITokenStream stream_BY=new RewriteRuleITokenStream(adaptor,"token BY");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_ORDER=new RewriteRuleITokenStream(adaptor,"token ORDER");
	    RewriteRuleSubtreeStream stream_orderby_column_list=new RewriteRuleSubtreeStream(adaptor,"rule orderby_column_list");
		try { DebugEnterRule(GrammarFileName, "orderby_clause");
		DebugLocation(202, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:203:2: ( ORDER WS BY WS orderby_column_list -> ^( T_ORDERBY orderby_column_list ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:203:4: ORDER WS BY WS orderby_column_list
			{
			DebugLocation(203, 4);
			ORDER104=(IToken)Match(input,ORDER,Follow._ORDER_in_orderby_clause1053);  
			stream_ORDER.Add(ORDER104);

			DebugLocation(203, 10);
			WS105=(IToken)Match(input,WS,Follow._WS_in_orderby_clause1055);  
			stream_WS.Add(WS105);

			DebugLocation(203, 13);
			BY106=(IToken)Match(input,BY,Follow._BY_in_orderby_clause1057);  
			stream_BY.Add(BY106);

			DebugLocation(203, 16);
			WS107=(IToken)Match(input,WS,Follow._WS_in_orderby_clause1059);  
			stream_WS.Add(WS107);

			DebugLocation(203, 19);
			PushFollow(Follow._orderby_column_list_in_orderby_clause1061);
			orderby_column_list108=orderby_column_list();
			PopFollow();

			stream_orderby_column_list.Add(orderby_column_list108.Tree);


			{
			// AST REWRITE
			// elements: orderby_column_list
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 204:2: -> ^( T_ORDERBY orderby_column_list )
			{
				DebugLocation(204, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:204:5: ^( T_ORDERBY orderby_column_list )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(204, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_ORDERBY, "T_ORDERBY"), root_1);

				DebugLocation(204, 17);
				adaptor.AddChild(root_1, stream_orderby_column_list.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_clause", 21);
			LeaveRule("orderby_clause", 21);
			LeaveRule_orderby_clause();
	    }
	 	DebugLocation(205, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_clause"); }
		return retval;

	}
	// $ANTLR end "orderby_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_column_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_column_list() {}

	// $ANTLR start "orderby_column_list"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:207:1: orderby_column_list : orderby_column ( ( WS )? ',' ( WS )? orderby_column )* -> ( orderby_column )* ;
	[GrammarRule("orderby_column_list")]
	private AstParserRuleReturnScope<object, IToken> orderby_column_list()
	{
		EnterRule_orderby_column_list();
		EnterRule("orderby_column_list", 22);
		TraceIn("orderby_column_list", 22);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS110 = default(IToken);
	    IToken char_literal111 = default(IToken);
	    IToken WS112 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> orderby_column109 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> orderby_column113 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS110_tree = default(object);
	    object char_literal111_tree = default(object);
	    object WS112_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_155=new RewriteRuleITokenStream(adaptor,"token 155");
	    RewriteRuleSubtreeStream stream_orderby_column=new RewriteRuleSubtreeStream(adaptor,"rule orderby_column");
		try { DebugEnterRule(GrammarFileName, "orderby_column_list");
		DebugLocation(207, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:208:2: ( orderby_column ( ( WS )? ',' ( WS )? orderby_column )* -> ( orderby_column )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:208:4: orderby_column ( ( WS )? ',' ( WS )? orderby_column )*
			{
			DebugLocation(208, 4);
			PushFollow(Follow._orderby_column_in_orderby_column_list1082);
			orderby_column109=orderby_column();
			PopFollow();

			stream_orderby_column.Add(orderby_column109.Tree);
			DebugLocation(208, 19);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:208:19: ( ( WS )? ',' ( WS )? orderby_column )*
			try { DebugEnterSubRule(45);
			while (true)
			{
				int alt45=2;
				try { DebugEnterDecision(45, decisionCanBacktrack[45]);
				int LA45_0 = input.LA(1);

				if ((LA45_0==WS))
				{
					int LA45_1 = input.LA(2);

					if ((LA45_1==155))
					{
						alt45 = 1;
					}


				}
				else if ((LA45_0==155))
				{
					alt45 = 1;
				}


				} finally { DebugExitDecision(45); }
				switch ( alt45 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:208:20: ( WS )? ',' ( WS )? orderby_column
					{
					DebugLocation(208, 20);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:208:20: ( WS )?
					int alt43=2;
					try { DebugEnterSubRule(43);
					try { DebugEnterDecision(43, decisionCanBacktrack[43]);
					int LA43_0 = input.LA(1);

					if ((LA43_0==WS))
					{
						alt43 = 1;
					}
					} finally { DebugExitDecision(43); }
					switch (alt43)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:208:20: WS
						{
						DebugLocation(208, 20);
						WS110=(IToken)Match(input,WS,Follow._WS_in_orderby_column_list1085);  
						stream_WS.Add(WS110);


						}
						break;

					}
					} finally { DebugExitSubRule(43); }

					DebugLocation(208, 24);
					char_literal111=(IToken)Match(input,155,Follow._155_in_orderby_column_list1088);  
					stream_155.Add(char_literal111);

					DebugLocation(208, 28);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:208:28: ( WS )?
					int alt44=2;
					try { DebugEnterSubRule(44);
					try { DebugEnterDecision(44, decisionCanBacktrack[44]);
					int LA44_0 = input.LA(1);

					if ((LA44_0==WS))
					{
						alt44 = 1;
					}
					} finally { DebugExitDecision(44); }
					switch (alt44)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:208:28: WS
						{
						DebugLocation(208, 28);
						WS112=(IToken)Match(input,WS,Follow._WS_in_orderby_column_list1090);  
						stream_WS.Add(WS112);


						}
						break;

					}
					} finally { DebugExitSubRule(44); }

					DebugLocation(208, 32);
					PushFollow(Follow._orderby_column_in_orderby_column_list1093);
					orderby_column113=orderby_column();
					PopFollow();

					stream_orderby_column.Add(orderby_column113.Tree);

					}
					break;

				default:
					goto loop45;
				}
			}

			loop45:
				;

			} finally { DebugExitSubRule(45); }



			{
			// AST REWRITE
			// elements: orderby_column
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 209:2: -> ( orderby_column )*
			{
				DebugLocation(209, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:209:5: ( orderby_column )*
				while ( stream_orderby_column.HasNext )
				{
					DebugLocation(209, 5);
					adaptor.AddChild(root_0, stream_orderby_column.NextTree());

				}
				stream_orderby_column.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_column_list", 22);
			LeaveRule("orderby_column_list", 22);
			LeaveRule_orderby_column_list();
	    }
	 	DebugLocation(210, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_column_list"); }
		return retval;

	}
	// $ANTLR end "orderby_column_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_column() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_column() {}

	// $ANTLR start "orderby_column"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:212:1: orderby_column : expression ( WS orderby_direction )? -> ^( T_ORDERBY_COLUMN expression ( orderby_direction )? ) ;
	[GrammarRule("orderby_column")]
	private AstParserRuleReturnScope<object, IToken> orderby_column()
	{
		EnterRule_orderby_column();
		EnterRule("orderby_column", 23);
		TraceIn("orderby_column", 23);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS115 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression114 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> orderby_direction116 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS115_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_orderby_direction=new RewriteRuleSubtreeStream(adaptor,"rule orderby_direction");
		try { DebugEnterRule(GrammarFileName, "orderby_column");
		DebugLocation(212, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:213:2: ( expression ( WS orderby_direction )? -> ^( T_ORDERBY_COLUMN expression ( orderby_direction )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:213:4: expression ( WS orderby_direction )?
			{
			DebugLocation(213, 4);
			PushFollow(Follow._expression_in_orderby_column1113);
			expression114=expression();
			PopFollow();

			stream_expression.Add(expression114.Tree);
			DebugLocation(213, 15);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:213:15: ( WS orderby_direction )?
			int alt46=2;
			try { DebugEnterSubRule(46);
			try { DebugEnterDecision(46, decisionCanBacktrack[46]);
			int LA46_0 = input.LA(1);

			if ((LA46_0==WS))
			{
				int LA46_1 = input.LA(2);

				if ((LA46_1==ASC||LA46_1==DESC||LA46_1==ORIG))
				{
					alt46 = 1;
				}
			}
			} finally { DebugExitDecision(46); }
			switch (alt46)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:213:16: WS orderby_direction
				{
				DebugLocation(213, 16);
				WS115=(IToken)Match(input,WS,Follow._WS_in_orderby_column1116);  
				stream_WS.Add(WS115);

				DebugLocation(213, 19);
				PushFollow(Follow._orderby_direction_in_orderby_column1118);
				orderby_direction116=orderby_direction();
				PopFollow();

				stream_orderby_direction.Add(orderby_direction116.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(46); }



			{
			// AST REWRITE
			// elements: expression, orderby_direction
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 213:39: -> ^( T_ORDERBY_COLUMN expression ( orderby_direction )? )
			{
				DebugLocation(213, 42);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:213:42: ^( T_ORDERBY_COLUMN expression ( orderby_direction )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(213, 44);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_ORDERBY_COLUMN, "T_ORDERBY_COLUMN"), root_1);

				DebugLocation(213, 61);
				adaptor.AddChild(root_1, stream_expression.NextTree());
				DebugLocation(213, 72);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:213:72: ( orderby_direction )?
				if (stream_orderby_direction.HasNext)
				{
					DebugLocation(213, 72);
					adaptor.AddChild(root_1, stream_orderby_direction.NextTree());

				}
				stream_orderby_direction.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_column", 23);
			LeaveRule("orderby_column", 23);
			LeaveRule_orderby_column();
	    }
	 	DebugLocation(214, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_column"); }
		return retval;

	}
	// $ANTLR end "orderby_column"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_direction() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_direction() {}

	// $ANTLR start "orderby_direction"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:216:1: orderby_direction : ( ASC -> T_ORDERBY_ASC | DESC -> T_ORDERBY_DESC | ORIG -> T_ORDERBY_ORIG );
	[GrammarRule("orderby_direction")]
	private AstParserRuleReturnScope<object, IToken> orderby_direction()
	{
		EnterRule_orderby_direction();
		EnterRule("orderby_direction", 24);
		TraceIn("orderby_direction", 24);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken ASC117 = default(IToken);
	    IToken DESC118 = default(IToken);
	    IToken ORIG119 = default(IToken);

	    object ASC117_tree = default(object);
	    object DESC118_tree = default(object);
	    object ORIG119_tree = default(object);
	    RewriteRuleITokenStream stream_DESC=new RewriteRuleITokenStream(adaptor,"token DESC");
	    RewriteRuleITokenStream stream_ASC=new RewriteRuleITokenStream(adaptor,"token ASC");
	    RewriteRuleITokenStream stream_ORIG=new RewriteRuleITokenStream(adaptor,"token ORIG");

		try { DebugEnterRule(GrammarFileName, "orderby_direction");
		DebugLocation(216, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:217:2: ( ASC -> T_ORDERBY_ASC | DESC -> T_ORDERBY_DESC | ORIG -> T_ORDERBY_ORIG )
			int alt47=3;
			try { DebugEnterDecision(47, decisionCanBacktrack[47]);
			switch (input.LA(1))
			{
			case ASC:
				{
				alt47 = 1;
				}
				break;
			case DESC:
				{
				alt47 = 2;
				}
				break;
			case ORIG:
				{
				alt47 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 47, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(47); }
			switch (alt47)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:217:4: ASC
				{
				DebugLocation(217, 4);
				ASC117=(IToken)Match(input,ASC,Follow._ASC_in_orderby_direction1143);  
				stream_ASC.Add(ASC117);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 217:8: -> T_ORDERBY_ASC
				{
					DebugLocation(217, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_ORDERBY_ASC, "T_ORDERBY_ASC"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:218:4: DESC
				{
				DebugLocation(218, 4);
				DESC118=(IToken)Match(input,DESC,Follow._DESC_in_orderby_direction1152);  
				stream_DESC.Add(DESC118);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 218:9: -> T_ORDERBY_DESC
				{
					DebugLocation(218, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_ORDERBY_DESC, "T_ORDERBY_DESC"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:219:4: ORIG
				{
				DebugLocation(219, 4);
				ORIG119=(IToken)Match(input,ORIG,Follow._ORIG_in_orderby_direction1161);  
				stream_ORIG.Add(ORIG119);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 219:9: -> T_ORDERBY_ORIG
				{
					DebugLocation(219, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_ORDERBY_ORIG, "T_ORDERBY_ORIG"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_direction", 24);
			LeaveRule("orderby_direction", 24);
			LeaveRule_orderby_direction();
	    }
	 	DebugLocation(220, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_direction"); }
		return retval;

	}
	// $ANTLR end "orderby_direction"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_use_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_use_command() {}

	// $ANTLR start "use_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:225:1: use_command : USE WS file -> ^( T_USE file ) ;
	[GrammarRule("use_command")]
	private AstParserRuleReturnScope<object, IToken> use_command()
	{
		EnterRule_use_command();
		EnterRule("use_command", 25);
		TraceIn("use_command", 25);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken USE120 = default(IToken);
	    IToken WS121 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file122 = default(AstParserRuleReturnScope<object, IToken>);

	    object USE120_tree = default(object);
	    object WS121_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_USE=new RewriteRuleITokenStream(adaptor,"token USE");
	    RewriteRuleSubtreeStream stream_file=new RewriteRuleSubtreeStream(adaptor,"rule file");
		try { DebugEnterRule(GrammarFileName, "use_command");
		DebugLocation(225, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:226:2: ( USE WS file -> ^( T_USE file ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:226:4: USE WS file
			{
			DebugLocation(226, 4);
			USE120=(IToken)Match(input,USE,Follow._USE_in_use_command1179);  
			stream_USE.Add(USE120);

			DebugLocation(226, 8);
			WS121=(IToken)Match(input,WS,Follow._WS_in_use_command1181);  
			stream_WS.Add(WS121);

			DebugLocation(226, 11);
			PushFollow(Follow._file_in_use_command1183);
			file122=file();
			PopFollow();

			stream_file.Add(file122.Tree);


			{
			// AST REWRITE
			// elements: file
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 226:16: -> ^( T_USE file )
			{
				DebugLocation(226, 19);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:226:19: ^( T_USE file )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(226, 21);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_USE, "T_USE"), root_1);

				DebugLocation(226, 27);
				adaptor.AddChild(root_1, stream_file.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("use_command", 25);
			LeaveRule("use_command", 25);
			LeaveRule_use_command();
	    }
	 	DebugLocation(227, 1);
		} finally { DebugExitRule(GrammarFileName, "use_command"); }
		return retval;

	}
	// $ANTLR end "use_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_declare_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_declare_command() {}

	// $ANTLR start "declare_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:232:1: declare_command : DECLARE WS declaration_list -> declaration_list ;
	[GrammarRule("declare_command")]
	private AstParserRuleReturnScope<object, IToken> declare_command()
	{
		EnterRule_declare_command();
		EnterRule("declare_command", 26);
		TraceIn("declare_command", 26);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken DECLARE123 = default(IToken);
	    IToken WS124 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> declaration_list125 = default(AstParserRuleReturnScope<object, IToken>);

	    object DECLARE123_tree = default(object);
	    object WS124_tree = default(object);
	    RewriteRuleITokenStream stream_DECLARE=new RewriteRuleITokenStream(adaptor,"token DECLARE");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_declaration_list=new RewriteRuleSubtreeStream(adaptor,"rule declaration_list");
		try { DebugEnterRule(GrammarFileName, "declare_command");
		DebugLocation(232, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:233:2: ( DECLARE WS declaration_list -> declaration_list )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:233:4: DECLARE WS declaration_list
			{
			DebugLocation(233, 4);
			DECLARE123=(IToken)Match(input,DECLARE,Follow._DECLARE_in_declare_command1205);  
			stream_DECLARE.Add(DECLARE123);

			DebugLocation(233, 12);
			WS124=(IToken)Match(input,WS,Follow._WS_in_declare_command1207);  
			stream_WS.Add(WS124);

			DebugLocation(233, 15);
			PushFollow(Follow._declaration_list_in_declare_command1209);
			declaration_list125=declaration_list();
			PopFollow();

			stream_declaration_list.Add(declaration_list125.Tree);


			{
			// AST REWRITE
			// elements: declaration_list
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 233:32: -> declaration_list
			{
				DebugLocation(233, 35);
				adaptor.AddChild(root_0, stream_declaration_list.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declare_command", 26);
			LeaveRule("declare_command", 26);
			LeaveRule_declare_command();
	    }
	 	DebugLocation(234, 1);
		} finally { DebugExitRule(GrammarFileName, "declare_command"); }
		return retval;

	}
	// $ANTLR end "declare_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_declaration_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_declaration_list() {}

	// $ANTLR start "declaration_list"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:236:1: declaration_list : declaration ( ( WS )? ',' ( WS )? declaration )* -> ^( T_DECLARE ( declaration )+ ) ;
	[GrammarRule("declaration_list")]
	private AstParserRuleReturnScope<object, IToken> declaration_list()
	{
		EnterRule_declaration_list();
		EnterRule("declaration_list", 27);
		TraceIn("declaration_list", 27);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS127 = default(IToken);
	    IToken char_literal128 = default(IToken);
	    IToken WS129 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> declaration126 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> declaration130 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS127_tree = default(object);
	    object char_literal128_tree = default(object);
	    object WS129_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_155=new RewriteRuleITokenStream(adaptor,"token 155");
	    RewriteRuleSubtreeStream stream_declaration=new RewriteRuleSubtreeStream(adaptor,"rule declaration");
		try { DebugEnterRule(GrammarFileName, "declaration_list");
		DebugLocation(236, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:237:2: ( declaration ( ( WS )? ',' ( WS )? declaration )* -> ^( T_DECLARE ( declaration )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:237:4: declaration ( ( WS )? ',' ( WS )? declaration )*
			{
			DebugLocation(237, 4);
			PushFollow(Follow._declaration_in_declaration_list1226);
			declaration126=declaration();
			PopFollow();

			stream_declaration.Add(declaration126.Tree);
			DebugLocation(237, 16);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:237:16: ( ( WS )? ',' ( WS )? declaration )*
			try { DebugEnterSubRule(50);
			while (true)
			{
				int alt50=2;
				try { DebugEnterDecision(50, decisionCanBacktrack[50]);
				int LA50_0 = input.LA(1);

				if ((LA50_0==WS))
				{
					int LA50_1 = input.LA(2);

					if ((LA50_1==155))
					{
						alt50 = 1;
					}


				}
				else if ((LA50_0==155))
				{
					alt50 = 1;
				}


				} finally { DebugExitDecision(50); }
				switch ( alt50 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:237:17: ( WS )? ',' ( WS )? declaration
					{
					DebugLocation(237, 17);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:237:17: ( WS )?
					int alt48=2;
					try { DebugEnterSubRule(48);
					try { DebugEnterDecision(48, decisionCanBacktrack[48]);
					int LA48_0 = input.LA(1);

					if ((LA48_0==WS))
					{
						alt48 = 1;
					}
					} finally { DebugExitDecision(48); }
					switch (alt48)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:237:17: WS
						{
						DebugLocation(237, 17);
						WS127=(IToken)Match(input,WS,Follow._WS_in_declaration_list1229);  
						stream_WS.Add(WS127);


						}
						break;

					}
					} finally { DebugExitSubRule(48); }

					DebugLocation(237, 21);
					char_literal128=(IToken)Match(input,155,Follow._155_in_declaration_list1232);  
					stream_155.Add(char_literal128);

					DebugLocation(237, 25);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:237:25: ( WS )?
					int alt49=2;
					try { DebugEnterSubRule(49);
					try { DebugEnterDecision(49, decisionCanBacktrack[49]);
					int LA49_0 = input.LA(1);

					if ((LA49_0==WS))
					{
						alt49 = 1;
					}
					} finally { DebugExitDecision(49); }
					switch (alt49)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:237:25: WS
						{
						DebugLocation(237, 25);
						WS129=(IToken)Match(input,WS,Follow._WS_in_declaration_list1234);  
						stream_WS.Add(WS129);


						}
						break;

					}
					} finally { DebugExitSubRule(49); }

					DebugLocation(237, 29);
					PushFollow(Follow._declaration_in_declaration_list1237);
					declaration130=declaration();
					PopFollow();

					stream_declaration.Add(declaration130.Tree);

					}
					break;

				default:
					goto loop50;
				}
			}

			loop50:
				;

			} finally { DebugExitSubRule(50); }



			{
			// AST REWRITE
			// elements: declaration
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 238:2: -> ^( T_DECLARE ( declaration )+ )
			{
				DebugLocation(238, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:238:5: ^( T_DECLARE ( declaration )+ )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(238, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_DECLARE, "T_DECLARE"), root_1);

				DebugLocation(238, 17);
				if (!(stream_declaration.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_declaration.HasNext )
				{
					DebugLocation(238, 17);
					adaptor.AddChild(root_1, stream_declaration.NextTree());

				}
				stream_declaration.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declaration_list", 27);
			LeaveRule("declaration_list", 27);
			LeaveRule_declaration_list();
	    }
	 	DebugLocation(239, 1);
		} finally { DebugExitRule(GrammarFileName, "declaration_list"); }
		return retval;

	}
	// $ANTLR end "declaration_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_declaration() {}

	// $ANTLR start "declaration"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:241:1: declaration : variable WS ( AS WS )? datatype -> ^( T_DECLARATION variable datatype ) ;
	[GrammarRule("declaration")]
	private AstParserRuleReturnScope<object, IToken> declaration()
	{
		EnterRule_declaration();
		EnterRule("declaration", 28);
		TraceIn("declaration", 28);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS132 = default(IToken);
	    IToken AS133 = default(IToken);
	    IToken WS134 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> variable131 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> datatype135 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS132_tree = default(object);
	    object AS133_tree = default(object);
	    object WS134_tree = default(object);
	    RewriteRuleITokenStream stream_AS=new RewriteRuleITokenStream(adaptor,"token AS");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_datatype=new RewriteRuleSubtreeStream(adaptor,"rule datatype");
	    RewriteRuleSubtreeStream stream_variable=new RewriteRuleSubtreeStream(adaptor,"rule variable");
		try { DebugEnterRule(GrammarFileName, "declaration");
		DebugLocation(241, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:242:2: ( variable WS ( AS WS )? datatype -> ^( T_DECLARATION variable datatype ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:242:4: variable WS ( AS WS )? datatype
			{
			DebugLocation(242, 4);
			PushFollow(Follow._variable_in_declaration1261);
			variable131=variable();
			PopFollow();

			stream_variable.Add(variable131.Tree);
			DebugLocation(242, 13);
			WS132=(IToken)Match(input,WS,Follow._WS_in_declaration1263);  
			stream_WS.Add(WS132);

			DebugLocation(242, 16);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:242:16: ( AS WS )?
			int alt51=2;
			try { DebugEnterSubRule(51);
			try { DebugEnterDecision(51, decisionCanBacktrack[51]);
			int LA51_0 = input.LA(1);

			if ((LA51_0==AS))
			{
				alt51 = 1;
			}
			} finally { DebugExitDecision(51); }
			switch (alt51)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:242:17: AS WS
				{
				DebugLocation(242, 17);
				AS133=(IToken)Match(input,AS,Follow._AS_in_declaration1266);  
				stream_AS.Add(AS133);

				DebugLocation(242, 20);
				WS134=(IToken)Match(input,WS,Follow._WS_in_declaration1268);  
				stream_WS.Add(WS134);


				}
				break;

			}
			} finally { DebugExitSubRule(51); }

			DebugLocation(242, 25);
			PushFollow(Follow._datatype_in_declaration1272);
			datatype135=datatype();
			PopFollow();

			stream_datatype.Add(datatype135.Tree);


			{
			// AST REWRITE
			// elements: datatype, variable
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 243:2: -> ^( T_DECLARATION variable datatype )
			{
				DebugLocation(243, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:243:5: ^( T_DECLARATION variable datatype )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(243, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_DECLARATION, "T_DECLARATION"), root_1);

				DebugLocation(243, 21);
				adaptor.AddChild(root_1, stream_variable.NextTree());
				DebugLocation(243, 30);
				adaptor.AddChild(root_1, stream_datatype.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declaration", 28);
			LeaveRule("declaration", 28);
			LeaveRule_declaration();
	    }
	 	DebugLocation(244, 1);
		} finally { DebugExitRule(GrammarFileName, "declaration"); }
		return retval;

	}
	// $ANTLR end "declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_create_view_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_create_view_command() {}

	// $ANTLR start "create_view_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:249:1: create_view_command : CREATE WS VIEW WS view_name ( ( WS )? '(' declaration_list ')' )? WS AS WS select_command -> ^( T_CREATE_VIEW view_name ( declaration_list )? select_command ) ;
	[GrammarRule("create_view_command")]
	private AstParserRuleReturnScope<object, IToken> create_view_command()
	{
		EnterRule_create_view_command();
		EnterRule("create_view_command", 29);
		TraceIn("create_view_command", 29);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken CREATE136 = default(IToken);
	    IToken WS137 = default(IToken);
	    IToken VIEW138 = default(IToken);
	    IToken WS139 = default(IToken);
	    IToken WS141 = default(IToken);
	    IToken char_literal142 = default(IToken);
	    IToken char_literal144 = default(IToken);
	    IToken WS145 = default(IToken);
	    IToken AS146 = default(IToken);
	    IToken WS147 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> view_name140 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> declaration_list143 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> select_command148 = default(AstParserRuleReturnScope<object, IToken>);

	    object CREATE136_tree = default(object);
	    object WS137_tree = default(object);
	    object VIEW138_tree = default(object);
	    object WS139_tree = default(object);
	    object WS141_tree = default(object);
	    object char_literal142_tree = default(object);
	    object char_literal144_tree = default(object);
	    object WS145_tree = default(object);
	    object AS146_tree = default(object);
	    object WS147_tree = default(object);
	    RewriteRuleITokenStream stream_152=new RewriteRuleITokenStream(adaptor,"token 152");
	    RewriteRuleITokenStream stream_AS=new RewriteRuleITokenStream(adaptor,"token AS");
	    RewriteRuleITokenStream stream_151=new RewriteRuleITokenStream(adaptor,"token 151");
	    RewriteRuleITokenStream stream_CREATE=new RewriteRuleITokenStream(adaptor,"token CREATE");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_VIEW=new RewriteRuleITokenStream(adaptor,"token VIEW");
	    RewriteRuleSubtreeStream stream_view_name=new RewriteRuleSubtreeStream(adaptor,"rule view_name");
	    RewriteRuleSubtreeStream stream_select_command=new RewriteRuleSubtreeStream(adaptor,"rule select_command");
	    RewriteRuleSubtreeStream stream_declaration_list=new RewriteRuleSubtreeStream(adaptor,"rule declaration_list");
		try { DebugEnterRule(GrammarFileName, "create_view_command");
		DebugLocation(249, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:250:2: ( CREATE WS VIEW WS view_name ( ( WS )? '(' declaration_list ')' )? WS AS WS select_command -> ^( T_CREATE_VIEW view_name ( declaration_list )? select_command ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:250:4: CREATE WS VIEW WS view_name ( ( WS )? '(' declaration_list ')' )? WS AS WS select_command
			{
			DebugLocation(250, 4);
			CREATE136=(IToken)Match(input,CREATE,Follow._CREATE_in_create_view_command1297);  
			stream_CREATE.Add(CREATE136);

			DebugLocation(250, 11);
			WS137=(IToken)Match(input,WS,Follow._WS_in_create_view_command1299);  
			stream_WS.Add(WS137);

			DebugLocation(250, 14);
			VIEW138=(IToken)Match(input,VIEW,Follow._VIEW_in_create_view_command1301);  
			stream_VIEW.Add(VIEW138);

			DebugLocation(250, 19);
			WS139=(IToken)Match(input,WS,Follow._WS_in_create_view_command1303);  
			stream_WS.Add(WS139);

			DebugLocation(250, 22);
			PushFollow(Follow._view_name_in_create_view_command1305);
			view_name140=view_name();
			PopFollow();

			stream_view_name.Add(view_name140.Tree);
			DebugLocation(250, 32);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:250:32: ( ( WS )? '(' declaration_list ')' )?
			int alt53=2;
			try { DebugEnterSubRule(53);
			try { DebugEnterDecision(53, decisionCanBacktrack[53]);
			int LA53_0 = input.LA(1);

			if ((LA53_0==WS))
			{
				int LA53_1 = input.LA(2);

				if ((LA53_1==151))
				{
					alt53 = 1;
				}
			}
			else if ((LA53_0==151))
			{
				alt53 = 1;
			}
			} finally { DebugExitDecision(53); }
			switch (alt53)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:250:33: ( WS )? '(' declaration_list ')'
				{
				DebugLocation(250, 33);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:250:33: ( WS )?
				int alt52=2;
				try { DebugEnterSubRule(52);
				try { DebugEnterDecision(52, decisionCanBacktrack[52]);
				int LA52_0 = input.LA(1);

				if ((LA52_0==WS))
				{
					alt52 = 1;
				}
				} finally { DebugExitDecision(52); }
				switch (alt52)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:250:33: WS
					{
					DebugLocation(250, 33);
					WS141=(IToken)Match(input,WS,Follow._WS_in_create_view_command1308);  
					stream_WS.Add(WS141);


					}
					break;

				}
				} finally { DebugExitSubRule(52); }

				DebugLocation(250, 37);
				char_literal142=(IToken)Match(input,151,Follow._151_in_create_view_command1311);  
				stream_151.Add(char_literal142);

				DebugLocation(250, 41);
				PushFollow(Follow._declaration_list_in_create_view_command1313);
				declaration_list143=declaration_list();
				PopFollow();

				stream_declaration_list.Add(declaration_list143.Tree);
				DebugLocation(250, 58);
				char_literal144=(IToken)Match(input,152,Follow._152_in_create_view_command1315);  
				stream_152.Add(char_literal144);


				}
				break;

			}
			} finally { DebugExitSubRule(53); }

			DebugLocation(250, 64);
			WS145=(IToken)Match(input,WS,Follow._WS_in_create_view_command1319);  
			stream_WS.Add(WS145);

			DebugLocation(250, 67);
			AS146=(IToken)Match(input,AS,Follow._AS_in_create_view_command1321);  
			stream_AS.Add(AS146);

			DebugLocation(250, 70);
			WS147=(IToken)Match(input,WS,Follow._WS_in_create_view_command1323);  
			stream_WS.Add(WS147);

			DebugLocation(250, 73);
			PushFollow(Follow._select_command_in_create_view_command1325);
			select_command148=select_command();
			PopFollow();

			stream_select_command.Add(select_command148.Tree);


			{
			// AST REWRITE
			// elements: select_command, declaration_list, view_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 251:2: -> ^( T_CREATE_VIEW view_name ( declaration_list )? select_command )
			{
				DebugLocation(251, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:251:5: ^( T_CREATE_VIEW view_name ( declaration_list )? select_command )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(251, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CREATE_VIEW, "T_CREATE_VIEW"), root_1);

				DebugLocation(251, 21);
				adaptor.AddChild(root_1, stream_view_name.NextTree());
				DebugLocation(251, 31);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:251:31: ( declaration_list )?
				if (stream_declaration_list.HasNext)
				{
					DebugLocation(251, 31);
					adaptor.AddChild(root_1, stream_declaration_list.NextTree());

				}
				stream_declaration_list.Reset();
				DebugLocation(251, 49);
				adaptor.AddChild(root_1, stream_select_command.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("create_view_command", 29);
			LeaveRule("create_view_command", 29);
			LeaveRule_create_view_command();
	    }
	 	DebugLocation(252, 1);
		} finally { DebugExitRule(GrammarFileName, "create_view_command"); }
		return retval;

	}
	// $ANTLR end "create_view_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_drop_view_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_drop_view_command() {}

	// $ANTLR start "drop_view_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:254:1: drop_view_command : DROP WS VIEW WS view_name -> ^( T_DROP_VIEW view_name ) ;
	[GrammarRule("drop_view_command")]
	private AstParserRuleReturnScope<object, IToken> drop_view_command()
	{
		EnterRule_drop_view_command();
		EnterRule("drop_view_command", 30);
		TraceIn("drop_view_command", 30);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken DROP149 = default(IToken);
	    IToken WS150 = default(IToken);
	    IToken VIEW151 = default(IToken);
	    IToken WS152 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> view_name153 = default(AstParserRuleReturnScope<object, IToken>);

	    object DROP149_tree = default(object);
	    object WS150_tree = default(object);
	    object VIEW151_tree = default(object);
	    object WS152_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_VIEW=new RewriteRuleITokenStream(adaptor,"token VIEW");
	    RewriteRuleITokenStream stream_DROP=new RewriteRuleITokenStream(adaptor,"token DROP");
	    RewriteRuleSubtreeStream stream_view_name=new RewriteRuleSubtreeStream(adaptor,"rule view_name");
		try { DebugEnterRule(GrammarFileName, "drop_view_command");
		DebugLocation(254, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:255:2: ( DROP WS VIEW WS view_name -> ^( T_DROP_VIEW view_name ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:255:4: DROP WS VIEW WS view_name
			{
			DebugLocation(255, 4);
			DROP149=(IToken)Match(input,DROP,Follow._DROP_in_drop_view_command1351);  
			stream_DROP.Add(DROP149);

			DebugLocation(255, 9);
			WS150=(IToken)Match(input,WS,Follow._WS_in_drop_view_command1353);  
			stream_WS.Add(WS150);

			DebugLocation(255, 12);
			VIEW151=(IToken)Match(input,VIEW,Follow._VIEW_in_drop_view_command1355);  
			stream_VIEW.Add(VIEW151);

			DebugLocation(255, 17);
			WS152=(IToken)Match(input,WS,Follow._WS_in_drop_view_command1357);  
			stream_WS.Add(WS152);

			DebugLocation(255, 20);
			PushFollow(Follow._view_name_in_drop_view_command1359);
			view_name153=view_name();
			PopFollow();

			stream_view_name.Add(view_name153.Tree);


			{
			// AST REWRITE
			// elements: view_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 256:2: -> ^( T_DROP_VIEW view_name )
			{
				DebugLocation(256, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:256:5: ^( T_DROP_VIEW view_name )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(256, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_DROP_VIEW, "T_DROP_VIEW"), root_1);

				DebugLocation(256, 19);
				adaptor.AddChild(root_1, stream_view_name.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("drop_view_command", 30);
			LeaveRule("drop_view_command", 30);
			LeaveRule_drop_view_command();
	    }
	 	DebugLocation(257, 1);
		} finally { DebugExitRule(GrammarFileName, "drop_view_command"); }
		return retval;

	}
	// $ANTLR end "drop_view_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_view_name() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_view_name() {}

	// $ANTLR start "view_name"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:259:1: view_name : TOKEN -> ^( T_VIEW_NAME TOKEN ) ;
	[GrammarRule("view_name")]
	private AstParserRuleReturnScope<object, IToken> view_name()
	{
		EnterRule_view_name();
		EnterRule("view_name", 31);
		TraceIn("view_name", 31);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN154 = default(IToken);

	    object TOKEN154_tree = default(object);
	    RewriteRuleITokenStream stream_TOKEN=new RewriteRuleITokenStream(adaptor,"token TOKEN");

		try { DebugEnterRule(GrammarFileName, "view_name");
		DebugLocation(259, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:260:2: ( TOKEN -> ^( T_VIEW_NAME TOKEN ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:260:4: TOKEN
			{
			DebugLocation(260, 4);
			TOKEN154=(IToken)Match(input,TOKEN,Follow._TOKEN_in_view_name1379);  
			stream_TOKEN.Add(TOKEN154);



			{
			// AST REWRITE
			// elements: TOKEN
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 260:10: -> ^( T_VIEW_NAME TOKEN )
			{
				DebugLocation(260, 13);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:260:13: ^( T_VIEW_NAME TOKEN )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(260, 15);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_VIEW_NAME, "T_VIEW_NAME"), root_1);

				DebugLocation(260, 27);
				adaptor.AddChild(root_1, stream_TOKEN.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("view_name", 31);
			LeaveRule("view_name", 31);
			LeaveRule_view_name();
	    }
	 	DebugLocation(261, 1);
		} finally { DebugExitRule(GrammarFileName, "view_name"); }
		return retval;

	}
	// $ANTLR end "view_name"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_set_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_set_command() {}

	// $ANTLR start "set_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:267:1: set_command : SET WS variable ( WS )? '=' ( WS )? expression -> ^( T_SET_VARIABLE variable expression ) ;
	[GrammarRule("set_command")]
	private AstParserRuleReturnScope<object, IToken> set_command()
	{
		EnterRule_set_command();
		EnterRule("set_command", 32);
		TraceIn("set_command", 32);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken SET155 = default(IToken);
	    IToken WS156 = default(IToken);
	    IToken WS158 = default(IToken);
	    IToken char_literal159 = default(IToken);
	    IToken WS160 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> variable157 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression161 = default(AstParserRuleReturnScope<object, IToken>);

	    object SET155_tree = default(object);
	    object WS156_tree = default(object);
	    object WS158_tree = default(object);
	    object char_literal159_tree = default(object);
	    object WS160_tree = default(object);
	    RewriteRuleITokenStream stream_163=new RewriteRuleITokenStream(adaptor,"token 163");
	    RewriteRuleITokenStream stream_SET=new RewriteRuleITokenStream(adaptor,"token SET");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_variable=new RewriteRuleSubtreeStream(adaptor,"rule variable");
		try { DebugEnterRule(GrammarFileName, "set_command");
		DebugLocation(267, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:268:2: ( SET WS variable ( WS )? '=' ( WS )? expression -> ^( T_SET_VARIABLE variable expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:268:4: SET WS variable ( WS )? '=' ( WS )? expression
			{
			DebugLocation(268, 4);
			SET155=(IToken)Match(input,SET,Follow._SET_in_set_command1403);  
			stream_SET.Add(SET155);

			DebugLocation(268, 8);
			WS156=(IToken)Match(input,WS,Follow._WS_in_set_command1405);  
			stream_WS.Add(WS156);

			DebugLocation(268, 11);
			PushFollow(Follow._variable_in_set_command1407);
			variable157=variable();
			PopFollow();

			stream_variable.Add(variable157.Tree);
			DebugLocation(268, 20);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:268:20: ( WS )?
			int alt54=2;
			try { DebugEnterSubRule(54);
			try { DebugEnterDecision(54, decisionCanBacktrack[54]);
			int LA54_0 = input.LA(1);

			if ((LA54_0==WS))
			{
				alt54 = 1;
			}
			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:268:20: WS
				{
				DebugLocation(268, 20);
				WS158=(IToken)Match(input,WS,Follow._WS_in_set_command1409);  
				stream_WS.Add(WS158);


				}
				break;

			}
			} finally { DebugExitSubRule(54); }

			DebugLocation(268, 24);
			char_literal159=(IToken)Match(input,163,Follow._163_in_set_command1412);  
			stream_163.Add(char_literal159);

			DebugLocation(268, 28);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:268:28: ( WS )?
			int alt55=2;
			try { DebugEnterSubRule(55);
			try { DebugEnterDecision(55, decisionCanBacktrack[55]);
			int LA55_0 = input.LA(1);

			if ((LA55_0==WS))
			{
				alt55 = 1;
			}
			} finally { DebugExitDecision(55); }
			switch (alt55)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:268:28: WS
				{
				DebugLocation(268, 28);
				WS160=(IToken)Match(input,WS,Follow._WS_in_set_command1414);  
				stream_WS.Add(WS160);


				}
				break;

			}
			} finally { DebugExitSubRule(55); }

			DebugLocation(268, 32);
			PushFollow(Follow._expression_in_set_command1417);
			expression161=expression();
			PopFollow();

			stream_expression.Add(expression161.Tree);


			{
			// AST REWRITE
			// elements: variable, expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 269:2: -> ^( T_SET_VARIABLE variable expression )
			{
				DebugLocation(269, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:269:5: ^( T_SET_VARIABLE variable expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(269, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SET_VARIABLE, "T_SET_VARIABLE"), root_1);

				DebugLocation(269, 22);
				adaptor.AddChild(root_1, stream_variable.NextTree());
				DebugLocation(269, 31);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("set_command", 32);
			LeaveRule("set_command", 32);
			LeaveRule_set_command();
	    }
	 	DebugLocation(270, 1);
		} finally { DebugExitRule(GrammarFileName, "set_command"); }
		return retval;

	}
	// $ANTLR end "set_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_list() {}

	// $ANTLR start "expression_list"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:275:1: expression_list : expression ( ( WS )? ',' ( WS )? expression )* -> ^( T_EXPRESSIONLIST ( expression )+ ) ;
	[GrammarRule("expression_list")]
	private AstParserRuleReturnScope<object, IToken> expression_list()
	{
		EnterRule_expression_list();
		EnterRule("expression_list", 33);
		TraceIn("expression_list", 33);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS163 = default(IToken);
	    IToken char_literal164 = default(IToken);
	    IToken WS165 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression162 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression166 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS163_tree = default(object);
	    object char_literal164_tree = default(object);
	    object WS165_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_155=new RewriteRuleITokenStream(adaptor,"token 155");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "expression_list");
		DebugLocation(275, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:276:2: ( expression ( ( WS )? ',' ( WS )? expression )* -> ^( T_EXPRESSIONLIST ( expression )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:276:4: expression ( ( WS )? ',' ( WS )? expression )*
			{
			DebugLocation(276, 4);
			PushFollow(Follow._expression_in_expression_list1442);
			expression162=expression();
			PopFollow();

			stream_expression.Add(expression162.Tree);
			DebugLocation(276, 15);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:276:15: ( ( WS )? ',' ( WS )? expression )*
			try { DebugEnterSubRule(58);
			while (true)
			{
				int alt58=2;
				try { DebugEnterDecision(58, decisionCanBacktrack[58]);
				int LA58_0 = input.LA(1);

				if ((LA58_0==WS))
				{
					int LA58_1 = input.LA(2);

					if ((LA58_1==155))
					{
						alt58 = 1;
					}


				}
				else if ((LA58_0==155))
				{
					alt58 = 1;
				}


				} finally { DebugExitDecision(58); }
				switch ( alt58 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:276:16: ( WS )? ',' ( WS )? expression
					{
					DebugLocation(276, 16);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:276:16: ( WS )?
					int alt56=2;
					try { DebugEnterSubRule(56);
					try { DebugEnterDecision(56, decisionCanBacktrack[56]);
					int LA56_0 = input.LA(1);

					if ((LA56_0==WS))
					{
						alt56 = 1;
					}
					} finally { DebugExitDecision(56); }
					switch (alt56)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:276:16: WS
						{
						DebugLocation(276, 16);
						WS163=(IToken)Match(input,WS,Follow._WS_in_expression_list1445);  
						stream_WS.Add(WS163);


						}
						break;

					}
					} finally { DebugExitSubRule(56); }

					DebugLocation(276, 20);
					char_literal164=(IToken)Match(input,155,Follow._155_in_expression_list1448);  
					stream_155.Add(char_literal164);

					DebugLocation(276, 24);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:276:24: ( WS )?
					int alt57=2;
					try { DebugEnterSubRule(57);
					try { DebugEnterDecision(57, decisionCanBacktrack[57]);
					int LA57_0 = input.LA(1);

					if ((LA57_0==WS))
					{
						alt57 = 1;
					}
					} finally { DebugExitDecision(57); }
					switch (alt57)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:276:24: WS
						{
						DebugLocation(276, 24);
						WS165=(IToken)Match(input,WS,Follow._WS_in_expression_list1450);  
						stream_WS.Add(WS165);


						}
						break;

					}
					} finally { DebugExitSubRule(57); }

					DebugLocation(276, 28);
					PushFollow(Follow._expression_in_expression_list1453);
					expression166=expression();
					PopFollow();

					stream_expression.Add(expression166.Tree);

					}
					break;

				default:
					goto loop58;
				}
			}

			loop58:
				;

			} finally { DebugExitSubRule(58); }



			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 276:41: -> ^( T_EXPRESSIONLIST ( expression )+ )
			{
				DebugLocation(276, 44);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:276:44: ^( T_EXPRESSIONLIST ( expression )+ )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(276, 46);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_EXPRESSIONLIST, "T_EXPRESSIONLIST"), root_1);

				DebugLocation(276, 63);
				if (!(stream_expression.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_expression.HasNext )
				{
					DebugLocation(276, 63);
					adaptor.AddChild(root_1, stream_expression.NextTree());

				}
				stream_expression.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_list", 33);
			LeaveRule("expression_list", 33);
			LeaveRule_expression_list();
	    }
	 	DebugLocation(277, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_list"); }
		return retval;

	}
	// $ANTLR end "expression_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_list_or_select_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_list_or_select_command() {}

	// $ANTLR start "expression_list_or_select_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:279:1: expression_list_or_select_command : ( expression_list | select_command );
	[GrammarRule("expression_list_or_select_command")]
	private AstParserRuleReturnScope<object, IToken> expression_list_or_select_command()
	{
		EnterRule_expression_list_or_select_command();
		EnterRule("expression_list_or_select_command", 34);
		TraceIn("expression_list_or_select_command", 34);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> expression_list167 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> select_command168 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "expression_list_or_select_command");
		DebugLocation(279, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:280:2: ( expression_list | select_command )
			int alt59=2;
			try { DebugEnterDecision(59, decisionCanBacktrack[59]);
			int LA59_0 = input.LA(1);

			if (((LA59_0>=CASE && LA59_0<=CAST)||LA59_0==CONVERT||LA59_0==EXISTS||(LA59_0>=NOT && LA59_0<=NUMBER)||LA59_0==SIMPLE_FILE||(LA59_0>=STRING && LA59_0<=SYSTEMVAR)||LA59_0==TOKEN||LA59_0==VARIABLE||LA59_0==151))
			{
				alt59 = 1;
			}
			else if ((LA59_0==SELECT))
			{
				alt59 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 59, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(59); }
			switch (alt59)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:280:4: expression_list
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(280, 4);
				PushFollow(Follow._expression_list_in_expression_list_or_select_command1476);
				expression_list167=expression_list();
				PopFollow();

				adaptor.AddChild(root_0, expression_list167.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:280:22: select_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(280, 22);
				PushFollow(Follow._select_command_in_expression_list_or_select_command1480);
				select_command168=select_command();
				PopFollow();

				adaptor.AddChild(root_0, select_command168.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_list_or_select_command", 34);
			LeaveRule("expression_list_or_select_command", 34);
			LeaveRule_expression_list_or_select_command();
	    }
	 	DebugLocation(281, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_list_or_select_command"); }
		return retval;

	}
	// $ANTLR end "expression_list_or_select_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression() {}

	// $ANTLR start "expression"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:283:1: expression : expression_7 ;
	[GrammarRule("expression")]
	private AstParserRuleReturnScope<object, IToken> expression()
	{
		EnterRule_expression();
		EnterRule("expression", 35);
		TraceIn("expression", 35);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> expression_7169 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(283, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:284:2: ( expression_7 )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:284:4: expression_7
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(284, 4);
			PushFollow(Follow._expression_7_in_expression1492);
			expression_7169=expression_7();
			PopFollow();

			adaptor.AddChild(root_0, expression_7169.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression", 35);
			LeaveRule("expression", 35);
			LeaveRule_expression();
	    }
	 	DebugLocation(285, 1);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return retval;

	}
	// $ANTLR end "expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_7() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_7() {}

	// $ANTLR start "expression_7"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:287:1: expression_7 : (a= expression_6 -> $a) ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )* ;
	[GrammarRule("expression_7")]
	private AstParserRuleReturnScope<object, IToken> expression_7()
	{
		EnterRule_expression_7();
		EnterRule("expression_7", 36);
		TraceIn("expression_7", 36);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS170 = default(IToken);
	    IToken WS172 = default(IToken);
	    IToken IN173 = default(IToken);
	    IToken WS174 = default(IToken);
	    IToken char_literal175 = default(IToken);
	    IToken WS176 = default(IToken);
	    IToken WS178 = default(IToken);
	    IToken char_literal179 = default(IToken);
	    IToken NOT180 = default(IToken);
	    IToken WS181 = default(IToken);
	    IToken IN182 = default(IToken);
	    IToken WS183 = default(IToken);
	    IToken char_literal184 = default(IToken);
	    IToken WS185 = default(IToken);
	    IToken WS187 = default(IToken);
	    IToken char_literal188 = default(IToken);
	    IToken WS190 = default(IToken);
	    IToken SOME191 = default(IToken);
	    IToken ANY192 = default(IToken);
	    IToken WS193 = default(IToken);
	    IToken char_literal194 = default(IToken);
	    IToken char_literal196 = default(IToken);
	    IToken WS198 = default(IToken);
	    IToken ALL199 = default(IToken);
	    IToken WS200 = default(IToken);
	    IToken char_literal201 = default(IToken);
	    IToken char_literal203 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_7171 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command177 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command186 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_4189 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command195 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_4197 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command202 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS170_tree = default(object);
	    object WS172_tree = default(object);
	    object IN173_tree = default(object);
	    object WS174_tree = default(object);
	    object char_literal175_tree = default(object);
	    object WS176_tree = default(object);
	    object WS178_tree = default(object);
	    object char_literal179_tree = default(object);
	    object NOT180_tree = default(object);
	    object WS181_tree = default(object);
	    object IN182_tree = default(object);
	    object WS183_tree = default(object);
	    object char_literal184_tree = default(object);
	    object WS185_tree = default(object);
	    object WS187_tree = default(object);
	    object char_literal188_tree = default(object);
	    object WS190_tree = default(object);
	    object SOME191_tree = default(object);
	    object ANY192_tree = default(object);
	    object WS193_tree = default(object);
	    object char_literal194_tree = default(object);
	    object char_literal196_tree = default(object);
	    object WS198_tree = default(object);
	    object ALL199_tree = default(object);
	    object WS200_tree = default(object);
	    object char_literal201_tree = default(object);
	    object char_literal203_tree = default(object);
	    RewriteRuleITokenStream stream_152=new RewriteRuleITokenStream(adaptor,"token 152");
	    RewriteRuleITokenStream stream_151=new RewriteRuleITokenStream(adaptor,"token 151");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_ANY=new RewriteRuleITokenStream(adaptor,"token ANY");
	    RewriteRuleITokenStream stream_IN=new RewriteRuleITokenStream(adaptor,"token IN");
	    RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");
	    RewriteRuleITokenStream stream_SOME=new RewriteRuleITokenStream(adaptor,"token SOME");
	    RewriteRuleITokenStream stream_ALL=new RewriteRuleITokenStream(adaptor,"token ALL");
	    RewriteRuleSubtreeStream stream_op_7=new RewriteRuleSubtreeStream(adaptor,"rule op_7");
	    RewriteRuleSubtreeStream stream_expression_6=new RewriteRuleSubtreeStream(adaptor,"rule expression_6");
	    RewriteRuleSubtreeStream stream_expression_list_or_select_command=new RewriteRuleSubtreeStream(adaptor,"rule expression_list_or_select_command");
	    RewriteRuleSubtreeStream stream_op_4=new RewriteRuleSubtreeStream(adaptor,"rule op_4");
		try { DebugEnterRule(GrammarFileName, "expression_7");
		DebugLocation(287, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:288:2: ( (a= expression_6 -> $a) ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:288:4: (a= expression_6 -> $a) ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )*
			{
			DebugLocation(288, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:288:4: (a= expression_6 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:288:5: a= expression_6
			{
			DebugLocation(288, 6);
			PushFollow(Follow._expression_6_in_expression_71508);
			a=expression_6();
			PopFollow();

			stream_expression_6.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 288:19: -> $a
			{
				DebugLocation(288, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(288, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:288:25: ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )*
			try { DebugEnterSubRule(72);
			while (true)
			{
				int alt72=2;
				try { DebugEnterDecision(72, decisionCanBacktrack[72]);
				int LA72_0 = input.LA(1);

				if ((LA72_0==WS))
				{
					int LA72_1 = input.LA(2);

					if ((LA72_1==NOT))
					{
						int LA72_3 = input.LA(3);

						if ((LA72_3==WS))
						{
							int LA72_5 = input.LA(4);

							if ((LA72_5==BETWEEN||LA72_5==IN||LA72_5==LIKE||LA72_5==MATCH))
							{
								alt72 = 1;
							}


						}


					}
					else if ((LA72_1==BETWEEN||LA72_1==IN||LA72_1==LIKE||LA72_1==MATCH||LA72_1==OR||(LA72_1>=146 && LA72_1<=148)||(LA72_1>=160 && LA72_1<=165)))
					{
						alt72 = 1;
					}


				}


				} finally { DebugExitDecision(72); }
				switch ( alt72 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:288:26: WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) )
					{
					DebugLocation(288, 26);
					WS170=(IToken)Match(input,WS,Follow._WS_in_expression_71515);  
					stream_WS.Add(WS170);

					DebugLocation(288, 29);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:288:29: ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) )
					int alt71=5;
					try { DebugEnterSubRule(71);
					try { DebugEnterDecision(71, decisionCanBacktrack[71]);
					switch (input.LA(1))
					{
					case BETWEEN:
					case LIKE:
					case MATCH:
					case OR:
						{
						alt71 = 1;
						}
						break;
					case NOT:
						{
						int LA71_2 = input.LA(2);

						if ((LA71_2==WS))
						{
							int LA71_13 = input.LA(3);

							if ((LA71_13==BETWEEN||LA71_13==LIKE||LA71_13==MATCH))
							{
								alt71 = 1;
							}
							else if ((LA71_13==IN))
							{
								alt71 = 3;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 71, 13, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 71, 2, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case IN:
						{
						alt71 = 2;
						}
						break;
					case 163:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA71_14 = input.LA(3);

							if ((LA71_14==ANY||LA71_14==SOME))
							{
								alt71 = 4;
							}
							else if ((LA71_14==ALL))
							{
								alt71 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 71, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt71 = 4;
							}
							break;
						case ALL:
							{
							alt71 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 71, 4, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 165:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA71_14 = input.LA(3);

							if ((LA71_14==ANY||LA71_14==SOME))
							{
								alt71 = 4;
							}
							else if ((LA71_14==ALL))
							{
								alt71 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 71, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt71 = 4;
							}
							break;
						case ALL:
							{
							alt71 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 71, 5, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 161:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA71_14 = input.LA(3);

							if ((LA71_14==ANY||LA71_14==SOME))
							{
								alt71 = 4;
							}
							else if ((LA71_14==ALL))
							{
								alt71 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 71, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt71 = 4;
							}
							break;
						case ALL:
							{
							alt71 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 71, 6, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 162:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA71_14 = input.LA(3);

							if ((LA71_14==ANY||LA71_14==SOME))
							{
								alt71 = 4;
							}
							else if ((LA71_14==ALL))
							{
								alt71 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 71, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt71 = 4;
							}
							break;
						case ALL:
							{
							alt71 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 71, 7, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 147:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA71_14 = input.LA(3);

							if ((LA71_14==ANY||LA71_14==SOME))
							{
								alt71 = 4;
							}
							else if ((LA71_14==ALL))
							{
								alt71 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 71, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt71 = 4;
							}
							break;
						case ALL:
							{
							alt71 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 71, 8, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 148:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA71_14 = input.LA(3);

							if ((LA71_14==ANY||LA71_14==SOME))
							{
								alt71 = 4;
							}
							else if ((LA71_14==ALL))
							{
								alt71 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 71, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt71 = 4;
							}
							break;
						case ALL:
							{
							alt71 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 71, 9, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 146:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA71_14 = input.LA(3);

							if ((LA71_14==ANY||LA71_14==SOME))
							{
								alt71 = 4;
							}
							else if ((LA71_14==ALL))
							{
								alt71 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 71, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt71 = 4;
							}
							break;
						case ALL:
							{
							alt71 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 71, 10, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 164:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA71_14 = input.LA(3);

							if ((LA71_14==ANY||LA71_14==SOME))
							{
								alt71 = 4;
							}
							else if ((LA71_14==ALL))
							{
								alt71 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 71, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt71 = 4;
							}
							break;
						case ALL:
							{
							alt71 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 71, 11, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 160:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA71_14 = input.LA(3);

							if ((LA71_14==ANY||LA71_14==SOME))
							{
								alt71 = 4;
							}
							else if ((LA71_14==ALL))
							{
								alt71 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 71, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt71 = 4;
							}
							break;
						case ALL:
							{
							alt71 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 71, 12, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 71, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(71); }
					switch (alt71)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:289:2: op_7 WS b= expression_6
						{
						DebugLocation(289, 2);
						PushFollow(Follow._op_7_in_expression_71520);
						op_7171=op_7();
						PopFollow();

						stream_op_7.Add(op_7171.Tree);
						DebugLocation(289, 7);
						WS172=(IToken)Match(input,WS,Follow._WS_in_expression_71522);  
						stream_WS.Add(WS172);

						DebugLocation(289, 11);
						PushFollow(Follow._expression_6_in_expression_71526);
						b=expression_6();
						PopFollow();

						stream_expression_6.Add(b.Tree);


						{
						// AST REWRITE
						// elements: b, op_7, expression_7
						// token labels: 
						// rule labels: retval, b
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 289:25: -> ^( T_OP_BINARY op_7 $expression_7 $b)
						{
							DebugLocation(289, 28);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:289:28: ^( T_OP_BINARY op_7 $expression_7 $b)
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(289, 30);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(289, 42);
							adaptor.AddChild(root_1, stream_op_7.NextTree());
							DebugLocation(289, 48);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(289, 62);
							adaptor.AddChild(root_1, stream_b.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:290:4: IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')'
						{
						DebugLocation(290, 4);
						IN173=(IToken)Match(input,IN,Follow._IN_in_expression_71545);  
						stream_IN.Add(IN173);

						DebugLocation(290, 7);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:290:7: ( WS )?
						int alt60=2;
						try { DebugEnterSubRule(60);
						try { DebugEnterDecision(60, decisionCanBacktrack[60]);
						int LA60_0 = input.LA(1);

						if ((LA60_0==WS))
						{
							alt60 = 1;
						}
						} finally { DebugExitDecision(60); }
						switch (alt60)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:290:7: WS
							{
							DebugLocation(290, 7);
							WS174=(IToken)Match(input,WS,Follow._WS_in_expression_71547);  
							stream_WS.Add(WS174);


							}
							break;

						}
						} finally { DebugExitSubRule(60); }

						DebugLocation(290, 11);
						char_literal175=(IToken)Match(input,151,Follow._151_in_expression_71550);  
						stream_151.Add(char_literal175);

						DebugLocation(290, 15);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:290:15: ( WS )?
						int alt61=2;
						try { DebugEnterSubRule(61);
						try { DebugEnterDecision(61, decisionCanBacktrack[61]);
						int LA61_0 = input.LA(1);

						if ((LA61_0==WS))
						{
							alt61 = 1;
						}
						} finally { DebugExitDecision(61); }
						switch (alt61)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:290:15: WS
							{
							DebugLocation(290, 15);
							WS176=(IToken)Match(input,WS,Follow._WS_in_expression_71552);  
							stream_WS.Add(WS176);


							}
							break;

						}
						} finally { DebugExitSubRule(61); }

						DebugLocation(290, 19);
						PushFollow(Follow._expression_list_or_select_command_in_expression_71555);
						expression_list_or_select_command177=expression_list_or_select_command();
						PopFollow();

						stream_expression_list_or_select_command.Add(expression_list_or_select_command177.Tree);
						DebugLocation(290, 53);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:290:53: ( WS )?
						int alt62=2;
						try { DebugEnterSubRule(62);
						try { DebugEnterDecision(62, decisionCanBacktrack[62]);
						int LA62_0 = input.LA(1);

						if ((LA62_0==WS))
						{
							alt62 = 1;
						}
						} finally { DebugExitDecision(62); }
						switch (alt62)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:290:53: WS
							{
							DebugLocation(290, 53);
							WS178=(IToken)Match(input,WS,Follow._WS_in_expression_71557);  
							stream_WS.Add(WS178);


							}
							break;

						}
						} finally { DebugExitSubRule(62); }

						DebugLocation(290, 57);
						char_literal179=(IToken)Match(input,152,Follow._152_in_expression_71560);  
						stream_152.Add(char_literal179);



						{
						// AST REWRITE
						// elements: expression_list_or_select_command, expression_7
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 290:61: -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command )
						{
							DebugLocation(290, 64);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:290:64: ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(290, 66);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(290, 78);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_IN, "T_IN"));
							DebugLocation(290, 84);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(290, 97);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:291:4: NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')'
						{
						DebugLocation(291, 4);
						NOT180=(IToken)Match(input,NOT,Follow._NOT_in_expression_71578);  
						stream_NOT.Add(NOT180);

						DebugLocation(291, 8);
						WS181=(IToken)Match(input,WS,Follow._WS_in_expression_71580);  
						stream_WS.Add(WS181);

						DebugLocation(291, 11);
						IN182=(IToken)Match(input,IN,Follow._IN_in_expression_71582);  
						stream_IN.Add(IN182);

						DebugLocation(291, 14);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:291:14: ( WS )?
						int alt63=2;
						try { DebugEnterSubRule(63);
						try { DebugEnterDecision(63, decisionCanBacktrack[63]);
						int LA63_0 = input.LA(1);

						if ((LA63_0==WS))
						{
							alt63 = 1;
						}
						} finally { DebugExitDecision(63); }
						switch (alt63)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:291:14: WS
							{
							DebugLocation(291, 14);
							WS183=(IToken)Match(input,WS,Follow._WS_in_expression_71584);  
							stream_WS.Add(WS183);


							}
							break;

						}
						} finally { DebugExitSubRule(63); }

						DebugLocation(291, 18);
						char_literal184=(IToken)Match(input,151,Follow._151_in_expression_71587);  
						stream_151.Add(char_literal184);

						DebugLocation(291, 22);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:291:22: ( WS )?
						int alt64=2;
						try { DebugEnterSubRule(64);
						try { DebugEnterDecision(64, decisionCanBacktrack[64]);
						int LA64_0 = input.LA(1);

						if ((LA64_0==WS))
						{
							alt64 = 1;
						}
						} finally { DebugExitDecision(64); }
						switch (alt64)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:291:22: WS
							{
							DebugLocation(291, 22);
							WS185=(IToken)Match(input,WS,Follow._WS_in_expression_71589);  
							stream_WS.Add(WS185);


							}
							break;

						}
						} finally { DebugExitSubRule(64); }

						DebugLocation(291, 26);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:291:26: ( expression_list_or_select_command )
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:291:27: expression_list_or_select_command
						{
						DebugLocation(291, 27);
						PushFollow(Follow._expression_list_or_select_command_in_expression_71593);
						expression_list_or_select_command186=expression_list_or_select_command();
						PopFollow();

						stream_expression_list_or_select_command.Add(expression_list_or_select_command186.Tree);

						}

						DebugLocation(291, 62);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:291:62: ( WS )?
						int alt65=2;
						try { DebugEnterSubRule(65);
						try { DebugEnterDecision(65, decisionCanBacktrack[65]);
						int LA65_0 = input.LA(1);

						if ((LA65_0==WS))
						{
							alt65 = 1;
						}
						} finally { DebugExitDecision(65); }
						switch (alt65)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:291:62: WS
							{
							DebugLocation(291, 62);
							WS187=(IToken)Match(input,WS,Follow._WS_in_expression_71596);  
							stream_WS.Add(WS187);


							}
							break;

						}
						} finally { DebugExitSubRule(65); }

						DebugLocation(291, 66);
						char_literal188=(IToken)Match(input,152,Follow._152_in_expression_71599);  
						stream_152.Add(char_literal188);



						{
						// AST REWRITE
						// elements: expression_list_or_select_command, expression_7
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 291:70: -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command )
						{
							DebugLocation(291, 73);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:291:73: ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(291, 75);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(291, 87);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_NOTIN, "T_NOTIN"));
							DebugLocation(291, 96);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(291, 109);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 4:
						DebugEnterAlt(4);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:292:4: op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')'
						{
						DebugLocation(292, 4);
						PushFollow(Follow._op_4_in_expression_71617);
						op_4189=op_4();
						PopFollow();

						stream_op_4.Add(op_4189.Tree);
						DebugLocation(292, 9);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:292:9: ( WS )?
						int alt66=2;
						try { DebugEnterSubRule(66);
						try { DebugEnterDecision(66, decisionCanBacktrack[66]);
						int LA66_0 = input.LA(1);

						if ((LA66_0==WS))
						{
							alt66 = 1;
						}
						} finally { DebugExitDecision(66); }
						switch (alt66)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:292:9: WS
							{
							DebugLocation(292, 9);
							WS190=(IToken)Match(input,WS,Follow._WS_in_expression_71619);  
							stream_WS.Add(WS190);


							}
							break;

						}
						} finally { DebugExitSubRule(66); }

						DebugLocation(292, 13);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:292:13: ( SOME | ANY )
						int alt67=2;
						try { DebugEnterSubRule(67);
						try { DebugEnterDecision(67, decisionCanBacktrack[67]);
						int LA67_0 = input.LA(1);

						if ((LA67_0==SOME))
						{
							alt67 = 1;
						}
						else if ((LA67_0==ANY))
						{
							alt67 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 67, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						} finally { DebugExitDecision(67); }
						switch (alt67)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:292:14: SOME
							{
							DebugLocation(292, 14);
							SOME191=(IToken)Match(input,SOME,Follow._SOME_in_expression_71623);  
							stream_SOME.Add(SOME191);


							}
							break;
						case 2:
							DebugEnterAlt(2);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:292:21: ANY
							{
							DebugLocation(292, 21);
							ANY192=(IToken)Match(input,ANY,Follow._ANY_in_expression_71627);  
							stream_ANY.Add(ANY192);


							}
							break;

						}
						} finally { DebugExitSubRule(67); }

						DebugLocation(292, 26);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:292:26: ( WS )?
						int alt68=2;
						try { DebugEnterSubRule(68);
						try { DebugEnterDecision(68, decisionCanBacktrack[68]);
						int LA68_0 = input.LA(1);

						if ((LA68_0==WS))
						{
							alt68 = 1;
						}
						} finally { DebugExitDecision(68); }
						switch (alt68)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:292:26: WS
							{
							DebugLocation(292, 26);
							WS193=(IToken)Match(input,WS,Follow._WS_in_expression_71630);  
							stream_WS.Add(WS193);


							}
							break;

						}
						} finally { DebugExitSubRule(68); }

						DebugLocation(292, 30);
						char_literal194=(IToken)Match(input,151,Follow._151_in_expression_71633);  
						stream_151.Add(char_literal194);

						DebugLocation(292, 34);
						PushFollow(Follow._expression_list_or_select_command_in_expression_71635);
						expression_list_or_select_command195=expression_list_or_select_command();
						PopFollow();

						stream_expression_list_or_select_command.Add(expression_list_or_select_command195.Tree);
						DebugLocation(292, 68);
						char_literal196=(IToken)Match(input,152,Follow._152_in_expression_71637);  
						stream_152.Add(char_literal196);



						{
						// AST REWRITE
						// elements: expression_list_or_select_command, op_4, expression_7
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 292:72: -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command )
						{
							DebugLocation(292, 75);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:292:75: ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(292, 77);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(292, 89);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_ANY, "T_ANY"));
							DebugLocation(292, 95);
							adaptor.AddChild(root_1, stream_op_4.NextTree());
							DebugLocation(292, 101);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(292, 114);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 5:
						DebugEnterAlt(5);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:293:4: op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')'
						{
						DebugLocation(293, 4);
						PushFollow(Follow._op_4_in_expression_71657);
						op_4197=op_4();
						PopFollow();

						stream_op_4.Add(op_4197.Tree);
						DebugLocation(293, 9);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:293:9: ( WS )?
						int alt69=2;
						try { DebugEnterSubRule(69);
						try { DebugEnterDecision(69, decisionCanBacktrack[69]);
						int LA69_0 = input.LA(1);

						if ((LA69_0==WS))
						{
							alt69 = 1;
						}
						} finally { DebugExitDecision(69); }
						switch (alt69)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:293:9: WS
							{
							DebugLocation(293, 9);
							WS198=(IToken)Match(input,WS,Follow._WS_in_expression_71659);  
							stream_WS.Add(WS198);


							}
							break;

						}
						} finally { DebugExitSubRule(69); }

						DebugLocation(293, 13);
						ALL199=(IToken)Match(input,ALL,Follow._ALL_in_expression_71662);  
						stream_ALL.Add(ALL199);

						DebugLocation(293, 17);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:293:17: ( WS )?
						int alt70=2;
						try { DebugEnterSubRule(70);
						try { DebugEnterDecision(70, decisionCanBacktrack[70]);
						int LA70_0 = input.LA(1);

						if ((LA70_0==WS))
						{
							alt70 = 1;
						}
						} finally { DebugExitDecision(70); }
						switch (alt70)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:293:17: WS
							{
							DebugLocation(293, 17);
							WS200=(IToken)Match(input,WS,Follow._WS_in_expression_71664);  
							stream_WS.Add(WS200);


							}
							break;

						}
						} finally { DebugExitSubRule(70); }

						DebugLocation(293, 21);
						char_literal201=(IToken)Match(input,151,Follow._151_in_expression_71667);  
						stream_151.Add(char_literal201);

						DebugLocation(293, 25);
						PushFollow(Follow._expression_list_or_select_command_in_expression_71669);
						expression_list_or_select_command202=expression_list_or_select_command();
						PopFollow();

						stream_expression_list_or_select_command.Add(expression_list_or_select_command202.Tree);
						DebugLocation(293, 59);
						char_literal203=(IToken)Match(input,152,Follow._152_in_expression_71671);  
						stream_152.Add(char_literal203);



						{
						// AST REWRITE
						// elements: expression_list_or_select_command, expression_7, op_4
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 293:63: -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command )
						{
							DebugLocation(293, 66);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:293:66: ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(293, 68);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(293, 80);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_ALL, "T_ALL"));
							DebugLocation(293, 86);
							adaptor.AddChild(root_1, stream_op_4.NextTree());
							DebugLocation(293, 92);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(293, 105);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					}
					} finally { DebugExitSubRule(71); }


					}
					break;

				default:
					goto loop72;
				}
			}

			loop72:
				;

			} finally { DebugExitSubRule(72); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_7", 36);
			LeaveRule("expression_7", 36);
			LeaveRule_expression_7();
	    }
	 	DebugLocation(295, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_7"); }
		return retval;

	}
	// $ANTLR end "expression_7"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_7() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_7() {}

	// $ANTLR start "op_7"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:297:1: op_7 : ( OR -> T_OR | LIKE -> T_LIKE | NOT WS LIKE -> T_NOTLIKE | MATCH -> T_MATCH | NOT WS MATCH -> T_NOTMATCH | BETWEEN -> T_BETWEEN | NOT WS BETWEEN -> T_NOTBETWEEN );
	[GrammarRule("op_7")]
	private AstParserRuleReturnScope<object, IToken> op_7()
	{
		EnterRule_op_7();
		EnterRule("op_7", 37);
		TraceIn("op_7", 37);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken OR204 = default(IToken);
	    IToken LIKE205 = default(IToken);
	    IToken NOT206 = default(IToken);
	    IToken WS207 = default(IToken);
	    IToken LIKE208 = default(IToken);
	    IToken MATCH209 = default(IToken);
	    IToken NOT210 = default(IToken);
	    IToken WS211 = default(IToken);
	    IToken MATCH212 = default(IToken);
	    IToken BETWEEN213 = default(IToken);
	    IToken NOT214 = default(IToken);
	    IToken WS215 = default(IToken);
	    IToken BETWEEN216 = default(IToken);

	    object OR204_tree = default(object);
	    object LIKE205_tree = default(object);
	    object NOT206_tree = default(object);
	    object WS207_tree = default(object);
	    object LIKE208_tree = default(object);
	    object MATCH209_tree = default(object);
	    object NOT210_tree = default(object);
	    object WS211_tree = default(object);
	    object MATCH212_tree = default(object);
	    object BETWEEN213_tree = default(object);
	    object NOT214_tree = default(object);
	    object WS215_tree = default(object);
	    object BETWEEN216_tree = default(object);
	    RewriteRuleITokenStream stream_MATCH=new RewriteRuleITokenStream(adaptor,"token MATCH");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");
	    RewriteRuleITokenStream stream_BETWEEN=new RewriteRuleITokenStream(adaptor,"token BETWEEN");
	    RewriteRuleITokenStream stream_LIKE=new RewriteRuleITokenStream(adaptor,"token LIKE");
	    RewriteRuleITokenStream stream_OR=new RewriteRuleITokenStream(adaptor,"token OR");

		try { DebugEnterRule(GrammarFileName, "op_7");
		DebugLocation(297, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:297:6: ( OR -> T_OR | LIKE -> T_LIKE | NOT WS LIKE -> T_NOTLIKE | MATCH -> T_MATCH | NOT WS MATCH -> T_NOTMATCH | BETWEEN -> T_BETWEEN | NOT WS BETWEEN -> T_NOTBETWEEN )
			int alt73=7;
			try { DebugEnterDecision(73, decisionCanBacktrack[73]);
			switch (input.LA(1))
			{
			case OR:
				{
				alt73 = 1;
				}
				break;
			case LIKE:
				{
				alt73 = 2;
				}
				break;
			case NOT:
				{
				int LA73_3 = input.LA(2);

				if ((LA73_3==WS))
				{
					switch (input.LA(3))
					{
					case LIKE:
						{
						alt73 = 3;
						}
						break;
					case MATCH:
						{
						alt73 = 5;
						}
						break;
					case BETWEEN:
						{
						alt73 = 7;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 73, 6, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 73, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case MATCH:
				{
				alt73 = 4;
				}
				break;
			case BETWEEN:
				{
				alt73 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 73, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(73); }
			switch (alt73)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:297:8: OR
				{
				DebugLocation(297, 8);
				OR204=(IToken)Match(input,OR,Follow._OR_in_op_71701);  
				stream_OR.Add(OR204);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 297:11: -> T_OR
				{
					DebugLocation(297, 14);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_OR, "T_OR"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:298:4: LIKE
				{
				DebugLocation(298, 4);
				LIKE205=(IToken)Match(input,LIKE,Follow._LIKE_in_op_71710);  
				stream_LIKE.Add(LIKE205);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 298:9: -> T_LIKE
				{
					DebugLocation(298, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_LIKE, "T_LIKE"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:299:4: NOT WS LIKE
				{
				DebugLocation(299, 4);
				NOT206=(IToken)Match(input,NOT,Follow._NOT_in_op_71719);  
				stream_NOT.Add(NOT206);

				DebugLocation(299, 8);
				WS207=(IToken)Match(input,WS,Follow._WS_in_op_71721);  
				stream_WS.Add(WS207);

				DebugLocation(299, 11);
				LIKE208=(IToken)Match(input,LIKE,Follow._LIKE_in_op_71723);  
				stream_LIKE.Add(LIKE208);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 299:16: -> T_NOTLIKE
				{
					DebugLocation(299, 19);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTLIKE, "T_NOTLIKE"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:300:4: MATCH
				{
				DebugLocation(300, 4);
				MATCH209=(IToken)Match(input,MATCH,Follow._MATCH_in_op_71732);  
				stream_MATCH.Add(MATCH209);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 300:10: -> T_MATCH
				{
					DebugLocation(300, 13);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MATCH, "T_MATCH"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:301:4: NOT WS MATCH
				{
				DebugLocation(301, 4);
				NOT210=(IToken)Match(input,NOT,Follow._NOT_in_op_71741);  
				stream_NOT.Add(NOT210);

				DebugLocation(301, 8);
				WS211=(IToken)Match(input,WS,Follow._WS_in_op_71743);  
				stream_WS.Add(WS211);

				DebugLocation(301, 11);
				MATCH212=(IToken)Match(input,MATCH,Follow._MATCH_in_op_71745);  
				stream_MATCH.Add(MATCH212);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 301:17: -> T_NOTMATCH
				{
					DebugLocation(301, 20);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTMATCH, "T_NOTMATCH"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:302:4: BETWEEN
				{
				DebugLocation(302, 4);
				BETWEEN213=(IToken)Match(input,BETWEEN,Follow._BETWEEN_in_op_71754);  
				stream_BETWEEN.Add(BETWEEN213);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 302:12: -> T_BETWEEN
				{
					DebugLocation(302, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BETWEEN, "T_BETWEEN"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:303:4: NOT WS BETWEEN
				{
				DebugLocation(303, 4);
				NOT214=(IToken)Match(input,NOT,Follow._NOT_in_op_71763);  
				stream_NOT.Add(NOT214);

				DebugLocation(303, 8);
				WS215=(IToken)Match(input,WS,Follow._WS_in_op_71765);  
				stream_WS.Add(WS215);

				DebugLocation(303, 11);
				BETWEEN216=(IToken)Match(input,BETWEEN,Follow._BETWEEN_in_op_71767);  
				stream_BETWEEN.Add(BETWEEN216);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 303:19: -> T_NOTBETWEEN
				{
					DebugLocation(303, 22);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTBETWEEN, "T_NOTBETWEEN"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_7", 37);
			LeaveRule("op_7", 37);
			LeaveRule_op_7();
	    }
	 	DebugLocation(304, 1);
		} finally { DebugExitRule(GrammarFileName, "op_7"); }
		return retval;

	}
	// $ANTLR end "op_7"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_6() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_6() {}

	// $ANTLR start "expression_6"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:306:1: expression_6 : (a= expression_5 -> $a) ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )* ;
	[GrammarRule("expression_6")]
	private AstParserRuleReturnScope<object, IToken> expression_6()
	{
		EnterRule_expression_6();
		EnterRule("expression_6", 38);
		TraceIn("expression_6", 38);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS217 = default(IToken);
	    IToken WS219 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_6218 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS217_tree = default(object);
	    object WS219_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_op_6=new RewriteRuleSubtreeStream(adaptor,"rule op_6");
	    RewriteRuleSubtreeStream stream_expression_5=new RewriteRuleSubtreeStream(adaptor,"rule expression_5");
		try { DebugEnterRule(GrammarFileName, "expression_6");
		DebugLocation(306, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:307:2: ( (a= expression_5 -> $a) ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:307:4: (a= expression_5 -> $a) ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )*
			{
			DebugLocation(307, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:307:4: (a= expression_5 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:307:5: a= expression_5
			{
			DebugLocation(307, 6);
			PushFollow(Follow._expression_5_in_expression_61786);
			a=expression_5();
			PopFollow();

			stream_expression_5.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 307:19: -> $a
			{
				DebugLocation(307, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(307, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:307:25: ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )*
			try { DebugEnterSubRule(74);
			while (true)
			{
				int alt74=2;
				try { DebugEnterDecision(74, decisionCanBacktrack[74]);
				int LA74_0 = input.LA(1);

				if ((LA74_0==WS))
				{
					int LA74_1 = input.LA(2);

					if ((LA74_1==AND))
					{
						alt74 = 1;
					}


				}


				} finally { DebugExitDecision(74); }
				switch ( alt74 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:307:26: WS op_6 WS b= expression_5
					{
					DebugLocation(307, 26);
					WS217=(IToken)Match(input,WS,Follow._WS_in_expression_61793);  
					stream_WS.Add(WS217);

					DebugLocation(307, 29);
					PushFollow(Follow._op_6_in_expression_61795);
					op_6218=op_6();
					PopFollow();

					stream_op_6.Add(op_6218.Tree);
					DebugLocation(307, 34);
					WS219=(IToken)Match(input,WS,Follow._WS_in_expression_61797);  
					stream_WS.Add(WS219);

					DebugLocation(307, 38);
					PushFollow(Follow._expression_5_in_expression_61801);
					b=expression_5();
					PopFollow();

					stream_expression_5.Add(b.Tree);


					{
					// AST REWRITE
					// elements: expression_6, b, op_6
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 307:52: -> ^( T_OP_BINARY op_6 $expression_6 $b)
					{
						DebugLocation(307, 55);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:307:55: ^( T_OP_BINARY op_6 $expression_6 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(307, 57);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(307, 69);
						adaptor.AddChild(root_1, stream_op_6.NextTree());
						DebugLocation(307, 75);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(307, 89);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop74;
				}
			}

			loop74:
				;

			} finally { DebugExitSubRule(74); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_6", 38);
			LeaveRule("expression_6", 38);
			LeaveRule_expression_6();
	    }
	 	DebugLocation(308, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_6"); }
		return retval;

	}
	// $ANTLR end "expression_6"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_6() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_6() {}

	// $ANTLR start "op_6"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:310:1: op_6 : AND -> T_AND ;
	[GrammarRule("op_6")]
	private AstParserRuleReturnScope<object, IToken> op_6()
	{
		EnterRule_op_6();
		EnterRule("op_6", 39);
		TraceIn("op_6", 39);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken AND220 = default(IToken);

	    object AND220_tree = default(object);
	    RewriteRuleITokenStream stream_AND=new RewriteRuleITokenStream(adaptor,"token AND");

		try { DebugEnterRule(GrammarFileName, "op_6");
		DebugLocation(310, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:310:6: ( AND -> T_AND )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:310:8: AND
			{
			DebugLocation(310, 8);
			AND220=(IToken)Match(input,AND,Follow._AND_in_op_61829);  
			stream_AND.Add(AND220);



			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 310:12: -> T_AND
			{
				DebugLocation(310, 15);
				adaptor.AddChild(root_0, (object)adaptor.Create(T_AND, "T_AND"));

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_6", 39);
			LeaveRule("op_6", 39);
			LeaveRule_op_6();
	    }
	 	DebugLocation(311, 1);
		} finally { DebugExitRule(GrammarFileName, "op_6"); }
		return retval;

	}
	// $ANTLR end "op_6"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_5() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_5() {}

	// $ANTLR start "expression_5"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:313:1: expression_5 : ( op_5 WS expression_5 -> ^( T_OP_UNARY op_5 expression_5 ) | expression_4 );
	[GrammarRule("expression_5")]
	private AstParserRuleReturnScope<object, IToken> expression_5()
	{
		EnterRule_expression_5();
		EnterRule("expression_5", 40);
		TraceIn("expression_5", 40);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS222 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> op_5221 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_5223 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_4224 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS222_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression_5=new RewriteRuleSubtreeStream(adaptor,"rule expression_5");
	    RewriteRuleSubtreeStream stream_op_5=new RewriteRuleSubtreeStream(adaptor,"rule op_5");
		try { DebugEnterRule(GrammarFileName, "expression_5");
		DebugLocation(313, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:314:2: ( op_5 WS expression_5 -> ^( T_OP_UNARY op_5 expression_5 ) | expression_4 )
			int alt75=2;
			try { DebugEnterDecision(75, decisionCanBacktrack[75]);
			int LA75_0 = input.LA(1);

			if ((LA75_0==NOT))
			{
				alt75 = 1;
			}
			else if (((LA75_0>=CASE && LA75_0<=CAST)||LA75_0==CONVERT||LA75_0==EXISTS||LA75_0==NUMBER||LA75_0==SIMPLE_FILE||(LA75_0>=STRING && LA75_0<=SYSTEMVAR)||LA75_0==TOKEN||LA75_0==VARIABLE||LA75_0==151))
			{
				alt75 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 75, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(75); }
			switch (alt75)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:314:4: op_5 WS expression_5
				{
				DebugLocation(314, 4);
				PushFollow(Follow._op_5_in_expression_51847);
				op_5221=op_5();
				PopFollow();

				stream_op_5.Add(op_5221.Tree);
				DebugLocation(314, 9);
				WS222=(IToken)Match(input,WS,Follow._WS_in_expression_51849);  
				stream_WS.Add(WS222);

				DebugLocation(314, 12);
				PushFollow(Follow._expression_5_in_expression_51851);
				expression_5223=expression_5();
				PopFollow();

				stream_expression_5.Add(expression_5223.Tree);


				{
				// AST REWRITE
				// elements: op_5, expression_5
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 314:25: -> ^( T_OP_UNARY op_5 expression_5 )
				{
					DebugLocation(314, 28);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:314:28: ^( T_OP_UNARY op_5 expression_5 )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(314, 30);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_UNARY, "T_OP_UNARY"), root_1);

					DebugLocation(314, 41);
					adaptor.AddChild(root_1, stream_op_5.NextTree());
					DebugLocation(314, 46);
					adaptor.AddChild(root_1, stream_expression_5.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:315:4: expression_4
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(315, 4);
				PushFollow(Follow._expression_4_in_expression_51866);
				expression_4224=expression_4();
				PopFollow();

				adaptor.AddChild(root_0, expression_4224.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_5", 40);
			LeaveRule("expression_5", 40);
			LeaveRule_expression_5();
	    }
	 	DebugLocation(316, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_5"); }
		return retval;

	}
	// $ANTLR end "expression_5"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_5() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_5() {}

	// $ANTLR start "op_5"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:318:1: op_5 : NOT -> T_NOT ;
	[GrammarRule("op_5")]
	private AstParserRuleReturnScope<object, IToken> op_5()
	{
		EnterRule_op_5();
		EnterRule("op_5", 41);
		TraceIn("op_5", 41);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken NOT225 = default(IToken);

	    object NOT225_tree = default(object);
	    RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");

		try { DebugEnterRule(GrammarFileName, "op_5");
		DebugLocation(318, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:318:7: ( NOT -> T_NOT )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:318:9: NOT
			{
			DebugLocation(318, 9);
			NOT225=(IToken)Match(input,NOT,Follow._NOT_in_op_51877);  
			stream_NOT.Add(NOT225);



			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 318:13: -> T_NOT
			{
				DebugLocation(318, 16);
				adaptor.AddChild(root_0, (object)adaptor.Create(T_NOT, "T_NOT"));

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_5", 41);
			LeaveRule("op_5", 41);
			LeaveRule_op_5();
	    }
	 	DebugLocation(319, 1);
		} finally { DebugExitRule(GrammarFileName, "op_5"); }
		return retval;

	}
	// $ANTLR end "op_5"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_4() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_4() {}

	// $ANTLR start "expression_4"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:321:1: expression_4 : (a= expression_3 -> $a) ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )* ;
	[GrammarRule("expression_4")]
	private AstParserRuleReturnScope<object, IToken> expression_4()
	{
		EnterRule_expression_4();
		EnterRule("expression_4", 42);
		TraceIn("expression_4", 42);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS226 = default(IToken);
	    IToken WS228 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_4227 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS226_tree = default(object);
	    object WS228_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression_3=new RewriteRuleSubtreeStream(adaptor,"rule expression_3");
	    RewriteRuleSubtreeStream stream_op_4=new RewriteRuleSubtreeStream(adaptor,"rule op_4");
		try { DebugEnterRule(GrammarFileName, "expression_4");
		DebugLocation(321, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:322:2: ( (a= expression_3 -> $a) ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:322:4: (a= expression_3 -> $a) ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )*
			{
			DebugLocation(322, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:322:4: (a= expression_3 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:322:5: a= expression_3
			{
			DebugLocation(322, 6);
			PushFollow(Follow._expression_3_in_expression_41896);
			a=expression_3();
			PopFollow();

			stream_expression_3.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 322:19: -> $a
			{
				DebugLocation(322, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(322, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:322:25: ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )*
			try { DebugEnterSubRule(78);
			while (true)
			{
				int alt78=2;
				try { DebugEnterDecision(78, decisionCanBacktrack[78]);
				int LA78_0 = input.LA(1);

				if ((LA78_0==WS))
				{
					switch (input.LA(2))
					{
					case 163:
						{
						int LA78_4 = input.LA(3);

						if ((LA78_4==WS))
						{
							int LA78_13 = input.LA(4);

							if (((LA78_13>=CASE && LA78_13<=CAST)||LA78_13==CONVERT||LA78_13==EXISTS||LA78_13==NUMBER||LA78_13==SIMPLE_FILE||(LA78_13>=STRING && LA78_13<=SYSTEMVAR)||LA78_13==TOKEN||LA78_13==VARIABLE||LA78_13==151))
							{
								alt78 = 1;
							}


						}
						else if (((LA78_4>=CASE && LA78_4<=CAST)||LA78_4==CONVERT||LA78_4==EXISTS||LA78_4==NUMBER||LA78_4==SIMPLE_FILE||(LA78_4>=STRING && LA78_4<=SYSTEMVAR)||LA78_4==TOKEN||LA78_4==VARIABLE||LA78_4==151))
						{
							alt78 = 1;
						}


						}
						break;
					case 165:
						{
						int LA78_5 = input.LA(3);

						if ((LA78_5==WS))
						{
							int LA78_13 = input.LA(4);

							if (((LA78_13>=CASE && LA78_13<=CAST)||LA78_13==CONVERT||LA78_13==EXISTS||LA78_13==NUMBER||LA78_13==SIMPLE_FILE||(LA78_13>=STRING && LA78_13<=SYSTEMVAR)||LA78_13==TOKEN||LA78_13==VARIABLE||LA78_13==151))
							{
								alt78 = 1;
							}


						}
						else if (((LA78_5>=CASE && LA78_5<=CAST)||LA78_5==CONVERT||LA78_5==EXISTS||LA78_5==NUMBER||LA78_5==SIMPLE_FILE||(LA78_5>=STRING && LA78_5<=SYSTEMVAR)||LA78_5==TOKEN||LA78_5==VARIABLE||LA78_5==151))
						{
							alt78 = 1;
						}


						}
						break;
					case 161:
						{
						int LA78_6 = input.LA(3);

						if ((LA78_6==WS))
						{
							int LA78_13 = input.LA(4);

							if (((LA78_13>=CASE && LA78_13<=CAST)||LA78_13==CONVERT||LA78_13==EXISTS||LA78_13==NUMBER||LA78_13==SIMPLE_FILE||(LA78_13>=STRING && LA78_13<=SYSTEMVAR)||LA78_13==TOKEN||LA78_13==VARIABLE||LA78_13==151))
							{
								alt78 = 1;
							}


						}
						else if (((LA78_6>=CASE && LA78_6<=CAST)||LA78_6==CONVERT||LA78_6==EXISTS||LA78_6==NUMBER||LA78_6==SIMPLE_FILE||(LA78_6>=STRING && LA78_6<=SYSTEMVAR)||LA78_6==TOKEN||LA78_6==VARIABLE||LA78_6==151))
						{
							alt78 = 1;
						}


						}
						break;
					case 162:
						{
						int LA78_7 = input.LA(3);

						if ((LA78_7==WS))
						{
							int LA78_13 = input.LA(4);

							if (((LA78_13>=CASE && LA78_13<=CAST)||LA78_13==CONVERT||LA78_13==EXISTS||LA78_13==NUMBER||LA78_13==SIMPLE_FILE||(LA78_13>=STRING && LA78_13<=SYSTEMVAR)||LA78_13==TOKEN||LA78_13==VARIABLE||LA78_13==151))
							{
								alt78 = 1;
							}


						}
						else if (((LA78_7>=CASE && LA78_7<=CAST)||LA78_7==CONVERT||LA78_7==EXISTS||LA78_7==NUMBER||LA78_7==SIMPLE_FILE||(LA78_7>=STRING && LA78_7<=SYSTEMVAR)||LA78_7==TOKEN||LA78_7==VARIABLE||LA78_7==151))
						{
							alt78 = 1;
						}


						}
						break;
					case 147:
						{
						int LA78_8 = input.LA(3);

						if ((LA78_8==WS))
						{
							int LA78_13 = input.LA(4);

							if (((LA78_13>=CASE && LA78_13<=CAST)||LA78_13==CONVERT||LA78_13==EXISTS||LA78_13==NUMBER||LA78_13==SIMPLE_FILE||(LA78_13>=STRING && LA78_13<=SYSTEMVAR)||LA78_13==TOKEN||LA78_13==VARIABLE||LA78_13==151))
							{
								alt78 = 1;
							}


						}
						else if (((LA78_8>=CASE && LA78_8<=CAST)||LA78_8==CONVERT||LA78_8==EXISTS||LA78_8==NUMBER||LA78_8==SIMPLE_FILE||(LA78_8>=STRING && LA78_8<=SYSTEMVAR)||LA78_8==TOKEN||LA78_8==VARIABLE||LA78_8==151))
						{
							alt78 = 1;
						}


						}
						break;
					case 148:
						{
						int LA78_9 = input.LA(3);

						if ((LA78_9==WS))
						{
							int LA78_13 = input.LA(4);

							if (((LA78_13>=CASE && LA78_13<=CAST)||LA78_13==CONVERT||LA78_13==EXISTS||LA78_13==NUMBER||LA78_13==SIMPLE_FILE||(LA78_13>=STRING && LA78_13<=SYSTEMVAR)||LA78_13==TOKEN||LA78_13==VARIABLE||LA78_13==151))
							{
								alt78 = 1;
							}


						}
						else if (((LA78_9>=CASE && LA78_9<=CAST)||LA78_9==CONVERT||LA78_9==EXISTS||LA78_9==NUMBER||LA78_9==SIMPLE_FILE||(LA78_9>=STRING && LA78_9<=SYSTEMVAR)||LA78_9==TOKEN||LA78_9==VARIABLE||LA78_9==151))
						{
							alt78 = 1;
						}


						}
						break;
					case 146:
						{
						int LA78_10 = input.LA(3);

						if ((LA78_10==WS))
						{
							int LA78_13 = input.LA(4);

							if (((LA78_13>=CASE && LA78_13<=CAST)||LA78_13==CONVERT||LA78_13==EXISTS||LA78_13==NUMBER||LA78_13==SIMPLE_FILE||(LA78_13>=STRING && LA78_13<=SYSTEMVAR)||LA78_13==TOKEN||LA78_13==VARIABLE||LA78_13==151))
							{
								alt78 = 1;
							}


						}
						else if (((LA78_10>=CASE && LA78_10<=CAST)||LA78_10==CONVERT||LA78_10==EXISTS||LA78_10==NUMBER||LA78_10==SIMPLE_FILE||(LA78_10>=STRING && LA78_10<=SYSTEMVAR)||LA78_10==TOKEN||LA78_10==VARIABLE||LA78_10==151))
						{
							alt78 = 1;
						}


						}
						break;
					case 164:
						{
						int LA78_11 = input.LA(3);

						if ((LA78_11==WS))
						{
							int LA78_13 = input.LA(4);

							if (((LA78_13>=CASE && LA78_13<=CAST)||LA78_13==CONVERT||LA78_13==EXISTS||LA78_13==NUMBER||LA78_13==SIMPLE_FILE||(LA78_13>=STRING && LA78_13<=SYSTEMVAR)||LA78_13==TOKEN||LA78_13==VARIABLE||LA78_13==151))
							{
								alt78 = 1;
							}


						}
						else if (((LA78_11>=CASE && LA78_11<=CAST)||LA78_11==CONVERT||LA78_11==EXISTS||LA78_11==NUMBER||LA78_11==SIMPLE_FILE||(LA78_11>=STRING && LA78_11<=SYSTEMVAR)||LA78_11==TOKEN||LA78_11==VARIABLE||LA78_11==151))
						{
							alt78 = 1;
						}


						}
						break;
					case 160:
						{
						int LA78_12 = input.LA(3);

						if ((LA78_12==WS))
						{
							int LA78_13 = input.LA(4);

							if (((LA78_13>=CASE && LA78_13<=CAST)||LA78_13==CONVERT||LA78_13==EXISTS||LA78_13==NUMBER||LA78_13==SIMPLE_FILE||(LA78_13>=STRING && LA78_13<=SYSTEMVAR)||LA78_13==TOKEN||LA78_13==VARIABLE||LA78_13==151))
							{
								alt78 = 1;
							}


						}
						else if (((LA78_12>=CASE && LA78_12<=CAST)||LA78_12==CONVERT||LA78_12==EXISTS||LA78_12==NUMBER||LA78_12==SIMPLE_FILE||(LA78_12>=STRING && LA78_12<=SYSTEMVAR)||LA78_12==TOKEN||LA78_12==VARIABLE||LA78_12==151))
						{
							alt78 = 1;
						}


						}
						break;
					}

				}
				else if (((LA78_0>=146 && LA78_0<=148)||(LA78_0>=160 && LA78_0<=165)))
				{
					alt78 = 1;
				}


				} finally { DebugExitDecision(78); }
				switch ( alt78 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:322:26: ( WS )? op_4 ( WS )? b= expression_3
					{
					DebugLocation(322, 26);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:322:26: ( WS )?
					int alt76=2;
					try { DebugEnterSubRule(76);
					try { DebugEnterDecision(76, decisionCanBacktrack[76]);
					int LA76_0 = input.LA(1);

					if ((LA76_0==WS))
					{
						alt76 = 1;
					}
					} finally { DebugExitDecision(76); }
					switch (alt76)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:322:26: WS
						{
						DebugLocation(322, 26);
						WS226=(IToken)Match(input,WS,Follow._WS_in_expression_41903);  
						stream_WS.Add(WS226);


						}
						break;

					}
					} finally { DebugExitSubRule(76); }

					DebugLocation(322, 30);
					PushFollow(Follow._op_4_in_expression_41906);
					op_4227=op_4();
					PopFollow();

					stream_op_4.Add(op_4227.Tree);
					DebugLocation(322, 35);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:322:35: ( WS )?
					int alt77=2;
					try { DebugEnterSubRule(77);
					try { DebugEnterDecision(77, decisionCanBacktrack[77]);
					int LA77_0 = input.LA(1);

					if ((LA77_0==WS))
					{
						alt77 = 1;
					}
					} finally { DebugExitDecision(77); }
					switch (alt77)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:322:35: WS
						{
						DebugLocation(322, 35);
						WS228=(IToken)Match(input,WS,Follow._WS_in_expression_41908);  
						stream_WS.Add(WS228);


						}
						break;

					}
					} finally { DebugExitSubRule(77); }

					DebugLocation(322, 40);
					PushFollow(Follow._expression_3_in_expression_41913);
					b=expression_3();
					PopFollow();

					stream_expression_3.Add(b.Tree);


					{
					// AST REWRITE
					// elements: op_4, expression_4, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 322:54: -> ^( T_OP_BINARY op_4 $expression_4 $b)
					{
						DebugLocation(322, 57);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:322:57: ^( T_OP_BINARY op_4 $expression_4 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(322, 59);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(322, 71);
						adaptor.AddChild(root_1, stream_op_4.NextTree());
						DebugLocation(322, 77);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(322, 91);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop78;
				}
			}

			loop78:
				;

			} finally { DebugExitSubRule(78); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_4", 42);
			LeaveRule("expression_4", 42);
			LeaveRule_expression_4();
	    }
	 	DebugLocation(323, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_4"); }
		return retval;

	}
	// $ANTLR end "expression_4"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_4() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_4() {}

	// $ANTLR start "op_4"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:325:1: op_4 : ( '=' -> T_EQUAL | '>=' -> T_NOTLESS | '<=' -> T_NOTGREATER | '<>' -> T_NOTEQUAL | '!=' -> T_NOTEQUAL | '!>' -> T_NOTGREATER | '!<' -> T_NOTLESS | '>' -> T_GREATER | '<' -> T_LESS );
	[GrammarRule("op_4")]
	private AstParserRuleReturnScope<object, IToken> op_4()
	{
		EnterRule_op_4();
		EnterRule("op_4", 43);
		TraceIn("op_4", 43);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal229 = default(IToken);
	    IToken string_literal230 = default(IToken);
	    IToken string_literal231 = default(IToken);
	    IToken string_literal232 = default(IToken);
	    IToken string_literal233 = default(IToken);
	    IToken string_literal234 = default(IToken);
	    IToken string_literal235 = default(IToken);
	    IToken char_literal236 = default(IToken);
	    IToken char_literal237 = default(IToken);

	    object char_literal229_tree = default(object);
	    object string_literal230_tree = default(object);
	    object string_literal231_tree = default(object);
	    object string_literal232_tree = default(object);
	    object string_literal233_tree = default(object);
	    object string_literal234_tree = default(object);
	    object string_literal235_tree = default(object);
	    object char_literal236_tree = default(object);
	    object char_literal237_tree = default(object);
	    RewriteRuleITokenStream stream_161=new RewriteRuleITokenStream(adaptor,"token 161");
	    RewriteRuleITokenStream stream_162=new RewriteRuleITokenStream(adaptor,"token 162");
	    RewriteRuleITokenStream stream_163=new RewriteRuleITokenStream(adaptor,"token 163");
	    RewriteRuleITokenStream stream_164=new RewriteRuleITokenStream(adaptor,"token 164");
	    RewriteRuleITokenStream stream_146=new RewriteRuleITokenStream(adaptor,"token 146");
	    RewriteRuleITokenStream stream_147=new RewriteRuleITokenStream(adaptor,"token 147");
	    RewriteRuleITokenStream stream_148=new RewriteRuleITokenStream(adaptor,"token 148");
	    RewriteRuleITokenStream stream_160=new RewriteRuleITokenStream(adaptor,"token 160");
	    RewriteRuleITokenStream stream_165=new RewriteRuleITokenStream(adaptor,"token 165");

		try { DebugEnterRule(GrammarFileName, "op_4");
		DebugLocation(325, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:325:6: ( '=' -> T_EQUAL | '>=' -> T_NOTLESS | '<=' -> T_NOTGREATER | '<>' -> T_NOTEQUAL | '!=' -> T_NOTEQUAL | '!>' -> T_NOTGREATER | '!<' -> T_NOTLESS | '>' -> T_GREATER | '<' -> T_LESS )
			int alt79=9;
			try { DebugEnterDecision(79, decisionCanBacktrack[79]);
			switch (input.LA(1))
			{
			case 163:
				{
				alt79 = 1;
				}
				break;
			case 165:
				{
				alt79 = 2;
				}
				break;
			case 161:
				{
				alt79 = 3;
				}
				break;
			case 162:
				{
				alt79 = 4;
				}
				break;
			case 147:
				{
				alt79 = 5;
				}
				break;
			case 148:
				{
				alt79 = 6;
				}
				break;
			case 146:
				{
				alt79 = 7;
				}
				break;
			case 164:
				{
				alt79 = 8;
				}
				break;
			case 160:
				{
				alt79 = 9;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 79, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(79); }
			switch (alt79)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:325:8: '='
				{
				DebugLocation(325, 8);
				char_literal229=(IToken)Match(input,163,Follow._163_in_op_41939);  
				stream_163.Add(char_literal229);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 325:12: -> T_EQUAL
				{
					DebugLocation(325, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_EQUAL, "T_EQUAL"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:326:4: '>='
				{
				DebugLocation(326, 4);
				string_literal230=(IToken)Match(input,165,Follow._165_in_op_41948);  
				stream_165.Add(string_literal230);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 326:9: -> T_NOTLESS
				{
					DebugLocation(326, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTLESS, "T_NOTLESS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:327:4: '<='
				{
				DebugLocation(327, 4);
				string_literal231=(IToken)Match(input,161,Follow._161_in_op_41958);  
				stream_161.Add(string_literal231);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 327:9: -> T_NOTGREATER
				{
					DebugLocation(327, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTGREATER, "T_NOTGREATER"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:328:4: '<>'
				{
				DebugLocation(328, 4);
				string_literal232=(IToken)Match(input,162,Follow._162_in_op_41968);  
				stream_162.Add(string_literal232);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 328:9: -> T_NOTEQUAL
				{
					DebugLocation(328, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTEQUAL, "T_NOTEQUAL"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:329:4: '!='
				{
				DebugLocation(329, 4);
				string_literal233=(IToken)Match(input,147,Follow._147_in_op_41977);  
				stream_147.Add(string_literal233);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 329:9: -> T_NOTEQUAL
				{
					DebugLocation(329, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTEQUAL, "T_NOTEQUAL"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:330:4: '!>'
				{
				DebugLocation(330, 4);
				string_literal234=(IToken)Match(input,148,Follow._148_in_op_41986);  
				stream_148.Add(string_literal234);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 330:9: -> T_NOTGREATER
				{
					DebugLocation(330, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTGREATER, "T_NOTGREATER"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:331:4: '!<'
				{
				DebugLocation(331, 4);
				string_literal235=(IToken)Match(input,146,Follow._146_in_op_41995);  
				stream_146.Add(string_literal235);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 331:9: -> T_NOTLESS
				{
					DebugLocation(331, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTLESS, "T_NOTLESS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:332:4: '>'
				{
				DebugLocation(332, 4);
				char_literal236=(IToken)Match(input,164,Follow._164_in_op_42004);  
				stream_164.Add(char_literal236);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 332:8: -> T_GREATER
				{
					DebugLocation(332, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_GREATER, "T_GREATER"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:333:4: '<'
				{
				DebugLocation(333, 4);
				char_literal237=(IToken)Match(input,160,Follow._160_in_op_42014);  
				stream_160.Add(char_literal237);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 333:8: -> T_LESS
				{
					DebugLocation(333, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_LESS, "T_LESS"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_4", 43);
			LeaveRule("op_4", 43);
			LeaveRule_op_4();
	    }
	 	DebugLocation(334, 1);
		} finally { DebugExitRule(GrammarFileName, "op_4"); }
		return retval;

	}
	// $ANTLR end "op_4"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_3() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_3() {}

	// $ANTLR start "expression_3"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:336:1: expression_3 : (a= expression_2 -> $a) ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )* ;
	[GrammarRule("expression_3")]
	private AstParserRuleReturnScope<object, IToken> expression_3()
	{
		EnterRule_expression_3();
		EnterRule("expression_3", 44);
		TraceIn("expression_3", 44);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS238 = default(IToken);
	    IToken WS240 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_3239 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS238_tree = default(object);
	    object WS240_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_op_3=new RewriteRuleSubtreeStream(adaptor,"rule op_3");
	    RewriteRuleSubtreeStream stream_expression_2=new RewriteRuleSubtreeStream(adaptor,"rule expression_2");
		try { DebugEnterRule(GrammarFileName, "expression_3");
		DebugLocation(336, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:337:2: ( (a= expression_2 -> $a) ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:337:4: (a= expression_2 -> $a) ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )*
			{
			DebugLocation(337, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:337:4: (a= expression_2 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:337:5: a= expression_2
			{
			DebugLocation(337, 6);
			PushFollow(Follow._expression_2_in_expression_32033);
			a=expression_2();
			PopFollow();

			stream_expression_2.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 337:19: -> $a
			{
				DebugLocation(337, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(337, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:337:25: ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )*
			try { DebugEnterSubRule(82);
			while (true)
			{
				int alt82=2;
				try { DebugEnterDecision(82, decisionCanBacktrack[82]);
				int LA82_0 = input.LA(1);

				if ((LA82_0==WS))
				{
					int LA82_1 = input.LA(2);

					if ((LA82_1==150||LA82_1==154||LA82_1==156||(LA82_1>=168 && LA82_1<=169)))
					{
						alt82 = 1;
					}


				}
				else if ((LA82_0==150||LA82_0==154||LA82_0==156||(LA82_0>=168 && LA82_0<=169)))
				{
					alt82 = 1;
				}


				} finally { DebugExitDecision(82); }
				switch ( alt82 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:337:26: ( WS )? op_3 ( WS )? b= expression_2
					{
					DebugLocation(337, 26);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:337:26: ( WS )?
					int alt80=2;
					try { DebugEnterSubRule(80);
					try { DebugEnterDecision(80, decisionCanBacktrack[80]);
					int LA80_0 = input.LA(1);

					if ((LA80_0==WS))
					{
						alt80 = 1;
					}
					} finally { DebugExitDecision(80); }
					switch (alt80)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:337:26: WS
						{
						DebugLocation(337, 26);
						WS238=(IToken)Match(input,WS,Follow._WS_in_expression_32040);  
						stream_WS.Add(WS238);


						}
						break;

					}
					} finally { DebugExitSubRule(80); }

					DebugLocation(337, 30);
					PushFollow(Follow._op_3_in_expression_32043);
					op_3239=op_3();
					PopFollow();

					stream_op_3.Add(op_3239.Tree);
					DebugLocation(337, 35);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:337:35: ( WS )?
					int alt81=2;
					try { DebugEnterSubRule(81);
					try { DebugEnterDecision(81, decisionCanBacktrack[81]);
					int LA81_0 = input.LA(1);

					if ((LA81_0==WS))
					{
						alt81 = 1;
					}
					} finally { DebugExitDecision(81); }
					switch (alt81)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:337:35: WS
						{
						DebugLocation(337, 35);
						WS240=(IToken)Match(input,WS,Follow._WS_in_expression_32045);  
						stream_WS.Add(WS240);


						}
						break;

					}
					} finally { DebugExitSubRule(81); }

					DebugLocation(337, 40);
					PushFollow(Follow._expression_2_in_expression_32050);
					b=expression_2();
					PopFollow();

					stream_expression_2.Add(b.Tree);


					{
					// AST REWRITE
					// elements: op_3, b, expression_3
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 337:54: -> ^( T_OP_BINARY op_3 $expression_3 $b)
					{
						DebugLocation(337, 57);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:337:57: ^( T_OP_BINARY op_3 $expression_3 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(337, 59);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(337, 71);
						adaptor.AddChild(root_1, stream_op_3.NextTree());
						DebugLocation(337, 77);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(337, 91);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop82;
				}
			}

			loop82:
				;

			} finally { DebugExitSubRule(82); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_3", 44);
			LeaveRule("expression_3", 44);
			LeaveRule_expression_3();
	    }
	 	DebugLocation(338, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_3"); }
		return retval;

	}
	// $ANTLR end "expression_3"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_3() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_3() {}

	// $ANTLR start "op_3"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:340:1: op_3 : ( '+' -> T_PLUS | '-' -> T_MINUS | '&' -> T_BITWISE_AND | '|' -> T_BITWISE_OR | '^' -> T_BITWISE_XOR );
	[GrammarRule("op_3")]
	private AstParserRuleReturnScope<object, IToken> op_3()
	{
		EnterRule_op_3();
		EnterRule("op_3", 45);
		TraceIn("op_3", 45);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal241 = default(IToken);
	    IToken char_literal242 = default(IToken);
	    IToken char_literal243 = default(IToken);
	    IToken char_literal244 = default(IToken);
	    IToken char_literal245 = default(IToken);

	    object char_literal241_tree = default(object);
	    object char_literal242_tree = default(object);
	    object char_literal243_tree = default(object);
	    object char_literal244_tree = default(object);
	    object char_literal245_tree = default(object);
	    RewriteRuleITokenStream stream_150=new RewriteRuleITokenStream(adaptor,"token 150");
	    RewriteRuleITokenStream stream_169=new RewriteRuleITokenStream(adaptor,"token 169");
	    RewriteRuleITokenStream stream_156=new RewriteRuleITokenStream(adaptor,"token 156");
	    RewriteRuleITokenStream stream_168=new RewriteRuleITokenStream(adaptor,"token 168");
	    RewriteRuleITokenStream stream_154=new RewriteRuleITokenStream(adaptor,"token 154");

		try { DebugEnterRule(GrammarFileName, "op_3");
		DebugLocation(340, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:340:6: ( '+' -> T_PLUS | '-' -> T_MINUS | '&' -> T_BITWISE_AND | '|' -> T_BITWISE_OR | '^' -> T_BITWISE_XOR )
			int alt83=5;
			try { DebugEnterDecision(83, decisionCanBacktrack[83]);
			switch (input.LA(1))
			{
			case 154:
				{
				alt83 = 1;
				}
				break;
			case 156:
				{
				alt83 = 2;
				}
				break;
			case 150:
				{
				alt83 = 3;
				}
				break;
			case 169:
				{
				alt83 = 4;
				}
				break;
			case 168:
				{
				alt83 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 83, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(83); }
			switch (alt83)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:340:8: '+'
				{
				DebugLocation(340, 8);
				char_literal241=(IToken)Match(input,154,Follow._154_in_op_32076);  
				stream_154.Add(char_literal241);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 340:12: -> T_PLUS
				{
					DebugLocation(340, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_PLUS, "T_PLUS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:341:4: '-'
				{
				DebugLocation(341, 4);
				char_literal242=(IToken)Match(input,156,Follow._156_in_op_32085);  
				stream_156.Add(char_literal242);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 341:8: -> T_MINUS
				{
					DebugLocation(341, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MINUS, "T_MINUS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:342:4: '&'
				{
				DebugLocation(342, 4);
				char_literal243=(IToken)Match(input,150,Follow._150_in_op_32094);  
				stream_150.Add(char_literal243);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 342:8: -> T_BITWISE_AND
				{
					DebugLocation(342, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_AND, "T_BITWISE_AND"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:343:4: '|'
				{
				DebugLocation(343, 4);
				char_literal244=(IToken)Match(input,169,Follow._169_in_op_32103);  
				stream_169.Add(char_literal244);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 343:8: -> T_BITWISE_OR
				{
					DebugLocation(343, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_OR, "T_BITWISE_OR"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:344:4: '^'
				{
				DebugLocation(344, 4);
				char_literal245=(IToken)Match(input,168,Follow._168_in_op_32112);  
				stream_168.Add(char_literal245);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 344:8: -> T_BITWISE_XOR
				{
					DebugLocation(344, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_XOR, "T_BITWISE_XOR"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_3", 45);
			LeaveRule("op_3", 45);
			LeaveRule_op_3();
	    }
	 	DebugLocation(345, 1);
		} finally { DebugExitRule(GrammarFileName, "op_3"); }
		return retval;

	}
	// $ANTLR end "op_3"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_2() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_2() {}

	// $ANTLR start "expression_2"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:353:1: expression_2 : (a= expression_1 -> $a) ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )* ;
	[GrammarRule("expression_2")]
	private AstParserRuleReturnScope<object, IToken> expression_2()
	{
		EnterRule_expression_2();
		EnterRule("expression_2", 46);
		TraceIn("expression_2", 46);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS246 = default(IToken);
	    IToken WS248 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_2247 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS246_tree = default(object);
	    object WS248_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_op_2=new RewriteRuleSubtreeStream(adaptor,"rule op_2");
	    RewriteRuleSubtreeStream stream_expression_1=new RewriteRuleSubtreeStream(adaptor,"rule expression_1");
		try { DebugEnterRule(GrammarFileName, "expression_2");
		DebugLocation(353, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:354:2: ( (a= expression_1 -> $a) ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:354:4: (a= expression_1 -> $a) ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )*
			{
			DebugLocation(354, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:354:4: (a= expression_1 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:354:5: a= expression_1
			{
			DebugLocation(354, 6);
			PushFollow(Follow._expression_1_in_expression_22134);
			a=expression_1();
			PopFollow();

			stream_expression_1.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 354:19: -> $a
			{
				DebugLocation(354, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(354, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:354:25: ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )*
			try { DebugEnterSubRule(86);
			while (true)
			{
				int alt86=2;
				try { DebugEnterDecision(86, decisionCanBacktrack[86]);
				int LA86_0 = input.LA(1);

				if ((LA86_0==WS))
				{
					int LA86_1 = input.LA(2);

					if ((LA86_1==153))
					{
						int LA86_4 = input.LA(3);

						if ((LA86_4==WS))
						{
							int LA86_5 = input.LA(4);

							if (((LA86_5>=CASE && LA86_5<=CAST)||LA86_5==CONVERT||LA86_5==EXISTS||LA86_5==NUMBER||LA86_5==SIMPLE_FILE||(LA86_5>=STRING && LA86_5<=SYSTEMVAR)||LA86_5==TOKEN||LA86_5==VARIABLE||LA86_5==151))
							{
								alt86 = 1;
							}


						}
						else if (((LA86_4>=CASE && LA86_4<=CAST)||LA86_4==CONVERT||LA86_4==EXISTS||LA86_4==NUMBER||LA86_4==SIMPLE_FILE||(LA86_4>=STRING && LA86_4<=SYSTEMVAR)||LA86_4==TOKEN||LA86_4==VARIABLE||LA86_4==151))
						{
							alt86 = 1;
						}


					}
					else if ((LA86_1==149||LA86_1==158))
					{
						alt86 = 1;
					}


				}
				else if ((LA86_0==149||LA86_0==153||LA86_0==158))
				{
					alt86 = 1;
				}


				} finally { DebugExitDecision(86); }
				switch ( alt86 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:354:26: ( WS )? op_2 ( WS )? b= expression_1
					{
					DebugLocation(354, 26);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:354:26: ( WS )?
					int alt84=2;
					try { DebugEnterSubRule(84);
					try { DebugEnterDecision(84, decisionCanBacktrack[84]);
					int LA84_0 = input.LA(1);

					if ((LA84_0==WS))
					{
						alt84 = 1;
					}
					} finally { DebugExitDecision(84); }
					switch (alt84)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:354:26: WS
						{
						DebugLocation(354, 26);
						WS246=(IToken)Match(input,WS,Follow._WS_in_expression_22141);  
						stream_WS.Add(WS246);


						}
						break;

					}
					} finally { DebugExitSubRule(84); }

					DebugLocation(354, 30);
					PushFollow(Follow._op_2_in_expression_22144);
					op_2247=op_2();
					PopFollow();

					stream_op_2.Add(op_2247.Tree);
					DebugLocation(354, 35);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:354:35: ( WS )?
					int alt85=2;
					try { DebugEnterSubRule(85);
					try { DebugEnterDecision(85, decisionCanBacktrack[85]);
					int LA85_0 = input.LA(1);

					if ((LA85_0==WS))
					{
						alt85 = 1;
					}
					} finally { DebugExitDecision(85); }
					switch (alt85)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:354:35: WS
						{
						DebugLocation(354, 35);
						WS248=(IToken)Match(input,WS,Follow._WS_in_expression_22146);  
						stream_WS.Add(WS248);


						}
						break;

					}
					} finally { DebugExitSubRule(85); }

					DebugLocation(354, 40);
					PushFollow(Follow._expression_1_in_expression_22151);
					b=expression_1();
					PopFollow();

					stream_expression_1.Add(b.Tree);


					{
					// AST REWRITE
					// elements: op_2, b, expression_2
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 354:54: -> ^( T_OP_BINARY op_2 $expression_2 $b)
					{
						DebugLocation(354, 57);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:354:57: ^( T_OP_BINARY op_2 $expression_2 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(354, 59);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(354, 71);
						adaptor.AddChild(root_1, stream_op_2.NextTree());
						DebugLocation(354, 77);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(354, 91);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop86;
				}
			}

			loop86:
				;

			} finally { DebugExitSubRule(86); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_2", 46);
			LeaveRule("expression_2", 46);
			LeaveRule_expression_2();
	    }
	 	DebugLocation(355, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_2"); }
		return retval;

	}
	// $ANTLR end "expression_2"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_2() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_2() {}

	// $ANTLR start "op_2"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:357:1: op_2 : ( '*' -> T_PRODUCT | '/' -> T_DIVIDE | '%' -> T_MODULO );
	[GrammarRule("op_2")]
	private AstParserRuleReturnScope<object, IToken> op_2()
	{
		EnterRule_op_2();
		EnterRule("op_2", 47);
		TraceIn("op_2", 47);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal249 = default(IToken);
	    IToken char_literal250 = default(IToken);
	    IToken char_literal251 = default(IToken);

	    object char_literal249_tree = default(object);
	    object char_literal250_tree = default(object);
	    object char_literal251_tree = default(object);
	    RewriteRuleITokenStream stream_153=new RewriteRuleITokenStream(adaptor,"token 153");
	    RewriteRuleITokenStream stream_149=new RewriteRuleITokenStream(adaptor,"token 149");
	    RewriteRuleITokenStream stream_158=new RewriteRuleITokenStream(adaptor,"token 158");

		try { DebugEnterRule(GrammarFileName, "op_2");
		DebugLocation(357, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:357:6: ( '*' -> T_PRODUCT | '/' -> T_DIVIDE | '%' -> T_MODULO )
			int alt87=3;
			try { DebugEnterDecision(87, decisionCanBacktrack[87]);
			switch (input.LA(1))
			{
			case 153:
				{
				alt87 = 1;
				}
				break;
			case 158:
				{
				alt87 = 2;
				}
				break;
			case 149:
				{
				alt87 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 87, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(87); }
			switch (alt87)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:357:8: '*'
				{
				DebugLocation(357, 8);
				char_literal249=(IToken)Match(input,153,Follow._153_in_op_22177);  
				stream_153.Add(char_literal249);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 357:12: -> T_PRODUCT
				{
					DebugLocation(357, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_PRODUCT, "T_PRODUCT"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:358:4: '/'
				{
				DebugLocation(358, 4);
				char_literal250=(IToken)Match(input,158,Follow._158_in_op_22186);  
				stream_158.Add(char_literal250);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 358:8: -> T_DIVIDE
				{
					DebugLocation(358, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_DIVIDE, "T_DIVIDE"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:359:4: '%'
				{
				DebugLocation(359, 4);
				char_literal251=(IToken)Match(input,149,Follow._149_in_op_22195);  
				stream_149.Add(char_literal251);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 359:8: -> T_MODULO
				{
					DebugLocation(359, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MODULO, "T_MODULO"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_2", 47);
			LeaveRule("op_2", 47);
			LeaveRule_op_2();
	    }
	 	DebugLocation(360, 1);
		} finally { DebugExitRule(GrammarFileName, "op_2"); }
		return retval;

	}
	// $ANTLR end "op_2"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_1() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_1() {}

	// $ANTLR start "expression_1"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:362:1: expression_1 : ( '(' ( WS )? op_1 ( WS )? expression_1 ( WS )? ')' -> ^( T_OP_UNARY op_1 expression_1 ) | expression_atom );
	[GrammarRule("expression_1")]
	private AstParserRuleReturnScope<object, IToken> expression_1()
	{
		EnterRule_expression_1();
		EnterRule("expression_1", 48);
		TraceIn("expression_1", 48);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal252 = default(IToken);
	    IToken WS253 = default(IToken);
	    IToken WS255 = default(IToken);
	    IToken WS257 = default(IToken);
	    IToken char_literal258 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> op_1254 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_1256 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_atom259 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal252_tree = default(object);
	    object WS253_tree = default(object);
	    object WS255_tree = default(object);
	    object WS257_tree = default(object);
	    object char_literal258_tree = default(object);
	    RewriteRuleITokenStream stream_152=new RewriteRuleITokenStream(adaptor,"token 152");
	    RewriteRuleITokenStream stream_151=new RewriteRuleITokenStream(adaptor,"token 151");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression_1=new RewriteRuleSubtreeStream(adaptor,"rule expression_1");
	    RewriteRuleSubtreeStream stream_op_1=new RewriteRuleSubtreeStream(adaptor,"rule op_1");
		try { DebugEnterRule(GrammarFileName, "expression_1");
		DebugLocation(362, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:364:2: ( '(' ( WS )? op_1 ( WS )? expression_1 ( WS )? ')' -> ^( T_OP_UNARY op_1 expression_1 ) | expression_atom )
			int alt91=2;
			try { DebugEnterDecision(91, decisionCanBacktrack[91]);
			int LA91_0 = input.LA(1);

			if ((LA91_0==151))
			{
				switch (input.LA(2))
				{
				case WS:
					{
					int LA91_3 = input.LA(3);

					if ((LA91_3==154||LA91_3==156||LA91_3==170))
					{
						alt91 = 1;
					}
					else if ((LA91_3==SELECT))
					{
						alt91 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 91, 3, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 154:
				case 156:
				case 170:
					{
					alt91 = 1;
					}
					break;
				case CASE:
				case CAST:
				case CONVERT:
				case EXISTS:
				case NOT:
				case NUMBER:
				case SELECT:
				case SIMPLE_FILE:
				case STRING:
				case SYSTEMVAR:
				case TOKEN:
				case VARIABLE:
				case 151:
					{
					alt91 = 2;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 91, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else if (((LA91_0>=CASE && LA91_0<=CAST)||LA91_0==CONVERT||LA91_0==EXISTS||LA91_0==NUMBER||LA91_0==SIMPLE_FILE||(LA91_0>=STRING && LA91_0<=SYSTEMVAR)||LA91_0==TOKEN||LA91_0==VARIABLE))
			{
				alt91 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 91, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(91); }
			switch (alt91)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:364:4: '(' ( WS )? op_1 ( WS )? expression_1 ( WS )? ')'
				{
				DebugLocation(364, 4);
				char_literal252=(IToken)Match(input,151,Follow._151_in_expression_12213);  
				stream_151.Add(char_literal252);

				DebugLocation(364, 8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:364:8: ( WS )?
				int alt88=2;
				try { DebugEnterSubRule(88);
				try { DebugEnterDecision(88, decisionCanBacktrack[88]);
				int LA88_0 = input.LA(1);

				if ((LA88_0==WS))
				{
					alt88 = 1;
				}
				} finally { DebugExitDecision(88); }
				switch (alt88)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:364:8: WS
					{
					DebugLocation(364, 8);
					WS253=(IToken)Match(input,WS,Follow._WS_in_expression_12215);  
					stream_WS.Add(WS253);


					}
					break;

				}
				} finally { DebugExitSubRule(88); }

				DebugLocation(364, 12);
				PushFollow(Follow._op_1_in_expression_12218);
				op_1254=op_1();
				PopFollow();

				stream_op_1.Add(op_1254.Tree);
				DebugLocation(364, 17);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:364:17: ( WS )?
				int alt89=2;
				try { DebugEnterSubRule(89);
				try { DebugEnterDecision(89, decisionCanBacktrack[89]);
				int LA89_0 = input.LA(1);

				if ((LA89_0==WS))
				{
					alt89 = 1;
				}
				} finally { DebugExitDecision(89); }
				switch (alt89)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:364:17: WS
					{
					DebugLocation(364, 17);
					WS255=(IToken)Match(input,WS,Follow._WS_in_expression_12220);  
					stream_WS.Add(WS255);


					}
					break;

				}
				} finally { DebugExitSubRule(89); }

				DebugLocation(364, 21);
				PushFollow(Follow._expression_1_in_expression_12223);
				expression_1256=expression_1();
				PopFollow();

				stream_expression_1.Add(expression_1256.Tree);
				DebugLocation(364, 34);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:364:34: ( WS )?
				int alt90=2;
				try { DebugEnterSubRule(90);
				try { DebugEnterDecision(90, decisionCanBacktrack[90]);
				int LA90_0 = input.LA(1);

				if ((LA90_0==WS))
				{
					alt90 = 1;
				}
				} finally { DebugExitDecision(90); }
				switch (alt90)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:364:34: WS
					{
					DebugLocation(364, 34);
					WS257=(IToken)Match(input,WS,Follow._WS_in_expression_12225);  
					stream_WS.Add(WS257);


					}
					break;

				}
				} finally { DebugExitSubRule(90); }

				DebugLocation(364, 38);
				char_literal258=(IToken)Match(input,152,Follow._152_in_expression_12228);  
				stream_152.Add(char_literal258);



				{
				// AST REWRITE
				// elements: expression_1, op_1
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 364:42: -> ^( T_OP_UNARY op_1 expression_1 )
				{
					DebugLocation(364, 45);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:364:45: ^( T_OP_UNARY op_1 expression_1 )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(364, 47);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_UNARY, "T_OP_UNARY"), root_1);

					DebugLocation(364, 58);
					adaptor.AddChild(root_1, stream_op_1.NextTree());
					DebugLocation(364, 63);
					adaptor.AddChild(root_1, stream_expression_1.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:366:4: expression_atom
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(366, 4);
				PushFollow(Follow._expression_atom_in_expression_12245);
				expression_atom259=expression_atom();
				PopFollow();

				adaptor.AddChild(root_0, expression_atom259.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_1", 48);
			LeaveRule("expression_1", 48);
			LeaveRule_expression_1();
	    }
	 	DebugLocation(367, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_1"); }
		return retval;

	}
	// $ANTLR end "expression_1"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_1() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_1() {}

	// $ANTLR start "op_1"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:369:1: op_1 : ( '~' -> T_BITWISE_NOT | '+' -> T_PLUS | '-' -> T_MINUS );
	[GrammarRule("op_1")]
	private AstParserRuleReturnScope<object, IToken> op_1()
	{
		EnterRule_op_1();
		EnterRule("op_1", 49);
		TraceIn("op_1", 49);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal260 = default(IToken);
	    IToken char_literal261 = default(IToken);
	    IToken char_literal262 = default(IToken);

	    object char_literal260_tree = default(object);
	    object char_literal261_tree = default(object);
	    object char_literal262_tree = default(object);
	    RewriteRuleITokenStream stream_170=new RewriteRuleITokenStream(adaptor,"token 170");
	    RewriteRuleITokenStream stream_156=new RewriteRuleITokenStream(adaptor,"token 156");
	    RewriteRuleITokenStream stream_154=new RewriteRuleITokenStream(adaptor,"token 154");

		try { DebugEnterRule(GrammarFileName, "op_1");
		DebugLocation(369, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:369:6: ( '~' -> T_BITWISE_NOT | '+' -> T_PLUS | '-' -> T_MINUS )
			int alt92=3;
			try { DebugEnterDecision(92, decisionCanBacktrack[92]);
			switch (input.LA(1))
			{
			case 170:
				{
				alt92 = 1;
				}
				break;
			case 154:
				{
				alt92 = 2;
				}
				break;
			case 156:
				{
				alt92 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 92, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(92); }
			switch (alt92)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:369:8: '~'
				{
				DebugLocation(369, 8);
				char_literal260=(IToken)Match(input,170,Follow._170_in_op_12255);  
				stream_170.Add(char_literal260);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 369:12: -> T_BITWISE_NOT
				{
					DebugLocation(369, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_NOT, "T_BITWISE_NOT"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:370:5: '+'
				{
				DebugLocation(370, 5);
				char_literal261=(IToken)Match(input,154,Follow._154_in_op_12265);  
				stream_154.Add(char_literal261);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 370:9: -> T_PLUS
				{
					DebugLocation(370, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_PLUS, "T_PLUS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:371:4: '-'
				{
				DebugLocation(371, 4);
				char_literal262=(IToken)Match(input,156,Follow._156_in_op_12274);  
				stream_156.Add(char_literal262);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 371:8: -> T_MINUS
				{
					DebugLocation(371, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MINUS, "T_MINUS"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_1", 49);
			LeaveRule("op_1", 49);
			LeaveRule_op_1();
	    }
	 	DebugLocation(372, 1);
		} finally { DebugExitRule(GrammarFileName, "op_1"); }
		return retval;

	}
	// $ANTLR end "op_1"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_atom() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_atom() {}

	// $ANTLR start "expression_atom"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:374:1: expression_atom : ( NUMBER -> ^( T_INTEGER NUMBER ) | string | SYSTEMVAR -> ^( T_SYSTEMVAR SYSTEMVAR ) | variable | subquery | '(' expression ')' -> expression | functioncall_or_column | conversion | case | EXISTS ( WS )? '(' ( WS )? select_command ( WS )? ')' -> ^( T_EXISTS select_command ) );
	[GrammarRule("expression_atom")]
	private AstParserRuleReturnScope<object, IToken> expression_atom()
	{
		EnterRule_expression_atom();
		EnterRule("expression_atom", 50);
		TraceIn("expression_atom", 50);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken NUMBER263 = default(IToken);
	    IToken SYSTEMVAR265 = default(IToken);
	    IToken char_literal268 = default(IToken);
	    IToken char_literal270 = default(IToken);
	    IToken EXISTS274 = default(IToken);
	    IToken WS275 = default(IToken);
	    IToken char_literal276 = default(IToken);
	    IToken WS277 = default(IToken);
	    IToken WS279 = default(IToken);
	    IToken char_literal280 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> string264 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> variable266 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> subquery267 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression269 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> functioncall_or_column271 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> conversion272 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> case273 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> select_command278 = default(AstParserRuleReturnScope<object, IToken>);

	    object NUMBER263_tree = default(object);
	    object SYSTEMVAR265_tree = default(object);
	    object char_literal268_tree = default(object);
	    object char_literal270_tree = default(object);
	    object EXISTS274_tree = default(object);
	    object WS275_tree = default(object);
	    object char_literal276_tree = default(object);
	    object WS277_tree = default(object);
	    object WS279_tree = default(object);
	    object char_literal280_tree = default(object);
	    RewriteRuleITokenStream stream_152=new RewriteRuleITokenStream(adaptor,"token 152");
	    RewriteRuleITokenStream stream_151=new RewriteRuleITokenStream(adaptor,"token 151");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_EXISTS=new RewriteRuleITokenStream(adaptor,"token EXISTS");
	    RewriteRuleITokenStream stream_SYSTEMVAR=new RewriteRuleITokenStream(adaptor,"token SYSTEMVAR");
	    RewriteRuleITokenStream stream_NUMBER=new RewriteRuleITokenStream(adaptor,"token NUMBER");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_select_command=new RewriteRuleSubtreeStream(adaptor,"rule select_command");
		try { DebugEnterRule(GrammarFileName, "expression_atom");
		DebugLocation(374, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:375:2: ( NUMBER -> ^( T_INTEGER NUMBER ) | string | SYSTEMVAR -> ^( T_SYSTEMVAR SYSTEMVAR ) | variable | subquery | '(' expression ')' -> expression | functioncall_or_column | conversion | case | EXISTS ( WS )? '(' ( WS )? select_command ( WS )? ')' -> ^( T_EXISTS select_command ) )
			int alt96=10;
			try { DebugEnterDecision(96, decisionCanBacktrack[96]);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt96 = 1;
				}
				break;
			case STRING:
				{
				alt96 = 2;
				}
				break;
			case SYSTEMVAR:
				{
				alt96 = 3;
				}
				break;
			case VARIABLE:
				{
				alt96 = 4;
				}
				break;
			case 151:
				{
				int LA96_5 = input.LA(2);

				if ((LA96_5==SELECT||LA96_5==WS))
				{
					alt96 = 5;
				}
				else if (((LA96_5>=CASE && LA96_5<=CAST)||LA96_5==CONVERT||LA96_5==EXISTS||(LA96_5>=NOT && LA96_5<=NUMBER)||LA96_5==SIMPLE_FILE||(LA96_5>=STRING && LA96_5<=SYSTEMVAR)||LA96_5==TOKEN||LA96_5==VARIABLE||LA96_5==151))
				{
					alt96 = 6;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 96, 5, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SIMPLE_FILE:
			case TOKEN:
				{
				alt96 = 7;
				}
				break;
			case CAST:
			case CONVERT:
				{
				alt96 = 8;
				}
				break;
			case CASE:
				{
				alt96 = 9;
				}
				break;
			case EXISTS:
				{
				alt96 = 10;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 96, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(96); }
			switch (alt96)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:375:4: NUMBER
				{
				DebugLocation(375, 4);
				NUMBER263=(IToken)Match(input,NUMBER,Follow._NUMBER_in_expression_atom2289);  
				stream_NUMBER.Add(NUMBER263);



				{
				// AST REWRITE
				// elements: NUMBER
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 375:11: -> ^( T_INTEGER NUMBER )
				{
					DebugLocation(375, 14);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:375:14: ^( T_INTEGER NUMBER )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(375, 16);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_INTEGER, "T_INTEGER"), root_1);

					DebugLocation(375, 26);
					adaptor.AddChild(root_1, stream_NUMBER.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:376:4: string
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(376, 4);
				PushFollow(Follow._string_in_expression_atom2302);
				string264=@string();
				PopFollow();

				adaptor.AddChild(root_0, string264.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:377:4: SYSTEMVAR
				{
				DebugLocation(377, 4);
				SYSTEMVAR265=(IToken)Match(input,SYSTEMVAR,Follow._SYSTEMVAR_in_expression_atom2307);  
				stream_SYSTEMVAR.Add(SYSTEMVAR265);



				{
				// AST REWRITE
				// elements: SYSTEMVAR
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 377:14: -> ^( T_SYSTEMVAR SYSTEMVAR )
				{
					DebugLocation(377, 17);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:377:17: ^( T_SYSTEMVAR SYSTEMVAR )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(377, 19);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SYSTEMVAR, "T_SYSTEMVAR"), root_1);

					DebugLocation(377, 31);
					adaptor.AddChild(root_1, stream_SYSTEMVAR.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:378:4: variable
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(378, 4);
				PushFollow(Follow._variable_in_expression_atom2320);
				variable266=variable();
				PopFollow();

				adaptor.AddChild(root_0, variable266.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:379:4: subquery
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(379, 4);
				PushFollow(Follow._subquery_in_expression_atom2325);
				subquery267=subquery();
				PopFollow();

				adaptor.AddChild(root_0, subquery267.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:380:4: '(' expression ')'
				{
				DebugLocation(380, 4);
				char_literal268=(IToken)Match(input,151,Follow._151_in_expression_atom2330);  
				stream_151.Add(char_literal268);

				DebugLocation(380, 8);
				PushFollow(Follow._expression_in_expression_atom2332);
				expression269=expression();
				PopFollow();

				stream_expression.Add(expression269.Tree);
				DebugLocation(380, 19);
				char_literal270=(IToken)Match(input,152,Follow._152_in_expression_atom2334);  
				stream_152.Add(char_literal270);



				{
				// AST REWRITE
				// elements: expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 380:23: -> expression
				{
					DebugLocation(380, 26);
					adaptor.AddChild(root_0, stream_expression.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:381:4: functioncall_or_column
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(381, 4);
				PushFollow(Follow._functioncall_or_column_in_expression_atom2343);
				functioncall_or_column271=functioncall_or_column();
				PopFollow();

				adaptor.AddChild(root_0, functioncall_or_column271.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:382:4: conversion
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(382, 4);
				PushFollow(Follow._conversion_in_expression_atom2348);
				conversion272=conversion();
				PopFollow();

				adaptor.AddChild(root_0, conversion272.Tree);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:383:4: case
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(383, 4);
				PushFollow(Follow._case_in_expression_atom2353);
				case273=@case();
				PopFollow();

				adaptor.AddChild(root_0, case273.Tree);

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:384:4: EXISTS ( WS )? '(' ( WS )? select_command ( WS )? ')'
				{
				DebugLocation(384, 4);
				EXISTS274=(IToken)Match(input,EXISTS,Follow._EXISTS_in_expression_atom2358);  
				stream_EXISTS.Add(EXISTS274);

				DebugLocation(384, 11);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:384:11: ( WS )?
				int alt93=2;
				try { DebugEnterSubRule(93);
				try { DebugEnterDecision(93, decisionCanBacktrack[93]);
				int LA93_0 = input.LA(1);

				if ((LA93_0==WS))
				{
					alt93 = 1;
				}
				} finally { DebugExitDecision(93); }
				switch (alt93)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:384:11: WS
					{
					DebugLocation(384, 11);
					WS275=(IToken)Match(input,WS,Follow._WS_in_expression_atom2360);  
					stream_WS.Add(WS275);


					}
					break;

				}
				} finally { DebugExitSubRule(93); }

				DebugLocation(384, 15);
				char_literal276=(IToken)Match(input,151,Follow._151_in_expression_atom2363);  
				stream_151.Add(char_literal276);

				DebugLocation(384, 19);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:384:19: ( WS )?
				int alt94=2;
				try { DebugEnterSubRule(94);
				try { DebugEnterDecision(94, decisionCanBacktrack[94]);
				int LA94_0 = input.LA(1);

				if ((LA94_0==WS))
				{
					alt94 = 1;
				}
				} finally { DebugExitDecision(94); }
				switch (alt94)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:384:19: WS
					{
					DebugLocation(384, 19);
					WS277=(IToken)Match(input,WS,Follow._WS_in_expression_atom2365);  
					stream_WS.Add(WS277);


					}
					break;

				}
				} finally { DebugExitSubRule(94); }

				DebugLocation(384, 23);
				PushFollow(Follow._select_command_in_expression_atom2368);
				select_command278=select_command();
				PopFollow();

				stream_select_command.Add(select_command278.Tree);
				DebugLocation(384, 38);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:384:38: ( WS )?
				int alt95=2;
				try { DebugEnterSubRule(95);
				try { DebugEnterDecision(95, decisionCanBacktrack[95]);
				int LA95_0 = input.LA(1);

				if ((LA95_0==WS))
				{
					alt95 = 1;
				}
				} finally { DebugExitDecision(95); }
				switch (alt95)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:384:38: WS
					{
					DebugLocation(384, 38);
					WS279=(IToken)Match(input,WS,Follow._WS_in_expression_atom2370);  
					stream_WS.Add(WS279);


					}
					break;

				}
				} finally { DebugExitSubRule(95); }

				DebugLocation(384, 42);
				char_literal280=(IToken)Match(input,152,Follow._152_in_expression_atom2373);  
				stream_152.Add(char_literal280);



				{
				// AST REWRITE
				// elements: select_command
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 384:46: -> ^( T_EXISTS select_command )
				{
					DebugLocation(384, 49);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:384:49: ^( T_EXISTS select_command )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(384, 51);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_EXISTS, "T_EXISTS"), root_1);

					DebugLocation(384, 60);
					adaptor.AddChild(root_1, stream_select_command.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_atom", 50);
			LeaveRule("expression_atom", 50);
			LeaveRule_expression_atom();
	    }
	 	DebugLocation(385, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_atom"); }
		return retval;

	}
	// $ANTLR end "expression_atom"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_functioncall_or_column() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_functioncall_or_column() {}

	// $ANTLR start "functioncall_or_column"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:388:1: functioncall_or_column : ( TOKEN ( WS )? '(' ( WS )? ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )? ')' -> ^( T_FUNCTIONCALL TOKEN ( expression )* ) | TOKEN ( WS )? '(' ( WS )? all_columns ( WS )? ')' -> ^( T_FUNCTIONCALL TOKEN all_columns ) | ( table_alias ( WS )? '.' ( WS )? )? column_name -> ^( T_COLUMN column_name ( table_alias )? ) );
	[GrammarRule("functioncall_or_column")]
	private AstParserRuleReturnScope<object, IToken> functioncall_or_column()
	{
		EnterRule_functioncall_or_column();
		EnterRule("functioncall_or_column", 51);
		TraceIn("functioncall_or_column", 51);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN281 = default(IToken);
	    IToken WS282 = default(IToken);
	    IToken char_literal283 = default(IToken);
	    IToken WS284 = default(IToken);
	    IToken WS286 = default(IToken);
	    IToken char_literal287 = default(IToken);
	    IToken WS288 = default(IToken);
	    IToken WS290 = default(IToken);
	    IToken char_literal291 = default(IToken);
	    IToken TOKEN292 = default(IToken);
	    IToken WS293 = default(IToken);
	    IToken char_literal294 = default(IToken);
	    IToken WS295 = default(IToken);
	    IToken WS297 = default(IToken);
	    IToken char_literal298 = default(IToken);
	    IToken WS300 = default(IToken);
	    IToken char_literal301 = default(IToken);
	    IToken WS302 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression285 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression289 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> all_columns296 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> table_alias299 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> column_name303 = default(AstParserRuleReturnScope<object, IToken>);

	    object TOKEN281_tree = default(object);
	    object WS282_tree = default(object);
	    object char_literal283_tree = default(object);
	    object WS284_tree = default(object);
	    object WS286_tree = default(object);
	    object char_literal287_tree = default(object);
	    object WS288_tree = default(object);
	    object WS290_tree = default(object);
	    object char_literal291_tree = default(object);
	    object TOKEN292_tree = default(object);
	    object WS293_tree = default(object);
	    object char_literal294_tree = default(object);
	    object WS295_tree = default(object);
	    object WS297_tree = default(object);
	    object char_literal298_tree = default(object);
	    object WS300_tree = default(object);
	    object char_literal301_tree = default(object);
	    object WS302_tree = default(object);
	    RewriteRuleITokenStream stream_152=new RewriteRuleITokenStream(adaptor,"token 152");
	    RewriteRuleITokenStream stream_151=new RewriteRuleITokenStream(adaptor,"token 151");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_157=new RewriteRuleITokenStream(adaptor,"token 157");
	    RewriteRuleITokenStream stream_155=new RewriteRuleITokenStream(adaptor,"token 155");
	    RewriteRuleITokenStream stream_TOKEN=new RewriteRuleITokenStream(adaptor,"token TOKEN");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_table_alias=new RewriteRuleSubtreeStream(adaptor,"rule table_alias");
	    RewriteRuleSubtreeStream stream_all_columns=new RewriteRuleSubtreeStream(adaptor,"rule all_columns");
	    RewriteRuleSubtreeStream stream_column_name=new RewriteRuleSubtreeStream(adaptor,"rule column_name");
		try { DebugEnterRule(GrammarFileName, "functioncall_or_column");
		DebugLocation(388, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:389:2: ( TOKEN ( WS )? '(' ( WS )? ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )? ')' -> ^( T_FUNCTIONCALL TOKEN ( expression )* ) | TOKEN ( WS )? '(' ( WS )? all_columns ( WS )? ')' -> ^( T_FUNCTIONCALL TOKEN all_columns ) | ( table_alias ( WS )? '.' ( WS )? )? column_name -> ^( T_COLUMN column_name ( table_alias )? ) )
			int alt110=3;
			try { DebugEnterDecision(110, decisionCanBacktrack[110]);
			int LA110_0 = input.LA(1);

			if ((LA110_0==TOKEN))
			{
				int LA110_1 = input.LA(2);

				if ((LA110_1==WS))
				{
					int LA110_3 = input.LA(3);

					if ((LA110_3==151))
					{
						switch (input.LA(4))
						{
						case WS:
							{
							switch (input.LA(5))
							{
							case CASE:
							case CAST:
							case CONVERT:
							case EXISTS:
							case NOT:
							case NUMBER:
							case STRING:
							case SYSTEMVAR:
							case TOKEN:
							case VARIABLE:
							case 151:
							case 152:
								{
								alt110 = 1;
								}
								break;
							case SIMPLE_FILE:
								{
								switch (input.LA(6))
								{
								case WS:
									{
									int LA110_9 = input.LA(7);

									if ((LA110_9==157))
									{
										switch (input.LA(8))
										{
										case WS:
											{
											int LA110_11 = input.LA(9);

											if ((LA110_11==SIMPLE_FILE))
											{
												alt110 = 1;
											}
											else if ((LA110_11==153))
											{
												alt110 = 2;
											}
											else
											{
												NoViableAltException nvae = new NoViableAltException("", 110, 11, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
											}
											break;
										case SIMPLE_FILE:
											{
											alt110 = 1;
											}
											break;
										case 153:
											{
											alt110 = 2;
											}
											break;
										default:
											{
												NoViableAltException nvae = new NoViableAltException("", 110, 10, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
										}

									}
									else if ((LA110_9==AND||LA110_9==BETWEEN||LA110_9==IN||LA110_9==LIKE||LA110_9==MATCH||LA110_9==NOT||LA110_9==OR||(LA110_9>=146 && LA110_9<=150)||(LA110_9>=152 && LA110_9<=156)||LA110_9==158||(LA110_9>=160 && LA110_9<=165)||(LA110_9>=168 && LA110_9<=169)))
									{
										alt110 = 1;
									}
									else
									{
										NoViableAltException nvae = new NoViableAltException("", 110, 9, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
									}
									break;
								case 157:
									{
									switch (input.LA(7))
									{
									case WS:
										{
										int LA110_11 = input.LA(8);

										if ((LA110_11==SIMPLE_FILE))
										{
											alt110 = 1;
										}
										else if ((LA110_11==153))
										{
											alt110 = 2;
										}
										else
										{
											NoViableAltException nvae = new NoViableAltException("", 110, 11, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
										}
										break;
									case SIMPLE_FILE:
										{
										alt110 = 1;
										}
										break;
									case 153:
										{
										alt110 = 2;
										}
										break;
									default:
										{
											NoViableAltException nvae = new NoViableAltException("", 110, 10, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}

									}
									break;
								case 146:
								case 147:
								case 148:
								case 149:
								case 150:
								case 152:
								case 153:
								case 154:
								case 155:
								case 156:
								case 158:
								case 160:
								case 161:
								case 162:
								case 163:
								case 164:
								case 165:
								case 168:
								case 169:
									{
									alt110 = 1;
									}
									break;
								default:
									{
										NoViableAltException nvae = new NoViableAltException("", 110, 7, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

								}
								break;
							case 153:
								{
								alt110 = 2;
								}
								break;
							default:
								{
									NoViableAltException nvae = new NoViableAltException("", 110, 5, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}

							}
							break;
						case CASE:
						case CAST:
						case CONVERT:
						case EXISTS:
						case NOT:
						case NUMBER:
						case STRING:
						case SYSTEMVAR:
						case TOKEN:
						case VARIABLE:
						case 151:
						case 152:
							{
							alt110 = 1;
							}
							break;
						case SIMPLE_FILE:
							{
							switch (input.LA(5))
							{
							case WS:
								{
								int LA110_9 = input.LA(6);

								if ((LA110_9==157))
								{
									switch (input.LA(7))
									{
									case WS:
										{
										int LA110_11 = input.LA(8);

										if ((LA110_11==SIMPLE_FILE))
										{
											alt110 = 1;
										}
										else if ((LA110_11==153))
										{
											alt110 = 2;
										}
										else
										{
											NoViableAltException nvae = new NoViableAltException("", 110, 11, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
										}
										break;
									case SIMPLE_FILE:
										{
										alt110 = 1;
										}
										break;
									case 153:
										{
										alt110 = 2;
										}
										break;
									default:
										{
											NoViableAltException nvae = new NoViableAltException("", 110, 10, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}

								}
								else if ((LA110_9==AND||LA110_9==BETWEEN||LA110_9==IN||LA110_9==LIKE||LA110_9==MATCH||LA110_9==NOT||LA110_9==OR||(LA110_9>=146 && LA110_9<=150)||(LA110_9>=152 && LA110_9<=156)||LA110_9==158||(LA110_9>=160 && LA110_9<=165)||(LA110_9>=168 && LA110_9<=169)))
								{
									alt110 = 1;
								}
								else
								{
									NoViableAltException nvae = new NoViableAltException("", 110, 9, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
								}
								break;
							case 157:
								{
								switch (input.LA(6))
								{
								case WS:
									{
									int LA110_11 = input.LA(7);

									if ((LA110_11==SIMPLE_FILE))
									{
										alt110 = 1;
									}
									else if ((LA110_11==153))
									{
										alt110 = 2;
									}
									else
									{
										NoViableAltException nvae = new NoViableAltException("", 110, 11, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
									}
									break;
								case SIMPLE_FILE:
									{
									alt110 = 1;
									}
									break;
								case 153:
									{
									alt110 = 2;
									}
									break;
								default:
									{
										NoViableAltException nvae = new NoViableAltException("", 110, 10, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

								}
								break;
							case 146:
							case 147:
							case 148:
							case 149:
							case 150:
							case 152:
							case 153:
							case 154:
							case 155:
							case 156:
							case 158:
							case 160:
							case 161:
							case 162:
							case 163:
							case 164:
							case 165:
							case 168:
							case 169:
								{
								alt110 = 1;
								}
								break;
							default:
								{
									NoViableAltException nvae = new NoViableAltException("", 110, 7, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}

							}
							break;
						case 153:
							{
							alt110 = 2;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 110, 4, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 110, 3, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA110_1==151))
				{
					switch (input.LA(3))
					{
					case WS:
						{
						switch (input.LA(4))
						{
						case CASE:
						case CAST:
						case CONVERT:
						case EXISTS:
						case NOT:
						case NUMBER:
						case STRING:
						case SYSTEMVAR:
						case TOKEN:
						case VARIABLE:
						case 151:
						case 152:
							{
							alt110 = 1;
							}
							break;
						case SIMPLE_FILE:
							{
							switch (input.LA(5))
							{
							case WS:
								{
								int LA110_9 = input.LA(6);

								if ((LA110_9==157))
								{
									switch (input.LA(7))
									{
									case WS:
										{
										int LA110_11 = input.LA(8);

										if ((LA110_11==SIMPLE_FILE))
										{
											alt110 = 1;
										}
										else if ((LA110_11==153))
										{
											alt110 = 2;
										}
										else
										{
											NoViableAltException nvae = new NoViableAltException("", 110, 11, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
										}
										break;
									case SIMPLE_FILE:
										{
										alt110 = 1;
										}
										break;
									case 153:
										{
										alt110 = 2;
										}
										break;
									default:
										{
											NoViableAltException nvae = new NoViableAltException("", 110, 10, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}

								}
								else if ((LA110_9==AND||LA110_9==BETWEEN||LA110_9==IN||LA110_9==LIKE||LA110_9==MATCH||LA110_9==NOT||LA110_9==OR||(LA110_9>=146 && LA110_9<=150)||(LA110_9>=152 && LA110_9<=156)||LA110_9==158||(LA110_9>=160 && LA110_9<=165)||(LA110_9>=168 && LA110_9<=169)))
								{
									alt110 = 1;
								}
								else
								{
									NoViableAltException nvae = new NoViableAltException("", 110, 9, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
								}
								break;
							case 157:
								{
								switch (input.LA(6))
								{
								case WS:
									{
									int LA110_11 = input.LA(7);

									if ((LA110_11==SIMPLE_FILE))
									{
										alt110 = 1;
									}
									else if ((LA110_11==153))
									{
										alt110 = 2;
									}
									else
									{
										NoViableAltException nvae = new NoViableAltException("", 110, 11, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
									}
									break;
								case SIMPLE_FILE:
									{
									alt110 = 1;
									}
									break;
								case 153:
									{
									alt110 = 2;
									}
									break;
								default:
									{
										NoViableAltException nvae = new NoViableAltException("", 110, 10, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

								}
								break;
							case 146:
							case 147:
							case 148:
							case 149:
							case 150:
							case 152:
							case 153:
							case 154:
							case 155:
							case 156:
							case 158:
							case 160:
							case 161:
							case 162:
							case 163:
							case 164:
							case 165:
							case 168:
							case 169:
								{
								alt110 = 1;
								}
								break;
							default:
								{
									NoViableAltException nvae = new NoViableAltException("", 110, 7, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}

							}
							break;
						case 153:
							{
							alt110 = 2;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 110, 5, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case CASE:
					case CAST:
					case CONVERT:
					case EXISTS:
					case NOT:
					case NUMBER:
					case STRING:
					case SYSTEMVAR:
					case TOKEN:
					case VARIABLE:
					case 151:
					case 152:
						{
						alt110 = 1;
						}
						break;
					case SIMPLE_FILE:
						{
						switch (input.LA(4))
						{
						case WS:
							{
							int LA110_9 = input.LA(5);

							if ((LA110_9==157))
							{
								switch (input.LA(6))
								{
								case WS:
									{
									int LA110_11 = input.LA(7);

									if ((LA110_11==SIMPLE_FILE))
									{
										alt110 = 1;
									}
									else if ((LA110_11==153))
									{
										alt110 = 2;
									}
									else
									{
										NoViableAltException nvae = new NoViableAltException("", 110, 11, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
									}
									break;
								case SIMPLE_FILE:
									{
									alt110 = 1;
									}
									break;
								case 153:
									{
									alt110 = 2;
									}
									break;
								default:
									{
										NoViableAltException nvae = new NoViableAltException("", 110, 10, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

							}
							else if ((LA110_9==AND||LA110_9==BETWEEN||LA110_9==IN||LA110_9==LIKE||LA110_9==MATCH||LA110_9==NOT||LA110_9==OR||(LA110_9>=146 && LA110_9<=150)||(LA110_9>=152 && LA110_9<=156)||LA110_9==158||(LA110_9>=160 && LA110_9<=165)||(LA110_9>=168 && LA110_9<=169)))
							{
								alt110 = 1;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 110, 9, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case 157:
							{
							switch (input.LA(5))
							{
							case WS:
								{
								int LA110_11 = input.LA(6);

								if ((LA110_11==SIMPLE_FILE))
								{
									alt110 = 1;
								}
								else if ((LA110_11==153))
								{
									alt110 = 2;
								}
								else
								{
									NoViableAltException nvae = new NoViableAltException("", 110, 11, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
								}
								break;
							case SIMPLE_FILE:
								{
								alt110 = 1;
								}
								break;
							case 153:
								{
								alt110 = 2;
								}
								break;
							default:
								{
									NoViableAltException nvae = new NoViableAltException("", 110, 10, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}

							}
							break;
						case 146:
						case 147:
						case 148:
						case 149:
						case 150:
						case 152:
						case 153:
						case 154:
						case 155:
						case 156:
						case 158:
						case 160:
						case 161:
						case 162:
						case 163:
						case 164:
						case 165:
						case 168:
						case 169:
							{
							alt110 = 1;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 110, 7, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 153:
						{
						alt110 = 2;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 110, 4, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 110, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA110_0==SIMPLE_FILE))
			{
				alt110 = 3;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 110, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(110); }
			switch (alt110)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:389:4: TOKEN ( WS )? '(' ( WS )? ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )? ')'
				{
				DebugLocation(389, 4);
				TOKEN281=(IToken)Match(input,TOKEN,Follow._TOKEN_in_functioncall_or_column2393);  
				stream_TOKEN.Add(TOKEN281);

				DebugLocation(389, 10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:389:10: ( WS )?
				int alt97=2;
				try { DebugEnterSubRule(97);
				try { DebugEnterDecision(97, decisionCanBacktrack[97]);
				int LA97_0 = input.LA(1);

				if ((LA97_0==WS))
				{
					alt97 = 1;
				}
				} finally { DebugExitDecision(97); }
				switch (alt97)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:389:10: WS
					{
					DebugLocation(389, 10);
					WS282=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2395);  
					stream_WS.Add(WS282);


					}
					break;

				}
				} finally { DebugExitSubRule(97); }

				DebugLocation(389, 14);
				char_literal283=(IToken)Match(input,151,Follow._151_in_functioncall_or_column2398);  
				stream_151.Add(char_literal283);

				DebugLocation(389, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:389:18: ( WS )?
				int alt98=2;
				try { DebugEnterSubRule(98);
				try { DebugEnterDecision(98, decisionCanBacktrack[98]);
				int LA98_0 = input.LA(1);

				if ((LA98_0==WS))
				{
					alt98 = 1;
				}
				} finally { DebugExitDecision(98); }
				switch (alt98)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:389:18: WS
					{
					DebugLocation(389, 18);
					WS284=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2400);  
					stream_WS.Add(WS284);


					}
					break;

				}
				} finally { DebugExitSubRule(98); }

				DebugLocation(389, 22);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:389:22: ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )?
				int alt103=2;
				try { DebugEnterSubRule(103);
				try { DebugEnterDecision(103, decisionCanBacktrack[103]);
				int LA103_0 = input.LA(1);

				if (((LA103_0>=CASE && LA103_0<=CAST)||LA103_0==CONVERT||LA103_0==EXISTS||(LA103_0>=NOT && LA103_0<=NUMBER)||LA103_0==SIMPLE_FILE||(LA103_0>=STRING && LA103_0<=SYSTEMVAR)||LA103_0==TOKEN||LA103_0==VARIABLE||LA103_0==151))
				{
					alt103 = 1;
				}
				} finally { DebugExitDecision(103); }
				switch (alt103)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:389:23: expression ( WS )? ( ',' ( WS )? expression ( WS )? )*
					{
					DebugLocation(389, 23);
					PushFollow(Follow._expression_in_functioncall_or_column2404);
					expression285=expression();
					PopFollow();

					stream_expression.Add(expression285.Tree);
					DebugLocation(389, 34);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:389:34: ( WS )?
					int alt99=2;
					try { DebugEnterSubRule(99);
					try { DebugEnterDecision(99, decisionCanBacktrack[99]);
					int LA99_0 = input.LA(1);

					if ((LA99_0==WS))
					{
						alt99 = 1;
					}
					} finally { DebugExitDecision(99); }
					switch (alt99)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:389:34: WS
						{
						DebugLocation(389, 34);
						WS286=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2406);  
						stream_WS.Add(WS286);


						}
						break;

					}
					} finally { DebugExitSubRule(99); }

					DebugLocation(389, 38);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:389:38: ( ',' ( WS )? expression ( WS )? )*
					try { DebugEnterSubRule(102);
					while (true)
					{
						int alt102=2;
						try { DebugEnterDecision(102, decisionCanBacktrack[102]);
						int LA102_0 = input.LA(1);

						if ((LA102_0==155))
						{
							alt102 = 1;
						}


						} finally { DebugExitDecision(102); }
						switch ( alt102 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:389:39: ',' ( WS )? expression ( WS )?
							{
							DebugLocation(389, 39);
							char_literal287=(IToken)Match(input,155,Follow._155_in_functioncall_or_column2410);  
							stream_155.Add(char_literal287);

							DebugLocation(389, 43);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:389:43: ( WS )?
							int alt100=2;
							try { DebugEnterSubRule(100);
							try { DebugEnterDecision(100, decisionCanBacktrack[100]);
							int LA100_0 = input.LA(1);

							if ((LA100_0==WS))
							{
								alt100 = 1;
							}
							} finally { DebugExitDecision(100); }
							switch (alt100)
							{
							case 1:
								DebugEnterAlt(1);
								// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:389:43: WS
								{
								DebugLocation(389, 43);
								WS288=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2412);  
								stream_WS.Add(WS288);


								}
								break;

							}
							} finally { DebugExitSubRule(100); }

							DebugLocation(389, 47);
							PushFollow(Follow._expression_in_functioncall_or_column2415);
							expression289=expression();
							PopFollow();

							stream_expression.Add(expression289.Tree);
							DebugLocation(389, 58);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:389:58: ( WS )?
							int alt101=2;
							try { DebugEnterSubRule(101);
							try { DebugEnterDecision(101, decisionCanBacktrack[101]);
							int LA101_0 = input.LA(1);

							if ((LA101_0==WS))
							{
								alt101 = 1;
							}
							} finally { DebugExitDecision(101); }
							switch (alt101)
							{
							case 1:
								DebugEnterAlt(1);
								// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:389:58: WS
								{
								DebugLocation(389, 58);
								WS290=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2417);  
								stream_WS.Add(WS290);


								}
								break;

							}
							} finally { DebugExitSubRule(101); }


							}
							break;

						default:
							goto loop102;
						}
					}

					loop102:
						;

					} finally { DebugExitSubRule(102); }


					}
					break;

				}
				} finally { DebugExitSubRule(103); }

				DebugLocation(389, 66);
				char_literal291=(IToken)Match(input,152,Follow._152_in_functioncall_or_column2424);  
				stream_152.Add(char_literal291);



				{
				// AST REWRITE
				// elements: expression, TOKEN
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 389:70: -> ^( T_FUNCTIONCALL TOKEN ( expression )* )
				{
					DebugLocation(389, 73);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:389:73: ^( T_FUNCTIONCALL TOKEN ( expression )* )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(389, 75);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(389, 90);
					adaptor.AddChild(root_1, stream_TOKEN.NextNode());
					DebugLocation(389, 96);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:389:96: ( expression )*
					while ( stream_expression.HasNext )
					{
						DebugLocation(389, 96);
						adaptor.AddChild(root_1, stream_expression.NextTree());

					}
					stream_expression.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:390:4: TOKEN ( WS )? '(' ( WS )? all_columns ( WS )? ')'
				{
				DebugLocation(390, 4);
				TOKEN292=(IToken)Match(input,TOKEN,Follow._TOKEN_in_functioncall_or_column2440);  
				stream_TOKEN.Add(TOKEN292);

				DebugLocation(390, 10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:390:10: ( WS )?
				int alt104=2;
				try { DebugEnterSubRule(104);
				try { DebugEnterDecision(104, decisionCanBacktrack[104]);
				int LA104_0 = input.LA(1);

				if ((LA104_0==WS))
				{
					alt104 = 1;
				}
				} finally { DebugExitDecision(104); }
				switch (alt104)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:390:10: WS
					{
					DebugLocation(390, 10);
					WS293=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2442);  
					stream_WS.Add(WS293);


					}
					break;

				}
				} finally { DebugExitSubRule(104); }

				DebugLocation(390, 14);
				char_literal294=(IToken)Match(input,151,Follow._151_in_functioncall_or_column2445);  
				stream_151.Add(char_literal294);

				DebugLocation(390, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:390:18: ( WS )?
				int alt105=2;
				try { DebugEnterSubRule(105);
				try { DebugEnterDecision(105, decisionCanBacktrack[105]);
				int LA105_0 = input.LA(1);

				if ((LA105_0==WS))
				{
					alt105 = 1;
				}
				} finally { DebugExitDecision(105); }
				switch (alt105)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:390:18: WS
					{
					DebugLocation(390, 18);
					WS295=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2447);  
					stream_WS.Add(WS295);


					}
					break;

				}
				} finally { DebugExitSubRule(105); }

				DebugLocation(390, 22);
				PushFollow(Follow._all_columns_in_functioncall_or_column2450);
				all_columns296=all_columns();
				PopFollow();

				stream_all_columns.Add(all_columns296.Tree);
				DebugLocation(390, 34);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:390:34: ( WS )?
				int alt106=2;
				try { DebugEnterSubRule(106);
				try { DebugEnterDecision(106, decisionCanBacktrack[106]);
				int LA106_0 = input.LA(1);

				if ((LA106_0==WS))
				{
					alt106 = 1;
				}
				} finally { DebugExitDecision(106); }
				switch (alt106)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:390:34: WS
					{
					DebugLocation(390, 34);
					WS297=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2452);  
					stream_WS.Add(WS297);


					}
					break;

				}
				} finally { DebugExitSubRule(106); }

				DebugLocation(390, 38);
				char_literal298=(IToken)Match(input,152,Follow._152_in_functioncall_or_column2455);  
				stream_152.Add(char_literal298);



				{
				// AST REWRITE
				// elements: all_columns, TOKEN
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 390:42: -> ^( T_FUNCTIONCALL TOKEN all_columns )
				{
					DebugLocation(390, 45);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:390:45: ^( T_FUNCTIONCALL TOKEN all_columns )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(390, 47);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(390, 62);
					adaptor.AddChild(root_1, stream_TOKEN.NextNode());
					DebugLocation(390, 68);
					adaptor.AddChild(root_1, stream_all_columns.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:392:4: ( table_alias ( WS )? '.' ( WS )? )? column_name
				{
				DebugLocation(392, 4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:392:4: ( table_alias ( WS )? '.' ( WS )? )?
				int alt109=2;
				try { DebugEnterSubRule(109);
				try { DebugEnterDecision(109, decisionCanBacktrack[109]);
				int LA109_0 = input.LA(1);

				if ((LA109_0==SIMPLE_FILE))
				{
					int LA109_1 = input.LA(2);

					if ((LA109_1==WS))
					{
						int LA109_2 = input.LA(3);

						if ((LA109_2==157))
						{
							alt109 = 1;
						}
					}
					else if ((LA109_1==157))
					{
						alt109 = 1;
					}
				}
				} finally { DebugExitDecision(109); }
				switch (alt109)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:392:5: table_alias ( WS )? '.' ( WS )?
					{
					DebugLocation(392, 5);
					PushFollow(Follow._table_alias_in_functioncall_or_column2473);
					table_alias299=table_alias();
					PopFollow();

					stream_table_alias.Add(table_alias299.Tree);
					DebugLocation(392, 17);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:392:17: ( WS )?
					int alt107=2;
					try { DebugEnterSubRule(107);
					try { DebugEnterDecision(107, decisionCanBacktrack[107]);
					int LA107_0 = input.LA(1);

					if ((LA107_0==WS))
					{
						alt107 = 1;
					}
					} finally { DebugExitDecision(107); }
					switch (alt107)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:392:17: WS
						{
						DebugLocation(392, 17);
						WS300=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2475);  
						stream_WS.Add(WS300);


						}
						break;

					}
					} finally { DebugExitSubRule(107); }

					DebugLocation(392, 21);
					char_literal301=(IToken)Match(input,157,Follow._157_in_functioncall_or_column2478);  
					stream_157.Add(char_literal301);

					DebugLocation(392, 25);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:392:25: ( WS )?
					int alt108=2;
					try { DebugEnterSubRule(108);
					try { DebugEnterDecision(108, decisionCanBacktrack[108]);
					int LA108_0 = input.LA(1);

					if ((LA108_0==WS))
					{
						alt108 = 1;
					}
					} finally { DebugExitDecision(108); }
					switch (alt108)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:392:25: WS
						{
						DebugLocation(392, 25);
						WS302=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2480);  
						stream_WS.Add(WS302);


						}
						break;

					}
					} finally { DebugExitSubRule(108); }


					}
					break;

				}
				} finally { DebugExitSubRule(109); }

				DebugLocation(392, 31);
				PushFollow(Follow._column_name_in_functioncall_or_column2485);
				column_name303=column_name();
				PopFollow();

				stream_column_name.Add(column_name303.Tree);


				{
				// AST REWRITE
				// elements: column_name, table_alias
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 392:43: -> ^( T_COLUMN column_name ( table_alias )? )
				{
					DebugLocation(392, 46);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:392:46: ^( T_COLUMN column_name ( table_alias )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(392, 48);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_COLUMN, "T_COLUMN"), root_1);

					DebugLocation(392, 57);
					adaptor.AddChild(root_1, stream_column_name.NextTree());
					DebugLocation(392, 69);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:392:69: ( table_alias )?
					if (stream_table_alias.HasNext)
					{
						DebugLocation(392, 69);
						adaptor.AddChild(root_1, stream_table_alias.NextTree());

					}
					stream_table_alias.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("functioncall_or_column", 51);
			LeaveRule("functioncall_or_column", 51);
			LeaveRule_functioncall_or_column();
	    }
	 	DebugLocation(393, 1);
		} finally { DebugExitRule(GrammarFileName, "functioncall_or_column"); }
		return retval;

	}
	// $ANTLR end "functioncall_or_column"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_column_name() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_column_name() {}

	// $ANTLR start "column_name"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:395:1: column_name : SIMPLE_FILE ;
	[GrammarRule("column_name")]
	private AstParserRuleReturnScope<object, IToken> column_name()
	{
		EnterRule_column_name();
		EnterRule("column_name", 52);
		TraceIn("column_name", 52);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken SIMPLE_FILE304 = default(IToken);

	    object SIMPLE_FILE304_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "column_name");
		DebugLocation(395, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:396:2: ( SIMPLE_FILE )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:396:4: SIMPLE_FILE
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(396, 4);
			SIMPLE_FILE304=(IToken)Match(input,SIMPLE_FILE,Follow._SIMPLE_FILE_in_column_name2508); 
			SIMPLE_FILE304_tree = (object)adaptor.Create(SIMPLE_FILE304);
			adaptor.AddChild(root_0, SIMPLE_FILE304_tree);


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("column_name", 52);
			LeaveRule("column_name", 52);
			LeaveRule_column_name();
	    }
	 	DebugLocation(397, 1);
		} finally { DebugExitRule(GrammarFileName, "column_name"); }
		return retval;

	}
	// $ANTLR end "column_name"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_table_alias() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_table_alias() {}

	// $ANTLR start "table_alias"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:399:1: table_alias : SIMPLE_FILE -> ^( T_TABLE_ALIAS SIMPLE_FILE ) ;
	[GrammarRule("table_alias")]
	private AstParserRuleReturnScope<object, IToken> table_alias()
	{
		EnterRule_table_alias();
		EnterRule("table_alias", 53);
		TraceIn("table_alias", 53);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken SIMPLE_FILE305 = default(IToken);

	    object SIMPLE_FILE305_tree = default(object);
	    RewriteRuleITokenStream stream_SIMPLE_FILE=new RewriteRuleITokenStream(adaptor,"token SIMPLE_FILE");

		try { DebugEnterRule(GrammarFileName, "table_alias");
		DebugLocation(399, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:400:2: ( SIMPLE_FILE -> ^( T_TABLE_ALIAS SIMPLE_FILE ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:400:4: SIMPLE_FILE
			{
			DebugLocation(400, 4);
			SIMPLE_FILE305=(IToken)Match(input,SIMPLE_FILE,Follow._SIMPLE_FILE_in_table_alias2519);  
			stream_SIMPLE_FILE.Add(SIMPLE_FILE305);



			{
			// AST REWRITE
			// elements: SIMPLE_FILE
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 400:16: -> ^( T_TABLE_ALIAS SIMPLE_FILE )
			{
				DebugLocation(400, 19);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:400:19: ^( T_TABLE_ALIAS SIMPLE_FILE )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(400, 21);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_TABLE_ALIAS, "T_TABLE_ALIAS"), root_1);

				DebugLocation(400, 35);
				adaptor.AddChild(root_1, stream_SIMPLE_FILE.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("table_alias", 53);
			LeaveRule("table_alias", 53);
			LeaveRule_table_alias();
	    }
	 	DebugLocation(401, 1);
		} finally { DebugExitRule(GrammarFileName, "table_alias"); }
		return retval;

	}
	// $ANTLR end "table_alias"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_conversion() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_conversion() {}

	// $ANTLR start "conversion"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:403:1: conversion : ( CONVERT ( WS )? '(' ( WS )? TOKEN ( WS )? ',' ( WS )? expression ( WS )? ')' -> ^( T_CONVERT TOKEN expression ) | CAST ( WS )? '(' ( WS )? expression WS AS WS datatype ( WS )? ')' -> ^( T_CONVERT TOKEN expression ) );
	[GrammarRule("conversion")]
	private AstParserRuleReturnScope<object, IToken> conversion()
	{
		EnterRule_conversion();
		EnterRule("conversion", 54);
		TraceIn("conversion", 54);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken CONVERT306 = default(IToken);
	    IToken WS307 = default(IToken);
	    IToken char_literal308 = default(IToken);
	    IToken WS309 = default(IToken);
	    IToken TOKEN310 = default(IToken);
	    IToken WS311 = default(IToken);
	    IToken char_literal312 = default(IToken);
	    IToken WS313 = default(IToken);
	    IToken WS315 = default(IToken);
	    IToken char_literal316 = default(IToken);
	    IToken CAST317 = default(IToken);
	    IToken WS318 = default(IToken);
	    IToken char_literal319 = default(IToken);
	    IToken WS320 = default(IToken);
	    IToken WS322 = default(IToken);
	    IToken AS323 = default(IToken);
	    IToken WS324 = default(IToken);
	    IToken WS326 = default(IToken);
	    IToken char_literal327 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression314 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression321 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> datatype325 = default(AstParserRuleReturnScope<object, IToken>);

	    object CONVERT306_tree = default(object);
	    object WS307_tree = default(object);
	    object char_literal308_tree = default(object);
	    object WS309_tree = default(object);
	    object TOKEN310_tree = default(object);
	    object WS311_tree = default(object);
	    object char_literal312_tree = default(object);
	    object WS313_tree = default(object);
	    object WS315_tree = default(object);
	    object char_literal316_tree = default(object);
	    object CAST317_tree = default(object);
	    object WS318_tree = default(object);
	    object char_literal319_tree = default(object);
	    object WS320_tree = default(object);
	    object WS322_tree = default(object);
	    object AS323_tree = default(object);
	    object WS324_tree = default(object);
	    object WS326_tree = default(object);
	    object char_literal327_tree = default(object);
	    RewriteRuleITokenStream stream_CAST=new RewriteRuleITokenStream(adaptor,"token CAST");
	    RewriteRuleITokenStream stream_152=new RewriteRuleITokenStream(adaptor,"token 152");
	    RewriteRuleITokenStream stream_AS=new RewriteRuleITokenStream(adaptor,"token AS");
	    RewriteRuleITokenStream stream_151=new RewriteRuleITokenStream(adaptor,"token 151");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_CONVERT=new RewriteRuleITokenStream(adaptor,"token CONVERT");
	    RewriteRuleITokenStream stream_155=new RewriteRuleITokenStream(adaptor,"token 155");
	    RewriteRuleITokenStream stream_TOKEN=new RewriteRuleITokenStream(adaptor,"token TOKEN");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_datatype=new RewriteRuleSubtreeStream(adaptor,"rule datatype");
		try { DebugEnterRule(GrammarFileName, "conversion");
		DebugLocation(403, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:404:2: ( CONVERT ( WS )? '(' ( WS )? TOKEN ( WS )? ',' ( WS )? expression ( WS )? ')' -> ^( T_CONVERT TOKEN expression ) | CAST ( WS )? '(' ( WS )? expression WS AS WS datatype ( WS )? ')' -> ^( T_CONVERT TOKEN expression ) )
			int alt119=2;
			try { DebugEnterDecision(119, decisionCanBacktrack[119]);
			int LA119_0 = input.LA(1);

			if ((LA119_0==CONVERT))
			{
				alt119 = 1;
			}
			else if ((LA119_0==CAST))
			{
				alt119 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 119, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(119); }
			switch (alt119)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:404:4: CONVERT ( WS )? '(' ( WS )? TOKEN ( WS )? ',' ( WS )? expression ( WS )? ')'
				{
				DebugLocation(404, 4);
				CONVERT306=(IToken)Match(input,CONVERT,Follow._CONVERT_in_conversion2539);  
				stream_CONVERT.Add(CONVERT306);

				DebugLocation(404, 12);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:404:12: ( WS )?
				int alt111=2;
				try { DebugEnterSubRule(111);
				try { DebugEnterDecision(111, decisionCanBacktrack[111]);
				int LA111_0 = input.LA(1);

				if ((LA111_0==WS))
				{
					alt111 = 1;
				}
				} finally { DebugExitDecision(111); }
				switch (alt111)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:404:12: WS
					{
					DebugLocation(404, 12);
					WS307=(IToken)Match(input,WS,Follow._WS_in_conversion2541);  
					stream_WS.Add(WS307);


					}
					break;

				}
				} finally { DebugExitSubRule(111); }

				DebugLocation(404, 16);
				char_literal308=(IToken)Match(input,151,Follow._151_in_conversion2544);  
				stream_151.Add(char_literal308);

				DebugLocation(404, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:404:20: ( WS )?
				int alt112=2;
				try { DebugEnterSubRule(112);
				try { DebugEnterDecision(112, decisionCanBacktrack[112]);
				int LA112_0 = input.LA(1);

				if ((LA112_0==WS))
				{
					alt112 = 1;
				}
				} finally { DebugExitDecision(112); }
				switch (alt112)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:404:20: WS
					{
					DebugLocation(404, 20);
					WS309=(IToken)Match(input,WS,Follow._WS_in_conversion2546);  
					stream_WS.Add(WS309);


					}
					break;

				}
				} finally { DebugExitSubRule(112); }

				DebugLocation(404, 24);
				TOKEN310=(IToken)Match(input,TOKEN,Follow._TOKEN_in_conversion2549);  
				stream_TOKEN.Add(TOKEN310);

				DebugLocation(404, 30);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:404:30: ( WS )?
				int alt113=2;
				try { DebugEnterSubRule(113);
				try { DebugEnterDecision(113, decisionCanBacktrack[113]);
				int LA113_0 = input.LA(1);

				if ((LA113_0==WS))
				{
					alt113 = 1;
				}
				} finally { DebugExitDecision(113); }
				switch (alt113)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:404:30: WS
					{
					DebugLocation(404, 30);
					WS311=(IToken)Match(input,WS,Follow._WS_in_conversion2551);  
					stream_WS.Add(WS311);


					}
					break;

				}
				} finally { DebugExitSubRule(113); }

				DebugLocation(404, 34);
				char_literal312=(IToken)Match(input,155,Follow._155_in_conversion2554);  
				stream_155.Add(char_literal312);

				DebugLocation(404, 38);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:404:38: ( WS )?
				int alt114=2;
				try { DebugEnterSubRule(114);
				try { DebugEnterDecision(114, decisionCanBacktrack[114]);
				int LA114_0 = input.LA(1);

				if ((LA114_0==WS))
				{
					alt114 = 1;
				}
				} finally { DebugExitDecision(114); }
				switch (alt114)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:404:38: WS
					{
					DebugLocation(404, 38);
					WS313=(IToken)Match(input,WS,Follow._WS_in_conversion2556);  
					stream_WS.Add(WS313);


					}
					break;

				}
				} finally { DebugExitSubRule(114); }

				DebugLocation(404, 42);
				PushFollow(Follow._expression_in_conversion2559);
				expression314=expression();
				PopFollow();

				stream_expression.Add(expression314.Tree);
				DebugLocation(404, 53);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:404:53: ( WS )?
				int alt115=2;
				try { DebugEnterSubRule(115);
				try { DebugEnterDecision(115, decisionCanBacktrack[115]);
				int LA115_0 = input.LA(1);

				if ((LA115_0==WS))
				{
					alt115 = 1;
				}
				} finally { DebugExitDecision(115); }
				switch (alt115)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:404:53: WS
					{
					DebugLocation(404, 53);
					WS315=(IToken)Match(input,WS,Follow._WS_in_conversion2561);  
					stream_WS.Add(WS315);


					}
					break;

				}
				} finally { DebugExitSubRule(115); }

				DebugLocation(404, 57);
				char_literal316=(IToken)Match(input,152,Follow._152_in_conversion2564);  
				stream_152.Add(char_literal316);



				{
				// AST REWRITE
				// elements: TOKEN, expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 404:61: -> ^( T_CONVERT TOKEN expression )
				{
					DebugLocation(404, 64);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:404:64: ^( T_CONVERT TOKEN expression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(404, 66);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CONVERT, "T_CONVERT"), root_1);

					DebugLocation(404, 76);
					adaptor.AddChild(root_1, stream_TOKEN.NextNode());
					DebugLocation(404, 82);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:405:4: CAST ( WS )? '(' ( WS )? expression WS AS WS datatype ( WS )? ')'
				{
				DebugLocation(405, 4);
				CAST317=(IToken)Match(input,CAST,Follow._CAST_in_conversion2579);  
				stream_CAST.Add(CAST317);

				DebugLocation(405, 9);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:405:9: ( WS )?
				int alt116=2;
				try { DebugEnterSubRule(116);
				try { DebugEnterDecision(116, decisionCanBacktrack[116]);
				int LA116_0 = input.LA(1);

				if ((LA116_0==WS))
				{
					alt116 = 1;
				}
				} finally { DebugExitDecision(116); }
				switch (alt116)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:405:9: WS
					{
					DebugLocation(405, 9);
					WS318=(IToken)Match(input,WS,Follow._WS_in_conversion2581);  
					stream_WS.Add(WS318);


					}
					break;

				}
				} finally { DebugExitSubRule(116); }

				DebugLocation(405, 13);
				char_literal319=(IToken)Match(input,151,Follow._151_in_conversion2584);  
				stream_151.Add(char_literal319);

				DebugLocation(405, 17);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:405:17: ( WS )?
				int alt117=2;
				try { DebugEnterSubRule(117);
				try { DebugEnterDecision(117, decisionCanBacktrack[117]);
				int LA117_0 = input.LA(1);

				if ((LA117_0==WS))
				{
					alt117 = 1;
				}
				} finally { DebugExitDecision(117); }
				switch (alt117)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:405:17: WS
					{
					DebugLocation(405, 17);
					WS320=(IToken)Match(input,WS,Follow._WS_in_conversion2586);  
					stream_WS.Add(WS320);


					}
					break;

				}
				} finally { DebugExitSubRule(117); }

				DebugLocation(405, 21);
				PushFollow(Follow._expression_in_conversion2589);
				expression321=expression();
				PopFollow();

				stream_expression.Add(expression321.Tree);
				DebugLocation(405, 32);
				WS322=(IToken)Match(input,WS,Follow._WS_in_conversion2591);  
				stream_WS.Add(WS322);

				DebugLocation(405, 35);
				AS323=(IToken)Match(input,AS,Follow._AS_in_conversion2593);  
				stream_AS.Add(AS323);

				DebugLocation(405, 38);
				WS324=(IToken)Match(input,WS,Follow._WS_in_conversion2595);  
				stream_WS.Add(WS324);

				DebugLocation(405, 41);
				PushFollow(Follow._datatype_in_conversion2597);
				datatype325=datatype();
				PopFollow();

				stream_datatype.Add(datatype325.Tree);
				DebugLocation(405, 50);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:405:50: ( WS )?
				int alt118=2;
				try { DebugEnterSubRule(118);
				try { DebugEnterDecision(118, decisionCanBacktrack[118]);
				int LA118_0 = input.LA(1);

				if ((LA118_0==WS))
				{
					alt118 = 1;
				}
				} finally { DebugExitDecision(118); }
				switch (alt118)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:405:50: WS
					{
					DebugLocation(405, 50);
					WS326=(IToken)Match(input,WS,Follow._WS_in_conversion2599);  
					stream_WS.Add(WS326);


					}
					break;

				}
				} finally { DebugExitSubRule(118); }

				DebugLocation(405, 54);
				char_literal327=(IToken)Match(input,152,Follow._152_in_conversion2602);  
				stream_152.Add(char_literal327);



				{
				// AST REWRITE
				// elements: expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 405:58: -> ^( T_CONVERT TOKEN expression )
				{
					DebugLocation(405, 61);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:405:61: ^( T_CONVERT TOKEN expression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(405, 63);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CONVERT, "T_CONVERT"), root_1);

					DebugLocation(405, 73);
					adaptor.AddChild(root_1, (object)adaptor.Create(TOKEN, "TOKEN"));
					DebugLocation(405, 79);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conversion", 54);
			LeaveRule("conversion", 54);
			LeaveRule_conversion();
	    }
	 	DebugLocation(406, 1);
		} finally { DebugExitRule(GrammarFileName, "conversion"); }
		return retval;

	}
	// $ANTLR end "conversion"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_string() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_string() {}

	// $ANTLR start "string"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:408:1: string : STRING -> ^( T_STRING STRING ) ;
	[GrammarRule("string")]
	private AstParserRuleReturnScope<object, IToken> @string()
	{
		EnterRule_string();
		EnterRule("string", 55);
		TraceIn("string", 55);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken STRING328 = default(IToken);

	    object STRING328_tree = default(object);
	    RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");

		try { DebugEnterRule(GrammarFileName, "string");
		DebugLocation(408, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:408:8: ( STRING -> ^( T_STRING STRING ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:408:10: STRING
			{
			DebugLocation(408, 10);
			STRING328=(IToken)Match(input,STRING,Follow._STRING_in_string2622);  
			stream_STRING.Add(STRING328);



			{
			// AST REWRITE
			// elements: STRING
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 408:17: -> ^( T_STRING STRING )
			{
				DebugLocation(408, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:408:20: ^( T_STRING STRING )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(408, 22);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_STRING, "T_STRING"), root_1);

				DebugLocation(408, 31);
				adaptor.AddChild(root_1, stream_STRING.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("string", 55);
			LeaveRule("string", 55);
			LeaveRule_string();
	    }
	 	DebugLocation(409, 1);
		} finally { DebugExitRule(GrammarFileName, "string"); }
		return retval;

	}
	// $ANTLR end "string"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_datatype() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_datatype() {}

	// $ANTLR start "datatype"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:411:1: datatype : TOKEN ;
	[GrammarRule("datatype")]
	private AstParserRuleReturnScope<object, IToken> datatype()
	{
		EnterRule_datatype();
		EnterRule("datatype", 56);
		TraceIn("datatype", 56);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN329 = default(IToken);

	    object TOKEN329_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "datatype");
		DebugLocation(411, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:412:2: ( TOKEN )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:412:4: TOKEN
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(412, 4);
			TOKEN329=(IToken)Match(input,TOKEN,Follow._TOKEN_in_datatype2642); 
			TOKEN329_tree = (object)adaptor.Create(TOKEN329);
			adaptor.AddChild(root_0, TOKEN329_tree);


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("datatype", 56);
			LeaveRule("datatype", 56);
			LeaveRule_datatype();
	    }
	 	DebugLocation(413, 1);
		} finally { DebugExitRule(GrammarFileName, "datatype"); }
		return retval;

	}
	// $ANTLR end "datatype"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_variable() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_variable() {}

	// $ANTLR start "variable"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:415:1: variable : VARIABLE -> ^( T_VARIABLE VARIABLE ) ;
	[GrammarRule("variable")]
	private AstParserRuleReturnScope<object, IToken> variable()
	{
		EnterRule_variable();
		EnterRule("variable", 57);
		TraceIn("variable", 57);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken VARIABLE330 = default(IToken);

	    object VARIABLE330_tree = default(object);
	    RewriteRuleITokenStream stream_VARIABLE=new RewriteRuleITokenStream(adaptor,"token VARIABLE");

		try { DebugEnterRule(GrammarFileName, "variable");
		DebugLocation(415, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:416:2: ( VARIABLE -> ^( T_VARIABLE VARIABLE ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:416:4: VARIABLE
			{
			DebugLocation(416, 4);
			VARIABLE330=(IToken)Match(input,VARIABLE,Follow._VARIABLE_in_variable2654);  
			stream_VARIABLE.Add(VARIABLE330);



			{
			// AST REWRITE
			// elements: VARIABLE
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 416:13: -> ^( T_VARIABLE VARIABLE )
			{
				DebugLocation(416, 16);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:416:16: ^( T_VARIABLE VARIABLE )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(416, 18);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_VARIABLE, "T_VARIABLE"), root_1);

				DebugLocation(416, 29);
				adaptor.AddChild(root_1, stream_VARIABLE.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variable", 57);
			LeaveRule("variable", 57);
			LeaveRule_variable();
	    }
	 	DebugLocation(417, 1);
		} finally { DebugExitRule(GrammarFileName, "variable"); }
		return retval;

	}
	// $ANTLR end "variable"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_case() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_case() {}

	// $ANTLR start "case"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:419:1: case : CASE WS ( expression WS )? ( case_when WS )* ( case_else WS )? END -> ^( T_CASE ( expression )? ( case_when )* ( case_else )? ) ;
	[GrammarRule("case")]
	private AstParserRuleReturnScope<object, IToken> @case()
	{
		EnterRule_case();
		EnterRule("case", 58);
		TraceIn("case", 58);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken CASE331 = default(IToken);
	    IToken WS332 = default(IToken);
	    IToken WS334 = default(IToken);
	    IToken WS336 = default(IToken);
	    IToken WS338 = default(IToken);
	    IToken END339 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression333 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> case_when335 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> case_else337 = default(AstParserRuleReturnScope<object, IToken>);

	    object CASE331_tree = default(object);
	    object WS332_tree = default(object);
	    object WS334_tree = default(object);
	    object WS336_tree = default(object);
	    object WS338_tree = default(object);
	    object END339_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_END=new RewriteRuleITokenStream(adaptor,"token END");
	    RewriteRuleITokenStream stream_CASE=new RewriteRuleITokenStream(adaptor,"token CASE");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_case_when=new RewriteRuleSubtreeStream(adaptor,"rule case_when");
	    RewriteRuleSubtreeStream stream_case_else=new RewriteRuleSubtreeStream(adaptor,"rule case_else");
		try { DebugEnterRule(GrammarFileName, "case");
		DebugLocation(419, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:420:2: ( CASE WS ( expression WS )? ( case_when WS )* ( case_else WS )? END -> ^( T_CASE ( expression )? ( case_when )* ( case_else )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:420:4: CASE WS ( expression WS )? ( case_when WS )* ( case_else WS )? END
			{
			DebugLocation(420, 4);
			CASE331=(IToken)Match(input,CASE,Follow._CASE_in_case2674);  
			stream_CASE.Add(CASE331);

			DebugLocation(420, 9);
			WS332=(IToken)Match(input,WS,Follow._WS_in_case2676);  
			stream_WS.Add(WS332);

			DebugLocation(420, 12);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:420:12: ( expression WS )?
			int alt120=2;
			try { DebugEnterSubRule(120);
			try { DebugEnterDecision(120, decisionCanBacktrack[120]);
			int LA120_0 = input.LA(1);

			if (((LA120_0>=CASE && LA120_0<=CAST)||LA120_0==CONVERT||LA120_0==EXISTS||(LA120_0>=NOT && LA120_0<=NUMBER)||LA120_0==SIMPLE_FILE||(LA120_0>=STRING && LA120_0<=SYSTEMVAR)||LA120_0==TOKEN||LA120_0==VARIABLE||LA120_0==151))
			{
				alt120 = 1;
			}
			} finally { DebugExitDecision(120); }
			switch (alt120)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:420:13: expression WS
				{
				DebugLocation(420, 13);
				PushFollow(Follow._expression_in_case2679);
				expression333=expression();
				PopFollow();

				stream_expression.Add(expression333.Tree);
				DebugLocation(420, 24);
				WS334=(IToken)Match(input,WS,Follow._WS_in_case2681);  
				stream_WS.Add(WS334);


				}
				break;

			}
			} finally { DebugExitSubRule(120); }

			DebugLocation(420, 29);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:420:29: ( case_when WS )*
			try { DebugEnterSubRule(121);
			while (true)
			{
				int alt121=2;
				try { DebugEnterDecision(121, decisionCanBacktrack[121]);
				int LA121_0 = input.LA(1);

				if ((LA121_0==WHEN))
				{
					alt121 = 1;
				}


				} finally { DebugExitDecision(121); }
				switch ( alt121 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:420:30: case_when WS
					{
					DebugLocation(420, 30);
					PushFollow(Follow._case_when_in_case2686);
					case_when335=case_when();
					PopFollow();

					stream_case_when.Add(case_when335.Tree);
					DebugLocation(420, 40);
					WS336=(IToken)Match(input,WS,Follow._WS_in_case2688);  
					stream_WS.Add(WS336);


					}
					break;

				default:
					goto loop121;
				}
			}

			loop121:
				;

			} finally { DebugExitSubRule(121); }

			DebugLocation(420, 45);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:420:45: ( case_else WS )?
			int alt122=2;
			try { DebugEnterSubRule(122);
			try { DebugEnterDecision(122, decisionCanBacktrack[122]);
			int LA122_0 = input.LA(1);

			if ((LA122_0==ELSE))
			{
				alt122 = 1;
			}
			} finally { DebugExitDecision(122); }
			switch (alt122)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:420:46: case_else WS
				{
				DebugLocation(420, 46);
				PushFollow(Follow._case_else_in_case2693);
				case_else337=case_else();
				PopFollow();

				stream_case_else.Add(case_else337.Tree);
				DebugLocation(420, 56);
				WS338=(IToken)Match(input,WS,Follow._WS_in_case2695);  
				stream_WS.Add(WS338);


				}
				break;

			}
			} finally { DebugExitSubRule(122); }

			DebugLocation(420, 61);
			END339=(IToken)Match(input,END,Follow._END_in_case2699);  
			stream_END.Add(END339);



			{
			// AST REWRITE
			// elements: expression, case_else, case_when
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 421:2: -> ^( T_CASE ( expression )? ( case_when )* ( case_else )? )
			{
				DebugLocation(421, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:421:5: ^( T_CASE ( expression )? ( case_when )* ( case_else )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(421, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CASE, "T_CASE"), root_1);

				DebugLocation(421, 14);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:421:14: ( expression )?
				if (stream_expression.HasNext)
				{
					DebugLocation(421, 14);
					adaptor.AddChild(root_1, stream_expression.NextTree());

				}
				stream_expression.Reset();
				DebugLocation(421, 26);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:421:26: ( case_when )*
				while ( stream_case_when.HasNext )
				{
					DebugLocation(421, 26);
					adaptor.AddChild(root_1, stream_case_when.NextTree());

				}
				stream_case_when.Reset();
				DebugLocation(421, 37);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:421:37: ( case_else )?
				if (stream_case_else.HasNext)
				{
					DebugLocation(421, 37);
					adaptor.AddChild(root_1, stream_case_else.NextTree());

				}
				stream_case_else.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("case", 58);
			LeaveRule("case", 58);
			LeaveRule_case();
	    }
	 	DebugLocation(422, 1);
		} finally { DebugExitRule(GrammarFileName, "case"); }
		return retval;

	}
	// $ANTLR end "case"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_case_when() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_case_when() {}

	// $ANTLR start "case_when"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:424:1: case_when : WHEN WS a= expression WS THEN WS b= expression -> ^( T_CASE_WHEN $a $b) ;
	[GrammarRule("case_when")]
	private AstParserRuleReturnScope<object, IToken> case_when()
	{
		EnterRule_case_when();
		EnterRule("case_when", 59);
		TraceIn("case_when", 59);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WHEN340 = default(IToken);
	    IToken WS341 = default(IToken);
	    IToken WS342 = default(IToken);
	    IToken THEN343 = default(IToken);
	    IToken WS344 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);

	    object WHEN340_tree = default(object);
	    object WS341_tree = default(object);
	    object WS342_tree = default(object);
	    object THEN343_tree = default(object);
	    object WS344_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_THEN=new RewriteRuleITokenStream(adaptor,"token THEN");
	    RewriteRuleITokenStream stream_WHEN=new RewriteRuleITokenStream(adaptor,"token WHEN");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "case_when");
		DebugLocation(424, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:425:2: ( WHEN WS a= expression WS THEN WS b= expression -> ^( T_CASE_WHEN $a $b) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:425:4: WHEN WS a= expression WS THEN WS b= expression
			{
			DebugLocation(425, 4);
			WHEN340=(IToken)Match(input,WHEN,Follow._WHEN_in_case_when2727);  
			stream_WHEN.Add(WHEN340);

			DebugLocation(425, 9);
			WS341=(IToken)Match(input,WS,Follow._WS_in_case_when2729);  
			stream_WS.Add(WS341);

			DebugLocation(425, 13);
			PushFollow(Follow._expression_in_case_when2733);
			a=expression();
			PopFollow();

			stream_expression.Add(a.Tree);
			DebugLocation(425, 25);
			WS342=(IToken)Match(input,WS,Follow._WS_in_case_when2735);  
			stream_WS.Add(WS342);

			DebugLocation(425, 28);
			THEN343=(IToken)Match(input,THEN,Follow._THEN_in_case_when2737);  
			stream_THEN.Add(THEN343);

			DebugLocation(425, 33);
			WS344=(IToken)Match(input,WS,Follow._WS_in_case_when2739);  
			stream_WS.Add(WS344);

			DebugLocation(425, 37);
			PushFollow(Follow._expression_in_case_when2743);
			b=expression();
			PopFollow();

			stream_expression.Add(b.Tree);


			{
			// AST REWRITE
			// elements: a, b
			// token labels: 
			// rule labels: retval, b, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 426:2: -> ^( T_CASE_WHEN $a $b)
			{
				DebugLocation(426, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:426:5: ^( T_CASE_WHEN $a $b)
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(426, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CASE_WHEN, "T_CASE_WHEN"), root_1);

				DebugLocation(426, 20);
				adaptor.AddChild(root_1, stream_a.NextTree());
				DebugLocation(426, 23);
				adaptor.AddChild(root_1, stream_b.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("case_when", 59);
			LeaveRule("case_when", 59);
			LeaveRule_case_when();
	    }
	 	DebugLocation(427, 1);
		} finally { DebugExitRule(GrammarFileName, "case_when"); }
		return retval;

	}
	// $ANTLR end "case_when"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_case_else() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_case_else() {}

	// $ANTLR start "case_else"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:429:1: case_else : ELSE WS expression -> ^( T_CASE_ELSE expression ) ;
	[GrammarRule("case_else")]
	private AstParserRuleReturnScope<object, IToken> case_else()
	{
		EnterRule_case_else();
		EnterRule("case_else", 60);
		TraceIn("case_else", 60);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken ELSE345 = default(IToken);
	    IToken WS346 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression347 = default(AstParserRuleReturnScope<object, IToken>);

	    object ELSE345_tree = default(object);
	    object WS346_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_ELSE=new RewriteRuleITokenStream(adaptor,"token ELSE");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "case_else");
		DebugLocation(429, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:430:2: ( ELSE WS expression -> ^( T_CASE_ELSE expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:430:4: ELSE WS expression
			{
			DebugLocation(430, 4);
			ELSE345=(IToken)Match(input,ELSE,Follow._ELSE_in_case_else2768);  
			stream_ELSE.Add(ELSE345);

			DebugLocation(430, 9);
			WS346=(IToken)Match(input,WS,Follow._WS_in_case_else2770);  
			stream_WS.Add(WS346);

			DebugLocation(430, 12);
			PushFollow(Follow._expression_in_case_else2772);
			expression347=expression();
			PopFollow();

			stream_expression.Add(expression347.Tree);


			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 431:2: -> ^( T_CASE_ELSE expression )
			{
				DebugLocation(431, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:431:5: ^( T_CASE_ELSE expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(431, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CASE_ELSE, "T_CASE_ELSE"), root_1);

				DebugLocation(431, 19);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("case_else", 60);
			LeaveRule("case_else", 60);
			LeaveRule_case_else();
	    }
	 	DebugLocation(432, 1);
		} finally { DebugExitRule(GrammarFileName, "case_else"); }
		return retval;

	}
	// $ANTLR end "case_else"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _WS_in_parse356 = new BitSet(new ulong[]{0x180000002280000UL,0x0UL,0x80UL});
		public static readonly BitSet _commands_in_parse360 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000UL});
		public static readonly BitSet _WS_in_parse362 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_parse367 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _command_in_commands390 = new BitSet(new ulong[]{0x180000002280002UL,0x0UL,0x80004080UL});
		public static readonly BitSet _WS_in_commands393 = new BitSet(new ulong[]{0x180000002280000UL,0x0UL,0x80000080UL});
		public static readonly BitSet _159_in_commands397 = new BitSet(new ulong[]{0x180000002280000UL,0x0UL,0x4080UL});
		public static readonly BitSet _WS_in_commands399 = new BitSet(new ulong[]{0x180000002280000UL,0x0UL,0x80UL});
		public static readonly BitSet _command_in_commands404 = new BitSet(new ulong[]{0x180000002280002UL,0x0UL,0x80004080UL});
		public static readonly BitSet _WS_in_commands409 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _159_in_commands412 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _select_command_in_command432 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _use_command_in_command437 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declare_command_in_command442 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_command_in_command447 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _create_view_command_in_command452 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _drop_view_command_in_command457 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SELECT_in_select_command471 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000UL});
		public static readonly BitSet _WS_in_select_command474 = new BitSet(new ulong[]{0x1000020UL});
		public static readonly BitSet _distinct_clause_in_select_command476 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000UL});
		public static readonly BitSet _WS_in_select_command481 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _top_clause_in_select_command483 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000UL});
		public static readonly BitSet _WS_in_select_command487 = new BitSet(new ulong[]{0x9A0060002004C000UL,0x0UL,0x2800200UL});
		public static readonly BitSet _column_list_in_select_command489 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4000UL});
		public static readonly BitSet _WS_in_select_command492 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _into_clause_in_select_command494 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4000UL});
		public static readonly BitSet _WS_in_select_command499 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _from_clause_in_select_command501 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4000UL});
		public static readonly BitSet _WS_in_select_command506 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _where_clause_in_select_command508 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4000UL});
		public static readonly BitSet _WS_in_select_command513 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _groupby_clause_in_select_command515 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4000UL});
		public static readonly BitSet _WS_in_select_command520 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _orderby_clause_in_select_command522 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DISTINCT_in_distinct_clause567 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ALL_in_distinct_clause576 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOP_in_top_clause592 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000UL});
		public static readonly BitSet _WS_in_top_clause594 = new BitSet(new ulong[]{0x9A0060002004C000UL,0x0UL,0x800200UL});
		public static readonly BitSet _expression_in_top_clause596 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _column_in_column_list618 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8004000UL});
		public static readonly BitSet _WS_in_column_list621 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _155_in_column_list624 = new BitSet(new ulong[]{0x9A0060002004C000UL,0x0UL,0x2804200UL});
		public static readonly BitSet _WS_in_column_list626 = new BitSet(new ulong[]{0x9A0060002004C000UL,0x0UL,0x2800200UL});
		public static readonly BitSet _column_in_column_list629 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8004000UL});
		public static readonly BitSet _all_columns_in_column653 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_column658 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4000UL});
		public static readonly BitSet _WS_in_column661 = new BitSet(new ulong[]{0x200000000000000UL});
		public static readonly BitSet _SIMPLE_FILE_in_column663 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _table_alias_in_all_columns688 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20004000UL});
		public static readonly BitSet _WS_in_all_columns690 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20000000UL});
		public static readonly BitSet _157_in_all_columns693 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2004000UL});
		public static readonly BitSet _WS_in_all_columns695 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000UL});
		public static readonly BitSet _153_in_all_columns700 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INTO_in_into_clause720 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000UL});
		public static readonly BitSet _WS_in_into_clause722 = new BitSet(new ulong[]{0x200000000000000UL,0x0UL,0x4000000000UL});
		public static readonly BitSet _file_in_into_clause724 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FROM_in_from_clause744 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000UL});
		public static readonly BitSet _WS_in_from_clause746 = new BitSet(new ulong[]{0x8A00000000000000UL,0x0UL,0x4000800000UL});
		public static readonly BitSet _from_clause_item_in_from_clause748 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8004000UL});
		public static readonly BitSet _WS_in_from_clause751 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _155_in_from_clause754 = new BitSet(new ulong[]{0x8A00000000000000UL,0x0UL,0x4000804000UL});
		public static readonly BitSet _WS_in_from_clause756 = new BitSet(new ulong[]{0x8A00000000000000UL,0x0UL,0x4000800000UL});
		public static readonly BitSet _from_clause_item_in_from_clause759 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8004000UL});
		public static readonly BitSet _WS_in_from_clause764 = new BitSet(new ulong[]{0x200000000000000UL});
		public static readonly BitSet _table_alias_in_from_clause766 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_from_clause_item793 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _file_in_from_clause_item806 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _subquery_in_from_clause_item811 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _view_name_in_from_clause_item816 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _151_in_subquery828 = new BitSet(new ulong[]{0x80000000000000UL,0x0UL,0x4000UL});
		public static readonly BitSet _WS_in_subquery830 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _select_command_in_subquery833 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1004000UL});
		public static readonly BitSet _WS_in_subquery835 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000UL});
		public static readonly BitSet _152_in_subquery838 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _166_in_file857 = new BitSet(new ulong[]{0x800000000000000UL,0x0UL,0x4200UL});
		public static readonly BitSet _WS_in_file859 = new BitSet(new ulong[]{0x800000000000000UL,0x0UL,0x200UL});
		public static readonly BitSet _file_spec_in_file862 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000004000UL});
		public static readonly BitSet _WS_in_file865 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000UL});
		public static readonly BitSet _file_option_in_file867 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000004000UL});
		public static readonly BitSet _WS_in_file871 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000000UL});
		public static readonly BitSet _167_in_file874 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SIMPLE_FILE_in_file891 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _string_in_file_spec910 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_in_file_spec915 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _156_in_file_option927 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _file_option_name_in_file_option929 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800004000UL});
		public static readonly BitSet _WS_in_file_option933 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _163_in_file_option936 = new BitSet(new ulong[]{0x8800400000000000UL,0x0UL,0x4200UL});
		public static readonly BitSet _WS_in_file_option938 = new BitSet(new ulong[]{0x8800400000000000UL,0x0UL,0x200UL});
		public static readonly BitSet _file_option_value_in_file_option941 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_file_option_name965 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_file_option_value977 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_file_option_value981 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_file_option_value985 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_in_file_option_value989 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHERE_in_where_clause1001 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000UL});
		public static readonly BitSet _WS_in_where_clause1003 = new BitSet(new ulong[]{0x9A0060002004C000UL,0x0UL,0x800200UL});
		public static readonly BitSet _expression_in_where_clause1005 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GROUP_in_groupby_clause1024 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000UL});
		public static readonly BitSet _WS_in_groupby_clause1026 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _BY_in_groupby_clause1028 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000UL});
		public static readonly BitSet _WS_in_groupby_clause1030 = new BitSet(new ulong[]{0x9A0060002004C000UL,0x0UL,0x800200UL});
		public static readonly BitSet _orderby_column_list_in_groupby_clause1032 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ORDER_in_orderby_clause1053 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000UL});
		public static readonly BitSet _WS_in_orderby_clause1055 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _BY_in_orderby_clause1057 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000UL});
		public static readonly BitSet _WS_in_orderby_clause1059 = new BitSet(new ulong[]{0x9A0060002004C000UL,0x0UL,0x800200UL});
		public static readonly BitSet _orderby_column_list_in_orderby_clause1061 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _orderby_column_in_orderby_column_list1082 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8004000UL});
		public static readonly BitSet _WS_in_orderby_column_list1085 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _155_in_orderby_column_list1088 = new BitSet(new ulong[]{0x9A0060002004C000UL,0x0UL,0x804200UL});
		public static readonly BitSet _WS_in_orderby_column_list1090 = new BitSet(new ulong[]{0x9A0060002004C000UL,0x0UL,0x800200UL});
		public static readonly BitSet _orderby_column_in_orderby_column_list1093 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8004000UL});
		public static readonly BitSet _expression_in_orderby_column1113 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4000UL});
		public static readonly BitSet _WS_in_orderby_column1116 = new BitSet(new ulong[]{0x4000000400200UL});
		public static readonly BitSet _orderby_direction_in_orderby_column1118 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASC_in_orderby_direction1143 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DESC_in_orderby_direction1152 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ORIG_in_orderby_direction1161 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _USE_in_use_command1179 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000UL});
		public static readonly BitSet _WS_in_use_command1181 = new BitSet(new ulong[]{0x200000000000000UL,0x0UL,0x4000000000UL});
		public static readonly BitSet _file_in_use_command1183 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DECLARE_in_declare_command1205 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000UL});
		public static readonly BitSet _WS_in_declare_command1207 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _declaration_list_in_declare_command1209 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_in_declaration_list1226 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8004000UL});
		public static readonly BitSet _WS_in_declaration_list1229 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _155_in_declaration_list1232 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4200UL});
		public static readonly BitSet _WS_in_declaration_list1234 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _declaration_in_declaration_list1237 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8004000UL});
		public static readonly BitSet _variable_in_declaration1261 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000UL});
		public static readonly BitSet _WS_in_declaration1263 = new BitSet(new ulong[]{0x8000000000000100UL});
		public static readonly BitSet _AS_in_declaration1266 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000UL});
		public static readonly BitSet _WS_in_declaration1268 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _datatype_in_declaration1272 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CREATE_in_create_view_command1297 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000UL});
		public static readonly BitSet _WS_in_create_view_command1299 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400UL});
		public static readonly BitSet _VIEW_in_create_view_command1301 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000UL});
		public static readonly BitSet _WS_in_create_view_command1303 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _view_name_in_create_view_command1305 = new BitSet(new ulong[]{0x0UL,0x0UL,0x804000UL});
		public static readonly BitSet _WS_in_create_view_command1308 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000UL});
		public static readonly BitSet _151_in_create_view_command1311 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _declaration_list_in_create_view_command1313 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000UL});
		public static readonly BitSet _152_in_create_view_command1315 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000UL});
		public static readonly BitSet _WS_in_create_view_command1319 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _AS_in_create_view_command1321 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000UL});
		public static readonly BitSet _WS_in_create_view_command1323 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _select_command_in_create_view_command1325 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DROP_in_drop_view_command1351 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000UL});
		public static readonly BitSet _WS_in_drop_view_command1353 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400UL});
		public static readonly BitSet _VIEW_in_drop_view_command1355 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000UL});
		public static readonly BitSet _WS_in_drop_view_command1357 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _view_name_in_drop_view_command1359 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_view_name1379 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SET_in_set_command1403 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000UL});
		public static readonly BitSet _WS_in_set_command1405 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _variable_in_set_command1407 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800004000UL});
		public static readonly BitSet _WS_in_set_command1409 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _163_in_set_command1412 = new BitSet(new ulong[]{0x9A0060002004C000UL,0x0UL,0x804200UL});
		public static readonly BitSet _WS_in_set_command1414 = new BitSet(new ulong[]{0x9A0060002004C000UL,0x0UL,0x800200UL});
		public static readonly BitSet _expression_in_set_command1417 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_expression_list1442 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8004000UL});
		public static readonly BitSet _WS_in_expression_list1445 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _155_in_expression_list1448 = new BitSet(new ulong[]{0x9A0060002004C000UL,0x0UL,0x804200UL});
		public static readonly BitSet _WS_in_expression_list1450 = new BitSet(new ulong[]{0x9A0060002004C000UL,0x0UL,0x800200UL});
		public static readonly BitSet _expression_in_expression_list1453 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8004000UL});
		public static readonly BitSet _expression_list_in_expression_list_or_select_command1476 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _select_command_in_expression_list_or_select_command1480 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_7_in_expression1492 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_6_in_expression_71508 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4000UL});
		public static readonly BitSet _WS_in_expression_71515 = new BitSet(new ulong[]{0x12A1000000800UL,0x0UL,0x3F001C0000UL});
		public static readonly BitSet _op_7_in_expression_71520 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000UL});
		public static readonly BitSet _WS_in_expression_71522 = new BitSet(new ulong[]{0x9A0060002004C000UL,0x0UL,0x800200UL});
		public static readonly BitSet _expression_6_in_expression_71526 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4000UL});
		public static readonly BitSet _IN_in_expression_71545 = new BitSet(new ulong[]{0x0UL,0x0UL,0x804000UL});
		public static readonly BitSet _WS_in_expression_71547 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000UL});
		public static readonly BitSet _151_in_expression_71550 = new BitSet(new ulong[]{0x9A8060002004C000UL,0x0UL,0x804200UL});
		public static readonly BitSet _WS_in_expression_71552 = new BitSet(new ulong[]{0x9A8060002004C000UL,0x0UL,0x800200UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_71555 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1004000UL});
		public static readonly BitSet _WS_in_expression_71557 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000UL});
		public static readonly BitSet _152_in_expression_71560 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4000UL});
		public static readonly BitSet _NOT_in_expression_71578 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000UL});
		public static readonly BitSet _WS_in_expression_71580 = new BitSet(new ulong[]{0x1000000000UL});
		public static readonly BitSet _IN_in_expression_71582 = new BitSet(new ulong[]{0x0UL,0x0UL,0x804000UL});
		public static readonly BitSet _WS_in_expression_71584 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000UL});
		public static readonly BitSet _151_in_expression_71587 = new BitSet(new ulong[]{0x9A8060002004C000UL,0x0UL,0x804200UL});
		public static readonly BitSet _WS_in_expression_71589 = new BitSet(new ulong[]{0x9A8060002004C000UL,0x0UL,0x800200UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_71593 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1004000UL});
		public static readonly BitSet _WS_in_expression_71596 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000UL});
		public static readonly BitSet _152_in_expression_71599 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4000UL});
		public static readonly BitSet _op_4_in_expression_71617 = new BitSet(new ulong[]{0x400000000000080UL,0x0UL,0x4000UL});
		public static readonly BitSet _WS_in_expression_71619 = new BitSet(new ulong[]{0x400000000000080UL});
		public static readonly BitSet _SOME_in_expression_71623 = new BitSet(new ulong[]{0x0UL,0x0UL,0x804000UL});
		public static readonly BitSet _ANY_in_expression_71627 = new BitSet(new ulong[]{0x0UL,0x0UL,0x804000UL});
		public static readonly BitSet _WS_in_expression_71630 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000UL});
		public static readonly BitSet _151_in_expression_71633 = new BitSet(new ulong[]{0x9A8060002004C000UL,0x0UL,0x800200UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_71635 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000UL});
		public static readonly BitSet _152_in_expression_71637 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4000UL});
		public static readonly BitSet _op_4_in_expression_71657 = new BitSet(new ulong[]{0x20UL,0x0UL,0x4000UL});
		public static readonly BitSet _WS_in_expression_71659 = new BitSet(new ulong[]{0x20UL});
		public static readonly BitSet _ALL_in_expression_71662 = new BitSet(new ulong[]{0x0UL,0x0UL,0x804000UL});
		public static readonly BitSet _WS_in_expression_71664 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000UL});
		public static readonly BitSet _151_in_expression_71667 = new BitSet(new ulong[]{0x9A8060002004C000UL,0x0UL,0x800200UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_71669 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000UL});
		public static readonly BitSet _152_in_expression_71671 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4000UL});
		public static readonly BitSet _OR_in_op_71701 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LIKE_in_op_71710 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_71719 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000UL});
		public static readonly BitSet _WS_in_op_71721 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _LIKE_in_op_71723 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MATCH_in_op_71732 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_71741 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000UL});
		public static readonly BitSet _WS_in_op_71743 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _MATCH_in_op_71745 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BETWEEN_in_op_71754 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_71763 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000UL});
		public static readonly BitSet _WS_in_op_71765 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _BETWEEN_in_op_71767 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_5_in_expression_61786 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4000UL});
		public static readonly BitSet _WS_in_expression_61793 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _op_6_in_expression_61795 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000UL});
		public static readonly BitSet _WS_in_expression_61797 = new BitSet(new ulong[]{0x9A0060002004C000UL,0x0UL,0x800200UL});
		public static readonly BitSet _expression_5_in_expression_61801 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4000UL});
		public static readonly BitSet _AND_in_op_61829 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _op_5_in_expression_51847 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000UL});
		public static readonly BitSet _WS_in_expression_51849 = new BitSet(new ulong[]{0x9A0060002004C000UL,0x0UL,0x800200UL});
		public static readonly BitSet _expression_5_in_expression_51851 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_4_in_expression_51866 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_51877 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_3_in_expression_41896 = new BitSet(new ulong[]{0x2UL,0x0UL,0x3F001C4000UL});
		public static readonly BitSet _WS_in_expression_41903 = new BitSet(new ulong[]{0x0UL,0x0UL,0x3F001C0000UL});
		public static readonly BitSet _op_4_in_expression_41906 = new BitSet(new ulong[]{0x9A0040002004C000UL,0x0UL,0x804200UL});
		public static readonly BitSet _WS_in_expression_41908 = new BitSet(new ulong[]{0x9A0040002004C000UL,0x0UL,0x800200UL});
		public static readonly BitSet _expression_3_in_expression_41913 = new BitSet(new ulong[]{0x2UL,0x0UL,0x3F001C4000UL});
		public static readonly BitSet _163_in_op_41939 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _165_in_op_41948 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _161_in_op_41958 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _162_in_op_41968 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _147_in_op_41977 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _148_in_op_41986 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _146_in_op_41995 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _164_in_op_42004 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _160_in_op_42014 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_2_in_expression_32033 = new BitSet(new ulong[]{0x2UL,0x0UL,0x30014404000UL});
		public static readonly BitSet _WS_in_expression_32040 = new BitSet(new ulong[]{0x0UL,0x0UL,0x30014400000UL});
		public static readonly BitSet _op_3_in_expression_32043 = new BitSet(new ulong[]{0x9A0040002004C000UL,0x0UL,0x804200UL});
		public static readonly BitSet _WS_in_expression_32045 = new BitSet(new ulong[]{0x9A0040002004C000UL,0x0UL,0x800200UL});
		public static readonly BitSet _expression_2_in_expression_32050 = new BitSet(new ulong[]{0x2UL,0x0UL,0x30014404000UL});
		public static readonly BitSet _154_in_op_32076 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _156_in_op_32085 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _150_in_op_32094 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _169_in_op_32103 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _168_in_op_32112 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_1_in_expression_22134 = new BitSet(new ulong[]{0x2UL,0x0UL,0x42204000UL});
		public static readonly BitSet _WS_in_expression_22141 = new BitSet(new ulong[]{0x0UL,0x0UL,0x42200000UL});
		public static readonly BitSet _op_2_in_expression_22144 = new BitSet(new ulong[]{0x9A0040002004C000UL,0x0UL,0x804200UL});
		public static readonly BitSet _WS_in_expression_22146 = new BitSet(new ulong[]{0x9A0040002004C000UL,0x0UL,0x800200UL});
		public static readonly BitSet _expression_1_in_expression_22151 = new BitSet(new ulong[]{0x2UL,0x0UL,0x42204000UL});
		public static readonly BitSet _153_in_op_22177 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _158_in_op_22186 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _149_in_op_22195 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _151_in_expression_12213 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40014004000UL});
		public static readonly BitSet _WS_in_expression_12215 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40014000000UL});
		public static readonly BitSet _op_1_in_expression_12218 = new BitSet(new ulong[]{0x9A0040002004C000UL,0x0UL,0x804200UL});
		public static readonly BitSet _WS_in_expression_12220 = new BitSet(new ulong[]{0x9A0040002004C000UL,0x0UL,0x800200UL});
		public static readonly BitSet _expression_1_in_expression_12223 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1004000UL});
		public static readonly BitSet _WS_in_expression_12225 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000UL});
		public static readonly BitSet _152_in_expression_12228 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_atom_in_expression_12245 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _170_in_op_12255 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _154_in_op_12265 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _156_in_op_12274 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_expression_atom2289 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _string_in_expression_atom2302 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SYSTEMVAR_in_expression_atom2307 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_in_expression_atom2320 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _subquery_in_expression_atom2325 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _151_in_expression_atom2330 = new BitSet(new ulong[]{0x9A0060002004C000UL,0x0UL,0x800200UL});
		public static readonly BitSet _expression_in_expression_atom2332 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000UL});
		public static readonly BitSet _152_in_expression_atom2334 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functioncall_or_column_in_expression_atom2343 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conversion_in_expression_atom2348 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _case_in_expression_atom2353 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXISTS_in_expression_atom2358 = new BitSet(new ulong[]{0x0UL,0x0UL,0x804000UL});
		public static readonly BitSet _WS_in_expression_atom2360 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000UL});
		public static readonly BitSet _151_in_expression_atom2363 = new BitSet(new ulong[]{0x80000000000000UL,0x0UL,0x4000UL});
		public static readonly BitSet _WS_in_expression_atom2365 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _select_command_in_expression_atom2368 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1004000UL});
		public static readonly BitSet _WS_in_expression_atom2370 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000UL});
		public static readonly BitSet _152_in_expression_atom2373 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_functioncall_or_column2393 = new BitSet(new ulong[]{0x0UL,0x0UL,0x804000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2395 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000UL});
		public static readonly BitSet _151_in_functioncall_or_column2398 = new BitSet(new ulong[]{0x9A0060002004C000UL,0x0UL,0x1804200UL});
		public static readonly BitSet _WS_in_functioncall_or_column2400 = new BitSet(new ulong[]{0x9A0060002004C000UL,0x0UL,0x1800200UL});
		public static readonly BitSet _expression_in_functioncall_or_column2404 = new BitSet(new ulong[]{0x0UL,0x0UL,0x9004000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2406 = new BitSet(new ulong[]{0x0UL,0x0UL,0x9000000UL});
		public static readonly BitSet _155_in_functioncall_or_column2410 = new BitSet(new ulong[]{0x9A0060002004C000UL,0x0UL,0x804200UL});
		public static readonly BitSet _WS_in_functioncall_or_column2412 = new BitSet(new ulong[]{0x9A0060002004C000UL,0x0UL,0x800200UL});
		public static readonly BitSet _expression_in_functioncall_or_column2415 = new BitSet(new ulong[]{0x0UL,0x0UL,0x9004000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2417 = new BitSet(new ulong[]{0x0UL,0x0UL,0x9000000UL});
		public static readonly BitSet _152_in_functioncall_or_column2424 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_functioncall_or_column2440 = new BitSet(new ulong[]{0x0UL,0x0UL,0x804000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2442 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000UL});
		public static readonly BitSet _151_in_functioncall_or_column2445 = new BitSet(new ulong[]{0x200000000000000UL,0x0UL,0x2004000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2447 = new BitSet(new ulong[]{0x200000000000000UL,0x0UL,0x2000000UL});
		public static readonly BitSet _all_columns_in_functioncall_or_column2450 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1004000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2452 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000UL});
		public static readonly BitSet _152_in_functioncall_or_column2455 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _table_alias_in_functioncall_or_column2473 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20004000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2475 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20000000UL});
		public static readonly BitSet _157_in_functioncall_or_column2478 = new BitSet(new ulong[]{0x200000000000000UL,0x0UL,0x4000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2480 = new BitSet(new ulong[]{0x200000000000000UL});
		public static readonly BitSet _column_name_in_functioncall_or_column2485 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SIMPLE_FILE_in_column_name2508 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SIMPLE_FILE_in_table_alias2519 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CONVERT_in_conversion2539 = new BitSet(new ulong[]{0x0UL,0x0UL,0x804000UL});
		public static readonly BitSet _WS_in_conversion2541 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000UL});
		public static readonly BitSet _151_in_conversion2544 = new BitSet(new ulong[]{0x8000000000000000UL,0x0UL,0x4000UL});
		public static readonly BitSet _WS_in_conversion2546 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _TOKEN_in_conversion2549 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8004000UL});
		public static readonly BitSet _WS_in_conversion2551 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _155_in_conversion2554 = new BitSet(new ulong[]{0x9A0060002004C000UL,0x0UL,0x804200UL});
		public static readonly BitSet _WS_in_conversion2556 = new BitSet(new ulong[]{0x9A0060002004C000UL,0x0UL,0x800200UL});
		public static readonly BitSet _expression_in_conversion2559 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1004000UL});
		public static readonly BitSet _WS_in_conversion2561 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000UL});
		public static readonly BitSet _152_in_conversion2564 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CAST_in_conversion2579 = new BitSet(new ulong[]{0x0UL,0x0UL,0x804000UL});
		public static readonly BitSet _WS_in_conversion2581 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000UL});
		public static readonly BitSet _151_in_conversion2584 = new BitSet(new ulong[]{0x9A0060002004C000UL,0x0UL,0x804200UL});
		public static readonly BitSet _WS_in_conversion2586 = new BitSet(new ulong[]{0x9A0060002004C000UL,0x0UL,0x800200UL});
		public static readonly BitSet _expression_in_conversion2589 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000UL});
		public static readonly BitSet _WS_in_conversion2591 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _AS_in_conversion2593 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000UL});
		public static readonly BitSet _WS_in_conversion2595 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _datatype_in_conversion2597 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1004000UL});
		public static readonly BitSet _WS_in_conversion2599 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000UL});
		public static readonly BitSet _152_in_conversion2602 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_string2622 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_datatype2642 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VARIABLE_in_variable2654 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CASE_in_case2674 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000UL});
		public static readonly BitSet _WS_in_case2676 = new BitSet(new ulong[]{0x9A0060003804C000UL,0x0UL,0x801200UL});
		public static readonly BitSet _expression_in_case2679 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000UL});
		public static readonly BitSet _WS_in_case2681 = new BitSet(new ulong[]{0x18000000UL,0x0UL,0x1000UL});
		public static readonly BitSet _case_when_in_case2686 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000UL});
		public static readonly BitSet _WS_in_case2688 = new BitSet(new ulong[]{0x18000000UL,0x0UL,0x1000UL});
		public static readonly BitSet _case_else_in_case2693 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000UL});
		public static readonly BitSet _WS_in_case2695 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _END_in_case2699 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHEN_in_case_when2727 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000UL});
		public static readonly BitSet _WS_in_case_when2729 = new BitSet(new ulong[]{0x9A0060002004C000UL,0x0UL,0x800200UL});
		public static readonly BitSet _expression_in_case_when2733 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000UL});
		public static readonly BitSet _WS_in_case_when2735 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _THEN_in_case_when2737 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000UL});
		public static readonly BitSet _WS_in_case_when2739 = new BitSet(new ulong[]{0x9A0060002004C000UL,0x0UL,0x800200UL});
		public static readonly BitSet _expression_in_case_when2743 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ELSE_in_case_else2768 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000UL});
		public static readonly BitSet _WS_in_case_else2770 = new BitSet(new ulong[]{0x9A0060002004C000UL,0x0UL,0x800200UL});
		public static readonly BitSet _expression_in_case_else2772 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  FxGqlLib 
