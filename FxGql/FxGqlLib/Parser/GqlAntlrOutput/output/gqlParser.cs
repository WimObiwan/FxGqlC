//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g 2012-07-16 14:31:38

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591


// `XXX' does not need a CLSCompliant attribute because the assembly is not marked as CLS-compliant (CS3021)
#pragma warning disable 3021
// The private field `XXX' is assigned but its value is never used (CS0414)
#pragma warning disable 414


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  FxGqlLib 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class gqlParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "A", "ALL", "AND", "ANY", "AS", "ASC", "B", "BETWEEN", "BY", "C", "CASE", "CAST", "COMMENT_BLOCK", "COMMENT_LINE", "CONVERT", "COUNT", "CREATE", "D", "DECLARE", "DESC", "DIGIT", "DISTINCT", "DROP", "E", "ELSE", "END", "EXISTS", "F", "FROM", "G", "GROUP", "H", "HAVING", "I", "IN", "INTO", "J", "K", "L", "LIKE", "M", "MATCH", "N", "NOT", "NUMBER", "O", "OR", "ORDER", "ORIG", "P", "Q", "R", "S", "SELECT", "SET", "SIMPLE_FILE", "SOME", "STRING", "SYSTEMVAR", "T", "TABLE", "THEN", "TOKEN", "TOP", "T_ALL", "T_ALLCOLUMNS", "T_AND", "T_ANY", "T_BETWEEN", "T_BITWISE_AND", "T_BITWISE_NOT", "T_BITWISE_OR", "T_BITWISE_XOR", "T_CASE", "T_CASE_ELSE", "T_CASE_WHEN", "T_COLUMN", "T_COLUMNLIST", "T_CONVERT", "T_COUNT", "T_CREATE_VIEW", "T_DECLARATION", "T_DECLARE", "T_DISTINCT", "T_DISTINCTCOUNT", "T_DIVIDE", "T_DROP_TABLE", "T_DROP_VIEW", "T_EQUAL", "T_EXISTS", "T_EXPRESSIONLIST", "T_FILE", "T_FILEOPTION", "T_FROM", "T_FUNCTIONCALL", "T_GREATER", "T_GROUPBY", "T_GROUPBY_ORIG", "T_HAVING", "T_IN", "T_INTEGER", "T_INTO", "T_LESS", "T_LIKE", "T_MATCH", "T_MINUS", "T_MODULO", "T_NOT", "T_NOTBETWEEN", "T_NOTEQUAL", "T_NOTGREATER", "T_NOTIN", "T_NOTLESS", "T_NOTLIKE", "T_NOTMATCH", "T_OP_BINARY", "T_OP_UNARY", "T_OR", "T_ORDERBY", "T_ORDERBY_ASC", "T_ORDERBY_COLUMN", "T_ORDERBY_DESC", "T_ORDERBY_ORIG", "T_PLUS", "T_PRODUCT", "T_ROOT", "T_SELECT", "T_SET_VARIABLE", "T_STRING", "T_SUBQUERY", "T_SYSTEMVAR", "T_TABLE_ALIAS", "T_TOP", "T_USE", "T_VARIABLE", "T_VIEW_NAME", "T_WHERE", "U", "USE", "V", "VARIABLE", "VIEW", "W", "WHEN", "WHERE", "WS", "X", "Y", "Z", "'!<'", "'!='", "'!>'", "'%'", "'&'", "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", "';'", "'<'", "'<='", "'<>'", "'='", "'>'", "'>='", "'['", "']'", "'^'", "'|'", "'~'"
	};
	public const int EOF=-1;
	public const int T__153=153;
	public const int T__154=154;
	public const int T__155=155;
	public const int T__156=156;
	public const int T__157=157;
	public const int T__158=158;
	public const int T__159=159;
	public const int T__160=160;
	public const int T__161=161;
	public const int T__162=162;
	public const int T__163=163;
	public const int T__164=164;
	public const int T__165=165;
	public const int T__166=166;
	public const int T__167=167;
	public const int T__168=168;
	public const int T__169=169;
	public const int T__170=170;
	public const int T__171=171;
	public const int T__172=172;
	public const int T__173=173;
	public const int T__174=174;
	public const int T__175=175;
	public const int T__176=176;
	public const int T__177=177;
	public const int A=4;
	public const int ALL=5;
	public const int AND=6;
	public const int ANY=7;
	public const int AS=8;
	public const int ASC=9;
	public const int B=10;
	public const int BETWEEN=11;
	public const int BY=12;
	public const int C=13;
	public const int CASE=14;
	public const int CAST=15;
	public const int COMMENT_BLOCK=16;
	public const int COMMENT_LINE=17;
	public const int CONVERT=18;
	public const int COUNT=19;
	public const int CREATE=20;
	public const int D=21;
	public const int DECLARE=22;
	public const int DESC=23;
	public const int DIGIT=24;
	public const int DISTINCT=25;
	public const int DROP=26;
	public const int E=27;
	public const int ELSE=28;
	public const int END=29;
	public const int EXISTS=30;
	public const int F=31;
	public const int FROM=32;
	public const int G=33;
	public const int GROUP=34;
	public const int H=35;
	public const int HAVING=36;
	public const int I=37;
	public const int IN=38;
	public const int INTO=39;
	public const int J=40;
	public const int K=41;
	public const int L=42;
	public const int LIKE=43;
	public const int M=44;
	public const int MATCH=45;
	public const int N=46;
	public const int NOT=47;
	public const int NUMBER=48;
	public const int O=49;
	public const int OR=50;
	public const int ORDER=51;
	public const int ORIG=52;
	public const int P=53;
	public const int Q=54;
	public const int R=55;
	public const int S=56;
	public const int SELECT=57;
	public const int SET=58;
	public const int SIMPLE_FILE=59;
	public const int SOME=60;
	public const int STRING=61;
	public const int SYSTEMVAR=62;
	public const int T=63;
	public const int TABLE=64;
	public const int THEN=65;
	public const int TOKEN=66;
	public const int TOP=67;
	public const int T_ALL=68;
	public const int T_ALLCOLUMNS=69;
	public const int T_AND=70;
	public const int T_ANY=71;
	public const int T_BETWEEN=72;
	public const int T_BITWISE_AND=73;
	public const int T_BITWISE_NOT=74;
	public const int T_BITWISE_OR=75;
	public const int T_BITWISE_XOR=76;
	public const int T_CASE=77;
	public const int T_CASE_ELSE=78;
	public const int T_CASE_WHEN=79;
	public const int T_COLUMN=80;
	public const int T_COLUMNLIST=81;
	public const int T_CONVERT=82;
	public const int T_COUNT=83;
	public const int T_CREATE_VIEW=84;
	public const int T_DECLARATION=85;
	public const int T_DECLARE=86;
	public const int T_DISTINCT=87;
	public const int T_DISTINCTCOUNT=88;
	public const int T_DIVIDE=89;
	public const int T_DROP_TABLE=90;
	public const int T_DROP_VIEW=91;
	public const int T_EQUAL=92;
	public const int T_EXISTS=93;
	public const int T_EXPRESSIONLIST=94;
	public const int T_FILE=95;
	public const int T_FILEOPTION=96;
	public const int T_FROM=97;
	public const int T_FUNCTIONCALL=98;
	public const int T_GREATER=99;
	public const int T_GROUPBY=100;
	public const int T_GROUPBY_ORIG=101;
	public const int T_HAVING=102;
	public const int T_IN=103;
	public const int T_INTEGER=104;
	public const int T_INTO=105;
	public const int T_LESS=106;
	public const int T_LIKE=107;
	public const int T_MATCH=108;
	public const int T_MINUS=109;
	public const int T_MODULO=110;
	public const int T_NOT=111;
	public const int T_NOTBETWEEN=112;
	public const int T_NOTEQUAL=113;
	public const int T_NOTGREATER=114;
	public const int T_NOTIN=115;
	public const int T_NOTLESS=116;
	public const int T_NOTLIKE=117;
	public const int T_NOTMATCH=118;
	public const int T_OP_BINARY=119;
	public const int T_OP_UNARY=120;
	public const int T_OR=121;
	public const int T_ORDERBY=122;
	public const int T_ORDERBY_ASC=123;
	public const int T_ORDERBY_COLUMN=124;
	public const int T_ORDERBY_DESC=125;
	public const int T_ORDERBY_ORIG=126;
	public const int T_PLUS=127;
	public const int T_PRODUCT=128;
	public const int T_ROOT=129;
	public const int T_SELECT=130;
	public const int T_SET_VARIABLE=131;
	public const int T_STRING=132;
	public const int T_SUBQUERY=133;
	public const int T_SYSTEMVAR=134;
	public const int T_TABLE_ALIAS=135;
	public const int T_TOP=136;
	public const int T_USE=137;
	public const int T_VARIABLE=138;
	public const int T_VIEW_NAME=139;
	public const int T_WHERE=140;
	public const int U=141;
	public const int USE=142;
	public const int V=143;
	public const int VARIABLE=144;
	public const int VIEW=145;
	public const int W=146;
	public const int WHEN=147;
	public const int WHERE=148;
	public const int WS=149;
	public const int X=150;
	public const int Y=151;
	public const int Z=152;

	#if ANTLR_DEBUG
		private static readonly bool[] decisionCanBacktrack =
			new bool[]
			{
				false, // invalid decision
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false
			};
	#else
		private static readonly bool[] decisionCanBacktrack = new bool[0];
	#endif
	public gqlParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public gqlParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}
	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return gqlParser.tokenNames; } }
	public override string GrammarFileName { get { return "C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g"; } }


	[Conditional("ANTLR_TRACE")]
	protected virtual void OnCreated() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

	#region Rules

	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_parse() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_parse() {}

	// $ANTLR start "parse"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:104:1: parse : ( WS )? ( commands ( WS )? )? EOF -> ^( T_ROOT ( commands )? ) ;
	[GrammarRule("parse")]
	private AstParserRuleReturnScope<object, IToken> parse()
	{
		EnterRule_parse();
		EnterRule("parse", 1);
		TraceIn("parse", 1);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS1 = default(IToken);
	    IToken WS3 = default(IToken);
	    IToken EOF4 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> commands2 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS1_tree = default(object);
	    object WS3_tree = default(object);
	    object EOF4_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
	    RewriteRuleSubtreeStream stream_commands=new RewriteRuleSubtreeStream(adaptor,"rule commands");
		try { DebugEnterRule(GrammarFileName, "parse");
		DebugLocation(104, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:105:2: ( ( WS )? ( commands ( WS )? )? EOF -> ^( T_ROOT ( commands )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:105:4: ( WS )? ( commands ( WS )? )? EOF
			{
			DebugLocation(105, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:105:4: ( WS )?
			int alt1=2;
			try { DebugEnterSubRule(1);
			try { DebugEnterDecision(1, decisionCanBacktrack[1]);
			int LA1_0 = input.LA(1);

			if ((LA1_0==WS))
			{
				alt1 = 1;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:105:4: WS
				{
				DebugLocation(105, 4);
				WS1=(IToken)Match(input,WS,Follow._WS_in_parse372);  
				stream_WS.Add(WS1);


				}
				break;

			}
			} finally { DebugExitSubRule(1); }

			DebugLocation(105, 8);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:105:8: ( commands ( WS )? )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, decisionCanBacktrack[3]);
			int LA3_0 = input.LA(1);

			if ((LA3_0==CREATE||LA3_0==DECLARE||LA3_0==DROP||(LA3_0>=SELECT && LA3_0<=SET)||LA3_0==USE))
			{
				alt3 = 1;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:105:9: commands ( WS )?
				{
				DebugLocation(105, 9);
				PushFollow(Follow._commands_in_parse376);
				commands2=commands();
				PopFollow();

				stream_commands.Add(commands2.Tree);
				DebugLocation(105, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:105:18: ( WS )?
				int alt2=2;
				try { DebugEnterSubRule(2);
				try { DebugEnterDecision(2, decisionCanBacktrack[2]);
				int LA2_0 = input.LA(1);

				if ((LA2_0==WS))
				{
					alt2 = 1;
				}
				} finally { DebugExitDecision(2); }
				switch (alt2)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:105:18: WS
					{
					DebugLocation(105, 18);
					WS3=(IToken)Match(input,WS,Follow._WS_in_parse378);  
					stream_WS.Add(WS3);


					}
					break;

				}
				} finally { DebugExitSubRule(2); }


				}
				break;

			}
			} finally { DebugExitSubRule(3); }

			DebugLocation(105, 24);
			EOF4=(IToken)Match(input,EOF,Follow._EOF_in_parse383);  
			stream_EOF.Add(EOF4);



			{
			// AST REWRITE
			// elements: commands
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 106:2: -> ^( T_ROOT ( commands )? )
			{
				DebugLocation(106, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:106:5: ^( T_ROOT ( commands )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(106, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_ROOT, "T_ROOT"), root_1);

				DebugLocation(106, 14);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:106:14: ( commands )?
				if (stream_commands.HasNext)
				{
					DebugLocation(106, 14);
					adaptor.AddChild(root_1, stream_commands.NextTree());

				}
				stream_commands.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parse", 1);
			LeaveRule("parse", 1);
			LeaveRule_parse();
	    }
	 	DebugLocation(107, 1);
		} finally { DebugExitRule(GrammarFileName, "parse"); }
		return retval;

	}
	// $ANTLR end "parse"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_commands() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_commands() {}

	// $ANTLR start "commands"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:109:1: commands : command ( ( WS )? ( ';' ( WS )? )? command )* ( ( WS )? ';' )? -> ( command )+ ;
	[GrammarRule("commands")]
	private AstParserRuleReturnScope<object, IToken> commands()
	{
		EnterRule_commands();
		EnterRule("commands", 2);
		TraceIn("commands", 2);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS6 = default(IToken);
	    IToken char_literal7 = default(IToken);
	    IToken WS8 = default(IToken);
	    IToken WS10 = default(IToken);
	    IToken char_literal11 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> command5 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> command9 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS6_tree = default(object);
	    object char_literal7_tree = default(object);
	    object WS8_tree = default(object);
	    object WS10_tree = default(object);
	    object char_literal11_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_166=new RewriteRuleITokenStream(adaptor,"token 166");
	    RewriteRuleSubtreeStream stream_command=new RewriteRuleSubtreeStream(adaptor,"rule command");
		try { DebugEnterRule(GrammarFileName, "commands");
		DebugLocation(109, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:110:2: ( command ( ( WS )? ( ';' ( WS )? )? command )* ( ( WS )? ';' )? -> ( command )+ )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:110:4: command ( ( WS )? ( ';' ( WS )? )? command )* ( ( WS )? ';' )?
			{
			DebugLocation(110, 4);
			PushFollow(Follow._command_in_commands406);
			command5=command();
			PopFollow();

			stream_command.Add(command5.Tree);
			DebugLocation(110, 12);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:110:12: ( ( WS )? ( ';' ( WS )? )? command )*
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, decisionCanBacktrack[7]);
				switch (input.LA(1))
				{
				case WS:
					{
					int LA7_1 = input.LA(2);

					if ((LA7_1==166))
					{
						int LA7_2 = input.LA(3);

						if ((LA7_2==WS))
						{
							int LA7_5 = input.LA(4);

							if ((LA7_5==CREATE||LA7_5==DECLARE||LA7_5==DROP||(LA7_5>=SELECT && LA7_5<=SET)||LA7_5==USE))
							{
								alt7 = 1;
							}


						}
						else if ((LA7_2==CREATE||LA7_2==DECLARE||LA7_2==DROP||(LA7_2>=SELECT && LA7_2<=SET)||LA7_2==USE))
						{
							alt7 = 1;
						}


					}
					else if ((LA7_1==CREATE||LA7_1==DECLARE||LA7_1==DROP||(LA7_1>=SELECT && LA7_1<=SET)||LA7_1==USE))
					{
						alt7 = 1;
					}


					}
					break;
				case 166:
					{
					int LA7_2 = input.LA(2);

					if ((LA7_2==WS))
					{
						int LA7_5 = input.LA(3);

						if ((LA7_5==CREATE||LA7_5==DECLARE||LA7_5==DROP||(LA7_5>=SELECT && LA7_5<=SET)||LA7_5==USE))
						{
							alt7 = 1;
						}


					}
					else if ((LA7_2==CREATE||LA7_2==DECLARE||LA7_2==DROP||(LA7_2>=SELECT && LA7_2<=SET)||LA7_2==USE))
					{
						alt7 = 1;
					}


					}
					break;
				case CREATE:
				case DECLARE:
				case DROP:
				case SELECT:
				case SET:
				case USE:
					{
					alt7 = 1;
					}
					break;
				}

				} finally { DebugExitDecision(7); }
				switch ( alt7 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:110:13: ( WS )? ( ';' ( WS )? )? command
					{
					DebugLocation(110, 13);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:110:13: ( WS )?
					int alt4=2;
					try { DebugEnterSubRule(4);
					try { DebugEnterDecision(4, decisionCanBacktrack[4]);
					int LA4_0 = input.LA(1);

					if ((LA4_0==WS))
					{
						alt4 = 1;
					}
					} finally { DebugExitDecision(4); }
					switch (alt4)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:110:13: WS
						{
						DebugLocation(110, 13);
						WS6=(IToken)Match(input,WS,Follow._WS_in_commands409);  
						stream_WS.Add(WS6);


						}
						break;

					}
					} finally { DebugExitSubRule(4); }

					DebugLocation(110, 17);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:110:17: ( ';' ( WS )? )?
					int alt6=2;
					try { DebugEnterSubRule(6);
					try { DebugEnterDecision(6, decisionCanBacktrack[6]);
					int LA6_0 = input.LA(1);

					if ((LA6_0==166))
					{
						alt6 = 1;
					}
					} finally { DebugExitDecision(6); }
					switch (alt6)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:110:18: ';' ( WS )?
						{
						DebugLocation(110, 18);
						char_literal7=(IToken)Match(input,166,Follow._166_in_commands413);  
						stream_166.Add(char_literal7);

						DebugLocation(110, 22);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:110:22: ( WS )?
						int alt5=2;
						try { DebugEnterSubRule(5);
						try { DebugEnterDecision(5, decisionCanBacktrack[5]);
						int LA5_0 = input.LA(1);

						if ((LA5_0==WS))
						{
							alt5 = 1;
						}
						} finally { DebugExitDecision(5); }
						switch (alt5)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:110:22: WS
							{
							DebugLocation(110, 22);
							WS8=(IToken)Match(input,WS,Follow._WS_in_commands415);  
							stream_WS.Add(WS8);


							}
							break;

						}
						} finally { DebugExitSubRule(5); }


						}
						break;

					}
					} finally { DebugExitSubRule(6); }

					DebugLocation(110, 28);
					PushFollow(Follow._command_in_commands420);
					command9=command();
					PopFollow();

					stream_command.Add(command9.Tree);

					}
					break;

				default:
					goto loop7;
				}
			}

			loop7:
				;

			} finally { DebugExitSubRule(7); }

			DebugLocation(110, 38);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:110:38: ( ( WS )? ';' )?
			int alt9=2;
			try { DebugEnterSubRule(9);
			try { DebugEnterDecision(9, decisionCanBacktrack[9]);
			int LA9_0 = input.LA(1);

			if ((LA9_0==WS))
			{
				int LA9_1 = input.LA(2);

				if ((LA9_1==166))
				{
					alt9 = 1;
				}
			}
			else if ((LA9_0==166))
			{
				alt9 = 1;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:110:39: ( WS )? ';'
				{
				DebugLocation(110, 39);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:110:39: ( WS )?
				int alt8=2;
				try { DebugEnterSubRule(8);
				try { DebugEnterDecision(8, decisionCanBacktrack[8]);
				int LA8_0 = input.LA(1);

				if ((LA8_0==WS))
				{
					alt8 = 1;
				}
				} finally { DebugExitDecision(8); }
				switch (alt8)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:110:39: WS
					{
					DebugLocation(110, 39);
					WS10=(IToken)Match(input,WS,Follow._WS_in_commands425);  
					stream_WS.Add(WS10);


					}
					break;

				}
				} finally { DebugExitSubRule(8); }

				DebugLocation(110, 43);
				char_literal11=(IToken)Match(input,166,Follow._166_in_commands428);  
				stream_166.Add(char_literal11);


				}
				break;

			}
			} finally { DebugExitSubRule(9); }



			{
			// AST REWRITE
			// elements: command
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 111:2: -> ( command )+
			{
				DebugLocation(111, 5);
				if (!(stream_command.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_command.HasNext )
				{
					DebugLocation(111, 5);
					adaptor.AddChild(root_0, stream_command.NextTree());

				}
				stream_command.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("commands", 2);
			LeaveRule("commands", 2);
			LeaveRule_commands();
	    }
	 	DebugLocation(112, 1);
		} finally { DebugExitRule(GrammarFileName, "commands"); }
		return retval;

	}
	// $ANTLR end "commands"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_command() {}

	// $ANTLR start "command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:114:1: command : ( select_command | use_command | declare_command | set_command | create_view_command | drop_view_command | drop_table_command );
	[GrammarRule("command")]
	private AstParserRuleReturnScope<object, IToken> command()
	{
		EnterRule_command();
		EnterRule("command", 3);
		TraceIn("command", 3);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> select_command12 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> use_command13 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> declare_command14 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> set_command15 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> create_view_command16 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> drop_view_command17 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> drop_table_command18 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "command");
		DebugLocation(114, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:115:2: ( select_command | use_command | declare_command | set_command | create_view_command | drop_view_command | drop_table_command )
			int alt10=7;
			try { DebugEnterDecision(10, decisionCanBacktrack[10]);
			switch (input.LA(1))
			{
			case SELECT:
				{
				alt10 = 1;
				}
				break;
			case USE:
				{
				alt10 = 2;
				}
				break;
			case DECLARE:
				{
				alt10 = 3;
				}
				break;
			case SET:
				{
				alt10 = 4;
				}
				break;
			case CREATE:
				{
				alt10 = 5;
				}
				break;
			case DROP:
				{
				int LA10_6 = input.LA(2);

				if ((LA10_6==WS))
				{
					int LA10_7 = input.LA(3);

					if ((LA10_7==VIEW))
					{
						alt10 = 6;
					}
					else if ((LA10_7==TABLE))
					{
						alt10 = 7;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 10, 7, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 10, 6, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 10, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:115:4: select_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(115, 4);
				PushFollow(Follow._select_command_in_command448);
				select_command12=select_command();
				PopFollow();

				adaptor.AddChild(root_0, select_command12.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:116:4: use_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(116, 4);
				PushFollow(Follow._use_command_in_command453);
				use_command13=use_command();
				PopFollow();

				adaptor.AddChild(root_0, use_command13.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:117:4: declare_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(117, 4);
				PushFollow(Follow._declare_command_in_command458);
				declare_command14=declare_command();
				PopFollow();

				adaptor.AddChild(root_0, declare_command14.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:118:4: set_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(118, 4);
				PushFollow(Follow._set_command_in_command463);
				set_command15=set_command();
				PopFollow();

				adaptor.AddChild(root_0, set_command15.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:119:4: create_view_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(119, 4);
				PushFollow(Follow._create_view_command_in_command468);
				create_view_command16=create_view_command();
				PopFollow();

				adaptor.AddChild(root_0, create_view_command16.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:120:4: drop_view_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(120, 4);
				PushFollow(Follow._drop_view_command_in_command473);
				drop_view_command17=drop_view_command();
				PopFollow();

				adaptor.AddChild(root_0, drop_view_command17.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:121:4: drop_table_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(121, 4);
				PushFollow(Follow._drop_table_command_in_command478);
				drop_table_command18=drop_table_command();
				PopFollow();

				adaptor.AddChild(root_0, drop_table_command18.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("command", 3);
			LeaveRule("command", 3);
			LeaveRule_command();
	    }
	 	DebugLocation(122, 1);
		} finally { DebugExitRule(GrammarFileName, "command"); }
		return retval;

	}
	// $ANTLR end "command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_select_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_select_command() {}

	// $ANTLR start "select_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:127:1: select_command : SELECT ( WS distinct_clause )? ( WS top_clause )? WS column_list ( WS into_clause )? ( WS from_clause )? ( WS where_clause )? ( WS groupby_clause )? ( WS having_clause )? ( WS orderby_clause )? -> ^( T_SELECT ( distinct_clause )? ( top_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( having_clause )? ( orderby_clause )? ) ;
	[GrammarRule("select_command")]
	private AstParserRuleReturnScope<object, IToken> select_command()
	{
		EnterRule_select_command();
		EnterRule("select_command", 4);
		TraceIn("select_command", 4);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken SELECT19 = default(IToken);
	    IToken WS20 = default(IToken);
	    IToken WS22 = default(IToken);
	    IToken WS24 = default(IToken);
	    IToken WS26 = default(IToken);
	    IToken WS28 = default(IToken);
	    IToken WS30 = default(IToken);
	    IToken WS32 = default(IToken);
	    IToken WS34 = default(IToken);
	    IToken WS36 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> distinct_clause21 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> top_clause23 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> column_list25 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> into_clause27 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> from_clause29 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> where_clause31 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> groupby_clause33 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> having_clause35 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> orderby_clause37 = default(AstParserRuleReturnScope<object, IToken>);

	    object SELECT19_tree = default(object);
	    object WS20_tree = default(object);
	    object WS22_tree = default(object);
	    object WS24_tree = default(object);
	    object WS26_tree = default(object);
	    object WS28_tree = default(object);
	    object WS30_tree = default(object);
	    object WS32_tree = default(object);
	    object WS34_tree = default(object);
	    object WS36_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_SELECT=new RewriteRuleITokenStream(adaptor,"token SELECT");
	    RewriteRuleSubtreeStream stream_groupby_clause=new RewriteRuleSubtreeStream(adaptor,"rule groupby_clause");
	    RewriteRuleSubtreeStream stream_distinct_clause=new RewriteRuleSubtreeStream(adaptor,"rule distinct_clause");
	    RewriteRuleSubtreeStream stream_from_clause=new RewriteRuleSubtreeStream(adaptor,"rule from_clause");
	    RewriteRuleSubtreeStream stream_having_clause=new RewriteRuleSubtreeStream(adaptor,"rule having_clause");
	    RewriteRuleSubtreeStream stream_column_list=new RewriteRuleSubtreeStream(adaptor,"rule column_list");
	    RewriteRuleSubtreeStream stream_where_clause=new RewriteRuleSubtreeStream(adaptor,"rule where_clause");
	    RewriteRuleSubtreeStream stream_into_clause=new RewriteRuleSubtreeStream(adaptor,"rule into_clause");
	    RewriteRuleSubtreeStream stream_top_clause=new RewriteRuleSubtreeStream(adaptor,"rule top_clause");
	    RewriteRuleSubtreeStream stream_orderby_clause=new RewriteRuleSubtreeStream(adaptor,"rule orderby_clause");
		try { DebugEnterRule(GrammarFileName, "select_command");
		DebugLocation(127, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:128:2: ( SELECT ( WS distinct_clause )? ( WS top_clause )? WS column_list ( WS into_clause )? ( WS from_clause )? ( WS where_clause )? ( WS groupby_clause )? ( WS having_clause )? ( WS orderby_clause )? -> ^( T_SELECT ( distinct_clause )? ( top_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( having_clause )? ( orderby_clause )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:128:4: SELECT ( WS distinct_clause )? ( WS top_clause )? WS column_list ( WS into_clause )? ( WS from_clause )? ( WS where_clause )? ( WS groupby_clause )? ( WS having_clause )? ( WS orderby_clause )?
			{
			DebugLocation(128, 4);
			SELECT19=(IToken)Match(input,SELECT,Follow._SELECT_in_select_command492);  
			stream_SELECT.Add(SELECT19);

			DebugLocation(128, 11);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:128:11: ( WS distinct_clause )?
			int alt11=2;
			try { DebugEnterSubRule(11);
			try { DebugEnterDecision(11, decisionCanBacktrack[11]);
			int LA11_0 = input.LA(1);

			if ((LA11_0==WS))
			{
				int LA11_1 = input.LA(2);

				if ((LA11_1==ALL||LA11_1==DISTINCT))
				{
					alt11 = 1;
				}
			}
			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:128:12: WS distinct_clause
				{
				DebugLocation(128, 12);
				WS20=(IToken)Match(input,WS,Follow._WS_in_select_command495);  
				stream_WS.Add(WS20);

				DebugLocation(128, 15);
				PushFollow(Follow._distinct_clause_in_select_command497);
				distinct_clause21=distinct_clause();
				PopFollow();

				stream_distinct_clause.Add(distinct_clause21.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(11); }

			DebugLocation(128, 33);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:128:33: ( WS top_clause )?
			int alt12=2;
			try { DebugEnterSubRule(12);
			try { DebugEnterDecision(12, decisionCanBacktrack[12]);
			int LA12_0 = input.LA(1);

			if ((LA12_0==WS))
			{
				int LA12_1 = input.LA(2);

				if ((LA12_1==TOP))
				{
					alt12 = 1;
				}
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:128:34: WS top_clause
				{
				DebugLocation(128, 34);
				WS22=(IToken)Match(input,WS,Follow._WS_in_select_command502);  
				stream_WS.Add(WS22);

				DebugLocation(128, 37);
				PushFollow(Follow._top_clause_in_select_command504);
				top_clause23=top_clause();
				PopFollow();

				stream_top_clause.Add(top_clause23.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(12); }

			DebugLocation(128, 50);
			WS24=(IToken)Match(input,WS,Follow._WS_in_select_command508);  
			stream_WS.Add(WS24);

			DebugLocation(128, 53);
			PushFollow(Follow._column_list_in_select_command510);
			column_list25=column_list();
			PopFollow();

			stream_column_list.Add(column_list25.Tree);
			DebugLocation(128, 65);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:128:65: ( WS into_clause )?
			int alt13=2;
			try { DebugEnterSubRule(13);
			try { DebugEnterDecision(13, decisionCanBacktrack[13]);
			int LA13_0 = input.LA(1);

			if ((LA13_0==WS))
			{
				int LA13_1 = input.LA(2);

				if ((LA13_1==INTO))
				{
					alt13 = 1;
				}
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:128:66: WS into_clause
				{
				DebugLocation(128, 66);
				WS26=(IToken)Match(input,WS,Follow._WS_in_select_command513);  
				stream_WS.Add(WS26);

				DebugLocation(128, 69);
				PushFollow(Follow._into_clause_in_select_command515);
				into_clause27=into_clause();
				PopFollow();

				stream_into_clause.Add(into_clause27.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(13); }

			DebugLocation(128, 83);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:128:83: ( WS from_clause )?
			int alt14=2;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, decisionCanBacktrack[14]);
			int LA14_0 = input.LA(1);

			if ((LA14_0==WS))
			{
				int LA14_1 = input.LA(2);

				if ((LA14_1==FROM))
				{
					alt14 = 1;
				}
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:128:84: WS from_clause
				{
				DebugLocation(128, 84);
				WS28=(IToken)Match(input,WS,Follow._WS_in_select_command520);  
				stream_WS.Add(WS28);

				DebugLocation(128, 87);
				PushFollow(Follow._from_clause_in_select_command522);
				from_clause29=from_clause();
				PopFollow();

				stream_from_clause.Add(from_clause29.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(14); }

			DebugLocation(128, 101);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:128:101: ( WS where_clause )?
			int alt15=2;
			try { DebugEnterSubRule(15);
			try { DebugEnterDecision(15, decisionCanBacktrack[15]);
			int LA15_0 = input.LA(1);

			if ((LA15_0==WS))
			{
				int LA15_1 = input.LA(2);

				if ((LA15_1==WHERE))
				{
					alt15 = 1;
				}
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:128:102: WS where_clause
				{
				DebugLocation(128, 102);
				WS30=(IToken)Match(input,WS,Follow._WS_in_select_command527);  
				stream_WS.Add(WS30);

				DebugLocation(128, 105);
				PushFollow(Follow._where_clause_in_select_command529);
				where_clause31=where_clause();
				PopFollow();

				stream_where_clause.Add(where_clause31.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(15); }

			DebugLocation(128, 120);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:128:120: ( WS groupby_clause )?
			int alt16=2;
			try { DebugEnterSubRule(16);
			try { DebugEnterDecision(16, decisionCanBacktrack[16]);
			int LA16_0 = input.LA(1);

			if ((LA16_0==WS))
			{
				int LA16_1 = input.LA(2);

				if ((LA16_1==GROUP))
				{
					alt16 = 1;
				}
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:128:121: WS groupby_clause
				{
				DebugLocation(128, 121);
				WS32=(IToken)Match(input,WS,Follow._WS_in_select_command534);  
				stream_WS.Add(WS32);

				DebugLocation(128, 124);
				PushFollow(Follow._groupby_clause_in_select_command536);
				groupby_clause33=groupby_clause();
				PopFollow();

				stream_groupby_clause.Add(groupby_clause33.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(16); }

			DebugLocation(128, 141);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:128:141: ( WS having_clause )?
			int alt17=2;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, decisionCanBacktrack[17]);
			int LA17_0 = input.LA(1);

			if ((LA17_0==WS))
			{
				int LA17_1 = input.LA(2);

				if ((LA17_1==HAVING))
				{
					alt17 = 1;
				}
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:128:142: WS having_clause
				{
				DebugLocation(128, 142);
				WS34=(IToken)Match(input,WS,Follow._WS_in_select_command541);  
				stream_WS.Add(WS34);

				DebugLocation(128, 145);
				PushFollow(Follow._having_clause_in_select_command543);
				having_clause35=having_clause();
				PopFollow();

				stream_having_clause.Add(having_clause35.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(17); }

			DebugLocation(128, 161);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:128:161: ( WS orderby_clause )?
			int alt18=2;
			try { DebugEnterSubRule(18);
			try { DebugEnterDecision(18, decisionCanBacktrack[18]);
			int LA18_0 = input.LA(1);

			if ((LA18_0==WS))
			{
				int LA18_1 = input.LA(2);

				if ((LA18_1==ORDER))
				{
					alt18 = 1;
				}
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:128:162: WS orderby_clause
				{
				DebugLocation(128, 162);
				WS36=(IToken)Match(input,WS,Follow._WS_in_select_command548);  
				stream_WS.Add(WS36);

				DebugLocation(128, 165);
				PushFollow(Follow._orderby_clause_in_select_command550);
				orderby_clause37=orderby_clause();
				PopFollow();

				stream_orderby_clause.Add(orderby_clause37.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(18); }



			{
			// AST REWRITE
			// elements: groupby_clause, from_clause, top_clause, where_clause, into_clause, column_list, orderby_clause, having_clause, distinct_clause
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 129:3: -> ^( T_SELECT ( distinct_clause )? ( top_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( having_clause )? ( orderby_clause )? )
			{
				DebugLocation(129, 6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:129:6: ^( T_SELECT ( distinct_clause )? ( top_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( having_clause )? ( orderby_clause )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(129, 8);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SELECT, "T_SELECT"), root_1);

				DebugLocation(129, 17);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:129:17: ( distinct_clause )?
				if (stream_distinct_clause.HasNext)
				{
					DebugLocation(129, 17);
					adaptor.AddChild(root_1, stream_distinct_clause.NextTree());

				}
				stream_distinct_clause.Reset();
				DebugLocation(129, 34);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:129:34: ( top_clause )?
				if (stream_top_clause.HasNext)
				{
					DebugLocation(129, 34);
					adaptor.AddChild(root_1, stream_top_clause.NextTree());

				}
				stream_top_clause.Reset();
				DebugLocation(129, 46);
				adaptor.AddChild(root_1, stream_column_list.NextTree());
				DebugLocation(129, 58);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:129:58: ( into_clause )?
				if (stream_into_clause.HasNext)
				{
					DebugLocation(129, 58);
					adaptor.AddChild(root_1, stream_into_clause.NextTree());

				}
				stream_into_clause.Reset();
				DebugLocation(129, 71);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:129:71: ( from_clause )?
				if (stream_from_clause.HasNext)
				{
					DebugLocation(129, 71);
					adaptor.AddChild(root_1, stream_from_clause.NextTree());

				}
				stream_from_clause.Reset();
				DebugLocation(129, 84);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:129:84: ( where_clause )?
				if (stream_where_clause.HasNext)
				{
					DebugLocation(129, 84);
					adaptor.AddChild(root_1, stream_where_clause.NextTree());

				}
				stream_where_clause.Reset();
				DebugLocation(129, 98);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:129:98: ( groupby_clause )?
				if (stream_groupby_clause.HasNext)
				{
					DebugLocation(129, 98);
					adaptor.AddChild(root_1, stream_groupby_clause.NextTree());

				}
				stream_groupby_clause.Reset();
				DebugLocation(129, 114);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:129:114: ( having_clause )?
				if (stream_having_clause.HasNext)
				{
					DebugLocation(129, 114);
					adaptor.AddChild(root_1, stream_having_clause.NextTree());

				}
				stream_having_clause.Reset();
				DebugLocation(129, 129);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:129:129: ( orderby_clause )?
				if (stream_orderby_clause.HasNext)
				{
					DebugLocation(129, 129);
					adaptor.AddChild(root_1, stream_orderby_clause.NextTree());

				}
				stream_orderby_clause.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("select_command", 4);
			LeaveRule("select_command", 4);
			LeaveRule_select_command();
	    }
	 	DebugLocation(130, 1);
		} finally { DebugExitRule(GrammarFileName, "select_command"); }
		return retval;

	}
	// $ANTLR end "select_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_distinct_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_distinct_clause() {}

	// $ANTLR start "distinct_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:132:1: distinct_clause : ( DISTINCT -> T_DISTINCT | ALL -> T_ALL );
	[GrammarRule("distinct_clause")]
	private AstParserRuleReturnScope<object, IToken> distinct_clause()
	{
		EnterRule_distinct_clause();
		EnterRule("distinct_clause", 5);
		TraceIn("distinct_clause", 5);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken DISTINCT38 = default(IToken);
	    IToken ALL39 = default(IToken);

	    object DISTINCT38_tree = default(object);
	    object ALL39_tree = default(object);
	    RewriteRuleITokenStream stream_DISTINCT=new RewriteRuleITokenStream(adaptor,"token DISTINCT");
	    RewriteRuleITokenStream stream_ALL=new RewriteRuleITokenStream(adaptor,"token ALL");

		try { DebugEnterRule(GrammarFileName, "distinct_clause");
		DebugLocation(132, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:133:2: ( DISTINCT -> T_DISTINCT | ALL -> T_ALL )
			int alt19=2;
			try { DebugEnterDecision(19, decisionCanBacktrack[19]);
			int LA19_0 = input.LA(1);

			if ((LA19_0==DISTINCT))
			{
				alt19 = 1;
			}
			else if ((LA19_0==ALL))
			{
				alt19 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 19, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:133:4: DISTINCT
				{
				DebugLocation(133, 4);
				DISTINCT38=(IToken)Match(input,DISTINCT,Follow._DISTINCT_in_distinct_clause598);  
				stream_DISTINCT.Add(DISTINCT38);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 133:13: -> T_DISTINCT
				{
					DebugLocation(133, 16);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_DISTINCT, "T_DISTINCT"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:134:4: ALL
				{
				DebugLocation(134, 4);
				ALL39=(IToken)Match(input,ALL,Follow._ALL_in_distinct_clause607);  
				stream_ALL.Add(ALL39);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 134:8: -> T_ALL
				{
					DebugLocation(134, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_ALL, "T_ALL"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("distinct_clause", 5);
			LeaveRule("distinct_clause", 5);
			LeaveRule_distinct_clause();
	    }
	 	DebugLocation(135, 1);
		} finally { DebugExitRule(GrammarFileName, "distinct_clause"); }
		return retval;

	}
	// $ANTLR end "distinct_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_top_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_top_clause() {}

	// $ANTLR start "top_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:137:1: top_clause : TOP WS expression -> ^( T_TOP expression ) ;
	[GrammarRule("top_clause")]
	private AstParserRuleReturnScope<object, IToken> top_clause()
	{
		EnterRule_top_clause();
		EnterRule("top_clause", 6);
		TraceIn("top_clause", 6);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOP40 = default(IToken);
	    IToken WS41 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression42 = default(AstParserRuleReturnScope<object, IToken>);

	    object TOP40_tree = default(object);
	    object WS41_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_TOP=new RewriteRuleITokenStream(adaptor,"token TOP");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "top_clause");
		DebugLocation(137, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:138:2: ( TOP WS expression -> ^( T_TOP expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:138:4: TOP WS expression
			{
			DebugLocation(138, 4);
			TOP40=(IToken)Match(input,TOP,Follow._TOP_in_top_clause623);  
			stream_TOP.Add(TOP40);

			DebugLocation(138, 8);
			WS41=(IToken)Match(input,WS,Follow._WS_in_top_clause625);  
			stream_WS.Add(WS41);

			DebugLocation(138, 11);
			PushFollow(Follow._expression_in_top_clause627);
			expression42=expression();
			PopFollow();

			stream_expression.Add(expression42.Tree);


			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 139:2: -> ^( T_TOP expression )
			{
				DebugLocation(139, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:139:5: ^( T_TOP expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(139, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_TOP, "T_TOP"), root_1);

				DebugLocation(139, 13);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("top_clause", 6);
			LeaveRule("top_clause", 6);
			LeaveRule_top_clause();
	    }
	 	DebugLocation(140, 1);
		} finally { DebugExitRule(GrammarFileName, "top_clause"); }
		return retval;

	}
	// $ANTLR end "top_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_column_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_column_list() {}

	// $ANTLR start "column_list"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:142:1: column_list : column ( ( WS )? ',' ( WS )? column )* -> ^( T_COLUMNLIST ( column )* ) ;
	[GrammarRule("column_list")]
	private AstParserRuleReturnScope<object, IToken> column_list()
	{
		EnterRule_column_list();
		EnterRule("column_list", 7);
		TraceIn("column_list", 7);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS44 = default(IToken);
	    IToken char_literal45 = default(IToken);
	    IToken WS46 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> column43 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> column47 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS44_tree = default(object);
	    object char_literal45_tree = default(object);
	    object WS46_tree = default(object);
	    RewriteRuleITokenStream stream_162=new RewriteRuleITokenStream(adaptor,"token 162");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_column=new RewriteRuleSubtreeStream(adaptor,"rule column");
		try { DebugEnterRule(GrammarFileName, "column_list");
		DebugLocation(142, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:143:2: ( column ( ( WS )? ',' ( WS )? column )* -> ^( T_COLUMNLIST ( column )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:143:4: column ( ( WS )? ',' ( WS )? column )*
			{
			DebugLocation(143, 4);
			PushFollow(Follow._column_in_column_list649);
			column43=column();
			PopFollow();

			stream_column.Add(column43.Tree);
			DebugLocation(143, 11);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:143:11: ( ( WS )? ',' ( WS )? column )*
			try { DebugEnterSubRule(22);
			while (true)
			{
				int alt22=2;
				try { DebugEnterDecision(22, decisionCanBacktrack[22]);
				int LA22_0 = input.LA(1);

				if ((LA22_0==WS))
				{
					int LA22_1 = input.LA(2);

					if ((LA22_1==162))
					{
						alt22 = 1;
					}


				}
				else if ((LA22_0==162))
				{
					alt22 = 1;
				}


				} finally { DebugExitDecision(22); }
				switch ( alt22 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:143:12: ( WS )? ',' ( WS )? column
					{
					DebugLocation(143, 12);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:143:12: ( WS )?
					int alt20=2;
					try { DebugEnterSubRule(20);
					try { DebugEnterDecision(20, decisionCanBacktrack[20]);
					int LA20_0 = input.LA(1);

					if ((LA20_0==WS))
					{
						alt20 = 1;
					}
					} finally { DebugExitDecision(20); }
					switch (alt20)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:143:12: WS
						{
						DebugLocation(143, 12);
						WS44=(IToken)Match(input,WS,Follow._WS_in_column_list652);  
						stream_WS.Add(WS44);


						}
						break;

					}
					} finally { DebugExitSubRule(20); }

					DebugLocation(143, 16);
					char_literal45=(IToken)Match(input,162,Follow._162_in_column_list655);  
					stream_162.Add(char_literal45);

					DebugLocation(143, 20);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:143:20: ( WS )?
					int alt21=2;
					try { DebugEnterSubRule(21);
					try { DebugEnterDecision(21, decisionCanBacktrack[21]);
					int LA21_0 = input.LA(1);

					if ((LA21_0==WS))
					{
						alt21 = 1;
					}
					} finally { DebugExitDecision(21); }
					switch (alt21)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:143:20: WS
						{
						DebugLocation(143, 20);
						WS46=(IToken)Match(input,WS,Follow._WS_in_column_list657);  
						stream_WS.Add(WS46);


						}
						break;

					}
					} finally { DebugExitSubRule(21); }

					DebugLocation(143, 24);
					PushFollow(Follow._column_in_column_list660);
					column47=column();
					PopFollow();

					stream_column.Add(column47.Tree);

					}
					break;

				default:
					goto loop22;
				}
			}

			loop22:
				;

			} finally { DebugExitSubRule(22); }



			{
			// AST REWRITE
			// elements: column
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 144:2: -> ^( T_COLUMNLIST ( column )* )
			{
				DebugLocation(144, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:144:5: ^( T_COLUMNLIST ( column )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(144, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_COLUMNLIST, "T_COLUMNLIST"), root_1);

				DebugLocation(144, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:144:20: ( column )*
				while ( stream_column.HasNext )
				{
					DebugLocation(144, 20);
					adaptor.AddChild(root_1, stream_column.NextTree());

				}
				stream_column.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("column_list", 7);
			LeaveRule("column_list", 7);
			LeaveRule_column_list();
	    }
	 	DebugLocation(145, 1);
		} finally { DebugExitRule(GrammarFileName, "column_list"); }
		return retval;

	}
	// $ANTLR end "column_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_column() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_column() {}

	// $ANTLR start "column"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:147:1: column : ( all_columns | expression ( WS SIMPLE_FILE )? -> ^( T_COLUMN expression ( SIMPLE_FILE )? ) );
	[GrammarRule("column")]
	private AstParserRuleReturnScope<object, IToken> column()
	{
		EnterRule_column();
		EnterRule("column", 8);
		TraceIn("column", 8);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS50 = default(IToken);
	    IToken SIMPLE_FILE51 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> all_columns48 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression49 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS50_tree = default(object);
	    object SIMPLE_FILE51_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_SIMPLE_FILE=new RewriteRuleITokenStream(adaptor,"token SIMPLE_FILE");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "column");
		DebugLocation(147, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:148:2: ( all_columns | expression ( WS SIMPLE_FILE )? -> ^( T_COLUMN expression ( SIMPLE_FILE )? ) )
			int alt24=2;
			try { DebugEnterDecision(24, decisionCanBacktrack[24]);
			switch (input.LA(1))
			{
			case SIMPLE_FILE:
				{
				switch (input.LA(2))
				{
				case WS:
					{
					int LA24_4 = input.LA(3);

					if ((LA24_4==EOF||LA24_4==AND||LA24_4==BETWEEN||LA24_4==CREATE||LA24_4==DECLARE||LA24_4==DROP||LA24_4==FROM||LA24_4==GROUP||LA24_4==HAVING||(LA24_4>=IN && LA24_4<=INTO)||LA24_4==LIKE||LA24_4==MATCH||LA24_4==NOT||(LA24_4>=OR && LA24_4<=ORDER)||(LA24_4>=SELECT && LA24_4<=SIMPLE_FILE)||LA24_4==USE||LA24_4==WHERE||(LA24_4>=153 && LA24_4<=157)||(LA24_4>=159 && LA24_4<=163)||(LA24_4>=165 && LA24_4<=172)||(LA24_4>=175 && LA24_4<=176)))
					{
						alt24 = 2;
					}
					else if ((LA24_4==164))
					{
						switch (input.LA(4))
						{
						case WS:
							{
							int LA24_6 = input.LA(5);

							if ((LA24_6==160))
							{
								alt24 = 1;
							}
							else if ((LA24_6==SIMPLE_FILE))
							{
								alt24 = 2;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 24, 6, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case 160:
							{
							alt24 = 1;
							}
							break;
						case SIMPLE_FILE:
							{
							alt24 = 2;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 24, 5, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 24, 4, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 164:
					{
					switch (input.LA(3))
					{
					case WS:
						{
						int LA24_6 = input.LA(4);

						if ((LA24_6==160))
						{
							alt24 = 1;
						}
						else if ((LA24_6==SIMPLE_FILE))
						{
							alt24 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 24, 6, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case 160:
						{
						alt24 = 1;
						}
						break;
					case SIMPLE_FILE:
						{
						alt24 = 2;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 24, 5, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					}
					break;
				case EOF:
				case CREATE:
				case DECLARE:
				case DROP:
				case SELECT:
				case SET:
				case USE:
				case 153:
				case 154:
				case 155:
				case 156:
				case 157:
				case 159:
				case 160:
				case 161:
				case 162:
				case 163:
				case 165:
				case 166:
				case 167:
				case 168:
				case 169:
				case 170:
				case 171:
				case 172:
				case 175:
				case 176:
					{
					alt24 = 2;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 24, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				}
				break;
			case 160:
				{
				alt24 = 1;
				}
				break;
			case CASE:
			case CAST:
			case CONVERT:
			case COUNT:
			case EXISTS:
			case NOT:
			case NUMBER:
			case STRING:
			case SYSTEMVAR:
			case TOKEN:
			case VARIABLE:
			case 158:
				{
				alt24 = 2;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 24, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:148:4: all_columns
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(148, 4);
				PushFollow(Follow._all_columns_in_column684);
				all_columns48=all_columns();
				PopFollow();

				adaptor.AddChild(root_0, all_columns48.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:149:4: expression ( WS SIMPLE_FILE )?
				{
				DebugLocation(149, 4);
				PushFollow(Follow._expression_in_column689);
				expression49=expression();
				PopFollow();

				stream_expression.Add(expression49.Tree);
				DebugLocation(149, 15);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:149:15: ( WS SIMPLE_FILE )?
				int alt23=2;
				try { DebugEnterSubRule(23);
				try { DebugEnterDecision(23, decisionCanBacktrack[23]);
				int LA23_0 = input.LA(1);

				if ((LA23_0==WS))
				{
					int LA23_1 = input.LA(2);

					if ((LA23_1==SIMPLE_FILE))
					{
						alt23 = 1;
					}
				}
				} finally { DebugExitDecision(23); }
				switch (alt23)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:149:16: WS SIMPLE_FILE
					{
					DebugLocation(149, 16);
					WS50=(IToken)Match(input,WS,Follow._WS_in_column692);  
					stream_WS.Add(WS50);

					DebugLocation(149, 19);
					SIMPLE_FILE51=(IToken)Match(input,SIMPLE_FILE,Follow._SIMPLE_FILE_in_column694);  
					stream_SIMPLE_FILE.Add(SIMPLE_FILE51);


					}
					break;

				}
				} finally { DebugExitSubRule(23); }



				{
				// AST REWRITE
				// elements: SIMPLE_FILE, expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 149:33: -> ^( T_COLUMN expression ( SIMPLE_FILE )? )
				{
					DebugLocation(149, 36);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:149:36: ^( T_COLUMN expression ( SIMPLE_FILE )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(149, 38);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_COLUMN, "T_COLUMN"), root_1);

					DebugLocation(149, 47);
					adaptor.AddChild(root_1, stream_expression.NextTree());
					DebugLocation(149, 58);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:149:58: ( SIMPLE_FILE )?
					if (stream_SIMPLE_FILE.HasNext)
					{
						DebugLocation(149, 58);
						adaptor.AddChild(root_1, stream_SIMPLE_FILE.NextNode());

					}
					stream_SIMPLE_FILE.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("column", 8);
			LeaveRule("column", 8);
			LeaveRule_column();
	    }
	 	DebugLocation(150, 1);
		} finally { DebugExitRule(GrammarFileName, "column"); }
		return retval;

	}
	// $ANTLR end "column"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_all_columns() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_all_columns() {}

	// $ANTLR start "all_columns"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:152:1: all_columns : ( table_alias ( WS )? '.' ( WS )? )? '*' -> ^( T_ALLCOLUMNS ( table_alias )? ) ;
	[GrammarRule("all_columns")]
	private AstParserRuleReturnScope<object, IToken> all_columns()
	{
		EnterRule_all_columns();
		EnterRule("all_columns", 9);
		TraceIn("all_columns", 9);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS53 = default(IToken);
	    IToken char_literal54 = default(IToken);
	    IToken WS55 = default(IToken);
	    IToken char_literal56 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> table_alias52 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS53_tree = default(object);
	    object char_literal54_tree = default(object);
	    object WS55_tree = default(object);
	    object char_literal56_tree = default(object);
	    RewriteRuleITokenStream stream_164=new RewriteRuleITokenStream(adaptor,"token 164");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_160=new RewriteRuleITokenStream(adaptor,"token 160");
	    RewriteRuleSubtreeStream stream_table_alias=new RewriteRuleSubtreeStream(adaptor,"rule table_alias");
		try { DebugEnterRule(GrammarFileName, "all_columns");
		DebugLocation(152, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:153:2: ( ( table_alias ( WS )? '.' ( WS )? )? '*' -> ^( T_ALLCOLUMNS ( table_alias )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:153:4: ( table_alias ( WS )? '.' ( WS )? )? '*'
			{
			DebugLocation(153, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:153:4: ( table_alias ( WS )? '.' ( WS )? )?
			int alt27=2;
			try { DebugEnterSubRule(27);
			try { DebugEnterDecision(27, decisionCanBacktrack[27]);
			int LA27_0 = input.LA(1);

			if ((LA27_0==SIMPLE_FILE))
			{
				alt27 = 1;
			}
			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:153:5: table_alias ( WS )? '.' ( WS )?
				{
				DebugLocation(153, 5);
				PushFollow(Follow._table_alias_in_all_columns719);
				table_alias52=table_alias();
				PopFollow();

				stream_table_alias.Add(table_alias52.Tree);
				DebugLocation(153, 17);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:153:17: ( WS )?
				int alt25=2;
				try { DebugEnterSubRule(25);
				try { DebugEnterDecision(25, decisionCanBacktrack[25]);
				int LA25_0 = input.LA(1);

				if ((LA25_0==WS))
				{
					alt25 = 1;
				}
				} finally { DebugExitDecision(25); }
				switch (alt25)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:153:17: WS
					{
					DebugLocation(153, 17);
					WS53=(IToken)Match(input,WS,Follow._WS_in_all_columns721);  
					stream_WS.Add(WS53);


					}
					break;

				}
				} finally { DebugExitSubRule(25); }

				DebugLocation(153, 21);
				char_literal54=(IToken)Match(input,164,Follow._164_in_all_columns724);  
				stream_164.Add(char_literal54);

				DebugLocation(153, 25);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:153:25: ( WS )?
				int alt26=2;
				try { DebugEnterSubRule(26);
				try { DebugEnterDecision(26, decisionCanBacktrack[26]);
				int LA26_0 = input.LA(1);

				if ((LA26_0==WS))
				{
					alt26 = 1;
				}
				} finally { DebugExitDecision(26); }
				switch (alt26)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:153:25: WS
					{
					DebugLocation(153, 25);
					WS55=(IToken)Match(input,WS,Follow._WS_in_all_columns726);  
					stream_WS.Add(WS55);


					}
					break;

				}
				} finally { DebugExitSubRule(26); }


				}
				break;

			}
			} finally { DebugExitSubRule(27); }

			DebugLocation(153, 31);
			char_literal56=(IToken)Match(input,160,Follow._160_in_all_columns731);  
			stream_160.Add(char_literal56);



			{
			// AST REWRITE
			// elements: table_alias
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 153:35: -> ^( T_ALLCOLUMNS ( table_alias )? )
			{
				DebugLocation(153, 38);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:153:38: ^( T_ALLCOLUMNS ( table_alias )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(153, 40);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_ALLCOLUMNS, "T_ALLCOLUMNS"), root_1);

				DebugLocation(153, 53);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:153:53: ( table_alias )?
				if (stream_table_alias.HasNext)
				{
					DebugLocation(153, 53);
					adaptor.AddChild(root_1, stream_table_alias.NextTree());

				}
				stream_table_alias.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("all_columns", 9);
			LeaveRule("all_columns", 9);
			LeaveRule_all_columns();
	    }
	 	DebugLocation(154, 1);
		} finally { DebugExitRule(GrammarFileName, "all_columns"); }
		return retval;

	}
	// $ANTLR end "all_columns"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_into_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_into_clause() {}

	// $ANTLR start "into_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:156:1: into_clause : INTO WS file -> ^( T_INTO file ) ;
	[GrammarRule("into_clause")]
	private AstParserRuleReturnScope<object, IToken> into_clause()
	{
		EnterRule_into_clause();
		EnterRule("into_clause", 10);
		TraceIn("into_clause", 10);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken INTO57 = default(IToken);
	    IToken WS58 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file59 = default(AstParserRuleReturnScope<object, IToken>);

	    object INTO57_tree = default(object);
	    object WS58_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_INTO=new RewriteRuleITokenStream(adaptor,"token INTO");
	    RewriteRuleSubtreeStream stream_file=new RewriteRuleSubtreeStream(adaptor,"rule file");
		try { DebugEnterRule(GrammarFileName, "into_clause");
		DebugLocation(156, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:157:2: ( INTO WS file -> ^( T_INTO file ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:157:4: INTO WS file
			{
			DebugLocation(157, 4);
			INTO57=(IToken)Match(input,INTO,Follow._INTO_in_into_clause751);  
			stream_INTO.Add(INTO57);

			DebugLocation(157, 9);
			WS58=(IToken)Match(input,WS,Follow._WS_in_into_clause753);  
			stream_WS.Add(WS58);

			DebugLocation(157, 12);
			PushFollow(Follow._file_in_into_clause755);
			file59=file();
			PopFollow();

			stream_file.Add(file59.Tree);


			{
			// AST REWRITE
			// elements: file
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 157:17: -> ^( T_INTO file )
			{
				DebugLocation(157, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:157:20: ^( T_INTO file )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(157, 22);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_INTO, "T_INTO"), root_1);

				DebugLocation(157, 29);
				adaptor.AddChild(root_1, stream_file.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("into_clause", 10);
			LeaveRule("into_clause", 10);
			LeaveRule_into_clause();
	    }
	 	DebugLocation(158, 1);
		} finally { DebugExitRule(GrammarFileName, "into_clause"); }
		return retval;

	}
	// $ANTLR end "into_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_from_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_from_clause() {}

	// $ANTLR start "from_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:160:1: from_clause : FROM WS from_clause_item ( ( WS )? ',' ( WS )? from_clause_item )* ( WS table_alias )? -> ^( T_FROM ( table_alias )? ( from_clause_item )* ) ;
	[GrammarRule("from_clause")]
	private AstParserRuleReturnScope<object, IToken> from_clause()
	{
		EnterRule_from_clause();
		EnterRule("from_clause", 11);
		TraceIn("from_clause", 11);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken FROM60 = default(IToken);
	    IToken WS61 = default(IToken);
	    IToken WS63 = default(IToken);
	    IToken char_literal64 = default(IToken);
	    IToken WS65 = default(IToken);
	    IToken WS67 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> from_clause_item62 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> from_clause_item66 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> table_alias68 = default(AstParserRuleReturnScope<object, IToken>);

	    object FROM60_tree = default(object);
	    object WS61_tree = default(object);
	    object WS63_tree = default(object);
	    object char_literal64_tree = default(object);
	    object WS65_tree = default(object);
	    object WS67_tree = default(object);
	    RewriteRuleITokenStream stream_162=new RewriteRuleITokenStream(adaptor,"token 162");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_FROM=new RewriteRuleITokenStream(adaptor,"token FROM");
	    RewriteRuleSubtreeStream stream_from_clause_item=new RewriteRuleSubtreeStream(adaptor,"rule from_clause_item");
	    RewriteRuleSubtreeStream stream_table_alias=new RewriteRuleSubtreeStream(adaptor,"rule table_alias");
		try { DebugEnterRule(GrammarFileName, "from_clause");
		DebugLocation(160, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:161:2: ( FROM WS from_clause_item ( ( WS )? ',' ( WS )? from_clause_item )* ( WS table_alias )? -> ^( T_FROM ( table_alias )? ( from_clause_item )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:161:4: FROM WS from_clause_item ( ( WS )? ',' ( WS )? from_clause_item )* ( WS table_alias )?
			{
			DebugLocation(161, 4);
			FROM60=(IToken)Match(input,FROM,Follow._FROM_in_from_clause775);  
			stream_FROM.Add(FROM60);

			DebugLocation(161, 9);
			WS61=(IToken)Match(input,WS,Follow._WS_in_from_clause777);  
			stream_WS.Add(WS61);

			DebugLocation(161, 12);
			PushFollow(Follow._from_clause_item_in_from_clause779);
			from_clause_item62=from_clause_item();
			PopFollow();

			stream_from_clause_item.Add(from_clause_item62.Tree);
			DebugLocation(161, 29);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:161:29: ( ( WS )? ',' ( WS )? from_clause_item )*
			try { DebugEnterSubRule(30);
			while (true)
			{
				int alt30=2;
				try { DebugEnterDecision(30, decisionCanBacktrack[30]);
				int LA30_0 = input.LA(1);

				if ((LA30_0==WS))
				{
					int LA30_1 = input.LA(2);

					if ((LA30_1==162))
					{
						alt30 = 1;
					}


				}
				else if ((LA30_0==162))
				{
					alt30 = 1;
				}


				} finally { DebugExitDecision(30); }
				switch ( alt30 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:161:30: ( WS )? ',' ( WS )? from_clause_item
					{
					DebugLocation(161, 30);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:161:30: ( WS )?
					int alt28=2;
					try { DebugEnterSubRule(28);
					try { DebugEnterDecision(28, decisionCanBacktrack[28]);
					int LA28_0 = input.LA(1);

					if ((LA28_0==WS))
					{
						alt28 = 1;
					}
					} finally { DebugExitDecision(28); }
					switch (alt28)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:161:30: WS
						{
						DebugLocation(161, 30);
						WS63=(IToken)Match(input,WS,Follow._WS_in_from_clause782);  
						stream_WS.Add(WS63);


						}
						break;

					}
					} finally { DebugExitSubRule(28); }

					DebugLocation(161, 34);
					char_literal64=(IToken)Match(input,162,Follow._162_in_from_clause785);  
					stream_162.Add(char_literal64);

					DebugLocation(161, 38);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:161:38: ( WS )?
					int alt29=2;
					try { DebugEnterSubRule(29);
					try { DebugEnterDecision(29, decisionCanBacktrack[29]);
					int LA29_0 = input.LA(1);

					if ((LA29_0==WS))
					{
						alt29 = 1;
					}
					} finally { DebugExitDecision(29); }
					switch (alt29)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:161:38: WS
						{
						DebugLocation(161, 38);
						WS65=(IToken)Match(input,WS,Follow._WS_in_from_clause787);  
						stream_WS.Add(WS65);


						}
						break;

					}
					} finally { DebugExitSubRule(29); }

					DebugLocation(161, 42);
					PushFollow(Follow._from_clause_item_in_from_clause790);
					from_clause_item66=from_clause_item();
					PopFollow();

					stream_from_clause_item.Add(from_clause_item66.Tree);

					}
					break;

				default:
					goto loop30;
				}
			}

			loop30:
				;

			} finally { DebugExitSubRule(30); }

			DebugLocation(161, 61);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:161:61: ( WS table_alias )?
			int alt31=2;
			try { DebugEnterSubRule(31);
			try { DebugEnterDecision(31, decisionCanBacktrack[31]);
			int LA31_0 = input.LA(1);

			if ((LA31_0==WS))
			{
				int LA31_1 = input.LA(2);

				if ((LA31_1==SIMPLE_FILE))
				{
					alt31 = 1;
				}
			}
			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:161:62: WS table_alias
				{
				DebugLocation(161, 62);
				WS67=(IToken)Match(input,WS,Follow._WS_in_from_clause795);  
				stream_WS.Add(WS67);

				DebugLocation(161, 65);
				PushFollow(Follow._table_alias_in_from_clause797);
				table_alias68=table_alias();
				PopFollow();

				stream_table_alias.Add(table_alias68.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(31); }



			{
			// AST REWRITE
			// elements: from_clause_item, table_alias
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 161:79: -> ^( T_FROM ( table_alias )? ( from_clause_item )* )
			{
				DebugLocation(161, 82);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:161:82: ^( T_FROM ( table_alias )? ( from_clause_item )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(161, 84);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FROM, "T_FROM"), root_1);

				DebugLocation(161, 91);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:161:91: ( table_alias )?
				if (stream_table_alias.HasNext)
				{
					DebugLocation(161, 91);
					adaptor.AddChild(root_1, stream_table_alias.NextTree());

				}
				stream_table_alias.Reset();
				DebugLocation(161, 104);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:161:104: ( from_clause_item )*
				while ( stream_from_clause_item.HasNext )
				{
					DebugLocation(161, 104);
					adaptor.AddChild(root_1, stream_from_clause_item.NextTree());

				}
				stream_from_clause_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("from_clause", 11);
			LeaveRule("from_clause", 11);
			LeaveRule_from_clause();
	    }
	 	DebugLocation(163, 1);
		} finally { DebugExitRule(GrammarFileName, "from_clause"); }
		return retval;

	}
	// $ANTLR end "from_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_from_clause_item() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_from_clause_item() {}

	// $ANTLR start "from_clause_item"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:165:1: from_clause_item : ( STRING -> ^( T_FILE STRING ) | file | subquery | view_name );
	[GrammarRule("from_clause_item")]
	private AstParserRuleReturnScope<object, IToken> from_clause_item()
	{
		EnterRule_from_clause_item();
		EnterRule("from_clause_item", 12);
		TraceIn("from_clause_item", 12);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken STRING69 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file70 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> subquery71 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> view_name72 = default(AstParserRuleReturnScope<object, IToken>);

	    object STRING69_tree = default(object);
	    RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");

		try { DebugEnterRule(GrammarFileName, "from_clause_item");
		DebugLocation(165, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:166:2: ( STRING -> ^( T_FILE STRING ) | file | subquery | view_name )
			int alt32=4;
			try { DebugEnterDecision(32, decisionCanBacktrack[32]);
			switch (input.LA(1))
			{
			case STRING:
				{
				alt32 = 1;
				}
				break;
			case SIMPLE_FILE:
			case 173:
				{
				alt32 = 2;
				}
				break;
			case 158:
				{
				alt32 = 3;
				}
				break;
			case TOKEN:
				{
				alt32 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 32, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:166:4: STRING
				{
				DebugLocation(166, 4);
				STRING69=(IToken)Match(input,STRING,Follow._STRING_in_from_clause_item824);  
				stream_STRING.Add(STRING69);



				{
				// AST REWRITE
				// elements: STRING
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 166:11: -> ^( T_FILE STRING )
				{
					DebugLocation(166, 14);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:166:14: ^( T_FILE STRING )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(166, 16);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILE, "T_FILE"), root_1);

					DebugLocation(166, 23);
					adaptor.AddChild(root_1, stream_STRING.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:167:4: file
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(167, 4);
				PushFollow(Follow._file_in_from_clause_item837);
				file70=file();
				PopFollow();

				adaptor.AddChild(root_0, file70.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:168:4: subquery
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(168, 4);
				PushFollow(Follow._subquery_in_from_clause_item842);
				subquery71=subquery();
				PopFollow();

				adaptor.AddChild(root_0, subquery71.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:169:4: view_name
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(169, 4);
				PushFollow(Follow._view_name_in_from_clause_item847);
				view_name72=view_name();
				PopFollow();

				adaptor.AddChild(root_0, view_name72.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("from_clause_item", 12);
			LeaveRule("from_clause_item", 12);
			LeaveRule_from_clause_item();
	    }
	 	DebugLocation(170, 1);
		} finally { DebugExitRule(GrammarFileName, "from_clause_item"); }
		return retval;

	}
	// $ANTLR end "from_clause_item"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_subquery() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_subquery() {}

	// $ANTLR start "subquery"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:172:1: subquery : '(' ( WS )? select_command ( WS )? ')' -> ^( T_SUBQUERY select_command ) ;
	[GrammarRule("subquery")]
	private AstParserRuleReturnScope<object, IToken> subquery()
	{
		EnterRule_subquery();
		EnterRule("subquery", 13);
		TraceIn("subquery", 13);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal73 = default(IToken);
	    IToken WS74 = default(IToken);
	    IToken WS76 = default(IToken);
	    IToken char_literal77 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> select_command75 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal73_tree = default(object);
	    object WS74_tree = default(object);
	    object WS76_tree = default(object);
	    object char_literal77_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_159=new RewriteRuleITokenStream(adaptor,"token 159");
	    RewriteRuleITokenStream stream_158=new RewriteRuleITokenStream(adaptor,"token 158");
	    RewriteRuleSubtreeStream stream_select_command=new RewriteRuleSubtreeStream(adaptor,"rule select_command");
		try { DebugEnterRule(GrammarFileName, "subquery");
		DebugLocation(172, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:173:2: ( '(' ( WS )? select_command ( WS )? ')' -> ^( T_SUBQUERY select_command ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:173:4: '(' ( WS )? select_command ( WS )? ')'
			{
			DebugLocation(173, 4);
			char_literal73=(IToken)Match(input,158,Follow._158_in_subquery859);  
			stream_158.Add(char_literal73);

			DebugLocation(173, 8);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:173:8: ( WS )?
			int alt33=2;
			try { DebugEnterSubRule(33);
			try { DebugEnterDecision(33, decisionCanBacktrack[33]);
			int LA33_0 = input.LA(1);

			if ((LA33_0==WS))
			{
				alt33 = 1;
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:173:8: WS
				{
				DebugLocation(173, 8);
				WS74=(IToken)Match(input,WS,Follow._WS_in_subquery861);  
				stream_WS.Add(WS74);


				}
				break;

			}
			} finally { DebugExitSubRule(33); }

			DebugLocation(173, 12);
			PushFollow(Follow._select_command_in_subquery864);
			select_command75=select_command();
			PopFollow();

			stream_select_command.Add(select_command75.Tree);
			DebugLocation(173, 27);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:173:27: ( WS )?
			int alt34=2;
			try { DebugEnterSubRule(34);
			try { DebugEnterDecision(34, decisionCanBacktrack[34]);
			int LA34_0 = input.LA(1);

			if ((LA34_0==WS))
			{
				alt34 = 1;
			}
			} finally { DebugExitDecision(34); }
			switch (alt34)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:173:27: WS
				{
				DebugLocation(173, 27);
				WS76=(IToken)Match(input,WS,Follow._WS_in_subquery866);  
				stream_WS.Add(WS76);


				}
				break;

			}
			} finally { DebugExitSubRule(34); }

			DebugLocation(173, 31);
			char_literal77=(IToken)Match(input,159,Follow._159_in_subquery869);  
			stream_159.Add(char_literal77);



			{
			// AST REWRITE
			// elements: select_command
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 173:35: -> ^( T_SUBQUERY select_command )
			{
				DebugLocation(173, 38);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:173:38: ^( T_SUBQUERY select_command )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(173, 40);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SUBQUERY, "T_SUBQUERY"), root_1);

				DebugLocation(173, 51);
				adaptor.AddChild(root_1, stream_select_command.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("subquery", 13);
			LeaveRule("subquery", 13);
			LeaveRule_subquery();
	    }
	 	DebugLocation(174, 1);
		} finally { DebugExitRule(GrammarFileName, "subquery"); }
		return retval;

	}
	// $ANTLR end "subquery"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file() {}

	// $ANTLR start "file"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:176:1: file : ( '[' ( WS )? file_spec ( WS file_option )* ( WS )? ']' -> ^( T_FILE file_spec ( file_option )* ) | SIMPLE_FILE -> ^( T_FILE SIMPLE_FILE ) );
	[GrammarRule("file")]
	private AstParserRuleReturnScope<object, IToken> file()
	{
		EnterRule_file();
		EnterRule("file", 14);
		TraceIn("file", 14);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal78 = default(IToken);
	    IToken WS79 = default(IToken);
	    IToken WS81 = default(IToken);
	    IToken WS83 = default(IToken);
	    IToken char_literal84 = default(IToken);
	    IToken SIMPLE_FILE85 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file_spec80 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> file_option82 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal78_tree = default(object);
	    object WS79_tree = default(object);
	    object WS81_tree = default(object);
	    object WS83_tree = default(object);
	    object char_literal84_tree = default(object);
	    object SIMPLE_FILE85_tree = default(object);
	    RewriteRuleITokenStream stream_174=new RewriteRuleITokenStream(adaptor,"token 174");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_SIMPLE_FILE=new RewriteRuleITokenStream(adaptor,"token SIMPLE_FILE");
	    RewriteRuleITokenStream stream_173=new RewriteRuleITokenStream(adaptor,"token 173");
	    RewriteRuleSubtreeStream stream_file_option=new RewriteRuleSubtreeStream(adaptor,"rule file_option");
	    RewriteRuleSubtreeStream stream_file_spec=new RewriteRuleSubtreeStream(adaptor,"rule file_spec");
		try { DebugEnterRule(GrammarFileName, "file");
		DebugLocation(176, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:177:2: ( '[' ( WS )? file_spec ( WS file_option )* ( WS )? ']' -> ^( T_FILE file_spec ( file_option )* ) | SIMPLE_FILE -> ^( T_FILE SIMPLE_FILE ) )
			int alt38=2;
			try { DebugEnterDecision(38, decisionCanBacktrack[38]);
			int LA38_0 = input.LA(1);

			if ((LA38_0==173))
			{
				alt38 = 1;
			}
			else if ((LA38_0==SIMPLE_FILE))
			{
				alt38 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 38, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:177:4: '[' ( WS )? file_spec ( WS file_option )* ( WS )? ']'
				{
				DebugLocation(177, 4);
				char_literal78=(IToken)Match(input,173,Follow._173_in_file888);  
				stream_173.Add(char_literal78);

				DebugLocation(177, 8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:177:8: ( WS )?
				int alt35=2;
				try { DebugEnterSubRule(35);
				try { DebugEnterDecision(35, decisionCanBacktrack[35]);
				int LA35_0 = input.LA(1);

				if ((LA35_0==WS))
				{
					alt35 = 1;
				}
				} finally { DebugExitDecision(35); }
				switch (alt35)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:177:8: WS
					{
					DebugLocation(177, 8);
					WS79=(IToken)Match(input,WS,Follow._WS_in_file890);  
					stream_WS.Add(WS79);


					}
					break;

				}
				} finally { DebugExitSubRule(35); }

				DebugLocation(177, 12);
				PushFollow(Follow._file_spec_in_file893);
				file_spec80=file_spec();
				PopFollow();

				stream_file_spec.Add(file_spec80.Tree);
				DebugLocation(177, 22);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:177:22: ( WS file_option )*
				try { DebugEnterSubRule(36);
				while (true)
				{
					int alt36=2;
					try { DebugEnterDecision(36, decisionCanBacktrack[36]);
					int LA36_0 = input.LA(1);

					if ((LA36_0==WS))
					{
						int LA36_1 = input.LA(2);

						if ((LA36_1==163))
						{
							alt36 = 1;
						}


					}


					} finally { DebugExitDecision(36); }
					switch ( alt36 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:177:23: WS file_option
						{
						DebugLocation(177, 23);
						WS81=(IToken)Match(input,WS,Follow._WS_in_file896);  
						stream_WS.Add(WS81);

						DebugLocation(177, 26);
						PushFollow(Follow._file_option_in_file898);
						file_option82=file_option();
						PopFollow();

						stream_file_option.Add(file_option82.Tree);

						}
						break;

					default:
						goto loop36;
					}
				}

				loop36:
					;

				} finally { DebugExitSubRule(36); }

				DebugLocation(177, 40);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:177:40: ( WS )?
				int alt37=2;
				try { DebugEnterSubRule(37);
				try { DebugEnterDecision(37, decisionCanBacktrack[37]);
				int LA37_0 = input.LA(1);

				if ((LA37_0==WS))
				{
					alt37 = 1;
				}
				} finally { DebugExitDecision(37); }
				switch (alt37)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:177:40: WS
					{
					DebugLocation(177, 40);
					WS83=(IToken)Match(input,WS,Follow._WS_in_file902);  
					stream_WS.Add(WS83);


					}
					break;

				}
				} finally { DebugExitSubRule(37); }

				DebugLocation(177, 44);
				char_literal84=(IToken)Match(input,174,Follow._174_in_file905);  
				stream_174.Add(char_literal84);



				{
				// AST REWRITE
				// elements: file_spec, file_option
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 177:48: -> ^( T_FILE file_spec ( file_option )* )
				{
					DebugLocation(177, 51);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:177:51: ^( T_FILE file_spec ( file_option )* )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(177, 53);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILE, "T_FILE"), root_1);

					DebugLocation(177, 60);
					adaptor.AddChild(root_1, stream_file_spec.NextTree());
					DebugLocation(177, 70);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:177:70: ( file_option )*
					while ( stream_file_option.HasNext )
					{
						DebugLocation(177, 70);
						adaptor.AddChild(root_1, stream_file_option.NextTree());

					}
					stream_file_option.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:178:4: SIMPLE_FILE
				{
				DebugLocation(178, 4);
				SIMPLE_FILE85=(IToken)Match(input,SIMPLE_FILE,Follow._SIMPLE_FILE_in_file922);  
				stream_SIMPLE_FILE.Add(SIMPLE_FILE85);



				{
				// AST REWRITE
				// elements: SIMPLE_FILE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 178:16: -> ^( T_FILE SIMPLE_FILE )
				{
					DebugLocation(178, 19);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:178:19: ^( T_FILE SIMPLE_FILE )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(178, 21);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILE, "T_FILE"), root_1);

					DebugLocation(178, 28);
					adaptor.AddChild(root_1, stream_SIMPLE_FILE.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file", 14);
			LeaveRule("file", 14);
			LeaveRule_file();
	    }
	 	DebugLocation(179, 1);
		} finally { DebugExitRule(GrammarFileName, "file"); }
		return retval;

	}
	// $ANTLR end "file"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_spec() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_spec() {}

	// $ANTLR start "file_spec"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:181:1: file_spec : ( string | variable );
	[GrammarRule("file_spec")]
	private AstParserRuleReturnScope<object, IToken> file_spec()
	{
		EnterRule_file_spec();
		EnterRule("file_spec", 15);
		TraceIn("file_spec", 15);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> string86 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> variable87 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "file_spec");
		DebugLocation(181, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:182:2: ( string | variable )
			int alt39=2;
			try { DebugEnterDecision(39, decisionCanBacktrack[39]);
			int LA39_0 = input.LA(1);

			if ((LA39_0==STRING))
			{
				alt39 = 1;
			}
			else if ((LA39_0==VARIABLE))
			{
				alt39 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 39, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:182:4: string
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(182, 4);
				PushFollow(Follow._string_in_file_spec941);
				string86=@string();
				PopFollow();

				adaptor.AddChild(root_0, string86.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:183:4: variable
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(183, 4);
				PushFollow(Follow._variable_in_file_spec946);
				variable87=variable();
				PopFollow();

				adaptor.AddChild(root_0, variable87.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_spec", 15);
			LeaveRule("file_spec", 15);
			LeaveRule_file_spec();
	    }
	 	DebugLocation(184, 1);
		} finally { DebugExitRule(GrammarFileName, "file_spec"); }
		return retval;

	}
	// $ANTLR end "file_spec"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_option() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_option() {}

	// $ANTLR start "file_option"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:186:1: file_option : '-' file_option_name ( ( WS )? '=' ( WS )? file_option_value )? -> ^( T_FILEOPTION file_option_name ( file_option_value )? ) ;
	[GrammarRule("file_option")]
	private AstParserRuleReturnScope<object, IToken> file_option()
	{
		EnterRule_file_option();
		EnterRule("file_option", 16);
		TraceIn("file_option", 16);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal88 = default(IToken);
	    IToken WS90 = default(IToken);
	    IToken char_literal91 = default(IToken);
	    IToken WS92 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file_option_name89 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> file_option_value93 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal88_tree = default(object);
	    object WS90_tree = default(object);
	    object char_literal91_tree = default(object);
	    object WS92_tree = default(object);
	    RewriteRuleITokenStream stream_170=new RewriteRuleITokenStream(adaptor,"token 170");
	    RewriteRuleITokenStream stream_163=new RewriteRuleITokenStream(adaptor,"token 163");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_file_option_name=new RewriteRuleSubtreeStream(adaptor,"rule file_option_name");
	    RewriteRuleSubtreeStream stream_file_option_value=new RewriteRuleSubtreeStream(adaptor,"rule file_option_value");
		try { DebugEnterRule(GrammarFileName, "file_option");
		DebugLocation(186, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:187:2: ( '-' file_option_name ( ( WS )? '=' ( WS )? file_option_value )? -> ^( T_FILEOPTION file_option_name ( file_option_value )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:187:4: '-' file_option_name ( ( WS )? '=' ( WS )? file_option_value )?
			{
			DebugLocation(187, 4);
			char_literal88=(IToken)Match(input,163,Follow._163_in_file_option958);  
			stream_163.Add(char_literal88);

			DebugLocation(187, 8);
			PushFollow(Follow._file_option_name_in_file_option960);
			file_option_name89=file_option_name();
			PopFollow();

			stream_file_option_name.Add(file_option_name89.Tree);
			DebugLocation(187, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:187:25: ( ( WS )? '=' ( WS )? file_option_value )?
			int alt42=2;
			try { DebugEnterSubRule(42);
			try { DebugEnterDecision(42, decisionCanBacktrack[42]);
			int LA42_0 = input.LA(1);

			if ((LA42_0==WS))
			{
				int LA42_1 = input.LA(2);

				if ((LA42_1==170))
				{
					alt42 = 1;
				}
			}
			else if ((LA42_0==170))
			{
				alt42 = 1;
			}
			} finally { DebugExitDecision(42); }
			switch (alt42)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:187:27: ( WS )? '=' ( WS )? file_option_value
				{
				DebugLocation(187, 27);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:187:27: ( WS )?
				int alt40=2;
				try { DebugEnterSubRule(40);
				try { DebugEnterDecision(40, decisionCanBacktrack[40]);
				int LA40_0 = input.LA(1);

				if ((LA40_0==WS))
				{
					alt40 = 1;
				}
				} finally { DebugExitDecision(40); }
				switch (alt40)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:187:27: WS
					{
					DebugLocation(187, 27);
					WS90=(IToken)Match(input,WS,Follow._WS_in_file_option964);  
					stream_WS.Add(WS90);


					}
					break;

				}
				} finally { DebugExitSubRule(40); }

				DebugLocation(187, 31);
				char_literal91=(IToken)Match(input,170,Follow._170_in_file_option967);  
				stream_170.Add(char_literal91);

				DebugLocation(187, 35);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:187:35: ( WS )?
				int alt41=2;
				try { DebugEnterSubRule(41);
				try { DebugEnterDecision(41, decisionCanBacktrack[41]);
				int LA41_0 = input.LA(1);

				if ((LA41_0==WS))
				{
					alt41 = 1;
				}
				} finally { DebugExitDecision(41); }
				switch (alt41)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:187:35: WS
					{
					DebugLocation(187, 35);
					WS92=(IToken)Match(input,WS,Follow._WS_in_file_option969);  
					stream_WS.Add(WS92);


					}
					break;

				}
				} finally { DebugExitSubRule(41); }

				DebugLocation(187, 39);
				PushFollow(Follow._file_option_value_in_file_option972);
				file_option_value93=file_option_value();
				PopFollow();

				stream_file_option_value.Add(file_option_value93.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(42); }



			{
			// AST REWRITE
			// elements: file_option_name, file_option_value
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 187:59: -> ^( T_FILEOPTION file_option_name ( file_option_value )? )
			{
				DebugLocation(187, 62);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:187:62: ^( T_FILEOPTION file_option_name ( file_option_value )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(187, 64);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILEOPTION, "T_FILEOPTION"), root_1);

				DebugLocation(187, 77);
				adaptor.AddChild(root_1, stream_file_option_name.NextTree());
				DebugLocation(187, 94);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:187:94: ( file_option_value )?
				if (stream_file_option_value.HasNext)
				{
					DebugLocation(187, 94);
					adaptor.AddChild(root_1, stream_file_option_value.NextTree());

				}
				stream_file_option_value.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_option", 16);
			LeaveRule("file_option", 16);
			LeaveRule_file_option();
	    }
	 	DebugLocation(188, 1);
		} finally { DebugExitRule(GrammarFileName, "file_option"); }
		return retval;

	}
	// $ANTLR end "file_option"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_option_name() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_option_name() {}

	// $ANTLR start "file_option_name"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:190:1: file_option_name : TOKEN ;
	[GrammarRule("file_option_name")]
	private AstParserRuleReturnScope<object, IToken> file_option_name()
	{
		EnterRule_file_option_name();
		EnterRule("file_option_name", 17);
		TraceIn("file_option_name", 17);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN94 = default(IToken);

	    object TOKEN94_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "file_option_name");
		DebugLocation(190, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:191:2: ( TOKEN )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:191:4: TOKEN
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(191, 4);
			TOKEN94=(IToken)Match(input,TOKEN,Follow._TOKEN_in_file_option_name996); 
			TOKEN94_tree = (object)adaptor.Create(TOKEN94);
			adaptor.AddChild(root_0, TOKEN94_tree);


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_option_name", 17);
			LeaveRule("file_option_name", 17);
			LeaveRule_file_option_name();
	    }
	 	DebugLocation(192, 1);
		} finally { DebugExitRule(GrammarFileName, "file_option_name"); }
		return retval;

	}
	// $ANTLR end "file_option_name"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_option_value() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_option_value() {}

	// $ANTLR start "file_option_value"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:194:1: file_option_value : ( TOKEN | STRING | NUMBER | variable );
	[GrammarRule("file_option_value")]
	private AstParserRuleReturnScope<object, IToken> file_option_value()
	{
		EnterRule_file_option_value();
		EnterRule("file_option_value", 18);
		TraceIn("file_option_value", 18);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN95 = default(IToken);
	    IToken STRING96 = default(IToken);
	    IToken NUMBER97 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> variable98 = default(AstParserRuleReturnScope<object, IToken>);

	    object TOKEN95_tree = default(object);
	    object STRING96_tree = default(object);
	    object NUMBER97_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "file_option_value");
		DebugLocation(194, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:195:2: ( TOKEN | STRING | NUMBER | variable )
			int alt43=4;
			try { DebugEnterDecision(43, decisionCanBacktrack[43]);
			switch (input.LA(1))
			{
			case TOKEN:
				{
				alt43 = 1;
				}
				break;
			case STRING:
				{
				alt43 = 2;
				}
				break;
			case NUMBER:
				{
				alt43 = 3;
				}
				break;
			case VARIABLE:
				{
				alt43 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 43, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(43); }
			switch (alt43)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:195:4: TOKEN
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(195, 4);
				TOKEN95=(IToken)Match(input,TOKEN,Follow._TOKEN_in_file_option_value1008); 
				TOKEN95_tree = (object)adaptor.Create(TOKEN95);
				adaptor.AddChild(root_0, TOKEN95_tree);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:195:12: STRING
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(195, 12);
				STRING96=(IToken)Match(input,STRING,Follow._STRING_in_file_option_value1012); 
				STRING96_tree = (object)adaptor.Create(STRING96);
				adaptor.AddChild(root_0, STRING96_tree);


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:195:21: NUMBER
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(195, 21);
				NUMBER97=(IToken)Match(input,NUMBER,Follow._NUMBER_in_file_option_value1016); 
				NUMBER97_tree = (object)adaptor.Create(NUMBER97);
				adaptor.AddChild(root_0, NUMBER97_tree);


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:195:30: variable
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(195, 30);
				PushFollow(Follow._variable_in_file_option_value1020);
				variable98=variable();
				PopFollow();

				adaptor.AddChild(root_0, variable98.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_option_value", 18);
			LeaveRule("file_option_value", 18);
			LeaveRule_file_option_value();
	    }
	 	DebugLocation(196, 1);
		} finally { DebugExitRule(GrammarFileName, "file_option_value"); }
		return retval;

	}
	// $ANTLR end "file_option_value"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_where_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_where_clause() {}

	// $ANTLR start "where_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:198:1: where_clause : WHERE WS expression -> ^( T_WHERE expression ) ;
	[GrammarRule("where_clause")]
	private AstParserRuleReturnScope<object, IToken> where_clause()
	{
		EnterRule_where_clause();
		EnterRule("where_clause", 19);
		TraceIn("where_clause", 19);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WHERE99 = default(IToken);
	    IToken WS100 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression101 = default(AstParserRuleReturnScope<object, IToken>);

	    object WHERE99_tree = default(object);
	    object WS100_tree = default(object);
	    RewriteRuleITokenStream stream_WHERE=new RewriteRuleITokenStream(adaptor,"token WHERE");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "where_clause");
		DebugLocation(198, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:199:2: ( WHERE WS expression -> ^( T_WHERE expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:199:4: WHERE WS expression
			{
			DebugLocation(199, 4);
			WHERE99=(IToken)Match(input,WHERE,Follow._WHERE_in_where_clause1032);  
			stream_WHERE.Add(WHERE99);

			DebugLocation(199, 10);
			WS100=(IToken)Match(input,WS,Follow._WS_in_where_clause1034);  
			stream_WS.Add(WS100);

			DebugLocation(199, 13);
			PushFollow(Follow._expression_in_where_clause1036);
			expression101=expression();
			PopFollow();

			stream_expression.Add(expression101.Tree);


			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 200:2: -> ^( T_WHERE expression )
			{
				DebugLocation(200, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:200:5: ^( T_WHERE expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(200, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_WHERE, "T_WHERE"), root_1);

				DebugLocation(200, 15);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("where_clause", 19);
			LeaveRule("where_clause", 19);
			LeaveRule_where_clause();
	    }
	 	DebugLocation(201, 1);
		} finally { DebugExitRule(GrammarFileName, "where_clause"); }
		return retval;

	}
	// $ANTLR end "where_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_groupby_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_groupby_clause() {}

	// $ANTLR start "groupby_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:202:1: groupby_clause : GROUP WS BY WS orderby_column_list -> ^( T_GROUPBY orderby_column_list ) ;
	[GrammarRule("groupby_clause")]
	private AstParserRuleReturnScope<object, IToken> groupby_clause()
	{
		EnterRule_groupby_clause();
		EnterRule("groupby_clause", 20);
		TraceIn("groupby_clause", 20);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken GROUP102 = default(IToken);
	    IToken WS103 = default(IToken);
	    IToken BY104 = default(IToken);
	    IToken WS105 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> orderby_column_list106 = default(AstParserRuleReturnScope<object, IToken>);

	    object GROUP102_tree = default(object);
	    object WS103_tree = default(object);
	    object BY104_tree = default(object);
	    object WS105_tree = default(object);
	    RewriteRuleITokenStream stream_GROUP=new RewriteRuleITokenStream(adaptor,"token GROUP");
	    RewriteRuleITokenStream stream_BY=new RewriteRuleITokenStream(adaptor,"token BY");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_orderby_column_list=new RewriteRuleSubtreeStream(adaptor,"rule orderby_column_list");
		try { DebugEnterRule(GrammarFileName, "groupby_clause");
		DebugLocation(202, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:203:2: ( GROUP WS BY WS orderby_column_list -> ^( T_GROUPBY orderby_column_list ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:203:4: GROUP WS BY WS orderby_column_list
			{
			DebugLocation(203, 4);
			GROUP102=(IToken)Match(input,GROUP,Follow._GROUP_in_groupby_clause1055);  
			stream_GROUP.Add(GROUP102);

			DebugLocation(203, 10);
			WS103=(IToken)Match(input,WS,Follow._WS_in_groupby_clause1057);  
			stream_WS.Add(WS103);

			DebugLocation(203, 13);
			BY104=(IToken)Match(input,BY,Follow._BY_in_groupby_clause1059);  
			stream_BY.Add(BY104);

			DebugLocation(203, 16);
			WS105=(IToken)Match(input,WS,Follow._WS_in_groupby_clause1061);  
			stream_WS.Add(WS105);

			DebugLocation(203, 19);
			PushFollow(Follow._orderby_column_list_in_groupby_clause1063);
			orderby_column_list106=orderby_column_list();
			PopFollow();

			stream_orderby_column_list.Add(orderby_column_list106.Tree);


			{
			// AST REWRITE
			// elements: orderby_column_list
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 204:2: -> ^( T_GROUPBY orderby_column_list )
			{
				DebugLocation(204, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:204:5: ^( T_GROUPBY orderby_column_list )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(204, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_GROUPBY, "T_GROUPBY"), root_1);

				DebugLocation(204, 17);
				adaptor.AddChild(root_1, stream_orderby_column_list.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("groupby_clause", 20);
			LeaveRule("groupby_clause", 20);
			LeaveRule_groupby_clause();
	    }
	 	DebugLocation(205, 1);
		} finally { DebugExitRule(GrammarFileName, "groupby_clause"); }
		return retval;

	}
	// $ANTLR end "groupby_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_having_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_having_clause() {}

	// $ANTLR start "having_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:207:1: having_clause : HAVING WS expression -> ^( T_HAVING expression ) ;
	[GrammarRule("having_clause")]
	private AstParserRuleReturnScope<object, IToken> having_clause()
	{
		EnterRule_having_clause();
		EnterRule("having_clause", 21);
		TraceIn("having_clause", 21);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken HAVING107 = default(IToken);
	    IToken WS108 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression109 = default(AstParserRuleReturnScope<object, IToken>);

	    object HAVING107_tree = default(object);
	    object WS108_tree = default(object);
	    RewriteRuleITokenStream stream_HAVING=new RewriteRuleITokenStream(adaptor,"token HAVING");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "having_clause");
		DebugLocation(207, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:208:2: ( HAVING WS expression -> ^( T_HAVING expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:208:4: HAVING WS expression
			{
			DebugLocation(208, 4);
			HAVING107=(IToken)Match(input,HAVING,Follow._HAVING_in_having_clause1084);  
			stream_HAVING.Add(HAVING107);

			DebugLocation(208, 11);
			WS108=(IToken)Match(input,WS,Follow._WS_in_having_clause1086);  
			stream_WS.Add(WS108);

			DebugLocation(208, 14);
			PushFollow(Follow._expression_in_having_clause1088);
			expression109=expression();
			PopFollow();

			stream_expression.Add(expression109.Tree);


			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 209:2: -> ^( T_HAVING expression )
			{
				DebugLocation(209, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:209:5: ^( T_HAVING expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(209, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_HAVING, "T_HAVING"), root_1);

				DebugLocation(209, 16);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("having_clause", 21);
			LeaveRule("having_clause", 21);
			LeaveRule_having_clause();
	    }
	 	DebugLocation(210, 1);
		} finally { DebugExitRule(GrammarFileName, "having_clause"); }
		return retval;

	}
	// $ANTLR end "having_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_clause() {}

	// $ANTLR start "orderby_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:212:1: orderby_clause : ORDER WS BY WS orderby_column_list -> ^( T_ORDERBY orderby_column_list ) ;
	[GrammarRule("orderby_clause")]
	private AstParserRuleReturnScope<object, IToken> orderby_clause()
	{
		EnterRule_orderby_clause();
		EnterRule("orderby_clause", 22);
		TraceIn("orderby_clause", 22);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken ORDER110 = default(IToken);
	    IToken WS111 = default(IToken);
	    IToken BY112 = default(IToken);
	    IToken WS113 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> orderby_column_list114 = default(AstParserRuleReturnScope<object, IToken>);

	    object ORDER110_tree = default(object);
	    object WS111_tree = default(object);
	    object BY112_tree = default(object);
	    object WS113_tree = default(object);
	    RewriteRuleITokenStream stream_BY=new RewriteRuleITokenStream(adaptor,"token BY");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_ORDER=new RewriteRuleITokenStream(adaptor,"token ORDER");
	    RewriteRuleSubtreeStream stream_orderby_column_list=new RewriteRuleSubtreeStream(adaptor,"rule orderby_column_list");
		try { DebugEnterRule(GrammarFileName, "orderby_clause");
		DebugLocation(212, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:213:2: ( ORDER WS BY WS orderby_column_list -> ^( T_ORDERBY orderby_column_list ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:213:4: ORDER WS BY WS orderby_column_list
			{
			DebugLocation(213, 4);
			ORDER110=(IToken)Match(input,ORDER,Follow._ORDER_in_orderby_clause1109);  
			stream_ORDER.Add(ORDER110);

			DebugLocation(213, 10);
			WS111=(IToken)Match(input,WS,Follow._WS_in_orderby_clause1111);  
			stream_WS.Add(WS111);

			DebugLocation(213, 13);
			BY112=(IToken)Match(input,BY,Follow._BY_in_orderby_clause1113);  
			stream_BY.Add(BY112);

			DebugLocation(213, 16);
			WS113=(IToken)Match(input,WS,Follow._WS_in_orderby_clause1115);  
			stream_WS.Add(WS113);

			DebugLocation(213, 19);
			PushFollow(Follow._orderby_column_list_in_orderby_clause1117);
			orderby_column_list114=orderby_column_list();
			PopFollow();

			stream_orderby_column_list.Add(orderby_column_list114.Tree);


			{
			// AST REWRITE
			// elements: orderby_column_list
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 214:2: -> ^( T_ORDERBY orderby_column_list )
			{
				DebugLocation(214, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:214:5: ^( T_ORDERBY orderby_column_list )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(214, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_ORDERBY, "T_ORDERBY"), root_1);

				DebugLocation(214, 17);
				adaptor.AddChild(root_1, stream_orderby_column_list.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_clause", 22);
			LeaveRule("orderby_clause", 22);
			LeaveRule_orderby_clause();
	    }
	 	DebugLocation(215, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_clause"); }
		return retval;

	}
	// $ANTLR end "orderby_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_column_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_column_list() {}

	// $ANTLR start "orderby_column_list"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:217:1: orderby_column_list : orderby_column ( ( WS )? ',' ( WS )? orderby_column )* -> ( orderby_column )* ;
	[GrammarRule("orderby_column_list")]
	private AstParserRuleReturnScope<object, IToken> orderby_column_list()
	{
		EnterRule_orderby_column_list();
		EnterRule("orderby_column_list", 23);
		TraceIn("orderby_column_list", 23);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS116 = default(IToken);
	    IToken char_literal117 = default(IToken);
	    IToken WS118 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> orderby_column115 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> orderby_column119 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS116_tree = default(object);
	    object char_literal117_tree = default(object);
	    object WS118_tree = default(object);
	    RewriteRuleITokenStream stream_162=new RewriteRuleITokenStream(adaptor,"token 162");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_orderby_column=new RewriteRuleSubtreeStream(adaptor,"rule orderby_column");
		try { DebugEnterRule(GrammarFileName, "orderby_column_list");
		DebugLocation(217, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:218:2: ( orderby_column ( ( WS )? ',' ( WS )? orderby_column )* -> ( orderby_column )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:218:4: orderby_column ( ( WS )? ',' ( WS )? orderby_column )*
			{
			DebugLocation(218, 4);
			PushFollow(Follow._orderby_column_in_orderby_column_list1138);
			orderby_column115=orderby_column();
			PopFollow();

			stream_orderby_column.Add(orderby_column115.Tree);
			DebugLocation(218, 19);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:218:19: ( ( WS )? ',' ( WS )? orderby_column )*
			try { DebugEnterSubRule(46);
			while (true)
			{
				int alt46=2;
				try { DebugEnterDecision(46, decisionCanBacktrack[46]);
				int LA46_0 = input.LA(1);

				if ((LA46_0==WS))
				{
					int LA46_1 = input.LA(2);

					if ((LA46_1==162))
					{
						alt46 = 1;
					}


				}
				else if ((LA46_0==162))
				{
					alt46 = 1;
				}


				} finally { DebugExitDecision(46); }
				switch ( alt46 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:218:20: ( WS )? ',' ( WS )? orderby_column
					{
					DebugLocation(218, 20);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:218:20: ( WS )?
					int alt44=2;
					try { DebugEnterSubRule(44);
					try { DebugEnterDecision(44, decisionCanBacktrack[44]);
					int LA44_0 = input.LA(1);

					if ((LA44_0==WS))
					{
						alt44 = 1;
					}
					} finally { DebugExitDecision(44); }
					switch (alt44)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:218:20: WS
						{
						DebugLocation(218, 20);
						WS116=(IToken)Match(input,WS,Follow._WS_in_orderby_column_list1141);  
						stream_WS.Add(WS116);


						}
						break;

					}
					} finally { DebugExitSubRule(44); }

					DebugLocation(218, 24);
					char_literal117=(IToken)Match(input,162,Follow._162_in_orderby_column_list1144);  
					stream_162.Add(char_literal117);

					DebugLocation(218, 28);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:218:28: ( WS )?
					int alt45=2;
					try { DebugEnterSubRule(45);
					try { DebugEnterDecision(45, decisionCanBacktrack[45]);
					int LA45_0 = input.LA(1);

					if ((LA45_0==WS))
					{
						alt45 = 1;
					}
					} finally { DebugExitDecision(45); }
					switch (alt45)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:218:28: WS
						{
						DebugLocation(218, 28);
						WS118=(IToken)Match(input,WS,Follow._WS_in_orderby_column_list1146);  
						stream_WS.Add(WS118);


						}
						break;

					}
					} finally { DebugExitSubRule(45); }

					DebugLocation(218, 32);
					PushFollow(Follow._orderby_column_in_orderby_column_list1149);
					orderby_column119=orderby_column();
					PopFollow();

					stream_orderby_column.Add(orderby_column119.Tree);

					}
					break;

				default:
					goto loop46;
				}
			}

			loop46:
				;

			} finally { DebugExitSubRule(46); }



			{
			// AST REWRITE
			// elements: orderby_column
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 219:2: -> ( orderby_column )*
			{
				DebugLocation(219, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:219:5: ( orderby_column )*
				while ( stream_orderby_column.HasNext )
				{
					DebugLocation(219, 5);
					adaptor.AddChild(root_0, stream_orderby_column.NextTree());

				}
				stream_orderby_column.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_column_list", 23);
			LeaveRule("orderby_column_list", 23);
			LeaveRule_orderby_column_list();
	    }
	 	DebugLocation(220, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_column_list"); }
		return retval;

	}
	// $ANTLR end "orderby_column_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_column() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_column() {}

	// $ANTLR start "orderby_column"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:222:1: orderby_column : expression ( WS orderby_direction )? -> ^( T_ORDERBY_COLUMN expression ( orderby_direction )? ) ;
	[GrammarRule("orderby_column")]
	private AstParserRuleReturnScope<object, IToken> orderby_column()
	{
		EnterRule_orderby_column();
		EnterRule("orderby_column", 24);
		TraceIn("orderby_column", 24);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS121 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression120 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> orderby_direction122 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS121_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_orderby_direction=new RewriteRuleSubtreeStream(adaptor,"rule orderby_direction");
		try { DebugEnterRule(GrammarFileName, "orderby_column");
		DebugLocation(222, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:223:2: ( expression ( WS orderby_direction )? -> ^( T_ORDERBY_COLUMN expression ( orderby_direction )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:223:4: expression ( WS orderby_direction )?
			{
			DebugLocation(223, 4);
			PushFollow(Follow._expression_in_orderby_column1169);
			expression120=expression();
			PopFollow();

			stream_expression.Add(expression120.Tree);
			DebugLocation(223, 15);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:223:15: ( WS orderby_direction )?
			int alt47=2;
			try { DebugEnterSubRule(47);
			try { DebugEnterDecision(47, decisionCanBacktrack[47]);
			int LA47_0 = input.LA(1);

			if ((LA47_0==WS))
			{
				int LA47_1 = input.LA(2);

				if ((LA47_1==ASC||LA47_1==DESC||LA47_1==ORIG))
				{
					alt47 = 1;
				}
			}
			} finally { DebugExitDecision(47); }
			switch (alt47)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:223:16: WS orderby_direction
				{
				DebugLocation(223, 16);
				WS121=(IToken)Match(input,WS,Follow._WS_in_orderby_column1172);  
				stream_WS.Add(WS121);

				DebugLocation(223, 19);
				PushFollow(Follow._orderby_direction_in_orderby_column1174);
				orderby_direction122=orderby_direction();
				PopFollow();

				stream_orderby_direction.Add(orderby_direction122.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(47); }



			{
			// AST REWRITE
			// elements: orderby_direction, expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 223:39: -> ^( T_ORDERBY_COLUMN expression ( orderby_direction )? )
			{
				DebugLocation(223, 42);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:223:42: ^( T_ORDERBY_COLUMN expression ( orderby_direction )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(223, 44);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_ORDERBY_COLUMN, "T_ORDERBY_COLUMN"), root_1);

				DebugLocation(223, 61);
				adaptor.AddChild(root_1, stream_expression.NextTree());
				DebugLocation(223, 72);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:223:72: ( orderby_direction )?
				if (stream_orderby_direction.HasNext)
				{
					DebugLocation(223, 72);
					adaptor.AddChild(root_1, stream_orderby_direction.NextTree());

				}
				stream_orderby_direction.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_column", 24);
			LeaveRule("orderby_column", 24);
			LeaveRule_orderby_column();
	    }
	 	DebugLocation(224, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_column"); }
		return retval;

	}
	// $ANTLR end "orderby_column"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_direction() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_direction() {}

	// $ANTLR start "orderby_direction"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:226:1: orderby_direction : ( ASC -> T_ORDERBY_ASC | DESC -> T_ORDERBY_DESC | ORIG -> T_ORDERBY_ORIG );
	[GrammarRule("orderby_direction")]
	private AstParserRuleReturnScope<object, IToken> orderby_direction()
	{
		EnterRule_orderby_direction();
		EnterRule("orderby_direction", 25);
		TraceIn("orderby_direction", 25);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken ASC123 = default(IToken);
	    IToken DESC124 = default(IToken);
	    IToken ORIG125 = default(IToken);

	    object ASC123_tree = default(object);
	    object DESC124_tree = default(object);
	    object ORIG125_tree = default(object);
	    RewriteRuleITokenStream stream_DESC=new RewriteRuleITokenStream(adaptor,"token DESC");
	    RewriteRuleITokenStream stream_ASC=new RewriteRuleITokenStream(adaptor,"token ASC");
	    RewriteRuleITokenStream stream_ORIG=new RewriteRuleITokenStream(adaptor,"token ORIG");

		try { DebugEnterRule(GrammarFileName, "orderby_direction");
		DebugLocation(226, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:227:2: ( ASC -> T_ORDERBY_ASC | DESC -> T_ORDERBY_DESC | ORIG -> T_ORDERBY_ORIG )
			int alt48=3;
			try { DebugEnterDecision(48, decisionCanBacktrack[48]);
			switch (input.LA(1))
			{
			case ASC:
				{
				alt48 = 1;
				}
				break;
			case DESC:
				{
				alt48 = 2;
				}
				break;
			case ORIG:
				{
				alt48 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 48, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(48); }
			switch (alt48)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:227:4: ASC
				{
				DebugLocation(227, 4);
				ASC123=(IToken)Match(input,ASC,Follow._ASC_in_orderby_direction1199);  
				stream_ASC.Add(ASC123);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 227:8: -> T_ORDERBY_ASC
				{
					DebugLocation(227, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_ORDERBY_ASC, "T_ORDERBY_ASC"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:228:4: DESC
				{
				DebugLocation(228, 4);
				DESC124=(IToken)Match(input,DESC,Follow._DESC_in_orderby_direction1208);  
				stream_DESC.Add(DESC124);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 228:9: -> T_ORDERBY_DESC
				{
					DebugLocation(228, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_ORDERBY_DESC, "T_ORDERBY_DESC"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:229:4: ORIG
				{
				DebugLocation(229, 4);
				ORIG125=(IToken)Match(input,ORIG,Follow._ORIG_in_orderby_direction1217);  
				stream_ORIG.Add(ORIG125);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 229:9: -> T_ORDERBY_ORIG
				{
					DebugLocation(229, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_ORDERBY_ORIG, "T_ORDERBY_ORIG"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_direction", 25);
			LeaveRule("orderby_direction", 25);
			LeaveRule_orderby_direction();
	    }
	 	DebugLocation(230, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_direction"); }
		return retval;

	}
	// $ANTLR end "orderby_direction"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_use_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_use_command() {}

	// $ANTLR start "use_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:235:1: use_command : USE WS file -> ^( T_USE file ) ;
	[GrammarRule("use_command")]
	private AstParserRuleReturnScope<object, IToken> use_command()
	{
		EnterRule_use_command();
		EnterRule("use_command", 26);
		TraceIn("use_command", 26);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken USE126 = default(IToken);
	    IToken WS127 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file128 = default(AstParserRuleReturnScope<object, IToken>);

	    object USE126_tree = default(object);
	    object WS127_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_USE=new RewriteRuleITokenStream(adaptor,"token USE");
	    RewriteRuleSubtreeStream stream_file=new RewriteRuleSubtreeStream(adaptor,"rule file");
		try { DebugEnterRule(GrammarFileName, "use_command");
		DebugLocation(235, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:236:2: ( USE WS file -> ^( T_USE file ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:236:4: USE WS file
			{
			DebugLocation(236, 4);
			USE126=(IToken)Match(input,USE,Follow._USE_in_use_command1235);  
			stream_USE.Add(USE126);

			DebugLocation(236, 8);
			WS127=(IToken)Match(input,WS,Follow._WS_in_use_command1237);  
			stream_WS.Add(WS127);

			DebugLocation(236, 11);
			PushFollow(Follow._file_in_use_command1239);
			file128=file();
			PopFollow();

			stream_file.Add(file128.Tree);


			{
			// AST REWRITE
			// elements: file
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 236:16: -> ^( T_USE file )
			{
				DebugLocation(236, 19);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:236:19: ^( T_USE file )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(236, 21);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_USE, "T_USE"), root_1);

				DebugLocation(236, 27);
				adaptor.AddChild(root_1, stream_file.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("use_command", 26);
			LeaveRule("use_command", 26);
			LeaveRule_use_command();
	    }
	 	DebugLocation(237, 1);
		} finally { DebugExitRule(GrammarFileName, "use_command"); }
		return retval;

	}
	// $ANTLR end "use_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_declare_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_declare_command() {}

	// $ANTLR start "declare_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:242:1: declare_command : DECLARE WS declaration_list -> declaration_list ;
	[GrammarRule("declare_command")]
	private AstParserRuleReturnScope<object, IToken> declare_command()
	{
		EnterRule_declare_command();
		EnterRule("declare_command", 27);
		TraceIn("declare_command", 27);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken DECLARE129 = default(IToken);
	    IToken WS130 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> declaration_list131 = default(AstParserRuleReturnScope<object, IToken>);

	    object DECLARE129_tree = default(object);
	    object WS130_tree = default(object);
	    RewriteRuleITokenStream stream_DECLARE=new RewriteRuleITokenStream(adaptor,"token DECLARE");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_declaration_list=new RewriteRuleSubtreeStream(adaptor,"rule declaration_list");
		try { DebugEnterRule(GrammarFileName, "declare_command");
		DebugLocation(242, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:243:2: ( DECLARE WS declaration_list -> declaration_list )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:243:4: DECLARE WS declaration_list
			{
			DebugLocation(243, 4);
			DECLARE129=(IToken)Match(input,DECLARE,Follow._DECLARE_in_declare_command1261);  
			stream_DECLARE.Add(DECLARE129);

			DebugLocation(243, 12);
			WS130=(IToken)Match(input,WS,Follow._WS_in_declare_command1263);  
			stream_WS.Add(WS130);

			DebugLocation(243, 15);
			PushFollow(Follow._declaration_list_in_declare_command1265);
			declaration_list131=declaration_list();
			PopFollow();

			stream_declaration_list.Add(declaration_list131.Tree);


			{
			// AST REWRITE
			// elements: declaration_list
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 243:32: -> declaration_list
			{
				DebugLocation(243, 35);
				adaptor.AddChild(root_0, stream_declaration_list.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declare_command", 27);
			LeaveRule("declare_command", 27);
			LeaveRule_declare_command();
	    }
	 	DebugLocation(244, 1);
		} finally { DebugExitRule(GrammarFileName, "declare_command"); }
		return retval;

	}
	// $ANTLR end "declare_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_declaration_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_declaration_list() {}

	// $ANTLR start "declaration_list"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:246:1: declaration_list : declaration ( ( WS )? ',' ( WS )? declaration )* -> ^( T_DECLARE ( declaration )+ ) ;
	[GrammarRule("declaration_list")]
	private AstParserRuleReturnScope<object, IToken> declaration_list()
	{
		EnterRule_declaration_list();
		EnterRule("declaration_list", 28);
		TraceIn("declaration_list", 28);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS133 = default(IToken);
	    IToken char_literal134 = default(IToken);
	    IToken WS135 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> declaration132 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> declaration136 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS133_tree = default(object);
	    object char_literal134_tree = default(object);
	    object WS135_tree = default(object);
	    RewriteRuleITokenStream stream_162=new RewriteRuleITokenStream(adaptor,"token 162");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_declaration=new RewriteRuleSubtreeStream(adaptor,"rule declaration");
		try { DebugEnterRule(GrammarFileName, "declaration_list");
		DebugLocation(246, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:247:2: ( declaration ( ( WS )? ',' ( WS )? declaration )* -> ^( T_DECLARE ( declaration )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:247:4: declaration ( ( WS )? ',' ( WS )? declaration )*
			{
			DebugLocation(247, 4);
			PushFollow(Follow._declaration_in_declaration_list1282);
			declaration132=declaration();
			PopFollow();

			stream_declaration.Add(declaration132.Tree);
			DebugLocation(247, 16);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:247:16: ( ( WS )? ',' ( WS )? declaration )*
			try { DebugEnterSubRule(51);
			while (true)
			{
				int alt51=2;
				try { DebugEnterDecision(51, decisionCanBacktrack[51]);
				int LA51_0 = input.LA(1);

				if ((LA51_0==WS))
				{
					int LA51_1 = input.LA(2);

					if ((LA51_1==162))
					{
						alt51 = 1;
					}


				}
				else if ((LA51_0==162))
				{
					alt51 = 1;
				}


				} finally { DebugExitDecision(51); }
				switch ( alt51 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:247:17: ( WS )? ',' ( WS )? declaration
					{
					DebugLocation(247, 17);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:247:17: ( WS )?
					int alt49=2;
					try { DebugEnterSubRule(49);
					try { DebugEnterDecision(49, decisionCanBacktrack[49]);
					int LA49_0 = input.LA(1);

					if ((LA49_0==WS))
					{
						alt49 = 1;
					}
					} finally { DebugExitDecision(49); }
					switch (alt49)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:247:17: WS
						{
						DebugLocation(247, 17);
						WS133=(IToken)Match(input,WS,Follow._WS_in_declaration_list1285);  
						stream_WS.Add(WS133);


						}
						break;

					}
					} finally { DebugExitSubRule(49); }

					DebugLocation(247, 21);
					char_literal134=(IToken)Match(input,162,Follow._162_in_declaration_list1288);  
					stream_162.Add(char_literal134);

					DebugLocation(247, 25);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:247:25: ( WS )?
					int alt50=2;
					try { DebugEnterSubRule(50);
					try { DebugEnterDecision(50, decisionCanBacktrack[50]);
					int LA50_0 = input.LA(1);

					if ((LA50_0==WS))
					{
						alt50 = 1;
					}
					} finally { DebugExitDecision(50); }
					switch (alt50)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:247:25: WS
						{
						DebugLocation(247, 25);
						WS135=(IToken)Match(input,WS,Follow._WS_in_declaration_list1290);  
						stream_WS.Add(WS135);


						}
						break;

					}
					} finally { DebugExitSubRule(50); }

					DebugLocation(247, 29);
					PushFollow(Follow._declaration_in_declaration_list1293);
					declaration136=declaration();
					PopFollow();

					stream_declaration.Add(declaration136.Tree);

					}
					break;

				default:
					goto loop51;
				}
			}

			loop51:
				;

			} finally { DebugExitSubRule(51); }



			{
			// AST REWRITE
			// elements: declaration
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 248:2: -> ^( T_DECLARE ( declaration )+ )
			{
				DebugLocation(248, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:248:5: ^( T_DECLARE ( declaration )+ )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(248, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_DECLARE, "T_DECLARE"), root_1);

				DebugLocation(248, 17);
				if (!(stream_declaration.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_declaration.HasNext )
				{
					DebugLocation(248, 17);
					adaptor.AddChild(root_1, stream_declaration.NextTree());

				}
				stream_declaration.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declaration_list", 28);
			LeaveRule("declaration_list", 28);
			LeaveRule_declaration_list();
	    }
	 	DebugLocation(249, 1);
		} finally { DebugExitRule(GrammarFileName, "declaration_list"); }
		return retval;

	}
	// $ANTLR end "declaration_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_declaration() {}

	// $ANTLR start "declaration"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:251:1: declaration : variable WS ( AS WS )? datatype -> ^( T_DECLARATION variable datatype ) ;
	[GrammarRule("declaration")]
	private AstParserRuleReturnScope<object, IToken> declaration()
	{
		EnterRule_declaration();
		EnterRule("declaration", 29);
		TraceIn("declaration", 29);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS138 = default(IToken);
	    IToken AS139 = default(IToken);
	    IToken WS140 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> variable137 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> datatype141 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS138_tree = default(object);
	    object AS139_tree = default(object);
	    object WS140_tree = default(object);
	    RewriteRuleITokenStream stream_AS=new RewriteRuleITokenStream(adaptor,"token AS");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_datatype=new RewriteRuleSubtreeStream(adaptor,"rule datatype");
	    RewriteRuleSubtreeStream stream_variable=new RewriteRuleSubtreeStream(adaptor,"rule variable");
		try { DebugEnterRule(GrammarFileName, "declaration");
		DebugLocation(251, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:252:2: ( variable WS ( AS WS )? datatype -> ^( T_DECLARATION variable datatype ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:252:4: variable WS ( AS WS )? datatype
			{
			DebugLocation(252, 4);
			PushFollow(Follow._variable_in_declaration1317);
			variable137=variable();
			PopFollow();

			stream_variable.Add(variable137.Tree);
			DebugLocation(252, 13);
			WS138=(IToken)Match(input,WS,Follow._WS_in_declaration1319);  
			stream_WS.Add(WS138);

			DebugLocation(252, 16);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:252:16: ( AS WS )?
			int alt52=2;
			try { DebugEnterSubRule(52);
			try { DebugEnterDecision(52, decisionCanBacktrack[52]);
			int LA52_0 = input.LA(1);

			if ((LA52_0==AS))
			{
				alt52 = 1;
			}
			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:252:17: AS WS
				{
				DebugLocation(252, 17);
				AS139=(IToken)Match(input,AS,Follow._AS_in_declaration1322);  
				stream_AS.Add(AS139);

				DebugLocation(252, 20);
				WS140=(IToken)Match(input,WS,Follow._WS_in_declaration1324);  
				stream_WS.Add(WS140);


				}
				break;

			}
			} finally { DebugExitSubRule(52); }

			DebugLocation(252, 25);
			PushFollow(Follow._datatype_in_declaration1328);
			datatype141=datatype();
			PopFollow();

			stream_datatype.Add(datatype141.Tree);


			{
			// AST REWRITE
			// elements: variable, datatype
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 253:2: -> ^( T_DECLARATION variable datatype )
			{
				DebugLocation(253, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:253:5: ^( T_DECLARATION variable datatype )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(253, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_DECLARATION, "T_DECLARATION"), root_1);

				DebugLocation(253, 21);
				adaptor.AddChild(root_1, stream_variable.NextTree());
				DebugLocation(253, 30);
				adaptor.AddChild(root_1, stream_datatype.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declaration", 29);
			LeaveRule("declaration", 29);
			LeaveRule_declaration();
	    }
	 	DebugLocation(254, 1);
		} finally { DebugExitRule(GrammarFileName, "declaration"); }
		return retval;

	}
	// $ANTLR end "declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_create_view_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_create_view_command() {}

	// $ANTLR start "create_view_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:259:1: create_view_command : CREATE WS VIEW WS view_name ( ( WS )? '(' declaration_list ')' )? WS AS WS select_command -> ^( T_CREATE_VIEW view_name ( declaration_list )? select_command ) ;
	[GrammarRule("create_view_command")]
	private AstParserRuleReturnScope<object, IToken> create_view_command()
	{
		EnterRule_create_view_command();
		EnterRule("create_view_command", 30);
		TraceIn("create_view_command", 30);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken CREATE142 = default(IToken);
	    IToken WS143 = default(IToken);
	    IToken VIEW144 = default(IToken);
	    IToken WS145 = default(IToken);
	    IToken WS147 = default(IToken);
	    IToken char_literal148 = default(IToken);
	    IToken char_literal150 = default(IToken);
	    IToken WS151 = default(IToken);
	    IToken AS152 = default(IToken);
	    IToken WS153 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> view_name146 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> declaration_list149 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> select_command154 = default(AstParserRuleReturnScope<object, IToken>);

	    object CREATE142_tree = default(object);
	    object WS143_tree = default(object);
	    object VIEW144_tree = default(object);
	    object WS145_tree = default(object);
	    object WS147_tree = default(object);
	    object char_literal148_tree = default(object);
	    object char_literal150_tree = default(object);
	    object WS151_tree = default(object);
	    object AS152_tree = default(object);
	    object WS153_tree = default(object);
	    RewriteRuleITokenStream stream_AS=new RewriteRuleITokenStream(adaptor,"token AS");
	    RewriteRuleITokenStream stream_CREATE=new RewriteRuleITokenStream(adaptor,"token CREATE");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_VIEW=new RewriteRuleITokenStream(adaptor,"token VIEW");
	    RewriteRuleITokenStream stream_159=new RewriteRuleITokenStream(adaptor,"token 159");
	    RewriteRuleITokenStream stream_158=new RewriteRuleITokenStream(adaptor,"token 158");
	    RewriteRuleSubtreeStream stream_view_name=new RewriteRuleSubtreeStream(adaptor,"rule view_name");
	    RewriteRuleSubtreeStream stream_select_command=new RewriteRuleSubtreeStream(adaptor,"rule select_command");
	    RewriteRuleSubtreeStream stream_declaration_list=new RewriteRuleSubtreeStream(adaptor,"rule declaration_list");
		try { DebugEnterRule(GrammarFileName, "create_view_command");
		DebugLocation(259, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:260:2: ( CREATE WS VIEW WS view_name ( ( WS )? '(' declaration_list ')' )? WS AS WS select_command -> ^( T_CREATE_VIEW view_name ( declaration_list )? select_command ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:260:4: CREATE WS VIEW WS view_name ( ( WS )? '(' declaration_list ')' )? WS AS WS select_command
			{
			DebugLocation(260, 4);
			CREATE142=(IToken)Match(input,CREATE,Follow._CREATE_in_create_view_command1353);  
			stream_CREATE.Add(CREATE142);

			DebugLocation(260, 11);
			WS143=(IToken)Match(input,WS,Follow._WS_in_create_view_command1355);  
			stream_WS.Add(WS143);

			DebugLocation(260, 14);
			VIEW144=(IToken)Match(input,VIEW,Follow._VIEW_in_create_view_command1357);  
			stream_VIEW.Add(VIEW144);

			DebugLocation(260, 19);
			WS145=(IToken)Match(input,WS,Follow._WS_in_create_view_command1359);  
			stream_WS.Add(WS145);

			DebugLocation(260, 22);
			PushFollow(Follow._view_name_in_create_view_command1361);
			view_name146=view_name();
			PopFollow();

			stream_view_name.Add(view_name146.Tree);
			DebugLocation(260, 32);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:260:32: ( ( WS )? '(' declaration_list ')' )?
			int alt54=2;
			try { DebugEnterSubRule(54);
			try { DebugEnterDecision(54, decisionCanBacktrack[54]);
			int LA54_0 = input.LA(1);

			if ((LA54_0==WS))
			{
				int LA54_1 = input.LA(2);

				if ((LA54_1==158))
				{
					alt54 = 1;
				}
			}
			else if ((LA54_0==158))
			{
				alt54 = 1;
			}
			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:260:33: ( WS )? '(' declaration_list ')'
				{
				DebugLocation(260, 33);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:260:33: ( WS )?
				int alt53=2;
				try { DebugEnterSubRule(53);
				try { DebugEnterDecision(53, decisionCanBacktrack[53]);
				int LA53_0 = input.LA(1);

				if ((LA53_0==WS))
				{
					alt53 = 1;
				}
				} finally { DebugExitDecision(53); }
				switch (alt53)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:260:33: WS
					{
					DebugLocation(260, 33);
					WS147=(IToken)Match(input,WS,Follow._WS_in_create_view_command1364);  
					stream_WS.Add(WS147);


					}
					break;

				}
				} finally { DebugExitSubRule(53); }

				DebugLocation(260, 37);
				char_literal148=(IToken)Match(input,158,Follow._158_in_create_view_command1367);  
				stream_158.Add(char_literal148);

				DebugLocation(260, 41);
				PushFollow(Follow._declaration_list_in_create_view_command1369);
				declaration_list149=declaration_list();
				PopFollow();

				stream_declaration_list.Add(declaration_list149.Tree);
				DebugLocation(260, 58);
				char_literal150=(IToken)Match(input,159,Follow._159_in_create_view_command1371);  
				stream_159.Add(char_literal150);


				}
				break;

			}
			} finally { DebugExitSubRule(54); }

			DebugLocation(260, 64);
			WS151=(IToken)Match(input,WS,Follow._WS_in_create_view_command1375);  
			stream_WS.Add(WS151);

			DebugLocation(260, 67);
			AS152=(IToken)Match(input,AS,Follow._AS_in_create_view_command1377);  
			stream_AS.Add(AS152);

			DebugLocation(260, 70);
			WS153=(IToken)Match(input,WS,Follow._WS_in_create_view_command1379);  
			stream_WS.Add(WS153);

			DebugLocation(260, 73);
			PushFollow(Follow._select_command_in_create_view_command1381);
			select_command154=select_command();
			PopFollow();

			stream_select_command.Add(select_command154.Tree);


			{
			// AST REWRITE
			// elements: select_command, declaration_list, view_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 261:2: -> ^( T_CREATE_VIEW view_name ( declaration_list )? select_command )
			{
				DebugLocation(261, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:261:5: ^( T_CREATE_VIEW view_name ( declaration_list )? select_command )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(261, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CREATE_VIEW, "T_CREATE_VIEW"), root_1);

				DebugLocation(261, 21);
				adaptor.AddChild(root_1, stream_view_name.NextTree());
				DebugLocation(261, 31);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:261:31: ( declaration_list )?
				if (stream_declaration_list.HasNext)
				{
					DebugLocation(261, 31);
					adaptor.AddChild(root_1, stream_declaration_list.NextTree());

				}
				stream_declaration_list.Reset();
				DebugLocation(261, 49);
				adaptor.AddChild(root_1, stream_select_command.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("create_view_command", 30);
			LeaveRule("create_view_command", 30);
			LeaveRule_create_view_command();
	    }
	 	DebugLocation(262, 1);
		} finally { DebugExitRule(GrammarFileName, "create_view_command"); }
		return retval;

	}
	// $ANTLR end "create_view_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_drop_view_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_drop_view_command() {}

	// $ANTLR start "drop_view_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:264:1: drop_view_command : DROP WS VIEW WS view_name -> ^( T_DROP_VIEW view_name ) ;
	[GrammarRule("drop_view_command")]
	private AstParserRuleReturnScope<object, IToken> drop_view_command()
	{
		EnterRule_drop_view_command();
		EnterRule("drop_view_command", 31);
		TraceIn("drop_view_command", 31);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken DROP155 = default(IToken);
	    IToken WS156 = default(IToken);
	    IToken VIEW157 = default(IToken);
	    IToken WS158 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> view_name159 = default(AstParserRuleReturnScope<object, IToken>);

	    object DROP155_tree = default(object);
	    object WS156_tree = default(object);
	    object VIEW157_tree = default(object);
	    object WS158_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_VIEW=new RewriteRuleITokenStream(adaptor,"token VIEW");
	    RewriteRuleITokenStream stream_DROP=new RewriteRuleITokenStream(adaptor,"token DROP");
	    RewriteRuleSubtreeStream stream_view_name=new RewriteRuleSubtreeStream(adaptor,"rule view_name");
		try { DebugEnterRule(GrammarFileName, "drop_view_command");
		DebugLocation(264, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:265:2: ( DROP WS VIEW WS view_name -> ^( T_DROP_VIEW view_name ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:265:4: DROP WS VIEW WS view_name
			{
			DebugLocation(265, 4);
			DROP155=(IToken)Match(input,DROP,Follow._DROP_in_drop_view_command1407);  
			stream_DROP.Add(DROP155);

			DebugLocation(265, 9);
			WS156=(IToken)Match(input,WS,Follow._WS_in_drop_view_command1409);  
			stream_WS.Add(WS156);

			DebugLocation(265, 12);
			VIEW157=(IToken)Match(input,VIEW,Follow._VIEW_in_drop_view_command1411);  
			stream_VIEW.Add(VIEW157);

			DebugLocation(265, 17);
			WS158=(IToken)Match(input,WS,Follow._WS_in_drop_view_command1413);  
			stream_WS.Add(WS158);

			DebugLocation(265, 20);
			PushFollow(Follow._view_name_in_drop_view_command1415);
			view_name159=view_name();
			PopFollow();

			stream_view_name.Add(view_name159.Tree);


			{
			// AST REWRITE
			// elements: view_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 266:2: -> ^( T_DROP_VIEW view_name )
			{
				DebugLocation(266, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:266:5: ^( T_DROP_VIEW view_name )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(266, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_DROP_VIEW, "T_DROP_VIEW"), root_1);

				DebugLocation(266, 19);
				adaptor.AddChild(root_1, stream_view_name.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("drop_view_command", 31);
			LeaveRule("drop_view_command", 31);
			LeaveRule_drop_view_command();
	    }
	 	DebugLocation(267, 1);
		} finally { DebugExitRule(GrammarFileName, "drop_view_command"); }
		return retval;

	}
	// $ANTLR end "drop_view_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_view_name() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_view_name() {}

	// $ANTLR start "view_name"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:269:1: view_name : TOKEN -> ^( T_VIEW_NAME TOKEN ) ;
	[GrammarRule("view_name")]
	private AstParserRuleReturnScope<object, IToken> view_name()
	{
		EnterRule_view_name();
		EnterRule("view_name", 32);
		TraceIn("view_name", 32);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN160 = default(IToken);

	    object TOKEN160_tree = default(object);
	    RewriteRuleITokenStream stream_TOKEN=new RewriteRuleITokenStream(adaptor,"token TOKEN");

		try { DebugEnterRule(GrammarFileName, "view_name");
		DebugLocation(269, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:270:2: ( TOKEN -> ^( T_VIEW_NAME TOKEN ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:270:4: TOKEN
			{
			DebugLocation(270, 4);
			TOKEN160=(IToken)Match(input,TOKEN,Follow._TOKEN_in_view_name1435);  
			stream_TOKEN.Add(TOKEN160);



			{
			// AST REWRITE
			// elements: TOKEN
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 270:10: -> ^( T_VIEW_NAME TOKEN )
			{
				DebugLocation(270, 13);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:270:13: ^( T_VIEW_NAME TOKEN )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(270, 15);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_VIEW_NAME, "T_VIEW_NAME"), root_1);

				DebugLocation(270, 27);
				adaptor.AddChild(root_1, stream_TOKEN.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("view_name", 32);
			LeaveRule("view_name", 32);
			LeaveRule_view_name();
	    }
	 	DebugLocation(271, 1);
		} finally { DebugExitRule(GrammarFileName, "view_name"); }
		return retval;

	}
	// $ANTLR end "view_name"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_drop_table_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_drop_table_command() {}

	// $ANTLR start "drop_table_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:275:1: drop_table_command : DROP WS TABLE WS file -> ^( T_DROP_TABLE file ) ;
	[GrammarRule("drop_table_command")]
	private AstParserRuleReturnScope<object, IToken> drop_table_command()
	{
		EnterRule_drop_table_command();
		EnterRule("drop_table_command", 33);
		TraceIn("drop_table_command", 33);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken DROP161 = default(IToken);
	    IToken WS162 = default(IToken);
	    IToken TABLE163 = default(IToken);
	    IToken WS164 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file165 = default(AstParserRuleReturnScope<object, IToken>);

	    object DROP161_tree = default(object);
	    object WS162_tree = default(object);
	    object TABLE163_tree = default(object);
	    object WS164_tree = default(object);
	    RewriteRuleITokenStream stream_TABLE=new RewriteRuleITokenStream(adaptor,"token TABLE");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_DROP=new RewriteRuleITokenStream(adaptor,"token DROP");
	    RewriteRuleSubtreeStream stream_file=new RewriteRuleSubtreeStream(adaptor,"rule file");
		try { DebugEnterRule(GrammarFileName, "drop_table_command");
		DebugLocation(275, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:276:2: ( DROP WS TABLE WS file -> ^( T_DROP_TABLE file ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:276:4: DROP WS TABLE WS file
			{
			DebugLocation(276, 4);
			DROP161=(IToken)Match(input,DROP,Follow._DROP_in_drop_table_command1457);  
			stream_DROP.Add(DROP161);

			DebugLocation(276, 9);
			WS162=(IToken)Match(input,WS,Follow._WS_in_drop_table_command1459);  
			stream_WS.Add(WS162);

			DebugLocation(276, 12);
			TABLE163=(IToken)Match(input,TABLE,Follow._TABLE_in_drop_table_command1461);  
			stream_TABLE.Add(TABLE163);

			DebugLocation(276, 18);
			WS164=(IToken)Match(input,WS,Follow._WS_in_drop_table_command1463);  
			stream_WS.Add(WS164);

			DebugLocation(276, 21);
			PushFollow(Follow._file_in_drop_table_command1465);
			file165=file();
			PopFollow();

			stream_file.Add(file165.Tree);


			{
			// AST REWRITE
			// elements: file
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 277:2: -> ^( T_DROP_TABLE file )
			{
				DebugLocation(277, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:277:5: ^( T_DROP_TABLE file )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(277, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_DROP_TABLE, "T_DROP_TABLE"), root_1);

				DebugLocation(277, 20);
				adaptor.AddChild(root_1, stream_file.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("drop_table_command", 33);
			LeaveRule("drop_table_command", 33);
			LeaveRule_drop_table_command();
	    }
	 	DebugLocation(278, 1);
		} finally { DebugExitRule(GrammarFileName, "drop_table_command"); }
		return retval;

	}
	// $ANTLR end "drop_table_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_set_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_set_command() {}

	// $ANTLR start "set_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:284:1: set_command : SET WS variable ( WS )? '=' ( WS )? expression -> ^( T_SET_VARIABLE variable expression ) ;
	[GrammarRule("set_command")]
	private AstParserRuleReturnScope<object, IToken> set_command()
	{
		EnterRule_set_command();
		EnterRule("set_command", 34);
		TraceIn("set_command", 34);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken SET166 = default(IToken);
	    IToken WS167 = default(IToken);
	    IToken WS169 = default(IToken);
	    IToken char_literal170 = default(IToken);
	    IToken WS171 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> variable168 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression172 = default(AstParserRuleReturnScope<object, IToken>);

	    object SET166_tree = default(object);
	    object WS167_tree = default(object);
	    object WS169_tree = default(object);
	    object char_literal170_tree = default(object);
	    object WS171_tree = default(object);
	    RewriteRuleITokenStream stream_170=new RewriteRuleITokenStream(adaptor,"token 170");
	    RewriteRuleITokenStream stream_SET=new RewriteRuleITokenStream(adaptor,"token SET");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_variable=new RewriteRuleSubtreeStream(adaptor,"rule variable");
		try { DebugEnterRule(GrammarFileName, "set_command");
		DebugLocation(284, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:285:2: ( SET WS variable ( WS )? '=' ( WS )? expression -> ^( T_SET_VARIABLE variable expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:285:4: SET WS variable ( WS )? '=' ( WS )? expression
			{
			DebugLocation(285, 4);
			SET166=(IToken)Match(input,SET,Follow._SET_in_set_command1489);  
			stream_SET.Add(SET166);

			DebugLocation(285, 8);
			WS167=(IToken)Match(input,WS,Follow._WS_in_set_command1491);  
			stream_WS.Add(WS167);

			DebugLocation(285, 11);
			PushFollow(Follow._variable_in_set_command1493);
			variable168=variable();
			PopFollow();

			stream_variable.Add(variable168.Tree);
			DebugLocation(285, 20);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:285:20: ( WS )?
			int alt55=2;
			try { DebugEnterSubRule(55);
			try { DebugEnterDecision(55, decisionCanBacktrack[55]);
			int LA55_0 = input.LA(1);

			if ((LA55_0==WS))
			{
				alt55 = 1;
			}
			} finally { DebugExitDecision(55); }
			switch (alt55)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:285:20: WS
				{
				DebugLocation(285, 20);
				WS169=(IToken)Match(input,WS,Follow._WS_in_set_command1495);  
				stream_WS.Add(WS169);


				}
				break;

			}
			} finally { DebugExitSubRule(55); }

			DebugLocation(285, 24);
			char_literal170=(IToken)Match(input,170,Follow._170_in_set_command1498);  
			stream_170.Add(char_literal170);

			DebugLocation(285, 28);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:285:28: ( WS )?
			int alt56=2;
			try { DebugEnterSubRule(56);
			try { DebugEnterDecision(56, decisionCanBacktrack[56]);
			int LA56_0 = input.LA(1);

			if ((LA56_0==WS))
			{
				alt56 = 1;
			}
			} finally { DebugExitDecision(56); }
			switch (alt56)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:285:28: WS
				{
				DebugLocation(285, 28);
				WS171=(IToken)Match(input,WS,Follow._WS_in_set_command1500);  
				stream_WS.Add(WS171);


				}
				break;

			}
			} finally { DebugExitSubRule(56); }

			DebugLocation(285, 32);
			PushFollow(Follow._expression_in_set_command1503);
			expression172=expression();
			PopFollow();

			stream_expression.Add(expression172.Tree);


			{
			// AST REWRITE
			// elements: variable, expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 286:2: -> ^( T_SET_VARIABLE variable expression )
			{
				DebugLocation(286, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:286:5: ^( T_SET_VARIABLE variable expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(286, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SET_VARIABLE, "T_SET_VARIABLE"), root_1);

				DebugLocation(286, 22);
				adaptor.AddChild(root_1, stream_variable.NextTree());
				DebugLocation(286, 31);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("set_command", 34);
			LeaveRule("set_command", 34);
			LeaveRule_set_command();
	    }
	 	DebugLocation(287, 1);
		} finally { DebugExitRule(GrammarFileName, "set_command"); }
		return retval;

	}
	// $ANTLR end "set_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_list() {}

	// $ANTLR start "expression_list"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:292:1: expression_list : expression ( ( WS )? ',' ( WS )? expression )* -> ^( T_EXPRESSIONLIST ( expression )+ ) ;
	[GrammarRule("expression_list")]
	private AstParserRuleReturnScope<object, IToken> expression_list()
	{
		EnterRule_expression_list();
		EnterRule("expression_list", 35);
		TraceIn("expression_list", 35);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS174 = default(IToken);
	    IToken char_literal175 = default(IToken);
	    IToken WS176 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression173 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression177 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS174_tree = default(object);
	    object char_literal175_tree = default(object);
	    object WS176_tree = default(object);
	    RewriteRuleITokenStream stream_162=new RewriteRuleITokenStream(adaptor,"token 162");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "expression_list");
		DebugLocation(292, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:293:2: ( expression ( ( WS )? ',' ( WS )? expression )* -> ^( T_EXPRESSIONLIST ( expression )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:293:4: expression ( ( WS )? ',' ( WS )? expression )*
			{
			DebugLocation(293, 4);
			PushFollow(Follow._expression_in_expression_list1528);
			expression173=expression();
			PopFollow();

			stream_expression.Add(expression173.Tree);
			DebugLocation(293, 15);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:293:15: ( ( WS )? ',' ( WS )? expression )*
			try { DebugEnterSubRule(59);
			while (true)
			{
				int alt59=2;
				try { DebugEnterDecision(59, decisionCanBacktrack[59]);
				int LA59_0 = input.LA(1);

				if ((LA59_0==WS))
				{
					int LA59_1 = input.LA(2);

					if ((LA59_1==162))
					{
						alt59 = 1;
					}


				}
				else if ((LA59_0==162))
				{
					alt59 = 1;
				}


				} finally { DebugExitDecision(59); }
				switch ( alt59 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:293:16: ( WS )? ',' ( WS )? expression
					{
					DebugLocation(293, 16);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:293:16: ( WS )?
					int alt57=2;
					try { DebugEnterSubRule(57);
					try { DebugEnterDecision(57, decisionCanBacktrack[57]);
					int LA57_0 = input.LA(1);

					if ((LA57_0==WS))
					{
						alt57 = 1;
					}
					} finally { DebugExitDecision(57); }
					switch (alt57)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:293:16: WS
						{
						DebugLocation(293, 16);
						WS174=(IToken)Match(input,WS,Follow._WS_in_expression_list1531);  
						stream_WS.Add(WS174);


						}
						break;

					}
					} finally { DebugExitSubRule(57); }

					DebugLocation(293, 20);
					char_literal175=(IToken)Match(input,162,Follow._162_in_expression_list1534);  
					stream_162.Add(char_literal175);

					DebugLocation(293, 24);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:293:24: ( WS )?
					int alt58=2;
					try { DebugEnterSubRule(58);
					try { DebugEnterDecision(58, decisionCanBacktrack[58]);
					int LA58_0 = input.LA(1);

					if ((LA58_0==WS))
					{
						alt58 = 1;
					}
					} finally { DebugExitDecision(58); }
					switch (alt58)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:293:24: WS
						{
						DebugLocation(293, 24);
						WS176=(IToken)Match(input,WS,Follow._WS_in_expression_list1536);  
						stream_WS.Add(WS176);


						}
						break;

					}
					} finally { DebugExitSubRule(58); }

					DebugLocation(293, 28);
					PushFollow(Follow._expression_in_expression_list1539);
					expression177=expression();
					PopFollow();

					stream_expression.Add(expression177.Tree);

					}
					break;

				default:
					goto loop59;
				}
			}

			loop59:
				;

			} finally { DebugExitSubRule(59); }



			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 293:41: -> ^( T_EXPRESSIONLIST ( expression )+ )
			{
				DebugLocation(293, 44);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:293:44: ^( T_EXPRESSIONLIST ( expression )+ )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(293, 46);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_EXPRESSIONLIST, "T_EXPRESSIONLIST"), root_1);

				DebugLocation(293, 63);
				if (!(stream_expression.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_expression.HasNext )
				{
					DebugLocation(293, 63);
					adaptor.AddChild(root_1, stream_expression.NextTree());

				}
				stream_expression.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_list", 35);
			LeaveRule("expression_list", 35);
			LeaveRule_expression_list();
	    }
	 	DebugLocation(294, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_list"); }
		return retval;

	}
	// $ANTLR end "expression_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_list_or_select_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_list_or_select_command() {}

	// $ANTLR start "expression_list_or_select_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:296:1: expression_list_or_select_command : ( expression_list | select_command );
	[GrammarRule("expression_list_or_select_command")]
	private AstParserRuleReturnScope<object, IToken> expression_list_or_select_command()
	{
		EnterRule_expression_list_or_select_command();
		EnterRule("expression_list_or_select_command", 36);
		TraceIn("expression_list_or_select_command", 36);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> expression_list178 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> select_command179 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "expression_list_or_select_command");
		DebugLocation(296, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:297:2: ( expression_list | select_command )
			int alt60=2;
			try { DebugEnterDecision(60, decisionCanBacktrack[60]);
			int LA60_0 = input.LA(1);

			if (((LA60_0>=CASE && LA60_0<=CAST)||(LA60_0>=CONVERT && LA60_0<=COUNT)||LA60_0==EXISTS||(LA60_0>=NOT && LA60_0<=NUMBER)||LA60_0==SIMPLE_FILE||(LA60_0>=STRING && LA60_0<=SYSTEMVAR)||LA60_0==TOKEN||LA60_0==VARIABLE||LA60_0==158))
			{
				alt60 = 1;
			}
			else if ((LA60_0==SELECT))
			{
				alt60 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 60, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(60); }
			switch (alt60)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:297:4: expression_list
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(297, 4);
				PushFollow(Follow._expression_list_in_expression_list_or_select_command1562);
				expression_list178=expression_list();
				PopFollow();

				adaptor.AddChild(root_0, expression_list178.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:297:22: select_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(297, 22);
				PushFollow(Follow._select_command_in_expression_list_or_select_command1566);
				select_command179=select_command();
				PopFollow();

				adaptor.AddChild(root_0, select_command179.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_list_or_select_command", 36);
			LeaveRule("expression_list_or_select_command", 36);
			LeaveRule_expression_list_or_select_command();
	    }
	 	DebugLocation(298, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_list_or_select_command"); }
		return retval;

	}
	// $ANTLR end "expression_list_or_select_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression() {}

	// $ANTLR start "expression"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:300:1: expression : expression_7 ;
	[GrammarRule("expression")]
	private AstParserRuleReturnScope<object, IToken> expression()
	{
		EnterRule_expression();
		EnterRule("expression", 37);
		TraceIn("expression", 37);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> expression_7180 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(300, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:301:2: ( expression_7 )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:301:4: expression_7
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(301, 4);
			PushFollow(Follow._expression_7_in_expression1578);
			expression_7180=expression_7();
			PopFollow();

			adaptor.AddChild(root_0, expression_7180.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression", 37);
			LeaveRule("expression", 37);
			LeaveRule_expression();
	    }
	 	DebugLocation(302, 1);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return retval;

	}
	// $ANTLR end "expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_7() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_7() {}

	// $ANTLR start "expression_7"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:304:1: expression_7 : (a= expression_6 -> $a) ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )* ;
	[GrammarRule("expression_7")]
	private AstParserRuleReturnScope<object, IToken> expression_7()
	{
		EnterRule_expression_7();
		EnterRule("expression_7", 38);
		TraceIn("expression_7", 38);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS181 = default(IToken);
	    IToken WS183 = default(IToken);
	    IToken IN184 = default(IToken);
	    IToken WS185 = default(IToken);
	    IToken char_literal186 = default(IToken);
	    IToken WS187 = default(IToken);
	    IToken WS189 = default(IToken);
	    IToken char_literal190 = default(IToken);
	    IToken NOT191 = default(IToken);
	    IToken WS192 = default(IToken);
	    IToken IN193 = default(IToken);
	    IToken WS194 = default(IToken);
	    IToken char_literal195 = default(IToken);
	    IToken WS196 = default(IToken);
	    IToken WS198 = default(IToken);
	    IToken char_literal199 = default(IToken);
	    IToken WS201 = default(IToken);
	    IToken SOME202 = default(IToken);
	    IToken ANY203 = default(IToken);
	    IToken WS204 = default(IToken);
	    IToken char_literal205 = default(IToken);
	    IToken char_literal207 = default(IToken);
	    IToken WS209 = default(IToken);
	    IToken ALL210 = default(IToken);
	    IToken WS211 = default(IToken);
	    IToken char_literal212 = default(IToken);
	    IToken char_literal214 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_7182 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command188 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command197 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_4200 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command206 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_4208 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command213 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS181_tree = default(object);
	    object WS183_tree = default(object);
	    object IN184_tree = default(object);
	    object WS185_tree = default(object);
	    object char_literal186_tree = default(object);
	    object WS187_tree = default(object);
	    object WS189_tree = default(object);
	    object char_literal190_tree = default(object);
	    object NOT191_tree = default(object);
	    object WS192_tree = default(object);
	    object IN193_tree = default(object);
	    object WS194_tree = default(object);
	    object char_literal195_tree = default(object);
	    object WS196_tree = default(object);
	    object WS198_tree = default(object);
	    object char_literal199_tree = default(object);
	    object WS201_tree = default(object);
	    object SOME202_tree = default(object);
	    object ANY203_tree = default(object);
	    object WS204_tree = default(object);
	    object char_literal205_tree = default(object);
	    object char_literal207_tree = default(object);
	    object WS209_tree = default(object);
	    object ALL210_tree = default(object);
	    object WS211_tree = default(object);
	    object char_literal212_tree = default(object);
	    object char_literal214_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_ANY=new RewriteRuleITokenStream(adaptor,"token ANY");
	    RewriteRuleITokenStream stream_IN=new RewriteRuleITokenStream(adaptor,"token IN");
	    RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");
	    RewriteRuleITokenStream stream_159=new RewriteRuleITokenStream(adaptor,"token 159");
	    RewriteRuleITokenStream stream_158=new RewriteRuleITokenStream(adaptor,"token 158");
	    RewriteRuleITokenStream stream_SOME=new RewriteRuleITokenStream(adaptor,"token SOME");
	    RewriteRuleITokenStream stream_ALL=new RewriteRuleITokenStream(adaptor,"token ALL");
	    RewriteRuleSubtreeStream stream_op_7=new RewriteRuleSubtreeStream(adaptor,"rule op_7");
	    RewriteRuleSubtreeStream stream_expression_6=new RewriteRuleSubtreeStream(adaptor,"rule expression_6");
	    RewriteRuleSubtreeStream stream_expression_list_or_select_command=new RewriteRuleSubtreeStream(adaptor,"rule expression_list_or_select_command");
	    RewriteRuleSubtreeStream stream_op_4=new RewriteRuleSubtreeStream(adaptor,"rule op_4");
		try { DebugEnterRule(GrammarFileName, "expression_7");
		DebugLocation(304, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:305:2: ( (a= expression_6 -> $a) ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:305:4: (a= expression_6 -> $a) ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )*
			{
			DebugLocation(305, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:305:4: (a= expression_6 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:305:5: a= expression_6
			{
			DebugLocation(305, 6);
			PushFollow(Follow._expression_6_in_expression_71594);
			a=expression_6();
			PopFollow();

			stream_expression_6.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 305:19: -> $a
			{
				DebugLocation(305, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(305, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:305:25: ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )*
			try { DebugEnterSubRule(73);
			while (true)
			{
				int alt73=2;
				try { DebugEnterDecision(73, decisionCanBacktrack[73]);
				int LA73_0 = input.LA(1);

				if ((LA73_0==WS))
				{
					int LA73_1 = input.LA(2);

					if ((LA73_1==NOT))
					{
						int LA73_3 = input.LA(3);

						if ((LA73_3==WS))
						{
							int LA73_5 = input.LA(4);

							if ((LA73_5==BETWEEN||LA73_5==IN||LA73_5==LIKE||LA73_5==MATCH))
							{
								alt73 = 1;
							}


						}


					}
					else if ((LA73_1==BETWEEN||LA73_1==IN||LA73_1==LIKE||LA73_1==MATCH||LA73_1==OR||(LA73_1>=153 && LA73_1<=155)||(LA73_1>=167 && LA73_1<=172)))
					{
						alt73 = 1;
					}


				}


				} finally { DebugExitDecision(73); }
				switch ( alt73 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:305:26: WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) )
					{
					DebugLocation(305, 26);
					WS181=(IToken)Match(input,WS,Follow._WS_in_expression_71601);  
					stream_WS.Add(WS181);

					DebugLocation(305, 29);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:305:29: ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) )
					int alt72=5;
					try { DebugEnterSubRule(72);
					try { DebugEnterDecision(72, decisionCanBacktrack[72]);
					switch (input.LA(1))
					{
					case BETWEEN:
					case LIKE:
					case MATCH:
					case OR:
						{
						alt72 = 1;
						}
						break;
					case NOT:
						{
						int LA72_2 = input.LA(2);

						if ((LA72_2==WS))
						{
							int LA72_13 = input.LA(3);

							if ((LA72_13==BETWEEN||LA72_13==LIKE||LA72_13==MATCH))
							{
								alt72 = 1;
							}
							else if ((LA72_13==IN))
							{
								alt72 = 3;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 72, 13, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 72, 2, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case IN:
						{
						alt72 = 2;
						}
						break;
					case 170:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA72_14 = input.LA(3);

							if ((LA72_14==ANY||LA72_14==SOME))
							{
								alt72 = 4;
							}
							else if ((LA72_14==ALL))
							{
								alt72 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 72, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt72 = 4;
							}
							break;
						case ALL:
							{
							alt72 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 72, 4, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 172:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA72_14 = input.LA(3);

							if ((LA72_14==ANY||LA72_14==SOME))
							{
								alt72 = 4;
							}
							else if ((LA72_14==ALL))
							{
								alt72 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 72, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt72 = 4;
							}
							break;
						case ALL:
							{
							alt72 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 72, 5, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 168:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA72_14 = input.LA(3);

							if ((LA72_14==ANY||LA72_14==SOME))
							{
								alt72 = 4;
							}
							else if ((LA72_14==ALL))
							{
								alt72 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 72, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt72 = 4;
							}
							break;
						case ALL:
							{
							alt72 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 72, 6, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 169:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA72_14 = input.LA(3);

							if ((LA72_14==ANY||LA72_14==SOME))
							{
								alt72 = 4;
							}
							else if ((LA72_14==ALL))
							{
								alt72 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 72, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt72 = 4;
							}
							break;
						case ALL:
							{
							alt72 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 72, 7, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 154:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA72_14 = input.LA(3);

							if ((LA72_14==ANY||LA72_14==SOME))
							{
								alt72 = 4;
							}
							else if ((LA72_14==ALL))
							{
								alt72 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 72, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt72 = 4;
							}
							break;
						case ALL:
							{
							alt72 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 72, 8, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 155:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA72_14 = input.LA(3);

							if ((LA72_14==ANY||LA72_14==SOME))
							{
								alt72 = 4;
							}
							else if ((LA72_14==ALL))
							{
								alt72 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 72, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt72 = 4;
							}
							break;
						case ALL:
							{
							alt72 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 72, 9, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 153:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA72_14 = input.LA(3);

							if ((LA72_14==ANY||LA72_14==SOME))
							{
								alt72 = 4;
							}
							else if ((LA72_14==ALL))
							{
								alt72 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 72, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt72 = 4;
							}
							break;
						case ALL:
							{
							alt72 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 72, 10, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 171:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA72_14 = input.LA(3);

							if ((LA72_14==ANY||LA72_14==SOME))
							{
								alt72 = 4;
							}
							else if ((LA72_14==ALL))
							{
								alt72 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 72, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt72 = 4;
							}
							break;
						case ALL:
							{
							alt72 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 72, 11, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 167:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA72_14 = input.LA(3);

							if ((LA72_14==ANY||LA72_14==SOME))
							{
								alt72 = 4;
							}
							else if ((LA72_14==ALL))
							{
								alt72 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 72, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt72 = 4;
							}
							break;
						case ALL:
							{
							alt72 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 72, 12, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 72, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(72); }
					switch (alt72)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:306:2: op_7 WS b= expression_6
						{
						DebugLocation(306, 2);
						PushFollow(Follow._op_7_in_expression_71606);
						op_7182=op_7();
						PopFollow();

						stream_op_7.Add(op_7182.Tree);
						DebugLocation(306, 7);
						WS183=(IToken)Match(input,WS,Follow._WS_in_expression_71608);  
						stream_WS.Add(WS183);

						DebugLocation(306, 11);
						PushFollow(Follow._expression_6_in_expression_71612);
						b=expression_6();
						PopFollow();

						stream_expression_6.Add(b.Tree);


						{
						// AST REWRITE
						// elements: expression_7, op_7, b
						// token labels: 
						// rule labels: retval, b
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 306:25: -> ^( T_OP_BINARY op_7 $expression_7 $b)
						{
							DebugLocation(306, 28);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:306:28: ^( T_OP_BINARY op_7 $expression_7 $b)
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(306, 30);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(306, 42);
							adaptor.AddChild(root_1, stream_op_7.NextTree());
							DebugLocation(306, 48);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(306, 62);
							adaptor.AddChild(root_1, stream_b.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:307:4: IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')'
						{
						DebugLocation(307, 4);
						IN184=(IToken)Match(input,IN,Follow._IN_in_expression_71631);  
						stream_IN.Add(IN184);

						DebugLocation(307, 7);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:307:7: ( WS )?
						int alt61=2;
						try { DebugEnterSubRule(61);
						try { DebugEnterDecision(61, decisionCanBacktrack[61]);
						int LA61_0 = input.LA(1);

						if ((LA61_0==WS))
						{
							alt61 = 1;
						}
						} finally { DebugExitDecision(61); }
						switch (alt61)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:307:7: WS
							{
							DebugLocation(307, 7);
							WS185=(IToken)Match(input,WS,Follow._WS_in_expression_71633);  
							stream_WS.Add(WS185);


							}
							break;

						}
						} finally { DebugExitSubRule(61); }

						DebugLocation(307, 11);
						char_literal186=(IToken)Match(input,158,Follow._158_in_expression_71636);  
						stream_158.Add(char_literal186);

						DebugLocation(307, 15);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:307:15: ( WS )?
						int alt62=2;
						try { DebugEnterSubRule(62);
						try { DebugEnterDecision(62, decisionCanBacktrack[62]);
						int LA62_0 = input.LA(1);

						if ((LA62_0==WS))
						{
							alt62 = 1;
						}
						} finally { DebugExitDecision(62); }
						switch (alt62)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:307:15: WS
							{
							DebugLocation(307, 15);
							WS187=(IToken)Match(input,WS,Follow._WS_in_expression_71638);  
							stream_WS.Add(WS187);


							}
							break;

						}
						} finally { DebugExitSubRule(62); }

						DebugLocation(307, 19);
						PushFollow(Follow._expression_list_or_select_command_in_expression_71641);
						expression_list_or_select_command188=expression_list_or_select_command();
						PopFollow();

						stream_expression_list_or_select_command.Add(expression_list_or_select_command188.Tree);
						DebugLocation(307, 53);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:307:53: ( WS )?
						int alt63=2;
						try { DebugEnterSubRule(63);
						try { DebugEnterDecision(63, decisionCanBacktrack[63]);
						int LA63_0 = input.LA(1);

						if ((LA63_0==WS))
						{
							alt63 = 1;
						}
						} finally { DebugExitDecision(63); }
						switch (alt63)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:307:53: WS
							{
							DebugLocation(307, 53);
							WS189=(IToken)Match(input,WS,Follow._WS_in_expression_71643);  
							stream_WS.Add(WS189);


							}
							break;

						}
						} finally { DebugExitSubRule(63); }

						DebugLocation(307, 57);
						char_literal190=(IToken)Match(input,159,Follow._159_in_expression_71646);  
						stream_159.Add(char_literal190);



						{
						// AST REWRITE
						// elements: expression_7, expression_list_or_select_command
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 307:61: -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command )
						{
							DebugLocation(307, 64);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:307:64: ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(307, 66);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(307, 78);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_IN, "T_IN"));
							DebugLocation(307, 84);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(307, 97);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:308:4: NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')'
						{
						DebugLocation(308, 4);
						NOT191=(IToken)Match(input,NOT,Follow._NOT_in_expression_71664);  
						stream_NOT.Add(NOT191);

						DebugLocation(308, 8);
						WS192=(IToken)Match(input,WS,Follow._WS_in_expression_71666);  
						stream_WS.Add(WS192);

						DebugLocation(308, 11);
						IN193=(IToken)Match(input,IN,Follow._IN_in_expression_71668);  
						stream_IN.Add(IN193);

						DebugLocation(308, 14);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:308:14: ( WS )?
						int alt64=2;
						try { DebugEnterSubRule(64);
						try { DebugEnterDecision(64, decisionCanBacktrack[64]);
						int LA64_0 = input.LA(1);

						if ((LA64_0==WS))
						{
							alt64 = 1;
						}
						} finally { DebugExitDecision(64); }
						switch (alt64)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:308:14: WS
							{
							DebugLocation(308, 14);
							WS194=(IToken)Match(input,WS,Follow._WS_in_expression_71670);  
							stream_WS.Add(WS194);


							}
							break;

						}
						} finally { DebugExitSubRule(64); }

						DebugLocation(308, 18);
						char_literal195=(IToken)Match(input,158,Follow._158_in_expression_71673);  
						stream_158.Add(char_literal195);

						DebugLocation(308, 22);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:308:22: ( WS )?
						int alt65=2;
						try { DebugEnterSubRule(65);
						try { DebugEnterDecision(65, decisionCanBacktrack[65]);
						int LA65_0 = input.LA(1);

						if ((LA65_0==WS))
						{
							alt65 = 1;
						}
						} finally { DebugExitDecision(65); }
						switch (alt65)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:308:22: WS
							{
							DebugLocation(308, 22);
							WS196=(IToken)Match(input,WS,Follow._WS_in_expression_71675);  
							stream_WS.Add(WS196);


							}
							break;

						}
						} finally { DebugExitSubRule(65); }

						DebugLocation(308, 26);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:308:26: ( expression_list_or_select_command )
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:308:27: expression_list_or_select_command
						{
						DebugLocation(308, 27);
						PushFollow(Follow._expression_list_or_select_command_in_expression_71679);
						expression_list_or_select_command197=expression_list_or_select_command();
						PopFollow();

						stream_expression_list_or_select_command.Add(expression_list_or_select_command197.Tree);

						}

						DebugLocation(308, 62);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:308:62: ( WS )?
						int alt66=2;
						try { DebugEnterSubRule(66);
						try { DebugEnterDecision(66, decisionCanBacktrack[66]);
						int LA66_0 = input.LA(1);

						if ((LA66_0==WS))
						{
							alt66 = 1;
						}
						} finally { DebugExitDecision(66); }
						switch (alt66)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:308:62: WS
							{
							DebugLocation(308, 62);
							WS198=(IToken)Match(input,WS,Follow._WS_in_expression_71682);  
							stream_WS.Add(WS198);


							}
							break;

						}
						} finally { DebugExitSubRule(66); }

						DebugLocation(308, 66);
						char_literal199=(IToken)Match(input,159,Follow._159_in_expression_71685);  
						stream_159.Add(char_literal199);



						{
						// AST REWRITE
						// elements: expression_list_or_select_command, expression_7
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 308:70: -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command )
						{
							DebugLocation(308, 73);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:308:73: ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(308, 75);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(308, 87);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_NOTIN, "T_NOTIN"));
							DebugLocation(308, 96);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(308, 109);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 4:
						DebugEnterAlt(4);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:309:4: op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')'
						{
						DebugLocation(309, 4);
						PushFollow(Follow._op_4_in_expression_71703);
						op_4200=op_4();
						PopFollow();

						stream_op_4.Add(op_4200.Tree);
						DebugLocation(309, 9);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:309:9: ( WS )?
						int alt67=2;
						try { DebugEnterSubRule(67);
						try { DebugEnterDecision(67, decisionCanBacktrack[67]);
						int LA67_0 = input.LA(1);

						if ((LA67_0==WS))
						{
							alt67 = 1;
						}
						} finally { DebugExitDecision(67); }
						switch (alt67)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:309:9: WS
							{
							DebugLocation(309, 9);
							WS201=(IToken)Match(input,WS,Follow._WS_in_expression_71705);  
							stream_WS.Add(WS201);


							}
							break;

						}
						} finally { DebugExitSubRule(67); }

						DebugLocation(309, 13);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:309:13: ( SOME | ANY )
						int alt68=2;
						try { DebugEnterSubRule(68);
						try { DebugEnterDecision(68, decisionCanBacktrack[68]);
						int LA68_0 = input.LA(1);

						if ((LA68_0==SOME))
						{
							alt68 = 1;
						}
						else if ((LA68_0==ANY))
						{
							alt68 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 68, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						} finally { DebugExitDecision(68); }
						switch (alt68)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:309:14: SOME
							{
							DebugLocation(309, 14);
							SOME202=(IToken)Match(input,SOME,Follow._SOME_in_expression_71709);  
							stream_SOME.Add(SOME202);


							}
							break;
						case 2:
							DebugEnterAlt(2);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:309:21: ANY
							{
							DebugLocation(309, 21);
							ANY203=(IToken)Match(input,ANY,Follow._ANY_in_expression_71713);  
							stream_ANY.Add(ANY203);


							}
							break;

						}
						} finally { DebugExitSubRule(68); }

						DebugLocation(309, 26);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:309:26: ( WS )?
						int alt69=2;
						try { DebugEnterSubRule(69);
						try { DebugEnterDecision(69, decisionCanBacktrack[69]);
						int LA69_0 = input.LA(1);

						if ((LA69_0==WS))
						{
							alt69 = 1;
						}
						} finally { DebugExitDecision(69); }
						switch (alt69)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:309:26: WS
							{
							DebugLocation(309, 26);
							WS204=(IToken)Match(input,WS,Follow._WS_in_expression_71716);  
							stream_WS.Add(WS204);


							}
							break;

						}
						} finally { DebugExitSubRule(69); }

						DebugLocation(309, 30);
						char_literal205=(IToken)Match(input,158,Follow._158_in_expression_71719);  
						stream_158.Add(char_literal205);

						DebugLocation(309, 34);
						PushFollow(Follow._expression_list_or_select_command_in_expression_71721);
						expression_list_or_select_command206=expression_list_or_select_command();
						PopFollow();

						stream_expression_list_or_select_command.Add(expression_list_or_select_command206.Tree);
						DebugLocation(309, 68);
						char_literal207=(IToken)Match(input,159,Follow._159_in_expression_71723);  
						stream_159.Add(char_literal207);



						{
						// AST REWRITE
						// elements: op_4, expression_list_or_select_command, expression_7
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 309:72: -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command )
						{
							DebugLocation(309, 75);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:309:75: ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(309, 77);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(309, 89);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_ANY, "T_ANY"));
							DebugLocation(309, 95);
							adaptor.AddChild(root_1, stream_op_4.NextTree());
							DebugLocation(309, 101);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(309, 114);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 5:
						DebugEnterAlt(5);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:310:4: op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')'
						{
						DebugLocation(310, 4);
						PushFollow(Follow._op_4_in_expression_71743);
						op_4208=op_4();
						PopFollow();

						stream_op_4.Add(op_4208.Tree);
						DebugLocation(310, 9);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:310:9: ( WS )?
						int alt70=2;
						try { DebugEnterSubRule(70);
						try { DebugEnterDecision(70, decisionCanBacktrack[70]);
						int LA70_0 = input.LA(1);

						if ((LA70_0==WS))
						{
							alt70 = 1;
						}
						} finally { DebugExitDecision(70); }
						switch (alt70)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:310:9: WS
							{
							DebugLocation(310, 9);
							WS209=(IToken)Match(input,WS,Follow._WS_in_expression_71745);  
							stream_WS.Add(WS209);


							}
							break;

						}
						} finally { DebugExitSubRule(70); }

						DebugLocation(310, 13);
						ALL210=(IToken)Match(input,ALL,Follow._ALL_in_expression_71748);  
						stream_ALL.Add(ALL210);

						DebugLocation(310, 17);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:310:17: ( WS )?
						int alt71=2;
						try { DebugEnterSubRule(71);
						try { DebugEnterDecision(71, decisionCanBacktrack[71]);
						int LA71_0 = input.LA(1);

						if ((LA71_0==WS))
						{
							alt71 = 1;
						}
						} finally { DebugExitDecision(71); }
						switch (alt71)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:310:17: WS
							{
							DebugLocation(310, 17);
							WS211=(IToken)Match(input,WS,Follow._WS_in_expression_71750);  
							stream_WS.Add(WS211);


							}
							break;

						}
						} finally { DebugExitSubRule(71); }

						DebugLocation(310, 21);
						char_literal212=(IToken)Match(input,158,Follow._158_in_expression_71753);  
						stream_158.Add(char_literal212);

						DebugLocation(310, 25);
						PushFollow(Follow._expression_list_or_select_command_in_expression_71755);
						expression_list_or_select_command213=expression_list_or_select_command();
						PopFollow();

						stream_expression_list_or_select_command.Add(expression_list_or_select_command213.Tree);
						DebugLocation(310, 59);
						char_literal214=(IToken)Match(input,159,Follow._159_in_expression_71757);  
						stream_159.Add(char_literal214);



						{
						// AST REWRITE
						// elements: expression_7, expression_list_or_select_command, op_4
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 310:63: -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command )
						{
							DebugLocation(310, 66);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:310:66: ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(310, 68);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(310, 80);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_ALL, "T_ALL"));
							DebugLocation(310, 86);
							adaptor.AddChild(root_1, stream_op_4.NextTree());
							DebugLocation(310, 92);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(310, 105);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					}
					} finally { DebugExitSubRule(72); }


					}
					break;

				default:
					goto loop73;
				}
			}

			loop73:
				;

			} finally { DebugExitSubRule(73); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_7", 38);
			LeaveRule("expression_7", 38);
			LeaveRule_expression_7();
	    }
	 	DebugLocation(312, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_7"); }
		return retval;

	}
	// $ANTLR end "expression_7"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_7() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_7() {}

	// $ANTLR start "op_7"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:314:1: op_7 : ( OR -> T_OR | LIKE -> T_LIKE | NOT WS LIKE -> T_NOTLIKE | MATCH -> T_MATCH | NOT WS MATCH -> T_NOTMATCH | BETWEEN -> T_BETWEEN | NOT WS BETWEEN -> T_NOTBETWEEN );
	[GrammarRule("op_7")]
	private AstParserRuleReturnScope<object, IToken> op_7()
	{
		EnterRule_op_7();
		EnterRule("op_7", 39);
		TraceIn("op_7", 39);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken OR215 = default(IToken);
	    IToken LIKE216 = default(IToken);
	    IToken NOT217 = default(IToken);
	    IToken WS218 = default(IToken);
	    IToken LIKE219 = default(IToken);
	    IToken MATCH220 = default(IToken);
	    IToken NOT221 = default(IToken);
	    IToken WS222 = default(IToken);
	    IToken MATCH223 = default(IToken);
	    IToken BETWEEN224 = default(IToken);
	    IToken NOT225 = default(IToken);
	    IToken WS226 = default(IToken);
	    IToken BETWEEN227 = default(IToken);

	    object OR215_tree = default(object);
	    object LIKE216_tree = default(object);
	    object NOT217_tree = default(object);
	    object WS218_tree = default(object);
	    object LIKE219_tree = default(object);
	    object MATCH220_tree = default(object);
	    object NOT221_tree = default(object);
	    object WS222_tree = default(object);
	    object MATCH223_tree = default(object);
	    object BETWEEN224_tree = default(object);
	    object NOT225_tree = default(object);
	    object WS226_tree = default(object);
	    object BETWEEN227_tree = default(object);
	    RewriteRuleITokenStream stream_MATCH=new RewriteRuleITokenStream(adaptor,"token MATCH");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");
	    RewriteRuleITokenStream stream_BETWEEN=new RewriteRuleITokenStream(adaptor,"token BETWEEN");
	    RewriteRuleITokenStream stream_LIKE=new RewriteRuleITokenStream(adaptor,"token LIKE");
	    RewriteRuleITokenStream stream_OR=new RewriteRuleITokenStream(adaptor,"token OR");

		try { DebugEnterRule(GrammarFileName, "op_7");
		DebugLocation(314, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:314:6: ( OR -> T_OR | LIKE -> T_LIKE | NOT WS LIKE -> T_NOTLIKE | MATCH -> T_MATCH | NOT WS MATCH -> T_NOTMATCH | BETWEEN -> T_BETWEEN | NOT WS BETWEEN -> T_NOTBETWEEN )
			int alt74=7;
			try { DebugEnterDecision(74, decisionCanBacktrack[74]);
			switch (input.LA(1))
			{
			case OR:
				{
				alt74 = 1;
				}
				break;
			case LIKE:
				{
				alt74 = 2;
				}
				break;
			case NOT:
				{
				int LA74_3 = input.LA(2);

				if ((LA74_3==WS))
				{
					switch (input.LA(3))
					{
					case LIKE:
						{
						alt74 = 3;
						}
						break;
					case MATCH:
						{
						alt74 = 5;
						}
						break;
					case BETWEEN:
						{
						alt74 = 7;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 74, 6, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 74, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case MATCH:
				{
				alt74 = 4;
				}
				break;
			case BETWEEN:
				{
				alt74 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 74, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(74); }
			switch (alt74)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:314:8: OR
				{
				DebugLocation(314, 8);
				OR215=(IToken)Match(input,OR,Follow._OR_in_op_71787);  
				stream_OR.Add(OR215);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 314:11: -> T_OR
				{
					DebugLocation(314, 14);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_OR, "T_OR"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:315:4: LIKE
				{
				DebugLocation(315, 4);
				LIKE216=(IToken)Match(input,LIKE,Follow._LIKE_in_op_71796);  
				stream_LIKE.Add(LIKE216);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 315:9: -> T_LIKE
				{
					DebugLocation(315, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_LIKE, "T_LIKE"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:316:4: NOT WS LIKE
				{
				DebugLocation(316, 4);
				NOT217=(IToken)Match(input,NOT,Follow._NOT_in_op_71805);  
				stream_NOT.Add(NOT217);

				DebugLocation(316, 8);
				WS218=(IToken)Match(input,WS,Follow._WS_in_op_71807);  
				stream_WS.Add(WS218);

				DebugLocation(316, 11);
				LIKE219=(IToken)Match(input,LIKE,Follow._LIKE_in_op_71809);  
				stream_LIKE.Add(LIKE219);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 316:16: -> T_NOTLIKE
				{
					DebugLocation(316, 19);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTLIKE, "T_NOTLIKE"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:317:4: MATCH
				{
				DebugLocation(317, 4);
				MATCH220=(IToken)Match(input,MATCH,Follow._MATCH_in_op_71818);  
				stream_MATCH.Add(MATCH220);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 317:10: -> T_MATCH
				{
					DebugLocation(317, 13);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MATCH, "T_MATCH"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:318:4: NOT WS MATCH
				{
				DebugLocation(318, 4);
				NOT221=(IToken)Match(input,NOT,Follow._NOT_in_op_71827);  
				stream_NOT.Add(NOT221);

				DebugLocation(318, 8);
				WS222=(IToken)Match(input,WS,Follow._WS_in_op_71829);  
				stream_WS.Add(WS222);

				DebugLocation(318, 11);
				MATCH223=(IToken)Match(input,MATCH,Follow._MATCH_in_op_71831);  
				stream_MATCH.Add(MATCH223);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 318:17: -> T_NOTMATCH
				{
					DebugLocation(318, 20);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTMATCH, "T_NOTMATCH"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:319:4: BETWEEN
				{
				DebugLocation(319, 4);
				BETWEEN224=(IToken)Match(input,BETWEEN,Follow._BETWEEN_in_op_71840);  
				stream_BETWEEN.Add(BETWEEN224);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 319:12: -> T_BETWEEN
				{
					DebugLocation(319, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BETWEEN, "T_BETWEEN"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:320:4: NOT WS BETWEEN
				{
				DebugLocation(320, 4);
				NOT225=(IToken)Match(input,NOT,Follow._NOT_in_op_71849);  
				stream_NOT.Add(NOT225);

				DebugLocation(320, 8);
				WS226=(IToken)Match(input,WS,Follow._WS_in_op_71851);  
				stream_WS.Add(WS226);

				DebugLocation(320, 11);
				BETWEEN227=(IToken)Match(input,BETWEEN,Follow._BETWEEN_in_op_71853);  
				stream_BETWEEN.Add(BETWEEN227);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 320:19: -> T_NOTBETWEEN
				{
					DebugLocation(320, 22);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTBETWEEN, "T_NOTBETWEEN"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_7", 39);
			LeaveRule("op_7", 39);
			LeaveRule_op_7();
	    }
	 	DebugLocation(321, 1);
		} finally { DebugExitRule(GrammarFileName, "op_7"); }
		return retval;

	}
	// $ANTLR end "op_7"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_6() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_6() {}

	// $ANTLR start "expression_6"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:323:1: expression_6 : (a= expression_5 -> $a) ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )* ;
	[GrammarRule("expression_6")]
	private AstParserRuleReturnScope<object, IToken> expression_6()
	{
		EnterRule_expression_6();
		EnterRule("expression_6", 40);
		TraceIn("expression_6", 40);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS228 = default(IToken);
	    IToken WS230 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_6229 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS228_tree = default(object);
	    object WS230_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_op_6=new RewriteRuleSubtreeStream(adaptor,"rule op_6");
	    RewriteRuleSubtreeStream stream_expression_5=new RewriteRuleSubtreeStream(adaptor,"rule expression_5");
		try { DebugEnterRule(GrammarFileName, "expression_6");
		DebugLocation(323, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:324:2: ( (a= expression_5 -> $a) ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:324:4: (a= expression_5 -> $a) ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )*
			{
			DebugLocation(324, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:324:4: (a= expression_5 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:324:5: a= expression_5
			{
			DebugLocation(324, 6);
			PushFollow(Follow._expression_5_in_expression_61872);
			a=expression_5();
			PopFollow();

			stream_expression_5.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 324:19: -> $a
			{
				DebugLocation(324, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(324, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:324:25: ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )*
			try { DebugEnterSubRule(75);
			while (true)
			{
				int alt75=2;
				try { DebugEnterDecision(75, decisionCanBacktrack[75]);
				int LA75_0 = input.LA(1);

				if ((LA75_0==WS))
				{
					int LA75_1 = input.LA(2);

					if ((LA75_1==AND))
					{
						alt75 = 1;
					}


				}


				} finally { DebugExitDecision(75); }
				switch ( alt75 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:324:26: WS op_6 WS b= expression_5
					{
					DebugLocation(324, 26);
					WS228=(IToken)Match(input,WS,Follow._WS_in_expression_61879);  
					stream_WS.Add(WS228);

					DebugLocation(324, 29);
					PushFollow(Follow._op_6_in_expression_61881);
					op_6229=op_6();
					PopFollow();

					stream_op_6.Add(op_6229.Tree);
					DebugLocation(324, 34);
					WS230=(IToken)Match(input,WS,Follow._WS_in_expression_61883);  
					stream_WS.Add(WS230);

					DebugLocation(324, 38);
					PushFollow(Follow._expression_5_in_expression_61887);
					b=expression_5();
					PopFollow();

					stream_expression_5.Add(b.Tree);


					{
					// AST REWRITE
					// elements: expression_6, b, op_6
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 324:52: -> ^( T_OP_BINARY op_6 $expression_6 $b)
					{
						DebugLocation(324, 55);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:324:55: ^( T_OP_BINARY op_6 $expression_6 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(324, 57);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(324, 69);
						adaptor.AddChild(root_1, stream_op_6.NextTree());
						DebugLocation(324, 75);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(324, 89);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop75;
				}
			}

			loop75:
				;

			} finally { DebugExitSubRule(75); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_6", 40);
			LeaveRule("expression_6", 40);
			LeaveRule_expression_6();
	    }
	 	DebugLocation(325, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_6"); }
		return retval;

	}
	// $ANTLR end "expression_6"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_6() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_6() {}

	// $ANTLR start "op_6"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:327:1: op_6 : AND -> T_AND ;
	[GrammarRule("op_6")]
	private AstParserRuleReturnScope<object, IToken> op_6()
	{
		EnterRule_op_6();
		EnterRule("op_6", 41);
		TraceIn("op_6", 41);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken AND231 = default(IToken);

	    object AND231_tree = default(object);
	    RewriteRuleITokenStream stream_AND=new RewriteRuleITokenStream(adaptor,"token AND");

		try { DebugEnterRule(GrammarFileName, "op_6");
		DebugLocation(327, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:327:6: ( AND -> T_AND )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:327:8: AND
			{
			DebugLocation(327, 8);
			AND231=(IToken)Match(input,AND,Follow._AND_in_op_61915);  
			stream_AND.Add(AND231);



			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 327:12: -> T_AND
			{
				DebugLocation(327, 15);
				adaptor.AddChild(root_0, (object)adaptor.Create(T_AND, "T_AND"));

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_6", 41);
			LeaveRule("op_6", 41);
			LeaveRule_op_6();
	    }
	 	DebugLocation(328, 1);
		} finally { DebugExitRule(GrammarFileName, "op_6"); }
		return retval;

	}
	// $ANTLR end "op_6"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_5() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_5() {}

	// $ANTLR start "expression_5"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:330:1: expression_5 : ( op_5 WS expression_5 -> ^( T_OP_UNARY op_5 expression_5 ) | expression_4 );
	[GrammarRule("expression_5")]
	private AstParserRuleReturnScope<object, IToken> expression_5()
	{
		EnterRule_expression_5();
		EnterRule("expression_5", 42);
		TraceIn("expression_5", 42);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS233 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> op_5232 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_5234 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_4235 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS233_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression_5=new RewriteRuleSubtreeStream(adaptor,"rule expression_5");
	    RewriteRuleSubtreeStream stream_op_5=new RewriteRuleSubtreeStream(adaptor,"rule op_5");
		try { DebugEnterRule(GrammarFileName, "expression_5");
		DebugLocation(330, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:331:2: ( op_5 WS expression_5 -> ^( T_OP_UNARY op_5 expression_5 ) | expression_4 )
			int alt76=2;
			try { DebugEnterDecision(76, decisionCanBacktrack[76]);
			int LA76_0 = input.LA(1);

			if ((LA76_0==NOT))
			{
				alt76 = 1;
			}
			else if (((LA76_0>=CASE && LA76_0<=CAST)||(LA76_0>=CONVERT && LA76_0<=COUNT)||LA76_0==EXISTS||LA76_0==NUMBER||LA76_0==SIMPLE_FILE||(LA76_0>=STRING && LA76_0<=SYSTEMVAR)||LA76_0==TOKEN||LA76_0==VARIABLE||LA76_0==158))
			{
				alt76 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 76, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(76); }
			switch (alt76)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:331:4: op_5 WS expression_5
				{
				DebugLocation(331, 4);
				PushFollow(Follow._op_5_in_expression_51933);
				op_5232=op_5();
				PopFollow();

				stream_op_5.Add(op_5232.Tree);
				DebugLocation(331, 9);
				WS233=(IToken)Match(input,WS,Follow._WS_in_expression_51935);  
				stream_WS.Add(WS233);

				DebugLocation(331, 12);
				PushFollow(Follow._expression_5_in_expression_51937);
				expression_5234=expression_5();
				PopFollow();

				stream_expression_5.Add(expression_5234.Tree);


				{
				// AST REWRITE
				// elements: op_5, expression_5
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 331:25: -> ^( T_OP_UNARY op_5 expression_5 )
				{
					DebugLocation(331, 28);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:331:28: ^( T_OP_UNARY op_5 expression_5 )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(331, 30);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_UNARY, "T_OP_UNARY"), root_1);

					DebugLocation(331, 41);
					adaptor.AddChild(root_1, stream_op_5.NextTree());
					DebugLocation(331, 46);
					adaptor.AddChild(root_1, stream_expression_5.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:332:4: expression_4
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(332, 4);
				PushFollow(Follow._expression_4_in_expression_51952);
				expression_4235=expression_4();
				PopFollow();

				adaptor.AddChild(root_0, expression_4235.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_5", 42);
			LeaveRule("expression_5", 42);
			LeaveRule_expression_5();
	    }
	 	DebugLocation(333, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_5"); }
		return retval;

	}
	// $ANTLR end "expression_5"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_5() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_5() {}

	// $ANTLR start "op_5"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:335:1: op_5 : NOT -> T_NOT ;
	[GrammarRule("op_5")]
	private AstParserRuleReturnScope<object, IToken> op_5()
	{
		EnterRule_op_5();
		EnterRule("op_5", 43);
		TraceIn("op_5", 43);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken NOT236 = default(IToken);

	    object NOT236_tree = default(object);
	    RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");

		try { DebugEnterRule(GrammarFileName, "op_5");
		DebugLocation(335, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:335:7: ( NOT -> T_NOT )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:335:9: NOT
			{
			DebugLocation(335, 9);
			NOT236=(IToken)Match(input,NOT,Follow._NOT_in_op_51963);  
			stream_NOT.Add(NOT236);



			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 335:13: -> T_NOT
			{
				DebugLocation(335, 16);
				adaptor.AddChild(root_0, (object)adaptor.Create(T_NOT, "T_NOT"));

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_5", 43);
			LeaveRule("op_5", 43);
			LeaveRule_op_5();
	    }
	 	DebugLocation(336, 1);
		} finally { DebugExitRule(GrammarFileName, "op_5"); }
		return retval;

	}
	// $ANTLR end "op_5"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_4() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_4() {}

	// $ANTLR start "expression_4"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:338:1: expression_4 : (a= expression_3 -> $a) ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )* ;
	[GrammarRule("expression_4")]
	private AstParserRuleReturnScope<object, IToken> expression_4()
	{
		EnterRule_expression_4();
		EnterRule("expression_4", 44);
		TraceIn("expression_4", 44);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS237 = default(IToken);
	    IToken WS239 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_4238 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS237_tree = default(object);
	    object WS239_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression_3=new RewriteRuleSubtreeStream(adaptor,"rule expression_3");
	    RewriteRuleSubtreeStream stream_op_4=new RewriteRuleSubtreeStream(adaptor,"rule op_4");
		try { DebugEnterRule(GrammarFileName, "expression_4");
		DebugLocation(338, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:339:2: ( (a= expression_3 -> $a) ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:339:4: (a= expression_3 -> $a) ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )*
			{
			DebugLocation(339, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:339:4: (a= expression_3 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:339:5: a= expression_3
			{
			DebugLocation(339, 6);
			PushFollow(Follow._expression_3_in_expression_41982);
			a=expression_3();
			PopFollow();

			stream_expression_3.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 339:19: -> $a
			{
				DebugLocation(339, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(339, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:339:25: ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )*
			try { DebugEnterSubRule(79);
			while (true)
			{
				int alt79=2;
				try { DebugEnterDecision(79, decisionCanBacktrack[79]);
				int LA79_0 = input.LA(1);

				if ((LA79_0==WS))
				{
					switch (input.LA(2))
					{
					case 170:
						{
						int LA79_4 = input.LA(3);

						if ((LA79_4==WS))
						{
							int LA79_13 = input.LA(4);

							if (((LA79_13>=CASE && LA79_13<=CAST)||(LA79_13>=CONVERT && LA79_13<=COUNT)||LA79_13==EXISTS||LA79_13==NUMBER||LA79_13==SIMPLE_FILE||(LA79_13>=STRING && LA79_13<=SYSTEMVAR)||LA79_13==TOKEN||LA79_13==VARIABLE||LA79_13==158))
							{
								alt79 = 1;
							}


						}
						else if (((LA79_4>=CASE && LA79_4<=CAST)||(LA79_4>=CONVERT && LA79_4<=COUNT)||LA79_4==EXISTS||LA79_4==NUMBER||LA79_4==SIMPLE_FILE||(LA79_4>=STRING && LA79_4<=SYSTEMVAR)||LA79_4==TOKEN||LA79_4==VARIABLE||LA79_4==158))
						{
							alt79 = 1;
						}


						}
						break;
					case 172:
						{
						int LA79_5 = input.LA(3);

						if ((LA79_5==WS))
						{
							int LA79_13 = input.LA(4);

							if (((LA79_13>=CASE && LA79_13<=CAST)||(LA79_13>=CONVERT && LA79_13<=COUNT)||LA79_13==EXISTS||LA79_13==NUMBER||LA79_13==SIMPLE_FILE||(LA79_13>=STRING && LA79_13<=SYSTEMVAR)||LA79_13==TOKEN||LA79_13==VARIABLE||LA79_13==158))
							{
								alt79 = 1;
							}


						}
						else if (((LA79_5>=CASE && LA79_5<=CAST)||(LA79_5>=CONVERT && LA79_5<=COUNT)||LA79_5==EXISTS||LA79_5==NUMBER||LA79_5==SIMPLE_FILE||(LA79_5>=STRING && LA79_5<=SYSTEMVAR)||LA79_5==TOKEN||LA79_5==VARIABLE||LA79_5==158))
						{
							alt79 = 1;
						}


						}
						break;
					case 168:
						{
						int LA79_6 = input.LA(3);

						if ((LA79_6==WS))
						{
							int LA79_13 = input.LA(4);

							if (((LA79_13>=CASE && LA79_13<=CAST)||(LA79_13>=CONVERT && LA79_13<=COUNT)||LA79_13==EXISTS||LA79_13==NUMBER||LA79_13==SIMPLE_FILE||(LA79_13>=STRING && LA79_13<=SYSTEMVAR)||LA79_13==TOKEN||LA79_13==VARIABLE||LA79_13==158))
							{
								alt79 = 1;
							}


						}
						else if (((LA79_6>=CASE && LA79_6<=CAST)||(LA79_6>=CONVERT && LA79_6<=COUNT)||LA79_6==EXISTS||LA79_6==NUMBER||LA79_6==SIMPLE_FILE||(LA79_6>=STRING && LA79_6<=SYSTEMVAR)||LA79_6==TOKEN||LA79_6==VARIABLE||LA79_6==158))
						{
							alt79 = 1;
						}


						}
						break;
					case 169:
						{
						int LA79_7 = input.LA(3);

						if ((LA79_7==WS))
						{
							int LA79_13 = input.LA(4);

							if (((LA79_13>=CASE && LA79_13<=CAST)||(LA79_13>=CONVERT && LA79_13<=COUNT)||LA79_13==EXISTS||LA79_13==NUMBER||LA79_13==SIMPLE_FILE||(LA79_13>=STRING && LA79_13<=SYSTEMVAR)||LA79_13==TOKEN||LA79_13==VARIABLE||LA79_13==158))
							{
								alt79 = 1;
							}


						}
						else if (((LA79_7>=CASE && LA79_7<=CAST)||(LA79_7>=CONVERT && LA79_7<=COUNT)||LA79_7==EXISTS||LA79_7==NUMBER||LA79_7==SIMPLE_FILE||(LA79_7>=STRING && LA79_7<=SYSTEMVAR)||LA79_7==TOKEN||LA79_7==VARIABLE||LA79_7==158))
						{
							alt79 = 1;
						}


						}
						break;
					case 154:
						{
						int LA79_8 = input.LA(3);

						if ((LA79_8==WS))
						{
							int LA79_13 = input.LA(4);

							if (((LA79_13>=CASE && LA79_13<=CAST)||(LA79_13>=CONVERT && LA79_13<=COUNT)||LA79_13==EXISTS||LA79_13==NUMBER||LA79_13==SIMPLE_FILE||(LA79_13>=STRING && LA79_13<=SYSTEMVAR)||LA79_13==TOKEN||LA79_13==VARIABLE||LA79_13==158))
							{
								alt79 = 1;
							}


						}
						else if (((LA79_8>=CASE && LA79_8<=CAST)||(LA79_8>=CONVERT && LA79_8<=COUNT)||LA79_8==EXISTS||LA79_8==NUMBER||LA79_8==SIMPLE_FILE||(LA79_8>=STRING && LA79_8<=SYSTEMVAR)||LA79_8==TOKEN||LA79_8==VARIABLE||LA79_8==158))
						{
							alt79 = 1;
						}


						}
						break;
					case 155:
						{
						int LA79_9 = input.LA(3);

						if ((LA79_9==WS))
						{
							int LA79_13 = input.LA(4);

							if (((LA79_13>=CASE && LA79_13<=CAST)||(LA79_13>=CONVERT && LA79_13<=COUNT)||LA79_13==EXISTS||LA79_13==NUMBER||LA79_13==SIMPLE_FILE||(LA79_13>=STRING && LA79_13<=SYSTEMVAR)||LA79_13==TOKEN||LA79_13==VARIABLE||LA79_13==158))
							{
								alt79 = 1;
							}


						}
						else if (((LA79_9>=CASE && LA79_9<=CAST)||(LA79_9>=CONVERT && LA79_9<=COUNT)||LA79_9==EXISTS||LA79_9==NUMBER||LA79_9==SIMPLE_FILE||(LA79_9>=STRING && LA79_9<=SYSTEMVAR)||LA79_9==TOKEN||LA79_9==VARIABLE||LA79_9==158))
						{
							alt79 = 1;
						}


						}
						break;
					case 153:
						{
						int LA79_10 = input.LA(3);

						if ((LA79_10==WS))
						{
							int LA79_13 = input.LA(4);

							if (((LA79_13>=CASE && LA79_13<=CAST)||(LA79_13>=CONVERT && LA79_13<=COUNT)||LA79_13==EXISTS||LA79_13==NUMBER||LA79_13==SIMPLE_FILE||(LA79_13>=STRING && LA79_13<=SYSTEMVAR)||LA79_13==TOKEN||LA79_13==VARIABLE||LA79_13==158))
							{
								alt79 = 1;
							}


						}
						else if (((LA79_10>=CASE && LA79_10<=CAST)||(LA79_10>=CONVERT && LA79_10<=COUNT)||LA79_10==EXISTS||LA79_10==NUMBER||LA79_10==SIMPLE_FILE||(LA79_10>=STRING && LA79_10<=SYSTEMVAR)||LA79_10==TOKEN||LA79_10==VARIABLE||LA79_10==158))
						{
							alt79 = 1;
						}


						}
						break;
					case 171:
						{
						int LA79_11 = input.LA(3);

						if ((LA79_11==WS))
						{
							int LA79_13 = input.LA(4);

							if (((LA79_13>=CASE && LA79_13<=CAST)||(LA79_13>=CONVERT && LA79_13<=COUNT)||LA79_13==EXISTS||LA79_13==NUMBER||LA79_13==SIMPLE_FILE||(LA79_13>=STRING && LA79_13<=SYSTEMVAR)||LA79_13==TOKEN||LA79_13==VARIABLE||LA79_13==158))
							{
								alt79 = 1;
							}


						}
						else if (((LA79_11>=CASE && LA79_11<=CAST)||(LA79_11>=CONVERT && LA79_11<=COUNT)||LA79_11==EXISTS||LA79_11==NUMBER||LA79_11==SIMPLE_FILE||(LA79_11>=STRING && LA79_11<=SYSTEMVAR)||LA79_11==TOKEN||LA79_11==VARIABLE||LA79_11==158))
						{
							alt79 = 1;
						}


						}
						break;
					case 167:
						{
						int LA79_12 = input.LA(3);

						if ((LA79_12==WS))
						{
							int LA79_13 = input.LA(4);

							if (((LA79_13>=CASE && LA79_13<=CAST)||(LA79_13>=CONVERT && LA79_13<=COUNT)||LA79_13==EXISTS||LA79_13==NUMBER||LA79_13==SIMPLE_FILE||(LA79_13>=STRING && LA79_13<=SYSTEMVAR)||LA79_13==TOKEN||LA79_13==VARIABLE||LA79_13==158))
							{
								alt79 = 1;
							}


						}
						else if (((LA79_12>=CASE && LA79_12<=CAST)||(LA79_12>=CONVERT && LA79_12<=COUNT)||LA79_12==EXISTS||LA79_12==NUMBER||LA79_12==SIMPLE_FILE||(LA79_12>=STRING && LA79_12<=SYSTEMVAR)||LA79_12==TOKEN||LA79_12==VARIABLE||LA79_12==158))
						{
							alt79 = 1;
						}


						}
						break;
					}

				}
				else if (((LA79_0>=153 && LA79_0<=155)||(LA79_0>=167 && LA79_0<=172)))
				{
					alt79 = 1;
				}


				} finally { DebugExitDecision(79); }
				switch ( alt79 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:339:26: ( WS )? op_4 ( WS )? b= expression_3
					{
					DebugLocation(339, 26);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:339:26: ( WS )?
					int alt77=2;
					try { DebugEnterSubRule(77);
					try { DebugEnterDecision(77, decisionCanBacktrack[77]);
					int LA77_0 = input.LA(1);

					if ((LA77_0==WS))
					{
						alt77 = 1;
					}
					} finally { DebugExitDecision(77); }
					switch (alt77)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:339:26: WS
						{
						DebugLocation(339, 26);
						WS237=(IToken)Match(input,WS,Follow._WS_in_expression_41989);  
						stream_WS.Add(WS237);


						}
						break;

					}
					} finally { DebugExitSubRule(77); }

					DebugLocation(339, 30);
					PushFollow(Follow._op_4_in_expression_41992);
					op_4238=op_4();
					PopFollow();

					stream_op_4.Add(op_4238.Tree);
					DebugLocation(339, 35);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:339:35: ( WS )?
					int alt78=2;
					try { DebugEnterSubRule(78);
					try { DebugEnterDecision(78, decisionCanBacktrack[78]);
					int LA78_0 = input.LA(1);

					if ((LA78_0==WS))
					{
						alt78 = 1;
					}
					} finally { DebugExitDecision(78); }
					switch (alt78)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:339:35: WS
						{
						DebugLocation(339, 35);
						WS239=(IToken)Match(input,WS,Follow._WS_in_expression_41994);  
						stream_WS.Add(WS239);


						}
						break;

					}
					} finally { DebugExitSubRule(78); }

					DebugLocation(339, 40);
					PushFollow(Follow._expression_3_in_expression_41999);
					b=expression_3();
					PopFollow();

					stream_expression_3.Add(b.Tree);


					{
					// AST REWRITE
					// elements: op_4, b, expression_4
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 339:54: -> ^( T_OP_BINARY op_4 $expression_4 $b)
					{
						DebugLocation(339, 57);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:339:57: ^( T_OP_BINARY op_4 $expression_4 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(339, 59);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(339, 71);
						adaptor.AddChild(root_1, stream_op_4.NextTree());
						DebugLocation(339, 77);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(339, 91);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop79;
				}
			}

			loop79:
				;

			} finally { DebugExitSubRule(79); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_4", 44);
			LeaveRule("expression_4", 44);
			LeaveRule_expression_4();
	    }
	 	DebugLocation(340, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_4"); }
		return retval;

	}
	// $ANTLR end "expression_4"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_4() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_4() {}

	// $ANTLR start "op_4"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:342:1: op_4 : ( '=' -> T_EQUAL | '>=' -> T_NOTLESS | '<=' -> T_NOTGREATER | '<>' -> T_NOTEQUAL | '!=' -> T_NOTEQUAL | '!>' -> T_NOTGREATER | '!<' -> T_NOTLESS | '>' -> T_GREATER | '<' -> T_LESS );
	[GrammarRule("op_4")]
	private AstParserRuleReturnScope<object, IToken> op_4()
	{
		EnterRule_op_4();
		EnterRule("op_4", 45);
		TraceIn("op_4", 45);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal240 = default(IToken);
	    IToken string_literal241 = default(IToken);
	    IToken string_literal242 = default(IToken);
	    IToken string_literal243 = default(IToken);
	    IToken string_literal244 = default(IToken);
	    IToken string_literal245 = default(IToken);
	    IToken string_literal246 = default(IToken);
	    IToken char_literal247 = default(IToken);
	    IToken char_literal248 = default(IToken);

	    object char_literal240_tree = default(object);
	    object string_literal241_tree = default(object);
	    object string_literal242_tree = default(object);
	    object string_literal243_tree = default(object);
	    object string_literal244_tree = default(object);
	    object string_literal245_tree = default(object);
	    object string_literal246_tree = default(object);
	    object char_literal247_tree = default(object);
	    object char_literal248_tree = default(object);
	    RewriteRuleITokenStream stream_170=new RewriteRuleITokenStream(adaptor,"token 170");
	    RewriteRuleITokenStream stream_171=new RewriteRuleITokenStream(adaptor,"token 171");
	    RewriteRuleITokenStream stream_153=new RewriteRuleITokenStream(adaptor,"token 153");
	    RewriteRuleITokenStream stream_172=new RewriteRuleITokenStream(adaptor,"token 172");
	    RewriteRuleITokenStream stream_169=new RewriteRuleITokenStream(adaptor,"token 169");
	    RewriteRuleITokenStream stream_155=new RewriteRuleITokenStream(adaptor,"token 155");
	    RewriteRuleITokenStream stream_168=new RewriteRuleITokenStream(adaptor,"token 168");
	    RewriteRuleITokenStream stream_167=new RewriteRuleITokenStream(adaptor,"token 167");
	    RewriteRuleITokenStream stream_154=new RewriteRuleITokenStream(adaptor,"token 154");

		try { DebugEnterRule(GrammarFileName, "op_4");
		DebugLocation(342, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:342:6: ( '=' -> T_EQUAL | '>=' -> T_NOTLESS | '<=' -> T_NOTGREATER | '<>' -> T_NOTEQUAL | '!=' -> T_NOTEQUAL | '!>' -> T_NOTGREATER | '!<' -> T_NOTLESS | '>' -> T_GREATER | '<' -> T_LESS )
			int alt80=9;
			try { DebugEnterDecision(80, decisionCanBacktrack[80]);
			switch (input.LA(1))
			{
			case 170:
				{
				alt80 = 1;
				}
				break;
			case 172:
				{
				alt80 = 2;
				}
				break;
			case 168:
				{
				alt80 = 3;
				}
				break;
			case 169:
				{
				alt80 = 4;
				}
				break;
			case 154:
				{
				alt80 = 5;
				}
				break;
			case 155:
				{
				alt80 = 6;
				}
				break;
			case 153:
				{
				alt80 = 7;
				}
				break;
			case 171:
				{
				alt80 = 8;
				}
				break;
			case 167:
				{
				alt80 = 9;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 80, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(80); }
			switch (alt80)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:342:8: '='
				{
				DebugLocation(342, 8);
				char_literal240=(IToken)Match(input,170,Follow._170_in_op_42025);  
				stream_170.Add(char_literal240);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 342:12: -> T_EQUAL
				{
					DebugLocation(342, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_EQUAL, "T_EQUAL"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:343:4: '>='
				{
				DebugLocation(343, 4);
				string_literal241=(IToken)Match(input,172,Follow._172_in_op_42034);  
				stream_172.Add(string_literal241);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 343:9: -> T_NOTLESS
				{
					DebugLocation(343, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTLESS, "T_NOTLESS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:344:4: '<='
				{
				DebugLocation(344, 4);
				string_literal242=(IToken)Match(input,168,Follow._168_in_op_42044);  
				stream_168.Add(string_literal242);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 344:9: -> T_NOTGREATER
				{
					DebugLocation(344, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTGREATER, "T_NOTGREATER"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:345:4: '<>'
				{
				DebugLocation(345, 4);
				string_literal243=(IToken)Match(input,169,Follow._169_in_op_42054);  
				stream_169.Add(string_literal243);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 345:9: -> T_NOTEQUAL
				{
					DebugLocation(345, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTEQUAL, "T_NOTEQUAL"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:346:4: '!='
				{
				DebugLocation(346, 4);
				string_literal244=(IToken)Match(input,154,Follow._154_in_op_42063);  
				stream_154.Add(string_literal244);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 346:9: -> T_NOTEQUAL
				{
					DebugLocation(346, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTEQUAL, "T_NOTEQUAL"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:347:4: '!>'
				{
				DebugLocation(347, 4);
				string_literal245=(IToken)Match(input,155,Follow._155_in_op_42072);  
				stream_155.Add(string_literal245);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 347:9: -> T_NOTGREATER
				{
					DebugLocation(347, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTGREATER, "T_NOTGREATER"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:348:4: '!<'
				{
				DebugLocation(348, 4);
				string_literal246=(IToken)Match(input,153,Follow._153_in_op_42081);  
				stream_153.Add(string_literal246);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 348:9: -> T_NOTLESS
				{
					DebugLocation(348, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTLESS, "T_NOTLESS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:349:4: '>'
				{
				DebugLocation(349, 4);
				char_literal247=(IToken)Match(input,171,Follow._171_in_op_42090);  
				stream_171.Add(char_literal247);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 349:8: -> T_GREATER
				{
					DebugLocation(349, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_GREATER, "T_GREATER"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:350:4: '<'
				{
				DebugLocation(350, 4);
				char_literal248=(IToken)Match(input,167,Follow._167_in_op_42100);  
				stream_167.Add(char_literal248);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 350:8: -> T_LESS
				{
					DebugLocation(350, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_LESS, "T_LESS"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_4", 45);
			LeaveRule("op_4", 45);
			LeaveRule_op_4();
	    }
	 	DebugLocation(351, 1);
		} finally { DebugExitRule(GrammarFileName, "op_4"); }
		return retval;

	}
	// $ANTLR end "op_4"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_3() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_3() {}

	// $ANTLR start "expression_3"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:353:1: expression_3 : (a= expression_2 -> $a) ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )* ;
	[GrammarRule("expression_3")]
	private AstParserRuleReturnScope<object, IToken> expression_3()
	{
		EnterRule_expression_3();
		EnterRule("expression_3", 46);
		TraceIn("expression_3", 46);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS249 = default(IToken);
	    IToken WS251 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_3250 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS249_tree = default(object);
	    object WS251_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_op_3=new RewriteRuleSubtreeStream(adaptor,"rule op_3");
	    RewriteRuleSubtreeStream stream_expression_2=new RewriteRuleSubtreeStream(adaptor,"rule expression_2");
		try { DebugEnterRule(GrammarFileName, "expression_3");
		DebugLocation(353, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:354:2: ( (a= expression_2 -> $a) ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:354:4: (a= expression_2 -> $a) ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )*
			{
			DebugLocation(354, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:354:4: (a= expression_2 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:354:5: a= expression_2
			{
			DebugLocation(354, 6);
			PushFollow(Follow._expression_2_in_expression_32119);
			a=expression_2();
			PopFollow();

			stream_expression_2.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 354:19: -> $a
			{
				DebugLocation(354, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(354, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:354:25: ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )*
			try { DebugEnterSubRule(83);
			while (true)
			{
				int alt83=2;
				try { DebugEnterDecision(83, decisionCanBacktrack[83]);
				int LA83_0 = input.LA(1);

				if ((LA83_0==WS))
				{
					int LA83_1 = input.LA(2);

					if ((LA83_1==157||LA83_1==161||LA83_1==163||(LA83_1>=175 && LA83_1<=176)))
					{
						alt83 = 1;
					}


				}
				else if ((LA83_0==157||LA83_0==161||LA83_0==163||(LA83_0>=175 && LA83_0<=176)))
				{
					alt83 = 1;
				}


				} finally { DebugExitDecision(83); }
				switch ( alt83 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:354:26: ( WS )? op_3 ( WS )? b= expression_2
					{
					DebugLocation(354, 26);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:354:26: ( WS )?
					int alt81=2;
					try { DebugEnterSubRule(81);
					try { DebugEnterDecision(81, decisionCanBacktrack[81]);
					int LA81_0 = input.LA(1);

					if ((LA81_0==WS))
					{
						alt81 = 1;
					}
					} finally { DebugExitDecision(81); }
					switch (alt81)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:354:26: WS
						{
						DebugLocation(354, 26);
						WS249=(IToken)Match(input,WS,Follow._WS_in_expression_32126);  
						stream_WS.Add(WS249);


						}
						break;

					}
					} finally { DebugExitSubRule(81); }

					DebugLocation(354, 30);
					PushFollow(Follow._op_3_in_expression_32129);
					op_3250=op_3();
					PopFollow();

					stream_op_3.Add(op_3250.Tree);
					DebugLocation(354, 35);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:354:35: ( WS )?
					int alt82=2;
					try { DebugEnterSubRule(82);
					try { DebugEnterDecision(82, decisionCanBacktrack[82]);
					int LA82_0 = input.LA(1);

					if ((LA82_0==WS))
					{
						alt82 = 1;
					}
					} finally { DebugExitDecision(82); }
					switch (alt82)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:354:35: WS
						{
						DebugLocation(354, 35);
						WS251=(IToken)Match(input,WS,Follow._WS_in_expression_32131);  
						stream_WS.Add(WS251);


						}
						break;

					}
					} finally { DebugExitSubRule(82); }

					DebugLocation(354, 40);
					PushFollow(Follow._expression_2_in_expression_32136);
					b=expression_2();
					PopFollow();

					stream_expression_2.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, op_3, expression_3
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 354:54: -> ^( T_OP_BINARY op_3 $expression_3 $b)
					{
						DebugLocation(354, 57);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:354:57: ^( T_OP_BINARY op_3 $expression_3 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(354, 59);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(354, 71);
						adaptor.AddChild(root_1, stream_op_3.NextTree());
						DebugLocation(354, 77);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(354, 91);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop83;
				}
			}

			loop83:
				;

			} finally { DebugExitSubRule(83); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_3", 46);
			LeaveRule("expression_3", 46);
			LeaveRule_expression_3();
	    }
	 	DebugLocation(355, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_3"); }
		return retval;

	}
	// $ANTLR end "expression_3"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_3() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_3() {}

	// $ANTLR start "op_3"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:357:1: op_3 : ( '+' -> T_PLUS | '-' -> T_MINUS | '&' -> T_BITWISE_AND | '|' -> T_BITWISE_OR | '^' -> T_BITWISE_XOR );
	[GrammarRule("op_3")]
	private AstParserRuleReturnScope<object, IToken> op_3()
	{
		EnterRule_op_3();
		EnterRule("op_3", 47);
		TraceIn("op_3", 47);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal252 = default(IToken);
	    IToken char_literal253 = default(IToken);
	    IToken char_literal254 = default(IToken);
	    IToken char_literal255 = default(IToken);
	    IToken char_literal256 = default(IToken);

	    object char_literal252_tree = default(object);
	    object char_literal253_tree = default(object);
	    object char_literal254_tree = default(object);
	    object char_literal255_tree = default(object);
	    object char_literal256_tree = default(object);
	    RewriteRuleITokenStream stream_161=new RewriteRuleITokenStream(adaptor,"token 161");
	    RewriteRuleITokenStream stream_163=new RewriteRuleITokenStream(adaptor,"token 163");
	    RewriteRuleITokenStream stream_175=new RewriteRuleITokenStream(adaptor,"token 175");
	    RewriteRuleITokenStream stream_176=new RewriteRuleITokenStream(adaptor,"token 176");
	    RewriteRuleITokenStream stream_157=new RewriteRuleITokenStream(adaptor,"token 157");

		try { DebugEnterRule(GrammarFileName, "op_3");
		DebugLocation(357, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:357:6: ( '+' -> T_PLUS | '-' -> T_MINUS | '&' -> T_BITWISE_AND | '|' -> T_BITWISE_OR | '^' -> T_BITWISE_XOR )
			int alt84=5;
			try { DebugEnterDecision(84, decisionCanBacktrack[84]);
			switch (input.LA(1))
			{
			case 161:
				{
				alt84 = 1;
				}
				break;
			case 163:
				{
				alt84 = 2;
				}
				break;
			case 157:
				{
				alt84 = 3;
				}
				break;
			case 176:
				{
				alt84 = 4;
				}
				break;
			case 175:
				{
				alt84 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 84, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(84); }
			switch (alt84)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:357:8: '+'
				{
				DebugLocation(357, 8);
				char_literal252=(IToken)Match(input,161,Follow._161_in_op_32162);  
				stream_161.Add(char_literal252);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 357:12: -> T_PLUS
				{
					DebugLocation(357, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_PLUS, "T_PLUS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:358:4: '-'
				{
				DebugLocation(358, 4);
				char_literal253=(IToken)Match(input,163,Follow._163_in_op_32171);  
				stream_163.Add(char_literal253);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 358:8: -> T_MINUS
				{
					DebugLocation(358, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MINUS, "T_MINUS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:359:4: '&'
				{
				DebugLocation(359, 4);
				char_literal254=(IToken)Match(input,157,Follow._157_in_op_32180);  
				stream_157.Add(char_literal254);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 359:8: -> T_BITWISE_AND
				{
					DebugLocation(359, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_AND, "T_BITWISE_AND"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:360:4: '|'
				{
				DebugLocation(360, 4);
				char_literal255=(IToken)Match(input,176,Follow._176_in_op_32189);  
				stream_176.Add(char_literal255);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 360:8: -> T_BITWISE_OR
				{
					DebugLocation(360, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_OR, "T_BITWISE_OR"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:361:4: '^'
				{
				DebugLocation(361, 4);
				char_literal256=(IToken)Match(input,175,Follow._175_in_op_32198);  
				stream_175.Add(char_literal256);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 361:8: -> T_BITWISE_XOR
				{
					DebugLocation(361, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_XOR, "T_BITWISE_XOR"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_3", 47);
			LeaveRule("op_3", 47);
			LeaveRule_op_3();
	    }
	 	DebugLocation(362, 1);
		} finally { DebugExitRule(GrammarFileName, "op_3"); }
		return retval;

	}
	// $ANTLR end "op_3"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_2() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_2() {}

	// $ANTLR start "expression_2"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:370:1: expression_2 : (a= expression_1 -> $a) ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )* ;
	[GrammarRule("expression_2")]
	private AstParserRuleReturnScope<object, IToken> expression_2()
	{
		EnterRule_expression_2();
		EnterRule("expression_2", 48);
		TraceIn("expression_2", 48);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS257 = default(IToken);
	    IToken WS259 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_2258 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS257_tree = default(object);
	    object WS259_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_op_2=new RewriteRuleSubtreeStream(adaptor,"rule op_2");
	    RewriteRuleSubtreeStream stream_expression_1=new RewriteRuleSubtreeStream(adaptor,"rule expression_1");
		try { DebugEnterRule(GrammarFileName, "expression_2");
		DebugLocation(370, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:371:2: ( (a= expression_1 -> $a) ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:371:4: (a= expression_1 -> $a) ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )*
			{
			DebugLocation(371, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:371:4: (a= expression_1 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:371:5: a= expression_1
			{
			DebugLocation(371, 6);
			PushFollow(Follow._expression_1_in_expression_22220);
			a=expression_1();
			PopFollow();

			stream_expression_1.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 371:19: -> $a
			{
				DebugLocation(371, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(371, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:371:25: ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )*
			try { DebugEnterSubRule(87);
			while (true)
			{
				int alt87=2;
				try { DebugEnterDecision(87, decisionCanBacktrack[87]);
				int LA87_0 = input.LA(1);

				if ((LA87_0==WS))
				{
					int LA87_1 = input.LA(2);

					if ((LA87_1==160))
					{
						int LA87_4 = input.LA(3);

						if ((LA87_4==WS))
						{
							int LA87_5 = input.LA(4);

							if (((LA87_5>=CASE && LA87_5<=CAST)||(LA87_5>=CONVERT && LA87_5<=COUNT)||LA87_5==EXISTS||LA87_5==NUMBER||LA87_5==SIMPLE_FILE||(LA87_5>=STRING && LA87_5<=SYSTEMVAR)||LA87_5==TOKEN||LA87_5==VARIABLE||LA87_5==158))
							{
								alt87 = 1;
							}


						}
						else if (((LA87_4>=CASE && LA87_4<=CAST)||(LA87_4>=CONVERT && LA87_4<=COUNT)||LA87_4==EXISTS||LA87_4==NUMBER||LA87_4==SIMPLE_FILE||(LA87_4>=STRING && LA87_4<=SYSTEMVAR)||LA87_4==TOKEN||LA87_4==VARIABLE||LA87_4==158))
						{
							alt87 = 1;
						}


					}
					else if ((LA87_1==156||LA87_1==165))
					{
						alt87 = 1;
					}


				}
				else if ((LA87_0==156||LA87_0==160||LA87_0==165))
				{
					alt87 = 1;
				}


				} finally { DebugExitDecision(87); }
				switch ( alt87 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:371:26: ( WS )? op_2 ( WS )? b= expression_1
					{
					DebugLocation(371, 26);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:371:26: ( WS )?
					int alt85=2;
					try { DebugEnterSubRule(85);
					try { DebugEnterDecision(85, decisionCanBacktrack[85]);
					int LA85_0 = input.LA(1);

					if ((LA85_0==WS))
					{
						alt85 = 1;
					}
					} finally { DebugExitDecision(85); }
					switch (alt85)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:371:26: WS
						{
						DebugLocation(371, 26);
						WS257=(IToken)Match(input,WS,Follow._WS_in_expression_22227);  
						stream_WS.Add(WS257);


						}
						break;

					}
					} finally { DebugExitSubRule(85); }

					DebugLocation(371, 30);
					PushFollow(Follow._op_2_in_expression_22230);
					op_2258=op_2();
					PopFollow();

					stream_op_2.Add(op_2258.Tree);
					DebugLocation(371, 35);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:371:35: ( WS )?
					int alt86=2;
					try { DebugEnterSubRule(86);
					try { DebugEnterDecision(86, decisionCanBacktrack[86]);
					int LA86_0 = input.LA(1);

					if ((LA86_0==WS))
					{
						alt86 = 1;
					}
					} finally { DebugExitDecision(86); }
					switch (alt86)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:371:35: WS
						{
						DebugLocation(371, 35);
						WS259=(IToken)Match(input,WS,Follow._WS_in_expression_22232);  
						stream_WS.Add(WS259);


						}
						break;

					}
					} finally { DebugExitSubRule(86); }

					DebugLocation(371, 40);
					PushFollow(Follow._expression_1_in_expression_22237);
					b=expression_1();
					PopFollow();

					stream_expression_1.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, op_2, expression_2
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 371:54: -> ^( T_OP_BINARY op_2 $expression_2 $b)
					{
						DebugLocation(371, 57);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:371:57: ^( T_OP_BINARY op_2 $expression_2 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(371, 59);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(371, 71);
						adaptor.AddChild(root_1, stream_op_2.NextTree());
						DebugLocation(371, 77);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(371, 91);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop87;
				}
			}

			loop87:
				;

			} finally { DebugExitSubRule(87); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_2", 48);
			LeaveRule("expression_2", 48);
			LeaveRule_expression_2();
	    }
	 	DebugLocation(372, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_2"); }
		return retval;

	}
	// $ANTLR end "expression_2"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_2() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_2() {}

	// $ANTLR start "op_2"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:374:1: op_2 : ( '*' -> T_PRODUCT | '/' -> T_DIVIDE | '%' -> T_MODULO );
	[GrammarRule("op_2")]
	private AstParserRuleReturnScope<object, IToken> op_2()
	{
		EnterRule_op_2();
		EnterRule("op_2", 49);
		TraceIn("op_2", 49);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal260 = default(IToken);
	    IToken char_literal261 = default(IToken);
	    IToken char_literal262 = default(IToken);

	    object char_literal260_tree = default(object);
	    object char_literal261_tree = default(object);
	    object char_literal262_tree = default(object);
	    RewriteRuleITokenStream stream_160=new RewriteRuleITokenStream(adaptor,"token 160");
	    RewriteRuleITokenStream stream_156=new RewriteRuleITokenStream(adaptor,"token 156");
	    RewriteRuleITokenStream stream_165=new RewriteRuleITokenStream(adaptor,"token 165");

		try { DebugEnterRule(GrammarFileName, "op_2");
		DebugLocation(374, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:374:6: ( '*' -> T_PRODUCT | '/' -> T_DIVIDE | '%' -> T_MODULO )
			int alt88=3;
			try { DebugEnterDecision(88, decisionCanBacktrack[88]);
			switch (input.LA(1))
			{
			case 160:
				{
				alt88 = 1;
				}
				break;
			case 165:
				{
				alt88 = 2;
				}
				break;
			case 156:
				{
				alt88 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 88, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(88); }
			switch (alt88)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:374:8: '*'
				{
				DebugLocation(374, 8);
				char_literal260=(IToken)Match(input,160,Follow._160_in_op_22263);  
				stream_160.Add(char_literal260);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 374:12: -> T_PRODUCT
				{
					DebugLocation(374, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_PRODUCT, "T_PRODUCT"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:375:4: '/'
				{
				DebugLocation(375, 4);
				char_literal261=(IToken)Match(input,165,Follow._165_in_op_22272);  
				stream_165.Add(char_literal261);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 375:8: -> T_DIVIDE
				{
					DebugLocation(375, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_DIVIDE, "T_DIVIDE"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:376:4: '%'
				{
				DebugLocation(376, 4);
				char_literal262=(IToken)Match(input,156,Follow._156_in_op_22281);  
				stream_156.Add(char_literal262);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 376:8: -> T_MODULO
				{
					DebugLocation(376, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MODULO, "T_MODULO"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_2", 49);
			LeaveRule("op_2", 49);
			LeaveRule_op_2();
	    }
	 	DebugLocation(377, 1);
		} finally { DebugExitRule(GrammarFileName, "op_2"); }
		return retval;

	}
	// $ANTLR end "op_2"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_1() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_1() {}

	// $ANTLR start "expression_1"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:379:1: expression_1 : ( '(' ( WS )? op_1 ( WS )? expression_1 ( WS )? ')' -> ^( T_OP_UNARY op_1 expression_1 ) | expression_atom );
	[GrammarRule("expression_1")]
	private AstParserRuleReturnScope<object, IToken> expression_1()
	{
		EnterRule_expression_1();
		EnterRule("expression_1", 50);
		TraceIn("expression_1", 50);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal263 = default(IToken);
	    IToken WS264 = default(IToken);
	    IToken WS266 = default(IToken);
	    IToken WS268 = default(IToken);
	    IToken char_literal269 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> op_1265 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_1267 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_atom270 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal263_tree = default(object);
	    object WS264_tree = default(object);
	    object WS266_tree = default(object);
	    object WS268_tree = default(object);
	    object char_literal269_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_159=new RewriteRuleITokenStream(adaptor,"token 159");
	    RewriteRuleITokenStream stream_158=new RewriteRuleITokenStream(adaptor,"token 158");
	    RewriteRuleSubtreeStream stream_expression_1=new RewriteRuleSubtreeStream(adaptor,"rule expression_1");
	    RewriteRuleSubtreeStream stream_op_1=new RewriteRuleSubtreeStream(adaptor,"rule op_1");
		try { DebugEnterRule(GrammarFileName, "expression_1");
		DebugLocation(379, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:381:2: ( '(' ( WS )? op_1 ( WS )? expression_1 ( WS )? ')' -> ^( T_OP_UNARY op_1 expression_1 ) | expression_atom )
			int alt92=2;
			try { DebugEnterDecision(92, decisionCanBacktrack[92]);
			int LA92_0 = input.LA(1);

			if ((LA92_0==158))
			{
				switch (input.LA(2))
				{
				case WS:
					{
					int LA92_3 = input.LA(3);

					if ((LA92_3==161||LA92_3==163||LA92_3==177))
					{
						alt92 = 1;
					}
					else if ((LA92_3==SELECT))
					{
						alt92 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 92, 3, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 161:
				case 163:
				case 177:
					{
					alt92 = 1;
					}
					break;
				case CASE:
				case CAST:
				case CONVERT:
				case COUNT:
				case EXISTS:
				case NOT:
				case NUMBER:
				case SELECT:
				case SIMPLE_FILE:
				case STRING:
				case SYSTEMVAR:
				case TOKEN:
				case VARIABLE:
				case 158:
					{
					alt92 = 2;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 92, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else if (((LA92_0>=CASE && LA92_0<=CAST)||(LA92_0>=CONVERT && LA92_0<=COUNT)||LA92_0==EXISTS||LA92_0==NUMBER||LA92_0==SIMPLE_FILE||(LA92_0>=STRING && LA92_0<=SYSTEMVAR)||LA92_0==TOKEN||LA92_0==VARIABLE))
			{
				alt92 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 92, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(92); }
			switch (alt92)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:381:4: '(' ( WS )? op_1 ( WS )? expression_1 ( WS )? ')'
				{
				DebugLocation(381, 4);
				char_literal263=(IToken)Match(input,158,Follow._158_in_expression_12299);  
				stream_158.Add(char_literal263);

				DebugLocation(381, 8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:381:8: ( WS )?
				int alt89=2;
				try { DebugEnterSubRule(89);
				try { DebugEnterDecision(89, decisionCanBacktrack[89]);
				int LA89_0 = input.LA(1);

				if ((LA89_0==WS))
				{
					alt89 = 1;
				}
				} finally { DebugExitDecision(89); }
				switch (alt89)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:381:8: WS
					{
					DebugLocation(381, 8);
					WS264=(IToken)Match(input,WS,Follow._WS_in_expression_12301);  
					stream_WS.Add(WS264);


					}
					break;

				}
				} finally { DebugExitSubRule(89); }

				DebugLocation(381, 12);
				PushFollow(Follow._op_1_in_expression_12304);
				op_1265=op_1();
				PopFollow();

				stream_op_1.Add(op_1265.Tree);
				DebugLocation(381, 17);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:381:17: ( WS )?
				int alt90=2;
				try { DebugEnterSubRule(90);
				try { DebugEnterDecision(90, decisionCanBacktrack[90]);
				int LA90_0 = input.LA(1);

				if ((LA90_0==WS))
				{
					alt90 = 1;
				}
				} finally { DebugExitDecision(90); }
				switch (alt90)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:381:17: WS
					{
					DebugLocation(381, 17);
					WS266=(IToken)Match(input,WS,Follow._WS_in_expression_12306);  
					stream_WS.Add(WS266);


					}
					break;

				}
				} finally { DebugExitSubRule(90); }

				DebugLocation(381, 21);
				PushFollow(Follow._expression_1_in_expression_12309);
				expression_1267=expression_1();
				PopFollow();

				stream_expression_1.Add(expression_1267.Tree);
				DebugLocation(381, 34);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:381:34: ( WS )?
				int alt91=2;
				try { DebugEnterSubRule(91);
				try { DebugEnterDecision(91, decisionCanBacktrack[91]);
				int LA91_0 = input.LA(1);

				if ((LA91_0==WS))
				{
					alt91 = 1;
				}
				} finally { DebugExitDecision(91); }
				switch (alt91)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:381:34: WS
					{
					DebugLocation(381, 34);
					WS268=(IToken)Match(input,WS,Follow._WS_in_expression_12311);  
					stream_WS.Add(WS268);


					}
					break;

				}
				} finally { DebugExitSubRule(91); }

				DebugLocation(381, 38);
				char_literal269=(IToken)Match(input,159,Follow._159_in_expression_12314);  
				stream_159.Add(char_literal269);



				{
				// AST REWRITE
				// elements: op_1, expression_1
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 381:42: -> ^( T_OP_UNARY op_1 expression_1 )
				{
					DebugLocation(381, 45);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:381:45: ^( T_OP_UNARY op_1 expression_1 )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(381, 47);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_UNARY, "T_OP_UNARY"), root_1);

					DebugLocation(381, 58);
					adaptor.AddChild(root_1, stream_op_1.NextTree());
					DebugLocation(381, 63);
					adaptor.AddChild(root_1, stream_expression_1.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:383:4: expression_atom
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(383, 4);
				PushFollow(Follow._expression_atom_in_expression_12331);
				expression_atom270=expression_atom();
				PopFollow();

				adaptor.AddChild(root_0, expression_atom270.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_1", 50);
			LeaveRule("expression_1", 50);
			LeaveRule_expression_1();
	    }
	 	DebugLocation(384, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_1"); }
		return retval;

	}
	// $ANTLR end "expression_1"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_1() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_1() {}

	// $ANTLR start "op_1"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:386:1: op_1 : ( '~' -> T_BITWISE_NOT | '+' -> T_PLUS | '-' -> T_MINUS );
	[GrammarRule("op_1")]
	private AstParserRuleReturnScope<object, IToken> op_1()
	{
		EnterRule_op_1();
		EnterRule("op_1", 51);
		TraceIn("op_1", 51);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal271 = default(IToken);
	    IToken char_literal272 = default(IToken);
	    IToken char_literal273 = default(IToken);

	    object char_literal271_tree = default(object);
	    object char_literal272_tree = default(object);
	    object char_literal273_tree = default(object);
	    RewriteRuleITokenStream stream_161=new RewriteRuleITokenStream(adaptor,"token 161");
	    RewriteRuleITokenStream stream_163=new RewriteRuleITokenStream(adaptor,"token 163");
	    RewriteRuleITokenStream stream_177=new RewriteRuleITokenStream(adaptor,"token 177");

		try { DebugEnterRule(GrammarFileName, "op_1");
		DebugLocation(386, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:386:6: ( '~' -> T_BITWISE_NOT | '+' -> T_PLUS | '-' -> T_MINUS )
			int alt93=3;
			try { DebugEnterDecision(93, decisionCanBacktrack[93]);
			switch (input.LA(1))
			{
			case 177:
				{
				alt93 = 1;
				}
				break;
			case 161:
				{
				alt93 = 2;
				}
				break;
			case 163:
				{
				alt93 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 93, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(93); }
			switch (alt93)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:386:8: '~'
				{
				DebugLocation(386, 8);
				char_literal271=(IToken)Match(input,177,Follow._177_in_op_12341);  
				stream_177.Add(char_literal271);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 386:12: -> T_BITWISE_NOT
				{
					DebugLocation(386, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_NOT, "T_BITWISE_NOT"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:387:5: '+'
				{
				DebugLocation(387, 5);
				char_literal272=(IToken)Match(input,161,Follow._161_in_op_12351);  
				stream_161.Add(char_literal272);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 387:9: -> T_PLUS
				{
					DebugLocation(387, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_PLUS, "T_PLUS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:388:4: '-'
				{
				DebugLocation(388, 4);
				char_literal273=(IToken)Match(input,163,Follow._163_in_op_12360);  
				stream_163.Add(char_literal273);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 388:8: -> T_MINUS
				{
					DebugLocation(388, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MINUS, "T_MINUS"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_1", 51);
			LeaveRule("op_1", 51);
			LeaveRule_op_1();
	    }
	 	DebugLocation(389, 1);
		} finally { DebugExitRule(GrammarFileName, "op_1"); }
		return retval;

	}
	// $ANTLR end "op_1"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_atom() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_atom() {}

	// $ANTLR start "expression_atom"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:391:1: expression_atom : ( NUMBER -> ^( T_INTEGER NUMBER ) | string | SYSTEMVAR -> ^( T_SYSTEMVAR SYSTEMVAR ) | variable | subquery | '(' expression ')' -> expression | functioncall_or_column | conversion | case | EXISTS ( WS )? '(' ( WS )? select_command ( WS )? ')' -> ^( T_EXISTS select_command ) );
	[GrammarRule("expression_atom")]
	private AstParserRuleReturnScope<object, IToken> expression_atom()
	{
		EnterRule_expression_atom();
		EnterRule("expression_atom", 52);
		TraceIn("expression_atom", 52);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken NUMBER274 = default(IToken);
	    IToken SYSTEMVAR276 = default(IToken);
	    IToken char_literal279 = default(IToken);
	    IToken char_literal281 = default(IToken);
	    IToken EXISTS285 = default(IToken);
	    IToken WS286 = default(IToken);
	    IToken char_literal287 = default(IToken);
	    IToken WS288 = default(IToken);
	    IToken WS290 = default(IToken);
	    IToken char_literal291 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> string275 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> variable277 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> subquery278 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression280 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> functioncall_or_column282 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> conversion283 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> case284 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> select_command289 = default(AstParserRuleReturnScope<object, IToken>);

	    object NUMBER274_tree = default(object);
	    object SYSTEMVAR276_tree = default(object);
	    object char_literal279_tree = default(object);
	    object char_literal281_tree = default(object);
	    object EXISTS285_tree = default(object);
	    object WS286_tree = default(object);
	    object char_literal287_tree = default(object);
	    object WS288_tree = default(object);
	    object WS290_tree = default(object);
	    object char_literal291_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_EXISTS=new RewriteRuleITokenStream(adaptor,"token EXISTS");
	    RewriteRuleITokenStream stream_SYSTEMVAR=new RewriteRuleITokenStream(adaptor,"token SYSTEMVAR");
	    RewriteRuleITokenStream stream_159=new RewriteRuleITokenStream(adaptor,"token 159");
	    RewriteRuleITokenStream stream_158=new RewriteRuleITokenStream(adaptor,"token 158");
	    RewriteRuleITokenStream stream_NUMBER=new RewriteRuleITokenStream(adaptor,"token NUMBER");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_select_command=new RewriteRuleSubtreeStream(adaptor,"rule select_command");
		try { DebugEnterRule(GrammarFileName, "expression_atom");
		DebugLocation(391, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:392:2: ( NUMBER -> ^( T_INTEGER NUMBER ) | string | SYSTEMVAR -> ^( T_SYSTEMVAR SYSTEMVAR ) | variable | subquery | '(' expression ')' -> expression | functioncall_or_column | conversion | case | EXISTS ( WS )? '(' ( WS )? select_command ( WS )? ')' -> ^( T_EXISTS select_command ) )
			int alt97=10;
			try { DebugEnterDecision(97, decisionCanBacktrack[97]);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt97 = 1;
				}
				break;
			case STRING:
				{
				alt97 = 2;
				}
				break;
			case SYSTEMVAR:
				{
				alt97 = 3;
				}
				break;
			case VARIABLE:
				{
				alt97 = 4;
				}
				break;
			case 158:
				{
				int LA97_5 = input.LA(2);

				if ((LA97_5==SELECT||LA97_5==WS))
				{
					alt97 = 5;
				}
				else if (((LA97_5>=CASE && LA97_5<=CAST)||(LA97_5>=CONVERT && LA97_5<=COUNT)||LA97_5==EXISTS||(LA97_5>=NOT && LA97_5<=NUMBER)||LA97_5==SIMPLE_FILE||(LA97_5>=STRING && LA97_5<=SYSTEMVAR)||LA97_5==TOKEN||LA97_5==VARIABLE||LA97_5==158))
				{
					alt97 = 6;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 97, 5, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case COUNT:
			case SIMPLE_FILE:
			case TOKEN:
				{
				alt97 = 7;
				}
				break;
			case CAST:
			case CONVERT:
				{
				alt97 = 8;
				}
				break;
			case CASE:
				{
				alt97 = 9;
				}
				break;
			case EXISTS:
				{
				alt97 = 10;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 97, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(97); }
			switch (alt97)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:392:4: NUMBER
				{
				DebugLocation(392, 4);
				NUMBER274=(IToken)Match(input,NUMBER,Follow._NUMBER_in_expression_atom2375);  
				stream_NUMBER.Add(NUMBER274);



				{
				// AST REWRITE
				// elements: NUMBER
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 392:11: -> ^( T_INTEGER NUMBER )
				{
					DebugLocation(392, 14);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:392:14: ^( T_INTEGER NUMBER )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(392, 16);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_INTEGER, "T_INTEGER"), root_1);

					DebugLocation(392, 26);
					adaptor.AddChild(root_1, stream_NUMBER.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:393:4: string
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(393, 4);
				PushFollow(Follow._string_in_expression_atom2388);
				string275=@string();
				PopFollow();

				adaptor.AddChild(root_0, string275.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:394:4: SYSTEMVAR
				{
				DebugLocation(394, 4);
				SYSTEMVAR276=(IToken)Match(input,SYSTEMVAR,Follow._SYSTEMVAR_in_expression_atom2393);  
				stream_SYSTEMVAR.Add(SYSTEMVAR276);



				{
				// AST REWRITE
				// elements: SYSTEMVAR
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 394:14: -> ^( T_SYSTEMVAR SYSTEMVAR )
				{
					DebugLocation(394, 17);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:394:17: ^( T_SYSTEMVAR SYSTEMVAR )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(394, 19);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SYSTEMVAR, "T_SYSTEMVAR"), root_1);

					DebugLocation(394, 31);
					adaptor.AddChild(root_1, stream_SYSTEMVAR.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:395:4: variable
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(395, 4);
				PushFollow(Follow._variable_in_expression_atom2406);
				variable277=variable();
				PopFollow();

				adaptor.AddChild(root_0, variable277.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:396:4: subquery
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(396, 4);
				PushFollow(Follow._subquery_in_expression_atom2411);
				subquery278=subquery();
				PopFollow();

				adaptor.AddChild(root_0, subquery278.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:397:4: '(' expression ')'
				{
				DebugLocation(397, 4);
				char_literal279=(IToken)Match(input,158,Follow._158_in_expression_atom2416);  
				stream_158.Add(char_literal279);

				DebugLocation(397, 8);
				PushFollow(Follow._expression_in_expression_atom2418);
				expression280=expression();
				PopFollow();

				stream_expression.Add(expression280.Tree);
				DebugLocation(397, 19);
				char_literal281=(IToken)Match(input,159,Follow._159_in_expression_atom2420);  
				stream_159.Add(char_literal281);



				{
				// AST REWRITE
				// elements: expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 397:23: -> expression
				{
					DebugLocation(397, 26);
					adaptor.AddChild(root_0, stream_expression.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:398:4: functioncall_or_column
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(398, 4);
				PushFollow(Follow._functioncall_or_column_in_expression_atom2429);
				functioncall_or_column282=functioncall_or_column();
				PopFollow();

				adaptor.AddChild(root_0, functioncall_or_column282.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:399:4: conversion
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(399, 4);
				PushFollow(Follow._conversion_in_expression_atom2434);
				conversion283=conversion();
				PopFollow();

				adaptor.AddChild(root_0, conversion283.Tree);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:400:4: case
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(400, 4);
				PushFollow(Follow._case_in_expression_atom2439);
				case284=@case();
				PopFollow();

				adaptor.AddChild(root_0, case284.Tree);

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:401:4: EXISTS ( WS )? '(' ( WS )? select_command ( WS )? ')'
				{
				DebugLocation(401, 4);
				EXISTS285=(IToken)Match(input,EXISTS,Follow._EXISTS_in_expression_atom2444);  
				stream_EXISTS.Add(EXISTS285);

				DebugLocation(401, 11);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:401:11: ( WS )?
				int alt94=2;
				try { DebugEnterSubRule(94);
				try { DebugEnterDecision(94, decisionCanBacktrack[94]);
				int LA94_0 = input.LA(1);

				if ((LA94_0==WS))
				{
					alt94 = 1;
				}
				} finally { DebugExitDecision(94); }
				switch (alt94)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:401:11: WS
					{
					DebugLocation(401, 11);
					WS286=(IToken)Match(input,WS,Follow._WS_in_expression_atom2446);  
					stream_WS.Add(WS286);


					}
					break;

				}
				} finally { DebugExitSubRule(94); }

				DebugLocation(401, 15);
				char_literal287=(IToken)Match(input,158,Follow._158_in_expression_atom2449);  
				stream_158.Add(char_literal287);

				DebugLocation(401, 19);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:401:19: ( WS )?
				int alt95=2;
				try { DebugEnterSubRule(95);
				try { DebugEnterDecision(95, decisionCanBacktrack[95]);
				int LA95_0 = input.LA(1);

				if ((LA95_0==WS))
				{
					alt95 = 1;
				}
				} finally { DebugExitDecision(95); }
				switch (alt95)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:401:19: WS
					{
					DebugLocation(401, 19);
					WS288=(IToken)Match(input,WS,Follow._WS_in_expression_atom2451);  
					stream_WS.Add(WS288);


					}
					break;

				}
				} finally { DebugExitSubRule(95); }

				DebugLocation(401, 23);
				PushFollow(Follow._select_command_in_expression_atom2454);
				select_command289=select_command();
				PopFollow();

				stream_select_command.Add(select_command289.Tree);
				DebugLocation(401, 38);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:401:38: ( WS )?
				int alt96=2;
				try { DebugEnterSubRule(96);
				try { DebugEnterDecision(96, decisionCanBacktrack[96]);
				int LA96_0 = input.LA(1);

				if ((LA96_0==WS))
				{
					alt96 = 1;
				}
				} finally { DebugExitDecision(96); }
				switch (alt96)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:401:38: WS
					{
					DebugLocation(401, 38);
					WS290=(IToken)Match(input,WS,Follow._WS_in_expression_atom2456);  
					stream_WS.Add(WS290);


					}
					break;

				}
				} finally { DebugExitSubRule(96); }

				DebugLocation(401, 42);
				char_literal291=(IToken)Match(input,159,Follow._159_in_expression_atom2459);  
				stream_159.Add(char_literal291);



				{
				// AST REWRITE
				// elements: select_command
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 401:46: -> ^( T_EXISTS select_command )
				{
					DebugLocation(401, 49);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:401:49: ^( T_EXISTS select_command )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(401, 51);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_EXISTS, "T_EXISTS"), root_1);

					DebugLocation(401, 60);
					adaptor.AddChild(root_1, stream_select_command.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_atom", 52);
			LeaveRule("expression_atom", 52);
			LeaveRule_expression_atom();
	    }
	 	DebugLocation(402, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_atom"); }
		return retval;

	}
	// $ANTLR end "expression_atom"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_functioncall_or_column() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_functioncall_or_column() {}

	// $ANTLR start "functioncall_or_column"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:405:1: functioncall_or_column : ( TOKEN ( WS )? '(' ( WS )? ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )? ')' -> ^( T_FUNCTIONCALL TOKEN ( expression )* ) | COUNT ( WS )? '(' ( WS )? expression ( WS )? ')' -> ^( T_FUNCTIONCALL T_COUNT expression ) | COUNT ( WS )? '(' ( WS )? DISTINCT WS expression ( WS )? ')' -> ^( T_FUNCTIONCALL T_DISTINCTCOUNT expression ) | COUNT ( WS )? '(' ( WS )? all_columns ( WS )? ')' -> ^( T_FUNCTIONCALL T_COUNT all_columns ) | COUNT ( WS )? '(' ( WS )? DISTINCT WS all_columns ( WS )? ')' -> ^( T_FUNCTIONCALL T_DISTINCTCOUNT all_columns ) | ( table_alias ( WS )? '.' ( WS )? )? column_name -> ^( T_COLUMN column_name ( table_alias )? ) );
	[GrammarRule("functioncall_or_column")]
	private AstParserRuleReturnScope<object, IToken> functioncall_or_column()
	{
		EnterRule_functioncall_or_column();
		EnterRule("functioncall_or_column", 53);
		TraceIn("functioncall_or_column", 53);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN292 = default(IToken);
	    IToken WS293 = default(IToken);
	    IToken char_literal294 = default(IToken);
	    IToken WS295 = default(IToken);
	    IToken WS297 = default(IToken);
	    IToken char_literal298 = default(IToken);
	    IToken WS299 = default(IToken);
	    IToken WS301 = default(IToken);
	    IToken char_literal302 = default(IToken);
	    IToken COUNT303 = default(IToken);
	    IToken WS304 = default(IToken);
	    IToken char_literal305 = default(IToken);
	    IToken WS306 = default(IToken);
	    IToken WS308 = default(IToken);
	    IToken char_literal309 = default(IToken);
	    IToken COUNT310 = default(IToken);
	    IToken WS311 = default(IToken);
	    IToken char_literal312 = default(IToken);
	    IToken WS313 = default(IToken);
	    IToken DISTINCT314 = default(IToken);
	    IToken WS315 = default(IToken);
	    IToken WS317 = default(IToken);
	    IToken char_literal318 = default(IToken);
	    IToken COUNT319 = default(IToken);
	    IToken WS320 = default(IToken);
	    IToken char_literal321 = default(IToken);
	    IToken WS322 = default(IToken);
	    IToken WS324 = default(IToken);
	    IToken char_literal325 = default(IToken);
	    IToken COUNT326 = default(IToken);
	    IToken WS327 = default(IToken);
	    IToken char_literal328 = default(IToken);
	    IToken WS329 = default(IToken);
	    IToken DISTINCT330 = default(IToken);
	    IToken WS331 = default(IToken);
	    IToken WS333 = default(IToken);
	    IToken char_literal334 = default(IToken);
	    IToken WS336 = default(IToken);
	    IToken char_literal337 = default(IToken);
	    IToken WS338 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression296 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression300 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression307 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression316 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> all_columns323 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> all_columns332 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> table_alias335 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> column_name339 = default(AstParserRuleReturnScope<object, IToken>);

	    object TOKEN292_tree = default(object);
	    object WS293_tree = default(object);
	    object char_literal294_tree = default(object);
	    object WS295_tree = default(object);
	    object WS297_tree = default(object);
	    object char_literal298_tree = default(object);
	    object WS299_tree = default(object);
	    object WS301_tree = default(object);
	    object char_literal302_tree = default(object);
	    object COUNT303_tree = default(object);
	    object WS304_tree = default(object);
	    object char_literal305_tree = default(object);
	    object WS306_tree = default(object);
	    object WS308_tree = default(object);
	    object char_literal309_tree = default(object);
	    object COUNT310_tree = default(object);
	    object WS311_tree = default(object);
	    object char_literal312_tree = default(object);
	    object WS313_tree = default(object);
	    object DISTINCT314_tree = default(object);
	    object WS315_tree = default(object);
	    object WS317_tree = default(object);
	    object char_literal318_tree = default(object);
	    object COUNT319_tree = default(object);
	    object WS320_tree = default(object);
	    object char_literal321_tree = default(object);
	    object WS322_tree = default(object);
	    object WS324_tree = default(object);
	    object char_literal325_tree = default(object);
	    object COUNT326_tree = default(object);
	    object WS327_tree = default(object);
	    object char_literal328_tree = default(object);
	    object WS329_tree = default(object);
	    object DISTINCT330_tree = default(object);
	    object WS331_tree = default(object);
	    object WS333_tree = default(object);
	    object char_literal334_tree = default(object);
	    object WS336_tree = default(object);
	    object char_literal337_tree = default(object);
	    object WS338_tree = default(object);
	    RewriteRuleITokenStream stream_162=new RewriteRuleITokenStream(adaptor,"token 162");
	    RewriteRuleITokenStream stream_164=new RewriteRuleITokenStream(adaptor,"token 164");
	    RewriteRuleITokenStream stream_COUNT=new RewriteRuleITokenStream(adaptor,"token COUNT");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_DISTINCT=new RewriteRuleITokenStream(adaptor,"token DISTINCT");
	    RewriteRuleITokenStream stream_159=new RewriteRuleITokenStream(adaptor,"token 159");
	    RewriteRuleITokenStream stream_158=new RewriteRuleITokenStream(adaptor,"token 158");
	    RewriteRuleITokenStream stream_TOKEN=new RewriteRuleITokenStream(adaptor,"token TOKEN");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_table_alias=new RewriteRuleSubtreeStream(adaptor,"rule table_alias");
	    RewriteRuleSubtreeStream stream_all_columns=new RewriteRuleSubtreeStream(adaptor,"rule all_columns");
	    RewriteRuleSubtreeStream stream_column_name=new RewriteRuleSubtreeStream(adaptor,"rule column_name");
		try { DebugEnterRule(GrammarFileName, "functioncall_or_column");
		DebugLocation(405, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:406:2: ( TOKEN ( WS )? '(' ( WS )? ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )? ')' -> ^( T_FUNCTIONCALL TOKEN ( expression )* ) | COUNT ( WS )? '(' ( WS )? expression ( WS )? ')' -> ^( T_FUNCTIONCALL T_COUNT expression ) | COUNT ( WS )? '(' ( WS )? DISTINCT WS expression ( WS )? ')' -> ^( T_FUNCTIONCALL T_DISTINCTCOUNT expression ) | COUNT ( WS )? '(' ( WS )? all_columns ( WS )? ')' -> ^( T_FUNCTIONCALL T_COUNT all_columns ) | COUNT ( WS )? '(' ( WS )? DISTINCT WS all_columns ( WS )? ')' -> ^( T_FUNCTIONCALL T_DISTINCTCOUNT all_columns ) | ( table_alias ( WS )? '.' ( WS )? )? column_name -> ^( T_COLUMN column_name ( table_alias )? ) )
			int alt120=6;
			try { DebugEnterDecision(120, decisionCanBacktrack[120]);
			switch (input.LA(1))
			{
			case TOKEN:
				{
				alt120 = 1;
				}
				break;
			case COUNT:
				{
				int LA120_2 = input.LA(2);

				if ((LA120_2==WS))
				{
					int LA120_4 = input.LA(3);

					if ((LA120_4==158))
					{
						switch (input.LA(4))
						{
						case WS:
							{
							switch (input.LA(5))
							{
							case CASE:
							case CAST:
							case CONVERT:
							case COUNT:
							case EXISTS:
							case NOT:
							case NUMBER:
							case STRING:
							case SYSTEMVAR:
							case TOKEN:
							case VARIABLE:
							case 158:
								{
								alt120 = 2;
								}
								break;
							case SIMPLE_FILE:
								{
								switch (input.LA(6))
								{
								case WS:
									{
									int LA120_11 = input.LA(7);

									if ((LA120_11==164))
									{
										switch (input.LA(8))
										{
										case WS:
											{
											int LA120_14 = input.LA(9);

											if ((LA120_14==SIMPLE_FILE))
											{
												alt120 = 2;
											}
											else if ((LA120_14==160))
											{
												alt120 = 4;
											}
											else
											{
												NoViableAltException nvae = new NoViableAltException("", 120, 14, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
											}
											break;
										case SIMPLE_FILE:
											{
											alt120 = 2;
											}
											break;
										case 160:
											{
											alt120 = 4;
											}
											break;
										default:
											{
												NoViableAltException nvae = new NoViableAltException("", 120, 12, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
										}

									}
									else if ((LA120_11==AND||LA120_11==BETWEEN||LA120_11==IN||LA120_11==LIKE||LA120_11==MATCH||LA120_11==NOT||LA120_11==OR||(LA120_11>=153 && LA120_11<=157)||(LA120_11>=159 && LA120_11<=161)||LA120_11==163||LA120_11==165||(LA120_11>=167 && LA120_11<=172)||(LA120_11>=175 && LA120_11<=176)))
									{
										alt120 = 2;
									}
									else
									{
										NoViableAltException nvae = new NoViableAltException("", 120, 11, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
									}
									break;
								case 164:
									{
									switch (input.LA(7))
									{
									case WS:
										{
										int LA120_14 = input.LA(8);

										if ((LA120_14==SIMPLE_FILE))
										{
											alt120 = 2;
										}
										else if ((LA120_14==160))
										{
											alt120 = 4;
										}
										else
										{
											NoViableAltException nvae = new NoViableAltException("", 120, 14, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
										}
										break;
									case SIMPLE_FILE:
										{
										alt120 = 2;
										}
										break;
									case 160:
										{
										alt120 = 4;
										}
										break;
									default:
										{
											NoViableAltException nvae = new NoViableAltException("", 120, 12, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}

									}
									break;
								case 153:
								case 154:
								case 155:
								case 156:
								case 157:
								case 159:
								case 160:
								case 161:
								case 163:
								case 165:
								case 167:
								case 168:
								case 169:
								case 170:
								case 171:
								case 172:
								case 175:
								case 176:
									{
									alt120 = 2;
									}
									break;
								default:
									{
										NoViableAltException nvae = new NoViableAltException("", 120, 8, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

								}
								break;
							case DISTINCT:
								{
								int LA120_9 = input.LA(6);

								if ((LA120_9==WS))
								{
									switch (input.LA(7))
									{
									case CASE:
									case CAST:
									case CONVERT:
									case COUNT:
									case EXISTS:
									case NOT:
									case NUMBER:
									case STRING:
									case SYSTEMVAR:
									case TOKEN:
									case VARIABLE:
									case 158:
										{
										alt120 = 3;
										}
										break;
									case SIMPLE_FILE:
										{
										switch (input.LA(8))
										{
										case WS:
											{
											int LA120_18 = input.LA(9);

											if ((LA120_18==164))
											{
												switch (input.LA(10))
												{
												case WS:
													{
													int LA120_20 = input.LA(11);

													if ((LA120_20==SIMPLE_FILE))
													{
														alt120 = 3;
													}
													else if ((LA120_20==160))
													{
														alt120 = 5;
													}
													else
													{
														NoViableAltException nvae = new NoViableAltException("", 120, 20, input);
														DebugRecognitionException(nvae);
														throw nvae;
													}
													}
													break;
												case SIMPLE_FILE:
													{
													alt120 = 3;
													}
													break;
												case 160:
													{
													alt120 = 5;
													}
													break;
												default:
													{
														NoViableAltException nvae = new NoViableAltException("", 120, 19, input);
														DebugRecognitionException(nvae);
														throw nvae;
													}
												}

											}
											else if ((LA120_18==AND||LA120_18==BETWEEN||LA120_18==IN||LA120_18==LIKE||LA120_18==MATCH||LA120_18==NOT||LA120_18==OR||(LA120_18>=153 && LA120_18<=157)||(LA120_18>=159 && LA120_18<=161)||LA120_18==163||LA120_18==165||(LA120_18>=167 && LA120_18<=172)||(LA120_18>=175 && LA120_18<=176)))
											{
												alt120 = 3;
											}
											else
											{
												NoViableAltException nvae = new NoViableAltException("", 120, 18, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
											}
											break;
										case 164:
											{
											switch (input.LA(9))
											{
											case WS:
												{
												int LA120_20 = input.LA(10);

												if ((LA120_20==SIMPLE_FILE))
												{
													alt120 = 3;
												}
												else if ((LA120_20==160))
												{
													alt120 = 5;
												}
												else
												{
													NoViableAltException nvae = new NoViableAltException("", 120, 20, input);
													DebugRecognitionException(nvae);
													throw nvae;
												}
												}
												break;
											case SIMPLE_FILE:
												{
												alt120 = 3;
												}
												break;
											case 160:
												{
												alt120 = 5;
												}
												break;
											default:
												{
													NoViableAltException nvae = new NoViableAltException("", 120, 19, input);
													DebugRecognitionException(nvae);
													throw nvae;
												}
											}

											}
											break;
										case 153:
										case 154:
										case 155:
										case 156:
										case 157:
										case 159:
										case 160:
										case 161:
										case 163:
										case 165:
										case 167:
										case 168:
										case 169:
										case 170:
										case 171:
										case 172:
										case 175:
										case 176:
											{
											alt120 = 3;
											}
											break;
										default:
											{
												NoViableAltException nvae = new NoViableAltException("", 120, 16, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
										}

										}
										break;
									case 160:
										{
										alt120 = 5;
										}
										break;
									default:
										{
											NoViableAltException nvae = new NoViableAltException("", 120, 13, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}

								}
								else
								{
									NoViableAltException nvae = new NoViableAltException("", 120, 9, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
								}
								break;
							case 160:
								{
								alt120 = 4;
								}
								break;
							default:
								{
									NoViableAltException nvae = new NoViableAltException("", 120, 6, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}

							}
							break;
						case CASE:
						case CAST:
						case CONVERT:
						case COUNT:
						case EXISTS:
						case NOT:
						case NUMBER:
						case STRING:
						case SYSTEMVAR:
						case TOKEN:
						case VARIABLE:
						case 158:
							{
							alt120 = 2;
							}
							break;
						case SIMPLE_FILE:
							{
							switch (input.LA(5))
							{
							case WS:
								{
								int LA120_11 = input.LA(6);

								if ((LA120_11==164))
								{
									switch (input.LA(7))
									{
									case WS:
										{
										int LA120_14 = input.LA(8);

										if ((LA120_14==SIMPLE_FILE))
										{
											alt120 = 2;
										}
										else if ((LA120_14==160))
										{
											alt120 = 4;
										}
										else
										{
											NoViableAltException nvae = new NoViableAltException("", 120, 14, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
										}
										break;
									case SIMPLE_FILE:
										{
										alt120 = 2;
										}
										break;
									case 160:
										{
										alt120 = 4;
										}
										break;
									default:
										{
											NoViableAltException nvae = new NoViableAltException("", 120, 12, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}

								}
								else if ((LA120_11==AND||LA120_11==BETWEEN||LA120_11==IN||LA120_11==LIKE||LA120_11==MATCH||LA120_11==NOT||LA120_11==OR||(LA120_11>=153 && LA120_11<=157)||(LA120_11>=159 && LA120_11<=161)||LA120_11==163||LA120_11==165||(LA120_11>=167 && LA120_11<=172)||(LA120_11>=175 && LA120_11<=176)))
								{
									alt120 = 2;
								}
								else
								{
									NoViableAltException nvae = new NoViableAltException("", 120, 11, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
								}
								break;
							case 164:
								{
								switch (input.LA(6))
								{
								case WS:
									{
									int LA120_14 = input.LA(7);

									if ((LA120_14==SIMPLE_FILE))
									{
										alt120 = 2;
									}
									else if ((LA120_14==160))
									{
										alt120 = 4;
									}
									else
									{
										NoViableAltException nvae = new NoViableAltException("", 120, 14, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
									}
									break;
								case SIMPLE_FILE:
									{
									alt120 = 2;
									}
									break;
								case 160:
									{
									alt120 = 4;
									}
									break;
								default:
									{
										NoViableAltException nvae = new NoViableAltException("", 120, 12, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

								}
								break;
							case 153:
							case 154:
							case 155:
							case 156:
							case 157:
							case 159:
							case 160:
							case 161:
							case 163:
							case 165:
							case 167:
							case 168:
							case 169:
							case 170:
							case 171:
							case 172:
							case 175:
							case 176:
								{
								alt120 = 2;
								}
								break;
							default:
								{
									NoViableAltException nvae = new NoViableAltException("", 120, 8, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}

							}
							break;
						case DISTINCT:
							{
							int LA120_9 = input.LA(5);

							if ((LA120_9==WS))
							{
								switch (input.LA(6))
								{
								case CASE:
								case CAST:
								case CONVERT:
								case COUNT:
								case EXISTS:
								case NOT:
								case NUMBER:
								case STRING:
								case SYSTEMVAR:
								case TOKEN:
								case VARIABLE:
								case 158:
									{
									alt120 = 3;
									}
									break;
								case SIMPLE_FILE:
									{
									switch (input.LA(7))
									{
									case WS:
										{
										int LA120_18 = input.LA(8);

										if ((LA120_18==164))
										{
											switch (input.LA(9))
											{
											case WS:
												{
												int LA120_20 = input.LA(10);

												if ((LA120_20==SIMPLE_FILE))
												{
													alt120 = 3;
												}
												else if ((LA120_20==160))
												{
													alt120 = 5;
												}
												else
												{
													NoViableAltException nvae = new NoViableAltException("", 120, 20, input);
													DebugRecognitionException(nvae);
													throw nvae;
												}
												}
												break;
											case SIMPLE_FILE:
												{
												alt120 = 3;
												}
												break;
											case 160:
												{
												alt120 = 5;
												}
												break;
											default:
												{
													NoViableAltException nvae = new NoViableAltException("", 120, 19, input);
													DebugRecognitionException(nvae);
													throw nvae;
												}
											}

										}
										else if ((LA120_18==AND||LA120_18==BETWEEN||LA120_18==IN||LA120_18==LIKE||LA120_18==MATCH||LA120_18==NOT||LA120_18==OR||(LA120_18>=153 && LA120_18<=157)||(LA120_18>=159 && LA120_18<=161)||LA120_18==163||LA120_18==165||(LA120_18>=167 && LA120_18<=172)||(LA120_18>=175 && LA120_18<=176)))
										{
											alt120 = 3;
										}
										else
										{
											NoViableAltException nvae = new NoViableAltException("", 120, 18, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
										}
										break;
									case 164:
										{
										switch (input.LA(8))
										{
										case WS:
											{
											int LA120_20 = input.LA(9);

											if ((LA120_20==SIMPLE_FILE))
											{
												alt120 = 3;
											}
											else if ((LA120_20==160))
											{
												alt120 = 5;
											}
											else
											{
												NoViableAltException nvae = new NoViableAltException("", 120, 20, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
											}
											break;
										case SIMPLE_FILE:
											{
											alt120 = 3;
											}
											break;
										case 160:
											{
											alt120 = 5;
											}
											break;
										default:
											{
												NoViableAltException nvae = new NoViableAltException("", 120, 19, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
										}

										}
										break;
									case 153:
									case 154:
									case 155:
									case 156:
									case 157:
									case 159:
									case 160:
									case 161:
									case 163:
									case 165:
									case 167:
									case 168:
									case 169:
									case 170:
									case 171:
									case 172:
									case 175:
									case 176:
										{
										alt120 = 3;
										}
										break;
									default:
										{
											NoViableAltException nvae = new NoViableAltException("", 120, 16, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}

									}
									break;
								case 160:
									{
									alt120 = 5;
									}
									break;
								default:
									{
										NoViableAltException nvae = new NoViableAltException("", 120, 13, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 120, 9, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case 160:
							{
							alt120 = 4;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 120, 5, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 120, 4, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA120_2==158))
				{
					switch (input.LA(3))
					{
					case WS:
						{
						switch (input.LA(4))
						{
						case CASE:
						case CAST:
						case CONVERT:
						case COUNT:
						case EXISTS:
						case NOT:
						case NUMBER:
						case STRING:
						case SYSTEMVAR:
						case TOKEN:
						case VARIABLE:
						case 158:
							{
							alt120 = 2;
							}
							break;
						case SIMPLE_FILE:
							{
							switch (input.LA(5))
							{
							case WS:
								{
								int LA120_11 = input.LA(6);

								if ((LA120_11==164))
								{
									switch (input.LA(7))
									{
									case WS:
										{
										int LA120_14 = input.LA(8);

										if ((LA120_14==SIMPLE_FILE))
										{
											alt120 = 2;
										}
										else if ((LA120_14==160))
										{
											alt120 = 4;
										}
										else
										{
											NoViableAltException nvae = new NoViableAltException("", 120, 14, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
										}
										break;
									case SIMPLE_FILE:
										{
										alt120 = 2;
										}
										break;
									case 160:
										{
										alt120 = 4;
										}
										break;
									default:
										{
											NoViableAltException nvae = new NoViableAltException("", 120, 12, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}

								}
								else if ((LA120_11==AND||LA120_11==BETWEEN||LA120_11==IN||LA120_11==LIKE||LA120_11==MATCH||LA120_11==NOT||LA120_11==OR||(LA120_11>=153 && LA120_11<=157)||(LA120_11>=159 && LA120_11<=161)||LA120_11==163||LA120_11==165||(LA120_11>=167 && LA120_11<=172)||(LA120_11>=175 && LA120_11<=176)))
								{
									alt120 = 2;
								}
								else
								{
									NoViableAltException nvae = new NoViableAltException("", 120, 11, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
								}
								break;
							case 164:
								{
								switch (input.LA(6))
								{
								case WS:
									{
									int LA120_14 = input.LA(7);

									if ((LA120_14==SIMPLE_FILE))
									{
										alt120 = 2;
									}
									else if ((LA120_14==160))
									{
										alt120 = 4;
									}
									else
									{
										NoViableAltException nvae = new NoViableAltException("", 120, 14, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
									}
									break;
								case SIMPLE_FILE:
									{
									alt120 = 2;
									}
									break;
								case 160:
									{
									alt120 = 4;
									}
									break;
								default:
									{
										NoViableAltException nvae = new NoViableAltException("", 120, 12, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

								}
								break;
							case 153:
							case 154:
							case 155:
							case 156:
							case 157:
							case 159:
							case 160:
							case 161:
							case 163:
							case 165:
							case 167:
							case 168:
							case 169:
							case 170:
							case 171:
							case 172:
							case 175:
							case 176:
								{
								alt120 = 2;
								}
								break;
							default:
								{
									NoViableAltException nvae = new NoViableAltException("", 120, 8, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}

							}
							break;
						case DISTINCT:
							{
							int LA120_9 = input.LA(5);

							if ((LA120_9==WS))
							{
								switch (input.LA(6))
								{
								case CASE:
								case CAST:
								case CONVERT:
								case COUNT:
								case EXISTS:
								case NOT:
								case NUMBER:
								case STRING:
								case SYSTEMVAR:
								case TOKEN:
								case VARIABLE:
								case 158:
									{
									alt120 = 3;
									}
									break;
								case SIMPLE_FILE:
									{
									switch (input.LA(7))
									{
									case WS:
										{
										int LA120_18 = input.LA(8);

										if ((LA120_18==164))
										{
											switch (input.LA(9))
											{
											case WS:
												{
												int LA120_20 = input.LA(10);

												if ((LA120_20==SIMPLE_FILE))
												{
													alt120 = 3;
												}
												else if ((LA120_20==160))
												{
													alt120 = 5;
												}
												else
												{
													NoViableAltException nvae = new NoViableAltException("", 120, 20, input);
													DebugRecognitionException(nvae);
													throw nvae;
												}
												}
												break;
											case SIMPLE_FILE:
												{
												alt120 = 3;
												}
												break;
											case 160:
												{
												alt120 = 5;
												}
												break;
											default:
												{
													NoViableAltException nvae = new NoViableAltException("", 120, 19, input);
													DebugRecognitionException(nvae);
													throw nvae;
												}
											}

										}
										else if ((LA120_18==AND||LA120_18==BETWEEN||LA120_18==IN||LA120_18==LIKE||LA120_18==MATCH||LA120_18==NOT||LA120_18==OR||(LA120_18>=153 && LA120_18<=157)||(LA120_18>=159 && LA120_18<=161)||LA120_18==163||LA120_18==165||(LA120_18>=167 && LA120_18<=172)||(LA120_18>=175 && LA120_18<=176)))
										{
											alt120 = 3;
										}
										else
										{
											NoViableAltException nvae = new NoViableAltException("", 120, 18, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
										}
										break;
									case 164:
										{
										switch (input.LA(8))
										{
										case WS:
											{
											int LA120_20 = input.LA(9);

											if ((LA120_20==SIMPLE_FILE))
											{
												alt120 = 3;
											}
											else if ((LA120_20==160))
											{
												alt120 = 5;
											}
											else
											{
												NoViableAltException nvae = new NoViableAltException("", 120, 20, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
											}
											break;
										case SIMPLE_FILE:
											{
											alt120 = 3;
											}
											break;
										case 160:
											{
											alt120 = 5;
											}
											break;
										default:
											{
												NoViableAltException nvae = new NoViableAltException("", 120, 19, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
										}

										}
										break;
									case 153:
									case 154:
									case 155:
									case 156:
									case 157:
									case 159:
									case 160:
									case 161:
									case 163:
									case 165:
									case 167:
									case 168:
									case 169:
									case 170:
									case 171:
									case 172:
									case 175:
									case 176:
										{
										alt120 = 3;
										}
										break;
									default:
										{
											NoViableAltException nvae = new NoViableAltException("", 120, 16, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}

									}
									break;
								case 160:
									{
									alt120 = 5;
									}
									break;
								default:
									{
										NoViableAltException nvae = new NoViableAltException("", 120, 13, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 120, 9, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case 160:
							{
							alt120 = 4;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 120, 6, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case CASE:
					case CAST:
					case CONVERT:
					case COUNT:
					case EXISTS:
					case NOT:
					case NUMBER:
					case STRING:
					case SYSTEMVAR:
					case TOKEN:
					case VARIABLE:
					case 158:
						{
						alt120 = 2;
						}
						break;
					case SIMPLE_FILE:
						{
						switch (input.LA(4))
						{
						case WS:
							{
							int LA120_11 = input.LA(5);

							if ((LA120_11==164))
							{
								switch (input.LA(6))
								{
								case WS:
									{
									int LA120_14 = input.LA(7);

									if ((LA120_14==SIMPLE_FILE))
									{
										alt120 = 2;
									}
									else if ((LA120_14==160))
									{
										alt120 = 4;
									}
									else
									{
										NoViableAltException nvae = new NoViableAltException("", 120, 14, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
									}
									break;
								case SIMPLE_FILE:
									{
									alt120 = 2;
									}
									break;
								case 160:
									{
									alt120 = 4;
									}
									break;
								default:
									{
										NoViableAltException nvae = new NoViableAltException("", 120, 12, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

							}
							else if ((LA120_11==AND||LA120_11==BETWEEN||LA120_11==IN||LA120_11==LIKE||LA120_11==MATCH||LA120_11==NOT||LA120_11==OR||(LA120_11>=153 && LA120_11<=157)||(LA120_11>=159 && LA120_11<=161)||LA120_11==163||LA120_11==165||(LA120_11>=167 && LA120_11<=172)||(LA120_11>=175 && LA120_11<=176)))
							{
								alt120 = 2;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 120, 11, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case 164:
							{
							switch (input.LA(5))
							{
							case WS:
								{
								int LA120_14 = input.LA(6);

								if ((LA120_14==SIMPLE_FILE))
								{
									alt120 = 2;
								}
								else if ((LA120_14==160))
								{
									alt120 = 4;
								}
								else
								{
									NoViableAltException nvae = new NoViableAltException("", 120, 14, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
								}
								break;
							case SIMPLE_FILE:
								{
								alt120 = 2;
								}
								break;
							case 160:
								{
								alt120 = 4;
								}
								break;
							default:
								{
									NoViableAltException nvae = new NoViableAltException("", 120, 12, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}

							}
							break;
						case 153:
						case 154:
						case 155:
						case 156:
						case 157:
						case 159:
						case 160:
						case 161:
						case 163:
						case 165:
						case 167:
						case 168:
						case 169:
						case 170:
						case 171:
						case 172:
						case 175:
						case 176:
							{
							alt120 = 2;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 120, 8, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case DISTINCT:
						{
						int LA120_9 = input.LA(4);

						if ((LA120_9==WS))
						{
							switch (input.LA(5))
							{
							case CASE:
							case CAST:
							case CONVERT:
							case COUNT:
							case EXISTS:
							case NOT:
							case NUMBER:
							case STRING:
							case SYSTEMVAR:
							case TOKEN:
							case VARIABLE:
							case 158:
								{
								alt120 = 3;
								}
								break;
							case SIMPLE_FILE:
								{
								switch (input.LA(6))
								{
								case WS:
									{
									int LA120_18 = input.LA(7);

									if ((LA120_18==164))
									{
										switch (input.LA(8))
										{
										case WS:
											{
											int LA120_20 = input.LA(9);

											if ((LA120_20==SIMPLE_FILE))
											{
												alt120 = 3;
											}
											else if ((LA120_20==160))
											{
												alt120 = 5;
											}
											else
											{
												NoViableAltException nvae = new NoViableAltException("", 120, 20, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
											}
											break;
										case SIMPLE_FILE:
											{
											alt120 = 3;
											}
											break;
										case 160:
											{
											alt120 = 5;
											}
											break;
										default:
											{
												NoViableAltException nvae = new NoViableAltException("", 120, 19, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
										}

									}
									else if ((LA120_18==AND||LA120_18==BETWEEN||LA120_18==IN||LA120_18==LIKE||LA120_18==MATCH||LA120_18==NOT||LA120_18==OR||(LA120_18>=153 && LA120_18<=157)||(LA120_18>=159 && LA120_18<=161)||LA120_18==163||LA120_18==165||(LA120_18>=167 && LA120_18<=172)||(LA120_18>=175 && LA120_18<=176)))
									{
										alt120 = 3;
									}
									else
									{
										NoViableAltException nvae = new NoViableAltException("", 120, 18, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
									}
									break;
								case 164:
									{
									switch (input.LA(7))
									{
									case WS:
										{
										int LA120_20 = input.LA(8);

										if ((LA120_20==SIMPLE_FILE))
										{
											alt120 = 3;
										}
										else if ((LA120_20==160))
										{
											alt120 = 5;
										}
										else
										{
											NoViableAltException nvae = new NoViableAltException("", 120, 20, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
										}
										break;
									case SIMPLE_FILE:
										{
										alt120 = 3;
										}
										break;
									case 160:
										{
										alt120 = 5;
										}
										break;
									default:
										{
											NoViableAltException nvae = new NoViableAltException("", 120, 19, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}

									}
									break;
								case 153:
								case 154:
								case 155:
								case 156:
								case 157:
								case 159:
								case 160:
								case 161:
								case 163:
								case 165:
								case 167:
								case 168:
								case 169:
								case 170:
								case 171:
								case 172:
								case 175:
								case 176:
									{
									alt120 = 3;
									}
									break;
								default:
									{
										NoViableAltException nvae = new NoViableAltException("", 120, 16, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

								}
								break;
							case 160:
								{
								alt120 = 5;
								}
								break;
							default:
								{
									NoViableAltException nvae = new NoViableAltException("", 120, 13, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}

						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 120, 9, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case 160:
						{
						alt120 = 4;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 120, 5, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 120, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SIMPLE_FILE:
				{
				alt120 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 120, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(120); }
			switch (alt120)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:406:4: TOKEN ( WS )? '(' ( WS )? ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )? ')'
				{
				DebugLocation(406, 4);
				TOKEN292=(IToken)Match(input,TOKEN,Follow._TOKEN_in_functioncall_or_column2479);  
				stream_TOKEN.Add(TOKEN292);

				DebugLocation(406, 10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:406:10: ( WS )?
				int alt98=2;
				try { DebugEnterSubRule(98);
				try { DebugEnterDecision(98, decisionCanBacktrack[98]);
				int LA98_0 = input.LA(1);

				if ((LA98_0==WS))
				{
					alt98 = 1;
				}
				} finally { DebugExitDecision(98); }
				switch (alt98)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:406:10: WS
					{
					DebugLocation(406, 10);
					WS293=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2481);  
					stream_WS.Add(WS293);


					}
					break;

				}
				} finally { DebugExitSubRule(98); }

				DebugLocation(406, 14);
				char_literal294=(IToken)Match(input,158,Follow._158_in_functioncall_or_column2484);  
				stream_158.Add(char_literal294);

				DebugLocation(406, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:406:18: ( WS )?
				int alt99=2;
				try { DebugEnterSubRule(99);
				try { DebugEnterDecision(99, decisionCanBacktrack[99]);
				int LA99_0 = input.LA(1);

				if ((LA99_0==WS))
				{
					alt99 = 1;
				}
				} finally { DebugExitDecision(99); }
				switch (alt99)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:406:18: WS
					{
					DebugLocation(406, 18);
					WS295=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2486);  
					stream_WS.Add(WS295);


					}
					break;

				}
				} finally { DebugExitSubRule(99); }

				DebugLocation(406, 22);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:406:22: ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )?
				int alt104=2;
				try { DebugEnterSubRule(104);
				try { DebugEnterDecision(104, decisionCanBacktrack[104]);
				int LA104_0 = input.LA(1);

				if (((LA104_0>=CASE && LA104_0<=CAST)||(LA104_0>=CONVERT && LA104_0<=COUNT)||LA104_0==EXISTS||(LA104_0>=NOT && LA104_0<=NUMBER)||LA104_0==SIMPLE_FILE||(LA104_0>=STRING && LA104_0<=SYSTEMVAR)||LA104_0==TOKEN||LA104_0==VARIABLE||LA104_0==158))
				{
					alt104 = 1;
				}
				} finally { DebugExitDecision(104); }
				switch (alt104)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:406:23: expression ( WS )? ( ',' ( WS )? expression ( WS )? )*
					{
					DebugLocation(406, 23);
					PushFollow(Follow._expression_in_functioncall_or_column2490);
					expression296=expression();
					PopFollow();

					stream_expression.Add(expression296.Tree);
					DebugLocation(406, 34);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:406:34: ( WS )?
					int alt100=2;
					try { DebugEnterSubRule(100);
					try { DebugEnterDecision(100, decisionCanBacktrack[100]);
					int LA100_0 = input.LA(1);

					if ((LA100_0==WS))
					{
						alt100 = 1;
					}
					} finally { DebugExitDecision(100); }
					switch (alt100)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:406:34: WS
						{
						DebugLocation(406, 34);
						WS297=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2492);  
						stream_WS.Add(WS297);


						}
						break;

					}
					} finally { DebugExitSubRule(100); }

					DebugLocation(406, 38);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:406:38: ( ',' ( WS )? expression ( WS )? )*
					try { DebugEnterSubRule(103);
					while (true)
					{
						int alt103=2;
						try { DebugEnterDecision(103, decisionCanBacktrack[103]);
						int LA103_0 = input.LA(1);

						if ((LA103_0==162))
						{
							alt103 = 1;
						}


						} finally { DebugExitDecision(103); }
						switch ( alt103 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:406:39: ',' ( WS )? expression ( WS )?
							{
							DebugLocation(406, 39);
							char_literal298=(IToken)Match(input,162,Follow._162_in_functioncall_or_column2496);  
							stream_162.Add(char_literal298);

							DebugLocation(406, 43);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:406:43: ( WS )?
							int alt101=2;
							try { DebugEnterSubRule(101);
							try { DebugEnterDecision(101, decisionCanBacktrack[101]);
							int LA101_0 = input.LA(1);

							if ((LA101_0==WS))
							{
								alt101 = 1;
							}
							} finally { DebugExitDecision(101); }
							switch (alt101)
							{
							case 1:
								DebugEnterAlt(1);
								// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:406:43: WS
								{
								DebugLocation(406, 43);
								WS299=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2498);  
								stream_WS.Add(WS299);


								}
								break;

							}
							} finally { DebugExitSubRule(101); }

							DebugLocation(406, 47);
							PushFollow(Follow._expression_in_functioncall_or_column2501);
							expression300=expression();
							PopFollow();

							stream_expression.Add(expression300.Tree);
							DebugLocation(406, 58);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:406:58: ( WS )?
							int alt102=2;
							try { DebugEnterSubRule(102);
							try { DebugEnterDecision(102, decisionCanBacktrack[102]);
							int LA102_0 = input.LA(1);

							if ((LA102_0==WS))
							{
								alt102 = 1;
							}
							} finally { DebugExitDecision(102); }
							switch (alt102)
							{
							case 1:
								DebugEnterAlt(1);
								// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:406:58: WS
								{
								DebugLocation(406, 58);
								WS301=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2503);  
								stream_WS.Add(WS301);


								}
								break;

							}
							} finally { DebugExitSubRule(102); }


							}
							break;

						default:
							goto loop103;
						}
					}

					loop103:
						;

					} finally { DebugExitSubRule(103); }


					}
					break;

				}
				} finally { DebugExitSubRule(104); }

				DebugLocation(406, 66);
				char_literal302=(IToken)Match(input,159,Follow._159_in_functioncall_or_column2510);  
				stream_159.Add(char_literal302);



				{
				// AST REWRITE
				// elements: TOKEN, expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 406:70: -> ^( T_FUNCTIONCALL TOKEN ( expression )* )
				{
					DebugLocation(406, 73);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:406:73: ^( T_FUNCTIONCALL TOKEN ( expression )* )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(406, 75);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(406, 90);
					adaptor.AddChild(root_1, stream_TOKEN.NextNode());
					DebugLocation(406, 96);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:406:96: ( expression )*
					while ( stream_expression.HasNext )
					{
						DebugLocation(406, 96);
						adaptor.AddChild(root_1, stream_expression.NextTree());

					}
					stream_expression.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:407:4: COUNT ( WS )? '(' ( WS )? expression ( WS )? ')'
				{
				DebugLocation(407, 4);
				COUNT303=(IToken)Match(input,COUNT,Follow._COUNT_in_functioncall_or_column2526);  
				stream_COUNT.Add(COUNT303);

				DebugLocation(407, 10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:407:10: ( WS )?
				int alt105=2;
				try { DebugEnterSubRule(105);
				try { DebugEnterDecision(105, decisionCanBacktrack[105]);
				int LA105_0 = input.LA(1);

				if ((LA105_0==WS))
				{
					alt105 = 1;
				}
				} finally { DebugExitDecision(105); }
				switch (alt105)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:407:10: WS
					{
					DebugLocation(407, 10);
					WS304=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2528);  
					stream_WS.Add(WS304);


					}
					break;

				}
				} finally { DebugExitSubRule(105); }

				DebugLocation(407, 14);
				char_literal305=(IToken)Match(input,158,Follow._158_in_functioncall_or_column2531);  
				stream_158.Add(char_literal305);

				DebugLocation(407, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:407:18: ( WS )?
				int alt106=2;
				try { DebugEnterSubRule(106);
				try { DebugEnterDecision(106, decisionCanBacktrack[106]);
				int LA106_0 = input.LA(1);

				if ((LA106_0==WS))
				{
					alt106 = 1;
				}
				} finally { DebugExitDecision(106); }
				switch (alt106)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:407:18: WS
					{
					DebugLocation(407, 18);
					WS306=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2533);  
					stream_WS.Add(WS306);


					}
					break;

				}
				} finally { DebugExitSubRule(106); }

				DebugLocation(407, 22);
				PushFollow(Follow._expression_in_functioncall_or_column2536);
				expression307=expression();
				PopFollow();

				stream_expression.Add(expression307.Tree);
				DebugLocation(407, 33);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:407:33: ( WS )?
				int alt107=2;
				try { DebugEnterSubRule(107);
				try { DebugEnterDecision(107, decisionCanBacktrack[107]);
				int LA107_0 = input.LA(1);

				if ((LA107_0==WS))
				{
					alt107 = 1;
				}
				} finally { DebugExitDecision(107); }
				switch (alt107)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:407:33: WS
					{
					DebugLocation(407, 33);
					WS308=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2538);  
					stream_WS.Add(WS308);


					}
					break;

				}
				} finally { DebugExitSubRule(107); }

				DebugLocation(407, 37);
				char_literal309=(IToken)Match(input,159,Follow._159_in_functioncall_or_column2541);  
				stream_159.Add(char_literal309);



				{
				// AST REWRITE
				// elements: expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 407:41: -> ^( T_FUNCTIONCALL T_COUNT expression )
				{
					DebugLocation(407, 44);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:407:44: ^( T_FUNCTIONCALL T_COUNT expression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(407, 46);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(407, 61);
					adaptor.AddChild(root_1, (object)adaptor.Create(T_COUNT, "T_COUNT"));
					DebugLocation(407, 69);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:408:4: COUNT ( WS )? '(' ( WS )? DISTINCT WS expression ( WS )? ')'
				{
				DebugLocation(408, 4);
				COUNT310=(IToken)Match(input,COUNT,Follow._COUNT_in_functioncall_or_column2556);  
				stream_COUNT.Add(COUNT310);

				DebugLocation(408, 10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:408:10: ( WS )?
				int alt108=2;
				try { DebugEnterSubRule(108);
				try { DebugEnterDecision(108, decisionCanBacktrack[108]);
				int LA108_0 = input.LA(1);

				if ((LA108_0==WS))
				{
					alt108 = 1;
				}
				} finally { DebugExitDecision(108); }
				switch (alt108)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:408:10: WS
					{
					DebugLocation(408, 10);
					WS311=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2558);  
					stream_WS.Add(WS311);


					}
					break;

				}
				} finally { DebugExitSubRule(108); }

				DebugLocation(408, 14);
				char_literal312=(IToken)Match(input,158,Follow._158_in_functioncall_or_column2561);  
				stream_158.Add(char_literal312);

				DebugLocation(408, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:408:18: ( WS )?
				int alt109=2;
				try { DebugEnterSubRule(109);
				try { DebugEnterDecision(109, decisionCanBacktrack[109]);
				int LA109_0 = input.LA(1);

				if ((LA109_0==WS))
				{
					alt109 = 1;
				}
				} finally { DebugExitDecision(109); }
				switch (alt109)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:408:18: WS
					{
					DebugLocation(408, 18);
					WS313=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2563);  
					stream_WS.Add(WS313);


					}
					break;

				}
				} finally { DebugExitSubRule(109); }

				DebugLocation(408, 22);
				DISTINCT314=(IToken)Match(input,DISTINCT,Follow._DISTINCT_in_functioncall_or_column2566);  
				stream_DISTINCT.Add(DISTINCT314);

				DebugLocation(408, 31);
				WS315=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2568);  
				stream_WS.Add(WS315);

				DebugLocation(408, 34);
				PushFollow(Follow._expression_in_functioncall_or_column2570);
				expression316=expression();
				PopFollow();

				stream_expression.Add(expression316.Tree);
				DebugLocation(408, 45);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:408:45: ( WS )?
				int alt110=2;
				try { DebugEnterSubRule(110);
				try { DebugEnterDecision(110, decisionCanBacktrack[110]);
				int LA110_0 = input.LA(1);

				if ((LA110_0==WS))
				{
					alt110 = 1;
				}
				} finally { DebugExitDecision(110); }
				switch (alt110)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:408:45: WS
					{
					DebugLocation(408, 45);
					WS317=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2572);  
					stream_WS.Add(WS317);


					}
					break;

				}
				} finally { DebugExitSubRule(110); }

				DebugLocation(408, 49);
				char_literal318=(IToken)Match(input,159,Follow._159_in_functioncall_or_column2575);  
				stream_159.Add(char_literal318);



				{
				// AST REWRITE
				// elements: expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 408:53: -> ^( T_FUNCTIONCALL T_DISTINCTCOUNT expression )
				{
					DebugLocation(408, 56);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:408:56: ^( T_FUNCTIONCALL T_DISTINCTCOUNT expression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(408, 58);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(408, 73);
					adaptor.AddChild(root_1, (object)adaptor.Create(T_DISTINCTCOUNT, "T_DISTINCTCOUNT"));
					DebugLocation(408, 89);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:409:4: COUNT ( WS )? '(' ( WS )? all_columns ( WS )? ')'
				{
				DebugLocation(409, 4);
				COUNT319=(IToken)Match(input,COUNT,Follow._COUNT_in_functioncall_or_column2590);  
				stream_COUNT.Add(COUNT319);

				DebugLocation(409, 10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:409:10: ( WS )?
				int alt111=2;
				try { DebugEnterSubRule(111);
				try { DebugEnterDecision(111, decisionCanBacktrack[111]);
				int LA111_0 = input.LA(1);

				if ((LA111_0==WS))
				{
					alt111 = 1;
				}
				} finally { DebugExitDecision(111); }
				switch (alt111)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:409:10: WS
					{
					DebugLocation(409, 10);
					WS320=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2592);  
					stream_WS.Add(WS320);


					}
					break;

				}
				} finally { DebugExitSubRule(111); }

				DebugLocation(409, 14);
				char_literal321=(IToken)Match(input,158,Follow._158_in_functioncall_or_column2595);  
				stream_158.Add(char_literal321);

				DebugLocation(409, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:409:18: ( WS )?
				int alt112=2;
				try { DebugEnterSubRule(112);
				try { DebugEnterDecision(112, decisionCanBacktrack[112]);
				int LA112_0 = input.LA(1);

				if ((LA112_0==WS))
				{
					alt112 = 1;
				}
				} finally { DebugExitDecision(112); }
				switch (alt112)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:409:18: WS
					{
					DebugLocation(409, 18);
					WS322=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2597);  
					stream_WS.Add(WS322);


					}
					break;

				}
				} finally { DebugExitSubRule(112); }

				DebugLocation(409, 22);
				PushFollow(Follow._all_columns_in_functioncall_or_column2600);
				all_columns323=all_columns();
				PopFollow();

				stream_all_columns.Add(all_columns323.Tree);
				DebugLocation(409, 34);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:409:34: ( WS )?
				int alt113=2;
				try { DebugEnterSubRule(113);
				try { DebugEnterDecision(113, decisionCanBacktrack[113]);
				int LA113_0 = input.LA(1);

				if ((LA113_0==WS))
				{
					alt113 = 1;
				}
				} finally { DebugExitDecision(113); }
				switch (alt113)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:409:34: WS
					{
					DebugLocation(409, 34);
					WS324=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2602);  
					stream_WS.Add(WS324);


					}
					break;

				}
				} finally { DebugExitSubRule(113); }

				DebugLocation(409, 38);
				char_literal325=(IToken)Match(input,159,Follow._159_in_functioncall_or_column2605);  
				stream_159.Add(char_literal325);



				{
				// AST REWRITE
				// elements: all_columns
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 409:42: -> ^( T_FUNCTIONCALL T_COUNT all_columns )
				{
					DebugLocation(409, 45);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:409:45: ^( T_FUNCTIONCALL T_COUNT all_columns )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(409, 47);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(409, 62);
					adaptor.AddChild(root_1, (object)adaptor.Create(T_COUNT, "T_COUNT"));
					DebugLocation(409, 70);
					adaptor.AddChild(root_1, stream_all_columns.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:410:4: COUNT ( WS )? '(' ( WS )? DISTINCT WS all_columns ( WS )? ')'
				{
				DebugLocation(410, 4);
				COUNT326=(IToken)Match(input,COUNT,Follow._COUNT_in_functioncall_or_column2620);  
				stream_COUNT.Add(COUNT326);

				DebugLocation(410, 10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:410:10: ( WS )?
				int alt114=2;
				try { DebugEnterSubRule(114);
				try { DebugEnterDecision(114, decisionCanBacktrack[114]);
				int LA114_0 = input.LA(1);

				if ((LA114_0==WS))
				{
					alt114 = 1;
				}
				} finally { DebugExitDecision(114); }
				switch (alt114)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:410:10: WS
					{
					DebugLocation(410, 10);
					WS327=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2622);  
					stream_WS.Add(WS327);


					}
					break;

				}
				} finally { DebugExitSubRule(114); }

				DebugLocation(410, 14);
				char_literal328=(IToken)Match(input,158,Follow._158_in_functioncall_or_column2625);  
				stream_158.Add(char_literal328);

				DebugLocation(410, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:410:18: ( WS )?
				int alt115=2;
				try { DebugEnterSubRule(115);
				try { DebugEnterDecision(115, decisionCanBacktrack[115]);
				int LA115_0 = input.LA(1);

				if ((LA115_0==WS))
				{
					alt115 = 1;
				}
				} finally { DebugExitDecision(115); }
				switch (alt115)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:410:18: WS
					{
					DebugLocation(410, 18);
					WS329=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2627);  
					stream_WS.Add(WS329);


					}
					break;

				}
				} finally { DebugExitSubRule(115); }

				DebugLocation(410, 22);
				DISTINCT330=(IToken)Match(input,DISTINCT,Follow._DISTINCT_in_functioncall_or_column2630);  
				stream_DISTINCT.Add(DISTINCT330);

				DebugLocation(410, 31);
				WS331=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2632);  
				stream_WS.Add(WS331);

				DebugLocation(410, 34);
				PushFollow(Follow._all_columns_in_functioncall_or_column2634);
				all_columns332=all_columns();
				PopFollow();

				stream_all_columns.Add(all_columns332.Tree);
				DebugLocation(410, 46);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:410:46: ( WS )?
				int alt116=2;
				try { DebugEnterSubRule(116);
				try { DebugEnterDecision(116, decisionCanBacktrack[116]);
				int LA116_0 = input.LA(1);

				if ((LA116_0==WS))
				{
					alt116 = 1;
				}
				} finally { DebugExitDecision(116); }
				switch (alt116)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:410:46: WS
					{
					DebugLocation(410, 46);
					WS333=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2636);  
					stream_WS.Add(WS333);


					}
					break;

				}
				} finally { DebugExitSubRule(116); }

				DebugLocation(410, 50);
				char_literal334=(IToken)Match(input,159,Follow._159_in_functioncall_or_column2639);  
				stream_159.Add(char_literal334);



				{
				// AST REWRITE
				// elements: all_columns
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 410:54: -> ^( T_FUNCTIONCALL T_DISTINCTCOUNT all_columns )
				{
					DebugLocation(410, 57);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:410:57: ^( T_FUNCTIONCALL T_DISTINCTCOUNT all_columns )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(410, 59);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(410, 74);
					adaptor.AddChild(root_1, (object)adaptor.Create(T_DISTINCTCOUNT, "T_DISTINCTCOUNT"));
					DebugLocation(410, 90);
					adaptor.AddChild(root_1, stream_all_columns.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:412:4: ( table_alias ( WS )? '.' ( WS )? )? column_name
				{
				DebugLocation(412, 4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:412:4: ( table_alias ( WS )? '.' ( WS )? )?
				int alt119=2;
				try { DebugEnterSubRule(119);
				try { DebugEnterDecision(119, decisionCanBacktrack[119]);
				int LA119_0 = input.LA(1);

				if ((LA119_0==SIMPLE_FILE))
				{
					int LA119_1 = input.LA(2);

					if ((LA119_1==WS))
					{
						int LA119_2 = input.LA(3);

						if ((LA119_2==164))
						{
							alt119 = 1;
						}
					}
					else if ((LA119_1==164))
					{
						alt119 = 1;
					}
				}
				} finally { DebugExitDecision(119); }
				switch (alt119)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:412:5: table_alias ( WS )? '.' ( WS )?
					{
					DebugLocation(412, 5);
					PushFollow(Follow._table_alias_in_functioncall_or_column2657);
					table_alias335=table_alias();
					PopFollow();

					stream_table_alias.Add(table_alias335.Tree);
					DebugLocation(412, 17);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:412:17: ( WS )?
					int alt117=2;
					try { DebugEnterSubRule(117);
					try { DebugEnterDecision(117, decisionCanBacktrack[117]);
					int LA117_0 = input.LA(1);

					if ((LA117_0==WS))
					{
						alt117 = 1;
					}
					} finally { DebugExitDecision(117); }
					switch (alt117)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:412:17: WS
						{
						DebugLocation(412, 17);
						WS336=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2659);  
						stream_WS.Add(WS336);


						}
						break;

					}
					} finally { DebugExitSubRule(117); }

					DebugLocation(412, 21);
					char_literal337=(IToken)Match(input,164,Follow._164_in_functioncall_or_column2662);  
					stream_164.Add(char_literal337);

					DebugLocation(412, 25);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:412:25: ( WS )?
					int alt118=2;
					try { DebugEnterSubRule(118);
					try { DebugEnterDecision(118, decisionCanBacktrack[118]);
					int LA118_0 = input.LA(1);

					if ((LA118_0==WS))
					{
						alt118 = 1;
					}
					} finally { DebugExitDecision(118); }
					switch (alt118)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:412:25: WS
						{
						DebugLocation(412, 25);
						WS338=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2664);  
						stream_WS.Add(WS338);


						}
						break;

					}
					} finally { DebugExitSubRule(118); }


					}
					break;

				}
				} finally { DebugExitSubRule(119); }

				DebugLocation(412, 31);
				PushFollow(Follow._column_name_in_functioncall_or_column2669);
				column_name339=column_name();
				PopFollow();

				stream_column_name.Add(column_name339.Tree);


				{
				// AST REWRITE
				// elements: table_alias, column_name
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 412:43: -> ^( T_COLUMN column_name ( table_alias )? )
				{
					DebugLocation(412, 46);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:412:46: ^( T_COLUMN column_name ( table_alias )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(412, 48);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_COLUMN, "T_COLUMN"), root_1);

					DebugLocation(412, 57);
					adaptor.AddChild(root_1, stream_column_name.NextTree());
					DebugLocation(412, 69);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:412:69: ( table_alias )?
					if (stream_table_alias.HasNext)
					{
						DebugLocation(412, 69);
						adaptor.AddChild(root_1, stream_table_alias.NextTree());

					}
					stream_table_alias.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("functioncall_or_column", 53);
			LeaveRule("functioncall_or_column", 53);
			LeaveRule_functioncall_or_column();
	    }
	 	DebugLocation(413, 1);
		} finally { DebugExitRule(GrammarFileName, "functioncall_or_column"); }
		return retval;

	}
	// $ANTLR end "functioncall_or_column"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_column_name() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_column_name() {}

	// $ANTLR start "column_name"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:415:1: column_name : SIMPLE_FILE ;
	[GrammarRule("column_name")]
	private AstParserRuleReturnScope<object, IToken> column_name()
	{
		EnterRule_column_name();
		EnterRule("column_name", 54);
		TraceIn("column_name", 54);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken SIMPLE_FILE340 = default(IToken);

	    object SIMPLE_FILE340_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "column_name");
		DebugLocation(415, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:416:2: ( SIMPLE_FILE )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:416:4: SIMPLE_FILE
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(416, 4);
			SIMPLE_FILE340=(IToken)Match(input,SIMPLE_FILE,Follow._SIMPLE_FILE_in_column_name2692); 
			SIMPLE_FILE340_tree = (object)adaptor.Create(SIMPLE_FILE340);
			adaptor.AddChild(root_0, SIMPLE_FILE340_tree);


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("column_name", 54);
			LeaveRule("column_name", 54);
			LeaveRule_column_name();
	    }
	 	DebugLocation(417, 1);
		} finally { DebugExitRule(GrammarFileName, "column_name"); }
		return retval;

	}
	// $ANTLR end "column_name"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_table_alias() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_table_alias() {}

	// $ANTLR start "table_alias"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:419:1: table_alias : SIMPLE_FILE -> ^( T_TABLE_ALIAS SIMPLE_FILE ) ;
	[GrammarRule("table_alias")]
	private AstParserRuleReturnScope<object, IToken> table_alias()
	{
		EnterRule_table_alias();
		EnterRule("table_alias", 55);
		TraceIn("table_alias", 55);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken SIMPLE_FILE341 = default(IToken);

	    object SIMPLE_FILE341_tree = default(object);
	    RewriteRuleITokenStream stream_SIMPLE_FILE=new RewriteRuleITokenStream(adaptor,"token SIMPLE_FILE");

		try { DebugEnterRule(GrammarFileName, "table_alias");
		DebugLocation(419, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:420:2: ( SIMPLE_FILE -> ^( T_TABLE_ALIAS SIMPLE_FILE ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:420:4: SIMPLE_FILE
			{
			DebugLocation(420, 4);
			SIMPLE_FILE341=(IToken)Match(input,SIMPLE_FILE,Follow._SIMPLE_FILE_in_table_alias2703);  
			stream_SIMPLE_FILE.Add(SIMPLE_FILE341);



			{
			// AST REWRITE
			// elements: SIMPLE_FILE
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 420:16: -> ^( T_TABLE_ALIAS SIMPLE_FILE )
			{
				DebugLocation(420, 19);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:420:19: ^( T_TABLE_ALIAS SIMPLE_FILE )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(420, 21);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_TABLE_ALIAS, "T_TABLE_ALIAS"), root_1);

				DebugLocation(420, 35);
				adaptor.AddChild(root_1, stream_SIMPLE_FILE.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("table_alias", 55);
			LeaveRule("table_alias", 55);
			LeaveRule_table_alias();
	    }
	 	DebugLocation(421, 1);
		} finally { DebugExitRule(GrammarFileName, "table_alias"); }
		return retval;

	}
	// $ANTLR end "table_alias"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_conversion() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_conversion() {}

	// $ANTLR start "conversion"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:423:1: conversion : ( CONVERT ( WS )? '(' ( WS )? TOKEN ( WS )? ',' ( WS )? expression ( WS )? ')' -> ^( T_CONVERT TOKEN expression ) | CAST ( WS )? '(' ( WS )? expression WS AS WS datatype ( WS )? ')' -> ^( T_CONVERT TOKEN expression ) );
	[GrammarRule("conversion")]
	private AstParserRuleReturnScope<object, IToken> conversion()
	{
		EnterRule_conversion();
		EnterRule("conversion", 56);
		TraceIn("conversion", 56);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken CONVERT342 = default(IToken);
	    IToken WS343 = default(IToken);
	    IToken char_literal344 = default(IToken);
	    IToken WS345 = default(IToken);
	    IToken TOKEN346 = default(IToken);
	    IToken WS347 = default(IToken);
	    IToken char_literal348 = default(IToken);
	    IToken WS349 = default(IToken);
	    IToken WS351 = default(IToken);
	    IToken char_literal352 = default(IToken);
	    IToken CAST353 = default(IToken);
	    IToken WS354 = default(IToken);
	    IToken char_literal355 = default(IToken);
	    IToken WS356 = default(IToken);
	    IToken WS358 = default(IToken);
	    IToken AS359 = default(IToken);
	    IToken WS360 = default(IToken);
	    IToken WS362 = default(IToken);
	    IToken char_literal363 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression350 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression357 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> datatype361 = default(AstParserRuleReturnScope<object, IToken>);

	    object CONVERT342_tree = default(object);
	    object WS343_tree = default(object);
	    object char_literal344_tree = default(object);
	    object WS345_tree = default(object);
	    object TOKEN346_tree = default(object);
	    object WS347_tree = default(object);
	    object char_literal348_tree = default(object);
	    object WS349_tree = default(object);
	    object WS351_tree = default(object);
	    object char_literal352_tree = default(object);
	    object CAST353_tree = default(object);
	    object WS354_tree = default(object);
	    object char_literal355_tree = default(object);
	    object WS356_tree = default(object);
	    object WS358_tree = default(object);
	    object AS359_tree = default(object);
	    object WS360_tree = default(object);
	    object WS362_tree = default(object);
	    object char_literal363_tree = default(object);
	    RewriteRuleITokenStream stream_CAST=new RewriteRuleITokenStream(adaptor,"token CAST");
	    RewriteRuleITokenStream stream_AS=new RewriteRuleITokenStream(adaptor,"token AS");
	    RewriteRuleITokenStream stream_162=new RewriteRuleITokenStream(adaptor,"token 162");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_CONVERT=new RewriteRuleITokenStream(adaptor,"token CONVERT");
	    RewriteRuleITokenStream stream_159=new RewriteRuleITokenStream(adaptor,"token 159");
	    RewriteRuleITokenStream stream_158=new RewriteRuleITokenStream(adaptor,"token 158");
	    RewriteRuleITokenStream stream_TOKEN=new RewriteRuleITokenStream(adaptor,"token TOKEN");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_datatype=new RewriteRuleSubtreeStream(adaptor,"rule datatype");
		try { DebugEnterRule(GrammarFileName, "conversion");
		DebugLocation(423, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:424:2: ( CONVERT ( WS )? '(' ( WS )? TOKEN ( WS )? ',' ( WS )? expression ( WS )? ')' -> ^( T_CONVERT TOKEN expression ) | CAST ( WS )? '(' ( WS )? expression WS AS WS datatype ( WS )? ')' -> ^( T_CONVERT TOKEN expression ) )
			int alt129=2;
			try { DebugEnterDecision(129, decisionCanBacktrack[129]);
			int LA129_0 = input.LA(1);

			if ((LA129_0==CONVERT))
			{
				alt129 = 1;
			}
			else if ((LA129_0==CAST))
			{
				alt129 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 129, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(129); }
			switch (alt129)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:424:4: CONVERT ( WS )? '(' ( WS )? TOKEN ( WS )? ',' ( WS )? expression ( WS )? ')'
				{
				DebugLocation(424, 4);
				CONVERT342=(IToken)Match(input,CONVERT,Follow._CONVERT_in_conversion2723);  
				stream_CONVERT.Add(CONVERT342);

				DebugLocation(424, 12);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:424:12: ( WS )?
				int alt121=2;
				try { DebugEnterSubRule(121);
				try { DebugEnterDecision(121, decisionCanBacktrack[121]);
				int LA121_0 = input.LA(1);

				if ((LA121_0==WS))
				{
					alt121 = 1;
				}
				} finally { DebugExitDecision(121); }
				switch (alt121)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:424:12: WS
					{
					DebugLocation(424, 12);
					WS343=(IToken)Match(input,WS,Follow._WS_in_conversion2725);  
					stream_WS.Add(WS343);


					}
					break;

				}
				} finally { DebugExitSubRule(121); }

				DebugLocation(424, 16);
				char_literal344=(IToken)Match(input,158,Follow._158_in_conversion2728);  
				stream_158.Add(char_literal344);

				DebugLocation(424, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:424:20: ( WS )?
				int alt122=2;
				try { DebugEnterSubRule(122);
				try { DebugEnterDecision(122, decisionCanBacktrack[122]);
				int LA122_0 = input.LA(1);

				if ((LA122_0==WS))
				{
					alt122 = 1;
				}
				} finally { DebugExitDecision(122); }
				switch (alt122)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:424:20: WS
					{
					DebugLocation(424, 20);
					WS345=(IToken)Match(input,WS,Follow._WS_in_conversion2730);  
					stream_WS.Add(WS345);


					}
					break;

				}
				} finally { DebugExitSubRule(122); }

				DebugLocation(424, 24);
				TOKEN346=(IToken)Match(input,TOKEN,Follow._TOKEN_in_conversion2733);  
				stream_TOKEN.Add(TOKEN346);

				DebugLocation(424, 30);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:424:30: ( WS )?
				int alt123=2;
				try { DebugEnterSubRule(123);
				try { DebugEnterDecision(123, decisionCanBacktrack[123]);
				int LA123_0 = input.LA(1);

				if ((LA123_0==WS))
				{
					alt123 = 1;
				}
				} finally { DebugExitDecision(123); }
				switch (alt123)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:424:30: WS
					{
					DebugLocation(424, 30);
					WS347=(IToken)Match(input,WS,Follow._WS_in_conversion2735);  
					stream_WS.Add(WS347);


					}
					break;

				}
				} finally { DebugExitSubRule(123); }

				DebugLocation(424, 34);
				char_literal348=(IToken)Match(input,162,Follow._162_in_conversion2738);  
				stream_162.Add(char_literal348);

				DebugLocation(424, 38);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:424:38: ( WS )?
				int alt124=2;
				try { DebugEnterSubRule(124);
				try { DebugEnterDecision(124, decisionCanBacktrack[124]);
				int LA124_0 = input.LA(1);

				if ((LA124_0==WS))
				{
					alt124 = 1;
				}
				} finally { DebugExitDecision(124); }
				switch (alt124)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:424:38: WS
					{
					DebugLocation(424, 38);
					WS349=(IToken)Match(input,WS,Follow._WS_in_conversion2740);  
					stream_WS.Add(WS349);


					}
					break;

				}
				} finally { DebugExitSubRule(124); }

				DebugLocation(424, 42);
				PushFollow(Follow._expression_in_conversion2743);
				expression350=expression();
				PopFollow();

				stream_expression.Add(expression350.Tree);
				DebugLocation(424, 53);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:424:53: ( WS )?
				int alt125=2;
				try { DebugEnterSubRule(125);
				try { DebugEnterDecision(125, decisionCanBacktrack[125]);
				int LA125_0 = input.LA(1);

				if ((LA125_0==WS))
				{
					alt125 = 1;
				}
				} finally { DebugExitDecision(125); }
				switch (alt125)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:424:53: WS
					{
					DebugLocation(424, 53);
					WS351=(IToken)Match(input,WS,Follow._WS_in_conversion2745);  
					stream_WS.Add(WS351);


					}
					break;

				}
				} finally { DebugExitSubRule(125); }

				DebugLocation(424, 57);
				char_literal352=(IToken)Match(input,159,Follow._159_in_conversion2748);  
				stream_159.Add(char_literal352);



				{
				// AST REWRITE
				// elements: TOKEN, expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 424:61: -> ^( T_CONVERT TOKEN expression )
				{
					DebugLocation(424, 64);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:424:64: ^( T_CONVERT TOKEN expression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(424, 66);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CONVERT, "T_CONVERT"), root_1);

					DebugLocation(424, 76);
					adaptor.AddChild(root_1, stream_TOKEN.NextNode());
					DebugLocation(424, 82);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:425:4: CAST ( WS )? '(' ( WS )? expression WS AS WS datatype ( WS )? ')'
				{
				DebugLocation(425, 4);
				CAST353=(IToken)Match(input,CAST,Follow._CAST_in_conversion2763);  
				stream_CAST.Add(CAST353);

				DebugLocation(425, 9);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:425:9: ( WS )?
				int alt126=2;
				try { DebugEnterSubRule(126);
				try { DebugEnterDecision(126, decisionCanBacktrack[126]);
				int LA126_0 = input.LA(1);

				if ((LA126_0==WS))
				{
					alt126 = 1;
				}
				} finally { DebugExitDecision(126); }
				switch (alt126)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:425:9: WS
					{
					DebugLocation(425, 9);
					WS354=(IToken)Match(input,WS,Follow._WS_in_conversion2765);  
					stream_WS.Add(WS354);


					}
					break;

				}
				} finally { DebugExitSubRule(126); }

				DebugLocation(425, 13);
				char_literal355=(IToken)Match(input,158,Follow._158_in_conversion2768);  
				stream_158.Add(char_literal355);

				DebugLocation(425, 17);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:425:17: ( WS )?
				int alt127=2;
				try { DebugEnterSubRule(127);
				try { DebugEnterDecision(127, decisionCanBacktrack[127]);
				int LA127_0 = input.LA(1);

				if ((LA127_0==WS))
				{
					alt127 = 1;
				}
				} finally { DebugExitDecision(127); }
				switch (alt127)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:425:17: WS
					{
					DebugLocation(425, 17);
					WS356=(IToken)Match(input,WS,Follow._WS_in_conversion2770);  
					stream_WS.Add(WS356);


					}
					break;

				}
				} finally { DebugExitSubRule(127); }

				DebugLocation(425, 21);
				PushFollow(Follow._expression_in_conversion2773);
				expression357=expression();
				PopFollow();

				stream_expression.Add(expression357.Tree);
				DebugLocation(425, 32);
				WS358=(IToken)Match(input,WS,Follow._WS_in_conversion2775);  
				stream_WS.Add(WS358);

				DebugLocation(425, 35);
				AS359=(IToken)Match(input,AS,Follow._AS_in_conversion2777);  
				stream_AS.Add(AS359);

				DebugLocation(425, 38);
				WS360=(IToken)Match(input,WS,Follow._WS_in_conversion2779);  
				stream_WS.Add(WS360);

				DebugLocation(425, 41);
				PushFollow(Follow._datatype_in_conversion2781);
				datatype361=datatype();
				PopFollow();

				stream_datatype.Add(datatype361.Tree);
				DebugLocation(425, 50);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:425:50: ( WS )?
				int alt128=2;
				try { DebugEnterSubRule(128);
				try { DebugEnterDecision(128, decisionCanBacktrack[128]);
				int LA128_0 = input.LA(1);

				if ((LA128_0==WS))
				{
					alt128 = 1;
				}
				} finally { DebugExitDecision(128); }
				switch (alt128)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:425:50: WS
					{
					DebugLocation(425, 50);
					WS362=(IToken)Match(input,WS,Follow._WS_in_conversion2783);  
					stream_WS.Add(WS362);


					}
					break;

				}
				} finally { DebugExitSubRule(128); }

				DebugLocation(425, 54);
				char_literal363=(IToken)Match(input,159,Follow._159_in_conversion2786);  
				stream_159.Add(char_literal363);



				{
				// AST REWRITE
				// elements: expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 425:58: -> ^( T_CONVERT TOKEN expression )
				{
					DebugLocation(425, 61);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:425:61: ^( T_CONVERT TOKEN expression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(425, 63);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CONVERT, "T_CONVERT"), root_1);

					DebugLocation(425, 73);
					adaptor.AddChild(root_1, (object)adaptor.Create(TOKEN, "TOKEN"));
					DebugLocation(425, 79);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conversion", 56);
			LeaveRule("conversion", 56);
			LeaveRule_conversion();
	    }
	 	DebugLocation(426, 1);
		} finally { DebugExitRule(GrammarFileName, "conversion"); }
		return retval;

	}
	// $ANTLR end "conversion"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_string() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_string() {}

	// $ANTLR start "string"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:428:1: string : STRING -> ^( T_STRING STRING ) ;
	[GrammarRule("string")]
	private AstParserRuleReturnScope<object, IToken> @string()
	{
		EnterRule_string();
		EnterRule("string", 57);
		TraceIn("string", 57);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken STRING364 = default(IToken);

	    object STRING364_tree = default(object);
	    RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");

		try { DebugEnterRule(GrammarFileName, "string");
		DebugLocation(428, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:428:8: ( STRING -> ^( T_STRING STRING ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:428:10: STRING
			{
			DebugLocation(428, 10);
			STRING364=(IToken)Match(input,STRING,Follow._STRING_in_string2806);  
			stream_STRING.Add(STRING364);



			{
			// AST REWRITE
			// elements: STRING
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 428:17: -> ^( T_STRING STRING )
			{
				DebugLocation(428, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:428:20: ^( T_STRING STRING )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(428, 22);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_STRING, "T_STRING"), root_1);

				DebugLocation(428, 31);
				adaptor.AddChild(root_1, stream_STRING.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("string", 57);
			LeaveRule("string", 57);
			LeaveRule_string();
	    }
	 	DebugLocation(429, 1);
		} finally { DebugExitRule(GrammarFileName, "string"); }
		return retval;

	}
	// $ANTLR end "string"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_datatype() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_datatype() {}

	// $ANTLR start "datatype"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:431:1: datatype : TOKEN ;
	[GrammarRule("datatype")]
	private AstParserRuleReturnScope<object, IToken> datatype()
	{
		EnterRule_datatype();
		EnterRule("datatype", 58);
		TraceIn("datatype", 58);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN365 = default(IToken);

	    object TOKEN365_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "datatype");
		DebugLocation(431, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:432:2: ( TOKEN )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:432:4: TOKEN
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(432, 4);
			TOKEN365=(IToken)Match(input,TOKEN,Follow._TOKEN_in_datatype2826); 
			TOKEN365_tree = (object)adaptor.Create(TOKEN365);
			adaptor.AddChild(root_0, TOKEN365_tree);


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("datatype", 58);
			LeaveRule("datatype", 58);
			LeaveRule_datatype();
	    }
	 	DebugLocation(433, 1);
		} finally { DebugExitRule(GrammarFileName, "datatype"); }
		return retval;

	}
	// $ANTLR end "datatype"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_variable() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_variable() {}

	// $ANTLR start "variable"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:435:1: variable : VARIABLE -> ^( T_VARIABLE VARIABLE ) ;
	[GrammarRule("variable")]
	private AstParserRuleReturnScope<object, IToken> variable()
	{
		EnterRule_variable();
		EnterRule("variable", 59);
		TraceIn("variable", 59);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken VARIABLE366 = default(IToken);

	    object VARIABLE366_tree = default(object);
	    RewriteRuleITokenStream stream_VARIABLE=new RewriteRuleITokenStream(adaptor,"token VARIABLE");

		try { DebugEnterRule(GrammarFileName, "variable");
		DebugLocation(435, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:436:2: ( VARIABLE -> ^( T_VARIABLE VARIABLE ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:436:4: VARIABLE
			{
			DebugLocation(436, 4);
			VARIABLE366=(IToken)Match(input,VARIABLE,Follow._VARIABLE_in_variable2838);  
			stream_VARIABLE.Add(VARIABLE366);



			{
			// AST REWRITE
			// elements: VARIABLE
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 436:13: -> ^( T_VARIABLE VARIABLE )
			{
				DebugLocation(436, 16);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:436:16: ^( T_VARIABLE VARIABLE )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(436, 18);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_VARIABLE, "T_VARIABLE"), root_1);

				DebugLocation(436, 29);
				adaptor.AddChild(root_1, stream_VARIABLE.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variable", 59);
			LeaveRule("variable", 59);
			LeaveRule_variable();
	    }
	 	DebugLocation(437, 1);
		} finally { DebugExitRule(GrammarFileName, "variable"); }
		return retval;

	}
	// $ANTLR end "variable"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_case() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_case() {}

	// $ANTLR start "case"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:439:1: case : CASE WS ( expression WS )? ( case_when WS )* ( case_else WS )? END -> ^( T_CASE ( expression )? ( case_when )* ( case_else )? ) ;
	[GrammarRule("case")]
	private AstParserRuleReturnScope<object, IToken> @case()
	{
		EnterRule_case();
		EnterRule("case", 60);
		TraceIn("case", 60);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken CASE367 = default(IToken);
	    IToken WS368 = default(IToken);
	    IToken WS370 = default(IToken);
	    IToken WS372 = default(IToken);
	    IToken WS374 = default(IToken);
	    IToken END375 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression369 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> case_when371 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> case_else373 = default(AstParserRuleReturnScope<object, IToken>);

	    object CASE367_tree = default(object);
	    object WS368_tree = default(object);
	    object WS370_tree = default(object);
	    object WS372_tree = default(object);
	    object WS374_tree = default(object);
	    object END375_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_END=new RewriteRuleITokenStream(adaptor,"token END");
	    RewriteRuleITokenStream stream_CASE=new RewriteRuleITokenStream(adaptor,"token CASE");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_case_when=new RewriteRuleSubtreeStream(adaptor,"rule case_when");
	    RewriteRuleSubtreeStream stream_case_else=new RewriteRuleSubtreeStream(adaptor,"rule case_else");
		try { DebugEnterRule(GrammarFileName, "case");
		DebugLocation(439, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:440:2: ( CASE WS ( expression WS )? ( case_when WS )* ( case_else WS )? END -> ^( T_CASE ( expression )? ( case_when )* ( case_else )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:440:4: CASE WS ( expression WS )? ( case_when WS )* ( case_else WS )? END
			{
			DebugLocation(440, 4);
			CASE367=(IToken)Match(input,CASE,Follow._CASE_in_case2858);  
			stream_CASE.Add(CASE367);

			DebugLocation(440, 9);
			WS368=(IToken)Match(input,WS,Follow._WS_in_case2860);  
			stream_WS.Add(WS368);

			DebugLocation(440, 12);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:440:12: ( expression WS )?
			int alt130=2;
			try { DebugEnterSubRule(130);
			try { DebugEnterDecision(130, decisionCanBacktrack[130]);
			int LA130_0 = input.LA(1);

			if (((LA130_0>=CASE && LA130_0<=CAST)||(LA130_0>=CONVERT && LA130_0<=COUNT)||LA130_0==EXISTS||(LA130_0>=NOT && LA130_0<=NUMBER)||LA130_0==SIMPLE_FILE||(LA130_0>=STRING && LA130_0<=SYSTEMVAR)||LA130_0==TOKEN||LA130_0==VARIABLE||LA130_0==158))
			{
				alt130 = 1;
			}
			} finally { DebugExitDecision(130); }
			switch (alt130)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:440:13: expression WS
				{
				DebugLocation(440, 13);
				PushFollow(Follow._expression_in_case2863);
				expression369=expression();
				PopFollow();

				stream_expression.Add(expression369.Tree);
				DebugLocation(440, 24);
				WS370=(IToken)Match(input,WS,Follow._WS_in_case2865);  
				stream_WS.Add(WS370);


				}
				break;

			}
			} finally { DebugExitSubRule(130); }

			DebugLocation(440, 29);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:440:29: ( case_when WS )*
			try { DebugEnterSubRule(131);
			while (true)
			{
				int alt131=2;
				try { DebugEnterDecision(131, decisionCanBacktrack[131]);
				int LA131_0 = input.LA(1);

				if ((LA131_0==WHEN))
				{
					alt131 = 1;
				}


				} finally { DebugExitDecision(131); }
				switch ( alt131 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:440:30: case_when WS
					{
					DebugLocation(440, 30);
					PushFollow(Follow._case_when_in_case2870);
					case_when371=case_when();
					PopFollow();

					stream_case_when.Add(case_when371.Tree);
					DebugLocation(440, 40);
					WS372=(IToken)Match(input,WS,Follow._WS_in_case2872);  
					stream_WS.Add(WS372);


					}
					break;

				default:
					goto loop131;
				}
			}

			loop131:
				;

			} finally { DebugExitSubRule(131); }

			DebugLocation(440, 45);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:440:45: ( case_else WS )?
			int alt132=2;
			try { DebugEnterSubRule(132);
			try { DebugEnterDecision(132, decisionCanBacktrack[132]);
			int LA132_0 = input.LA(1);

			if ((LA132_0==ELSE))
			{
				alt132 = 1;
			}
			} finally { DebugExitDecision(132); }
			switch (alt132)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:440:46: case_else WS
				{
				DebugLocation(440, 46);
				PushFollow(Follow._case_else_in_case2877);
				case_else373=case_else();
				PopFollow();

				stream_case_else.Add(case_else373.Tree);
				DebugLocation(440, 56);
				WS374=(IToken)Match(input,WS,Follow._WS_in_case2879);  
				stream_WS.Add(WS374);


				}
				break;

			}
			} finally { DebugExitSubRule(132); }

			DebugLocation(440, 61);
			END375=(IToken)Match(input,END,Follow._END_in_case2883);  
			stream_END.Add(END375);



			{
			// AST REWRITE
			// elements: case_when, case_else, expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 441:2: -> ^( T_CASE ( expression )? ( case_when )* ( case_else )? )
			{
				DebugLocation(441, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:441:5: ^( T_CASE ( expression )? ( case_when )* ( case_else )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(441, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CASE, "T_CASE"), root_1);

				DebugLocation(441, 14);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:441:14: ( expression )?
				if (stream_expression.HasNext)
				{
					DebugLocation(441, 14);
					adaptor.AddChild(root_1, stream_expression.NextTree());

				}
				stream_expression.Reset();
				DebugLocation(441, 26);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:441:26: ( case_when )*
				while ( stream_case_when.HasNext )
				{
					DebugLocation(441, 26);
					adaptor.AddChild(root_1, stream_case_when.NextTree());

				}
				stream_case_when.Reset();
				DebugLocation(441, 37);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:441:37: ( case_else )?
				if (stream_case_else.HasNext)
				{
					DebugLocation(441, 37);
					adaptor.AddChild(root_1, stream_case_else.NextTree());

				}
				stream_case_else.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("case", 60);
			LeaveRule("case", 60);
			LeaveRule_case();
	    }
	 	DebugLocation(442, 1);
		} finally { DebugExitRule(GrammarFileName, "case"); }
		return retval;

	}
	// $ANTLR end "case"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_case_when() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_case_when() {}

	// $ANTLR start "case_when"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:444:1: case_when : WHEN WS a= expression WS THEN WS b= expression -> ^( T_CASE_WHEN $a $b) ;
	[GrammarRule("case_when")]
	private AstParserRuleReturnScope<object, IToken> case_when()
	{
		EnterRule_case_when();
		EnterRule("case_when", 61);
		TraceIn("case_when", 61);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WHEN376 = default(IToken);
	    IToken WS377 = default(IToken);
	    IToken WS378 = default(IToken);
	    IToken THEN379 = default(IToken);
	    IToken WS380 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);

	    object WHEN376_tree = default(object);
	    object WS377_tree = default(object);
	    object WS378_tree = default(object);
	    object THEN379_tree = default(object);
	    object WS380_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_THEN=new RewriteRuleITokenStream(adaptor,"token THEN");
	    RewriteRuleITokenStream stream_WHEN=new RewriteRuleITokenStream(adaptor,"token WHEN");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "case_when");
		DebugLocation(444, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:445:2: ( WHEN WS a= expression WS THEN WS b= expression -> ^( T_CASE_WHEN $a $b) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:445:4: WHEN WS a= expression WS THEN WS b= expression
			{
			DebugLocation(445, 4);
			WHEN376=(IToken)Match(input,WHEN,Follow._WHEN_in_case_when2911);  
			stream_WHEN.Add(WHEN376);

			DebugLocation(445, 9);
			WS377=(IToken)Match(input,WS,Follow._WS_in_case_when2913);  
			stream_WS.Add(WS377);

			DebugLocation(445, 13);
			PushFollow(Follow._expression_in_case_when2917);
			a=expression();
			PopFollow();

			stream_expression.Add(a.Tree);
			DebugLocation(445, 25);
			WS378=(IToken)Match(input,WS,Follow._WS_in_case_when2919);  
			stream_WS.Add(WS378);

			DebugLocation(445, 28);
			THEN379=(IToken)Match(input,THEN,Follow._THEN_in_case_when2921);  
			stream_THEN.Add(THEN379);

			DebugLocation(445, 33);
			WS380=(IToken)Match(input,WS,Follow._WS_in_case_when2923);  
			stream_WS.Add(WS380);

			DebugLocation(445, 37);
			PushFollow(Follow._expression_in_case_when2927);
			b=expression();
			PopFollow();

			stream_expression.Add(b.Tree);


			{
			// AST REWRITE
			// elements: b, a
			// token labels: 
			// rule labels: retval, b, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 446:2: -> ^( T_CASE_WHEN $a $b)
			{
				DebugLocation(446, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:446:5: ^( T_CASE_WHEN $a $b)
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(446, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CASE_WHEN, "T_CASE_WHEN"), root_1);

				DebugLocation(446, 20);
				adaptor.AddChild(root_1, stream_a.NextTree());
				DebugLocation(446, 23);
				adaptor.AddChild(root_1, stream_b.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("case_when", 61);
			LeaveRule("case_when", 61);
			LeaveRule_case_when();
	    }
	 	DebugLocation(447, 1);
		} finally { DebugExitRule(GrammarFileName, "case_when"); }
		return retval;

	}
	// $ANTLR end "case_when"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_case_else() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_case_else() {}

	// $ANTLR start "case_else"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:449:1: case_else : ELSE WS expression -> ^( T_CASE_ELSE expression ) ;
	[GrammarRule("case_else")]
	private AstParserRuleReturnScope<object, IToken> case_else()
	{
		EnterRule_case_else();
		EnterRule("case_else", 62);
		TraceIn("case_else", 62);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken ELSE381 = default(IToken);
	    IToken WS382 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression383 = default(AstParserRuleReturnScope<object, IToken>);

	    object ELSE381_tree = default(object);
	    object WS382_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_ELSE=new RewriteRuleITokenStream(adaptor,"token ELSE");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "case_else");
		DebugLocation(449, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:450:2: ( ELSE WS expression -> ^( T_CASE_ELSE expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:450:4: ELSE WS expression
			{
			DebugLocation(450, 4);
			ELSE381=(IToken)Match(input,ELSE,Follow._ELSE_in_case_else2952);  
			stream_ELSE.Add(ELSE381);

			DebugLocation(450, 9);
			WS382=(IToken)Match(input,WS,Follow._WS_in_case_else2954);  
			stream_WS.Add(WS382);

			DebugLocation(450, 12);
			PushFollow(Follow._expression_in_case_else2956);
			expression383=expression();
			PopFollow();

			stream_expression.Add(expression383.Tree);


			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 451:2: -> ^( T_CASE_ELSE expression )
			{
				DebugLocation(451, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:451:5: ^( T_CASE_ELSE expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(451, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CASE_ELSE, "T_CASE_ELSE"), root_1);

				DebugLocation(451, 19);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("case_else", 62);
			LeaveRule("case_else", 62);
			LeaveRule_case_else();
	    }
	 	DebugLocation(452, 1);
		} finally { DebugExitRule(GrammarFileName, "case_else"); }
		return retval;

	}
	// $ANTLR end "case_else"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _WS_in_parse372 = new BitSet(new ulong[]{0x600000004500000UL,0x0UL,0x4000UL});
		public static readonly BitSet _commands_in_parse376 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _WS_in_parse378 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_parse383 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _command_in_commands406 = new BitSet(new ulong[]{0x600000004500002UL,0x0UL,0x4000204000UL});
		public static readonly BitSet _WS_in_commands409 = new BitSet(new ulong[]{0x600000004500000UL,0x0UL,0x4000004000UL});
		public static readonly BitSet _166_in_commands413 = new BitSet(new ulong[]{0x600000004500000UL,0x0UL,0x204000UL});
		public static readonly BitSet _WS_in_commands415 = new BitSet(new ulong[]{0x600000004500000UL,0x0UL,0x4000UL});
		public static readonly BitSet _command_in_commands420 = new BitSet(new ulong[]{0x600000004500002UL,0x0UL,0x4000204000UL});
		public static readonly BitSet _WS_in_commands425 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000000UL});
		public static readonly BitSet _166_in_commands428 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _select_command_in_command448 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _use_command_in_command453 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declare_command_in_command458 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_command_in_command463 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _create_view_command_in_command468 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _drop_view_command_in_command473 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _drop_table_command_in_command478 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SELECT_in_select_command492 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _WS_in_select_command495 = new BitSet(new ulong[]{0x2000020UL});
		public static readonly BitSet _distinct_clause_in_select_command497 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _WS_in_select_command502 = new BitSet(new ulong[]{0x0UL,0x8UL});
		public static readonly BitSet _top_clause_in_select_command504 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _WS_in_select_command508 = new BitSet(new ulong[]{0x68018000400CC000UL,0x4UL,0x140010000UL});
		public static readonly BitSet _column_list_in_select_command510 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200000UL});
		public static readonly BitSet _WS_in_select_command513 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _into_clause_in_select_command515 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200000UL});
		public static readonly BitSet _WS_in_select_command520 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _from_clause_in_select_command522 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200000UL});
		public static readonly BitSet _WS_in_select_command527 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000UL});
		public static readonly BitSet _where_clause_in_select_command529 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200000UL});
		public static readonly BitSet _WS_in_select_command534 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _groupby_clause_in_select_command536 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200000UL});
		public static readonly BitSet _WS_in_select_command541 = new BitSet(new ulong[]{0x1000000000UL});
		public static readonly BitSet _having_clause_in_select_command543 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200000UL});
		public static readonly BitSet _WS_in_select_command548 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _orderby_clause_in_select_command550 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DISTINCT_in_distinct_clause598 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ALL_in_distinct_clause607 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOP_in_top_clause623 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _WS_in_top_clause625 = new BitSet(new ulong[]{0x68018000400CC000UL,0x4UL,0x40010000UL});
		public static readonly BitSet _expression_in_top_clause627 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _column_in_column_list649 = new BitSet(new ulong[]{0x2UL,0x0UL,0x400200000UL});
		public static readonly BitSet _WS_in_column_list652 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000000UL});
		public static readonly BitSet _162_in_column_list655 = new BitSet(new ulong[]{0x68018000400CC000UL,0x4UL,0x140210000UL});
		public static readonly BitSet _WS_in_column_list657 = new BitSet(new ulong[]{0x68018000400CC000UL,0x4UL,0x140010000UL});
		public static readonly BitSet _column_in_column_list660 = new BitSet(new ulong[]{0x2UL,0x0UL,0x400200000UL});
		public static readonly BitSet _all_columns_in_column684 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_column689 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200000UL});
		public static readonly BitSet _WS_in_column692 = new BitSet(new ulong[]{0x800000000000000UL});
		public static readonly BitSet _SIMPLE_FILE_in_column694 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _table_alias_in_all_columns719 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000200000UL});
		public static readonly BitSet _WS_in_all_columns721 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000UL});
		public static readonly BitSet _164_in_all_columns724 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100200000UL});
		public static readonly BitSet _WS_in_all_columns726 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000UL});
		public static readonly BitSet _160_in_all_columns731 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INTO_in_into_clause751 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _WS_in_into_clause753 = new BitSet(new ulong[]{0x800000000000000UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _file_in_into_clause755 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FROM_in_from_clause775 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _WS_in_from_clause777 = new BitSet(new ulong[]{0x2800000000000000UL,0x4UL,0x200040000000UL});
		public static readonly BitSet _from_clause_item_in_from_clause779 = new BitSet(new ulong[]{0x2UL,0x0UL,0x400200000UL});
		public static readonly BitSet _WS_in_from_clause782 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000000UL});
		public static readonly BitSet _162_in_from_clause785 = new BitSet(new ulong[]{0x2800000000000000UL,0x4UL,0x200040200000UL});
		public static readonly BitSet _WS_in_from_clause787 = new BitSet(new ulong[]{0x2800000000000000UL,0x4UL,0x200040000000UL});
		public static readonly BitSet _from_clause_item_in_from_clause790 = new BitSet(new ulong[]{0x2UL,0x0UL,0x400200000UL});
		public static readonly BitSet _WS_in_from_clause795 = new BitSet(new ulong[]{0x800000000000000UL});
		public static readonly BitSet _table_alias_in_from_clause797 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_from_clause_item824 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _file_in_from_clause_item837 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _subquery_in_from_clause_item842 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _view_name_in_from_clause_item847 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _158_in_subquery859 = new BitSet(new ulong[]{0x200000000000000UL,0x0UL,0x200000UL});
		public static readonly BitSet _WS_in_subquery861 = new BitSet(new ulong[]{0x200000000000000UL});
		public static readonly BitSet _select_command_in_subquery864 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80200000UL});
		public static readonly BitSet _WS_in_subquery866 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _159_in_subquery869 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _173_in_file888 = new BitSet(new ulong[]{0x2000000000000000UL,0x0UL,0x210000UL});
		public static readonly BitSet _WS_in_file890 = new BitSet(new ulong[]{0x2000000000000000UL,0x0UL,0x10000UL});
		public static readonly BitSet _file_spec_in_file893 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000200000UL});
		public static readonly BitSet _WS_in_file896 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _file_option_in_file898 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000200000UL});
		public static readonly BitSet _WS_in_file902 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000000000UL});
		public static readonly BitSet _174_in_file905 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SIMPLE_FILE_in_file922 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _string_in_file_spec941 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_in_file_spec946 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _163_in_file_option958 = new BitSet(new ulong[]{0x0UL,0x4UL});
		public static readonly BitSet _file_option_name_in_file_option960 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40000200000UL});
		public static readonly BitSet _WS_in_file_option964 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _170_in_file_option967 = new BitSet(new ulong[]{0x2001000000000000UL,0x4UL,0x210000UL});
		public static readonly BitSet _WS_in_file_option969 = new BitSet(new ulong[]{0x2001000000000000UL,0x4UL,0x10000UL});
		public static readonly BitSet _file_option_value_in_file_option972 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_file_option_name996 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_file_option_value1008 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_file_option_value1012 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_file_option_value1016 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_in_file_option_value1020 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHERE_in_where_clause1032 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _WS_in_where_clause1034 = new BitSet(new ulong[]{0x68018000400CC000UL,0x4UL,0x40010000UL});
		public static readonly BitSet _expression_in_where_clause1036 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GROUP_in_groupby_clause1055 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _WS_in_groupby_clause1057 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _BY_in_groupby_clause1059 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _WS_in_groupby_clause1061 = new BitSet(new ulong[]{0x68018000400CC000UL,0x4UL,0x40010000UL});
		public static readonly BitSet _orderby_column_list_in_groupby_clause1063 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _HAVING_in_having_clause1084 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _WS_in_having_clause1086 = new BitSet(new ulong[]{0x68018000400CC000UL,0x4UL,0x40010000UL});
		public static readonly BitSet _expression_in_having_clause1088 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ORDER_in_orderby_clause1109 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _WS_in_orderby_clause1111 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _BY_in_orderby_clause1113 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _WS_in_orderby_clause1115 = new BitSet(new ulong[]{0x68018000400CC000UL,0x4UL,0x40010000UL});
		public static readonly BitSet _orderby_column_list_in_orderby_clause1117 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _orderby_column_in_orderby_column_list1138 = new BitSet(new ulong[]{0x2UL,0x0UL,0x400200000UL});
		public static readonly BitSet _WS_in_orderby_column_list1141 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000000UL});
		public static readonly BitSet _162_in_orderby_column_list1144 = new BitSet(new ulong[]{0x68018000400CC000UL,0x4UL,0x40210000UL});
		public static readonly BitSet _WS_in_orderby_column_list1146 = new BitSet(new ulong[]{0x68018000400CC000UL,0x4UL,0x40010000UL});
		public static readonly BitSet _orderby_column_in_orderby_column_list1149 = new BitSet(new ulong[]{0x2UL,0x0UL,0x400200000UL});
		public static readonly BitSet _expression_in_orderby_column1169 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200000UL});
		public static readonly BitSet _WS_in_orderby_column1172 = new BitSet(new ulong[]{0x10000000800200UL});
		public static readonly BitSet _orderby_direction_in_orderby_column1174 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASC_in_orderby_direction1199 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DESC_in_orderby_direction1208 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ORIG_in_orderby_direction1217 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _USE_in_use_command1235 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _WS_in_use_command1237 = new BitSet(new ulong[]{0x800000000000000UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _file_in_use_command1239 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DECLARE_in_declare_command1261 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _WS_in_declare_command1263 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _declaration_list_in_declare_command1265 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_in_declaration_list1282 = new BitSet(new ulong[]{0x2UL,0x0UL,0x400200000UL});
		public static readonly BitSet _WS_in_declaration_list1285 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000000UL});
		public static readonly BitSet _162_in_declaration_list1288 = new BitSet(new ulong[]{0x0UL,0x0UL,0x210000UL});
		public static readonly BitSet _WS_in_declaration_list1290 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _declaration_in_declaration_list1293 = new BitSet(new ulong[]{0x2UL,0x0UL,0x400200000UL});
		public static readonly BitSet _variable_in_declaration1317 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _WS_in_declaration1319 = new BitSet(new ulong[]{0x100UL,0x4UL});
		public static readonly BitSet _AS_in_declaration1322 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _WS_in_declaration1324 = new BitSet(new ulong[]{0x0UL,0x4UL});
		public static readonly BitSet _datatype_in_declaration1328 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CREATE_in_create_view_command1353 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _WS_in_create_view_command1355 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20000UL});
		public static readonly BitSet _VIEW_in_create_view_command1357 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _WS_in_create_view_command1359 = new BitSet(new ulong[]{0x0UL,0x4UL});
		public static readonly BitSet _view_name_in_create_view_command1361 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40200000UL});
		public static readonly BitSet _WS_in_create_view_command1364 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _158_in_create_view_command1367 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _declaration_list_in_create_view_command1369 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _159_in_create_view_command1371 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _WS_in_create_view_command1375 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _AS_in_create_view_command1377 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _WS_in_create_view_command1379 = new BitSet(new ulong[]{0x200000000000000UL});
		public static readonly BitSet _select_command_in_create_view_command1381 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DROP_in_drop_view_command1407 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _WS_in_drop_view_command1409 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20000UL});
		public static readonly BitSet _VIEW_in_drop_view_command1411 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _WS_in_drop_view_command1413 = new BitSet(new ulong[]{0x0UL,0x4UL});
		public static readonly BitSet _view_name_in_drop_view_command1415 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_view_name1435 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DROP_in_drop_table_command1457 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _WS_in_drop_table_command1459 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _TABLE_in_drop_table_command1461 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _WS_in_drop_table_command1463 = new BitSet(new ulong[]{0x800000000000000UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _file_in_drop_table_command1465 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SET_in_set_command1489 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _WS_in_set_command1491 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _variable_in_set_command1493 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000200000UL});
		public static readonly BitSet _WS_in_set_command1495 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _170_in_set_command1498 = new BitSet(new ulong[]{0x68018000400CC000UL,0x4UL,0x40210000UL});
		public static readonly BitSet _WS_in_set_command1500 = new BitSet(new ulong[]{0x68018000400CC000UL,0x4UL,0x40010000UL});
		public static readonly BitSet _expression_in_set_command1503 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_expression_list1528 = new BitSet(new ulong[]{0x2UL,0x0UL,0x400200000UL});
		public static readonly BitSet _WS_in_expression_list1531 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000000UL});
		public static readonly BitSet _162_in_expression_list1534 = new BitSet(new ulong[]{0x68018000400CC000UL,0x4UL,0x40210000UL});
		public static readonly BitSet _WS_in_expression_list1536 = new BitSet(new ulong[]{0x68018000400CC000UL,0x4UL,0x40010000UL});
		public static readonly BitSet _expression_in_expression_list1539 = new BitSet(new ulong[]{0x2UL,0x0UL,0x400200000UL});
		public static readonly BitSet _expression_list_in_expression_list_or_select_command1562 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _select_command_in_expression_list_or_select_command1566 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_7_in_expression1578 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_6_in_expression_71594 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200000UL});
		public static readonly BitSet _WS_in_expression_71601 = new BitSet(new ulong[]{0x4A84000000800UL,0x0UL,0x1F800E000000UL});
		public static readonly BitSet _op_7_in_expression_71606 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _WS_in_expression_71608 = new BitSet(new ulong[]{0x68018000400CC000UL,0x4UL,0x40010000UL});
		public static readonly BitSet _expression_6_in_expression_71612 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200000UL});
		public static readonly BitSet _IN_in_expression_71631 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40200000UL});
		public static readonly BitSet _WS_in_expression_71633 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _158_in_expression_71636 = new BitSet(new ulong[]{0x6A018000400CC000UL,0x4UL,0x40210000UL});
		public static readonly BitSet _WS_in_expression_71638 = new BitSet(new ulong[]{0x6A018000400CC000UL,0x4UL,0x40010000UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_71641 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80200000UL});
		public static readonly BitSet _WS_in_expression_71643 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _159_in_expression_71646 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200000UL});
		public static readonly BitSet _NOT_in_expression_71664 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _WS_in_expression_71666 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _IN_in_expression_71668 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40200000UL});
		public static readonly BitSet _WS_in_expression_71670 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _158_in_expression_71673 = new BitSet(new ulong[]{0x6A018000400CC000UL,0x4UL,0x40210000UL});
		public static readonly BitSet _WS_in_expression_71675 = new BitSet(new ulong[]{0x6A018000400CC000UL,0x4UL,0x40010000UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_71679 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80200000UL});
		public static readonly BitSet _WS_in_expression_71682 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _159_in_expression_71685 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200000UL});
		public static readonly BitSet _op_4_in_expression_71703 = new BitSet(new ulong[]{0x1000000000000080UL,0x0UL,0x200000UL});
		public static readonly BitSet _WS_in_expression_71705 = new BitSet(new ulong[]{0x1000000000000080UL});
		public static readonly BitSet _SOME_in_expression_71709 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40200000UL});
		public static readonly BitSet _ANY_in_expression_71713 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40200000UL});
		public static readonly BitSet _WS_in_expression_71716 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _158_in_expression_71719 = new BitSet(new ulong[]{0x6A018000400CC000UL,0x4UL,0x40010000UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_71721 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _159_in_expression_71723 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200000UL});
		public static readonly BitSet _op_4_in_expression_71743 = new BitSet(new ulong[]{0x20UL,0x0UL,0x200000UL});
		public static readonly BitSet _WS_in_expression_71745 = new BitSet(new ulong[]{0x20UL});
		public static readonly BitSet _ALL_in_expression_71748 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40200000UL});
		public static readonly BitSet _WS_in_expression_71750 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _158_in_expression_71753 = new BitSet(new ulong[]{0x6A018000400CC000UL,0x4UL,0x40010000UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_71755 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _159_in_expression_71757 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200000UL});
		public static readonly BitSet _OR_in_op_71787 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LIKE_in_op_71796 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_71805 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _WS_in_op_71807 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _LIKE_in_op_71809 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MATCH_in_op_71818 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_71827 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _WS_in_op_71829 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _MATCH_in_op_71831 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BETWEEN_in_op_71840 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_71849 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _WS_in_op_71851 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _BETWEEN_in_op_71853 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_5_in_expression_61872 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200000UL});
		public static readonly BitSet _WS_in_expression_61879 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _op_6_in_expression_61881 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _WS_in_expression_61883 = new BitSet(new ulong[]{0x68018000400CC000UL,0x4UL,0x40010000UL});
		public static readonly BitSet _expression_5_in_expression_61887 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200000UL});
		public static readonly BitSet _AND_in_op_61915 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _op_5_in_expression_51933 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _WS_in_expression_51935 = new BitSet(new ulong[]{0x68018000400CC000UL,0x4UL,0x40010000UL});
		public static readonly BitSet _expression_5_in_expression_51937 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_4_in_expression_51952 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_51963 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_3_in_expression_41982 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1F800E200000UL});
		public static readonly BitSet _WS_in_expression_41989 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1F800E000000UL});
		public static readonly BitSet _op_4_in_expression_41992 = new BitSet(new ulong[]{0x68010000400CC000UL,0x4UL,0x40210000UL});
		public static readonly BitSet _WS_in_expression_41994 = new BitSet(new ulong[]{0x68010000400CC000UL,0x4UL,0x40010000UL});
		public static readonly BitSet _expression_3_in_expression_41999 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1F800E200000UL});
		public static readonly BitSet _170_in_op_42025 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _172_in_op_42034 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _168_in_op_42044 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _169_in_op_42054 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _154_in_op_42063 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _155_in_op_42072 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _153_in_op_42081 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _171_in_op_42090 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _167_in_op_42100 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_2_in_expression_32119 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1800A20200000UL});
		public static readonly BitSet _WS_in_expression_32126 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1800A20000000UL});
		public static readonly BitSet _op_3_in_expression_32129 = new BitSet(new ulong[]{0x68010000400CC000UL,0x4UL,0x40210000UL});
		public static readonly BitSet _WS_in_expression_32131 = new BitSet(new ulong[]{0x68010000400CC000UL,0x4UL,0x40010000UL});
		public static readonly BitSet _expression_2_in_expression_32136 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1800A20200000UL});
		public static readonly BitSet _161_in_op_32162 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _163_in_op_32171 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _157_in_op_32180 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _176_in_op_32189 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _175_in_op_32198 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_1_in_expression_22220 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2110200000UL});
		public static readonly BitSet _WS_in_expression_22227 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2110000000UL});
		public static readonly BitSet _op_2_in_expression_22230 = new BitSet(new ulong[]{0x68010000400CC000UL,0x4UL,0x40210000UL});
		public static readonly BitSet _WS_in_expression_22232 = new BitSet(new ulong[]{0x68010000400CC000UL,0x4UL,0x40010000UL});
		public static readonly BitSet _expression_1_in_expression_22237 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2110200000UL});
		public static readonly BitSet _160_in_op_22263 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _165_in_op_22272 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _156_in_op_22281 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _158_in_expression_12299 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000A00200000UL});
		public static readonly BitSet _WS_in_expression_12301 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000A00000000UL});
		public static readonly BitSet _op_1_in_expression_12304 = new BitSet(new ulong[]{0x68010000400CC000UL,0x4UL,0x40210000UL});
		public static readonly BitSet _WS_in_expression_12306 = new BitSet(new ulong[]{0x68010000400CC000UL,0x4UL,0x40010000UL});
		public static readonly BitSet _expression_1_in_expression_12309 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80200000UL});
		public static readonly BitSet _WS_in_expression_12311 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _159_in_expression_12314 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_atom_in_expression_12331 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _177_in_op_12341 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _161_in_op_12351 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _163_in_op_12360 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_expression_atom2375 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _string_in_expression_atom2388 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SYSTEMVAR_in_expression_atom2393 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_in_expression_atom2406 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _subquery_in_expression_atom2411 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _158_in_expression_atom2416 = new BitSet(new ulong[]{0x68018000400CC000UL,0x4UL,0x40010000UL});
		public static readonly BitSet _expression_in_expression_atom2418 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _159_in_expression_atom2420 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functioncall_or_column_in_expression_atom2429 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conversion_in_expression_atom2434 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _case_in_expression_atom2439 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXISTS_in_expression_atom2444 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40200000UL});
		public static readonly BitSet _WS_in_expression_atom2446 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _158_in_expression_atom2449 = new BitSet(new ulong[]{0x200000000000000UL,0x0UL,0x200000UL});
		public static readonly BitSet _WS_in_expression_atom2451 = new BitSet(new ulong[]{0x200000000000000UL});
		public static readonly BitSet _select_command_in_expression_atom2454 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80200000UL});
		public static readonly BitSet _WS_in_expression_atom2456 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _159_in_expression_atom2459 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_functioncall_or_column2479 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40200000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2481 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _158_in_functioncall_or_column2484 = new BitSet(new ulong[]{0x68018000400CC000UL,0x4UL,0xC0210000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2486 = new BitSet(new ulong[]{0x68018000400CC000UL,0x4UL,0xC0010000UL});
		public static readonly BitSet _expression_in_functioncall_or_column2490 = new BitSet(new ulong[]{0x0UL,0x0UL,0x480200000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2492 = new BitSet(new ulong[]{0x0UL,0x0UL,0x480000000UL});
		public static readonly BitSet _162_in_functioncall_or_column2496 = new BitSet(new ulong[]{0x68018000400CC000UL,0x4UL,0x40210000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2498 = new BitSet(new ulong[]{0x68018000400CC000UL,0x4UL,0x40010000UL});
		public static readonly BitSet _expression_in_functioncall_or_column2501 = new BitSet(new ulong[]{0x0UL,0x0UL,0x480200000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2503 = new BitSet(new ulong[]{0x0UL,0x0UL,0x480000000UL});
		public static readonly BitSet _159_in_functioncall_or_column2510 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COUNT_in_functioncall_or_column2526 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40200000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2528 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _158_in_functioncall_or_column2531 = new BitSet(new ulong[]{0x68018000400CC000UL,0x4UL,0x40210000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2533 = new BitSet(new ulong[]{0x68018000400CC000UL,0x4UL,0x40010000UL});
		public static readonly BitSet _expression_in_functioncall_or_column2536 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80200000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2538 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _159_in_functioncall_or_column2541 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COUNT_in_functioncall_or_column2556 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40200000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2558 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _158_in_functioncall_or_column2561 = new BitSet(new ulong[]{0x2000000UL,0x0UL,0x200000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2563 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _DISTINCT_in_functioncall_or_column2566 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2568 = new BitSet(new ulong[]{0x68018000400CC000UL,0x4UL,0x40010000UL});
		public static readonly BitSet _expression_in_functioncall_or_column2570 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80200000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2572 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _159_in_functioncall_or_column2575 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COUNT_in_functioncall_or_column2590 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40200000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2592 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _158_in_functioncall_or_column2595 = new BitSet(new ulong[]{0x800000000000000UL,0x0UL,0x100200000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2597 = new BitSet(new ulong[]{0x800000000000000UL,0x0UL,0x100000000UL});
		public static readonly BitSet _all_columns_in_functioncall_or_column2600 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80200000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2602 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _159_in_functioncall_or_column2605 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COUNT_in_functioncall_or_column2620 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40200000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2622 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _158_in_functioncall_or_column2625 = new BitSet(new ulong[]{0x2000000UL,0x0UL,0x200000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2627 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _DISTINCT_in_functioncall_or_column2630 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2632 = new BitSet(new ulong[]{0x800000000000000UL,0x0UL,0x100000000UL});
		public static readonly BitSet _all_columns_in_functioncall_or_column2634 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80200000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2636 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _159_in_functioncall_or_column2639 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _table_alias_in_functioncall_or_column2657 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000200000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2659 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000UL});
		public static readonly BitSet _164_in_functioncall_or_column2662 = new BitSet(new ulong[]{0x800000000000000UL,0x0UL,0x200000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2664 = new BitSet(new ulong[]{0x800000000000000UL});
		public static readonly BitSet _column_name_in_functioncall_or_column2669 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SIMPLE_FILE_in_column_name2692 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SIMPLE_FILE_in_table_alias2703 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CONVERT_in_conversion2723 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40200000UL});
		public static readonly BitSet _WS_in_conversion2725 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _158_in_conversion2728 = new BitSet(new ulong[]{0x0UL,0x4UL,0x200000UL});
		public static readonly BitSet _WS_in_conversion2730 = new BitSet(new ulong[]{0x0UL,0x4UL});
		public static readonly BitSet _TOKEN_in_conversion2733 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400200000UL});
		public static readonly BitSet _WS_in_conversion2735 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000000UL});
		public static readonly BitSet _162_in_conversion2738 = new BitSet(new ulong[]{0x68018000400CC000UL,0x4UL,0x40210000UL});
		public static readonly BitSet _WS_in_conversion2740 = new BitSet(new ulong[]{0x68018000400CC000UL,0x4UL,0x40010000UL});
		public static readonly BitSet _expression_in_conversion2743 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80200000UL});
		public static readonly BitSet _WS_in_conversion2745 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _159_in_conversion2748 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CAST_in_conversion2763 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40200000UL});
		public static readonly BitSet _WS_in_conversion2765 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _158_in_conversion2768 = new BitSet(new ulong[]{0x68018000400CC000UL,0x4UL,0x40210000UL});
		public static readonly BitSet _WS_in_conversion2770 = new BitSet(new ulong[]{0x68018000400CC000UL,0x4UL,0x40010000UL});
		public static readonly BitSet _expression_in_conversion2773 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _WS_in_conversion2775 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _AS_in_conversion2777 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _WS_in_conversion2779 = new BitSet(new ulong[]{0x0UL,0x4UL});
		public static readonly BitSet _datatype_in_conversion2781 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80200000UL});
		public static readonly BitSet _WS_in_conversion2783 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _159_in_conversion2786 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_string2806 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_datatype2826 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VARIABLE_in_variable2838 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CASE_in_case2858 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _WS_in_case2860 = new BitSet(new ulong[]{0x68018000700CC000UL,0x4UL,0x40090000UL});
		public static readonly BitSet _expression_in_case2863 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _WS_in_case2865 = new BitSet(new ulong[]{0x30000000UL,0x0UL,0x80000UL});
		public static readonly BitSet _case_when_in_case2870 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _WS_in_case2872 = new BitSet(new ulong[]{0x30000000UL,0x0UL,0x80000UL});
		public static readonly BitSet _case_else_in_case2877 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _WS_in_case2879 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _END_in_case2883 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHEN_in_case_when2911 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _WS_in_case_when2913 = new BitSet(new ulong[]{0x68018000400CC000UL,0x4UL,0x40010000UL});
		public static readonly BitSet _expression_in_case_when2917 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _WS_in_case_when2919 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _THEN_in_case_when2921 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _WS_in_case_when2923 = new BitSet(new ulong[]{0x68018000400CC000UL,0x4UL,0x40010000UL});
		public static readonly BitSet _expression_in_case_when2927 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ELSE_in_case_else2952 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000UL});
		public static readonly BitSet _WS_in_case_else2954 = new BitSet(new ulong[]{0x68018000400CC000UL,0x4UL,0x40010000UL});
		public static readonly BitSet _expression_in_case_else2956 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  FxGqlLib 
