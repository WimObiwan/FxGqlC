//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g 2012-08-27 11:02:24

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591


// `XXX' does not need a CLSCompliant attribute because the assembly is not marked as CLS-compliant (CS3021)
#pragma warning disable 3021
// The private field `XXX' is assigned but its value is never used (CS0414)
#pragma warning disable 414


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  FxGqlLib 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class gqlParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "A", "ALL", "AND", "ANY", "AS", "ASC", "B", "BETWEEN", "BY", "C", "CASE", "CAST", "COMMENT_BLOCK", "COMMENT_LINE", "CONVERT", "COUNT", "CREATE", "D", "DATEADD", "DATEDIFF", "DATEPART", "DECLARE", "DESC", "DIGIT", "DISTINCT", "DROP", "E", "ELSE", "END", "EXISTS", "F", "FROM", "G", "GROUP", "H", "HAVING", "I", "IN", "INTO", "J", "K", "L", "LIKE", "M", "MATCH", "N", "NOT", "NUMBER", "O", "OR", "ORDER", "ORIG", "P", "Q", "R", "S", "SELECT", "SET", "SIMPLE_FILE", "SOME", "STRING", "SYSTEMVAR", "T", "TABLE", "THEN", "TOKEN", "TOP", "T_ALL", "T_ALLCOLUMNS", "T_AND", "T_ANY", "T_BETWEEN", "T_BITWISE_AND", "T_BITWISE_NOT", "T_BITWISE_OR", "T_BITWISE_XOR", "T_CASE", "T_CASE_ELSE", "T_CASE_WHEN", "T_COLUMN", "T_COLUMNLIST", "T_CONVERT", "T_COUNT", "T_CREATE_VIEW", "T_DATEPART", "T_DECLARATION", "T_DECLARE", "T_DISTINCT", "T_DISTINCTCOUNT", "T_DIVIDE", "T_DROP_TABLE", "T_DROP_VIEW", "T_EQUAL", "T_EXISTS", "T_EXPRESSIONLIST", "T_FILE", "T_FILEOPTION", "T_FILESUBQUERY", "T_FROM", "T_FUNCTIONCALL", "T_GREATER", "T_GROUPBY", "T_GROUPBY_ORIG", "T_HAVING", "T_IN", "T_INTEGER", "T_INTO", "T_LESS", "T_LIKE", "T_MATCH", "T_MINUS", "T_MODULO", "T_NOT", "T_NOTBETWEEN", "T_NOTEQUAL", "T_NOTGREATER", "T_NOTIN", "T_NOTLESS", "T_NOTLIKE", "T_NOTMATCH", "T_OP_BINARY", "T_OP_UNARY", "T_OR", "T_ORDERBY", "T_ORDERBY_ASC", "T_ORDERBY_COLUMN", "T_ORDERBY_DESC", "T_ORDERBY_ORIG", "T_PLUS", "T_PRODUCT", "T_ROOT", "T_SELECT", "T_SET_VARIABLE", "T_STRING", "T_SUBQUERY", "T_SYSTEMVAR", "T_TABLE_ALIAS", "T_TOP", "T_USE", "T_VARIABLE", "T_VIEW", "T_VIEW_NAME", "T_WHERE", "U", "USE", "V", "VARIABLE", "VIEW", "W", "WHEN", "WHERE", "WS", "X", "Y", "Z", "'!<'", "'!='", "'!>'", "'%'", "'&'", "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", "';'", "'<'", "'<='", "'<>'", "'='", "'>'", "'>='", "'['", "']'", "'^'", "'|'", "'~'"
	};
	public const int EOF=-1;
	public const int T__159=159;
	public const int T__160=160;
	public const int T__161=161;
	public const int T__162=162;
	public const int T__163=163;
	public const int T__164=164;
	public const int T__165=165;
	public const int T__166=166;
	public const int T__167=167;
	public const int T__168=168;
	public const int T__169=169;
	public const int T__170=170;
	public const int T__171=171;
	public const int T__172=172;
	public const int T__173=173;
	public const int T__174=174;
	public const int T__175=175;
	public const int T__176=176;
	public const int T__177=177;
	public const int T__178=178;
	public const int T__179=179;
	public const int T__180=180;
	public const int T__181=181;
	public const int T__182=182;
	public const int T__183=183;
	public const int A=4;
	public const int ALL=5;
	public const int AND=6;
	public const int ANY=7;
	public const int AS=8;
	public const int ASC=9;
	public const int B=10;
	public const int BETWEEN=11;
	public const int BY=12;
	public const int C=13;
	public const int CASE=14;
	public const int CAST=15;
	public const int COMMENT_BLOCK=16;
	public const int COMMENT_LINE=17;
	public const int CONVERT=18;
	public const int COUNT=19;
	public const int CREATE=20;
	public const int D=21;
	public const int DATEADD=22;
	public const int DATEDIFF=23;
	public const int DATEPART=24;
	public const int DECLARE=25;
	public const int DESC=26;
	public const int DIGIT=27;
	public const int DISTINCT=28;
	public const int DROP=29;
	public const int E=30;
	public const int ELSE=31;
	public const int END=32;
	public const int EXISTS=33;
	public const int F=34;
	public const int FROM=35;
	public const int G=36;
	public const int GROUP=37;
	public const int H=38;
	public const int HAVING=39;
	public const int I=40;
	public const int IN=41;
	public const int INTO=42;
	public const int J=43;
	public const int K=44;
	public const int L=45;
	public const int LIKE=46;
	public const int M=47;
	public const int MATCH=48;
	public const int N=49;
	public const int NOT=50;
	public const int NUMBER=51;
	public const int O=52;
	public const int OR=53;
	public const int ORDER=54;
	public const int ORIG=55;
	public const int P=56;
	public const int Q=57;
	public const int R=58;
	public const int S=59;
	public const int SELECT=60;
	public const int SET=61;
	public const int SIMPLE_FILE=62;
	public const int SOME=63;
	public const int STRING=64;
	public const int SYSTEMVAR=65;
	public const int T=66;
	public const int TABLE=67;
	public const int THEN=68;
	public const int TOKEN=69;
	public const int TOP=70;
	public const int T_ALL=71;
	public const int T_ALLCOLUMNS=72;
	public const int T_AND=73;
	public const int T_ANY=74;
	public const int T_BETWEEN=75;
	public const int T_BITWISE_AND=76;
	public const int T_BITWISE_NOT=77;
	public const int T_BITWISE_OR=78;
	public const int T_BITWISE_XOR=79;
	public const int T_CASE=80;
	public const int T_CASE_ELSE=81;
	public const int T_CASE_WHEN=82;
	public const int T_COLUMN=83;
	public const int T_COLUMNLIST=84;
	public const int T_CONVERT=85;
	public const int T_COUNT=86;
	public const int T_CREATE_VIEW=87;
	public const int T_DATEPART=88;
	public const int T_DECLARATION=89;
	public const int T_DECLARE=90;
	public const int T_DISTINCT=91;
	public const int T_DISTINCTCOUNT=92;
	public const int T_DIVIDE=93;
	public const int T_DROP_TABLE=94;
	public const int T_DROP_VIEW=95;
	public const int T_EQUAL=96;
	public const int T_EXISTS=97;
	public const int T_EXPRESSIONLIST=98;
	public const int T_FILE=99;
	public const int T_FILEOPTION=100;
	public const int T_FILESUBQUERY=101;
	public const int T_FROM=102;
	public const int T_FUNCTIONCALL=103;
	public const int T_GREATER=104;
	public const int T_GROUPBY=105;
	public const int T_GROUPBY_ORIG=106;
	public const int T_HAVING=107;
	public const int T_IN=108;
	public const int T_INTEGER=109;
	public const int T_INTO=110;
	public const int T_LESS=111;
	public const int T_LIKE=112;
	public const int T_MATCH=113;
	public const int T_MINUS=114;
	public const int T_MODULO=115;
	public const int T_NOT=116;
	public const int T_NOTBETWEEN=117;
	public const int T_NOTEQUAL=118;
	public const int T_NOTGREATER=119;
	public const int T_NOTIN=120;
	public const int T_NOTLESS=121;
	public const int T_NOTLIKE=122;
	public const int T_NOTMATCH=123;
	public const int T_OP_BINARY=124;
	public const int T_OP_UNARY=125;
	public const int T_OR=126;
	public const int T_ORDERBY=127;
	public const int T_ORDERBY_ASC=128;
	public const int T_ORDERBY_COLUMN=129;
	public const int T_ORDERBY_DESC=130;
	public const int T_ORDERBY_ORIG=131;
	public const int T_PLUS=132;
	public const int T_PRODUCT=133;
	public const int T_ROOT=134;
	public const int T_SELECT=135;
	public const int T_SET_VARIABLE=136;
	public const int T_STRING=137;
	public const int T_SUBQUERY=138;
	public const int T_SYSTEMVAR=139;
	public const int T_TABLE_ALIAS=140;
	public const int T_TOP=141;
	public const int T_USE=142;
	public const int T_VARIABLE=143;
	public const int T_VIEW=144;
	public const int T_VIEW_NAME=145;
	public const int T_WHERE=146;
	public const int U=147;
	public const int USE=148;
	public const int V=149;
	public const int VARIABLE=150;
	public const int VIEW=151;
	public const int W=152;
	public const int WHEN=153;
	public const int WHERE=154;
	public const int WS=155;
	public const int X=156;
	public const int Y=157;
	public const int Z=158;

	#if ANTLR_DEBUG
		private static readonly bool[] decisionCanBacktrack =
			new bool[]
			{
				false, // invalid decision
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false
			};
	#else
		private static readonly bool[] decisionCanBacktrack = new bool[0];
	#endif
	public gqlParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public gqlParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}
	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return gqlParser.tokenNames; } }
	public override string GrammarFileName { get { return "C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g"; } }


	[Conditional("ANTLR_TRACE")]
	protected virtual void OnCreated() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

	#region Rules

	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_parse() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_parse() {}

	// $ANTLR start "parse"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:107:1: parse : ( WS )? ( commands ( WS )? )? EOF -> ^( T_ROOT ( commands )? ) ;
	[GrammarRule("parse")]
	private AstParserRuleReturnScope<object, IToken> parse()
	{
		EnterRule_parse();
		EnterRule("parse", 1);
		TraceIn("parse", 1);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS1 = default(IToken);
	    IToken WS3 = default(IToken);
	    IToken EOF4 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> commands2 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS1_tree = default(object);
	    object WS3_tree = default(object);
	    object EOF4_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
	    RewriteRuleSubtreeStream stream_commands=new RewriteRuleSubtreeStream(adaptor,"rule commands");
		try { DebugEnterRule(GrammarFileName, "parse");
		DebugLocation(107, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:108:2: ( ( WS )? ( commands ( WS )? )? EOF -> ^( T_ROOT ( commands )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:108:4: ( WS )? ( commands ( WS )? )? EOF
			{
			DebugLocation(108, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:108:4: ( WS )?
			int alt1=2;
			try { DebugEnterSubRule(1);
			try { DebugEnterDecision(1, decisionCanBacktrack[1]);
			int LA1_0 = input.LA(1);

			if ((LA1_0==WS))
			{
				alt1 = 1;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:108:4: WS
				{
				DebugLocation(108, 4);
				WS1=(IToken)Match(input,WS,Follow._WS_in_parse384);  
				stream_WS.Add(WS1);


				}
				break;

			}
			} finally { DebugExitSubRule(1); }

			DebugLocation(108, 8);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:108:8: ( commands ( WS )? )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, decisionCanBacktrack[3]);
			int LA3_0 = input.LA(1);

			if ((LA3_0==CREATE||LA3_0==DECLARE||LA3_0==DROP||(LA3_0>=SELECT && LA3_0<=SET)||LA3_0==USE))
			{
				alt3 = 1;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:108:9: commands ( WS )?
				{
				DebugLocation(108, 9);
				PushFollow(Follow._commands_in_parse388);
				commands2=commands();
				PopFollow();

				stream_commands.Add(commands2.Tree);
				DebugLocation(108, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:108:18: ( WS )?
				int alt2=2;
				try { DebugEnterSubRule(2);
				try { DebugEnterDecision(2, decisionCanBacktrack[2]);
				int LA2_0 = input.LA(1);

				if ((LA2_0==WS))
				{
					alt2 = 1;
				}
				} finally { DebugExitDecision(2); }
				switch (alt2)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:108:18: WS
					{
					DebugLocation(108, 18);
					WS3=(IToken)Match(input,WS,Follow._WS_in_parse390);  
					stream_WS.Add(WS3);


					}
					break;

				}
				} finally { DebugExitSubRule(2); }


				}
				break;

			}
			} finally { DebugExitSubRule(3); }

			DebugLocation(108, 24);
			EOF4=(IToken)Match(input,EOF,Follow._EOF_in_parse395);  
			stream_EOF.Add(EOF4);



			{
			// AST REWRITE
			// elements: commands
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 109:2: -> ^( T_ROOT ( commands )? )
			{
				DebugLocation(109, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:109:5: ^( T_ROOT ( commands )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(109, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_ROOT, "T_ROOT"), root_1);

				DebugLocation(109, 14);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:109:14: ( commands )?
				if (stream_commands.HasNext)
				{
					DebugLocation(109, 14);
					adaptor.AddChild(root_1, stream_commands.NextTree());

				}
				stream_commands.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parse", 1);
			LeaveRule("parse", 1);
			LeaveRule_parse();
	    }
	 	DebugLocation(110, 1);
		} finally { DebugExitRule(GrammarFileName, "parse"); }
		return retval;

	}
	// $ANTLR end "parse"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_commands() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_commands() {}

	// $ANTLR start "commands"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:112:1: commands : command ( ( WS )? ( ';' ( WS )? )? command )* ( ( WS )? ';' )? -> ( command )+ ;
	[GrammarRule("commands")]
	private AstParserRuleReturnScope<object, IToken> commands()
	{
		EnterRule_commands();
		EnterRule("commands", 2);
		TraceIn("commands", 2);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS6 = default(IToken);
	    IToken char_literal7 = default(IToken);
	    IToken WS8 = default(IToken);
	    IToken WS10 = default(IToken);
	    IToken char_literal11 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> command5 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> command9 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS6_tree = default(object);
	    object char_literal7_tree = default(object);
	    object WS8_tree = default(object);
	    object WS10_tree = default(object);
	    object char_literal11_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_172=new RewriteRuleITokenStream(adaptor,"token 172");
	    RewriteRuleSubtreeStream stream_command=new RewriteRuleSubtreeStream(adaptor,"rule command");
		try { DebugEnterRule(GrammarFileName, "commands");
		DebugLocation(112, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:113:2: ( command ( ( WS )? ( ';' ( WS )? )? command )* ( ( WS )? ';' )? -> ( command )+ )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:113:4: command ( ( WS )? ( ';' ( WS )? )? command )* ( ( WS )? ';' )?
			{
			DebugLocation(113, 4);
			PushFollow(Follow._command_in_commands418);
			command5=command();
			PopFollow();

			stream_command.Add(command5.Tree);
			DebugLocation(113, 12);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:113:12: ( ( WS )? ( ';' ( WS )? )? command )*
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, decisionCanBacktrack[7]);
				switch (input.LA(1))
				{
				case WS:
					{
					int LA7_1 = input.LA(2);

					if ((LA7_1==172))
					{
						int LA7_2 = input.LA(3);

						if ((LA7_2==WS))
						{
							int LA7_5 = input.LA(4);

							if ((LA7_5==CREATE||LA7_5==DECLARE||LA7_5==DROP||(LA7_5>=SELECT && LA7_5<=SET)||LA7_5==USE))
							{
								alt7 = 1;
							}


						}
						else if ((LA7_2==CREATE||LA7_2==DECLARE||LA7_2==DROP||(LA7_2>=SELECT && LA7_2<=SET)||LA7_2==USE))
						{
							alt7 = 1;
						}


					}
					else if ((LA7_1==CREATE||LA7_1==DECLARE||LA7_1==DROP||(LA7_1>=SELECT && LA7_1<=SET)||LA7_1==USE))
					{
						alt7 = 1;
					}


					}
					break;
				case 172:
					{
					int LA7_2 = input.LA(2);

					if ((LA7_2==WS))
					{
						int LA7_5 = input.LA(3);

						if ((LA7_5==CREATE||LA7_5==DECLARE||LA7_5==DROP||(LA7_5>=SELECT && LA7_5<=SET)||LA7_5==USE))
						{
							alt7 = 1;
						}


					}
					else if ((LA7_2==CREATE||LA7_2==DECLARE||LA7_2==DROP||(LA7_2>=SELECT && LA7_2<=SET)||LA7_2==USE))
					{
						alt7 = 1;
					}


					}
					break;
				case CREATE:
				case DECLARE:
				case DROP:
				case SELECT:
				case SET:
				case USE:
					{
					alt7 = 1;
					}
					break;
				}

				} finally { DebugExitDecision(7); }
				switch ( alt7 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:113:13: ( WS )? ( ';' ( WS )? )? command
					{
					DebugLocation(113, 13);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:113:13: ( WS )?
					int alt4=2;
					try { DebugEnterSubRule(4);
					try { DebugEnterDecision(4, decisionCanBacktrack[4]);
					int LA4_0 = input.LA(1);

					if ((LA4_0==WS))
					{
						alt4 = 1;
					}
					} finally { DebugExitDecision(4); }
					switch (alt4)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:113:13: WS
						{
						DebugLocation(113, 13);
						WS6=(IToken)Match(input,WS,Follow._WS_in_commands421);  
						stream_WS.Add(WS6);


						}
						break;

					}
					} finally { DebugExitSubRule(4); }

					DebugLocation(113, 17);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:113:17: ( ';' ( WS )? )?
					int alt6=2;
					try { DebugEnterSubRule(6);
					try { DebugEnterDecision(6, decisionCanBacktrack[6]);
					int LA6_0 = input.LA(1);

					if ((LA6_0==172))
					{
						alt6 = 1;
					}
					} finally { DebugExitDecision(6); }
					switch (alt6)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:113:18: ';' ( WS )?
						{
						DebugLocation(113, 18);
						char_literal7=(IToken)Match(input,172,Follow._172_in_commands425);  
						stream_172.Add(char_literal7);

						DebugLocation(113, 22);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:113:22: ( WS )?
						int alt5=2;
						try { DebugEnterSubRule(5);
						try { DebugEnterDecision(5, decisionCanBacktrack[5]);
						int LA5_0 = input.LA(1);

						if ((LA5_0==WS))
						{
							alt5 = 1;
						}
						} finally { DebugExitDecision(5); }
						switch (alt5)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:113:22: WS
							{
							DebugLocation(113, 22);
							WS8=(IToken)Match(input,WS,Follow._WS_in_commands427);  
							stream_WS.Add(WS8);


							}
							break;

						}
						} finally { DebugExitSubRule(5); }


						}
						break;

					}
					} finally { DebugExitSubRule(6); }

					DebugLocation(113, 28);
					PushFollow(Follow._command_in_commands432);
					command9=command();
					PopFollow();

					stream_command.Add(command9.Tree);

					}
					break;

				default:
					goto loop7;
				}
			}

			loop7:
				;

			} finally { DebugExitSubRule(7); }

			DebugLocation(113, 38);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:113:38: ( ( WS )? ';' )?
			int alt9=2;
			try { DebugEnterSubRule(9);
			try { DebugEnterDecision(9, decisionCanBacktrack[9]);
			int LA9_0 = input.LA(1);

			if ((LA9_0==WS))
			{
				int LA9_1 = input.LA(2);

				if ((LA9_1==172))
				{
					alt9 = 1;
				}
			}
			else if ((LA9_0==172))
			{
				alt9 = 1;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:113:39: ( WS )? ';'
				{
				DebugLocation(113, 39);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:113:39: ( WS )?
				int alt8=2;
				try { DebugEnterSubRule(8);
				try { DebugEnterDecision(8, decisionCanBacktrack[8]);
				int LA8_0 = input.LA(1);

				if ((LA8_0==WS))
				{
					alt8 = 1;
				}
				} finally { DebugExitDecision(8); }
				switch (alt8)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:113:39: WS
					{
					DebugLocation(113, 39);
					WS10=(IToken)Match(input,WS,Follow._WS_in_commands437);  
					stream_WS.Add(WS10);


					}
					break;

				}
				} finally { DebugExitSubRule(8); }

				DebugLocation(113, 43);
				char_literal11=(IToken)Match(input,172,Follow._172_in_commands440);  
				stream_172.Add(char_literal11);


				}
				break;

			}
			} finally { DebugExitSubRule(9); }



			{
			// AST REWRITE
			// elements: command
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 114:2: -> ( command )+
			{
				DebugLocation(114, 5);
				if (!(stream_command.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_command.HasNext )
				{
					DebugLocation(114, 5);
					adaptor.AddChild(root_0, stream_command.NextTree());

				}
				stream_command.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("commands", 2);
			LeaveRule("commands", 2);
			LeaveRule_commands();
	    }
	 	DebugLocation(115, 1);
		} finally { DebugExitRule(GrammarFileName, "commands"); }
		return retval;

	}
	// $ANTLR end "commands"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_command() {}

	// $ANTLR start "command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:117:1: command : ( select_command | use_command | declare_command | set_command | create_view_command | drop_view_command | drop_table_command );
	[GrammarRule("command")]
	private AstParserRuleReturnScope<object, IToken> command()
	{
		EnterRule_command();
		EnterRule("command", 3);
		TraceIn("command", 3);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> select_command12 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> use_command13 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> declare_command14 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> set_command15 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> create_view_command16 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> drop_view_command17 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> drop_table_command18 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "command");
		DebugLocation(117, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:118:2: ( select_command | use_command | declare_command | set_command | create_view_command | drop_view_command | drop_table_command )
			int alt10=7;
			try { DebugEnterDecision(10, decisionCanBacktrack[10]);
			switch (input.LA(1))
			{
			case SELECT:
				{
				alt10 = 1;
				}
				break;
			case USE:
				{
				alt10 = 2;
				}
				break;
			case DECLARE:
				{
				alt10 = 3;
				}
				break;
			case SET:
				{
				alt10 = 4;
				}
				break;
			case CREATE:
				{
				alt10 = 5;
				}
				break;
			case DROP:
				{
				int LA10_6 = input.LA(2);

				if ((LA10_6==WS))
				{
					int LA10_7 = input.LA(3);

					if ((LA10_7==VIEW))
					{
						alt10 = 6;
					}
					else if ((LA10_7==TABLE))
					{
						alt10 = 7;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 10, 7, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 10, 6, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 10, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:118:4: select_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(118, 4);
				PushFollow(Follow._select_command_in_command460);
				select_command12=select_command();
				PopFollow();

				adaptor.AddChild(root_0, select_command12.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:119:4: use_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(119, 4);
				PushFollow(Follow._use_command_in_command465);
				use_command13=use_command();
				PopFollow();

				adaptor.AddChild(root_0, use_command13.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:120:4: declare_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(120, 4);
				PushFollow(Follow._declare_command_in_command470);
				declare_command14=declare_command();
				PopFollow();

				adaptor.AddChild(root_0, declare_command14.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:121:4: set_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(121, 4);
				PushFollow(Follow._set_command_in_command475);
				set_command15=set_command();
				PopFollow();

				adaptor.AddChild(root_0, set_command15.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:122:4: create_view_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(122, 4);
				PushFollow(Follow._create_view_command_in_command480);
				create_view_command16=create_view_command();
				PopFollow();

				adaptor.AddChild(root_0, create_view_command16.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:123:4: drop_view_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(123, 4);
				PushFollow(Follow._drop_view_command_in_command485);
				drop_view_command17=drop_view_command();
				PopFollow();

				adaptor.AddChild(root_0, drop_view_command17.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:124:4: drop_table_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(124, 4);
				PushFollow(Follow._drop_table_command_in_command490);
				drop_table_command18=drop_table_command();
				PopFollow();

				adaptor.AddChild(root_0, drop_table_command18.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("command", 3);
			LeaveRule("command", 3);
			LeaveRule_command();
	    }
	 	DebugLocation(125, 1);
		} finally { DebugExitRule(GrammarFileName, "command"); }
		return retval;

	}
	// $ANTLR end "command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_select_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_select_command() {}

	// $ANTLR start "select_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:130:1: select_command : SELECT ( WS distinct_clause )? ( WS top_clause )? WS column_list ( WS into_clause )? ( WS from_clause )? ( WS where_clause )? ( WS groupby_clause )? ( WS having_clause )? ( WS orderby_clause )? -> ^( T_SELECT ( distinct_clause )? ( top_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( having_clause )? ( orderby_clause )? ) ;
	[GrammarRule("select_command")]
	private AstParserRuleReturnScope<object, IToken> select_command()
	{
		EnterRule_select_command();
		EnterRule("select_command", 4);
		TraceIn("select_command", 4);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken SELECT19 = default(IToken);
	    IToken WS20 = default(IToken);
	    IToken WS22 = default(IToken);
	    IToken WS24 = default(IToken);
	    IToken WS26 = default(IToken);
	    IToken WS28 = default(IToken);
	    IToken WS30 = default(IToken);
	    IToken WS32 = default(IToken);
	    IToken WS34 = default(IToken);
	    IToken WS36 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> distinct_clause21 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> top_clause23 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> column_list25 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> into_clause27 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> from_clause29 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> where_clause31 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> groupby_clause33 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> having_clause35 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> orderby_clause37 = default(AstParserRuleReturnScope<object, IToken>);

	    object SELECT19_tree = default(object);
	    object WS20_tree = default(object);
	    object WS22_tree = default(object);
	    object WS24_tree = default(object);
	    object WS26_tree = default(object);
	    object WS28_tree = default(object);
	    object WS30_tree = default(object);
	    object WS32_tree = default(object);
	    object WS34_tree = default(object);
	    object WS36_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_SELECT=new RewriteRuleITokenStream(adaptor,"token SELECT");
	    RewriteRuleSubtreeStream stream_groupby_clause=new RewriteRuleSubtreeStream(adaptor,"rule groupby_clause");
	    RewriteRuleSubtreeStream stream_distinct_clause=new RewriteRuleSubtreeStream(adaptor,"rule distinct_clause");
	    RewriteRuleSubtreeStream stream_from_clause=new RewriteRuleSubtreeStream(adaptor,"rule from_clause");
	    RewriteRuleSubtreeStream stream_having_clause=new RewriteRuleSubtreeStream(adaptor,"rule having_clause");
	    RewriteRuleSubtreeStream stream_column_list=new RewriteRuleSubtreeStream(adaptor,"rule column_list");
	    RewriteRuleSubtreeStream stream_where_clause=new RewriteRuleSubtreeStream(adaptor,"rule where_clause");
	    RewriteRuleSubtreeStream stream_into_clause=new RewriteRuleSubtreeStream(adaptor,"rule into_clause");
	    RewriteRuleSubtreeStream stream_top_clause=new RewriteRuleSubtreeStream(adaptor,"rule top_clause");
	    RewriteRuleSubtreeStream stream_orderby_clause=new RewriteRuleSubtreeStream(adaptor,"rule orderby_clause");
		try { DebugEnterRule(GrammarFileName, "select_command");
		DebugLocation(130, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:131:2: ( SELECT ( WS distinct_clause )? ( WS top_clause )? WS column_list ( WS into_clause )? ( WS from_clause )? ( WS where_clause )? ( WS groupby_clause )? ( WS having_clause )? ( WS orderby_clause )? -> ^( T_SELECT ( distinct_clause )? ( top_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( having_clause )? ( orderby_clause )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:131:4: SELECT ( WS distinct_clause )? ( WS top_clause )? WS column_list ( WS into_clause )? ( WS from_clause )? ( WS where_clause )? ( WS groupby_clause )? ( WS having_clause )? ( WS orderby_clause )?
			{
			DebugLocation(131, 4);
			SELECT19=(IToken)Match(input,SELECT,Follow._SELECT_in_select_command504);  
			stream_SELECT.Add(SELECT19);

			DebugLocation(131, 11);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:131:11: ( WS distinct_clause )?
			int alt11=2;
			try { DebugEnterSubRule(11);
			try { DebugEnterDecision(11, decisionCanBacktrack[11]);
			int LA11_0 = input.LA(1);

			if ((LA11_0==WS))
			{
				int LA11_1 = input.LA(2);

				if ((LA11_1==ALL||LA11_1==DISTINCT))
				{
					alt11 = 1;
				}
			}
			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:131:12: WS distinct_clause
				{
				DebugLocation(131, 12);
				WS20=(IToken)Match(input,WS,Follow._WS_in_select_command507);  
				stream_WS.Add(WS20);

				DebugLocation(131, 15);
				PushFollow(Follow._distinct_clause_in_select_command509);
				distinct_clause21=distinct_clause();
				PopFollow();

				stream_distinct_clause.Add(distinct_clause21.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(11); }

			DebugLocation(131, 33);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:131:33: ( WS top_clause )?
			int alt12=2;
			try { DebugEnterSubRule(12);
			try { DebugEnterDecision(12, decisionCanBacktrack[12]);
			int LA12_0 = input.LA(1);

			if ((LA12_0==WS))
			{
				int LA12_1 = input.LA(2);

				if ((LA12_1==TOP))
				{
					alt12 = 1;
				}
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:131:34: WS top_clause
				{
				DebugLocation(131, 34);
				WS22=(IToken)Match(input,WS,Follow._WS_in_select_command514);  
				stream_WS.Add(WS22);

				DebugLocation(131, 37);
				PushFollow(Follow._top_clause_in_select_command516);
				top_clause23=top_clause();
				PopFollow();

				stream_top_clause.Add(top_clause23.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(12); }

			DebugLocation(131, 50);
			WS24=(IToken)Match(input,WS,Follow._WS_in_select_command520);  
			stream_WS.Add(WS24);

			DebugLocation(131, 53);
			PushFollow(Follow._column_list_in_select_command522);
			column_list25=column_list();
			PopFollow();

			stream_column_list.Add(column_list25.Tree);
			DebugLocation(131, 65);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:131:65: ( WS into_clause )?
			int alt13=2;
			try { DebugEnterSubRule(13);
			try { DebugEnterDecision(13, decisionCanBacktrack[13]);
			int LA13_0 = input.LA(1);

			if ((LA13_0==WS))
			{
				int LA13_1 = input.LA(2);

				if ((LA13_1==INTO))
				{
					alt13 = 1;
				}
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:131:66: WS into_clause
				{
				DebugLocation(131, 66);
				WS26=(IToken)Match(input,WS,Follow._WS_in_select_command525);  
				stream_WS.Add(WS26);

				DebugLocation(131, 69);
				PushFollow(Follow._into_clause_in_select_command527);
				into_clause27=into_clause();
				PopFollow();

				stream_into_clause.Add(into_clause27.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(13); }

			DebugLocation(131, 83);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:131:83: ( WS from_clause )?
			int alt14=2;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, decisionCanBacktrack[14]);
			int LA14_0 = input.LA(1);

			if ((LA14_0==WS))
			{
				int LA14_1 = input.LA(2);

				if ((LA14_1==FROM))
				{
					alt14 = 1;
				}
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:131:84: WS from_clause
				{
				DebugLocation(131, 84);
				WS28=(IToken)Match(input,WS,Follow._WS_in_select_command532);  
				stream_WS.Add(WS28);

				DebugLocation(131, 87);
				PushFollow(Follow._from_clause_in_select_command534);
				from_clause29=from_clause();
				PopFollow();

				stream_from_clause.Add(from_clause29.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(14); }

			DebugLocation(131, 101);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:131:101: ( WS where_clause )?
			int alt15=2;
			try { DebugEnterSubRule(15);
			try { DebugEnterDecision(15, decisionCanBacktrack[15]);
			int LA15_0 = input.LA(1);

			if ((LA15_0==WS))
			{
				int LA15_1 = input.LA(2);

				if ((LA15_1==WHERE))
				{
					alt15 = 1;
				}
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:131:102: WS where_clause
				{
				DebugLocation(131, 102);
				WS30=(IToken)Match(input,WS,Follow._WS_in_select_command539);  
				stream_WS.Add(WS30);

				DebugLocation(131, 105);
				PushFollow(Follow._where_clause_in_select_command541);
				where_clause31=where_clause();
				PopFollow();

				stream_where_clause.Add(where_clause31.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(15); }

			DebugLocation(131, 120);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:131:120: ( WS groupby_clause )?
			int alt16=2;
			try { DebugEnterSubRule(16);
			try { DebugEnterDecision(16, decisionCanBacktrack[16]);
			int LA16_0 = input.LA(1);

			if ((LA16_0==WS))
			{
				int LA16_1 = input.LA(2);

				if ((LA16_1==GROUP))
				{
					alt16 = 1;
				}
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:131:121: WS groupby_clause
				{
				DebugLocation(131, 121);
				WS32=(IToken)Match(input,WS,Follow._WS_in_select_command546);  
				stream_WS.Add(WS32);

				DebugLocation(131, 124);
				PushFollow(Follow._groupby_clause_in_select_command548);
				groupby_clause33=groupby_clause();
				PopFollow();

				stream_groupby_clause.Add(groupby_clause33.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(16); }

			DebugLocation(131, 141);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:131:141: ( WS having_clause )?
			int alt17=2;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, decisionCanBacktrack[17]);
			int LA17_0 = input.LA(1);

			if ((LA17_0==WS))
			{
				int LA17_1 = input.LA(2);

				if ((LA17_1==HAVING))
				{
					alt17 = 1;
				}
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:131:142: WS having_clause
				{
				DebugLocation(131, 142);
				WS34=(IToken)Match(input,WS,Follow._WS_in_select_command553);  
				stream_WS.Add(WS34);

				DebugLocation(131, 145);
				PushFollow(Follow._having_clause_in_select_command555);
				having_clause35=having_clause();
				PopFollow();

				stream_having_clause.Add(having_clause35.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(17); }

			DebugLocation(131, 161);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:131:161: ( WS orderby_clause )?
			int alt18=2;
			try { DebugEnterSubRule(18);
			try { DebugEnterDecision(18, decisionCanBacktrack[18]);
			int LA18_0 = input.LA(1);

			if ((LA18_0==WS))
			{
				int LA18_1 = input.LA(2);

				if ((LA18_1==ORDER))
				{
					alt18 = 1;
				}
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:131:162: WS orderby_clause
				{
				DebugLocation(131, 162);
				WS36=(IToken)Match(input,WS,Follow._WS_in_select_command560);  
				stream_WS.Add(WS36);

				DebugLocation(131, 165);
				PushFollow(Follow._orderby_clause_in_select_command562);
				orderby_clause37=orderby_clause();
				PopFollow();

				stream_orderby_clause.Add(orderby_clause37.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(18); }



			{
			// AST REWRITE
			// elements: groupby_clause, where_clause, orderby_clause, from_clause, into_clause, distinct_clause, having_clause, top_clause, column_list
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 132:3: -> ^( T_SELECT ( distinct_clause )? ( top_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( having_clause )? ( orderby_clause )? )
			{
				DebugLocation(132, 6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:132:6: ^( T_SELECT ( distinct_clause )? ( top_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( having_clause )? ( orderby_clause )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(132, 8);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SELECT, "T_SELECT"), root_1);

				DebugLocation(132, 17);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:132:17: ( distinct_clause )?
				if (stream_distinct_clause.HasNext)
				{
					DebugLocation(132, 17);
					adaptor.AddChild(root_1, stream_distinct_clause.NextTree());

				}
				stream_distinct_clause.Reset();
				DebugLocation(132, 34);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:132:34: ( top_clause )?
				if (stream_top_clause.HasNext)
				{
					DebugLocation(132, 34);
					adaptor.AddChild(root_1, stream_top_clause.NextTree());

				}
				stream_top_clause.Reset();
				DebugLocation(132, 46);
				adaptor.AddChild(root_1, stream_column_list.NextTree());
				DebugLocation(132, 58);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:132:58: ( into_clause )?
				if (stream_into_clause.HasNext)
				{
					DebugLocation(132, 58);
					adaptor.AddChild(root_1, stream_into_clause.NextTree());

				}
				stream_into_clause.Reset();
				DebugLocation(132, 71);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:132:71: ( from_clause )?
				if (stream_from_clause.HasNext)
				{
					DebugLocation(132, 71);
					adaptor.AddChild(root_1, stream_from_clause.NextTree());

				}
				stream_from_clause.Reset();
				DebugLocation(132, 84);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:132:84: ( where_clause )?
				if (stream_where_clause.HasNext)
				{
					DebugLocation(132, 84);
					adaptor.AddChild(root_1, stream_where_clause.NextTree());

				}
				stream_where_clause.Reset();
				DebugLocation(132, 98);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:132:98: ( groupby_clause )?
				if (stream_groupby_clause.HasNext)
				{
					DebugLocation(132, 98);
					adaptor.AddChild(root_1, stream_groupby_clause.NextTree());

				}
				stream_groupby_clause.Reset();
				DebugLocation(132, 114);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:132:114: ( having_clause )?
				if (stream_having_clause.HasNext)
				{
					DebugLocation(132, 114);
					adaptor.AddChild(root_1, stream_having_clause.NextTree());

				}
				stream_having_clause.Reset();
				DebugLocation(132, 129);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:132:129: ( orderby_clause )?
				if (stream_orderby_clause.HasNext)
				{
					DebugLocation(132, 129);
					adaptor.AddChild(root_1, stream_orderby_clause.NextTree());

				}
				stream_orderby_clause.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("select_command", 4);
			LeaveRule("select_command", 4);
			LeaveRule_select_command();
	    }
	 	DebugLocation(133, 1);
		} finally { DebugExitRule(GrammarFileName, "select_command"); }
		return retval;

	}
	// $ANTLR end "select_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_distinct_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_distinct_clause() {}

	// $ANTLR start "distinct_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:135:1: distinct_clause : ( DISTINCT -> T_DISTINCT | ALL -> T_ALL );
	[GrammarRule("distinct_clause")]
	private AstParserRuleReturnScope<object, IToken> distinct_clause()
	{
		EnterRule_distinct_clause();
		EnterRule("distinct_clause", 5);
		TraceIn("distinct_clause", 5);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken DISTINCT38 = default(IToken);
	    IToken ALL39 = default(IToken);

	    object DISTINCT38_tree = default(object);
	    object ALL39_tree = default(object);
	    RewriteRuleITokenStream stream_DISTINCT=new RewriteRuleITokenStream(adaptor,"token DISTINCT");
	    RewriteRuleITokenStream stream_ALL=new RewriteRuleITokenStream(adaptor,"token ALL");

		try { DebugEnterRule(GrammarFileName, "distinct_clause");
		DebugLocation(135, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:136:2: ( DISTINCT -> T_DISTINCT | ALL -> T_ALL )
			int alt19=2;
			try { DebugEnterDecision(19, decisionCanBacktrack[19]);
			int LA19_0 = input.LA(1);

			if ((LA19_0==DISTINCT))
			{
				alt19 = 1;
			}
			else if ((LA19_0==ALL))
			{
				alt19 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 19, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:136:4: DISTINCT
				{
				DebugLocation(136, 4);
				DISTINCT38=(IToken)Match(input,DISTINCT,Follow._DISTINCT_in_distinct_clause610);  
				stream_DISTINCT.Add(DISTINCT38);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 136:13: -> T_DISTINCT
				{
					DebugLocation(136, 16);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_DISTINCT, "T_DISTINCT"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:137:4: ALL
				{
				DebugLocation(137, 4);
				ALL39=(IToken)Match(input,ALL,Follow._ALL_in_distinct_clause619);  
				stream_ALL.Add(ALL39);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 137:8: -> T_ALL
				{
					DebugLocation(137, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_ALL, "T_ALL"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("distinct_clause", 5);
			LeaveRule("distinct_clause", 5);
			LeaveRule_distinct_clause();
	    }
	 	DebugLocation(138, 1);
		} finally { DebugExitRule(GrammarFileName, "distinct_clause"); }
		return retval;

	}
	// $ANTLR end "distinct_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_top_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_top_clause() {}

	// $ANTLR start "top_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:140:1: top_clause : TOP WS expression_atom -> ^( T_TOP expression_atom ) ;
	[GrammarRule("top_clause")]
	private AstParserRuleReturnScope<object, IToken> top_clause()
	{
		EnterRule_top_clause();
		EnterRule("top_clause", 6);
		TraceIn("top_clause", 6);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOP40 = default(IToken);
	    IToken WS41 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression_atom42 = default(AstParserRuleReturnScope<object, IToken>);

	    object TOP40_tree = default(object);
	    object WS41_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_TOP=new RewriteRuleITokenStream(adaptor,"token TOP");
	    RewriteRuleSubtreeStream stream_expression_atom=new RewriteRuleSubtreeStream(adaptor,"rule expression_atom");
		try { DebugEnterRule(GrammarFileName, "top_clause");
		DebugLocation(140, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:141:2: ( TOP WS expression_atom -> ^( T_TOP expression_atom ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:141:4: TOP WS expression_atom
			{
			DebugLocation(141, 4);
			TOP40=(IToken)Match(input,TOP,Follow._TOP_in_top_clause635);  
			stream_TOP.Add(TOP40);

			DebugLocation(141, 8);
			WS41=(IToken)Match(input,WS,Follow._WS_in_top_clause637);  
			stream_WS.Add(WS41);

			DebugLocation(141, 11);
			PushFollow(Follow._expression_atom_in_top_clause639);
			expression_atom42=expression_atom();
			PopFollow();

			stream_expression_atom.Add(expression_atom42.Tree);


			{
			// AST REWRITE
			// elements: expression_atom
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 142:2: -> ^( T_TOP expression_atom )
			{
				DebugLocation(142, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:142:5: ^( T_TOP expression_atom )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(142, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_TOP, "T_TOP"), root_1);

				DebugLocation(142, 13);
				adaptor.AddChild(root_1, stream_expression_atom.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("top_clause", 6);
			LeaveRule("top_clause", 6);
			LeaveRule_top_clause();
	    }
	 	DebugLocation(143, 1);
		} finally { DebugExitRule(GrammarFileName, "top_clause"); }
		return retval;

	}
	// $ANTLR end "top_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_column_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_column_list() {}

	// $ANTLR start "column_list"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:145:1: column_list : column ( ( WS )? ',' ( WS )? column )* -> ^( T_COLUMNLIST ( column )* ) ;
	[GrammarRule("column_list")]
	private AstParserRuleReturnScope<object, IToken> column_list()
	{
		EnterRule_column_list();
		EnterRule("column_list", 7);
		TraceIn("column_list", 7);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS44 = default(IToken);
	    IToken char_literal45 = default(IToken);
	    IToken WS46 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> column43 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> column47 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS44_tree = default(object);
	    object char_literal45_tree = default(object);
	    object WS46_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_168=new RewriteRuleITokenStream(adaptor,"token 168");
	    RewriteRuleSubtreeStream stream_column=new RewriteRuleSubtreeStream(adaptor,"rule column");
		try { DebugEnterRule(GrammarFileName, "column_list");
		DebugLocation(145, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:146:2: ( column ( ( WS )? ',' ( WS )? column )* -> ^( T_COLUMNLIST ( column )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:146:4: column ( ( WS )? ',' ( WS )? column )*
			{
			DebugLocation(146, 4);
			PushFollow(Follow._column_in_column_list661);
			column43=column();
			PopFollow();

			stream_column.Add(column43.Tree);
			DebugLocation(146, 11);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:146:11: ( ( WS )? ',' ( WS )? column )*
			try { DebugEnterSubRule(22);
			while (true)
			{
				int alt22=2;
				try { DebugEnterDecision(22, decisionCanBacktrack[22]);
				int LA22_0 = input.LA(1);

				if ((LA22_0==WS))
				{
					int LA22_1 = input.LA(2);

					if ((LA22_1==168))
					{
						alt22 = 1;
					}


				}
				else if ((LA22_0==168))
				{
					alt22 = 1;
				}


				} finally { DebugExitDecision(22); }
				switch ( alt22 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:146:12: ( WS )? ',' ( WS )? column
					{
					DebugLocation(146, 12);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:146:12: ( WS )?
					int alt20=2;
					try { DebugEnterSubRule(20);
					try { DebugEnterDecision(20, decisionCanBacktrack[20]);
					int LA20_0 = input.LA(1);

					if ((LA20_0==WS))
					{
						alt20 = 1;
					}
					} finally { DebugExitDecision(20); }
					switch (alt20)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:146:12: WS
						{
						DebugLocation(146, 12);
						WS44=(IToken)Match(input,WS,Follow._WS_in_column_list664);  
						stream_WS.Add(WS44);


						}
						break;

					}
					} finally { DebugExitSubRule(20); }

					DebugLocation(146, 16);
					char_literal45=(IToken)Match(input,168,Follow._168_in_column_list667);  
					stream_168.Add(char_literal45);

					DebugLocation(146, 20);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:146:20: ( WS )?
					int alt21=2;
					try { DebugEnterSubRule(21);
					try { DebugEnterDecision(21, decisionCanBacktrack[21]);
					int LA21_0 = input.LA(1);

					if ((LA21_0==WS))
					{
						alt21 = 1;
					}
					} finally { DebugExitDecision(21); }
					switch (alt21)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:146:20: WS
						{
						DebugLocation(146, 20);
						WS46=(IToken)Match(input,WS,Follow._WS_in_column_list669);  
						stream_WS.Add(WS46);


						}
						break;

					}
					} finally { DebugExitSubRule(21); }

					DebugLocation(146, 24);
					PushFollow(Follow._column_in_column_list672);
					column47=column();
					PopFollow();

					stream_column.Add(column47.Tree);

					}
					break;

				default:
					goto loop22;
				}
			}

			loop22:
				;

			} finally { DebugExitSubRule(22); }



			{
			// AST REWRITE
			// elements: column
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 147:2: -> ^( T_COLUMNLIST ( column )* )
			{
				DebugLocation(147, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:147:5: ^( T_COLUMNLIST ( column )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(147, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_COLUMNLIST, "T_COLUMNLIST"), root_1);

				DebugLocation(147, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:147:20: ( column )*
				while ( stream_column.HasNext )
				{
					DebugLocation(147, 20);
					adaptor.AddChild(root_1, stream_column.NextTree());

				}
				stream_column.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("column_list", 7);
			LeaveRule("column_list", 7);
			LeaveRule_column_list();
	    }
	 	DebugLocation(148, 1);
		} finally { DebugExitRule(GrammarFileName, "column_list"); }
		return retval;

	}
	// $ANTLR end "column_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_column() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_column() {}

	// $ANTLR start "column"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:150:1: column : ( all_columns | expression ( WS SIMPLE_FILE )? -> ^( T_COLUMN expression ( SIMPLE_FILE )? ) );
	[GrammarRule("column")]
	private AstParserRuleReturnScope<object, IToken> column()
	{
		EnterRule_column();
		EnterRule("column", 8);
		TraceIn("column", 8);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS50 = default(IToken);
	    IToken SIMPLE_FILE51 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> all_columns48 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression49 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS50_tree = default(object);
	    object SIMPLE_FILE51_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_SIMPLE_FILE=new RewriteRuleITokenStream(adaptor,"token SIMPLE_FILE");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "column");
		DebugLocation(150, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:151:2: ( all_columns | expression ( WS SIMPLE_FILE )? -> ^( T_COLUMN expression ( SIMPLE_FILE )? ) )
			int alt24=2;
			try { DebugEnterDecision(24, decisionCanBacktrack[24]);
			switch (input.LA(1))
			{
			case SIMPLE_FILE:
				{
				switch (input.LA(2))
				{
				case WS:
					{
					int LA24_4 = input.LA(3);

					if ((LA24_4==EOF||LA24_4==AND||LA24_4==BETWEEN||LA24_4==CREATE||LA24_4==DECLARE||LA24_4==DROP||LA24_4==FROM||LA24_4==GROUP||LA24_4==HAVING||(LA24_4>=IN && LA24_4<=INTO)||LA24_4==LIKE||LA24_4==MATCH||LA24_4==NOT||(LA24_4>=OR && LA24_4<=ORDER)||(LA24_4>=SELECT && LA24_4<=SIMPLE_FILE)||LA24_4==USE||LA24_4==WHERE||(LA24_4>=159 && LA24_4<=163)||(LA24_4>=165 && LA24_4<=169)||(LA24_4>=171 && LA24_4<=178)||(LA24_4>=181 && LA24_4<=182)))
					{
						alt24 = 2;
					}
					else if ((LA24_4==170))
					{
						switch (input.LA(4))
						{
						case WS:
							{
							int LA24_6 = input.LA(5);

							if ((LA24_6==166))
							{
								alt24 = 1;
							}
							else if ((LA24_6==SIMPLE_FILE))
							{
								alt24 = 2;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 24, 6, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case 166:
							{
							alt24 = 1;
							}
							break;
						case SIMPLE_FILE:
							{
							alt24 = 2;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 24, 5, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 24, 4, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 170:
					{
					switch (input.LA(3))
					{
					case WS:
						{
						int LA24_6 = input.LA(4);

						if ((LA24_6==166))
						{
							alt24 = 1;
						}
						else if ((LA24_6==SIMPLE_FILE))
						{
							alt24 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 24, 6, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case 166:
						{
						alt24 = 1;
						}
						break;
					case SIMPLE_FILE:
						{
						alt24 = 2;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 24, 5, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					}
					break;
				case EOF:
				case CREATE:
				case DECLARE:
				case DROP:
				case SELECT:
				case SET:
				case USE:
				case 159:
				case 160:
				case 161:
				case 162:
				case 163:
				case 165:
				case 166:
				case 167:
				case 168:
				case 169:
				case 171:
				case 172:
				case 173:
				case 174:
				case 175:
				case 176:
				case 177:
				case 178:
				case 181:
				case 182:
					{
					alt24 = 2;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 24, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				}
				break;
			case 166:
				{
				alt24 = 1;
				}
				break;
			case CASE:
			case CAST:
			case CONVERT:
			case COUNT:
			case DATEADD:
			case DATEDIFF:
			case DATEPART:
			case EXISTS:
			case NOT:
			case NUMBER:
			case STRING:
			case SYSTEMVAR:
			case TOKEN:
			case VARIABLE:
			case 164:
			case 167:
			case 169:
			case 183:
				{
				alt24 = 2;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 24, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:151:4: all_columns
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(151, 4);
				PushFollow(Follow._all_columns_in_column696);
				all_columns48=all_columns();
				PopFollow();

				adaptor.AddChild(root_0, all_columns48.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:152:4: expression ( WS SIMPLE_FILE )?
				{
				DebugLocation(152, 4);
				PushFollow(Follow._expression_in_column701);
				expression49=expression();
				PopFollow();

				stream_expression.Add(expression49.Tree);
				DebugLocation(152, 15);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:152:15: ( WS SIMPLE_FILE )?
				int alt23=2;
				try { DebugEnterSubRule(23);
				try { DebugEnterDecision(23, decisionCanBacktrack[23]);
				int LA23_0 = input.LA(1);

				if ((LA23_0==WS))
				{
					int LA23_1 = input.LA(2);

					if ((LA23_1==SIMPLE_FILE))
					{
						alt23 = 1;
					}
				}
				} finally { DebugExitDecision(23); }
				switch (alt23)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:152:16: WS SIMPLE_FILE
					{
					DebugLocation(152, 16);
					WS50=(IToken)Match(input,WS,Follow._WS_in_column704);  
					stream_WS.Add(WS50);

					DebugLocation(152, 19);
					SIMPLE_FILE51=(IToken)Match(input,SIMPLE_FILE,Follow._SIMPLE_FILE_in_column706);  
					stream_SIMPLE_FILE.Add(SIMPLE_FILE51);


					}
					break;

				}
				} finally { DebugExitSubRule(23); }



				{
				// AST REWRITE
				// elements: expression, SIMPLE_FILE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 152:33: -> ^( T_COLUMN expression ( SIMPLE_FILE )? )
				{
					DebugLocation(152, 36);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:152:36: ^( T_COLUMN expression ( SIMPLE_FILE )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(152, 38);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_COLUMN, "T_COLUMN"), root_1);

					DebugLocation(152, 47);
					adaptor.AddChild(root_1, stream_expression.NextTree());
					DebugLocation(152, 58);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:152:58: ( SIMPLE_FILE )?
					if (stream_SIMPLE_FILE.HasNext)
					{
						DebugLocation(152, 58);
						adaptor.AddChild(root_1, stream_SIMPLE_FILE.NextNode());

					}
					stream_SIMPLE_FILE.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("column", 8);
			LeaveRule("column", 8);
			LeaveRule_column();
	    }
	 	DebugLocation(153, 1);
		} finally { DebugExitRule(GrammarFileName, "column"); }
		return retval;

	}
	// $ANTLR end "column"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_all_columns() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_all_columns() {}

	// $ANTLR start "all_columns"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:155:1: all_columns : ( table_alias ( WS )? '.' ( WS )? )? '*' -> ^( T_ALLCOLUMNS ( table_alias )? ) ;
	[GrammarRule("all_columns")]
	private AstParserRuleReturnScope<object, IToken> all_columns()
	{
		EnterRule_all_columns();
		EnterRule("all_columns", 9);
		TraceIn("all_columns", 9);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS53 = default(IToken);
	    IToken char_literal54 = default(IToken);
	    IToken WS55 = default(IToken);
	    IToken char_literal56 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> table_alias52 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS53_tree = default(object);
	    object char_literal54_tree = default(object);
	    object WS55_tree = default(object);
	    object char_literal56_tree = default(object);
	    RewriteRuleITokenStream stream_170=new RewriteRuleITokenStream(adaptor,"token 170");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_166=new RewriteRuleITokenStream(adaptor,"token 166");
	    RewriteRuleSubtreeStream stream_table_alias=new RewriteRuleSubtreeStream(adaptor,"rule table_alias");
		try { DebugEnterRule(GrammarFileName, "all_columns");
		DebugLocation(155, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:156:2: ( ( table_alias ( WS )? '.' ( WS )? )? '*' -> ^( T_ALLCOLUMNS ( table_alias )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:156:4: ( table_alias ( WS )? '.' ( WS )? )? '*'
			{
			DebugLocation(156, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:156:4: ( table_alias ( WS )? '.' ( WS )? )?
			int alt27=2;
			try { DebugEnterSubRule(27);
			try { DebugEnterDecision(27, decisionCanBacktrack[27]);
			int LA27_0 = input.LA(1);

			if ((LA27_0==SIMPLE_FILE))
			{
				alt27 = 1;
			}
			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:156:5: table_alias ( WS )? '.' ( WS )?
				{
				DebugLocation(156, 5);
				PushFollow(Follow._table_alias_in_all_columns731);
				table_alias52=table_alias();
				PopFollow();

				stream_table_alias.Add(table_alias52.Tree);
				DebugLocation(156, 17);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:156:17: ( WS )?
				int alt25=2;
				try { DebugEnterSubRule(25);
				try { DebugEnterDecision(25, decisionCanBacktrack[25]);
				int LA25_0 = input.LA(1);

				if ((LA25_0==WS))
				{
					alt25 = 1;
				}
				} finally { DebugExitDecision(25); }
				switch (alt25)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:156:17: WS
					{
					DebugLocation(156, 17);
					WS53=(IToken)Match(input,WS,Follow._WS_in_all_columns733);  
					stream_WS.Add(WS53);


					}
					break;

				}
				} finally { DebugExitSubRule(25); }

				DebugLocation(156, 21);
				char_literal54=(IToken)Match(input,170,Follow._170_in_all_columns736);  
				stream_170.Add(char_literal54);

				DebugLocation(156, 25);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:156:25: ( WS )?
				int alt26=2;
				try { DebugEnterSubRule(26);
				try { DebugEnterDecision(26, decisionCanBacktrack[26]);
				int LA26_0 = input.LA(1);

				if ((LA26_0==WS))
				{
					alt26 = 1;
				}
				} finally { DebugExitDecision(26); }
				switch (alt26)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:156:25: WS
					{
					DebugLocation(156, 25);
					WS55=(IToken)Match(input,WS,Follow._WS_in_all_columns738);  
					stream_WS.Add(WS55);


					}
					break;

				}
				} finally { DebugExitSubRule(26); }


				}
				break;

			}
			} finally { DebugExitSubRule(27); }

			DebugLocation(156, 31);
			char_literal56=(IToken)Match(input,166,Follow._166_in_all_columns743);  
			stream_166.Add(char_literal56);



			{
			// AST REWRITE
			// elements: table_alias
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 156:35: -> ^( T_ALLCOLUMNS ( table_alias )? )
			{
				DebugLocation(156, 38);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:156:38: ^( T_ALLCOLUMNS ( table_alias )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(156, 40);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_ALLCOLUMNS, "T_ALLCOLUMNS"), root_1);

				DebugLocation(156, 53);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:156:53: ( table_alias )?
				if (stream_table_alias.HasNext)
				{
					DebugLocation(156, 53);
					adaptor.AddChild(root_1, stream_table_alias.NextTree());

				}
				stream_table_alias.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("all_columns", 9);
			LeaveRule("all_columns", 9);
			LeaveRule_all_columns();
	    }
	 	DebugLocation(157, 1);
		} finally { DebugExitRule(GrammarFileName, "all_columns"); }
		return retval;

	}
	// $ANTLR end "all_columns"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_into_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_into_clause() {}

	// $ANTLR start "into_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:159:1: into_clause : INTO WS file -> ^( T_INTO file ) ;
	[GrammarRule("into_clause")]
	private AstParserRuleReturnScope<object, IToken> into_clause()
	{
		EnterRule_into_clause();
		EnterRule("into_clause", 10);
		TraceIn("into_clause", 10);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken INTO57 = default(IToken);
	    IToken WS58 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file59 = default(AstParserRuleReturnScope<object, IToken>);

	    object INTO57_tree = default(object);
	    object WS58_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_INTO=new RewriteRuleITokenStream(adaptor,"token INTO");
	    RewriteRuleSubtreeStream stream_file=new RewriteRuleSubtreeStream(adaptor,"rule file");
		try { DebugEnterRule(GrammarFileName, "into_clause");
		DebugLocation(159, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:160:2: ( INTO WS file -> ^( T_INTO file ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:160:4: INTO WS file
			{
			DebugLocation(160, 4);
			INTO57=(IToken)Match(input,INTO,Follow._INTO_in_into_clause763);  
			stream_INTO.Add(INTO57);

			DebugLocation(160, 9);
			WS58=(IToken)Match(input,WS,Follow._WS_in_into_clause765);  
			stream_WS.Add(WS58);

			DebugLocation(160, 12);
			PushFollow(Follow._file_in_into_clause767);
			file59=file();
			PopFollow();

			stream_file.Add(file59.Tree);


			{
			// AST REWRITE
			// elements: file
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 160:17: -> ^( T_INTO file )
			{
				DebugLocation(160, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:160:20: ^( T_INTO file )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(160, 22);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_INTO, "T_INTO"), root_1);

				DebugLocation(160, 29);
				adaptor.AddChild(root_1, stream_file.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("into_clause", 10);
			LeaveRule("into_clause", 10);
			LeaveRule_into_clause();
	    }
	 	DebugLocation(161, 1);
		} finally { DebugExitRule(GrammarFileName, "into_clause"); }
		return retval;

	}
	// $ANTLR end "into_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_from_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_from_clause() {}

	// $ANTLR start "from_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:163:1: from_clause : FROM WS from_clause_item ( ( WS )? ',' ( WS )? from_clause_item )* ( WS table_alias )? -> ^( T_FROM ( table_alias )? ( from_clause_item )* ) ;
	[GrammarRule("from_clause")]
	private AstParserRuleReturnScope<object, IToken> from_clause()
	{
		EnterRule_from_clause();
		EnterRule("from_clause", 11);
		TraceIn("from_clause", 11);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken FROM60 = default(IToken);
	    IToken WS61 = default(IToken);
	    IToken WS63 = default(IToken);
	    IToken char_literal64 = default(IToken);
	    IToken WS65 = default(IToken);
	    IToken WS67 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> from_clause_item62 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> from_clause_item66 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> table_alias68 = default(AstParserRuleReturnScope<object, IToken>);

	    object FROM60_tree = default(object);
	    object WS61_tree = default(object);
	    object WS63_tree = default(object);
	    object char_literal64_tree = default(object);
	    object WS65_tree = default(object);
	    object WS67_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_FROM=new RewriteRuleITokenStream(adaptor,"token FROM");
	    RewriteRuleITokenStream stream_168=new RewriteRuleITokenStream(adaptor,"token 168");
	    RewriteRuleSubtreeStream stream_from_clause_item=new RewriteRuleSubtreeStream(adaptor,"rule from_clause_item");
	    RewriteRuleSubtreeStream stream_table_alias=new RewriteRuleSubtreeStream(adaptor,"rule table_alias");
		try { DebugEnterRule(GrammarFileName, "from_clause");
		DebugLocation(163, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:164:2: ( FROM WS from_clause_item ( ( WS )? ',' ( WS )? from_clause_item )* ( WS table_alias )? -> ^( T_FROM ( table_alias )? ( from_clause_item )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:164:4: FROM WS from_clause_item ( ( WS )? ',' ( WS )? from_clause_item )* ( WS table_alias )?
			{
			DebugLocation(164, 4);
			FROM60=(IToken)Match(input,FROM,Follow._FROM_in_from_clause787);  
			stream_FROM.Add(FROM60);

			DebugLocation(164, 9);
			WS61=(IToken)Match(input,WS,Follow._WS_in_from_clause789);  
			stream_WS.Add(WS61);

			DebugLocation(164, 12);
			PushFollow(Follow._from_clause_item_in_from_clause791);
			from_clause_item62=from_clause_item();
			PopFollow();

			stream_from_clause_item.Add(from_clause_item62.Tree);
			DebugLocation(164, 29);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:164:29: ( ( WS )? ',' ( WS )? from_clause_item )*
			try { DebugEnterSubRule(30);
			while (true)
			{
				int alt30=2;
				try { DebugEnterDecision(30, decisionCanBacktrack[30]);
				int LA30_0 = input.LA(1);

				if ((LA30_0==WS))
				{
					int LA30_1 = input.LA(2);

					if ((LA30_1==168))
					{
						alt30 = 1;
					}


				}
				else if ((LA30_0==168))
				{
					alt30 = 1;
				}


				} finally { DebugExitDecision(30); }
				switch ( alt30 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:164:30: ( WS )? ',' ( WS )? from_clause_item
					{
					DebugLocation(164, 30);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:164:30: ( WS )?
					int alt28=2;
					try { DebugEnterSubRule(28);
					try { DebugEnterDecision(28, decisionCanBacktrack[28]);
					int LA28_0 = input.LA(1);

					if ((LA28_0==WS))
					{
						alt28 = 1;
					}
					} finally { DebugExitDecision(28); }
					switch (alt28)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:164:30: WS
						{
						DebugLocation(164, 30);
						WS63=(IToken)Match(input,WS,Follow._WS_in_from_clause794);  
						stream_WS.Add(WS63);


						}
						break;

					}
					} finally { DebugExitSubRule(28); }

					DebugLocation(164, 34);
					char_literal64=(IToken)Match(input,168,Follow._168_in_from_clause797);  
					stream_168.Add(char_literal64);

					DebugLocation(164, 38);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:164:38: ( WS )?
					int alt29=2;
					try { DebugEnterSubRule(29);
					try { DebugEnterDecision(29, decisionCanBacktrack[29]);
					int LA29_0 = input.LA(1);

					if ((LA29_0==WS))
					{
						alt29 = 1;
					}
					} finally { DebugExitDecision(29); }
					switch (alt29)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:164:38: WS
						{
						DebugLocation(164, 38);
						WS65=(IToken)Match(input,WS,Follow._WS_in_from_clause799);  
						stream_WS.Add(WS65);


						}
						break;

					}
					} finally { DebugExitSubRule(29); }

					DebugLocation(164, 42);
					PushFollow(Follow._from_clause_item_in_from_clause802);
					from_clause_item66=from_clause_item();
					PopFollow();

					stream_from_clause_item.Add(from_clause_item66.Tree);

					}
					break;

				default:
					goto loop30;
				}
			}

			loop30:
				;

			} finally { DebugExitSubRule(30); }

			DebugLocation(164, 61);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:164:61: ( WS table_alias )?
			int alt31=2;
			try { DebugEnterSubRule(31);
			try { DebugEnterDecision(31, decisionCanBacktrack[31]);
			int LA31_0 = input.LA(1);

			if ((LA31_0==WS))
			{
				int LA31_1 = input.LA(2);

				if ((LA31_1==SIMPLE_FILE))
				{
					alt31 = 1;
				}
			}
			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:164:62: WS table_alias
				{
				DebugLocation(164, 62);
				WS67=(IToken)Match(input,WS,Follow._WS_in_from_clause807);  
				stream_WS.Add(WS67);

				DebugLocation(164, 65);
				PushFollow(Follow._table_alias_in_from_clause809);
				table_alias68=table_alias();
				PopFollow();

				stream_table_alias.Add(table_alias68.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(31); }



			{
			// AST REWRITE
			// elements: from_clause_item, table_alias
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 164:79: -> ^( T_FROM ( table_alias )? ( from_clause_item )* )
			{
				DebugLocation(164, 82);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:164:82: ^( T_FROM ( table_alias )? ( from_clause_item )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(164, 84);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FROM, "T_FROM"), root_1);

				DebugLocation(164, 91);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:164:91: ( table_alias )?
				if (stream_table_alias.HasNext)
				{
					DebugLocation(164, 91);
					adaptor.AddChild(root_1, stream_table_alias.NextTree());

				}
				stream_table_alias.Reset();
				DebugLocation(164, 104);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:164:104: ( from_clause_item )*
				while ( stream_from_clause_item.HasNext )
				{
					DebugLocation(164, 104);
					adaptor.AddChild(root_1, stream_from_clause_item.NextTree());

				}
				stream_from_clause_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("from_clause", 11);
			LeaveRule("from_clause", 11);
			LeaveRule_from_clause();
	    }
	 	DebugLocation(166, 1);
		} finally { DebugExitRule(GrammarFileName, "from_clause"); }
		return retval;

	}
	// $ANTLR end "from_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_from_clause_item() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_from_clause_item() {}

	// $ANTLR start "from_clause_item"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:168:1: from_clause_item : ( STRING -> ^( T_FILE STRING ) | file | subquery | view_name ( ( WS )? '(' ( expression_list )? ')' )? -> ^( T_VIEW view_name ( expression_list )? ) );
	[GrammarRule("from_clause_item")]
	private AstParserRuleReturnScope<object, IToken> from_clause_item()
	{
		EnterRule_from_clause_item();
		EnterRule("from_clause_item", 12);
		TraceIn("from_clause_item", 12);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken STRING69 = default(IToken);
	    IToken WS73 = default(IToken);
	    IToken char_literal74 = default(IToken);
	    IToken char_literal76 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file70 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> subquery71 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> view_name72 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list75 = default(AstParserRuleReturnScope<object, IToken>);

	    object STRING69_tree = default(object);
	    object WS73_tree = default(object);
	    object char_literal74_tree = default(object);
	    object char_literal76_tree = default(object);
	    RewriteRuleITokenStream stream_164=new RewriteRuleITokenStream(adaptor,"token 164");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_165=new RewriteRuleITokenStream(adaptor,"token 165");
	    RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
	    RewriteRuleSubtreeStream stream_view_name=new RewriteRuleSubtreeStream(adaptor,"rule view_name");
	    RewriteRuleSubtreeStream stream_expression_list=new RewriteRuleSubtreeStream(adaptor,"rule expression_list");
		try { DebugEnterRule(GrammarFileName, "from_clause_item");
		DebugLocation(168, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:169:2: ( STRING -> ^( T_FILE STRING ) | file | subquery | view_name ( ( WS )? '(' ( expression_list )? ')' )? -> ^( T_VIEW view_name ( expression_list )? ) )
			int alt35=4;
			try { DebugEnterDecision(35, decisionCanBacktrack[35]);
			switch (input.LA(1))
			{
			case STRING:
				{
				alt35 = 1;
				}
				break;
			case SIMPLE_FILE:
			case 179:
				{
				alt35 = 2;
				}
				break;
			case 164:
				{
				alt35 = 3;
				}
				break;
			case TOKEN:
				{
				alt35 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 35, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(35); }
			switch (alt35)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:169:4: STRING
				{
				DebugLocation(169, 4);
				STRING69=(IToken)Match(input,STRING,Follow._STRING_in_from_clause_item836);  
				stream_STRING.Add(STRING69);



				{
				// AST REWRITE
				// elements: STRING
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 169:11: -> ^( T_FILE STRING )
				{
					DebugLocation(169, 14);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:169:14: ^( T_FILE STRING )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(169, 16);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILE, "T_FILE"), root_1);

					DebugLocation(169, 23);
					adaptor.AddChild(root_1, stream_STRING.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:170:4: file
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(170, 4);
				PushFollow(Follow._file_in_from_clause_item849);
				file70=file();
				PopFollow();

				adaptor.AddChild(root_0, file70.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:171:4: subquery
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(171, 4);
				PushFollow(Follow._subquery_in_from_clause_item854);
				subquery71=subquery();
				PopFollow();

				adaptor.AddChild(root_0, subquery71.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:172:4: view_name ( ( WS )? '(' ( expression_list )? ')' )?
				{
				DebugLocation(172, 4);
				PushFollow(Follow._view_name_in_from_clause_item859);
				view_name72=view_name();
				PopFollow();

				stream_view_name.Add(view_name72.Tree);
				DebugLocation(172, 14);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:172:14: ( ( WS )? '(' ( expression_list )? ')' )?
				int alt34=2;
				try { DebugEnterSubRule(34);
				try { DebugEnterDecision(34, decisionCanBacktrack[34]);
				int LA34_0 = input.LA(1);

				if ((LA34_0==WS))
				{
					int LA34_1 = input.LA(2);

					if ((LA34_1==164))
					{
						alt34 = 1;
					}
				}
				else if ((LA34_0==164))
				{
					alt34 = 1;
				}
				} finally { DebugExitDecision(34); }
				switch (alt34)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:172:15: ( WS )? '(' ( expression_list )? ')'
					{
					DebugLocation(172, 15);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:172:15: ( WS )?
					int alt32=2;
					try { DebugEnterSubRule(32);
					try { DebugEnterDecision(32, decisionCanBacktrack[32]);
					int LA32_0 = input.LA(1);

					if ((LA32_0==WS))
					{
						alt32 = 1;
					}
					} finally { DebugExitDecision(32); }
					switch (alt32)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:172:15: WS
						{
						DebugLocation(172, 15);
						WS73=(IToken)Match(input,WS,Follow._WS_in_from_clause_item862);  
						stream_WS.Add(WS73);


						}
						break;

					}
					} finally { DebugExitSubRule(32); }

					DebugLocation(172, 19);
					char_literal74=(IToken)Match(input,164,Follow._164_in_from_clause_item865);  
					stream_164.Add(char_literal74);

					DebugLocation(172, 23);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:172:23: ( expression_list )?
					int alt33=2;
					try { DebugEnterSubRule(33);
					try { DebugEnterDecision(33, decisionCanBacktrack[33]);
					int LA33_0 = input.LA(1);

					if (((LA33_0>=CASE && LA33_0<=CAST)||(LA33_0>=CONVERT && LA33_0<=COUNT)||(LA33_0>=DATEADD && LA33_0<=DATEPART)||LA33_0==EXISTS||(LA33_0>=NOT && LA33_0<=NUMBER)||LA33_0==SIMPLE_FILE||(LA33_0>=STRING && LA33_0<=SYSTEMVAR)||LA33_0==TOKEN||LA33_0==VARIABLE||LA33_0==164||LA33_0==167||LA33_0==169||LA33_0==183))
					{
						alt33 = 1;
					}
					} finally { DebugExitDecision(33); }
					switch (alt33)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:172:23: expression_list
						{
						DebugLocation(172, 23);
						PushFollow(Follow._expression_list_in_from_clause_item867);
						expression_list75=expression_list();
						PopFollow();

						stream_expression_list.Add(expression_list75.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(33); }

					DebugLocation(172, 40);
					char_literal76=(IToken)Match(input,165,Follow._165_in_from_clause_item870);  
					stream_165.Add(char_literal76);


					}
					break;

				}
				} finally { DebugExitSubRule(34); }



				{
				// AST REWRITE
				// elements: view_name, expression_list
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 172:46: -> ^( T_VIEW view_name ( expression_list )? )
				{
					DebugLocation(172, 49);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:172:49: ^( T_VIEW view_name ( expression_list )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(172, 51);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_VIEW, "T_VIEW"), root_1);

					DebugLocation(172, 58);
					adaptor.AddChild(root_1, stream_view_name.NextTree());
					DebugLocation(172, 68);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:172:68: ( expression_list )?
					if (stream_expression_list.HasNext)
					{
						DebugLocation(172, 68);
						adaptor.AddChild(root_1, stream_expression_list.NextTree());

					}
					stream_expression_list.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("from_clause_item", 12);
			LeaveRule("from_clause_item", 12);
			LeaveRule_from_clause_item();
	    }
	 	DebugLocation(173, 1);
		} finally { DebugExitRule(GrammarFileName, "from_clause_item"); }
		return retval;

	}
	// $ANTLR end "from_clause_item"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_subquery() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_subquery() {}

	// $ANTLR start "subquery"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:175:1: subquery : '(' ( WS )? select_command ( WS )? ')' -> ^( T_SUBQUERY select_command ) ;
	[GrammarRule("subquery")]
	private AstParserRuleReturnScope<object, IToken> subquery()
	{
		EnterRule_subquery();
		EnterRule("subquery", 13);
		TraceIn("subquery", 13);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal77 = default(IToken);
	    IToken WS78 = default(IToken);
	    IToken WS80 = default(IToken);
	    IToken char_literal81 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> select_command79 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal77_tree = default(object);
	    object WS78_tree = default(object);
	    object WS80_tree = default(object);
	    object char_literal81_tree = default(object);
	    RewriteRuleITokenStream stream_164=new RewriteRuleITokenStream(adaptor,"token 164");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_165=new RewriteRuleITokenStream(adaptor,"token 165");
	    RewriteRuleSubtreeStream stream_select_command=new RewriteRuleSubtreeStream(adaptor,"rule select_command");
		try { DebugEnterRule(GrammarFileName, "subquery");
		DebugLocation(175, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:176:2: ( '(' ( WS )? select_command ( WS )? ')' -> ^( T_SUBQUERY select_command ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:176:4: '(' ( WS )? select_command ( WS )? ')'
			{
			DebugLocation(176, 4);
			char_literal77=(IToken)Match(input,164,Follow._164_in_subquery895);  
			stream_164.Add(char_literal77);

			DebugLocation(176, 8);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:176:8: ( WS )?
			int alt36=2;
			try { DebugEnterSubRule(36);
			try { DebugEnterDecision(36, decisionCanBacktrack[36]);
			int LA36_0 = input.LA(1);

			if ((LA36_0==WS))
			{
				alt36 = 1;
			}
			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:176:8: WS
				{
				DebugLocation(176, 8);
				WS78=(IToken)Match(input,WS,Follow._WS_in_subquery897);  
				stream_WS.Add(WS78);


				}
				break;

			}
			} finally { DebugExitSubRule(36); }

			DebugLocation(176, 12);
			PushFollow(Follow._select_command_in_subquery900);
			select_command79=select_command();
			PopFollow();

			stream_select_command.Add(select_command79.Tree);
			DebugLocation(176, 27);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:176:27: ( WS )?
			int alt37=2;
			try { DebugEnterSubRule(37);
			try { DebugEnterDecision(37, decisionCanBacktrack[37]);
			int LA37_0 = input.LA(1);

			if ((LA37_0==WS))
			{
				alt37 = 1;
			}
			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:176:27: WS
				{
				DebugLocation(176, 27);
				WS80=(IToken)Match(input,WS,Follow._WS_in_subquery902);  
				stream_WS.Add(WS80);


				}
				break;

			}
			} finally { DebugExitSubRule(37); }

			DebugLocation(176, 31);
			char_literal81=(IToken)Match(input,165,Follow._165_in_subquery905);  
			stream_165.Add(char_literal81);



			{
			// AST REWRITE
			// elements: select_command
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 176:35: -> ^( T_SUBQUERY select_command )
			{
				DebugLocation(176, 38);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:176:38: ^( T_SUBQUERY select_command )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(176, 40);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SUBQUERY, "T_SUBQUERY"), root_1);

				DebugLocation(176, 51);
				adaptor.AddChild(root_1, stream_select_command.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("subquery", 13);
			LeaveRule("subquery", 13);
			LeaveRule_subquery();
	    }
	 	DebugLocation(177, 1);
		} finally { DebugExitRule(GrammarFileName, "subquery"); }
		return retval;

	}
	// $ANTLR end "subquery"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file() {}

	// $ANTLR start "file"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:179:1: file : ( '[' ( WS )? file_spec ( WS file_option )* ( WS )? ']' -> ^( T_FILE file_spec ( file_option )* ) | '[' ( WS )? subquery ( WS )? ']' -> ^( T_FILESUBQUERY subquery ) | SIMPLE_FILE -> ^( T_FILE SIMPLE_FILE ) );
	[GrammarRule("file")]
	private AstParserRuleReturnScope<object, IToken> file()
	{
		EnterRule_file();
		EnterRule("file", 14);
		TraceIn("file", 14);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal82 = default(IToken);
	    IToken WS83 = default(IToken);
	    IToken WS85 = default(IToken);
	    IToken WS87 = default(IToken);
	    IToken char_literal88 = default(IToken);
	    IToken char_literal89 = default(IToken);
	    IToken WS90 = default(IToken);
	    IToken WS92 = default(IToken);
	    IToken char_literal93 = default(IToken);
	    IToken SIMPLE_FILE94 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file_spec84 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> file_option86 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> subquery91 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal82_tree = default(object);
	    object WS83_tree = default(object);
	    object WS85_tree = default(object);
	    object WS87_tree = default(object);
	    object char_literal88_tree = default(object);
	    object char_literal89_tree = default(object);
	    object WS90_tree = default(object);
	    object WS92_tree = default(object);
	    object char_literal93_tree = default(object);
	    object SIMPLE_FILE94_tree = default(object);
	    RewriteRuleITokenStream stream_180=new RewriteRuleITokenStream(adaptor,"token 180");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_SIMPLE_FILE=new RewriteRuleITokenStream(adaptor,"token SIMPLE_FILE");
	    RewriteRuleITokenStream stream_179=new RewriteRuleITokenStream(adaptor,"token 179");
	    RewriteRuleSubtreeStream stream_file_option=new RewriteRuleSubtreeStream(adaptor,"rule file_option");
	    RewriteRuleSubtreeStream stream_file_spec=new RewriteRuleSubtreeStream(adaptor,"rule file_spec");
	    RewriteRuleSubtreeStream stream_subquery=new RewriteRuleSubtreeStream(adaptor,"rule subquery");
		try { DebugEnterRule(GrammarFileName, "file");
		DebugLocation(179, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:180:2: ( '[' ( WS )? file_spec ( WS file_option )* ( WS )? ']' -> ^( T_FILE file_spec ( file_option )* ) | '[' ( WS )? subquery ( WS )? ']' -> ^( T_FILESUBQUERY subquery ) | SIMPLE_FILE -> ^( T_FILE SIMPLE_FILE ) )
			int alt43=3;
			try { DebugEnterDecision(43, decisionCanBacktrack[43]);
			int LA43_0 = input.LA(1);

			if ((LA43_0==179))
			{
				switch (input.LA(2))
				{
				case WS:
					{
					int LA43_3 = input.LA(3);

					if ((LA43_3==STRING||LA43_3==VARIABLE))
					{
						alt43 = 1;
					}
					else if ((LA43_3==164))
					{
						alt43 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 43, 3, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case STRING:
				case VARIABLE:
					{
					alt43 = 1;
					}
					break;
				case 164:
					{
					alt43 = 2;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 43, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else if ((LA43_0==SIMPLE_FILE))
			{
				alt43 = 3;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 43, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(43); }
			switch (alt43)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:180:4: '[' ( WS )? file_spec ( WS file_option )* ( WS )? ']'
				{
				DebugLocation(180, 4);
				char_literal82=(IToken)Match(input,179,Follow._179_in_file924);  
				stream_179.Add(char_literal82);

				DebugLocation(180, 8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:180:8: ( WS )?
				int alt38=2;
				try { DebugEnterSubRule(38);
				try { DebugEnterDecision(38, decisionCanBacktrack[38]);
				int LA38_0 = input.LA(1);

				if ((LA38_0==WS))
				{
					alt38 = 1;
				}
				} finally { DebugExitDecision(38); }
				switch (alt38)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:180:8: WS
					{
					DebugLocation(180, 8);
					WS83=(IToken)Match(input,WS,Follow._WS_in_file926);  
					stream_WS.Add(WS83);


					}
					break;

				}
				} finally { DebugExitSubRule(38); }

				DebugLocation(180, 12);
				PushFollow(Follow._file_spec_in_file929);
				file_spec84=file_spec();
				PopFollow();

				stream_file_spec.Add(file_spec84.Tree);
				DebugLocation(180, 22);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:180:22: ( WS file_option )*
				try { DebugEnterSubRule(39);
				while (true)
				{
					int alt39=2;
					try { DebugEnterDecision(39, decisionCanBacktrack[39]);
					int LA39_0 = input.LA(1);

					if ((LA39_0==WS))
					{
						int LA39_1 = input.LA(2);

						if ((LA39_1==169))
						{
							alt39 = 1;
						}


					}


					} finally { DebugExitDecision(39); }
					switch ( alt39 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:180:23: WS file_option
						{
						DebugLocation(180, 23);
						WS85=(IToken)Match(input,WS,Follow._WS_in_file932);  
						stream_WS.Add(WS85);

						DebugLocation(180, 26);
						PushFollow(Follow._file_option_in_file934);
						file_option86=file_option();
						PopFollow();

						stream_file_option.Add(file_option86.Tree);

						}
						break;

					default:
						goto loop39;
					}
				}

				loop39:
					;

				} finally { DebugExitSubRule(39); }

				DebugLocation(180, 40);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:180:40: ( WS )?
				int alt40=2;
				try { DebugEnterSubRule(40);
				try { DebugEnterDecision(40, decisionCanBacktrack[40]);
				int LA40_0 = input.LA(1);

				if ((LA40_0==WS))
				{
					alt40 = 1;
				}
				} finally { DebugExitDecision(40); }
				switch (alt40)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:180:40: WS
					{
					DebugLocation(180, 40);
					WS87=(IToken)Match(input,WS,Follow._WS_in_file938);  
					stream_WS.Add(WS87);


					}
					break;

				}
				} finally { DebugExitSubRule(40); }

				DebugLocation(180, 44);
				char_literal88=(IToken)Match(input,180,Follow._180_in_file941);  
				stream_180.Add(char_literal88);



				{
				// AST REWRITE
				// elements: file_option, file_spec
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 180:48: -> ^( T_FILE file_spec ( file_option )* )
				{
					DebugLocation(180, 51);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:180:51: ^( T_FILE file_spec ( file_option )* )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(180, 53);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILE, "T_FILE"), root_1);

					DebugLocation(180, 60);
					adaptor.AddChild(root_1, stream_file_spec.NextTree());
					DebugLocation(180, 70);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:180:70: ( file_option )*
					while ( stream_file_option.HasNext )
					{
						DebugLocation(180, 70);
						adaptor.AddChild(root_1, stream_file_option.NextTree());

					}
					stream_file_option.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:181:4: '[' ( WS )? subquery ( WS )? ']'
				{
				DebugLocation(181, 4);
				char_literal89=(IToken)Match(input,179,Follow._179_in_file958);  
				stream_179.Add(char_literal89);

				DebugLocation(181, 8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:181:8: ( WS )?
				int alt41=2;
				try { DebugEnterSubRule(41);
				try { DebugEnterDecision(41, decisionCanBacktrack[41]);
				int LA41_0 = input.LA(1);

				if ((LA41_0==WS))
				{
					alt41 = 1;
				}
				} finally { DebugExitDecision(41); }
				switch (alt41)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:181:8: WS
					{
					DebugLocation(181, 8);
					WS90=(IToken)Match(input,WS,Follow._WS_in_file960);  
					stream_WS.Add(WS90);


					}
					break;

				}
				} finally { DebugExitSubRule(41); }

				DebugLocation(181, 12);
				PushFollow(Follow._subquery_in_file963);
				subquery91=subquery();
				PopFollow();

				stream_subquery.Add(subquery91.Tree);
				DebugLocation(181, 21);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:181:21: ( WS )?
				int alt42=2;
				try { DebugEnterSubRule(42);
				try { DebugEnterDecision(42, decisionCanBacktrack[42]);
				int LA42_0 = input.LA(1);

				if ((LA42_0==WS))
				{
					alt42 = 1;
				}
				} finally { DebugExitDecision(42); }
				switch (alt42)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:181:21: WS
					{
					DebugLocation(181, 21);
					WS92=(IToken)Match(input,WS,Follow._WS_in_file965);  
					stream_WS.Add(WS92);


					}
					break;

				}
				} finally { DebugExitSubRule(42); }

				DebugLocation(181, 25);
				char_literal93=(IToken)Match(input,180,Follow._180_in_file968);  
				stream_180.Add(char_literal93);



				{
				// AST REWRITE
				// elements: subquery
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 181:29: -> ^( T_FILESUBQUERY subquery )
				{
					DebugLocation(181, 32);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:181:32: ^( T_FILESUBQUERY subquery )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(181, 34);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILESUBQUERY, "T_FILESUBQUERY"), root_1);

					DebugLocation(181, 49);
					adaptor.AddChild(root_1, stream_subquery.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:182:4: SIMPLE_FILE
				{
				DebugLocation(182, 4);
				SIMPLE_FILE94=(IToken)Match(input,SIMPLE_FILE,Follow._SIMPLE_FILE_in_file981);  
				stream_SIMPLE_FILE.Add(SIMPLE_FILE94);



				{
				// AST REWRITE
				// elements: SIMPLE_FILE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 182:16: -> ^( T_FILE SIMPLE_FILE )
				{
					DebugLocation(182, 19);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:182:19: ^( T_FILE SIMPLE_FILE )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(182, 21);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILE, "T_FILE"), root_1);

					DebugLocation(182, 28);
					adaptor.AddChild(root_1, stream_SIMPLE_FILE.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file", 14);
			LeaveRule("file", 14);
			LeaveRule_file();
	    }
	 	DebugLocation(183, 1);
		} finally { DebugExitRule(GrammarFileName, "file"); }
		return retval;

	}
	// $ANTLR end "file"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_spec() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_spec() {}

	// $ANTLR start "file_spec"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:185:1: file_spec : ( string | variable );
	[GrammarRule("file_spec")]
	private AstParserRuleReturnScope<object, IToken> file_spec()
	{
		EnterRule_file_spec();
		EnterRule("file_spec", 15);
		TraceIn("file_spec", 15);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> string95 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> variable96 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "file_spec");
		DebugLocation(185, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:186:2: ( string | variable )
			int alt44=2;
			try { DebugEnterDecision(44, decisionCanBacktrack[44]);
			int LA44_0 = input.LA(1);

			if ((LA44_0==STRING))
			{
				alt44 = 1;
			}
			else if ((LA44_0==VARIABLE))
			{
				alt44 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 44, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(44); }
			switch (alt44)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:186:4: string
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(186, 4);
				PushFollow(Follow._string_in_file_spec1000);
				string95=@string();
				PopFollow();

				adaptor.AddChild(root_0, string95.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:187:4: variable
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(187, 4);
				PushFollow(Follow._variable_in_file_spec1005);
				variable96=variable();
				PopFollow();

				adaptor.AddChild(root_0, variable96.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_spec", 15);
			LeaveRule("file_spec", 15);
			LeaveRule_file_spec();
	    }
	 	DebugLocation(188, 1);
		} finally { DebugExitRule(GrammarFileName, "file_spec"); }
		return retval;

	}
	// $ANTLR end "file_spec"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_option() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_option() {}

	// $ANTLR start "file_option"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:190:1: file_option : '-' file_option_name ( ( WS )? '=' ( WS )? file_option_value )? -> ^( T_FILEOPTION file_option_name ( file_option_value )? ) ;
	[GrammarRule("file_option")]
	private AstParserRuleReturnScope<object, IToken> file_option()
	{
		EnterRule_file_option();
		EnterRule("file_option", 16);
		TraceIn("file_option", 16);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal97 = default(IToken);
	    IToken WS99 = default(IToken);
	    IToken char_literal100 = default(IToken);
	    IToken WS101 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file_option_name98 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> file_option_value102 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal97_tree = default(object);
	    object WS99_tree = default(object);
	    object char_literal100_tree = default(object);
	    object WS101_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_169=new RewriteRuleITokenStream(adaptor,"token 169");
	    RewriteRuleITokenStream stream_176=new RewriteRuleITokenStream(adaptor,"token 176");
	    RewriteRuleSubtreeStream stream_file_option_name=new RewriteRuleSubtreeStream(adaptor,"rule file_option_name");
	    RewriteRuleSubtreeStream stream_file_option_value=new RewriteRuleSubtreeStream(adaptor,"rule file_option_value");
		try { DebugEnterRule(GrammarFileName, "file_option");
		DebugLocation(190, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:191:2: ( '-' file_option_name ( ( WS )? '=' ( WS )? file_option_value )? -> ^( T_FILEOPTION file_option_name ( file_option_value )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:191:4: '-' file_option_name ( ( WS )? '=' ( WS )? file_option_value )?
			{
			DebugLocation(191, 4);
			char_literal97=(IToken)Match(input,169,Follow._169_in_file_option1017);  
			stream_169.Add(char_literal97);

			DebugLocation(191, 8);
			PushFollow(Follow._file_option_name_in_file_option1019);
			file_option_name98=file_option_name();
			PopFollow();

			stream_file_option_name.Add(file_option_name98.Tree);
			DebugLocation(191, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:191:25: ( ( WS )? '=' ( WS )? file_option_value )?
			int alt47=2;
			try { DebugEnterSubRule(47);
			try { DebugEnterDecision(47, decisionCanBacktrack[47]);
			int LA47_0 = input.LA(1);

			if ((LA47_0==WS))
			{
				int LA47_1 = input.LA(2);

				if ((LA47_1==176))
				{
					alt47 = 1;
				}
			}
			else if ((LA47_0==176))
			{
				alt47 = 1;
			}
			} finally { DebugExitDecision(47); }
			switch (alt47)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:191:27: ( WS )? '=' ( WS )? file_option_value
				{
				DebugLocation(191, 27);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:191:27: ( WS )?
				int alt45=2;
				try { DebugEnterSubRule(45);
				try { DebugEnterDecision(45, decisionCanBacktrack[45]);
				int LA45_0 = input.LA(1);

				if ((LA45_0==WS))
				{
					alt45 = 1;
				}
				} finally { DebugExitDecision(45); }
				switch (alt45)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:191:27: WS
					{
					DebugLocation(191, 27);
					WS99=(IToken)Match(input,WS,Follow._WS_in_file_option1023);  
					stream_WS.Add(WS99);


					}
					break;

				}
				} finally { DebugExitSubRule(45); }

				DebugLocation(191, 31);
				char_literal100=(IToken)Match(input,176,Follow._176_in_file_option1026);  
				stream_176.Add(char_literal100);

				DebugLocation(191, 35);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:191:35: ( WS )?
				int alt46=2;
				try { DebugEnterSubRule(46);
				try { DebugEnterDecision(46, decisionCanBacktrack[46]);
				int LA46_0 = input.LA(1);

				if ((LA46_0==WS))
				{
					alt46 = 1;
				}
				} finally { DebugExitDecision(46); }
				switch (alt46)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:191:35: WS
					{
					DebugLocation(191, 35);
					WS101=(IToken)Match(input,WS,Follow._WS_in_file_option1028);  
					stream_WS.Add(WS101);


					}
					break;

				}
				} finally { DebugExitSubRule(46); }

				DebugLocation(191, 39);
				PushFollow(Follow._file_option_value_in_file_option1031);
				file_option_value102=file_option_value();
				PopFollow();

				stream_file_option_value.Add(file_option_value102.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(47); }



			{
			// AST REWRITE
			// elements: file_option_value, file_option_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 191:59: -> ^( T_FILEOPTION file_option_name ( file_option_value )? )
			{
				DebugLocation(191, 62);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:191:62: ^( T_FILEOPTION file_option_name ( file_option_value )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(191, 64);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILEOPTION, "T_FILEOPTION"), root_1);

				DebugLocation(191, 77);
				adaptor.AddChild(root_1, stream_file_option_name.NextTree());
				DebugLocation(191, 94);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:191:94: ( file_option_value )?
				if (stream_file_option_value.HasNext)
				{
					DebugLocation(191, 94);
					adaptor.AddChild(root_1, stream_file_option_value.NextTree());

				}
				stream_file_option_value.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_option", 16);
			LeaveRule("file_option", 16);
			LeaveRule_file_option();
	    }
	 	DebugLocation(192, 1);
		} finally { DebugExitRule(GrammarFileName, "file_option"); }
		return retval;

	}
	// $ANTLR end "file_option"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_option_name() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_option_name() {}

	// $ANTLR start "file_option_name"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:194:1: file_option_name : TOKEN ;
	[GrammarRule("file_option_name")]
	private AstParserRuleReturnScope<object, IToken> file_option_name()
	{
		EnterRule_file_option_name();
		EnterRule("file_option_name", 17);
		TraceIn("file_option_name", 17);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN103 = default(IToken);

	    object TOKEN103_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "file_option_name");
		DebugLocation(194, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:195:2: ( TOKEN )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:195:4: TOKEN
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(195, 4);
			TOKEN103=(IToken)Match(input,TOKEN,Follow._TOKEN_in_file_option_name1055); 
			TOKEN103_tree = (object)adaptor.Create(TOKEN103);
			adaptor.AddChild(root_0, TOKEN103_tree);


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_option_name", 17);
			LeaveRule("file_option_name", 17);
			LeaveRule_file_option_name();
	    }
	 	DebugLocation(196, 1);
		} finally { DebugExitRule(GrammarFileName, "file_option_name"); }
		return retval;

	}
	// $ANTLR end "file_option_name"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_option_value() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_option_value() {}

	// $ANTLR start "file_option_value"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:198:1: file_option_value : ( TOKEN | STRING | NUMBER | variable );
	[GrammarRule("file_option_value")]
	private AstParserRuleReturnScope<object, IToken> file_option_value()
	{
		EnterRule_file_option_value();
		EnterRule("file_option_value", 18);
		TraceIn("file_option_value", 18);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN104 = default(IToken);
	    IToken STRING105 = default(IToken);
	    IToken NUMBER106 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> variable107 = default(AstParserRuleReturnScope<object, IToken>);

	    object TOKEN104_tree = default(object);
	    object STRING105_tree = default(object);
	    object NUMBER106_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "file_option_value");
		DebugLocation(198, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:199:2: ( TOKEN | STRING | NUMBER | variable )
			int alt48=4;
			try { DebugEnterDecision(48, decisionCanBacktrack[48]);
			switch (input.LA(1))
			{
			case TOKEN:
				{
				alt48 = 1;
				}
				break;
			case STRING:
				{
				alt48 = 2;
				}
				break;
			case NUMBER:
				{
				alt48 = 3;
				}
				break;
			case VARIABLE:
				{
				alt48 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 48, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(48); }
			switch (alt48)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:199:4: TOKEN
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(199, 4);
				TOKEN104=(IToken)Match(input,TOKEN,Follow._TOKEN_in_file_option_value1067); 
				TOKEN104_tree = (object)adaptor.Create(TOKEN104);
				adaptor.AddChild(root_0, TOKEN104_tree);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:199:12: STRING
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(199, 12);
				STRING105=(IToken)Match(input,STRING,Follow._STRING_in_file_option_value1071); 
				STRING105_tree = (object)adaptor.Create(STRING105);
				adaptor.AddChild(root_0, STRING105_tree);


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:199:21: NUMBER
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(199, 21);
				NUMBER106=(IToken)Match(input,NUMBER,Follow._NUMBER_in_file_option_value1075); 
				NUMBER106_tree = (object)adaptor.Create(NUMBER106);
				adaptor.AddChild(root_0, NUMBER106_tree);


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:199:30: variable
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(199, 30);
				PushFollow(Follow._variable_in_file_option_value1079);
				variable107=variable();
				PopFollow();

				adaptor.AddChild(root_0, variable107.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_option_value", 18);
			LeaveRule("file_option_value", 18);
			LeaveRule_file_option_value();
	    }
	 	DebugLocation(200, 1);
		} finally { DebugExitRule(GrammarFileName, "file_option_value"); }
		return retval;

	}
	// $ANTLR end "file_option_value"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_where_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_where_clause() {}

	// $ANTLR start "where_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:202:1: where_clause : WHERE WS expression -> ^( T_WHERE expression ) ;
	[GrammarRule("where_clause")]
	private AstParserRuleReturnScope<object, IToken> where_clause()
	{
		EnterRule_where_clause();
		EnterRule("where_clause", 19);
		TraceIn("where_clause", 19);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WHERE108 = default(IToken);
	    IToken WS109 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression110 = default(AstParserRuleReturnScope<object, IToken>);

	    object WHERE108_tree = default(object);
	    object WS109_tree = default(object);
	    RewriteRuleITokenStream stream_WHERE=new RewriteRuleITokenStream(adaptor,"token WHERE");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "where_clause");
		DebugLocation(202, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:203:2: ( WHERE WS expression -> ^( T_WHERE expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:203:4: WHERE WS expression
			{
			DebugLocation(203, 4);
			WHERE108=(IToken)Match(input,WHERE,Follow._WHERE_in_where_clause1091);  
			stream_WHERE.Add(WHERE108);

			DebugLocation(203, 10);
			WS109=(IToken)Match(input,WS,Follow._WS_in_where_clause1093);  
			stream_WS.Add(WS109);

			DebugLocation(203, 13);
			PushFollow(Follow._expression_in_where_clause1095);
			expression110=expression();
			PopFollow();

			stream_expression.Add(expression110.Tree);


			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 204:2: -> ^( T_WHERE expression )
			{
				DebugLocation(204, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:204:5: ^( T_WHERE expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(204, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_WHERE, "T_WHERE"), root_1);

				DebugLocation(204, 15);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("where_clause", 19);
			LeaveRule("where_clause", 19);
			LeaveRule_where_clause();
	    }
	 	DebugLocation(205, 1);
		} finally { DebugExitRule(GrammarFileName, "where_clause"); }
		return retval;

	}
	// $ANTLR end "where_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_groupby_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_groupby_clause() {}

	// $ANTLR start "groupby_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:206:1: groupby_clause : GROUP WS BY WS orderby_column_list -> ^( T_GROUPBY orderby_column_list ) ;
	[GrammarRule("groupby_clause")]
	private AstParserRuleReturnScope<object, IToken> groupby_clause()
	{
		EnterRule_groupby_clause();
		EnterRule("groupby_clause", 20);
		TraceIn("groupby_clause", 20);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken GROUP111 = default(IToken);
	    IToken WS112 = default(IToken);
	    IToken BY113 = default(IToken);
	    IToken WS114 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> orderby_column_list115 = default(AstParserRuleReturnScope<object, IToken>);

	    object GROUP111_tree = default(object);
	    object WS112_tree = default(object);
	    object BY113_tree = default(object);
	    object WS114_tree = default(object);
	    RewriteRuleITokenStream stream_GROUP=new RewriteRuleITokenStream(adaptor,"token GROUP");
	    RewriteRuleITokenStream stream_BY=new RewriteRuleITokenStream(adaptor,"token BY");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_orderby_column_list=new RewriteRuleSubtreeStream(adaptor,"rule orderby_column_list");
		try { DebugEnterRule(GrammarFileName, "groupby_clause");
		DebugLocation(206, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:207:2: ( GROUP WS BY WS orderby_column_list -> ^( T_GROUPBY orderby_column_list ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:207:4: GROUP WS BY WS orderby_column_list
			{
			DebugLocation(207, 4);
			GROUP111=(IToken)Match(input,GROUP,Follow._GROUP_in_groupby_clause1114);  
			stream_GROUP.Add(GROUP111);

			DebugLocation(207, 10);
			WS112=(IToken)Match(input,WS,Follow._WS_in_groupby_clause1116);  
			stream_WS.Add(WS112);

			DebugLocation(207, 13);
			BY113=(IToken)Match(input,BY,Follow._BY_in_groupby_clause1118);  
			stream_BY.Add(BY113);

			DebugLocation(207, 16);
			WS114=(IToken)Match(input,WS,Follow._WS_in_groupby_clause1120);  
			stream_WS.Add(WS114);

			DebugLocation(207, 19);
			PushFollow(Follow._orderby_column_list_in_groupby_clause1122);
			orderby_column_list115=orderby_column_list();
			PopFollow();

			stream_orderby_column_list.Add(orderby_column_list115.Tree);


			{
			// AST REWRITE
			// elements: orderby_column_list
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 208:2: -> ^( T_GROUPBY orderby_column_list )
			{
				DebugLocation(208, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:208:5: ^( T_GROUPBY orderby_column_list )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(208, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_GROUPBY, "T_GROUPBY"), root_1);

				DebugLocation(208, 17);
				adaptor.AddChild(root_1, stream_orderby_column_list.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("groupby_clause", 20);
			LeaveRule("groupby_clause", 20);
			LeaveRule_groupby_clause();
	    }
	 	DebugLocation(209, 1);
		} finally { DebugExitRule(GrammarFileName, "groupby_clause"); }
		return retval;

	}
	// $ANTLR end "groupby_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_having_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_having_clause() {}

	// $ANTLR start "having_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:211:1: having_clause : HAVING WS expression -> ^( T_HAVING expression ) ;
	[GrammarRule("having_clause")]
	private AstParserRuleReturnScope<object, IToken> having_clause()
	{
		EnterRule_having_clause();
		EnterRule("having_clause", 21);
		TraceIn("having_clause", 21);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken HAVING116 = default(IToken);
	    IToken WS117 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression118 = default(AstParserRuleReturnScope<object, IToken>);

	    object HAVING116_tree = default(object);
	    object WS117_tree = default(object);
	    RewriteRuleITokenStream stream_HAVING=new RewriteRuleITokenStream(adaptor,"token HAVING");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "having_clause");
		DebugLocation(211, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:212:2: ( HAVING WS expression -> ^( T_HAVING expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:212:4: HAVING WS expression
			{
			DebugLocation(212, 4);
			HAVING116=(IToken)Match(input,HAVING,Follow._HAVING_in_having_clause1143);  
			stream_HAVING.Add(HAVING116);

			DebugLocation(212, 11);
			WS117=(IToken)Match(input,WS,Follow._WS_in_having_clause1145);  
			stream_WS.Add(WS117);

			DebugLocation(212, 14);
			PushFollow(Follow._expression_in_having_clause1147);
			expression118=expression();
			PopFollow();

			stream_expression.Add(expression118.Tree);


			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 213:2: -> ^( T_HAVING expression )
			{
				DebugLocation(213, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:213:5: ^( T_HAVING expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(213, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_HAVING, "T_HAVING"), root_1);

				DebugLocation(213, 16);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("having_clause", 21);
			LeaveRule("having_clause", 21);
			LeaveRule_having_clause();
	    }
	 	DebugLocation(214, 1);
		} finally { DebugExitRule(GrammarFileName, "having_clause"); }
		return retval;

	}
	// $ANTLR end "having_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_clause() {}

	// $ANTLR start "orderby_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:216:1: orderby_clause : ORDER WS BY WS orderby_column_list -> ^( T_ORDERBY orderby_column_list ) ;
	[GrammarRule("orderby_clause")]
	private AstParserRuleReturnScope<object, IToken> orderby_clause()
	{
		EnterRule_orderby_clause();
		EnterRule("orderby_clause", 22);
		TraceIn("orderby_clause", 22);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken ORDER119 = default(IToken);
	    IToken WS120 = default(IToken);
	    IToken BY121 = default(IToken);
	    IToken WS122 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> orderby_column_list123 = default(AstParserRuleReturnScope<object, IToken>);

	    object ORDER119_tree = default(object);
	    object WS120_tree = default(object);
	    object BY121_tree = default(object);
	    object WS122_tree = default(object);
	    RewriteRuleITokenStream stream_BY=new RewriteRuleITokenStream(adaptor,"token BY");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_ORDER=new RewriteRuleITokenStream(adaptor,"token ORDER");
	    RewriteRuleSubtreeStream stream_orderby_column_list=new RewriteRuleSubtreeStream(adaptor,"rule orderby_column_list");
		try { DebugEnterRule(GrammarFileName, "orderby_clause");
		DebugLocation(216, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:217:2: ( ORDER WS BY WS orderby_column_list -> ^( T_ORDERBY orderby_column_list ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:217:4: ORDER WS BY WS orderby_column_list
			{
			DebugLocation(217, 4);
			ORDER119=(IToken)Match(input,ORDER,Follow._ORDER_in_orderby_clause1168);  
			stream_ORDER.Add(ORDER119);

			DebugLocation(217, 10);
			WS120=(IToken)Match(input,WS,Follow._WS_in_orderby_clause1170);  
			stream_WS.Add(WS120);

			DebugLocation(217, 13);
			BY121=(IToken)Match(input,BY,Follow._BY_in_orderby_clause1172);  
			stream_BY.Add(BY121);

			DebugLocation(217, 16);
			WS122=(IToken)Match(input,WS,Follow._WS_in_orderby_clause1174);  
			stream_WS.Add(WS122);

			DebugLocation(217, 19);
			PushFollow(Follow._orderby_column_list_in_orderby_clause1176);
			orderby_column_list123=orderby_column_list();
			PopFollow();

			stream_orderby_column_list.Add(orderby_column_list123.Tree);


			{
			// AST REWRITE
			// elements: orderby_column_list
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 218:2: -> ^( T_ORDERBY orderby_column_list )
			{
				DebugLocation(218, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:218:5: ^( T_ORDERBY orderby_column_list )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(218, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_ORDERBY, "T_ORDERBY"), root_1);

				DebugLocation(218, 17);
				adaptor.AddChild(root_1, stream_orderby_column_list.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_clause", 22);
			LeaveRule("orderby_clause", 22);
			LeaveRule_orderby_clause();
	    }
	 	DebugLocation(219, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_clause"); }
		return retval;

	}
	// $ANTLR end "orderby_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_column_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_column_list() {}

	// $ANTLR start "orderby_column_list"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:221:1: orderby_column_list : orderby_column ( ( WS )? ',' ( WS )? orderby_column )* -> ( orderby_column )* ;
	[GrammarRule("orderby_column_list")]
	private AstParserRuleReturnScope<object, IToken> orderby_column_list()
	{
		EnterRule_orderby_column_list();
		EnterRule("orderby_column_list", 23);
		TraceIn("orderby_column_list", 23);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS125 = default(IToken);
	    IToken char_literal126 = default(IToken);
	    IToken WS127 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> orderby_column124 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> orderby_column128 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS125_tree = default(object);
	    object char_literal126_tree = default(object);
	    object WS127_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_168=new RewriteRuleITokenStream(adaptor,"token 168");
	    RewriteRuleSubtreeStream stream_orderby_column=new RewriteRuleSubtreeStream(adaptor,"rule orderby_column");
		try { DebugEnterRule(GrammarFileName, "orderby_column_list");
		DebugLocation(221, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:222:2: ( orderby_column ( ( WS )? ',' ( WS )? orderby_column )* -> ( orderby_column )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:222:4: orderby_column ( ( WS )? ',' ( WS )? orderby_column )*
			{
			DebugLocation(222, 4);
			PushFollow(Follow._orderby_column_in_orderby_column_list1197);
			orderby_column124=orderby_column();
			PopFollow();

			stream_orderby_column.Add(orderby_column124.Tree);
			DebugLocation(222, 19);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:222:19: ( ( WS )? ',' ( WS )? orderby_column )*
			try { DebugEnterSubRule(51);
			while (true)
			{
				int alt51=2;
				try { DebugEnterDecision(51, decisionCanBacktrack[51]);
				int LA51_0 = input.LA(1);

				if ((LA51_0==WS))
				{
					int LA51_1 = input.LA(2);

					if ((LA51_1==168))
					{
						alt51 = 1;
					}


				}
				else if ((LA51_0==168))
				{
					alt51 = 1;
				}


				} finally { DebugExitDecision(51); }
				switch ( alt51 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:222:20: ( WS )? ',' ( WS )? orderby_column
					{
					DebugLocation(222, 20);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:222:20: ( WS )?
					int alt49=2;
					try { DebugEnterSubRule(49);
					try { DebugEnterDecision(49, decisionCanBacktrack[49]);
					int LA49_0 = input.LA(1);

					if ((LA49_0==WS))
					{
						alt49 = 1;
					}
					} finally { DebugExitDecision(49); }
					switch (alt49)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:222:20: WS
						{
						DebugLocation(222, 20);
						WS125=(IToken)Match(input,WS,Follow._WS_in_orderby_column_list1200);  
						stream_WS.Add(WS125);


						}
						break;

					}
					} finally { DebugExitSubRule(49); }

					DebugLocation(222, 24);
					char_literal126=(IToken)Match(input,168,Follow._168_in_orderby_column_list1203);  
					stream_168.Add(char_literal126);

					DebugLocation(222, 28);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:222:28: ( WS )?
					int alt50=2;
					try { DebugEnterSubRule(50);
					try { DebugEnterDecision(50, decisionCanBacktrack[50]);
					int LA50_0 = input.LA(1);

					if ((LA50_0==WS))
					{
						alt50 = 1;
					}
					} finally { DebugExitDecision(50); }
					switch (alt50)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:222:28: WS
						{
						DebugLocation(222, 28);
						WS127=(IToken)Match(input,WS,Follow._WS_in_orderby_column_list1205);  
						stream_WS.Add(WS127);


						}
						break;

					}
					} finally { DebugExitSubRule(50); }

					DebugLocation(222, 32);
					PushFollow(Follow._orderby_column_in_orderby_column_list1208);
					orderby_column128=orderby_column();
					PopFollow();

					stream_orderby_column.Add(orderby_column128.Tree);

					}
					break;

				default:
					goto loop51;
				}
			}

			loop51:
				;

			} finally { DebugExitSubRule(51); }



			{
			// AST REWRITE
			// elements: orderby_column
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 223:2: -> ( orderby_column )*
			{
				DebugLocation(223, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:223:5: ( orderby_column )*
				while ( stream_orderby_column.HasNext )
				{
					DebugLocation(223, 5);
					adaptor.AddChild(root_0, stream_orderby_column.NextTree());

				}
				stream_orderby_column.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_column_list", 23);
			LeaveRule("orderby_column_list", 23);
			LeaveRule_orderby_column_list();
	    }
	 	DebugLocation(224, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_column_list"); }
		return retval;

	}
	// $ANTLR end "orderby_column_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_column() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_column() {}

	// $ANTLR start "orderby_column"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:226:1: orderby_column : expression ( WS orderby_direction )? -> ^( T_ORDERBY_COLUMN expression ( orderby_direction )? ) ;
	[GrammarRule("orderby_column")]
	private AstParserRuleReturnScope<object, IToken> orderby_column()
	{
		EnterRule_orderby_column();
		EnterRule("orderby_column", 24);
		TraceIn("orderby_column", 24);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS130 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression129 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> orderby_direction131 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS130_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_orderby_direction=new RewriteRuleSubtreeStream(adaptor,"rule orderby_direction");
		try { DebugEnterRule(GrammarFileName, "orderby_column");
		DebugLocation(226, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:227:2: ( expression ( WS orderby_direction )? -> ^( T_ORDERBY_COLUMN expression ( orderby_direction )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:227:4: expression ( WS orderby_direction )?
			{
			DebugLocation(227, 4);
			PushFollow(Follow._expression_in_orderby_column1228);
			expression129=expression();
			PopFollow();

			stream_expression.Add(expression129.Tree);
			DebugLocation(227, 15);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:227:15: ( WS orderby_direction )?
			int alt52=2;
			try { DebugEnterSubRule(52);
			try { DebugEnterDecision(52, decisionCanBacktrack[52]);
			int LA52_0 = input.LA(1);

			if ((LA52_0==WS))
			{
				int LA52_1 = input.LA(2);

				if ((LA52_1==ASC||LA52_1==DESC||LA52_1==ORIG))
				{
					alt52 = 1;
				}
			}
			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:227:16: WS orderby_direction
				{
				DebugLocation(227, 16);
				WS130=(IToken)Match(input,WS,Follow._WS_in_orderby_column1231);  
				stream_WS.Add(WS130);

				DebugLocation(227, 19);
				PushFollow(Follow._orderby_direction_in_orderby_column1233);
				orderby_direction131=orderby_direction();
				PopFollow();

				stream_orderby_direction.Add(orderby_direction131.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(52); }



			{
			// AST REWRITE
			// elements: expression, orderby_direction
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 227:39: -> ^( T_ORDERBY_COLUMN expression ( orderby_direction )? )
			{
				DebugLocation(227, 42);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:227:42: ^( T_ORDERBY_COLUMN expression ( orderby_direction )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(227, 44);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_ORDERBY_COLUMN, "T_ORDERBY_COLUMN"), root_1);

				DebugLocation(227, 61);
				adaptor.AddChild(root_1, stream_expression.NextTree());
				DebugLocation(227, 72);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:227:72: ( orderby_direction )?
				if (stream_orderby_direction.HasNext)
				{
					DebugLocation(227, 72);
					adaptor.AddChild(root_1, stream_orderby_direction.NextTree());

				}
				stream_orderby_direction.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_column", 24);
			LeaveRule("orderby_column", 24);
			LeaveRule_orderby_column();
	    }
	 	DebugLocation(228, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_column"); }
		return retval;

	}
	// $ANTLR end "orderby_column"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_direction() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_direction() {}

	// $ANTLR start "orderby_direction"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:230:1: orderby_direction : ( ASC -> T_ORDERBY_ASC | DESC -> T_ORDERBY_DESC | ORIG -> T_ORDERBY_ORIG );
	[GrammarRule("orderby_direction")]
	private AstParserRuleReturnScope<object, IToken> orderby_direction()
	{
		EnterRule_orderby_direction();
		EnterRule("orderby_direction", 25);
		TraceIn("orderby_direction", 25);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken ASC132 = default(IToken);
	    IToken DESC133 = default(IToken);
	    IToken ORIG134 = default(IToken);

	    object ASC132_tree = default(object);
	    object DESC133_tree = default(object);
	    object ORIG134_tree = default(object);
	    RewriteRuleITokenStream stream_DESC=new RewriteRuleITokenStream(adaptor,"token DESC");
	    RewriteRuleITokenStream stream_ASC=new RewriteRuleITokenStream(adaptor,"token ASC");
	    RewriteRuleITokenStream stream_ORIG=new RewriteRuleITokenStream(adaptor,"token ORIG");

		try { DebugEnterRule(GrammarFileName, "orderby_direction");
		DebugLocation(230, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:231:2: ( ASC -> T_ORDERBY_ASC | DESC -> T_ORDERBY_DESC | ORIG -> T_ORDERBY_ORIG )
			int alt53=3;
			try { DebugEnterDecision(53, decisionCanBacktrack[53]);
			switch (input.LA(1))
			{
			case ASC:
				{
				alt53 = 1;
				}
				break;
			case DESC:
				{
				alt53 = 2;
				}
				break;
			case ORIG:
				{
				alt53 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 53, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(53); }
			switch (alt53)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:231:4: ASC
				{
				DebugLocation(231, 4);
				ASC132=(IToken)Match(input,ASC,Follow._ASC_in_orderby_direction1258);  
				stream_ASC.Add(ASC132);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 231:8: -> T_ORDERBY_ASC
				{
					DebugLocation(231, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_ORDERBY_ASC, "T_ORDERBY_ASC"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:232:4: DESC
				{
				DebugLocation(232, 4);
				DESC133=(IToken)Match(input,DESC,Follow._DESC_in_orderby_direction1267);  
				stream_DESC.Add(DESC133);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 232:9: -> T_ORDERBY_DESC
				{
					DebugLocation(232, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_ORDERBY_DESC, "T_ORDERBY_DESC"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:233:4: ORIG
				{
				DebugLocation(233, 4);
				ORIG134=(IToken)Match(input,ORIG,Follow._ORIG_in_orderby_direction1276);  
				stream_ORIG.Add(ORIG134);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 233:9: -> T_ORDERBY_ORIG
				{
					DebugLocation(233, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_ORDERBY_ORIG, "T_ORDERBY_ORIG"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_direction", 25);
			LeaveRule("orderby_direction", 25);
			LeaveRule_orderby_direction();
	    }
	 	DebugLocation(234, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_direction"); }
		return retval;

	}
	// $ANTLR end "orderby_direction"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_use_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_use_command() {}

	// $ANTLR start "use_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:239:1: use_command : USE WS file -> ^( T_USE file ) ;
	[GrammarRule("use_command")]
	private AstParserRuleReturnScope<object, IToken> use_command()
	{
		EnterRule_use_command();
		EnterRule("use_command", 26);
		TraceIn("use_command", 26);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken USE135 = default(IToken);
	    IToken WS136 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file137 = default(AstParserRuleReturnScope<object, IToken>);

	    object USE135_tree = default(object);
	    object WS136_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_USE=new RewriteRuleITokenStream(adaptor,"token USE");
	    RewriteRuleSubtreeStream stream_file=new RewriteRuleSubtreeStream(adaptor,"rule file");
		try { DebugEnterRule(GrammarFileName, "use_command");
		DebugLocation(239, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:240:2: ( USE WS file -> ^( T_USE file ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:240:4: USE WS file
			{
			DebugLocation(240, 4);
			USE135=(IToken)Match(input,USE,Follow._USE_in_use_command1294);  
			stream_USE.Add(USE135);

			DebugLocation(240, 8);
			WS136=(IToken)Match(input,WS,Follow._WS_in_use_command1296);  
			stream_WS.Add(WS136);

			DebugLocation(240, 11);
			PushFollow(Follow._file_in_use_command1298);
			file137=file();
			PopFollow();

			stream_file.Add(file137.Tree);


			{
			// AST REWRITE
			// elements: file
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 240:16: -> ^( T_USE file )
			{
				DebugLocation(240, 19);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:240:19: ^( T_USE file )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(240, 21);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_USE, "T_USE"), root_1);

				DebugLocation(240, 27);
				adaptor.AddChild(root_1, stream_file.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("use_command", 26);
			LeaveRule("use_command", 26);
			LeaveRule_use_command();
	    }
	 	DebugLocation(241, 1);
		} finally { DebugExitRule(GrammarFileName, "use_command"); }
		return retval;

	}
	// $ANTLR end "use_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_declare_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_declare_command() {}

	// $ANTLR start "declare_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:246:1: declare_command : DECLARE WS declaration_list -> declaration_list ;
	[GrammarRule("declare_command")]
	private AstParserRuleReturnScope<object, IToken> declare_command()
	{
		EnterRule_declare_command();
		EnterRule("declare_command", 27);
		TraceIn("declare_command", 27);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken DECLARE138 = default(IToken);
	    IToken WS139 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> declaration_list140 = default(AstParserRuleReturnScope<object, IToken>);

	    object DECLARE138_tree = default(object);
	    object WS139_tree = default(object);
	    RewriteRuleITokenStream stream_DECLARE=new RewriteRuleITokenStream(adaptor,"token DECLARE");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_declaration_list=new RewriteRuleSubtreeStream(adaptor,"rule declaration_list");
		try { DebugEnterRule(GrammarFileName, "declare_command");
		DebugLocation(246, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:247:2: ( DECLARE WS declaration_list -> declaration_list )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:247:4: DECLARE WS declaration_list
			{
			DebugLocation(247, 4);
			DECLARE138=(IToken)Match(input,DECLARE,Follow._DECLARE_in_declare_command1320);  
			stream_DECLARE.Add(DECLARE138);

			DebugLocation(247, 12);
			WS139=(IToken)Match(input,WS,Follow._WS_in_declare_command1322);  
			stream_WS.Add(WS139);

			DebugLocation(247, 15);
			PushFollow(Follow._declaration_list_in_declare_command1324);
			declaration_list140=declaration_list();
			PopFollow();

			stream_declaration_list.Add(declaration_list140.Tree);


			{
			// AST REWRITE
			// elements: declaration_list
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 247:32: -> declaration_list
			{
				DebugLocation(247, 35);
				adaptor.AddChild(root_0, stream_declaration_list.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declare_command", 27);
			LeaveRule("declare_command", 27);
			LeaveRule_declare_command();
	    }
	 	DebugLocation(248, 1);
		} finally { DebugExitRule(GrammarFileName, "declare_command"); }
		return retval;

	}
	// $ANTLR end "declare_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_declaration_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_declaration_list() {}

	// $ANTLR start "declaration_list"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:250:1: declaration_list : declaration ( ( WS )? ',' ( WS )? declaration )* -> ^( T_DECLARE ( declaration )+ ) ;
	[GrammarRule("declaration_list")]
	private AstParserRuleReturnScope<object, IToken> declaration_list()
	{
		EnterRule_declaration_list();
		EnterRule("declaration_list", 28);
		TraceIn("declaration_list", 28);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS142 = default(IToken);
	    IToken char_literal143 = default(IToken);
	    IToken WS144 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> declaration141 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> declaration145 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS142_tree = default(object);
	    object char_literal143_tree = default(object);
	    object WS144_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_168=new RewriteRuleITokenStream(adaptor,"token 168");
	    RewriteRuleSubtreeStream stream_declaration=new RewriteRuleSubtreeStream(adaptor,"rule declaration");
		try { DebugEnterRule(GrammarFileName, "declaration_list");
		DebugLocation(250, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:251:2: ( declaration ( ( WS )? ',' ( WS )? declaration )* -> ^( T_DECLARE ( declaration )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:251:4: declaration ( ( WS )? ',' ( WS )? declaration )*
			{
			DebugLocation(251, 4);
			PushFollow(Follow._declaration_in_declaration_list1341);
			declaration141=declaration();
			PopFollow();

			stream_declaration.Add(declaration141.Tree);
			DebugLocation(251, 16);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:251:16: ( ( WS )? ',' ( WS )? declaration )*
			try { DebugEnterSubRule(56);
			while (true)
			{
				int alt56=2;
				try { DebugEnterDecision(56, decisionCanBacktrack[56]);
				int LA56_0 = input.LA(1);

				if ((LA56_0==WS))
				{
					int LA56_1 = input.LA(2);

					if ((LA56_1==168))
					{
						alt56 = 1;
					}


				}
				else if ((LA56_0==168))
				{
					alt56 = 1;
				}


				} finally { DebugExitDecision(56); }
				switch ( alt56 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:251:17: ( WS )? ',' ( WS )? declaration
					{
					DebugLocation(251, 17);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:251:17: ( WS )?
					int alt54=2;
					try { DebugEnterSubRule(54);
					try { DebugEnterDecision(54, decisionCanBacktrack[54]);
					int LA54_0 = input.LA(1);

					if ((LA54_0==WS))
					{
						alt54 = 1;
					}
					} finally { DebugExitDecision(54); }
					switch (alt54)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:251:17: WS
						{
						DebugLocation(251, 17);
						WS142=(IToken)Match(input,WS,Follow._WS_in_declaration_list1344);  
						stream_WS.Add(WS142);


						}
						break;

					}
					} finally { DebugExitSubRule(54); }

					DebugLocation(251, 21);
					char_literal143=(IToken)Match(input,168,Follow._168_in_declaration_list1347);  
					stream_168.Add(char_literal143);

					DebugLocation(251, 25);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:251:25: ( WS )?
					int alt55=2;
					try { DebugEnterSubRule(55);
					try { DebugEnterDecision(55, decisionCanBacktrack[55]);
					int LA55_0 = input.LA(1);

					if ((LA55_0==WS))
					{
						alt55 = 1;
					}
					} finally { DebugExitDecision(55); }
					switch (alt55)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:251:25: WS
						{
						DebugLocation(251, 25);
						WS144=(IToken)Match(input,WS,Follow._WS_in_declaration_list1349);  
						stream_WS.Add(WS144);


						}
						break;

					}
					} finally { DebugExitSubRule(55); }

					DebugLocation(251, 29);
					PushFollow(Follow._declaration_in_declaration_list1352);
					declaration145=declaration();
					PopFollow();

					stream_declaration.Add(declaration145.Tree);

					}
					break;

				default:
					goto loop56;
				}
			}

			loop56:
				;

			} finally { DebugExitSubRule(56); }



			{
			// AST REWRITE
			// elements: declaration
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 252:2: -> ^( T_DECLARE ( declaration )+ )
			{
				DebugLocation(252, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:252:5: ^( T_DECLARE ( declaration )+ )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(252, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_DECLARE, "T_DECLARE"), root_1);

				DebugLocation(252, 17);
				if (!(stream_declaration.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_declaration.HasNext )
				{
					DebugLocation(252, 17);
					adaptor.AddChild(root_1, stream_declaration.NextTree());

				}
				stream_declaration.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declaration_list", 28);
			LeaveRule("declaration_list", 28);
			LeaveRule_declaration_list();
	    }
	 	DebugLocation(253, 1);
		} finally { DebugExitRule(GrammarFileName, "declaration_list"); }
		return retval;

	}
	// $ANTLR end "declaration_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_declaration() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_declaration() {}

	// $ANTLR start "declaration"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:255:1: declaration : variable WS ( AS WS )? datatype -> ^( T_DECLARATION variable datatype ) ;
	[GrammarRule("declaration")]
	private AstParserRuleReturnScope<object, IToken> declaration()
	{
		EnterRule_declaration();
		EnterRule("declaration", 29);
		TraceIn("declaration", 29);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS147 = default(IToken);
	    IToken AS148 = default(IToken);
	    IToken WS149 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> variable146 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> datatype150 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS147_tree = default(object);
	    object AS148_tree = default(object);
	    object WS149_tree = default(object);
	    RewriteRuleITokenStream stream_AS=new RewriteRuleITokenStream(adaptor,"token AS");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_datatype=new RewriteRuleSubtreeStream(adaptor,"rule datatype");
	    RewriteRuleSubtreeStream stream_variable=new RewriteRuleSubtreeStream(adaptor,"rule variable");
		try { DebugEnterRule(GrammarFileName, "declaration");
		DebugLocation(255, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:256:2: ( variable WS ( AS WS )? datatype -> ^( T_DECLARATION variable datatype ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:256:4: variable WS ( AS WS )? datatype
			{
			DebugLocation(256, 4);
			PushFollow(Follow._variable_in_declaration1376);
			variable146=variable();
			PopFollow();

			stream_variable.Add(variable146.Tree);
			DebugLocation(256, 13);
			WS147=(IToken)Match(input,WS,Follow._WS_in_declaration1378);  
			stream_WS.Add(WS147);

			DebugLocation(256, 16);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:256:16: ( AS WS )?
			int alt57=2;
			try { DebugEnterSubRule(57);
			try { DebugEnterDecision(57, decisionCanBacktrack[57]);
			int LA57_0 = input.LA(1);

			if ((LA57_0==AS))
			{
				alt57 = 1;
			}
			} finally { DebugExitDecision(57); }
			switch (alt57)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:256:17: AS WS
				{
				DebugLocation(256, 17);
				AS148=(IToken)Match(input,AS,Follow._AS_in_declaration1381);  
				stream_AS.Add(AS148);

				DebugLocation(256, 20);
				WS149=(IToken)Match(input,WS,Follow._WS_in_declaration1383);  
				stream_WS.Add(WS149);


				}
				break;

			}
			} finally { DebugExitSubRule(57); }

			DebugLocation(256, 25);
			PushFollow(Follow._datatype_in_declaration1387);
			datatype150=datatype();
			PopFollow();

			stream_datatype.Add(datatype150.Tree);


			{
			// AST REWRITE
			// elements: datatype, variable
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 257:2: -> ^( T_DECLARATION variable datatype )
			{
				DebugLocation(257, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:257:5: ^( T_DECLARATION variable datatype )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(257, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_DECLARATION, "T_DECLARATION"), root_1);

				DebugLocation(257, 21);
				adaptor.AddChild(root_1, stream_variable.NextTree());
				DebugLocation(257, 30);
				adaptor.AddChild(root_1, stream_datatype.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declaration", 29);
			LeaveRule("declaration", 29);
			LeaveRule_declaration();
	    }
	 	DebugLocation(258, 1);
		} finally { DebugExitRule(GrammarFileName, "declaration"); }
		return retval;

	}
	// $ANTLR end "declaration"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_create_view_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_create_view_command() {}

	// $ANTLR start "create_view_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:263:1: create_view_command : CREATE WS VIEW WS view_name ( ( WS )? '(' declaration_list ')' )? WS AS WS select_command -> ^( T_CREATE_VIEW view_name ( declaration_list )? select_command ) ;
	[GrammarRule("create_view_command")]
	private AstParserRuleReturnScope<object, IToken> create_view_command()
	{
		EnterRule_create_view_command();
		EnterRule("create_view_command", 30);
		TraceIn("create_view_command", 30);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken CREATE151 = default(IToken);
	    IToken WS152 = default(IToken);
	    IToken VIEW153 = default(IToken);
	    IToken WS154 = default(IToken);
	    IToken WS156 = default(IToken);
	    IToken char_literal157 = default(IToken);
	    IToken char_literal159 = default(IToken);
	    IToken WS160 = default(IToken);
	    IToken AS161 = default(IToken);
	    IToken WS162 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> view_name155 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> declaration_list158 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> select_command163 = default(AstParserRuleReturnScope<object, IToken>);

	    object CREATE151_tree = default(object);
	    object WS152_tree = default(object);
	    object VIEW153_tree = default(object);
	    object WS154_tree = default(object);
	    object WS156_tree = default(object);
	    object char_literal157_tree = default(object);
	    object char_literal159_tree = default(object);
	    object WS160_tree = default(object);
	    object AS161_tree = default(object);
	    object WS162_tree = default(object);
	    RewriteRuleITokenStream stream_AS=new RewriteRuleITokenStream(adaptor,"token AS");
	    RewriteRuleITokenStream stream_164=new RewriteRuleITokenStream(adaptor,"token 164");
	    RewriteRuleITokenStream stream_CREATE=new RewriteRuleITokenStream(adaptor,"token CREATE");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_VIEW=new RewriteRuleITokenStream(adaptor,"token VIEW");
	    RewriteRuleITokenStream stream_165=new RewriteRuleITokenStream(adaptor,"token 165");
	    RewriteRuleSubtreeStream stream_view_name=new RewriteRuleSubtreeStream(adaptor,"rule view_name");
	    RewriteRuleSubtreeStream stream_select_command=new RewriteRuleSubtreeStream(adaptor,"rule select_command");
	    RewriteRuleSubtreeStream stream_declaration_list=new RewriteRuleSubtreeStream(adaptor,"rule declaration_list");
		try { DebugEnterRule(GrammarFileName, "create_view_command");
		DebugLocation(263, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:264:2: ( CREATE WS VIEW WS view_name ( ( WS )? '(' declaration_list ')' )? WS AS WS select_command -> ^( T_CREATE_VIEW view_name ( declaration_list )? select_command ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:264:4: CREATE WS VIEW WS view_name ( ( WS )? '(' declaration_list ')' )? WS AS WS select_command
			{
			DebugLocation(264, 4);
			CREATE151=(IToken)Match(input,CREATE,Follow._CREATE_in_create_view_command1412);  
			stream_CREATE.Add(CREATE151);

			DebugLocation(264, 11);
			WS152=(IToken)Match(input,WS,Follow._WS_in_create_view_command1414);  
			stream_WS.Add(WS152);

			DebugLocation(264, 14);
			VIEW153=(IToken)Match(input,VIEW,Follow._VIEW_in_create_view_command1416);  
			stream_VIEW.Add(VIEW153);

			DebugLocation(264, 19);
			WS154=(IToken)Match(input,WS,Follow._WS_in_create_view_command1418);  
			stream_WS.Add(WS154);

			DebugLocation(264, 22);
			PushFollow(Follow._view_name_in_create_view_command1420);
			view_name155=view_name();
			PopFollow();

			stream_view_name.Add(view_name155.Tree);
			DebugLocation(264, 32);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:264:32: ( ( WS )? '(' declaration_list ')' )?
			int alt59=2;
			try { DebugEnterSubRule(59);
			try { DebugEnterDecision(59, decisionCanBacktrack[59]);
			int LA59_0 = input.LA(1);

			if ((LA59_0==WS))
			{
				int LA59_1 = input.LA(2);

				if ((LA59_1==164))
				{
					alt59 = 1;
				}
			}
			else if ((LA59_0==164))
			{
				alt59 = 1;
			}
			} finally { DebugExitDecision(59); }
			switch (alt59)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:264:33: ( WS )? '(' declaration_list ')'
				{
				DebugLocation(264, 33);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:264:33: ( WS )?
				int alt58=2;
				try { DebugEnterSubRule(58);
				try { DebugEnterDecision(58, decisionCanBacktrack[58]);
				int LA58_0 = input.LA(1);

				if ((LA58_0==WS))
				{
					alt58 = 1;
				}
				} finally { DebugExitDecision(58); }
				switch (alt58)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:264:33: WS
					{
					DebugLocation(264, 33);
					WS156=(IToken)Match(input,WS,Follow._WS_in_create_view_command1423);  
					stream_WS.Add(WS156);


					}
					break;

				}
				} finally { DebugExitSubRule(58); }

				DebugLocation(264, 37);
				char_literal157=(IToken)Match(input,164,Follow._164_in_create_view_command1426);  
				stream_164.Add(char_literal157);

				DebugLocation(264, 41);
				PushFollow(Follow._declaration_list_in_create_view_command1428);
				declaration_list158=declaration_list();
				PopFollow();

				stream_declaration_list.Add(declaration_list158.Tree);
				DebugLocation(264, 58);
				char_literal159=(IToken)Match(input,165,Follow._165_in_create_view_command1430);  
				stream_165.Add(char_literal159);


				}
				break;

			}
			} finally { DebugExitSubRule(59); }

			DebugLocation(264, 64);
			WS160=(IToken)Match(input,WS,Follow._WS_in_create_view_command1434);  
			stream_WS.Add(WS160);

			DebugLocation(264, 67);
			AS161=(IToken)Match(input,AS,Follow._AS_in_create_view_command1436);  
			stream_AS.Add(AS161);

			DebugLocation(264, 70);
			WS162=(IToken)Match(input,WS,Follow._WS_in_create_view_command1438);  
			stream_WS.Add(WS162);

			DebugLocation(264, 73);
			PushFollow(Follow._select_command_in_create_view_command1440);
			select_command163=select_command();
			PopFollow();

			stream_select_command.Add(select_command163.Tree);


			{
			// AST REWRITE
			// elements: select_command, view_name, declaration_list
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 265:2: -> ^( T_CREATE_VIEW view_name ( declaration_list )? select_command )
			{
				DebugLocation(265, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:265:5: ^( T_CREATE_VIEW view_name ( declaration_list )? select_command )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(265, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CREATE_VIEW, "T_CREATE_VIEW"), root_1);

				DebugLocation(265, 21);
				adaptor.AddChild(root_1, stream_view_name.NextTree());
				DebugLocation(265, 31);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:265:31: ( declaration_list )?
				if (stream_declaration_list.HasNext)
				{
					DebugLocation(265, 31);
					adaptor.AddChild(root_1, stream_declaration_list.NextTree());

				}
				stream_declaration_list.Reset();
				DebugLocation(265, 49);
				adaptor.AddChild(root_1, stream_select_command.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("create_view_command", 30);
			LeaveRule("create_view_command", 30);
			LeaveRule_create_view_command();
	    }
	 	DebugLocation(266, 1);
		} finally { DebugExitRule(GrammarFileName, "create_view_command"); }
		return retval;

	}
	// $ANTLR end "create_view_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_drop_view_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_drop_view_command() {}

	// $ANTLR start "drop_view_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:268:1: drop_view_command : DROP WS VIEW WS view_name -> ^( T_DROP_VIEW view_name ) ;
	[GrammarRule("drop_view_command")]
	private AstParserRuleReturnScope<object, IToken> drop_view_command()
	{
		EnterRule_drop_view_command();
		EnterRule("drop_view_command", 31);
		TraceIn("drop_view_command", 31);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken DROP164 = default(IToken);
	    IToken WS165 = default(IToken);
	    IToken VIEW166 = default(IToken);
	    IToken WS167 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> view_name168 = default(AstParserRuleReturnScope<object, IToken>);

	    object DROP164_tree = default(object);
	    object WS165_tree = default(object);
	    object VIEW166_tree = default(object);
	    object WS167_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_VIEW=new RewriteRuleITokenStream(adaptor,"token VIEW");
	    RewriteRuleITokenStream stream_DROP=new RewriteRuleITokenStream(adaptor,"token DROP");
	    RewriteRuleSubtreeStream stream_view_name=new RewriteRuleSubtreeStream(adaptor,"rule view_name");
		try { DebugEnterRule(GrammarFileName, "drop_view_command");
		DebugLocation(268, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:269:2: ( DROP WS VIEW WS view_name -> ^( T_DROP_VIEW view_name ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:269:4: DROP WS VIEW WS view_name
			{
			DebugLocation(269, 4);
			DROP164=(IToken)Match(input,DROP,Follow._DROP_in_drop_view_command1466);  
			stream_DROP.Add(DROP164);

			DebugLocation(269, 9);
			WS165=(IToken)Match(input,WS,Follow._WS_in_drop_view_command1468);  
			stream_WS.Add(WS165);

			DebugLocation(269, 12);
			VIEW166=(IToken)Match(input,VIEW,Follow._VIEW_in_drop_view_command1470);  
			stream_VIEW.Add(VIEW166);

			DebugLocation(269, 17);
			WS167=(IToken)Match(input,WS,Follow._WS_in_drop_view_command1472);  
			stream_WS.Add(WS167);

			DebugLocation(269, 20);
			PushFollow(Follow._view_name_in_drop_view_command1474);
			view_name168=view_name();
			PopFollow();

			stream_view_name.Add(view_name168.Tree);


			{
			// AST REWRITE
			// elements: view_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 270:2: -> ^( T_DROP_VIEW view_name )
			{
				DebugLocation(270, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:270:5: ^( T_DROP_VIEW view_name )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(270, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_DROP_VIEW, "T_DROP_VIEW"), root_1);

				DebugLocation(270, 19);
				adaptor.AddChild(root_1, stream_view_name.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("drop_view_command", 31);
			LeaveRule("drop_view_command", 31);
			LeaveRule_drop_view_command();
	    }
	 	DebugLocation(271, 1);
		} finally { DebugExitRule(GrammarFileName, "drop_view_command"); }
		return retval;

	}
	// $ANTLR end "drop_view_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_view_name() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_view_name() {}

	// $ANTLR start "view_name"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:273:1: view_name : TOKEN -> ^( T_VIEW_NAME TOKEN ) ;
	[GrammarRule("view_name")]
	private AstParserRuleReturnScope<object, IToken> view_name()
	{
		EnterRule_view_name();
		EnterRule("view_name", 32);
		TraceIn("view_name", 32);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN169 = default(IToken);

	    object TOKEN169_tree = default(object);
	    RewriteRuleITokenStream stream_TOKEN=new RewriteRuleITokenStream(adaptor,"token TOKEN");

		try { DebugEnterRule(GrammarFileName, "view_name");
		DebugLocation(273, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:274:2: ( TOKEN -> ^( T_VIEW_NAME TOKEN ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:274:4: TOKEN
			{
			DebugLocation(274, 4);
			TOKEN169=(IToken)Match(input,TOKEN,Follow._TOKEN_in_view_name1494);  
			stream_TOKEN.Add(TOKEN169);



			{
			// AST REWRITE
			// elements: TOKEN
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 274:10: -> ^( T_VIEW_NAME TOKEN )
			{
				DebugLocation(274, 13);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:274:13: ^( T_VIEW_NAME TOKEN )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(274, 15);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_VIEW_NAME, "T_VIEW_NAME"), root_1);

				DebugLocation(274, 27);
				adaptor.AddChild(root_1, stream_TOKEN.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("view_name", 32);
			LeaveRule("view_name", 32);
			LeaveRule_view_name();
	    }
	 	DebugLocation(275, 1);
		} finally { DebugExitRule(GrammarFileName, "view_name"); }
		return retval;

	}
	// $ANTLR end "view_name"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_drop_table_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_drop_table_command() {}

	// $ANTLR start "drop_table_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:279:1: drop_table_command : DROP WS TABLE WS file -> ^( T_DROP_TABLE file ) ;
	[GrammarRule("drop_table_command")]
	private AstParserRuleReturnScope<object, IToken> drop_table_command()
	{
		EnterRule_drop_table_command();
		EnterRule("drop_table_command", 33);
		TraceIn("drop_table_command", 33);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken DROP170 = default(IToken);
	    IToken WS171 = default(IToken);
	    IToken TABLE172 = default(IToken);
	    IToken WS173 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file174 = default(AstParserRuleReturnScope<object, IToken>);

	    object DROP170_tree = default(object);
	    object WS171_tree = default(object);
	    object TABLE172_tree = default(object);
	    object WS173_tree = default(object);
	    RewriteRuleITokenStream stream_TABLE=new RewriteRuleITokenStream(adaptor,"token TABLE");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_DROP=new RewriteRuleITokenStream(adaptor,"token DROP");
	    RewriteRuleSubtreeStream stream_file=new RewriteRuleSubtreeStream(adaptor,"rule file");
		try { DebugEnterRule(GrammarFileName, "drop_table_command");
		DebugLocation(279, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:280:2: ( DROP WS TABLE WS file -> ^( T_DROP_TABLE file ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:280:4: DROP WS TABLE WS file
			{
			DebugLocation(280, 4);
			DROP170=(IToken)Match(input,DROP,Follow._DROP_in_drop_table_command1516);  
			stream_DROP.Add(DROP170);

			DebugLocation(280, 9);
			WS171=(IToken)Match(input,WS,Follow._WS_in_drop_table_command1518);  
			stream_WS.Add(WS171);

			DebugLocation(280, 12);
			TABLE172=(IToken)Match(input,TABLE,Follow._TABLE_in_drop_table_command1520);  
			stream_TABLE.Add(TABLE172);

			DebugLocation(280, 18);
			WS173=(IToken)Match(input,WS,Follow._WS_in_drop_table_command1522);  
			stream_WS.Add(WS173);

			DebugLocation(280, 21);
			PushFollow(Follow._file_in_drop_table_command1524);
			file174=file();
			PopFollow();

			stream_file.Add(file174.Tree);


			{
			// AST REWRITE
			// elements: file
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 281:2: -> ^( T_DROP_TABLE file )
			{
				DebugLocation(281, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:281:5: ^( T_DROP_TABLE file )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(281, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_DROP_TABLE, "T_DROP_TABLE"), root_1);

				DebugLocation(281, 20);
				adaptor.AddChild(root_1, stream_file.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("drop_table_command", 33);
			LeaveRule("drop_table_command", 33);
			LeaveRule_drop_table_command();
	    }
	 	DebugLocation(282, 1);
		} finally { DebugExitRule(GrammarFileName, "drop_table_command"); }
		return retval;

	}
	// $ANTLR end "drop_table_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_set_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_set_command() {}

	// $ANTLR start "set_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:288:1: set_command : SET WS variable ( WS )? '=' ( WS )? expression -> ^( T_SET_VARIABLE variable expression ) ;
	[GrammarRule("set_command")]
	private AstParserRuleReturnScope<object, IToken> set_command()
	{
		EnterRule_set_command();
		EnterRule("set_command", 34);
		TraceIn("set_command", 34);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken SET175 = default(IToken);
	    IToken WS176 = default(IToken);
	    IToken WS178 = default(IToken);
	    IToken char_literal179 = default(IToken);
	    IToken WS180 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> variable177 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression181 = default(AstParserRuleReturnScope<object, IToken>);

	    object SET175_tree = default(object);
	    object WS176_tree = default(object);
	    object WS178_tree = default(object);
	    object char_literal179_tree = default(object);
	    object WS180_tree = default(object);
	    RewriteRuleITokenStream stream_SET=new RewriteRuleITokenStream(adaptor,"token SET");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_176=new RewriteRuleITokenStream(adaptor,"token 176");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_variable=new RewriteRuleSubtreeStream(adaptor,"rule variable");
		try { DebugEnterRule(GrammarFileName, "set_command");
		DebugLocation(288, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:289:2: ( SET WS variable ( WS )? '=' ( WS )? expression -> ^( T_SET_VARIABLE variable expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:289:4: SET WS variable ( WS )? '=' ( WS )? expression
			{
			DebugLocation(289, 4);
			SET175=(IToken)Match(input,SET,Follow._SET_in_set_command1548);  
			stream_SET.Add(SET175);

			DebugLocation(289, 8);
			WS176=(IToken)Match(input,WS,Follow._WS_in_set_command1550);  
			stream_WS.Add(WS176);

			DebugLocation(289, 11);
			PushFollow(Follow._variable_in_set_command1552);
			variable177=variable();
			PopFollow();

			stream_variable.Add(variable177.Tree);
			DebugLocation(289, 20);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:289:20: ( WS )?
			int alt60=2;
			try { DebugEnterSubRule(60);
			try { DebugEnterDecision(60, decisionCanBacktrack[60]);
			int LA60_0 = input.LA(1);

			if ((LA60_0==WS))
			{
				alt60 = 1;
			}
			} finally { DebugExitDecision(60); }
			switch (alt60)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:289:20: WS
				{
				DebugLocation(289, 20);
				WS178=(IToken)Match(input,WS,Follow._WS_in_set_command1554);  
				stream_WS.Add(WS178);


				}
				break;

			}
			} finally { DebugExitSubRule(60); }

			DebugLocation(289, 24);
			char_literal179=(IToken)Match(input,176,Follow._176_in_set_command1557);  
			stream_176.Add(char_literal179);

			DebugLocation(289, 28);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:289:28: ( WS )?
			int alt61=2;
			try { DebugEnterSubRule(61);
			try { DebugEnterDecision(61, decisionCanBacktrack[61]);
			int LA61_0 = input.LA(1);

			if ((LA61_0==WS))
			{
				alt61 = 1;
			}
			} finally { DebugExitDecision(61); }
			switch (alt61)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:289:28: WS
				{
				DebugLocation(289, 28);
				WS180=(IToken)Match(input,WS,Follow._WS_in_set_command1559);  
				stream_WS.Add(WS180);


				}
				break;

			}
			} finally { DebugExitSubRule(61); }

			DebugLocation(289, 32);
			PushFollow(Follow._expression_in_set_command1562);
			expression181=expression();
			PopFollow();

			stream_expression.Add(expression181.Tree);


			{
			// AST REWRITE
			// elements: variable, expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 290:2: -> ^( T_SET_VARIABLE variable expression )
			{
				DebugLocation(290, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:290:5: ^( T_SET_VARIABLE variable expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(290, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SET_VARIABLE, "T_SET_VARIABLE"), root_1);

				DebugLocation(290, 22);
				adaptor.AddChild(root_1, stream_variable.NextTree());
				DebugLocation(290, 31);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("set_command", 34);
			LeaveRule("set_command", 34);
			LeaveRule_set_command();
	    }
	 	DebugLocation(291, 1);
		} finally { DebugExitRule(GrammarFileName, "set_command"); }
		return retval;

	}
	// $ANTLR end "set_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_list() {}

	// $ANTLR start "expression_list"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:296:1: expression_list : expression ( ( WS )? ',' ( WS )? expression )* -> ^( T_EXPRESSIONLIST ( expression )+ ) ;
	[GrammarRule("expression_list")]
	private AstParserRuleReturnScope<object, IToken> expression_list()
	{
		EnterRule_expression_list();
		EnterRule("expression_list", 35);
		TraceIn("expression_list", 35);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS183 = default(IToken);
	    IToken char_literal184 = default(IToken);
	    IToken WS185 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression182 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression186 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS183_tree = default(object);
	    object char_literal184_tree = default(object);
	    object WS185_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_168=new RewriteRuleITokenStream(adaptor,"token 168");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "expression_list");
		DebugLocation(296, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:297:2: ( expression ( ( WS )? ',' ( WS )? expression )* -> ^( T_EXPRESSIONLIST ( expression )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:297:4: expression ( ( WS )? ',' ( WS )? expression )*
			{
			DebugLocation(297, 4);
			PushFollow(Follow._expression_in_expression_list1587);
			expression182=expression();
			PopFollow();

			stream_expression.Add(expression182.Tree);
			DebugLocation(297, 15);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:297:15: ( ( WS )? ',' ( WS )? expression )*
			try { DebugEnterSubRule(64);
			while (true)
			{
				int alt64=2;
				try { DebugEnterDecision(64, decisionCanBacktrack[64]);
				int LA64_0 = input.LA(1);

				if ((LA64_0==WS))
				{
					int LA64_2 = input.LA(2);

					if ((LA64_2==168))
					{
						alt64 = 1;
					}


				}
				else if ((LA64_0==168))
				{
					alt64 = 1;
				}


				} finally { DebugExitDecision(64); }
				switch ( alt64 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:297:16: ( WS )? ',' ( WS )? expression
					{
					DebugLocation(297, 16);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:297:16: ( WS )?
					int alt62=2;
					try { DebugEnterSubRule(62);
					try { DebugEnterDecision(62, decisionCanBacktrack[62]);
					int LA62_0 = input.LA(1);

					if ((LA62_0==WS))
					{
						alt62 = 1;
					}
					} finally { DebugExitDecision(62); }
					switch (alt62)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:297:16: WS
						{
						DebugLocation(297, 16);
						WS183=(IToken)Match(input,WS,Follow._WS_in_expression_list1590);  
						stream_WS.Add(WS183);


						}
						break;

					}
					} finally { DebugExitSubRule(62); }

					DebugLocation(297, 20);
					char_literal184=(IToken)Match(input,168,Follow._168_in_expression_list1593);  
					stream_168.Add(char_literal184);

					DebugLocation(297, 24);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:297:24: ( WS )?
					int alt63=2;
					try { DebugEnterSubRule(63);
					try { DebugEnterDecision(63, decisionCanBacktrack[63]);
					int LA63_0 = input.LA(1);

					if ((LA63_0==WS))
					{
						alt63 = 1;
					}
					} finally { DebugExitDecision(63); }
					switch (alt63)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:297:24: WS
						{
						DebugLocation(297, 24);
						WS185=(IToken)Match(input,WS,Follow._WS_in_expression_list1595);  
						stream_WS.Add(WS185);


						}
						break;

					}
					} finally { DebugExitSubRule(63); }

					DebugLocation(297, 28);
					PushFollow(Follow._expression_in_expression_list1598);
					expression186=expression();
					PopFollow();

					stream_expression.Add(expression186.Tree);

					}
					break;

				default:
					goto loop64;
				}
			}

			loop64:
				;

			} finally { DebugExitSubRule(64); }



			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 297:41: -> ^( T_EXPRESSIONLIST ( expression )+ )
			{
				DebugLocation(297, 44);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:297:44: ^( T_EXPRESSIONLIST ( expression )+ )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(297, 46);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_EXPRESSIONLIST, "T_EXPRESSIONLIST"), root_1);

				DebugLocation(297, 63);
				if (!(stream_expression.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_expression.HasNext )
				{
					DebugLocation(297, 63);
					adaptor.AddChild(root_1, stream_expression.NextTree());

				}
				stream_expression.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_list", 35);
			LeaveRule("expression_list", 35);
			LeaveRule_expression_list();
	    }
	 	DebugLocation(298, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_list"); }
		return retval;

	}
	// $ANTLR end "expression_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_list_or_select_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_list_or_select_command() {}

	// $ANTLR start "expression_list_or_select_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:300:1: expression_list_or_select_command : ( expression_list | select_command );
	[GrammarRule("expression_list_or_select_command")]
	private AstParserRuleReturnScope<object, IToken> expression_list_or_select_command()
	{
		EnterRule_expression_list_or_select_command();
		EnterRule("expression_list_or_select_command", 36);
		TraceIn("expression_list_or_select_command", 36);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> expression_list187 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> select_command188 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "expression_list_or_select_command");
		DebugLocation(300, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:301:2: ( expression_list | select_command )
			int alt65=2;
			try { DebugEnterDecision(65, decisionCanBacktrack[65]);
			int LA65_0 = input.LA(1);

			if (((LA65_0>=CASE && LA65_0<=CAST)||(LA65_0>=CONVERT && LA65_0<=COUNT)||(LA65_0>=DATEADD && LA65_0<=DATEPART)||LA65_0==EXISTS||(LA65_0>=NOT && LA65_0<=NUMBER)||LA65_0==SIMPLE_FILE||(LA65_0>=STRING && LA65_0<=SYSTEMVAR)||LA65_0==TOKEN||LA65_0==VARIABLE||LA65_0==164||LA65_0==167||LA65_0==169||LA65_0==183))
			{
				alt65 = 1;
			}
			else if ((LA65_0==SELECT))
			{
				alt65 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 65, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(65); }
			switch (alt65)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:301:4: expression_list
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(301, 4);
				PushFollow(Follow._expression_list_in_expression_list_or_select_command1621);
				expression_list187=expression_list();
				PopFollow();

				adaptor.AddChild(root_0, expression_list187.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:301:22: select_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(301, 22);
				PushFollow(Follow._select_command_in_expression_list_or_select_command1625);
				select_command188=select_command();
				PopFollow();

				adaptor.AddChild(root_0, select_command188.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_list_or_select_command", 36);
			LeaveRule("expression_list_or_select_command", 36);
			LeaveRule_expression_list_or_select_command();
	    }
	 	DebugLocation(302, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_list_or_select_command"); }
		return retval;

	}
	// $ANTLR end "expression_list_or_select_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression() {}

	// $ANTLR start "expression"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:304:1: expression : expression_7 ;
	[GrammarRule("expression")]
	private AstParserRuleReturnScope<object, IToken> expression()
	{
		EnterRule_expression();
		EnterRule("expression", 37);
		TraceIn("expression", 37);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> expression_7189 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(304, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:305:2: ( expression_7 )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:305:4: expression_7
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(305, 4);
			PushFollow(Follow._expression_7_in_expression1637);
			expression_7189=expression_7();
			PopFollow();

			adaptor.AddChild(root_0, expression_7189.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression", 37);
			LeaveRule("expression", 37);
			LeaveRule_expression();
	    }
	 	DebugLocation(306, 1);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return retval;

	}
	// $ANTLR end "expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_7() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_7() {}

	// $ANTLR start "expression_7"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:308:1: expression_7 : (a= expression_6 -> $a) ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )* ;
	[GrammarRule("expression_7")]
	private AstParserRuleReturnScope<object, IToken> expression_7()
	{
		EnterRule_expression_7();
		EnterRule("expression_7", 38);
		TraceIn("expression_7", 38);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS190 = default(IToken);
	    IToken WS192 = default(IToken);
	    IToken IN193 = default(IToken);
	    IToken WS194 = default(IToken);
	    IToken char_literal195 = default(IToken);
	    IToken WS196 = default(IToken);
	    IToken WS198 = default(IToken);
	    IToken char_literal199 = default(IToken);
	    IToken NOT200 = default(IToken);
	    IToken WS201 = default(IToken);
	    IToken IN202 = default(IToken);
	    IToken WS203 = default(IToken);
	    IToken char_literal204 = default(IToken);
	    IToken WS205 = default(IToken);
	    IToken WS207 = default(IToken);
	    IToken char_literal208 = default(IToken);
	    IToken WS210 = default(IToken);
	    IToken SOME211 = default(IToken);
	    IToken ANY212 = default(IToken);
	    IToken WS213 = default(IToken);
	    IToken char_literal214 = default(IToken);
	    IToken char_literal216 = default(IToken);
	    IToken WS218 = default(IToken);
	    IToken ALL219 = default(IToken);
	    IToken WS220 = default(IToken);
	    IToken char_literal221 = default(IToken);
	    IToken char_literal223 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_7191 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command197 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command206 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_4209 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command215 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_4217 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command222 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS190_tree = default(object);
	    object WS192_tree = default(object);
	    object IN193_tree = default(object);
	    object WS194_tree = default(object);
	    object char_literal195_tree = default(object);
	    object WS196_tree = default(object);
	    object WS198_tree = default(object);
	    object char_literal199_tree = default(object);
	    object NOT200_tree = default(object);
	    object WS201_tree = default(object);
	    object IN202_tree = default(object);
	    object WS203_tree = default(object);
	    object char_literal204_tree = default(object);
	    object WS205_tree = default(object);
	    object WS207_tree = default(object);
	    object char_literal208_tree = default(object);
	    object WS210_tree = default(object);
	    object SOME211_tree = default(object);
	    object ANY212_tree = default(object);
	    object WS213_tree = default(object);
	    object char_literal214_tree = default(object);
	    object char_literal216_tree = default(object);
	    object WS218_tree = default(object);
	    object ALL219_tree = default(object);
	    object WS220_tree = default(object);
	    object char_literal221_tree = default(object);
	    object char_literal223_tree = default(object);
	    RewriteRuleITokenStream stream_164=new RewriteRuleITokenStream(adaptor,"token 164");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_ANY=new RewriteRuleITokenStream(adaptor,"token ANY");
	    RewriteRuleITokenStream stream_IN=new RewriteRuleITokenStream(adaptor,"token IN");
	    RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");
	    RewriteRuleITokenStream stream_SOME=new RewriteRuleITokenStream(adaptor,"token SOME");
	    RewriteRuleITokenStream stream_ALL=new RewriteRuleITokenStream(adaptor,"token ALL");
	    RewriteRuleITokenStream stream_165=new RewriteRuleITokenStream(adaptor,"token 165");
	    RewriteRuleSubtreeStream stream_op_7=new RewriteRuleSubtreeStream(adaptor,"rule op_7");
	    RewriteRuleSubtreeStream stream_expression_6=new RewriteRuleSubtreeStream(adaptor,"rule expression_6");
	    RewriteRuleSubtreeStream stream_expression_list_or_select_command=new RewriteRuleSubtreeStream(adaptor,"rule expression_list_or_select_command");
	    RewriteRuleSubtreeStream stream_op_4=new RewriteRuleSubtreeStream(adaptor,"rule op_4");
		try { DebugEnterRule(GrammarFileName, "expression_7");
		DebugLocation(308, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:309:2: ( (a= expression_6 -> $a) ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:309:4: (a= expression_6 -> $a) ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )*
			{
			DebugLocation(309, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:309:4: (a= expression_6 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:309:5: a= expression_6
			{
			DebugLocation(309, 6);
			PushFollow(Follow._expression_6_in_expression_71653);
			a=expression_6();
			PopFollow();

			stream_expression_6.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 309:19: -> $a
			{
				DebugLocation(309, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(309, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:309:25: ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )*
			try { DebugEnterSubRule(78);
			while (true)
			{
				int alt78=2;
				try { DebugEnterDecision(78, decisionCanBacktrack[78]);
				int LA78_0 = input.LA(1);

				if ((LA78_0==WS))
				{
					int LA78_1 = input.LA(2);

					if ((LA78_1==BETWEEN||LA78_1==IN||LA78_1==LIKE||LA78_1==MATCH||LA78_1==NOT||LA78_1==OR||(LA78_1>=159 && LA78_1<=161)||(LA78_1>=173 && LA78_1<=178)))
					{
						alt78 = 1;
					}


				}


				} finally { DebugExitDecision(78); }
				switch ( alt78 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:309:26: WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) )
					{
					DebugLocation(309, 26);
					WS190=(IToken)Match(input,WS,Follow._WS_in_expression_71660);  
					stream_WS.Add(WS190);

					DebugLocation(309, 29);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:309:29: ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) )
					int alt77=5;
					try { DebugEnterSubRule(77);
					try { DebugEnterDecision(77, decisionCanBacktrack[77]);
					switch (input.LA(1))
					{
					case BETWEEN:
					case LIKE:
					case MATCH:
					case OR:
						{
						alt77 = 1;
						}
						break;
					case NOT:
						{
						int LA77_2 = input.LA(2);

						if ((LA77_2==WS))
						{
							int LA77_13 = input.LA(3);

							if ((LA77_13==BETWEEN||LA77_13==LIKE||LA77_13==MATCH))
							{
								alt77 = 1;
							}
							else if ((LA77_13==IN))
							{
								alt77 = 3;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 77, 13, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 77, 2, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case IN:
						{
						alt77 = 2;
						}
						break;
					case 176:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA77_14 = input.LA(3);

							if ((LA77_14==ANY||LA77_14==SOME))
							{
								alt77 = 4;
							}
							else if ((LA77_14==ALL))
							{
								alt77 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 77, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt77 = 4;
							}
							break;
						case ALL:
							{
							alt77 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 77, 4, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 178:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA77_14 = input.LA(3);

							if ((LA77_14==ANY||LA77_14==SOME))
							{
								alt77 = 4;
							}
							else if ((LA77_14==ALL))
							{
								alt77 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 77, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt77 = 4;
							}
							break;
						case ALL:
							{
							alt77 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 77, 5, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 174:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA77_14 = input.LA(3);

							if ((LA77_14==ANY||LA77_14==SOME))
							{
								alt77 = 4;
							}
							else if ((LA77_14==ALL))
							{
								alt77 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 77, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt77 = 4;
							}
							break;
						case ALL:
							{
							alt77 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 77, 6, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 175:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA77_14 = input.LA(3);

							if ((LA77_14==ANY||LA77_14==SOME))
							{
								alt77 = 4;
							}
							else if ((LA77_14==ALL))
							{
								alt77 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 77, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt77 = 4;
							}
							break;
						case ALL:
							{
							alt77 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 77, 7, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 160:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA77_14 = input.LA(3);

							if ((LA77_14==ANY||LA77_14==SOME))
							{
								alt77 = 4;
							}
							else if ((LA77_14==ALL))
							{
								alt77 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 77, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt77 = 4;
							}
							break;
						case ALL:
							{
							alt77 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 77, 8, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 161:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA77_14 = input.LA(3);

							if ((LA77_14==ANY||LA77_14==SOME))
							{
								alt77 = 4;
							}
							else if ((LA77_14==ALL))
							{
								alt77 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 77, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt77 = 4;
							}
							break;
						case ALL:
							{
							alt77 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 77, 9, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 159:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA77_14 = input.LA(3);

							if ((LA77_14==ANY||LA77_14==SOME))
							{
								alt77 = 4;
							}
							else if ((LA77_14==ALL))
							{
								alt77 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 77, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt77 = 4;
							}
							break;
						case ALL:
							{
							alt77 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 77, 10, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 177:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA77_14 = input.LA(3);

							if ((LA77_14==ANY||LA77_14==SOME))
							{
								alt77 = 4;
							}
							else if ((LA77_14==ALL))
							{
								alt77 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 77, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt77 = 4;
							}
							break;
						case ALL:
							{
							alt77 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 77, 11, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 173:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA77_14 = input.LA(3);

							if ((LA77_14==ANY||LA77_14==SOME))
							{
								alt77 = 4;
							}
							else if ((LA77_14==ALL))
							{
								alt77 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 77, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt77 = 4;
							}
							break;
						case ALL:
							{
							alt77 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 77, 12, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 77, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(77); }
					switch (alt77)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:310:2: op_7 WS b= expression_6
						{
						DebugLocation(310, 2);
						PushFollow(Follow._op_7_in_expression_71665);
						op_7191=op_7();
						PopFollow();

						stream_op_7.Add(op_7191.Tree);
						DebugLocation(310, 7);
						WS192=(IToken)Match(input,WS,Follow._WS_in_expression_71667);  
						stream_WS.Add(WS192);

						DebugLocation(310, 11);
						PushFollow(Follow._expression_6_in_expression_71671);
						b=expression_6();
						PopFollow();

						stream_expression_6.Add(b.Tree);


						{
						// AST REWRITE
						// elements: b, expression_7, op_7
						// token labels: 
						// rule labels: retval, b
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 310:25: -> ^( T_OP_BINARY op_7 $expression_7 $b)
						{
							DebugLocation(310, 28);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:310:28: ^( T_OP_BINARY op_7 $expression_7 $b)
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(310, 30);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(310, 42);
							adaptor.AddChild(root_1, stream_op_7.NextTree());
							DebugLocation(310, 48);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(310, 62);
							adaptor.AddChild(root_1, stream_b.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:311:4: IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')'
						{
						DebugLocation(311, 4);
						IN193=(IToken)Match(input,IN,Follow._IN_in_expression_71690);  
						stream_IN.Add(IN193);

						DebugLocation(311, 7);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:311:7: ( WS )?
						int alt66=2;
						try { DebugEnterSubRule(66);
						try { DebugEnterDecision(66, decisionCanBacktrack[66]);
						int LA66_0 = input.LA(1);

						if ((LA66_0==WS))
						{
							alt66 = 1;
						}
						} finally { DebugExitDecision(66); }
						switch (alt66)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:311:7: WS
							{
							DebugLocation(311, 7);
							WS194=(IToken)Match(input,WS,Follow._WS_in_expression_71692);  
							stream_WS.Add(WS194);


							}
							break;

						}
						} finally { DebugExitSubRule(66); }

						DebugLocation(311, 11);
						char_literal195=(IToken)Match(input,164,Follow._164_in_expression_71695);  
						stream_164.Add(char_literal195);

						DebugLocation(311, 15);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:311:15: ( WS )?
						int alt67=2;
						try { DebugEnterSubRule(67);
						try { DebugEnterDecision(67, decisionCanBacktrack[67]);
						int LA67_0 = input.LA(1);

						if ((LA67_0==WS))
						{
							alt67 = 1;
						}
						} finally { DebugExitDecision(67); }
						switch (alt67)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:311:15: WS
							{
							DebugLocation(311, 15);
							WS196=(IToken)Match(input,WS,Follow._WS_in_expression_71697);  
							stream_WS.Add(WS196);


							}
							break;

						}
						} finally { DebugExitSubRule(67); }

						DebugLocation(311, 19);
						PushFollow(Follow._expression_list_or_select_command_in_expression_71700);
						expression_list_or_select_command197=expression_list_or_select_command();
						PopFollow();

						stream_expression_list_or_select_command.Add(expression_list_or_select_command197.Tree);
						DebugLocation(311, 53);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:311:53: ( WS )?
						int alt68=2;
						try { DebugEnterSubRule(68);
						try { DebugEnterDecision(68, decisionCanBacktrack[68]);
						int LA68_0 = input.LA(1);

						if ((LA68_0==WS))
						{
							alt68 = 1;
						}
						} finally { DebugExitDecision(68); }
						switch (alt68)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:311:53: WS
							{
							DebugLocation(311, 53);
							WS198=(IToken)Match(input,WS,Follow._WS_in_expression_71702);  
							stream_WS.Add(WS198);


							}
							break;

						}
						} finally { DebugExitSubRule(68); }

						DebugLocation(311, 57);
						char_literal199=(IToken)Match(input,165,Follow._165_in_expression_71705);  
						stream_165.Add(char_literal199);



						{
						// AST REWRITE
						// elements: expression_7, expression_list_or_select_command
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 311:61: -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command )
						{
							DebugLocation(311, 64);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:311:64: ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(311, 66);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(311, 78);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_IN, "T_IN"));
							DebugLocation(311, 84);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(311, 97);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:312:4: NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')'
						{
						DebugLocation(312, 4);
						NOT200=(IToken)Match(input,NOT,Follow._NOT_in_expression_71723);  
						stream_NOT.Add(NOT200);

						DebugLocation(312, 8);
						WS201=(IToken)Match(input,WS,Follow._WS_in_expression_71725);  
						stream_WS.Add(WS201);

						DebugLocation(312, 11);
						IN202=(IToken)Match(input,IN,Follow._IN_in_expression_71727);  
						stream_IN.Add(IN202);

						DebugLocation(312, 14);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:312:14: ( WS )?
						int alt69=2;
						try { DebugEnterSubRule(69);
						try { DebugEnterDecision(69, decisionCanBacktrack[69]);
						int LA69_0 = input.LA(1);

						if ((LA69_0==WS))
						{
							alt69 = 1;
						}
						} finally { DebugExitDecision(69); }
						switch (alt69)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:312:14: WS
							{
							DebugLocation(312, 14);
							WS203=(IToken)Match(input,WS,Follow._WS_in_expression_71729);  
							stream_WS.Add(WS203);


							}
							break;

						}
						} finally { DebugExitSubRule(69); }

						DebugLocation(312, 18);
						char_literal204=(IToken)Match(input,164,Follow._164_in_expression_71732);  
						stream_164.Add(char_literal204);

						DebugLocation(312, 22);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:312:22: ( WS )?
						int alt70=2;
						try { DebugEnterSubRule(70);
						try { DebugEnterDecision(70, decisionCanBacktrack[70]);
						int LA70_0 = input.LA(1);

						if ((LA70_0==WS))
						{
							alt70 = 1;
						}
						} finally { DebugExitDecision(70); }
						switch (alt70)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:312:22: WS
							{
							DebugLocation(312, 22);
							WS205=(IToken)Match(input,WS,Follow._WS_in_expression_71734);  
							stream_WS.Add(WS205);


							}
							break;

						}
						} finally { DebugExitSubRule(70); }

						DebugLocation(312, 26);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:312:26: ( expression_list_or_select_command )
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:312:27: expression_list_or_select_command
						{
						DebugLocation(312, 27);
						PushFollow(Follow._expression_list_or_select_command_in_expression_71738);
						expression_list_or_select_command206=expression_list_or_select_command();
						PopFollow();

						stream_expression_list_or_select_command.Add(expression_list_or_select_command206.Tree);

						}

						DebugLocation(312, 62);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:312:62: ( WS )?
						int alt71=2;
						try { DebugEnterSubRule(71);
						try { DebugEnterDecision(71, decisionCanBacktrack[71]);
						int LA71_0 = input.LA(1);

						if ((LA71_0==WS))
						{
							alt71 = 1;
						}
						} finally { DebugExitDecision(71); }
						switch (alt71)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:312:62: WS
							{
							DebugLocation(312, 62);
							WS207=(IToken)Match(input,WS,Follow._WS_in_expression_71741);  
							stream_WS.Add(WS207);


							}
							break;

						}
						} finally { DebugExitSubRule(71); }

						DebugLocation(312, 66);
						char_literal208=(IToken)Match(input,165,Follow._165_in_expression_71744);  
						stream_165.Add(char_literal208);



						{
						// AST REWRITE
						// elements: expression_list_or_select_command, expression_7
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 312:70: -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command )
						{
							DebugLocation(312, 73);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:312:73: ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(312, 75);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(312, 87);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_NOTIN, "T_NOTIN"));
							DebugLocation(312, 96);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(312, 109);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 4:
						DebugEnterAlt(4);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:313:4: op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')'
						{
						DebugLocation(313, 4);
						PushFollow(Follow._op_4_in_expression_71762);
						op_4209=op_4();
						PopFollow();

						stream_op_4.Add(op_4209.Tree);
						DebugLocation(313, 9);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:313:9: ( WS )?
						int alt72=2;
						try { DebugEnterSubRule(72);
						try { DebugEnterDecision(72, decisionCanBacktrack[72]);
						int LA72_0 = input.LA(1);

						if ((LA72_0==WS))
						{
							alt72 = 1;
						}
						} finally { DebugExitDecision(72); }
						switch (alt72)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:313:9: WS
							{
							DebugLocation(313, 9);
							WS210=(IToken)Match(input,WS,Follow._WS_in_expression_71764);  
							stream_WS.Add(WS210);


							}
							break;

						}
						} finally { DebugExitSubRule(72); }

						DebugLocation(313, 13);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:313:13: ( SOME | ANY )
						int alt73=2;
						try { DebugEnterSubRule(73);
						try { DebugEnterDecision(73, decisionCanBacktrack[73]);
						int LA73_0 = input.LA(1);

						if ((LA73_0==SOME))
						{
							alt73 = 1;
						}
						else if ((LA73_0==ANY))
						{
							alt73 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 73, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						} finally { DebugExitDecision(73); }
						switch (alt73)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:313:14: SOME
							{
							DebugLocation(313, 14);
							SOME211=(IToken)Match(input,SOME,Follow._SOME_in_expression_71768);  
							stream_SOME.Add(SOME211);


							}
							break;
						case 2:
							DebugEnterAlt(2);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:313:21: ANY
							{
							DebugLocation(313, 21);
							ANY212=(IToken)Match(input,ANY,Follow._ANY_in_expression_71772);  
							stream_ANY.Add(ANY212);


							}
							break;

						}
						} finally { DebugExitSubRule(73); }

						DebugLocation(313, 26);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:313:26: ( WS )?
						int alt74=2;
						try { DebugEnterSubRule(74);
						try { DebugEnterDecision(74, decisionCanBacktrack[74]);
						int LA74_0 = input.LA(1);

						if ((LA74_0==WS))
						{
							alt74 = 1;
						}
						} finally { DebugExitDecision(74); }
						switch (alt74)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:313:26: WS
							{
							DebugLocation(313, 26);
							WS213=(IToken)Match(input,WS,Follow._WS_in_expression_71775);  
							stream_WS.Add(WS213);


							}
							break;

						}
						} finally { DebugExitSubRule(74); }

						DebugLocation(313, 30);
						char_literal214=(IToken)Match(input,164,Follow._164_in_expression_71778);  
						stream_164.Add(char_literal214);

						DebugLocation(313, 34);
						PushFollow(Follow._expression_list_or_select_command_in_expression_71780);
						expression_list_or_select_command215=expression_list_or_select_command();
						PopFollow();

						stream_expression_list_or_select_command.Add(expression_list_or_select_command215.Tree);
						DebugLocation(313, 68);
						char_literal216=(IToken)Match(input,165,Follow._165_in_expression_71782);  
						stream_165.Add(char_literal216);



						{
						// AST REWRITE
						// elements: op_4, expression_list_or_select_command, expression_7
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 313:72: -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command )
						{
							DebugLocation(313, 75);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:313:75: ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(313, 77);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(313, 89);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_ANY, "T_ANY"));
							DebugLocation(313, 95);
							adaptor.AddChild(root_1, stream_op_4.NextTree());
							DebugLocation(313, 101);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(313, 114);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 5:
						DebugEnterAlt(5);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:314:4: op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')'
						{
						DebugLocation(314, 4);
						PushFollow(Follow._op_4_in_expression_71802);
						op_4217=op_4();
						PopFollow();

						stream_op_4.Add(op_4217.Tree);
						DebugLocation(314, 9);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:314:9: ( WS )?
						int alt75=2;
						try { DebugEnterSubRule(75);
						try { DebugEnterDecision(75, decisionCanBacktrack[75]);
						int LA75_0 = input.LA(1);

						if ((LA75_0==WS))
						{
							alt75 = 1;
						}
						} finally { DebugExitDecision(75); }
						switch (alt75)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:314:9: WS
							{
							DebugLocation(314, 9);
							WS218=(IToken)Match(input,WS,Follow._WS_in_expression_71804);  
							stream_WS.Add(WS218);


							}
							break;

						}
						} finally { DebugExitSubRule(75); }

						DebugLocation(314, 13);
						ALL219=(IToken)Match(input,ALL,Follow._ALL_in_expression_71807);  
						stream_ALL.Add(ALL219);

						DebugLocation(314, 17);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:314:17: ( WS )?
						int alt76=2;
						try { DebugEnterSubRule(76);
						try { DebugEnterDecision(76, decisionCanBacktrack[76]);
						int LA76_0 = input.LA(1);

						if ((LA76_0==WS))
						{
							alt76 = 1;
						}
						} finally { DebugExitDecision(76); }
						switch (alt76)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:314:17: WS
							{
							DebugLocation(314, 17);
							WS220=(IToken)Match(input,WS,Follow._WS_in_expression_71809);  
							stream_WS.Add(WS220);


							}
							break;

						}
						} finally { DebugExitSubRule(76); }

						DebugLocation(314, 21);
						char_literal221=(IToken)Match(input,164,Follow._164_in_expression_71812);  
						stream_164.Add(char_literal221);

						DebugLocation(314, 25);
						PushFollow(Follow._expression_list_or_select_command_in_expression_71814);
						expression_list_or_select_command222=expression_list_or_select_command();
						PopFollow();

						stream_expression_list_or_select_command.Add(expression_list_or_select_command222.Tree);
						DebugLocation(314, 59);
						char_literal223=(IToken)Match(input,165,Follow._165_in_expression_71816);  
						stream_165.Add(char_literal223);



						{
						// AST REWRITE
						// elements: expression_7, expression_list_or_select_command, op_4
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 314:63: -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command )
						{
							DebugLocation(314, 66);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:314:66: ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(314, 68);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(314, 80);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_ALL, "T_ALL"));
							DebugLocation(314, 86);
							adaptor.AddChild(root_1, stream_op_4.NextTree());
							DebugLocation(314, 92);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(314, 105);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					}
					} finally { DebugExitSubRule(77); }


					}
					break;

				default:
					goto loop78;
				}
			}

			loop78:
				;

			} finally { DebugExitSubRule(78); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_7", 38);
			LeaveRule("expression_7", 38);
			LeaveRule_expression_7();
	    }
	 	DebugLocation(316, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_7"); }
		return retval;

	}
	// $ANTLR end "expression_7"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_7() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_7() {}

	// $ANTLR start "op_7"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:318:1: op_7 : ( OR -> T_OR | LIKE -> T_LIKE | NOT WS LIKE -> T_NOTLIKE | MATCH -> T_MATCH | NOT WS MATCH -> T_NOTMATCH | BETWEEN -> T_BETWEEN | NOT WS BETWEEN -> T_NOTBETWEEN );
	[GrammarRule("op_7")]
	private AstParserRuleReturnScope<object, IToken> op_7()
	{
		EnterRule_op_7();
		EnterRule("op_7", 39);
		TraceIn("op_7", 39);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken OR224 = default(IToken);
	    IToken LIKE225 = default(IToken);
	    IToken NOT226 = default(IToken);
	    IToken WS227 = default(IToken);
	    IToken LIKE228 = default(IToken);
	    IToken MATCH229 = default(IToken);
	    IToken NOT230 = default(IToken);
	    IToken WS231 = default(IToken);
	    IToken MATCH232 = default(IToken);
	    IToken BETWEEN233 = default(IToken);
	    IToken NOT234 = default(IToken);
	    IToken WS235 = default(IToken);
	    IToken BETWEEN236 = default(IToken);

	    object OR224_tree = default(object);
	    object LIKE225_tree = default(object);
	    object NOT226_tree = default(object);
	    object WS227_tree = default(object);
	    object LIKE228_tree = default(object);
	    object MATCH229_tree = default(object);
	    object NOT230_tree = default(object);
	    object WS231_tree = default(object);
	    object MATCH232_tree = default(object);
	    object BETWEEN233_tree = default(object);
	    object NOT234_tree = default(object);
	    object WS235_tree = default(object);
	    object BETWEEN236_tree = default(object);
	    RewriteRuleITokenStream stream_MATCH=new RewriteRuleITokenStream(adaptor,"token MATCH");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");
	    RewriteRuleITokenStream stream_BETWEEN=new RewriteRuleITokenStream(adaptor,"token BETWEEN");
	    RewriteRuleITokenStream stream_LIKE=new RewriteRuleITokenStream(adaptor,"token LIKE");
	    RewriteRuleITokenStream stream_OR=new RewriteRuleITokenStream(adaptor,"token OR");

		try { DebugEnterRule(GrammarFileName, "op_7");
		DebugLocation(318, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:318:6: ( OR -> T_OR | LIKE -> T_LIKE | NOT WS LIKE -> T_NOTLIKE | MATCH -> T_MATCH | NOT WS MATCH -> T_NOTMATCH | BETWEEN -> T_BETWEEN | NOT WS BETWEEN -> T_NOTBETWEEN )
			int alt79=7;
			try { DebugEnterDecision(79, decisionCanBacktrack[79]);
			switch (input.LA(1))
			{
			case OR:
				{
				alt79 = 1;
				}
				break;
			case LIKE:
				{
				alt79 = 2;
				}
				break;
			case NOT:
				{
				int LA79_3 = input.LA(2);

				if ((LA79_3==WS))
				{
					switch (input.LA(3))
					{
					case LIKE:
						{
						alt79 = 3;
						}
						break;
					case MATCH:
						{
						alt79 = 5;
						}
						break;
					case BETWEEN:
						{
						alt79 = 7;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 79, 6, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 79, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case MATCH:
				{
				alt79 = 4;
				}
				break;
			case BETWEEN:
				{
				alt79 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 79, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(79); }
			switch (alt79)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:318:8: OR
				{
				DebugLocation(318, 8);
				OR224=(IToken)Match(input,OR,Follow._OR_in_op_71846);  
				stream_OR.Add(OR224);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 318:11: -> T_OR
				{
					DebugLocation(318, 14);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_OR, "T_OR"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:319:4: LIKE
				{
				DebugLocation(319, 4);
				LIKE225=(IToken)Match(input,LIKE,Follow._LIKE_in_op_71855);  
				stream_LIKE.Add(LIKE225);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 319:9: -> T_LIKE
				{
					DebugLocation(319, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_LIKE, "T_LIKE"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:320:4: NOT WS LIKE
				{
				DebugLocation(320, 4);
				NOT226=(IToken)Match(input,NOT,Follow._NOT_in_op_71864);  
				stream_NOT.Add(NOT226);

				DebugLocation(320, 8);
				WS227=(IToken)Match(input,WS,Follow._WS_in_op_71866);  
				stream_WS.Add(WS227);

				DebugLocation(320, 11);
				LIKE228=(IToken)Match(input,LIKE,Follow._LIKE_in_op_71868);  
				stream_LIKE.Add(LIKE228);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 320:16: -> T_NOTLIKE
				{
					DebugLocation(320, 19);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTLIKE, "T_NOTLIKE"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:321:4: MATCH
				{
				DebugLocation(321, 4);
				MATCH229=(IToken)Match(input,MATCH,Follow._MATCH_in_op_71877);  
				stream_MATCH.Add(MATCH229);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 321:10: -> T_MATCH
				{
					DebugLocation(321, 13);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MATCH, "T_MATCH"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:322:4: NOT WS MATCH
				{
				DebugLocation(322, 4);
				NOT230=(IToken)Match(input,NOT,Follow._NOT_in_op_71886);  
				stream_NOT.Add(NOT230);

				DebugLocation(322, 8);
				WS231=(IToken)Match(input,WS,Follow._WS_in_op_71888);  
				stream_WS.Add(WS231);

				DebugLocation(322, 11);
				MATCH232=(IToken)Match(input,MATCH,Follow._MATCH_in_op_71890);  
				stream_MATCH.Add(MATCH232);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 322:17: -> T_NOTMATCH
				{
					DebugLocation(322, 20);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTMATCH, "T_NOTMATCH"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:323:4: BETWEEN
				{
				DebugLocation(323, 4);
				BETWEEN233=(IToken)Match(input,BETWEEN,Follow._BETWEEN_in_op_71899);  
				stream_BETWEEN.Add(BETWEEN233);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 323:12: -> T_BETWEEN
				{
					DebugLocation(323, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BETWEEN, "T_BETWEEN"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:324:4: NOT WS BETWEEN
				{
				DebugLocation(324, 4);
				NOT234=(IToken)Match(input,NOT,Follow._NOT_in_op_71908);  
				stream_NOT.Add(NOT234);

				DebugLocation(324, 8);
				WS235=(IToken)Match(input,WS,Follow._WS_in_op_71910);  
				stream_WS.Add(WS235);

				DebugLocation(324, 11);
				BETWEEN236=(IToken)Match(input,BETWEEN,Follow._BETWEEN_in_op_71912);  
				stream_BETWEEN.Add(BETWEEN236);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 324:19: -> T_NOTBETWEEN
				{
					DebugLocation(324, 22);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTBETWEEN, "T_NOTBETWEEN"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_7", 39);
			LeaveRule("op_7", 39);
			LeaveRule_op_7();
	    }
	 	DebugLocation(325, 1);
		} finally { DebugExitRule(GrammarFileName, "op_7"); }
		return retval;

	}
	// $ANTLR end "op_7"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_6() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_6() {}

	// $ANTLR start "expression_6"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:327:1: expression_6 : (a= expression_5 -> $a) ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )* ;
	[GrammarRule("expression_6")]
	private AstParserRuleReturnScope<object, IToken> expression_6()
	{
		EnterRule_expression_6();
		EnterRule("expression_6", 40);
		TraceIn("expression_6", 40);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS237 = default(IToken);
	    IToken WS239 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_6238 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS237_tree = default(object);
	    object WS239_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_op_6=new RewriteRuleSubtreeStream(adaptor,"rule op_6");
	    RewriteRuleSubtreeStream stream_expression_5=new RewriteRuleSubtreeStream(adaptor,"rule expression_5");
		try { DebugEnterRule(GrammarFileName, "expression_6");
		DebugLocation(327, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:328:2: ( (a= expression_5 -> $a) ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:328:4: (a= expression_5 -> $a) ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )*
			{
			DebugLocation(328, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:328:4: (a= expression_5 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:328:5: a= expression_5
			{
			DebugLocation(328, 6);
			PushFollow(Follow._expression_5_in_expression_61931);
			a=expression_5();
			PopFollow();

			stream_expression_5.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 328:19: -> $a
			{
				DebugLocation(328, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(328, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:328:25: ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )*
			try { DebugEnterSubRule(80);
			while (true)
			{
				int alt80=2;
				try { DebugEnterDecision(80, decisionCanBacktrack[80]);
				int LA80_0 = input.LA(1);

				if ((LA80_0==WS))
				{
					int LA80_1 = input.LA(2);

					if ((LA80_1==AND))
					{
						alt80 = 1;
					}


				}


				} finally { DebugExitDecision(80); }
				switch ( alt80 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:328:26: WS op_6 WS b= expression_5
					{
					DebugLocation(328, 26);
					WS237=(IToken)Match(input,WS,Follow._WS_in_expression_61938);  
					stream_WS.Add(WS237);

					DebugLocation(328, 29);
					PushFollow(Follow._op_6_in_expression_61940);
					op_6238=op_6();
					PopFollow();

					stream_op_6.Add(op_6238.Tree);
					DebugLocation(328, 34);
					WS239=(IToken)Match(input,WS,Follow._WS_in_expression_61942);  
					stream_WS.Add(WS239);

					DebugLocation(328, 38);
					PushFollow(Follow._expression_5_in_expression_61946);
					b=expression_5();
					PopFollow();

					stream_expression_5.Add(b.Tree);


					{
					// AST REWRITE
					// elements: expression_6, b, op_6
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 328:52: -> ^( T_OP_BINARY op_6 $expression_6 $b)
					{
						DebugLocation(328, 55);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:328:55: ^( T_OP_BINARY op_6 $expression_6 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(328, 57);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(328, 69);
						adaptor.AddChild(root_1, stream_op_6.NextTree());
						DebugLocation(328, 75);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(328, 89);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop80;
				}
			}

			loop80:
				;

			} finally { DebugExitSubRule(80); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_6", 40);
			LeaveRule("expression_6", 40);
			LeaveRule_expression_6();
	    }
	 	DebugLocation(329, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_6"); }
		return retval;

	}
	// $ANTLR end "expression_6"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_6() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_6() {}

	// $ANTLR start "op_6"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:331:1: op_6 : AND -> T_AND ;
	[GrammarRule("op_6")]
	private AstParserRuleReturnScope<object, IToken> op_6()
	{
		EnterRule_op_6();
		EnterRule("op_6", 41);
		TraceIn("op_6", 41);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken AND240 = default(IToken);

	    object AND240_tree = default(object);
	    RewriteRuleITokenStream stream_AND=new RewriteRuleITokenStream(adaptor,"token AND");

		try { DebugEnterRule(GrammarFileName, "op_6");
		DebugLocation(331, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:331:6: ( AND -> T_AND )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:331:8: AND
			{
			DebugLocation(331, 8);
			AND240=(IToken)Match(input,AND,Follow._AND_in_op_61974);  
			stream_AND.Add(AND240);



			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 331:12: -> T_AND
			{
				DebugLocation(331, 15);
				adaptor.AddChild(root_0, (object)adaptor.Create(T_AND, "T_AND"));

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_6", 41);
			LeaveRule("op_6", 41);
			LeaveRule_op_6();
	    }
	 	DebugLocation(332, 1);
		} finally { DebugExitRule(GrammarFileName, "op_6"); }
		return retval;

	}
	// $ANTLR end "op_6"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_5() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_5() {}

	// $ANTLR start "expression_5"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:334:1: expression_5 : ( op_5 WS expression_5 -> ^( T_OP_UNARY op_5 expression_5 ) | expression_4 );
	[GrammarRule("expression_5")]
	private AstParserRuleReturnScope<object, IToken> expression_5()
	{
		EnterRule_expression_5();
		EnterRule("expression_5", 42);
		TraceIn("expression_5", 42);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS242 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> op_5241 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_5243 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_4244 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS242_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression_5=new RewriteRuleSubtreeStream(adaptor,"rule expression_5");
	    RewriteRuleSubtreeStream stream_op_5=new RewriteRuleSubtreeStream(adaptor,"rule op_5");
		try { DebugEnterRule(GrammarFileName, "expression_5");
		DebugLocation(334, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:335:2: ( op_5 WS expression_5 -> ^( T_OP_UNARY op_5 expression_5 ) | expression_4 )
			int alt81=2;
			try { DebugEnterDecision(81, decisionCanBacktrack[81]);
			int LA81_0 = input.LA(1);

			if ((LA81_0==NOT))
			{
				alt81 = 1;
			}
			else if (((LA81_0>=CASE && LA81_0<=CAST)||(LA81_0>=CONVERT && LA81_0<=COUNT)||(LA81_0>=DATEADD && LA81_0<=DATEPART)||LA81_0==EXISTS||LA81_0==NUMBER||LA81_0==SIMPLE_FILE||(LA81_0>=STRING && LA81_0<=SYSTEMVAR)||LA81_0==TOKEN||LA81_0==VARIABLE||LA81_0==164||LA81_0==167||LA81_0==169||LA81_0==183))
			{
				alt81 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 81, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(81); }
			switch (alt81)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:335:4: op_5 WS expression_5
				{
				DebugLocation(335, 4);
				PushFollow(Follow._op_5_in_expression_51992);
				op_5241=op_5();
				PopFollow();

				stream_op_5.Add(op_5241.Tree);
				DebugLocation(335, 9);
				WS242=(IToken)Match(input,WS,Follow._WS_in_expression_51994);  
				stream_WS.Add(WS242);

				DebugLocation(335, 12);
				PushFollow(Follow._expression_5_in_expression_51996);
				expression_5243=expression_5();
				PopFollow();

				stream_expression_5.Add(expression_5243.Tree);


				{
				// AST REWRITE
				// elements: expression_5, op_5
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 335:25: -> ^( T_OP_UNARY op_5 expression_5 )
				{
					DebugLocation(335, 28);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:335:28: ^( T_OP_UNARY op_5 expression_5 )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(335, 30);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_UNARY, "T_OP_UNARY"), root_1);

					DebugLocation(335, 41);
					adaptor.AddChild(root_1, stream_op_5.NextTree());
					DebugLocation(335, 46);
					adaptor.AddChild(root_1, stream_expression_5.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:336:4: expression_4
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(336, 4);
				PushFollow(Follow._expression_4_in_expression_52011);
				expression_4244=expression_4();
				PopFollow();

				adaptor.AddChild(root_0, expression_4244.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_5", 42);
			LeaveRule("expression_5", 42);
			LeaveRule_expression_5();
	    }
	 	DebugLocation(337, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_5"); }
		return retval;

	}
	// $ANTLR end "expression_5"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_5() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_5() {}

	// $ANTLR start "op_5"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:339:1: op_5 : NOT -> T_NOT ;
	[GrammarRule("op_5")]
	private AstParserRuleReturnScope<object, IToken> op_5()
	{
		EnterRule_op_5();
		EnterRule("op_5", 43);
		TraceIn("op_5", 43);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken NOT245 = default(IToken);

	    object NOT245_tree = default(object);
	    RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");

		try { DebugEnterRule(GrammarFileName, "op_5");
		DebugLocation(339, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:339:7: ( NOT -> T_NOT )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:339:9: NOT
			{
			DebugLocation(339, 9);
			NOT245=(IToken)Match(input,NOT,Follow._NOT_in_op_52022);  
			stream_NOT.Add(NOT245);



			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 339:13: -> T_NOT
			{
				DebugLocation(339, 16);
				adaptor.AddChild(root_0, (object)adaptor.Create(T_NOT, "T_NOT"));

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_5", 43);
			LeaveRule("op_5", 43);
			LeaveRule_op_5();
	    }
	 	DebugLocation(340, 1);
		} finally { DebugExitRule(GrammarFileName, "op_5"); }
		return retval;

	}
	// $ANTLR end "op_5"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_4() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_4() {}

	// $ANTLR start "expression_4"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:342:1: expression_4 : (a= expression_3 -> $a) ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )* ;
	[GrammarRule("expression_4")]
	private AstParserRuleReturnScope<object, IToken> expression_4()
	{
		EnterRule_expression_4();
		EnterRule("expression_4", 44);
		TraceIn("expression_4", 44);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS246 = default(IToken);
	    IToken WS248 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_4247 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS246_tree = default(object);
	    object WS248_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression_3=new RewriteRuleSubtreeStream(adaptor,"rule expression_3");
	    RewriteRuleSubtreeStream stream_op_4=new RewriteRuleSubtreeStream(adaptor,"rule op_4");
		try { DebugEnterRule(GrammarFileName, "expression_4");
		DebugLocation(342, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:343:2: ( (a= expression_3 -> $a) ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:343:4: (a= expression_3 -> $a) ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )*
			{
			DebugLocation(343, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:343:4: (a= expression_3 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:343:5: a= expression_3
			{
			DebugLocation(343, 6);
			PushFollow(Follow._expression_3_in_expression_42041);
			a=expression_3();
			PopFollow();

			stream_expression_3.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 343:19: -> $a
			{
				DebugLocation(343, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(343, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:343:25: ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )*
			try { DebugEnterSubRule(84);
			while (true)
			{
				int alt84=2;
				try { DebugEnterDecision(84, decisionCanBacktrack[84]);
				int LA84_0 = input.LA(1);

				if ((LA84_0==WS))
				{
					switch (input.LA(2))
					{
					case 176:
						{
						int LA84_4 = input.LA(3);

						if ((LA84_4==WS))
						{
							int LA84_13 = input.LA(4);

							if (((LA84_13>=CASE && LA84_13<=CAST)||(LA84_13>=CONVERT && LA84_13<=COUNT)||(LA84_13>=DATEADD && LA84_13<=DATEPART)||LA84_13==EXISTS||LA84_13==NUMBER||LA84_13==SIMPLE_FILE||(LA84_13>=STRING && LA84_13<=SYSTEMVAR)||LA84_13==TOKEN||LA84_13==VARIABLE||LA84_13==164||LA84_13==167||LA84_13==169||LA84_13==183))
							{
								alt84 = 1;
							}


						}
						else if (((LA84_4>=CASE && LA84_4<=CAST)||(LA84_4>=CONVERT && LA84_4<=COUNT)||(LA84_4>=DATEADD && LA84_4<=DATEPART)||LA84_4==EXISTS||LA84_4==NUMBER||LA84_4==SIMPLE_FILE||(LA84_4>=STRING && LA84_4<=SYSTEMVAR)||LA84_4==TOKEN||LA84_4==VARIABLE||LA84_4==164||LA84_4==167||LA84_4==169||LA84_4==183))
						{
							alt84 = 1;
						}


						}
						break;
					case 178:
						{
						int LA84_5 = input.LA(3);

						if ((LA84_5==WS))
						{
							int LA84_13 = input.LA(4);

							if (((LA84_13>=CASE && LA84_13<=CAST)||(LA84_13>=CONVERT && LA84_13<=COUNT)||(LA84_13>=DATEADD && LA84_13<=DATEPART)||LA84_13==EXISTS||LA84_13==NUMBER||LA84_13==SIMPLE_FILE||(LA84_13>=STRING && LA84_13<=SYSTEMVAR)||LA84_13==TOKEN||LA84_13==VARIABLE||LA84_13==164||LA84_13==167||LA84_13==169||LA84_13==183))
							{
								alt84 = 1;
							}


						}
						else if (((LA84_5>=CASE && LA84_5<=CAST)||(LA84_5>=CONVERT && LA84_5<=COUNT)||(LA84_5>=DATEADD && LA84_5<=DATEPART)||LA84_5==EXISTS||LA84_5==NUMBER||LA84_5==SIMPLE_FILE||(LA84_5>=STRING && LA84_5<=SYSTEMVAR)||LA84_5==TOKEN||LA84_5==VARIABLE||LA84_5==164||LA84_5==167||LA84_5==169||LA84_5==183))
						{
							alt84 = 1;
						}


						}
						break;
					case 174:
						{
						int LA84_6 = input.LA(3);

						if ((LA84_6==WS))
						{
							int LA84_13 = input.LA(4);

							if (((LA84_13>=CASE && LA84_13<=CAST)||(LA84_13>=CONVERT && LA84_13<=COUNT)||(LA84_13>=DATEADD && LA84_13<=DATEPART)||LA84_13==EXISTS||LA84_13==NUMBER||LA84_13==SIMPLE_FILE||(LA84_13>=STRING && LA84_13<=SYSTEMVAR)||LA84_13==TOKEN||LA84_13==VARIABLE||LA84_13==164||LA84_13==167||LA84_13==169||LA84_13==183))
							{
								alt84 = 1;
							}


						}
						else if (((LA84_6>=CASE && LA84_6<=CAST)||(LA84_6>=CONVERT && LA84_6<=COUNT)||(LA84_6>=DATEADD && LA84_6<=DATEPART)||LA84_6==EXISTS||LA84_6==NUMBER||LA84_6==SIMPLE_FILE||(LA84_6>=STRING && LA84_6<=SYSTEMVAR)||LA84_6==TOKEN||LA84_6==VARIABLE||LA84_6==164||LA84_6==167||LA84_6==169||LA84_6==183))
						{
							alt84 = 1;
						}


						}
						break;
					case 175:
						{
						int LA84_7 = input.LA(3);

						if ((LA84_7==WS))
						{
							int LA84_13 = input.LA(4);

							if (((LA84_13>=CASE && LA84_13<=CAST)||(LA84_13>=CONVERT && LA84_13<=COUNT)||(LA84_13>=DATEADD && LA84_13<=DATEPART)||LA84_13==EXISTS||LA84_13==NUMBER||LA84_13==SIMPLE_FILE||(LA84_13>=STRING && LA84_13<=SYSTEMVAR)||LA84_13==TOKEN||LA84_13==VARIABLE||LA84_13==164||LA84_13==167||LA84_13==169||LA84_13==183))
							{
								alt84 = 1;
							}


						}
						else if (((LA84_7>=CASE && LA84_7<=CAST)||(LA84_7>=CONVERT && LA84_7<=COUNT)||(LA84_7>=DATEADD && LA84_7<=DATEPART)||LA84_7==EXISTS||LA84_7==NUMBER||LA84_7==SIMPLE_FILE||(LA84_7>=STRING && LA84_7<=SYSTEMVAR)||LA84_7==TOKEN||LA84_7==VARIABLE||LA84_7==164||LA84_7==167||LA84_7==169||LA84_7==183))
						{
							alt84 = 1;
						}


						}
						break;
					case 160:
						{
						int LA84_8 = input.LA(3);

						if ((LA84_8==WS))
						{
							int LA84_13 = input.LA(4);

							if (((LA84_13>=CASE && LA84_13<=CAST)||(LA84_13>=CONVERT && LA84_13<=COUNT)||(LA84_13>=DATEADD && LA84_13<=DATEPART)||LA84_13==EXISTS||LA84_13==NUMBER||LA84_13==SIMPLE_FILE||(LA84_13>=STRING && LA84_13<=SYSTEMVAR)||LA84_13==TOKEN||LA84_13==VARIABLE||LA84_13==164||LA84_13==167||LA84_13==169||LA84_13==183))
							{
								alt84 = 1;
							}


						}
						else if (((LA84_8>=CASE && LA84_8<=CAST)||(LA84_8>=CONVERT && LA84_8<=COUNT)||(LA84_8>=DATEADD && LA84_8<=DATEPART)||LA84_8==EXISTS||LA84_8==NUMBER||LA84_8==SIMPLE_FILE||(LA84_8>=STRING && LA84_8<=SYSTEMVAR)||LA84_8==TOKEN||LA84_8==VARIABLE||LA84_8==164||LA84_8==167||LA84_8==169||LA84_8==183))
						{
							alt84 = 1;
						}


						}
						break;
					case 161:
						{
						int LA84_9 = input.LA(3);

						if ((LA84_9==WS))
						{
							int LA84_13 = input.LA(4);

							if (((LA84_13>=CASE && LA84_13<=CAST)||(LA84_13>=CONVERT && LA84_13<=COUNT)||(LA84_13>=DATEADD && LA84_13<=DATEPART)||LA84_13==EXISTS||LA84_13==NUMBER||LA84_13==SIMPLE_FILE||(LA84_13>=STRING && LA84_13<=SYSTEMVAR)||LA84_13==TOKEN||LA84_13==VARIABLE||LA84_13==164||LA84_13==167||LA84_13==169||LA84_13==183))
							{
								alt84 = 1;
							}


						}
						else if (((LA84_9>=CASE && LA84_9<=CAST)||(LA84_9>=CONVERT && LA84_9<=COUNT)||(LA84_9>=DATEADD && LA84_9<=DATEPART)||LA84_9==EXISTS||LA84_9==NUMBER||LA84_9==SIMPLE_FILE||(LA84_9>=STRING && LA84_9<=SYSTEMVAR)||LA84_9==TOKEN||LA84_9==VARIABLE||LA84_9==164||LA84_9==167||LA84_9==169||LA84_9==183))
						{
							alt84 = 1;
						}


						}
						break;
					case 159:
						{
						int LA84_10 = input.LA(3);

						if ((LA84_10==WS))
						{
							int LA84_13 = input.LA(4);

							if (((LA84_13>=CASE && LA84_13<=CAST)||(LA84_13>=CONVERT && LA84_13<=COUNT)||(LA84_13>=DATEADD && LA84_13<=DATEPART)||LA84_13==EXISTS||LA84_13==NUMBER||LA84_13==SIMPLE_FILE||(LA84_13>=STRING && LA84_13<=SYSTEMVAR)||LA84_13==TOKEN||LA84_13==VARIABLE||LA84_13==164||LA84_13==167||LA84_13==169||LA84_13==183))
							{
								alt84 = 1;
							}


						}
						else if (((LA84_10>=CASE && LA84_10<=CAST)||(LA84_10>=CONVERT && LA84_10<=COUNT)||(LA84_10>=DATEADD && LA84_10<=DATEPART)||LA84_10==EXISTS||LA84_10==NUMBER||LA84_10==SIMPLE_FILE||(LA84_10>=STRING && LA84_10<=SYSTEMVAR)||LA84_10==TOKEN||LA84_10==VARIABLE||LA84_10==164||LA84_10==167||LA84_10==169||LA84_10==183))
						{
							alt84 = 1;
						}


						}
						break;
					case 177:
						{
						int LA84_11 = input.LA(3);

						if ((LA84_11==WS))
						{
							int LA84_13 = input.LA(4);

							if (((LA84_13>=CASE && LA84_13<=CAST)||(LA84_13>=CONVERT && LA84_13<=COUNT)||(LA84_13>=DATEADD && LA84_13<=DATEPART)||LA84_13==EXISTS||LA84_13==NUMBER||LA84_13==SIMPLE_FILE||(LA84_13>=STRING && LA84_13<=SYSTEMVAR)||LA84_13==TOKEN||LA84_13==VARIABLE||LA84_13==164||LA84_13==167||LA84_13==169||LA84_13==183))
							{
								alt84 = 1;
							}


						}
						else if (((LA84_11>=CASE && LA84_11<=CAST)||(LA84_11>=CONVERT && LA84_11<=COUNT)||(LA84_11>=DATEADD && LA84_11<=DATEPART)||LA84_11==EXISTS||LA84_11==NUMBER||LA84_11==SIMPLE_FILE||(LA84_11>=STRING && LA84_11<=SYSTEMVAR)||LA84_11==TOKEN||LA84_11==VARIABLE||LA84_11==164||LA84_11==167||LA84_11==169||LA84_11==183))
						{
							alt84 = 1;
						}


						}
						break;
					case 173:
						{
						int LA84_12 = input.LA(3);

						if ((LA84_12==WS))
						{
							int LA84_13 = input.LA(4);

							if (((LA84_13>=CASE && LA84_13<=CAST)||(LA84_13>=CONVERT && LA84_13<=COUNT)||(LA84_13>=DATEADD && LA84_13<=DATEPART)||LA84_13==EXISTS||LA84_13==NUMBER||LA84_13==SIMPLE_FILE||(LA84_13>=STRING && LA84_13<=SYSTEMVAR)||LA84_13==TOKEN||LA84_13==VARIABLE||LA84_13==164||LA84_13==167||LA84_13==169||LA84_13==183))
							{
								alt84 = 1;
							}


						}
						else if (((LA84_12>=CASE && LA84_12<=CAST)||(LA84_12>=CONVERT && LA84_12<=COUNT)||(LA84_12>=DATEADD && LA84_12<=DATEPART)||LA84_12==EXISTS||LA84_12==NUMBER||LA84_12==SIMPLE_FILE||(LA84_12>=STRING && LA84_12<=SYSTEMVAR)||LA84_12==TOKEN||LA84_12==VARIABLE||LA84_12==164||LA84_12==167||LA84_12==169||LA84_12==183))
						{
							alt84 = 1;
						}


						}
						break;
					}

				}
				else if (((LA84_0>=159 && LA84_0<=161)||(LA84_0>=173 && LA84_0<=178)))
				{
					alt84 = 1;
				}


				} finally { DebugExitDecision(84); }
				switch ( alt84 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:343:26: ( WS )? op_4 ( WS )? b= expression_3
					{
					DebugLocation(343, 26);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:343:26: ( WS )?
					int alt82=2;
					try { DebugEnterSubRule(82);
					try { DebugEnterDecision(82, decisionCanBacktrack[82]);
					int LA82_0 = input.LA(1);

					if ((LA82_0==WS))
					{
						alt82 = 1;
					}
					} finally { DebugExitDecision(82); }
					switch (alt82)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:343:26: WS
						{
						DebugLocation(343, 26);
						WS246=(IToken)Match(input,WS,Follow._WS_in_expression_42048);  
						stream_WS.Add(WS246);


						}
						break;

					}
					} finally { DebugExitSubRule(82); }

					DebugLocation(343, 30);
					PushFollow(Follow._op_4_in_expression_42051);
					op_4247=op_4();
					PopFollow();

					stream_op_4.Add(op_4247.Tree);
					DebugLocation(343, 35);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:343:35: ( WS )?
					int alt83=2;
					try { DebugEnterSubRule(83);
					try { DebugEnterDecision(83, decisionCanBacktrack[83]);
					int LA83_0 = input.LA(1);

					if ((LA83_0==WS))
					{
						alt83 = 1;
					}
					} finally { DebugExitDecision(83); }
					switch (alt83)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:343:35: WS
						{
						DebugLocation(343, 35);
						WS248=(IToken)Match(input,WS,Follow._WS_in_expression_42053);  
						stream_WS.Add(WS248);


						}
						break;

					}
					} finally { DebugExitSubRule(83); }

					DebugLocation(343, 40);
					PushFollow(Follow._expression_3_in_expression_42058);
					b=expression_3();
					PopFollow();

					stream_expression_3.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, expression_4, op_4
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 343:54: -> ^( T_OP_BINARY op_4 $expression_4 $b)
					{
						DebugLocation(343, 57);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:343:57: ^( T_OP_BINARY op_4 $expression_4 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(343, 59);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(343, 71);
						adaptor.AddChild(root_1, stream_op_4.NextTree());
						DebugLocation(343, 77);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(343, 91);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop84;
				}
			}

			loop84:
				;

			} finally { DebugExitSubRule(84); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_4", 44);
			LeaveRule("expression_4", 44);
			LeaveRule_expression_4();
	    }
	 	DebugLocation(344, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_4"); }
		return retval;

	}
	// $ANTLR end "expression_4"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_4() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_4() {}

	// $ANTLR start "op_4"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:346:1: op_4 : ( '=' -> T_EQUAL | '>=' -> T_NOTLESS | '<=' -> T_NOTGREATER | '<>' -> T_NOTEQUAL | '!=' -> T_NOTEQUAL | '!>' -> T_NOTGREATER | '!<' -> T_NOTLESS | '>' -> T_GREATER | '<' -> T_LESS );
	[GrammarRule("op_4")]
	private AstParserRuleReturnScope<object, IToken> op_4()
	{
		EnterRule_op_4();
		EnterRule("op_4", 45);
		TraceIn("op_4", 45);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal249 = default(IToken);
	    IToken string_literal250 = default(IToken);
	    IToken string_literal251 = default(IToken);
	    IToken string_literal252 = default(IToken);
	    IToken string_literal253 = default(IToken);
	    IToken string_literal254 = default(IToken);
	    IToken string_literal255 = default(IToken);
	    IToken char_literal256 = default(IToken);
	    IToken char_literal257 = default(IToken);

	    object char_literal249_tree = default(object);
	    object string_literal250_tree = default(object);
	    object string_literal251_tree = default(object);
	    object string_literal252_tree = default(object);
	    object string_literal253_tree = default(object);
	    object string_literal254_tree = default(object);
	    object string_literal255_tree = default(object);
	    object char_literal256_tree = default(object);
	    object char_literal257_tree = default(object);
	    RewriteRuleITokenStream stream_161=new RewriteRuleITokenStream(adaptor,"token 161");
	    RewriteRuleITokenStream stream_174=new RewriteRuleITokenStream(adaptor,"token 174");
	    RewriteRuleITokenStream stream_175=new RewriteRuleITokenStream(adaptor,"token 175");
	    RewriteRuleITokenStream stream_173=new RewriteRuleITokenStream(adaptor,"token 173");
	    RewriteRuleITokenStream stream_160=new RewriteRuleITokenStream(adaptor,"token 160");
	    RewriteRuleITokenStream stream_178=new RewriteRuleITokenStream(adaptor,"token 178");
	    RewriteRuleITokenStream stream_177=new RewriteRuleITokenStream(adaptor,"token 177");
	    RewriteRuleITokenStream stream_159=new RewriteRuleITokenStream(adaptor,"token 159");
	    RewriteRuleITokenStream stream_176=new RewriteRuleITokenStream(adaptor,"token 176");

		try { DebugEnterRule(GrammarFileName, "op_4");
		DebugLocation(346, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:346:6: ( '=' -> T_EQUAL | '>=' -> T_NOTLESS | '<=' -> T_NOTGREATER | '<>' -> T_NOTEQUAL | '!=' -> T_NOTEQUAL | '!>' -> T_NOTGREATER | '!<' -> T_NOTLESS | '>' -> T_GREATER | '<' -> T_LESS )
			int alt85=9;
			try { DebugEnterDecision(85, decisionCanBacktrack[85]);
			switch (input.LA(1))
			{
			case 176:
				{
				alt85 = 1;
				}
				break;
			case 178:
				{
				alt85 = 2;
				}
				break;
			case 174:
				{
				alt85 = 3;
				}
				break;
			case 175:
				{
				alt85 = 4;
				}
				break;
			case 160:
				{
				alt85 = 5;
				}
				break;
			case 161:
				{
				alt85 = 6;
				}
				break;
			case 159:
				{
				alt85 = 7;
				}
				break;
			case 177:
				{
				alt85 = 8;
				}
				break;
			case 173:
				{
				alt85 = 9;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 85, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(85); }
			switch (alt85)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:346:8: '='
				{
				DebugLocation(346, 8);
				char_literal249=(IToken)Match(input,176,Follow._176_in_op_42084);  
				stream_176.Add(char_literal249);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 346:12: -> T_EQUAL
				{
					DebugLocation(346, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_EQUAL, "T_EQUAL"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:347:4: '>='
				{
				DebugLocation(347, 4);
				string_literal250=(IToken)Match(input,178,Follow._178_in_op_42093);  
				stream_178.Add(string_literal250);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 347:9: -> T_NOTLESS
				{
					DebugLocation(347, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTLESS, "T_NOTLESS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:348:4: '<='
				{
				DebugLocation(348, 4);
				string_literal251=(IToken)Match(input,174,Follow._174_in_op_42103);  
				stream_174.Add(string_literal251);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 348:9: -> T_NOTGREATER
				{
					DebugLocation(348, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTGREATER, "T_NOTGREATER"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:349:4: '<>'
				{
				DebugLocation(349, 4);
				string_literal252=(IToken)Match(input,175,Follow._175_in_op_42113);  
				stream_175.Add(string_literal252);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 349:9: -> T_NOTEQUAL
				{
					DebugLocation(349, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTEQUAL, "T_NOTEQUAL"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:350:4: '!='
				{
				DebugLocation(350, 4);
				string_literal253=(IToken)Match(input,160,Follow._160_in_op_42122);  
				stream_160.Add(string_literal253);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 350:9: -> T_NOTEQUAL
				{
					DebugLocation(350, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTEQUAL, "T_NOTEQUAL"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:351:4: '!>'
				{
				DebugLocation(351, 4);
				string_literal254=(IToken)Match(input,161,Follow._161_in_op_42131);  
				stream_161.Add(string_literal254);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 351:9: -> T_NOTGREATER
				{
					DebugLocation(351, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTGREATER, "T_NOTGREATER"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:352:4: '!<'
				{
				DebugLocation(352, 4);
				string_literal255=(IToken)Match(input,159,Follow._159_in_op_42140);  
				stream_159.Add(string_literal255);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 352:9: -> T_NOTLESS
				{
					DebugLocation(352, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTLESS, "T_NOTLESS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:353:4: '>'
				{
				DebugLocation(353, 4);
				char_literal256=(IToken)Match(input,177,Follow._177_in_op_42149);  
				stream_177.Add(char_literal256);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 353:8: -> T_GREATER
				{
					DebugLocation(353, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_GREATER, "T_GREATER"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:354:4: '<'
				{
				DebugLocation(354, 4);
				char_literal257=(IToken)Match(input,173,Follow._173_in_op_42159);  
				stream_173.Add(char_literal257);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 354:8: -> T_LESS
				{
					DebugLocation(354, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_LESS, "T_LESS"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_4", 45);
			LeaveRule("op_4", 45);
			LeaveRule_op_4();
	    }
	 	DebugLocation(355, 1);
		} finally { DebugExitRule(GrammarFileName, "op_4"); }
		return retval;

	}
	// $ANTLR end "op_4"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_3() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_3() {}

	// $ANTLR start "expression_3"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:357:1: expression_3 : (a= expression_2 -> $a) ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )* ;
	[GrammarRule("expression_3")]
	private AstParserRuleReturnScope<object, IToken> expression_3()
	{
		EnterRule_expression_3();
		EnterRule("expression_3", 46);
		TraceIn("expression_3", 46);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS258 = default(IToken);
	    IToken WS260 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_3259 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS258_tree = default(object);
	    object WS260_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_op_3=new RewriteRuleSubtreeStream(adaptor,"rule op_3");
	    RewriteRuleSubtreeStream stream_expression_2=new RewriteRuleSubtreeStream(adaptor,"rule expression_2");
		try { DebugEnterRule(GrammarFileName, "expression_3");
		DebugLocation(357, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:358:2: ( (a= expression_2 -> $a) ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:358:4: (a= expression_2 -> $a) ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )*
			{
			DebugLocation(358, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:358:4: (a= expression_2 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:358:5: a= expression_2
			{
			DebugLocation(358, 6);
			PushFollow(Follow._expression_2_in_expression_32178);
			a=expression_2();
			PopFollow();

			stream_expression_2.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 358:19: -> $a
			{
				DebugLocation(358, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(358, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:358:25: ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )*
			try { DebugEnterSubRule(88);
			while (true)
			{
				int alt88=2;
				try { DebugEnterDecision(88, decisionCanBacktrack[88]);
				int LA88_0 = input.LA(1);

				if ((LA88_0==WS))
				{
					int LA88_1 = input.LA(2);

					if ((LA88_1==163||LA88_1==167||LA88_1==169||(LA88_1>=181 && LA88_1<=182)))
					{
						alt88 = 1;
					}


				}
				else if ((LA88_0==163||LA88_0==167||LA88_0==169||(LA88_0>=181 && LA88_0<=182)))
				{
					alt88 = 1;
				}


				} finally { DebugExitDecision(88); }
				switch ( alt88 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:358:26: ( WS )? op_3 ( WS )? b= expression_2
					{
					DebugLocation(358, 26);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:358:26: ( WS )?
					int alt86=2;
					try { DebugEnterSubRule(86);
					try { DebugEnterDecision(86, decisionCanBacktrack[86]);
					int LA86_0 = input.LA(1);

					if ((LA86_0==WS))
					{
						alt86 = 1;
					}
					} finally { DebugExitDecision(86); }
					switch (alt86)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:358:26: WS
						{
						DebugLocation(358, 26);
						WS258=(IToken)Match(input,WS,Follow._WS_in_expression_32185);  
						stream_WS.Add(WS258);


						}
						break;

					}
					} finally { DebugExitSubRule(86); }

					DebugLocation(358, 30);
					PushFollow(Follow._op_3_in_expression_32188);
					op_3259=op_3();
					PopFollow();

					stream_op_3.Add(op_3259.Tree);
					DebugLocation(358, 35);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:358:35: ( WS )?
					int alt87=2;
					try { DebugEnterSubRule(87);
					try { DebugEnterDecision(87, decisionCanBacktrack[87]);
					int LA87_0 = input.LA(1);

					if ((LA87_0==WS))
					{
						alt87 = 1;
					}
					} finally { DebugExitDecision(87); }
					switch (alt87)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:358:35: WS
						{
						DebugLocation(358, 35);
						WS260=(IToken)Match(input,WS,Follow._WS_in_expression_32190);  
						stream_WS.Add(WS260);


						}
						break;

					}
					} finally { DebugExitSubRule(87); }

					DebugLocation(358, 40);
					PushFollow(Follow._expression_2_in_expression_32195);
					b=expression_2();
					PopFollow();

					stream_expression_2.Add(b.Tree);


					{
					// AST REWRITE
					// elements: expression_3, op_3, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 358:54: -> ^( T_OP_BINARY op_3 $expression_3 $b)
					{
						DebugLocation(358, 57);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:358:57: ^( T_OP_BINARY op_3 $expression_3 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(358, 59);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(358, 71);
						adaptor.AddChild(root_1, stream_op_3.NextTree());
						DebugLocation(358, 77);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(358, 91);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop88;
				}
			}

			loop88:
				;

			} finally { DebugExitSubRule(88); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_3", 46);
			LeaveRule("expression_3", 46);
			LeaveRule_expression_3();
	    }
	 	DebugLocation(359, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_3"); }
		return retval;

	}
	// $ANTLR end "expression_3"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_3() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_3() {}

	// $ANTLR start "op_3"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:361:1: op_3 : ( '+' -> T_PLUS | '-' -> T_MINUS | '&' -> T_BITWISE_AND | '|' -> T_BITWISE_OR | '^' -> T_BITWISE_XOR );
	[GrammarRule("op_3")]
	private AstParserRuleReturnScope<object, IToken> op_3()
	{
		EnterRule_op_3();
		EnterRule("op_3", 47);
		TraceIn("op_3", 47);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal261 = default(IToken);
	    IToken char_literal262 = default(IToken);
	    IToken char_literal263 = default(IToken);
	    IToken char_literal264 = default(IToken);
	    IToken char_literal265 = default(IToken);

	    object char_literal261_tree = default(object);
	    object char_literal262_tree = default(object);
	    object char_literal263_tree = default(object);
	    object char_literal264_tree = default(object);
	    object char_literal265_tree = default(object);
	    RewriteRuleITokenStream stream_181=new RewriteRuleITokenStream(adaptor,"token 181");
	    RewriteRuleITokenStream stream_163=new RewriteRuleITokenStream(adaptor,"token 163");
	    RewriteRuleITokenStream stream_182=new RewriteRuleITokenStream(adaptor,"token 182");
	    RewriteRuleITokenStream stream_169=new RewriteRuleITokenStream(adaptor,"token 169");
	    RewriteRuleITokenStream stream_167=new RewriteRuleITokenStream(adaptor,"token 167");

		try { DebugEnterRule(GrammarFileName, "op_3");
		DebugLocation(361, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:361:6: ( '+' -> T_PLUS | '-' -> T_MINUS | '&' -> T_BITWISE_AND | '|' -> T_BITWISE_OR | '^' -> T_BITWISE_XOR )
			int alt89=5;
			try { DebugEnterDecision(89, decisionCanBacktrack[89]);
			switch (input.LA(1))
			{
			case 167:
				{
				alt89 = 1;
				}
				break;
			case 169:
				{
				alt89 = 2;
				}
				break;
			case 163:
				{
				alt89 = 3;
				}
				break;
			case 182:
				{
				alt89 = 4;
				}
				break;
			case 181:
				{
				alt89 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 89, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(89); }
			switch (alt89)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:361:8: '+'
				{
				DebugLocation(361, 8);
				char_literal261=(IToken)Match(input,167,Follow._167_in_op_32221);  
				stream_167.Add(char_literal261);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 361:12: -> T_PLUS
				{
					DebugLocation(361, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_PLUS, "T_PLUS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:362:4: '-'
				{
				DebugLocation(362, 4);
				char_literal262=(IToken)Match(input,169,Follow._169_in_op_32230);  
				stream_169.Add(char_literal262);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 362:8: -> T_MINUS
				{
					DebugLocation(362, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MINUS, "T_MINUS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:363:4: '&'
				{
				DebugLocation(363, 4);
				char_literal263=(IToken)Match(input,163,Follow._163_in_op_32239);  
				stream_163.Add(char_literal263);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 363:8: -> T_BITWISE_AND
				{
					DebugLocation(363, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_AND, "T_BITWISE_AND"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:364:4: '|'
				{
				DebugLocation(364, 4);
				char_literal264=(IToken)Match(input,182,Follow._182_in_op_32248);  
				stream_182.Add(char_literal264);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 364:8: -> T_BITWISE_OR
				{
					DebugLocation(364, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_OR, "T_BITWISE_OR"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:365:4: '^'
				{
				DebugLocation(365, 4);
				char_literal265=(IToken)Match(input,181,Follow._181_in_op_32257);  
				stream_181.Add(char_literal265);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 365:8: -> T_BITWISE_XOR
				{
					DebugLocation(365, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_XOR, "T_BITWISE_XOR"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_3", 47);
			LeaveRule("op_3", 47);
			LeaveRule_op_3();
	    }
	 	DebugLocation(366, 1);
		} finally { DebugExitRule(GrammarFileName, "op_3"); }
		return retval;

	}
	// $ANTLR end "op_3"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_2() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_2() {}

	// $ANTLR start "expression_2"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:374:1: expression_2 : (a= expression_1 -> $a) ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )* ;
	[GrammarRule("expression_2")]
	private AstParserRuleReturnScope<object, IToken> expression_2()
	{
		EnterRule_expression_2();
		EnterRule("expression_2", 48);
		TraceIn("expression_2", 48);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS266 = default(IToken);
	    IToken WS268 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_2267 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS266_tree = default(object);
	    object WS268_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_op_2=new RewriteRuleSubtreeStream(adaptor,"rule op_2");
	    RewriteRuleSubtreeStream stream_expression_1=new RewriteRuleSubtreeStream(adaptor,"rule expression_1");
		try { DebugEnterRule(GrammarFileName, "expression_2");
		DebugLocation(374, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:375:2: ( (a= expression_1 -> $a) ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:375:4: (a= expression_1 -> $a) ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )*
			{
			DebugLocation(375, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:375:4: (a= expression_1 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:375:5: a= expression_1
			{
			DebugLocation(375, 6);
			PushFollow(Follow._expression_1_in_expression_22279);
			a=expression_1();
			PopFollow();

			stream_expression_1.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 375:19: -> $a
			{
				DebugLocation(375, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(375, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:375:25: ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )*
			try { DebugEnterSubRule(92);
			while (true)
			{
				int alt92=2;
				try { DebugEnterDecision(92, decisionCanBacktrack[92]);
				int LA92_0 = input.LA(1);

				if ((LA92_0==WS))
				{
					int LA92_1 = input.LA(2);

					if ((LA92_1==162||LA92_1==166||LA92_1==171))
					{
						alt92 = 1;
					}


				}
				else if ((LA92_0==162||LA92_0==166||LA92_0==171))
				{
					alt92 = 1;
				}


				} finally { DebugExitDecision(92); }
				switch ( alt92 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:375:26: ( WS )? op_2 ( WS )? b= expression_1
					{
					DebugLocation(375, 26);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:375:26: ( WS )?
					int alt90=2;
					try { DebugEnterSubRule(90);
					try { DebugEnterDecision(90, decisionCanBacktrack[90]);
					int LA90_0 = input.LA(1);

					if ((LA90_0==WS))
					{
						alt90 = 1;
					}
					} finally { DebugExitDecision(90); }
					switch (alt90)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:375:26: WS
						{
						DebugLocation(375, 26);
						WS266=(IToken)Match(input,WS,Follow._WS_in_expression_22286);  
						stream_WS.Add(WS266);


						}
						break;

					}
					} finally { DebugExitSubRule(90); }

					DebugLocation(375, 30);
					PushFollow(Follow._op_2_in_expression_22289);
					op_2267=op_2();
					PopFollow();

					stream_op_2.Add(op_2267.Tree);
					DebugLocation(375, 35);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:375:35: ( WS )?
					int alt91=2;
					try { DebugEnterSubRule(91);
					try { DebugEnterDecision(91, decisionCanBacktrack[91]);
					int LA91_0 = input.LA(1);

					if ((LA91_0==WS))
					{
						alt91 = 1;
					}
					} finally { DebugExitDecision(91); }
					switch (alt91)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:375:35: WS
						{
						DebugLocation(375, 35);
						WS268=(IToken)Match(input,WS,Follow._WS_in_expression_22291);  
						stream_WS.Add(WS268);


						}
						break;

					}
					} finally { DebugExitSubRule(91); }

					DebugLocation(375, 40);
					PushFollow(Follow._expression_1_in_expression_22296);
					b=expression_1();
					PopFollow();

					stream_expression_1.Add(b.Tree);


					{
					// AST REWRITE
					// elements: expression_2, b, op_2
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 375:54: -> ^( T_OP_BINARY op_2 $expression_2 $b)
					{
						DebugLocation(375, 57);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:375:57: ^( T_OP_BINARY op_2 $expression_2 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(375, 59);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(375, 71);
						adaptor.AddChild(root_1, stream_op_2.NextTree());
						DebugLocation(375, 77);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(375, 91);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop92;
				}
			}

			loop92:
				;

			} finally { DebugExitSubRule(92); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_2", 48);
			LeaveRule("expression_2", 48);
			LeaveRule_expression_2();
	    }
	 	DebugLocation(376, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_2"); }
		return retval;

	}
	// $ANTLR end "expression_2"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_2() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_2() {}

	// $ANTLR start "op_2"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:378:1: op_2 : ( '*' -> T_PRODUCT | '/' -> T_DIVIDE | '%' -> T_MODULO );
	[GrammarRule("op_2")]
	private AstParserRuleReturnScope<object, IToken> op_2()
	{
		EnterRule_op_2();
		EnterRule("op_2", 49);
		TraceIn("op_2", 49);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal269 = default(IToken);
	    IToken char_literal270 = default(IToken);
	    IToken char_literal271 = default(IToken);

	    object char_literal269_tree = default(object);
	    object char_literal270_tree = default(object);
	    object char_literal271_tree = default(object);
	    RewriteRuleITokenStream stream_162=new RewriteRuleITokenStream(adaptor,"token 162");
	    RewriteRuleITokenStream stream_171=new RewriteRuleITokenStream(adaptor,"token 171");
	    RewriteRuleITokenStream stream_166=new RewriteRuleITokenStream(adaptor,"token 166");

		try { DebugEnterRule(GrammarFileName, "op_2");
		DebugLocation(378, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:378:6: ( '*' -> T_PRODUCT | '/' -> T_DIVIDE | '%' -> T_MODULO )
			int alt93=3;
			try { DebugEnterDecision(93, decisionCanBacktrack[93]);
			switch (input.LA(1))
			{
			case 166:
				{
				alt93 = 1;
				}
				break;
			case 171:
				{
				alt93 = 2;
				}
				break;
			case 162:
				{
				alt93 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 93, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(93); }
			switch (alt93)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:378:8: '*'
				{
				DebugLocation(378, 8);
				char_literal269=(IToken)Match(input,166,Follow._166_in_op_22322);  
				stream_166.Add(char_literal269);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 378:12: -> T_PRODUCT
				{
					DebugLocation(378, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_PRODUCT, "T_PRODUCT"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:379:4: '/'
				{
				DebugLocation(379, 4);
				char_literal270=(IToken)Match(input,171,Follow._171_in_op_22331);  
				stream_171.Add(char_literal270);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 379:8: -> T_DIVIDE
				{
					DebugLocation(379, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_DIVIDE, "T_DIVIDE"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:380:4: '%'
				{
				DebugLocation(380, 4);
				char_literal271=(IToken)Match(input,162,Follow._162_in_op_22340);  
				stream_162.Add(char_literal271);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 380:8: -> T_MODULO
				{
					DebugLocation(380, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MODULO, "T_MODULO"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_2", 49);
			LeaveRule("op_2", 49);
			LeaveRule_op_2();
	    }
	 	DebugLocation(381, 1);
		} finally { DebugExitRule(GrammarFileName, "op_2"); }
		return retval;

	}
	// $ANTLR end "op_2"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_1() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_1() {}

	// $ANTLR start "expression_1"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:383:1: expression_1 : ( op_1 ( WS )? expression_1 -> ^( T_OP_UNARY op_1 expression_1 ) | expression_atom );
	[GrammarRule("expression_1")]
	private AstParserRuleReturnScope<object, IToken> expression_1()
	{
		EnterRule_expression_1();
		EnterRule("expression_1", 50);
		TraceIn("expression_1", 50);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS273 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> op_1272 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_1274 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_atom275 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS273_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression_1=new RewriteRuleSubtreeStream(adaptor,"rule expression_1");
	    RewriteRuleSubtreeStream stream_op_1=new RewriteRuleSubtreeStream(adaptor,"rule op_1");
		try { DebugEnterRule(GrammarFileName, "expression_1");
		DebugLocation(383, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:384:2: ( op_1 ( WS )? expression_1 -> ^( T_OP_UNARY op_1 expression_1 ) | expression_atom )
			int alt95=2;
			try { DebugEnterDecision(95, decisionCanBacktrack[95]);
			int LA95_0 = input.LA(1);

			if ((LA95_0==167||LA95_0==169||LA95_0==183))
			{
				alt95 = 1;
			}
			else if (((LA95_0>=CASE && LA95_0<=CAST)||(LA95_0>=CONVERT && LA95_0<=COUNT)||(LA95_0>=DATEADD && LA95_0<=DATEPART)||LA95_0==EXISTS||LA95_0==NUMBER||LA95_0==SIMPLE_FILE||(LA95_0>=STRING && LA95_0<=SYSTEMVAR)||LA95_0==TOKEN||LA95_0==VARIABLE||LA95_0==164))
			{
				alt95 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 95, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(95); }
			switch (alt95)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:384:4: op_1 ( WS )? expression_1
				{
				DebugLocation(384, 4);
				PushFollow(Follow._op_1_in_expression_12356);
				op_1272=op_1();
				PopFollow();

				stream_op_1.Add(op_1272.Tree);
				DebugLocation(384, 9);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:384:9: ( WS )?
				int alt94=2;
				try { DebugEnterSubRule(94);
				try { DebugEnterDecision(94, decisionCanBacktrack[94]);
				int LA94_0 = input.LA(1);

				if ((LA94_0==WS))
				{
					alt94 = 1;
				}
				} finally { DebugExitDecision(94); }
				switch (alt94)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:384:9: WS
					{
					DebugLocation(384, 9);
					WS273=(IToken)Match(input,WS,Follow._WS_in_expression_12358);  
					stream_WS.Add(WS273);


					}
					break;

				}
				} finally { DebugExitSubRule(94); }

				DebugLocation(384, 13);
				PushFollow(Follow._expression_1_in_expression_12361);
				expression_1274=expression_1();
				PopFollow();

				stream_expression_1.Add(expression_1274.Tree);


				{
				// AST REWRITE
				// elements: op_1, expression_1
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 384:26: -> ^( T_OP_UNARY op_1 expression_1 )
				{
					DebugLocation(384, 29);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:384:29: ^( T_OP_UNARY op_1 expression_1 )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(384, 31);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_UNARY, "T_OP_UNARY"), root_1);

					DebugLocation(384, 42);
					adaptor.AddChild(root_1, stream_op_1.NextTree());
					DebugLocation(384, 47);
					adaptor.AddChild(root_1, stream_expression_1.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:385:4: expression_atom
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(385, 4);
				PushFollow(Follow._expression_atom_in_expression_12376);
				expression_atom275=expression_atom();
				PopFollow();

				adaptor.AddChild(root_0, expression_atom275.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_1", 50);
			LeaveRule("expression_1", 50);
			LeaveRule_expression_1();
	    }
	 	DebugLocation(386, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_1"); }
		return retval;

	}
	// $ANTLR end "expression_1"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_1() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_1() {}

	// $ANTLR start "op_1"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:388:1: op_1 : ( '~' -> T_BITWISE_NOT | '+' -> T_PLUS | '-' -> T_MINUS );
	[GrammarRule("op_1")]
	private AstParserRuleReturnScope<object, IToken> op_1()
	{
		EnterRule_op_1();
		EnterRule("op_1", 51);
		TraceIn("op_1", 51);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal276 = default(IToken);
	    IToken char_literal277 = default(IToken);
	    IToken char_literal278 = default(IToken);

	    object char_literal276_tree = default(object);
	    object char_literal277_tree = default(object);
	    object char_literal278_tree = default(object);
	    RewriteRuleITokenStream stream_183=new RewriteRuleITokenStream(adaptor,"token 183");
	    RewriteRuleITokenStream stream_169=new RewriteRuleITokenStream(adaptor,"token 169");
	    RewriteRuleITokenStream stream_167=new RewriteRuleITokenStream(adaptor,"token 167");

		try { DebugEnterRule(GrammarFileName, "op_1");
		DebugLocation(388, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:388:6: ( '~' -> T_BITWISE_NOT | '+' -> T_PLUS | '-' -> T_MINUS )
			int alt96=3;
			try { DebugEnterDecision(96, decisionCanBacktrack[96]);
			switch (input.LA(1))
			{
			case 183:
				{
				alt96 = 1;
				}
				break;
			case 167:
				{
				alt96 = 2;
				}
				break;
			case 169:
				{
				alt96 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 96, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(96); }
			switch (alt96)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:388:8: '~'
				{
				DebugLocation(388, 8);
				char_literal276=(IToken)Match(input,183,Follow._183_in_op_12386);  
				stream_183.Add(char_literal276);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 388:12: -> T_BITWISE_NOT
				{
					DebugLocation(388, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_NOT, "T_BITWISE_NOT"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:389:5: '+'
				{
				DebugLocation(389, 5);
				char_literal277=(IToken)Match(input,167,Follow._167_in_op_12396);  
				stream_167.Add(char_literal277);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 389:9: -> T_PLUS
				{
					DebugLocation(389, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_PLUS, "T_PLUS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:390:4: '-'
				{
				DebugLocation(390, 4);
				char_literal278=(IToken)Match(input,169,Follow._169_in_op_12405);  
				stream_169.Add(char_literal278);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 390:8: -> T_MINUS
				{
					DebugLocation(390, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MINUS, "T_MINUS"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_1", 51);
			LeaveRule("op_1", 51);
			LeaveRule_op_1();
	    }
	 	DebugLocation(391, 1);
		} finally { DebugExitRule(GrammarFileName, "op_1"); }
		return retval;

	}
	// $ANTLR end "op_1"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_atom() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_atom() {}

	// $ANTLR start "expression_atom"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:393:1: expression_atom : ( number -> ^( T_INTEGER number ) | string | SYSTEMVAR -> ^( T_SYSTEMVAR SYSTEMVAR ) | variable | subquery | '(' expression ')' -> expression | functioncall_or_column | specialfunctioncall | case | EXISTS ( WS )? '(' ( WS )? select_command ( WS )? ')' -> ^( T_EXISTS select_command ) );
	[GrammarRule("expression_atom")]
	private AstParserRuleReturnScope<object, IToken> expression_atom()
	{
		EnterRule_expression_atom();
		EnterRule("expression_atom", 52);
		TraceIn("expression_atom", 52);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken SYSTEMVAR281 = default(IToken);
	    IToken char_literal284 = default(IToken);
	    IToken char_literal286 = default(IToken);
	    IToken EXISTS290 = default(IToken);
	    IToken WS291 = default(IToken);
	    IToken char_literal292 = default(IToken);
	    IToken WS293 = default(IToken);
	    IToken WS295 = default(IToken);
	    IToken char_literal296 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> number279 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> string280 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> variable282 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> subquery283 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression285 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> functioncall_or_column287 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> specialfunctioncall288 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> case289 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> select_command294 = default(AstParserRuleReturnScope<object, IToken>);

	    object SYSTEMVAR281_tree = default(object);
	    object char_literal284_tree = default(object);
	    object char_literal286_tree = default(object);
	    object EXISTS290_tree = default(object);
	    object WS291_tree = default(object);
	    object char_literal292_tree = default(object);
	    object WS293_tree = default(object);
	    object WS295_tree = default(object);
	    object char_literal296_tree = default(object);
	    RewriteRuleITokenStream stream_164=new RewriteRuleITokenStream(adaptor,"token 164");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_EXISTS=new RewriteRuleITokenStream(adaptor,"token EXISTS");
	    RewriteRuleITokenStream stream_SYSTEMVAR=new RewriteRuleITokenStream(adaptor,"token SYSTEMVAR");
	    RewriteRuleITokenStream stream_165=new RewriteRuleITokenStream(adaptor,"token 165");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_select_command=new RewriteRuleSubtreeStream(adaptor,"rule select_command");
	    RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
		try { DebugEnterRule(GrammarFileName, "expression_atom");
		DebugLocation(393, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:394:2: ( number -> ^( T_INTEGER number ) | string | SYSTEMVAR -> ^( T_SYSTEMVAR SYSTEMVAR ) | variable | subquery | '(' expression ')' -> expression | functioncall_or_column | specialfunctioncall | case | EXISTS ( WS )? '(' ( WS )? select_command ( WS )? ')' -> ^( T_EXISTS select_command ) )
			int alt100=10;
			try { DebugEnterDecision(100, decisionCanBacktrack[100]);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt100 = 1;
				}
				break;
			case STRING:
				{
				alt100 = 2;
				}
				break;
			case SYSTEMVAR:
				{
				alt100 = 3;
				}
				break;
			case VARIABLE:
				{
				alt100 = 4;
				}
				break;
			case 164:
				{
				int LA100_5 = input.LA(2);

				if ((LA100_5==SELECT||LA100_5==WS))
				{
					alt100 = 5;
				}
				else if (((LA100_5>=CASE && LA100_5<=CAST)||(LA100_5>=CONVERT && LA100_5<=COUNT)||(LA100_5>=DATEADD && LA100_5<=DATEPART)||LA100_5==EXISTS||(LA100_5>=NOT && LA100_5<=NUMBER)||LA100_5==SIMPLE_FILE||(LA100_5>=STRING && LA100_5<=SYSTEMVAR)||LA100_5==TOKEN||LA100_5==VARIABLE||LA100_5==164||LA100_5==167||LA100_5==169||LA100_5==183))
				{
					alt100 = 6;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 100, 5, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case COUNT:
			case SIMPLE_FILE:
			case TOKEN:
				{
				alt100 = 7;
				}
				break;
			case CAST:
			case CONVERT:
			case DATEADD:
			case DATEDIFF:
			case DATEPART:
				{
				alt100 = 8;
				}
				break;
			case CASE:
				{
				alt100 = 9;
				}
				break;
			case EXISTS:
				{
				alt100 = 10;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 100, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(100); }
			switch (alt100)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:394:4: number
				{
				DebugLocation(394, 4);
				PushFollow(Follow._number_in_expression_atom2420);
				number279=number();
				PopFollow();

				stream_number.Add(number279.Tree);


				{
				// AST REWRITE
				// elements: number
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 394:11: -> ^( T_INTEGER number )
				{
					DebugLocation(394, 14);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:394:14: ^( T_INTEGER number )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(394, 16);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_INTEGER, "T_INTEGER"), root_1);

					DebugLocation(394, 26);
					adaptor.AddChild(root_1, stream_number.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:395:4: string
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(395, 4);
				PushFollow(Follow._string_in_expression_atom2433);
				string280=@string();
				PopFollow();

				adaptor.AddChild(root_0, string280.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:396:4: SYSTEMVAR
				{
				DebugLocation(396, 4);
				SYSTEMVAR281=(IToken)Match(input,SYSTEMVAR,Follow._SYSTEMVAR_in_expression_atom2438);  
				stream_SYSTEMVAR.Add(SYSTEMVAR281);



				{
				// AST REWRITE
				// elements: SYSTEMVAR
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 396:14: -> ^( T_SYSTEMVAR SYSTEMVAR )
				{
					DebugLocation(396, 17);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:396:17: ^( T_SYSTEMVAR SYSTEMVAR )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(396, 19);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SYSTEMVAR, "T_SYSTEMVAR"), root_1);

					DebugLocation(396, 31);
					adaptor.AddChild(root_1, stream_SYSTEMVAR.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:397:4: variable
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(397, 4);
				PushFollow(Follow._variable_in_expression_atom2451);
				variable282=variable();
				PopFollow();

				adaptor.AddChild(root_0, variable282.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:398:4: subquery
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(398, 4);
				PushFollow(Follow._subquery_in_expression_atom2456);
				subquery283=subquery();
				PopFollow();

				adaptor.AddChild(root_0, subquery283.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:399:4: '(' expression ')'
				{
				DebugLocation(399, 4);
				char_literal284=(IToken)Match(input,164,Follow._164_in_expression_atom2461);  
				stream_164.Add(char_literal284);

				DebugLocation(399, 8);
				PushFollow(Follow._expression_in_expression_atom2463);
				expression285=expression();
				PopFollow();

				stream_expression.Add(expression285.Tree);
				DebugLocation(399, 19);
				char_literal286=(IToken)Match(input,165,Follow._165_in_expression_atom2465);  
				stream_165.Add(char_literal286);



				{
				// AST REWRITE
				// elements: expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 399:23: -> expression
				{
					DebugLocation(399, 26);
					adaptor.AddChild(root_0, stream_expression.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:400:4: functioncall_or_column
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(400, 4);
				PushFollow(Follow._functioncall_or_column_in_expression_atom2474);
				functioncall_or_column287=functioncall_or_column();
				PopFollow();

				adaptor.AddChild(root_0, functioncall_or_column287.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:401:4: specialfunctioncall
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(401, 4);
				PushFollow(Follow._specialfunctioncall_in_expression_atom2479);
				specialfunctioncall288=specialfunctioncall();
				PopFollow();

				adaptor.AddChild(root_0, specialfunctioncall288.Tree);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:402:4: case
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(402, 4);
				PushFollow(Follow._case_in_expression_atom2484);
				case289=@case();
				PopFollow();

				adaptor.AddChild(root_0, case289.Tree);

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:403:4: EXISTS ( WS )? '(' ( WS )? select_command ( WS )? ')'
				{
				DebugLocation(403, 4);
				EXISTS290=(IToken)Match(input,EXISTS,Follow._EXISTS_in_expression_atom2489);  
				stream_EXISTS.Add(EXISTS290);

				DebugLocation(403, 11);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:403:11: ( WS )?
				int alt97=2;
				try { DebugEnterSubRule(97);
				try { DebugEnterDecision(97, decisionCanBacktrack[97]);
				int LA97_0 = input.LA(1);

				if ((LA97_0==WS))
				{
					alt97 = 1;
				}
				} finally { DebugExitDecision(97); }
				switch (alt97)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:403:11: WS
					{
					DebugLocation(403, 11);
					WS291=(IToken)Match(input,WS,Follow._WS_in_expression_atom2491);  
					stream_WS.Add(WS291);


					}
					break;

				}
				} finally { DebugExitSubRule(97); }

				DebugLocation(403, 15);
				char_literal292=(IToken)Match(input,164,Follow._164_in_expression_atom2494);  
				stream_164.Add(char_literal292);

				DebugLocation(403, 19);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:403:19: ( WS )?
				int alt98=2;
				try { DebugEnterSubRule(98);
				try { DebugEnterDecision(98, decisionCanBacktrack[98]);
				int LA98_0 = input.LA(1);

				if ((LA98_0==WS))
				{
					alt98 = 1;
				}
				} finally { DebugExitDecision(98); }
				switch (alt98)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:403:19: WS
					{
					DebugLocation(403, 19);
					WS293=(IToken)Match(input,WS,Follow._WS_in_expression_atom2496);  
					stream_WS.Add(WS293);


					}
					break;

				}
				} finally { DebugExitSubRule(98); }

				DebugLocation(403, 23);
				PushFollow(Follow._select_command_in_expression_atom2499);
				select_command294=select_command();
				PopFollow();

				stream_select_command.Add(select_command294.Tree);
				DebugLocation(403, 38);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:403:38: ( WS )?
				int alt99=2;
				try { DebugEnterSubRule(99);
				try { DebugEnterDecision(99, decisionCanBacktrack[99]);
				int LA99_0 = input.LA(1);

				if ((LA99_0==WS))
				{
					alt99 = 1;
				}
				} finally { DebugExitDecision(99); }
				switch (alt99)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:403:38: WS
					{
					DebugLocation(403, 38);
					WS295=(IToken)Match(input,WS,Follow._WS_in_expression_atom2501);  
					stream_WS.Add(WS295);


					}
					break;

				}
				} finally { DebugExitSubRule(99); }

				DebugLocation(403, 42);
				char_literal296=(IToken)Match(input,165,Follow._165_in_expression_atom2504);  
				stream_165.Add(char_literal296);



				{
				// AST REWRITE
				// elements: select_command
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 403:46: -> ^( T_EXISTS select_command )
				{
					DebugLocation(403, 49);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:403:49: ^( T_EXISTS select_command )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(403, 51);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_EXISTS, "T_EXISTS"), root_1);

					DebugLocation(403, 60);
					adaptor.AddChild(root_1, stream_select_command.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_atom", 52);
			LeaveRule("expression_atom", 52);
			LeaveRule_expression_atom();
	    }
	 	DebugLocation(404, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_atom"); }
		return retval;

	}
	// $ANTLR end "expression_atom"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_functioncall_or_column() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_functioncall_or_column() {}

	// $ANTLR start "functioncall_or_column"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:407:1: functioncall_or_column : ( TOKEN ( WS )? '(' ( WS )? ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )? ')' -> ^( T_FUNCTIONCALL TOKEN ( expression )* ) | COUNT ( WS )? '(' ( WS )? expression ( WS )? ')' -> ^( T_FUNCTIONCALL T_COUNT expression ) | COUNT ( WS )? '(' ( WS )? DISTINCT WS expression ( WS )? ')' -> ^( T_FUNCTIONCALL T_DISTINCTCOUNT expression ) | COUNT ( WS )? '(' ( WS )? all_columns ( WS )? ')' -> ^( T_FUNCTIONCALL T_COUNT all_columns ) | COUNT ( WS )? '(' ( WS )? DISTINCT WS all_columns ( WS )? ')' -> ^( T_FUNCTIONCALL T_DISTINCTCOUNT all_columns ) | ( table_alias ( WS )? '.' ( WS )? )? column_name -> ^( T_COLUMN column_name ( table_alias )? ) );
	[GrammarRule("functioncall_or_column")]
	private AstParserRuleReturnScope<object, IToken> functioncall_or_column()
	{
		EnterRule_functioncall_or_column();
		EnterRule("functioncall_or_column", 53);
		TraceIn("functioncall_or_column", 53);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN297 = default(IToken);
	    IToken WS298 = default(IToken);
	    IToken char_literal299 = default(IToken);
	    IToken WS300 = default(IToken);
	    IToken WS302 = default(IToken);
	    IToken char_literal303 = default(IToken);
	    IToken WS304 = default(IToken);
	    IToken WS306 = default(IToken);
	    IToken char_literal307 = default(IToken);
	    IToken COUNT308 = default(IToken);
	    IToken WS309 = default(IToken);
	    IToken char_literal310 = default(IToken);
	    IToken WS311 = default(IToken);
	    IToken WS313 = default(IToken);
	    IToken char_literal314 = default(IToken);
	    IToken COUNT315 = default(IToken);
	    IToken WS316 = default(IToken);
	    IToken char_literal317 = default(IToken);
	    IToken WS318 = default(IToken);
	    IToken DISTINCT319 = default(IToken);
	    IToken WS320 = default(IToken);
	    IToken WS322 = default(IToken);
	    IToken char_literal323 = default(IToken);
	    IToken COUNT324 = default(IToken);
	    IToken WS325 = default(IToken);
	    IToken char_literal326 = default(IToken);
	    IToken WS327 = default(IToken);
	    IToken WS329 = default(IToken);
	    IToken char_literal330 = default(IToken);
	    IToken COUNT331 = default(IToken);
	    IToken WS332 = default(IToken);
	    IToken char_literal333 = default(IToken);
	    IToken WS334 = default(IToken);
	    IToken DISTINCT335 = default(IToken);
	    IToken WS336 = default(IToken);
	    IToken WS338 = default(IToken);
	    IToken char_literal339 = default(IToken);
	    IToken WS341 = default(IToken);
	    IToken char_literal342 = default(IToken);
	    IToken WS343 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression301 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression305 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression312 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression321 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> all_columns328 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> all_columns337 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> table_alias340 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> column_name344 = default(AstParserRuleReturnScope<object, IToken>);

	    object TOKEN297_tree = default(object);
	    object WS298_tree = default(object);
	    object char_literal299_tree = default(object);
	    object WS300_tree = default(object);
	    object WS302_tree = default(object);
	    object char_literal303_tree = default(object);
	    object WS304_tree = default(object);
	    object WS306_tree = default(object);
	    object char_literal307_tree = default(object);
	    object COUNT308_tree = default(object);
	    object WS309_tree = default(object);
	    object char_literal310_tree = default(object);
	    object WS311_tree = default(object);
	    object WS313_tree = default(object);
	    object char_literal314_tree = default(object);
	    object COUNT315_tree = default(object);
	    object WS316_tree = default(object);
	    object char_literal317_tree = default(object);
	    object WS318_tree = default(object);
	    object DISTINCT319_tree = default(object);
	    object WS320_tree = default(object);
	    object WS322_tree = default(object);
	    object char_literal323_tree = default(object);
	    object COUNT324_tree = default(object);
	    object WS325_tree = default(object);
	    object char_literal326_tree = default(object);
	    object WS327_tree = default(object);
	    object WS329_tree = default(object);
	    object char_literal330_tree = default(object);
	    object COUNT331_tree = default(object);
	    object WS332_tree = default(object);
	    object char_literal333_tree = default(object);
	    object WS334_tree = default(object);
	    object DISTINCT335_tree = default(object);
	    object WS336_tree = default(object);
	    object WS338_tree = default(object);
	    object char_literal339_tree = default(object);
	    object WS341_tree = default(object);
	    object char_literal342_tree = default(object);
	    object WS343_tree = default(object);
	    RewriteRuleITokenStream stream_170=new RewriteRuleITokenStream(adaptor,"token 170");
	    RewriteRuleITokenStream stream_164=new RewriteRuleITokenStream(adaptor,"token 164");
	    RewriteRuleITokenStream stream_COUNT=new RewriteRuleITokenStream(adaptor,"token COUNT");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_DISTINCT=new RewriteRuleITokenStream(adaptor,"token DISTINCT");
	    RewriteRuleITokenStream stream_165=new RewriteRuleITokenStream(adaptor,"token 165");
	    RewriteRuleITokenStream stream_168=new RewriteRuleITokenStream(adaptor,"token 168");
	    RewriteRuleITokenStream stream_TOKEN=new RewriteRuleITokenStream(adaptor,"token TOKEN");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_table_alias=new RewriteRuleSubtreeStream(adaptor,"rule table_alias");
	    RewriteRuleSubtreeStream stream_all_columns=new RewriteRuleSubtreeStream(adaptor,"rule all_columns");
	    RewriteRuleSubtreeStream stream_column_name=new RewriteRuleSubtreeStream(adaptor,"rule column_name");
		try { DebugEnterRule(GrammarFileName, "functioncall_or_column");
		DebugLocation(407, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:408:2: ( TOKEN ( WS )? '(' ( WS )? ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )? ')' -> ^( T_FUNCTIONCALL TOKEN ( expression )* ) | COUNT ( WS )? '(' ( WS )? expression ( WS )? ')' -> ^( T_FUNCTIONCALL T_COUNT expression ) | COUNT ( WS )? '(' ( WS )? DISTINCT WS expression ( WS )? ')' -> ^( T_FUNCTIONCALL T_DISTINCTCOUNT expression ) | COUNT ( WS )? '(' ( WS )? all_columns ( WS )? ')' -> ^( T_FUNCTIONCALL T_COUNT all_columns ) | COUNT ( WS )? '(' ( WS )? DISTINCT WS all_columns ( WS )? ')' -> ^( T_FUNCTIONCALL T_DISTINCTCOUNT all_columns ) | ( table_alias ( WS )? '.' ( WS )? )? column_name -> ^( T_COLUMN column_name ( table_alias )? ) )
			int alt123=6;
			try { DebugEnterDecision(123, decisionCanBacktrack[123]);
			switch (input.LA(1))
			{
			case TOKEN:
				{
				alt123 = 1;
				}
				break;
			case COUNT:
				{
				int LA123_2 = input.LA(2);

				if ((LA123_2==WS))
				{
					int LA123_4 = input.LA(3);

					if ((LA123_4==164))
					{
						switch (input.LA(4))
						{
						case WS:
							{
							switch (input.LA(5))
							{
							case CASE:
							case CAST:
							case CONVERT:
							case COUNT:
							case DATEADD:
							case DATEDIFF:
							case DATEPART:
							case EXISTS:
							case NOT:
							case NUMBER:
							case STRING:
							case SYSTEMVAR:
							case TOKEN:
							case VARIABLE:
							case 164:
							case 167:
							case 169:
							case 183:
								{
								alt123 = 2;
								}
								break;
							case SIMPLE_FILE:
								{
								switch (input.LA(6))
								{
								case WS:
									{
									int LA123_11 = input.LA(7);

									if ((LA123_11==170))
									{
										switch (input.LA(8))
										{
										case WS:
											{
											int LA123_14 = input.LA(9);

											if ((LA123_14==SIMPLE_FILE))
											{
												alt123 = 2;
											}
											else if ((LA123_14==166))
											{
												alt123 = 4;
											}
											else
											{
												NoViableAltException nvae = new NoViableAltException("", 123, 14, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
											}
											break;
										case SIMPLE_FILE:
											{
											alt123 = 2;
											}
											break;
										case 166:
											{
											alt123 = 4;
											}
											break;
										default:
											{
												NoViableAltException nvae = new NoViableAltException("", 123, 12, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
										}

									}
									else if ((LA123_11==AND||LA123_11==BETWEEN||LA123_11==IN||LA123_11==LIKE||LA123_11==MATCH||LA123_11==NOT||LA123_11==OR||(LA123_11>=159 && LA123_11<=163)||(LA123_11>=165 && LA123_11<=167)||LA123_11==169||LA123_11==171||(LA123_11>=173 && LA123_11<=178)||(LA123_11>=181 && LA123_11<=182)))
									{
										alt123 = 2;
									}
									else
									{
										NoViableAltException nvae = new NoViableAltException("", 123, 11, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
									}
									break;
								case 170:
									{
									switch (input.LA(7))
									{
									case WS:
										{
										int LA123_14 = input.LA(8);

										if ((LA123_14==SIMPLE_FILE))
										{
											alt123 = 2;
										}
										else if ((LA123_14==166))
										{
											alt123 = 4;
										}
										else
										{
											NoViableAltException nvae = new NoViableAltException("", 123, 14, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
										}
										break;
									case SIMPLE_FILE:
										{
										alt123 = 2;
										}
										break;
									case 166:
										{
										alt123 = 4;
										}
										break;
									default:
										{
											NoViableAltException nvae = new NoViableAltException("", 123, 12, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}

									}
									break;
								case 159:
								case 160:
								case 161:
								case 162:
								case 163:
								case 165:
								case 166:
								case 167:
								case 169:
								case 171:
								case 173:
								case 174:
								case 175:
								case 176:
								case 177:
								case 178:
								case 181:
								case 182:
									{
									alt123 = 2;
									}
									break;
								default:
									{
										NoViableAltException nvae = new NoViableAltException("", 123, 8, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

								}
								break;
							case DISTINCT:
								{
								int LA123_9 = input.LA(6);

								if ((LA123_9==WS))
								{
									switch (input.LA(7))
									{
									case CASE:
									case CAST:
									case CONVERT:
									case COUNT:
									case DATEADD:
									case DATEDIFF:
									case DATEPART:
									case EXISTS:
									case NOT:
									case NUMBER:
									case STRING:
									case SYSTEMVAR:
									case TOKEN:
									case VARIABLE:
									case 164:
									case 167:
									case 169:
									case 183:
										{
										alt123 = 3;
										}
										break;
									case SIMPLE_FILE:
										{
										switch (input.LA(8))
										{
										case WS:
											{
											int LA123_18 = input.LA(9);

											if ((LA123_18==170))
											{
												switch (input.LA(10))
												{
												case WS:
													{
													int LA123_20 = input.LA(11);

													if ((LA123_20==SIMPLE_FILE))
													{
														alt123 = 3;
													}
													else if ((LA123_20==166))
													{
														alt123 = 5;
													}
													else
													{
														NoViableAltException nvae = new NoViableAltException("", 123, 20, input);
														DebugRecognitionException(nvae);
														throw nvae;
													}
													}
													break;
												case SIMPLE_FILE:
													{
													alt123 = 3;
													}
													break;
												case 166:
													{
													alt123 = 5;
													}
													break;
												default:
													{
														NoViableAltException nvae = new NoViableAltException("", 123, 19, input);
														DebugRecognitionException(nvae);
														throw nvae;
													}
												}

											}
											else if ((LA123_18==AND||LA123_18==BETWEEN||LA123_18==IN||LA123_18==LIKE||LA123_18==MATCH||LA123_18==NOT||LA123_18==OR||(LA123_18>=159 && LA123_18<=163)||(LA123_18>=165 && LA123_18<=167)||LA123_18==169||LA123_18==171||(LA123_18>=173 && LA123_18<=178)||(LA123_18>=181 && LA123_18<=182)))
											{
												alt123 = 3;
											}
											else
											{
												NoViableAltException nvae = new NoViableAltException("", 123, 18, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
											}
											break;
										case 170:
											{
											switch (input.LA(9))
											{
											case WS:
												{
												int LA123_20 = input.LA(10);

												if ((LA123_20==SIMPLE_FILE))
												{
													alt123 = 3;
												}
												else if ((LA123_20==166))
												{
													alt123 = 5;
												}
												else
												{
													NoViableAltException nvae = new NoViableAltException("", 123, 20, input);
													DebugRecognitionException(nvae);
													throw nvae;
												}
												}
												break;
											case SIMPLE_FILE:
												{
												alt123 = 3;
												}
												break;
											case 166:
												{
												alt123 = 5;
												}
												break;
											default:
												{
													NoViableAltException nvae = new NoViableAltException("", 123, 19, input);
													DebugRecognitionException(nvae);
													throw nvae;
												}
											}

											}
											break;
										case 159:
										case 160:
										case 161:
										case 162:
										case 163:
										case 165:
										case 166:
										case 167:
										case 169:
										case 171:
										case 173:
										case 174:
										case 175:
										case 176:
										case 177:
										case 178:
										case 181:
										case 182:
											{
											alt123 = 3;
											}
											break;
										default:
											{
												NoViableAltException nvae = new NoViableAltException("", 123, 16, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
										}

										}
										break;
									case 166:
										{
										alt123 = 5;
										}
										break;
									default:
										{
											NoViableAltException nvae = new NoViableAltException("", 123, 13, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}

								}
								else
								{
									NoViableAltException nvae = new NoViableAltException("", 123, 9, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
								}
								break;
							case 166:
								{
								alt123 = 4;
								}
								break;
							default:
								{
									NoViableAltException nvae = new NoViableAltException("", 123, 6, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}

							}
							break;
						case CASE:
						case CAST:
						case CONVERT:
						case COUNT:
						case DATEADD:
						case DATEDIFF:
						case DATEPART:
						case EXISTS:
						case NOT:
						case NUMBER:
						case STRING:
						case SYSTEMVAR:
						case TOKEN:
						case VARIABLE:
						case 164:
						case 167:
						case 169:
						case 183:
							{
							alt123 = 2;
							}
							break;
						case SIMPLE_FILE:
							{
							switch (input.LA(5))
							{
							case WS:
								{
								int LA123_11 = input.LA(6);

								if ((LA123_11==170))
								{
									switch (input.LA(7))
									{
									case WS:
										{
										int LA123_14 = input.LA(8);

										if ((LA123_14==SIMPLE_FILE))
										{
											alt123 = 2;
										}
										else if ((LA123_14==166))
										{
											alt123 = 4;
										}
										else
										{
											NoViableAltException nvae = new NoViableAltException("", 123, 14, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
										}
										break;
									case SIMPLE_FILE:
										{
										alt123 = 2;
										}
										break;
									case 166:
										{
										alt123 = 4;
										}
										break;
									default:
										{
											NoViableAltException nvae = new NoViableAltException("", 123, 12, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}

								}
								else if ((LA123_11==AND||LA123_11==BETWEEN||LA123_11==IN||LA123_11==LIKE||LA123_11==MATCH||LA123_11==NOT||LA123_11==OR||(LA123_11>=159 && LA123_11<=163)||(LA123_11>=165 && LA123_11<=167)||LA123_11==169||LA123_11==171||(LA123_11>=173 && LA123_11<=178)||(LA123_11>=181 && LA123_11<=182)))
								{
									alt123 = 2;
								}
								else
								{
									NoViableAltException nvae = new NoViableAltException("", 123, 11, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
								}
								break;
							case 170:
								{
								switch (input.LA(6))
								{
								case WS:
									{
									int LA123_14 = input.LA(7);

									if ((LA123_14==SIMPLE_FILE))
									{
										alt123 = 2;
									}
									else if ((LA123_14==166))
									{
										alt123 = 4;
									}
									else
									{
										NoViableAltException nvae = new NoViableAltException("", 123, 14, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
									}
									break;
								case SIMPLE_FILE:
									{
									alt123 = 2;
									}
									break;
								case 166:
									{
									alt123 = 4;
									}
									break;
								default:
									{
										NoViableAltException nvae = new NoViableAltException("", 123, 12, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

								}
								break;
							case 159:
							case 160:
							case 161:
							case 162:
							case 163:
							case 165:
							case 166:
							case 167:
							case 169:
							case 171:
							case 173:
							case 174:
							case 175:
							case 176:
							case 177:
							case 178:
							case 181:
							case 182:
								{
								alt123 = 2;
								}
								break;
							default:
								{
									NoViableAltException nvae = new NoViableAltException("", 123, 8, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}

							}
							break;
						case DISTINCT:
							{
							int LA123_9 = input.LA(5);

							if ((LA123_9==WS))
							{
								switch (input.LA(6))
								{
								case CASE:
								case CAST:
								case CONVERT:
								case COUNT:
								case DATEADD:
								case DATEDIFF:
								case DATEPART:
								case EXISTS:
								case NOT:
								case NUMBER:
								case STRING:
								case SYSTEMVAR:
								case TOKEN:
								case VARIABLE:
								case 164:
								case 167:
								case 169:
								case 183:
									{
									alt123 = 3;
									}
									break;
								case SIMPLE_FILE:
									{
									switch (input.LA(7))
									{
									case WS:
										{
										int LA123_18 = input.LA(8);

										if ((LA123_18==170))
										{
											switch (input.LA(9))
											{
											case WS:
												{
												int LA123_20 = input.LA(10);

												if ((LA123_20==SIMPLE_FILE))
												{
													alt123 = 3;
												}
												else if ((LA123_20==166))
												{
													alt123 = 5;
												}
												else
												{
													NoViableAltException nvae = new NoViableAltException("", 123, 20, input);
													DebugRecognitionException(nvae);
													throw nvae;
												}
												}
												break;
											case SIMPLE_FILE:
												{
												alt123 = 3;
												}
												break;
											case 166:
												{
												alt123 = 5;
												}
												break;
											default:
												{
													NoViableAltException nvae = new NoViableAltException("", 123, 19, input);
													DebugRecognitionException(nvae);
													throw nvae;
												}
											}

										}
										else if ((LA123_18==AND||LA123_18==BETWEEN||LA123_18==IN||LA123_18==LIKE||LA123_18==MATCH||LA123_18==NOT||LA123_18==OR||(LA123_18>=159 && LA123_18<=163)||(LA123_18>=165 && LA123_18<=167)||LA123_18==169||LA123_18==171||(LA123_18>=173 && LA123_18<=178)||(LA123_18>=181 && LA123_18<=182)))
										{
											alt123 = 3;
										}
										else
										{
											NoViableAltException nvae = new NoViableAltException("", 123, 18, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
										}
										break;
									case 170:
										{
										switch (input.LA(8))
										{
										case WS:
											{
											int LA123_20 = input.LA(9);

											if ((LA123_20==SIMPLE_FILE))
											{
												alt123 = 3;
											}
											else if ((LA123_20==166))
											{
												alt123 = 5;
											}
											else
											{
												NoViableAltException nvae = new NoViableAltException("", 123, 20, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
											}
											break;
										case SIMPLE_FILE:
											{
											alt123 = 3;
											}
											break;
										case 166:
											{
											alt123 = 5;
											}
											break;
										default:
											{
												NoViableAltException nvae = new NoViableAltException("", 123, 19, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
										}

										}
										break;
									case 159:
									case 160:
									case 161:
									case 162:
									case 163:
									case 165:
									case 166:
									case 167:
									case 169:
									case 171:
									case 173:
									case 174:
									case 175:
									case 176:
									case 177:
									case 178:
									case 181:
									case 182:
										{
										alt123 = 3;
										}
										break;
									default:
										{
											NoViableAltException nvae = new NoViableAltException("", 123, 16, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}

									}
									break;
								case 166:
									{
									alt123 = 5;
									}
									break;
								default:
									{
										NoViableAltException nvae = new NoViableAltException("", 123, 13, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 123, 9, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case 166:
							{
							alt123 = 4;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 123, 5, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 123, 4, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA123_2==164))
				{
					switch (input.LA(3))
					{
					case WS:
						{
						switch (input.LA(4))
						{
						case CASE:
						case CAST:
						case CONVERT:
						case COUNT:
						case DATEADD:
						case DATEDIFF:
						case DATEPART:
						case EXISTS:
						case NOT:
						case NUMBER:
						case STRING:
						case SYSTEMVAR:
						case TOKEN:
						case VARIABLE:
						case 164:
						case 167:
						case 169:
						case 183:
							{
							alt123 = 2;
							}
							break;
						case SIMPLE_FILE:
							{
							switch (input.LA(5))
							{
							case WS:
								{
								int LA123_11 = input.LA(6);

								if ((LA123_11==170))
								{
									switch (input.LA(7))
									{
									case WS:
										{
										int LA123_14 = input.LA(8);

										if ((LA123_14==SIMPLE_FILE))
										{
											alt123 = 2;
										}
										else if ((LA123_14==166))
										{
											alt123 = 4;
										}
										else
										{
											NoViableAltException nvae = new NoViableAltException("", 123, 14, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
										}
										break;
									case SIMPLE_FILE:
										{
										alt123 = 2;
										}
										break;
									case 166:
										{
										alt123 = 4;
										}
										break;
									default:
										{
											NoViableAltException nvae = new NoViableAltException("", 123, 12, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}

								}
								else if ((LA123_11==AND||LA123_11==BETWEEN||LA123_11==IN||LA123_11==LIKE||LA123_11==MATCH||LA123_11==NOT||LA123_11==OR||(LA123_11>=159 && LA123_11<=163)||(LA123_11>=165 && LA123_11<=167)||LA123_11==169||LA123_11==171||(LA123_11>=173 && LA123_11<=178)||(LA123_11>=181 && LA123_11<=182)))
								{
									alt123 = 2;
								}
								else
								{
									NoViableAltException nvae = new NoViableAltException("", 123, 11, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
								}
								break;
							case 170:
								{
								switch (input.LA(6))
								{
								case WS:
									{
									int LA123_14 = input.LA(7);

									if ((LA123_14==SIMPLE_FILE))
									{
										alt123 = 2;
									}
									else if ((LA123_14==166))
									{
										alt123 = 4;
									}
									else
									{
										NoViableAltException nvae = new NoViableAltException("", 123, 14, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
									}
									break;
								case SIMPLE_FILE:
									{
									alt123 = 2;
									}
									break;
								case 166:
									{
									alt123 = 4;
									}
									break;
								default:
									{
										NoViableAltException nvae = new NoViableAltException("", 123, 12, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

								}
								break;
							case 159:
							case 160:
							case 161:
							case 162:
							case 163:
							case 165:
							case 166:
							case 167:
							case 169:
							case 171:
							case 173:
							case 174:
							case 175:
							case 176:
							case 177:
							case 178:
							case 181:
							case 182:
								{
								alt123 = 2;
								}
								break;
							default:
								{
									NoViableAltException nvae = new NoViableAltException("", 123, 8, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}

							}
							break;
						case DISTINCT:
							{
							int LA123_9 = input.LA(5);

							if ((LA123_9==WS))
							{
								switch (input.LA(6))
								{
								case CASE:
								case CAST:
								case CONVERT:
								case COUNT:
								case DATEADD:
								case DATEDIFF:
								case DATEPART:
								case EXISTS:
								case NOT:
								case NUMBER:
								case STRING:
								case SYSTEMVAR:
								case TOKEN:
								case VARIABLE:
								case 164:
								case 167:
								case 169:
								case 183:
									{
									alt123 = 3;
									}
									break;
								case SIMPLE_FILE:
									{
									switch (input.LA(7))
									{
									case WS:
										{
										int LA123_18 = input.LA(8);

										if ((LA123_18==170))
										{
											switch (input.LA(9))
											{
											case WS:
												{
												int LA123_20 = input.LA(10);

												if ((LA123_20==SIMPLE_FILE))
												{
													alt123 = 3;
												}
												else if ((LA123_20==166))
												{
													alt123 = 5;
												}
												else
												{
													NoViableAltException nvae = new NoViableAltException("", 123, 20, input);
													DebugRecognitionException(nvae);
													throw nvae;
												}
												}
												break;
											case SIMPLE_FILE:
												{
												alt123 = 3;
												}
												break;
											case 166:
												{
												alt123 = 5;
												}
												break;
											default:
												{
													NoViableAltException nvae = new NoViableAltException("", 123, 19, input);
													DebugRecognitionException(nvae);
													throw nvae;
												}
											}

										}
										else if ((LA123_18==AND||LA123_18==BETWEEN||LA123_18==IN||LA123_18==LIKE||LA123_18==MATCH||LA123_18==NOT||LA123_18==OR||(LA123_18>=159 && LA123_18<=163)||(LA123_18>=165 && LA123_18<=167)||LA123_18==169||LA123_18==171||(LA123_18>=173 && LA123_18<=178)||(LA123_18>=181 && LA123_18<=182)))
										{
											alt123 = 3;
										}
										else
										{
											NoViableAltException nvae = new NoViableAltException("", 123, 18, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
										}
										break;
									case 170:
										{
										switch (input.LA(8))
										{
										case WS:
											{
											int LA123_20 = input.LA(9);

											if ((LA123_20==SIMPLE_FILE))
											{
												alt123 = 3;
											}
											else if ((LA123_20==166))
											{
												alt123 = 5;
											}
											else
											{
												NoViableAltException nvae = new NoViableAltException("", 123, 20, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
											}
											break;
										case SIMPLE_FILE:
											{
											alt123 = 3;
											}
											break;
										case 166:
											{
											alt123 = 5;
											}
											break;
										default:
											{
												NoViableAltException nvae = new NoViableAltException("", 123, 19, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
										}

										}
										break;
									case 159:
									case 160:
									case 161:
									case 162:
									case 163:
									case 165:
									case 166:
									case 167:
									case 169:
									case 171:
									case 173:
									case 174:
									case 175:
									case 176:
									case 177:
									case 178:
									case 181:
									case 182:
										{
										alt123 = 3;
										}
										break;
									default:
										{
											NoViableAltException nvae = new NoViableAltException("", 123, 16, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}

									}
									break;
								case 166:
									{
									alt123 = 5;
									}
									break;
								default:
									{
										NoViableAltException nvae = new NoViableAltException("", 123, 13, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 123, 9, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case 166:
							{
							alt123 = 4;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 123, 6, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case CASE:
					case CAST:
					case CONVERT:
					case COUNT:
					case DATEADD:
					case DATEDIFF:
					case DATEPART:
					case EXISTS:
					case NOT:
					case NUMBER:
					case STRING:
					case SYSTEMVAR:
					case TOKEN:
					case VARIABLE:
					case 164:
					case 167:
					case 169:
					case 183:
						{
						alt123 = 2;
						}
						break;
					case SIMPLE_FILE:
						{
						switch (input.LA(4))
						{
						case WS:
							{
							int LA123_11 = input.LA(5);

							if ((LA123_11==170))
							{
								switch (input.LA(6))
								{
								case WS:
									{
									int LA123_14 = input.LA(7);

									if ((LA123_14==SIMPLE_FILE))
									{
										alt123 = 2;
									}
									else if ((LA123_14==166))
									{
										alt123 = 4;
									}
									else
									{
										NoViableAltException nvae = new NoViableAltException("", 123, 14, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
									}
									break;
								case SIMPLE_FILE:
									{
									alt123 = 2;
									}
									break;
								case 166:
									{
									alt123 = 4;
									}
									break;
								default:
									{
										NoViableAltException nvae = new NoViableAltException("", 123, 12, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

							}
							else if ((LA123_11==AND||LA123_11==BETWEEN||LA123_11==IN||LA123_11==LIKE||LA123_11==MATCH||LA123_11==NOT||LA123_11==OR||(LA123_11>=159 && LA123_11<=163)||(LA123_11>=165 && LA123_11<=167)||LA123_11==169||LA123_11==171||(LA123_11>=173 && LA123_11<=178)||(LA123_11>=181 && LA123_11<=182)))
							{
								alt123 = 2;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 123, 11, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case 170:
							{
							switch (input.LA(5))
							{
							case WS:
								{
								int LA123_14 = input.LA(6);

								if ((LA123_14==SIMPLE_FILE))
								{
									alt123 = 2;
								}
								else if ((LA123_14==166))
								{
									alt123 = 4;
								}
								else
								{
									NoViableAltException nvae = new NoViableAltException("", 123, 14, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
								}
								break;
							case SIMPLE_FILE:
								{
								alt123 = 2;
								}
								break;
							case 166:
								{
								alt123 = 4;
								}
								break;
							default:
								{
									NoViableAltException nvae = new NoViableAltException("", 123, 12, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}

							}
							break;
						case 159:
						case 160:
						case 161:
						case 162:
						case 163:
						case 165:
						case 166:
						case 167:
						case 169:
						case 171:
						case 173:
						case 174:
						case 175:
						case 176:
						case 177:
						case 178:
						case 181:
						case 182:
							{
							alt123 = 2;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 123, 8, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case DISTINCT:
						{
						int LA123_9 = input.LA(4);

						if ((LA123_9==WS))
						{
							switch (input.LA(5))
							{
							case CASE:
							case CAST:
							case CONVERT:
							case COUNT:
							case DATEADD:
							case DATEDIFF:
							case DATEPART:
							case EXISTS:
							case NOT:
							case NUMBER:
							case STRING:
							case SYSTEMVAR:
							case TOKEN:
							case VARIABLE:
							case 164:
							case 167:
							case 169:
							case 183:
								{
								alt123 = 3;
								}
								break;
							case SIMPLE_FILE:
								{
								switch (input.LA(6))
								{
								case WS:
									{
									int LA123_18 = input.LA(7);

									if ((LA123_18==170))
									{
										switch (input.LA(8))
										{
										case WS:
											{
											int LA123_20 = input.LA(9);

											if ((LA123_20==SIMPLE_FILE))
											{
												alt123 = 3;
											}
											else if ((LA123_20==166))
											{
												alt123 = 5;
											}
											else
											{
												NoViableAltException nvae = new NoViableAltException("", 123, 20, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
											}
											break;
										case SIMPLE_FILE:
											{
											alt123 = 3;
											}
											break;
										case 166:
											{
											alt123 = 5;
											}
											break;
										default:
											{
												NoViableAltException nvae = new NoViableAltException("", 123, 19, input);
												DebugRecognitionException(nvae);
												throw nvae;
											}
										}

									}
									else if ((LA123_18==AND||LA123_18==BETWEEN||LA123_18==IN||LA123_18==LIKE||LA123_18==MATCH||LA123_18==NOT||LA123_18==OR||(LA123_18>=159 && LA123_18<=163)||(LA123_18>=165 && LA123_18<=167)||LA123_18==169||LA123_18==171||(LA123_18>=173 && LA123_18<=178)||(LA123_18>=181 && LA123_18<=182)))
									{
										alt123 = 3;
									}
									else
									{
										NoViableAltException nvae = new NoViableAltException("", 123, 18, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
									}
									break;
								case 170:
									{
									switch (input.LA(7))
									{
									case WS:
										{
										int LA123_20 = input.LA(8);

										if ((LA123_20==SIMPLE_FILE))
										{
											alt123 = 3;
										}
										else if ((LA123_20==166))
										{
											alt123 = 5;
										}
										else
										{
											NoViableAltException nvae = new NoViableAltException("", 123, 20, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
										}
										break;
									case SIMPLE_FILE:
										{
										alt123 = 3;
										}
										break;
									case 166:
										{
										alt123 = 5;
										}
										break;
									default:
										{
											NoViableAltException nvae = new NoViableAltException("", 123, 19, input);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}

									}
									break;
								case 159:
								case 160:
								case 161:
								case 162:
								case 163:
								case 165:
								case 166:
								case 167:
								case 169:
								case 171:
								case 173:
								case 174:
								case 175:
								case 176:
								case 177:
								case 178:
								case 181:
								case 182:
									{
									alt123 = 3;
									}
									break;
								default:
									{
										NoViableAltException nvae = new NoViableAltException("", 123, 16, input);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

								}
								break;
							case 166:
								{
								alt123 = 5;
								}
								break;
							default:
								{
									NoViableAltException nvae = new NoViableAltException("", 123, 13, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}

						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 123, 9, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case 166:
						{
						alt123 = 4;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 123, 5, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 123, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SIMPLE_FILE:
				{
				alt123 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 123, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(123); }
			switch (alt123)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:408:4: TOKEN ( WS )? '(' ( WS )? ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )? ')'
				{
				DebugLocation(408, 4);
				TOKEN297=(IToken)Match(input,TOKEN,Follow._TOKEN_in_functioncall_or_column2524);  
				stream_TOKEN.Add(TOKEN297);

				DebugLocation(408, 10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:408:10: ( WS )?
				int alt101=2;
				try { DebugEnterSubRule(101);
				try { DebugEnterDecision(101, decisionCanBacktrack[101]);
				int LA101_0 = input.LA(1);

				if ((LA101_0==WS))
				{
					alt101 = 1;
				}
				} finally { DebugExitDecision(101); }
				switch (alt101)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:408:10: WS
					{
					DebugLocation(408, 10);
					WS298=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2526);  
					stream_WS.Add(WS298);


					}
					break;

				}
				} finally { DebugExitSubRule(101); }

				DebugLocation(408, 14);
				char_literal299=(IToken)Match(input,164,Follow._164_in_functioncall_or_column2529);  
				stream_164.Add(char_literal299);

				DebugLocation(408, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:408:18: ( WS )?
				int alt102=2;
				try { DebugEnterSubRule(102);
				try { DebugEnterDecision(102, decisionCanBacktrack[102]);
				int LA102_0 = input.LA(1);

				if ((LA102_0==WS))
				{
					alt102 = 1;
				}
				} finally { DebugExitDecision(102); }
				switch (alt102)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:408:18: WS
					{
					DebugLocation(408, 18);
					WS300=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2531);  
					stream_WS.Add(WS300);


					}
					break;

				}
				} finally { DebugExitSubRule(102); }

				DebugLocation(408, 22);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:408:22: ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )?
				int alt107=2;
				try { DebugEnterSubRule(107);
				try { DebugEnterDecision(107, decisionCanBacktrack[107]);
				int LA107_0 = input.LA(1);

				if (((LA107_0>=CASE && LA107_0<=CAST)||(LA107_0>=CONVERT && LA107_0<=COUNT)||(LA107_0>=DATEADD && LA107_0<=DATEPART)||LA107_0==EXISTS||(LA107_0>=NOT && LA107_0<=NUMBER)||LA107_0==SIMPLE_FILE||(LA107_0>=STRING && LA107_0<=SYSTEMVAR)||LA107_0==TOKEN||LA107_0==VARIABLE||LA107_0==164||LA107_0==167||LA107_0==169||LA107_0==183))
				{
					alt107 = 1;
				}
				} finally { DebugExitDecision(107); }
				switch (alt107)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:408:23: expression ( WS )? ( ',' ( WS )? expression ( WS )? )*
					{
					DebugLocation(408, 23);
					PushFollow(Follow._expression_in_functioncall_or_column2535);
					expression301=expression();
					PopFollow();

					stream_expression.Add(expression301.Tree);
					DebugLocation(408, 34);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:408:34: ( WS )?
					int alt103=2;
					try { DebugEnterSubRule(103);
					try { DebugEnterDecision(103, decisionCanBacktrack[103]);
					int LA103_0 = input.LA(1);

					if ((LA103_0==WS))
					{
						alt103 = 1;
					}
					} finally { DebugExitDecision(103); }
					switch (alt103)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:408:34: WS
						{
						DebugLocation(408, 34);
						WS302=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2537);  
						stream_WS.Add(WS302);


						}
						break;

					}
					} finally { DebugExitSubRule(103); }

					DebugLocation(408, 38);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:408:38: ( ',' ( WS )? expression ( WS )? )*
					try { DebugEnterSubRule(106);
					while (true)
					{
						int alt106=2;
						try { DebugEnterDecision(106, decisionCanBacktrack[106]);
						int LA106_0 = input.LA(1);

						if ((LA106_0==168))
						{
							alt106 = 1;
						}


						} finally { DebugExitDecision(106); }
						switch ( alt106 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:408:39: ',' ( WS )? expression ( WS )?
							{
							DebugLocation(408, 39);
							char_literal303=(IToken)Match(input,168,Follow._168_in_functioncall_or_column2541);  
							stream_168.Add(char_literal303);

							DebugLocation(408, 43);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:408:43: ( WS )?
							int alt104=2;
							try { DebugEnterSubRule(104);
							try { DebugEnterDecision(104, decisionCanBacktrack[104]);
							int LA104_0 = input.LA(1);

							if ((LA104_0==WS))
							{
								alt104 = 1;
							}
							} finally { DebugExitDecision(104); }
							switch (alt104)
							{
							case 1:
								DebugEnterAlt(1);
								// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:408:43: WS
								{
								DebugLocation(408, 43);
								WS304=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2543);  
								stream_WS.Add(WS304);


								}
								break;

							}
							} finally { DebugExitSubRule(104); }

							DebugLocation(408, 47);
							PushFollow(Follow._expression_in_functioncall_or_column2546);
							expression305=expression();
							PopFollow();

							stream_expression.Add(expression305.Tree);
							DebugLocation(408, 58);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:408:58: ( WS )?
							int alt105=2;
							try { DebugEnterSubRule(105);
							try { DebugEnterDecision(105, decisionCanBacktrack[105]);
							int LA105_0 = input.LA(1);

							if ((LA105_0==WS))
							{
								alt105 = 1;
							}
							} finally { DebugExitDecision(105); }
							switch (alt105)
							{
							case 1:
								DebugEnterAlt(1);
								// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:408:58: WS
								{
								DebugLocation(408, 58);
								WS306=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2548);  
								stream_WS.Add(WS306);


								}
								break;

							}
							} finally { DebugExitSubRule(105); }


							}
							break;

						default:
							goto loop106;
						}
					}

					loop106:
						;

					} finally { DebugExitSubRule(106); }


					}
					break;

				}
				} finally { DebugExitSubRule(107); }

				DebugLocation(408, 66);
				char_literal307=(IToken)Match(input,165,Follow._165_in_functioncall_or_column2555);  
				stream_165.Add(char_literal307);



				{
				// AST REWRITE
				// elements: expression, TOKEN
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 408:70: -> ^( T_FUNCTIONCALL TOKEN ( expression )* )
				{
					DebugLocation(408, 73);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:408:73: ^( T_FUNCTIONCALL TOKEN ( expression )* )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(408, 75);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(408, 90);
					adaptor.AddChild(root_1, stream_TOKEN.NextNode());
					DebugLocation(408, 96);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:408:96: ( expression )*
					while ( stream_expression.HasNext )
					{
						DebugLocation(408, 96);
						adaptor.AddChild(root_1, stream_expression.NextTree());

					}
					stream_expression.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:409:4: COUNT ( WS )? '(' ( WS )? expression ( WS )? ')'
				{
				DebugLocation(409, 4);
				COUNT308=(IToken)Match(input,COUNT,Follow._COUNT_in_functioncall_or_column2571);  
				stream_COUNT.Add(COUNT308);

				DebugLocation(409, 10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:409:10: ( WS )?
				int alt108=2;
				try { DebugEnterSubRule(108);
				try { DebugEnterDecision(108, decisionCanBacktrack[108]);
				int LA108_0 = input.LA(1);

				if ((LA108_0==WS))
				{
					alt108 = 1;
				}
				} finally { DebugExitDecision(108); }
				switch (alt108)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:409:10: WS
					{
					DebugLocation(409, 10);
					WS309=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2573);  
					stream_WS.Add(WS309);


					}
					break;

				}
				} finally { DebugExitSubRule(108); }

				DebugLocation(409, 14);
				char_literal310=(IToken)Match(input,164,Follow._164_in_functioncall_or_column2576);  
				stream_164.Add(char_literal310);

				DebugLocation(409, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:409:18: ( WS )?
				int alt109=2;
				try { DebugEnterSubRule(109);
				try { DebugEnterDecision(109, decisionCanBacktrack[109]);
				int LA109_0 = input.LA(1);

				if ((LA109_0==WS))
				{
					alt109 = 1;
				}
				} finally { DebugExitDecision(109); }
				switch (alt109)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:409:18: WS
					{
					DebugLocation(409, 18);
					WS311=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2578);  
					stream_WS.Add(WS311);


					}
					break;

				}
				} finally { DebugExitSubRule(109); }

				DebugLocation(409, 22);
				PushFollow(Follow._expression_in_functioncall_or_column2581);
				expression312=expression();
				PopFollow();

				stream_expression.Add(expression312.Tree);
				DebugLocation(409, 33);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:409:33: ( WS )?
				int alt110=2;
				try { DebugEnterSubRule(110);
				try { DebugEnterDecision(110, decisionCanBacktrack[110]);
				int LA110_0 = input.LA(1);

				if ((LA110_0==WS))
				{
					alt110 = 1;
				}
				} finally { DebugExitDecision(110); }
				switch (alt110)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:409:33: WS
					{
					DebugLocation(409, 33);
					WS313=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2583);  
					stream_WS.Add(WS313);


					}
					break;

				}
				} finally { DebugExitSubRule(110); }

				DebugLocation(409, 37);
				char_literal314=(IToken)Match(input,165,Follow._165_in_functioncall_or_column2586);  
				stream_165.Add(char_literal314);



				{
				// AST REWRITE
				// elements: expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 409:41: -> ^( T_FUNCTIONCALL T_COUNT expression )
				{
					DebugLocation(409, 44);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:409:44: ^( T_FUNCTIONCALL T_COUNT expression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(409, 46);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(409, 61);
					adaptor.AddChild(root_1, (object)adaptor.Create(T_COUNT, "T_COUNT"));
					DebugLocation(409, 69);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:410:4: COUNT ( WS )? '(' ( WS )? DISTINCT WS expression ( WS )? ')'
				{
				DebugLocation(410, 4);
				COUNT315=(IToken)Match(input,COUNT,Follow._COUNT_in_functioncall_or_column2601);  
				stream_COUNT.Add(COUNT315);

				DebugLocation(410, 10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:410:10: ( WS )?
				int alt111=2;
				try { DebugEnterSubRule(111);
				try { DebugEnterDecision(111, decisionCanBacktrack[111]);
				int LA111_0 = input.LA(1);

				if ((LA111_0==WS))
				{
					alt111 = 1;
				}
				} finally { DebugExitDecision(111); }
				switch (alt111)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:410:10: WS
					{
					DebugLocation(410, 10);
					WS316=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2603);  
					stream_WS.Add(WS316);


					}
					break;

				}
				} finally { DebugExitSubRule(111); }

				DebugLocation(410, 14);
				char_literal317=(IToken)Match(input,164,Follow._164_in_functioncall_or_column2606);  
				stream_164.Add(char_literal317);

				DebugLocation(410, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:410:18: ( WS )?
				int alt112=2;
				try { DebugEnterSubRule(112);
				try { DebugEnterDecision(112, decisionCanBacktrack[112]);
				int LA112_0 = input.LA(1);

				if ((LA112_0==WS))
				{
					alt112 = 1;
				}
				} finally { DebugExitDecision(112); }
				switch (alt112)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:410:18: WS
					{
					DebugLocation(410, 18);
					WS318=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2608);  
					stream_WS.Add(WS318);


					}
					break;

				}
				} finally { DebugExitSubRule(112); }

				DebugLocation(410, 22);
				DISTINCT319=(IToken)Match(input,DISTINCT,Follow._DISTINCT_in_functioncall_or_column2611);  
				stream_DISTINCT.Add(DISTINCT319);

				DebugLocation(410, 31);
				WS320=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2613);  
				stream_WS.Add(WS320);

				DebugLocation(410, 34);
				PushFollow(Follow._expression_in_functioncall_or_column2615);
				expression321=expression();
				PopFollow();

				stream_expression.Add(expression321.Tree);
				DebugLocation(410, 45);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:410:45: ( WS )?
				int alt113=2;
				try { DebugEnterSubRule(113);
				try { DebugEnterDecision(113, decisionCanBacktrack[113]);
				int LA113_0 = input.LA(1);

				if ((LA113_0==WS))
				{
					alt113 = 1;
				}
				} finally { DebugExitDecision(113); }
				switch (alt113)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:410:45: WS
					{
					DebugLocation(410, 45);
					WS322=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2617);  
					stream_WS.Add(WS322);


					}
					break;

				}
				} finally { DebugExitSubRule(113); }

				DebugLocation(410, 49);
				char_literal323=(IToken)Match(input,165,Follow._165_in_functioncall_or_column2620);  
				stream_165.Add(char_literal323);



				{
				// AST REWRITE
				// elements: expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 410:53: -> ^( T_FUNCTIONCALL T_DISTINCTCOUNT expression )
				{
					DebugLocation(410, 56);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:410:56: ^( T_FUNCTIONCALL T_DISTINCTCOUNT expression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(410, 58);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(410, 73);
					adaptor.AddChild(root_1, (object)adaptor.Create(T_DISTINCTCOUNT, "T_DISTINCTCOUNT"));
					DebugLocation(410, 89);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:411:4: COUNT ( WS )? '(' ( WS )? all_columns ( WS )? ')'
				{
				DebugLocation(411, 4);
				COUNT324=(IToken)Match(input,COUNT,Follow._COUNT_in_functioncall_or_column2635);  
				stream_COUNT.Add(COUNT324);

				DebugLocation(411, 10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:411:10: ( WS )?
				int alt114=2;
				try { DebugEnterSubRule(114);
				try { DebugEnterDecision(114, decisionCanBacktrack[114]);
				int LA114_0 = input.LA(1);

				if ((LA114_0==WS))
				{
					alt114 = 1;
				}
				} finally { DebugExitDecision(114); }
				switch (alt114)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:411:10: WS
					{
					DebugLocation(411, 10);
					WS325=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2637);  
					stream_WS.Add(WS325);


					}
					break;

				}
				} finally { DebugExitSubRule(114); }

				DebugLocation(411, 14);
				char_literal326=(IToken)Match(input,164,Follow._164_in_functioncall_or_column2640);  
				stream_164.Add(char_literal326);

				DebugLocation(411, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:411:18: ( WS )?
				int alt115=2;
				try { DebugEnterSubRule(115);
				try { DebugEnterDecision(115, decisionCanBacktrack[115]);
				int LA115_0 = input.LA(1);

				if ((LA115_0==WS))
				{
					alt115 = 1;
				}
				} finally { DebugExitDecision(115); }
				switch (alt115)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:411:18: WS
					{
					DebugLocation(411, 18);
					WS327=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2642);  
					stream_WS.Add(WS327);


					}
					break;

				}
				} finally { DebugExitSubRule(115); }

				DebugLocation(411, 22);
				PushFollow(Follow._all_columns_in_functioncall_or_column2645);
				all_columns328=all_columns();
				PopFollow();

				stream_all_columns.Add(all_columns328.Tree);
				DebugLocation(411, 34);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:411:34: ( WS )?
				int alt116=2;
				try { DebugEnterSubRule(116);
				try { DebugEnterDecision(116, decisionCanBacktrack[116]);
				int LA116_0 = input.LA(1);

				if ((LA116_0==WS))
				{
					alt116 = 1;
				}
				} finally { DebugExitDecision(116); }
				switch (alt116)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:411:34: WS
					{
					DebugLocation(411, 34);
					WS329=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2647);  
					stream_WS.Add(WS329);


					}
					break;

				}
				} finally { DebugExitSubRule(116); }

				DebugLocation(411, 38);
				char_literal330=(IToken)Match(input,165,Follow._165_in_functioncall_or_column2650);  
				stream_165.Add(char_literal330);



				{
				// AST REWRITE
				// elements: all_columns
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 411:42: -> ^( T_FUNCTIONCALL T_COUNT all_columns )
				{
					DebugLocation(411, 45);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:411:45: ^( T_FUNCTIONCALL T_COUNT all_columns )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(411, 47);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(411, 62);
					adaptor.AddChild(root_1, (object)adaptor.Create(T_COUNT, "T_COUNT"));
					DebugLocation(411, 70);
					adaptor.AddChild(root_1, stream_all_columns.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:412:4: COUNT ( WS )? '(' ( WS )? DISTINCT WS all_columns ( WS )? ')'
				{
				DebugLocation(412, 4);
				COUNT331=(IToken)Match(input,COUNT,Follow._COUNT_in_functioncall_or_column2665);  
				stream_COUNT.Add(COUNT331);

				DebugLocation(412, 10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:412:10: ( WS )?
				int alt117=2;
				try { DebugEnterSubRule(117);
				try { DebugEnterDecision(117, decisionCanBacktrack[117]);
				int LA117_0 = input.LA(1);

				if ((LA117_0==WS))
				{
					alt117 = 1;
				}
				} finally { DebugExitDecision(117); }
				switch (alt117)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:412:10: WS
					{
					DebugLocation(412, 10);
					WS332=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2667);  
					stream_WS.Add(WS332);


					}
					break;

				}
				} finally { DebugExitSubRule(117); }

				DebugLocation(412, 14);
				char_literal333=(IToken)Match(input,164,Follow._164_in_functioncall_or_column2670);  
				stream_164.Add(char_literal333);

				DebugLocation(412, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:412:18: ( WS )?
				int alt118=2;
				try { DebugEnterSubRule(118);
				try { DebugEnterDecision(118, decisionCanBacktrack[118]);
				int LA118_0 = input.LA(1);

				if ((LA118_0==WS))
				{
					alt118 = 1;
				}
				} finally { DebugExitDecision(118); }
				switch (alt118)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:412:18: WS
					{
					DebugLocation(412, 18);
					WS334=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2672);  
					stream_WS.Add(WS334);


					}
					break;

				}
				} finally { DebugExitSubRule(118); }

				DebugLocation(412, 22);
				DISTINCT335=(IToken)Match(input,DISTINCT,Follow._DISTINCT_in_functioncall_or_column2675);  
				stream_DISTINCT.Add(DISTINCT335);

				DebugLocation(412, 31);
				WS336=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2677);  
				stream_WS.Add(WS336);

				DebugLocation(412, 34);
				PushFollow(Follow._all_columns_in_functioncall_or_column2679);
				all_columns337=all_columns();
				PopFollow();

				stream_all_columns.Add(all_columns337.Tree);
				DebugLocation(412, 46);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:412:46: ( WS )?
				int alt119=2;
				try { DebugEnterSubRule(119);
				try { DebugEnterDecision(119, decisionCanBacktrack[119]);
				int LA119_0 = input.LA(1);

				if ((LA119_0==WS))
				{
					alt119 = 1;
				}
				} finally { DebugExitDecision(119); }
				switch (alt119)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:412:46: WS
					{
					DebugLocation(412, 46);
					WS338=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2681);  
					stream_WS.Add(WS338);


					}
					break;

				}
				} finally { DebugExitSubRule(119); }

				DebugLocation(412, 50);
				char_literal339=(IToken)Match(input,165,Follow._165_in_functioncall_or_column2684);  
				stream_165.Add(char_literal339);



				{
				// AST REWRITE
				// elements: all_columns
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 412:54: -> ^( T_FUNCTIONCALL T_DISTINCTCOUNT all_columns )
				{
					DebugLocation(412, 57);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:412:57: ^( T_FUNCTIONCALL T_DISTINCTCOUNT all_columns )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(412, 59);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(412, 74);
					adaptor.AddChild(root_1, (object)adaptor.Create(T_DISTINCTCOUNT, "T_DISTINCTCOUNT"));
					DebugLocation(412, 90);
					adaptor.AddChild(root_1, stream_all_columns.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:414:4: ( table_alias ( WS )? '.' ( WS )? )? column_name
				{
				DebugLocation(414, 4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:414:4: ( table_alias ( WS )? '.' ( WS )? )?
				int alt122=2;
				try { DebugEnterSubRule(122);
				try { DebugEnterDecision(122, decisionCanBacktrack[122]);
				int LA122_0 = input.LA(1);

				if ((LA122_0==SIMPLE_FILE))
				{
					int LA122_1 = input.LA(2);

					if ((LA122_1==WS))
					{
						int LA122_2 = input.LA(3);

						if ((LA122_2==170))
						{
							alt122 = 1;
						}
					}
					else if ((LA122_1==170))
					{
						alt122 = 1;
					}
				}
				} finally { DebugExitDecision(122); }
				switch (alt122)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:414:5: table_alias ( WS )? '.' ( WS )?
					{
					DebugLocation(414, 5);
					PushFollow(Follow._table_alias_in_functioncall_or_column2702);
					table_alias340=table_alias();
					PopFollow();

					stream_table_alias.Add(table_alias340.Tree);
					DebugLocation(414, 17);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:414:17: ( WS )?
					int alt120=2;
					try { DebugEnterSubRule(120);
					try { DebugEnterDecision(120, decisionCanBacktrack[120]);
					int LA120_0 = input.LA(1);

					if ((LA120_0==WS))
					{
						alt120 = 1;
					}
					} finally { DebugExitDecision(120); }
					switch (alt120)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:414:17: WS
						{
						DebugLocation(414, 17);
						WS341=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2704);  
						stream_WS.Add(WS341);


						}
						break;

					}
					} finally { DebugExitSubRule(120); }

					DebugLocation(414, 21);
					char_literal342=(IToken)Match(input,170,Follow._170_in_functioncall_or_column2707);  
					stream_170.Add(char_literal342);

					DebugLocation(414, 25);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:414:25: ( WS )?
					int alt121=2;
					try { DebugEnterSubRule(121);
					try { DebugEnterDecision(121, decisionCanBacktrack[121]);
					int LA121_0 = input.LA(1);

					if ((LA121_0==WS))
					{
						alt121 = 1;
					}
					} finally { DebugExitDecision(121); }
					switch (alt121)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:414:25: WS
						{
						DebugLocation(414, 25);
						WS343=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2709);  
						stream_WS.Add(WS343);


						}
						break;

					}
					} finally { DebugExitSubRule(121); }


					}
					break;

				}
				} finally { DebugExitSubRule(122); }

				DebugLocation(414, 31);
				PushFollow(Follow._column_name_in_functioncall_or_column2714);
				column_name344=column_name();
				PopFollow();

				stream_column_name.Add(column_name344.Tree);


				{
				// AST REWRITE
				// elements: column_name, table_alias
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 414:43: -> ^( T_COLUMN column_name ( table_alias )? )
				{
					DebugLocation(414, 46);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:414:46: ^( T_COLUMN column_name ( table_alias )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(414, 48);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_COLUMN, "T_COLUMN"), root_1);

					DebugLocation(414, 57);
					adaptor.AddChild(root_1, stream_column_name.NextTree());
					DebugLocation(414, 69);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:414:69: ( table_alias )?
					if (stream_table_alias.HasNext)
					{
						DebugLocation(414, 69);
						adaptor.AddChild(root_1, stream_table_alias.NextTree());

					}
					stream_table_alias.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("functioncall_or_column", 53);
			LeaveRule("functioncall_or_column", 53);
			LeaveRule_functioncall_or_column();
	    }
	 	DebugLocation(415, 1);
		} finally { DebugExitRule(GrammarFileName, "functioncall_or_column"); }
		return retval;

	}
	// $ANTLR end "functioncall_or_column"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_column_name() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_column_name() {}

	// $ANTLR start "column_name"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:417:1: column_name : SIMPLE_FILE ;
	[GrammarRule("column_name")]
	private AstParserRuleReturnScope<object, IToken> column_name()
	{
		EnterRule_column_name();
		EnterRule("column_name", 54);
		TraceIn("column_name", 54);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken SIMPLE_FILE345 = default(IToken);

	    object SIMPLE_FILE345_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "column_name");
		DebugLocation(417, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:418:2: ( SIMPLE_FILE )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:418:4: SIMPLE_FILE
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(418, 4);
			SIMPLE_FILE345=(IToken)Match(input,SIMPLE_FILE,Follow._SIMPLE_FILE_in_column_name2737); 
			SIMPLE_FILE345_tree = (object)adaptor.Create(SIMPLE_FILE345);
			adaptor.AddChild(root_0, SIMPLE_FILE345_tree);


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("column_name", 54);
			LeaveRule("column_name", 54);
			LeaveRule_column_name();
	    }
	 	DebugLocation(419, 1);
		} finally { DebugExitRule(GrammarFileName, "column_name"); }
		return retval;

	}
	// $ANTLR end "column_name"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_table_alias() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_table_alias() {}

	// $ANTLR start "table_alias"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:421:1: table_alias : SIMPLE_FILE -> ^( T_TABLE_ALIAS SIMPLE_FILE ) ;
	[GrammarRule("table_alias")]
	private AstParserRuleReturnScope<object, IToken> table_alias()
	{
		EnterRule_table_alias();
		EnterRule("table_alias", 55);
		TraceIn("table_alias", 55);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken SIMPLE_FILE346 = default(IToken);

	    object SIMPLE_FILE346_tree = default(object);
	    RewriteRuleITokenStream stream_SIMPLE_FILE=new RewriteRuleITokenStream(adaptor,"token SIMPLE_FILE");

		try { DebugEnterRule(GrammarFileName, "table_alias");
		DebugLocation(421, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:422:2: ( SIMPLE_FILE -> ^( T_TABLE_ALIAS SIMPLE_FILE ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:422:4: SIMPLE_FILE
			{
			DebugLocation(422, 4);
			SIMPLE_FILE346=(IToken)Match(input,SIMPLE_FILE,Follow._SIMPLE_FILE_in_table_alias2748);  
			stream_SIMPLE_FILE.Add(SIMPLE_FILE346);



			{
			// AST REWRITE
			// elements: SIMPLE_FILE
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 422:16: -> ^( T_TABLE_ALIAS SIMPLE_FILE )
			{
				DebugLocation(422, 19);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:422:19: ^( T_TABLE_ALIAS SIMPLE_FILE )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(422, 21);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_TABLE_ALIAS, "T_TABLE_ALIAS"), root_1);

				DebugLocation(422, 35);
				adaptor.AddChild(root_1, stream_SIMPLE_FILE.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("table_alias", 55);
			LeaveRule("table_alias", 55);
			LeaveRule_table_alias();
	    }
	 	DebugLocation(423, 1);
		} finally { DebugExitRule(GrammarFileName, "table_alias"); }
		return retval;

	}
	// $ANTLR end "table_alias"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_specialfunctioncall() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_specialfunctioncall() {}

	// $ANTLR start "specialfunctioncall"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:425:1: specialfunctioncall : ( CONVERT ( WS )? '(' ( WS )? TOKEN ( WS )? ',' ( WS )? expression ( WS )? ( ',' ( WS )? STRING ( WS )? )? ')' -> ^( T_CONVERT TOKEN expression ( STRING )? ) | CAST ( WS )? '(' ( WS )? expression WS AS WS datatype ( WS )? ')' -> ^( T_CONVERT TOKEN expression ) | DATEADD ( WS )? '(' ( WS )? datepart ( WS )? ',' ( WS )? expression ( WS )? ',' ( WS )? expression ( WS )? ')' -> ^( T_FUNCTIONCALL DATEADD datepart ( expression )+ ) | DATEDIFF ( WS )? '(' ( WS )? datepart ( WS )? ',' ( WS )? expression ( WS )? ',' ( WS )? expression ( WS )? ')' -> ^( T_FUNCTIONCALL DATEDIFF datepart ( expression )+ ) | DATEPART ( WS )? '(' ( WS )? datepart ( WS )? ',' ( WS )? expression ( WS )? ')' -> ^( T_FUNCTIONCALL DATEPART datepart expression ) );
	[GrammarRule("specialfunctioncall")]
	private AstParserRuleReturnScope<object, IToken> specialfunctioncall()
	{
		EnterRule_specialfunctioncall();
		EnterRule("specialfunctioncall", 56);
		TraceIn("specialfunctioncall", 56);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken CONVERT347 = default(IToken);
	    IToken WS348 = default(IToken);
	    IToken char_literal349 = default(IToken);
	    IToken WS350 = default(IToken);
	    IToken TOKEN351 = default(IToken);
	    IToken WS352 = default(IToken);
	    IToken char_literal353 = default(IToken);
	    IToken WS354 = default(IToken);
	    IToken WS356 = default(IToken);
	    IToken char_literal357 = default(IToken);
	    IToken WS358 = default(IToken);
	    IToken STRING359 = default(IToken);
	    IToken WS360 = default(IToken);
	    IToken char_literal361 = default(IToken);
	    IToken CAST362 = default(IToken);
	    IToken WS363 = default(IToken);
	    IToken char_literal364 = default(IToken);
	    IToken WS365 = default(IToken);
	    IToken WS367 = default(IToken);
	    IToken AS368 = default(IToken);
	    IToken WS369 = default(IToken);
	    IToken WS371 = default(IToken);
	    IToken char_literal372 = default(IToken);
	    IToken DATEADD373 = default(IToken);
	    IToken WS374 = default(IToken);
	    IToken char_literal375 = default(IToken);
	    IToken WS376 = default(IToken);
	    IToken WS378 = default(IToken);
	    IToken char_literal379 = default(IToken);
	    IToken WS380 = default(IToken);
	    IToken WS382 = default(IToken);
	    IToken char_literal383 = default(IToken);
	    IToken WS384 = default(IToken);
	    IToken WS386 = default(IToken);
	    IToken char_literal387 = default(IToken);
	    IToken DATEDIFF388 = default(IToken);
	    IToken WS389 = default(IToken);
	    IToken char_literal390 = default(IToken);
	    IToken WS391 = default(IToken);
	    IToken WS393 = default(IToken);
	    IToken char_literal394 = default(IToken);
	    IToken WS395 = default(IToken);
	    IToken WS397 = default(IToken);
	    IToken char_literal398 = default(IToken);
	    IToken WS399 = default(IToken);
	    IToken WS401 = default(IToken);
	    IToken char_literal402 = default(IToken);
	    IToken DATEPART403 = default(IToken);
	    IToken WS404 = default(IToken);
	    IToken char_literal405 = default(IToken);
	    IToken WS406 = default(IToken);
	    IToken WS408 = default(IToken);
	    IToken char_literal409 = default(IToken);
	    IToken WS410 = default(IToken);
	    IToken WS412 = default(IToken);
	    IToken char_literal413 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression355 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression366 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> datatype370 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> datepart377 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression381 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression385 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> datepart392 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression396 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression400 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> datepart407 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression411 = default(AstParserRuleReturnScope<object, IToken>);

	    object CONVERT347_tree = default(object);
	    object WS348_tree = default(object);
	    object char_literal349_tree = default(object);
	    object WS350_tree = default(object);
	    object TOKEN351_tree = default(object);
	    object WS352_tree = default(object);
	    object char_literal353_tree = default(object);
	    object WS354_tree = default(object);
	    object WS356_tree = default(object);
	    object char_literal357_tree = default(object);
	    object WS358_tree = default(object);
	    object STRING359_tree = default(object);
	    object WS360_tree = default(object);
	    object char_literal361_tree = default(object);
	    object CAST362_tree = default(object);
	    object WS363_tree = default(object);
	    object char_literal364_tree = default(object);
	    object WS365_tree = default(object);
	    object WS367_tree = default(object);
	    object AS368_tree = default(object);
	    object WS369_tree = default(object);
	    object WS371_tree = default(object);
	    object char_literal372_tree = default(object);
	    object DATEADD373_tree = default(object);
	    object WS374_tree = default(object);
	    object char_literal375_tree = default(object);
	    object WS376_tree = default(object);
	    object WS378_tree = default(object);
	    object char_literal379_tree = default(object);
	    object WS380_tree = default(object);
	    object WS382_tree = default(object);
	    object char_literal383_tree = default(object);
	    object WS384_tree = default(object);
	    object WS386_tree = default(object);
	    object char_literal387_tree = default(object);
	    object DATEDIFF388_tree = default(object);
	    object WS389_tree = default(object);
	    object char_literal390_tree = default(object);
	    object WS391_tree = default(object);
	    object WS393_tree = default(object);
	    object char_literal394_tree = default(object);
	    object WS395_tree = default(object);
	    object WS397_tree = default(object);
	    object char_literal398_tree = default(object);
	    object WS399_tree = default(object);
	    object WS401_tree = default(object);
	    object char_literal402_tree = default(object);
	    object DATEPART403_tree = default(object);
	    object WS404_tree = default(object);
	    object char_literal405_tree = default(object);
	    object WS406_tree = default(object);
	    object WS408_tree = default(object);
	    object char_literal409_tree = default(object);
	    object WS410_tree = default(object);
	    object WS412_tree = default(object);
	    object char_literal413_tree = default(object);
	    RewriteRuleITokenStream stream_CAST=new RewriteRuleITokenStream(adaptor,"token CAST");
	    RewriteRuleITokenStream stream_AS=new RewriteRuleITokenStream(adaptor,"token AS");
	    RewriteRuleITokenStream stream_164=new RewriteRuleITokenStream(adaptor,"token 164");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_DATEPART=new RewriteRuleITokenStream(adaptor,"token DATEPART");
	    RewriteRuleITokenStream stream_DATEADD=new RewriteRuleITokenStream(adaptor,"token DATEADD");
	    RewriteRuleITokenStream stream_CONVERT=new RewriteRuleITokenStream(adaptor,"token CONVERT");
	    RewriteRuleITokenStream stream_DATEDIFF=new RewriteRuleITokenStream(adaptor,"token DATEDIFF");
	    RewriteRuleITokenStream stream_165=new RewriteRuleITokenStream(adaptor,"token 165");
	    RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
	    RewriteRuleITokenStream stream_168=new RewriteRuleITokenStream(adaptor,"token 168");
	    RewriteRuleITokenStream stream_TOKEN=new RewriteRuleITokenStream(adaptor,"token TOKEN");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_datatype=new RewriteRuleSubtreeStream(adaptor,"rule datatype");
	    RewriteRuleSubtreeStream stream_datepart=new RewriteRuleSubtreeStream(adaptor,"rule datepart");
		try { DebugEnterRule(GrammarFileName, "specialfunctioncall");
		DebugLocation(425, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:426:2: ( CONVERT ( WS )? '(' ( WS )? TOKEN ( WS )? ',' ( WS )? expression ( WS )? ( ',' ( WS )? STRING ( WS )? )? ')' -> ^( T_CONVERT TOKEN expression ( STRING )? ) | CAST ( WS )? '(' ( WS )? expression WS AS WS datatype ( WS )? ')' -> ^( T_CONVERT TOKEN expression ) | DATEADD ( WS )? '(' ( WS )? datepart ( WS )? ',' ( WS )? expression ( WS )? ',' ( WS )? expression ( WS )? ')' -> ^( T_FUNCTIONCALL DATEADD datepart ( expression )+ ) | DATEDIFF ( WS )? '(' ( WS )? datepart ( WS )? ',' ( WS )? expression ( WS )? ',' ( WS )? expression ( WS )? ')' -> ^( T_FUNCTIONCALL DATEDIFF datepart ( expression )+ ) | DATEPART ( WS )? '(' ( WS )? datepart ( WS )? ',' ( WS )? expression ( WS )? ')' -> ^( T_FUNCTIONCALL DATEPART datepart expression ) )
			int alt154=5;
			try { DebugEnterDecision(154, decisionCanBacktrack[154]);
			switch (input.LA(1))
			{
			case CONVERT:
				{
				alt154 = 1;
				}
				break;
			case CAST:
				{
				alt154 = 2;
				}
				break;
			case DATEADD:
				{
				alt154 = 3;
				}
				break;
			case DATEDIFF:
				{
				alt154 = 4;
				}
				break;
			case DATEPART:
				{
				alt154 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 154, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(154); }
			switch (alt154)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:426:4: CONVERT ( WS )? '(' ( WS )? TOKEN ( WS )? ',' ( WS )? expression ( WS )? ( ',' ( WS )? STRING ( WS )? )? ')'
				{
				DebugLocation(426, 4);
				CONVERT347=(IToken)Match(input,CONVERT,Follow._CONVERT_in_specialfunctioncall2768);  
				stream_CONVERT.Add(CONVERT347);

				DebugLocation(426, 12);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:426:12: ( WS )?
				int alt124=2;
				try { DebugEnterSubRule(124);
				try { DebugEnterDecision(124, decisionCanBacktrack[124]);
				int LA124_0 = input.LA(1);

				if ((LA124_0==WS))
				{
					alt124 = 1;
				}
				} finally { DebugExitDecision(124); }
				switch (alt124)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:426:12: WS
					{
					DebugLocation(426, 12);
					WS348=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2770);  
					stream_WS.Add(WS348);


					}
					break;

				}
				} finally { DebugExitSubRule(124); }

				DebugLocation(426, 16);
				char_literal349=(IToken)Match(input,164,Follow._164_in_specialfunctioncall2773);  
				stream_164.Add(char_literal349);

				DebugLocation(426, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:426:20: ( WS )?
				int alt125=2;
				try { DebugEnterSubRule(125);
				try { DebugEnterDecision(125, decisionCanBacktrack[125]);
				int LA125_0 = input.LA(1);

				if ((LA125_0==WS))
				{
					alt125 = 1;
				}
				} finally { DebugExitDecision(125); }
				switch (alt125)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:426:20: WS
					{
					DebugLocation(426, 20);
					WS350=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2775);  
					stream_WS.Add(WS350);


					}
					break;

				}
				} finally { DebugExitSubRule(125); }

				DebugLocation(426, 24);
				TOKEN351=(IToken)Match(input,TOKEN,Follow._TOKEN_in_specialfunctioncall2778);  
				stream_TOKEN.Add(TOKEN351);

				DebugLocation(426, 30);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:426:30: ( WS )?
				int alt126=2;
				try { DebugEnterSubRule(126);
				try { DebugEnterDecision(126, decisionCanBacktrack[126]);
				int LA126_0 = input.LA(1);

				if ((LA126_0==WS))
				{
					alt126 = 1;
				}
				} finally { DebugExitDecision(126); }
				switch (alt126)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:426:30: WS
					{
					DebugLocation(426, 30);
					WS352=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2780);  
					stream_WS.Add(WS352);


					}
					break;

				}
				} finally { DebugExitSubRule(126); }

				DebugLocation(426, 34);
				char_literal353=(IToken)Match(input,168,Follow._168_in_specialfunctioncall2783);  
				stream_168.Add(char_literal353);

				DebugLocation(426, 38);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:426:38: ( WS )?
				int alt127=2;
				try { DebugEnterSubRule(127);
				try { DebugEnterDecision(127, decisionCanBacktrack[127]);
				int LA127_0 = input.LA(1);

				if ((LA127_0==WS))
				{
					alt127 = 1;
				}
				} finally { DebugExitDecision(127); }
				switch (alt127)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:426:38: WS
					{
					DebugLocation(426, 38);
					WS354=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2785);  
					stream_WS.Add(WS354);


					}
					break;

				}
				} finally { DebugExitSubRule(127); }

				DebugLocation(426, 42);
				PushFollow(Follow._expression_in_specialfunctioncall2788);
				expression355=expression();
				PopFollow();

				stream_expression.Add(expression355.Tree);
				DebugLocation(426, 53);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:426:53: ( WS )?
				int alt128=2;
				try { DebugEnterSubRule(128);
				try { DebugEnterDecision(128, decisionCanBacktrack[128]);
				int LA128_0 = input.LA(1);

				if ((LA128_0==WS))
				{
					alt128 = 1;
				}
				} finally { DebugExitDecision(128); }
				switch (alt128)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:426:53: WS
					{
					DebugLocation(426, 53);
					WS356=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2790);  
					stream_WS.Add(WS356);


					}
					break;

				}
				} finally { DebugExitSubRule(128); }

				DebugLocation(426, 57);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:426:57: ( ',' ( WS )? STRING ( WS )? )?
				int alt131=2;
				try { DebugEnterSubRule(131);
				try { DebugEnterDecision(131, decisionCanBacktrack[131]);
				int LA131_0 = input.LA(1);

				if ((LA131_0==168))
				{
					alt131 = 1;
				}
				} finally { DebugExitDecision(131); }
				switch (alt131)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:426:58: ',' ( WS )? STRING ( WS )?
					{
					DebugLocation(426, 58);
					char_literal357=(IToken)Match(input,168,Follow._168_in_specialfunctioncall2794);  
					stream_168.Add(char_literal357);

					DebugLocation(426, 62);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:426:62: ( WS )?
					int alt129=2;
					try { DebugEnterSubRule(129);
					try { DebugEnterDecision(129, decisionCanBacktrack[129]);
					int LA129_0 = input.LA(1);

					if ((LA129_0==WS))
					{
						alt129 = 1;
					}
					} finally { DebugExitDecision(129); }
					switch (alt129)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:426:62: WS
						{
						DebugLocation(426, 62);
						WS358=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2796);  
						stream_WS.Add(WS358);


						}
						break;

					}
					} finally { DebugExitSubRule(129); }

					DebugLocation(426, 66);
					STRING359=(IToken)Match(input,STRING,Follow._STRING_in_specialfunctioncall2799);  
					stream_STRING.Add(STRING359);

					DebugLocation(426, 73);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:426:73: ( WS )?
					int alt130=2;
					try { DebugEnterSubRule(130);
					try { DebugEnterDecision(130, decisionCanBacktrack[130]);
					int LA130_0 = input.LA(1);

					if ((LA130_0==WS))
					{
						alt130 = 1;
					}
					} finally { DebugExitDecision(130); }
					switch (alt130)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:426:73: WS
						{
						DebugLocation(426, 73);
						WS360=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2801);  
						stream_WS.Add(WS360);


						}
						break;

					}
					} finally { DebugExitSubRule(130); }


					}
					break;

				}
				} finally { DebugExitSubRule(131); }

				DebugLocation(426, 79);
				char_literal361=(IToken)Match(input,165,Follow._165_in_specialfunctioncall2806);  
				stream_165.Add(char_literal361);



				{
				// AST REWRITE
				// elements: expression, STRING, TOKEN
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 426:83: -> ^( T_CONVERT TOKEN expression ( STRING )? )
				{
					DebugLocation(426, 86);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:426:86: ^( T_CONVERT TOKEN expression ( STRING )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(426, 88);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CONVERT, "T_CONVERT"), root_1);

					DebugLocation(426, 98);
					adaptor.AddChild(root_1, stream_TOKEN.NextNode());
					DebugLocation(426, 104);
					adaptor.AddChild(root_1, stream_expression.NextTree());
					DebugLocation(426, 115);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:426:115: ( STRING )?
					if (stream_STRING.HasNext)
					{
						DebugLocation(426, 115);
						adaptor.AddChild(root_1, stream_STRING.NextNode());

					}
					stream_STRING.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:427:4: CAST ( WS )? '(' ( WS )? expression WS AS WS datatype ( WS )? ')'
				{
				DebugLocation(427, 4);
				CAST362=(IToken)Match(input,CAST,Follow._CAST_in_specialfunctioncall2824);  
				stream_CAST.Add(CAST362);

				DebugLocation(427, 9);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:427:9: ( WS )?
				int alt132=2;
				try { DebugEnterSubRule(132);
				try { DebugEnterDecision(132, decisionCanBacktrack[132]);
				int LA132_0 = input.LA(1);

				if ((LA132_0==WS))
				{
					alt132 = 1;
				}
				} finally { DebugExitDecision(132); }
				switch (alt132)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:427:9: WS
					{
					DebugLocation(427, 9);
					WS363=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2826);  
					stream_WS.Add(WS363);


					}
					break;

				}
				} finally { DebugExitSubRule(132); }

				DebugLocation(427, 13);
				char_literal364=(IToken)Match(input,164,Follow._164_in_specialfunctioncall2829);  
				stream_164.Add(char_literal364);

				DebugLocation(427, 17);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:427:17: ( WS )?
				int alt133=2;
				try { DebugEnterSubRule(133);
				try { DebugEnterDecision(133, decisionCanBacktrack[133]);
				int LA133_0 = input.LA(1);

				if ((LA133_0==WS))
				{
					alt133 = 1;
				}
				} finally { DebugExitDecision(133); }
				switch (alt133)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:427:17: WS
					{
					DebugLocation(427, 17);
					WS365=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2831);  
					stream_WS.Add(WS365);


					}
					break;

				}
				} finally { DebugExitSubRule(133); }

				DebugLocation(427, 21);
				PushFollow(Follow._expression_in_specialfunctioncall2834);
				expression366=expression();
				PopFollow();

				stream_expression.Add(expression366.Tree);
				DebugLocation(427, 32);
				WS367=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2836);  
				stream_WS.Add(WS367);

				DebugLocation(427, 35);
				AS368=(IToken)Match(input,AS,Follow._AS_in_specialfunctioncall2838);  
				stream_AS.Add(AS368);

				DebugLocation(427, 38);
				WS369=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2840);  
				stream_WS.Add(WS369);

				DebugLocation(427, 41);
				PushFollow(Follow._datatype_in_specialfunctioncall2842);
				datatype370=datatype();
				PopFollow();

				stream_datatype.Add(datatype370.Tree);
				DebugLocation(427, 50);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:427:50: ( WS )?
				int alt134=2;
				try { DebugEnterSubRule(134);
				try { DebugEnterDecision(134, decisionCanBacktrack[134]);
				int LA134_0 = input.LA(1);

				if ((LA134_0==WS))
				{
					alt134 = 1;
				}
				} finally { DebugExitDecision(134); }
				switch (alt134)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:427:50: WS
					{
					DebugLocation(427, 50);
					WS371=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2844);  
					stream_WS.Add(WS371);


					}
					break;

				}
				} finally { DebugExitSubRule(134); }

				DebugLocation(427, 54);
				char_literal372=(IToken)Match(input,165,Follow._165_in_specialfunctioncall2847);  
				stream_165.Add(char_literal372);



				{
				// AST REWRITE
				// elements: expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 427:58: -> ^( T_CONVERT TOKEN expression )
				{
					DebugLocation(427, 61);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:427:61: ^( T_CONVERT TOKEN expression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(427, 63);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CONVERT, "T_CONVERT"), root_1);

					DebugLocation(427, 73);
					adaptor.AddChild(root_1, (object)adaptor.Create(TOKEN, "TOKEN"));
					DebugLocation(427, 79);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:428:4: DATEADD ( WS )? '(' ( WS )? datepart ( WS )? ',' ( WS )? expression ( WS )? ',' ( WS )? expression ( WS )? ')'
				{
				DebugLocation(428, 4);
				DATEADD373=(IToken)Match(input,DATEADD,Follow._DATEADD_in_specialfunctioncall2862);  
				stream_DATEADD.Add(DATEADD373);

				DebugLocation(428, 12);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:428:12: ( WS )?
				int alt135=2;
				try { DebugEnterSubRule(135);
				try { DebugEnterDecision(135, decisionCanBacktrack[135]);
				int LA135_0 = input.LA(1);

				if ((LA135_0==WS))
				{
					alt135 = 1;
				}
				} finally { DebugExitDecision(135); }
				switch (alt135)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:428:12: WS
					{
					DebugLocation(428, 12);
					WS374=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2864);  
					stream_WS.Add(WS374);


					}
					break;

				}
				} finally { DebugExitSubRule(135); }

				DebugLocation(428, 16);
				char_literal375=(IToken)Match(input,164,Follow._164_in_specialfunctioncall2867);  
				stream_164.Add(char_literal375);

				DebugLocation(428, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:428:20: ( WS )?
				int alt136=2;
				try { DebugEnterSubRule(136);
				try { DebugEnterDecision(136, decisionCanBacktrack[136]);
				int LA136_0 = input.LA(1);

				if ((LA136_0==WS))
				{
					alt136 = 1;
				}
				} finally { DebugExitDecision(136); }
				switch (alt136)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:428:20: WS
					{
					DebugLocation(428, 20);
					WS376=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2869);  
					stream_WS.Add(WS376);


					}
					break;

				}
				} finally { DebugExitSubRule(136); }

				DebugLocation(428, 24);
				PushFollow(Follow._datepart_in_specialfunctioncall2872);
				datepart377=datepart();
				PopFollow();

				stream_datepart.Add(datepart377.Tree);
				DebugLocation(428, 33);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:428:33: ( WS )?
				int alt137=2;
				try { DebugEnterSubRule(137);
				try { DebugEnterDecision(137, decisionCanBacktrack[137]);
				int LA137_0 = input.LA(1);

				if ((LA137_0==WS))
				{
					alt137 = 1;
				}
				} finally { DebugExitDecision(137); }
				switch (alt137)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:428:33: WS
					{
					DebugLocation(428, 33);
					WS378=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2874);  
					stream_WS.Add(WS378);


					}
					break;

				}
				} finally { DebugExitSubRule(137); }

				DebugLocation(428, 37);
				char_literal379=(IToken)Match(input,168,Follow._168_in_specialfunctioncall2877);  
				stream_168.Add(char_literal379);

				DebugLocation(428, 41);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:428:41: ( WS )?
				int alt138=2;
				try { DebugEnterSubRule(138);
				try { DebugEnterDecision(138, decisionCanBacktrack[138]);
				int LA138_0 = input.LA(1);

				if ((LA138_0==WS))
				{
					alt138 = 1;
				}
				} finally { DebugExitDecision(138); }
				switch (alt138)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:428:41: WS
					{
					DebugLocation(428, 41);
					WS380=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2879);  
					stream_WS.Add(WS380);


					}
					break;

				}
				} finally { DebugExitSubRule(138); }

				DebugLocation(428, 45);
				PushFollow(Follow._expression_in_specialfunctioncall2882);
				expression381=expression();
				PopFollow();

				stream_expression.Add(expression381.Tree);
				DebugLocation(428, 56);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:428:56: ( WS )?
				int alt139=2;
				try { DebugEnterSubRule(139);
				try { DebugEnterDecision(139, decisionCanBacktrack[139]);
				int LA139_0 = input.LA(1);

				if ((LA139_0==WS))
				{
					alt139 = 1;
				}
				} finally { DebugExitDecision(139); }
				switch (alt139)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:428:56: WS
					{
					DebugLocation(428, 56);
					WS382=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2884);  
					stream_WS.Add(WS382);


					}
					break;

				}
				} finally { DebugExitSubRule(139); }

				DebugLocation(428, 60);
				char_literal383=(IToken)Match(input,168,Follow._168_in_specialfunctioncall2887);  
				stream_168.Add(char_literal383);

				DebugLocation(428, 64);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:428:64: ( WS )?
				int alt140=2;
				try { DebugEnterSubRule(140);
				try { DebugEnterDecision(140, decisionCanBacktrack[140]);
				int LA140_0 = input.LA(1);

				if ((LA140_0==WS))
				{
					alt140 = 1;
				}
				} finally { DebugExitDecision(140); }
				switch (alt140)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:428:64: WS
					{
					DebugLocation(428, 64);
					WS384=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2889);  
					stream_WS.Add(WS384);


					}
					break;

				}
				} finally { DebugExitSubRule(140); }

				DebugLocation(428, 68);
				PushFollow(Follow._expression_in_specialfunctioncall2892);
				expression385=expression();
				PopFollow();

				stream_expression.Add(expression385.Tree);
				DebugLocation(428, 79);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:428:79: ( WS )?
				int alt141=2;
				try { DebugEnterSubRule(141);
				try { DebugEnterDecision(141, decisionCanBacktrack[141]);
				int LA141_0 = input.LA(1);

				if ((LA141_0==WS))
				{
					alt141 = 1;
				}
				} finally { DebugExitDecision(141); }
				switch (alt141)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:428:79: WS
					{
					DebugLocation(428, 79);
					WS386=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2894);  
					stream_WS.Add(WS386);


					}
					break;

				}
				} finally { DebugExitSubRule(141); }

				DebugLocation(428, 83);
				char_literal387=(IToken)Match(input,165,Follow._165_in_specialfunctioncall2897);  
				stream_165.Add(char_literal387);



				{
				// AST REWRITE
				// elements: expression, DATEADD, datepart
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 428:87: -> ^( T_FUNCTIONCALL DATEADD datepart ( expression )+ )
				{
					DebugLocation(428, 90);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:428:90: ^( T_FUNCTIONCALL DATEADD datepart ( expression )+ )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(428, 92);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(428, 107);
					adaptor.AddChild(root_1, stream_DATEADD.NextNode());
					DebugLocation(428, 115);
					adaptor.AddChild(root_1, stream_datepart.NextTree());
					DebugLocation(428, 124);
					if (!(stream_expression.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expression.HasNext )
					{
						DebugLocation(428, 124);
						adaptor.AddChild(root_1, stream_expression.NextTree());

					}
					stream_expression.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:429:4: DATEDIFF ( WS )? '(' ( WS )? datepart ( WS )? ',' ( WS )? expression ( WS )? ',' ( WS )? expression ( WS )? ')'
				{
				DebugLocation(429, 4);
				DATEDIFF388=(IToken)Match(input,DATEDIFF,Follow._DATEDIFF_in_specialfunctioncall2915);  
				stream_DATEDIFF.Add(DATEDIFF388);

				DebugLocation(429, 13);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:429:13: ( WS )?
				int alt142=2;
				try { DebugEnterSubRule(142);
				try { DebugEnterDecision(142, decisionCanBacktrack[142]);
				int LA142_0 = input.LA(1);

				if ((LA142_0==WS))
				{
					alt142 = 1;
				}
				} finally { DebugExitDecision(142); }
				switch (alt142)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:429:13: WS
					{
					DebugLocation(429, 13);
					WS389=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2917);  
					stream_WS.Add(WS389);


					}
					break;

				}
				} finally { DebugExitSubRule(142); }

				DebugLocation(429, 17);
				char_literal390=(IToken)Match(input,164,Follow._164_in_specialfunctioncall2920);  
				stream_164.Add(char_literal390);

				DebugLocation(429, 21);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:429:21: ( WS )?
				int alt143=2;
				try { DebugEnterSubRule(143);
				try { DebugEnterDecision(143, decisionCanBacktrack[143]);
				int LA143_0 = input.LA(1);

				if ((LA143_0==WS))
				{
					alt143 = 1;
				}
				} finally { DebugExitDecision(143); }
				switch (alt143)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:429:21: WS
					{
					DebugLocation(429, 21);
					WS391=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2922);  
					stream_WS.Add(WS391);


					}
					break;

				}
				} finally { DebugExitSubRule(143); }

				DebugLocation(429, 25);
				PushFollow(Follow._datepart_in_specialfunctioncall2925);
				datepart392=datepart();
				PopFollow();

				stream_datepart.Add(datepart392.Tree);
				DebugLocation(429, 34);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:429:34: ( WS )?
				int alt144=2;
				try { DebugEnterSubRule(144);
				try { DebugEnterDecision(144, decisionCanBacktrack[144]);
				int LA144_0 = input.LA(1);

				if ((LA144_0==WS))
				{
					alt144 = 1;
				}
				} finally { DebugExitDecision(144); }
				switch (alt144)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:429:34: WS
					{
					DebugLocation(429, 34);
					WS393=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2927);  
					stream_WS.Add(WS393);


					}
					break;

				}
				} finally { DebugExitSubRule(144); }

				DebugLocation(429, 38);
				char_literal394=(IToken)Match(input,168,Follow._168_in_specialfunctioncall2930);  
				stream_168.Add(char_literal394);

				DebugLocation(429, 42);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:429:42: ( WS )?
				int alt145=2;
				try { DebugEnterSubRule(145);
				try { DebugEnterDecision(145, decisionCanBacktrack[145]);
				int LA145_0 = input.LA(1);

				if ((LA145_0==WS))
				{
					alt145 = 1;
				}
				} finally { DebugExitDecision(145); }
				switch (alt145)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:429:42: WS
					{
					DebugLocation(429, 42);
					WS395=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2932);  
					stream_WS.Add(WS395);


					}
					break;

				}
				} finally { DebugExitSubRule(145); }

				DebugLocation(429, 46);
				PushFollow(Follow._expression_in_specialfunctioncall2935);
				expression396=expression();
				PopFollow();

				stream_expression.Add(expression396.Tree);
				DebugLocation(429, 57);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:429:57: ( WS )?
				int alt146=2;
				try { DebugEnterSubRule(146);
				try { DebugEnterDecision(146, decisionCanBacktrack[146]);
				int LA146_0 = input.LA(1);

				if ((LA146_0==WS))
				{
					alt146 = 1;
				}
				} finally { DebugExitDecision(146); }
				switch (alt146)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:429:57: WS
					{
					DebugLocation(429, 57);
					WS397=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2937);  
					stream_WS.Add(WS397);


					}
					break;

				}
				} finally { DebugExitSubRule(146); }

				DebugLocation(429, 61);
				char_literal398=(IToken)Match(input,168,Follow._168_in_specialfunctioncall2940);  
				stream_168.Add(char_literal398);

				DebugLocation(429, 65);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:429:65: ( WS )?
				int alt147=2;
				try { DebugEnterSubRule(147);
				try { DebugEnterDecision(147, decisionCanBacktrack[147]);
				int LA147_0 = input.LA(1);

				if ((LA147_0==WS))
				{
					alt147 = 1;
				}
				} finally { DebugExitDecision(147); }
				switch (alt147)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:429:65: WS
					{
					DebugLocation(429, 65);
					WS399=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2942);  
					stream_WS.Add(WS399);


					}
					break;

				}
				} finally { DebugExitSubRule(147); }

				DebugLocation(429, 69);
				PushFollow(Follow._expression_in_specialfunctioncall2945);
				expression400=expression();
				PopFollow();

				stream_expression.Add(expression400.Tree);
				DebugLocation(429, 80);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:429:80: ( WS )?
				int alt148=2;
				try { DebugEnterSubRule(148);
				try { DebugEnterDecision(148, decisionCanBacktrack[148]);
				int LA148_0 = input.LA(1);

				if ((LA148_0==WS))
				{
					alt148 = 1;
				}
				} finally { DebugExitDecision(148); }
				switch (alt148)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:429:80: WS
					{
					DebugLocation(429, 80);
					WS401=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2947);  
					stream_WS.Add(WS401);


					}
					break;

				}
				} finally { DebugExitSubRule(148); }

				DebugLocation(429, 84);
				char_literal402=(IToken)Match(input,165,Follow._165_in_specialfunctioncall2950);  
				stream_165.Add(char_literal402);



				{
				// AST REWRITE
				// elements: datepart, DATEDIFF, expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 429:88: -> ^( T_FUNCTIONCALL DATEDIFF datepart ( expression )+ )
				{
					DebugLocation(429, 91);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:429:91: ^( T_FUNCTIONCALL DATEDIFF datepart ( expression )+ )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(429, 93);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(429, 108);
					adaptor.AddChild(root_1, stream_DATEDIFF.NextNode());
					DebugLocation(429, 117);
					adaptor.AddChild(root_1, stream_datepart.NextTree());
					DebugLocation(429, 126);
					if (!(stream_expression.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expression.HasNext )
					{
						DebugLocation(429, 126);
						adaptor.AddChild(root_1, stream_expression.NextTree());

					}
					stream_expression.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:430:4: DATEPART ( WS )? '(' ( WS )? datepart ( WS )? ',' ( WS )? expression ( WS )? ')'
				{
				DebugLocation(430, 4);
				DATEPART403=(IToken)Match(input,DATEPART,Follow._DATEPART_in_specialfunctioncall2968);  
				stream_DATEPART.Add(DATEPART403);

				DebugLocation(430, 13);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:430:13: ( WS )?
				int alt149=2;
				try { DebugEnterSubRule(149);
				try { DebugEnterDecision(149, decisionCanBacktrack[149]);
				int LA149_0 = input.LA(1);

				if ((LA149_0==WS))
				{
					alt149 = 1;
				}
				} finally { DebugExitDecision(149); }
				switch (alt149)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:430:13: WS
					{
					DebugLocation(430, 13);
					WS404=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2970);  
					stream_WS.Add(WS404);


					}
					break;

				}
				} finally { DebugExitSubRule(149); }

				DebugLocation(430, 17);
				char_literal405=(IToken)Match(input,164,Follow._164_in_specialfunctioncall2973);  
				stream_164.Add(char_literal405);

				DebugLocation(430, 21);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:430:21: ( WS )?
				int alt150=2;
				try { DebugEnterSubRule(150);
				try { DebugEnterDecision(150, decisionCanBacktrack[150]);
				int LA150_0 = input.LA(1);

				if ((LA150_0==WS))
				{
					alt150 = 1;
				}
				} finally { DebugExitDecision(150); }
				switch (alt150)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:430:21: WS
					{
					DebugLocation(430, 21);
					WS406=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2975);  
					stream_WS.Add(WS406);


					}
					break;

				}
				} finally { DebugExitSubRule(150); }

				DebugLocation(430, 25);
				PushFollow(Follow._datepart_in_specialfunctioncall2978);
				datepart407=datepart();
				PopFollow();

				stream_datepart.Add(datepart407.Tree);
				DebugLocation(430, 34);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:430:34: ( WS )?
				int alt151=2;
				try { DebugEnterSubRule(151);
				try { DebugEnterDecision(151, decisionCanBacktrack[151]);
				int LA151_0 = input.LA(1);

				if ((LA151_0==WS))
				{
					alt151 = 1;
				}
				} finally { DebugExitDecision(151); }
				switch (alt151)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:430:34: WS
					{
					DebugLocation(430, 34);
					WS408=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2980);  
					stream_WS.Add(WS408);


					}
					break;

				}
				} finally { DebugExitSubRule(151); }

				DebugLocation(430, 38);
				char_literal409=(IToken)Match(input,168,Follow._168_in_specialfunctioncall2983);  
				stream_168.Add(char_literal409);

				DebugLocation(430, 42);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:430:42: ( WS )?
				int alt152=2;
				try { DebugEnterSubRule(152);
				try { DebugEnterDecision(152, decisionCanBacktrack[152]);
				int LA152_0 = input.LA(1);

				if ((LA152_0==WS))
				{
					alt152 = 1;
				}
				} finally { DebugExitDecision(152); }
				switch (alt152)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:430:42: WS
					{
					DebugLocation(430, 42);
					WS410=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2985);  
					stream_WS.Add(WS410);


					}
					break;

				}
				} finally { DebugExitSubRule(152); }

				DebugLocation(430, 46);
				PushFollow(Follow._expression_in_specialfunctioncall2988);
				expression411=expression();
				PopFollow();

				stream_expression.Add(expression411.Tree);
				DebugLocation(430, 57);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:430:57: ( WS )?
				int alt153=2;
				try { DebugEnterSubRule(153);
				try { DebugEnterDecision(153, decisionCanBacktrack[153]);
				int LA153_0 = input.LA(1);

				if ((LA153_0==WS))
				{
					alt153 = 1;
				}
				} finally { DebugExitDecision(153); }
				switch (alt153)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:430:57: WS
					{
					DebugLocation(430, 57);
					WS412=(IToken)Match(input,WS,Follow._WS_in_specialfunctioncall2990);  
					stream_WS.Add(WS412);


					}
					break;

				}
				} finally { DebugExitSubRule(153); }

				DebugLocation(430, 61);
				char_literal413=(IToken)Match(input,165,Follow._165_in_specialfunctioncall2993);  
				stream_165.Add(char_literal413);



				{
				// AST REWRITE
				// elements: DATEPART, datepart, expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 430:65: -> ^( T_FUNCTIONCALL DATEPART datepart expression )
				{
					DebugLocation(430, 68);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:430:68: ^( T_FUNCTIONCALL DATEPART datepart expression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(430, 70);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(430, 85);
					adaptor.AddChild(root_1, stream_DATEPART.NextNode());
					DebugLocation(430, 94);
					adaptor.AddChild(root_1, stream_datepart.NextTree());
					DebugLocation(430, 103);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("specialfunctioncall", 56);
			LeaveRule("specialfunctioncall", 56);
			LeaveRule_specialfunctioncall();
	    }
	 	DebugLocation(431, 1);
		} finally { DebugExitRule(GrammarFileName, "specialfunctioncall"); }
		return retval;

	}
	// $ANTLR end "specialfunctioncall"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_datepart() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_datepart() {}

	// $ANTLR start "datepart"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:433:1: datepart : TOKEN -> ^( T_DATEPART TOKEN ) ;
	[GrammarRule("datepart")]
	private AstParserRuleReturnScope<object, IToken> datepart()
	{
		EnterRule_datepart();
		EnterRule("datepart", 57);
		TraceIn("datepart", 57);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN414 = default(IToken);

	    object TOKEN414_tree = default(object);
	    RewriteRuleITokenStream stream_TOKEN=new RewriteRuleITokenStream(adaptor,"token TOKEN");

		try { DebugEnterRule(GrammarFileName, "datepart");
		DebugLocation(433, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:434:2: ( TOKEN -> ^( T_DATEPART TOKEN ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:434:4: TOKEN
			{
			DebugLocation(434, 4);
			TOKEN414=(IToken)Match(input,TOKEN,Follow._TOKEN_in_datepart3017);  
			stream_TOKEN.Add(TOKEN414);



			{
			// AST REWRITE
			// elements: TOKEN
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 434:10: -> ^( T_DATEPART TOKEN )
			{
				DebugLocation(434, 13);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:434:13: ^( T_DATEPART TOKEN )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(434, 15);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_DATEPART, "T_DATEPART"), root_1);

				DebugLocation(434, 26);
				adaptor.AddChild(root_1, stream_TOKEN.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("datepart", 57);
			LeaveRule("datepart", 57);
			LeaveRule_datepart();
	    }
	 	DebugLocation(435, 1);
		} finally { DebugExitRule(GrammarFileName, "datepart"); }
		return retval;

	}
	// $ANTLR end "datepart"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_number() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_number() {}

	// $ANTLR start "number"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:437:1: number : NUMBER ;
	[GrammarRule("number")]
	private AstParserRuleReturnScope<object, IToken> number()
	{
		EnterRule_number();
		EnterRule("number", 58);
		TraceIn("number", 58);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken NUMBER415 = default(IToken);

	    object NUMBER415_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "number");
		DebugLocation(437, 16);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:437:9: ( NUMBER )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:437:11: NUMBER
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(437, 11);
			NUMBER415=(IToken)Match(input,NUMBER,Follow._NUMBER_in_number3037); 
			NUMBER415_tree = (object)adaptor.Create(NUMBER415);
			adaptor.AddChild(root_0, NUMBER415_tree);


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("number", 58);
			LeaveRule("number", 58);
			LeaveRule_number();
	    }
	 	DebugLocation(437, 16);
		} finally { DebugExitRule(GrammarFileName, "number"); }
		return retval;

	}
	// $ANTLR end "number"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_string() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_string() {}

	// $ANTLR start "string"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:439:1: string : STRING -> ^( T_STRING STRING ) ;
	[GrammarRule("string")]
	private AstParserRuleReturnScope<object, IToken> @string()
	{
		EnterRule_string();
		EnterRule("string", 59);
		TraceIn("string", 59);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken STRING416 = default(IToken);

	    object STRING416_tree = default(object);
	    RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");

		try { DebugEnterRule(GrammarFileName, "string");
		DebugLocation(439, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:439:8: ( STRING -> ^( T_STRING STRING ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:439:10: STRING
			{
			DebugLocation(439, 10);
			STRING416=(IToken)Match(input,STRING,Follow._STRING_in_string3045);  
			stream_STRING.Add(STRING416);



			{
			// AST REWRITE
			// elements: STRING
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 439:17: -> ^( T_STRING STRING )
			{
				DebugLocation(439, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:439:20: ^( T_STRING STRING )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(439, 22);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_STRING, "T_STRING"), root_1);

				DebugLocation(439, 31);
				adaptor.AddChild(root_1, stream_STRING.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("string", 59);
			LeaveRule("string", 59);
			LeaveRule_string();
	    }
	 	DebugLocation(440, 1);
		} finally { DebugExitRule(GrammarFileName, "string"); }
		return retval;

	}
	// $ANTLR end "string"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_datatype() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_datatype() {}

	// $ANTLR start "datatype"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:442:1: datatype : TOKEN ;
	[GrammarRule("datatype")]
	private AstParserRuleReturnScope<object, IToken> datatype()
	{
		EnterRule_datatype();
		EnterRule("datatype", 60);
		TraceIn("datatype", 60);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN417 = default(IToken);

	    object TOKEN417_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "datatype");
		DebugLocation(442, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:443:2: ( TOKEN )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:443:4: TOKEN
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(443, 4);
			TOKEN417=(IToken)Match(input,TOKEN,Follow._TOKEN_in_datatype3065); 
			TOKEN417_tree = (object)adaptor.Create(TOKEN417);
			adaptor.AddChild(root_0, TOKEN417_tree);


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("datatype", 60);
			LeaveRule("datatype", 60);
			LeaveRule_datatype();
	    }
	 	DebugLocation(444, 1);
		} finally { DebugExitRule(GrammarFileName, "datatype"); }
		return retval;

	}
	// $ANTLR end "datatype"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_variable() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_variable() {}

	// $ANTLR start "variable"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:446:1: variable : VARIABLE -> ^( T_VARIABLE VARIABLE ) ;
	[GrammarRule("variable")]
	private AstParserRuleReturnScope<object, IToken> variable()
	{
		EnterRule_variable();
		EnterRule("variable", 61);
		TraceIn("variable", 61);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken VARIABLE418 = default(IToken);

	    object VARIABLE418_tree = default(object);
	    RewriteRuleITokenStream stream_VARIABLE=new RewriteRuleITokenStream(adaptor,"token VARIABLE");

		try { DebugEnterRule(GrammarFileName, "variable");
		DebugLocation(446, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:447:2: ( VARIABLE -> ^( T_VARIABLE VARIABLE ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:447:4: VARIABLE
			{
			DebugLocation(447, 4);
			VARIABLE418=(IToken)Match(input,VARIABLE,Follow._VARIABLE_in_variable3077);  
			stream_VARIABLE.Add(VARIABLE418);



			{
			// AST REWRITE
			// elements: VARIABLE
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 447:13: -> ^( T_VARIABLE VARIABLE )
			{
				DebugLocation(447, 16);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:447:16: ^( T_VARIABLE VARIABLE )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(447, 18);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_VARIABLE, "T_VARIABLE"), root_1);

				DebugLocation(447, 29);
				adaptor.AddChild(root_1, stream_VARIABLE.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variable", 61);
			LeaveRule("variable", 61);
			LeaveRule_variable();
	    }
	 	DebugLocation(448, 1);
		} finally { DebugExitRule(GrammarFileName, "variable"); }
		return retval;

	}
	// $ANTLR end "variable"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_case() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_case() {}

	// $ANTLR start "case"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:450:1: case : CASE WS ( expression WS )? ( case_when WS )* ( case_else WS )? END -> ^( T_CASE ( expression )? ( case_when )* ( case_else )? ) ;
	[GrammarRule("case")]
	private AstParserRuleReturnScope<object, IToken> @case()
	{
		EnterRule_case();
		EnterRule("case", 62);
		TraceIn("case", 62);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken CASE419 = default(IToken);
	    IToken WS420 = default(IToken);
	    IToken WS422 = default(IToken);
	    IToken WS424 = default(IToken);
	    IToken WS426 = default(IToken);
	    IToken END427 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression421 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> case_when423 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> case_else425 = default(AstParserRuleReturnScope<object, IToken>);

	    object CASE419_tree = default(object);
	    object WS420_tree = default(object);
	    object WS422_tree = default(object);
	    object WS424_tree = default(object);
	    object WS426_tree = default(object);
	    object END427_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_END=new RewriteRuleITokenStream(adaptor,"token END");
	    RewriteRuleITokenStream stream_CASE=new RewriteRuleITokenStream(adaptor,"token CASE");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_case_when=new RewriteRuleSubtreeStream(adaptor,"rule case_when");
	    RewriteRuleSubtreeStream stream_case_else=new RewriteRuleSubtreeStream(adaptor,"rule case_else");
		try { DebugEnterRule(GrammarFileName, "case");
		DebugLocation(450, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:451:2: ( CASE WS ( expression WS )? ( case_when WS )* ( case_else WS )? END -> ^( T_CASE ( expression )? ( case_when )* ( case_else )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:451:4: CASE WS ( expression WS )? ( case_when WS )* ( case_else WS )? END
			{
			DebugLocation(451, 4);
			CASE419=(IToken)Match(input,CASE,Follow._CASE_in_case3097);  
			stream_CASE.Add(CASE419);

			DebugLocation(451, 9);
			WS420=(IToken)Match(input,WS,Follow._WS_in_case3099);  
			stream_WS.Add(WS420);

			DebugLocation(451, 12);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:451:12: ( expression WS )?
			int alt155=2;
			try { DebugEnterSubRule(155);
			try { DebugEnterDecision(155, decisionCanBacktrack[155]);
			int LA155_0 = input.LA(1);

			if (((LA155_0>=CASE && LA155_0<=CAST)||(LA155_0>=CONVERT && LA155_0<=COUNT)||(LA155_0>=DATEADD && LA155_0<=DATEPART)||LA155_0==EXISTS||(LA155_0>=NOT && LA155_0<=NUMBER)||LA155_0==SIMPLE_FILE||(LA155_0>=STRING && LA155_0<=SYSTEMVAR)||LA155_0==TOKEN||LA155_0==VARIABLE||LA155_0==164||LA155_0==167||LA155_0==169||LA155_0==183))
			{
				alt155 = 1;
			}
			} finally { DebugExitDecision(155); }
			switch (alt155)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:451:13: expression WS
				{
				DebugLocation(451, 13);
				PushFollow(Follow._expression_in_case3102);
				expression421=expression();
				PopFollow();

				stream_expression.Add(expression421.Tree);
				DebugLocation(451, 24);
				WS422=(IToken)Match(input,WS,Follow._WS_in_case3104);  
				stream_WS.Add(WS422);


				}
				break;

			}
			} finally { DebugExitSubRule(155); }

			DebugLocation(451, 29);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:451:29: ( case_when WS )*
			try { DebugEnterSubRule(156);
			while (true)
			{
				int alt156=2;
				try { DebugEnterDecision(156, decisionCanBacktrack[156]);
				int LA156_0 = input.LA(1);

				if ((LA156_0==WHEN))
				{
					alt156 = 1;
				}


				} finally { DebugExitDecision(156); }
				switch ( alt156 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:451:30: case_when WS
					{
					DebugLocation(451, 30);
					PushFollow(Follow._case_when_in_case3109);
					case_when423=case_when();
					PopFollow();

					stream_case_when.Add(case_when423.Tree);
					DebugLocation(451, 40);
					WS424=(IToken)Match(input,WS,Follow._WS_in_case3111);  
					stream_WS.Add(WS424);


					}
					break;

				default:
					goto loop156;
				}
			}

			loop156:
				;

			} finally { DebugExitSubRule(156); }

			DebugLocation(451, 45);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:451:45: ( case_else WS )?
			int alt157=2;
			try { DebugEnterSubRule(157);
			try { DebugEnterDecision(157, decisionCanBacktrack[157]);
			int LA157_0 = input.LA(1);

			if ((LA157_0==ELSE))
			{
				alt157 = 1;
			}
			} finally { DebugExitDecision(157); }
			switch (alt157)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:451:46: case_else WS
				{
				DebugLocation(451, 46);
				PushFollow(Follow._case_else_in_case3116);
				case_else425=case_else();
				PopFollow();

				stream_case_else.Add(case_else425.Tree);
				DebugLocation(451, 56);
				WS426=(IToken)Match(input,WS,Follow._WS_in_case3118);  
				stream_WS.Add(WS426);


				}
				break;

			}
			} finally { DebugExitSubRule(157); }

			DebugLocation(451, 61);
			END427=(IToken)Match(input,END,Follow._END_in_case3122);  
			stream_END.Add(END427);



			{
			// AST REWRITE
			// elements: case_else, case_when, expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 452:2: -> ^( T_CASE ( expression )? ( case_when )* ( case_else )? )
			{
				DebugLocation(452, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:452:5: ^( T_CASE ( expression )? ( case_when )* ( case_else )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(452, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CASE, "T_CASE"), root_1);

				DebugLocation(452, 14);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:452:14: ( expression )?
				if (stream_expression.HasNext)
				{
					DebugLocation(452, 14);
					adaptor.AddChild(root_1, stream_expression.NextTree());

				}
				stream_expression.Reset();
				DebugLocation(452, 26);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:452:26: ( case_when )*
				while ( stream_case_when.HasNext )
				{
					DebugLocation(452, 26);
					adaptor.AddChild(root_1, stream_case_when.NextTree());

				}
				stream_case_when.Reset();
				DebugLocation(452, 37);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:452:37: ( case_else )?
				if (stream_case_else.HasNext)
				{
					DebugLocation(452, 37);
					adaptor.AddChild(root_1, stream_case_else.NextTree());

				}
				stream_case_else.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("case", 62);
			LeaveRule("case", 62);
			LeaveRule_case();
	    }
	 	DebugLocation(453, 1);
		} finally { DebugExitRule(GrammarFileName, "case"); }
		return retval;

	}
	// $ANTLR end "case"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_case_when() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_case_when() {}

	// $ANTLR start "case_when"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:455:1: case_when : WHEN WS a= expression WS THEN WS b= expression -> ^( T_CASE_WHEN $a $b) ;
	[GrammarRule("case_when")]
	private AstParserRuleReturnScope<object, IToken> case_when()
	{
		EnterRule_case_when();
		EnterRule("case_when", 63);
		TraceIn("case_when", 63);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WHEN428 = default(IToken);
	    IToken WS429 = default(IToken);
	    IToken WS430 = default(IToken);
	    IToken THEN431 = default(IToken);
	    IToken WS432 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);

	    object WHEN428_tree = default(object);
	    object WS429_tree = default(object);
	    object WS430_tree = default(object);
	    object THEN431_tree = default(object);
	    object WS432_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_THEN=new RewriteRuleITokenStream(adaptor,"token THEN");
	    RewriteRuleITokenStream stream_WHEN=new RewriteRuleITokenStream(adaptor,"token WHEN");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "case_when");
		DebugLocation(455, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:456:2: ( WHEN WS a= expression WS THEN WS b= expression -> ^( T_CASE_WHEN $a $b) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:456:4: WHEN WS a= expression WS THEN WS b= expression
			{
			DebugLocation(456, 4);
			WHEN428=(IToken)Match(input,WHEN,Follow._WHEN_in_case_when3150);  
			stream_WHEN.Add(WHEN428);

			DebugLocation(456, 9);
			WS429=(IToken)Match(input,WS,Follow._WS_in_case_when3152);  
			stream_WS.Add(WS429);

			DebugLocation(456, 13);
			PushFollow(Follow._expression_in_case_when3156);
			a=expression();
			PopFollow();

			stream_expression.Add(a.Tree);
			DebugLocation(456, 25);
			WS430=(IToken)Match(input,WS,Follow._WS_in_case_when3158);  
			stream_WS.Add(WS430);

			DebugLocation(456, 28);
			THEN431=(IToken)Match(input,THEN,Follow._THEN_in_case_when3160);  
			stream_THEN.Add(THEN431);

			DebugLocation(456, 33);
			WS432=(IToken)Match(input,WS,Follow._WS_in_case_when3162);  
			stream_WS.Add(WS432);

			DebugLocation(456, 37);
			PushFollow(Follow._expression_in_case_when3166);
			b=expression();
			PopFollow();

			stream_expression.Add(b.Tree);


			{
			// AST REWRITE
			// elements: b, a
			// token labels: 
			// rule labels: retval, b, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 457:2: -> ^( T_CASE_WHEN $a $b)
			{
				DebugLocation(457, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:457:5: ^( T_CASE_WHEN $a $b)
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(457, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CASE_WHEN, "T_CASE_WHEN"), root_1);

				DebugLocation(457, 20);
				adaptor.AddChild(root_1, stream_a.NextTree());
				DebugLocation(457, 23);
				adaptor.AddChild(root_1, stream_b.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("case_when", 63);
			LeaveRule("case_when", 63);
			LeaveRule_case_when();
	    }
	 	DebugLocation(458, 1);
		} finally { DebugExitRule(GrammarFileName, "case_when"); }
		return retval;

	}
	// $ANTLR end "case_when"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_case_else() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_case_else() {}

	// $ANTLR start "case_else"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:460:1: case_else : ELSE WS expression -> ^( T_CASE_ELSE expression ) ;
	[GrammarRule("case_else")]
	private AstParserRuleReturnScope<object, IToken> case_else()
	{
		EnterRule_case_else();
		EnterRule("case_else", 64);
		TraceIn("case_else", 64);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken ELSE433 = default(IToken);
	    IToken WS434 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression435 = default(AstParserRuleReturnScope<object, IToken>);

	    object ELSE433_tree = default(object);
	    object WS434_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_ELSE=new RewriteRuleITokenStream(adaptor,"token ELSE");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "case_else");
		DebugLocation(460, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:461:2: ( ELSE WS expression -> ^( T_CASE_ELSE expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:461:4: ELSE WS expression
			{
			DebugLocation(461, 4);
			ELSE433=(IToken)Match(input,ELSE,Follow._ELSE_in_case_else3191);  
			stream_ELSE.Add(ELSE433);

			DebugLocation(461, 9);
			WS434=(IToken)Match(input,WS,Follow._WS_in_case_else3193);  
			stream_WS.Add(WS434);

			DebugLocation(461, 12);
			PushFollow(Follow._expression_in_case_else3195);
			expression435=expression();
			PopFollow();

			stream_expression.Add(expression435.Tree);


			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 462:2: -> ^( T_CASE_ELSE expression )
			{
				DebugLocation(462, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:462:5: ^( T_CASE_ELSE expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(462, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CASE_ELSE, "T_CASE_ELSE"), root_1);

				DebugLocation(462, 19);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("case_else", 64);
			LeaveRule("case_else", 64);
			LeaveRule_case_else();
	    }
	 	DebugLocation(463, 1);
		} finally { DebugExitRule(GrammarFileName, "case_else"); }
		return retval;

	}
	// $ANTLR end "case_else"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _WS_in_parse384 = new BitSet(new ulong[]{0x3000000022100000UL,0x0UL,0x100000UL});
		public static readonly BitSet _commands_in_parse388 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _WS_in_parse390 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_parse395 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _command_in_commands418 = new BitSet(new ulong[]{0x3000000022100002UL,0x0UL,0x100008100000UL});
		public static readonly BitSet _WS_in_commands421 = new BitSet(new ulong[]{0x3000000022100000UL,0x0UL,0x100000100000UL});
		public static readonly BitSet _172_in_commands425 = new BitSet(new ulong[]{0x3000000022100000UL,0x0UL,0x8100000UL});
		public static readonly BitSet _WS_in_commands427 = new BitSet(new ulong[]{0x3000000022100000UL,0x0UL,0x100000UL});
		public static readonly BitSet _command_in_commands432 = new BitSet(new ulong[]{0x3000000022100002UL,0x0UL,0x100008100000UL});
		public static readonly BitSet _WS_in_commands437 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000UL});
		public static readonly BitSet _172_in_commands440 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _select_command_in_command460 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _use_command_in_command465 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declare_command_in_command470 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_command_in_command475 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _create_view_command_in_command480 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _drop_view_command_in_command485 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _drop_table_command_in_command490 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SELECT_in_select_command504 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _WS_in_select_command507 = new BitSet(new ulong[]{0x10000020UL});
		public static readonly BitSet _distinct_clause_in_select_command509 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _WS_in_select_command514 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _top_clause_in_select_command516 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _WS_in_select_command520 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x8002D000400000UL});
		public static readonly BitSet _column_list_in_select_command522 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8000000UL});
		public static readonly BitSet _WS_in_select_command525 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _into_clause_in_select_command527 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8000000UL});
		public static readonly BitSet _WS_in_select_command532 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _from_clause_in_select_command534 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8000000UL});
		public static readonly BitSet _WS_in_select_command539 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000UL});
		public static readonly BitSet _where_clause_in_select_command541 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8000000UL});
		public static readonly BitSet _WS_in_select_command546 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _groupby_clause_in_select_command548 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8000000UL});
		public static readonly BitSet _WS_in_select_command553 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _having_clause_in_select_command555 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8000000UL});
		public static readonly BitSet _WS_in_select_command560 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _orderby_clause_in_select_command562 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DISTINCT_in_distinct_clause610 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ALL_in_distinct_clause619 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOP_in_top_clause635 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _WS_in_top_clause637 = new BitSet(new ulong[]{0x4008000201CCC000UL,0x23UL,0x1000400000UL});
		public static readonly BitSet _expression_atom_in_top_clause639 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _column_in_column_list661 = new BitSet(new ulong[]{0x2UL,0x0UL,0x10008000000UL});
		public static readonly BitSet _WS_in_column_list664 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000000UL});
		public static readonly BitSet _168_in_column_list667 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x8002D008400000UL});
		public static readonly BitSet _WS_in_column_list669 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x8002D000400000UL});
		public static readonly BitSet _column_in_column_list672 = new BitSet(new ulong[]{0x2UL,0x0UL,0x10008000000UL});
		public static readonly BitSet _all_columns_in_column696 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_column701 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8000000UL});
		public static readonly BitSet _WS_in_column704 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _SIMPLE_FILE_in_column706 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _table_alias_in_all_columns731 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40008000000UL});
		public static readonly BitSet _WS_in_all_columns733 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _170_in_all_columns736 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4008000000UL});
		public static readonly BitSet _WS_in_all_columns738 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000000UL});
		public static readonly BitSet _166_in_all_columns743 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INTO_in_into_clause763 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _WS_in_into_clause765 = new BitSet(new ulong[]{0x4000000000000000UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _file_in_into_clause767 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FROM_in_from_clause787 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _WS_in_from_clause789 = new BitSet(new ulong[]{0x4000000000000000UL,0x21UL,0x8001000000000UL});
		public static readonly BitSet _from_clause_item_in_from_clause791 = new BitSet(new ulong[]{0x2UL,0x0UL,0x10008000000UL});
		public static readonly BitSet _WS_in_from_clause794 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000000UL});
		public static readonly BitSet _168_in_from_clause797 = new BitSet(new ulong[]{0x4000000000000000UL,0x21UL,0x8001008000000UL});
		public static readonly BitSet _WS_in_from_clause799 = new BitSet(new ulong[]{0x4000000000000000UL,0x21UL,0x8001000000000UL});
		public static readonly BitSet _from_clause_item_in_from_clause802 = new BitSet(new ulong[]{0x2UL,0x0UL,0x10008000000UL});
		public static readonly BitSet _WS_in_from_clause807 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _table_alias_in_from_clause809 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_from_clause_item836 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _file_in_from_clause_item849 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _subquery_in_from_clause_item854 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _view_name_in_from_clause_item859 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1008000000UL});
		public static readonly BitSet _WS_in_from_clause_item862 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000UL});
		public static readonly BitSet _164_in_from_clause_item865 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x8002B000400000UL});
		public static readonly BitSet _expression_list_in_from_clause_item867 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000UL});
		public static readonly BitSet _165_in_from_clause_item870 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _164_in_subquery895 = new BitSet(new ulong[]{0x1000000000000000UL,0x0UL,0x8000000UL});
		public static readonly BitSet _WS_in_subquery897 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _select_command_in_subquery900 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2008000000UL});
		public static readonly BitSet _WS_in_subquery902 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000UL});
		public static readonly BitSet _165_in_subquery905 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _179_in_file924 = new BitSet(new ulong[]{0x0UL,0x1UL,0x8400000UL});
		public static readonly BitSet _WS_in_file926 = new BitSet(new ulong[]{0x0UL,0x1UL,0x400000UL});
		public static readonly BitSet _file_spec_in_file929 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000008000000UL});
		public static readonly BitSet _WS_in_file932 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20000000000UL});
		public static readonly BitSet _file_option_in_file934 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000008000000UL});
		public static readonly BitSet _WS_in_file938 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000000000UL});
		public static readonly BitSet _180_in_file941 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _179_in_file958 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1008000000UL});
		public static readonly BitSet _WS_in_file960 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000UL});
		public static readonly BitSet _subquery_in_file963 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000008000000UL});
		public static readonly BitSet _WS_in_file965 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000000000UL});
		public static readonly BitSet _180_in_file968 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SIMPLE_FILE_in_file981 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _string_in_file_spec1000 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_in_file_spec1005 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _169_in_file_option1017 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _file_option_name_in_file_option1019 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1000008000000UL});
		public static readonly BitSet _WS_in_file_option1023 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000000UL});
		public static readonly BitSet _176_in_file_option1026 = new BitSet(new ulong[]{0x8000000000000UL,0x21UL,0x8400000UL});
		public static readonly BitSet _WS_in_file_option1028 = new BitSet(new ulong[]{0x8000000000000UL,0x21UL,0x400000UL});
		public static readonly BitSet _file_option_value_in_file_option1031 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_file_option_name1055 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_file_option_value1067 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_file_option_value1071 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_file_option_value1075 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_in_file_option_value1079 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHERE_in_where_clause1091 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _WS_in_where_clause1093 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x80029000400000UL});
		public static readonly BitSet _expression_in_where_clause1095 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GROUP_in_groupby_clause1114 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _WS_in_groupby_clause1116 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _BY_in_groupby_clause1118 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _WS_in_groupby_clause1120 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x80029000400000UL});
		public static readonly BitSet _orderby_column_list_in_groupby_clause1122 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _HAVING_in_having_clause1143 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _WS_in_having_clause1145 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x80029000400000UL});
		public static readonly BitSet _expression_in_having_clause1147 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ORDER_in_orderby_clause1168 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _WS_in_orderby_clause1170 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _BY_in_orderby_clause1172 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _WS_in_orderby_clause1174 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x80029000400000UL});
		public static readonly BitSet _orderby_column_list_in_orderby_clause1176 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _orderby_column_in_orderby_column_list1197 = new BitSet(new ulong[]{0x2UL,0x0UL,0x10008000000UL});
		public static readonly BitSet _WS_in_orderby_column_list1200 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000000UL});
		public static readonly BitSet _168_in_orderby_column_list1203 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x80029008400000UL});
		public static readonly BitSet _WS_in_orderby_column_list1205 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x80029000400000UL});
		public static readonly BitSet _orderby_column_in_orderby_column_list1208 = new BitSet(new ulong[]{0x2UL,0x0UL,0x10008000000UL});
		public static readonly BitSet _expression_in_orderby_column1228 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8000000UL});
		public static readonly BitSet _WS_in_orderby_column1231 = new BitSet(new ulong[]{0x80000004000200UL});
		public static readonly BitSet _orderby_direction_in_orderby_column1233 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASC_in_orderby_direction1258 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DESC_in_orderby_direction1267 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ORIG_in_orderby_direction1276 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _USE_in_use_command1294 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _WS_in_use_command1296 = new BitSet(new ulong[]{0x4000000000000000UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _file_in_use_command1298 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DECLARE_in_declare_command1320 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _WS_in_declare_command1322 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000UL});
		public static readonly BitSet _declaration_list_in_declare_command1324 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_in_declaration_list1341 = new BitSet(new ulong[]{0x2UL,0x0UL,0x10008000000UL});
		public static readonly BitSet _WS_in_declaration_list1344 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000000UL});
		public static readonly BitSet _168_in_declaration_list1347 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8400000UL});
		public static readonly BitSet _WS_in_declaration_list1349 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000UL});
		public static readonly BitSet _declaration_in_declaration_list1352 = new BitSet(new ulong[]{0x2UL,0x0UL,0x10008000000UL});
		public static readonly BitSet _variable_in_declaration1376 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _WS_in_declaration1378 = new BitSet(new ulong[]{0x100UL,0x20UL});
		public static readonly BitSet _AS_in_declaration1381 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _WS_in_declaration1383 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _datatype_in_declaration1387 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CREATE_in_create_view_command1412 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _WS_in_create_view_command1414 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000UL});
		public static readonly BitSet _VIEW_in_create_view_command1416 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _WS_in_create_view_command1418 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _view_name_in_create_view_command1420 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1008000000UL});
		public static readonly BitSet _WS_in_create_view_command1423 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000UL});
		public static readonly BitSet _164_in_create_view_command1426 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000UL});
		public static readonly BitSet _declaration_list_in_create_view_command1428 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000UL});
		public static readonly BitSet _165_in_create_view_command1430 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _WS_in_create_view_command1434 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _AS_in_create_view_command1436 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _WS_in_create_view_command1438 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _select_command_in_create_view_command1440 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DROP_in_drop_view_command1466 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _WS_in_drop_view_command1468 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000UL});
		public static readonly BitSet _VIEW_in_drop_view_command1470 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _WS_in_drop_view_command1472 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _view_name_in_drop_view_command1474 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_view_name1494 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DROP_in_drop_table_command1516 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _WS_in_drop_table_command1518 = new BitSet(new ulong[]{0x0UL,0x8UL});
		public static readonly BitSet _TABLE_in_drop_table_command1520 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _WS_in_drop_table_command1522 = new BitSet(new ulong[]{0x4000000000000000UL,0x0UL,0x8000000000000UL});
		public static readonly BitSet _file_in_drop_table_command1524 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SET_in_set_command1548 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _WS_in_set_command1550 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000UL});
		public static readonly BitSet _variable_in_set_command1552 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000008000000UL});
		public static readonly BitSet _WS_in_set_command1554 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000000UL});
		public static readonly BitSet _176_in_set_command1557 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x80029008400000UL});
		public static readonly BitSet _WS_in_set_command1559 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x80029000400000UL});
		public static readonly BitSet _expression_in_set_command1562 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_expression_list1587 = new BitSet(new ulong[]{0x2UL,0x0UL,0x10008000000UL});
		public static readonly BitSet _WS_in_expression_list1590 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000000UL});
		public static readonly BitSet _168_in_expression_list1593 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x80029008400000UL});
		public static readonly BitSet _WS_in_expression_list1595 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x80029000400000UL});
		public static readonly BitSet _expression_in_expression_list1598 = new BitSet(new ulong[]{0x2UL,0x0UL,0x10008000000UL});
		public static readonly BitSet _expression_list_in_expression_list_or_select_command1621 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _select_command_in_expression_list_or_select_command1625 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_7_in_expression1637 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_6_in_expression_71653 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8000000UL});
		public static readonly BitSet _WS_in_expression_71660 = new BitSet(new ulong[]{0x25420000000800UL,0x0UL,0x7E00380000000UL});
		public static readonly BitSet _op_7_in_expression_71665 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _WS_in_expression_71667 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x80029000400000UL});
		public static readonly BitSet _expression_6_in_expression_71671 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8000000UL});
		public static readonly BitSet _IN_in_expression_71690 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1008000000UL});
		public static readonly BitSet _WS_in_expression_71692 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000UL});
		public static readonly BitSet _164_in_expression_71695 = new BitSet(new ulong[]{0x500C000201CCC000UL,0x23UL,0x80029008400000UL});
		public static readonly BitSet _WS_in_expression_71697 = new BitSet(new ulong[]{0x500C000201CCC000UL,0x23UL,0x80029000400000UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_71700 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2008000000UL});
		public static readonly BitSet _WS_in_expression_71702 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000UL});
		public static readonly BitSet _165_in_expression_71705 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8000000UL});
		public static readonly BitSet _NOT_in_expression_71723 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _WS_in_expression_71725 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _IN_in_expression_71727 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1008000000UL});
		public static readonly BitSet _WS_in_expression_71729 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000UL});
		public static readonly BitSet _164_in_expression_71732 = new BitSet(new ulong[]{0x500C000201CCC000UL,0x23UL,0x80029008400000UL});
		public static readonly BitSet _WS_in_expression_71734 = new BitSet(new ulong[]{0x500C000201CCC000UL,0x23UL,0x80029000400000UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_71738 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2008000000UL});
		public static readonly BitSet _WS_in_expression_71741 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000UL});
		public static readonly BitSet _165_in_expression_71744 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8000000UL});
		public static readonly BitSet _op_4_in_expression_71762 = new BitSet(new ulong[]{0x8000000000000080UL,0x0UL,0x8000000UL});
		public static readonly BitSet _WS_in_expression_71764 = new BitSet(new ulong[]{0x8000000000000080UL});
		public static readonly BitSet _SOME_in_expression_71768 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1008000000UL});
		public static readonly BitSet _ANY_in_expression_71772 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1008000000UL});
		public static readonly BitSet _WS_in_expression_71775 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000UL});
		public static readonly BitSet _164_in_expression_71778 = new BitSet(new ulong[]{0x500C000201CCC000UL,0x23UL,0x80029000400000UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_71780 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000UL});
		public static readonly BitSet _165_in_expression_71782 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8000000UL});
		public static readonly BitSet _op_4_in_expression_71802 = new BitSet(new ulong[]{0x20UL,0x0UL,0x8000000UL});
		public static readonly BitSet _WS_in_expression_71804 = new BitSet(new ulong[]{0x20UL});
		public static readonly BitSet _ALL_in_expression_71807 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1008000000UL});
		public static readonly BitSet _WS_in_expression_71809 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000UL});
		public static readonly BitSet _164_in_expression_71812 = new BitSet(new ulong[]{0x500C000201CCC000UL,0x23UL,0x80029000400000UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_71814 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000UL});
		public static readonly BitSet _165_in_expression_71816 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8000000UL});
		public static readonly BitSet _OR_in_op_71846 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LIKE_in_op_71855 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_71864 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _WS_in_op_71866 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _LIKE_in_op_71868 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MATCH_in_op_71877 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_71886 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _WS_in_op_71888 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _MATCH_in_op_71890 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BETWEEN_in_op_71899 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_71908 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _WS_in_op_71910 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _BETWEEN_in_op_71912 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_5_in_expression_61931 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8000000UL});
		public static readonly BitSet _WS_in_expression_61938 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _op_6_in_expression_61940 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _WS_in_expression_61942 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x80029000400000UL});
		public static readonly BitSet _expression_5_in_expression_61946 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8000000UL});
		public static readonly BitSet _AND_in_op_61974 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _op_5_in_expression_51992 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _WS_in_expression_51994 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x80029000400000UL});
		public static readonly BitSet _expression_5_in_expression_51996 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_4_in_expression_52011 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_52022 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_3_in_expression_42041 = new BitSet(new ulong[]{0x2UL,0x0UL,0x7E00388000000UL});
		public static readonly BitSet _WS_in_expression_42048 = new BitSet(new ulong[]{0x0UL,0x0UL,0x7E00380000000UL});
		public static readonly BitSet _op_4_in_expression_42051 = new BitSet(new ulong[]{0x4008000201CCC000UL,0x23UL,0x80029008400000UL});
		public static readonly BitSet _WS_in_expression_42053 = new BitSet(new ulong[]{0x4008000201CCC000UL,0x23UL,0x80029000400000UL});
		public static readonly BitSet _expression_3_in_expression_42058 = new BitSet(new ulong[]{0x2UL,0x0UL,0x7E00388000000UL});
		public static readonly BitSet _176_in_op_42084 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _178_in_op_42093 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _174_in_op_42103 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _175_in_op_42113 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _160_in_op_42122 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _161_in_op_42131 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _159_in_op_42140 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _177_in_op_42149 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _173_in_op_42159 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_2_in_expression_32178 = new BitSet(new ulong[]{0x2UL,0x0UL,0x60028808000000UL});
		public static readonly BitSet _WS_in_expression_32185 = new BitSet(new ulong[]{0x0UL,0x0UL,0x60028800000000UL});
		public static readonly BitSet _op_3_in_expression_32188 = new BitSet(new ulong[]{0x4008000201CCC000UL,0x23UL,0x80029008400000UL});
		public static readonly BitSet _WS_in_expression_32190 = new BitSet(new ulong[]{0x4008000201CCC000UL,0x23UL,0x80029000400000UL});
		public static readonly BitSet _expression_2_in_expression_32195 = new BitSet(new ulong[]{0x2UL,0x0UL,0x60028808000000UL});
		public static readonly BitSet _167_in_op_32221 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _169_in_op_32230 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _163_in_op_32239 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _182_in_op_32248 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _181_in_op_32257 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_1_in_expression_22279 = new BitSet(new ulong[]{0x2UL,0x0UL,0x84408000000UL});
		public static readonly BitSet _WS_in_expression_22286 = new BitSet(new ulong[]{0x0UL,0x0UL,0x84400000000UL});
		public static readonly BitSet _op_2_in_expression_22289 = new BitSet(new ulong[]{0x4008000201CCC000UL,0x23UL,0x80029008400000UL});
		public static readonly BitSet _WS_in_expression_22291 = new BitSet(new ulong[]{0x4008000201CCC000UL,0x23UL,0x80029000400000UL});
		public static readonly BitSet _expression_1_in_expression_22296 = new BitSet(new ulong[]{0x2UL,0x0UL,0x84408000000UL});
		public static readonly BitSet _166_in_op_22322 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _171_in_op_22331 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _162_in_op_22340 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _op_1_in_expression_12356 = new BitSet(new ulong[]{0x4008000201CCC000UL,0x23UL,0x80029008400000UL});
		public static readonly BitSet _WS_in_expression_12358 = new BitSet(new ulong[]{0x4008000201CCC000UL,0x23UL,0x80029000400000UL});
		public static readonly BitSet _expression_1_in_expression_12361 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_atom_in_expression_12376 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _183_in_op_12386 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _167_in_op_12396 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _169_in_op_12405 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _number_in_expression_atom2420 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _string_in_expression_atom2433 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SYSTEMVAR_in_expression_atom2438 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_in_expression_atom2451 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _subquery_in_expression_atom2456 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _164_in_expression_atom2461 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x80029000400000UL});
		public static readonly BitSet _expression_in_expression_atom2463 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000UL});
		public static readonly BitSet _165_in_expression_atom2465 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functioncall_or_column_in_expression_atom2474 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _specialfunctioncall_in_expression_atom2479 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _case_in_expression_atom2484 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXISTS_in_expression_atom2489 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1008000000UL});
		public static readonly BitSet _WS_in_expression_atom2491 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000UL});
		public static readonly BitSet _164_in_expression_atom2494 = new BitSet(new ulong[]{0x1000000000000000UL,0x0UL,0x8000000UL});
		public static readonly BitSet _WS_in_expression_atom2496 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _select_command_in_expression_atom2499 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2008000000UL});
		public static readonly BitSet _WS_in_expression_atom2501 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000UL});
		public static readonly BitSet _165_in_expression_atom2504 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_functioncall_or_column2524 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1008000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2526 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000UL});
		public static readonly BitSet _164_in_functioncall_or_column2529 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x8002B008400000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2531 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x8002B000400000UL});
		public static readonly BitSet _expression_in_functioncall_or_column2535 = new BitSet(new ulong[]{0x0UL,0x0UL,0x12008000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2537 = new BitSet(new ulong[]{0x0UL,0x0UL,0x12000000000UL});
		public static readonly BitSet _168_in_functioncall_or_column2541 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x80029008400000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2543 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x80029000400000UL});
		public static readonly BitSet _expression_in_functioncall_or_column2546 = new BitSet(new ulong[]{0x0UL,0x0UL,0x12008000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2548 = new BitSet(new ulong[]{0x0UL,0x0UL,0x12000000000UL});
		public static readonly BitSet _165_in_functioncall_or_column2555 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COUNT_in_functioncall_or_column2571 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1008000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2573 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000UL});
		public static readonly BitSet _164_in_functioncall_or_column2576 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x80029008400000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2578 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x80029000400000UL});
		public static readonly BitSet _expression_in_functioncall_or_column2581 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2008000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2583 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000UL});
		public static readonly BitSet _165_in_functioncall_or_column2586 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COUNT_in_functioncall_or_column2601 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1008000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2603 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000UL});
		public static readonly BitSet _164_in_functioncall_or_column2606 = new BitSet(new ulong[]{0x10000000UL,0x0UL,0x8000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2608 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _DISTINCT_in_functioncall_or_column2611 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2613 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x80029000400000UL});
		public static readonly BitSet _expression_in_functioncall_or_column2615 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2008000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2617 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000UL});
		public static readonly BitSet _165_in_functioncall_or_column2620 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COUNT_in_functioncall_or_column2635 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1008000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2637 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000UL});
		public static readonly BitSet _164_in_functioncall_or_column2640 = new BitSet(new ulong[]{0x4000000000000000UL,0x0UL,0x4008000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2642 = new BitSet(new ulong[]{0x4000000000000000UL,0x0UL,0x4000000000UL});
		public static readonly BitSet _all_columns_in_functioncall_or_column2645 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2008000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2647 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000UL});
		public static readonly BitSet _165_in_functioncall_or_column2650 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COUNT_in_functioncall_or_column2665 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1008000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2667 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000UL});
		public static readonly BitSet _164_in_functioncall_or_column2670 = new BitSet(new ulong[]{0x10000000UL,0x0UL,0x8000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2672 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _DISTINCT_in_functioncall_or_column2675 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2677 = new BitSet(new ulong[]{0x4000000000000000UL,0x0UL,0x4000000000UL});
		public static readonly BitSet _all_columns_in_functioncall_or_column2679 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2008000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2681 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000UL});
		public static readonly BitSet _165_in_functioncall_or_column2684 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _table_alias_in_functioncall_or_column2702 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40008000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2704 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _170_in_functioncall_or_column2707 = new BitSet(new ulong[]{0x4000000000000000UL,0x0UL,0x8000000UL});
		public static readonly BitSet _WS_in_functioncall_or_column2709 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _column_name_in_functioncall_or_column2714 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SIMPLE_FILE_in_column_name2737 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SIMPLE_FILE_in_table_alias2748 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CONVERT_in_specialfunctioncall2768 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1008000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2770 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000UL});
		public static readonly BitSet _164_in_specialfunctioncall2773 = new BitSet(new ulong[]{0x0UL,0x20UL,0x8000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2775 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _TOKEN_in_specialfunctioncall2778 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10008000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2780 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000000UL});
		public static readonly BitSet _168_in_specialfunctioncall2783 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x80029008400000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2785 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x80029000400000UL});
		public static readonly BitSet _expression_in_specialfunctioncall2788 = new BitSet(new ulong[]{0x0UL,0x0UL,0x12008000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2790 = new BitSet(new ulong[]{0x0UL,0x0UL,0x12000000000UL});
		public static readonly BitSet _168_in_specialfunctioncall2794 = new BitSet(new ulong[]{0x0UL,0x1UL,0x8000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2796 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _STRING_in_specialfunctioncall2799 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2008000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2801 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000UL});
		public static readonly BitSet _165_in_specialfunctioncall2806 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CAST_in_specialfunctioncall2824 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1008000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2826 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000UL});
		public static readonly BitSet _164_in_specialfunctioncall2829 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x80029008400000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2831 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x80029000400000UL});
		public static readonly BitSet _expression_in_specialfunctioncall2834 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2836 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _AS_in_specialfunctioncall2838 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2840 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _datatype_in_specialfunctioncall2842 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2008000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2844 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000UL});
		public static readonly BitSet _165_in_specialfunctioncall2847 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DATEADD_in_specialfunctioncall2862 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1008000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2864 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000UL});
		public static readonly BitSet _164_in_specialfunctioncall2867 = new BitSet(new ulong[]{0x0UL,0x20UL,0x8000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2869 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _datepart_in_specialfunctioncall2872 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10008000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2874 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000000UL});
		public static readonly BitSet _168_in_specialfunctioncall2877 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x80029008400000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2879 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x80029000400000UL});
		public static readonly BitSet _expression_in_specialfunctioncall2882 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10008000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2884 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000000UL});
		public static readonly BitSet _168_in_specialfunctioncall2887 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x80029008400000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2889 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x80029000400000UL});
		public static readonly BitSet _expression_in_specialfunctioncall2892 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2008000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2894 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000UL});
		public static readonly BitSet _165_in_specialfunctioncall2897 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DATEDIFF_in_specialfunctioncall2915 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1008000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2917 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000UL});
		public static readonly BitSet _164_in_specialfunctioncall2920 = new BitSet(new ulong[]{0x0UL,0x20UL,0x8000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2922 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _datepart_in_specialfunctioncall2925 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10008000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2927 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000000UL});
		public static readonly BitSet _168_in_specialfunctioncall2930 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x80029008400000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2932 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x80029000400000UL});
		public static readonly BitSet _expression_in_specialfunctioncall2935 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10008000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2937 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000000UL});
		public static readonly BitSet _168_in_specialfunctioncall2940 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x80029008400000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2942 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x80029000400000UL});
		public static readonly BitSet _expression_in_specialfunctioncall2945 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2008000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2947 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000UL});
		public static readonly BitSet _165_in_specialfunctioncall2950 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DATEPART_in_specialfunctioncall2968 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1008000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2970 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000000UL});
		public static readonly BitSet _164_in_specialfunctioncall2973 = new BitSet(new ulong[]{0x0UL,0x20UL,0x8000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2975 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _datepart_in_specialfunctioncall2978 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10008000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2980 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000000UL});
		public static readonly BitSet _168_in_specialfunctioncall2983 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x80029008400000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2985 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x80029000400000UL});
		public static readonly BitSet _expression_in_specialfunctioncall2988 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2008000000UL});
		public static readonly BitSet _WS_in_specialfunctioncall2990 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000000UL});
		public static readonly BitSet _165_in_specialfunctioncall2993 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_datepart3017 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_number3037 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_string3045 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_datatype3065 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VARIABLE_in_variable3077 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CASE_in_case3097 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _WS_in_case3099 = new BitSet(new ulong[]{0x400C000381CCC000UL,0x23UL,0x80029002400000UL});
		public static readonly BitSet _expression_in_case3102 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _WS_in_case3104 = new BitSet(new ulong[]{0x180000000UL,0x0UL,0x2000000UL});
		public static readonly BitSet _case_when_in_case3109 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _WS_in_case3111 = new BitSet(new ulong[]{0x180000000UL,0x0UL,0x2000000UL});
		public static readonly BitSet _case_else_in_case3116 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _WS_in_case3118 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _END_in_case3122 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHEN_in_case_when3150 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _WS_in_case_when3152 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x80029000400000UL});
		public static readonly BitSet _expression_in_case_when3156 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _WS_in_case_when3158 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _THEN_in_case_when3160 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _WS_in_case_when3162 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x80029000400000UL});
		public static readonly BitSet _expression_in_case_when3166 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ELSE_in_case_else3191 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _WS_in_case_else3193 = new BitSet(new ulong[]{0x400C000201CCC000UL,0x23UL,0x80029000400000UL});
		public static readonly BitSet _expression_in_case_else3195 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  FxGqlLib 
